require "./../kernel.cr"
require "./../../foundation.cr"
require "./../threading.cr"
require "./../com.cr"
require "./../memory.cr"
require "./../system_information.cr"
require "./../../storage/file_system.cr"
require "./../time.cr"
require "./../com/structured_storage.cr"
require "./../ole.cr"
require "./../../security/win_trust.cr"

module Win32cr::System::Diagnostics::Debug
  {% if flag?(:arm) %}
  alias PGET_RUNTIME_FUNCTION_CALLBACK = Proc(UInt64, Void*, Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*)
  {% end %}

  alias PDEBUG_EXTENSION_INITIALIZE = Proc(UInt32*, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_UNINITIALIZE = Proc(Void)

  alias PDEBUG_EXTENSION_CANUNLOAD = Proc(Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_UNLOAD = Proc(Void)

  alias PDEBUG_EXTENSION_NOTIFY = Proc(UInt32, UInt64, Void)

  alias PDEBUG_EXTENSION_CALL = Proc(Void*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_KNOWN_STRUCT = Proc(UInt32, UInt64, Win32cr::Foundation::PSTR, UInt8*, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_KNOWN_STRUCT_EX = Proc(Void*, UInt32, UInt64, Win32cr::Foundation::PSTR, UInt8*, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_QUERY_VALUE_NAMES = Proc(Void*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_EXTENSION_PROVIDE_VALUE = Proc(Void*, UInt32, Win32cr::Foundation::PWSTR, UInt64*, UInt64*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_STACK_PROVIDER_BEGINTHREADSTACKRECONSTRUCTION = Proc(UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT)

  alias PDEBUG_STACK_PROVIDER_RECONSTRUCTSTACK = Proc(UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Win32cr::System::Diagnostics::Debug::STACK_SYM_FRAME_INFO**, UInt32*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_STACK_PROVIDER_FREESTACKSYMFRAMES = Proc(Win32cr::System::Diagnostics::Debug::STACK_SYM_FRAME_INFO*, Win32cr::Foundation::HRESULT)

  alias PDEBUG_STACK_PROVIDER_ENDTHREADSTACKRECONSTRUCTION = Proc(Win32cr::Foundation::HRESULT)

  alias PWINDBG_OUTPUT_ROUTINE = Proc(Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_GET_EXPRESSION = Proc(Win32cr::Foundation::PSTR, LibC::UIntPtrT)

  alias PWINDBG_GET_EXPRESSION32 = Proc(Win32cr::Foundation::PSTR, UInt32)

  alias PWINDBG_GET_EXPRESSION64 = Proc(Win32cr::Foundation::PSTR, UInt64)

  alias PWINDBG_GET_SYMBOL = Proc(Void*, Win32cr::Foundation::PSTR, LibC::UIntPtrT*, Void)

  alias PWINDBG_GET_SYMBOL32 = Proc(UInt32, Win32cr::Foundation::PSTR, UInt32*, Void)

  alias PWINDBG_GET_SYMBOL64 = Proc(UInt64, Win32cr::Foundation::PSTR, UInt64*, Void)

  alias PWINDBG_DISASM = Proc(LibC::UIntPtrT*, Win32cr::Foundation::PSTR, UInt32, UInt32)

  alias PWINDBG_DISASM32 = Proc(UInt32*, Win32cr::Foundation::PSTR, UInt32, UInt32)

  alias PWINDBG_DISASM64 = Proc(UInt64*, Win32cr::Foundation::PSTR, UInt32, UInt32)

  alias PWINDBG_CHECK_CONTROL_C = Proc(UInt32)

  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE = Proc(LibC::UIntPtrT, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 = Proc(UInt32, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE = Proc(LibC::UIntPtrT, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 = Proc(UInt32, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_GET_THREAD_CONTEXT_ROUTINE = Proc(UInt32, Win32cr::System::Diagnostics::Debug::CONTEXT*, UInt32, UInt32)

  alias PWINDBG_SET_THREAD_CONTEXT_ROUTINE = Proc(UInt32, Win32cr::System::Diagnostics::Debug::CONTEXT*, UInt32, UInt32)

  alias PWINDBG_IOCTL_ROUTINE = Proc(UInt16, Void*, UInt32, UInt32)

  alias PWINDBG_OLDKD_READ_PHYSICAL_MEMORY = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)

  alias PWINDBG_STACKTRACE_ROUTINE = Proc(UInt32, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::EXTSTACKTRACE*, UInt32, UInt32)

  alias PWINDBG_STACKTRACE_ROUTINE32 = Proc(UInt32, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::EXTSTACKTRACE32*, UInt32, UInt32)

  alias PWINDBG_STACKTRACE_ROUTINE64 = Proc(UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::EXTSTACKTRACE64*, UInt32, UInt32)

  alias PWINDBG_OLD_EXTENSION_ROUTINE = Proc(UInt32, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS*, Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_EXTENSION_ROUTINE = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE, UInt32, UInt32, Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_EXTENSION_ROUTINE32 = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE, UInt32, UInt32, Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_EXTENSION_ROUTINE64 = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE, UInt64, UInt32, Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_OLDKD_EXTENSION_ROUTINE = Proc(UInt32, Win32cr::System::Diagnostics::Debug::WINDBG_OLDKD_EXTENSION_APIS*, Win32cr::Foundation::PSTR, Void)

  alias PWINDBG_EXTENSION_DLL_INIT = Proc(Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS*, UInt16, UInt16, Void)

  alias PWINDBG_EXTENSION_DLL_INIT32 = Proc(Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, UInt16, UInt16, Void)

  alias PWINDBG_EXTENSION_DLL_INIT64 = Proc(Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, UInt16, UInt16, Void)

  alias PWINDBG_CHECK_VERSION = Proc(UInt32)

  alias PWINDBG_EXTENSION_API_VERSION = Proc(Win32cr::System::Diagnostics::Debug::EXT_API_VERSION*)

  alias PSYM_DUMP_FIELD_CALLBACK = Proc(Win32cr::System::Diagnostics::Debug::FIELD_INFO*, Void*, UInt32)

  {% if flag?(:x86_64) %}
  alias PGET_RUNTIME_FUNCTION_CALLBACK = Proc(UInt64, Void*, Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*)
  {% end %}

  alias PVECTORED_EXCEPTION_HANDLER = Proc(Win32cr::System::Diagnostics::Debug::EXCEPTION_POINTERS*, Int32)

  alias LPTOP_LEVEL_EXCEPTION_FILTER = Proc(Win32cr::System::Diagnostics::Debug::EXCEPTION_POINTERS*, Int32)

  alias PWAITCHAINCALLBACK = Proc(Void*, LibC::UIntPtrT, UInt32, UInt32*, Win32cr::System::Diagnostics::Debug::WAITCHAIN_NODE_INFO*, Int32*, Void)

  alias PCOGETCALLSTATE = Proc(Int32, UInt32*, Win32cr::Foundation::HRESULT)

  alias PCOGETACTIVATIONSTATE = Proc(LibC::GUID, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  alias MINIDUMP_CALLBACK_ROUTINE = Proc(Void*, Win32cr::System::Diagnostics::Debug::MINIDUMP_CALLBACK_INPUT*, Win32cr::System::Diagnostics::Debug::MINIDUMP_CALLBACK_OUTPUT*, Win32cr::Foundation::BOOL)

  alias PIMAGEHLP_STATUS_ROUTINE = Proc(Win32cr::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PIMAGEHLP_STATUS_ROUTINE32 = Proc(Win32cr::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PIMAGEHLP_STATUS_ROUTINE64 = Proc(Win32cr::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt64, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias DIGEST_FUNCTION = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::BOOL)

  alias PFIND_DEBUG_FILE_CALLBACK = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::BOOL)

  alias PFIND_DEBUG_FILE_CALLBACKW = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::BOOL)

  alias PFINDFILEINPATHCALLBACK = Proc(Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::BOOL)

  alias PFINDFILEINPATHCALLBACKW = Proc(Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::BOOL)

  alias PFIND_EXE_FILE_CALLBACK = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::BOOL)

  alias PFIND_EXE_FILE_CALLBACKW = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::BOOL)

  alias PENUMDIRTREE_CALLBACK = Proc(Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::BOOL)

  alias PENUMDIRTREE_CALLBACKW = Proc(Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::BOOL)

  alias PREAD_PROCESS_MEMORY_ROUTINE64 = Proc(Win32cr::Foundation::HANDLE, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::BOOL)

  alias PFUNCTION_TABLE_ACCESS_ROUTINE64 = Proc(Win32cr::Foundation::HANDLE, UInt64, Void*)

  alias PGET_MODULE_BASE_ROUTINE64 = Proc(Win32cr::Foundation::HANDLE, UInt64, UInt64)

  alias PTRANSLATE_ADDRESS_ROUTINE64 = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE, Win32cr::System::Diagnostics::Debug::ADDRESS64*, UInt64)

  alias PSYM_ENUMMODULES_CALLBACK64 = Proc(Win32cr::Foundation::PSTR, UInt64, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMMODULES_CALLBACKW64 = Proc(Win32cr::Foundation::PWSTR, UInt64, Void*, Win32cr::Foundation::BOOL)

  alias PENUMLOADED_MODULES_CALLBACK64 = Proc(Win32cr::Foundation::PSTR, UInt64, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PENUMLOADED_MODULES_CALLBACKW64 = Proc(Win32cr::Foundation::PWSTR, UInt64, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMSYMBOLS_CALLBACK64 = Proc(Win32cr::Foundation::PSTR, UInt64, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMSYMBOLS_CALLBACK64W = Proc(Win32cr::Foundation::PWSTR, UInt64, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PSYMBOL_REGISTERED_CALLBACK64 = Proc(Win32cr::Foundation::HANDLE, UInt32, UInt64, UInt64, Win32cr::Foundation::BOOL)

  alias PSYMBOL_FUNCENTRY_CALLBACK = Proc(Win32cr::Foundation::HANDLE, UInt32, Void*, Void*)

  alias PSYMBOL_FUNCENTRY_CALLBACK64 = Proc(Win32cr::Foundation::HANDLE, UInt64, UInt64, Void*)

  alias PSYM_ENUMSOURCEFILES_CALLBACK = Proc(Win32cr::System::Diagnostics::Debug::SOURCEFILE*, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMSOURCEFILES_CALLBACKW = Proc(Win32cr::System::Diagnostics::Debug::SOURCEFILEW*, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMLINES_CALLBACK = Proc(Win32cr::System::Diagnostics::Debug::SRCCODEINFO*, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMLINES_CALLBACKW = Proc(Win32cr::System::Diagnostics::Debug::SRCCODEINFOW*, Void*, Win32cr::Foundation::BOOL)

  alias PENUMSOURCEFILETOKENSCALLBACK = Proc(Void*, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMPROCESSES_CALLBACK = Proc(Win32cr::Foundation::HANDLE, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMERATESYMBOLS_CALLBACK = Proc(Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PSYM_ENUMERATESYMBOLS_CALLBACKW = Proc(Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias SYMADDSOURCESTREAM = Proc(Win32cr::Foundation::HANDLE, UInt64, Win32cr::Foundation::PSTR, UInt8*, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias SYMADDSOURCESTREAMA = Proc(Win32cr::Foundation::HANDLE, UInt64, Win32cr::Foundation::PSTR, UInt8*, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PDBGHELP_CREATE_USER_DUMP_CALLBACK = Proc(UInt32, Void**, UInt32*, Void*, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPROC = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERBYINDEXPROC = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERBYINDEXPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERBYINDEXPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVEROPENPROC = Proc(Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERCLOSEPROC = Proc(Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSETOPTIONSPROC = Proc(LibC::UIntPtrT, UInt64, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSETOPTIONSWPROC = Proc(LibC::UIntPtrT, UInt64, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERCALLBACKPROC = Proc(LibC::UIntPtrT, UInt64, UInt64, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETOPTIONSPROC = Proc(LibC::UIntPtrT)

  alias PSYMBOLSERVERPINGPROC = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPINGPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPINGPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETVERSION = Proc(Win32cr::System::Diagnostics::Debug::API_VERSION*, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERDELTANAME = Proc(Win32cr::Foundation::PSTR, Void*, UInt32, UInt32, Void*, UInt32, UInt32, Win32cr::Foundation::PSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERDELTANAMEW = Proc(Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, Void*, UInt32, UInt32, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETSUPPLEMENT = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETSUPPLEMENTW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSTORESUPPLEMENT = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSTORESUPPLEMENTW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETINDEXSTRING = Proc(Void*, UInt32, UInt32, Win32cr::Foundation::PSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETINDEXSTRINGW = Proc(Void*, UInt32, UInt32, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSTOREFILE = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PSTR, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSTOREFILEW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERISSTORE = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERISSTOREW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERVERSION = Proc(UInt32)

  alias PSYMBOLSERVERMESSAGEPROC = Proc(LibC::UIntPtrT, UInt64, UInt64, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERWEXPROC = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::System::Diagnostics::Debug::SYMSRV_EXTENDED_OUTPUT_DATA*, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERPINGPROCWEX = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERGETOPTIONDATAPROC = Proc(LibC::UIntPtrT, UInt64*, Win32cr::Foundation::BOOL)

  alias PSYMBOLSERVERSETHTTPAUTHHEADER = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias LPCALL_BACK_USER_INTERRUPT_ROUTINE = Proc(UInt32)

  alias WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER = Proc(Void*, UInt32, Win32cr::Foundation::NTSTATUS)

  alias WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER = Proc(Void*, Void)

  alias WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER = Proc(Void*, UInt32*, Win32cr::Foundation::NTSTATUS)

  {% if flag?(:i386) %}
  alias PREAD_PROCESS_MEMORY_ROUTINE = Proc(Win32cr::Foundation::HANDLE, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::BOOL)
  {% end %}

  {% if flag?(:i386) %}
  alias PFUNCTION_TABLE_ACCESS_ROUTINE = Proc(Win32cr::Foundation::HANDLE, UInt32, Void*)
  {% end %}

  {% if flag?(:i386) %}
  alias PGET_MODULE_BASE_ROUTINE = Proc(Win32cr::Foundation::HANDLE, UInt32, UInt32)
  {% end %}

  {% if flag?(:i386) %}
  alias PTRANSLATE_ADDRESS_ROUTINE = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE, Win32cr::System::Diagnostics::Debug::ADDRESS*, UInt32)
  {% end %}

  {% if flag?(:i386) %}
  alias PSYM_ENUMMODULES_CALLBACK = Proc(Win32cr::Foundation::PSTR, UInt32, Void*, Win32cr::Foundation::BOOL)
  {% end %}

  {% if flag?(:i386) %}
  alias PSYM_ENUMSYMBOLS_CALLBACK = Proc(Win32cr::Foundation::PSTR, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)
  {% end %}

  {% if flag?(:i386) %}
  alias PSYM_ENUMSYMBOLS_CALLBACKW = Proc(Win32cr::Foundation::PWSTR, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)
  {% end %}

  {% if flag?(:i386) %}
  alias PENUMLOADED_MODULES_CALLBACK = Proc(Win32cr::Foundation::PSTR, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)
  {% end %}

  {% if flag?(:i386) %}
  alias PSYMBOL_REGISTERED_CALLBACK = Proc(Win32cr::Foundation::HANDLE, UInt32, Void*, Void*, Win32cr::Foundation::BOOL)
  {% end %}

  WOW64_CONTEXT_i386 = 65536_u32
  WOW64_CONTEXT_i486 = 65536_u32
  WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728_u32
  WOW64_CONTEXT_SERVICE_ACTIVE = 268435456_u32
  WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824_u32
  WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648_u32
  WOW64_SIZE_OF_80387_REGISTERS = 80_u32
  WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512_u32
  ERROR_DBG_CANCELLED = 3221226695_u32
  ERROR_DBG_TIMEOUT = 3221226932_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS = 1_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 2_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS = 4_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND = 1_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 2_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL = 4_u32
  DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3_u32
  DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4_u32
  DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5_u32
  DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6_u32
  DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7_u32
  DEBUG_REQUEST_TARGET_CAN_DETACH = 8_u32
  DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9_u32
  DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10_u32
  DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11_u32
  DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12_u32
  DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13_u32
  DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14_u32
  DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15_u32
  DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16_u32
  DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17_u32
  DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18_u32
  DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19_u32
  DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION = 20_u32
  DEBUG_REQUEST_GET_DUMP_HEADER = 21_u32
  DEBUG_REQUEST_SET_DUMP_HEADER = 22_u32
  DEBUG_REQUEST_MIDORI = 23_u32
  DEBUG_REQUEST_PROCESS_DESCRIPTORS = 24_u32
  DEBUG_REQUEST_MISC_INFORMATION = 25_u32
  DEBUG_REQUEST_OPEN_PROCESS_TOKEN = 26_u32
  DEBUG_REQUEST_OPEN_THREAD_TOKEN = 27_u32
  DEBUG_REQUEST_DUPLICATE_TOKEN = 28_u32
  DEBUG_REQUEST_QUERY_INFO_TOKEN = 29_u32
  DEBUG_REQUEST_CLOSE_TOKEN = 30_u32
  DEBUG_REQUEST_WOW_PROCESS = 31_u32
  DEBUG_REQUEST_WOW_MODULE = 32_u32
  DEBUG_LIVE_USER_NON_INVASIVE = 33_u32
  DEBUG_REQUEST_RESUME_THREAD = 34_u32
  DEBUG_REQUEST_INLINE_QUERY = 35_u32
  DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE = 36_u32
  DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION = 37_u32
  DEBUG_REQUEST_GET_MODULE_ARCHITECTURE = 38_u32
  DEBUG_SRCFILE_SYMBOL_TOKEN = 0_u32
  DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1_u32
  DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO = 2_u32
  DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0_u32
  DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1_u32
  DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2_u32
  DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3_u32
  DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0_u32
  DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1_u32
  DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2_u32
  DEBUG_TBINFO_EXIT_STATUS = 1_u32
  DEBUG_TBINFO_PRIORITY_CLASS = 2_u32
  DEBUG_TBINFO_PRIORITY = 4_u32
  DEBUG_TBINFO_TIMES = 8_u32
  DEBUG_TBINFO_START_OFFSET = 16_u32
  DEBUG_TBINFO_AFFINITY = 32_u32
  DEBUG_TBINFO_ALL = 63_u32
  DEBUG_BREAKPOINT_CODE = 0_u32
  DEBUG_BREAKPOINT_DATA = 1_u32
  DEBUG_BREAKPOINT_TIME = 2_u32
  DEBUG_BREAKPOINT_INLINE = 3_u32
  DEBUG_BREAKPOINT_GO_ONLY = 1_u32
  DEBUG_BREAKPOINT_DEFERRED = 2_u32
  DEBUG_BREAKPOINT_ENABLED = 4_u32
  DEBUG_BREAKPOINT_ADDER_ONLY = 8_u32
  DEBUG_BREAKPOINT_ONE_SHOT = 16_u32
  DEBUG_BREAK_READ = 1_u32
  DEBUG_BREAK_WRITE = 2_u32
  DEBUG_BREAK_EXECUTE = 4_u32
  DEBUG_BREAK_IO = 8_u32
  DEBUG_ATTACH_KERNEL_CONNECTION = 0_u32
  DEBUG_ATTACH_LOCAL_KERNEL = 1_u32
  DEBUG_ATTACH_EXDI_DRIVER = 2_u32
  DEBUG_ATTACH_INSTALL_DRIVER = 4_u32
  DEBUG_GET_PROC_DEFAULT = 0_u32
  DEBUG_GET_PROC_FULL_MATCH = 1_u32
  DEBUG_GET_PROC_ONLY_MATCH = 2_u32
  DEBUG_GET_PROC_SERVICE_NAME = 4_u32
  DEBUG_PROC_DESC_DEFAULT = 0_u32
  DEBUG_PROC_DESC_NO_PATHS = 1_u32
  DEBUG_PROC_DESC_NO_SERVICES = 2_u32
  DEBUG_PROC_DESC_NO_MTS_PACKAGES = 4_u32
  DEBUG_PROC_DESC_NO_COMMAND_LINE = 8_u32
  DEBUG_PROC_DESC_NO_SESSION_ID = 16_u32
  DEBUG_PROC_DESC_NO_USER_NAME = 32_u32
  DEBUG_PROC_DESC_WITH_PACKAGEFAMILY = 64_u32
  DEBUG_ATTACH_DEFAULT = 0_u32
  DEBUG_ATTACH_NONINVASIVE = 1_u32
  DEBUG_ATTACH_EXISTING = 2_u32
  DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND = 4_u32
  DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 8_u32
  DEBUG_ATTACH_INVASIVE_RESUME_PROCESS = 16_u32
  DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 32_u32
  DEBUG_ECREATE_PROCESS_DEFAULT = 0_u32
  DEBUG_ECREATE_PROCESS_INHERIT_HANDLES = 1_u32
  DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS = 2_u32
  DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 4_u32
  DEBUG_PROCESS_DETACH_ON_EXIT = 1_u32
  DEBUG_PROCESS_ONLY_THIS_PROCESS = 2_u32
  DEBUG_CONNECT_SESSION_DEFAULT = 0_u32
  DEBUG_CONNECT_SESSION_NO_VERSION = 1_u32
  DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 2_u32
  DEBUG_SERVERS_DEBUGGER = 1_u32
  DEBUG_SERVERS_PROCESS = 2_u32
  DEBUG_SERVERS_ALL = 3_u32
  DEBUG_END_PASSIVE = 0_u32
  DEBUG_END_ACTIVE_TERMINATE = 1_u32
  DEBUG_END_ACTIVE_DETACH = 2_u32
  DEBUG_END_REENTRANT = 3_u32
  DEBUG_END_DISCONNECT = 4_u32
  DEBUG_OUTPUT_NORMAL = 1_u32
  DEBUG_OUTPUT_ERROR = 2_u32
  DEBUG_OUTPUT_WARNING = 4_u32
  DEBUG_OUTPUT_VERBOSE = 8_u32
  DEBUG_OUTPUT_PROMPT = 16_u32
  DEBUG_OUTPUT_PROMPT_REGISTERS = 32_u32
  DEBUG_OUTPUT_EXTENSION_WARNING = 64_u32
  DEBUG_OUTPUT_DEBUGGEE = 128_u32
  DEBUG_OUTPUT_DEBUGGEE_PROMPT = 256_u32
  DEBUG_OUTPUT_SYMBOLS = 512_u32
  DEBUG_OUTPUT_STATUS = 1024_u32
  DEBUG_OUTPUT_XML = 2048_u32
  DEBUG_IOUTPUT_KD_PROTOCOL = 2147483648_u32
  DEBUG_IOUTPUT_REMOTING = 1073741824_u32
  DEBUG_IOUTPUT_BREAKPOINT = 536870912_u32
  DEBUG_IOUTPUT_EVENT = 268435456_u32
  DEBUG_IOUTPUT_ADDR_TRANSLATE = 134217728_u32
  DEBUG_OUTPUT_IDENTITY_DEFAULT = 0_u32
  DEBUG_CLIENT_UNKNOWN = 0_u32
  DEBUG_CLIENT_VSINT = 1_u32
  DEBUG_CLIENT_NTSD = 2_u32
  DEBUG_CLIENT_NTKD = 3_u32
  DEBUG_CLIENT_CDB = 4_u32
  DEBUG_CLIENT_KD = 5_u32
  DEBUG_CLIENT_WINDBG = 6_u32
  DEBUG_CLIENT_WINIDE = 7_u32
  DEBUG_FORMAT_DEFAULT = 0_u32
  DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES = 268435456_u32
  DEBUG_FORMAT_WRITE_CAB = 536870912_u32
  DEBUG_FORMAT_CAB_SECONDARY_FILES = 1073741824_u32
  DEBUG_FORMAT_NO_OVERWRITE = 2147483648_u32
  DEBUG_FORMAT_USER_SMALL_FULL_MEMORY = 1_u32
  DEBUG_FORMAT_USER_SMALL_HANDLE_DATA = 2_u32
  DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES = 4_u32
  DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY = 8_u32
  DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS = 16_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY = 32_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_PATHS = 64_u32
  DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA = 128_u32
  DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 256_u32
  DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA = 512_u32
  DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO = 1024_u32
  DEBUG_FORMAT_USER_SMALL_THREAD_INFO = 2048_u32
  DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS = 4096_u32
  DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE = 8192_u32
  DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE = 16384_u32
  DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS = 32768_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE = 65536_u32
  DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT = 131072_u32
  DEBUG_FORMAT_USER_SMALL_IPT_TRACE = 262144_u32
  DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM = 134217728_u32
  DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES = 268435456_u32
  DEBUG_DUMP_FILE_BASE = 4294967295_u32
  DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0_u32
  DEBUG_DUMP_FILE_LOAD_FAILED_INDEX = 4294967295_u32
  DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 4294967294_u32
  DEBUG_STATUS_NO_CHANGE = 0_u32
  DEBUG_STATUS_GO = 1_u32
  DEBUG_STATUS_GO_HANDLED = 2_u32
  DEBUG_STATUS_GO_NOT_HANDLED = 3_u32
  DEBUG_STATUS_STEP_OVER = 4_u32
  DEBUG_STATUS_STEP_INTO = 5_u32
  DEBUG_STATUS_BREAK = 6_u32
  DEBUG_STATUS_NO_DEBUGGEE = 7_u32
  DEBUG_STATUS_STEP_BRANCH = 8_u32
  DEBUG_STATUS_IGNORE_EVENT = 9_u32
  DEBUG_STATUS_RESTART_REQUESTED = 10_u32
  DEBUG_STATUS_REVERSE_GO = 11_u32
  DEBUG_STATUS_REVERSE_STEP_BRANCH = 12_u32
  DEBUG_STATUS_REVERSE_STEP_OVER = 13_u32
  DEBUG_STATUS_REVERSE_STEP_INTO = 14_u32
  DEBUG_STATUS_OUT_OF_SYNC = 15_u32
  DEBUG_STATUS_WAIT_INPUT = 16_u32
  DEBUG_STATUS_TIMEOUT = 17_u32
  DEBUG_STATUS_MASK = 31_u32
  DEBUG_STATUS_INSIDE_WAIT = 4294967296_u64
  DEBUG_STATUS_WAIT_TIMEOUT = 8589934592_u64
  DEBUG_OUTCTL_THIS_CLIENT = 0_u32
  DEBUG_OUTCTL_ALL_CLIENTS = 1_u32
  DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 2_u32
  DEBUG_OUTCTL_IGNORE = 3_u32
  DEBUG_OUTCTL_LOG_ONLY = 4_u32
  DEBUG_OUTCTL_SEND_MASK = 7_u32
  DEBUG_OUTCTL_NOT_LOGGED = 8_u32
  DEBUG_OUTCTL_OVERRIDE_MASK = 16_u32
  DEBUG_OUTCTL_DML = 32_u32
  DEBUG_OUTCTL_AMBIENT_DML = 4294967294_u32
  DEBUG_OUTCTL_AMBIENT_TEXT = 4294967295_u32
  DEBUG_OUTCTL_AMBIENT = 4294967295_u32
  DEBUG_INTERRUPT_ACTIVE = 0_u32
  DEBUG_INTERRUPT_PASSIVE = 1_u32
  DEBUG_INTERRUPT_EXIT = 2_u32
  DEBUG_CURRENT_DEFAULT = 15_u32
  DEBUG_CURRENT_SYMBOL = 1_u32
  DEBUG_CURRENT_DISASM = 2_u32
  DEBUG_CURRENT_REGISTERS = 4_u32
  DEBUG_CURRENT_SOURCE_LINE = 8_u32
  DEBUG_DISASM_EFFECTIVE_ADDRESS = 1_u32
  DEBUG_DISASM_MATCHING_SYMBOLS = 2_u32
  DEBUG_DISASM_SOURCE_LINE_NUMBER = 4_u32
  DEBUG_DISASM_SOURCE_FILE_NAME = 8_u32
  DEBUG_LEVEL_SOURCE = 0_u32
  DEBUG_LEVEL_ASSEMBLY = 1_u32
  DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION = 1_u32
  DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS = 2_u32
  DEBUG_ENGOPT_ALLOW_NETWORK_PATHS = 4_u32
  DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS = 8_u32
  DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS = 16_u32
  DEBUG_ENGOPT_INITIAL_BREAK = 32_u32
  DEBUG_ENGOPT_INITIAL_MODULE_BREAK = 64_u32
  DEBUG_ENGOPT_FINAL_BREAK = 128_u32
  DEBUG_ENGOPT_NO_EXECUTE_REPEAT = 256_u32
  DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 512_u32
  DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 1024_u32
  DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS = 2048_u32
  DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS = 4096_u32
  DEBUG_ENGOPT_KD_QUIET_MODE = 8192_u32
  DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT = 16384_u32
  DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD = 32768_u32
  DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS = 65536_u32
  DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 131072_u32
  DEBUG_ENGOPT_PREFER_DML = 262144_u32
  DEBUG_ENGOPT_DISABLESQM = 524288_u32
  DEBUG_ENGOPT_DISABLE_STEPLINES_OPTIONS = 2097152_u32
  DEBUG_ENGOPT_DEBUGGING_SENSITIVE_DATA = 4194304_u32
  DEBUG_ENGOPT_PREFER_TRACE_FILES = 8388608_u32
  DEBUG_ENGOPT_ALL = 15728639_u32
  DEBUG_ANY_ID = 4294967295_u32
  DBG_FRAME_DEFAULT = 0_u32
  DBG_FRAME_IGNORE_INLINE = 4294967295_u32
  STACK_FRAME_TYPE_INIT = 0_u32
  STACK_FRAME_TYPE_STACK = 1_u32
  STACK_FRAME_TYPE_INLINE = 2_u32
  STACK_FRAME_TYPE_RA = 128_u32
  STACK_FRAME_TYPE_IGNORE = 255_u32
  DEBUG_STACK_ARGUMENTS = 1_u32
  DEBUG_STACK_FUNCTION_INFO = 2_u32
  DEBUG_STACK_SOURCE_LINE = 4_u32
  DEBUG_STACK_FRAME_ADDRESSES = 8_u32
  DEBUG_STACK_COLUMN_NAMES = 16_u32
  DEBUG_STACK_NONVOLATILE_REGISTERS = 32_u32
  DEBUG_STACK_FRAME_NUMBERS = 64_u32
  DEBUG_STACK_PARAMETERS = 128_u32
  DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 256_u32
  DEBUG_STACK_FRAME_MEMORY_USAGE = 512_u32
  DEBUG_STACK_PARAMETERS_NEWLINE = 1024_u32
  DEBUG_STACK_DML = 2048_u32
  DEBUG_STACK_FRAME_OFFSETS = 4096_u32
  DEBUG_STACK_PROVIDER = 8192_u32
  DEBUG_STACK_FRAME_ARCH = 16384_u32
  DEBUG_CLASS_UNINITIALIZED = 0_u32
  DEBUG_CLASS_KERNEL = 1_u32
  DEBUG_CLASS_USER_WINDOWS = 2_u32
  DEBUG_CLASS_IMAGE_FILE = 3_u32
  DEBUG_DUMP_SMALL = 1024_u32
  DEBUG_DUMP_DEFAULT = 1025_u32
  DEBUG_DUMP_FULL = 1026_u32
  DEBUG_DUMP_IMAGE_FILE = 1027_u32
  DEBUG_DUMP_TRACE_LOG = 1028_u32
  DEBUG_DUMP_WINDOWS_CE = 1029_u32
  DEBUG_DUMP_ACTIVE = 1030_u32
  DEBUG_KERNEL_CONNECTION = 0_u32
  DEBUG_KERNEL_LOCAL = 1_u32
  DEBUG_KERNEL_EXDI_DRIVER = 2_u32
  DEBUG_KERNEL_IDNA = 3_u32
  DEBUG_KERNEL_INSTALL_DRIVER = 4_u32
  DEBUG_KERNEL_REPT = 5_u32
  DEBUG_KERNEL_SMALL_DUMP = 1024_u32
  DEBUG_KERNEL_DUMP = 1025_u32
  DEBUG_KERNEL_ACTIVE_DUMP = 1030_u32
  DEBUG_KERNEL_FULL_DUMP = 1026_u32
  DEBUG_KERNEL_TRACE_LOG = 1028_u32
  DEBUG_USER_WINDOWS_PROCESS = 0_u32
  DEBUG_USER_WINDOWS_PROCESS_SERVER = 1_u32
  DEBUG_USER_WINDOWS_IDNA = 2_u32
  DEBUG_USER_WINDOWS_REPT = 3_u32
  DEBUG_USER_WINDOWS_SMALL_DUMP = 1024_u32
  DEBUG_USER_WINDOWS_DUMP = 1025_u32
  DEBUG_USER_WINDOWS_DUMP_WINDOWS_CE = 1029_u32
  DEBUG_EXTENSION_AT_ENGINE = 0_u32
  DEBUG_EXECUTE_DEFAULT = 0_u32
  DEBUG_EXECUTE_ECHO = 1_u32
  DEBUG_EXECUTE_NOT_LOGGED = 2_u32
  DEBUG_EXECUTE_NO_REPEAT = 4_u32
  DEBUG_EXECUTE_USER_TYPED = 8_u32
  DEBUG_EXECUTE_USER_CLICKED = 16_u32
  DEBUG_EXECUTE_EXTENSION = 32_u32
  DEBUG_EXECUTE_INTERNAL = 64_u32
  DEBUG_EXECUTE_SCRIPT = 128_u32
  DEBUG_EXECUTE_TOOLBAR = 256_u32
  DEBUG_EXECUTE_MENU = 512_u32
  DEBUG_EXECUTE_HOTKEY = 1024_u32
  DEBUG_EXECUTE_EVENT = 2048_u32
  DEBUG_FILTER_CREATE_THREAD = 0_u32
  DEBUG_FILTER_EXIT_THREAD = 1_u32
  DEBUG_FILTER_CREATE_PROCESS = 2_u32
  DEBUG_FILTER_EXIT_PROCESS = 3_u32
  DEBUG_FILTER_LOAD_MODULE = 4_u32
  DEBUG_FILTER_UNLOAD_MODULE = 5_u32
  DEBUG_FILTER_SYSTEM_ERROR = 6_u32
  DEBUG_FILTER_INITIAL_BREAKPOINT = 7_u32
  DEBUG_FILTER_INITIAL_MODULE_LOAD = 8_u32
  DEBUG_FILTER_DEBUGGEE_OUTPUT = 9_u32
  DEBUG_FILTER_BREAK = 0_u32
  DEBUG_FILTER_SECOND_CHANCE_BREAK = 1_u32
  DEBUG_FILTER_OUTPUT = 2_u32
  DEBUG_FILTER_IGNORE = 3_u32
  DEBUG_FILTER_REMOVE = 4_u32
  DEBUG_FILTER_GO_HANDLED = 0_u32
  DEBUG_FILTER_GO_NOT_HANDLED = 1_u32
  DEBUG_WAIT_DEFAULT = 0_u32
  DEBUG_VALUE_INVALID = 0_u32
  DEBUG_VALUE_INT8 = 1_u32
  DEBUG_VALUE_INT16 = 2_u32
  DEBUG_VALUE_INT32 = 3_u32
  DEBUG_VALUE_INT64 = 4_u32
  DEBUG_VALUE_FLOAT32 = 5_u32
  DEBUG_VALUE_FLOAT64 = 6_u32
  DEBUG_VALUE_FLOAT80 = 7_u32
  DEBUG_VALUE_FLOAT82 = 8_u32
  DEBUG_VALUE_FLOAT128 = 9_u32
  DEBUG_VALUE_VECTOR64 = 10_u32
  DEBUG_VALUE_VECTOR128 = 11_u32
  DEBUG_VALUE_TYPES = 12_u32
  DEBUG_OUT_TEXT_REPL_DEFAULT = 0_u32
  DEBUG_ASMOPT_DEFAULT = 0_u32
  DEBUG_ASMOPT_VERBOSE = 1_u32
  DEBUG_ASMOPT_NO_CODE_BYTES = 2_u32
  DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 4_u32
  DEBUG_ASMOPT_SOURCE_LINE_NUMBER = 8_u32
  DEBUG_EXPR_MASM = 0_u32
  DEBUG_EXPR_CPLUSPLUS = 1_u32
  DEBUG_EINDEX_NAME = 0_u32
  DEBUG_EINDEX_FROM_START = 0_u32
  DEBUG_EINDEX_FROM_END = 1_u32
  DEBUG_EINDEX_FROM_CURRENT = 2_u32
  DEBUG_LOG_DEFAULT = 0_u32
  DEBUG_LOG_APPEND = 1_u32
  DEBUG_LOG_UNICODE = 2_u32
  DEBUG_LOG_DML = 4_u32
  DEBUG_SYSVERSTR_SERVICE_PACK = 0_u32
  DEBUG_SYSVERSTR_BUILD = 1_u32
  DEBUG_MANAGED_DISABLED = 0_u32
  DEBUG_MANAGED_ALLOWED = 1_u32
  DEBUG_MANAGED_DLL_LOADED = 2_u32
  DEBUG_MANSTR_NONE = 0_u32
  DEBUG_MANSTR_LOADED_SUPPORT_DLL = 1_u32
  DEBUG_MANSTR_LOAD_STATUS = 2_u32
  DEBUG_MANRESET_DEFAULT = 0_u32
  DEBUG_MANRESET_LOAD_DLL = 1_u32
  DEBUG_EXEC_FLAGS_NONBLOCK = 1_u32
  DEBUG_DATA_SPACE_VIRTUAL = 0_u32
  DEBUG_DATA_SPACE_PHYSICAL = 1_u32
  DEBUG_DATA_SPACE_CONTROL = 2_u32
  DEBUG_DATA_SPACE_IO = 3_u32
  DEBUG_DATA_SPACE_MSR = 4_u32
  DEBUG_DATA_SPACE_BUS_DATA = 5_u32
  DEBUG_DATA_SPACE_DEBUGGER_DATA = 6_u32
  DEBUG_DATA_SPACE_COUNT = 7_u32
  DEBUG_DATA_KernBase = 24_u32
  DEBUG_DATA_BreakpointWithStatusAddr = 32_u32
  DEBUG_DATA_SavedContextAddr = 40_u32
  DEBUG_DATA_KiCallUserModeAddr = 56_u32
  DEBUG_DATA_KeUserCallbackDispatcherAddr = 64_u32
  DEBUG_DATA_PsLoadedModuleListAddr = 72_u32
  DEBUG_DATA_PsActiveProcessHeadAddr = 80_u32
  DEBUG_DATA_PspCidTableAddr = 88_u32
  DEBUG_DATA_ExpSystemResourcesListAddr = 96_u32
  DEBUG_DATA_ExpPagedPoolDescriptorAddr = 104_u32
  DEBUG_DATA_ExpNumberOfPagedPoolsAddr = 112_u32
  DEBUG_DATA_KeTimeIncrementAddr = 120_u32
  DEBUG_DATA_KeBugCheckCallbackListHeadAddr = 128_u32
  DEBUG_DATA_KiBugcheckDataAddr = 136_u32
  DEBUG_DATA_IopErrorLogListHeadAddr = 144_u32
  DEBUG_DATA_ObpRootDirectoryObjectAddr = 152_u32
  DEBUG_DATA_ObpTypeObjectTypeAddr = 160_u32
  DEBUG_DATA_MmSystemCacheStartAddr = 168_u32
  DEBUG_DATA_MmSystemCacheEndAddr = 176_u32
  DEBUG_DATA_MmSystemCacheWsAddr = 184_u32
  DEBUG_DATA_MmPfnDatabaseAddr = 192_u32
  DEBUG_DATA_MmSystemPtesStartAddr = 200_u32
  DEBUG_DATA_MmSystemPtesEndAddr = 208_u32
  DEBUG_DATA_MmSubsectionBaseAddr = 216_u32
  DEBUG_DATA_MmNumberOfPagingFilesAddr = 224_u32
  DEBUG_DATA_MmLowestPhysicalPageAddr = 232_u32
  DEBUG_DATA_MmHighestPhysicalPageAddr = 240_u32
  DEBUG_DATA_MmNumberOfPhysicalPagesAddr = 248_u32
  DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr = 256_u32
  DEBUG_DATA_MmNonPagedSystemStartAddr = 264_u32
  DEBUG_DATA_MmNonPagedPoolStartAddr = 272_u32
  DEBUG_DATA_MmNonPagedPoolEndAddr = 280_u32
  DEBUG_DATA_MmPagedPoolStartAddr = 288_u32
  DEBUG_DATA_MmPagedPoolEndAddr = 296_u32
  DEBUG_DATA_MmPagedPoolInformationAddr = 304_u32
  DEBUG_DATA_MmPageSize = 312_u32
  DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr = 320_u32
  DEBUG_DATA_MmTotalCommitLimitAddr = 328_u32
  DEBUG_DATA_MmTotalCommittedPagesAddr = 336_u32
  DEBUG_DATA_MmSharedCommitAddr = 344_u32
  DEBUG_DATA_MmDriverCommitAddr = 352_u32
  DEBUG_DATA_MmProcessCommitAddr = 360_u32
  DEBUG_DATA_MmPagedPoolCommitAddr = 368_u32
  DEBUG_DATA_MmExtendedCommitAddr = 376_u32
  DEBUG_DATA_MmZeroedPageListHeadAddr = 384_u32
  DEBUG_DATA_MmFreePageListHeadAddr = 392_u32
  DEBUG_DATA_MmStandbyPageListHeadAddr = 400_u32
  DEBUG_DATA_MmModifiedPageListHeadAddr = 408_u32
  DEBUG_DATA_MmModifiedNoWritePageListHeadAddr = 416_u32
  DEBUG_DATA_MmAvailablePagesAddr = 424_u32
  DEBUG_DATA_MmResidentAvailablePagesAddr = 432_u32
  DEBUG_DATA_PoolTrackTableAddr = 440_u32
  DEBUG_DATA_NonPagedPoolDescriptorAddr = 448_u32
  DEBUG_DATA_MmHighestUserAddressAddr = 456_u32
  DEBUG_DATA_MmSystemRangeStartAddr = 464_u32
  DEBUG_DATA_MmUserProbeAddressAddr = 472_u32
  DEBUG_DATA_KdPrintCircularBufferAddr = 480_u32
  DEBUG_DATA_KdPrintCircularBufferEndAddr = 488_u32
  DEBUG_DATA_KdPrintWritePointerAddr = 496_u32
  DEBUG_DATA_KdPrintRolloverCountAddr = 504_u32
  DEBUG_DATA_MmLoadedUserImageListAddr = 512_u32
  DEBUG_DATA_NtBuildLabAddr = 520_u32
  DEBUG_DATA_KiNormalSystemCall = 528_u32
  DEBUG_DATA_KiProcessorBlockAddr = 536_u32
  DEBUG_DATA_MmUnloadedDriversAddr = 544_u32
  DEBUG_DATA_MmLastUnloadedDriverAddr = 552_u32
  DEBUG_DATA_MmTriageActionTakenAddr = 560_u32
  DEBUG_DATA_MmSpecialPoolTagAddr = 568_u32
  DEBUG_DATA_KernelVerifierAddr = 576_u32
  DEBUG_DATA_MmVerifierDataAddr = 584_u32
  DEBUG_DATA_MmAllocatedNonPagedPoolAddr = 592_u32
  DEBUG_DATA_MmPeakCommitmentAddr = 600_u32
  DEBUG_DATA_MmTotalCommitLimitMaximumAddr = 608_u32
  DEBUG_DATA_CmNtCSDVersionAddr = 616_u32
  DEBUG_DATA_MmPhysicalMemoryBlockAddr = 624_u32
  DEBUG_DATA_MmSessionBase = 632_u32
  DEBUG_DATA_MmSessionSize = 640_u32
  DEBUG_DATA_MmSystemParentTablePage = 648_u32
  DEBUG_DATA_MmVirtualTranslationBase = 656_u32
  DEBUG_DATA_OffsetKThreadNextProcessor = 664_u32
  DEBUG_DATA_OffsetKThreadTeb = 666_u32
  DEBUG_DATA_OffsetKThreadKernelStack = 668_u32
  DEBUG_DATA_OffsetKThreadInitialStack = 670_u32
  DEBUG_DATA_OffsetKThreadApcProcess = 672_u32
  DEBUG_DATA_OffsetKThreadState = 674_u32
  DEBUG_DATA_OffsetKThreadBStore = 676_u32
  DEBUG_DATA_OffsetKThreadBStoreLimit = 678_u32
  DEBUG_DATA_SizeEProcess = 680_u32
  DEBUG_DATA_OffsetEprocessPeb = 682_u32
  DEBUG_DATA_OffsetEprocessParentCID = 684_u32
  DEBUG_DATA_OffsetEprocessDirectoryTableBase = 686_u32
  DEBUG_DATA_SizePrcb = 688_u32
  DEBUG_DATA_OffsetPrcbDpcRoutine = 690_u32
  DEBUG_DATA_OffsetPrcbCurrentThread = 692_u32
  DEBUG_DATA_OffsetPrcbMhz = 694_u32
  DEBUG_DATA_OffsetPrcbCpuType = 696_u32
  DEBUG_DATA_OffsetPrcbVendorString = 698_u32
  DEBUG_DATA_OffsetPrcbProcessorState = 700_u32
  DEBUG_DATA_OffsetPrcbNumber = 702_u32
  DEBUG_DATA_SizeEThread = 704_u32
  DEBUG_DATA_KdPrintCircularBufferPtrAddr = 712_u32
  DEBUG_DATA_KdPrintBufferSizeAddr = 720_u32
  DEBUG_DATA_MmBadPagesDetected = 800_u32
  DEBUG_DATA_EtwpDebuggerData = 816_u32
  DEBUG_DATA_PteBase = 864_u32
  DEBUG_DATA_PaeEnabled = 100000_u32
  DEBUG_DATA_SharedUserData = 100008_u32
  DEBUG_DATA_ProductType = 100016_u32
  DEBUG_DATA_SuiteMask = 100024_u32
  DEBUG_DATA_DumpWriterStatus = 100032_u32
  DEBUG_DATA_DumpFormatVersion = 100040_u32
  DEBUG_DATA_DumpWriterVersion = 100048_u32
  DEBUG_DATA_DumpPowerState = 100056_u32
  DEBUG_DATA_DumpMmStorage = 100064_u32
  DEBUG_DATA_DumpAttributes = 100072_u32
  DEBUG_DATA_KPCR_OFFSET = 0_u32
  DEBUG_DATA_KPRCB_OFFSET = 1_u32
  DEBUG_DATA_KTHREAD_OFFSET = 2_u32
  DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET = 3_u32
  DEBUG_DATA_PROCESSOR_IDENTIFICATION = 4_u32
  DEBUG_DATA_PROCESSOR_SPEED = 5_u32
  DEBUG_HANDLE_DATA_TYPE_BASIC = 0_u32
  DEBUG_HANDLE_DATA_TYPE_TYPE_NAME = 1_u32
  DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME = 2_u32
  DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT = 3_u32
  DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE = 4_u32
  DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE = 5_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1 = 6_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1 = 7_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2 = 8_u32
  DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9_u32
  DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1 = 11_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2 = 12_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1 = 13_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1 = 14_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1 = 15_u32
  DEBUG_OFFSINFO_VIRTUAL_SOURCE = 1_u32
  DEBUG_VSOURCE_INVALID = 0_u32
  DEBUG_VSOURCE_DEBUGGEE = 1_u32
  DEBUG_VSOURCE_MAPPED_IMAGE = 2_u32
  DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO = 3_u32
  DEBUG_VSEARCH_DEFAULT = 0_u32
  DEBUG_VSEARCH_WRITABLE_ONLY = 1_u32
  DEBUG_PHYSICAL_DEFAULT = 0_u32
  DEBUG_PHYSICAL_CACHED = 1_u32
  DEBUG_PHYSICAL_UNCACHED = 2_u32
  DEBUG_PHYSICAL_WRITE_COMBINED = 3_u32
  DEBUG_EVENT_BREAKPOINT = 1_u32
  DEBUG_EVENT_EXCEPTION = 2_u32
  DEBUG_EVENT_CREATE_THREAD = 4_u32
  DEBUG_EVENT_EXIT_THREAD = 8_u32
  DEBUG_EVENT_CREATE_PROCESS = 16_u32
  DEBUG_EVENT_EXIT_PROCESS = 32_u32
  DEBUG_EVENT_LOAD_MODULE = 64_u32
  DEBUG_EVENT_UNLOAD_MODULE = 128_u32
  DEBUG_EVENT_SYSTEM_ERROR = 256_u32
  DEBUG_EVENT_SESSION_STATUS = 512_u32
  DEBUG_EVENT_CHANGE_DEBUGGEE_STATE = 1024_u32
  DEBUG_EVENT_CHANGE_ENGINE_STATE = 2048_u32
  DEBUG_EVENT_CHANGE_SYMBOL_STATE = 4096_u32
  DEBUG_EVENT_SERVICE_EXCEPTION = 8192_u32
  DEBUG_SESSION_ACTIVE = 0_u32
  DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 1_u32
  DEBUG_SESSION_END_SESSION_ACTIVE_DETACH = 2_u32
  DEBUG_SESSION_END_SESSION_PASSIVE = 3_u32
  DEBUG_SESSION_END = 4_u32
  DEBUG_SESSION_REBOOT = 5_u32
  DEBUG_SESSION_HIBERNATE = 6_u32
  DEBUG_SESSION_FAILURE = 7_u32
  DEBUG_CDS_ALL = 4294967295_u32
  DEBUG_CDS_REGISTERS = 1_u32
  DEBUG_CDS_DATA = 2_u32
  DEBUG_CDS_REFRESH = 4_u32
  DEBUG_CDS_REFRESH_EVALUATE = 1_u32
  DEBUG_CDS_REFRESH_EXECUTE = 2_u32
  DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE = 3_u32
  DEBUG_CDS_REFRESH_ADDBREAKPOINT = 4_u32
  DEBUG_CDS_REFRESH_REMOVEBREAKPOINT = 5_u32
  DEBUG_CDS_REFRESH_WRITEVIRTUAL = 6_u32
  DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED = 7_u32
  DEBUG_CDS_REFRESH_WRITEPHYSICAL = 8_u32
  DEBUG_CDS_REFRESH_WRITEPHYSICAL2 = 9_u32
  DEBUG_CDS_REFRESH_SETVALUE = 10_u32
  DEBUG_CDS_REFRESH_SETVALUE2 = 11_u32
  DEBUG_CDS_REFRESH_SETSCOPE = 12_u32
  DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX = 13_u32
  DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO = 14_u32
  DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT = 15_u32
  DEBUG_CDS_REFRESH_INLINESTEP = 16_u32
  DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO = 17_u32
  DEBUG_CES_ALL = 4294967295_u32
  DEBUG_CES_CURRENT_THREAD = 1_u32
  DEBUG_CES_EFFECTIVE_PROCESSOR = 2_u32
  DEBUG_CES_BREAKPOINTS = 4_u32
  DEBUG_CES_CODE_LEVEL = 8_u32
  DEBUG_CES_EXECUTION_STATUS = 16_u32
  DEBUG_CES_ENGINE_OPTIONS = 32_u32
  DEBUG_CES_LOG_FILE = 64_u32
  DEBUG_CES_RADIX = 128_u32
  DEBUG_CES_EVENT_FILTERS = 256_u32
  DEBUG_CES_PROCESS_OPTIONS = 512_u32
  DEBUG_CES_EXTENSIONS = 1024_u32
  DEBUG_CES_SYSTEMS = 2048_u32
  DEBUG_CES_ASSEMBLY_OPTIONS = 4096_u32
  DEBUG_CES_EXPRESSION_SYNTAX = 8192_u32
  DEBUG_CES_TEXT_REPLACEMENTS = 16384_u32
  DEBUG_CSS_ALL = 4294967295_u32
  DEBUG_CSS_LOADS = 1_u32
  DEBUG_CSS_UNLOADS = 2_u32
  DEBUG_CSS_SCOPE = 4_u32
  DEBUG_CSS_PATHS = 8_u32
  DEBUG_CSS_SYMBOL_OPTIONS = 16_u32
  DEBUG_CSS_TYPE_OPTIONS = 32_u32
  DEBUG_CSS_COLLAPSE_CHILDREN = 64_u32
  DEBUG_OUTCBI_EXPLICIT_FLUSH = 1_u32
  DEBUG_OUTCBI_TEXT = 2_u32
  DEBUG_OUTCBI_DML = 4_u32
  DEBUG_OUTCBI_ANY_FORMAT = 6_u32
  DEBUG_OUTCB_TEXT = 0_u32
  DEBUG_OUTCB_DML = 1_u32
  DEBUG_OUTCB_EXPLICIT_FLUSH = 2_u32
  DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH = 1_u32
  DEBUG_OUTCBF_DML_HAS_TAGS = 2_u32
  DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 4_u32
  DEBUG_REGISTERS_DEFAULT = 0_u32
  DEBUG_REGISTERS_INT32 = 1_u32
  DEBUG_REGISTERS_INT64 = 2_u32
  DEBUG_REGISTERS_FLOAT = 4_u32
  DEBUG_REGISTERS_ALL = 7_u32
  DEBUG_REGISTER_SUB_REGISTER = 1_u32
  DEBUG_REGSRC_DEBUGGEE = 0_u32
  DEBUG_REGSRC_EXPLICIT = 1_u32
  DEBUG_REGSRC_FRAME = 2_u32
  DEBUG_OUTPUT_SYMBOLS_DEFAULT = 0_u32
  DEBUG_OUTPUT_SYMBOLS_NO_NAMES = 1_u32
  DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 2_u32
  DEBUG_OUTPUT_SYMBOLS_NO_VALUES = 4_u32
  DEBUG_OUTPUT_SYMBOLS_NO_TYPES = 16_u32
  DEBUG_OUTPUT_NAME_END = "**NAME**"
  DEBUG_OUTPUT_OFFSET_END = "**OFF**"
  DEBUG_OUTPUT_VALUE_END = "**VALUE**"
  DEBUG_OUTPUT_TYPE_END = "**TYPE**"
  DEBUG_OUTPUT_NAME_END_WIDE = "**NAME**"
  DEBUG_OUTPUT_OFFSET_END_WIDE = "**OFF**"
  DEBUG_OUTPUT_VALUE_END_WIDE = "**VALUE**"
  DEBUG_OUTPUT_TYPE_END_WIDE = "**TYPE**"
  DEBUG_OUTPUT_NAME_END_T = "**NAME**"
  DEBUG_OUTPUT_OFFSET_END_T = "**OFF**"
  DEBUG_OUTPUT_VALUE_END_T = "**VALUE**"
  DEBUG_OUTPUT_TYPE_END_T = "**TYPE**"
  DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 15_u32
  DEBUG_SYMBOL_EXPANDED = 16_u32
  DEBUG_SYMBOL_READ_ONLY = 32_u32
  DEBUG_SYMBOL_IS_ARRAY = 64_u32
  DEBUG_SYMBOL_IS_FLOAT = 128_u32
  DEBUG_SYMBOL_IS_ARGUMENT = 256_u32
  DEBUG_SYMBOL_IS_LOCAL = 512_u32
  DEBUG_SYMENT_IS_CODE = 1_u32
  DEBUG_SYMENT_IS_DATA = 2_u32
  DEBUG_SYMENT_IS_PARAMETER = 4_u32
  DEBUG_SYMENT_IS_LOCAL = 8_u32
  DEBUG_SYMENT_IS_MANAGED = 16_u32
  DEBUG_SYMENT_IS_SYNTHETIC = 32_u32
  DEBUG_MODULE_LOADED = 0_u32
  DEBUG_MODULE_UNLOADED = 1_u32
  DEBUG_MODULE_USER_MODE = 2_u32
  DEBUG_MODULE_EXE_MODULE = 4_u32
  DEBUG_MODULE_EXPLICIT = 8_u32
  DEBUG_MODULE_SECONDARY = 16_u32
  DEBUG_MODULE_SYNTHETIC = 32_u32
  DEBUG_MODULE_SYM_BAD_CHECKSUM = 65536_u32
  DEBUG_SYMTYPE_NONE = 0_u32
  DEBUG_SYMTYPE_COFF = 1_u32
  DEBUG_SYMTYPE_CODEVIEW = 2_u32
  DEBUG_SYMTYPE_PDB = 3_u32
  DEBUG_SYMTYPE_EXPORT = 4_u32
  DEBUG_SYMTYPE_DEFERRED = 5_u32
  DEBUG_SYMTYPE_SYM = 6_u32
  DEBUG_SYMTYPE_DIA = 7_u32
  DEBUG_SCOPE_GROUP_ARGUMENTS = 1_u32
  DEBUG_SCOPE_GROUP_LOCALS = 2_u32
  DEBUG_SCOPE_GROUP_ALL = 3_u32
  DEBUG_SCOPE_GROUP_BY_DATAMODEL = 4_u32
  DEBUG_OUTTYPE_DEFAULT = 0_u32
  DEBUG_OUTTYPE_NO_INDENT = 1_u32
  DEBUG_OUTTYPE_NO_OFFSET = 2_u32
  DEBUG_OUTTYPE_VERBOSE = 4_u32
  DEBUG_OUTTYPE_COMPACT_OUTPUT = 8_u32
  DEBUG_OUTTYPE_ADDRESS_OF_FIELD = 65536_u32
  DEBUG_OUTTYPE_ADDRESS_AT_END = 131072_u32
  DEBUG_OUTTYPE_BLOCK_RECURSE = 2097152_u32
  DEBUG_FIND_SOURCE_DEFAULT = 0_u32
  DEBUG_FIND_SOURCE_FULL_PATH = 1_u32
  DEBUG_FIND_SOURCE_BEST_MATCH = 2_u32
  DEBUG_FIND_SOURCE_NO_SRCSRV = 4_u32
  DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 8_u32
  DEBUG_FIND_SOURCE_WITH_CHECKSUM = 16_u32
  DEBUG_FIND_SOURCE_WITH_CHECKSUM_STRICT = 32_u32
  MODULE_ORDERS_MASK = 4026531840_u32
  MODULE_ORDERS_LOADTIME = 268435456_u32
  MODULE_ORDERS_MODULENAME = 536870912_u32
  DEBUG_MODNAME_IMAGE = 0_u32
  DEBUG_MODNAME_MODULE = 1_u32
  DEBUG_MODNAME_LOADED_IMAGE = 2_u32
  DEBUG_MODNAME_SYMBOL_FILE = 3_u32
  DEBUG_MODNAME_MAPPED_IMAGE = 4_u32
  DEBUG_TYPEOPTS_UNICODE_DISPLAY = 1_u32
  DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 2_u32
  DEBUG_TYPEOPTS_FORCERADIX_OUTPUT = 4_u32
  DEBUG_TYPEOPTS_MATCH_MAXSIZE = 8_u32
  DEBUG_GETMOD_DEFAULT = 0_u32
  DEBUG_GETMOD_NO_LOADED_MODULES = 1_u32
  DEBUG_GETMOD_NO_UNLOADED_MODULES = 2_u32
  DEBUG_ADDSYNTHMOD_DEFAULT = 0_u32
  DEBUG_ADDSYNTHMOD_ZEROBASE = 1_u32
  DEBUG_ADDSYNTHSYM_DEFAULT = 0_u32
  DEBUG_OUTSYM_DEFAULT = 0_u32
  DEBUG_OUTSYM_FORCE_OFFSET = 1_u32
  DEBUG_OUTSYM_SOURCE_LINE = 2_u32
  DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 4_u32
  DEBUG_GETFNENT_DEFAULT = 0_u32
  DEBUG_GETFNENT_RAW_ENTRY_ONLY = 1_u32
  DEBUG_SOURCE_IS_STATEMENT = 1_u32
  DEBUG_GSEL_DEFAULT = 0_u32
  DEBUG_GSEL_NO_SYMBOL_LOADS = 1_u32
  DEBUG_GSEL_ALLOW_LOWER = 2_u32
  DEBUG_GSEL_ALLOW_HIGHER = 4_u32
  DEBUG_GSEL_NEAREST_ONLY = 8_u32
  DEBUG_GSEL_INLINE_CALLSITE = 16_u32
  DEBUG_FRAME_DEFAULT = 0_u32
  DEBUG_FRAME_IGNORE_INLINE = 1_u32
  DEBUG_COMMAND_EXCEPTION_ID = 3688893886_u32
  DEBUG_CMDEX_INVALID = 0_u32
  DEBUG_CMDEX_ADD_EVENT_STRING = 1_u32
  DEBUG_CMDEX_RESET_EVENT_STRINGS = 2_u32
  DEBUG_EXTINIT_HAS_COMMAND_HELP = 1_u32
  DEBUG_NOTIFY_SESSION_ACTIVE = 0_u32
  DEBUG_NOTIFY_SESSION_INACTIVE = 1_u32
  DEBUG_NOTIFY_SESSION_ACCESSIBLE = 2_u32
  DEBUG_NOTIFY_SESSION_INACCESSIBLE = 3_u32
  DEBUG_KNOWN_STRUCT_GET_NAMES = 1_u32
  DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2_u32
  DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME = 3_u32
  DEBUG_EXT_QVALUE_DEFAULT = 0_u32
  DEBUG_EXT_PVALUE_DEFAULT = 0_u32
  DEBUG_EXT_PVTYPE_IS_VALUE = 0_u32
  DEBUG_EXT_PVTYPE_IS_POINTER = 1_u32
  CROSS_PLATFORM_MAXIMUM_PROCESSORS = 2048_u32
  EXT_API_VERSION_NUMBER = 5_u32
  EXT_API_VERSION_NUMBER32 = 5_u32
  EXT_API_VERSION_NUMBER64 = 6_u32
  IG_KD_CONTEXT = 1_u32
  IG_READ_CONTROL_SPACE = 2_u32
  IG_WRITE_CONTROL_SPACE = 3_u32
  IG_READ_IO_SPACE = 4_u32
  IG_WRITE_IO_SPACE = 5_u32
  IG_READ_PHYSICAL = 6_u32
  IG_WRITE_PHYSICAL = 7_u32
  IG_READ_IO_SPACE_EX = 8_u32
  IG_WRITE_IO_SPACE_EX = 9_u32
  IG_KSTACK_HELP = 10_u32
  IG_SET_THREAD = 11_u32
  IG_READ_MSR = 12_u32
  IG_WRITE_MSR = 13_u32
  IG_GET_DEBUGGER_DATA = 14_u32
  IG_GET_KERNEL_VERSION = 15_u32
  IG_RELOAD_SYMBOLS = 16_u32
  IG_GET_SET_SYMPATH = 17_u32
  IG_GET_EXCEPTION_RECORD = 18_u32
  IG_IS_PTR64 = 19_u32
  IG_GET_BUS_DATA = 20_u32
  IG_SET_BUS_DATA = 21_u32
  IG_DUMP_SYMBOL_INFO = 22_u32
  IG_LOWMEM_CHECK = 23_u32
  IG_SEARCH_MEMORY = 24_u32
  IG_GET_CURRENT_THREAD = 25_u32
  IG_GET_CURRENT_PROCESS = 26_u32
  IG_GET_TYPE_SIZE = 27_u32
  IG_GET_CURRENT_PROCESS_HANDLE = 28_u32
  IG_GET_INPUT_LINE = 29_u32
  IG_GET_EXPRESSION_EX = 30_u32
  IG_TRANSLATE_VIRTUAL_TO_PHYSICAL = 31_u32
  IG_GET_CACHE_SIZE = 32_u32
  IG_READ_PHYSICAL_WITH_FLAGS = 33_u32
  IG_WRITE_PHYSICAL_WITH_FLAGS = 34_u32
  IG_POINTER_SEARCH_PHYSICAL = 35_u32
  IG_OBSOLETE_PLACEHOLDER_36 = 36_u32
  IG_GET_THREAD_OS_INFO = 37_u32
  IG_GET_CLR_DATA_INTERFACE = 38_u32
  IG_MATCH_PATTERN_A = 39_u32
  IG_FIND_FILE = 40_u32
  IG_TYPED_DATA_OBSOLETE = 41_u32
  IG_QUERY_TARGET_INTERFACE = 42_u32
  IG_TYPED_DATA = 43_u32
  IG_DISASSEMBLE_BUFFER = 44_u32
  IG_GET_ANY_MODULE_IN_RANGE = 45_u32
  IG_VIRTUAL_TO_PHYSICAL = 46_u32
  IG_PHYSICAL_TO_VIRTUAL = 47_u32
  IG_GET_CONTEXT_EX = 48_u32
  IG_GET_TEB_ADDRESS = 128_u32
  IG_GET_PEB_ADDRESS = 129_u32
  PHYS_FLAG_DEFAULT = 0_u32
  PHYS_FLAG_CACHED = 1_u32
  PHYS_FLAG_UNCACHED = 2_u32
  PHYS_FLAG_WRITE_COMBINED = 3_u32
  PTR_SEARCH_PHYS_ALL_HITS = 1_u32
  PTR_SEARCH_PHYS_PTE = 2_u32
  PTR_SEARCH_PHYS_RANGE_CHECK_ONLY = 4_u32
  PTR_SEARCH_PHYS_SIZE_SHIFT = 3_u32
  PTR_SEARCH_NO_SYMBOL_CHECK = 2147483648_u32
  EXT_FIND_FILE_ALLOW_GIVEN_PATH = 1_u32
  DEBUG_TYPED_DATA_IS_IN_MEMORY = 1_u32
  DEBUG_TYPED_DATA_PHYSICAL_DEFAULT = 2_u32
  DEBUG_TYPED_DATA_PHYSICAL_CACHED = 4_u32
  DEBUG_TYPED_DATA_PHYSICAL_UNCACHED = 6_u32
  DEBUG_TYPED_DATA_PHYSICAL_WRITE_COMBINED = 8_u32
  DEBUG_TYPED_DATA_PHYSICAL_MEMORY = 14_u32
  EXT_TDF_PHYSICAL_DEFAULT = 2_u32
  EXT_TDF_PHYSICAL_CACHED = 4_u32
  EXT_TDF_PHYSICAL_UNCACHED = 6_u32
  EXT_TDF_PHYSICAL_WRITE_COMBINED = 8_u32
  EXT_TDF_PHYSICAL_MEMORY = 14_u32
  WDBGEXTS_ADDRESS_DEFAULT = 0_u32
  WDBGEXTS_ADDRESS_SEG16 = 1_u32
  WDBGEXTS_ADDRESS_SEG32 = 2_u32
  WDBGEXTS_ADDRESS_RESERVED0 = 2147483648_u32
  DBGKD_VERS_FLAG_MP = 1_u32
  DBGKD_VERS_FLAG_DATA = 2_u32
  DBGKD_VERS_FLAG_PTR64 = 4_u32
  DBGKD_VERS_FLAG_NOMM = 8_u32
  DBGKD_VERS_FLAG_HSS = 16_u32
  DBGKD_VERS_FLAG_PARTITIONS = 32_u32
  DBGKD_VERS_FLAG_HAL_IN_NTOS = 64_u32
  KD_SECONDARY_VERSION_DEFAULT = 0_u32
  KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_1 = 0_u32
  KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_2 = 1_u32
  KD_SECONDARY_VERSION_AMD64_CONTEXT = 2_u32
  CURRENT_KD_SECONDARY_VERSION = 2_u32
  DBG_DUMP_NO_INDENT = 1_u32
  DBG_DUMP_NO_OFFSET = 2_u32
  DBG_DUMP_VERBOSE = 4_u32
  DBG_DUMP_CALL_FOR_EACH = 8_u32
  DBG_DUMP_LIST = 32_u32
  DBG_DUMP_NO_PRINT = 64_u32
  DBG_DUMP_GET_SIZE_ONLY = 128_u32
  DBG_DUMP_COMPACT_OUT = 8192_u32
  DBG_DUMP_ARRAY = 32768_u32
  DBG_DUMP_ADDRESS_OF_FIELD = 65536_u32
  DBG_DUMP_ADDRESS_AT_END = 131072_u32
  DBG_DUMP_COPY_TYPE_DATA = 262144_u32
  DBG_DUMP_READ_PHYSICAL = 524288_u32
  DBG_DUMP_FUNCTION_FORMAT = 1048576_u32
  DBG_DUMP_BLOCK_RECURSE = 2097152_u32
  DBG_DUMP_MATCH_SIZE = 4194304_u32
  DBG_RETURN_TYPE = 0_u32
  DBG_RETURN_SUBTYPES = 0_u32
  DBG_RETURN_TYPE_VALUES = 0_u32
  DBG_DUMP_FIELD_CALL_BEFORE_PRINT = 1_u32
  DBG_DUMP_FIELD_NO_CALLBACK_REQ = 2_u32
  DBG_DUMP_FIELD_RECUR_ON_THIS = 4_u32
  DBG_DUMP_FIELD_FULL_NAME = 8_u32
  DBG_DUMP_FIELD_ARRAY = 16_u32
  DBG_DUMP_FIELD_COPY_FIELD_DATA = 32_u32
  DBG_DUMP_FIELD_RETURN_ADDRESS = 4096_u32
  DBG_DUMP_FIELD_SIZE_IN_BITS = 8192_u32
  DBG_DUMP_FIELD_NO_PRINT = 16384_u32
  DBG_DUMP_FIELD_DEFAULT_STRING = 65536_u32
  DBG_DUMP_FIELD_WCHAR_STRING = 131072_u32
  DBG_DUMP_FIELD_MULTI_STRING = 262144_u32
  DBG_DUMP_FIELD_GUID_STRING = 524288_u32
  DBG_DUMP_FIELD_UTF32_STRING = 1048576_u32
  MEMORY_READ_ERROR = 1_u32
  SYMBOL_TYPE_INDEX_NOT_FOUND = 2_u32
  SYMBOL_TYPE_INFO_NOT_FOUND = 3_u32
  FIELDS_DID_NOT_MATCH = 4_u32
  NULL_SYM_DUMP_PARAM = 5_u32
  NULL_FIELD_NAME = 6_u32
  INCORRECT_VERSION_INFO = 7_u32
  EXIT_ON_CONTROLC = 8_u32
  CANNOT_ALLOCATE_MEMORY = 9_u32
  INSUFFICIENT_SPACE_TO_COPY = 10_u32
  ADDRESS_TYPE_INDEX_NOT_FOUND = 11_u32
  UNAVAILABLE_ERROR = 12_u32
  CATID_ActiveScript = "f0b7a1a1-9847-11cf-8f20-00805f2cd064"
  CATID_ActiveScriptParse = "f0b7a1a2-9847-11cf-8f20-00805f2cd064"
  CATID_ActiveScriptEncode = "f0b7a1a3-9847-11cf-8f20-00805f2cd064"
  OID_VBSSIP = "1629f04e-2799-4db5-8fe5-ace10f17ebab"
  OID_JSSIP = "06c9e010-38ce-11d4-a2a3-00104bd35090"
  OID_WSFSIP = "1a610570-38ce-11d4-a2a3-00104bd35090"
  SCRIPTITEM_ISVISIBLE = 2_u32
  SCRIPTITEM_ISSOURCE = 4_u32
  SCRIPTITEM_GLOBALMEMBERS = 8_u32
  SCRIPTITEM_ISPERSISTENT = 64_u32
  SCRIPTITEM_CODEONLY = 512_u32
  SCRIPTITEM_NOCODE = 1024_u32
  SCRIPTTYPELIB_ISCONTROL = 16_u32
  SCRIPTTYPELIB_ISPERSISTENT = 64_u32
  SCRIPTTEXT_DELAYEXECUTION = 1_u32
  SCRIPTTEXT_ISVISIBLE = 2_u32
  SCRIPTTEXT_ISEXPRESSION = 32_u32
  SCRIPTTEXT_ISPERSISTENT = 64_u32
  SCRIPTTEXT_HOSTMANAGESSOURCE = 128_u32
  SCRIPTTEXT_ISXDOMAIN = 256_u32
  SCRIPTTEXT_ISNONUSERCODE = 512_u32
  SCRIPTPROC_ISEXPRESSION = 32_u32
  SCRIPTPROC_HOSTMANAGESSOURCE = 128_u32
  SCRIPTPROC_IMPLICIT_THIS = 256_u32
  SCRIPTPROC_IMPLICIT_PARENTS = 512_u32
  SCRIPTPROC_ISXDOMAIN = 1024_u32
  SCRIPTINFO_IUNKNOWN = 1_u32
  SCRIPTINFO_ITYPEINFO = 2_u32
  SCRIPTINTERRUPT_DEBUG = 1_u32
  SCRIPTINTERRUPT_RAISEEXCEPTION = 2_u32
  SCRIPTSTAT_STATEMENT_COUNT = 1_u32
  SCRIPTSTAT_INSTRUCTION_COUNT = 2_u32
  SCRIPTSTAT_INTSTRUCTION_TIME = 3_u32
  SCRIPTSTAT_TOTAL_TIME = 4_u32
  SCRIPT_ENCODE_SECTION = 1_u32
  SCRIPT_ENCODE_DEFAULT_LANGUAGE = 1_u32
  SCRIPT_ENCODE_NO_ASP_LANGUAGE = 2_u32
  SCRIPTPROP_NAME = 0_u32
  SCRIPTPROP_MAJORVERSION = 1_u32
  SCRIPTPROP_MINORVERSION = 2_u32
  SCRIPTPROP_BUILDNUMBER = 3_u32
  SCRIPTPROP_DELAYEDEVENTSINKING = 4096_u32
  SCRIPTPROP_CATCHEXCEPTION = 4097_u32
  SCRIPTPROP_CONVERSIONLCID = 4098_u32
  SCRIPTPROP_HOSTSTACKREQUIRED = 4099_u32
  SCRIPTPROP_SCRIPTSAREFULLYTRUSTED = 4100_u32
  SCRIPTPROP_DEBUGGER = 4352_u32
  SCRIPTPROP_JITDEBUG = 4353_u32
  SCRIPTPROP_GCCONTROLSOFTCLOSE = 8192_u32
  SCRIPTPROP_INTEGERMODE = 12288_u32
  SCRIPTPROP_STRINGCOMPAREINSTANCE = 12289_u32
  SCRIPTPROP_INVOKEVERSIONING = 16384_u32
  SCRIPTPROP_HACK_FIBERSUPPORT = 1879048192_u32
  SCRIPTPROP_HACK_TRIDENTEVENTSINK = 1879048193_u32
  SCRIPTPROP_ABBREVIATE_GLOBALNAME_RESOLUTION = 1879048194_u32
  SCRIPTPROP_HOSTKEEPALIVE = 1879048196_u32
  SCRIPT_E_RECORDED = -2040119292_i32
  SCRIPT_E_REPORTED = -2147352319_i32
  SCRIPT_E_PROPAGATE = -2147352318_i32
  MINIDUMP_VERSION = 42899_u32
  MINIDUMP_MISC1_PROCESSOR_POWER_INFO = 4_u32
  MINIDUMP_MISC3_PROCESS_INTEGRITY = 16_u32
  MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS = 32_u32
  MINIDUMP_MISC3_TIMEZONE = 64_u32
  MINIDUMP_MISC3_PROTECTED_PROCESS = 128_u32
  MINIDUMP_MISC4_BUILDSTRING = 256_u32
  MINIDUMP_MISC5_PROCESS_COOKIE = 512_u32
  MINIDUMP_SYSMEMINFO1_FILECACHE_TRANSITIONREPURPOSECOUNT_FLAGS = 1_u32
  MINIDUMP_SYSMEMINFO1_BASICPERF = 2_u32
  MINIDUMP_SYSMEMINFO1_PERF_CCTOTALDIRTYPAGES_CCDIRTYPAGETHRESHOLD = 4_u32
  MINIDUMP_SYSMEMINFO1_PERF_RESIDENTAVAILABLEPAGES_SHAREDCOMMITPAGES = 8_u32
  MINIDUMP_PROCESS_VM_COUNTERS = 1_u32
  MINIDUMP_PROCESS_VM_COUNTERS_VIRTUALSIZE = 2_u32
  MINIDUMP_PROCESS_VM_COUNTERS_EX = 4_u32
  MINIDUMP_PROCESS_VM_COUNTERS_EX2 = 8_u32
  MINIDUMP_PROCESS_VM_COUNTERS_JOB = 16_u32
  MAX_SYM_NAME = 2000_u32
  BIND_NO_BOUND_IMPORTS = 1_u32
  BIND_NO_UPDATE = 2_u32
  BIND_ALL_IMAGES = 4_u32
  BIND_CACHE_IMPORT_DLLS = 8_u32
  BIND_REPORT_64BIT_VA = 16_u32
  CHECKSUM_SUCCESS = 0_u32
  CHECKSUM_OPEN_FAILURE = 1_u32
  CHECKSUM_MAP_FAILURE = 2_u32
  CHECKSUM_MAPVIEW_FAILURE = 3_u32
  CHECKSUM_UNICODE_FAILURE = 4_u32
  SPLITSYM_REMOVE_PRIVATE = 1_u32
  SPLITSYM_EXTRACT_ALL = 2_u32
  SPLITSYM_SYMBOLPATH_IS_SRC = 4_u32
  CERT_PE_IMAGE_DIGEST_DEBUG_INFO = 1_u32
  CERT_PE_IMAGE_DIGEST_RESOURCES = 2_u32
  CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = 4_u32
  CERT_PE_IMAGE_DIGEST_NON_PE_INFO = 8_u32
  CERT_SECTION_TYPE_ANY = 255_u32
  ERROR_IMAGE_NOT_STRIPPED = 34816_u32
  ERROR_NO_DBG_POINTER = 34817_u32
  ERROR_NO_PDB_POINTER = 34818_u32
  UNDNAME_COMPLETE = 0_u32
  UNDNAME_NO_LEADING_UNDERSCORES = 1_u32
  UNDNAME_NO_MS_KEYWORDS = 2_u32
  UNDNAME_NO_FUNCTION_RETURNS = 4_u32
  UNDNAME_NO_ALLOCATION_MODEL = 8_u32
  UNDNAME_NO_ALLOCATION_LANGUAGE = 16_u32
  UNDNAME_NO_MS_THISTYPE = 32_u32
  UNDNAME_NO_CV_THISTYPE = 64_u32
  UNDNAME_NO_THISTYPE = 96_u32
  UNDNAME_NO_ACCESS_SPECIFIERS = 128_u32
  UNDNAME_NO_THROW_SIGNATURES = 256_u32
  UNDNAME_NO_MEMBER_TYPE = 512_u32
  UNDNAME_NO_RETURN_UDT_MODEL = 1024_u32
  UNDNAME_32_BIT_DECODE = 2048_u32
  UNDNAME_NAME_ONLY = 4096_u32
  UNDNAME_NO_ARGUMENTS = 8192_u32
  UNDNAME_NO_SPECIAL_SYMS = 16384_u32
  DBHHEADER_PDBGUID = 3_u32
  INLINE_FRAME_CONTEXT_INIT = 0_u32
  INLINE_FRAME_CONTEXT_IGNORE = 4294967295_u32
  SYM_STKWALK_DEFAULT = 0_u32
  SYM_STKWALK_FORCE_FRAMEPTR = 1_u32
  SYM_STKWALK_ZEROEXTEND_PTRS = 2_u32
  API_VERSION_NUMBER = 12_u32
  SYMFLAG_NULL = 524288_u32
  SYMFLAG_FUNC_NO_RETURN = 1048576_u32
  SYMFLAG_SYNTHETIC_ZEROBASE = 2097152_u32
  SYMFLAG_PUBLIC_CODE = 4194304_u32
  SYMFLAG_REGREL_ALIASINDIR = 8388608_u32
  SYMFLAG_FIXUP_ARM64X = 16777216_u32
  SYMFLAG_GLOBAL = 33554432_u32
  SYMFLAG_RESET = 2147483648_u32
  IMAGEHLP_MODULE_REGION_DLLBASE = 1_u32
  IMAGEHLP_MODULE_REGION_DLLRANGE = 2_u32
  IMAGEHLP_MODULE_REGION_ADDITIONAL = 4_u32
  IMAGEHLP_MODULE_REGION_JIT = 8_u32
  IMAGEHLP_MODULE_REGION_ALL = 255_u32
  CBA_DEFERRED_SYMBOL_LOAD_START = 1_u32
  CBA_DEFERRED_SYMBOL_LOAD_COMPLETE = 2_u32
  CBA_DEFERRED_SYMBOL_LOAD_FAILURE = 3_u32
  CBA_SYMBOLS_UNLOADED = 4_u32
  CBA_DUPLICATE_SYMBOL = 5_u32
  CBA_READ_MEMORY = 6_u32
  CBA_DEFERRED_SYMBOL_LOAD_CANCEL = 7_u32
  CBA_SET_OPTIONS = 8_u32
  CBA_EVENT = 16_u32
  CBA_DEFERRED_SYMBOL_LOAD_PARTIAL = 32_u32
  CBA_DEBUG_INFO = 268435456_u32
  CBA_SRCSRV_INFO = 536870912_u32
  CBA_SRCSRV_EVENT = 1073741824_u32
  CBA_UPDATE_STATUS_BAR = 1342177280_u32
  CBA_ENGINE_PRESENT = 1610612736_u32
  CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS = 1879048192_u32
  CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE = 2147483648_u32
  CBA_XML_LOG = 2415919104_u32
  CBA_MAP_JIT_SYMBOL = 2684354560_u32
  EVENT_SRCSPEW_START = 100_u32
  EVENT_SRCSPEW = 100_u32
  EVENT_SRCSPEW_END = 199_u32
  DSLFLAG_MISMATCHED_PDB = 1_u32
  DSLFLAG_MISMATCHED_DBG = 2_u32
  FLAG_ENGINE_PRESENT = 4_u32
  FLAG_ENGOPT_DISALLOW_NETWORK_PATHS = 8_u32
  FLAG_OVERRIDE_ARM_MACHINE_TYPE = 16_u32
  SYMOPT_CASE_INSENSITIVE = 1_u32
  SYMOPT_UNDNAME = 2_u32
  SYMOPT_DEFERRED_LOADS = 4_u32
  SYMOPT_NO_CPP = 8_u32
  SYMOPT_LOAD_LINES = 16_u32
  SYMOPT_OMAP_FIND_NEAREST = 32_u32
  SYMOPT_LOAD_ANYTHING = 64_u32
  SYMOPT_IGNORE_CVREC = 128_u32
  SYMOPT_NO_UNQUALIFIED_LOADS = 256_u32
  SYMOPT_FAIL_CRITICAL_ERRORS = 512_u32
  SYMOPT_EXACT_SYMBOLS = 1024_u32
  SYMOPT_ALLOW_ABSOLUTE_SYMBOLS = 2048_u32
  SYMOPT_IGNORE_NT_SYMPATH = 4096_u32
  SYMOPT_INCLUDE_32BIT_MODULES = 8192_u32
  SYMOPT_PUBLICS_ONLY = 16384_u32
  SYMOPT_NO_PUBLICS = 32768_u32
  SYMOPT_AUTO_PUBLICS = 65536_u32
  SYMOPT_NO_IMAGE_SEARCH = 131072_u32
  SYMOPT_SECURE = 262144_u32
  SYMOPT_NO_PROMPTS = 524288_u32
  SYMOPT_OVERWRITE = 1048576_u32
  SYMOPT_IGNORE_IMAGEDIR = 2097152_u32
  SYMOPT_FLAT_DIRECTORY = 4194304_u32
  SYMOPT_FAVOR_COMPRESSED = 8388608_u32
  SYMOPT_ALLOW_ZERO_ADDRESS = 16777216_u32
  SYMOPT_DISABLE_SYMSRV_AUTODETECT = 33554432_u32
  SYMOPT_READONLY_CACHE = 67108864_u32
  SYMOPT_SYMPATH_LAST = 134217728_u32
  SYMOPT_DISABLE_FAST_SYMBOLS = 268435456_u32
  SYMOPT_DISABLE_SYMSRV_TIMEOUT = 536870912_u32
  SYMOPT_DISABLE_SRVSTAR_ON_STARTUP = 1073741824_u32
  SYMOPT_DEBUG = 2147483648_u32
  SYM_INLINE_COMP_ERROR = 0_u32
  SYM_INLINE_COMP_IDENTICAL = 1_u32
  SYM_INLINE_COMP_STEPIN = 2_u32
  SYM_INLINE_COMP_STEPOUT = 3_u32
  SYM_INLINE_COMP_STEPOVER = 4_u32
  SYM_INLINE_COMP_DIFFERENT = 5_u32
  ESLFLAG_FULLPATH = 1_u32
  ESLFLAG_NEAREST = 2_u32
  ESLFLAG_PREV = 4_u32
  ESLFLAG_NEXT = 8_u32
  ESLFLAG_INLINE_SITE = 16_u32
  SYMENUM_OPTIONS_DEFAULT = 1_u32
  SYMENUM_OPTIONS_INLINE = 2_u32
  SYMSEARCH_MASKOBJS = 1_u32
  SYMSEARCH_RECURSE = 2_u32
  SYMSEARCH_GLOBALSONLY = 4_u32
  SYMSEARCH_ALLITEMS = 8_u32
  EXT_OUTPUT_VER = 1_u32
  SYMSRV_VERSION = 2_u32
  SSRVOPT_CALLBACK = 1_u32
  SSRVOPT_OLDGUIDPTR = 16_u32
  SSRVOPT_UNATTENDED = 32_u32
  SSRVOPT_NOCOPY = 64_u32
  SSRVOPT_GETPATH = 64_u32
  SSRVOPT_PARENTWIN = 128_u32
  SSRVOPT_PARAMTYPE = 256_u32
  SSRVOPT_SECURE = 512_u32
  SSRVOPT_TRACE = 1024_u32
  SSRVOPT_SETCONTEXT = 2048_u32
  SSRVOPT_PROXY = 4096_u32
  SSRVOPT_DOWNSTREAM_STORE = 8192_u32
  SSRVOPT_OVERWRITE = 16384_u32
  SSRVOPT_RESETTOU = 32768_u32
  SSRVOPT_CALLBACKW = 65536_u32
  SSRVOPT_FLAT_DEFAULT_STORE = 131072_u32
  SSRVOPT_PROXYW = 262144_u32
  SSRVOPT_MESSAGE = 524288_u32
  SSRVOPT_SERVICE = 1048576_u32
  SSRVOPT_FAVOR_COMPRESSED = 2097152_u32
  SSRVOPT_STRING = 4194304_u32
  SSRVOPT_WINHTTP = 8388608_u32
  SSRVOPT_WININET = 16777216_u32
  SSRVOPT_DONT_UNCOMPRESS = 33554432_u32
  SSRVOPT_DISABLE_PING_HOST = 67108864_u32
  SSRVOPT_DISABLE_TIMEOUT = 134217728_u32
  SSRVOPT_ENABLE_COMM_MSG = 268435456_u32
  SSRVOPT_URI_FILTER = 536870912_u32
  SSRVOPT_URI_TIERS = 1073741824_u32
  SSRVOPT_RETRY_APP_HANG = 2147483648_u32
  SSRVOPT_MAX = 2147483648_u32
  NUM_SSRVOPTS = 32_u32
  SSRVURI_HTTP_NORMAL = 1_u32
  SSRVURI_HTTP_COMPRESSED = 2_u32
  SSRVURI_HTTP_FILEPTR = 4_u32
  SSRVURI_UNC_NORMAL = 16_u32
  SSRVURI_UNC_COMPRESSED = 32_u32
  SSRVURI_UNC_FILEPTR = 64_u32
  SSRVURI_HTTP_MASK = 15_u32
  SSRVURI_UNC_MASK = 240_u32
  SSRVURI_ALL = 255_u32
  SSRVURI_NORMAL = 1_u32
  SSRVURI_COMPRESSED = 2_u32
  SSRVURI_FILEPTR = 4_u32
  SSRVACTION_TRACE = 1_u32
  SSRVACTION_QUERYCANCEL = 2_u32
  SSRVACTION_EVENT = 3_u32
  SSRVACTION_EVENTW = 4_u32
  SSRVACTION_SIZE = 5_u32
  SSRVACTION_HTTPSTATUS = 6_u32
  SSRVACTION_XMLOUTPUT = 7_u32
  SSRVACTION_CHECKSUMSTATUS = 8_u32
  SYMSTOREOPT_ALT_INDEX = 16_u32
  SYMSTOREOPT_UNICODE = 32_u32
  SYMF_OMAP_GENERATED = 1_u32
  SYMF_OMAP_MODIFIED = 2_u32
  SYMF_REGISTER = 8_u32
  SYMF_REGREL = 16_u32
  SYMF_FRAMEREL = 32_u32
  SYMF_PARAMETER = 64_u32
  SYMF_LOCAL = 128_u32
  SYMF_CONSTANT = 256_u32
  SYMF_EXPORT = 512_u32
  SYMF_FORWARDER = 1024_u32
  SYMF_FUNCTION = 2048_u32
  SYMF_VIRTUAL = 4096_u32
  SYMF_THUNK = 8192_u32
  SYMF_TLSREL = 16384_u32
  IMAGEHLP_SYMBOL_INFO_VALUEPRESENT = 1_u32
  IMAGEHLP_SYMBOL_INFO_REGISTER = 8_u32
  IMAGEHLP_SYMBOL_INFO_REGRELATIVE = 16_u32
  IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE = 32_u32
  IMAGEHLP_SYMBOL_INFO_PARAMETER = 64_u32
  IMAGEHLP_SYMBOL_INFO_LOCAL = 128_u32
  IMAGEHLP_SYMBOL_INFO_CONSTANT = 256_u32
  IMAGEHLP_SYMBOL_FUNCTION = 2048_u32
  IMAGEHLP_SYMBOL_VIRTUAL = 4096_u32
  IMAGEHLP_SYMBOL_THUNK = 8192_u32
  IMAGEHLP_SYMBOL_INFO_TLSRELATIVE = 16384_u32
  IMAGEHLP_RMAP_MAPPED_FLAT = 1_u32
  IMAGEHLP_RMAP_BIG_ENDIAN = 2_u32
  IMAGEHLP_RMAP_IGNORE_MISCOMPARE = 4_u32
  IMAGEHLP_RMAP_FIXUP_ARM64X = 268435456_u32
  IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS = 536870912_u32
  IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS = 1073741824_u32
  IMAGEHLP_RMAP_FIXUP_IMAGEBASE = 2147483648_u32
  WCT_MAX_NODE_COUNT = 16_u32
  WCT_OBJNAME_LENGTH = 128_u32
  WCT_NETWORK_IO_FLAG = 8_u32
  RESTORE_LAST_ERROR_NAME_A = "RestoreLastError"
  RESTORE_LAST_ERROR_NAME_W = "RestoreLastError"
  RESTORE_LAST_ERROR_NAME = "RestoreLastError"
  APPBREAKFLAG_DEBUGGER_BLOCK = 1_u32
  APPBREAKFLAG_DEBUGGER_HALT = 2_u32
  APPBREAKFLAG_STEP = 65536_u32
  APPBREAKFLAG_NESTED = 131072_u32
  APPBREAKFLAG_STEPTYPE_SOURCE = 0_u32
  APPBREAKFLAG_STEPTYPE_BYTECODE = 1048576_u32
  APPBREAKFLAG_STEPTYPE_MACHINE = 2097152_u32
  APPBREAKFLAG_STEPTYPE_MASK = 15728640_u32
  APPBREAKFLAG_IN_BREAKPOINT = 2147483648_u32
  SOURCETEXT_ATTR_KEYWORD = 1_u32
  SOURCETEXT_ATTR_COMMENT = 2_u32
  SOURCETEXT_ATTR_NONSOURCE = 4_u32
  SOURCETEXT_ATTR_OPERATOR = 8_u32
  SOURCETEXT_ATTR_NUMBER = 16_u32
  SOURCETEXT_ATTR_STRING = 32_u32
  SOURCETEXT_ATTR_FUNCTION_START = 64_u32
  TEXT_DOC_ATTR_READONLY = 1_u32
  TEXT_DOC_ATTR_TYPE_PRIMARY = 2_u32
  TEXT_DOC_ATTR_TYPE_WORKER = 4_u32
  TEXT_DOC_ATTR_TYPE_SCRIPT = 8_u32
  DEBUG_TEXT_ISEXPRESSION = 1_u32
  DEBUG_TEXT_RETURNVALUE = 2_u32
  DEBUG_TEXT_NOSIDEEFFECTS = 4_u32
  DEBUG_TEXT_ALLOWBREAKPOINTS = 8_u32
  DEBUG_TEXT_ALLOWERRORREPORT = 16_u32
  DEBUG_TEXT_EVALUATETOCODECONTEXT = 32_u32
  DEBUG_TEXT_ISNONUSERCODE = 64_u32
  THREAD_STATE_RUNNING = 1_u32
  THREAD_STATE_SUSPENDED = 2_u32
  THREAD_BLOCKED = 4_u32
  THREAD_OUT_OF_CONTEXT = 8_u32
  CATID_ActiveScriptAuthor = "0aee2a92-bcbb-11d0-8c72-00c04fc2b085"
  FACILITY_JsDEBUG = 3527_u32
  E_JsDEBUG_MISMATCHED_RUNTIME = -1916338175_i32
  E_JsDEBUG_UNKNOWN_THREAD = -1916338174_i32
  E_JsDEBUG_OUTSIDE_OF_VM = -1916338172_i32
  E_JsDEBUG_INVALID_MEMORY_ADDRESS = -1916338171_i32
  E_JsDEBUG_SOURCE_LOCATION_NOT_FOUND = -1916338170_i32
  E_JsDEBUG_RUNTIME_NOT_IN_DEBUG_MODE = -1916338169_i32
  DMP_PHYSICAL_MEMORY_BLOCK_SIZE_32 = 700_u32
  DMP_CONTEXT_RECORD_SIZE_32 = 1200_u32
  DMP_RESERVED_0_SIZE_32 = 1760_u32
  DMP_RESERVED_2_SIZE_32 = 16_u32
  DMP_RESERVED_3_SIZE_32 = 56_u32
  DMP_PHYSICAL_MEMORY_BLOCK_SIZE_64 = 700_u32
  DMP_CONTEXT_RECORD_SIZE_64 = 3000_u32
  DMP_RESERVED_0_SIZE_64 = 4008_u32
  DMP_HEADER_COMMENT_SIZE = 128_u32
  DUMP_SUMMARY_VALID_KERNEL_VA = 1_u32
  DUMP_SUMMARY_VALID_CURRENT_USER_VA = 2_u32
  INTERFACESAFE_FOR_UNTRUSTED_CALLER = 1_u32
  INTERFACESAFE_FOR_UNTRUSTED_DATA = 2_u32
  INTERFACE_USES_DISPEX = 4_u32
  INTERFACE_USES_SECURITY_MANAGER = 8_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_10 = 10_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_11 = 11_u32
  WHEA_MAX_MC_BANKS = 32_u32
  WHEA_ERROR_SOURCE_FLAG_FIRMWAREFIRST = 1_u32
  WHEA_ERROR_SOURCE_FLAG_GLOBAL = 2_u32
  WHEA_ERROR_SOURCE_FLAG_GHES_ASSIST = 4_u32
  WHEA_ERROR_SOURCE_FLAG_DEFAULTSOURCE = 2147483648_u32
  WHEA_ERROR_SOURCE_INVALID_RELATED_SOURCE = 65535_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFMCE = 0_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFCMC = 1_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFNMI = 2_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFMCA = 3_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCMC = 4_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCPE = 5_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERROOTPORT = 6_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERENDPOINT = 7_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERBRIDGE = 8_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC = 9_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC_V2 = 10_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_IA32MCA = 0_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_Intel64MCA = 1_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_AMD64MCA = 2_u32
  WHEA_NOTIFICATION_TYPE_POLLED = 0_u32
  WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT = 1_u32
  WHEA_NOTIFICATION_TYPE_LOCALINTERRUPT = 2_u32
  WHEA_NOTIFICATION_TYPE_SCI = 3_u32
  WHEA_NOTIFICATION_TYPE_NMI = 4_u32
  WHEA_NOTIFICATION_TYPE_CMCI = 5_u32
  WHEA_NOTIFICATION_TYPE_MCE = 6_u32
  WHEA_NOTIFICATION_TYPE_GPIO_SIGNAL = 7_u32
  WHEA_NOTIFICATION_TYPE_ARMV8_SEA = 8_u32
  WHEA_NOTIFICATION_TYPE_ARMV8_SEI = 9_u32
  WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT_GSIV = 10_u32
  WHEA_NOTIFICATION_TYPE_SDEI = 11_u32
  WHEA_DEVICE_DRIVER_CONFIG_V1 = 1_u32
  WHEA_DEVICE_DRIVER_CONFIG_V2 = 2_u32
  WHEA_DEVICE_DRIVER_CONFIG_MIN = 1_u32
  WHEA_DEVICE_DRIVER_CONFIG_MAX = 2_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_V1 = 1_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_MIN = 1_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_MAX = 1_u32
  WHEA_DISABLE_OFFLINE = 0_u32
  WHEA_MEM_PERSISTOFFLINE = 1_u32
  WHEA_MEM_PFA_DISABLE = 2_u32
  WHEA_MEM_PFA_PAGECOUNT = 3_u32
  WHEA_MEM_PFA_THRESHOLD = 4_u32
  WHEA_MEM_PFA_TIMEOUT = 5_u32
  WHEA_DISABLE_DUMMY_WRITE = 6_u32
  WHEA_RESTORE_CMCI_ENABLED = 7_u32
  WHEA_RESTORE_CMCI_ATTEMPTS = 8_u32
  WHEA_RESTORE_CMCI_ERR_LIMIT = 9_u32
  WHEA_CMCI_THRESHOLD_COUNT = 10_u32
  WHEA_CMCI_THRESHOLD_TIME = 11_u32
  WHEA_CMCI_THRESHOLD_POLL_COUNT = 12_u32
  WHEA_PENDING_PAGE_LIST_SZ = 13_u32
  WHEA_BAD_PAGE_LIST_MAX_SIZE = 14_u32
  WHEA_BAD_PAGE_LIST_LOCATION = 15_u32
  WHEA_NOTIFY_ALL_OFFLINES = 16_u32
  IPMI_OS_SEL_RECORD_VERSION_1 = 1_u32
  IPMI_OS_SEL_RECORD_VERSION = 1_u32
  IPMI_IOCTL_INDEX = 1024_u32
  IOCTL_IPMI_INTERNAL_RECORD_SEL_EVENT = 2232320_u32
  IPMI_OS_SEL_RECORD_MASK = 65535_u32
  DBGKD_SIMULATION_NONE = 0_i32
  DBGKD_SIMULATION_EXDI = 1_i32
  ACTIVPROF_E_PROFILER_PRESENT = -2147220992_i32
  ACTIVPROF_E_PROFILER_ABSENT = -2147220991_i32
  ACTIVPROF_E_UNABLE_TO_APPLY_ACTION = -2147220990_i32
  PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE = 4294967295_u32
  Sevmax = 4_i32
  Fasapreferinternalhandler = 1_u32
  Fasasupportinternalhandler = 2_u32
  Fasacasesensitive = 4_u32
  SCRIPT_CMPL_NOLIST = 0_u32
  SCRIPT_CMPL_MEMBERLIST = 1_u32
  SCRIPT_CMPL_ENUMLIST = 2_u32
  SCRIPT_CMPL_PARAMTIP = 4_u32
  SCRIPT_CMPL_GLOBALLIST = 8_u32
  SCRIPT_CMPL_ENUM_TRIGGER = 1_u32
  SCRIPT_CMPL_MEMBER_TRIGGER = 2_u32
  SCRIPT_CMPL_PARAM_TRIGGER = 3_u32
  SCRIPT_CMPL_COMMIT = 4_u32
  GETATTRTYPE_NORMAL = 0_u32
  GETATTRTYPE_DEPSCAN = 1_u32
  GETATTRFLAG_THIS = 256_u32
  GETATTRFLAG_HUMANTEXT = 32768_u32
  SOURCETEXT_ATTR_HUMANTEXT = 32768_u32
  SOURCETEXT_ATTR_IDENTIFIER = 256_u32
  SOURCETEXT_ATTR_MEMBERLOOKUP = 512_u32
  SOURCETEXT_ATTR_THIS = 1024_u32

  CLSID_ProcessDebugManager = LibC::GUID.new(0x78a51822_u32, 0x51f4_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])

  CLSID_DebugHelper = LibC::GUID.new(0xbfcc060_u32, 0x8c1d_u16, 0x11d0_u16, StaticArray[0xac_u8, 0xcd_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x27_u8, 0x5c_u8])

  CLSID_CDebugDocumentHelper = LibC::GUID.new(0x83b8bca6_u32, 0x687c_u16, 0x11d0_u16, StaticArray[0xa4_u8, 0x5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x27_u8, 0x5c_u8])

  CLSID_MachineDebugManager_RETAIL = LibC::GUID.new(0xc0a3666_u32, 0x30c9_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])

  CLSID_MachineDebugManager_DEBUG = LibC::GUID.new(0x49769cec_u32, 0x3a55_u16, 0x4bb0_u16, StaticArray[0xb6_u8, 0x97_u8, 0x88_u8, 0xfe_u8, 0xde_u8, 0x77_u8, 0xe8_u8, 0xea_u8])

  CLSID_DefaultDebugSessionProvider = LibC::GUID.new(0x834128a2_u32, 0x51f4_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])

  @[Flags]
  enum SYM_LOAD_FLAGS : UInt32
    SLMFLAG_NONE = 0_u32
    SLMFLAG_VIRTUAL = 1_u32
    SLMFLAG_ALT_INDEX = 2_u32
    SLMFLAG_NO_SYMBOLS = 4_u32
  end
  @[Flags]
  enum IMAGE_SECTION_CHARACTERISTICS : UInt32
    IMAGE_SCN_TYPE_NO_PAD = 8_u32
    IMAGE_SCN_CNT_CODE = 32_u32
    IMAGE_SCN_CNT_INITIALIZED_DATA = 64_u32
    IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128_u32
    IMAGE_SCN_LNK_OTHER = 256_u32
    IMAGE_SCN_LNK_INFO = 512_u32
    IMAGE_SCN_LNK_REMOVE = 2048_u32
    IMAGE_SCN_LNK_COMDAT = 4096_u32
    IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384_u32
    IMAGE_SCN_GPREL = 32768_u32
    IMAGE_SCN_MEM_FARDATA = 32768_u32
    IMAGE_SCN_MEM_PURGEABLE = 131072_u32
    IMAGE_SCN_MEM_16BIT = 131072_u32
    IMAGE_SCN_MEM_LOCKED = 262144_u32
    IMAGE_SCN_MEM_PRELOAD = 524288_u32
    IMAGE_SCN_ALIGN_1BYTES = 1048576_u32
    IMAGE_SCN_ALIGN_2BYTES = 2097152_u32
    IMAGE_SCN_ALIGN_4BYTES = 3145728_u32
    IMAGE_SCN_ALIGN_8BYTES = 4194304_u32
    IMAGE_SCN_ALIGN_16BYTES = 5242880_u32
    IMAGE_SCN_ALIGN_32BYTES = 6291456_u32
    IMAGE_SCN_ALIGN_64BYTES = 7340032_u32
    IMAGE_SCN_ALIGN_128BYTES = 8388608_u32
    IMAGE_SCN_ALIGN_256BYTES = 9437184_u32
    IMAGE_SCN_ALIGN_512BYTES = 10485760_u32
    IMAGE_SCN_ALIGN_1024BYTES = 11534336_u32
    IMAGE_SCN_ALIGN_2048BYTES = 12582912_u32
    IMAGE_SCN_ALIGN_4096BYTES = 13631488_u32
    IMAGE_SCN_ALIGN_8192BYTES = 14680064_u32
    IMAGE_SCN_ALIGN_MASK = 15728640_u32
    IMAGE_SCN_LNK_NRELOC_OVFL = 16777216_u32
    IMAGE_SCN_MEM_DISCARDABLE = 33554432_u32
    IMAGE_SCN_MEM_NOT_CACHED = 67108864_u32
    IMAGE_SCN_MEM_NOT_PAGED = 134217728_u32
    IMAGE_SCN_MEM_SHARED = 268435456_u32
    IMAGE_SCN_MEM_EXECUTE = 536870912_u32
    IMAGE_SCN_MEM_READ = 1073741824_u32
    IMAGE_SCN_MEM_WRITE = 2147483648_u32
    IMAGE_SCN_SCALE_INDEX = 1_u32
  end
  enum IMAGE_SUBSYSTEM : UInt16
    IMAGE_SUBSYSTEM_UNKNOWN = 0_u16
    IMAGE_SUBSYSTEM_NATIVE = 1_u16
    IMAGE_SUBSYSTEM_WINDOWS_GUI = 2_u16
    IMAGE_SUBSYSTEM_WINDOWS_CUI = 3_u16
    IMAGE_SUBSYSTEM_OS2_CUI = 5_u16
    IMAGE_SUBSYSTEM_POSIX_CUI = 7_u16
    IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8_u16
    IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9_u16
    IMAGE_SUBSYSTEM_EFI_APPLICATION = 10_u16
    IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11_u16
    IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12_u16
    IMAGE_SUBSYSTEM_EFI_ROM = 13_u16
    IMAGE_SUBSYSTEM_XBOX = 14_u16
    IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16_u16
    IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17_u16
  end
  @[Flags]
  enum IMAGE_DLL_CHARACTERISTICS : UInt16
    IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32_u16
    IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64_u16
    IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128_u16
    IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256_u16
    IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512_u16
    IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024_u16
    IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048_u16
    IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096_u16
    IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192_u16
    IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384_u16
    IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16_u16
    IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32_u16
  end
  enum IMAGE_OPTIONAL_HEADER_MAGIC : UInt16
    IMAGE_NT_OPTIONAL_HDR_MAGIC = 523_u16
    IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267_u16
    IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523_u16
    IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263_u16
  end
  enum BUGCHECK_ERROR : UInt32
    HARDWARE_PROFILE_UNDOCKED_STRING = 1073807361_u32
    HARDWARE_PROFILE_DOCKED_STRING = 1073807362_u32
    HARDWARE_PROFILE_UNKNOWN_STRING = 1073807363_u32
    WINDOWS_NT_BANNER = 1073741950_u32
    WINDOWS_NT_CSD_STRING = 1073741959_u32
    WINDOWS_NT_INFO_STRING = 1073741960_u32
    WINDOWS_NT_MP_STRING = 1073741961_u32
    THREAD_TERMINATE_HELD_MUTEX = 1073741962_u32
    WINDOWS_NT_INFO_STRING_PLURAL = 1073741981_u32
    WINDOWS_NT_RC_STRING = 1073741982_u32
    APC_INDEX_MISMATCH = 1_u32
    DEVICE_QUEUE_NOT_BUSY = 2_u32
    INVALID_AFFINITY_SET = 3_u32
    INVALID_DATA_ACCESS_TRAP = 4_u32
    INVALID_PROCESS_ATTACH_ATTEMPT = 5_u32
    INVALID_PROCESS_DETACH_ATTEMPT = 6_u32
    INVALID_SOFTWARE_INTERRUPT = 7_u32
    IRQL_NOT_DISPATCH_LEVEL = 8_u32
    IRQL_NOT_GREATER_OR_EQUAL = 9_u32
    IRQL_NOT_LESS_OR_EQUAL = 10_u32
    NO_EXCEPTION_HANDLING_SUPPORT = 11_u32
    MAXIMUM_WAIT_OBJECTS_EXCEEDED = 12_u32
    MUTEX_LEVEL_NUMBER_VIOLATION = 13_u32
    NO_USER_MODE_CONTEXT = 14_u32
    SPIN_LOCK_ALREADY_OWNED = 15_u32
    SPIN_LOCK_NOT_OWNED = 16_u32
    THREAD_NOT_MUTEX_OWNER = 17_u32
    TRAP_CAUSE_UNKNOWN = 18_u32
    EMPTY_THREAD_REAPER_LIST = 19_u32
    CREATE_DELETE_LOCK_NOT_LOCKED = 20_u32
    LAST_CHANCE_CALLED_FROM_KMODE = 21_u32
    CID_HANDLE_CREATION = 22_u32
    CID_HANDLE_DELETION = 23_u32
    REFERENCE_BY_POINTER = 24_u32
    BAD_POOL_HEADER = 25_u32
    MEMORY_MANAGEMENT = 26_u32
    PFN_SHARE_COUNT = 27_u32
    PFN_REFERENCE_COUNT = 28_u32
    NO_SPIN_LOCK_AVAILABLE = 29_u32
    KMODE_EXCEPTION_NOT_HANDLED = 30_u32
    SHARED_RESOURCE_CONV_ERROR = 31_u32
    KERNEL_APC_PENDING_DURING_EXIT = 32_u32
    QUOTA_UNDERFLOW = 33_u32
    FILE_SYSTEM = 34_u32
    FAT_FILE_SYSTEM = 35_u32
    NTFS_FILE_SYSTEM = 36_u32
    NPFS_FILE_SYSTEM = 37_u32
    CDFS_FILE_SYSTEM = 38_u32
    RDR_FILE_SYSTEM = 39_u32
    CORRUPT_ACCESS_TOKEN = 40_u32
    SECURITY_SYSTEM = 41_u32
    INCONSISTENT_IRP = 42_u32
    PANIC_STACK_SWITCH = 43_u32
    PORT_DRIVER_INTERNAL = 44_u32
    SCSI_DISK_DRIVER_INTERNAL = 45_u32
    DATA_BUS_ERROR = 46_u32
    INSTRUCTION_BUS_ERROR = 47_u32
    SET_OF_INVALID_CONTEXT = 48_u32
    PHASE0_INITIALIZATION_FAILED = 49_u32
    PHASE1_INITIALIZATION_FAILED = 50_u32
    UNEXPECTED_INITIALIZATION_CALL = 51_u32
    CACHE_MANAGER = 52_u32
    NO_MORE_IRP_STACK_LOCATIONS = 53_u32
    DEVICE_REFERENCE_COUNT_NOT_ZERO = 54_u32
    FLOPPY_INTERNAL_ERROR = 55_u32
    SERIAL_DRIVER_INTERNAL = 56_u32
    SYSTEM_EXIT_OWNED_MUTEX = 57_u32
    SYSTEM_UNWIND_PREVIOUS_USER = 58_u32
    SYSTEM_SERVICE_EXCEPTION = 59_u32
    INTERRUPT_UNWIND_ATTEMPTED = 60_u32
    INTERRUPT_EXCEPTION_NOT_HANDLED = 61_u32
    MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED = 62_u32
    NO_MORE_SYSTEM_PTES = 63_u32
    TARGET_MDL_TOO_SMALL = 64_u32
    MUST_SUCCEED_POOL_EMPTY = 65_u32
    ATDISK_DRIVER_INTERNAL = 66_u32
    NO_SUCH_PARTITION = 67_u32
    MULTIPLE_IRP_COMPLETE_REQUESTS = 68_u32
    INSUFFICIENT_SYSTEM_MAP_REGS = 69_u32
    DEREF_UNKNOWN_LOGON_SESSION = 70_u32
    REF_UNKNOWN_LOGON_SESSION = 71_u32
    CANCEL_STATE_IN_COMPLETED_IRP = 72_u32
    PAGE_FAULT_WITH_INTERRUPTS_OFF = 73_u32
    IRQL_GT_ZERO_AT_SYSTEM_SERVICE = 74_u32
    STREAMS_INTERNAL_ERROR = 75_u32
    FATAL_UNHANDLED_HARD_ERROR = 76_u32
    NO_PAGES_AVAILABLE = 77_u32
    PFN_LIST_CORRUPT = 78_u32
    NDIS_INTERNAL_ERROR = 79_u32
    PAGE_FAULT_IN_NONPAGED_AREA = 80_u32
    PAGE_FAULT_IN_NONPAGED_AREA_M = 268435536_u32
    REGISTRY_ERROR = 81_u32
    MAILSLOT_FILE_SYSTEM = 82_u32
    NO_BOOT_DEVICE = 83_u32
    LM_SERVER_INTERNAL_ERROR = 84_u32
    DATA_COHERENCY_EXCEPTION = 85_u32
    INSTRUCTION_COHERENCY_EXCEPTION = 86_u32
    XNS_INTERNAL_ERROR = 87_u32
    VOLMGRX_INTERNAL_ERROR = 88_u32
    PINBALL_FILE_SYSTEM = 89_u32
    CRITICAL_SERVICE_FAILED = 90_u32
    SET_ENV_VAR_FAILED = 91_u32
    HAL_INITIALIZATION_FAILED = 92_u32
    UNSUPPORTED_PROCESSOR = 93_u32
    OBJECT_INITIALIZATION_FAILED = 94_u32
    SECURITY_INITIALIZATION_FAILED = 95_u32
    PROCESS_INITIALIZATION_FAILED = 96_u32
    HAL1_INITIALIZATION_FAILED = 97_u32
    OBJECT1_INITIALIZATION_FAILED = 98_u32
    SECURITY1_INITIALIZATION_FAILED = 99_u32
    SYMBOLIC_INITIALIZATION_FAILED = 100_u32
    MEMORY1_INITIALIZATION_FAILED = 101_u32
    CACHE_INITIALIZATION_FAILED = 102_u32
    CONFIG_INITIALIZATION_FAILED = 103_u32
    FILE_INITIALIZATION_FAILED = 104_u32
    IO1_INITIALIZATION_FAILED = 105_u32
    LPC_INITIALIZATION_FAILED = 106_u32
    PROCESS1_INITIALIZATION_FAILED = 107_u32
    REFMON_INITIALIZATION_FAILED = 108_u32
    SESSION1_INITIALIZATION_FAILED = 109_u32
    BOOTPROC_INITIALIZATION_FAILED = 110_u32
    VSL_INITIALIZATION_FAILED = 111_u32
    SOFT_RESTART_FATAL_ERROR = 112_u32
    ASSIGN_DRIVE_LETTERS_FAILED = 114_u32
    CONFIG_LIST_FAILED = 115_u32
    BAD_SYSTEM_CONFIG_INFO = 116_u32
    CANNOT_WRITE_CONFIGURATION = 117_u32
    PROCESS_HAS_LOCKED_PAGES = 118_u32
    KERNEL_STACK_INPAGE_ERROR = 119_u32
    PHASE0_EXCEPTION = 120_u32
    MISMATCHED_HAL = 121_u32
    KERNEL_DATA_INPAGE_ERROR = 122_u32
    INACCESSIBLE_BOOT_DEVICE = 123_u32
    BUGCODE_NDIS_DRIVER = 124_u32
    INSTALL_MORE_MEMORY = 125_u32
    SYSTEM_THREAD_EXCEPTION_NOT_HANDLED = 126_u32
    SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M = 268435582_u32
    UNEXPECTED_KERNEL_MODE_TRAP = 127_u32
    UNEXPECTED_KERNEL_MODE_TRAP_M = 268435583_u32
    NMI_HARDWARE_FAILURE = 128_u32
    SPIN_LOCK_INIT_FAILURE = 129_u32
    DFS_FILE_SYSTEM = 130_u32
    OFS_FILE_SYSTEM = 131_u32
    RECOM_DRIVER = 132_u32
    SETUP_FAILURE = 133_u32
    AUDIT_FAILURE = 134_u32
    MBR_CHECKSUM_MISMATCH = 139_u32
    KERNEL_MODE_EXCEPTION_NOT_HANDLED = 142_u32
    KERNEL_MODE_EXCEPTION_NOT_HANDLED_M = 268435598_u32
    PP0_INITIALIZATION_FAILED = 143_u32
    PP1_INITIALIZATION_FAILED = 144_u32
    WIN32K_INIT_OR_RIT_FAILURE = 145_u32
    UP_DRIVER_ON_MP_SYSTEM = 146_u32
    INVALID_KERNEL_HANDLE = 147_u32
    KERNEL_STACK_LOCKED_AT_EXIT = 148_u32
    PNP_INTERNAL_ERROR = 149_u32
    INVALID_WORK_QUEUE_ITEM = 150_u32
    BOUND_IMAGE_UNSUPPORTED = 151_u32
    END_OF_NT_EVALUATION_PERIOD = 152_u32
    INVALID_REGION_OR_SEGMENT = 153_u32
    SYSTEM_LICENSE_VIOLATION = 154_u32
    UDFS_FILE_SYSTEM = 155_u32
    MACHINE_CHECK_EXCEPTION = 156_u32
    USER_MODE_HEALTH_MONITOR = 158_u32
    DRIVER_POWER_STATE_FAILURE = 159_u32
    INTERNAL_POWER_ERROR = 160_u32
    PCI_BUS_DRIVER_INTERNAL = 161_u32
    MEMORY_IMAGE_CORRUPT = 162_u32
    ACPI_DRIVER_INTERNAL = 163_u32
    CNSS_FILE_SYSTEM_FILTER = 164_u32
    ACPI_BIOS_ERROR = 165_u32
    FP_EMULATION_ERROR = 166_u32
    BAD_EXHANDLE = 167_u32
    BOOTING_IN_SAFEMODE_MINIMAL = 168_u32
    BOOTING_IN_SAFEMODE_NETWORK = 169_u32
    BOOTING_IN_SAFEMODE_DSREPAIR = 170_u32
    SESSION_HAS_VALID_POOL_ON_EXIT = 171_u32
    HAL_MEMORY_ALLOCATION = 172_u32
    VIDEO_DRIVER_DEBUG_REPORT_REQUEST = 1073741997_u32
    BGI_DETECTED_VIOLATION = 177_u32
    VIDEO_DRIVER_INIT_FAILURE = 180_u32
    BOOTLOG_LOADED = 181_u32
    BOOTLOG_NOT_LOADED = 182_u32
    BOOTLOG_ENABLED = 183_u32
    ATTEMPTED_SWITCH_FROM_DPC = 184_u32
    CHIPSET_DETECTED_ERROR = 185_u32
    SESSION_HAS_VALID_VIEWS_ON_EXIT = 186_u32
    NETWORK_BOOT_INITIALIZATION_FAILED = 187_u32
    NETWORK_BOOT_DUPLICATE_ADDRESS = 188_u32
    INVALID_HIBERNATED_STATE = 189_u32
    ATTEMPTED_WRITE_TO_READONLY_MEMORY = 190_u32
    MUTEX_ALREADY_OWNED = 191_u32
    PCI_CONFIG_SPACE_ACCESS_FAILURE = 192_u32
    SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION = 193_u32
    BAD_POOL_CALLER = 194_u32
    SYSTEM_IMAGE_BAD_SIGNATURE = 195_u32
    DRIVER_VERIFIER_DETECTED_VIOLATION = 196_u32
    DRIVER_CORRUPTED_EXPOOL = 197_u32
    DRIVER_CAUGHT_MODIFYING_FREED_POOL = 198_u32
    TIMER_OR_DPC_INVALID = 199_u32
    IRQL_UNEXPECTED_VALUE = 200_u32
    DRIVER_VERIFIER_IOMANAGER_VIOLATION = 201_u32
    PNP_DETECTED_FATAL_ERROR = 202_u32
    DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS = 203_u32
    PAGE_FAULT_IN_FREED_SPECIAL_POOL = 204_u32
    PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 205_u32
    DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS = 206_u32
    TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE = 207_u32
    DRIVER_CORRUPTED_MMPOOL = 208_u32
    DRIVER_IRQL_NOT_LESS_OR_EQUAL = 209_u32
    BUGCODE_ID_DRIVER = 210_u32
    DRIVER_PORTION_MUST_BE_NONPAGED = 211_u32
    SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD = 212_u32
    DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL = 213_u32
    DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 214_u32
    DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION_M = 268435670_u32
    DRIVER_UNMAPPING_INVALID_VIEW = 215_u32
    DRIVER_USED_EXCESSIVE_PTES = 216_u32
    LOCKED_PAGES_TRACKER_CORRUPTION = 217_u32
    SYSTEM_PTE_MISUSE = 218_u32
    DRIVER_CORRUPTED_SYSPTES = 219_u32
    DRIVER_INVALID_STACK_ACCESS = 220_u32
    POOL_CORRUPTION_IN_FILE_AREA = 222_u32
    IMPERSONATING_WORKER_THREAD = 223_u32
    ACPI_BIOS_FATAL_ERROR = 224_u32
    WORKER_THREAD_RETURNED_AT_BAD_IRQL = 225_u32
    MANUALLY_INITIATED_CRASH = 226_u32
    RESOURCE_NOT_OWNED = 227_u32
    WORKER_INVALID = 228_u32
    POWER_FAILURE_SIMULATE = 229_u32
    DRIVER_VERIFIER_DMA_VIOLATION = 230_u32
    INVALID_FLOATING_POINT_STATE = 231_u32
    INVALID_CANCEL_OF_FILE_OPEN = 232_u32
    ACTIVE_EX_WORKER_THREAD_TERMINATION = 233_u32
    SAVER_UNSPECIFIED = 61440_u32
    SAVER_BLANKSCREEN = 61442_u32
    SAVER_INPUT = 61443_u32
    SAVER_WATCHDOG = 61444_u32
    SAVER_STARTNOTVISIBLE = 61445_u32
    SAVER_NAVIGATIONMODEL = 61446_u32
    SAVER_OUTOFMEMORY = 61447_u32
    SAVER_GRAPHICS = 61448_u32
    SAVER_NAVSERVERTIMEOUT = 61449_u32
    SAVER_CHROMEPROCESSCRASH = 61450_u32
    SAVER_NOTIFICATIONDISMISSAL = 61451_u32
    SAVER_SPEECHDISMISSAL = 61452_u32
    SAVER_CALLDISMISSAL = 61453_u32
    SAVER_APPBARDISMISSAL = 61454_u32
    SAVER_RILADAPTATIONCRASH = 61455_u32
    SAVER_APPLISTUNREACHABLE = 61456_u32
    SAVER_REPORTNOTIFICATIONFAILURE = 61457_u32
    SAVER_UNEXPECTEDSHUTDOWN = 61458_u32
    SAVER_RPCFAILURE = 61459_u32
    SAVER_AUXILIARYFULLDUMP = 61460_u32
    SAVER_ACCOUNTPROVSVCINITFAILURE = 61461_u32
    SAVER_MTBFCOMMANDTIMEOUT = 789_u32
    SAVER_MTBFCOMMANDHANG = 61697_u32
    SAVER_MTBFPASSBUGCHECK = 61698_u32
    SAVER_MTBFIOERROR = 61699_u32
    SAVER_RENDERTHREADHANG = 61952_u32
    SAVER_RENDERMOBILEUIOOM = 61953_u32
    SAVER_DEVICEUPDATEUNSPECIFIED = 62208_u32
    SAVER_AUDIODRIVERHANG = 62464_u32
    SAVER_BATTERYPULLOUT = 62720_u32
    SAVER_MEDIACORETESTHANG = 62976_u32
    SAVER_RESOURCEMANAGEMENT = 63232_u32
    SAVER_CAPTURESERVICE = 63488_u32
    SAVER_WAITFORSHELLREADY = 63744_u32
    SAVER_NONRESPONSIVEPROCESS = 404_u32
    SAVER_SICKAPPLICATION = 34918_u32
    THREAD_STUCK_IN_DEVICE_DRIVER = 234_u32
    THREAD_STUCK_IN_DEVICE_DRIVER_M = 268435690_u32
    DIRTY_MAPPED_PAGES_CONGESTION = 235_u32
    SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT = 236_u32
    UNMOUNTABLE_BOOT_VOLUME = 237_u32
    CRITICAL_PROCESS_DIED = 239_u32
    STORAGE_MINIPORT_ERROR = 240_u32
    SCSI_VERIFIER_DETECTED_VIOLATION = 241_u32
    HARDWARE_INTERRUPT_STORM = 242_u32
    DISORDERLY_SHUTDOWN = 243_u32
    CRITICAL_OBJECT_TERMINATION = 244_u32
    FLTMGR_FILE_SYSTEM = 245_u32
    PCI_VERIFIER_DETECTED_VIOLATION = 246_u32
    DRIVER_OVERRAN_STACK_BUFFER = 247_u32
    RAMDISK_BOOT_INITIALIZATION_FAILED = 248_u32
    DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN = 249_u32
    HTTP_DRIVER_CORRUPTED = 250_u32
    RECURSIVE_MACHINE_CHECK = 251_u32
    ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY = 252_u32
    DIRTY_NOWRITE_PAGES_CONGESTION = 253_u32
    BUGCODE_USB_DRIVER = 254_u32
    BC_BLUETOOTH_VERIFIER_FAULT = 3070_u32
    BC_BTHMINI_VERIFIER_FAULT = 3071_u32
    RESERVE_QUEUE_OVERFLOW = 255_u32
    LOADER_BLOCK_MISMATCH = 256_u32
    CLOCK_WATCHDOG_TIMEOUT = 257_u32
    DPC_WATCHDOG_TIMEOUT = 258_u32
    MUP_FILE_SYSTEM = 259_u32
    AGP_INVALID_ACCESS = 260_u32
    AGP_GART_CORRUPTION = 261_u32
    AGP_ILLEGALLY_REPROGRAMMED = 262_u32
    KERNEL_EXPAND_STACK_ACTIVE = 263_u32
    THIRD_PARTY_FILE_SYSTEM_FAILURE = 264_u32
    CRITICAL_STRUCTURE_CORRUPTION = 265_u32
    APP_TAGGING_INITIALIZATION_FAILED = 266_u32
    DFSC_FILE_SYSTEM = 267_u32
    FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION = 268_u32
    WDF_VIOLATION = 269_u32
    VIDEO_MEMORY_MANAGEMENT_INTERNAL = 270_u32
    DRIVER_INVALID_CRUNTIME_PARAMETER = 272_u32
    RECURSIVE_NMI = 273_u32
    MSRPC_STATE_VIOLATION = 274_u32
    VIDEO_DXGKRNL_FATAL_ERROR = 275_u32
    VIDEO_SHADOW_DRIVER_FATAL_ERROR = 276_u32
    AGP_INTERNAL = 277_u32
    VIDEO_TDR_FAILURE = 278_u32
    VIDEO_TDR_TIMEOUT_DETECTED = 279_u32
    NTHV_GUEST_ERROR = 280_u32
    VIDEO_SCHEDULER_INTERNAL_ERROR = 281_u32
    EM_INITIALIZATION_ERROR = 282_u32
    DRIVER_RETURNED_HOLDING_CANCEL_LOCK = 283_u32
    ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE = 284_u32
    EVENT_TRACING_FATAL_ERROR = 285_u32
    TOO_MANY_RECURSIVE_FAULTS = 286_u32
    INVALID_DRIVER_HANDLE = 287_u32
    BITLOCKER_FATAL_ERROR = 288_u32
    DRIVER_VIOLATION = 289_u32
    WHEA_INTERNAL_ERROR = 290_u32
    CRYPTO_SELF_TEST_FAILURE = 291_u32
    WHEA_UNCORRECTABLE_ERROR = 292_u32
    NMR_INVALID_STATE = 293_u32
    NETIO_INVALID_POOL_CALLER = 294_u32
    PAGE_NOT_ZERO = 295_u32
    WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY = 296_u32
    WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY = 297_u32
    MUI_NO_VALID_SYSTEM_LANGUAGE = 298_u32
    FAULTY_HARDWARE_CORRUPTED_PAGE = 299_u32
    EXFAT_FILE_SYSTEM = 300_u32
    VOLSNAP_OVERLAPPED_TABLE_ACCESS = 301_u32
    INVALID_MDL_RANGE = 302_u32
    VHD_BOOT_INITIALIZATION_FAILED = 303_u32
    DYNAMIC_ADD_PROCESSOR_MISMATCH = 304_u32
    INVALID_EXTENDED_PROCESSOR_STATE = 305_u32
    RESOURCE_OWNER_POINTER_INVALID = 306_u32
    DPC_WATCHDOG_VIOLATION = 307_u32
    DRIVE_EXTENDER = 308_u32
    REGISTRY_FILTER_DRIVER_EXCEPTION = 309_u32
    VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE = 310_u32
    WIN32K_HANDLE_MANAGER = 311_u32
    GPIO_CONTROLLER_DRIVER_ERROR = 312_u32
    KERNEL_SECURITY_CHECK_FAILURE = 313_u32
    KERNEL_MODE_HEAP_CORRUPTION = 314_u32
    PASSIVE_INTERRUPT_ERROR = 315_u32
    INVALID_IO_BOOST_STATE = 316_u32
    CRITICAL_INITIALIZATION_FAILURE = 317_u32
    ERRATA_WORKAROUND_UNSUCCESSFUL = 318_u32
    REGISTRY_CALLBACK_DRIVER_EXCEPTION = 319_u32
    STORAGE_DEVICE_ABNORMALITY_DETECTED = 320_u32
    VIDEO_ENGINE_TIMEOUT_DETECTED = 321_u32
    VIDEO_TDR_APPLICATION_BLOCKED = 322_u32
    PROCESSOR_DRIVER_INTERNAL = 323_u32
    BUGCODE_USB3_DRIVER = 324_u32
    SECURE_BOOT_VIOLATION = 325_u32
    NDIS_NET_BUFFER_LIST_INFO_ILLEGALLY_TRANSFERRED = 326_u32
    ABNORMAL_RESET_DETECTED = 327_u32
    IO_OBJECT_INVALID = 328_u32
    REFS_FILE_SYSTEM = 329_u32
    KERNEL_WMI_INTERNAL = 330_u32
    SOC_SUBSYSTEM_FAILURE = 331_u32
    FATAL_ABNORMAL_RESET_ERROR = 332_u32
    EXCEPTION_SCOPE_INVALID = 333_u32
    SOC_CRITICAL_DEVICE_REMOVED = 334_u32
    PDC_WATCHDOG_TIMEOUT = 335_u32
    TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK = 336_u32
    UNSUPPORTED_INSTRUCTION_MODE = 337_u32
    INVALID_PUSH_LOCK_FLAGS = 338_u32
    KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION = 339_u32
    UNEXPECTED_STORE_EXCEPTION = 340_u32
    OS_DATA_TAMPERING = 341_u32
    WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP = 342_u32
    KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION = 343_u32
    ILLEGAL_IOMMU_PAGE_FAULT = 344_u32
    HAL_ILLEGAL_IOMMU_PAGE_FAULT = 345_u32
    SDBUS_INTERNAL_ERROR = 346_u32
    WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE = 347_u32
    PDC_WATCHDOG_TIMEOUT_LIVEDUMP = 348_u32
    SOC_SUBSYSTEM_FAILURE_LIVEDUMP = 349_u32
    BUGCODE_NDIS_DRIVER_LIVE_DUMP = 350_u32
    CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP = 351_u32
    WIN32K_ATOMIC_CHECK_FAILURE = 352_u32
    LIVE_SYSTEM_DUMP = 353_u32
    KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE = 354_u32
    WORKER_THREAD_TEST_CONDITION = 355_u32
    WIN32K_CRITICAL_FAILURE = 356_u32
    CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP = 357_u32
    CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP = 358_u32
    CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP = 359_u32
    CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP = 360_u32
    CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP = 361_u32
    CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP = 362_u32
    CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP = 363_u32
    INVALID_RUNDOWN_PROTECTION_FLAGS = 364_u32
    INVALID_SLOT_ALLOCATOR_FLAGS = 365_u32
    ERESOURCE_INVALID_RELEASE = 366_u32
    CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP = 367_u32
    CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG = 368_u32
    CRYPTO_LIBRARY_INTERNAL_ERROR = 369_u32
    COREMSGCALL_INTERNAL_ERROR = 371_u32
    COREMSG_INTERNAL_ERROR = 372_u32
    PREVIOUS_FATAL_ABNORMAL_RESET_ERROR = 373_u32
    ELAM_DRIVER_DETECTED_FATAL_ERROR = 376_u32
    CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP = 377_u32
    PROFILER_CONFIGURATION_ILLEGAL = 379_u32
    PDC_LOCK_WATCHDOG_LIVEDUMP = 380_u32
    PDC_UNEXPECTED_REVOCATION_LIVEDUMP = 381_u32
    MICROCODE_REVISION_MISMATCH = 382_u32
    HYPERGUARD_INITIALIZATION_FAILURE = 383_u32
    WVR_LIVEDUMP_REPLICATION_IOCONTEXT_TIMEOUT = 384_u32
    WVR_LIVEDUMP_STATE_TRANSITION_TIMEOUT = 385_u32
    WVR_LIVEDUMP_RECOVERY_IOCONTEXT_TIMEOUT = 386_u32
    WVR_LIVEDUMP_APP_IO_TIMEOUT = 387_u32
    WVR_LIVEDUMP_MANUALLY_INITIATED = 388_u32
    WVR_LIVEDUMP_STATE_FAILURE = 389_u32
    WVR_LIVEDUMP_CRITICAL_ERROR = 390_u32
    VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD = 391_u32
    CLUSTER_CSVFS_LIVEDUMP = 392_u32
    BAD_OBJECT_HEADER = 393_u32
    SILO_CORRUPT = 394_u32
    SECURE_KERNEL_ERROR = 395_u32
    HYPERGUARD_VIOLATION = 396_u32
    SECURE_FAULT_UNHANDLED = 397_u32
    KERNEL_PARTITION_REFERENCE_VIOLATION = 398_u32
    SYNTHETIC_EXCEPTION_UNHANDLED = 399_u32
    WIN32K_CRITICAL_FAILURE_LIVEDUMP = 400_u32
    PF_DETECTED_CORRUPTION = 401_u32
    KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL = 402_u32
    VIDEO_DXGKRNL_LIVEDUMP = 403_u32
    KERNEL_STORAGE_SLOT_IN_USE = 409_u32
    SMB_SERVER_LIVEDUMP = 405_u32
    LOADER_ROLLBACK_DETECTED = 406_u32
    WIN32K_SECURITY_FAILURE = 407_u32
    UFX_LIVEDUMP = 408_u32
    WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO = 410_u32
    TTM_FATAL_ERROR = 411_u32
    WIN32K_POWER_WATCHDOG_TIMEOUT = 412_u32
    CLUSTER_SVHDX_LIVEDUMP = 413_u32
    BUGCODE_NETADAPTER_DRIVER = 414_u32
    PDC_PRIVILEGE_CHECK_LIVEDUMP = 415_u32
    TTM_WATCHDOG_TIMEOUT = 416_u32
    WIN32K_CALLOUT_WATCHDOG_LIVEDUMP = 417_u32
    WIN32K_CALLOUT_WATCHDOG_BUGCHECK = 418_u32
    CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP = 419_u32
    DRIPS_SW_HW_DIVERGENCE_LIVEDUMP = 420_u32
    USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP = 421_u32
    BLUETOOTH_ERROR_RECOVERY_LIVEDUMP = 422_u32
    SMB_REDIRECTOR_LIVEDUMP = 423_u32
    VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP = 424_u32
    DIRECTED_FX_TRANSITION_LIVEDUMP = 425_u32
    EXCEPTION_ON_INVALID_STACK = 426_u32
    UNWIND_ON_INVALID_STACK = 427_u32
    VIDEO_MINIPORT_FAILED_LIVEDUMP = 432_u32
    VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP = 440_u32
    DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP = 452_u32
    IO_THREADPOOL_DEADLOCK_LIVEDUMP = 453_u32
    FAST_ERESOURCE_PRECONDITION_VIOLATION = 454_u32
    STORE_DATA_STRUCTURE_CORRUPTION = 455_u32
    MANUALLY_INITIATED_POWER_BUTTON_HOLD = 456_u32
    USER_MODE_HEALTH_MONITOR_LIVEDUMP = 457_u32
    SYNTHETIC_WATCHDOG_TIMEOUT = 458_u32
    INVALID_SILO_DETACH = 459_u32
    EXRESOURCE_TIMEOUT_LIVEDUMP = 460_u32
    INVALID_CALLBACK_STACK_ADDRESS = 461_u32
    INVALID_KERNEL_STACK_ADDRESS = 462_u32
    HARDWARE_WATCHDOG_TIMEOUT = 463_u32
    ACPI_FIRMWARE_WATCHDOG_TIMEOUT = 464_u32
    TELEMETRY_ASSERTS_LIVEDUMP = 465_u32
    WORKER_THREAD_INVALID_STATE = 466_u32
    WFP_INVALID_OPERATION = 467_u32
    UCMUCSI_LIVEDUMP = 468_u32
    DRIVER_PNP_WATCHDOG = 469_u32
    WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS = 470_u32
    EFS_FATAL_ERROR = 471_u32
    UCMUCSI_FAILURE = 472_u32
    HAL_IOMMU_INTERNAL_ERROR = 473_u32
    HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR = 474_u32
    IPI_WATCHDOG_TIMEOUT = 475_u32
    DMA_COMMON_BUFFER_VECTOR_ERROR = 476_u32
    BUGCODE_MBBADAPTER_DRIVER = 477_u32
    BUGCODE_WIFIADAPTER_DRIVER = 478_u32
    PROCESSOR_START_TIMEOUT = 479_u32
    INVALID_ALTERNATE_SYSTEM_CALL_HANDLER_REGISTRATION = 480_u32
    DEVICE_DIAGNOSTIC_LOG_LIVEDUMP = 481_u32
    AZURE_DEVICE_FW_DUMP = 482_u32
    BREAKAWAY_CABLE_TRANSITION = 483_u32
    VIDEO_DXGKRNL_SYSMM_FATAL_ERROR = 484_u32
    DRIVER_VERIFIER_TRACKING_LIVE_DUMP = 485_u32
    CRASHDUMP_WATCHDOG_TIMEOUT = 486_u32
    REGISTRY_LIVE_DUMP = 487_u32
    INVALID_THREAD_AFFINITY_STATE = 488_u32
    ILLEGAL_ATS_INITIALIZATION = 489_u32
    SECURE_PCI_CONFIG_SPACE_ACCESS_VIOLATION = 490_u32
    DAM_WATCHDOG_TIMEOUT = 491_u32
    XBOX_VMCTRL_CS_TIMEOUT = 854_u32
    XBOX_CORRUPTED_IMAGE = 855_u32
    XBOX_INVERTED_FUNCTION_TABLE_OVERFLOW = 856_u32
    XBOX_CORRUPTED_IMAGE_BASE = 857_u32
    XBOX_XDS_WATCHDOG_TIMEOUT = 858_u32
    XBOX_SHUTDOWN_WATCHDOG_TIMEOUT = 859_u32
    XBOX_360_SYSTEM_CRASH = 864_u32
    XBOX_360_SYSTEM_CRASH_RESERVED = 1056_u32
    XBOX_SECURITY_FAILUE = 1057_u32
    KERNEL_CFG_INIT_FAILURE = 1058_u32
    MANUALLY_INITIATED_POWER_BUTTON_HOLD_LIVE_DUMP = 4552_u32
    HYPERVISOR_ERROR = 131073_u32
    WINLOGON_FATAL_ERROR = 3221226010_u32
    MANUALLY_INITIATED_CRASH1 = 3735936685_u32
    BUGCHECK_CONTEXT_MODIFIER = 2147483648_u32
  end
  enum FACILITY_CODE : UInt32
    FACILITY_NULL = 0_u32
    FACILITY_RPC = 1_u32
    FACILITY_DISPATCH = 2_u32
    FACILITY_STORAGE = 3_u32
    FACILITY_ITF = 4_u32
    FACILITY_WIN32 = 7_u32
    FACILITY_WINDOWS = 8_u32
    FACILITY_SSPI = 9_u32
    FACILITY_SECURITY = 9_u32
    FACILITY_CONTROL = 10_u32
    FACILITY_CERT = 11_u32
    FACILITY_INTERNET = 12_u32
    FACILITY_MEDIASERVER = 13_u32
    FACILITY_MSMQ = 14_u32
    FACILITY_SETUPAPI = 15_u32
    FACILITY_SCARD = 16_u32
    FACILITY_COMPLUS = 17_u32
    FACILITY_AAF = 18_u32
    FACILITY_URT = 19_u32
    FACILITY_ACS = 20_u32
    FACILITY_DPLAY = 21_u32
    FACILITY_UMI = 22_u32
    FACILITY_SXS = 23_u32
    FACILITY_WINDOWS_CE = 24_u32
    FACILITY_HTTP = 25_u32
    FACILITY_USERMODE_COMMONLOG = 26_u32
    FACILITY_WER = 27_u32
    FACILITY_USERMODE_FILTER_MANAGER = 31_u32
    FACILITY_BACKGROUNDCOPY = 32_u32
    FACILITY_CONFIGURATION = 33_u32
    FACILITY_WIA = 33_u32
    FACILITY_STATE_MANAGEMENT = 34_u32
    FACILITY_METADIRECTORY = 35_u32
    FACILITY_WINDOWSUPDATE = 36_u32
    FACILITY_DIRECTORYSERVICE = 37_u32
    FACILITY_GRAPHICS = 38_u32
    FACILITY_SHELL = 39_u32
    FACILITY_NAP = 39_u32
    FACILITY_TPM_SERVICES = 40_u32
    FACILITY_TPM_SOFTWARE = 41_u32
    FACILITY_UI = 42_u32
    FACILITY_XAML = 43_u32
    FACILITY_ACTION_QUEUE = 44_u32
    FACILITY_PLA = 48_u32
    FACILITY_WINDOWS_SETUP = 48_u32
    FACILITY_FVE = 49_u32
    FACILITY_FWP = 50_u32
    FACILITY_WINRM = 51_u32
    FACILITY_NDIS = 52_u32
    FACILITY_USERMODE_HYPERVISOR = 53_u32
    FACILITY_CMI = 54_u32
    FACILITY_USERMODE_VIRTUALIZATION = 55_u32
    FACILITY_USERMODE_VOLMGR = 56_u32
    FACILITY_BCD = 57_u32
    FACILITY_USERMODE_VHD = 58_u32
    FACILITY_USERMODE_HNS = 59_u32
    FACILITY_SDIAG = 60_u32
    FACILITY_WEBSERVICES = 61_u32
    FACILITY_WINPE = 61_u32
    FACILITY_WPN = 62_u32
    FACILITY_WINDOWS_STORE = 63_u32
    FACILITY_INPUT = 64_u32
    FACILITY_QUIC = 65_u32
    FACILITY_EAP = 66_u32
    FACILITY_IORING = 70_u32
    FACILITY_WINDOWS_DEFENDER = 80_u32
    FACILITY_OPC = 81_u32
    FACILITY_XPS = 82_u32
    FACILITY_MBN = 84_u32
    FACILITY_POWERSHELL = 84_u32
    FACILITY_RAS = 83_u32
    FACILITY_P2P_INT = 98_u32
    FACILITY_P2P = 99_u32
    FACILITY_DAF = 100_u32
    FACILITY_BLUETOOTH_ATT = 101_u32
    FACILITY_AUDIO = 102_u32
    FACILITY_STATEREPOSITORY = 103_u32
    FACILITY_VISUALCPP = 109_u32
    FACILITY_SCRIPT = 112_u32
    FACILITY_PARSE = 113_u32
    FACILITY_BLB = 120_u32
    FACILITY_BLB_CLI = 121_u32
    FACILITY_WSBAPP = 122_u32
    FACILITY_BLBUI = 128_u32
    FACILITY_USN = 129_u32
    FACILITY_USERMODE_VOLSNAP = 130_u32
    FACILITY_TIERING = 131_u32
    FACILITY_WSB_ONLINE = 133_u32
    FACILITY_ONLINE_ID = 134_u32
    FACILITY_DEVICE_UPDATE_AGENT = 135_u32
    FACILITY_DRVSERVICING = 136_u32
    FACILITY_DLS = 153_u32
    FACILITY_DELIVERY_OPTIMIZATION = 208_u32
    FACILITY_USERMODE_SPACES = 231_u32
    FACILITY_USER_MODE_SECURITY_CORE = 232_u32
    FACILITY_USERMODE_LICENSING = 234_u32
    FACILITY_SOS = 160_u32
    FACILITY_OCP_UPDATE_AGENT = 173_u32
    FACILITY_DEBUGGERS = 176_u32
    FACILITY_SPP = 256_u32
    FACILITY_RESTORE = 256_u32
    FACILITY_DMSERVER = 256_u32
    FACILITY_DEPLOYMENT_SERVICES_SERVER = 257_u32
    FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258_u32
    FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259_u32
    FACILITY_DEPLOYMENT_SERVICES_UTIL = 260_u32
    FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261_u32
    FACILITY_DEPLOYMENT_SERVICES_PXE = 263_u32
    FACILITY_DEPLOYMENT_SERVICES_TFTP = 264_u32
    FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272_u32
    FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278_u32
    FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289_u32
    FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290_u32
    FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293_u32
    FACILITY_HSP_SERVICES = 296_u32
    FACILITY_HSP_SOFTWARE = 297_u32
    FACILITY_LINGUISTIC_SERVICES = 305_u32
    FACILITY_AUDIOSTREAMING = 1094_u32
    FACILITY_TTD = 1490_u32
    FACILITY_ACCELERATOR = 1536_u32
    FACILITY_WMAAECMA = 1996_u32
    FACILITY_DIRECTMUSIC = 2168_u32
    FACILITY_DIRECT3D10 = 2169_u32
    FACILITY_DXGI = 2170_u32
    FACILITY_DXGI_DDI = 2171_u32
    FACILITY_DIRECT3D11 = 2172_u32
    FACILITY_DIRECT3D11_DEBUG = 2173_u32
    FACILITY_DIRECT3D12 = 2174_u32
    FACILITY_DIRECT3D12_DEBUG = 2175_u32
    FACILITY_DXCORE = 2176_u32
    FACILITY_PRESENTATION = 2177_u32
    FACILITY_LEAP = 2184_u32
    FACILITY_AUDCLNT = 2185_u32
    FACILITY_WINCODEC_DWRITE_DWM = 2200_u32
    FACILITY_WINML = 2192_u32
    FACILITY_DIRECT2D = 2201_u32
    FACILITY_DEFRAG = 2304_u32
    FACILITY_USERMODE_SDBUS = 2305_u32
    FACILITY_JSCRIPT = 2306_u32
    FACILITY_PIDGENX = 2561_u32
    FACILITY_EAS = 85_u32
    FACILITY_WEB = 885_u32
    FACILITY_WEB_SOCKET = 886_u32
    FACILITY_MOBILE = 1793_u32
    FACILITY_SQLITE = 1967_u32
    FACILITY_SERVICE_FABRIC = 1968_u32
    FACILITY_UTC = 1989_u32
    FACILITY_WEP = 2049_u32
    FACILITY_SYNCENGINE = 2050_u32
    FACILITY_XBOX = 2339_u32
    FACILITY_GAME = 2340_u32
    FACILITY_PIX = 2748_u32
    FACILITY_NT_BIT = 268435456_u32
  end
  @[Flags]
  enum THREAD_ERROR_MODE : UInt32
    SEM_ALL_ERRORS = 0_u32
    SEM_FAILCRITICALERRORS = 1_u32
    SEM_NOGPFAULTERRORBOX = 2_u32
    SEM_NOOPENFILEERRORBOX = 32768_u32
    SEM_NOALIGNMENTFAULTEXCEPT = 4_u32
  end
  @[Flags]
  enum FORMAT_MESSAGE_OPTIONS : UInt32
    FORMAT_MESSAGE_ALLOCATE_BUFFER = 256_u32
    FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192_u32
    FORMAT_MESSAGE_FROM_HMODULE = 2048_u32
    FORMAT_MESSAGE_FROM_STRING = 1024_u32
    FORMAT_MESSAGE_FROM_SYSTEM = 4096_u32
    FORMAT_MESSAGE_IGNORE_INSERTS = 512_u32
  end
  enum RTL_VIRTUAL_UNWIND_HANDLER_TYPE : UInt32
    UNW_FLAG_NHANDLER = 0_u32
    UNW_FLAG_EHANDLER = 1_u32
    UNW_FLAG_UHANDLER = 2_u32
    UNW_FLAG_CHAININFO = 4_u32
  end
  enum OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS : UInt32
    WCT_ASYNC_OPEN_FLAG = 1_u32
  end
  enum SYM_SRV_STORE_FILE_FLAGS : UInt32
    SYMSTOREOPT_COMPRESS = 1_u32
    SYMSTOREOPT_OVERWRITE = 2_u32
    SYMSTOREOPT_PASS_IF_EXISTS = 64_u32
    SYMSTOREOPT_POINTER = 8_u32
    SYMSTOREOPT_RETURNINDEX = 4_u32
  end
  enum PROCESSOR_ARCHITECTURE : UInt16
    PROCESSOR_ARCHITECTURE_AMD64 = 9_u16
    PROCESSOR_ARCHITECTURE_IA64 = 6_u16
    PROCESSOR_ARCHITECTURE_INTEL = 0_u16
    PROCESSOR_ARCHITECTURE_ARM = 5_u16
    PROCESSOR_ARCHITECTURE_UNKNOWN = 65535_u16
  end
  enum IMAGE_DIRECTORY_ENTRY : UInt32
    IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7_u32
    IMAGE_DIRECTORY_ENTRY_BASERELOC = 5_u32
    IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11_u32
    IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14_u32
    IMAGE_DIRECTORY_ENTRY_DEBUG = 6_u32
    IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13_u32
    IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3_u32
    IMAGE_DIRECTORY_ENTRY_EXPORT = 0_u32
    IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8_u32
    IMAGE_DIRECTORY_ENTRY_IAT = 12_u32
    IMAGE_DIRECTORY_ENTRY_IMPORT = 1_u32
    IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10_u32
    IMAGE_DIRECTORY_ENTRY_RESOURCE = 2_u32
    IMAGE_DIRECTORY_ENTRY_SECURITY = 4_u32
    IMAGE_DIRECTORY_ENTRY_TLS = 9_u32
  end
  enum WAIT_CHAIN_THREAD_OPTIONS : UInt32
    WCT_OUT_OF_PROC_COM_FLAG = 2_u32
    WCT_OUT_OF_PROC_CS_FLAG = 4_u32
    WCT_OUT_OF_PROC_FLAG = 1_u32
  end
  enum SYM_FIND_ID_OPTION : UInt32
    SSRVOPT_DWORD = 2_u32
    SSRVOPT_DWORDPTR = 4_u32
    SSRVOPT_GUIDPTR = 8_u32
  end
  @[Flags]
  enum IMAGE_FILE_CHARACTERISTICS : UInt16
    IMAGE_FILE_RELOCS_STRIPPED = 1_u16
    IMAGE_FILE_EXECUTABLE_IMAGE = 2_u16
    IMAGE_FILE_LINE_NUMS_STRIPPED = 4_u16
    IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8_u16
    IMAGE_FILE_AGGRESIVE_WS_TRIM = 16_u16
    IMAGE_FILE_LARGE_ADDRESS_AWARE = 32_u16
    IMAGE_FILE_BYTES_REVERSED_LO = 128_u16
    IMAGE_FILE_32BIT_MACHINE = 256_u16
    IMAGE_FILE_DEBUG_STRIPPED = 512_u16
    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024_u16
    IMAGE_FILE_NET_RUN_FROM_SWAP = 2048_u16
    IMAGE_FILE_SYSTEM = 4096_u16
    IMAGE_FILE_DLL = 8192_u16
    IMAGE_FILE_UP_SYSTEM_ONLY = 16384_u16
    IMAGE_FILE_BYTES_REVERSED_HI = 32768_u16
  end
  @[Flags]
  enum IMAGE_FILE_CHARACTERISTICS2 : UInt32
    IMAGE_FILE_RELOCS_STRIPPED2 = 1_u32
    IMAGE_FILE_EXECUTABLE_IMAGE2 = 2_u32
    IMAGE_FILE_LINE_NUMS_STRIPPED2 = 4_u32
    IMAGE_FILE_LOCAL_SYMS_STRIPPED2 = 8_u32
    IMAGE_FILE_AGGRESIVE_WS_TRIM2 = 16_u32
    IMAGE_FILE_LARGE_ADDRESS_AWARE2 = 32_u32
    IMAGE_FILE_BYTES_REVERSED_LO2 = 128_u32
    IMAGE_FILE_32BIT_MACHINE2 = 256_u32
    IMAGE_FILE_DEBUG_STRIPPED2 = 512_u32
    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP2 = 1024_u32
    IMAGE_FILE_NET_RUN_FROM_SWAP2 = 2048_u32
    IMAGE_FILE_SYSTEM_2 = 4096_u32
    IMAGE_FILE_DLL_2 = 8192_u32
    IMAGE_FILE_UP_SYSTEM_ONLY_2 = 16384_u32
    IMAGE_FILE_BYTES_REVERSED_HI_2 = 32768_u32
  end
  @[Flags]
  enum SYMBOL_INFO_FLAGS : UInt32
    SYMFLAG_CLR_TOKEN = 262144_u32
    SYMFLAG_CONSTANT = 256_u32
    SYMFLAG_EXPORT = 512_u32
    SYMFLAG_FORWARDER = 1024_u32
    SYMFLAG_FRAMEREL = 32_u32
    SYMFLAG_FUNCTION = 2048_u32
    SYMFLAG_ILREL = 65536_u32
    SYMFLAG_LOCAL = 128_u32
    SYMFLAG_METADATA = 131072_u32
    SYMFLAG_PARAMETER = 64_u32
    SYMFLAG_REGISTER = 8_u32
    SYMFLAG_REGREL = 16_u32
    SYMFLAG_SLOT = 32768_u32
    SYMFLAG_THUNK = 8192_u32
    SYMFLAG_TLSREL = 16384_u32
    SYMFLAG_VALUEPRESENT = 1_u32
    SYMFLAG_VIRTUAL = 4096_u32
  end
  enum IMAGEHLP_CBA_EVENT_SEVERITY : UInt32
    Sevinfo = 0_u32
    Sevproblem = 1_u32
    Sevattn = 2_u32
    Sevfatal = 3_u32
  end
  enum IMAGEHLP_GET_TYPE_INFO_FLAGS : UInt32
    IMAGEHLP_GET_TYPE_INFO_CHILDREN = 2_u32
    IMAGEHLP_GET_TYPE_INFO_UNCACHED = 1_u32
  end
  enum RIP_INFO_TYPE : UInt32
    SLE_ERROR = 1_u32
    SLE_MINORERROR = 2_u32
    SLE_WARNING = 3_u32
  end
  enum VER_PLATFORM : UInt32
    VER_PLATFORM_WIN32s = 0_u32
    VER_PLATFORM_WIN32_WINDOWS = 1_u32
    VER_PLATFORM_WIN32_NT = 2_u32
  end
  enum IMAGE_DEBUG_TYPE : UInt32
    IMAGE_DEBUG_TYPE_UNKNOWN = 0_u32
    IMAGE_DEBUG_TYPE_COFF = 1_u32
    IMAGE_DEBUG_TYPE_CODEVIEW = 2_u32
    IMAGE_DEBUG_TYPE_FPO = 3_u32
    IMAGE_DEBUG_TYPE_MISC = 4_u32
    IMAGE_DEBUG_TYPE_EXCEPTION = 5_u32
    IMAGE_DEBUG_TYPE_FIXUP = 6_u32
    IMAGE_DEBUG_TYPE_BORLAND = 9_u32
  end
  enum MINIDUMP_THREAD_INFO_DUMP_FLAGS : UInt32
    MINIDUMP_THREAD_INFO_ERROR_THREAD = 1_u32
    MINIDUMP_THREAD_INFO_EXITED_THREAD = 4_u32
    MINIDUMP_THREAD_INFO_INVALID_CONTEXT = 16_u32
    MINIDUMP_THREAD_INFO_INVALID_INFO = 8_u32
    MINIDUMP_THREAD_INFO_INVALID_TEB = 32_u32
    MINIDUMP_THREAD_INFO_WRITING_THREAD = 2_u32
  end
  enum DEBUG_EVENT_CODE : UInt32
    CREATE_PROCESS_DEBUG_EVENT = 3_u32
    CREATE_THREAD_DEBUG_EVENT = 2_u32
    EXCEPTION_DEBUG_EVENT = 1_u32
    EXIT_PROCESS_DEBUG_EVENT = 5_u32
    EXIT_THREAD_DEBUG_EVENT = 4_u32
    LOAD_DLL_DEBUG_EVENT = 6_u32
    OUTPUT_DEBUG_STRING_EVENT = 8_u32
    RIP_EVENT = 9_u32
    UNLOAD_DLL_DEBUG_EVENT = 7_u32
  end
  @[Flags]
  enum MINIDUMP_MISC_INFO_FLAGS : UInt32
    MINIDUMP_MISC1_PROCESS_ID = 1_u32
    MINIDUMP_MISC1_PROCESS_TIMES = 2_u32
  end
  enum MODLOAD_DATA_TYPE : UInt32
    DBHHEADER_DEBUGDIRS = 1_u32
    DBHHEADER_CVMISC = 2_u32
  end
  enum ModelObjectKind
    ObjectPropertyAccessor = 0_i32
    ObjectContext = 1_i32
    ObjectTargetObject = 2_i32
    ObjectTargetObjectReference = 3_i32
    ObjectSynthetic = 4_i32
    ObjectNoValue = 5_i32
    ObjectError = 6_i32
    ObjectIntrinsic = 7_i32
    ObjectMethod = 8_i32
    ObjectKeyReference = 9_i32
  end
  enum SymbolKind
    Symbol = 0_i32
    SymbolModule = 1_i32
    SymbolType = 2_i32
    SymbolField = 3_i32
    SymbolConstant = 4_i32
    SymbolData = 5_i32
    SymbolBaseClass = 6_i32
    SymbolPublic = 7_i32
    SymbolFunction = 8_i32
  end
  enum TypeKind
    TypeUDT = 0_i32
    TypePointer = 1_i32
    TypeMemberPointer = 2_i32
    TypeArray = 3_i32
    TypeFunction = 4_i32
    TypeTypedef = 5_i32
    TypeEnum = 6_i32
    TypeIntrinsic = 7_i32
    TypeExtendedArray = 8_i32
  end
  enum IntrinsicKind
    IntrinsicVoid = 0_i32
    IntrinsicBool = 1_i32
    IntrinsicChar = 2_i32
    IntrinsicWChar = 3_i32
    IntrinsicInt = 4_i32
    IntrinsicUInt = 5_i32
    IntrinsicLong = 6_i32
    IntrinsicULong = 7_i32
    IntrinsicFloat = 8_i32
    IntrinsicHRESULT = 9_i32
    IntrinsicChar16 = 10_i32
    IntrinsicChar32 = 11_i32
  end
  enum PointerKind
    PointerStandard = 0_i32
    PointerReference = 1_i32
    PointerRValueReference = 2_i32
    PointerCXHat = 3_i32
    PointerManagedReference = 4_i32
  end
  enum CallingConventionKind
    CallingConventionUnknown = 0_i32
    CallingConventionCDecl = 1_i32
    CallingConventionFastCall = 2_i32
    CallingConventionStdCall = 3_i32
    CallingConventionSysCall = 4_i32
    CallingConventionThisCall = 5_i32
  end
  enum LocationKind
    LocationMember = 0_i32
    LocationStatic = 1_i32
    LocationConstant = 2_i32
    LocationNone = 3_i32
  end
  enum PreferredFormat
    FormatNone = 0_i32
    FormatSingleCharacter = 1_i32
    FormatQuotedString = 2_i32
    FormatString = 3_i32
    FormatQuotedUnicodeString = 4_i32
    FormatUnicodeString = 5_i32
    FormatQuotedUTF8String = 6_i32
    FormatUTF8String = 7_i32
    FormatBSTRString = 8_i32
    FormatQuotedHString = 9_i32
    FormatHString = 10_i32
    FormatRaw = 11_i32
    FormatEnumNameOnly = 12_i32
    FormatEscapedStringWithQuote = 13_i32
    FormatUTF32String = 14_i32
    FormatQuotedUTF32String = 15_i32
  end
  enum RawSearchFlags
    RawSearchNone = 0_i32
    RawSearchNoBases = 1_i32
  end
  enum ErrorClass
    ErrorClassWarning = 0_i32
    ErrorClassError = 1_i32
  end
  enum SignatureComparison
    Unrelated = 0_i32
    Ambiguous = 1_i32
    LessSpecific = 2_i32
    MoreSpecific = 3_i32
    Identical = 4_i32
  end
  enum SymbolSearchOptions
    SymbolSearchNone = 0_i32
    SymbolSearchCompletion = 1_i32
    SymbolSearchCaseInsensitive = 2_i32
  end
  enum LanguageKind
    LanguageUnknown = 0_i32
    LanguageC = 1_i32
    LanguageCPP = 2_i32
    LanguageAssembly = 3_i32
  end
  enum VarArgsKind
    VarArgsNone = 0_i32
    VarArgsCStyle = 1_i32
  end
  enum ScriptChangeKind
    ScriptRename = 0_i32
  end
  enum ScriptDebugState
    ScriptDebugNoDebugger = 0_i32
    ScriptDebugNotExecuting = 1_i32
    ScriptDebugExecuting = 2_i32
    ScriptDebugBreak = 3_i32
  end
  enum ScriptDebugEventFilter
    ScriptDebugEventFilterEntry = 0_i32
    ScriptDebugEventFilterException = 1_i32
    ScriptDebugEventFilterUnhandledException = 2_i32
    ScriptDebugEventFilterAbort = 3_i32
  end
  enum ScriptDebugEvent
    ScriptDebugBreakpoint = 0_i32
    ScriptDebugStep = 1_i32
    ScriptDebugException = 2_i32
    ScriptDebugAsyncBreak = 3_i32
  end
  enum ScriptExecutionKind
    ScriptExecutionNormal = 0_i32
    ScriptExecutionStepIn = 1_i32
    ScriptExecutionStepOut = 2_i32
    ScriptExecutionStepOver = 3_i32
  end
  enum EXT_TDOP
    EXT_TDOP_COPY = 0_i32
    EXT_TDOP_RELEASE = 1_i32
    EXT_TDOP_SET_FROM_EXPR = 2_i32
    EXT_TDOP_SET_FROM_U64_EXPR = 3_i32
    EXT_TDOP_GET_FIELD = 4_i32
    EXT_TDOP_EVALUATE = 5_i32
    EXT_TDOP_GET_TYPE_NAME = 6_i32
    EXT_TDOP_OUTPUT_TYPE_NAME = 7_i32
    EXT_TDOP_OUTPUT_SIMPLE_VALUE = 8_i32
    EXT_TDOP_OUTPUT_FULL_VALUE = 9_i32
    EXT_TDOP_HAS_FIELD = 10_i32
    EXT_TDOP_GET_FIELD_OFFSET = 11_i32
    EXT_TDOP_GET_ARRAY_ELEMENT = 12_i32
    EXT_TDOP_GET_DEREFERENCE = 13_i32
    EXT_TDOP_GET_TYPE_SIZE = 14_i32
    EXT_TDOP_OUTPUT_TYPE_DEFINITION = 15_i32
    EXT_TDOP_GET_POINTER_TO = 16_i32
    EXT_TDOP_SET_FROM_TYPE_ID_AND_U64 = 17_i32
    EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64 = 18_i32
    EXT_TDOP_COUNT = 19_i32
  end
  enum DBGKD_MAJOR_TYPES
    DBGKD_MAJOR_NT = 0_i32
    DBGKD_MAJOR_XBOX = 1_i32
    DBGKD_MAJOR_BIG = 2_i32
    DBGKD_MAJOR_EXDI = 3_i32
    DBGKD_MAJOR_NTBD = 4_i32
    DBGKD_MAJOR_EFI = 5_i32
    DBGKD_MAJOR_TNT = 6_i32
    DBGKD_MAJOR_SINGULARITY = 7_i32
    DBGKD_MAJOR_HYPERVISOR = 8_i32
    DBGKD_MAJOR_MIDORI = 9_i32
    DBGKD_MAJOR_CE = 10_i32
    DBGKD_MAJOR_COUNT = 11_i32
  end
  enum WCT_OBJECT_TYPE
    WctCriticalSectionType = 1_i32
    WctSendMessageType = 2_i32
    WctMutexType = 3_i32
    WctAlpcType = 4_i32
    WctComType = 5_i32
    WctThreadWaitType = 6_i32
    WctProcessWaitType = 7_i32
    WctThreadType = 8_i32
    WctComActivationType = 9_i32
    WctUnknownType = 10_i32
    WctSocketIoType = 11_i32
    WctSmbIoType = 12_i32
    WctMaxType = 13_i32
  end
  enum WCT_OBJECT_STATUS
    WctStatusNoAccess = 1_i32
    WctStatusRunning = 2_i32
    WctStatusBlocked = 3_i32
    WctStatusPidOnly = 4_i32
    WctStatusPidOnlyRpcss = 5_i32
    WctStatusOwned = 6_i32
    WctStatusNotOwned = 7_i32
    WctStatusAbandoned = 8_i32
    WctStatusUnknown = 9_i32
    WctStatusError = 10_i32
    WctStatusMax = 11_i32
  end
  enum MINIDUMP_STREAM_TYPE
    UnusedStream = 0_i32
    ReservedStream0 = 1_i32
    ReservedStream1 = 2_i32
    ThreadListStream = 3_i32
    ModuleListStream = 4_i32
    MemoryListStream = 5_i32
    ExceptionStream = 6_i32
    SystemInfoStream = 7_i32
    ThreadExListStream = 8_i32
    Memory64ListStream = 9_i32
    CommentStreamA = 10_i32
    CommentStreamW = 11_i32
    HandleDataStream = 12_i32
    FunctionTableStream = 13_i32
    UnloadedModuleListStream = 14_i32
    MiscInfoStream = 15_i32
    MemoryInfoListStream = 16_i32
    ThreadInfoListStream = 17_i32
    HandleOperationListStream = 18_i32
    TokenStream = 19_i32
    JavaScriptDataStream = 20_i32
    SystemMemoryInfoStream = 21_i32
    ProcessVmCountersStream = 22_i32
    IptTraceStream = 23_i32
    ThreadNamesStream = 24_i32
    Cestreamnull = 32768_i32
    Cestreamsysteminfo = 32769_i32
    Cestreamexception = 32770_i32
    Cestreammodulelist = 32771_i32
    Cestreamprocesslist = 32772_i32
    Cestreamthreadlist = 32773_i32
    Cestreamthreadcontextlist = 32774_i32
    Cestreamthreadcallstacklist = 32775_i32
    Cestreammemoryvirtuallist = 32776_i32
    Cestreammemoryphysicallist = 32777_i32
    Cestreambucketparameters = 32778_i32
    Cestreamprocessmodulemap = 32779_i32
    Cestreamdiagnosislist = 32780_i32
    LastReservedStream = 65535_i32
  end
  enum MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE
    MiniHandleObjectInformationNone = 0_i32
    MiniThreadInformation1 = 1_i32
    MiniMutantInformation1 = 2_i32
    MiniMutantInformation2 = 3_i32
    MiniProcessInformation1 = 4_i32
    MiniProcessInformation2 = 5_i32
    MiniEventInformation1 = 6_i32
    MiniSectionInformation1 = 7_i32
    MiniSemaphoreInformation1 = 8_i32
    MiniHandleObjectInformationTypeMax = 9_i32
  end
  enum MINIDUMP_CALLBACK_TYPE
    ModuleCallback = 0_i32
    ThreadCallback = 1_i32
    ThreadExCallback = 2_i32
    IncludeThreadCallback = 3_i32
    IncludeModuleCallback = 4_i32
    MemoryCallback = 5_i32
    CancelCallback = 6_i32
    WriteKernelMinidumpCallback = 7_i32
    KernelMinidumpStatusCallback = 8_i32
    RemoveMemoryCallback = 9_i32
    IncludeVmRegionCallback = 10_i32
    IoStartCallback = 11_i32
    IoWriteAllCallback = 12_i32
    IoFinishCallback = 13_i32
    ReadMemoryFailureCallback = 14_i32
    SecondaryFlagsCallback = 15_i32
    IsProcessSnapshotCallback = 16_i32
    VmStartCallback = 17_i32
    VmQueryCallback = 18_i32
    VmPreReadCallback = 19_i32
    VmPostReadCallback = 20_i32
  end
  enum THREAD_WRITE_FLAGS
    ThreadWriteThread = 1_i32
    ThreadWriteStack = 2_i32
    ThreadWriteContext = 4_i32
    ThreadWriteBackingStore = 8_i32
    ThreadWriteInstructionWindow = 16_i32
    ThreadWriteThreadData = 32_i32
    ThreadWriteThreadInfo = 64_i32
  end
  enum MODULE_WRITE_FLAGS
    ModuleWriteModule = 1_i32
    ModuleWriteDataSeg = 2_i32
    ModuleWriteMiscRecord = 4_i32
    ModuleWriteCvRecord = 8_i32
    ModuleReferencedByMemory = 16_i32
    ModuleWriteTlsData = 32_i32
    ModuleWriteCodeSegs = 64_i32
  end
  @[Flags]
  enum MINIDUMP_TYPE : UInt32
    MiniDumpNormal = 0_u32
    MiniDumpWithDataSegs = 1_u32
    MiniDumpWithFullMemory = 2_u32
    MiniDumpWithHandleData = 4_u32
    MiniDumpFilterMemory = 8_u32
    MiniDumpScanMemory = 16_u32
    MiniDumpWithUnloadedModules = 32_u32
    MiniDumpWithIndirectlyReferencedMemory = 64_u32
    MiniDumpFilterModulePaths = 128_u32
    MiniDumpWithProcessThreadData = 256_u32
    MiniDumpWithPrivateReadWriteMemory = 512_u32
    MiniDumpWithoutOptionalData = 1024_u32
    MiniDumpWithFullMemoryInfo = 2048_u32
    MiniDumpWithThreadInfo = 4096_u32
    MiniDumpWithCodeSegs = 8192_u32
    MiniDumpWithoutAuxiliaryState = 16384_u32
    MiniDumpWithFullAuxiliaryState = 32768_u32
    MiniDumpWithPrivateWriteCopyMemory = 65536_u32
    MiniDumpIgnoreInaccessibleMemory = 131072_u32
    MiniDumpWithTokenInformation = 262144_u32
    MiniDumpWithModuleHeaders = 524288_u32
    MiniDumpFilterTriage = 1048576_u32
    MiniDumpWithAvxXStateContext = 2097152_u32
    MiniDumpWithIptTrace = 4194304_u32
    MiniDumpScanInaccessiblePartialPages = 8388608_u32
    MiniDumpFilterWriteCombinedMemory = 16777216_u32
    MiniDumpValidTypeFlags = 33554431_u32
  end
  enum MINIDUMP_SECONDARY_FLAGS
    MiniSecondaryWithoutPowerInfo = 1_i32
    MiniSecondaryValidFlags = 1_i32
  end
  enum SCRIPTLANGUAGEVERSION
    SCRIPTLANGUAGEVERSION_DEFAULT = 0_i32
    SCRIPTLANGUAGEVERSION_5_7 = 1_i32
    SCRIPTLANGUAGEVERSION_5_8 = 2_i32
    SCRIPTLANGUAGEVERSION_MAX = 255_i32
  end
  enum SCRIPTSTATE
    SCRIPTSTATE_UNINITIALIZED = 0_i32
    SCRIPTSTATE_INITIALIZED = 5_i32
    SCRIPTSTATE_STARTED = 1_i32
    SCRIPTSTATE_CONNECTED = 2_i32
    SCRIPTSTATE_DISCONNECTED = 3_i32
    SCRIPTSTATE_CLOSED = 4_i32
  end
  enum SCRIPTTRACEINFO
    SCRIPTTRACEINFO_SCRIPTSTART = 0_i32
    SCRIPTTRACEINFO_SCRIPTEND = 1_i32
    SCRIPTTRACEINFO_COMCALLSTART = 2_i32
    SCRIPTTRACEINFO_COMCALLEND = 3_i32
    SCRIPTTRACEINFO_CREATEOBJSTART = 4_i32
    SCRIPTTRACEINFO_CREATEOBJEND = 5_i32
    SCRIPTTRACEINFO_GETOBJSTART = 6_i32
    SCRIPTTRACEINFO_GETOBJEND = 7_i32
  end
  enum SCRIPTTHREADSTATE
    SCRIPTTHREADSTATE_NOTINSCRIPT = 0_i32
    SCRIPTTHREADSTATE_RUNNING = 1_i32
  end
  enum SCRIPTGCTYPE
    SCRIPTGCTYPE_NORMAL = 0_i32
    SCRIPTGCTYPE_EXHAUSTIVE = 1_i32
  end
  enum SCRIPTUICITEM
    SCRIPTUICITEM_INPUTBOX = 1_i32
    SCRIPTUICITEM_MSGBOX = 2_i32
  end
  enum SCRIPTUICHANDLING
    SCRIPTUICHANDLING_ALLOW = 0_i32
    SCRIPTUICHANDLING_NOUIERROR = 1_i32
    SCRIPTUICHANDLING_NOUIDEFAULT = 2_i32
  end
  @[Flags]
  enum DBGPROP_ATTRIB_FLAGS : UInt32
    DBGPROP_ATTRIB_NO_ATTRIB = 0_u32
    DBGPROP_ATTRIB_VALUE_IS_INVALID = 8_u32
    DBGPROP_ATTRIB_VALUE_IS_EXPANDABLE = 16_u32
    DBGPROP_ATTRIB_VALUE_IS_FAKE = 32_u32
    DBGPROP_ATTRIB_VALUE_IS_METHOD = 256_u32
    DBGPROP_ATTRIB_VALUE_IS_EVENT = 512_u32
    DBGPROP_ATTRIB_VALUE_IS_RAW_STRING = 1024_u32
    DBGPROP_ATTRIB_VALUE_READONLY = 2048_u32
    DBGPROP_ATTRIB_ACCESS_PUBLIC = 4096_u32
    DBGPROP_ATTRIB_ACCESS_PRIVATE = 8192_u32
    DBGPROP_ATTRIB_ACCESS_PROTECTED = 16384_u32
    DBGPROP_ATTRIB_ACCESS_FINAL = 32768_u32
    DBGPROP_ATTRIB_STORAGE_GLOBAL = 65536_u32
    DBGPROP_ATTRIB_STORAGE_STATIC = 131072_u32
    DBGPROP_ATTRIB_STORAGE_FIELD = 262144_u32
    DBGPROP_ATTRIB_STORAGE_VIRTUAL = 524288_u32
    DBGPROP_ATTRIB_TYPE_IS_CONSTANT = 1048576_u32
    DBGPROP_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152_u32
    DBGPROP_ATTRIB_TYPE_IS_VOLATILE = 4194304_u32
    DBGPROP_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608_u32
    DBGPROP_ATTRIB_FRAME_INTRYBLOCK = 16777216_u32
    DBGPROP_ATTRIB_FRAME_INCATCHBLOCK = 33554432_u32
    DBGPROP_ATTRIB_FRAME_INFINALLYBLOCK = 67108864_u32
    DBGPROP_ATTRIB_VALUE_IS_RETURN_VALUE = 134217728_u32
    DBGPROP_ATTRIB_VALUE_PENDING_MUTATION = 268435456_u32
  end
  @[Flags]
  enum DBGPROP_INFO : UInt32
    DBGPROP_INFO_NAME = 1_u32
    DBGPROP_INFO_TYPE = 2_u32
    DBGPROP_INFO_VALUE = 4_u32
    DBGPROP_INFO_FULLNAME = 32_u32
    DBGPROP_INFO_ATTRIBUTES = 8_u32
    DBGPROP_INFO_DEBUGPROP = 16_u32
    DBGPROP_INFO_BEAUTIFY = 33554432_u32
    DBGPROP_INFO_CALLTOSTRING = 67108864_u32
    DBGPROP_INFO_AUTOEXPAND = 134217728_u32
  end
  @[Flags]
  enum OBJECT_ATTRIB_FLAG : UInt32
    OBJECT_ATTRIB_NO_ATTRIB = 0_u32
    OBJECT_ATTRIB_NO_NAME = 1_u32
    OBJECT_ATTRIB_NO_TYPE = 2_u32
    OBJECT_ATTRIB_NO_VALUE = 4_u32
    OBJECT_ATTRIB_VALUE_IS_INVALID = 8_u32
    OBJECT_ATTRIB_VALUE_IS_OBJECT = 16_u32
    OBJECT_ATTRIB_VALUE_IS_ENUM = 32_u32
    OBJECT_ATTRIB_VALUE_IS_CUSTOM = 64_u32
    OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE = 112_u32
    OBJECT_ATTRIB_VALUE_HAS_CODE = 128_u32
    OBJECT_ATTRIB_TYPE_IS_OBJECT = 256_u32
    OBJECT_ATTRIB_TYPE_HAS_CODE = 512_u32
    OBJECT_ATTRIB_TYPE_IS_EXPANDABLE = 256_u32
    OBJECT_ATTRIB_SLOT_IS_CATEGORY = 1024_u32
    OBJECT_ATTRIB_VALUE_READONLY = 2048_u32
    OBJECT_ATTRIB_ACCESS_PUBLIC = 4096_u32
    OBJECT_ATTRIB_ACCESS_PRIVATE = 8192_u32
    OBJECT_ATTRIB_ACCESS_PROTECTED = 16384_u32
    OBJECT_ATTRIB_ACCESS_FINAL = 32768_u32
    OBJECT_ATTRIB_STORAGE_GLOBAL = 65536_u32
    OBJECT_ATTRIB_STORAGE_STATIC = 131072_u32
    OBJECT_ATTRIB_STORAGE_FIELD = 262144_u32
    OBJECT_ATTRIB_STORAGE_VIRTUAL = 524288_u32
    OBJECT_ATTRIB_TYPE_IS_CONSTANT = 1048576_u32
    OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152_u32
    OBJECT_ATTRIB_TYPE_IS_VOLATILE = 4194304_u32
    OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608_u32
    OBJECT_ATTRIB_IS_CLASS = 16777216_u32
    OBJECT_ATTRIB_IS_FUNCTION = 33554432_u32
    OBJECT_ATTRIB_IS_VARIABLE = 67108864_u32
    OBJECT_ATTRIB_IS_PROPERTY = 134217728_u32
    OBJECT_ATTRIB_IS_MACRO = 268435456_u32
    OBJECT_ATTRIB_IS_TYPE = 536870912_u32
    OBJECT_ATTRIB_IS_INHERITED = 1073741824_u32
    OBJECT_ATTRIB_IS_INTERFACE = 2147483648_u32
  end
  enum PROP_INFO_FLAGS
    PROP_INFO_NAME = 1_i32
    PROP_INFO_TYPE = 2_i32
    PROP_INFO_VALUE = 4_i32
    PROP_INFO_FULLNAME = 32_i32
    PROP_INFO_ATTRIBUTES = 8_i32
    PROP_INFO_DEBUGPROP = 16_i32
    PROP_INFO_AUTOEXPAND = 134217728_i32
  end
  enum EX_PROP_INFO_FLAGS
    EX_PROP_INFO_ID = 256_i32
    EX_PROP_INFO_NTYPE = 512_i32
    EX_PROP_INFO_NVALUE = 1024_i32
    EX_PROP_INFO_LOCKBYTES = 2048_i32
    EX_PROP_INFO_DEBUGEXTPROP = 4096_i32
  end
  enum BREAKPOINT_STATE
    BREAKPOINT_DELETED = 0_i32
    BREAKPOINT_DISABLED = 1_i32
    BREAKPOINT_ENABLED = 2_i32
  end
  enum BREAKREASON
    BREAKREASON_STEP = 0_i32
    BREAKREASON_BREAKPOINT = 1_i32
    BREAKREASON_DEBUGGER_BLOCK = 2_i32
    BREAKREASON_HOST_INITIATED = 3_i32
    BREAKREASON_LANGUAGE_INITIATED = 4_i32
    BREAKREASON_DEBUGGER_HALT = 5_i32
    BREAKREASON_ERROR = 6_i32
    BREAKREASON_JIT = 7_i32
    BREAKREASON_MUTATION_BREAKPOINT = 8_i32
  end
  enum BREAKRESUME_ACTION
    BREAKRESUMEACTION_ABORT = 0_i32
    BREAKRESUMEACTION_CONTINUE = 1_i32
    BREAKRESUMEACTION_STEP_INTO = 2_i32
    BREAKRESUMEACTION_STEP_OVER = 3_i32
    BREAKRESUMEACTION_STEP_OUT = 4_i32
    BREAKRESUMEACTION_IGNORE = 5_i32
    BREAKRESUMEACTION_STEP_DOCUMENT = 6_i32
  end
  enum ERRORRESUMEACTION
    ERRORRESUMEACTION_ReexecuteErrorStatement = 0_i32
    ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller = 1_i32
    ERRORRESUMEACTION_SkipErrorStatement = 2_i32
  end
  enum DOCUMENTNAMETYPE
    DOCUMENTNAMETYPE_APPNODE = 0_i32
    DOCUMENTNAMETYPE_TITLE = 1_i32
    DOCUMENTNAMETYPE_FILE_TAIL = 2_i32
    DOCUMENTNAMETYPE_URL = 3_i32
    DOCUMENTNAMETYPE_UNIQUE_TITLE = 4_i32
    DOCUMENTNAMETYPE_SOURCE_MAP_URL = 5_i32
  end
  enum PROFILER_SCRIPT_TYPE
    PROFILER_SCRIPT_TYPE_USER = 0_i32
    PROFILER_SCRIPT_TYPE_DYNAMIC = 1_i32
    PROFILER_SCRIPT_TYPE_NATIVE = 2_i32
    PROFILER_SCRIPT_TYPE_DOM = 3_i32
  end
  @[Flags]
  enum PROFILER_EVENT_MASK : UInt32
    PROFILER_EVENT_MASK_TRACE_SCRIPT_FUNCTION_CALL = 1_u32
    PROFILER_EVENT_MASK_TRACE_NATIVE_FUNCTION_CALL = 2_u32
    PROFILER_EVENT_MASK_TRACE_DOM_FUNCTION_CALL = 4_u32
    PROFILER_EVENT_MASK_TRACE_ALL = 3_u32
    PROFILER_EVENT_MASK_TRACE_ALL_WITH_DOM = 7_u32
  end
  @[Flags]
  enum PROFILER_HEAP_OBJECT_FLAGS : UInt32
    PROFILER_HEAP_OBJECT_FLAGS_NEW_OBJECT = 1_u32
    PROFILER_HEAP_OBJECT_FLAGS_IS_ROOT = 2_u32
    PROFILER_HEAP_OBJECT_FLAGS_SITE_CLOSED = 4_u32
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL = 8_u32
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_UNKNOWN = 16_u32
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_DISPATCH = 32_u32
    PROFILER_HEAP_OBJECT_FLAGS_SIZE_APPROXIMATE = 64_u32
    PROFILER_HEAP_OBJECT_FLAGS_SIZE_UNAVAILABLE = 128_u32
    PROFILER_HEAP_OBJECT_FLAGS_NEW_STATE_UNAVAILABLE = 256_u32
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_INSTANCE = 512_u32
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_RUNTIMECLASS = 1024_u32
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_DELEGATE = 2048_u32
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_NAMESPACE = 4096_u32
  end
  enum PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_PROTOTYPE = 1_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_FUNCTION_NAME = 2_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SCOPE_LIST = 3_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INTERNAL_PROPERTY = 4_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_NAME_PROPERTIES = 5_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INDEX_PROPERTIES = 6_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_ATTRIBUTES_SIZE = 7_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_TEXT_CHILDREN_SIZE = 8_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_RELATIONSHIPS = 9_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WINRTEVENTS = 10_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WEAKMAP_COLLECTION_LIST = 11_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAP_COLLECTION_LIST = 12_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SET_COLLECTION_LIST = 13_i32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAX_VALUE = 13_i32
  end
  @[Flags]
  enum PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS : UInt32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_NONE = 0_u32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_GET_ACCESSOR = 65536_u32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_SET_ACCESSOR = 131072_u32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_LET_VARIABLE = 262144_u32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_CONST_VARIABLE = 524288_u32
  end
  @[Flags]
  enum PROFILER_HEAP_ENUM_FLAGS : UInt32
    PROFILER_HEAP_ENUM_FLAGS_NONE = 0_u32
    PROFILER_HEAP_ENUM_FLAGS_STORE_RELATIONSHIP_FLAGS = 1_u32
    PROFILER_HEAP_ENUM_FLAGS_SUBSTRINGS = 2_u32
    PROFILER_HEAP_ENUM_FLAGS_RELATIONSHIP_SUBSTRINGS = 3_u32
  end
  enum PROFILER_RELATIONSHIP_INFO
    PROFILER_PROPERTY_TYPE_NUMBER = 1_i32
    PROFILER_PROPERTY_TYPE_STRING = 2_i32
    PROFILER_PROPERTY_TYPE_HEAP_OBJECT = 3_i32
    PROFILER_PROPERTY_TYPE_EXTERNAL_OBJECT = 4_i32
    PROFILER_PROPERTY_TYPE_BSTR = 5_i32
    PROFILER_PROPERTY_TYPE_SUBSTRING = 6_i32
  end
  enum PROFILER_HEAP_SUMMARY_VERSION
    PROFILER_HEAP_SUMMARY_VERSION_1 = 1_i32
  end
  enum IMAGEHLP_STATUS_REASON
    BindOutOfMemory = 0_i32
    BindRvaToVaFailed = 1_i32
    BindNoRoomInImage = 2_i32
    BindImportModuleFailed = 3_i32
    BindImportProcedureFailed = 4_i32
    BindImportModule = 5_i32
    BindImportProcedure = 6_i32
    BindForwarder = 7_i32
    BindForwarderNOT = 8_i32
    BindImageModified = 9_i32
    BindExpandFileHeaders = 10_i32
    BindImageComplete = 11_i32
    BindMismatchedSymbols = 12_i32
    BindSymbolsNotUpdated = 13_i32
    BindImportProcedure32 = 14_i32
    BindImportProcedure64 = 15_i32
    BindForwarder32 = 16_i32
    BindForwarder64 = 17_i32
    BindForwarderNOT32 = 18_i32
    BindForwarderNOT64 = 19_i32
  end
  enum ADDRESS_MODE
    AddrMode1616 = 0_i32
    AddrMode1632 = 1_i32
    AddrModeReal = 2_i32
    AddrModeFlat = 3_i32
  end
  enum SYM_TYPE
    SymNone = 0_i32
    SymCoff = 1_i32
    SymCv = 2_i32
    SymPdb = 3_i32
    SymExport = 4_i32
    SymDeferred = 5_i32
    SymSym = 6_i32
    SymDia = 7_i32
    SymVirtual = 8_i32
    NumSymTypes = 9_i32
  end
  enum IMAGEHLP_HD_TYPE
    Hdbase = 0_i32
    Hdsym = 1_i32
    Hdsrc = 2_i32
    Hdmax = 3_i32
  end
  enum IMAGEHLP_EXTENDED_OPTIONS
    SYMOPT_EX_DISABLEACCESSTIMEUPDATE = 0_i32
    SYMOPT_EX_LASTVALIDDEBUGDIRECTORY = 1_i32
    SYMOPT_EX_NOIMPLICITPATTERNSEARCH = 2_i32
    SYMOPT_EX_NEVERLOADSYMBOLS = 3_i32
    SYMOPT_EX_MAX = 4_i32
  end
  enum IMAGEHLP_SYMBOL_TYPE_INFO
    TI_GET_SYMTAG = 0_i32
    TI_GET_SYMNAME = 1_i32
    TI_GET_LENGTH = 2_i32
    TI_GET_TYPE = 3_i32
    TI_GET_TYPEID = 4_i32
    TI_GET_BASETYPE = 5_i32
    TI_GET_ARRAYINDEXTYPEID = 6_i32
    TI_FINDCHILDREN = 7_i32
    TI_GET_DATAKIND = 8_i32
    TI_GET_ADDRESSOFFSET = 9_i32
    TI_GET_OFFSET = 10_i32
    TI_GET_VALUE = 11_i32
    TI_GET_COUNT = 12_i32
    TI_GET_CHILDRENCOUNT = 13_i32
    TI_GET_BITPOSITION = 14_i32
    TI_GET_VIRTUALBASECLASS = 15_i32
    TI_GET_VIRTUALTABLESHAPEID = 16_i32
    TI_GET_VIRTUALBASEPOINTEROFFSET = 17_i32
    TI_GET_CLASSPARENTID = 18_i32
    TI_GET_NESTED = 19_i32
    TI_GET_SYMINDEX = 20_i32
    TI_GET_LEXICALPARENT = 21_i32
    TI_GET_ADDRESS = 22_i32
    TI_GET_THISADJUST = 23_i32
    TI_GET_UDTKIND = 24_i32
    TI_IS_EQUIV_TO = 25_i32
    TI_GET_CALLING_CONVENTION = 26_i32
    TI_IS_CLOSE_EQUIV_TO = 27_i32
    TI_GTIEX_REQS_VALID = 28_i32
    TI_GET_VIRTUALBASEOFFSET = 29_i32
    TI_GET_VIRTUALBASEDISPINDEX = 30_i32
    TI_GET_IS_REFERENCE = 31_i32
    TI_GET_INDIRECTVIRTUALBASECLASS = 32_i32
    TI_GET_VIRTUALBASETABLETYPE = 33_i32
    TI_GET_OBJECTPOINTERTYPE = 34_i32
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX = 35_i32
  end
  enum IMAGEHLP_SF_TYPE
    Sfimage = 0_i32
    Sfdbg = 1_i32
    Sfpdb = 2_i32
    Sfmpd = 3_i32
    Sfmax = 4_i32
  end
  enum APPLICATION_NODE_EVENT_FILTER
    FILTER_EXCLUDE_NOTHING = 0_i32
    FILTER_EXCLUDE_ANONYMOUS_CODE = 1_i32
    FILTER_EXCLUDE_EVAL_CODE = 2_i32
  end
  enum SCRIPT_DEBUGGER_OPTIONS
    SDO_NONE = 0_i32
    SDO_ENABLE_FIRST_CHANCE_EXCEPTIONS = 1_i32
    SDO_ENABLE_WEB_WORKER_SUPPORT = 2_i32
    SDO_ENABLE_NONUSER_CODE_SUPPORT = 4_i32
    SDO_ENABLE_LIBRARY_STACK_FRAME = 8_i32
  end
  enum SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND
    ETK_FIRST_CHANCE = 0_i32
    ETK_USER_UNHANDLED = 1_i32
    ETK_UNHANDLED = 2_i32
  end
  enum SCRIPT_INVOCATION_CONTEXT_TYPE
    SICT_Event = 0_i32
    SICT_SetTimeout = 1_i32
    SICT_SetInterval = 2_i32
    SICT_SetImmediate = 3_i32
    SICT_RequestAnimationFrame = 4_i32
    SICT_ToString = 5_i32
    SICT_MutationObserverCheckpoint = 6_i32
    SICT_WWAExecUnsafeLocalFunction = 7_i32
    SICT_WWAExecAtPriority = 8_i32
  end
  enum DEBUG_STACKFRAME_TYPE
    DST_SCRIPT_FRAME = 0_i32
    DST_INTERNAL_FRAME = 1_i32
    DST_INVOCATION_FRAME = 2_i32
  end
  enum DEBUG_EVENT_INFO_TYPE
    DEIT_GENERAL = 0_i32
    DEIT_ASMJS_IN_DEBUGGING = 1_i32
    DEIT_ASMJS_SUCCEEDED = 2_i32
    DEIT_ASMJS_FAILED = 3_i32
  end
  enum JS_PROPERTY_MEMBERS
    JS_PROPERTY_MEMBERS_ALL = 0_i32
    JS_PROPERTY_MEMBERS_ARGUMENTS = 1_i32
  end
  enum JS_PROPERTY_ATTRIBUTES
    JS_PROPERTY_ATTRIBUTE_NONE = 0_i32
    JS_PROPERTY_HAS_CHILDREN = 1_i32
    JS_PROPERTY_FAKE = 2_i32
    JS_PROPERTY_METHOD = 4_i32
    JS_PROPERTY_READONLY = 8_i32
    JS_PROPERTY_NATIVE_WINRT_POINTER = 16_i32
    JS_PROPERTY_FRAME_INTRYBLOCK = 32_i32
    JS_PROPERTY_FRAME_INCATCHBLOCK = 64_i32
    JS_PROPERTY_FRAME_INFINALLYBLOCK = 128_i32
  end
  enum JsDebugReadMemoryFlags
    None = 0_i32
    JsDebugAllowPartialRead = 1_i32
  end
  enum DUMP_TYPES_
    DUMP_TYPE_INVALID = -1_i32
    DUMP_TYPE_UNKNOWN = 0_i32
    DUMP_TYPE_FULL = 1_i32
    DUMP_TYPE_SUMMARY = 2_i32
    DUMP_TYPE_HEADER = 3_i32
    DUMP_TYPE_TRIAGE = 4_i32
    DUMP_TYPE_BITMAP_FULL = 5_i32
    DUMP_TYPE_BITMAP_KERNEL = 6_i32
    DUMP_TYPE_AUTOMATIC = 7_i32
  end
  enum WHEA_ERROR_SOURCE_TYPE
    WheaErrSrcTypeMCE = 0_i32
    WheaErrSrcTypeCMC = 1_i32
    WheaErrSrcTypeCPE = 2_i32
    WheaErrSrcTypeNMI = 3_i32
    WheaErrSrcTypePCIe = 4_i32
    WheaErrSrcTypeGeneric = 5_i32
    WheaErrSrcTypeINIT = 6_i32
    WheaErrSrcTypeBOOT = 7_i32
    WheaErrSrcTypeSCIGeneric = 8_i32
    WheaErrSrcTypeIPFMCA = 9_i32
    WheaErrSrcTypeIPFCMC = 10_i32
    WheaErrSrcTypeIPFCPE = 11_i32
    WheaErrSrcTypeGenericV2 = 12_i32
    WheaErrSrcTypeSCIGenericV2 = 13_i32
    WheaErrSrcTypeBMC = 14_i32
    WheaErrSrcTypePMEM = 15_i32
    WheaErrSrcTypeDeviceDriver = 16_i32
    WheaErrSrcTypeMax = 17_i32
  end
  enum WHEA_ERROR_SOURCE_STATE
    WheaErrSrcStateStopped = 1_i32
    WheaErrSrcStateStarted = 2_i32
    WheaErrSrcStateRemoved = 3_i32
    WheaErrSrcStateRemovePending = 4_i32
  end
  enum IPMI_OS_SEL_RECORD_TYPE
    IpmiOsSelRecordTypeWhea = 0_i32
    IpmiOsSelRecordTypeOther = 1_i32
    IpmiOsSelRecordTypeWheaErrorXpfMca = 2_i32
    IpmiOsSelRecordTypeWheaErrorPci = 3_i32
    IpmiOsSelRecordTypeWheaErrorNmi = 4_i32
    IpmiOsSelRecordTypeWheaErrorOther = 5_i32
    IpmiOsSelRecordTypeRaw = 6_i32
    IpmiOsSelRecordTypeDriver = 7_i32
    IpmiOsSelRecordTypeBugcheckRecovery = 8_i32
    IpmiOsSelRecordTypeBugcheckData = 9_i32
    IpmiOsSelRecordTypeMax = 10_i32
  end

  {% if flag?(:arm) %}
  @[Extern]
  struct CONTEXT
    property context_flags : UInt32
    property cpsr : UInt32
    property anonymous : Anonymous_e__Union_
    property sp : UInt64
    property pc : UInt64
    property v : Win32cr::System::Diagnostics::Debug::ARM64_NT_NEON128[32]
    property fpcr : UInt32
    property fpsr : UInt32
    property bcr : UInt32[8]
    property bvr : UInt64[8]
    property wcr : UInt32[2]
    property wvr : UInt64[2]

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property anonymous : Anonymous_e__Struct_
    property x : UInt64[31]

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property x0 : UInt64
    property x1 : UInt64
    property x2 : UInt64
    property x3 : UInt64
    property x4 : UInt64
    property x5 : UInt64
    property x6 : UInt64
    property x7 : UInt64
    property x8 : UInt64
    property x9 : UInt64
    property x10 : UInt64
    property x11 : UInt64
    property x12 : UInt64
    property x13 : UInt64
    property x14 : UInt64
    property x15 : UInt64
    property x16 : UInt64
    property x17 : UInt64
    property x18 : UInt64
    property x19 : UInt64
    property x20 : UInt64
    property x21 : UInt64
    property x22 : UInt64
    property x23 : UInt64
    property x24 : UInt64
    property x25 : UInt64
    property x26 : UInt64
    property x27 : UInt64
    property x28 : UInt64
    property fp : UInt64
    property lr : UInt64
    def initialize(@x0 : UInt64, @x1 : UInt64, @x2 : UInt64, @x3 : UInt64, @x4 : UInt64, @x5 : UInt64, @x6 : UInt64, @x7 : UInt64, @x8 : UInt64, @x9 : UInt64, @x10 : UInt64, @x11 : UInt64, @x12 : UInt64, @x13 : UInt64, @x14 : UInt64, @x15 : UInt64, @x16 : UInt64, @x17 : UInt64, @x18 : UInt64, @x19 : UInt64, @x20 : UInt64, @x21 : UInt64, @x22 : UInt64, @x23 : UInt64, @x24 : UInt64, @x25 : UInt64, @x26 : UInt64, @x27 : UInt64, @x28 : UInt64, @fp : UInt64, @lr : UInt64)
    end
      end

    def initialize(@anonymous : Anonymous_e__Struct_, @x : UInt64[31])
    end
    end

    def initialize(@context_flags : UInt32, @cpsr : UInt32, @anonymous : Anonymous_e__Union_, @sp : UInt64, @pc : UInt64, @v : Win32cr::System::Diagnostics::Debug::ARM64_NT_NEON128[32], @fpcr : UInt32, @fpsr : UInt32, @bcr : UInt32[8], @bvr : UInt64[8], @wcr : UInt32[2], @wvr : UInt64[2])
    end
  end
  {% end %}

  {% if flag?(:arm) %}
  @[Extern]
  struct DISPATCHER_CONTEXT
    property control_pc : LibC::UIntPtrT
    property image_base : LibC::UIntPtrT
    property function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*
    property establisher_frame : LibC::UIntPtrT
    property target_pc : LibC::UIntPtrT
    property context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*
    property language_handler : Win32cr::System::Kernel::EXCEPTION_ROUTINE
    property handler_data : Void*
    property history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*
    property scope_index : UInt32
    property control_pc_is_unwound : Win32cr::Foundation::BOOLEAN
    property non_volatile_registers : UInt8*
    def initialize(@control_pc : LibC::UIntPtrT, @image_base : LibC::UIntPtrT, @function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*, @establisher_frame : LibC::UIntPtrT, @target_pc : LibC::UIntPtrT, @context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, @language_handler : Win32cr::System::Kernel::EXCEPTION_ROUTINE, @handler_data : Void*, @history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*, @scope_index : UInt32, @control_pc_is_unwound : Win32cr::Foundation::BOOLEAN, @non_volatile_registers : UInt8*)
    end
  end
  {% end %}

  {% if flag?(:arm) %}
  @[Extern]
  struct KNONVOLATILE_CONTEXT_POINTERS_ARM64
    property x19 : UInt64*
    property x20 : UInt64*
    property x21 : UInt64*
    property x22 : UInt64*
    property x23 : UInt64*
    property x24 : UInt64*
    property x25 : UInt64*
    property x26 : UInt64*
    property x27 : UInt64*
    property x28 : UInt64*
    property fp : UInt64*
    property lr : UInt64*
    property d8 : UInt64*
    property d9 : UInt64*
    property d10 : UInt64*
    property d11 : UInt64*
    property d12 : UInt64*
    property d13 : UInt64*
    property d14 : UInt64*
    property d15 : UInt64*
    def initialize(@x19 : UInt64*, @x20 : UInt64*, @x21 : UInt64*, @x22 : UInt64*, @x23 : UInt64*, @x24 : UInt64*, @x25 : UInt64*, @x26 : UInt64*, @x27 : UInt64*, @x28 : UInt64*, @fp : UInt64*, @lr : UInt64*, @d8 : UInt64*, @d9 : UInt64*, @d10 : UInt64*, @d11 : UInt64*, @d12 : UInt64*, @d13 : UInt64*, @d14 : UInt64*, @d15 : UInt64*)
    end
  end
  {% end %}

  {% if flag?(:arm) %}
  @[Extern]
  struct UNWIND_HISTORY_TABLE_ENTRY
    property image_base : LibC::UIntPtrT
    property function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*
    def initialize(@image_base : LibC::UIntPtrT, @function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*)
    end
  end
  {% end %}

  {% if flag?(:arm) %}
  @[Extern]
  struct MINIDUMP_THREAD_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property pad : UInt32
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @pad : UInt32, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64)
    end
  end
  {% end %}

  {% if flag?(:arm) %}
  @[Extern]
  struct MINIDUMP_THREAD_EX_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property pad : UInt32
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    property backing_store_base : UInt64
    property backing_store_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @pad : UInt32, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64, @backing_store_base : UInt64, @backing_store_end : UInt64)
    end
  end
  {% end %}

  @[Extern]
  struct EXCEPTION_DEBUG_INFO
    property exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD
    property dwFirstChance : UInt32
    def initialize(@exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD, @dwFirstChance : UInt32)
    end
  end

  @[Extern]
  struct CREATE_THREAD_DEBUG_INFO
    property hThread : Win32cr::Foundation::HANDLE
    property lpThreadLocalBase : Void*
    property lpStartAddress : Win32cr::System::Threading::LPTHREAD_START_ROUTINE
    def initialize(@hThread : Win32cr::Foundation::HANDLE, @lpThreadLocalBase : Void*, @lpStartAddress : Win32cr::System::Threading::LPTHREAD_START_ROUTINE)
    end
  end

  @[Extern]
  struct CREATE_PROCESS_DEBUG_INFO
    property hFile : Win32cr::Foundation::HANDLE
    property hProcess : Win32cr::Foundation::HANDLE
    property hThread : Win32cr::Foundation::HANDLE
    property lpBaseOfImage : Void*
    property dwDebugInfoFileOffset : UInt32
    property nDebugInfoSize : UInt32
    property lpThreadLocalBase : Void*
    property lpStartAddress : Win32cr::System::Threading::LPTHREAD_START_ROUTINE
    property lpImageName : Void*
    property fUnicode : UInt16
    def initialize(@hFile : Win32cr::Foundation::HANDLE, @hProcess : Win32cr::Foundation::HANDLE, @hThread : Win32cr::Foundation::HANDLE, @lpBaseOfImage : Void*, @dwDebugInfoFileOffset : UInt32, @nDebugInfoSize : UInt32, @lpThreadLocalBase : Void*, @lpStartAddress : Win32cr::System::Threading::LPTHREAD_START_ROUTINE, @lpImageName : Void*, @fUnicode : UInt16)
    end
  end

  @[Extern]
  struct EXIT_THREAD_DEBUG_INFO
    property dwExitCode : UInt32
    def initialize(@dwExitCode : UInt32)
    end
  end

  @[Extern]
  struct EXIT_PROCESS_DEBUG_INFO
    property dwExitCode : UInt32
    def initialize(@dwExitCode : UInt32)
    end
  end

  @[Extern]
  struct LOAD_DLL_DEBUG_INFO
    property hFile : Win32cr::Foundation::HANDLE
    property lpBaseOfDll : Void*
    property dwDebugInfoFileOffset : UInt32
    property nDebugInfoSize : UInt32
    property lpImageName : Void*
    property fUnicode : UInt16
    def initialize(@hFile : Win32cr::Foundation::HANDLE, @lpBaseOfDll : Void*, @dwDebugInfoFileOffset : UInt32, @nDebugInfoSize : UInt32, @lpImageName : Void*, @fUnicode : UInt16)
    end
  end

  @[Extern]
  struct UNLOAD_DLL_DEBUG_INFO
    property lpBaseOfDll : Void*
    def initialize(@lpBaseOfDll : Void*)
    end
  end

  @[Extern]
  struct OUTPUT_DEBUG_STRING_INFO
    property lpDebugStringData : Win32cr::Foundation::PSTR
    property fUnicode : UInt16
    property nDebugStringLength : UInt16
    def initialize(@lpDebugStringData : Win32cr::Foundation::PSTR, @fUnicode : UInt16, @nDebugStringLength : UInt16)
    end
  end

  @[Extern]
  struct RIP_INFO
    property dwError : UInt32
    property dwType : Win32cr::System::Diagnostics::Debug::RIP_INFO_TYPE
    def initialize(@dwError : UInt32, @dwType : Win32cr::System::Diagnostics::Debug::RIP_INFO_TYPE)
    end
  end

  @[Extern]
  struct DEBUG_EVENT
    property dwDebugEventCode : Win32cr::System::Diagnostics::Debug::DEBUG_EVENT_CODE
    property dwProcessId : UInt32
    property dwThreadId : UInt32
    property u : U_e__union_

    # Nested Type U_e__union_
    @[Extern(union: true)]
    struct U_e__union_
    property exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_DEBUG_INFO
    property create_thread : Win32cr::System::Diagnostics::Debug::CREATE_THREAD_DEBUG_INFO
    property create_process_info : Win32cr::System::Diagnostics::Debug::CREATE_PROCESS_DEBUG_INFO
    property exit_thread : Win32cr::System::Diagnostics::Debug::EXIT_THREAD_DEBUG_INFO
    property exit_process : Win32cr::System::Diagnostics::Debug::EXIT_PROCESS_DEBUG_INFO
    property load_dll : Win32cr::System::Diagnostics::Debug::LOAD_DLL_DEBUG_INFO
    property unload_dll : Win32cr::System::Diagnostics::Debug::UNLOAD_DLL_DEBUG_INFO
    property debug_string : Win32cr::System::Diagnostics::Debug::OUTPUT_DEBUG_STRING_INFO
    property rip_info : Win32cr::System::Diagnostics::Debug::RIP_INFO
    def initialize(@exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_DEBUG_INFO, @create_thread : Win32cr::System::Diagnostics::Debug::CREATE_THREAD_DEBUG_INFO, @create_process_info : Win32cr::System::Diagnostics::Debug::CREATE_PROCESS_DEBUG_INFO, @exit_thread : Win32cr::System::Diagnostics::Debug::EXIT_THREAD_DEBUG_INFO, @exit_process : Win32cr::System::Diagnostics::Debug::EXIT_PROCESS_DEBUG_INFO, @load_dll : Win32cr::System::Diagnostics::Debug::LOAD_DLL_DEBUG_INFO, @unload_dll : Win32cr::System::Diagnostics::Debug::UNLOAD_DLL_DEBUG_INFO, @debug_string : Win32cr::System::Diagnostics::Debug::OUTPUT_DEBUG_STRING_INFO, @rip_info : Win32cr::System::Diagnostics::Debug::RIP_INFO)
    end
    end

    def initialize(@dwDebugEventCode : Win32cr::System::Diagnostics::Debug::DEBUG_EVENT_CODE, @dwProcessId : UInt32, @dwThreadId : UInt32, @u : U_e__union_)
    end
  end

  @[Extern]
  struct DEBUG_OFFSET_REGION
    property base : UInt64
    property size : UInt64
    def initialize(@base : UInt64, @size : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_READ_USER_MINIDUMP_STREAM
    property stream_type : UInt32
    property flags : UInt32
    property offset : UInt64
    property buffer : Void*
    property buffer_size : UInt32
    property buffer_used : UInt32
    def initialize(@stream_type : UInt32, @flags : UInt32, @offset : UInt64, @buffer : Void*, @buffer_size : UInt32, @buffer_used : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_GET_TEXT_COMPLETIONS_IN
    property flags : UInt32
    property match_count_limit : UInt32
    property reserved : UInt64[3]
    def initialize(@flags : UInt32, @match_count_limit : UInt32, @reserved : UInt64[3])
    end
  end

  @[Extern]
  struct DEBUG_GET_TEXT_COMPLETIONS_OUT
    property flags : UInt32
    property replace_index : UInt32
    property match_count : UInt32
    property reserved1 : UInt32
    property reserved2 : UInt64[2]
    def initialize(@flags : UInt32, @replace_index : UInt32, @match_count : UInt32, @reserved1 : UInt32, @reserved2 : UInt64[2])
    end
  end

  @[Extern]
  struct DEBUG_CACHED_SYMBOL_INFO
    property mod_base : UInt64
    property arg1 : UInt64
    property arg2 : UInt64
    property id : UInt32
    property arg3 : UInt32
    def initialize(@mod_base : UInt64, @arg1 : UInt64, @arg2 : UInt64, @id : UInt32, @arg3 : UInt32)
    end
  end

  @[Extern]
  struct PROCESS_NAME_ENTRY
    property process_id : UInt32
    property name_offset : UInt32
    property name_size : UInt32
    property next_entry : UInt32
    def initialize(@process_id : UInt32, @name_offset : UInt32, @name_size : UInt32, @next_entry : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_THREAD_BASIC_INFORMATION
    property valid : UInt32
    property exit_status : UInt32
    property priority_class : UInt32
    property priority : UInt32
    property create_time : UInt64
    property exit_time : UInt64
    property kernel_time : UInt64
    property user_time : UInt64
    property start_offset : UInt64
    property affinity : UInt64
    def initialize(@valid : UInt32, @exit_status : UInt32, @priority_class : UInt32, @priority : UInt32, @create_time : UInt64, @exit_time : UInt64, @kernel_time : UInt64, @user_time : UInt64, @start_offset : UInt64, @affinity : UInt64)
    end
  end

  @[Extern]
  struct SYMBOL_INFO_EX
    property size_of_struct : UInt32
    property type_of_info : UInt32
    property offset : UInt64
    property line : UInt32
    property displacement : UInt32
    property reserved : UInt32[4]
    def initialize(@size_of_struct : UInt32, @type_of_info : UInt32, @offset : UInt64, @line : UInt32, @displacement : UInt32, @reserved : UInt32[4])
    end
  end

  @[Extern]
  struct DEBUG_BREAKPOINT_PARAMETERS
    property offset : UInt64
    property id : UInt32
    property break_type : UInt32
    property proc_type : UInt32
    property flags : UInt32
    property data_size : UInt32
    property data_access_type : UInt32
    property pass_count : UInt32
    property current_pass_count : UInt32
    property match_thread : UInt32
    property command_size : UInt32
    property offset_expression_size : UInt32
    def initialize(@offset : UInt64, @id : UInt32, @break_type : UInt32, @proc_type : UInt32, @flags : UInt32, @data_size : UInt32, @data_access_type : UInt32, @pass_count : UInt32, @current_pass_count : UInt32, @match_thread : UInt32, @command_size : UInt32, @offset_expression_size : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_CREATE_PROCESS_OPTIONS
    property create_flags : UInt32
    property eng_create_flags : UInt32
    property verifier_flags : UInt32
    property reserved : UInt32
    def initialize(@create_flags : UInt32, @eng_create_flags : UInt32, @verifier_flags : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_CLIENT_CONTEXT
    property cbSize : UInt32
    property eClient : UInt32
    def initialize(@cbSize : UInt32, @eClient : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_STACK_FRAME
    property instruction_offset : UInt64
    property return_offset : UInt64
    property frame_offset : UInt64
    property stack_offset : UInt64
    property func_table_entry : UInt64
    property params : UInt64[4]
    property reserved : UInt64[6]
    property virtual : Win32cr::Foundation::BOOL
    property frame_number : UInt32
    def initialize(@instruction_offset : UInt64, @return_offset : UInt64, @frame_offset : UInt64, @stack_offset : UInt64, @func_table_entry : UInt64, @params : UInt64[4], @reserved : UInt64[6], @virtual : Win32cr::Foundation::BOOL, @frame_number : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_STACK_FRAME_EX
    property instruction_offset : UInt64
    property return_offset : UInt64
    property frame_offset : UInt64
    property stack_offset : UInt64
    property func_table_entry : UInt64
    property params : UInt64[4]
    property reserved : UInt64[6]
    property virtual : Win32cr::Foundation::BOOL
    property frame_number : UInt32
    property inline_frame_context : UInt32
    property reserved1 : UInt32
    def initialize(@instruction_offset : UInt64, @return_offset : UInt64, @frame_offset : UInt64, @stack_offset : UInt64, @func_table_entry : UInt64, @params : UInt64[4], @reserved : UInt64[6], @virtual : Win32cr::Foundation::BOOL, @frame_number : UInt32, @inline_frame_context : UInt32, @reserved1 : UInt32)
    end
  end

  @[Extern(union: true)]
  struct INLINE_FRAME_CONTEXT
    property context_value : UInt32
    property anonymous : Anonymous_e__Struct_

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property frame_id : UInt8
    property frame_type : UInt8
    property frame_signature : UInt16
    def initialize(@frame_id : UInt8, @frame_type : UInt8, @frame_signature : UInt16)
    end
    end

    def initialize(@context_value : UInt32, @anonymous : Anonymous_e__Struct_)
    end
  end

  @[Extern]
  struct STACK_SRC_INFO
    property image_path : Win32cr::Foundation::PWSTR
    property module_name : Win32cr::Foundation::PWSTR
    property function : Win32cr::Foundation::PWSTR
    property displacement : UInt32
    property row : UInt32
    property column : UInt32
    def initialize(@image_path : Win32cr::Foundation::PWSTR, @module_name : Win32cr::Foundation::PWSTR, @function : Win32cr::Foundation::PWSTR, @displacement : UInt32, @row : UInt32, @column : UInt32)
    end
  end

  @[Extern]
  struct STACK_SYM_FRAME_INFO
    property stack_frame_ex : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX
    property src_info : Win32cr::System::Diagnostics::Debug::STACK_SRC_INFO
    def initialize(@stack_frame_ex : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX, @src_info : Win32cr::System::Diagnostics::Debug::STACK_SRC_INFO)
    end
  end

  @[Extern]
  struct DEBUG_SPECIFIC_FILTER_PARAMETERS
    property execution_option : UInt32
    property continue_option : UInt32
    property text_size : UInt32
    property command_size : UInt32
    property argument_size : UInt32
    def initialize(@execution_option : UInt32, @continue_option : UInt32, @text_size : UInt32, @command_size : UInt32, @argument_size : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_EXCEPTION_FILTER_PARAMETERS
    property execution_option : UInt32
    property continue_option : UInt32
    property text_size : UInt32
    property command_size : UInt32
    property second_command_size : UInt32
    property exception_code : UInt32
    def initialize(@execution_option : UInt32, @continue_option : UInt32, @text_size : UInt32, @command_size : UInt32, @second_command_size : UInt32, @exception_code : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_BREAKPOINT
    property id : UInt32
    def initialize(@id : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_EXCEPTION
    property exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64
    property first_chance : UInt32
    def initialize(@exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64, @first_chance : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_EXIT_THREAD
    property exit_code : UInt32
    def initialize(@exit_code : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_EXIT_PROCESS
    property exit_code : UInt32
    def initialize(@exit_code : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_LOAD_MODULE
    property base : UInt64
    def initialize(@base : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE
    property base : UInt64
    def initialize(@base : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR
    property error : UInt32
    property level : UInt32
    def initialize(@error : UInt32, @level : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION
    property kind : UInt32
    property data_size : UInt32
    property address : UInt64
    def initialize(@kind : UInt32, @data_size : UInt32, @address : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_VALUE
    property anonymous : Anonymous_e__Union_
    property tail_of_raw_bytes : UInt32
    property type__ : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property i8 : UInt8
    property i16 : UInt16
    property i32 : UInt32
    property anonymous : Anonymous_e__Struct_
    property f32 : Float32
    property f64 : Float64
    property f80_bytes : UInt8[10]
    property f82_bytes : UInt8[11]
    property f128_bytes : UInt8[16]
    property vi8 : UInt8[16]
    property vi16 : UInt16[8]
    property vi32 : UInt32[4]
    property vi64 : UInt64[2]
    property vf32 : Float32[4]
    property vf64 : Float64[2]
    property i64_parts32 : I64Parts32_e__Struct_
    property f128_parts64 : F128Parts64_e__Struct_
    property raw_bytes : UInt8[24]

      # Nested Type I64Parts32_e__Struct_
      @[Extern]
      struct I64Parts32_e__Struct_
    property low_part : UInt32
    property high_part : UInt32
    def initialize(@low_part : UInt32, @high_part : UInt32)
    end
      end


      # Nested Type F128Parts64_e__Struct_
      @[Extern]
      struct F128Parts64_e__Struct_
    property low_part : UInt64
    property high_part : Int64
    def initialize(@low_part : UInt64, @high_part : Int64)
    end
      end


      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property i64 : UInt64
    property nat : Win32cr::Foundation::BOOL
    def initialize(@i64 : UInt64, @nat : Win32cr::Foundation::BOOL)
    end
      end

    def initialize(@i8 : UInt8, @i16 : UInt16, @i32 : UInt32, @anonymous : Anonymous_e__Struct_, @f32 : Float32, @f64 : Float64, @f80_bytes : UInt8[10], @f82_bytes : UInt8[11], @f128_bytes : UInt8[16], @vi8 : UInt8[16], @vi16 : UInt16[8], @vi32 : UInt32[4], @vi64 : UInt64[2], @vf32 : Float32[4], @vf64 : Float64[2], @i64_parts32 : I64Parts32_e__Struct_, @f128_parts64 : F128Parts64_e__Struct_, @raw_bytes : UInt8[24])
    end
    end

    def initialize(@anonymous : Anonymous_e__Union_, @tail_of_raw_bytes : UInt32, @type__ : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
    property type__ : UInt32
    property revision : UInt32
    def initialize(@type__ : UInt32, @revision : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_AMD64
    property family : UInt32
    property model : UInt32
    property stepping : UInt32
    property vendor_string : Win32cr::Foundation::CHAR[16]
    def initialize(@family : UInt32, @model : UInt32, @stepping : UInt32, @vendor_string : Win32cr::Foundation::CHAR[16])
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_IA64
    property model : UInt32
    property revision : UInt32
    property family : UInt32
    property arch_rev : UInt32
    property vendor_string : Win32cr::Foundation::CHAR[16]
    def initialize(@model : UInt32, @revision : UInt32, @family : UInt32, @arch_rev : UInt32, @vendor_string : Win32cr::Foundation::CHAR[16])
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_X86
    property family : UInt32
    property model : UInt32
    property stepping : UInt32
    property vendor_string : Win32cr::Foundation::CHAR[16]
    def initialize(@family : UInt32, @model : UInt32, @stepping : UInt32, @vendor_string : Win32cr::Foundation::CHAR[16])
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_ARM
    property model : UInt32
    property revision : UInt32
    property vendor_string : Win32cr::Foundation::CHAR[16]
    def initialize(@model : UInt32, @revision : UInt32, @vendor_string : Win32cr::Foundation::CHAR[16])
    end
  end

  @[Extern]
  struct DEBUG_PROCESSOR_IDENTIFICATION_ARM64
    property model : UInt32
    property revision : UInt32
    property vendor_string : Win32cr::Foundation::CHAR[16]
    def initialize(@model : UInt32, @revision : UInt32, @vendor_string : Win32cr::Foundation::CHAR[16])
    end
  end

  @[Extern(union: true)]
  struct DEBUG_PROCESSOR_IDENTIFICATION_ALL
    property alpha : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
    property amd64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_AMD64
    property ia64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_IA64
    property x86 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_X86
    property arm : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ARM
    property arm64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ARM64
    def initialize(@alpha : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ALPHA, @amd64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_AMD64, @ia64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_IA64, @x86 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_X86, @arm : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ARM, @arm64 : Win32cr::System::Diagnostics::Debug::DEBUG_PROCESSOR_IDENTIFICATION_ARM64)
    end
  end

  @[Extern]
  struct DEBUG_HANDLE_DATA_BASIC
    property type_name_size : UInt32
    property object_name_size : UInt32
    property attributes : UInt32
    property granted_access : UInt32
    property handle_count : UInt32
    property pointer_count : UInt32
    def initialize(@type_name_size : UInt32, @object_name_size : UInt32, @attributes : UInt32, @granted_access : UInt32, @handle_count : UInt32, @pointer_count : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_EVENT_CONTEXT
    property size : UInt32
    property process_engine_id : UInt32
    property thread_engine_id : UInt32
    property frame_engine_id : UInt32
    def initialize(@size : UInt32, @process_engine_id : UInt32, @thread_engine_id : UInt32, @frame_engine_id : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_REGISTER_DESCRIPTION
    property type__ : UInt32
    property flags : UInt32
    property subreg_master : UInt32
    property subreg_length : UInt32
    property subreg_mask : UInt64
    property subreg_shift : UInt32
    property reserved0 : UInt32
    def initialize(@type__ : UInt32, @flags : UInt32, @subreg_master : UInt32, @subreg_length : UInt32, @subreg_mask : UInt64, @subreg_shift : UInt32, @reserved0 : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_SYMBOL_PARAMETERS
    property module__ : UInt64
    property type_id : UInt32
    property parent_symbol : UInt32
    property sub_elements : UInt32
    property flags : UInt32
    property reserved : UInt64
    def initialize(@module__ : UInt64, @type_id : UInt32, @parent_symbol : UInt32, @sub_elements : UInt32, @flags : UInt32, @reserved : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_SYMBOL_ENTRY
    property module_base : UInt64
    property offset : UInt64
    property id : UInt64
    property arg64 : UInt64
    property size : UInt32
    property flags : UInt32
    property type_id : UInt32
    property name_size : UInt32
    property token : UInt32
    property tag : UInt32
    property arg32 : UInt32
    property reserved : UInt32
    def initialize(@module_base : UInt64, @offset : UInt64, @id : UInt64, @arg64 : UInt64, @size : UInt32, @flags : UInt32, @type_id : UInt32, @name_size : UInt32, @token : UInt32, @tag : UInt32, @arg32 : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_MODULE_PARAMETERS
    property base : UInt64
    property size : UInt32
    property time_date_stamp : UInt32
    property checksum : UInt32
    property flags : UInt32
    property symbol_type : UInt32
    property image_name_size : UInt32
    property module_name_size : UInt32
    property loaded_image_name_size : UInt32
    property symbol_file_name_size : UInt32
    property mapped_image_name_size : UInt32
    property reserved : UInt64[2]
    def initialize(@base : UInt64, @size : UInt32, @time_date_stamp : UInt32, @checksum : UInt32, @flags : UInt32, @symbol_type : UInt32, @image_name_size : UInt32, @module_name_size : UInt32, @loaded_image_name_size : UInt32, @symbol_file_name_size : UInt32, @mapped_image_name_size : UInt32, @reserved : UInt64[2])
    end
  end

  @[Extern]
  struct DEBUG_MODULE_AND_ID
    property module_base : UInt64
    property id : UInt64
    def initialize(@module_base : UInt64, @id : UInt64)
    end
  end

  @[Extern]
  struct DEBUG_SYMBOL_SOURCE_ENTRY
    property module_base : UInt64
    property offset : UInt64
    property file_name_id : UInt64
    property engine_internal : UInt64
    property size : UInt32
    property flags : UInt32
    property file_name_size : UInt32
    property start_line : UInt32
    property end_line : UInt32
    property start_column : UInt32
    property end_column : UInt32
    property reserved : UInt32
    def initialize(@module_base : UInt64, @offset : UInt64, @file_name_id : UInt64, @engine_internal : UInt64, @size : UInt32, @flags : UInt32, @file_name_size : UInt32, @start_line : UInt32, @end_line : UInt32, @start_column : UInt32, @end_column : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct Location
    property host_defined : UInt64
    property offset : UInt64
    def initialize(@host_defined : UInt64, @offset : UInt64)
    end
  end

  @[Extern]
  struct ArrayDimension
    property lower_bound : Int64
    property length : UInt64
    property stride : UInt64
    def initialize(@lower_bound : Int64, @length : UInt64, @stride : UInt64)
    end
  end

  @[Extern]
  struct ScriptDebugPosition
    property line : UInt32
    property column : UInt32
    def initialize(@line : UInt32, @column : UInt32)
    end
  end

  @[Extern]
  struct ScriptDebugEventInformation
    property debug_event : Win32cr::System::Diagnostics::Debug::ScriptDebugEvent
    property event_position : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition
    property event_span_end : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition
    property u : U_e__union_

    # Nested Type U_e__union_
    @[Extern(union: true)]
    struct U_e__union_
    property exception_information : ExceptionInformation_e__Struct_
    property breakpoint_information : BreakpointInformation_e__Struct_

      # Nested Type ExceptionInformation_e__Struct_
      @[Extern]
      struct ExceptionInformation_e__Struct_
    property is_uncaught : Bool
    def initialize(@is_uncaught : Bool)
    end
      end


      # Nested Type BreakpointInformation_e__Struct_
      @[Extern]
      struct BreakpointInformation_e__Struct_
    property breakpoint_id : UInt64
    def initialize(@breakpoint_id : UInt64)
    end
      end

    def initialize(@exception_information : ExceptionInformation_e__Struct_, @breakpoint_information : BreakpointInformation_e__Struct_)
    end
    end

    def initialize(@debug_event : Win32cr::System::Diagnostics::Debug::ScriptDebugEvent, @event_position : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition, @event_span_end : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition, @u : U_e__union_)
    end
  end

  @[Extern]
  struct EXTSTACKTRACE
    property frame_pointer : UInt32
    property program_counter : UInt32
    property return_address : UInt32
    property args : UInt32[4]
    def initialize(@frame_pointer : UInt32, @program_counter : UInt32, @return_address : UInt32, @args : UInt32[4])
    end
  end

  @[Extern]
  struct EXTSTACKTRACE32
    property frame_pointer : UInt32
    property program_counter : UInt32
    property return_address : UInt32
    property args : UInt32[4]
    def initialize(@frame_pointer : UInt32, @program_counter : UInt32, @return_address : UInt32, @args : UInt32[4])
    end
  end

  @[Extern]
  struct EXTSTACKTRACE64
    property frame_pointer : UInt64
    property program_counter : UInt64
    property return_address : UInt64
    property args : UInt64[4]
    def initialize(@frame_pointer : UInt64, @program_counter : UInt64, @return_address : UInt64, @args : UInt64[4])
    end
  end

  @[Extern]
  struct WINDBG_EXTENSION_APIS
    property nSize : UInt32
    property lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE
    property lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION
    property lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL
    property lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM
    property lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C
    property lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE
    property lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE
    property lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    property lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    property lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE
    property lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE
    def initialize(@nSize : UInt32, @lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE, @lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION, @lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL, @lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM, @lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C, @lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE, @lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE, @lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE, @lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE, @lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE, @lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE)
    end
  end

  @[Extern]
  struct WINDBG_EXTENSION_APIS32
    property nSize : UInt32
    property lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE
    property lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION32
    property lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL32
    property lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM32
    property lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C
    property lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE32
    property lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32
    property lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    property lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    property lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE
    property lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE32
    def initialize(@nSize : UInt32, @lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE, @lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION32, @lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL32, @lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM32, @lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C, @lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE32, @lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32, @lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE, @lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE, @lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE, @lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE32)
    end
  end

  @[Extern]
  struct WINDBG_EXTENSION_APIS64
    property nSize : UInt32
    property lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE
    property lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION64
    property lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL64
    property lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM64
    property lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C
    property lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE64
    property lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64
    property lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    property lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    property lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE
    property lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE64
    def initialize(@nSize : UInt32, @lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE, @lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION64, @lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL64, @lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM64, @lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C, @lpReadProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE64, @lpWriteProcessMemoryRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64, @lpGetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_THREAD_CONTEXT_ROUTINE, @lpSetThreadContextRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_SET_THREAD_CONTEXT_ROUTINE, @lpIoctlRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_IOCTL_ROUTINE, @lpStackTraceRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_STACKTRACE_ROUTINE64)
    end
  end

  @[Extern]
  struct WINDBG_OLD_EXTENSION_APIS
    property nSize : UInt32
    property lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE
    property lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION
    property lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL
    property lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM
    property lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C
    def initialize(@nSize : UInt32, @lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE, @lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION, @lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL, @lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM, @lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C)
    end
  end

  @[Extern]
  struct WINDBG_OLDKD_EXTENSION_APIS
    property nSize : UInt32
    property lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE
    property lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION32
    property lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL32
    property lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM32
    property lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C
    property lpReadVirtualMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE32
    property lpWriteVirtualMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32
    property lpReadPhysicalMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OLDKD_READ_PHYSICAL_MEMORY
    property lpWritePhysicalMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY
    def initialize(@nSize : UInt32, @lpOutputRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OUTPUT_ROUTINE, @lpGetExpressionRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_EXPRESSION32, @lpGetSymbolRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_GET_SYMBOL32, @lpDisasmRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_DISASM32, @lpCheckControlCRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_CHECK_CONTROL_C, @lpReadVirtualMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_READ_PROCESS_MEMORY_ROUTINE32, @lpWriteVirtualMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32, @lpReadPhysicalMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OLDKD_READ_PHYSICAL_MEMORY, @lpWritePhysicalMemRoutine : Win32cr::System::Diagnostics::Debug::PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY)
    end
  end

  @[Extern]
  struct EXT_API_VERSION
    property major_version : UInt16
    property minor_version : UInt16
    property revision : UInt16
    property reserved : UInt16
    def initialize(@major_version : UInt16, @minor_version : UInt16, @revision : UInt16, @reserved : UInt16)
    end
  end

  @[Extern]
  struct PROCESSORINFO
    property processor : UInt16
    property number_processors : UInt16
    def initialize(@processor : UInt16, @number_processors : UInt16)
    end
  end

  @[Extern]
  struct READCONTROLSPACE
    property processor : UInt16
    property address : UInt32
    property buf_len : UInt32
    property buf : UInt8*
    def initialize(@processor : UInt16, @address : UInt32, @buf_len : UInt32, @buf : UInt8*)
    end
  end

  @[Extern]
  struct READCONTROLSPACE32
    property processor : UInt16
    property address : UInt32
    property buf_len : UInt32
    property buf : UInt8*
    def initialize(@processor : UInt16, @address : UInt32, @buf_len : UInt32, @buf : UInt8*)
    end
  end

  @[Extern]
  struct READCONTROLSPACE64
    property processor : UInt16
    property address : UInt64
    property buf_len : UInt32
    property buf : UInt8*
    def initialize(@processor : UInt16, @address : UInt64, @buf_len : UInt32, @buf : UInt8*)
    end
  end

  @[Extern]
  struct IOSPACE
    property address : UInt32
    property length : UInt32
    property data : UInt32
    def initialize(@address : UInt32, @length : UInt32, @data : UInt32)
    end
  end

  @[Extern]
  struct IOSPACE32
    property address : UInt32
    property length : UInt32
    property data : UInt32
    def initialize(@address : UInt32, @length : UInt32, @data : UInt32)
    end
  end

  @[Extern]
  struct IOSPACE64
    property address : UInt64
    property length : UInt32
    property data : UInt32
    def initialize(@address : UInt64, @length : UInt32, @data : UInt32)
    end
  end

  @[Extern]
  struct IOSPACE_EX
    property address : UInt32
    property length : UInt32
    property data : UInt32
    property interface_type : UInt32
    property bus_number : UInt32
    property address_space : UInt32
    def initialize(@address : UInt32, @length : UInt32, @data : UInt32, @interface_type : UInt32, @bus_number : UInt32, @address_space : UInt32)
    end
  end

  @[Extern]
  struct IOSPACE_EX32
    property address : UInt32
    property length : UInt32
    property data : UInt32
    property interface_type : UInt32
    property bus_number : UInt32
    property address_space : UInt32
    def initialize(@address : UInt32, @length : UInt32, @data : UInt32, @interface_type : UInt32, @bus_number : UInt32, @address_space : UInt32)
    end
  end

  @[Extern]
  struct IOSPACE_EX64
    property address : UInt64
    property length : UInt32
    property data : UInt32
    property interface_type : UInt32
    property bus_number : UInt32
    property address_space : UInt32
    def initialize(@address : UInt64, @length : UInt32, @data : UInt32, @interface_type : UInt32, @bus_number : UInt32, @address_space : UInt32)
    end
  end

  @[Extern]
  struct GETSETBUSDATA_
    property bus_data_type : UInt32
    property bus_number : UInt32
    property slot_number : UInt32
    property buffer : Void*
    property offset : UInt32
    property length : UInt32
    def initialize(@bus_data_type : UInt32, @bus_number : UInt32, @slot_number : UInt32, @buffer : Void*, @offset : UInt32, @length : UInt32)
    end
  end

  @[Extern]
  struct SEARCHMEMORY
    property search_address : UInt64
    property search_length : UInt64
    property found_address : UInt64
    property pattern_length : UInt32
    property pattern : Void*
    def initialize(@search_address : UInt64, @search_length : UInt64, @found_address : UInt64, @pattern_length : UInt32, @pattern : Void*)
    end
  end

  @[Extern]
  struct PHYSICAL
    property address : UInt64
    property buf_len : UInt32
    property buf : UInt8*
    def initialize(@address : UInt64, @buf_len : UInt32, @buf : UInt8*)
    end
  end

  @[Extern]
  struct PHYSICAL_WITH_FLAGS
    property address : UInt64
    property buf_len : UInt32
    property flags : UInt32
    property buf : UInt8*
    def initialize(@address : UInt64, @buf_len : UInt32, @flags : UInt32, @buf : UInt8*)
    end
  end

  @[Extern]
  struct READ_WRITE_MSR
    property msr : UInt32
    property value : Int64
    def initialize(@msr : UInt32, @value : Int64)
    end
  end

  @[Extern]
  struct GET_SET_SYMPATH
    property args : Win32cr::Foundation::PSTR
    property result : Win32cr::Foundation::PSTR
    property length : Int32
    def initialize(@args : Win32cr::Foundation::PSTR, @result : Win32cr::Foundation::PSTR, @length : Int32)
    end
  end

  @[Extern]
  struct GET_TEB_ADDRESS
    property address : UInt64
    def initialize(@address : UInt64)
    end
  end

  @[Extern]
  struct GET_PEB_ADDRESS
    property current_thread : UInt64
    property address : UInt64
    def initialize(@current_thread : UInt64, @address : UInt64)
    end
  end

  @[Extern]
  struct GET_CURRENT_THREAD_ADDRESS
    property processor : UInt32
    property address : UInt64
    def initialize(@processor : UInt32, @address : UInt64)
    end
  end

  @[Extern]
  struct GET_CURRENT_PROCESS_ADDRESS
    property processor : UInt32
    property current_thread : UInt64
    property address : UInt64
    def initialize(@processor : UInt32, @current_thread : UInt64, @address : UInt64)
    end
  end

  @[Extern]
  struct GET_INPUT_LINE
    property prompt : Win32cr::Foundation::PSTR
    property buffer : Win32cr::Foundation::PSTR
    property buffer_size : UInt32
    property input_size : UInt32
    def initialize(@prompt : Win32cr::Foundation::PSTR, @buffer : Win32cr::Foundation::PSTR, @buffer_size : UInt32, @input_size : UInt32)
    end
  end

  @[Extern]
  struct GET_EXPRESSION_EX
    property expression : Win32cr::Foundation::PSTR
    property remainder : Win32cr::Foundation::PSTR
    property value : UInt64
    def initialize(@expression : Win32cr::Foundation::PSTR, @remainder : Win32cr::Foundation::PSTR, @value : UInt64)
    end
  end

  @[Extern]
  struct TRANSLATE_VIRTUAL_TO_PHYSICAL
    property virtual : UInt64
    property physical : UInt64
    def initialize(@virtual : UInt64, @physical : UInt64)
    end
  end

  @[Extern]
  struct VIRTUAL_TO_PHYSICAL
    property status : UInt32
    property size : UInt32
    property pde_address : UInt64
    property virtual : UInt64
    property physical : UInt64
    def initialize(@status : UInt32, @size : UInt32, @pde_address : UInt64, @virtual : UInt64, @physical : UInt64)
    end
  end

  @[Extern]
  struct PHYSICAL_TO_VIRTUAL
    property status : UInt32
    property size : UInt32
    property pde_address : UInt64
    def initialize(@status : UInt32, @size : UInt32, @pde_address : UInt64)
    end
  end

  @[Extern]
  struct GET_CONTEXT_EX
    property status : UInt32
    property context_size : UInt32
    property pContext : Void*
    def initialize(@status : UInt32, @context_size : UInt32, @pContext : Void*)
    end
  end

  @[Extern]
  struct POINTER_SEARCH_PHYSICAL
    property offset : UInt64
    property length : UInt64
    property pointer_min : UInt64
    property pointer_max : UInt64
    property flags : UInt32
    property match_offsets : UInt64*
    property match_offsets_size : UInt32
    property match_offsets_count : UInt32
    def initialize(@offset : UInt64, @length : UInt64, @pointer_min : UInt64, @pointer_max : UInt64, @flags : UInt32, @match_offsets : UInt64*, @match_offsets_size : UInt32, @match_offsets_count : UInt32)
    end
  end

  @[Extern]
  struct WDBGEXTS_THREAD_OS_INFO
    property thread_id : UInt32
    property exit_status : UInt32
    property priority_class : UInt32
    property priority : UInt32
    property create_time : UInt64
    property exit_time : UInt64
    property kernel_time : UInt64
    property user_time : UInt64
    property start_offset : UInt64
    property affinity : UInt64
    def initialize(@thread_id : UInt32, @exit_status : UInt32, @priority_class : UInt32, @priority : UInt32, @create_time : UInt64, @exit_time : UInt64, @kernel_time : UInt64, @user_time : UInt64, @start_offset : UInt64, @affinity : UInt64)
    end
  end

  @[Extern]
  struct WDBGEXTS_CLR_DATA_INTERFACE
    property iid : LibC::GUID*
    property iface : Void*
    def initialize(@iid : LibC::GUID*, @iface : Void*)
    end
  end

  @[Extern]
  struct EXT_MATCH_PATTERN_A
    property str : Win32cr::Foundation::PSTR
    property pattern : Win32cr::Foundation::PSTR
    property case_sensitive : UInt32
    def initialize(@str : Win32cr::Foundation::PSTR, @pattern : Win32cr::Foundation::PSTR, @case_sensitive : UInt32)
    end
  end

  @[Extern]
  struct EXT_FIND_FILE
    property file_name : Win32cr::Foundation::PWSTR
    property indexed_size : UInt64
    property image_time_date_stamp : UInt32
    property image_check_sum : UInt32
    property extra_info : Void*
    property extra_info_size : UInt32
    property flags : UInt32
    property file_mapping : Void*
    property file_mapping_size : UInt64
    property file_handle : Win32cr::Foundation::HANDLE
    property found_file_name : Win32cr::Foundation::PWSTR
    property found_file_name_chars : UInt32
    def initialize(@file_name : Win32cr::Foundation::PWSTR, @indexed_size : UInt64, @image_time_date_stamp : UInt32, @image_check_sum : UInt32, @extra_info : Void*, @extra_info_size : UInt32, @flags : UInt32, @file_mapping : Void*, @file_mapping_size : UInt64, @file_handle : Win32cr::Foundation::HANDLE, @found_file_name : Win32cr::Foundation::PWSTR, @found_file_name_chars : UInt32)
    end
  end

  @[Extern]
  struct DEBUG_TYPED_DATA
    property mod_base : UInt64
    property offset : UInt64
    property engine_handle : UInt64
    property data : UInt64
    property size : UInt32
    property flags : UInt32
    property type_id : UInt32
    property base_type_id : UInt32
    property tag : UInt32
    property register : UInt32
    property internal : UInt64[9]
    def initialize(@mod_base : UInt64, @offset : UInt64, @engine_handle : UInt64, @data : UInt64, @size : UInt32, @flags : UInt32, @type_id : UInt32, @base_type_id : UInt32, @tag : UInt32, @register : UInt32, @internal : UInt64[9])
    end
  end

  @[Extern]
  struct EXT_TYPED_DATA
    property operation : Win32cr::System::Diagnostics::Debug::EXT_TDOP
    property flags : UInt32
    property in_data : Win32cr::System::Diagnostics::Debug::DEBUG_TYPED_DATA
    property out_data : Win32cr::System::Diagnostics::Debug::DEBUG_TYPED_DATA
    property in_str_index : UInt32
    property in32 : UInt32
    property out32 : UInt32
    property in64 : UInt64
    property out64 : UInt64
    property str_buffer_index : UInt32
    property str_buffer_chars : UInt32
    property str_chars_needed : UInt32
    property data_buffer_index : UInt32
    property data_buffer_bytes : UInt32
    property data_bytes_needed : UInt32
    property status : Win32cr::Foundation::HRESULT
    property reserved : UInt64[8]
    def initialize(@operation : Win32cr::System::Diagnostics::Debug::EXT_TDOP, @flags : UInt32, @in_data : Win32cr::System::Diagnostics::Debug::DEBUG_TYPED_DATA, @out_data : Win32cr::System::Diagnostics::Debug::DEBUG_TYPED_DATA, @in_str_index : UInt32, @in32 : UInt32, @out32 : UInt32, @in64 : UInt64, @out64 : UInt64, @str_buffer_index : UInt32, @str_buffer_chars : UInt32, @str_chars_needed : UInt32, @data_buffer_index : UInt32, @data_buffer_bytes : UInt32, @data_bytes_needed : UInt32, @status : Win32cr::Foundation::HRESULT, @reserved : UInt64[8])
    end
  end

  @[Extern]
  struct WDBGEXTS_QUERY_INTERFACE
    property iid : LibC::GUID*
    property iface : Void*
    def initialize(@iid : LibC::GUID*, @iface : Void*)
    end
  end

  @[Extern]
  struct WDBGEXTS_DISASSEMBLE_BUFFER
    property in_offset : UInt64
    property out_offset : UInt64
    property addr_flags : UInt32
    property format_flags : UInt32
    property data_buffer_bytes : UInt32
    property disasm_buffer_chars : UInt32
    property data_buffer : Void*
    property disasm_buffer : Win32cr::Foundation::PWSTR
    property reserved0 : UInt64[3]
    def initialize(@in_offset : UInt64, @out_offset : UInt64, @addr_flags : UInt32, @format_flags : UInt32, @data_buffer_bytes : UInt32, @disasm_buffer_chars : UInt32, @data_buffer : Void*, @disasm_buffer : Win32cr::Foundation::PWSTR, @reserved0 : UInt64[3])
    end
  end

  @[Extern]
  struct WDBGEXTS_MODULE_IN_RANGE
    property start : UInt64
    property end__ : UInt64
    property found_mod_base : UInt64
    property found_mod_size : UInt32
    def initialize(@start : UInt64, @end__ : UInt64, @found_mod_base : UInt64, @found_mod_size : UInt32)
    end
  end

  @[Extern]
  struct DBGKD_GET_VERSION32
    property major_version : UInt16
    property minor_version : UInt16
    property protocol_version : UInt16
    property flags : UInt16
    property kern_base : UInt32
    property ps_loaded_module_list : UInt32
    property machine_type : UInt16
    property th_callback_stack : UInt16
    property next_callback : UInt16
    property frame_pointer : UInt16
    property ki_call_user_mode : UInt32
    property ke_user_callback_dispatcher : UInt32
    property breakpoint_with_status : UInt32
    property debugger_data_list : UInt32
    def initialize(@major_version : UInt16, @minor_version : UInt16, @protocol_version : UInt16, @flags : UInt16, @kern_base : UInt32, @ps_loaded_module_list : UInt32, @machine_type : UInt16, @th_callback_stack : UInt16, @next_callback : UInt16, @frame_pointer : UInt16, @ki_call_user_mode : UInt32, @ke_user_callback_dispatcher : UInt32, @breakpoint_with_status : UInt32, @debugger_data_list : UInt32)
    end
  end

  @[Extern]
  struct DBGKD_DEBUG_DATA_HEADER32
    property list : Win32cr::System::Kernel::LIST_ENTRY32
    property owner_tag : UInt32
    property size : UInt32
    def initialize(@list : Win32cr::System::Kernel::LIST_ENTRY32, @owner_tag : UInt32, @size : UInt32)
    end
  end

  @[Extern]
  struct KDDEBUGGER_DATA32
    property header : Win32cr::System::Diagnostics::Debug::DBGKD_DEBUG_DATA_HEADER32
    property kern_base : UInt32
    property breakpoint_with_status : UInt32
    property saved_context : UInt32
    property th_callback_stack : UInt16
    property next_callback : UInt16
    property frame_pointer : UInt16
    property _bitfield : UInt16
    property ki_call_user_mode : UInt32
    property ke_user_callback_dispatcher : UInt32
    property ps_loaded_module_list : UInt32
    property ps_active_process_head : UInt32
    property psp_cid_table : UInt32
    property exp_system_resources_list : UInt32
    property exp_paged_pool_descriptor : UInt32
    property exp_number_of_paged_pools : UInt32
    property ke_time_increment : UInt32
    property ke_bug_check_callback_list_head : UInt32
    property ki_bugcheck_data : UInt32
    property iop_error_log_list_head : UInt32
    property obp_root_directory_object : UInt32
    property obp_type_object_type : UInt32
    property mm_system_cache_start : UInt32
    property mm_system_cache_end : UInt32
    property mm_system_cache_ws : UInt32
    property mm_pfn_database : UInt32
    property mm_system_ptes_start : UInt32
    property mm_system_ptes_end : UInt32
    property mm_subsection_base : UInt32
    property mm_number_of_paging_files : UInt32
    property mm_lowest_physical_page : UInt32
    property mm_highest_physical_page : UInt32
    property mm_number_of_physical_pages : UInt32
    property mm_maximum_non_paged_pool_in_bytes : UInt32
    property mm_non_paged_system_start : UInt32
    property mm_non_paged_pool_start : UInt32
    property mm_non_paged_pool_end : UInt32
    property mm_paged_pool_start : UInt32
    property mm_paged_pool_end : UInt32
    property mm_paged_pool_information : UInt32
    property mm_page_size : UInt32
    property mm_size_of_paged_pool_in_bytes : UInt32
    property mm_total_commit_limit : UInt32
    property mm_total_committed_pages : UInt32
    property mm_shared_commit : UInt32
    property mm_driver_commit : UInt32
    property mm_process_commit : UInt32
    property mm_paged_pool_commit : UInt32
    property mm_extended_commit : UInt32
    property mm_zeroed_page_list_head : UInt32
    property mm_free_page_list_head : UInt32
    property mm_standby_page_list_head : UInt32
    property mm_modified_page_list_head : UInt32
    property mm_modified_no_write_page_list_head : UInt32
    property mm_available_pages : UInt32
    property mm_resident_available_pages : UInt32
    property pool_track_table : UInt32
    property non_paged_pool_descriptor : UInt32
    property mm_highest_user_address : UInt32
    property mm_system_range_start : UInt32
    property mm_user_probe_address : UInt32
    property kd_print_circular_buffer : UInt32
    property kd_print_circular_buffer_end : UInt32
    property kd_print_write_pointer : UInt32
    property kd_print_rollover_count : UInt32
    property mm_loaded_user_image_list : UInt32
    def initialize(@header : Win32cr::System::Diagnostics::Debug::DBGKD_DEBUG_DATA_HEADER32, @kern_base : UInt32, @breakpoint_with_status : UInt32, @saved_context : UInt32, @th_callback_stack : UInt16, @next_callback : UInt16, @frame_pointer : UInt16, @_bitfield : UInt16, @ki_call_user_mode : UInt32, @ke_user_callback_dispatcher : UInt32, @ps_loaded_module_list : UInt32, @ps_active_process_head : UInt32, @psp_cid_table : UInt32, @exp_system_resources_list : UInt32, @exp_paged_pool_descriptor : UInt32, @exp_number_of_paged_pools : UInt32, @ke_time_increment : UInt32, @ke_bug_check_callback_list_head : UInt32, @ki_bugcheck_data : UInt32, @iop_error_log_list_head : UInt32, @obp_root_directory_object : UInt32, @obp_type_object_type : UInt32, @mm_system_cache_start : UInt32, @mm_system_cache_end : UInt32, @mm_system_cache_ws : UInt32, @mm_pfn_database : UInt32, @mm_system_ptes_start : UInt32, @mm_system_ptes_end : UInt32, @mm_subsection_base : UInt32, @mm_number_of_paging_files : UInt32, @mm_lowest_physical_page : UInt32, @mm_highest_physical_page : UInt32, @mm_number_of_physical_pages : UInt32, @mm_maximum_non_paged_pool_in_bytes : UInt32, @mm_non_paged_system_start : UInt32, @mm_non_paged_pool_start : UInt32, @mm_non_paged_pool_end : UInt32, @mm_paged_pool_start : UInt32, @mm_paged_pool_end : UInt32, @mm_paged_pool_information : UInt32, @mm_page_size : UInt32, @mm_size_of_paged_pool_in_bytes : UInt32, @mm_total_commit_limit : UInt32, @mm_total_committed_pages : UInt32, @mm_shared_commit : UInt32, @mm_driver_commit : UInt32, @mm_process_commit : UInt32, @mm_paged_pool_commit : UInt32, @mm_extended_commit : UInt32, @mm_zeroed_page_list_head : UInt32, @mm_free_page_list_head : UInt32, @mm_standby_page_list_head : UInt32, @mm_modified_page_list_head : UInt32, @mm_modified_no_write_page_list_head : UInt32, @mm_available_pages : UInt32, @mm_resident_available_pages : UInt32, @pool_track_table : UInt32, @non_paged_pool_descriptor : UInt32, @mm_highest_user_address : UInt32, @mm_system_range_start : UInt32, @mm_user_probe_address : UInt32, @kd_print_circular_buffer : UInt32, @kd_print_circular_buffer_end : UInt32, @kd_print_write_pointer : UInt32, @kd_print_rollover_count : UInt32, @mm_loaded_user_image_list : UInt32)
    end
  end

  @[Extern]
  struct DBGKD_GET_VERSION64
    property major_version : UInt16
    property minor_version : UInt16
    property protocol_version : UInt8
    property kd_secondary_version : UInt8
    property flags : UInt16
    property machine_type : UInt16
    property max_packet_type : UInt8
    property max_state_change : UInt8
    property max_manipulate : UInt8
    property simulation : UInt8
    property unused : UInt16*
    property kern_base : UInt64
    property ps_loaded_module_list : UInt64
    property debugger_data_list : UInt64
    def initialize(@major_version : UInt16, @minor_version : UInt16, @protocol_version : UInt8, @kd_secondary_version : UInt8, @flags : UInt16, @machine_type : UInt16, @max_packet_type : UInt8, @max_state_change : UInt8, @max_manipulate : UInt8, @simulation : UInt8, @unused : UInt16*, @kern_base : UInt64, @ps_loaded_module_list : UInt64, @debugger_data_list : UInt64)
    end
  end

  @[Extern]
  struct DBGKD_DEBUG_DATA_HEADER64
    property list : Win32cr::System::Kernel::LIST_ENTRY64
    property owner_tag : UInt32
    property size : UInt32
    def initialize(@list : Win32cr::System::Kernel::LIST_ENTRY64, @owner_tag : UInt32, @size : UInt32)
    end
  end

  @[Extern]
  struct KDDEBUGGER_DATA64
    property header : Win32cr::System::Diagnostics::Debug::DBGKD_DEBUG_DATA_HEADER64
    property kern_base : UInt64
    property breakpoint_with_status : UInt64
    property saved_context : UInt64
    property th_callback_stack : UInt16
    property next_callback : UInt16
    property frame_pointer : UInt16
    property _bitfield : UInt16
    property ki_call_user_mode : UInt64
    property ke_user_callback_dispatcher : UInt64
    property ps_loaded_module_list : UInt64
    property ps_active_process_head : UInt64
    property psp_cid_table : UInt64
    property exp_system_resources_list : UInt64
    property exp_paged_pool_descriptor : UInt64
    property exp_number_of_paged_pools : UInt64
    property ke_time_increment : UInt64
    property ke_bug_check_callback_list_head : UInt64
    property ki_bugcheck_data : UInt64
    property iop_error_log_list_head : UInt64
    property obp_root_directory_object : UInt64
    property obp_type_object_type : UInt64
    property mm_system_cache_start : UInt64
    property mm_system_cache_end : UInt64
    property mm_system_cache_ws : UInt64
    property mm_pfn_database : UInt64
    property mm_system_ptes_start : UInt64
    property mm_system_ptes_end : UInt64
    property mm_subsection_base : UInt64
    property mm_number_of_paging_files : UInt64
    property mm_lowest_physical_page : UInt64
    property mm_highest_physical_page : UInt64
    property mm_number_of_physical_pages : UInt64
    property mm_maximum_non_paged_pool_in_bytes : UInt64
    property mm_non_paged_system_start : UInt64
    property mm_non_paged_pool_start : UInt64
    property mm_non_paged_pool_end : UInt64
    property mm_paged_pool_start : UInt64
    property mm_paged_pool_end : UInt64
    property mm_paged_pool_information : UInt64
    property mm_page_size : UInt64
    property mm_size_of_paged_pool_in_bytes : UInt64
    property mm_total_commit_limit : UInt64
    property mm_total_committed_pages : UInt64
    property mm_shared_commit : UInt64
    property mm_driver_commit : UInt64
    property mm_process_commit : UInt64
    property mm_paged_pool_commit : UInt64
    property mm_extended_commit : UInt64
    property mm_zeroed_page_list_head : UInt64
    property mm_free_page_list_head : UInt64
    property mm_standby_page_list_head : UInt64
    property mm_modified_page_list_head : UInt64
    property mm_modified_no_write_page_list_head : UInt64
    property mm_available_pages : UInt64
    property mm_resident_available_pages : UInt64
    property pool_track_table : UInt64
    property non_paged_pool_descriptor : UInt64
    property mm_highest_user_address : UInt64
    property mm_system_range_start : UInt64
    property mm_user_probe_address : UInt64
    property kd_print_circular_buffer : UInt64
    property kd_print_circular_buffer_end : UInt64
    property kd_print_write_pointer : UInt64
    property kd_print_rollover_count : UInt64
    property mm_loaded_user_image_list : UInt64
    property nt_build_lab : UInt64
    property ki_normal_system_call : UInt64
    property ki_processor_block : UInt64
    property mm_unloaded_drivers : UInt64
    property mm_last_unloaded_driver : UInt64
    property mm_triage_action_taken : UInt64
    property mm_special_pool_tag : UInt64
    property kernel_verifier : UInt64
    property mm_verifier_data : UInt64
    property mm_allocated_non_paged_pool : UInt64
    property mm_peak_commitment : UInt64
    property mm_total_commit_limit_maximum : UInt64
    property cm_nt_csd_version : UInt64
    property mm_physical_memory_block : UInt64
    property mm_session_base : UInt64
    property mm_session_size : UInt64
    property mm_system_parent_table_page : UInt64
    property mm_virtual_translation_base : UInt64
    property offset_k_thread_next_processor : UInt16
    property offset_k_thread_teb : UInt16
    property offset_k_thread_kernel_stack : UInt16
    property offset_k_thread_initial_stack : UInt16
    property offset_k_thread_apc_process : UInt16
    property offset_k_thread_state : UInt16
    property offset_k_thread_b_store : UInt16
    property offset_k_thread_b_store_limit : UInt16
    property size_e_process : UInt16
    property offset_eprocess_peb : UInt16
    property offset_eprocess_parent_cid : UInt16
    property offset_eprocess_directory_table_base : UInt16
    property size_prcb : UInt16
    property offset_prcb_dpc_routine : UInt16
    property offset_prcb_current_thread : UInt16
    property offset_prcb_mhz : UInt16
    property offset_prcb_cpu_type : UInt16
    property offset_prcb_vendor_string : UInt16
    property offset_prcb_proc_state_context : UInt16
    property offset_prcb_number : UInt16
    property size_e_thread : UInt16
    property l1tf_high_physical_bit_index : UInt8
    property l1tf_swizzle_bit_index : UInt8
    property padding0 : UInt32
    property kd_print_circular_buffer_ptr : UInt64
    property kd_print_buffer_size : UInt64
    property ke_loader_block : UInt64
    property size_pcr : UInt16
    property offset_pcr_self_pcr : UInt16
    property offset_pcr_current_prcb : UInt16
    property offset_pcr_contained_prcb : UInt16
    property offset_pcr_initial_b_store : UInt16
    property offset_pcr_b_store_limit : UInt16
    property offset_pcr_initial_stack : UInt16
    property offset_pcr_stack_limit : UInt16
    property offset_prcb_pcr_page : UInt16
    property offset_prcb_proc_state_special_reg : UInt16
    property gdt_r0_code : UInt16
    property gdt_r0_data : UInt16
    property gdt_r0_pcr : UInt16
    property gdt_r3_code : UInt16
    property gdt_r3_data : UInt16
    property gdt_r3_teb : UInt16
    property gdt_ldt : UInt16
    property gdt_tss : UInt16
    property gdt64_r3_cm_code : UInt16
    property gdt64_r3_cm_teb : UInt16
    property iop_num_triage_dump_data_blocks : UInt64
    property iop_triage_dump_data_blocks : UInt64
    property vf_crash_data_block : UInt64
    property mm_bad_pages_detected : UInt64
    property mm_zeroed_page_single_bit_errors_detected : UInt64
    property etwp_debugger_data : UInt64
    property offset_prcb_context : UInt16
    property offset_prcb_max_breakpoints : UInt16
    property offset_prcb_max_watchpoints : UInt16
    property offset_k_thread_stack_limit : UInt32
    property offset_k_thread_stack_base : UInt32
    property offset_k_thread_queue_list_entry : UInt32
    property offset_e_thread_irp_list : UInt32
    property offset_prcb_idle_thread : UInt16
    property offset_prcb_normal_dpc_state : UInt16
    property offset_prcb_dpc_stack : UInt16
    property offset_prcb_isr_stack : UInt16
    property size_kdpc_stack_frame : UInt16
    property offset_k_pri_queue_thread_list_head : UInt16
    property offset_k_thread_wait_reason : UInt16
    property padding1 : UInt16
    property pte_base : UInt64
    property retpoline_stub_function_table : UInt64
    property retpoline_stub_function_table_size : UInt32
    property retpoline_stub_offset : UInt32
    property retpoline_stub_size : UInt32
    property offset_e_process_mm_hot_patch_context : UInt16
    def initialize(@header : Win32cr::System::Diagnostics::Debug::DBGKD_DEBUG_DATA_HEADER64, @kern_base : UInt64, @breakpoint_with_status : UInt64, @saved_context : UInt64, @th_callback_stack : UInt16, @next_callback : UInt16, @frame_pointer : UInt16, @_bitfield : UInt16, @ki_call_user_mode : UInt64, @ke_user_callback_dispatcher : UInt64, @ps_loaded_module_list : UInt64, @ps_active_process_head : UInt64, @psp_cid_table : UInt64, @exp_system_resources_list : UInt64, @exp_paged_pool_descriptor : UInt64, @exp_number_of_paged_pools : UInt64, @ke_time_increment : UInt64, @ke_bug_check_callback_list_head : UInt64, @ki_bugcheck_data : UInt64, @iop_error_log_list_head : UInt64, @obp_root_directory_object : UInt64, @obp_type_object_type : UInt64, @mm_system_cache_start : UInt64, @mm_system_cache_end : UInt64, @mm_system_cache_ws : UInt64, @mm_pfn_database : UInt64, @mm_system_ptes_start : UInt64, @mm_system_ptes_end : UInt64, @mm_subsection_base : UInt64, @mm_number_of_paging_files : UInt64, @mm_lowest_physical_page : UInt64, @mm_highest_physical_page : UInt64, @mm_number_of_physical_pages : UInt64, @mm_maximum_non_paged_pool_in_bytes : UInt64, @mm_non_paged_system_start : UInt64, @mm_non_paged_pool_start : UInt64, @mm_non_paged_pool_end : UInt64, @mm_paged_pool_start : UInt64, @mm_paged_pool_end : UInt64, @mm_paged_pool_information : UInt64, @mm_page_size : UInt64, @mm_size_of_paged_pool_in_bytes : UInt64, @mm_total_commit_limit : UInt64, @mm_total_committed_pages : UInt64, @mm_shared_commit : UInt64, @mm_driver_commit : UInt64, @mm_process_commit : UInt64, @mm_paged_pool_commit : UInt64, @mm_extended_commit : UInt64, @mm_zeroed_page_list_head : UInt64, @mm_free_page_list_head : UInt64, @mm_standby_page_list_head : UInt64, @mm_modified_page_list_head : UInt64, @mm_modified_no_write_page_list_head : UInt64, @mm_available_pages : UInt64, @mm_resident_available_pages : UInt64, @pool_track_table : UInt64, @non_paged_pool_descriptor : UInt64, @mm_highest_user_address : UInt64, @mm_system_range_start : UInt64, @mm_user_probe_address : UInt64, @kd_print_circular_buffer : UInt64, @kd_print_circular_buffer_end : UInt64, @kd_print_write_pointer : UInt64, @kd_print_rollover_count : UInt64, @mm_loaded_user_image_list : UInt64, @nt_build_lab : UInt64, @ki_normal_system_call : UInt64, @ki_processor_block : UInt64, @mm_unloaded_drivers : UInt64, @mm_last_unloaded_driver : UInt64, @mm_triage_action_taken : UInt64, @mm_special_pool_tag : UInt64, @kernel_verifier : UInt64, @mm_verifier_data : UInt64, @mm_allocated_non_paged_pool : UInt64, @mm_peak_commitment : UInt64, @mm_total_commit_limit_maximum : UInt64, @cm_nt_csd_version : UInt64, @mm_physical_memory_block : UInt64, @mm_session_base : UInt64, @mm_session_size : UInt64, @mm_system_parent_table_page : UInt64, @mm_virtual_translation_base : UInt64, @offset_k_thread_next_processor : UInt16, @offset_k_thread_teb : UInt16, @offset_k_thread_kernel_stack : UInt16, @offset_k_thread_initial_stack : UInt16, @offset_k_thread_apc_process : UInt16, @offset_k_thread_state : UInt16, @offset_k_thread_b_store : UInt16, @offset_k_thread_b_store_limit : UInt16, @size_e_process : UInt16, @offset_eprocess_peb : UInt16, @offset_eprocess_parent_cid : UInt16, @offset_eprocess_directory_table_base : UInt16, @size_prcb : UInt16, @offset_prcb_dpc_routine : UInt16, @offset_prcb_current_thread : UInt16, @offset_prcb_mhz : UInt16, @offset_prcb_cpu_type : UInt16, @offset_prcb_vendor_string : UInt16, @offset_prcb_proc_state_context : UInt16, @offset_prcb_number : UInt16, @size_e_thread : UInt16, @l1tf_high_physical_bit_index : UInt8, @l1tf_swizzle_bit_index : UInt8, @padding0 : UInt32, @kd_print_circular_buffer_ptr : UInt64, @kd_print_buffer_size : UInt64, @ke_loader_block : UInt64, @size_pcr : UInt16, @offset_pcr_self_pcr : UInt16, @offset_pcr_current_prcb : UInt16, @offset_pcr_contained_prcb : UInt16, @offset_pcr_initial_b_store : UInt16, @offset_pcr_b_store_limit : UInt16, @offset_pcr_initial_stack : UInt16, @offset_pcr_stack_limit : UInt16, @offset_prcb_pcr_page : UInt16, @offset_prcb_proc_state_special_reg : UInt16, @gdt_r0_code : UInt16, @gdt_r0_data : UInt16, @gdt_r0_pcr : UInt16, @gdt_r3_code : UInt16, @gdt_r3_data : UInt16, @gdt_r3_teb : UInt16, @gdt_ldt : UInt16, @gdt_tss : UInt16, @gdt64_r3_cm_code : UInt16, @gdt64_r3_cm_teb : UInt16, @iop_num_triage_dump_data_blocks : UInt64, @iop_triage_dump_data_blocks : UInt64, @vf_crash_data_block : UInt64, @mm_bad_pages_detected : UInt64, @mm_zeroed_page_single_bit_errors_detected : UInt64, @etwp_debugger_data : UInt64, @offset_prcb_context : UInt16, @offset_prcb_max_breakpoints : UInt16, @offset_prcb_max_watchpoints : UInt16, @offset_k_thread_stack_limit : UInt32, @offset_k_thread_stack_base : UInt32, @offset_k_thread_queue_list_entry : UInt32, @offset_e_thread_irp_list : UInt32, @offset_prcb_idle_thread : UInt16, @offset_prcb_normal_dpc_state : UInt16, @offset_prcb_dpc_stack : UInt16, @offset_prcb_isr_stack : UInt16, @size_kdpc_stack_frame : UInt16, @offset_k_pri_queue_thread_list_head : UInt16, @offset_k_thread_wait_reason : UInt16, @padding1 : UInt16, @pte_base : UInt64, @retpoline_stub_function_table : UInt64, @retpoline_stub_function_table_size : UInt32, @retpoline_stub_offset : UInt32, @retpoline_stub_size : UInt32, @offset_e_process_mm_hot_patch_context : UInt16)
    end
  end

  @[Extern]
  struct FIELD_INFO
    property fName : UInt8*
    property printName : UInt8*
    property size : UInt32
    property fOptions : UInt32
    property address : UInt64
    property anonymous : Anonymous_e__Union_
    property type_id : UInt32
    property field_offset : UInt32
    property buffer_size : UInt32
    property bit_field : BitField_
    property _bitfield : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property fieldCallBack : Void*
    property pBuffer : Void*
    def initialize(@fieldCallBack : Void*, @pBuffer : Void*)
    end
    end


    # Nested Type BitField_
    @[Extern]
    struct BitField_
    property position : UInt16
    property size : UInt16
    def initialize(@position : UInt16, @size : UInt16)
    end
    end

    def initialize(@fName : UInt8*, @printName : UInt8*, @size : UInt32, @fOptions : UInt32, @address : UInt64, @anonymous : Anonymous_e__Union_, @type_id : UInt32, @field_offset : UInt32, @buffer_size : UInt32, @bit_field : BitField_, @_bitfield : UInt32)
    end
  end

  @[Extern]
  struct SYM_DUMP_PARAM
    property size : UInt32
    property sName : UInt8*
    property options : UInt32
    property addr : UInt64
    property listLink : Win32cr::System::Diagnostics::Debug::FIELD_INFO*
    property anonymous : Anonymous_e__Union_
    property callback_routine : Win32cr::System::Diagnostics::Debug::PSYM_DUMP_FIELD_CALLBACK
    property nFields : UInt32
    property fields : Win32cr::System::Diagnostics::Debug::FIELD_INFO*
    property mod_base : UInt64
    property type_id : UInt32
    property type_size : UInt32
    property buffer_size : UInt32
    property _bitfield : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property context : Void*
    property pBuffer : Void*
    def initialize(@context : Void*, @pBuffer : Void*)
    end
    end

    def initialize(@size : UInt32, @sName : UInt8*, @options : UInt32, @addr : UInt64, @listLink : Win32cr::System::Diagnostics::Debug::FIELD_INFO*, @anonymous : Anonymous_e__Union_, @callback_routine : Win32cr::System::Diagnostics::Debug::PSYM_DUMP_FIELD_CALLBACK, @nFields : UInt32, @fields : Win32cr::System::Diagnostics::Debug::FIELD_INFO*, @mod_base : UInt64, @type_id : UInt32, @type_size : UInt32, @buffer_size : UInt32, @_bitfield : UInt32)
    end
  end

  @[Extern]
  struct M128A
    property low : UInt64
    property high : Int64
    def initialize(@low : UInt64, @high : Int64)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct XSAVE_FORMAT
    property control_word : UInt16
    property status_word : UInt16
    property tag_word : UInt8
    property reserved1 : UInt8
    property error_opcode : UInt16
    property error_offset : UInt32
    property error_selector : UInt16
    property reserved2 : UInt16
    property data_offset : UInt32
    property data_selector : UInt16
    property reserved3 : UInt16
    property mx_csr : UInt32
    property mx_csr_mask : UInt32
    property float_registers : Win32cr::System::Diagnostics::Debug::M128A[8]
    property xmm_registers : Win32cr::System::Diagnostics::Debug::M128A[16]
    property reserved4 : UInt8[96]
    def initialize(@control_word : UInt16, @status_word : UInt16, @tag_word : UInt8, @reserved1 : UInt8, @error_opcode : UInt16, @error_offset : UInt32, @error_selector : UInt16, @reserved2 : UInt16, @data_offset : UInt32, @data_selector : UInt16, @reserved3 : UInt16, @mx_csr : UInt32, @mx_csr_mask : UInt32, @float_registers : Win32cr::System::Diagnostics::Debug::M128A[8], @xmm_registers : Win32cr::System::Diagnostics::Debug::M128A[16], @reserved4 : UInt8[96])
    end
  end
  {% end %}

  @[Extern]
  struct XSAVE_AREA_HEADER
    property mask : UInt64
    property compaction_mask : UInt64
    property reserved2 : UInt64[6]
    def initialize(@mask : UInt64, @compaction_mask : UInt64, @reserved2 : UInt64[6])
    end
  end

  @[Extern]
  struct XSAVE_AREA
    property legacy_state : Win32cr::System::Diagnostics::Debug::XSAVE_FORMAT
    property header : Win32cr::System::Diagnostics::Debug::XSAVE_AREA_HEADER
    def initialize(@legacy_state : Win32cr::System::Diagnostics::Debug::XSAVE_FORMAT, @header : Win32cr::System::Diagnostics::Debug::XSAVE_AREA_HEADER)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct XSTATE_CONTEXT
    property mask : UInt64
    property length : UInt32
    property reserved1 : UInt32
    property area : Win32cr::System::Diagnostics::Debug::XSAVE_AREA*
    property buffer : Void*
    def initialize(@mask : UInt64, @length : UInt32, @reserved1 : UInt32, @area : Win32cr::System::Diagnostics::Debug::XSAVE_AREA*, @buffer : Void*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) %}
  @[Extern]
  struct CONTEXT
    property p1_home : UInt64
    property p2_home : UInt64
    property p3_home : UInt64
    property p4_home : UInt64
    property p5_home : UInt64
    property p6_home : UInt64
    property context_flags : UInt32
    property mx_csr : UInt32
    property seg_cs : UInt16
    property seg_ds : UInt16
    property seg_es : UInt16
    property seg_fs : UInt16
    property seg_gs : UInt16
    property seg_ss : UInt16
    property e_flags : UInt32
    property dr0 : UInt64
    property dr1 : UInt64
    property dr2 : UInt64
    property dr3 : UInt64
    property dr6 : UInt64
    property dr7 : UInt64
    property rax : UInt64
    property rcx : UInt64
    property rdx : UInt64
    property rbx : UInt64
    property rsp : UInt64
    property rbp : UInt64
    property rsi : UInt64
    property rdi : UInt64
    property r8 : UInt64
    property r9 : UInt64
    property r10 : UInt64
    property r11 : UInt64
    property r12 : UInt64
    property r13 : UInt64
    property r14 : UInt64
    property r15 : UInt64
    property rip : UInt64
    property anonymous : Anonymous_e__Union_
    property vector_register : Win32cr::System::Diagnostics::Debug::M128A[26]
    property vector_control : UInt64
    property debug_control : UInt64
    property last_branch_to_rip : UInt64
    property last_branch_from_rip : UInt64
    property last_exception_to_rip : UInt64
    property last_exception_from_rip : UInt64

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property flt_save : Win32cr::System::Diagnostics::Debug::XSAVE_FORMAT
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property header : Win32cr::System::Diagnostics::Debug::M128A[2]
    property legacy : Win32cr::System::Diagnostics::Debug::M128A[8]
    property xmm0 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm1 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm2 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm3 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm4 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm5 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm6 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm7 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm8 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm9 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm10 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm11 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm12 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm13 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm14 : Win32cr::System::Diagnostics::Debug::M128A
    property xmm15 : Win32cr::System::Diagnostics::Debug::M128A
    def initialize(@header : Win32cr::System::Diagnostics::Debug::M128A[2], @legacy : Win32cr::System::Diagnostics::Debug::M128A[8], @xmm0 : Win32cr::System::Diagnostics::Debug::M128A, @xmm1 : Win32cr::System::Diagnostics::Debug::M128A, @xmm2 : Win32cr::System::Diagnostics::Debug::M128A, @xmm3 : Win32cr::System::Diagnostics::Debug::M128A, @xmm4 : Win32cr::System::Diagnostics::Debug::M128A, @xmm5 : Win32cr::System::Diagnostics::Debug::M128A, @xmm6 : Win32cr::System::Diagnostics::Debug::M128A, @xmm7 : Win32cr::System::Diagnostics::Debug::M128A, @xmm8 : Win32cr::System::Diagnostics::Debug::M128A, @xmm9 : Win32cr::System::Diagnostics::Debug::M128A, @xmm10 : Win32cr::System::Diagnostics::Debug::M128A, @xmm11 : Win32cr::System::Diagnostics::Debug::M128A, @xmm12 : Win32cr::System::Diagnostics::Debug::M128A, @xmm13 : Win32cr::System::Diagnostics::Debug::M128A, @xmm14 : Win32cr::System::Diagnostics::Debug::M128A, @xmm15 : Win32cr::System::Diagnostics::Debug::M128A)
    end
      end

    def initialize(@flt_save : Win32cr::System::Diagnostics::Debug::XSAVE_FORMAT, @anonymous : Anonymous_e__Struct_)
    end
    end

    def initialize(@p1_home : UInt64, @p2_home : UInt64, @p3_home : UInt64, @p4_home : UInt64, @p5_home : UInt64, @p6_home : UInt64, @context_flags : UInt32, @mx_csr : UInt32, @seg_cs : UInt16, @seg_ds : UInt16, @seg_es : UInt16, @seg_fs : UInt16, @seg_gs : UInt16, @seg_ss : UInt16, @e_flags : UInt32, @dr0 : UInt64, @dr1 : UInt64, @dr2 : UInt64, @dr3 : UInt64, @dr6 : UInt64, @dr7 : UInt64, @rax : UInt64, @rcx : UInt64, @rdx : UInt64, @rbx : UInt64, @rsp : UInt64, @rbp : UInt64, @rsi : UInt64, @rdi : UInt64, @r8 : UInt64, @r9 : UInt64, @r10 : UInt64, @r11 : UInt64, @r12 : UInt64, @r13 : UInt64, @r14 : UInt64, @r15 : UInt64, @rip : UInt64, @anonymous : Anonymous_e__Union_, @vector_register : Win32cr::System::Diagnostics::Debug::M128A[26], @vector_control : UInt64, @debug_control : UInt64, @last_branch_to_rip : UInt64, @last_branch_from_rip : UInt64, @last_exception_to_rip : UInt64, @last_exception_from_rip : UInt64)
    end
  end
  {% end %}

  {% if flag?(:x86_64) %}
  @[Extern]
  struct DISPATCHER_CONTEXT
    property control_pc : UInt64
    property image_base : UInt64
    property function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*
    property establisher_frame : UInt64
    property target_ip : UInt64
    property context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*
    property language_handler : Win32cr::System::Kernel::EXCEPTION_ROUTINE
    property handler_data : Void*
    property history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*
    property scope_index : UInt32
    property fill0 : UInt32
    def initialize(@control_pc : UInt64, @image_base : UInt64, @function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*, @establisher_frame : UInt64, @target_ip : UInt64, @context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, @language_handler : Win32cr::System::Kernel::EXCEPTION_ROUTINE, @handler_data : Void*, @history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*, @scope_index : UInt32, @fill0 : UInt32)
    end
  end
  {% end %}

  {% if flag?(:x86_64) %}
  @[Extern]
  struct KNONVOLATILE_CONTEXT_POINTERS
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_

    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property integer_context : UInt64*[16]
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property rax : UInt64*
    property rcx : UInt64*
    property rdx : UInt64*
    property rbx : UInt64*
    property rsp : UInt64*
    property rbp : UInt64*
    property rsi : UInt64*
    property rdi : UInt64*
    property r8 : UInt64*
    property r9 : UInt64*
    property r10 : UInt64*
    property r11 : UInt64*
    property r12 : UInt64*
    property r13 : UInt64*
    property r14 : UInt64*
    property r15 : UInt64*
    def initialize(@rax : UInt64*, @rcx : UInt64*, @rdx : UInt64*, @rbx : UInt64*, @rsp : UInt64*, @rbp : UInt64*, @rsi : UInt64*, @rdi : UInt64*, @r8 : UInt64*, @r9 : UInt64*, @r10 : UInt64*, @r11 : UInt64*, @r12 : UInt64*, @r13 : UInt64*, @r14 : UInt64*, @r15 : UInt64*)
    end
      end

    def initialize(@integer_context : UInt64*[16], @anonymous : Anonymous_e__Struct_)
    end
    end


    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property floating_context : Win32cr::System::Diagnostics::Debug::M128A*[16]
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property xmm0 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm1 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm2 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm3 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm4 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm5 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm6 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm7 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm8 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm9 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm10 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm11 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm12 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm13 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm14 : Win32cr::System::Diagnostics::Debug::M128A*
    property xmm15 : Win32cr::System::Diagnostics::Debug::M128A*
    def initialize(@xmm0 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm1 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm2 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm3 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm4 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm5 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm6 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm7 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm8 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm9 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm10 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm11 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm12 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm13 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm14 : Win32cr::System::Diagnostics::Debug::M128A*, @xmm15 : Win32cr::System::Diagnostics::Debug::M128A*)
    end
      end

    def initialize(@floating_context : Win32cr::System::Diagnostics::Debug::M128A*[16], @anonymous : Anonymous_e__Struct_)
    end
    end

    def initialize(@anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_)
    end
  end
  {% end %}

  @[Extern(union: true)]
  struct ARM64_NT_NEON128
    property anonymous : Anonymous_e__Struct_
    property d : Float64[2]
    property s : Float32[4]
    property h : UInt16[8]
    property b : UInt8[16]

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property low : UInt64
    property high : Int64
    def initialize(@low : UInt64, @high : Int64)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @d : Float64[2], @s : Float32[4], @h : UInt16[8], @b : UInt8[16])
    end
  end

  {% if flag?(:i386) || flag?(:x86_64) %}
  @[Extern]
  struct ARM64_NT_CONTEXT
    property context_flags : UInt32
    property cpsr : UInt32
    property anonymous : Anonymous_e__Union_
    property sp : UInt64
    property pc : UInt64
    property v : Win32cr::System::Diagnostics::Debug::ARM64_NT_NEON128[32]
    property fpcr : UInt32
    property fpsr : UInt32
    property bcr : UInt32[8]
    property bvr : UInt64[8]
    property wcr : UInt32[2]
    property wvr : UInt64[2]

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property anonymous : Anonymous_e__Struct_
    property x : UInt64[31]

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property x0 : UInt64
    property x1 : UInt64
    property x2 : UInt64
    property x3 : UInt64
    property x4 : UInt64
    property x5 : UInt64
    property x6 : UInt64
    property x7 : UInt64
    property x8 : UInt64
    property x9 : UInt64
    property x10 : UInt64
    property x11 : UInt64
    property x12 : UInt64
    property x13 : UInt64
    property x14 : UInt64
    property x15 : UInt64
    property x16 : UInt64
    property x17 : UInt64
    property x18 : UInt64
    property x19 : UInt64
    property x20 : UInt64
    property x21 : UInt64
    property x22 : UInt64
    property x23 : UInt64
    property x24 : UInt64
    property x25 : UInt64
    property x26 : UInt64
    property x27 : UInt64
    property x28 : UInt64
    property fp : UInt64
    property lr : UInt64
    def initialize(@x0 : UInt64, @x1 : UInt64, @x2 : UInt64, @x3 : UInt64, @x4 : UInt64, @x5 : UInt64, @x6 : UInt64, @x7 : UInt64, @x8 : UInt64, @x9 : UInt64, @x10 : UInt64, @x11 : UInt64, @x12 : UInt64, @x13 : UInt64, @x14 : UInt64, @x15 : UInt64, @x16 : UInt64, @x17 : UInt64, @x18 : UInt64, @x19 : UInt64, @x20 : UInt64, @x21 : UInt64, @x22 : UInt64, @x23 : UInt64, @x24 : UInt64, @x25 : UInt64, @x26 : UInt64, @x27 : UInt64, @x28 : UInt64, @fp : UInt64, @lr : UInt64)
    end
      end

    def initialize(@anonymous : Anonymous_e__Struct_, @x : UInt64[31])
    end
    end

    def initialize(@context_flags : UInt32, @cpsr : UInt32, @anonymous : Anonymous_e__Union_, @sp : UInt64, @pc : UInt64, @v : Win32cr::System::Diagnostics::Debug::ARM64_NT_NEON128[32], @fpcr : UInt32, @fpsr : UInt32, @bcr : UInt32[8], @bvr : UInt64[8], @wcr : UInt32[2], @wvr : UInt64[2])
    end
  end
  {% end %}

  @[Extern]
  struct LDT_ENTRY
    property limit_low : UInt16
    property base_low : UInt16
    property high_word : HighWord_e__Union_

    # Nested Type HighWord_e__Union_
    @[Extern(union: true)]
    struct HighWord_e__Union_
    property bytes : Bytes_e__Struct_
    property bits : Bits_e__Struct_

      # Nested Type Bytes_e__Struct_
      @[Extern]
      struct Bytes_e__Struct_
    property base_mid : UInt8
    property flags1 : UInt8
    property flags2 : UInt8
    property base_hi : UInt8
    def initialize(@base_mid : UInt8, @flags1 : UInt8, @flags2 : UInt8, @base_hi : UInt8)
    end
      end


      # Nested Type Bits_e__Struct_
      @[Extern]
      struct Bits_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@bytes : Bytes_e__Struct_, @bits : Bits_e__Struct_)
    end
    end

    def initialize(@limit_low : UInt16, @base_low : UInt16, @high_word : HighWord_e__Union_)
    end
  end

  @[Extern]
  struct WOW64_FLOATING_SAVE_AREA
    property control_word : UInt32
    property status_word : UInt32
    property tag_word : UInt32
    property error_offset : UInt32
    property error_selector : UInt32
    property data_offset : UInt32
    property data_selector : UInt32
    property register_area : UInt8[80]
    property cr0_npx_state : UInt32
    def initialize(@control_word : UInt32, @status_word : UInt32, @tag_word : UInt32, @error_offset : UInt32, @error_selector : UInt32, @data_offset : UInt32, @data_selector : UInt32, @register_area : UInt8[80], @cr0_npx_state : UInt32)
    end
  end

  @[Extern]
  struct WOW64_CONTEXT
    property context_flags : UInt32
    property dr0 : UInt32
    property dr1 : UInt32
    property dr2 : UInt32
    property dr3 : UInt32
    property dr6 : UInt32
    property dr7 : UInt32
    property float_save : Win32cr::System::Diagnostics::Debug::WOW64_FLOATING_SAVE_AREA
    property seg_gs : UInt32
    property seg_fs : UInt32
    property seg_es : UInt32
    property seg_ds : UInt32
    property edi : UInt32
    property esi : UInt32
    property ebx : UInt32
    property edx : UInt32
    property ecx : UInt32
    property eax : UInt32
    property ebp : UInt32
    property eip : UInt32
    property seg_cs : UInt32
    property e_flags : UInt32
    property esp : UInt32
    property seg_ss : UInt32
    property extended_registers : UInt8[512]
    def initialize(@context_flags : UInt32, @dr0 : UInt32, @dr1 : UInt32, @dr2 : UInt32, @dr3 : UInt32, @dr6 : UInt32, @dr7 : UInt32, @float_save : Win32cr::System::Diagnostics::Debug::WOW64_FLOATING_SAVE_AREA, @seg_gs : UInt32, @seg_fs : UInt32, @seg_es : UInt32, @seg_ds : UInt32, @edi : UInt32, @esi : UInt32, @ebx : UInt32, @edx : UInt32, @ecx : UInt32, @eax : UInt32, @ebp : UInt32, @eip : UInt32, @seg_cs : UInt32, @e_flags : UInt32, @esp : UInt32, @seg_ss : UInt32, @extended_registers : UInt8[512])
    end
  end

  @[Extern]
  struct WOW64_LDT_ENTRY
    property limit_low : UInt16
    property base_low : UInt16
    property high_word : HighWord_e__Union_

    # Nested Type HighWord_e__Union_
    @[Extern(union: true)]
    struct HighWord_e__Union_
    property bytes : Bytes_e__Struct_
    property bits : Bits_e__Struct_

      # Nested Type Bytes_e__Struct_
      @[Extern]
      struct Bytes_e__Struct_
    property base_mid : UInt8
    property flags1 : UInt8
    property flags2 : UInt8
    property base_hi : UInt8
    def initialize(@base_mid : UInt8, @flags1 : UInt8, @flags2 : UInt8, @base_hi : UInt8)
    end
      end


      # Nested Type Bits_e__Struct_
      @[Extern]
      struct Bits_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@bytes : Bytes_e__Struct_, @bits : Bits_e__Struct_)
    end
    end

    def initialize(@limit_low : UInt16, @base_low : UInt16, @high_word : HighWord_e__Union_)
    end
  end

  @[Extern]
  struct WOW64_DESCRIPTOR_TABLE_ENTRY
    property selector : UInt32
    property descriptor : Win32cr::System::Diagnostics::Debug::WOW64_LDT_ENTRY
    def initialize(@selector : UInt32, @descriptor : Win32cr::System::Diagnostics::Debug::WOW64_LDT_ENTRY)
    end
  end

  @[Extern]
  struct EXCEPTION_RECORD
    property exception_code : Win32cr::Foundation::NTSTATUS
    property exception_flags : UInt32
    property exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*
    property exception_address : Void*
    property number_parameters : UInt32
    property exception_information : LibC::UIntPtrT[15]
    def initialize(@exception_code : Win32cr::Foundation::NTSTATUS, @exception_flags : UInt32, @exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*, @exception_address : Void*, @number_parameters : UInt32, @exception_information : LibC::UIntPtrT[15])
    end
  end

  @[Extern]
  struct EXCEPTION_RECORD32
    property exception_code : Win32cr::Foundation::NTSTATUS
    property exception_flags : UInt32
    property exception_record : UInt32
    property exception_address : UInt32
    property number_parameters : UInt32
    property exception_information : UInt32[15]
    def initialize(@exception_code : Win32cr::Foundation::NTSTATUS, @exception_flags : UInt32, @exception_record : UInt32, @exception_address : UInt32, @number_parameters : UInt32, @exception_information : UInt32[15])
    end
  end

  @[Extern]
  struct EXCEPTION_RECORD64
    property exception_code : Win32cr::Foundation::NTSTATUS
    property exception_flags : UInt32
    property exception_record : UInt64
    property exception_address : UInt64
    property number_parameters : UInt32
    property __unused_alignment : UInt32
    property exception_information : UInt64[15]
    def initialize(@exception_code : Win32cr::Foundation::NTSTATUS, @exception_flags : UInt32, @exception_record : UInt64, @exception_address : UInt64, @number_parameters : UInt32, @__unused_alignment : UInt32, @exception_information : UInt64[15])
    end
  end

  @[Extern]
  struct EXCEPTION_POINTERS
    property exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*
    property context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*
    def initialize(@exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*, @context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*)
    end
  end

  @[Extern]
  struct XSTATE_FEATURE
    property offset : UInt32
    property size : UInt32
    def initialize(@offset : UInt32, @size : UInt32)
    end
  end

  @[Extern]
  struct XSTATE_CONFIGURATION
    property enabled_features : UInt64
    property enabled_volatile_features : UInt64
    property size : UInt32
    property anonymous : Anonymous_e__Union_
    property features : Win32cr::System::Diagnostics::Debug::XSTATE_FEATURE[64]
    property enabled_supervisor_features : UInt64
    property aligned_features : UInt64
    property all_feature_size : UInt32
    property all_features : UInt32[64]
    property enabled_user_visible_supervisor_features : UInt64
    property extended_feature_disable_features : UInt64
    property all_non_large_feature_size : UInt32
    property spare : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property control_flags : UInt32
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@control_flags : UInt32, @anonymous : Anonymous_e__Struct_)
    end
    end

    def initialize(@enabled_features : UInt64, @enabled_volatile_features : UInt64, @size : UInt32, @anonymous : Anonymous_e__Union_, @features : Win32cr::System::Diagnostics::Debug::XSTATE_FEATURE[64], @enabled_supervisor_features : UInt64, @aligned_features : UInt64, @all_feature_size : UInt32, @all_features : UInt32[64], @enabled_user_visible_supervisor_features : UInt64, @extended_feature_disable_features : UInt64, @all_non_large_feature_size : UInt32, @spare : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_FILE_HEADER
    property machine : Win32cr::System::SystemInformation::IMAGE_FILE_MACHINE
    property number_of_sections : UInt16
    property time_date_stamp : UInt32
    property pointer_to_symbol_table : UInt32
    property number_of_symbols : UInt32
    property size_of_optional_header : UInt16
    property characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS
    def initialize(@machine : Win32cr::System::SystemInformation::IMAGE_FILE_MACHINE, @number_of_sections : UInt16, @time_date_stamp : UInt32, @pointer_to_symbol_table : UInt32, @number_of_symbols : UInt32, @size_of_optional_header : UInt16, @characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS)
    end
  end

  @[Extern]
  struct IMAGE_DATA_DIRECTORY
    property virtual_address : UInt32
    property size : UInt32
    def initialize(@virtual_address : UInt32, @size : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_OPTIONAL_HEADER32
    property magic : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER_MAGIC
    property major_linker_version : UInt8
    property minor_linker_version : UInt8
    property size_of_code : UInt32
    property size_of_initialized_data : UInt32
    property size_of_uninitialized_data : UInt32
    property address_of_entry_point : UInt32
    property base_of_code : UInt32
    property base_of_data : UInt32
    property image_base : UInt32
    property section_alignment : UInt32
    property file_alignment : UInt32
    property major_operating_system_version : UInt16
    property minor_operating_system_version : UInt16
    property major_image_version : UInt16
    property minor_image_version : UInt16
    property major_subsystem_version : UInt16
    property minor_subsystem_version : UInt16
    property win32_version_value : UInt32
    property size_of_image : UInt32
    property size_of_headers : UInt32
    property check_sum : UInt32
    property subsystem : Win32cr::System::Diagnostics::Debug::IMAGE_SUBSYSTEM
    property dll_characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_DLL_CHARACTERISTICS
    property size_of_stack_reserve : UInt32
    property size_of_stack_commit : UInt32
    property size_of_heap_reserve : UInt32
    property size_of_heap_commit : UInt32
    property loader_flags : UInt32
    property number_of_rva_and_sizes : UInt32
    property data_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY[16]
    def initialize(@magic : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER_MAGIC, @major_linker_version : UInt8, @minor_linker_version : UInt8, @size_of_code : UInt32, @size_of_initialized_data : UInt32, @size_of_uninitialized_data : UInt32, @address_of_entry_point : UInt32, @base_of_code : UInt32, @base_of_data : UInt32, @image_base : UInt32, @section_alignment : UInt32, @file_alignment : UInt32, @major_operating_system_version : UInt16, @minor_operating_system_version : UInt16, @major_image_version : UInt16, @minor_image_version : UInt16, @major_subsystem_version : UInt16, @minor_subsystem_version : UInt16, @win32_version_value : UInt32, @size_of_image : UInt32, @size_of_headers : UInt32, @check_sum : UInt32, @subsystem : Win32cr::System::Diagnostics::Debug::IMAGE_SUBSYSTEM, @dll_characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_DLL_CHARACTERISTICS, @size_of_stack_reserve : UInt32, @size_of_stack_commit : UInt32, @size_of_heap_reserve : UInt32, @size_of_heap_commit : UInt32, @loader_flags : UInt32, @number_of_rva_and_sizes : UInt32, @data_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY[16])
    end
  end

  @[Extern]
  struct IMAGE_ROM_OPTIONAL_HEADER
    property magic : UInt16
    property major_linker_version : UInt8
    property minor_linker_version : UInt8
    property size_of_code : UInt32
    property size_of_initialized_data : UInt32
    property size_of_uninitialized_data : UInt32
    property address_of_entry_point : UInt32
    property base_of_code : UInt32
    property base_of_data : UInt32
    property base_of_bss : UInt32
    property gpr_mask : UInt32
    property cpr_mask : UInt32[4]
    property gp_value : UInt32
    def initialize(@magic : UInt16, @major_linker_version : UInt8, @minor_linker_version : UInt8, @size_of_code : UInt32, @size_of_initialized_data : UInt32, @size_of_uninitialized_data : UInt32, @address_of_entry_point : UInt32, @base_of_code : UInt32, @base_of_data : UInt32, @base_of_bss : UInt32, @gpr_mask : UInt32, @cpr_mask : UInt32[4], @gp_value : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_OPTIONAL_HEADER64
    property magic : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER_MAGIC
    property major_linker_version : UInt8
    property minor_linker_version : UInt8
    property size_of_code : UInt32
    property size_of_initialized_data : UInt32
    property size_of_uninitialized_data : UInt32
    property address_of_entry_point : UInt32
    property base_of_code : UInt32
    property image_base : UInt64
    property section_alignment : UInt32
    property file_alignment : UInt32
    property major_operating_system_version : UInt16
    property minor_operating_system_version : UInt16
    property major_image_version : UInt16
    property minor_image_version : UInt16
    property major_subsystem_version : UInt16
    property minor_subsystem_version : UInt16
    property win32_version_value : UInt32
    property size_of_image : UInt32
    property size_of_headers : UInt32
    property check_sum : UInt32
    property subsystem : Win32cr::System::Diagnostics::Debug::IMAGE_SUBSYSTEM
    property dll_characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_DLL_CHARACTERISTICS
    property size_of_stack_reserve : UInt64
    property size_of_stack_commit : UInt64
    property size_of_heap_reserve : UInt64
    property size_of_heap_commit : UInt64
    property loader_flags : UInt32
    property number_of_rva_and_sizes : UInt32
    property data_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY[16]
    def initialize(@magic : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER_MAGIC, @major_linker_version : UInt8, @minor_linker_version : UInt8, @size_of_code : UInt32, @size_of_initialized_data : UInt32, @size_of_uninitialized_data : UInt32, @address_of_entry_point : UInt32, @base_of_code : UInt32, @image_base : UInt64, @section_alignment : UInt32, @file_alignment : UInt32, @major_operating_system_version : UInt16, @minor_operating_system_version : UInt16, @major_image_version : UInt16, @minor_image_version : UInt16, @major_subsystem_version : UInt16, @minor_subsystem_version : UInt16, @win32_version_value : UInt32, @size_of_image : UInt32, @size_of_headers : UInt32, @check_sum : UInt32, @subsystem : Win32cr::System::Diagnostics::Debug::IMAGE_SUBSYSTEM, @dll_characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_DLL_CHARACTERISTICS, @size_of_stack_reserve : UInt64, @size_of_stack_commit : UInt64, @size_of_heap_reserve : UInt64, @size_of_heap_commit : UInt64, @loader_flags : UInt32, @number_of_rva_and_sizes : UInt32, @data_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY[16])
    end
  end

  @[Extern]
  struct IMAGE_NT_HEADERS64
    property signature : UInt32
    property file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER
    property optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER64
    def initialize(@signature : UInt32, @file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER, @optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER64)
    end
  end

  @[Extern]
  struct IMAGE_NT_HEADERS32
    property signature : UInt32
    property file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER
    property optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER32
    def initialize(@signature : UInt32, @file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER, @optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_OPTIONAL_HEADER32)
    end
  end

  @[Extern]
  struct IMAGE_ROM_HEADERS
    property file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER
    property optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_ROM_OPTIONAL_HEADER
    def initialize(@file_header : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_HEADER, @optional_header : Win32cr::System::Diagnostics::Debug::IMAGE_ROM_OPTIONAL_HEADER)
    end
  end

  @[Extern]
  struct IMAGE_SECTION_HEADER
    property name : UInt8[8]
    property misc : Misc_e__Union_
    property virtual_address : UInt32
    property size_of_raw_data : UInt32
    property pointer_to_raw_data : UInt32
    property pointer_to_relocations : UInt32
    property pointer_to_linenumbers : UInt32
    property number_of_relocations : UInt16
    property number_of_linenumbers : UInt16
    property characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_CHARACTERISTICS

    # Nested Type Misc_e__Union_
    @[Extern(union: true)]
    struct Misc_e__Union_
    property physical_address : UInt32
    property virtual_size : UInt32
    def initialize(@physical_address : UInt32, @virtual_size : UInt32)
    end
    end

    def initialize(@name : UInt8[8], @misc : Misc_e__Union_, @virtual_address : UInt32, @size_of_raw_data : UInt32, @pointer_to_raw_data : UInt32, @pointer_to_relocations : UInt32, @pointer_to_linenumbers : UInt32, @number_of_relocations : UInt16, @number_of_linenumbers : UInt16, @characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_CHARACTERISTICS)
    end
  end

  @[Extern]
  struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    property flags : UInt16
    property catalog : UInt16
    property catalog_offset : UInt32
    property reserved : UInt32
    def initialize(@flags : UInt16, @catalog : UInt16, @catalog_offset : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_LOAD_CONFIG_DIRECTORY32
    property size : UInt32
    property time_date_stamp : UInt32
    property major_version : UInt16
    property minor_version : UInt16
    property global_flags_clear : UInt32
    property global_flags_set : UInt32
    property critical_section_default_timeout : UInt32
    property de_commit_free_block_threshold : UInt32
    property de_commit_total_free_threshold : UInt32
    property lock_prefix_table : UInt32
    property maximum_allocation_size : UInt32
    property virtual_memory_threshold : UInt32
    property process_heap_flags : UInt32
    property process_affinity_mask : UInt32
    property csd_version : UInt16
    property dependent_load_flags : UInt16
    property edit_list : UInt32
    property security_cookie : UInt32
    property se_handler_table : UInt32
    property se_handler_count : UInt32
    property guard_cf_check_function_pointer : UInt32
    property guard_cf_dispatch_function_pointer : UInt32
    property guard_cf_function_table : UInt32
    property guard_cf_function_count : UInt32
    property guard_flags : UInt32
    property code_integrity : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    property guard_address_taken_iat_entry_table : UInt32
    property guard_address_taken_iat_entry_count : UInt32
    property guard_long_jump_target_table : UInt32
    property guard_long_jump_target_count : UInt32
    property dynamic_value_reloc_table : UInt32
    property chpe_metadata_pointer : UInt32
    property guard_rf_failure_routine : UInt32
    property guard_rf_failure_routine_function_pointer : UInt32
    property dynamic_value_reloc_table_offset : UInt32
    property dynamic_value_reloc_table_section : UInt16
    property reserved2 : UInt16
    property guard_rf_verify_stack_pointer_function_pointer : UInt32
    property hot_patch_table_offset : UInt32
    property reserved3 : UInt32
    property enclave_configuration_pointer : UInt32
    property volatile_metadata_pointer : UInt32
    property guard_eh_continuation_table : UInt32
    property guard_eh_continuation_count : UInt32
    property guard_xfg_check_function_pointer : UInt32
    property guard_xfg_dispatch_function_pointer : UInt32
    property guard_xfg_table_dispatch_function_pointer : UInt32
    property cast_guard_os_determined_failure_mode : UInt32
    def initialize(@size : UInt32, @time_date_stamp : UInt32, @major_version : UInt16, @minor_version : UInt16, @global_flags_clear : UInt32, @global_flags_set : UInt32, @critical_section_default_timeout : UInt32, @de_commit_free_block_threshold : UInt32, @de_commit_total_free_threshold : UInt32, @lock_prefix_table : UInt32, @maximum_allocation_size : UInt32, @virtual_memory_threshold : UInt32, @process_heap_flags : UInt32, @process_affinity_mask : UInt32, @csd_version : UInt16, @dependent_load_flags : UInt16, @edit_list : UInt32, @security_cookie : UInt32, @se_handler_table : UInt32, @se_handler_count : UInt32, @guard_cf_check_function_pointer : UInt32, @guard_cf_dispatch_function_pointer : UInt32, @guard_cf_function_table : UInt32, @guard_cf_function_count : UInt32, @guard_flags : UInt32, @code_integrity : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_CODE_INTEGRITY, @guard_address_taken_iat_entry_table : UInt32, @guard_address_taken_iat_entry_count : UInt32, @guard_long_jump_target_table : UInt32, @guard_long_jump_target_count : UInt32, @dynamic_value_reloc_table : UInt32, @chpe_metadata_pointer : UInt32, @guard_rf_failure_routine : UInt32, @guard_rf_failure_routine_function_pointer : UInt32, @dynamic_value_reloc_table_offset : UInt32, @dynamic_value_reloc_table_section : UInt16, @reserved2 : UInt16, @guard_rf_verify_stack_pointer_function_pointer : UInt32, @hot_patch_table_offset : UInt32, @reserved3 : UInt32, @enclave_configuration_pointer : UInt32, @volatile_metadata_pointer : UInt32, @guard_eh_continuation_table : UInt32, @guard_eh_continuation_count : UInt32, @guard_xfg_check_function_pointer : UInt32, @guard_xfg_dispatch_function_pointer : UInt32, @guard_xfg_table_dispatch_function_pointer : UInt32, @cast_guard_os_determined_failure_mode : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_LOAD_CONFIG_DIRECTORY64
    property size : UInt32
    property time_date_stamp : UInt32
    property major_version : UInt16
    property minor_version : UInt16
    property global_flags_clear : UInt32
    property global_flags_set : UInt32
    property critical_section_default_timeout : UInt32
    property de_commit_free_block_threshold : UInt64
    property de_commit_total_free_threshold : UInt64
    property lock_prefix_table : UInt64
    property maximum_allocation_size : UInt64
    property virtual_memory_threshold : UInt64
    property process_affinity_mask : UInt64
    property process_heap_flags : UInt32
    property csd_version : UInt16
    property dependent_load_flags : UInt16
    property edit_list : UInt64
    property security_cookie : UInt64
    property se_handler_table : UInt64
    property se_handler_count : UInt64
    property guard_cf_check_function_pointer : UInt64
    property guard_cf_dispatch_function_pointer : UInt64
    property guard_cf_function_table : UInt64
    property guard_cf_function_count : UInt64
    property guard_flags : UInt32
    property code_integrity : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    property guard_address_taken_iat_entry_table : UInt64
    property guard_address_taken_iat_entry_count : UInt64
    property guard_long_jump_target_table : UInt64
    property guard_long_jump_target_count : UInt64
    property dynamic_value_reloc_table : UInt64
    property chpe_metadata_pointer : UInt64
    property guard_rf_failure_routine : UInt64
    property guard_rf_failure_routine_function_pointer : UInt64
    property dynamic_value_reloc_table_offset : UInt32
    property dynamic_value_reloc_table_section : UInt16
    property reserved2 : UInt16
    property guard_rf_verify_stack_pointer_function_pointer : UInt64
    property hot_patch_table_offset : UInt32
    property reserved3 : UInt32
    property enclave_configuration_pointer : UInt64
    property volatile_metadata_pointer : UInt64
    property guard_eh_continuation_table : UInt64
    property guard_eh_continuation_count : UInt64
    property guard_xfg_check_function_pointer : UInt64
    property guard_xfg_dispatch_function_pointer : UInt64
    property guard_xfg_table_dispatch_function_pointer : UInt64
    property cast_guard_os_determined_failure_mode : UInt64
    def initialize(@size : UInt32, @time_date_stamp : UInt32, @major_version : UInt16, @minor_version : UInt16, @global_flags_clear : UInt32, @global_flags_set : UInt32, @critical_section_default_timeout : UInt32, @de_commit_free_block_threshold : UInt64, @de_commit_total_free_threshold : UInt64, @lock_prefix_table : UInt64, @maximum_allocation_size : UInt64, @virtual_memory_threshold : UInt64, @process_affinity_mask : UInt64, @process_heap_flags : UInt32, @csd_version : UInt16, @dependent_load_flags : UInt16, @edit_list : UInt64, @security_cookie : UInt64, @se_handler_table : UInt64, @se_handler_count : UInt64, @guard_cf_check_function_pointer : UInt64, @guard_cf_dispatch_function_pointer : UInt64, @guard_cf_function_table : UInt64, @guard_cf_function_count : UInt64, @guard_flags : UInt32, @code_integrity : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_CODE_INTEGRITY, @guard_address_taken_iat_entry_table : UInt64, @guard_address_taken_iat_entry_count : UInt64, @guard_long_jump_target_table : UInt64, @guard_long_jump_target_count : UInt64, @dynamic_value_reloc_table : UInt64, @chpe_metadata_pointer : UInt64, @guard_rf_failure_routine : UInt64, @guard_rf_failure_routine_function_pointer : UInt64, @dynamic_value_reloc_table_offset : UInt32, @dynamic_value_reloc_table_section : UInt16, @reserved2 : UInt16, @guard_rf_verify_stack_pointer_function_pointer : UInt64, @hot_patch_table_offset : UInt32, @reserved3 : UInt32, @enclave_configuration_pointer : UInt64, @volatile_metadata_pointer : UInt64, @guard_eh_continuation_table : UInt64, @guard_eh_continuation_count : UInt64, @guard_xfg_check_function_pointer : UInt64, @guard_xfg_dispatch_function_pointer : UInt64, @guard_xfg_table_dispatch_function_pointer : UInt64, @cast_guard_os_determined_failure_mode : UInt64)
    end
  end

  @[Extern]
  struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
    property begin_address : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property unwind_data : UInt32
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@unwind_data : UInt32, @anonymous : Anonymous_e__Struct_)
    end
    end

    def initialize(@begin_address : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct IMAGE_RUNTIME_FUNCTION_ENTRY
    property begin_address : UInt32
    property end_address : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property unwind_info_address : UInt32
    property unwind_data : UInt32
    def initialize(@unwind_info_address : UInt32, @unwind_data : UInt32)
    end
    end

    def initialize(@begin_address : UInt32, @end_address : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct IMAGE_DEBUG_DIRECTORY
    property characteristics : UInt32
    property time_date_stamp : UInt32
    property major_version : UInt16
    property minor_version : UInt16
    property type__ : Win32cr::System::Diagnostics::Debug::IMAGE_DEBUG_TYPE
    property size_of_data : UInt32
    property address_of_raw_data : UInt32
    property pointer_to_raw_data : UInt32
    def initialize(@characteristics : UInt32, @time_date_stamp : UInt32, @major_version : UInt16, @minor_version : UInt16, @type__ : Win32cr::System::Diagnostics::Debug::IMAGE_DEBUG_TYPE, @size_of_data : UInt32, @address_of_raw_data : UInt32, @pointer_to_raw_data : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_COFF_SYMBOLS_HEADER
    property number_of_symbols : UInt32
    property lva_to_first_symbol : UInt32
    property number_of_linenumbers : UInt32
    property lva_to_first_linenumber : UInt32
    property rva_to_first_byte_of_code : UInt32
    property rva_to_last_byte_of_code : UInt32
    property rva_to_first_byte_of_data : UInt32
    property rva_to_last_byte_of_data : UInt32
    def initialize(@number_of_symbols : UInt32, @lva_to_first_symbol : UInt32, @number_of_linenumbers : UInt32, @lva_to_first_linenumber : UInt32, @rva_to_first_byte_of_code : UInt32, @rva_to_last_byte_of_code : UInt32, @rva_to_first_byte_of_data : UInt32, @rva_to_last_byte_of_data : UInt32)
    end
  end

  @[Extern]
  struct FPO_DATA
    property ulOffStart : UInt32
    property cbProcSize : UInt32
    property cdwLocals : UInt32
    property cdwParams : UInt16
    property _bitfield : UInt16
    def initialize(@ulOffStart : UInt32, @cbProcSize : UInt32, @cdwLocals : UInt32, @cdwParams : UInt16, @_bitfield : UInt16)
    end
  end

  @[Extern]
  struct IMAGE_FUNCTION_ENTRY
    property starting_address : UInt32
    property ending_address : UInt32
    property end_of_prologue : UInt32
    def initialize(@starting_address : UInt32, @ending_address : UInt32, @end_of_prologue : UInt32)
    end
  end

  @[Extern]
  struct IMAGE_FUNCTION_ENTRY64
    property starting_address : UInt64
    property ending_address : UInt64
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property end_of_prologue : UInt64
    property unwind_info_address : UInt64
    def initialize(@end_of_prologue : UInt64, @unwind_info_address : UInt64)
    end
    end

    def initialize(@starting_address : UInt64, @ending_address : UInt64, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct IMAGE_COR20_HEADER
    property cb : UInt32
    property major_runtime_version : UInt16
    property minor_runtime_version : UInt16
    property meta_data : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property flags : UInt32
    property anonymous : Anonymous_e__Union_
    property resources : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property strong_name_signature : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property code_manager_table : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property v_table_fixups : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property export_address_table_jumps : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY
    property managed_native_header : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property entry_point_token : UInt32
    property entry_point_rva : UInt32
    def initialize(@entry_point_token : UInt32, @entry_point_rva : UInt32)
    end
    end

    def initialize(@cb : UInt32, @major_runtime_version : UInt16, @minor_runtime_version : UInt16, @meta_data : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @flags : UInt32, @anonymous : Anonymous_e__Union_, @resources : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @strong_name_signature : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @code_manager_table : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @v_table_fixups : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @export_address_table_jumps : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY, @managed_native_header : Win32cr::System::Diagnostics::Debug::IMAGE_DATA_DIRECTORY)
    end
  end

  {% if flag?(:x86_64) %}
  @[Extern]
  struct UNWIND_HISTORY_TABLE_ENTRY
    property image_base : LibC::UIntPtrT
    property function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*
    def initialize(@image_base : LibC::UIntPtrT, @function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct UNWIND_HISTORY_TABLE
    property count : UInt32
    property local_hint : UInt8
    property global_hint : UInt8
    property search : UInt8
    property once : UInt8
    property low_address : LibC::UIntPtrT
    property high_address : LibC::UIntPtrT
    property entry : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE_ENTRY[12]
    def initialize(@count : UInt32, @local_hint : UInt8, @global_hint : UInt8, @search : UInt8, @once : UInt8, @low_address : LibC::UIntPtrT, @high_address : LibC::UIntPtrT, @entry : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE_ENTRY[12])
    end
  end
  {% end %}

  @[Extern]
  struct WAITCHAIN_NODE_INFO
    property object_type : Win32cr::System::Diagnostics::Debug::WCT_OBJECT_TYPE
    property object_status : Win32cr::System::Diagnostics::Debug::WCT_OBJECT_STATUS
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property lock_object : LockObject_e__Struct_
    property thread_object : ThreadObject_e__Struct_

      # Nested Type LockObject_e__Struct_
      @[Extern]
      struct LockObject_e__Struct_
    property object_name : UInt16[128]
    property timeout : Win32cr::Foundation::LARGE_INTEGER
    property alertable : Win32cr::Foundation::BOOL
    def initialize(@object_name : UInt16[128], @timeout : Win32cr::Foundation::LARGE_INTEGER, @alertable : Win32cr::Foundation::BOOL)
    end
      end


      # Nested Type ThreadObject_e__Struct_
      @[Extern]
      struct ThreadObject_e__Struct_
    property process_id : UInt32
    property thread_id : UInt32
    property wait_time : UInt32
    property context_switches : UInt32
    def initialize(@process_id : UInt32, @thread_id : UInt32, @wait_time : UInt32, @context_switches : UInt32)
    end
      end

    def initialize(@lock_object : LockObject_e__Struct_, @thread_object : ThreadObject_e__Struct_)
    end
    end

    def initialize(@object_type : Win32cr::System::Diagnostics::Debug::WCT_OBJECT_TYPE, @object_status : Win32cr::System::Diagnostics::Debug::WCT_OBJECT_STATUS, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct MINIDUMP_LOCATION_DESCRIPTOR
    property data_size : UInt32
    property rva : UInt32
    def initialize(@data_size : UInt32, @rva : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_LOCATION_DESCRIPTOR64
    property data_size : UInt64
    property rva : UInt64
    def initialize(@data_size : UInt64, @rva : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY_DESCRIPTOR
    property start_of_memory_range : UInt64
    property memory : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    def initialize(@start_of_memory_range : UInt64, @memory : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY_DESCRIPTOR64
    property start_of_memory_range : UInt64
    property data_size : UInt64
    def initialize(@start_of_memory_range : UInt64, @data_size : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_HEADER
    property signature : UInt32
    property version : UInt32
    property number_of_streams : UInt32
    property stream_directory_rva : UInt32
    property check_sum : UInt32
    property anonymous : Anonymous_e__Union_
    property flags : UInt64

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property reserved : UInt32
    property time_date_stamp : UInt32
    def initialize(@reserved : UInt32, @time_date_stamp : UInt32)
    end
    end

    def initialize(@signature : UInt32, @version : UInt32, @number_of_streams : UInt32, @stream_directory_rva : UInt32, @check_sum : UInt32, @anonymous : Anonymous_e__Union_, @flags : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_DIRECTORY
    property stream_type : UInt32
    property location : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    def initialize(@stream_type : UInt32, @location : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_STRING
    property length : UInt32
    property buffer : UInt16*
    def initialize(@length : UInt32, @buffer : UInt16*)
    end
  end

  @[Extern(union: true)]
  struct CPU_INFORMATION
    property x86_cpu_info : X86CpuInfo_e__Struct_
    property other_cpu_info : OtherCpuInfo_e__Struct_

    # Nested Type X86CpuInfo_e__Struct_
    @[Extern]
    struct X86CpuInfo_e__Struct_
    property vendor_id : UInt32[3]
    property version_information : UInt32
    property feature_information : UInt32
    property amd_extended_cpu_features : UInt32
    def initialize(@vendor_id : UInt32[3], @version_information : UInt32, @feature_information : UInt32, @amd_extended_cpu_features : UInt32)
    end
    end


    # Nested Type OtherCpuInfo_e__Struct_
    @[Extern]
    struct OtherCpuInfo_e__Struct_
    property processor_features : UInt64[2]
    def initialize(@processor_features : UInt64[2])
    end
    end

    def initialize(@x86_cpu_info : X86CpuInfo_e__Struct_, @other_cpu_info : OtherCpuInfo_e__Struct_)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_INFO
    property processor_architecture : Win32cr::System::Diagnostics::Debug::PROCESSOR_ARCHITECTURE
    property processor_level : UInt16
    property processor_revision : UInt16
    property anonymous1 : Anonymous1_e__Union_
    property major_version : UInt32
    property minor_version : UInt32
    property build_number : UInt32
    property platform_id : Win32cr::System::Diagnostics::Debug::VER_PLATFORM
    property csd_version_rva : UInt32
    property anonymous2 : Anonymous2_e__Union_
    property cpu : Win32cr::System::Diagnostics::Debug::CPU_INFORMATION

    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property reserved1 : UInt32
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property suite_mask : UInt16
    property reserved2 : UInt16
    def initialize(@suite_mask : UInt16, @reserved2 : UInt16)
    end
      end

    def initialize(@reserved1 : UInt32, @anonymous : Anonymous_e__Struct_)
    end
    end


    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property reserved0 : UInt16
    property anonymous : Anonymous_e__Struct_

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property number_of_processors : UInt8
    property product_type : UInt8
    def initialize(@number_of_processors : UInt8, @product_type : UInt8)
    end
      end

    def initialize(@reserved0 : UInt16, @anonymous : Anonymous_e__Struct_)
    end
    end

    def initialize(@processor_architecture : Win32cr::System::Diagnostics::Debug::PROCESSOR_ARCHITECTURE, @processor_level : UInt16, @processor_revision : UInt16, @anonymous1 : Anonymous1_e__Union_, @major_version : UInt32, @minor_version : UInt32, @build_number : UInt32, @platform_id : Win32cr::System::Diagnostics::Debug::VER_PLATFORM, @csd_version_rva : UInt32, @anonymous2 : Anonymous2_e__Union_, @cpu : Win32cr::System::Diagnostics::Debug::CPU_INFORMATION)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD
    property thread_id : UInt32
    property suspend_count : UInt32
    property priority_class : UInt32
    property priority : UInt32
    property teb : UInt64
    property stack : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR
    property thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    def initialize(@thread_id : UInt32, @suspend_count : UInt32, @priority_class : UInt32, @priority : UInt32, @teb : UInt64, @stack : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR, @thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_LIST
    property number_of_threads : UInt32
    property threads : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD*
    def initialize(@number_of_threads : UInt32, @threads : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD*)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_EX
    property thread_id : UInt32
    property suspend_count : UInt32
    property priority_class : UInt32
    property priority : UInt32
    property teb : UInt64
    property stack : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR
    property thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    property backing_store : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR
    def initialize(@thread_id : UInt32, @suspend_count : UInt32, @priority_class : UInt32, @priority : UInt32, @teb : UInt64, @stack : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR, @thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR, @backing_store : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_EX_LIST
    property number_of_threads : UInt32
    property threads : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_EX*
    def initialize(@number_of_threads : UInt32, @threads : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_EX*)
    end
  end

  @[Extern]
  struct MINIDUMP_EXCEPTION
    property exception_code : UInt32
    property exception_flags : UInt32
    property exception_record : UInt64
    property exception_address : UInt64
    property number_parameters : UInt32
    property __unused_alignment : UInt32
    property exception_information : UInt64[15]
    def initialize(@exception_code : UInt32, @exception_flags : UInt32, @exception_record : UInt64, @exception_address : UInt64, @number_parameters : UInt32, @__unused_alignment : UInt32, @exception_information : UInt64[15])
    end
  end

  @[Extern]
  struct MINIDUMP_EXCEPTION_STREAM
    property thread_id : UInt32
    property __alignment : UInt32
    property exception_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_EXCEPTION
    property thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    def initialize(@thread_id : UInt32, @__alignment : UInt32, @exception_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_EXCEPTION, @thread_context : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_MODULE
    property base_of_image : UInt64
    property size_of_image : UInt32
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property module_name_rva : UInt32
    property version_info : Win32cr::Storage::FileSystem::VS_FIXEDFILEINFO
    property cv_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    property misc_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    property reserved0 : UInt64
    property reserved1 : UInt64
    def initialize(@base_of_image : UInt64, @size_of_image : UInt32, @check_sum : UInt32, @time_date_stamp : UInt32, @module_name_rva : UInt32, @version_info : Win32cr::Storage::FileSystem::VS_FIXEDFILEINFO, @cv_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR, @misc_record : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR, @reserved0 : UInt64, @reserved1 : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_MODULE_LIST
    property number_of_modules : UInt32
    property modules : Win32cr::System::Diagnostics::Debug::MINIDUMP_MODULE*
    def initialize(@number_of_modules : UInt32, @modules : Win32cr::System::Diagnostics::Debug::MINIDUMP_MODULE*)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY_LIST
    property number_of_memory_ranges : UInt32
    property memory_ranges : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR*
    def initialize(@number_of_memory_ranges : UInt32, @memory_ranges : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR*)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY64_LIST
    property number_of_memory_ranges : UInt64
    property base_rva : UInt64
    property memory_ranges : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR64*
    def initialize(@number_of_memory_ranges : UInt64, @base_rva : UInt64, @memory_ranges : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_DESCRIPTOR64*)
    end
  end

  @[Extern]
  struct MINIDUMP_EXCEPTION_INFORMATION
    property thread_id : UInt32
    property exception_pointers : Win32cr::System::Diagnostics::Debug::EXCEPTION_POINTERS*
    property client_pointers : Win32cr::Foundation::BOOL
    def initialize(@thread_id : UInt32, @exception_pointers : Win32cr::System::Diagnostics::Debug::EXCEPTION_POINTERS*, @client_pointers : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct MINIDUMP_EXCEPTION_INFORMATION64
    property thread_id : UInt32
    property exception_record : UInt64
    property context_record : UInt64
    property client_pointers : Win32cr::Foundation::BOOL
    def initialize(@thread_id : UInt32, @exception_record : UInt64, @context_record : UInt64, @client_pointers : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct MINIDUMP_HANDLE_OBJECT_INFORMATION
    property next_info_rva : UInt32
    property info_type : UInt32
    property size_of_info : UInt32
    def initialize(@next_info_rva : UInt32, @info_type : UInt32, @size_of_info : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_HANDLE_DESCRIPTOR
    property handle : UInt64
    property type_name_rva : UInt32
    property object_name_rva : UInt32
    property attributes : UInt32
    property granted_access : UInt32
    property handle_count : UInt32
    property pointer_count : UInt32
    def initialize(@handle : UInt64, @type_name_rva : UInt32, @object_name_rva : UInt32, @attributes : UInt32, @granted_access : UInt32, @handle_count : UInt32, @pointer_count : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_HANDLE_DESCRIPTOR_2
    property handle : UInt64
    property type_name_rva : UInt32
    property object_name_rva : UInt32
    property attributes : UInt32
    property granted_access : UInt32
    property handle_count : UInt32
    property pointer_count : UInt32
    property object_info_rva : UInt32
    property reserved0 : UInt32
    def initialize(@handle : UInt64, @type_name_rva : UInt32, @object_name_rva : UInt32, @attributes : UInt32, @granted_access : UInt32, @handle_count : UInt32, @pointer_count : UInt32, @object_info_rva : UInt32, @reserved0 : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_HANDLE_DATA_STREAM
    property size_of_header : UInt32
    property size_of_descriptor : UInt32
    property number_of_descriptors : UInt32
    property reserved : UInt32
    def initialize(@size_of_header : UInt32, @size_of_descriptor : UInt32, @number_of_descriptors : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_HANDLE_OPERATION_LIST
    property size_of_header : UInt32
    property size_of_entry : UInt32
    property number_of_entries : UInt32
    property reserved : UInt32
    def initialize(@size_of_header : UInt32, @size_of_entry : UInt32, @number_of_entries : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
    property minimum_address : UInt64
    property maximum_address : UInt64
    property base_address : UInt64
    property entry_count : UInt32
    property size_of_align_pad : UInt32
    def initialize(@minimum_address : UInt64, @maximum_address : UInt64, @base_address : UInt64, @entry_count : UInt32, @size_of_align_pad : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_FUNCTION_TABLE_STREAM
    property size_of_header : UInt32
    property size_of_descriptor : UInt32
    property size_of_native_descriptor : UInt32
    property size_of_function_entry : UInt32
    property number_of_descriptors : UInt32
    property size_of_align_pad : UInt32
    def initialize(@size_of_header : UInt32, @size_of_descriptor : UInt32, @size_of_native_descriptor : UInt32, @size_of_function_entry : UInt32, @number_of_descriptors : UInt32, @size_of_align_pad : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_UNLOADED_MODULE
    property base_of_image : UInt64
    property size_of_image : UInt32
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property module_name_rva : UInt32
    def initialize(@base_of_image : UInt64, @size_of_image : UInt32, @check_sum : UInt32, @time_date_stamp : UInt32, @module_name_rva : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_UNLOADED_MODULE_LIST
    property size_of_header : UInt32
    property size_of_entry : UInt32
    property number_of_entries : UInt32
    def initialize(@size_of_header : UInt32, @size_of_entry : UInt32, @number_of_entries : UInt32)
    end
  end

  @[Extern]
  struct XSTATE_CONFIG_FEATURE_MSC_INFO
    property size_of_info : UInt32
    property context_size : UInt32
    property enabled_features : UInt64
    property features : Win32cr::System::Diagnostics::Debug::XSTATE_FEATURE[64]
    def initialize(@size_of_info : UInt32, @context_size : UInt32, @enabled_features : UInt64, @features : Win32cr::System::Diagnostics::Debug::XSTATE_FEATURE[64])
    end
  end

  @[Extern]
  struct MINIDUMP_MISC_INFO
    property size_of_info : UInt32
    property flags1 : Win32cr::System::Diagnostics::Debug::MINIDUMP_MISC_INFO_FLAGS
    property process_id : UInt32
    property process_create_time : UInt32
    property process_user_time : UInt32
    property process_kernel_time : UInt32
    def initialize(@size_of_info : UInt32, @flags1 : Win32cr::System::Diagnostics::Debug::MINIDUMP_MISC_INFO_FLAGS, @process_id : UInt32, @process_create_time : UInt32, @process_user_time : UInt32, @process_kernel_time : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_MISC_INFO_2
    property size_of_info : UInt32
    property flags1 : UInt32
    property process_id : UInt32
    property process_create_time : UInt32
    property process_user_time : UInt32
    property process_kernel_time : UInt32
    property processor_max_mhz : UInt32
    property processor_current_mhz : UInt32
    property processor_mhz_limit : UInt32
    property processor_max_idle_state : UInt32
    property processor_current_idle_state : UInt32
    def initialize(@size_of_info : UInt32, @flags1 : UInt32, @process_id : UInt32, @process_create_time : UInt32, @process_user_time : UInt32, @process_kernel_time : UInt32, @processor_max_mhz : UInt32, @processor_current_mhz : UInt32, @processor_mhz_limit : UInt32, @processor_max_idle_state : UInt32, @processor_current_idle_state : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_MISC_INFO_3
    property size_of_info : UInt32
    property flags1 : UInt32
    property process_id : UInt32
    property process_create_time : UInt32
    property process_user_time : UInt32
    property process_kernel_time : UInt32
    property processor_max_mhz : UInt32
    property processor_current_mhz : UInt32
    property processor_mhz_limit : UInt32
    property processor_max_idle_state : UInt32
    property processor_current_idle_state : UInt32
    property process_integrity_level : UInt32
    property process_execute_flags : UInt32
    property protected_process : UInt32
    property time_zone_id : UInt32
    property time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION
    def initialize(@size_of_info : UInt32, @flags1 : UInt32, @process_id : UInt32, @process_create_time : UInt32, @process_user_time : UInt32, @process_kernel_time : UInt32, @processor_max_mhz : UInt32, @processor_current_mhz : UInt32, @processor_mhz_limit : UInt32, @processor_max_idle_state : UInt32, @processor_current_idle_state : UInt32, @process_integrity_level : UInt32, @process_execute_flags : UInt32, @protected_process : UInt32, @time_zone_id : UInt32, @time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION)
    end
  end

  @[Extern]
  struct MINIDUMP_MISC_INFO_4
    property size_of_info : UInt32
    property flags1 : UInt32
    property process_id : UInt32
    property process_create_time : UInt32
    property process_user_time : UInt32
    property process_kernel_time : UInt32
    property processor_max_mhz : UInt32
    property processor_current_mhz : UInt32
    property processor_mhz_limit : UInt32
    property processor_max_idle_state : UInt32
    property processor_current_idle_state : UInt32
    property process_integrity_level : UInt32
    property process_execute_flags : UInt32
    property protected_process : UInt32
    property time_zone_id : UInt32
    property time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION
    property build_string : UInt16[260]
    property dbg_bld_str : UInt16[40]
    def initialize(@size_of_info : UInt32, @flags1 : UInt32, @process_id : UInt32, @process_create_time : UInt32, @process_user_time : UInt32, @process_kernel_time : UInt32, @processor_max_mhz : UInt32, @processor_current_mhz : UInt32, @processor_mhz_limit : UInt32, @processor_max_idle_state : UInt32, @processor_current_idle_state : UInt32, @process_integrity_level : UInt32, @process_execute_flags : UInt32, @protected_process : UInt32, @time_zone_id : UInt32, @time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION, @build_string : UInt16[260], @dbg_bld_str : UInt16[40])
    end
  end

  @[Extern]
  struct MINIDUMP_MISC_INFO_5
    property size_of_info : UInt32
    property flags1 : UInt32
    property process_id : UInt32
    property process_create_time : UInt32
    property process_user_time : UInt32
    property process_kernel_time : UInt32
    property processor_max_mhz : UInt32
    property processor_current_mhz : UInt32
    property processor_mhz_limit : UInt32
    property processor_max_idle_state : UInt32
    property processor_current_idle_state : UInt32
    property process_integrity_level : UInt32
    property process_execute_flags : UInt32
    property protected_process : UInt32
    property time_zone_id : UInt32
    property time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION
    property build_string : UInt16[260]
    property dbg_bld_str : UInt16[40]
    property x_state_data : Win32cr::System::Diagnostics::Debug::XSTATE_CONFIG_FEATURE_MSC_INFO
    property process_cookie : UInt32
    def initialize(@size_of_info : UInt32, @flags1 : UInt32, @process_id : UInt32, @process_create_time : UInt32, @process_user_time : UInt32, @process_kernel_time : UInt32, @processor_max_mhz : UInt32, @processor_current_mhz : UInt32, @processor_mhz_limit : UInt32, @processor_max_idle_state : UInt32, @processor_current_idle_state : UInt32, @process_integrity_level : UInt32, @process_execute_flags : UInt32, @protected_process : UInt32, @time_zone_id : UInt32, @time_zone : Win32cr::System::Time::TIME_ZONE_INFORMATION, @build_string : UInt16[260], @dbg_bld_str : UInt16[40], @x_state_data : Win32cr::System::Diagnostics::Debug::XSTATE_CONFIG_FEATURE_MSC_INFO, @process_cookie : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY_INFO
    property base_address : UInt64
    property allocation_base : UInt64
    property allocation_protect : UInt32
    property __alignment1 : UInt32
    property region_size : UInt64
    property state : Win32cr::System::Memory::VIRTUAL_ALLOCATION_TYPE
    property protect : UInt32
    property type__ : UInt32
    property __alignment2 : UInt32
    def initialize(@base_address : UInt64, @allocation_base : UInt64, @allocation_protect : UInt32, @__alignment1 : UInt32, @region_size : UInt64, @state : Win32cr::System::Memory::VIRTUAL_ALLOCATION_TYPE, @protect : UInt32, @type__ : UInt32, @__alignment2 : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_MEMORY_INFO_LIST
    property size_of_header : UInt32
    property size_of_entry : UInt32
    property number_of_entries : UInt64
    def initialize(@size_of_header : UInt32, @size_of_entry : UInt32, @number_of_entries : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_NAME
    property thread_id : UInt32
    property rva_of_thread_name : UInt64
    def initialize(@thread_id : UInt32, @rva_of_thread_name : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_NAME_LIST
    property number_of_thread_names : UInt32
    property thread_names : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_NAME*
    def initialize(@number_of_thread_names : UInt32, @thread_names : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_NAME*)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_INFO
    property thread_id : UInt32
    property dump_flags : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_INFO_DUMP_FLAGS
    property dump_error : UInt32
    property exit_status : UInt32
    property create_time : UInt64
    property exit_time : UInt64
    property kernel_time : UInt64
    property user_time : UInt64
    property start_address : UInt64
    property affinity : UInt64
    def initialize(@thread_id : UInt32, @dump_flags : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_INFO_DUMP_FLAGS, @dump_error : UInt32, @exit_status : UInt32, @create_time : UInt64, @exit_time : UInt64, @kernel_time : UInt64, @user_time : UInt64, @start_address : UInt64, @affinity : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_THREAD_INFO_LIST
    property size_of_header : UInt32
    property size_of_entry : UInt32
    property number_of_entries : UInt32
    def initialize(@size_of_header : UInt32, @size_of_entry : UInt32, @number_of_entries : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_TOKEN_INFO_HEADER
    property token_size : UInt32
    property token_id : UInt32
    property token_handle : UInt64
    def initialize(@token_size : UInt32, @token_id : UInt32, @token_handle : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_TOKEN_INFO_LIST
    property token_list_size : UInt32
    property token_list_entries : UInt32
    property list_header_size : UInt32
    property element_header_size : UInt32
    def initialize(@token_list_size : UInt32, @token_list_entries : UInt32, @list_header_size : UInt32, @element_header_size : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_BASIC_INFORMATION
    property timer_resolution : UInt32
    property page_size : UInt32
    property number_of_physical_pages : UInt32
    property lowest_physical_page_number : UInt32
    property highest_physical_page_number : UInt32
    property allocation_granularity : UInt32
    property minimum_user_mode_address : UInt64
    property maximum_user_mode_address : UInt64
    property active_processors_affinity_mask : UInt64
    property number_of_processors : UInt32
    def initialize(@timer_resolution : UInt32, @page_size : UInt32, @number_of_physical_pages : UInt32, @lowest_physical_page_number : UInt32, @highest_physical_page_number : UInt32, @allocation_granularity : UInt32, @minimum_user_mode_address : UInt64, @maximum_user_mode_address : UInt64, @active_processors_affinity_mask : UInt64, @number_of_processors : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    property current_size : UInt64
    property peak_size : UInt64
    property page_fault_count : UInt32
    property minimum_working_set : UInt64
    property maximum_working_set : UInt64
    property current_size_including_transition_in_pages : UInt64
    property peak_size_including_transition_in_pages : UInt64
    property transition_re_purpose_count : UInt32
    property flags : UInt32
    def initialize(@current_size : UInt64, @peak_size : UInt64, @page_fault_count : UInt32, @minimum_working_set : UInt64, @maximum_working_set : UInt64, @current_size_including_transition_in_pages : UInt64, @peak_size_including_transition_in_pages : UInt64, @transition_re_purpose_count : UInt32, @flags : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    property available_pages : UInt64
    property committed_pages : UInt64
    property commit_limit : UInt64
    property peak_commitment : UInt64
    def initialize(@available_pages : UInt64, @committed_pages : UInt64, @commit_limit : UInt64, @peak_commitment : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
    property idle_process_time : UInt64
    property io_read_transfer_count : UInt64
    property io_write_transfer_count : UInt64
    property io_other_transfer_count : UInt64
    property io_read_operation_count : UInt32
    property io_write_operation_count : UInt32
    property io_other_operation_count : UInt32
    property available_pages : UInt32
    property committed_pages : UInt32
    property commit_limit : UInt32
    property peak_commitment : UInt32
    property page_fault_count : UInt32
    property copy_on_write_count : UInt32
    property transition_count : UInt32
    property cache_transition_count : UInt32
    property demand_zero_count : UInt32
    property page_read_count : UInt32
    property page_read_io_count : UInt32
    property cache_read_count : UInt32
    property cache_io_count : UInt32
    property dirty_pages_write_count : UInt32
    property dirty_write_io_count : UInt32
    property mapped_pages_write_count : UInt32
    property mapped_write_io_count : UInt32
    property paged_pool_pages : UInt32
    property non_paged_pool_pages : UInt32
    property paged_pool_allocs : UInt32
    property paged_pool_frees : UInt32
    property non_paged_pool_allocs : UInt32
    property non_paged_pool_frees : UInt32
    property free_system_ptes : UInt32
    property resident_system_code_page : UInt32
    property total_system_driver_pages : UInt32
    property total_system_code_pages : UInt32
    property non_paged_pool_lookaside_hits : UInt32
    property paged_pool_lookaside_hits : UInt32
    property available_paged_pool_pages : UInt32
    property resident_system_cache_page : UInt32
    property resident_paged_pool_page : UInt32
    property resident_system_driver_page : UInt32
    property cc_fast_read_no_wait : UInt32
    property cc_fast_read_wait : UInt32
    property cc_fast_read_resource_miss : UInt32
    property cc_fast_read_not_possible : UInt32
    property cc_fast_mdl_read_no_wait : UInt32
    property cc_fast_mdl_read_wait : UInt32
    property cc_fast_mdl_read_resource_miss : UInt32
    property cc_fast_mdl_read_not_possible : UInt32
    property cc_map_data_no_wait : UInt32
    property cc_map_data_wait : UInt32
    property cc_map_data_no_wait_miss : UInt32
    property cc_map_data_wait_miss : UInt32
    property cc_pin_mapped_data_count : UInt32
    property cc_pin_read_no_wait : UInt32
    property cc_pin_read_wait : UInt32
    property cc_pin_read_no_wait_miss : UInt32
    property cc_pin_read_wait_miss : UInt32
    property cc_copy_read_no_wait : UInt32
    property cc_copy_read_wait : UInt32
    property cc_copy_read_no_wait_miss : UInt32
    property cc_copy_read_wait_miss : UInt32
    property cc_mdl_read_no_wait : UInt32
    property cc_mdl_read_wait : UInt32
    property cc_mdl_read_no_wait_miss : UInt32
    property cc_mdl_read_wait_miss : UInt32
    property cc_read_ahead_ios : UInt32
    property cc_lazy_write_ios : UInt32
    property cc_lazy_write_pages : UInt32
    property cc_data_flushes : UInt32
    property cc_data_pages : UInt32
    property context_switches : UInt32
    property first_level_tb_fills : UInt32
    property second_level_tb_fills : UInt32
    property system_calls : UInt32
    property cc_total_dirty_pages : UInt64
    property cc_dirty_page_threshold : UInt64
    property resident_available_pages : Int64
    property shared_committed_pages : UInt64
    def initialize(@idle_process_time : UInt64, @io_read_transfer_count : UInt64, @io_write_transfer_count : UInt64, @io_other_transfer_count : UInt64, @io_read_operation_count : UInt32, @io_write_operation_count : UInt32, @io_other_operation_count : UInt32, @available_pages : UInt32, @committed_pages : UInt32, @commit_limit : UInt32, @peak_commitment : UInt32, @page_fault_count : UInt32, @copy_on_write_count : UInt32, @transition_count : UInt32, @cache_transition_count : UInt32, @demand_zero_count : UInt32, @page_read_count : UInt32, @page_read_io_count : UInt32, @cache_read_count : UInt32, @cache_io_count : UInt32, @dirty_pages_write_count : UInt32, @dirty_write_io_count : UInt32, @mapped_pages_write_count : UInt32, @mapped_write_io_count : UInt32, @paged_pool_pages : UInt32, @non_paged_pool_pages : UInt32, @paged_pool_allocs : UInt32, @paged_pool_frees : UInt32, @non_paged_pool_allocs : UInt32, @non_paged_pool_frees : UInt32, @free_system_ptes : UInt32, @resident_system_code_page : UInt32, @total_system_driver_pages : UInt32, @total_system_code_pages : UInt32, @non_paged_pool_lookaside_hits : UInt32, @paged_pool_lookaside_hits : UInt32, @available_paged_pool_pages : UInt32, @resident_system_cache_page : UInt32, @resident_paged_pool_page : UInt32, @resident_system_driver_page : UInt32, @cc_fast_read_no_wait : UInt32, @cc_fast_read_wait : UInt32, @cc_fast_read_resource_miss : UInt32, @cc_fast_read_not_possible : UInt32, @cc_fast_mdl_read_no_wait : UInt32, @cc_fast_mdl_read_wait : UInt32, @cc_fast_mdl_read_resource_miss : UInt32, @cc_fast_mdl_read_not_possible : UInt32, @cc_map_data_no_wait : UInt32, @cc_map_data_wait : UInt32, @cc_map_data_no_wait_miss : UInt32, @cc_map_data_wait_miss : UInt32, @cc_pin_mapped_data_count : UInt32, @cc_pin_read_no_wait : UInt32, @cc_pin_read_wait : UInt32, @cc_pin_read_no_wait_miss : UInt32, @cc_pin_read_wait_miss : UInt32, @cc_copy_read_no_wait : UInt32, @cc_copy_read_wait : UInt32, @cc_copy_read_no_wait_miss : UInt32, @cc_copy_read_wait_miss : UInt32, @cc_mdl_read_no_wait : UInt32, @cc_mdl_read_wait : UInt32, @cc_mdl_read_no_wait_miss : UInt32, @cc_mdl_read_wait_miss : UInt32, @cc_read_ahead_ios : UInt32, @cc_lazy_write_ios : UInt32, @cc_lazy_write_pages : UInt32, @cc_data_flushes : UInt32, @cc_data_pages : UInt32, @context_switches : UInt32, @first_level_tb_fills : UInt32, @second_level_tb_fills : UInt32, @system_calls : UInt32, @cc_total_dirty_pages : UInt64, @cc_dirty_page_threshold : UInt64, @resident_available_pages : Int64, @shared_committed_pages : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_SYSTEM_MEMORY_INFO_1
    property revision : UInt16
    property flags : UInt16
    property basic_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_BASIC_INFORMATION
    property file_cache_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    property basic_perf_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    property perf_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
    def initialize(@revision : UInt16, @flags : UInt16, @basic_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_BASIC_INFORMATION, @file_cache_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_FILECACHE_INFORMATION, @basic_perf_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION, @perf_info : Win32cr::System::Diagnostics::Debug::MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION)
    end
  end

  @[Extern]
  struct MINIDUMP_PROCESS_VM_COUNTERS_1
    property revision : UInt16
    property page_fault_count : UInt32
    property peak_working_set_size : UInt64
    property working_set_size : UInt64
    property quota_peak_paged_pool_usage : UInt64
    property quota_paged_pool_usage : UInt64
    property quota_peak_non_paged_pool_usage : UInt64
    property quota_non_paged_pool_usage : UInt64
    property pagefile_usage : UInt64
    property peak_pagefile_usage : UInt64
    property private_usage : UInt64
    def initialize(@revision : UInt16, @page_fault_count : UInt32, @peak_working_set_size : UInt64, @working_set_size : UInt64, @quota_peak_paged_pool_usage : UInt64, @quota_paged_pool_usage : UInt64, @quota_peak_non_paged_pool_usage : UInt64, @quota_non_paged_pool_usage : UInt64, @pagefile_usage : UInt64, @peak_pagefile_usage : UInt64, @private_usage : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_PROCESS_VM_COUNTERS_2
    property revision : UInt16
    property flags : UInt16
    property page_fault_count : UInt32
    property peak_working_set_size : UInt64
    property working_set_size : UInt64
    property quota_peak_paged_pool_usage : UInt64
    property quota_paged_pool_usage : UInt64
    property quota_peak_non_paged_pool_usage : UInt64
    property quota_non_paged_pool_usage : UInt64
    property pagefile_usage : UInt64
    property peak_pagefile_usage : UInt64
    property peak_virtual_size : UInt64
    property virtual_size : UInt64
    property private_usage : UInt64
    property private_working_set_size : UInt64
    property shared_commit_usage : UInt64
    property job_shared_commit_usage : UInt64
    property job_private_commit_usage : UInt64
    property job_peak_private_commit_usage : UInt64
    property job_private_commit_limit : UInt64
    property job_total_commit_limit : UInt64
    def initialize(@revision : UInt16, @flags : UInt16, @page_fault_count : UInt32, @peak_working_set_size : UInt64, @working_set_size : UInt64, @quota_peak_paged_pool_usage : UInt64, @quota_paged_pool_usage : UInt64, @quota_peak_non_paged_pool_usage : UInt64, @quota_non_paged_pool_usage : UInt64, @pagefile_usage : UInt64, @peak_pagefile_usage : UInt64, @peak_virtual_size : UInt64, @virtual_size : UInt64, @private_usage : UInt64, @private_working_set_size : UInt64, @shared_commit_usage : UInt64, @job_shared_commit_usage : UInt64, @job_private_commit_usage : UInt64, @job_peak_private_commit_usage : UInt64, @job_private_commit_limit : UInt64, @job_total_commit_limit : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_USER_RECORD
    property type__ : UInt32
    property memory : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR
    def initialize(@type__ : UInt32, @memory : Win32cr::System::Diagnostics::Debug::MINIDUMP_LOCATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct MINIDUMP_USER_STREAM
    property type__ : UInt32
    property buffer_size : UInt32
    property buffer : Void*
    def initialize(@type__ : UInt32, @buffer_size : UInt32, @buffer : Void*)
    end
  end

  @[Extern]
  struct MINIDUMP_USER_STREAM_INFORMATION
    property user_stream_count : UInt32
    property user_stream_array : Win32cr::System::Diagnostics::Debug::MINIDUMP_USER_STREAM*
    def initialize(@user_stream_count : UInt32, @user_stream_array : Win32cr::System::Diagnostics::Debug::MINIDUMP_USER_STREAM*)
    end
  end

  {% if flag?(:x86_64) %}
  @[Extern]
  struct MINIDUMP_THREAD_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64)
    end
  end
  {% end %}

  {% if flag?(:x86_64) %}
  @[Extern]
  struct MINIDUMP_THREAD_EX_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    property backing_store_base : UInt64
    property backing_store_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64, @backing_store_base : UInt64, @backing_store_end : UInt64)
    end
  end
  {% end %}

  @[Extern]
  struct MINIDUMP_INCLUDE_THREAD_CALLBACK
    property thread_id : UInt32
    def initialize(@thread_id : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_MODULE_CALLBACK
    property full_path : Win32cr::Foundation::PWSTR
    property base_of_image : UInt64
    property size_of_image : UInt32
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property version_info : Win32cr::Storage::FileSystem::VS_FIXEDFILEINFO
    property cv_record : Void*
    property size_of_cv_record : UInt32
    property misc_record : Void*
    property size_of_misc_record : UInt32
    def initialize(@full_path : Win32cr::Foundation::PWSTR, @base_of_image : UInt64, @size_of_image : UInt32, @check_sum : UInt32, @time_date_stamp : UInt32, @version_info : Win32cr::Storage::FileSystem::VS_FIXEDFILEINFO, @cv_record : Void*, @size_of_cv_record : UInt32, @misc_record : Void*, @size_of_misc_record : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_INCLUDE_MODULE_CALLBACK
    property base_of_image : UInt64
    def initialize(@base_of_image : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_IO_CALLBACK
    property handle : Win32cr::Foundation::HANDLE
    property offset : UInt64
    property buffer : Void*
    property buffer_bytes : UInt32
    def initialize(@handle : Win32cr::Foundation::HANDLE, @offset : UInt64, @buffer : Void*, @buffer_bytes : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    property offset : UInt64
    property bytes : UInt32
    property failure_status : Win32cr::Foundation::HRESULT
    def initialize(@offset : UInt64, @bytes : UInt32, @failure_status : Win32cr::Foundation::HRESULT)
    end
  end

  @[Extern]
  struct MINIDUMP_VM_QUERY_CALLBACK
    property offset : UInt64
    def initialize(@offset : UInt64)
    end
  end

  @[Extern]
  struct MINIDUMP_VM_PRE_READ_CALLBACK
    property offset : UInt64
    property buffer : Void*
    property size : UInt32
    def initialize(@offset : UInt64, @buffer : Void*, @size : UInt32)
    end
  end

  @[Extern]
  struct MINIDUMP_VM_POST_READ_CALLBACK
    property offset : UInt64
    property buffer : Void*
    property size : UInt32
    property completed : UInt32
    property status : Win32cr::Foundation::HRESULT
    def initialize(@offset : UInt64, @buffer : Void*, @size : UInt32, @completed : UInt32, @status : Win32cr::Foundation::HRESULT)
    end
  end

  @[Extern]
  struct MINIDUMP_CALLBACK_INPUT
    property process_id : UInt32
    property process_handle : Win32cr::Foundation::HANDLE
    property callback_type : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property status : Win32cr::Foundation::HRESULT
    property thread : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_CALLBACK
    property thread_ex : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_EX_CALLBACK
    property module__ : Win32cr::System::Diagnostics::Debug::MINIDUMP_MODULE_CALLBACK
    property include_thread : Win32cr::System::Diagnostics::Debug::MINIDUMP_INCLUDE_THREAD_CALLBACK
    property include_module : Win32cr::System::Diagnostics::Debug::MINIDUMP_INCLUDE_MODULE_CALLBACK
    property io : Win32cr::System::Diagnostics::Debug::MINIDUMP_IO_CALLBACK
    property read_memory_failure : Win32cr::System::Diagnostics::Debug::MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    property secondary_flags : UInt32
    property vm_query : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_QUERY_CALLBACK
    property vm_pre_read : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_PRE_READ_CALLBACK
    property vm_post_read : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_POST_READ_CALLBACK
    def initialize(@status : Win32cr::Foundation::HRESULT, @thread : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_CALLBACK, @thread_ex : Win32cr::System::Diagnostics::Debug::MINIDUMP_THREAD_EX_CALLBACK, @module__ : Win32cr::System::Diagnostics::Debug::MINIDUMP_MODULE_CALLBACK, @include_thread : Win32cr::System::Diagnostics::Debug::MINIDUMP_INCLUDE_THREAD_CALLBACK, @include_module : Win32cr::System::Diagnostics::Debug::MINIDUMP_INCLUDE_MODULE_CALLBACK, @io : Win32cr::System::Diagnostics::Debug::MINIDUMP_IO_CALLBACK, @read_memory_failure : Win32cr::System::Diagnostics::Debug::MINIDUMP_READ_MEMORY_FAILURE_CALLBACK, @secondary_flags : UInt32, @vm_query : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_QUERY_CALLBACK, @vm_pre_read : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_PRE_READ_CALLBACK, @vm_post_read : Win32cr::System::Diagnostics::Debug::MINIDUMP_VM_POST_READ_CALLBACK)
    end
    end

    def initialize(@process_id : UInt32, @process_handle : Win32cr::Foundation::HANDLE, @callback_type : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct MINIDUMP_CALLBACK_OUTPUT
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property module_write_flags : UInt32
    property thread_write_flags : UInt32
    property secondary_flags : UInt32
    property anonymous1 : Anonymous1_e__Struct_
    property anonymous2 : Anonymous2_e__Struct_
    property handle : Win32cr::Foundation::HANDLE
    property anonymous3 : Anonymous3_e__Struct_
    property anonymous4 : Anonymous4_e__Struct_
    property anonymous5 : Anonymous5_e__Struct_
    property status : Win32cr::Foundation::HRESULT

      # Nested Type Anonymous4_e__Struct_
      @[Extern]
      struct Anonymous4_e__Struct_
    property vm_query_status : Win32cr::Foundation::HRESULT
    property vm_query_result : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_INFO
    def initialize(@vm_query_status : Win32cr::Foundation::HRESULT, @vm_query_result : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_INFO)
    end
      end


      # Nested Type Anonymous2_e__Struct_
      @[Extern]
      struct Anonymous2_e__Struct_
    property check_cancel : Win32cr::Foundation::BOOL
    property cancel : Win32cr::Foundation::BOOL
    def initialize(@check_cancel : Win32cr::Foundation::BOOL, @cancel : Win32cr::Foundation::BOOL)
    end
      end


      # Nested Type Anonymous5_e__Struct_
      @[Extern]
      struct Anonymous5_e__Struct_
    property vm_read_status : Win32cr::Foundation::HRESULT
    property vm_read_bytes_completed : UInt32
    def initialize(@vm_read_status : Win32cr::Foundation::HRESULT, @vm_read_bytes_completed : UInt32)
    end
      end


      # Nested Type Anonymous1_e__Struct_
      @[Extern]
      struct Anonymous1_e__Struct_
    property memory_base : UInt64
    property memory_size : UInt32
    def initialize(@memory_base : UInt64, @memory_size : UInt32)
    end
      end


      # Nested Type Anonymous3_e__Struct_
      @[Extern]
      struct Anonymous3_e__Struct_
    property vm_region : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_INFO
    property continue : Win32cr::Foundation::BOOL
    def initialize(@vm_region : Win32cr::System::Diagnostics::Debug::MINIDUMP_MEMORY_INFO, @continue : Win32cr::Foundation::BOOL)
    end
      end

    def initialize(@module_write_flags : UInt32, @thread_write_flags : UInt32, @secondary_flags : UInt32, @anonymous1 : Anonymous1_e__Struct_, @anonymous2 : Anonymous2_e__Struct_, @handle : Win32cr::Foundation::HANDLE, @anonymous3 : Anonymous3_e__Struct_, @anonymous4 : Anonymous4_e__Struct_, @anonymous5 : Anonymous5_e__Struct_, @status : Win32cr::Foundation::HRESULT)
    end
    end

    def initialize(@anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct MINIDUMP_CALLBACK_INFORMATION
    property callback_routine : Win32cr::System::Diagnostics::Debug::MINIDUMP_CALLBACK_ROUTINE
    property callback_param : Void*
    def initialize(@callback_routine : Win32cr::System::Diagnostics::Debug::MINIDUMP_CALLBACK_ROUTINE, @callback_param : Void*)
    end
  end

  @[Extern]
  struct DebugPropertyInfo
    property m_dwValidFields : UInt32
    property m_bstrName : Win32cr::Foundation::BSTR
    property m_bstrType : Win32cr::Foundation::BSTR
    property m_bstrValue : Win32cr::Foundation::BSTR
    property m_bstrFullName : Win32cr::Foundation::BSTR
    property m_dwAttrib : UInt32
    property m_pDebugProp : Void*
    def initialize(@m_dwValidFields : UInt32, @m_bstrName : Win32cr::Foundation::BSTR, @m_bstrType : Win32cr::Foundation::BSTR, @m_bstrValue : Win32cr::Foundation::BSTR, @m_bstrFullName : Win32cr::Foundation::BSTR, @m_dwAttrib : UInt32, @m_pDebugProp : Void*)
    end
  end

  @[Extern]
  struct ExtendedDebugPropertyInfo
    property dwValidFields : UInt32
    property pszName : Win32cr::Foundation::PWSTR
    property pszType : Win32cr::Foundation::PWSTR
    property pszValue : Win32cr::Foundation::PWSTR
    property pszFullName : Win32cr::Foundation::PWSTR
    property dwAttrib : UInt32
    property pDebugProp : Void*
    property nDISPID : UInt32
    property nType : UInt32
    property varValue : Win32cr::System::Com::VARIANT
    property plbValue : Void*
    property pDebugExtProp : Void*
    def initialize(@dwValidFields : UInt32, @pszName : Win32cr::Foundation::PWSTR, @pszType : Win32cr::Foundation::PWSTR, @pszValue : Win32cr::Foundation::PWSTR, @pszFullName : Win32cr::Foundation::PWSTR, @dwAttrib : UInt32, @pDebugProp : Void*, @nDISPID : UInt32, @nType : UInt32, @varValue : Win32cr::System::Com::VARIANT, @plbValue : Void*, @pDebugExtProp : Void*)
    end
  end

  @[Extern]
  struct DebugStackFrameDescriptor
    property pdsf : Void*
    property dwMin : UInt32
    property dwLim : UInt32
    property fFinal : Win32cr::Foundation::BOOL
    property punkFinal : Void*
    def initialize(@pdsf : Void*, @dwMin : UInt32, @dwLim : UInt32, @fFinal : Win32cr::Foundation::BOOL, @punkFinal : Void*)
    end
  end

  @[Extern]
  struct DebugStackFrameDescriptor64
    property pdsf : Void*
    property dwMin : UInt64
    property dwLim : UInt64
    property fFinal : Win32cr::Foundation::BOOL
    property punkFinal : Void*
    def initialize(@pdsf : Void*, @dwMin : UInt64, @dwLim : UInt64, @fFinal : Win32cr::Foundation::BOOL, @punkFinal : Void*)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_OBJECT_SCOPE_LIST
    property count : UInt32
    property scopes : LibC::UIntPtrT*
    def initialize(@count : UInt32, @scopes : LibC::UIntPtrT*)
    end
  end

  @[Extern]
  struct PROFILER_PROPERTY_TYPE_SUBSTRING_INFO
    property length : UInt32
    property value : Win32cr::Foundation::PWSTR
    def initialize(@length : UInt32, @value : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_OBJECT_RELATIONSHIP
    property relationshipId : UInt32
    property relationshipInfo : Win32cr::System::Diagnostics::Debug::PROFILER_RELATIONSHIP_INFO
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property numberValue : Float64
    property stringValue : Win32cr::Foundation::PWSTR
    property bstrValue : Win32cr::Foundation::BSTR
    property objectId : LibC::UIntPtrT
    property externalObjectAddress : Void*
    property subString : Win32cr::System::Diagnostics::Debug::PROFILER_PROPERTY_TYPE_SUBSTRING_INFO*
    def initialize(@numberValue : Float64, @stringValue : Win32cr::Foundation::PWSTR, @bstrValue : Win32cr::Foundation::BSTR, @objectId : LibC::UIntPtrT, @externalObjectAddress : Void*, @subString : Win32cr::System::Diagnostics::Debug::PROFILER_PROPERTY_TYPE_SUBSTRING_INFO*)
    end
    end

    def initialize(@relationshipId : UInt32, @relationshipInfo : Win32cr::System::Diagnostics::Debug::PROFILER_RELATIONSHIP_INFO, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST
    property count : UInt32
    property elements : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP*
    def initialize(@count : UInt32, @elements : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP*)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO
    property infoType : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property prototype : LibC::UIntPtrT
    property functionName : Win32cr::Foundation::PWSTR
    property elementAttributesSize : UInt32
    property elementTextChildrenSize : UInt32
    property scopeList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_SCOPE_LIST*
    property internalProperty : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP*
    property namePropertyList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property indexPropertyList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property relationshipList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property eventList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property weakMapCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property mapCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    property setCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    def initialize(@prototype : LibC::UIntPtrT, @functionName : Win32cr::Foundation::PWSTR, @elementAttributesSize : UInt32, @elementTextChildrenSize : UInt32, @scopeList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_SCOPE_LIST*, @internalProperty : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP*, @namePropertyList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @indexPropertyList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @relationshipList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @eventList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @weakMapCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @mapCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*, @setCollectionList : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*)
    end
    end

    def initialize(@infoType : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_OBJECT
    property size : UInt32
    property anonymous : Anonymous_e__Union_
    property typeNameId : UInt32
    property flags : UInt32
    property unused : UInt16
    property optionalInfoCount : UInt16

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property objectId : LibC::UIntPtrT
    property externalObjectAddress : Void*
    def initialize(@objectId : LibC::UIntPtrT, @externalObjectAddress : Void*)
    end
    end

    def initialize(@size : UInt32, @anonymous : Anonymous_e__Union_, @typeNameId : UInt32, @flags : UInt32, @unused : UInt16, @optionalInfoCount : UInt16)
    end
  end

  @[Extern]
  struct PROFILER_HEAP_SUMMARY
    property version : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY_VERSION
    property totalHeapSize : UInt32
    def initialize(@version : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY_VERSION, @totalHeapSize : UInt32)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct LOADED_IMAGE
    property module_name : Win32cr::Foundation::PSTR
    property hFile : Win32cr::Foundation::HANDLE
    property mapped_address : UInt8*
    property file_header : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*
    property last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
    property number_of_sections : UInt32
    property sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
    property characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS2
    property fSystemImage : Win32cr::Foundation::BOOLEAN
    property fDOSImage : Win32cr::Foundation::BOOLEAN
    property fReadOnly : Win32cr::Foundation::BOOLEAN
    property version : UInt8
    property links : Win32cr::System::Kernel::LIST_ENTRY
    property size_of_image : UInt32
    def initialize(@module_name : Win32cr::Foundation::PSTR, @hFile : Win32cr::Foundation::HANDLE, @mapped_address : UInt8*, @file_header : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*, @last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*, @number_of_sections : UInt32, @sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*, @characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS2, @fSystemImage : Win32cr::Foundation::BOOLEAN, @fDOSImage : Win32cr::Foundation::BOOLEAN, @fReadOnly : Win32cr::Foundation::BOOLEAN, @version : UInt8, @links : Win32cr::System::Kernel::LIST_ENTRY, @size_of_image : UInt32)
    end
  end
  {% end %}

  @[Extern]
  struct MODLOAD_DATA
    property ssize : UInt32
    property ssig : Win32cr::System::Diagnostics::Debug::MODLOAD_DATA_TYPE
    property data : Void*
    property size : UInt32
    property flags : UInt32
    def initialize(@ssize : UInt32, @ssig : Win32cr::System::Diagnostics::Debug::MODLOAD_DATA_TYPE, @data : Void*, @size : UInt32, @flags : UInt32)
    end
  end

  @[Extern]
  struct MODLOAD_CVMISC
    property oCV : UInt32
    property cCV : LibC::UIntPtrT
    property oMisc : UInt32
    property cMisc : LibC::UIntPtrT
    property dtImage : UInt32
    property cImage : UInt32
    def initialize(@oCV : UInt32, @cCV : LibC::UIntPtrT, @oMisc : UInt32, @cMisc : LibC::UIntPtrT, @dtImage : UInt32, @cImage : UInt32)
    end
  end

  @[Extern]
  struct MODLOAD_PDBGUID_PDBAGE
    property pdb_guid : LibC::GUID
    property pdb_age : UInt32
    def initialize(@pdb_guid : LibC::GUID, @pdb_age : UInt32)
    end
  end

  @[Extern]
  struct ADDRESS64
    property offset : UInt64
    property segment : UInt16
    property mode : Win32cr::System::Diagnostics::Debug::ADDRESS_MODE
    def initialize(@offset : UInt64, @segment : UInt16, @mode : Win32cr::System::Diagnostics::Debug::ADDRESS_MODE)
    end
  end

  @[Extern]
  struct KDHELP64
    property thread : UInt64
    property th_callback_stack : UInt32
    property th_callback_b_store : UInt32
    property next_callback : UInt32
    property frame_pointer : UInt32
    property ki_call_user_mode : UInt64
    property ke_user_callback_dispatcher : UInt64
    property system_range_start : UInt64
    property ki_user_exception_dispatcher : UInt64
    property stack_base : UInt64
    property stack_limit : UInt64
    property build_version : UInt32
    property retpoline_stub_function_table_size : UInt32
    property retpoline_stub_function_table : UInt64
    property retpoline_stub_offset : UInt32
    property retpoline_stub_size : UInt32
    property reserved0 : UInt64[2]
    def initialize(@thread : UInt64, @th_callback_stack : UInt32, @th_callback_b_store : UInt32, @next_callback : UInt32, @frame_pointer : UInt32, @ki_call_user_mode : UInt64, @ke_user_callback_dispatcher : UInt64, @system_range_start : UInt64, @ki_user_exception_dispatcher : UInt64, @stack_base : UInt64, @stack_limit : UInt64, @build_version : UInt32, @retpoline_stub_function_table_size : UInt32, @retpoline_stub_function_table : UInt64, @retpoline_stub_offset : UInt32, @retpoline_stub_size : UInt32, @reserved0 : UInt64[2])
    end
  end

  @[Extern]
  struct STACKFRAME64
    property addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property func_table_entry : Void*
    property params : UInt64[4]
    property far : Win32cr::Foundation::BOOL
    property virtual : Win32cr::Foundation::BOOL
    property reserved : UInt64[3]
    property kd_help : Win32cr::System::Diagnostics::Debug::KDHELP64
    def initialize(@addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS64, @func_table_entry : Void*, @params : UInt64[4], @far : Win32cr::Foundation::BOOL, @virtual : Win32cr::Foundation::BOOL, @reserved : UInt64[3], @kd_help : Win32cr::System::Diagnostics::Debug::KDHELP64)
    end
  end

  @[Extern]
  struct STACKFRAME_EX
    property addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS64
    property func_table_entry : Void*
    property params : UInt64[4]
    property far : Win32cr::Foundation::BOOL
    property virtual : Win32cr::Foundation::BOOL
    property reserved : UInt64[3]
    property kd_help : Win32cr::System::Diagnostics::Debug::KDHELP64
    property stack_frame_size : UInt32
    property inline_frame_context : UInt32
    def initialize(@addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS64, @addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS64, @func_table_entry : Void*, @params : UInt64[4], @far : Win32cr::Foundation::BOOL, @virtual : Win32cr::Foundation::BOOL, @reserved : UInt64[3], @kd_help : Win32cr::System::Diagnostics::Debug::KDHELP64, @stack_frame_size : UInt32, @inline_frame_context : UInt32)
    end
  end

  @[Extern]
  struct API_VERSION
    property major_version : UInt16
    property minor_version : UInt16
    property revision : UInt16
    property reserved : UInt16
    def initialize(@major_version : UInt16, @minor_version : UInt16, @revision : UInt16, @reserved : UInt16)
    end
  end

  @[Extern]
  struct IMAGEHLP_SYMBOL64
    property size_of_struct : UInt32
    property address : UInt64
    property size : UInt32
    property flags : UInt32
    property max_name_length : UInt32
    property name : Win32cr::Foundation::CHAR*
    def initialize(@size_of_struct : UInt32, @address : UInt64, @size : UInt32, @flags : UInt32, @max_name_length : UInt32, @name : Win32cr::Foundation::CHAR*)
    end
  end

  @[Extern]
  struct IMAGEHLP_SYMBOL64_PACKAGE
    property sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64
    property name : Win32cr::Foundation::CHAR[2001]
    def initialize(@sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64, @name : Win32cr::Foundation::CHAR[2001])
    end
  end

  @[Extern]
  struct IMAGEHLP_SYMBOLW64
    property size_of_struct : UInt32
    property address : UInt64
    property size : UInt32
    property flags : UInt32
    property max_name_length : UInt32
    property name : UInt16*
    def initialize(@size_of_struct : UInt32, @address : UInt64, @size : UInt32, @flags : UInt32, @max_name_length : UInt32, @name : UInt16*)
    end
  end

  @[Extern]
  struct IMAGEHLP_SYMBOLW64_PACKAGE
    property sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOLW64
    property name : UInt16[2001]
    def initialize(@sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOLW64, @name : UInt16[2001])
    end
  end

  @[Extern]
  struct IMAGEHLP_MODULE64
    property size_of_struct : UInt32
    property base_of_image : UInt64
    property image_size : UInt32
    property time_date_stamp : UInt32
    property check_sum : UInt32
    property num_syms : UInt32
    property sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE
    property module_name : Win32cr::Foundation::CHAR[32]
    property image_name : Win32cr::Foundation::CHAR[256]
    property loaded_image_name : Win32cr::Foundation::CHAR[256]
    property loaded_pdb_name : Win32cr::Foundation::CHAR[256]
    property cv_sig : UInt32
    property cv_data : Win32cr::Foundation::CHAR[780]
    property pdb_sig : UInt32
    property pdb_sig70 : LibC::GUID
    property pdb_age : UInt32
    property pdb_unmatched : Win32cr::Foundation::BOOL
    property dbg_unmatched : Win32cr::Foundation::BOOL
    property line_numbers : Win32cr::Foundation::BOOL
    property global_symbols : Win32cr::Foundation::BOOL
    property type_info : Win32cr::Foundation::BOOL
    property source_indexed : Win32cr::Foundation::BOOL
    property publics : Win32cr::Foundation::BOOL
    property machine_type : UInt32
    property reserved : UInt32
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt64, @image_size : UInt32, @time_date_stamp : UInt32, @check_sum : UInt32, @num_syms : UInt32, @sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE, @module_name : Win32cr::Foundation::CHAR[32], @image_name : Win32cr::Foundation::CHAR[256], @loaded_image_name : Win32cr::Foundation::CHAR[256], @loaded_pdb_name : Win32cr::Foundation::CHAR[256], @cv_sig : UInt32, @cv_data : Win32cr::Foundation::CHAR[780], @pdb_sig : UInt32, @pdb_sig70 : LibC::GUID, @pdb_age : UInt32, @pdb_unmatched : Win32cr::Foundation::BOOL, @dbg_unmatched : Win32cr::Foundation::BOOL, @line_numbers : Win32cr::Foundation::BOOL, @global_symbols : Win32cr::Foundation::BOOL, @type_info : Win32cr::Foundation::BOOL, @source_indexed : Win32cr::Foundation::BOOL, @publics : Win32cr::Foundation::BOOL, @machine_type : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_MODULE64_EX
    property module__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULE64
    property region_flags : UInt32
    def initialize(@module__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULE64, @region_flags : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_MODULEW64
    property size_of_struct : UInt32
    property base_of_image : UInt64
    property image_size : UInt32
    property time_date_stamp : UInt32
    property check_sum : UInt32
    property num_syms : UInt32
    property sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE
    property module_name : UInt16[32]
    property image_name : UInt16[256]
    property loaded_image_name : UInt16[256]
    property loaded_pdb_name : UInt16[256]
    property cv_sig : UInt32
    property cv_data : UInt16[780]
    property pdb_sig : UInt32
    property pdb_sig70 : LibC::GUID
    property pdb_age : UInt32
    property pdb_unmatched : Win32cr::Foundation::BOOL
    property dbg_unmatched : Win32cr::Foundation::BOOL
    property line_numbers : Win32cr::Foundation::BOOL
    property global_symbols : Win32cr::Foundation::BOOL
    property type_info : Win32cr::Foundation::BOOL
    property source_indexed : Win32cr::Foundation::BOOL
    property publics : Win32cr::Foundation::BOOL
    property machine_type : UInt32
    property reserved : UInt32
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt64, @image_size : UInt32, @time_date_stamp : UInt32, @check_sum : UInt32, @num_syms : UInt32, @sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE, @module_name : UInt16[32], @image_name : UInt16[256], @loaded_image_name : UInt16[256], @loaded_pdb_name : UInt16[256], @cv_sig : UInt32, @cv_data : UInt16[780], @pdb_sig : UInt32, @pdb_sig70 : LibC::GUID, @pdb_age : UInt32, @pdb_unmatched : Win32cr::Foundation::BOOL, @dbg_unmatched : Win32cr::Foundation::BOOL, @line_numbers : Win32cr::Foundation::BOOL, @global_symbols : Win32cr::Foundation::BOOL, @type_info : Win32cr::Foundation::BOOL, @source_indexed : Win32cr::Foundation::BOOL, @publics : Win32cr::Foundation::BOOL, @machine_type : UInt32, @reserved : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_MODULEW64_EX
    property module__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULEW64
    property region_flags : UInt32
    def initialize(@module__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULEW64, @region_flags : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_LINE64
    property size_of_struct : UInt32
    property key : Void*
    property line_number : UInt32
    property file_name : Win32cr::Foundation::PSTR
    property address : UInt64
    def initialize(@size_of_struct : UInt32, @key : Void*, @line_number : UInt32, @file_name : Win32cr::Foundation::PSTR, @address : UInt64)
    end
  end

  @[Extern]
  struct IMAGEHLP_LINEW64
    property size_of_struct : UInt32
    property key : Void*
    property line_number : UInt32
    property file_name : Win32cr::Foundation::PWSTR
    property address : UInt64
    def initialize(@size_of_struct : UInt32, @key : Void*, @line_number : UInt32, @file_name : Win32cr::Foundation::PWSTR, @address : UInt64)
    end
  end

  @[Extern]
  struct SOURCEFILE
    property mod_base : UInt64
    property file_name : Win32cr::Foundation::PSTR
    def initialize(@mod_base : UInt64, @file_name : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct SOURCEFILEW
    property mod_base : UInt64
    property file_name : Win32cr::Foundation::PWSTR
    def initialize(@mod_base : UInt64, @file_name : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct IMAGEHLP_CBA_READ_MEMORY
    property addr : UInt64
    property buf : Void*
    property bytes : UInt32
    property bytesread : UInt32*
    def initialize(@addr : UInt64, @buf : Void*, @bytes : UInt32, @bytesread : UInt32*)
    end
  end

  @[Extern]
  struct IMAGEHLP_CBA_EVENT
    property severity : Win32cr::System::Diagnostics::Debug::IMAGEHLP_CBA_EVENT_SEVERITY
    property code : UInt32
    property desc : Win32cr::Foundation::PSTR
    property object : Void*
    def initialize(@severity : Win32cr::System::Diagnostics::Debug::IMAGEHLP_CBA_EVENT_SEVERITY, @code : UInt32, @desc : Win32cr::Foundation::PSTR, @object : Void*)
    end
  end

  @[Extern]
  struct IMAGEHLP_CBA_EVENTW
    property severity : Win32cr::System::Diagnostics::Debug::IMAGEHLP_CBA_EVENT_SEVERITY
    property code : UInt32
    property desc : Win32cr::Foundation::PWSTR
    property object : Void*
    def initialize(@severity : Win32cr::System::Diagnostics::Debug::IMAGEHLP_CBA_EVENT_SEVERITY, @code : UInt32, @desc : Win32cr::Foundation::PWSTR, @object : Void*)
    end
  end

  @[Extern]
  struct IMAGEHLP_DEFERRED_SYMBOL_LOAD64
    property size_of_struct : UInt32
    property base_of_image : UInt64
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property file_name : Win32cr::Foundation::CHAR[260]
    property reparse : Win32cr::Foundation::BOOLEAN
    property hFile : Win32cr::Foundation::HANDLE
    property flags : UInt32
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt64, @check_sum : UInt32, @time_date_stamp : UInt32, @file_name : Win32cr::Foundation::CHAR[260], @reparse : Win32cr::Foundation::BOOLEAN, @hFile : Win32cr::Foundation::HANDLE, @flags : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_DEFERRED_SYMBOL_LOADW64
    property size_of_struct : UInt32
    property base_of_image : UInt64
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property file_name : UInt16[261]
    property reparse : Win32cr::Foundation::BOOLEAN
    property hFile : Win32cr::Foundation::HANDLE
    property flags : UInt32
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt64, @check_sum : UInt32, @time_date_stamp : UInt32, @file_name : UInt16[261], @reparse : Win32cr::Foundation::BOOLEAN, @hFile : Win32cr::Foundation::HANDLE, @flags : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_DUPLICATE_SYMBOL64
    property size_of_struct : UInt32
    property number_of_dups : UInt32
    property symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*
    property selected_symbol : UInt32
    def initialize(@size_of_struct : UInt32, @number_of_dups : UInt32, @symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*, @selected_symbol : UInt32)
    end
  end

  @[Extern]
  struct IMAGEHLP_JIT_SYMBOL_MAP_
    property size_of_struct : UInt32
    property address : UInt64
    property base_of_image : UInt64
    def initialize(@size_of_struct : UInt32, @address : UInt64, @base_of_image : UInt64)
    end
  end

  @[Extern]
  struct OMAP
    property rva : UInt32
    property rvaTo : UInt32
    def initialize(@rva : UInt32, @rvaTo : UInt32)
    end
  end

  @[Extern]
  struct SRCCODEINFO
    property size_of_struct : UInt32
    property key : Void*
    property mod_base : UInt64
    property obj : Win32cr::Foundation::CHAR[261]
    property file_name : Win32cr::Foundation::CHAR[261]
    property line_number : UInt32
    property address : UInt64
    def initialize(@size_of_struct : UInt32, @key : Void*, @mod_base : UInt64, @obj : Win32cr::Foundation::CHAR[261], @file_name : Win32cr::Foundation::CHAR[261], @line_number : UInt32, @address : UInt64)
    end
  end

  @[Extern]
  struct SRCCODEINFOW
    property size_of_struct : UInt32
    property key : Void*
    property mod_base : UInt64
    property obj : UInt16[261]
    property file_name : UInt16[261]
    property line_number : UInt32
    property address : UInt64
    def initialize(@size_of_struct : UInt32, @key : Void*, @mod_base : UInt64, @obj : UInt16[261], @file_name : UInt16[261], @line_number : UInt32, @address : UInt64)
    end
  end

  @[Extern]
  struct IMAGEHLP_SYMBOL_SRC
    property sizeofstruct : UInt32
    property type__ : UInt32
    property file : Win32cr::Foundation::CHAR[260]
    def initialize(@sizeofstruct : UInt32, @type__ : UInt32, @file : Win32cr::Foundation::CHAR[260])
    end
  end

  @[Extern]
  struct MODULE_TYPE_INFO
    property dataLength : UInt16
    property leaf : UInt16
    property data : UInt8*
    def initialize(@dataLength : UInt16, @leaf : UInt16, @data : UInt8*)
    end
  end

  @[Extern]
  struct SYMBOL_INFO
    property size_of_struct : UInt32
    property type_index : UInt32
    property reserved : UInt64[2]
    property index : UInt32
    property size : UInt32
    property mod_base : UInt64
    property flags : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_FLAGS
    property value : UInt64
    property address : UInt64
    property register : UInt32
    property scope : UInt32
    property tag : UInt32
    property name_len : UInt32
    property max_name_len : UInt32
    property name : Win32cr::Foundation::CHAR*
    def initialize(@size_of_struct : UInt32, @type_index : UInt32, @reserved : UInt64[2], @index : UInt32, @size : UInt32, @mod_base : UInt64, @flags : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_FLAGS, @value : UInt64, @address : UInt64, @register : UInt32, @scope : UInt32, @tag : UInt32, @name_len : UInt32, @max_name_len : UInt32, @name : Win32cr::Foundation::CHAR*)
    end
  end

  @[Extern]
  struct SYMBOL_INFO_PACKAGE
    property si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO
    property name : Win32cr::Foundation::CHAR[2001]
    def initialize(@si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO, @name : Win32cr::Foundation::CHAR[2001])
    end
  end

  @[Extern]
  struct SYMBOL_INFOW
    property size_of_struct : UInt32
    property type_index : UInt32
    property reserved : UInt64[2]
    property index : UInt32
    property size : UInt32
    property mod_base : UInt64
    property flags : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_FLAGS
    property value : UInt64
    property address : UInt64
    property register : UInt32
    property scope : UInt32
    property tag : UInt32
    property name_len : UInt32
    property max_name_len : UInt32
    property name : UInt16*
    def initialize(@size_of_struct : UInt32, @type_index : UInt32, @reserved : UInt64[2], @index : UInt32, @size : UInt32, @mod_base : UInt64, @flags : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_FLAGS, @value : UInt64, @address : UInt64, @register : UInt32, @scope : UInt32, @tag : UInt32, @name_len : UInt32, @max_name_len : UInt32, @name : UInt16*)
    end
  end

  @[Extern]
  struct SYMBOL_INFO_PACKAGEW
    property si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW
    property name : UInt16[2001]
    def initialize(@si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW, @name : UInt16[2001])
    end
  end

  @[Extern]
  struct IMAGEHLP_STACK_FRAME
    property instruction_offset : UInt64
    property return_offset : UInt64
    property frame_offset : UInt64
    property stack_offset : UInt64
    property backing_store_offset : UInt64
    property func_table_entry : UInt64
    property params : UInt64[4]
    property reserved : UInt64[5]
    property virtual : Win32cr::Foundation::BOOL
    property reserved2 : UInt32
    def initialize(@instruction_offset : UInt64, @return_offset : UInt64, @frame_offset : UInt64, @stack_offset : UInt64, @backing_store_offset : UInt64, @func_table_entry : UInt64, @params : UInt64[4], @reserved : UInt64[5], @virtual : Win32cr::Foundation::BOOL, @reserved2 : UInt32)
    end
  end

  @[Extern]
  struct TI_FINDCHILDREN_PARAMS
    property count : UInt32
    property start : UInt32
    property child_id : UInt32*
    def initialize(@count : UInt32, @start : UInt32, @child_id : UInt32*)
    end
  end

  @[Extern]
  struct IMAGEHLP_GET_TYPE_INFO_PARAMS
    property size_of_struct : UInt32
    property flags : Win32cr::System::Diagnostics::Debug::IMAGEHLP_GET_TYPE_INFO_FLAGS
    property num_ids : UInt32
    property type_ids : UInt32*
    property tag_filter : UInt64
    property num_reqs : UInt32
    property req_kinds : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL_TYPE_INFO*
    property req_offsets : LibC::UIntPtrT*
    property req_sizes : UInt32*
    property req_stride : LibC::UIntPtrT
    property buffer_size : LibC::UIntPtrT
    property buffer : Void*
    property entries_matched : UInt32
    property entries_filled : UInt32
    property tags_found : UInt64
    property all_reqs_valid : UInt64
    property num_reqs_valid : UInt32
    property reqs_valid : UInt64*
    def initialize(@size_of_struct : UInt32, @flags : Win32cr::System::Diagnostics::Debug::IMAGEHLP_GET_TYPE_INFO_FLAGS, @num_ids : UInt32, @type_ids : UInt32*, @tag_filter : UInt64, @num_reqs : UInt32, @req_kinds : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL_TYPE_INFO*, @req_offsets : LibC::UIntPtrT*, @req_sizes : UInt32*, @req_stride : LibC::UIntPtrT, @buffer_size : LibC::UIntPtrT, @buffer : Void*, @entries_matched : UInt32, @entries_filled : UInt32, @tags_found : UInt64, @all_reqs_valid : UInt64, @num_reqs_valid : UInt32, @reqs_valid : UInt64*)
    end
  end

  @[Extern]
  struct SYMSRV_INDEX_INFO
    property sizeofstruct : UInt32
    property file : Win32cr::Foundation::CHAR[261]
    property stripped : Win32cr::Foundation::BOOL
    property timestamp : UInt32
    property size : UInt32
    property dbgfile : Win32cr::Foundation::CHAR[261]
    property pdbfile : Win32cr::Foundation::CHAR[261]
    property guid : LibC::GUID
    property sig : UInt32
    property age : UInt32
    def initialize(@sizeofstruct : UInt32, @file : Win32cr::Foundation::CHAR[261], @stripped : Win32cr::Foundation::BOOL, @timestamp : UInt32, @size : UInt32, @dbgfile : Win32cr::Foundation::CHAR[261], @pdbfile : Win32cr::Foundation::CHAR[261], @guid : LibC::GUID, @sig : UInt32, @age : UInt32)
    end
  end

  @[Extern]
  struct SYMSRV_INDEX_INFOW
    property sizeofstruct : UInt32
    property file : UInt16[261]
    property stripped : Win32cr::Foundation::BOOL
    property timestamp : UInt32
    property size : UInt32
    property dbgfile : UInt16[261]
    property pdbfile : UInt16[261]
    property guid : LibC::GUID
    property sig : UInt32
    property age : UInt32
    def initialize(@sizeofstruct : UInt32, @file : UInt16[261], @stripped : Win32cr::Foundation::BOOL, @timestamp : UInt32, @size : UInt32, @dbgfile : UInt16[261], @pdbfile : UInt16[261], @guid : LibC::GUID, @sig : UInt32, @age : UInt32)
    end
  end

  @[Extern]
  struct SYMSRV_EXTENDED_OUTPUT_DATA
    property sizeOfStruct : UInt32
    property version : UInt32
    property filePtrMsg : UInt16[261]
    def initialize(@sizeOfStruct : UInt32, @version : UInt32, @filePtrMsg : UInt16[261])
    end
  end

  @[Extern]
  struct DBGHELP_DATA_REPORT_STRUCT
    property pBinPathNonExist : Win32cr::Foundation::PWSTR
    property pSymbolPathNonExist : Win32cr::Foundation::PWSTR
    def initialize(@pBinPathNonExist : Win32cr::Foundation::PWSTR, @pSymbolPathNonExist : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct TEXT_DOCUMENT_ARRAY
    property dwCount : UInt32
    property members : Void**
    def initialize(@dwCount : UInt32, @members : Void**)
    end
  end

  @[Extern]
  struct JsDebugPropertyInfo
    property name : Win32cr::Foundation::BSTR
    property type__ : Win32cr::Foundation::BSTR
    property value : Win32cr::Foundation::BSTR
    property fullName : Win32cr::Foundation::BSTR
    property attr : Win32cr::System::Diagnostics::Debug::JS_PROPERTY_ATTRIBUTES
    def initialize(@name : Win32cr::Foundation::BSTR, @type__ : Win32cr::Foundation::BSTR, @value : Win32cr::Foundation::BSTR, @fullName : Win32cr::Foundation::BSTR, @attr : Win32cr::System::Diagnostics::Debug::JS_PROPERTY_ATTRIBUTES)
    end
  end

  @[Extern]
  struct JS_NATIVE_FRAME
    property instruction_offset : UInt64
    property return_offset : UInt64
    property frame_offset : UInt64
    property stack_offset : UInt64
    def initialize(@instruction_offset : UInt64, @return_offset : UInt64, @frame_offset : UInt64, @stack_offset : UInt64)
    end
  end

  @[Extern]
  struct PHYSICAL_MEMORY_RUN32
    property base_page : UInt32
    property page_count : UInt32
    def initialize(@base_page : UInt32, @page_count : UInt32)
    end
  end

  @[Extern]
  struct PHYSICAL_MEMORY_DESCRIPTOR32
    property number_of_runs : UInt32
    property number_of_pages : UInt32
    property run : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_RUN32*
    def initialize(@number_of_runs : UInt32, @number_of_pages : UInt32, @run : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_RUN32*)
    end
  end

  @[Extern]
  struct PHYSICAL_MEMORY_RUN64
    property base_page : UInt64
    property page_count : UInt64
    def initialize(@base_page : UInt64, @page_count : UInt64)
    end
  end

  @[Extern]
  struct PHYSICAL_MEMORY_DESCRIPTOR64
    property number_of_runs : UInt32
    property number_of_pages : UInt64
    property run : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_RUN64*
    def initialize(@number_of_runs : UInt32, @number_of_pages : UInt64, @run : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_RUN64*)
    end
  end

  @[Extern(union: true)]
  struct DUMP_FILE_ATTRIBUTES
    property anonymous : Anonymous_e__Struct_
    property attributes : UInt32

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @attributes : UInt32)
    end
  end

  @[Extern]
  struct DUMP_HEADER32
    property signature : UInt32
    property valid_dump : UInt32
    property major_version : UInt32
    property minor_version : UInt32
    property directory_table_base : UInt32
    property pfn_data_base : UInt32
    property ps_loaded_module_list : UInt32
    property ps_active_process_head : UInt32
    property machine_image_type : UInt32
    property number_processors : UInt32
    property bug_check_code : UInt32
    property bug_check_parameter1 : UInt32
    property bug_check_parameter2 : UInt32
    property bug_check_parameter3 : UInt32
    property bug_check_parameter4 : UInt32
    property version_user : Win32cr::Foundation::CHAR[32]
    property pae_enabled : UInt8
    property kd_secondary_version : UInt8
    property spare3 : UInt8[2]
    property kd_debugger_data_block : UInt32
    property anonymous : Anonymous_e__Union_
    property context_record : UInt8[1200]
    property exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD32
    property comment : Win32cr::Foundation::CHAR[128]
    property attributes : Win32cr::System::Diagnostics::Debug::DUMP_FILE_ATTRIBUTES
    property boot_id : UInt32
    property _reserved0 : UInt8[1760]
    property dump_type : UInt32
    property mini_dump_fields : UInt32
    property secondary_data_state : UInt32
    property product_type : UInt32
    property suite_mask : UInt32
    property writer_status : UInt32
    property required_dump_space : Win32cr::Foundation::LARGE_INTEGER
    property _reserved2 : UInt8[16]
    property system_up_time : Win32cr::Foundation::LARGE_INTEGER
    property system_time : Win32cr::Foundation::LARGE_INTEGER
    property _reserved3 : UInt8[56]

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property physical_memory_block : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_DESCRIPTOR32
    property physical_memory_block_buffer : UInt8[700]
    def initialize(@physical_memory_block : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_DESCRIPTOR32, @physical_memory_block_buffer : UInt8[700])
    end
    end

    def initialize(@signature : UInt32, @valid_dump : UInt32, @major_version : UInt32, @minor_version : UInt32, @directory_table_base : UInt32, @pfn_data_base : UInt32, @ps_loaded_module_list : UInt32, @ps_active_process_head : UInt32, @machine_image_type : UInt32, @number_processors : UInt32, @bug_check_code : UInt32, @bug_check_parameter1 : UInt32, @bug_check_parameter2 : UInt32, @bug_check_parameter3 : UInt32, @bug_check_parameter4 : UInt32, @version_user : Win32cr::Foundation::CHAR[32], @pae_enabled : UInt8, @kd_secondary_version : UInt8, @spare3 : UInt8[2], @kd_debugger_data_block : UInt32, @anonymous : Anonymous_e__Union_, @context_record : UInt8[1200], @exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD32, @comment : Win32cr::Foundation::CHAR[128], @attributes : Win32cr::System::Diagnostics::Debug::DUMP_FILE_ATTRIBUTES, @boot_id : UInt32, @_reserved0 : UInt8[1760], @dump_type : UInt32, @mini_dump_fields : UInt32, @secondary_data_state : UInt32, @product_type : UInt32, @suite_mask : UInt32, @writer_status : UInt32, @required_dump_space : Win32cr::Foundation::LARGE_INTEGER, @_reserved2 : UInt8[16], @system_up_time : Win32cr::Foundation::LARGE_INTEGER, @system_time : Win32cr::Foundation::LARGE_INTEGER, @_reserved3 : UInt8[56])
    end
  end

  @[Extern]
  struct DUMP_HEADER64
    property signature : UInt32
    property valid_dump : UInt32
    property major_version : UInt32
    property minor_version : UInt32
    property directory_table_base : UInt64
    property pfn_data_base : UInt64
    property ps_loaded_module_list : UInt64
    property ps_active_process_head : UInt64
    property machine_image_type : UInt32
    property number_processors : UInt32
    property bug_check_code : UInt32
    property bug_check_parameter1 : UInt64
    property bug_check_parameter2 : UInt64
    property bug_check_parameter3 : UInt64
    property bug_check_parameter4 : UInt64
    property version_user : Win32cr::Foundation::CHAR[32]
    property kd_debugger_data_block : UInt64
    property anonymous : Anonymous_e__Union_
    property context_record : UInt8[3000]
    property exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64
    property dump_type : UInt32
    property required_dump_space : Win32cr::Foundation::LARGE_INTEGER
    property system_time : Win32cr::Foundation::LARGE_INTEGER
    property comment : Win32cr::Foundation::CHAR[128]
    property system_up_time : Win32cr::Foundation::LARGE_INTEGER
    property mini_dump_fields : UInt32
    property secondary_data_state : UInt32
    property product_type : UInt32
    property suite_mask : UInt32
    property writer_status : UInt32
    property unused1 : UInt8
    property kd_secondary_version : UInt8
    property unused : UInt8[2]
    property attributes : Win32cr::System::Diagnostics::Debug::DUMP_FILE_ATTRIBUTES
    property boot_id : UInt32
    property _reserved0 : UInt8[4008]

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property physical_memory_block : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_DESCRIPTOR64
    property physical_memory_block_buffer : UInt8[700]
    def initialize(@physical_memory_block : Win32cr::System::Diagnostics::Debug::PHYSICAL_MEMORY_DESCRIPTOR64, @physical_memory_block_buffer : UInt8[700])
    end
    end

    def initialize(@signature : UInt32, @valid_dump : UInt32, @major_version : UInt32, @minor_version : UInt32, @directory_table_base : UInt64, @pfn_data_base : UInt64, @ps_loaded_module_list : UInt64, @ps_active_process_head : UInt64, @machine_image_type : UInt32, @number_processors : UInt32, @bug_check_code : UInt32, @bug_check_parameter1 : UInt64, @bug_check_parameter2 : UInt64, @bug_check_parameter3 : UInt64, @bug_check_parameter4 : UInt64, @version_user : Win32cr::Foundation::CHAR[32], @kd_debugger_data_block : UInt64, @anonymous : Anonymous_e__Union_, @context_record : UInt8[3000], @exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64, @dump_type : UInt32, @required_dump_space : Win32cr::Foundation::LARGE_INTEGER, @system_time : Win32cr::Foundation::LARGE_INTEGER, @comment : Win32cr::Foundation::CHAR[128], @system_up_time : Win32cr::Foundation::LARGE_INTEGER, @mini_dump_fields : UInt32, @secondary_data_state : UInt32, @product_type : UInt32, @suite_mask : UInt32, @writer_status : UInt32, @unused1 : UInt8, @kd_secondary_version : UInt8, @unused : UInt8[2], @attributes : Win32cr::System::Diagnostics::Debug::DUMP_FILE_ATTRIBUTES, @boot_id : UInt32, @_reserved0 : UInt8[4008])
    end
  end

  @[Extern]
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DD
    property initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    property uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
    property correct : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER
    def initialize(@initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER, @uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER, @correct : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER)
    end
  end

  @[Extern]
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1
    property version : UInt32
    property source_guid : LibC::GUID
    property log_tag : UInt16
    property reserved : UInt8[6]
    property initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    property uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
    def initialize(@version : UInt32, @source_guid : LibC::GUID, @log_tag : UInt16, @reserved : UInt8[6], @initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER, @uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER)
    end
  end

  @[Extern]
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER
    property version : UInt32
    property source_guid : LibC::GUID
    property log_tag : UInt16
    property reserved : UInt8[6]
    property initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    property uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
    property max_section_data_length : UInt32
    property max_sections_per_report : UInt32
    property creator_id : LibC::GUID
    property partition_id : LibC::GUID
    def initialize(@version : UInt32, @source_guid : LibC::GUID, @log_tag : UInt16, @reserved : UInt8[6], @initialize__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER, @uninitialize : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER, @max_section_data_length : UInt32, @max_sections_per_report : UInt32, @creator_id : LibC::GUID, @partition_id : LibC::GUID)
    end
  end

  @[Extern]
  struct WHEA_DRIVER_BUFFER_SET
    property version : UInt32
    property data : UInt8*
    property data_size : UInt32
    property section_type_guid : LibC::GUID*
    property section_friendly_name : UInt8*
    property flags : UInt8*
    def initialize(@version : UInt32, @data : UInt8*, @data_size : UInt32, @section_type_guid : LibC::GUID*, @section_friendly_name : UInt8*, @flags : UInt8*)
    end
  end

  @[Extern(union: true)]
  struct WHEA_NOTIFICATION_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_ushort : UInt16

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt16
    def initialize(@_bitfield : UInt16)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_ushort : UInt16)
    end
  end

  @[Extern(union: true)]
  struct XPF_MC_BANK_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_uchar : UInt8

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt8
    def initialize(@_bitfield : UInt8)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_uchar : UInt8)
    end
  end

  @[Extern(union: true)]
  struct XPF_MCE_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_ulong : UInt32

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_ulong : UInt32)
    end
  end

  @[Extern(union: true)]
  struct AER_ROOTPORT_DESCRIPTOR_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_ushort : UInt16

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt16
    def initialize(@_bitfield : UInt16)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_ushort : UInt16)
    end
  end

  @[Extern(union: true)]
  struct AER_ENDPOINT_DESCRIPTOR_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_ushort : UInt16

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt16
    def initialize(@_bitfield : UInt16)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_ushort : UInt16)
    end
  end

  @[Extern(union: true)]
  struct AER_BRIDGE_DESCRIPTOR_FLAGS
    property anonymous : Anonymous_e__Struct_
    property as_ushort : UInt16

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property _bitfield : UInt16
    def initialize(@_bitfield : UInt16)
    end
    end

    def initialize(@anonymous : Anonymous_e__Struct_, @as_ushort : UInt16)
    end
  end

  @[Extern]
  struct WHEA_NOTIFICATION_DESCRIPTOR
    property type__ : UInt8
    property length : UInt8
    property flags : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_FLAGS
    property u : U_e__union_

    # Nested Type U_e__union_
    @[Extern(union: true)]
    struct U_e__union_
    property polled : Polled_e__Struct_
    property interrupt : Interrupt_e__Struct_
    property local_interrupt : LocalInterrupt_e__Struct_
    property sci : Sci_e__Struct_
    property nmi : Nmi_e__Struct_
    property sea : Sea_e__Struct_
    property sei : Sei_e__Struct_
    property gsiv : Gsiv_e__Struct_

      # Nested Type Sei_e__Struct_
      @[Extern]
      struct Sei_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type Nmi_e__Struct_
      @[Extern]
      struct Nmi_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type LocalInterrupt_e__Struct_
      @[Extern]
      struct LocalInterrupt_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type Polled_e__Struct_
      @[Extern]
      struct Polled_e__Struct_
    property poll_interval : UInt32
    def initialize(@poll_interval : UInt32)
    end
      end


      # Nested Type Sea_e__Struct_
      @[Extern]
      struct Sea_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type Interrupt_e__Struct_
      @[Extern]
      struct Interrupt_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type Sci_e__Struct_
      @[Extern]
      struct Sci_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end


      # Nested Type Gsiv_e__Struct_
      @[Extern]
      struct Gsiv_e__Struct_
    property poll_interval : UInt32
    property vector : UInt32
    property switch_to_polling_threshold : UInt32
    property switch_to_polling_window : UInt32
    property error_threshold : UInt32
    property error_threshold_window : UInt32
    def initialize(@poll_interval : UInt32, @vector : UInt32, @switch_to_polling_threshold : UInt32, @switch_to_polling_window : UInt32, @error_threshold : UInt32, @error_threshold_window : UInt32)
    end
      end

    def initialize(@polled : Polled_e__Struct_, @interrupt : Interrupt_e__Struct_, @local_interrupt : LocalInterrupt_e__Struct_, @sci : Sci_e__Struct_, @nmi : Nmi_e__Struct_, @sea : Sea_e__Struct_, @sei : Sei_e__Struct_, @gsiv : Gsiv_e__Struct_)
    end
    end

    def initialize(@type__ : UInt8, @length : UInt8, @flags : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_FLAGS, @u : U_e__union_)
    end
  end

  @[Extern]
  struct WHEA_XPF_MC_BANK_DESCRIPTOR
    property bank_number : UInt8
    property clear_on_initialization : Win32cr::Foundation::BOOLEAN
    property status_data_format : UInt8
    property flags : Win32cr::System::Diagnostics::Debug::XPF_MC_BANK_FLAGS
    property control_msr : UInt32
    property status_msr : UInt32
    property address_msr : UInt32
    property misc_msr : UInt32
    property control_data : UInt64
    def initialize(@bank_number : UInt8, @clear_on_initialization : Win32cr::Foundation::BOOLEAN, @status_data_format : UInt8, @flags : Win32cr::System::Diagnostics::Debug::XPF_MC_BANK_FLAGS, @control_msr : UInt32, @status_msr : UInt32, @address_msr : UInt32, @misc_msr : UInt32, @control_data : UInt64)
    end
  end

  @[Extern]
  struct WHEA_XPF_MCE_DESCRIPTOR
    property type__ : UInt16
    property enabled : UInt8
    property number_of_banks : UInt8
    property flags : Win32cr::System::Diagnostics::Debug::XPF_MCE_FLAGS
    property mcg_capability : UInt64
    property mcg_global_control : UInt64
    property banks : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MC_BANK_DESCRIPTOR[32]
    def initialize(@type__ : UInt16, @enabled : UInt8, @number_of_banks : UInt8, @flags : Win32cr::System::Diagnostics::Debug::XPF_MCE_FLAGS, @mcg_capability : UInt64, @mcg_global_control : UInt64, @banks : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MC_BANK_DESCRIPTOR[32])
    end
  end

  @[Extern]
  struct WHEA_XPF_CMC_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    property number_of_banks : UInt8
    property reserved : UInt32
    property notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR
    property banks : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MC_BANK_DESCRIPTOR[32]
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN, @number_of_banks : UInt8, @reserved : UInt32, @notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR, @banks : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MC_BANK_DESCRIPTOR[32])
    end
  end

  @[Extern]
  struct WHEA_PCI_SLOT_NUMBER
    property u : U_e__union_

    # Nested Type U_e__union_
    @[Extern(union: true)]
    struct U_e__union_
    property bits : Bits_e__struct_
    property as_ulong : UInt32

      # Nested Type Bits_e__struct_
      @[Extern]
      struct Bits_e__struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@bits : Bits_e__struct_, @as_ulong : UInt32)
    end
    end

    def initialize(@u : U_e__union_)
    end
  end

  @[Extern]
  struct WHEA_XPF_NMI_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN)
    end
  end

  @[Extern]
  struct WHEA_AER_ROOTPORT_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    property reserved : UInt8
    property bus_number : UInt32
    property slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER
    property device_control : UInt16
    property flags : Win32cr::System::Diagnostics::Debug::AER_ROOTPORT_DESCRIPTOR_FLAGS
    property uncorrectable_error_mask : UInt32
    property uncorrectable_error_severity : UInt32
    property correctable_error_mask : UInt32
    property advanced_caps_and_control : UInt32
    property root_error_command : UInt32
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN, @reserved : UInt8, @bus_number : UInt32, @slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER, @device_control : UInt16, @flags : Win32cr::System::Diagnostics::Debug::AER_ROOTPORT_DESCRIPTOR_FLAGS, @uncorrectable_error_mask : UInt32, @uncorrectable_error_severity : UInt32, @correctable_error_mask : UInt32, @advanced_caps_and_control : UInt32, @root_error_command : UInt32)
    end
  end

  @[Extern]
  struct WHEA_AER_ENDPOINT_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    property reserved : UInt8
    property bus_number : UInt32
    property slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER
    property device_control : UInt16
    property flags : Win32cr::System::Diagnostics::Debug::AER_ENDPOINT_DESCRIPTOR_FLAGS
    property uncorrectable_error_mask : UInt32
    property uncorrectable_error_severity : UInt32
    property correctable_error_mask : UInt32
    property advanced_caps_and_control : UInt32
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN, @reserved : UInt8, @bus_number : UInt32, @slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER, @device_control : UInt16, @flags : Win32cr::System::Diagnostics::Debug::AER_ENDPOINT_DESCRIPTOR_FLAGS, @uncorrectable_error_mask : UInt32, @uncorrectable_error_severity : UInt32, @correctable_error_mask : UInt32, @advanced_caps_and_control : UInt32)
    end
  end

  @[Extern]
  struct WHEA_AER_BRIDGE_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    property reserved : UInt8
    property bus_number : UInt32
    property slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER
    property device_control : UInt16
    property flags : Win32cr::System::Diagnostics::Debug::AER_BRIDGE_DESCRIPTOR_FLAGS
    property uncorrectable_error_mask : UInt32
    property uncorrectable_error_severity : UInt32
    property correctable_error_mask : UInt32
    property advanced_caps_and_control : UInt32
    property secondary_uncorrectable_error_mask : UInt32
    property secondary_uncorrectable_error_sev : UInt32
    property secondary_caps_and_control : UInt32
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN, @reserved : UInt8, @bus_number : UInt32, @slot : Win32cr::System::Diagnostics::Debug::WHEA_PCI_SLOT_NUMBER, @device_control : UInt16, @flags : Win32cr::System::Diagnostics::Debug::AER_BRIDGE_DESCRIPTOR_FLAGS, @uncorrectable_error_mask : UInt32, @uncorrectable_error_severity : UInt32, @correctable_error_mask : UInt32, @advanced_caps_and_control : UInt32, @secondary_uncorrectable_error_mask : UInt32, @secondary_uncorrectable_error_sev : UInt32, @secondary_caps_and_control : UInt32)
    end
  end

  @[Extern]
  struct WHEA_GENERIC_ERROR_DESCRIPTOR
    property type__ : UInt16
    property reserved : UInt8
    property enabled : UInt8
    property err_status_block_length : UInt32
    property related_error_source_id : UInt32
    property err_status_address_space_id : UInt8
    property err_status_address_bit_width : UInt8
    property err_status_address_bit_offset : UInt8
    property err_status_address_access_size : UInt8
    property err_status_address : Win32cr::Foundation::LARGE_INTEGER
    property notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR
    def initialize(@type__ : UInt16, @reserved : UInt8, @enabled : UInt8, @err_status_block_length : UInt32, @related_error_source_id : UInt32, @err_status_address_space_id : UInt8, @err_status_address_bit_width : UInt8, @err_status_address_bit_offset : UInt8, @err_status_address_access_size : UInt8, @err_status_address : Win32cr::Foundation::LARGE_INTEGER, @notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR)
    end
  end

  @[Extern]
  struct WHEA_GENERIC_ERROR_DESCRIPTOR_V2
    property type__ : UInt16
    property reserved : UInt8
    property enabled : UInt8
    property err_status_block_length : UInt32
    property related_error_source_id : UInt32
    property err_status_address_space_id : UInt8
    property err_status_address_bit_width : UInt8
    property err_status_address_bit_offset : UInt8
    property err_status_address_access_size : UInt8
    property err_status_address : Win32cr::Foundation::LARGE_INTEGER
    property notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR
    property read_ack_address_space_id : UInt8
    property read_ack_address_bit_width : UInt8
    property read_ack_address_bit_offset : UInt8
    property read_ack_address_access_size : UInt8
    property read_ack_address : Win32cr::Foundation::LARGE_INTEGER
    property read_ack_preserve_mask : UInt64
    property read_ack_write_mask : UInt64
    def initialize(@type__ : UInt16, @reserved : UInt8, @enabled : UInt8, @err_status_block_length : UInt32, @related_error_source_id : UInt32, @err_status_address_space_id : UInt8, @err_status_address_bit_width : UInt8, @err_status_address_bit_offset : UInt8, @err_status_address_access_size : UInt8, @err_status_address : Win32cr::Foundation::LARGE_INTEGER, @notify : Win32cr::System::Diagnostics::Debug::WHEA_NOTIFICATION_DESCRIPTOR, @read_ack_address_space_id : UInt8, @read_ack_address_bit_width : UInt8, @read_ack_address_bit_offset : UInt8, @read_ack_address_access_size : UInt8, @read_ack_address : Win32cr::Foundation::LARGE_INTEGER, @read_ack_preserve_mask : UInt64, @read_ack_write_mask : UInt64)
    end
  end

  @[Extern]
  struct WHEA_DEVICE_DRIVER_DESCRIPTOR
    property type__ : UInt16
    property enabled : Win32cr::Foundation::BOOLEAN
    property reserved : UInt8
    property source_guid : LibC::GUID
    property log_tag : UInt16
    property reserved2 : UInt16
    property packet_length : UInt32
    property packet_count : UInt32
    property packet_buffer : UInt8*
    property config : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_CONFIGURATION_DD
    property creator_id : LibC::GUID
    property partition_id : LibC::GUID
    property max_section_data_length : UInt32
    property max_sections_per_record : UInt32
    property packet_state_buffer : UInt8*
    property open_handles : Int32
    def initialize(@type__ : UInt16, @enabled : Win32cr::Foundation::BOOLEAN, @reserved : UInt8, @source_guid : LibC::GUID, @log_tag : UInt16, @reserved2 : UInt16, @packet_length : UInt32, @packet_count : UInt32, @packet_buffer : UInt8*, @config : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_CONFIGURATION_DD, @creator_id : LibC::GUID, @partition_id : LibC::GUID, @max_section_data_length : UInt32, @max_sections_per_record : UInt32, @packet_state_buffer : UInt8*, @open_handles : Int32)
    end
  end

  @[Extern]
  struct WHEA_IPF_MCA_DESCRIPTOR
    property type__ : UInt16
    property enabled : UInt8
    property reserved : UInt8
    def initialize(@type__ : UInt16, @enabled : UInt8, @reserved : UInt8)
    end
  end

  @[Extern]
  struct WHEA_IPF_CMC_DESCRIPTOR
    property type__ : UInt16
    property enabled : UInt8
    property reserved : UInt8
    def initialize(@type__ : UInt16, @enabled : UInt8, @reserved : UInt8)
    end
  end

  @[Extern]
  struct WHEA_IPF_CPE_DESCRIPTOR
    property type__ : UInt16
    property enabled : UInt8
    property reserved : UInt8
    def initialize(@type__ : UInt16, @enabled : UInt8, @reserved : UInt8)
    end
  end

  @[Extern]
  struct WHEA_ERROR_SOURCE_DESCRIPTOR
    property length : UInt32
    property version : UInt32
    property type__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_TYPE
    property state : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_STATE
    property max_raw_data_length : UInt32
    property num_records_to_preallocate : UInt32
    property max_sections_per_record : UInt32
    property error_source_id : UInt32
    property platform_error_source_id : UInt32
    property flags : UInt32
    property info : Info_e__Union_

    # Nested Type Info_e__Union_
    @[Extern(union: true)]
    struct Info_e__Union_
    property xpf_mce_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MCE_DESCRIPTOR
    property xpf_cmc_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_CMC_DESCRIPTOR
    property xpf_nmi_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_NMI_DESCRIPTOR
    property ipf_mca_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_MCA_DESCRIPTOR
    property ipf_cmc_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_CMC_DESCRIPTOR
    property ipf_cpe_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_CPE_DESCRIPTOR
    property aer_rootport_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_ROOTPORT_DESCRIPTOR
    property aer_endpoint_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_ENDPOINT_DESCRIPTOR
    property aer_bridge_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_BRIDGE_DESCRIPTOR
    property gen_err_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_GENERIC_ERROR_DESCRIPTOR
    property gen_err_descriptor_v2 : Win32cr::System::Diagnostics::Debug::WHEA_GENERIC_ERROR_DESCRIPTOR_V2
    property device_driver_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_DEVICE_DRIVER_DESCRIPTOR
    def initialize(@xpf_mce_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_MCE_DESCRIPTOR, @xpf_cmc_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_CMC_DESCRIPTOR, @xpf_nmi_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_XPF_NMI_DESCRIPTOR, @ipf_mca_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_MCA_DESCRIPTOR, @ipf_cmc_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_CMC_DESCRIPTOR, @ipf_cpe_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_IPF_CPE_DESCRIPTOR, @aer_rootport_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_ROOTPORT_DESCRIPTOR, @aer_endpoint_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_ENDPOINT_DESCRIPTOR, @aer_bridge_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_AER_BRIDGE_DESCRIPTOR, @gen_err_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_GENERIC_ERROR_DESCRIPTOR, @gen_err_descriptor_v2 : Win32cr::System::Diagnostics::Debug::WHEA_GENERIC_ERROR_DESCRIPTOR_V2, @device_driver_descriptor : Win32cr::System::Diagnostics::Debug::WHEA_DEVICE_DRIVER_DESCRIPTOR)
    end
    end

    def initialize(@length : UInt32, @version : UInt32, @type__ : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_TYPE, @state : Win32cr::System::Diagnostics::Debug::WHEA_ERROR_SOURCE_STATE, @max_raw_data_length : UInt32, @num_records_to_preallocate : UInt32, @max_sections_per_record : UInt32, @error_source_id : UInt32, @platform_error_source_id : UInt32, @flags : UInt32, @info : Info_e__Union_)
    end
  end

  @[Extern]
  struct IPMI_OS_SEL_RECORD
    property signature : UInt32
    property version : UInt32
    property length : UInt32
    property record_type : Win32cr::System::Diagnostics::Debug::IPMI_OS_SEL_RECORD_TYPE
    property data_length : UInt32
    property data : UInt8*
    def initialize(@signature : UInt32, @version : UInt32, @length : UInt32, @record_type : Win32cr::System::Diagnostics::Debug::IPMI_OS_SEL_RECORD_TYPE, @data_length : UInt32, @data : UInt8*)
    end
  end

  {% if flag?(:i386) %}
  @[Extern]
  struct XSAVE_FORMAT
    property control_word : UInt16
    property status_word : UInt16
    property tag_word : UInt8
    property reserved1 : UInt8
    property error_opcode : UInt16
    property error_offset : UInt32
    property error_selector : UInt16
    property reserved2 : UInt16
    property data_offset : UInt32
    property data_selector : UInt16
    property reserved3 : UInt16
    property mx_csr : UInt32
    property mx_csr_mask : UInt32
    property float_registers : Win32cr::System::Diagnostics::Debug::M128A[8]
    property xmm_registers : Win32cr::System::Diagnostics::Debug::M128A[8]
    property reserved4 : UInt8[224]
    def initialize(@control_word : UInt16, @status_word : UInt16, @tag_word : UInt8, @reserved1 : UInt8, @error_opcode : UInt16, @error_offset : UInt32, @error_selector : UInt16, @reserved2 : UInt16, @data_offset : UInt32, @data_selector : UInt16, @reserved3 : UInt16, @mx_csr : UInt32, @mx_csr_mask : UInt32, @float_registers : Win32cr::System::Diagnostics::Debug::M128A[8], @xmm_registers : Win32cr::System::Diagnostics::Debug::M128A[8], @reserved4 : UInt8[224])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct XSTATE_CONTEXT
    property mask : UInt64
    property length : UInt32
    property reserved1 : UInt32
    property area : Win32cr::System::Diagnostics::Debug::XSAVE_AREA*
    property reserved2 : UInt32
    property buffer : Void*
    property reserved3 : UInt32
    def initialize(@mask : UInt64, @length : UInt32, @reserved1 : UInt32, @area : Win32cr::System::Diagnostics::Debug::XSAVE_AREA*, @reserved2 : UInt32, @buffer : Void*, @reserved3 : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct CONTEXT
    property context_flags : UInt32
    property dr0 : UInt32
    property dr1 : UInt32
    property dr2 : UInt32
    property dr3 : UInt32
    property dr6 : UInt32
    property dr7 : UInt32
    property float_save : Win32cr::System::Kernel::FLOATING_SAVE_AREA
    property seg_gs : UInt32
    property seg_fs : UInt32
    property seg_es : UInt32
    property seg_ds : UInt32
    property edi : UInt32
    property esi : UInt32
    property ebx : UInt32
    property edx : UInt32
    property ecx : UInt32
    property eax : UInt32
    property ebp : UInt32
    property eip : UInt32
    property seg_cs : UInt32
    property e_flags : UInt32
    property esp : UInt32
    property seg_ss : UInt32
    property extended_registers : UInt8[512]
    def initialize(@context_flags : UInt32, @dr0 : UInt32, @dr1 : UInt32, @dr2 : UInt32, @dr3 : UInt32, @dr6 : UInt32, @dr7 : UInt32, @float_save : Win32cr::System::Kernel::FLOATING_SAVE_AREA, @seg_gs : UInt32, @seg_fs : UInt32, @seg_es : UInt32, @seg_ds : UInt32, @edi : UInt32, @esi : UInt32, @ebx : UInt32, @edx : UInt32, @ecx : UInt32, @eax : UInt32, @ebp : UInt32, @eip : UInt32, @seg_cs : UInt32, @e_flags : UInt32, @esp : UInt32, @seg_ss : UInt32, @extended_registers : UInt8[512])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct KNONVOLATILE_CONTEXT_POINTERS
    property dummy : UInt32
    def initialize(@dummy : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct MINIDUMP_THREAD_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct MINIDUMP_THREAD_EX_CALLBACK
    property thread_id : UInt32
    property thread_handle : Win32cr::Foundation::HANDLE
    property context : Win32cr::System::Diagnostics::Debug::CONTEXT
    property size_of_context : UInt32
    property stack_base : UInt64
    property stack_end : UInt64
    property backing_store_base : UInt64
    property backing_store_end : UInt64
    def initialize(@thread_id : UInt32, @thread_handle : Win32cr::Foundation::HANDLE, @context : Win32cr::System::Diagnostics::Debug::CONTEXT, @size_of_context : UInt32, @stack_base : UInt64, @stack_end : UInt64, @backing_store_base : UInt64, @backing_store_end : UInt64)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct LOADED_IMAGE
    property module_name : Win32cr::Foundation::PSTR
    property hFile : Win32cr::Foundation::HANDLE
    property mapped_address : UInt8*
    property file_header : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*
    property last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
    property number_of_sections : UInt32
    property sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
    property characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS2
    property fSystemImage : Win32cr::Foundation::BOOLEAN
    property fDOSImage : Win32cr::Foundation::BOOLEAN
    property fReadOnly : Win32cr::Foundation::BOOLEAN
    property version : UInt8
    property links : Win32cr::System::Kernel::LIST_ENTRY
    property size_of_image : UInt32
    def initialize(@module_name : Win32cr::Foundation::PSTR, @hFile : Win32cr::Foundation::HANDLE, @mapped_address : UInt8*, @file_header : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*, @last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*, @number_of_sections : UInt32, @sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*, @characteristics : Win32cr::System::Diagnostics::Debug::IMAGE_FILE_CHARACTERISTICS2, @fSystemImage : Win32cr::Foundation::BOOLEAN, @fDOSImage : Win32cr::Foundation::BOOLEAN, @fReadOnly : Win32cr::Foundation::BOOLEAN, @version : UInt8, @links : Win32cr::System::Kernel::LIST_ENTRY, @size_of_image : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGE_DEBUG_INFORMATION
    property list : Win32cr::System::Kernel::LIST_ENTRY
    property reserved_size : UInt32
    property reserved_mapped_base : Void*
    property reserved_machine : UInt16
    property reserved_characteristics : UInt16
    property reserved_check_sum : UInt32
    property image_base : UInt32
    property size_of_image : UInt32
    property reserved_number_of_sections : UInt32
    property reserved_sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
    property reserved_exported_names_size : UInt32
    property reserved_exported_names : Win32cr::Foundation::PSTR
    property reserved_number_of_function_table_entries : UInt32
    property reserved_function_table_entries : Win32cr::System::Diagnostics::Debug::IMAGE_FUNCTION_ENTRY*
    property reserved_lowest_function_starting_address : UInt32
    property reserved_highest_function_ending_address : UInt32
    property reserved_number_of_fpo_table_entries : UInt32
    property reserved_fpo_table_entries : Win32cr::System::Diagnostics::Debug::FPO_DATA*
    property size_of_coff_symbols : UInt32
    property coff_symbols : Win32cr::System::Diagnostics::Debug::IMAGE_COFF_SYMBOLS_HEADER*
    property reserved_size_of_code_view_symbols : UInt32
    property reserved_code_view_symbols : Void*
    property image_file_path : Win32cr::Foundation::PSTR
    property image_file_name : Win32cr::Foundation::PSTR
    property reserved_debug_file_path : Win32cr::Foundation::PSTR
    property reserved_time_date_stamp : UInt32
    property reserved_rom_image : Win32cr::Foundation::BOOL
    property reserved_debug_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DEBUG_DIRECTORY*
    property reserved_number_of_debug_directories : UInt32
    property reserved_original_function_table_base_address : UInt32
    property reserved : UInt32[2]
    def initialize(@list : Win32cr::System::Kernel::LIST_ENTRY, @reserved_size : UInt32, @reserved_mapped_base : Void*, @reserved_machine : UInt16, @reserved_characteristics : UInt16, @reserved_check_sum : UInt32, @image_base : UInt32, @size_of_image : UInt32, @reserved_number_of_sections : UInt32, @reserved_sections : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*, @reserved_exported_names_size : UInt32, @reserved_exported_names : Win32cr::Foundation::PSTR, @reserved_number_of_function_table_entries : UInt32, @reserved_function_table_entries : Win32cr::System::Diagnostics::Debug::IMAGE_FUNCTION_ENTRY*, @reserved_lowest_function_starting_address : UInt32, @reserved_highest_function_ending_address : UInt32, @reserved_number_of_fpo_table_entries : UInt32, @reserved_fpo_table_entries : Win32cr::System::Diagnostics::Debug::FPO_DATA*, @size_of_coff_symbols : UInt32, @coff_symbols : Win32cr::System::Diagnostics::Debug::IMAGE_COFF_SYMBOLS_HEADER*, @reserved_size_of_code_view_symbols : UInt32, @reserved_code_view_symbols : Void*, @image_file_path : Win32cr::Foundation::PSTR, @image_file_name : Win32cr::Foundation::PSTR, @reserved_debug_file_path : Win32cr::Foundation::PSTR, @reserved_time_date_stamp : UInt32, @reserved_rom_image : Win32cr::Foundation::BOOL, @reserved_debug_directory : Win32cr::System::Diagnostics::Debug::IMAGE_DEBUG_DIRECTORY*, @reserved_number_of_debug_directories : UInt32, @reserved_original_function_table_base_address : UInt32, @reserved : UInt32[2])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct ADDRESS
    property offset : UInt32
    property segment : UInt16
    property mode : Win32cr::System::Diagnostics::Debug::ADDRESS_MODE
    def initialize(@offset : UInt32, @segment : UInt16, @mode : Win32cr::System::Diagnostics::Debug::ADDRESS_MODE)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct KDHELP
    property thread : UInt32
    property th_callback_stack : UInt32
    property next_callback : UInt32
    property frame_pointer : UInt32
    property ki_call_user_mode : UInt32
    property ke_user_callback_dispatcher : UInt32
    property system_range_start : UInt32
    property th_callback_b_store : UInt32
    property ki_user_exception_dispatcher : UInt32
    property stack_base : UInt32
    property stack_limit : UInt32
    property reserved : UInt32[5]
    def initialize(@thread : UInt32, @th_callback_stack : UInt32, @next_callback : UInt32, @frame_pointer : UInt32, @ki_call_user_mode : UInt32, @ke_user_callback_dispatcher : UInt32, @system_range_start : UInt32, @th_callback_b_store : UInt32, @ki_user_exception_dispatcher : UInt32, @stack_base : UInt32, @stack_limit : UInt32, @reserved : UInt32[5])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct STACKFRAME
    property addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS
    property addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS
    property addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS
    property addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS
    property func_table_entry : Void*
    property params : UInt32[4]
    property far : Win32cr::Foundation::BOOL
    property virtual : Win32cr::Foundation::BOOL
    property reserved : UInt32[3]
    property kd_help : Win32cr::System::Diagnostics::Debug::KDHELP
    property addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS
    def initialize(@addr_pc : Win32cr::System::Diagnostics::Debug::ADDRESS, @addr_return : Win32cr::System::Diagnostics::Debug::ADDRESS, @addr_frame : Win32cr::System::Diagnostics::Debug::ADDRESS, @addr_stack : Win32cr::System::Diagnostics::Debug::ADDRESS, @func_table_entry : Void*, @params : UInt32[4], @far : Win32cr::Foundation::BOOL, @virtual : Win32cr::Foundation::BOOL, @reserved : UInt32[3], @kd_help : Win32cr::System::Diagnostics::Debug::KDHELP, @addr_b_store : Win32cr::System::Diagnostics::Debug::ADDRESS)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_SYMBOL
    property size_of_struct : UInt32
    property address : UInt32
    property size : UInt32
    property flags : UInt32
    property max_name_length : UInt32
    property name : Win32cr::Foundation::CHAR*
    def initialize(@size_of_struct : UInt32, @address : UInt32, @size : UInt32, @flags : UInt32, @max_name_length : UInt32, @name : Win32cr::Foundation::CHAR*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_SYMBOL_PACKAGE
    property sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL
    property name : Win32cr::Foundation::CHAR[2001]
    def initialize(@sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL, @name : Win32cr::Foundation::CHAR[2001])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_SYMBOLW
    property size_of_struct : UInt32
    property address : UInt32
    property size : UInt32
    property flags : UInt32
    property max_name_length : UInt32
    property name : UInt16*
    def initialize(@size_of_struct : UInt32, @address : UInt32, @size : UInt32, @flags : UInt32, @max_name_length : UInt32, @name : UInt16*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_SYMBOLW_PACKAGE
    property sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOLW
    property name : UInt16[2001]
    def initialize(@sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOLW, @name : UInt16[2001])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_MODULE
    property size_of_struct : UInt32
    property base_of_image : UInt32
    property image_size : UInt32
    property time_date_stamp : UInt32
    property check_sum : UInt32
    property num_syms : UInt32
    property sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE
    property module_name : Win32cr::Foundation::CHAR[32]
    property image_name : Win32cr::Foundation::CHAR[256]
    property loaded_image_name : Win32cr::Foundation::CHAR[256]
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt32, @image_size : UInt32, @time_date_stamp : UInt32, @check_sum : UInt32, @num_syms : UInt32, @sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE, @module_name : Win32cr::Foundation::CHAR[32], @image_name : Win32cr::Foundation::CHAR[256], @loaded_image_name : Win32cr::Foundation::CHAR[256])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_MODULEW
    property size_of_struct : UInt32
    property base_of_image : UInt32
    property image_size : UInt32
    property time_date_stamp : UInt32
    property check_sum : UInt32
    property num_syms : UInt32
    property sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE
    property module_name : UInt16[32]
    property image_name : UInt16[256]
    property loaded_image_name : UInt16[256]
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt32, @image_size : UInt32, @time_date_stamp : UInt32, @check_sum : UInt32, @num_syms : UInt32, @sym_type : Win32cr::System::Diagnostics::Debug::SYM_TYPE, @module_name : UInt16[32], @image_name : UInt16[256], @loaded_image_name : UInt16[256])
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_LINE
    property size_of_struct : UInt32
    property key : Void*
    property line_number : UInt32
    property file_name : Win32cr::Foundation::PSTR
    property address : UInt32
    def initialize(@size_of_struct : UInt32, @key : Void*, @line_number : UInt32, @file_name : Win32cr::Foundation::PSTR, @address : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_LINEW
    property size_of_struct : UInt32
    property key : Void*
    property line_number : UInt32
    property file_name : Win32cr::Foundation::PSTR
    property address : UInt64
    def initialize(@size_of_struct : UInt32, @key : Void*, @line_number : UInt32, @file_name : Win32cr::Foundation::PSTR, @address : UInt64)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_DEFERRED_SYMBOL_LOAD
    property size_of_struct : UInt32
    property base_of_image : UInt32
    property check_sum : UInt32
    property time_date_stamp : UInt32
    property file_name : Win32cr::Foundation::CHAR[260]
    property reparse : Win32cr::Foundation::BOOLEAN
    property hFile : Win32cr::Foundation::HANDLE
    def initialize(@size_of_struct : UInt32, @base_of_image : UInt32, @check_sum : UInt32, @time_date_stamp : UInt32, @file_name : Win32cr::Foundation::CHAR[260], @reparse : Win32cr::Foundation::BOOLEAN, @hFile : Win32cr::Foundation::HANDLE)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct IMAGEHLP_DUPLICATE_SYMBOL
    property size_of_struct : UInt32
    property number_of_dups : UInt32
    property symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*
    property selected_symbol : UInt32
    def initialize(@size_of_struct : UInt32, @number_of_dups : UInt32, @symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*, @selected_symbol : UInt32)
    end
  end
  {% end %}

  @[Extern]
  record IDebugAdvancedVtbl,
    query_interface : Proc(IDebugAdvanced*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAdvanced*, UInt32),
    release : Proc(IDebugAdvanced*, UInt32),
    get_thread_context : Proc(IDebugAdvanced*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_thread_context : Proc(IDebugAdvanced*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAdvanced, lpVtbl : IDebugAdvancedVtbl* do
    GUID = LibC::GUID.new(0xf2df5f53_u32, 0x71f_u16, 0x47bd_u16, StaticArray[0x9d_u8, 0xe6_u8, 0x57_u8, 0x34_u8, 0xc3_u8, 0xfe_u8, 0xd6_u8, 0x89_u8])
    def query_interface(this : IDebugAdvanced*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAdvanced*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAdvanced*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_thread_context(this : IDebugAdvanced*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_context.call(this, context, context_size)
    end
    def set_thread_context(this : IDebugAdvanced*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_thread_context.call(this, context, context_size)
    end

  end

  @[Extern]
  record IDebugAdvanced2Vtbl,
    query_interface : Proc(IDebugAdvanced2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAdvanced2*, UInt32),
    release : Proc(IDebugAdvanced2*, UInt32),
    get_thread_context : Proc(IDebugAdvanced2*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_thread_context : Proc(IDebugAdvanced2*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    request : Proc(IDebugAdvanced2*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_information : Proc(IDebugAdvanced2*, UInt32, Win32cr::Foundation::PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    find_source_file_and_token : Proc(IDebugAdvanced2*, UInt32, UInt64, Win32cr::Foundation::PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information : Proc(IDebugAdvanced2*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_object_information : Proc(IDebugAdvanced2*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAdvanced2, lpVtbl : IDebugAdvanced2Vtbl* do
    GUID = LibC::GUID.new(0x716d14c9_u32, 0x119b_u16, 0x4ba5_u16, StaticArray[0xaf_u8, 0x1f_u8, 0x8_u8, 0x90_u8, 0xe6_u8, 0x72_u8, 0x41_u8, 0x6a_u8])
    def query_interface(this : IDebugAdvanced2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAdvanced2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAdvanced2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_thread_context(this : IDebugAdvanced2*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_context.call(this, context, context_size)
    end
    def set_thread_context(this : IDebugAdvanced2*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_thread_context.call(this, context, context_size)
    end
    def request(this : IDebugAdvanced2*, request : UInt32, in_buffer : Void*, in_buffer_size : UInt32, out_buffer : Void*, out_buffer_size : UInt32, out_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, request, in_buffer, in_buffer_size, out_buffer, out_buffer_size, out_size)
    end
    def get_source_file_information(this : IDebugAdvanced2*, which : UInt32, source_file : Win32cr::Foundation::PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_information.call(this, which, source_file, arg64, arg32, buffer, buffer_size, info_size)
    end
    def find_source_file_and_token(this : IDebugAdvanced2*, start_element : UInt32, mod_addr : UInt64, file : Win32cr::Foundation::PSTR, flags : UInt32, file_token : Void*, file_token_size : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_and_token.call(this, start_element, mod_addr, file, flags, file_token, file_token_size, found_element, buffer, buffer_size, found_size)
    end
    def get_symbol_information(this : IDebugAdvanced2*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt8*, string_buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size)
    end
    def get_system_object_information(this : IDebugAdvanced2*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size)
    end

  end

  @[Extern]
  record IDebugAdvanced3Vtbl,
    query_interface : Proc(IDebugAdvanced3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAdvanced3*, UInt32),
    release : Proc(IDebugAdvanced3*, UInt32),
    get_thread_context : Proc(IDebugAdvanced3*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_thread_context : Proc(IDebugAdvanced3*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    request : Proc(IDebugAdvanced3*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_information : Proc(IDebugAdvanced3*, UInt32, Win32cr::Foundation::PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    find_source_file_and_token : Proc(IDebugAdvanced3*, UInt32, UInt64, Win32cr::Foundation::PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_object_information : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_information_wide : Proc(IDebugAdvanced3*, UInt32, Win32cr::Foundation::PWSTR, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    find_source_file_and_token_wide : Proc(IDebugAdvanced3*, UInt32, UInt64, Win32cr::Foundation::PWSTR, UInt32, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information_wide : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAdvanced3, lpVtbl : IDebugAdvanced3Vtbl* do
    GUID = LibC::GUID.new(0xcba4abb4_u32, 0x84c4_u16, 0x444d_u16, StaticArray[0x87_u8, 0xca_u8, 0xa0_u8, 0x4e_u8, 0x13_u8, 0x28_u8, 0x67_u8, 0x39_u8])
    def query_interface(this : IDebugAdvanced3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAdvanced3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAdvanced3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_thread_context(this : IDebugAdvanced3*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_context.call(this, context, context_size)
    end
    def set_thread_context(this : IDebugAdvanced3*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_thread_context.call(this, context, context_size)
    end
    def request(this : IDebugAdvanced3*, request : UInt32, in_buffer : Void*, in_buffer_size : UInt32, out_buffer : Void*, out_buffer_size : UInt32, out_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, request, in_buffer, in_buffer_size, out_buffer, out_buffer_size, out_size)
    end
    def get_source_file_information(this : IDebugAdvanced3*, which : UInt32, source_file : Win32cr::Foundation::PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_information.call(this, which, source_file, arg64, arg32, buffer, buffer_size, info_size)
    end
    def find_source_file_and_token(this : IDebugAdvanced3*, start_element : UInt32, mod_addr : UInt64, file : Win32cr::Foundation::PSTR, flags : UInt32, file_token : Void*, file_token_size : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_and_token.call(this, start_element, mod_addr, file, flags, file_token, file_token_size, found_element, buffer, buffer_size, found_size)
    end
    def get_symbol_information(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt8*, string_buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size)
    end
    def get_system_object_information(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size)
    end
    def get_source_file_information_wide(this : IDebugAdvanced3*, which : UInt32, source_file : Win32cr::Foundation::PWSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_information_wide.call(this, which, source_file, arg64, arg32, buffer, buffer_size, info_size)
    end
    def find_source_file_and_token_wide(this : IDebugAdvanced3*, start_element : UInt32, mod_addr : UInt64, file : Win32cr::Foundation::PWSTR, flags : UInt32, file_token : Void*, file_token_size : UInt32, found_element : UInt32*, buffer : UInt16*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_and_token_wide.call(this, start_element, mod_addr, file, flags, file_token, file_token_size, found_element, buffer, buffer_size, found_size)
    end
    def get_symbol_information_wide(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt16*, string_buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information_wide.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size)
    end

  end

  @[Extern]
  record IDebugAdvanced4Vtbl,
    query_interface : Proc(IDebugAdvanced4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAdvanced4*, UInt32),
    release : Proc(IDebugAdvanced4*, UInt32),
    get_thread_context : Proc(IDebugAdvanced4*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_thread_context : Proc(IDebugAdvanced4*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    request : Proc(IDebugAdvanced4*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_information : Proc(IDebugAdvanced4*, UInt32, Win32cr::Foundation::PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    find_source_file_and_token : Proc(IDebugAdvanced4*, UInt32, UInt64, Win32cr::Foundation::PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_object_information : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_information_wide : Proc(IDebugAdvanced4*, UInt32, Win32cr::Foundation::PWSTR, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    find_source_file_and_token_wide : Proc(IDebugAdvanced4*, UInt32, UInt64, Win32cr::Foundation::PWSTR, UInt32, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information_wide : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_information_wide_ex : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_EX*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAdvanced4, lpVtbl : IDebugAdvanced4Vtbl* do
    GUID = LibC::GUID.new(0xd1069067_u32, 0x2a65_u16, 0x4bf0_u16, StaticArray[0xae_u8, 0x97_u8, 0x76_u8, 0x18_u8, 0x4b_u8, 0x67_u8, 0x85_u8, 0x6b_u8])
    def query_interface(this : IDebugAdvanced4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAdvanced4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAdvanced4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_thread_context(this : IDebugAdvanced4*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_context.call(this, context, context_size)
    end
    def set_thread_context(this : IDebugAdvanced4*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_thread_context.call(this, context, context_size)
    end
    def request(this : IDebugAdvanced4*, request : UInt32, in_buffer : Void*, in_buffer_size : UInt32, out_buffer : Void*, out_buffer_size : UInt32, out_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, request, in_buffer, in_buffer_size, out_buffer, out_buffer_size, out_size)
    end
    def get_source_file_information(this : IDebugAdvanced4*, which : UInt32, source_file : Win32cr::Foundation::PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_information.call(this, which, source_file, arg64, arg32, buffer, buffer_size, info_size)
    end
    def find_source_file_and_token(this : IDebugAdvanced4*, start_element : UInt32, mod_addr : UInt64, file : Win32cr::Foundation::PSTR, flags : UInt32, file_token : Void*, file_token_size : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_and_token.call(this, start_element, mod_addr, file, flags, file_token, file_token_size, found_element, buffer, buffer_size, found_size)
    end
    def get_symbol_information(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt8*, string_buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size)
    end
    def get_system_object_information(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffer_size, info_size)
    end
    def get_source_file_information_wide(this : IDebugAdvanced4*, which : UInt32, source_file : Win32cr::Foundation::PWSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_information_wide.call(this, which, source_file, arg64, arg32, buffer, buffer_size, info_size)
    end
    def find_source_file_and_token_wide(this : IDebugAdvanced4*, start_element : UInt32, mod_addr : UInt64, file : Win32cr::Foundation::PWSTR, flags : UInt32, file_token : Void*, file_token_size : UInt32, found_element : UInt32*, buffer : UInt16*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_and_token_wide.call(this, start_element, mod_addr, file, flags, file_token, file_token_size, found_element, buffer, buffer_size, found_size)
    end
    def get_symbol_information_wide(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt16*, string_buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information_wide.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size)
    end
    def get_symbol_information_wide_ex(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffer_size : UInt32, info_size : UInt32*, string_buffer : UInt16*, string_buffer_size : UInt32, string_size : UInt32*, pInfoEx : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO_EX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_information_wide_ex.call(this, which, arg64, arg32, buffer, buffer_size, info_size, string_buffer, string_buffer_size, string_size, pInfoEx)
    end

  end

  @[Extern]
  record IDebugBreakpointVtbl,
    query_interface : Proc(IDebugBreakpoint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugBreakpoint*, UInt32),
    release : Proc(IDebugBreakpoint*, UInt32),
    get_id : Proc(IDebugBreakpoint*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugBreakpoint*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_adder : Proc(IDebugBreakpoint*, Void**, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IDebugBreakpoint*, UInt32*, Win32cr::Foundation::HRESULT),
    add_flags : Proc(IDebugBreakpoint*, UInt32, Win32cr::Foundation::HRESULT),
    remove_flags : Proc(IDebugBreakpoint*, UInt32, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IDebugBreakpoint*, UInt32, Win32cr::Foundation::HRESULT),
    get_offset : Proc(IDebugBreakpoint*, UInt64*, Win32cr::Foundation::HRESULT),
    set_offset : Proc(IDebugBreakpoint*, UInt64, Win32cr::Foundation::HRESULT),
    get_data_parameters : Proc(IDebugBreakpoint*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_data_parameters : Proc(IDebugBreakpoint*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_pass_count : Proc(IDebugBreakpoint*, UInt32*, Win32cr::Foundation::HRESULT),
    set_pass_count : Proc(IDebugBreakpoint*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_pass_count : Proc(IDebugBreakpoint*, UInt32*, Win32cr::Foundation::HRESULT),
    get_match_thread_id : Proc(IDebugBreakpoint*, UInt32*, Win32cr::Foundation::HRESULT),
    set_match_thread_id : Proc(IDebugBreakpoint*, UInt32, Win32cr::Foundation::HRESULT),
    get_command : Proc(IDebugBreakpoint*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_command : Proc(IDebugBreakpoint*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_offset_expression : Proc(IDebugBreakpoint*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_offset_expression : Proc(IDebugBreakpoint*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_parameters : Proc(IDebugBreakpoint*, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugBreakpoint, lpVtbl : IDebugBreakpointVtbl* do
    GUID = LibC::GUID.new(0x5bd9d474_u32, 0x5975_u16, 0x423a_u16, StaticArray[0xb8_u8, 0x8b_u8, 0x65_u8, 0xa8_u8, 0xe7_u8, 0x11_u8, 0xe_u8, 0x65_u8])
    def query_interface(this : IDebugBreakpoint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugBreakpoint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugBreakpoint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IDebugBreakpoint*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_type(this : IDebugBreakpoint*, break_type : UInt32*, proc_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, break_type, proc_type)
    end
    def get_adder(this : IDebugBreakpoint*, adder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adder.call(this, adder)
    end
    def get_flags(this : IDebugBreakpoint*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, flags)
    end
    def add_flags(this : IDebugBreakpoint*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_flags.call(this, flags)
    end
    def remove_flags(this : IDebugBreakpoint*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_flags.call(this, flags)
    end
    def set_flags(this : IDebugBreakpoint*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, flags)
    end
    def get_offset(this : IDebugBreakpoint*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset.call(this, offset)
    end
    def set_offset(this : IDebugBreakpoint*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset.call(this, offset)
    end
    def get_data_parameters(this : IDebugBreakpoint*, size : UInt32*, access_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_parameters.call(this, size, access_type)
    end
    def set_data_parameters(this : IDebugBreakpoint*, size : UInt32, access_type : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data_parameters.call(this, size, access_type)
    end
    def get_pass_count(this : IDebugBreakpoint*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pass_count.call(this, count)
    end
    def set_pass_count(this : IDebugBreakpoint*, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pass_count.call(this, count)
    end
    def get_current_pass_count(this : IDebugBreakpoint*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_pass_count.call(this, count)
    end
    def get_match_thread_id(this : IDebugBreakpoint*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_match_thread_id.call(this, id)
    end
    def set_match_thread_id(this : IDebugBreakpoint*, thread : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_match_thread_id.call(this, thread)
    end
    def get_command(this : IDebugBreakpoint*, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command.call(this, buffer, buffer_size, command_size)
    end
    def set_command(this : IDebugBreakpoint*, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command.call(this, command)
    end
    def get_offset_expression(this : IDebugBreakpoint*, buffer : UInt8*, buffer_size : UInt32, expression_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_expression.call(this, buffer, buffer_size, expression_size)
    end
    def set_offset_expression(this : IDebugBreakpoint*, expression : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset_expression.call(this, expression)
    end
    def get_parameters(this : IDebugBreakpoint*, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameters.call(this, params)
    end

  end

  @[Extern]
  record IDebugBreakpoint2Vtbl,
    query_interface : Proc(IDebugBreakpoint2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugBreakpoint2*, UInt32),
    release : Proc(IDebugBreakpoint2*, UInt32),
    get_id : Proc(IDebugBreakpoint2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugBreakpoint2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_adder : Proc(IDebugBreakpoint2*, Void**, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IDebugBreakpoint2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_flags : Proc(IDebugBreakpoint2*, UInt32, Win32cr::Foundation::HRESULT),
    remove_flags : Proc(IDebugBreakpoint2*, UInt32, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IDebugBreakpoint2*, UInt32, Win32cr::Foundation::HRESULT),
    get_offset : Proc(IDebugBreakpoint2*, UInt64*, Win32cr::Foundation::HRESULT),
    set_offset : Proc(IDebugBreakpoint2*, UInt64, Win32cr::Foundation::HRESULT),
    get_data_parameters : Proc(IDebugBreakpoint2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_data_parameters : Proc(IDebugBreakpoint2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_pass_count : Proc(IDebugBreakpoint2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_pass_count : Proc(IDebugBreakpoint2*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_pass_count : Proc(IDebugBreakpoint2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_match_thread_id : Proc(IDebugBreakpoint2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_match_thread_id : Proc(IDebugBreakpoint2*, UInt32, Win32cr::Foundation::HRESULT),
    get_command : Proc(IDebugBreakpoint2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_command : Proc(IDebugBreakpoint2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_offset_expression : Proc(IDebugBreakpoint2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_offset_expression : Proc(IDebugBreakpoint2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_parameters : Proc(IDebugBreakpoint2*, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_command_wide : Proc(IDebugBreakpoint2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_command_wide : Proc(IDebugBreakpoint2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_offset_expression_wide : Proc(IDebugBreakpoint2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_offset_expression_wide : Proc(IDebugBreakpoint2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugBreakpoint2, lpVtbl : IDebugBreakpoint2Vtbl* do
    GUID = LibC::GUID.new(0x1b278d20_u32, 0x79f2_u16, 0x426e_u16, StaticArray[0xa3_u8, 0xf9_u8, 0xc1_u8, 0xdd_u8, 0xf3_u8, 0x75_u8, 0xd4_u8, 0x8e_u8])
    def query_interface(this : IDebugBreakpoint2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugBreakpoint2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugBreakpoint2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IDebugBreakpoint2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_type(this : IDebugBreakpoint2*, break_type : UInt32*, proc_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, break_type, proc_type)
    end
    def get_adder(this : IDebugBreakpoint2*, adder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adder.call(this, adder)
    end
    def get_flags(this : IDebugBreakpoint2*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, flags)
    end
    def add_flags(this : IDebugBreakpoint2*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_flags.call(this, flags)
    end
    def remove_flags(this : IDebugBreakpoint2*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_flags.call(this, flags)
    end
    def set_flags(this : IDebugBreakpoint2*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, flags)
    end
    def get_offset(this : IDebugBreakpoint2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset.call(this, offset)
    end
    def set_offset(this : IDebugBreakpoint2*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset.call(this, offset)
    end
    def get_data_parameters(this : IDebugBreakpoint2*, size : UInt32*, access_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_parameters.call(this, size, access_type)
    end
    def set_data_parameters(this : IDebugBreakpoint2*, size : UInt32, access_type : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data_parameters.call(this, size, access_type)
    end
    def get_pass_count(this : IDebugBreakpoint2*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pass_count.call(this, count)
    end
    def set_pass_count(this : IDebugBreakpoint2*, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pass_count.call(this, count)
    end
    def get_current_pass_count(this : IDebugBreakpoint2*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_pass_count.call(this, count)
    end
    def get_match_thread_id(this : IDebugBreakpoint2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_match_thread_id.call(this, id)
    end
    def set_match_thread_id(this : IDebugBreakpoint2*, thread : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_match_thread_id.call(this, thread)
    end
    def get_command(this : IDebugBreakpoint2*, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command.call(this, buffer, buffer_size, command_size)
    end
    def set_command(this : IDebugBreakpoint2*, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command.call(this, command)
    end
    def get_offset_expression(this : IDebugBreakpoint2*, buffer : UInt8*, buffer_size : UInt32, expression_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_expression.call(this, buffer, buffer_size, expression_size)
    end
    def set_offset_expression(this : IDebugBreakpoint2*, expression : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset_expression.call(this, expression)
    end
    def get_parameters(this : IDebugBreakpoint2*, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameters.call(this, params)
    end
    def get_command_wide(this : IDebugBreakpoint2*, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command_wide.call(this, buffer, buffer_size, command_size)
    end
    def set_command_wide(this : IDebugBreakpoint2*, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command_wide.call(this, command)
    end
    def get_offset_expression_wide(this : IDebugBreakpoint2*, buffer : UInt16*, buffer_size : UInt32, expression_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_expression_wide.call(this, buffer, buffer_size, expression_size)
    end
    def set_offset_expression_wide(this : IDebugBreakpoint2*, expression : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset_expression_wide.call(this, expression)
    end

  end

  @[Extern]
  record IDebugBreakpoint3Vtbl,
    query_interface : Proc(IDebugBreakpoint3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugBreakpoint3*, UInt32),
    release : Proc(IDebugBreakpoint3*, UInt32),
    get_id : Proc(IDebugBreakpoint3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugBreakpoint3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_adder : Proc(IDebugBreakpoint3*, Void**, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IDebugBreakpoint3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_flags : Proc(IDebugBreakpoint3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_flags : Proc(IDebugBreakpoint3*, UInt32, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IDebugBreakpoint3*, UInt32, Win32cr::Foundation::HRESULT),
    get_offset : Proc(IDebugBreakpoint3*, UInt64*, Win32cr::Foundation::HRESULT),
    set_offset : Proc(IDebugBreakpoint3*, UInt64, Win32cr::Foundation::HRESULT),
    get_data_parameters : Proc(IDebugBreakpoint3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_data_parameters : Proc(IDebugBreakpoint3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_pass_count : Proc(IDebugBreakpoint3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_pass_count : Proc(IDebugBreakpoint3*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_pass_count : Proc(IDebugBreakpoint3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_match_thread_id : Proc(IDebugBreakpoint3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_match_thread_id : Proc(IDebugBreakpoint3*, UInt32, Win32cr::Foundation::HRESULT),
    get_command : Proc(IDebugBreakpoint3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_command : Proc(IDebugBreakpoint3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_offset_expression : Proc(IDebugBreakpoint3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_offset_expression : Proc(IDebugBreakpoint3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_parameters : Proc(IDebugBreakpoint3*, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_command_wide : Proc(IDebugBreakpoint3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_command_wide : Proc(IDebugBreakpoint3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_offset_expression_wide : Proc(IDebugBreakpoint3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_offset_expression_wide : Proc(IDebugBreakpoint3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IDebugBreakpoint3*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugBreakpoint3, lpVtbl : IDebugBreakpoint3Vtbl* do
    GUID = LibC::GUID.new(0x38f5c249_u32, 0xb448_u16, 0x43bb_u16, StaticArray[0x98_u8, 0x35_u8, 0x57_u8, 0x9d_u8, 0x4e_u8, 0xc0_u8, 0x22_u8, 0x49_u8])
    def query_interface(this : IDebugBreakpoint3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugBreakpoint3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugBreakpoint3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IDebugBreakpoint3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_type(this : IDebugBreakpoint3*, break_type : UInt32*, proc_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, break_type, proc_type)
    end
    def get_adder(this : IDebugBreakpoint3*, adder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adder.call(this, adder)
    end
    def get_flags(this : IDebugBreakpoint3*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, flags)
    end
    def add_flags(this : IDebugBreakpoint3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_flags.call(this, flags)
    end
    def remove_flags(this : IDebugBreakpoint3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_flags.call(this, flags)
    end
    def set_flags(this : IDebugBreakpoint3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, flags)
    end
    def get_offset(this : IDebugBreakpoint3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset.call(this, offset)
    end
    def set_offset(this : IDebugBreakpoint3*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset.call(this, offset)
    end
    def get_data_parameters(this : IDebugBreakpoint3*, size : UInt32*, access_type : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_parameters.call(this, size, access_type)
    end
    def set_data_parameters(this : IDebugBreakpoint3*, size : UInt32, access_type : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data_parameters.call(this, size, access_type)
    end
    def get_pass_count(this : IDebugBreakpoint3*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pass_count.call(this, count)
    end
    def set_pass_count(this : IDebugBreakpoint3*, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pass_count.call(this, count)
    end
    def get_current_pass_count(this : IDebugBreakpoint3*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_pass_count.call(this, count)
    end
    def get_match_thread_id(this : IDebugBreakpoint3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_match_thread_id.call(this, id)
    end
    def set_match_thread_id(this : IDebugBreakpoint3*, thread : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_match_thread_id.call(this, thread)
    end
    def get_command(this : IDebugBreakpoint3*, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command.call(this, buffer, buffer_size, command_size)
    end
    def set_command(this : IDebugBreakpoint3*, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command.call(this, command)
    end
    def get_offset_expression(this : IDebugBreakpoint3*, buffer : UInt8*, buffer_size : UInt32, expression_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_expression.call(this, buffer, buffer_size, expression_size)
    end
    def set_offset_expression(this : IDebugBreakpoint3*, expression : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset_expression.call(this, expression)
    end
    def get_parameters(this : IDebugBreakpoint3*, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameters.call(this, params)
    end
    def get_command_wide(this : IDebugBreakpoint3*, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command_wide.call(this, buffer, buffer_size, command_size)
    end
    def set_command_wide(this : IDebugBreakpoint3*, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command_wide.call(this, command)
    end
    def get_offset_expression_wide(this : IDebugBreakpoint3*, buffer : UInt16*, buffer_size : UInt32, expression_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_expression_wide.call(this, buffer, buffer_size, expression_size)
    end
    def set_offset_expression_wide(this : IDebugBreakpoint3*, expression : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_offset_expression_wide.call(this, expression)
    end
    def get_guid(this : IDebugBreakpoint3*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guid)
    end

  end

  @[Extern]
  record IDebugClientVtbl,
    query_interface : Proc(IDebugClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient*, UInt32),
    release : Proc(IDebugClient*, UInt32),
    attach_kernel : Proc(IDebugClient*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient, lpVtbl : IDebugClientVtbl* do
    GUID = LibC::GUID.new(0x27fe5639_u32, 0x8407_u16, 0x4f47_u16, StaticArray[0x83_u8, 0x64_u8, 0xee_u8, 0x11_u8, 0x8f_u8, 0xb0_u8, 0x8a_u8, 0xc8_u8])
    def query_interface(this : IDebugClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end

  end

  @[Extern]
  record IDebugClient2Vtbl,
    query_interface : Proc(IDebugClient2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient2*, UInt32),
    release : Proc(IDebugClient2*, UInt32),
    attach_kernel : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient2*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient2*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient2*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient2*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient2*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient2*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient2*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient2*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient2*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient2*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient2*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient2*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient2*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient2*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient2*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient2*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient2*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient2*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient2*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient2*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient2*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient2, lpVtbl : IDebugClient2Vtbl* do
    GUID = LibC::GUID.new(0xedbed635_u32, 0x372e_u16, 0x4dab_u16, StaticArray[0xbb_u8, 0xfe_u8, 0xed_u8, 0xd_u8, 0x2f_u8, 0x63_u8, 0xbe_u8, 0x81_u8])
    def query_interface(this : IDebugClient2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient2*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient2*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient2*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient2*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient2*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient2*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient2*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient2*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient2*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient2*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient2*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient2*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient2*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient2*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient2*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient2*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient2*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient2*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient2*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient2*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient2*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient2*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient2*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient2*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient2*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient2*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient2*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient2*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient2*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient2*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient2*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient2*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient2*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient2*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient2*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient2*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient2*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient2*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient2*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient2*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient2*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient2*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient2*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end

  end

  @[Extern]
  record IDebugClient3Vtbl,
    query_interface : Proc(IDebugClient3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient3*, UInt32),
    release : Proc(IDebugClient3*, UInt32),
    attach_kernel : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient3*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient3*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient3*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient3*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient3*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient3*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient3*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient3*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient3*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient3*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient3*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient3*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient3*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient3*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient3*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient3*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient3*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient3*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient3*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient3, lpVtbl : IDebugClient3Vtbl* do
    GUID = LibC::GUID.new(0xdd492d7f_u32, 0x71b8_u16, 0x4ad6_u16, StaticArray[0xa8_u8, 0xdc_u8, 0x1c_u8, 0x88_u8, 0x74_u8, 0x79_u8, 0xff_u8, 0x91_u8])
    def query_interface(this : IDebugClient3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient3*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient3*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient3*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient3*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient3*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient3*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient3*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient3*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient3*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient3*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient3*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient3*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient3*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient3*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient3*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient3*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient3*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient3*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient3*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient3*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient3*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient3*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient3*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient3*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient3*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient3*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient3*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient3*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient3*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient3*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient3*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient3*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient3*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient3*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient3*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient3*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient3*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient3*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient3*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient3*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient3*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient3*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient3*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient3*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient3*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient3*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end

  end

  @[Extern]
  record IDebugClient4Vtbl,
    query_interface : Proc(IDebugClient4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient4*, UInt32),
    release : Proc(IDebugClient4*, UInt32),
    attach_kernel : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient4*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient4*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient4*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient4*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient4*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient4*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient4*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient4*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient4*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient4*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient4*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient4*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient4*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient4*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient4*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient4*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient4*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient4*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient4*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient4*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient4*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide : Proc(IDebugClient4*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    write_dump_file_wide : Proc(IDebugClient4*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file_wide : Proc(IDebugClient4*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_number_dump_files : Proc(IDebugClient4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file : Proc(IDebugClient4*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file_wide : Proc(IDebugClient4*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient4, lpVtbl : IDebugClient4Vtbl* do
    GUID = LibC::GUID.new(0xca83c3de_u32, 0x5089_u16, 0x4cf8_u16, StaticArray[0x93_u8, 0xc8_u8, 0xd8_u8, 0x92_u8, 0x38_u8, 0x7f_u8, 0x2a_u8, 0x5e_u8])
    def query_interface(this : IDebugClient4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient4*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient4*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient4*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient4*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient4*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient4*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient4*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient4*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient4*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient4*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient4*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient4*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient4*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient4*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient4*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient4*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient4*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient4*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient4*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient4*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient4*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient4*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient4*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient4*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient4*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient4*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient4*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient4*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient4*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient4*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient4*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient4*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient4*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient4*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient4*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient4*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient4*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient4*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient4*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient4*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient4*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient4*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient4*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient4*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient4*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient4*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient4*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def open_dump_file_wide(this : IDebugClient4*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide.call(this, file_name, file_handle)
    end
    def write_dump_file_wide(this : IDebugClient4*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file_wide.call(this, file_name, file_handle, qualifier, format_flags, comment)
    end
    def add_dump_information_file_wide(this : IDebugClient4*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file_wide.call(this, file_name, file_handle, type__)
    end
    def get_number_dump_files(this : IDebugClient4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_dump_files.call(this, number)
    end
    def get_dump_file(this : IDebugClient4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def get_dump_file_wide(this : IDebugClient4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file_wide.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end

  end

  @[Extern]
  record IDebugClient5Vtbl,
    query_interface : Proc(IDebugClient5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient5*, UInt32),
    release : Proc(IDebugClient5*, UInt32),
    attach_kernel : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient5*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient5*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient5*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient5*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient5*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient5*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient5*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient5*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient5*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    write_dump_file_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_number_dump_files : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file : Proc(IDebugClient5*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file_wide : Proc(IDebugClient5*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    attach_kernel_wide : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options_wide : Proc(IDebugClient5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_process_server_wide : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    start_server_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_servers_wide : Proc(IDebugClient5*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_output_callbacks_wide : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks_wide : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    get_output_line_prefix_wide : Proc(IDebugClient5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_identity_wide : Proc(IDebugClient5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity_wide : Proc(IDebugClient5*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks_wide : Proc(IDebugClient5*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks_wide : Proc(IDebugClient5*, Void*, Win32cr::Foundation::HRESULT),
    create_process2 : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    create_process2_wide : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_process_and_attach2 : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach2_wide : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    push_output_line_prefix : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    push_output_line_prefix_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    pop_output_line_prefix : Proc(IDebugClient5*, UInt64, Win32cr::Foundation::HRESULT),
    get_number_input_callbacks : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_output_callbacks : Proc(IDebugClient5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_event_callbacks : Proc(IDebugClient5*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_quit_lock_string : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string : Proc(IDebugClient5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_quit_lock_string_wide : Proc(IDebugClient5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string_wide : Proc(IDebugClient5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient5, lpVtbl : IDebugClient5Vtbl* do
    GUID = LibC::GUID.new(0xe3acb9d7_u32, 0x7ec2_u16, 0x4f0c_u16, StaticArray[0xa0_u8, 0xda_u8, 0xe8_u8, 0x1e_u8, 0xc_u8, 0xbb_u8, 0xe6_u8, 0x28_u8])
    def query_interface(this : IDebugClient5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient5*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient5*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient5*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient5*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient5*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient5*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient5*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient5*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient5*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient5*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient5*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient5*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient5*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient5*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient5*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient5*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient5*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient5*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient5*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient5*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient5*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient5*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient5*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient5*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient5*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient5*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient5*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient5*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient5*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient5*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient5*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient5*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient5*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient5*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient5*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient5*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient5*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient5*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient5*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient5*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient5*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient5*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient5*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def open_dump_file_wide(this : IDebugClient5*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide.call(this, file_name, file_handle)
    end
    def write_dump_file_wide(this : IDebugClient5*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file_wide.call(this, file_name, file_handle, qualifier, format_flags, comment)
    end
    def add_dump_information_file_wide(this : IDebugClient5*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file_wide.call(this, file_name, file_handle, type__)
    end
    def get_number_dump_files(this : IDebugClient5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_dump_files.call(this, number)
    end
    def get_dump_file(this : IDebugClient5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def get_dump_file_wide(this : IDebugClient5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file_wide.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def attach_kernel_wide(this : IDebugClient5*, flags : UInt32, connect_options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel_wide.call(this, flags, connect_options)
    end
    def get_kernel_connection_options_wide(this : IDebugClient5*, buffer : UInt16*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options_wide.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options_wide(this : IDebugClient5*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options_wide.call(this, options)
    end
    def start_process_server_wide(this : IDebugClient5*, flags : UInt32, options : Win32cr::Foundation::PWSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server_wide.call(this, flags, options, reserved)
    end
    def connect_process_server_wide(this : IDebugClient5*, remote_options : Win32cr::Foundation::PWSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server_wide.call(this, remote_options, server)
    end
    def start_server_wide(this : IDebugClient5*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server_wide.call(this, options)
    end
    def output_servers_wide(this : IDebugClient5*, output_control : UInt32, machine : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers_wide.call(this, output_control, machine, flags)
    end
    def get_output_callbacks_wide(this : IDebugClient5*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks_wide.call(this, callbacks)
    end
    def set_output_callbacks_wide(this : IDebugClient5*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks_wide.call(this, callbacks)
    end
    def get_output_line_prefix_wide(this : IDebugClient5*, buffer : UInt16*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix_wide.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix_wide(this : IDebugClient5*, prefix : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix_wide.call(this, prefix)
    end
    def get_identity_wide(this : IDebugClient5*, buffer : UInt16*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity_wide.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity_wide(this : IDebugClient5*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity_wide.call(this, output_control, flags, format)
    end
    def get_event_callbacks_wide(this : IDebugClient5*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks_wide.call(this, callbacks)
    end
    def set_event_callbacks_wide(this : IDebugClient5*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks_wide.call(this, callbacks)
    end
    def create_process2(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process2_wide(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process_and_attach2(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def create_process_and_attach2_wide(this : IDebugClient5*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def push_output_line_prefix(this : IDebugClient5*, new_prefix : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix.call(this, new_prefix, handle)
    end
    def push_output_line_prefix_wide(this : IDebugClient5*, new_prefix : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix_wide.call(this, new_prefix, handle)
    end
    def pop_output_line_prefix(this : IDebugClient5*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_output_line_prefix.call(this, handle)
    end
    def get_number_input_callbacks(this : IDebugClient5*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_input_callbacks.call(this, count)
    end
    def get_number_output_callbacks(this : IDebugClient5*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_output_callbacks.call(this, count)
    end
    def get_number_event_callbacks(this : IDebugClient5*, event_flags : UInt32, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_callbacks.call(this, event_flags, count)
    end
    def get_quit_lock_string(this : IDebugClient5*, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string(this : IDebugClient5*, string : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string.call(this, string)
    end
    def get_quit_lock_string_wide(this : IDebugClient5*, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string_wide.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string_wide(this : IDebugClient5*, string : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string_wide.call(this, string)
    end

  end

  @[Extern]
  record IDebugClient6Vtbl,
    query_interface : Proc(IDebugClient6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient6*, UInt32),
    release : Proc(IDebugClient6*, UInt32),
    attach_kernel : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient6*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient6*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient6*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient6*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient6*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient6*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient6*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient6*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient6*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    write_dump_file_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_number_dump_files : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file : Proc(IDebugClient6*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file_wide : Proc(IDebugClient6*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    attach_kernel_wide : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options_wide : Proc(IDebugClient6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_process_server_wide : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    start_server_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_servers_wide : Proc(IDebugClient6*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_output_callbacks_wide : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks_wide : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    get_output_line_prefix_wide : Proc(IDebugClient6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_identity_wide : Proc(IDebugClient6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity_wide : Proc(IDebugClient6*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks_wide : Proc(IDebugClient6*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks_wide : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT),
    create_process2 : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    create_process2_wide : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_process_and_attach2 : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach2_wide : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    push_output_line_prefix : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    push_output_line_prefix_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    pop_output_line_prefix : Proc(IDebugClient6*, UInt64, Win32cr::Foundation::HRESULT),
    get_number_input_callbacks : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_output_callbacks : Proc(IDebugClient6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_event_callbacks : Proc(IDebugClient6*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_quit_lock_string : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string : Proc(IDebugClient6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_quit_lock_string_wide : Proc(IDebugClient6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string_wide : Proc(IDebugClient6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_event_context_callbacks : Proc(IDebugClient6*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient6, lpVtbl : IDebugClient6Vtbl* do
    GUID = LibC::GUID.new(0xfd28b4c5_u32, 0xc498_u16, 0x4686_u16, StaticArray[0xa2_u8, 0x8e_u8, 0x62_u8, 0xca_u8, 0xd2_u8, 0x15_u8, 0x4e_u8, 0xb3_u8])
    def query_interface(this : IDebugClient6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient6*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient6*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient6*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient6*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient6*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient6*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient6*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient6*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient6*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient6*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient6*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient6*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient6*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient6*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient6*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient6*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient6*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient6*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient6*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient6*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient6*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient6*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient6*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient6*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient6*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient6*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient6*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient6*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient6*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient6*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient6*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient6*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient6*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient6*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient6*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient6*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient6*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient6*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient6*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient6*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def open_dump_file_wide(this : IDebugClient6*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide.call(this, file_name, file_handle)
    end
    def write_dump_file_wide(this : IDebugClient6*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file_wide.call(this, file_name, file_handle, qualifier, format_flags, comment)
    end
    def add_dump_information_file_wide(this : IDebugClient6*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file_wide.call(this, file_name, file_handle, type__)
    end
    def get_number_dump_files(this : IDebugClient6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_dump_files.call(this, number)
    end
    def get_dump_file(this : IDebugClient6*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def get_dump_file_wide(this : IDebugClient6*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file_wide.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def attach_kernel_wide(this : IDebugClient6*, flags : UInt32, connect_options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel_wide.call(this, flags, connect_options)
    end
    def get_kernel_connection_options_wide(this : IDebugClient6*, buffer : UInt16*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options_wide.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options_wide(this : IDebugClient6*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options_wide.call(this, options)
    end
    def start_process_server_wide(this : IDebugClient6*, flags : UInt32, options : Win32cr::Foundation::PWSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server_wide.call(this, flags, options, reserved)
    end
    def connect_process_server_wide(this : IDebugClient6*, remote_options : Win32cr::Foundation::PWSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server_wide.call(this, remote_options, server)
    end
    def start_server_wide(this : IDebugClient6*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server_wide.call(this, options)
    end
    def output_servers_wide(this : IDebugClient6*, output_control : UInt32, machine : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers_wide.call(this, output_control, machine, flags)
    end
    def get_output_callbacks_wide(this : IDebugClient6*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks_wide.call(this, callbacks)
    end
    def set_output_callbacks_wide(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks_wide.call(this, callbacks)
    end
    def get_output_line_prefix_wide(this : IDebugClient6*, buffer : UInt16*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix_wide.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix_wide(this : IDebugClient6*, prefix : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix_wide.call(this, prefix)
    end
    def get_identity_wide(this : IDebugClient6*, buffer : UInt16*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity_wide.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity_wide(this : IDebugClient6*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity_wide.call(this, output_control, flags, format)
    end
    def get_event_callbacks_wide(this : IDebugClient6*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks_wide.call(this, callbacks)
    end
    def set_event_callbacks_wide(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks_wide.call(this, callbacks)
    end
    def create_process2(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process2_wide(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process_and_attach2(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def create_process_and_attach2_wide(this : IDebugClient6*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def push_output_line_prefix(this : IDebugClient6*, new_prefix : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix.call(this, new_prefix, handle)
    end
    def push_output_line_prefix_wide(this : IDebugClient6*, new_prefix : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix_wide.call(this, new_prefix, handle)
    end
    def pop_output_line_prefix(this : IDebugClient6*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_output_line_prefix.call(this, handle)
    end
    def get_number_input_callbacks(this : IDebugClient6*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_input_callbacks.call(this, count)
    end
    def get_number_output_callbacks(this : IDebugClient6*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_output_callbacks.call(this, count)
    end
    def get_number_event_callbacks(this : IDebugClient6*, event_flags : UInt32, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_callbacks.call(this, event_flags, count)
    end
    def get_quit_lock_string(this : IDebugClient6*, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string(this : IDebugClient6*, string : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string.call(this, string)
    end
    def get_quit_lock_string_wide(this : IDebugClient6*, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string_wide.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string_wide(this : IDebugClient6*, string : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string_wide.call(this, string)
    end
    def set_event_context_callbacks(this : IDebugClient6*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_context_callbacks.call(this, callbacks)
    end

  end

  @[Extern]
  record IDebugClient7Vtbl,
    query_interface : Proc(IDebugClient7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient7*, UInt32),
    release : Proc(IDebugClient7*, UInt32),
    attach_kernel : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient7*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient7*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient7*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient7*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient7*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient7*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient7*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient7*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient7*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    write_dump_file_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_number_dump_files : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file : Proc(IDebugClient7*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file_wide : Proc(IDebugClient7*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    attach_kernel_wide : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options_wide : Proc(IDebugClient7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_process_server_wide : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    start_server_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_servers_wide : Proc(IDebugClient7*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_output_callbacks_wide : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks_wide : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    get_output_line_prefix_wide : Proc(IDebugClient7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_identity_wide : Proc(IDebugClient7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity_wide : Proc(IDebugClient7*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks_wide : Proc(IDebugClient7*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks_wide : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    create_process2 : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    create_process2_wide : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_process_and_attach2 : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach2_wide : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    push_output_line_prefix : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    push_output_line_prefix_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    pop_output_line_prefix : Proc(IDebugClient7*, UInt64, Win32cr::Foundation::HRESULT),
    get_number_input_callbacks : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_output_callbacks : Proc(IDebugClient7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_event_callbacks : Proc(IDebugClient7*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_quit_lock_string : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string : Proc(IDebugClient7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_quit_lock_string_wide : Proc(IDebugClient7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string_wide : Proc(IDebugClient7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_event_context_callbacks : Proc(IDebugClient7*, Void*, Win32cr::Foundation::HRESULT),
    set_client_context : Proc(IDebugClient7*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient7, lpVtbl : IDebugClient7Vtbl* do
    GUID = LibC::GUID.new(0x13586be3_u32, 0x542e_u16, 0x481e_u16, StaticArray[0xb1_u8, 0xf2_u8, 0x84_u8, 0x97_u8, 0xba_u8, 0x74_u8, 0xf9_u8, 0xa9_u8])
    def query_interface(this : IDebugClient7*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient7*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient7*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient7*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient7*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient7*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient7*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient7*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient7*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient7*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient7*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient7*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient7*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient7*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient7*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient7*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient7*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient7*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient7*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient7*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient7*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient7*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient7*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient7*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient7*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient7*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient7*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient7*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient7*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient7*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient7*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient7*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient7*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient7*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient7*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient7*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient7*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient7*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient7*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient7*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient7*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient7*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient7*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def open_dump_file_wide(this : IDebugClient7*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide.call(this, file_name, file_handle)
    end
    def write_dump_file_wide(this : IDebugClient7*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file_wide.call(this, file_name, file_handle, qualifier, format_flags, comment)
    end
    def add_dump_information_file_wide(this : IDebugClient7*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file_wide.call(this, file_name, file_handle, type__)
    end
    def get_number_dump_files(this : IDebugClient7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_dump_files.call(this, number)
    end
    def get_dump_file(this : IDebugClient7*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def get_dump_file_wide(this : IDebugClient7*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file_wide.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def attach_kernel_wide(this : IDebugClient7*, flags : UInt32, connect_options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel_wide.call(this, flags, connect_options)
    end
    def get_kernel_connection_options_wide(this : IDebugClient7*, buffer : UInt16*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options_wide.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options_wide(this : IDebugClient7*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options_wide.call(this, options)
    end
    def start_process_server_wide(this : IDebugClient7*, flags : UInt32, options : Win32cr::Foundation::PWSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server_wide.call(this, flags, options, reserved)
    end
    def connect_process_server_wide(this : IDebugClient7*, remote_options : Win32cr::Foundation::PWSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server_wide.call(this, remote_options, server)
    end
    def start_server_wide(this : IDebugClient7*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server_wide.call(this, options)
    end
    def output_servers_wide(this : IDebugClient7*, output_control : UInt32, machine : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers_wide.call(this, output_control, machine, flags)
    end
    def get_output_callbacks_wide(this : IDebugClient7*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks_wide.call(this, callbacks)
    end
    def set_output_callbacks_wide(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks_wide.call(this, callbacks)
    end
    def get_output_line_prefix_wide(this : IDebugClient7*, buffer : UInt16*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix_wide.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix_wide(this : IDebugClient7*, prefix : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix_wide.call(this, prefix)
    end
    def get_identity_wide(this : IDebugClient7*, buffer : UInt16*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity_wide.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity_wide(this : IDebugClient7*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity_wide.call(this, output_control, flags, format)
    end
    def get_event_callbacks_wide(this : IDebugClient7*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks_wide.call(this, callbacks)
    end
    def set_event_callbacks_wide(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks_wide.call(this, callbacks)
    end
    def create_process2(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process2_wide(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process_and_attach2(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def create_process_and_attach2_wide(this : IDebugClient7*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def push_output_line_prefix(this : IDebugClient7*, new_prefix : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix.call(this, new_prefix, handle)
    end
    def push_output_line_prefix_wide(this : IDebugClient7*, new_prefix : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix_wide.call(this, new_prefix, handle)
    end
    def pop_output_line_prefix(this : IDebugClient7*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_output_line_prefix.call(this, handle)
    end
    def get_number_input_callbacks(this : IDebugClient7*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_input_callbacks.call(this, count)
    end
    def get_number_output_callbacks(this : IDebugClient7*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_output_callbacks.call(this, count)
    end
    def get_number_event_callbacks(this : IDebugClient7*, event_flags : UInt32, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_callbacks.call(this, event_flags, count)
    end
    def get_quit_lock_string(this : IDebugClient7*, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string(this : IDebugClient7*, string : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string.call(this, string)
    end
    def get_quit_lock_string_wide(this : IDebugClient7*, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string_wide.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string_wide(this : IDebugClient7*, string : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string_wide.call(this, string)
    end
    def set_event_context_callbacks(this : IDebugClient7*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_context_callbacks.call(this, callbacks)
    end
    def set_client_context(this : IDebugClient7*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_context.call(this, context, context_size)
    end

  end

  @[Extern]
  record IDebugClient8Vtbl,
    query_interface : Proc(IDebugClient8*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugClient8*, UInt32),
    release : Proc(IDebugClient8*, UInt32),
    attach_kernel : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    start_process_server : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disconnect_process_server : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::HRESULT),
    get_running_process_system_ids : Proc(IDebugClient8*, UInt64, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description : Proc(IDebugClient8*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    attach_process : Proc(IDebugClient8*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_process_options : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    add_process_options : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    remove_process_options : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    set_process_options : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    write_dump_file : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    connect_session : Proc(IDebugClient8*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_server : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_servers : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    terminate_processes : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    detach_processes : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    end_session : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    get_exit_code : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    dispatch_callbacks : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    exit_dispatch : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    create_client : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    get_input_callbacks : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    set_input_callbacks : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    get_output_callbacks : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    get_output_mask : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_mask : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    get_other_output_mask : Proc(IDebugClient8*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_other_output_mask : Proc(IDebugClient8*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_width : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_width : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    get_output_line_prefix : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_identity : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity : Proc(IDebugClient8*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    flush_callbacks : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    write_dump_file2 : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    end_process_server : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::HRESULT),
    wait_for_process_server_end : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::HRESULT),
    is_kernel_debugger_enabled : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    terminate_current_process : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    detach_current_process : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    abandon_current_process : Proc(IDebugClient8*, Win32cr::Foundation::HRESULT),
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_running_process_description_wide : Proc(IDebugClient8*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_process_wide : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach_wide : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    write_dump_file_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dump_information_file_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_number_dump_files : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file : Proc(IDebugClient8*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_file_wide : Proc(IDebugClient8*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    attach_kernel_wide : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_kernel_connection_options_wide : Proc(IDebugClient8*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_kernel_connection_options_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_process_server_wide : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    connect_process_server_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    start_server_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_servers_wide : Proc(IDebugClient8*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_output_callbacks_wide : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    set_output_callbacks_wide : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    get_output_line_prefix_wide : Proc(IDebugClient8*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_line_prefix_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_identity_wide : Proc(IDebugClient8*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_identity_wide : Proc(IDebugClient8*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_event_callbacks_wide : Proc(IDebugClient8*, Void**, Win32cr::Foundation::HRESULT),
    set_event_callbacks_wide : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    create_process2 : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    create_process2_wide : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_process_and_attach2 : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_process_and_attach2_wide : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    push_output_line_prefix : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    push_output_line_prefix_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    pop_output_line_prefix : Proc(IDebugClient8*, UInt64, Win32cr::Foundation::HRESULT),
    get_number_input_callbacks : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_output_callbacks : Proc(IDebugClient8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_event_callbacks : Proc(IDebugClient8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_quit_lock_string : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string : Proc(IDebugClient8*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_quit_lock_string_wide : Proc(IDebugClient8*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_quit_lock_string_wide : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_event_context_callbacks : Proc(IDebugClient8*, Void*, Win32cr::Foundation::HRESULT),
    set_client_context : Proc(IDebugClient8*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    open_dump_file_wide2 : Proc(IDebugClient8*, Win32cr::Foundation::PWSTR, UInt64, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugClient8, lpVtbl : IDebugClient8Vtbl* do
    GUID = LibC::GUID.new(0xcec43add_u32, 0x6375_u16, 0x469e_u16, StaticArray[0x83_u8, 0xd5_u8, 0x41_u8, 0x4e_u8, 0x40_u8, 0x33_u8, 0xc1_u8, 0x9a_u8])
    def query_interface(this : IDebugClient8*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugClient8*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugClient8*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_kernel(this : IDebugClient8*, flags : UInt32, connect_options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel.call(this, flags, connect_options)
    end
    def get_kernel_connection_options(this : IDebugClient8*, buffer : UInt8*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options(this : IDebugClient8*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options.call(this, options)
    end
    def start_process_server(this : IDebugClient8*, flags : UInt32, options : Win32cr::Foundation::PSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server.call(this, flags, options, reserved)
    end
    def connect_process_server(this : IDebugClient8*, remote_options : Win32cr::Foundation::PSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server.call(this, remote_options, server)
    end
    def disconnect_process_server(this : IDebugClient8*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_process_server.call(this, server)
    end
    def get_running_process_system_ids(this : IDebugClient8*, server : UInt64, ids : UInt32*, count : UInt32, actual_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_ids.call(this, server, ids, count, actual_count)
    end
    def get_running_process_system_id_by_executable_name(this : IDebugClient8*, server : UInt64, exe_name : Win32cr::Foundation::PSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description(this : IDebugClient8*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt8*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt8*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def attach_process(this : IDebugClient8*, server : UInt64, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_process.call(this, server, process_id, attach_flags)
    end
    def create_process_a(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def get_process_options(this : IDebugClient8*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_options.call(this, options)
    end
    def add_process_options(this : IDebugClient8*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_process_options.call(this, options)
    end
    def remove_process_options(this : IDebugClient8*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_process_options.call(this, options)
    end
    def set_process_options(this : IDebugClient8*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_options.call(this, options)
    end
    def open_dump_file(this : IDebugClient8*, dump_file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file.call(this, dump_file)
    end
    def write_dump_file(this : IDebugClient8*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file.call(this, dump_file, qualifier)
    end
    def connect_session(this : IDebugClient8*, flags : UInt32, history_limit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_session.call(this, flags, history_limit)
    end
    def start_server(this : IDebugClient8*, options : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server.call(this, options)
    end
    def output_servers(this : IDebugClient8*, output_control : UInt32, machine : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers.call(this, output_control, machine, flags)
    end
    def terminate_processes(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_processes.call(this)
    end
    def detach_processes(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_processes.call(this)
    end
    def end_session(this : IDebugClient8*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_session.call(this, flags)
    end
    def get_exit_code(this : IDebugClient8*, code : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exit_code.call(this, code)
    end
    def dispatch_callbacks(this : IDebugClient8*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dispatch_callbacks.call(this, timeout)
    end
    def exit_dispatch(this : IDebugClient8*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_dispatch.call(this, client)
    end
    def create_client(this : IDebugClient8*, client : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_client.call(this, client)
    end
    def get_input_callbacks(this : IDebugClient8*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_callbacks.call(this, callbacks)
    end
    def set_input_callbacks(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_callbacks.call(this, callbacks)
    end
    def get_output_callbacks(this : IDebugClient8*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks.call(this, callbacks)
    end
    def set_output_callbacks(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks.call(this, callbacks)
    end
    def get_output_mask(this : IDebugClient8*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mask.call(this, mask)
    end
    def set_output_mask(this : IDebugClient8*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mask.call(this, mask)
    end
    def get_other_output_mask(this : IDebugClient8*, client : Void*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_output_mask.call(this, client, mask)
    end
    def set_other_output_mask(this : IDebugClient8*, client : Void*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_other_output_mask.call(this, client, mask)
    end
    def get_output_width(this : IDebugClient8*, columns : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_width.call(this, columns)
    end
    def set_output_width(this : IDebugClient8*, columns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_width.call(this, columns)
    end
    def get_output_line_prefix(this : IDebugClient8*, buffer : UInt8*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix(this : IDebugClient8*, prefix : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix.call(this, prefix)
    end
    def get_identity(this : IDebugClient8*, buffer : UInt8*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity(this : IDebugClient8*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity.call(this, output_control, flags, format)
    end
    def get_event_callbacks(this : IDebugClient8*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks.call(this, callbacks)
    end
    def set_event_callbacks(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks.call(this, callbacks)
    end
    def flush_callbacks(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_callbacks.call(this)
    end
    def write_dump_file2(this : IDebugClient8*, dump_file : Win32cr::Foundation::PSTR, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file2.call(this, dump_file, qualifier, format_flags, comment)
    end
    def add_dump_information_file(this : IDebugClient8*, info_file : Win32cr::Foundation::PSTR, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file.call(this, info_file, type__)
    end
    def end_process_server(this : IDebugClient8*, server : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_process_server.call(this, server)
    end
    def wait_for_process_server_end(this : IDebugClient8*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_process_server_end.call(this, timeout)
    end
    def is_kernel_debugger_enabled(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_kernel_debugger_enabled.call(this)
    end
    def terminate_current_process(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_process.call(this)
    end
    def detach_current_process(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_current_process.call(this)
    end
    def abandon_current_process(this : IDebugClient8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_current_process.call(this)
    end
    def get_running_process_system_id_by_executable_name_wide(this : IDebugClient8*, server : UInt64, exe_name : Win32cr::Foundation::PWSTR, flags : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exe_name, flags, id)
    end
    def get_running_process_description_wide(this : IDebugClient8*, server : UInt64, system_id : UInt32, flags : UInt32, exe_name : UInt16*, exe_name_size : UInt32, actual_exe_name_size : UInt32*, description : UInt16*, description_size : UInt32, actual_description_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_running_process_description_wide.call(this, server, system_id, flags, exe_name, exe_name_size, actual_exe_name_size, description, description_size, actual_description_size)
    end
    def create_process_wide(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_wide.call(this, server, command_line, create_flags)
    end
    def create_process_and_attach_wide(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, create_flags : UInt32, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach_wide.call(this, server, command_line, create_flags, process_id, attach_flags)
    end
    def open_dump_file_wide(this : IDebugClient8*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide.call(this, file_name, file_handle)
    end
    def write_dump_file_wide(this : IDebugClient8*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, qualifier : UInt32, format_flags : UInt32, comment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_dump_file_wide.call(this, file_name, file_handle, qualifier, format_flags, comment)
    end
    def add_dump_information_file_wide(this : IDebugClient8*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dump_information_file_wide.call(this, file_name, file_handle, type__)
    end
    def get_number_dump_files(this : IDebugClient8*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_dump_files.call(this, number)
    end
    def get_dump_file(this : IDebugClient8*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def get_dump_file_wide(this : IDebugClient8*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*, handle : UInt64*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_file_wide.call(this, index, buffer, buffer_size, name_size, handle, type__)
    end
    def attach_kernel_wide(this : IDebugClient8*, flags : UInt32, connect_options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_kernel_wide.call(this, flags, connect_options)
    end
    def get_kernel_connection_options_wide(this : IDebugClient8*, buffer : UInt16*, buffer_size : UInt32, options_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kernel_connection_options_wide.call(this, buffer, buffer_size, options_size)
    end
    def set_kernel_connection_options_wide(this : IDebugClient8*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_kernel_connection_options_wide.call(this, options)
    end
    def start_process_server_wide(this : IDebugClient8*, flags : UInt32, options : Win32cr::Foundation::PWSTR, reserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_process_server_wide.call(this, flags, options, reserved)
    end
    def connect_process_server_wide(this : IDebugClient8*, remote_options : Win32cr::Foundation::PWSTR, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_process_server_wide.call(this, remote_options, server)
    end
    def start_server_wide(this : IDebugClient8*, options : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_server_wide.call(this, options)
    end
    def output_servers_wide(this : IDebugClient8*, output_control : UInt32, machine : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_servers_wide.call(this, output_control, machine, flags)
    end
    def get_output_callbacks_wide(this : IDebugClient8*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_callbacks_wide.call(this, callbacks)
    end
    def set_output_callbacks_wide(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_callbacks_wide.call(this, callbacks)
    end
    def get_output_line_prefix_wide(this : IDebugClient8*, buffer : UInt16*, buffer_size : UInt32, prefix_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_line_prefix_wide.call(this, buffer, buffer_size, prefix_size)
    end
    def set_output_line_prefix_wide(this : IDebugClient8*, prefix : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_line_prefix_wide.call(this, prefix)
    end
    def get_identity_wide(this : IDebugClient8*, buffer : UInt16*, buffer_size : UInt32, identity_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identity_wide.call(this, buffer, buffer_size, identity_size)
    end
    def output_identity_wide(this : IDebugClient8*, output_control : UInt32, flags : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_identity_wide.call(this, output_control, flags, format)
    end
    def get_event_callbacks_wide(this : IDebugClient8*, callbacks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_callbacks_wide.call(this, callbacks)
    end
    def set_event_callbacks_wide(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_callbacks_wide.call(this, callbacks)
    end
    def create_process2(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process2_wide(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment)
    end
    def create_process_and_attach2(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PSTR, environment : Win32cr::Foundation::PSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def create_process_and_attach2_wide(this : IDebugClient8*, server : UInt64, command_line : Win32cr::Foundation::PWSTR, options_buffer : Void*, options_buffer_size : UInt32, initial_directory : Win32cr::Foundation::PWSTR, environment : Win32cr::Foundation::PWSTR, process_id : UInt32, attach_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_and_attach2_wide.call(this, server, command_line, options_buffer, options_buffer_size, initial_directory, environment, process_id, attach_flags)
    end
    def push_output_line_prefix(this : IDebugClient8*, new_prefix : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix.call(this, new_prefix, handle)
    end
    def push_output_line_prefix_wide(this : IDebugClient8*, new_prefix : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_output_line_prefix_wide.call(this, new_prefix, handle)
    end
    def pop_output_line_prefix(this : IDebugClient8*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_output_line_prefix.call(this, handle)
    end
    def get_number_input_callbacks(this : IDebugClient8*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_input_callbacks.call(this, count)
    end
    def get_number_output_callbacks(this : IDebugClient8*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_output_callbacks.call(this, count)
    end
    def get_number_event_callbacks(this : IDebugClient8*, event_flags : UInt32, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_callbacks.call(this, event_flags, count)
    end
    def get_quit_lock_string(this : IDebugClient8*, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string(this : IDebugClient8*, string : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string.call(this, string)
    end
    def get_quit_lock_string_wide(this : IDebugClient8*, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quit_lock_string_wide.call(this, buffer, buffer_size, string_size)
    end
    def set_quit_lock_string_wide(this : IDebugClient8*, string : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quit_lock_string_wide.call(this, string)
    end
    def set_event_context_callbacks(this : IDebugClient8*, callbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_context_callbacks.call(this, callbacks)
    end
    def set_client_context(this : IDebugClient8*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_context.call(this, context, context_size)
    end
    def open_dump_file_wide2(this : IDebugClient8*, file_name : Win32cr::Foundation::PWSTR, file_handle : UInt64, alternate_arch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_dump_file_wide2.call(this, file_name, file_handle, alternate_arch)
    end

  end

  @[Extern]
  record IDebugPlmClientVtbl,
    query_interface : Proc(IDebugPlmClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPlmClient*, UInt32),
    release : Proc(IDebugPlmClient*, UInt32),
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPlmClient, lpVtbl : IDebugPlmClientVtbl* do
    GUID = LibC::GUID.new(0xa02b66c4_u32, 0xaea3_u16, 0x4234_u16, StaticArray[0xa9_u8, 0xf7_u8, 0xfe_u8, 0x4c_u8, 0x38_u8, 0x3d_u8, 0x4e_u8, 0x29_u8])
    def query_interface(this : IDebugPlmClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPlmClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPlmClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def launch_plm_package_for_debug_wide(this : IDebugPlmClient*, server : UInt64, timeout : UInt32, package_full_name : Win32cr::Foundation::PWSTR, app_name : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR, process_id : UInt32*, thread_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_plm_package_for_debug_wide.call(this, server, timeout, package_full_name, app_name, arguments, process_id, thread_id)
    end

  end

  @[Extern]
  record IDebugPlmClient2Vtbl,
    query_interface : Proc(IDebugPlmClient2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPlmClient2*, UInt32),
    release : Proc(IDebugPlmClient2*, UInt32),
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient2*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    launch_plm_bg_task_for_debug_wide : Proc(IDebugPlmClient2*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPlmClient2, lpVtbl : IDebugPlmClient2Vtbl* do
    GUID = LibC::GUID.new(0x597c980d_u32, 0xe7bd_u16, 0x4309_u16, StaticArray[0x96_u8, 0x2c_u8, 0x9d_u8, 0x9b_u8, 0x69_u8, 0xa7_u8, 0x37_u8, 0x2c_u8])
    def query_interface(this : IDebugPlmClient2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPlmClient2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPlmClient2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def launch_plm_package_for_debug_wide(this : IDebugPlmClient2*, server : UInt64, timeout : UInt32, package_full_name : Win32cr::Foundation::PWSTR, app_name : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR, process_id : UInt32*, thread_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_plm_package_for_debug_wide.call(this, server, timeout, package_full_name, app_name, arguments, process_id, thread_id)
    end
    def launch_plm_bg_task_for_debug_wide(this : IDebugPlmClient2*, server : UInt64, timeout : UInt32, package_full_name : Win32cr::Foundation::PWSTR, background_task_id : Win32cr::Foundation::PWSTR, process_id : UInt32*, thread_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_plm_bg_task_for_debug_wide.call(this, server, timeout, package_full_name, background_task_id, process_id, thread_id)
    end

  end

  @[Extern]
  record IDebugPlmClient3Vtbl,
    query_interface : Proc(IDebugPlmClient3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPlmClient3*, UInt32),
    release : Proc(IDebugPlmClient3*, UInt32),
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    launch_plm_bg_task_for_debug_wide : Proc(IDebugPlmClient3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    query_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    query_plm_package_list : Proc(IDebugPlmClient3*, UInt64, Void*, Win32cr::Foundation::HRESULT),
    enable_plm_package_debug_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    disable_plm_package_debug_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    suspend_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    resume_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    terminate_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    launch_and_debug_plm_app_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    activate_and_debug_plm_bg_task_wide : Proc(IDebugPlmClient3*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPlmClient3, lpVtbl : IDebugPlmClient3Vtbl* do
    GUID = LibC::GUID.new(0xd4a5dbd1_u32, 0xca02_u16, 0x4d90_u16, StaticArray[0x85_u8, 0x6a_u8, 0x2a_u8, 0x92_u8, 0xbf_u8, 0xd0_u8, 0xf2_u8, 0xf_u8])
    def query_interface(this : IDebugPlmClient3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPlmClient3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPlmClient3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def launch_plm_package_for_debug_wide(this : IDebugPlmClient3*, server : UInt64, timeout : UInt32, package_full_name : Win32cr::Foundation::PWSTR, app_name : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR, process_id : UInt32*, thread_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_plm_package_for_debug_wide.call(this, server, timeout, package_full_name, app_name, arguments, process_id, thread_id)
    end
    def launch_plm_bg_task_for_debug_wide(this : IDebugPlmClient3*, server : UInt64, timeout : UInt32, package_full_name : Win32cr::Foundation::PWSTR, background_task_id : Win32cr::Foundation::PWSTR, process_id : UInt32*, thread_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_plm_bg_task_for_debug_wide.call(this, server, timeout, package_full_name, background_task_id, process_id, thread_id)
    end
    def query_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR, stream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_plm_package_wide.call(this, server, package_full_name, stream)
    end
    def query_plm_package_list(this : IDebugPlmClient3*, server : UInt64, stream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_plm_package_list.call(this, server, stream)
    end
    def enable_plm_package_debug_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_plm_package_debug_wide.call(this, server, package_full_name)
    end
    def disable_plm_package_debug_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable_plm_package_debug_wide.call(this, server, package_full_name)
    end
    def suspend_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suspend_plm_package_wide.call(this, server, package_full_name)
    end
    def resume_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume_plm_package_wide.call(this, server, package_full_name)
    end
    def terminate_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_plm_package_wide.call(this, server, package_full_name)
    end
    def launch_and_debug_plm_app_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR, app_name : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launch_and_debug_plm_app_wide.call(this, server, package_full_name, app_name, arguments)
    end
    def activate_and_debug_plm_bg_task_wide(this : IDebugPlmClient3*, server : UInt64, package_full_name : Win32cr::Foundation::PWSTR, background_task_id : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_and_debug_plm_bg_task_wide.call(this, server, package_full_name, background_task_id)
    end

  end

  @[Extern]
  record IDebugOutputStreamVtbl,
    query_interface : Proc(IDebugOutputStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugOutputStream*, UInt32),
    release : Proc(IDebugOutputStream*, UInt32),
    write : Proc(IDebugOutputStream*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugOutputStream, lpVtbl : IDebugOutputStreamVtbl* do
    GUID = LibC::GUID.new(0x7782d8f2_u32, 0x2b85_u16, 0x4059_u16, StaticArray[0xab_u8, 0x88_u8, 0x28_u8, 0xce_u8, 0xdd_u8, 0xca_u8, 0x1c_u8, 0x80_u8])
    def query_interface(this : IDebugOutputStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugOutputStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugOutputStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def write(this : IDebugOutputStream*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, psz)
    end

  end

  @[Extern]
  record IDebugControlVtbl,
    query_interface : Proc(IDebugControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl*, UInt32),
    release : Proc(IDebugControl*, UInt32),
    get_interrupt : Proc(IDebugControl*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl, lpVtbl : IDebugControlVtbl* do
    GUID = LibC::GUID.new(0x5182e668_u32, 0x105e_u16, 0x416e_u16, StaticArray[0xad_u8, 0x92_u8, 0x24_u8, 0xef_u8, 0x80_u8, 0x4_u8, 0x24_u8, 0xba_u8])
    def query_interface(this : IDebugControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end

  end

  @[Extern]
  record IDebugControl2Vtbl,
    query_interface : Proc(IDebugControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl2*, UInt32),
    release : Proc(IDebugControl2*, UInt32),
    get_interrupt : Proc(IDebugControl2*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl2*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl2*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl2*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl2*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl2*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl2*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl2*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl2*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl2*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl2*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl2*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl2*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl2*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl2*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl2*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl2*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl2*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl2*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl2*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl2*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl2*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl2*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl2*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl2*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl2*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl2, lpVtbl : IDebugControl2Vtbl* do
    GUID = LibC::GUID.new(0xd4366723_u32, 0x44df_u16, 0x4bed_u16, StaticArray[0x8c_u8, 0x7e_u8, 0x4c_u8, 0x5_u8, 0x42_u8, 0x4f_u8, 0x45_u8, 0x88_u8])
    def query_interface(this : IDebugControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl2*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl2*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl2*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl2*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl2*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl2*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl2*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl2*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl2*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl2*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl2*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl2*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl2*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl2*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl2*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl2*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl2*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl2*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl2*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl2*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl2*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl2*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl2*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl2*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl2*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl2*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl2*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl2*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl2*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl2*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl2*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl2*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl2*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl2*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl2*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl2*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl2*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl2*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl2*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl2*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl2*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl2*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl2*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl2*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl2*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl2*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl2*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl2*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl2*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl2*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl2*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl2*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl2*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl2*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl2*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl2*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl2*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl2*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl2*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl2*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl2*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl2*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl2*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl2*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl2*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl2*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl2*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl2*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl2*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl2*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl2*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl2*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl2*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl2*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl2*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl2*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl2*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl2*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl2*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl2*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl2*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl2*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl2*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end

  end

  @[Extern]
  record IDebugControl3Vtbl,
    query_interface : Proc(IDebugControl3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl3*, UInt32),
    release : Proc(IDebugControl3*, UInt32),
    get_interrupt : Proc(IDebugControl3*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl3*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl3*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl3*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl3*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl3*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl3*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl3*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl3*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl3*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl3*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl3*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl3*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl3*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl3*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl3*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl3*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl3*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl3*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl3*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl3*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl3*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl3*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl3*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl3*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl3*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl3*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl3*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_assembly_options : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_assembly_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_assembly_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    set_assembly_options : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    get_expression_syntax : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_expression_syntax : Proc(IDebugControl3*, UInt32, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name : Proc(IDebugControl3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_number_expression_syntaxes : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_events : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description : Proc(IDebugControl3*, UInt32, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_event_index : Proc(IDebugControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_next_event_index : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl3, lpVtbl : IDebugControl3Vtbl* do
    GUID = LibC::GUID.new(0x7df74a86_u32, 0xb03f_u16, 0x407f_u16, StaticArray[0x90_u8, 0xab_u8, 0xa2_u8, 0xd_u8, 0xad_u8, 0xce_u8, 0xad_u8, 0x8_u8])
    def query_interface(this : IDebugControl3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl3*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl3*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl3*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl3*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl3*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl3*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl3*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl3*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl3*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl3*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl3*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl3*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl3*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl3*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl3*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl3*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl3*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl3*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl3*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl3*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl3*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl3*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl3*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl3*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl3*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl3*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl3*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl3*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl3*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl3*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl3*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl3*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl3*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl3*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl3*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl3*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl3*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl3*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl3*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl3*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl3*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl3*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl3*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl3*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl3*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl3*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl3*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl3*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl3*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl3*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl3*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl3*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl3*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl3*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl3*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl3*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl3*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl3*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl3*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl3*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl3*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl3*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl3*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl3*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl3*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl3*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl3*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl3*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl3*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl3*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl3*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl3*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl3*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl3*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl3*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl3*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl3*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl3*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl3*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl3*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl3*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl3*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end
    def get_assembly_options(this : IDebugControl3*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_assembly_options.call(this, options)
    end
    def add_assembly_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_assembly_options.call(this, options)
    end
    def remove_assembly_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_assembly_options.call(this, options)
    end
    def set_assembly_options(this : IDebugControl3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assembly_options.call(this, options)
    end
    def get_expression_syntax(this : IDebugControl3*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax.call(this, flags)
    end
    def set_expression_syntax(this : IDebugControl3*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax.call(this, flags)
    end
    def set_expression_syntax_by_name(this : IDebugControl3*, abbrev_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name.call(this, abbrev_name)
    end
    def get_number_expression_syntaxes(this : IDebugControl3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_expression_syntaxes.call(this, number)
    end
    def get_expression_syntax_names(this : IDebugControl3*, index : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_number_events(this : IDebugControl3*, events : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_events.call(this, events)
    end
    def get_event_index_description(this : IDebugControl3*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_current_event_index(this : IDebugControl3*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_event_index.call(this, index)
    end
    def set_next_event_index(this : IDebugControl3*, relation : UInt32, value : UInt32, next_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_event_index.call(this, relation, value, next_index)
    end

  end

  @[Extern]
  record IDebugControl4Vtbl,
    query_interface : Proc(IDebugControl4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl4*, UInt32),
    release : Proc(IDebugControl4*, UInt32),
    get_interrupt : Proc(IDebugControl4*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl4*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl4*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl4*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl4*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl4*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl4*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl4*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl4*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl4*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl4*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl4*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl4*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl4*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl4*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl4*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl4*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl4*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl4*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl4*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl4*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl4*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_assembly_options : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    add_assembly_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    remove_assembly_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    set_assembly_options : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    get_expression_syntax : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_expression_syntax : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_number_expression_syntaxes : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_events : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_event_index : Proc(IDebugControl4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_next_event_index : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file_wide : Proc(IDebugControl4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    input_wide : Proc(IDebugControl4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_va_list_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output_wide : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list_wide : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text_wide : Proc(IDebugControl4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    assemble_wide : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble_wide : Proc(IDebugControl4*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_processor_type_names_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_macro_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    evaluate_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    execute_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index2 : Proc(IDebugControl4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id2 : Proc(IDebugControl4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_breakpoint2 : Proc(IDebugControl4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint2 : Proc(IDebugControl4*, Void*, Win32cr::Foundation::HRESULT),
    add_extension_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_extension_by_path_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension_wide : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_extension_function_wide : Proc(IDebugControl4*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_event_filter_text_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command_wide : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_last_event_information_wide : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description_wide : Proc(IDebugControl4*, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file2 : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2 : Proc(IDebugControl4*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file2_wide : Proc(IDebugControl4*, UInt16*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2_wide : Proc(IDebugControl4*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_system_version_values : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string_wide : Proc(IDebugControl4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_stack_trace : Proc(IDebugControl4*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace : Proc(IDebugControl4*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stored_event_information : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status : Proc(IDebugControl4*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status_wide : Proc(IDebugControl4*, UInt32*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    reset_managed_status : Proc(IDebugControl4*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl4, lpVtbl : IDebugControl4Vtbl* do
    GUID = LibC::GUID.new(0x94e60ce9_u32, 0x9b41_u16, 0x4b19_u16, StaticArray[0x9f_u8, 0xc0_u8, 0x6d_u8, 0x9e_u8, 0xb3_u8, 0x52_u8, 0x72_u8, 0xb3_u8])
    def query_interface(this : IDebugControl4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl4*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl4*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl4*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl4*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl4*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl4*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl4*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl4*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl4*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl4*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl4*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl4*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl4*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl4*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl4*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl4*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl4*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl4*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl4*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl4*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl4*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl4*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl4*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl4*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl4*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl4*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl4*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl4*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl4*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl4*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl4*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl4*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl4*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl4*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl4*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl4*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl4*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl4*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl4*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl4*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl4*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl4*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl4*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl4*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl4*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl4*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl4*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl4*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl4*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl4*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl4*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl4*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl4*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl4*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl4*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl4*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl4*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl4*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl4*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl4*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl4*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl4*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl4*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl4*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl4*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl4*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl4*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl4*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl4*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl4*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl4*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl4*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl4*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl4*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl4*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl4*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl4*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl4*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl4*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl4*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl4*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl4*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl4*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end
    def get_assembly_options(this : IDebugControl4*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_assembly_options.call(this, options)
    end
    def add_assembly_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_assembly_options.call(this, options)
    end
    def remove_assembly_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_assembly_options.call(this, options)
    end
    def set_assembly_options(this : IDebugControl4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assembly_options.call(this, options)
    end
    def get_expression_syntax(this : IDebugControl4*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax.call(this, flags)
    end
    def set_expression_syntax(this : IDebugControl4*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax.call(this, flags)
    end
    def set_expression_syntax_by_name(this : IDebugControl4*, abbrev_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name.call(this, abbrev_name)
    end
    def get_number_expression_syntaxes(this : IDebugControl4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_expression_syntaxes.call(this, number)
    end
    def get_expression_syntax_names(this : IDebugControl4*, index : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_number_events(this : IDebugControl4*, events : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_events.call(this, events)
    end
    def get_event_index_description(this : IDebugControl4*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_current_event_index(this : IDebugControl4*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_event_index.call(this, index)
    end
    def set_next_event_index(this : IDebugControl4*, relation : UInt32, value : UInt32, next_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_event_index.call(this, relation, value, next_index)
    end
    def get_log_file_wide(this : IDebugControl4*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file_wide.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file_wide(this : IDebugControl4*, file : Win32cr::Foundation::PWSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file_wide.call(this, file, append)
    end
    def input_wide(this : IDebugControl4*, buffer : UInt16*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input_wide.call(this, buffer, buffer_size, input_size)
    end
    def return_input_wide(this : IDebugControl4*, buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input_wide.call(this, buffer)
    end
    def output_wide(this : IDebugControl4*, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_wide.call(this, mask, format)
    end
    def output_va_list_wide(this : IDebugControl4*, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list_wide.call(this, mask, format, args)
    end
    def controlled_output_wide(this : IDebugControl4*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_wide.call(this, output_control, mask, format)
    end
    def controlled_output_va_list_wide(this : IDebugControl4*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list_wide.call(this, output_control, mask, format, args)
    end
    def output_prompt_wide(this : IDebugControl4*, output_control : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_wide.call(this, output_control, format)
    end
    def output_prompt_va_list_wide(this : IDebugControl4*, output_control : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list_wide.call(this, output_control, format, args)
    end
    def get_prompt_text_wide(this : IDebugControl4*, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text_wide.call(this, buffer, buffer_size, text_size)
    end
    def assemble_wide(this : IDebugControl4*, offset : UInt64, instr : Win32cr::Foundation::PWSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble_wide.call(this, offset, instr, end_offset)
    end
    def disassemble_wide(this : IDebugControl4*, offset : UInt64, flags : UInt32, buffer : UInt16*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble_wide.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_processor_type_names_wide(this : IDebugControl4*, type__ : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names_wide.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_text_macro_wide(this : IDebugControl4*, slot : UInt32, buffer : UInt16*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro_wide.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro_wide(this : IDebugControl4*, slot : UInt32, macro__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro_wide.call(this, slot, macro__)
    end
    def evaluate_wide(this : IDebugControl4*, expression : Win32cr::Foundation::PWSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_wide.call(this, expression, desired_type, value, remainder_index)
    end
    def execute_wide(this : IDebugControl4*, output_control : UInt32, command : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_wide.call(this, output_control, command, flags)
    end
    def execute_command_file_wide(this : IDebugControl4*, output_control : UInt32, command_file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file_wide.call(this, output_control, command_file, flags)
    end
    def get_breakpoint_by_index2(this : IDebugControl4*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index2.call(this, index, bp)
    end
    def get_breakpoint_by_id2(this : IDebugControl4*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id2.call(this, id, bp)
    end
    def add_breakpoint2(this : IDebugControl4*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint2.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint2(this : IDebugControl4*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint2.call(this, bp)
    end
    def add_extension_wide(this : IDebugControl4*, path : Win32cr::Foundation::PWSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension_wide.call(this, path, flags, handle)
    end
    def get_extension_by_path_wide(this : IDebugControl4*, path : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path_wide.call(this, path, handle)
    end
    def call_extension_wide(this : IDebugControl4*, handle : UInt64, function : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension_wide.call(this, handle, function, arguments)
    end
    def get_extension_function_wide(this : IDebugControl4*, handle : UInt64, func_name : Win32cr::Foundation::PWSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function_wide.call(this, handle, func_name, function)
    end
    def get_event_filter_text_wide(this : IDebugControl4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text_wide.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command_wide(this : IDebugControl4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command_wide(this : IDebugControl4*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command_wide.call(this, index, command)
    end
    def get_specific_filter_argument_wide(this : IDebugControl4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument_wide.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument_wide(this : IDebugControl4*, index : UInt32, argument : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument_wide.call(this, index, argument)
    end
    def get_exception_filter_second_command_wide(this : IDebugControl4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command_wide(this : IDebugControl4*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command_wide.call(this, index, command)
    end
    def get_last_event_information_wide(this : IDebugControl4*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt16*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information_wide.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_text_replacement_wide(this : IDebugControl4*, src_text : Win32cr::Foundation::PWSTR, index : UInt32, src_buffer : UInt16*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt16*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement_wide.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement_wide(this : IDebugControl4*, src_text : Win32cr::Foundation::PWSTR, dst_text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement_wide.call(this, src_text, dst_text)
    end
    def set_expression_syntax_by_name_wide(this : IDebugControl4*, abbrev_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name_wide.call(this, abbrev_name)
    end
    def get_expression_syntax_names_wide(this : IDebugControl4*, index : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names_wide.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_event_index_description_wide(this : IDebugControl4*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PWSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description_wide.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_log_file2(this : IDebugControl4*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2(this : IDebugControl4*, file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2.call(this, file, flags)
    end
    def get_log_file2_wide(this : IDebugControl4*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2_wide.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2_wide(this : IDebugControl4*, file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2_wide.call(this, file, flags)
    end
    def get_system_version_values(this : IDebugControl4*, platform_id : UInt32*, win32_major : UInt32*, win32_minor : UInt32*, kd_major : UInt32*, kd_minor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_values.call(this, platform_id, win32_major, win32_minor, kd_major, kd_minor)
    end
    def get_system_version_string(this : IDebugControl4*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string.call(this, which, buffer, buffer_size, string_size)
    end
    def get_system_version_string_wide(this : IDebugControl4*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string_wide.call(this, which, buffer, buffer_size, string_size)
    end
    def get_context_stack_trace(this : IDebugControl4*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace(this : IDebugControl4*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_stored_event_information(this : IDebugControl4*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, context : Void*, context_size : UInt32, context_used : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stored_event_information.call(this, type__, process_id, thread_id, context, context_size, context_used, extra_information, extra_information_size, extra_information_used)
    end
    def get_managed_status(this : IDebugControl4*, flags : UInt32*, which_string : UInt32, string : UInt8*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status.call(this, flags, which_string, string, string_size, string_needed)
    end
    def get_managed_status_wide(this : IDebugControl4*, flags : UInt32*, which_string : UInt32, string : UInt16*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status_wide.call(this, flags, which_string, string, string_size, string_needed)
    end
    def reset_managed_status(this : IDebugControl4*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_managed_status.call(this, flags)
    end

  end

  @[Extern]
  record IDebugControl5Vtbl,
    query_interface : Proc(IDebugControl5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl5*, UInt32),
    release : Proc(IDebugControl5*, UInt32),
    get_interrupt : Proc(IDebugControl5*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl5*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl5*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl5*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl5*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl5*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl5*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl5*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl5*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl5*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl5*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl5*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl5*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl5*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl5*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl5*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl5*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl5*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl5*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl5*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_assembly_options : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    add_assembly_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    remove_assembly_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    set_assembly_options : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_expression_syntax : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_expression_syntax : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_number_expression_syntaxes : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_events : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_event_index : Proc(IDebugControl5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_next_event_index : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file_wide : Proc(IDebugControl5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    input_wide : Proc(IDebugControl5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_va_list_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output_wide : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list_wide : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text_wide : Proc(IDebugControl5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    assemble_wide : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble_wide : Proc(IDebugControl5*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_processor_type_names_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_macro_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    evaluate_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    execute_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index2 : Proc(IDebugControl5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id2 : Proc(IDebugControl5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_breakpoint2 : Proc(IDebugControl5*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint2 : Proc(IDebugControl5*, Void*, Win32cr::Foundation::HRESULT),
    add_extension_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_extension_by_path_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension_wide : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_extension_function_wide : Proc(IDebugControl5*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_event_filter_text_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command_wide : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_last_event_information_wide : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description_wide : Proc(IDebugControl5*, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file2 : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2 : Proc(IDebugControl5*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file2_wide : Proc(IDebugControl5*, UInt16*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2_wide : Proc(IDebugControl5*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_system_version_values : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string_wide : Proc(IDebugControl5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_stack_trace : Proc(IDebugControl5*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stored_event_information : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status : Proc(IDebugControl5*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status_wide : Proc(IDebugControl5*, UInt32*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    reset_managed_status : Proc(IDebugControl5*, UInt32, Win32cr::Foundation::HRESULT),
    get_stack_trace_ex : Proc(IDebugControl5*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_stack_trace_ex : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_context_stack_trace_ex : Proc(IDebugControl5*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace_ex : Proc(IDebugControl5*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_guid : Proc(IDebugControl5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl5, lpVtbl : IDebugControl5Vtbl* do
    GUID = LibC::GUID.new(0xb2ffe162_u32, 0x2412_u16, 0x429f_u16, StaticArray[0x8d_u8, 0x1d_u8, 0x5b_u8, 0xf6_u8, 0xdd_u8, 0x82_u8, 0x46_u8, 0x96_u8])
    def query_interface(this : IDebugControl5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl5*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl5*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl5*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl5*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl5*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl5*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl5*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl5*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl5*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl5*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl5*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl5*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl5*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl5*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl5*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl5*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl5*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl5*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl5*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl5*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl5*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl5*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl5*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl5*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl5*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl5*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl5*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl5*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl5*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl5*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl5*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl5*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl5*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl5*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl5*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl5*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl5*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl5*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl5*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl5*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl5*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl5*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl5*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl5*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl5*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl5*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl5*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl5*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl5*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl5*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl5*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl5*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl5*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl5*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl5*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl5*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl5*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl5*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl5*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl5*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl5*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl5*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl5*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl5*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl5*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl5*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl5*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl5*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl5*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl5*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl5*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl5*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl5*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl5*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl5*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl5*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl5*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl5*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl5*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl5*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl5*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl5*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl5*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl5*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl5*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end
    def get_assembly_options(this : IDebugControl5*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_assembly_options.call(this, options)
    end
    def add_assembly_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_assembly_options.call(this, options)
    end
    def remove_assembly_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_assembly_options.call(this, options)
    end
    def set_assembly_options(this : IDebugControl5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assembly_options.call(this, options)
    end
    def get_expression_syntax(this : IDebugControl5*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax.call(this, flags)
    end
    def set_expression_syntax(this : IDebugControl5*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax.call(this, flags)
    end
    def set_expression_syntax_by_name(this : IDebugControl5*, abbrev_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name.call(this, abbrev_name)
    end
    def get_number_expression_syntaxes(this : IDebugControl5*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_expression_syntaxes.call(this, number)
    end
    def get_expression_syntax_names(this : IDebugControl5*, index : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_number_events(this : IDebugControl5*, events : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_events.call(this, events)
    end
    def get_event_index_description(this : IDebugControl5*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_current_event_index(this : IDebugControl5*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_event_index.call(this, index)
    end
    def set_next_event_index(this : IDebugControl5*, relation : UInt32, value : UInt32, next_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_event_index.call(this, relation, value, next_index)
    end
    def get_log_file_wide(this : IDebugControl5*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file_wide.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file_wide(this : IDebugControl5*, file : Win32cr::Foundation::PWSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file_wide.call(this, file, append)
    end
    def input_wide(this : IDebugControl5*, buffer : UInt16*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input_wide.call(this, buffer, buffer_size, input_size)
    end
    def return_input_wide(this : IDebugControl5*, buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input_wide.call(this, buffer)
    end
    def output_wide(this : IDebugControl5*, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_wide.call(this, mask, format)
    end
    def output_va_list_wide(this : IDebugControl5*, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list_wide.call(this, mask, format, args)
    end
    def controlled_output_wide(this : IDebugControl5*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_wide.call(this, output_control, mask, format)
    end
    def controlled_output_va_list_wide(this : IDebugControl5*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list_wide.call(this, output_control, mask, format, args)
    end
    def output_prompt_wide(this : IDebugControl5*, output_control : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_wide.call(this, output_control, format)
    end
    def output_prompt_va_list_wide(this : IDebugControl5*, output_control : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list_wide.call(this, output_control, format, args)
    end
    def get_prompt_text_wide(this : IDebugControl5*, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text_wide.call(this, buffer, buffer_size, text_size)
    end
    def assemble_wide(this : IDebugControl5*, offset : UInt64, instr : Win32cr::Foundation::PWSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble_wide.call(this, offset, instr, end_offset)
    end
    def disassemble_wide(this : IDebugControl5*, offset : UInt64, flags : UInt32, buffer : UInt16*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble_wide.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_processor_type_names_wide(this : IDebugControl5*, type__ : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names_wide.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_text_macro_wide(this : IDebugControl5*, slot : UInt32, buffer : UInt16*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro_wide.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro_wide(this : IDebugControl5*, slot : UInt32, macro__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro_wide.call(this, slot, macro__)
    end
    def evaluate_wide(this : IDebugControl5*, expression : Win32cr::Foundation::PWSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_wide.call(this, expression, desired_type, value, remainder_index)
    end
    def execute_wide(this : IDebugControl5*, output_control : UInt32, command : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_wide.call(this, output_control, command, flags)
    end
    def execute_command_file_wide(this : IDebugControl5*, output_control : UInt32, command_file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file_wide.call(this, output_control, command_file, flags)
    end
    def get_breakpoint_by_index2(this : IDebugControl5*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index2.call(this, index, bp)
    end
    def get_breakpoint_by_id2(this : IDebugControl5*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id2.call(this, id, bp)
    end
    def add_breakpoint2(this : IDebugControl5*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint2.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint2(this : IDebugControl5*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint2.call(this, bp)
    end
    def add_extension_wide(this : IDebugControl5*, path : Win32cr::Foundation::PWSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension_wide.call(this, path, flags, handle)
    end
    def get_extension_by_path_wide(this : IDebugControl5*, path : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path_wide.call(this, path, handle)
    end
    def call_extension_wide(this : IDebugControl5*, handle : UInt64, function : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension_wide.call(this, handle, function, arguments)
    end
    def get_extension_function_wide(this : IDebugControl5*, handle : UInt64, func_name : Win32cr::Foundation::PWSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function_wide.call(this, handle, func_name, function)
    end
    def get_event_filter_text_wide(this : IDebugControl5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text_wide.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command_wide(this : IDebugControl5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command_wide(this : IDebugControl5*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command_wide.call(this, index, command)
    end
    def get_specific_filter_argument_wide(this : IDebugControl5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument_wide.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument_wide(this : IDebugControl5*, index : UInt32, argument : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument_wide.call(this, index, argument)
    end
    def get_exception_filter_second_command_wide(this : IDebugControl5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command_wide(this : IDebugControl5*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command_wide.call(this, index, command)
    end
    def get_last_event_information_wide(this : IDebugControl5*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt16*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information_wide.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_text_replacement_wide(this : IDebugControl5*, src_text : Win32cr::Foundation::PWSTR, index : UInt32, src_buffer : UInt16*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt16*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement_wide.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement_wide(this : IDebugControl5*, src_text : Win32cr::Foundation::PWSTR, dst_text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement_wide.call(this, src_text, dst_text)
    end
    def set_expression_syntax_by_name_wide(this : IDebugControl5*, abbrev_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name_wide.call(this, abbrev_name)
    end
    def get_expression_syntax_names_wide(this : IDebugControl5*, index : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names_wide.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_event_index_description_wide(this : IDebugControl5*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PWSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description_wide.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_log_file2(this : IDebugControl5*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2(this : IDebugControl5*, file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2.call(this, file, flags)
    end
    def get_log_file2_wide(this : IDebugControl5*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2_wide.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2_wide(this : IDebugControl5*, file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2_wide.call(this, file, flags)
    end
    def get_system_version_values(this : IDebugControl5*, platform_id : UInt32*, win32_major : UInt32*, win32_minor : UInt32*, kd_major : UInt32*, kd_minor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_values.call(this, platform_id, win32_major, win32_minor, kd_major, kd_minor)
    end
    def get_system_version_string(this : IDebugControl5*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string.call(this, which, buffer, buffer_size, string_size)
    end
    def get_system_version_string_wide(this : IDebugControl5*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string_wide.call(this, which, buffer, buffer_size, string_size)
    end
    def get_context_stack_trace(this : IDebugControl5*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace(this : IDebugControl5*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_stored_event_information(this : IDebugControl5*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, context : Void*, context_size : UInt32, context_used : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stored_event_information.call(this, type__, process_id, thread_id, context, context_size, context_used, extra_information, extra_information_size, extra_information_used)
    end
    def get_managed_status(this : IDebugControl5*, flags : UInt32*, which_string : UInt32, string : UInt8*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status.call(this, flags, which_string, string, string_size, string_needed)
    end
    def get_managed_status_wide(this : IDebugControl5*, flags : UInt32*, which_string : UInt32, string : UInt16*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status_wide.call(this, flags, which_string, string, string_size, string_needed)
    end
    def reset_managed_status(this : IDebugControl5*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_managed_status.call(this, flags)
    end
    def get_stack_trace_ex(this : IDebugControl5*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace_ex.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def output_stack_trace_ex(this : IDebugControl5*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace_ex.call(this, output_control, frames, frames_size, flags)
    end
    def get_context_stack_trace_ex(this : IDebugControl5*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace_ex.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace_ex(this : IDebugControl5*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace_ex.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_breakpoint_by_guid(this : IDebugControl5*, guid : LibC::GUID*, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_guid.call(this, guid, bp)
    end

  end

  @[Extern]
  record IDebugControl6Vtbl,
    query_interface : Proc(IDebugControl6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl6*, UInt32),
    release : Proc(IDebugControl6*, UInt32),
    get_interrupt : Proc(IDebugControl6*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl6*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl6*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl6*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl6*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl6*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl6*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl6*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl6*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl6*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl6*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl6*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl6*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl6*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl6*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl6*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl6*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl6*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl6*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl6*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl6*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_assembly_options : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    add_assembly_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    remove_assembly_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    set_assembly_options : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_expression_syntax : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_expression_syntax : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_number_expression_syntaxes : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_events : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_event_index : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    set_next_event_index : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file_wide : Proc(IDebugControl6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    input_wide : Proc(IDebugControl6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_va_list_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output_wide : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list_wide : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text_wide : Proc(IDebugControl6*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    assemble_wide : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble_wide : Proc(IDebugControl6*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_processor_type_names_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_macro_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    evaluate_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    execute_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index2 : Proc(IDebugControl6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id2 : Proc(IDebugControl6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_breakpoint2 : Proc(IDebugControl6*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint2 : Proc(IDebugControl6*, Void*, Win32cr::Foundation::HRESULT),
    add_extension_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_extension_by_path_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension_wide : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_extension_function_wide : Proc(IDebugControl6*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_event_filter_text_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command_wide : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_last_event_information_wide : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description_wide : Proc(IDebugControl6*, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file2 : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2 : Proc(IDebugControl6*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file2_wide : Proc(IDebugControl6*, UInt16*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2_wide : Proc(IDebugControl6*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_system_version_values : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string_wide : Proc(IDebugControl6*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_stack_trace : Proc(IDebugControl6*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stored_event_information : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status : Proc(IDebugControl6*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status_wide : Proc(IDebugControl6*, UInt32*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    reset_managed_status : Proc(IDebugControl6*, UInt32, Win32cr::Foundation::HRESULT),
    get_stack_trace_ex : Proc(IDebugControl6*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_stack_trace_ex : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_context_stack_trace_ex : Proc(IDebugControl6*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace_ex : Proc(IDebugControl6*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_guid : Proc(IDebugControl6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_execution_status_ex : Proc(IDebugControl6*, UInt32*, Win32cr::Foundation::HRESULT),
    get_synchronization_status : Proc(IDebugControl6*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl6, lpVtbl : IDebugControl6Vtbl* do
    GUID = LibC::GUID.new(0xbc0d583f_u32, 0x126d_u16, 0x43a1_u16, StaticArray[0x9c_u8, 0xc4_u8, 0xa8_u8, 0x60_u8, 0xab_u8, 0x1d_u8, 0x53_u8, 0x7b_u8])
    def query_interface(this : IDebugControl6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl6*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl6*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl6*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl6*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl6*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl6*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl6*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl6*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl6*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl6*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl6*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl6*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl6*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl6*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl6*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl6*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl6*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl6*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl6*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl6*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl6*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl6*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl6*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl6*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl6*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl6*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl6*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl6*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl6*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl6*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl6*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl6*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl6*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl6*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl6*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl6*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl6*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl6*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl6*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl6*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl6*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl6*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl6*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl6*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl6*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl6*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl6*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl6*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl6*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl6*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl6*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl6*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl6*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl6*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl6*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl6*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl6*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl6*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl6*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl6*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl6*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl6*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl6*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl6*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl6*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl6*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl6*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl6*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl6*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl6*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl6*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl6*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl6*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl6*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl6*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl6*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl6*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl6*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl6*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl6*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl6*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl6*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl6*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl6*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl6*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end
    def get_assembly_options(this : IDebugControl6*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_assembly_options.call(this, options)
    end
    def add_assembly_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_assembly_options.call(this, options)
    end
    def remove_assembly_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_assembly_options.call(this, options)
    end
    def set_assembly_options(this : IDebugControl6*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assembly_options.call(this, options)
    end
    def get_expression_syntax(this : IDebugControl6*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax.call(this, flags)
    end
    def set_expression_syntax(this : IDebugControl6*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax.call(this, flags)
    end
    def set_expression_syntax_by_name(this : IDebugControl6*, abbrev_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name.call(this, abbrev_name)
    end
    def get_number_expression_syntaxes(this : IDebugControl6*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_expression_syntaxes.call(this, number)
    end
    def get_expression_syntax_names(this : IDebugControl6*, index : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_number_events(this : IDebugControl6*, events : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_events.call(this, events)
    end
    def get_event_index_description(this : IDebugControl6*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_current_event_index(this : IDebugControl6*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_event_index.call(this, index)
    end
    def set_next_event_index(this : IDebugControl6*, relation : UInt32, value : UInt32, next_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_event_index.call(this, relation, value, next_index)
    end
    def get_log_file_wide(this : IDebugControl6*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file_wide.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file_wide(this : IDebugControl6*, file : Win32cr::Foundation::PWSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file_wide.call(this, file, append)
    end
    def input_wide(this : IDebugControl6*, buffer : UInt16*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input_wide.call(this, buffer, buffer_size, input_size)
    end
    def return_input_wide(this : IDebugControl6*, buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input_wide.call(this, buffer)
    end
    def output_wide(this : IDebugControl6*, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_wide.call(this, mask, format)
    end
    def output_va_list_wide(this : IDebugControl6*, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list_wide.call(this, mask, format, args)
    end
    def controlled_output_wide(this : IDebugControl6*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_wide.call(this, output_control, mask, format)
    end
    def controlled_output_va_list_wide(this : IDebugControl6*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list_wide.call(this, output_control, mask, format, args)
    end
    def output_prompt_wide(this : IDebugControl6*, output_control : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_wide.call(this, output_control, format)
    end
    def output_prompt_va_list_wide(this : IDebugControl6*, output_control : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list_wide.call(this, output_control, format, args)
    end
    def get_prompt_text_wide(this : IDebugControl6*, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text_wide.call(this, buffer, buffer_size, text_size)
    end
    def assemble_wide(this : IDebugControl6*, offset : UInt64, instr : Win32cr::Foundation::PWSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble_wide.call(this, offset, instr, end_offset)
    end
    def disassemble_wide(this : IDebugControl6*, offset : UInt64, flags : UInt32, buffer : UInt16*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble_wide.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_processor_type_names_wide(this : IDebugControl6*, type__ : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names_wide.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_text_macro_wide(this : IDebugControl6*, slot : UInt32, buffer : UInt16*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro_wide.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro_wide(this : IDebugControl6*, slot : UInt32, macro__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro_wide.call(this, slot, macro__)
    end
    def evaluate_wide(this : IDebugControl6*, expression : Win32cr::Foundation::PWSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_wide.call(this, expression, desired_type, value, remainder_index)
    end
    def execute_wide(this : IDebugControl6*, output_control : UInt32, command : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_wide.call(this, output_control, command, flags)
    end
    def execute_command_file_wide(this : IDebugControl6*, output_control : UInt32, command_file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file_wide.call(this, output_control, command_file, flags)
    end
    def get_breakpoint_by_index2(this : IDebugControl6*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index2.call(this, index, bp)
    end
    def get_breakpoint_by_id2(this : IDebugControl6*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id2.call(this, id, bp)
    end
    def add_breakpoint2(this : IDebugControl6*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint2.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint2(this : IDebugControl6*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint2.call(this, bp)
    end
    def add_extension_wide(this : IDebugControl6*, path : Win32cr::Foundation::PWSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension_wide.call(this, path, flags, handle)
    end
    def get_extension_by_path_wide(this : IDebugControl6*, path : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path_wide.call(this, path, handle)
    end
    def call_extension_wide(this : IDebugControl6*, handle : UInt64, function : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension_wide.call(this, handle, function, arguments)
    end
    def get_extension_function_wide(this : IDebugControl6*, handle : UInt64, func_name : Win32cr::Foundation::PWSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function_wide.call(this, handle, func_name, function)
    end
    def get_event_filter_text_wide(this : IDebugControl6*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text_wide.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command_wide(this : IDebugControl6*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command_wide(this : IDebugControl6*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command_wide.call(this, index, command)
    end
    def get_specific_filter_argument_wide(this : IDebugControl6*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument_wide.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument_wide(this : IDebugControl6*, index : UInt32, argument : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument_wide.call(this, index, argument)
    end
    def get_exception_filter_second_command_wide(this : IDebugControl6*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command_wide(this : IDebugControl6*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command_wide.call(this, index, command)
    end
    def get_last_event_information_wide(this : IDebugControl6*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt16*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information_wide.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_text_replacement_wide(this : IDebugControl6*, src_text : Win32cr::Foundation::PWSTR, index : UInt32, src_buffer : UInt16*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt16*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement_wide.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement_wide(this : IDebugControl6*, src_text : Win32cr::Foundation::PWSTR, dst_text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement_wide.call(this, src_text, dst_text)
    end
    def set_expression_syntax_by_name_wide(this : IDebugControl6*, abbrev_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name_wide.call(this, abbrev_name)
    end
    def get_expression_syntax_names_wide(this : IDebugControl6*, index : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names_wide.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_event_index_description_wide(this : IDebugControl6*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PWSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description_wide.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_log_file2(this : IDebugControl6*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2(this : IDebugControl6*, file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2.call(this, file, flags)
    end
    def get_log_file2_wide(this : IDebugControl6*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2_wide.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2_wide(this : IDebugControl6*, file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2_wide.call(this, file, flags)
    end
    def get_system_version_values(this : IDebugControl6*, platform_id : UInt32*, win32_major : UInt32*, win32_minor : UInt32*, kd_major : UInt32*, kd_minor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_values.call(this, platform_id, win32_major, win32_minor, kd_major, kd_minor)
    end
    def get_system_version_string(this : IDebugControl6*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string.call(this, which, buffer, buffer_size, string_size)
    end
    def get_system_version_string_wide(this : IDebugControl6*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string_wide.call(this, which, buffer, buffer_size, string_size)
    end
    def get_context_stack_trace(this : IDebugControl6*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace(this : IDebugControl6*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_stored_event_information(this : IDebugControl6*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, context : Void*, context_size : UInt32, context_used : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stored_event_information.call(this, type__, process_id, thread_id, context, context_size, context_used, extra_information, extra_information_size, extra_information_used)
    end
    def get_managed_status(this : IDebugControl6*, flags : UInt32*, which_string : UInt32, string : UInt8*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status.call(this, flags, which_string, string, string_size, string_needed)
    end
    def get_managed_status_wide(this : IDebugControl6*, flags : UInt32*, which_string : UInt32, string : UInt16*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status_wide.call(this, flags, which_string, string, string_size, string_needed)
    end
    def reset_managed_status(this : IDebugControl6*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_managed_status.call(this, flags)
    end
    def get_stack_trace_ex(this : IDebugControl6*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace_ex.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def output_stack_trace_ex(this : IDebugControl6*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace_ex.call(this, output_control, frames, frames_size, flags)
    end
    def get_context_stack_trace_ex(this : IDebugControl6*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace_ex.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace_ex(this : IDebugControl6*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace_ex.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_breakpoint_by_guid(this : IDebugControl6*, guid : LibC::GUID*, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_guid.call(this, guid, bp)
    end
    def get_execution_status_ex(this : IDebugControl6*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status_ex.call(this, status)
    end
    def get_synchronization_status(this : IDebugControl6*, sends_attempted : UInt32*, seconds_since_last_response : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_synchronization_status.call(this, sends_attempted, seconds_since_last_response)
    end

  end

  @[Extern]
  record IDebugControl7Vtbl,
    query_interface : Proc(IDebugControl7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugControl7*, UInt32),
    release : Proc(IDebugControl7*, UInt32),
    get_interrupt : Proc(IDebugControl7*, Win32cr::Foundation::HRESULT),
    set_interrupt : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_interrupt_timeout : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interrupt_timeout : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    close_log_file : Proc(IDebugControl7*, Win32cr::Foundation::HRESULT),
    get_log_mask : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_log_mask : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    input : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_va_list : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_current_state : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    output_version_information : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_notify_event_handle : Proc(IDebugControl7*, UInt64*, Win32cr::Foundation::HRESULT),
    set_notify_event_handle : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::HRESULT),
    assemble : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble : Proc(IDebugControl7*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_disassemble_effective_offset : Proc(IDebugControl7*, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly : Proc(IDebugControl7*, UInt32, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    output_disassembly_lines : Proc(IDebugControl7*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_instruction : Proc(IDebugControl7*, UInt64, Int32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_trace : Proc(IDebugControl7*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_return_offset : Proc(IDebugControl7*, UInt64*, Win32cr::Foundation::HRESULT),
    output_stack_trace : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_debuggee_type : Proc(IDebugControl7*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_actual_processor_type : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_executing_processor_type : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_possible_executing_processor_types : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_possible_executing_processor_types : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processors : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_size : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    is_pointer64_bit : Proc(IDebugControl7*, Win32cr::Foundation::HRESULT),
    read_bug_check_data : Proc(IDebugControl7*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_supported_processor_types : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_processor_types : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_processor_type_names : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_effective_processor_type : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_effective_processor_type : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_execution_status : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_execution_status : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_code_level : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_code_level : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_engine_options : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    add_engine_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    remove_engine_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    set_engine_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_system_error_control : Proc(IDebugControl7*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_system_error_control : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_text_macro : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_radix : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_radix : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    coerce_value : Proc(IDebugControl7*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    coerce_values : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_number_breakpoints : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index : Proc(IDebugControl7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id : Proc(IDebugControl7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_parameters : Proc(IDebugControl7*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    add_breakpoint : Proc(IDebugControl7*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint : Proc(IDebugControl7*, Void*, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::HRESULT),
    get_extension_by_path : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_extension_function : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis32 : Proc(IDebugControl7*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, Win32cr::Foundation::HRESULT),
    get_windbg_extension_apis64 : Proc(IDebugControl7*, Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, Win32cr::Foundation::HRESULT),
    get_number_event_filters : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_text : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_specific_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_exception_filter_parameters : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    wait_for_event : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_last_event_information : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_time_date : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_up_time : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dump_format_flags : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_text_replacements : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_text_replacements : Proc(IDebugControl7*, Win32cr::Foundation::HRESULT),
    output_text_replacements : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_assembly_options : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    add_assembly_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    remove_assembly_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    set_assembly_options : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_expression_syntax : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_expression_syntax : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_number_expression_syntaxes : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_events : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_event_index : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    set_next_event_index : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file_wide : Proc(IDebugControl7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_log_file_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    input_wide : Proc(IDebugControl7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    return_input_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_va_list_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    controlled_output_wide : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    controlled_output_va_list_wide : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    output_prompt_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_prompt_va_list_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Int8*, Win32cr::Foundation::HRESULT),
    get_prompt_text_wide : Proc(IDebugControl7*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    assemble_wide : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    disassemble_wide : Proc(IDebugControl7*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_processor_type_names_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_macro_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_macro_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    evaluate_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, UInt32*, Win32cr::Foundation::HRESULT),
    execute_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    execute_command_file_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_index2 : Proc(IDebugControl7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_id2 : Proc(IDebugControl7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_breakpoint2 : Proc(IDebugControl7*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_breakpoint2 : Proc(IDebugControl7*, Void*, Win32cr::Foundation::HRESULT),
    add_extension_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_extension_by_path_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    call_extension_wide : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_extension_function_wide : Proc(IDebugControl7*, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::FARPROC*, Win32cr::Foundation::HRESULT),
    get_event_filter_text_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_filter_command_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_event_filter_command_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_specific_filter_argument_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_specific_filter_argument_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_exception_filter_second_command_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_exception_filter_second_command_wide : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_last_event_information_wide : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_replacement_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_text_replacement_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_expression_syntax_by_name_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_expression_syntax_names_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_index_description_wide : Proc(IDebugControl7*, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_log_file2 : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2 : Proc(IDebugControl7*, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_log_file2_wide : Proc(IDebugControl7*, UInt16*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    open_log_file2_wide : Proc(IDebugControl7*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    get_system_version_values : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_version_string_wide : Proc(IDebugControl7*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_stack_trace : Proc(IDebugControl7*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stored_event_information : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status : Proc(IDebugControl7*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_managed_status_wide : Proc(IDebugControl7*, UInt32*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    reset_managed_status : Proc(IDebugControl7*, UInt32, Win32cr::Foundation::HRESULT),
    get_stack_trace_ex : Proc(IDebugControl7*, UInt64, UInt64, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_stack_trace_ex : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_context_stack_trace_ex : Proc(IDebugControl7*, Void*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_context_stack_trace_ex : Proc(IDebugControl7*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_breakpoint_by_guid : Proc(IDebugControl7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_execution_status_ex : Proc(IDebugControl7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_synchronization_status : Proc(IDebugControl7*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_debuggee_type2 : Proc(IDebugControl7*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugControl7, lpVtbl : IDebugControl7Vtbl* do
    GUID = LibC::GUID.new(0xb86fb3b1_u32, 0x80d4_u16, 0x475b_u16, StaticArray[0xae_u8, 0xa3_u8, 0xcf_u8, 0x6_u8, 0x53_u8, 0x9c_u8, 0xf6_u8, 0x3a_u8])
    def query_interface(this : IDebugControl7*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugControl7*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugControl7*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interrupt(this : IDebugControl7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt.call(this)
    end
    def set_interrupt(this : IDebugControl7*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt.call(this, flags)
    end
    def get_interrupt_timeout(this : IDebugControl7*, seconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interrupt_timeout.call(this, seconds)
    end
    def set_interrupt_timeout(this : IDebugControl7*, seconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interrupt_timeout.call(this, seconds)
    end
    def get_log_file(this : IDebugControl7*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file(this : IDebugControl7*, file : Win32cr::Foundation::PSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file.call(this, file, append)
    end
    def close_log_file(this : IDebugControl7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log_file.call(this)
    end
    def get_log_mask(this : IDebugControl7*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_mask.call(this, mask)
    end
    def set_log_mask(this : IDebugControl7*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_mask.call(this, mask)
    end
    def input(this : IDebugControl7*, buffer : UInt8*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input.call(this, buffer, buffer_size, input_size)
    end
    def return_input(this : IDebugControl7*, buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input.call(this, buffer)
    end
    def output(this : IDebugControl7*, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, format)
    end
    def output_va_list(this : IDebugControl7*, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list.call(this, mask, format, args)
    end
    def controlled_output(this : IDebugControl7*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output.call(this, output_control, mask, format)
    end
    def controlled_output_va_list(this : IDebugControl7*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list.call(this, output_control, mask, format, args)
    end
    def output_prompt(this : IDebugControl7*, output_control : UInt32, format : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt.call(this, output_control, format)
    end
    def output_prompt_va_list(this : IDebugControl7*, output_control : UInt32, format : Win32cr::Foundation::PSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list.call(this, output_control, format, args)
    end
    def get_prompt_text(this : IDebugControl7*, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text.call(this, buffer, buffer_size, text_size)
    end
    def output_current_state(this : IDebugControl7*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_current_state.call(this, output_control, flags)
    end
    def output_version_information(this : IDebugControl7*, output_control : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_version_information.call(this, output_control)
    end
    def get_notify_event_handle(this : IDebugControl7*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_event_handle.call(this, handle)
    end
    def set_notify_event_handle(this : IDebugControl7*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_event_handle.call(this, handle)
    end
    def assemble(this : IDebugControl7*, offset : UInt64, instr : Win32cr::Foundation::PSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble.call(this, offset, instr, end_offset)
    end
    def disassemble(this : IDebugControl7*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_disassemble_effective_offset(this : IDebugControl7*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disassemble_effective_offset.call(this, offset)
    end
    def output_disassembly(this : IDebugControl7*, output_control : UInt32, offset : UInt64, flags : UInt32, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly.call(this, output_control, offset, flags, end_offset)
    end
    def output_disassembly_lines(this : IDebugControl7*, output_control : UInt32, previous_lines : UInt32, total_lines : UInt32, offset : UInt64, flags : UInt32, offset_line : UInt32*, start_offset : UInt64*, end_offset : UInt64*, line_offsets : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_disassembly_lines.call(this, output_control, previous_lines, total_lines, offset, flags, offset_line, start_offset, end_offset, line_offsets)
    end
    def get_near_instruction(this : IDebugControl7*, offset : UInt64, delta : Int32, near_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_instruction.call(this, offset, delta, near_offset)
    end
    def get_stack_trace(this : IDebugControl7*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def get_return_offset(this : IDebugControl7*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_offset.call(this, offset)
    end
    def output_stack_trace(this : IDebugControl7*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace.call(this, output_control, frames, frames_size, flags)
    end
    def get_debuggee_type(this : IDebugControl7*, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type.call(this, class__, qualifier)
    end
    def get_actual_processor_type(this : IDebugControl7*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_processor_type.call(this, type__)
    end
    def get_executing_processor_type(this : IDebugControl7*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_executing_processor_type.call(this, type__)
    end
    def get_number_possible_executing_processor_types(this : IDebugControl7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_possible_executing_processor_types.call(this, number)
    end
    def get_possible_executing_processor_types(this : IDebugControl7*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_possible_executing_processor_types.call(this, start, count, types)
    end
    def get_number_processors(this : IDebugControl7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processors.call(this, number)
    end
    def get_system_version(this : IDebugControl7*, platform_id : UInt32*, major : UInt32*, minor : UInt32*, service_pack_string : UInt8*, service_pack_string_size : UInt32, service_pack_string_used : UInt32*, service_pack_number : UInt32*, build_string : UInt8*, build_string_size : UInt32, build_string_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version.call(this, platform_id, major, minor, service_pack_string, service_pack_string_size, service_pack_string_used, service_pack_number, build_string, build_string_size, build_string_used)
    end
    def get_page_size(this : IDebugControl7*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_size.call(this, size)
    end
    def is_pointer64_bit(this : IDebugControl7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_pointer64_bit.call(this)
    end
    def read_bug_check_data(this : IDebugControl7*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
    end
    def get_number_supported_processor_types(this : IDebugControl7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_supported_processor_types.call(this, number)
    end
    def get_supported_processor_types(this : IDebugControl7*, start : UInt32, count : UInt32, types : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_processor_types.call(this, start, count, types)
    end
    def get_processor_type_names(this : IDebugControl7*, type__ : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_effective_processor_type(this : IDebugControl7*, type__ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effective_processor_type.call(this, type__)
    end
    def set_effective_processor_type(this : IDebugControl7*, type__ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_effective_processor_type.call(this, type__)
    end
    def get_execution_status(this : IDebugControl7*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status.call(this, status)
    end
    def set_execution_status(this : IDebugControl7*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_execution_status.call(this, status)
    end
    def get_code_level(this : IDebugControl7*, level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_level.call(this, level)
    end
    def set_code_level(this : IDebugControl7*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_code_level.call(this, level)
    end
    def get_engine_options(this : IDebugControl7*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_engine_options.call(this, options)
    end
    def add_engine_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_engine_options.call(this, options)
    end
    def remove_engine_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_engine_options.call(this, options)
    end
    def set_engine_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_engine_options.call(this, options)
    end
    def get_system_error_control(this : IDebugControl7*, output_level : UInt32*, break_level : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_error_control.call(this, output_level, break_level)
    end
    def set_system_error_control(this : IDebugControl7*, output_level : UInt32, break_level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_system_error_control.call(this, output_level, break_level)
    end
    def get_text_macro(this : IDebugControl7*, slot : UInt32, buffer : UInt8*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro(this : IDebugControl7*, slot : UInt32, macro__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro.call(this, slot, macro__)
    end
    def get_radix(this : IDebugControl7*, radix : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_radix.call(this, radix)
    end
    def set_radix(this : IDebugControl7*, radix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_radix.call(this, radix)
    end
    def evaluate(this : IDebugControl7*, expression : Win32cr::Foundation::PSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, expression, desired_type, value, remainder_index)
    end
    def coerce_value(this : IDebugControl7*, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_type : UInt32, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_value.call(this, in__, out_type, out__)
    end
    def coerce_values(this : IDebugControl7*, count : UInt32, in__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, out_types : UInt32*, out__ : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.coerce_values.call(this, count, in__, out_types, out__)
    end
    def execute(this : IDebugControl7*, output_control : UInt32, command : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, output_control, command, flags)
    end
    def execute_command_file(this : IDebugControl7*, output_control : UInt32, command_file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file.call(this, output_control, command_file, flags)
    end
    def get_number_breakpoints(this : IDebugControl7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_breakpoints.call(this, number)
    end
    def get_breakpoint_by_index(this : IDebugControl7*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index.call(this, index, bp)
    end
    def get_breakpoint_by_id(this : IDebugControl7*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id.call(this, id, bp)
    end
    def get_breakpoint_parameters(this : IDebugControl7*, count : UInt32, ids : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_BREAKPOINT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_parameters.call(this, count, ids, start, params)
    end
    def add_breakpoint(this : IDebugControl7*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint(this : IDebugControl7*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint.call(this, bp)
    end
    def add_extension(this : IDebugControl7*, path : Win32cr::Foundation::PSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, path, flags, handle)
    end
    def remove_extension(this : IDebugControl7*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, handle)
    end
    def get_extension_by_path(this : IDebugControl7*, path : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path.call(this, path, handle)
    end
    def call_extension(this : IDebugControl7*, handle : UInt64, function : Win32cr::Foundation::PSTR, arguments : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension.call(this, handle, function, arguments)
    end
    def get_extension_function(this : IDebugControl7*, handle : UInt64, func_name : Win32cr::Foundation::PSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function.call(this, handle, func_name, function)
    end
    def get_windbg_extension_apis32(this : IDebugControl7*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis32.call(this, api)
    end
    def get_windbg_extension_apis64(this : IDebugControl7*, api : Win32cr::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windbg_extension_apis64.call(this, api)
    end
    def get_number_event_filters(this : IDebugControl7*, specific_events : UInt32*, specific_exceptions : UInt32*, arbitrary_exceptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_event_filters.call(this, specific_events, specific_exceptions, arbitrary_exceptions)
    end
    def get_event_filter_text(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command(this : IDebugControl7*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command.call(this, index, command)
    end
    def get_specific_filter_parameters(this : IDebugControl7*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_parameters.call(this, start, count, params)
    end
    def set_specific_filter_parameters(this : IDebugControl7*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SPECIFIC_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_parameters.call(this, start, count, params)
    end
    def get_specific_filter_argument(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument(this : IDebugControl7*, index : UInt32, argument : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument.call(this, index, argument)
    end
    def get_exception_filter_parameters(this : IDebugControl7*, count : UInt32, codes : UInt32*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_parameters.call(this, count, codes, start, params)
    end
    def set_exception_filter_parameters(this : IDebugControl7*, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_EXCEPTION_FILTER_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_parameters.call(this, count, params)
    end
    def get_exception_filter_second_command(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command(this : IDebugControl7*, index : UInt32, command : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command.call(this, index, command)
    end
    def wait_for_event(this : IDebugControl7*, flags : UInt32, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_event.call(this, flags, timeout)
    end
    def get_last_event_information(this : IDebugControl7*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt8*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_current_time_date(this : IDebugControl7*, time_date : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_date.call(this, time_date)
    end
    def get_current_system_up_time(this : IDebugControl7*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_up_time.call(this, up_time)
    end
    def get_dump_format_flags(this : IDebugControl7*, format_flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dump_format_flags.call(this, format_flags)
    end
    def get_number_text_replacements(this : IDebugControl7*, num_repl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_text_replacements.call(this, num_repl)
    end
    def get_text_replacement(this : IDebugControl7*, src_text : Win32cr::Foundation::PSTR, index : UInt32, src_buffer : UInt8*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt8*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement(this : IDebugControl7*, src_text : Win32cr::Foundation::PSTR, dst_text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement.call(this, src_text, dst_text)
    end
    def remove_text_replacements(this : IDebugControl7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text_replacements.call(this)
    end
    def output_text_replacements(this : IDebugControl7*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_text_replacements.call(this, output_control, flags)
    end
    def get_assembly_options(this : IDebugControl7*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_assembly_options.call(this, options)
    end
    def add_assembly_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_assembly_options.call(this, options)
    end
    def remove_assembly_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_assembly_options.call(this, options)
    end
    def set_assembly_options(this : IDebugControl7*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assembly_options.call(this, options)
    end
    def get_expression_syntax(this : IDebugControl7*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax.call(this, flags)
    end
    def set_expression_syntax(this : IDebugControl7*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax.call(this, flags)
    end
    def set_expression_syntax_by_name(this : IDebugControl7*, abbrev_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name.call(this, abbrev_name)
    end
    def get_number_expression_syntaxes(this : IDebugControl7*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_expression_syntaxes.call(this, number)
    end
    def get_expression_syntax_names(this : IDebugControl7*, index : UInt32, full_name_buffer : UInt8*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt8*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_number_events(this : IDebugControl7*, events : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_events.call(this, events)
    end
    def get_event_index_description(this : IDebugControl7*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_current_event_index(this : IDebugControl7*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_event_index.call(this, index)
    end
    def set_next_event_index(this : IDebugControl7*, relation : UInt32, value : UInt32, next_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_event_index.call(this, relation, value, next_index)
    end
    def get_log_file_wide(this : IDebugControl7*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, append : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file_wide.call(this, buffer, buffer_size, file_size, append)
    end
    def open_log_file_wide(this : IDebugControl7*, file : Win32cr::Foundation::PWSTR, append : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file_wide.call(this, file, append)
    end
    def input_wide(this : IDebugControl7*, buffer : UInt16*, buffer_size : UInt32, input_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.input_wide.call(this, buffer, buffer_size, input_size)
    end
    def return_input_wide(this : IDebugControl7*, buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_input_wide.call(this, buffer)
    end
    def output_wide(this : IDebugControl7*, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_wide.call(this, mask, format)
    end
    def output_va_list_wide(this : IDebugControl7*, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_va_list_wide.call(this, mask, format, args)
    end
    def controlled_output_wide(this : IDebugControl7*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_wide.call(this, output_control, mask, format)
    end
    def controlled_output_va_list_wide(this : IDebugControl7*, output_control : UInt32, mask : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.controlled_output_va_list_wide.call(this, output_control, mask, format, args)
    end
    def output_prompt_wide(this : IDebugControl7*, output_control : UInt32, format : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_wide.call(this, output_control, format)
    end
    def output_prompt_va_list_wide(this : IDebugControl7*, output_control : UInt32, format : Win32cr::Foundation::PWSTR, args : Int8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_prompt_va_list_wide.call(this, output_control, format, args)
    end
    def get_prompt_text_wide(this : IDebugControl7*, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prompt_text_wide.call(this, buffer, buffer_size, text_size)
    end
    def assemble_wide(this : IDebugControl7*, offset : UInt64, instr : Win32cr::Foundation::PWSTR, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assemble_wide.call(this, offset, instr, end_offset)
    end
    def disassemble_wide(this : IDebugControl7*, offset : UInt64, flags : UInt32, buffer : UInt16*, buffer_size : UInt32, disassembly_size : UInt32*, end_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassemble_wide.call(this, offset, flags, buffer, buffer_size, disassembly_size, end_offset)
    end
    def get_processor_type_names_wide(this : IDebugControl7*, type__ : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processor_type_names_wide.call(this, type__, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_text_macro_wide(this : IDebugControl7*, slot : UInt32, buffer : UInt16*, buffer_size : UInt32, macro_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_macro_wide.call(this, slot, buffer, buffer_size, macro_size)
    end
    def set_text_macro_wide(this : IDebugControl7*, slot : UInt32, macro__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_macro_wide.call(this, slot, macro__)
    end
    def evaluate_wide(this : IDebugControl7*, expression : Win32cr::Foundation::PWSTR, desired_type : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, remainder_index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_wide.call(this, expression, desired_type, value, remainder_index)
    end
    def execute_wide(this : IDebugControl7*, output_control : UInt32, command : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_wide.call(this, output_control, command, flags)
    end
    def execute_command_file_wide(this : IDebugControl7*, output_control : UInt32, command_file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_command_file_wide.call(this, output_control, command_file, flags)
    end
    def get_breakpoint_by_index2(this : IDebugControl7*, index : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_index2.call(this, index, bp)
    end
    def get_breakpoint_by_id2(this : IDebugControl7*, id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_id2.call(this, id, bp)
    end
    def add_breakpoint2(this : IDebugControl7*, type__ : UInt32, desired_id : UInt32, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_breakpoint2.call(this, type__, desired_id, bp)
    end
    def remove_breakpoint2(this : IDebugControl7*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_breakpoint2.call(this, bp)
    end
    def add_extension_wide(this : IDebugControl7*, path : Win32cr::Foundation::PWSTR, flags : UInt32, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension_wide.call(this, path, flags, handle)
    end
    def get_extension_by_path_wide(this : IDebugControl7*, path : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_by_path_wide.call(this, path, handle)
    end
    def call_extension_wide(this : IDebugControl7*, handle : UInt64, function : Win32cr::Foundation::PWSTR, arguments : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call_extension_wide.call(this, handle, function, arguments)
    end
    def get_extension_function_wide(this : IDebugControl7*, handle : UInt64, func_name : Win32cr::Foundation::PWSTR, function : Win32cr::Foundation::FARPROC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension_function_wide.call(this, handle, func_name, function)
    end
    def get_event_filter_text_wide(this : IDebugControl7*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, text_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_text_wide.call(this, index, buffer, buffer_size, text_size)
    end
    def get_event_filter_command_wide(this : IDebugControl7*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_event_filter_command_wide(this : IDebugControl7*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter_command_wide.call(this, index, command)
    end
    def get_specific_filter_argument_wide(this : IDebugControl7*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, argument_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specific_filter_argument_wide.call(this, index, buffer, buffer_size, argument_size)
    end
    def set_specific_filter_argument_wide(this : IDebugControl7*, index : UInt32, argument : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_specific_filter_argument_wide.call(this, index, argument)
    end
    def get_exception_filter_second_command_wide(this : IDebugControl7*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, command_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffer_size, command_size)
    end
    def set_exception_filter_second_command_wide(this : IDebugControl7*, index : UInt32, command : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_filter_second_command_wide.call(this, index, command)
    end
    def get_last_event_information_wide(this : IDebugControl7*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*, description : UInt16*, description_size : UInt32, description_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_event_information_wide.call(this, type__, process_id, thread_id, extra_information, extra_information_size, extra_information_used, description, description_size, description_used)
    end
    def get_text_replacement_wide(this : IDebugControl7*, src_text : Win32cr::Foundation::PWSTR, index : UInt32, src_buffer : UInt16*, src_buffer_size : UInt32, src_size : UInt32*, dst_buffer : UInt16*, dst_buffer_size : UInt32, dst_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_replacement_wide.call(this, src_text, index, src_buffer, src_buffer_size, src_size, dst_buffer, dst_buffer_size, dst_size)
    end
    def set_text_replacement_wide(this : IDebugControl7*, src_text : Win32cr::Foundation::PWSTR, dst_text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_replacement_wide.call(this, src_text, dst_text)
    end
    def set_expression_syntax_by_name_wide(this : IDebugControl7*, abbrev_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_expression_syntax_by_name_wide.call(this, abbrev_name)
    end
    def get_expression_syntax_names_wide(this : IDebugControl7*, index : UInt32, full_name_buffer : UInt16*, full_name_buffer_size : UInt32, full_name_size : UInt32*, abbrev_name_buffer : UInt16*, abbrev_name_buffer_size : UInt32, abbrev_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expression_syntax_names_wide.call(this, index, full_name_buffer, full_name_buffer_size, full_name_size, abbrev_name_buffer, abbrev_name_buffer_size, abbrev_name_size)
    end
    def get_event_index_description_wide(this : IDebugControl7*, index : UInt32, which : UInt32, buffer : Win32cr::Foundation::PWSTR, buffer_size : UInt32, desc_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_index_description_wide.call(this, index, which, buffer, buffer_size, desc_size)
    end
    def get_log_file2(this : IDebugControl7*, buffer : UInt8*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2(this : IDebugControl7*, file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2.call(this, file, flags)
    end
    def get_log_file2_wide(this : IDebugControl7*, buffer : UInt16*, buffer_size : UInt32, file_size : UInt32*, flags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_log_file2_wide.call(this, buffer, buffer_size, file_size, flags)
    end
    def open_log_file2_wide(this : IDebugControl7*, file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log_file2_wide.call(this, file, flags)
    end
    def get_system_version_values(this : IDebugControl7*, platform_id : UInt32*, win32_major : UInt32*, win32_minor : UInt32*, kd_major : UInt32*, kd_minor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_values.call(this, platform_id, win32_major, win32_minor, kd_major, kd_minor)
    end
    def get_system_version_string(this : IDebugControl7*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string.call(this, which, buffer, buffer_size, string_size)
    end
    def get_system_version_string_wide(this : IDebugControl7*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_version_string_wide.call(this, which, buffer, buffer_size, string_size)
    end
    def get_context_stack_trace(this : IDebugControl7*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace(this : IDebugControl7*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_stored_event_information(this : IDebugControl7*, type__ : UInt32*, process_id : UInt32*, thread_id : UInt32*, context : Void*, context_size : UInt32, context_used : UInt32*, extra_information : Void*, extra_information_size : UInt32, extra_information_used : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stored_event_information.call(this, type__, process_id, thread_id, context, context_size, context_used, extra_information, extra_information_size, extra_information_used)
    end
    def get_managed_status(this : IDebugControl7*, flags : UInt32*, which_string : UInt32, string : UInt8*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status.call(this, flags, which_string, string, string_size, string_needed)
    end
    def get_managed_status_wide(this : IDebugControl7*, flags : UInt32*, which_string : UInt32, string : UInt16*, string_size : UInt32, string_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_managed_status_wide.call(this, flags, which_string, string, string_size, string_needed)
    end
    def reset_managed_status(this : IDebugControl7*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_managed_status.call(this, flags)
    end
    def get_stack_trace_ex(this : IDebugControl7*, frame_offset : UInt64, stack_offset : UInt64, instruction_offset : UInt64, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_trace_ex.call(this, frame_offset, stack_offset, instruction_offset, frames, frames_size, frames_filled)
    end
    def output_stack_trace_ex(this : IDebugControl7*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_stack_trace_ex.call(this, output_control, frames, frames_size, flags)
    end
    def get_context_stack_trace_ex(this : IDebugControl7*, start_context : Void*, start_context_size : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, frames_filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_stack_trace_ex.call(this, start_context, start_context_size, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, frames_filled)
    end
    def output_context_stack_trace_ex(this : IDebugControl7*, output_control : UInt32, frames : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, frames_size : UInt32, frame_contexts : Void*, frame_contexts_size : UInt32, frame_contexts_entry_size : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_context_stack_trace_ex.call(this, output_control, frames, frames_size, frame_contexts, frame_contexts_size, frame_contexts_entry_size, flags)
    end
    def get_breakpoint_by_guid(this : IDebugControl7*, guid : LibC::GUID*, bp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_breakpoint_by_guid.call(this, guid, bp)
    end
    def get_execution_status_ex(this : IDebugControl7*, status : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_execution_status_ex.call(this, status)
    end
    def get_synchronization_status(this : IDebugControl7*, sends_attempted : UInt32*, seconds_since_last_response : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_synchronization_status.call(this, sends_attempted, seconds_since_last_response)
    end
    def get_debuggee_type2(this : IDebugControl7*, flags : UInt32, class__ : UInt32*, qualifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debuggee_type2.call(this, flags, class__, qualifier)
    end

  end

  @[Extern]
  record IDebugDataSpacesVtbl,
    query_interface : Proc(IDebugDataSpaces*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDataSpaces*, UInt32),
    release : Proc(IDebugDataSpaces*, UInt32),
    read_virtual : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    search_virtual : Proc(IDebugDataSpaces*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_virtual_uncached : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual_uncached : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_pointers_virtual : Proc(IDebugDataSpaces*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers_virtual : Proc(IDebugDataSpaces*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_physical : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_physical : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_control : Proc(IDebugDataSpaces*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_control : Proc(IDebugDataSpaces*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_io : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_io : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_msr : Proc(IDebugDataSpaces*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    write_msr : Proc(IDebugDataSpaces*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    read_bus_data : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_bus_data : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_low_memory : Proc(IDebugDataSpaces*, Win32cr::Foundation::HRESULT),
    read_debugger_data : Proc(IDebugDataSpaces*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_processor_system_data : Proc(IDebugDataSpaces*, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDataSpaces, lpVtbl : IDebugDataSpacesVtbl* do
    GUID = LibC::GUID.new(0x88f7dfab_u32, 0x3ea7_u16, 0x4c3a_u16, StaticArray[0xae_u8, 0xfb_u8, 0xc4_u8, 0xe8_u8, 0x10_u8, 0x61_u8, 0x73_u8, 0xaa_u8])
    def query_interface(this : IDebugDataSpaces*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDataSpaces*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDataSpaces*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_virtual(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def search_virtual(this : IDebugDataSpaces*, offset : UInt64, length : UInt64, pattern : Void*, pattern_size : UInt32, pattern_granularity : UInt32, match_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.search_virtual.call(this, offset, length, pattern, pattern_size, pattern_granularity, match_offset)
    end
    def read_virtual_uncached(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual_uncached(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_pointers_virtual(this : IDebugDataSpaces*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers_virtual.call(this, count, offset, ptrs)
    end
    def write_pointers_virtual(this : IDebugDataSpaces*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers_virtual.call(this, count, offset, ptrs)
    end
    def read_physical(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_physical.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_physical(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_physical.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_control(this : IDebugDataSpaces*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_control.call(this, processor, offset, buffer, buffer_size, bytes_read)
    end
    def write_control(this : IDebugDataSpaces*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_control.call(this, processor, offset, buffer, buffer_size, bytes_written)
    end
    def read_io(this : IDebugDataSpaces*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_read)
    end
    def write_io(this : IDebugDataSpaces*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_written)
    end
    def read_msr(this : IDebugDataSpaces*, msr : UInt32, value : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_msr.call(this, msr, value)
    end
    def write_msr(this : IDebugDataSpaces*, msr : UInt32, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_msr.call(this, msr, value)
    end
    def read_bus_data(this : IDebugDataSpaces*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_read)
    end
    def write_bus_data(this : IDebugDataSpaces*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_written)
    end
    def check_low_memory(this : IDebugDataSpaces*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_low_memory.call(this)
    end
    def read_debugger_data(this : IDebugDataSpaces*, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_debugger_data.call(this, index, buffer, buffer_size, data_size)
    end
    def read_processor_system_data(this : IDebugDataSpaces*, processor : UInt32, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_processor_system_data.call(this, processor, index, buffer, buffer_size, data_size)
    end

  end

  @[Extern]
  record IDebugDataSpaces2Vtbl,
    query_interface : Proc(IDebugDataSpaces2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDataSpaces2*, UInt32),
    release : Proc(IDebugDataSpaces2*, UInt32),
    read_virtual : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    search_virtual : Proc(IDebugDataSpaces2*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_virtual_uncached : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual_uncached : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_pointers_virtual : Proc(IDebugDataSpaces2*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers_virtual : Proc(IDebugDataSpaces2*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_physical : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_physical : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_control : Proc(IDebugDataSpaces2*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_control : Proc(IDebugDataSpaces2*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_io : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_io : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_msr : Proc(IDebugDataSpaces2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    write_msr : Proc(IDebugDataSpaces2*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    read_bus_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_bus_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_low_memory : Proc(IDebugDataSpaces2*, Win32cr::Foundation::HRESULT),
    read_debugger_data : Proc(IDebugDataSpaces2*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_processor_system_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    virtual_to_physical : Proc(IDebugDataSpaces2*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces2*, UInt64, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_handle_data : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_virtual : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_physical : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    query_virtual : Proc(IDebugDataSpaces2*, UInt64, Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDataSpaces2, lpVtbl : IDebugDataSpaces2Vtbl* do
    GUID = LibC::GUID.new(0x7a5e852f_u32, 0x96e9_u16, 0x468f_u16, StaticArray[0xac_u8, 0x1b_u8, 0xb_u8, 0x3a_u8, 0xdd_u8, 0xc4_u8, 0xa0_u8, 0x49_u8])
    def query_interface(this : IDebugDataSpaces2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDataSpaces2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDataSpaces2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_virtual(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def search_virtual(this : IDebugDataSpaces2*, offset : UInt64, length : UInt64, pattern : Void*, pattern_size : UInt32, pattern_granularity : UInt32, match_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.search_virtual.call(this, offset, length, pattern, pattern_size, pattern_granularity, match_offset)
    end
    def read_virtual_uncached(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual_uncached(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_pointers_virtual(this : IDebugDataSpaces2*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers_virtual.call(this, count, offset, ptrs)
    end
    def write_pointers_virtual(this : IDebugDataSpaces2*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers_virtual.call(this, count, offset, ptrs)
    end
    def read_physical(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_physical.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_physical(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_physical.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_control(this : IDebugDataSpaces2*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_control.call(this, processor, offset, buffer, buffer_size, bytes_read)
    end
    def write_control(this : IDebugDataSpaces2*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_control.call(this, processor, offset, buffer, buffer_size, bytes_written)
    end
    def read_io(this : IDebugDataSpaces2*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_read)
    end
    def write_io(this : IDebugDataSpaces2*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_written)
    end
    def read_msr(this : IDebugDataSpaces2*, msr : UInt32, value : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_msr.call(this, msr, value)
    end
    def write_msr(this : IDebugDataSpaces2*, msr : UInt32, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_msr.call(this, msr, value)
    end
    def read_bus_data(this : IDebugDataSpaces2*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_read)
    end
    def write_bus_data(this : IDebugDataSpaces2*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_written)
    end
    def check_low_memory(this : IDebugDataSpaces2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_low_memory.call(this)
    end
    def read_debugger_data(this : IDebugDataSpaces2*, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_debugger_data.call(this, index, buffer, buffer_size, data_size)
    end
    def read_processor_system_data(this : IDebugDataSpaces2*, processor : UInt32, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_processor_system_data.call(this, processor, index, buffer, buffer_size, data_size)
    end
    def virtual_to_physical(this : IDebugDataSpaces2*, virtual : UInt64, physical : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.virtual_to_physical.call(this, virtual, physical)
    end
    def get_virtual_translation_physical_offsets(this : IDebugDataSpaces2*, virtual : UInt64, offsets : UInt64*, offsets_size : UInt32, levels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsets_size, levels)
    end
    def read_handle_data(this : IDebugDataSpaces2*, handle : UInt64, data_type : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_handle_data.call(this, handle, data_type, buffer, buffer_size, data_size)
    end
    def fill_virtual(this : IDebugDataSpaces2*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_virtual.call(this, start, size, pattern, pattern_size, filled)
    end
    def fill_physical(this : IDebugDataSpaces2*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_physical.call(this, start, size, pattern, pattern_size, filled)
    end
    def query_virtual(this : IDebugDataSpaces2*, offset : UInt64, info : Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_virtual.call(this, offset, info)
    end

  end

  @[Extern]
  record IDebugDataSpaces3Vtbl,
    query_interface : Proc(IDebugDataSpaces3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDataSpaces3*, UInt32),
    release : Proc(IDebugDataSpaces3*, UInt32),
    read_virtual : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    search_virtual : Proc(IDebugDataSpaces3*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_virtual_uncached : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual_uncached : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_pointers_virtual : Proc(IDebugDataSpaces3*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers_virtual : Proc(IDebugDataSpaces3*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_physical : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_physical : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_control : Proc(IDebugDataSpaces3*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_control : Proc(IDebugDataSpaces3*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_io : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_io : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_msr : Proc(IDebugDataSpaces3*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    write_msr : Proc(IDebugDataSpaces3*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    read_bus_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_bus_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_low_memory : Proc(IDebugDataSpaces3*, Win32cr::Foundation::HRESULT),
    read_debugger_data : Proc(IDebugDataSpaces3*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_processor_system_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    virtual_to_physical : Proc(IDebugDataSpaces3*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces3*, UInt64, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_handle_data : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_virtual : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_physical : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    query_virtual : Proc(IDebugDataSpaces3*, UInt64, Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*, Win32cr::Foundation::HRESULT),
    read_image_nt_headers : Proc(IDebugDataSpaces3*, UInt64, Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*, Win32cr::Foundation::HRESULT),
    read_tagged : Proc(IDebugDataSpaces3*, LibC::GUID*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    start_enum_tagged : Proc(IDebugDataSpaces3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_tagged : Proc(IDebugDataSpaces3*, UInt64, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    end_enum_tagged : Proc(IDebugDataSpaces3*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDataSpaces3, lpVtbl : IDebugDataSpaces3Vtbl* do
    GUID = LibC::GUID.new(0x23f79d6c_u32, 0x8aaf_u16, 0x4f7c_u16, StaticArray[0xa6_u8, 0x7_u8, 0x99_u8, 0x95_u8, 0xf5_u8, 0x40_u8, 0x7e_u8, 0x63_u8])
    def query_interface(this : IDebugDataSpaces3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDataSpaces3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDataSpaces3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_virtual(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def search_virtual(this : IDebugDataSpaces3*, offset : UInt64, length : UInt64, pattern : Void*, pattern_size : UInt32, pattern_granularity : UInt32, match_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.search_virtual.call(this, offset, length, pattern, pattern_size, pattern_granularity, match_offset)
    end
    def read_virtual_uncached(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual_uncached(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_pointers_virtual(this : IDebugDataSpaces3*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers_virtual.call(this, count, offset, ptrs)
    end
    def write_pointers_virtual(this : IDebugDataSpaces3*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers_virtual.call(this, count, offset, ptrs)
    end
    def read_physical(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_physical.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_physical(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_physical.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_control(this : IDebugDataSpaces3*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_control.call(this, processor, offset, buffer, buffer_size, bytes_read)
    end
    def write_control(this : IDebugDataSpaces3*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_control.call(this, processor, offset, buffer, buffer_size, bytes_written)
    end
    def read_io(this : IDebugDataSpaces3*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_read)
    end
    def write_io(this : IDebugDataSpaces3*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_written)
    end
    def read_msr(this : IDebugDataSpaces3*, msr : UInt32, value : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_msr.call(this, msr, value)
    end
    def write_msr(this : IDebugDataSpaces3*, msr : UInt32, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_msr.call(this, msr, value)
    end
    def read_bus_data(this : IDebugDataSpaces3*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_read)
    end
    def write_bus_data(this : IDebugDataSpaces3*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_written)
    end
    def check_low_memory(this : IDebugDataSpaces3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_low_memory.call(this)
    end
    def read_debugger_data(this : IDebugDataSpaces3*, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_debugger_data.call(this, index, buffer, buffer_size, data_size)
    end
    def read_processor_system_data(this : IDebugDataSpaces3*, processor : UInt32, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_processor_system_data.call(this, processor, index, buffer, buffer_size, data_size)
    end
    def virtual_to_physical(this : IDebugDataSpaces3*, virtual : UInt64, physical : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.virtual_to_physical.call(this, virtual, physical)
    end
    def get_virtual_translation_physical_offsets(this : IDebugDataSpaces3*, virtual : UInt64, offsets : UInt64*, offsets_size : UInt32, levels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsets_size, levels)
    end
    def read_handle_data(this : IDebugDataSpaces3*, handle : UInt64, data_type : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_handle_data.call(this, handle, data_type, buffer, buffer_size, data_size)
    end
    def fill_virtual(this : IDebugDataSpaces3*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_virtual.call(this, start, size, pattern, pattern_size, filled)
    end
    def fill_physical(this : IDebugDataSpaces3*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_physical.call(this, start, size, pattern, pattern_size, filled)
    end
    def query_virtual(this : IDebugDataSpaces3*, offset : UInt64, info : Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_virtual.call(this, offset, info)
    end
    def read_image_nt_headers(this : IDebugDataSpaces3*, image_base : UInt64, headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_image_nt_headers.call(this, image_base, headers)
    end
    def read_tagged(this : IDebugDataSpaces3*, tag : LibC::GUID*, offset : UInt32, buffer : Void*, buffer_size : UInt32, total_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_tagged.call(this, tag, offset, buffer, buffer_size, total_size)
    end
    def start_enum_tagged(this : IDebugDataSpaces3*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_enum_tagged.call(this, handle)
    end
    def get_next_tagged(this : IDebugDataSpaces3*, handle : UInt64, tag : LibC::GUID*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_tagged.call(this, handle, tag, size)
    end
    def end_enum_tagged(this : IDebugDataSpaces3*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_enum_tagged.call(this, handle)
    end

  end

  @[Extern]
  record IDebugDataSpaces4Vtbl,
    query_interface : Proc(IDebugDataSpaces4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDataSpaces4*, UInt32),
    release : Proc(IDebugDataSpaces4*, UInt32),
    read_virtual : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    search_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_virtual_uncached : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_virtual_uncached : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_pointers_virtual : Proc(IDebugDataSpaces4*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers_virtual : Proc(IDebugDataSpaces4*, UInt32, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_physical : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_physical : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_control : Proc(IDebugDataSpaces4*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_control : Proc(IDebugDataSpaces4*, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_io : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_io : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_msr : Proc(IDebugDataSpaces4*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    write_msr : Proc(IDebugDataSpaces4*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    read_bus_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_bus_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_low_memory : Proc(IDebugDataSpaces4*, Win32cr::Foundation::HRESULT),
    read_debugger_data : Proc(IDebugDataSpaces4*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_processor_system_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    virtual_to_physical : Proc(IDebugDataSpaces4*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces4*, UInt64, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_handle_data : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    fill_physical : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    query_virtual : Proc(IDebugDataSpaces4*, UInt64, Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*, Win32cr::Foundation::HRESULT),
    read_image_nt_headers : Proc(IDebugDataSpaces4*, UInt64, Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*, Win32cr::Foundation::HRESULT),
    read_tagged : Proc(IDebugDataSpaces4*, LibC::GUID*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    start_enum_tagged : Proc(IDebugDataSpaces4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_tagged : Proc(IDebugDataSpaces4*, UInt64, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    end_enum_tagged : Proc(IDebugDataSpaces4*, UInt64, Win32cr::Foundation::HRESULT),
    get_offset_information : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_next_differently_valid_offset_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_valid_region_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    search_virtual2 : Proc(IDebugDataSpaces4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_multi_byte_string_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_multi_byte_string_virtual_wide : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_unicode_string_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_unicode_string_virtual_wide : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_physical2 : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_physical2 : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDataSpaces4, lpVtbl : IDebugDataSpaces4Vtbl* do
    GUID = LibC::GUID.new(0xd98ada1f_u32, 0x29e9_u16, 0x4ef5_u16, StaticArray[0xa6_u8, 0xc0_u8, 0xe5_u8, 0x33_u8, 0x49_u8, 0x88_u8, 0x32_u8, 0x12_u8])
    def query_interface(this : IDebugDataSpaces4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDataSpaces4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDataSpaces4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_virtual(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def search_virtual(this : IDebugDataSpaces4*, offset : UInt64, length : UInt64, pattern : Void*, pattern_size : UInt32, pattern_granularity : UInt32, match_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.search_virtual.call(this, offset, length, pattern, pattern_size, pattern_granularity, match_offset)
    end
    def read_virtual_uncached(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_virtual_uncached(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_virtual_uncached.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_pointers_virtual(this : IDebugDataSpaces4*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers_virtual.call(this, count, offset, ptrs)
    end
    def write_pointers_virtual(this : IDebugDataSpaces4*, count : UInt32, offset : UInt64, ptrs : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers_virtual.call(this, count, offset, ptrs)
    end
    def read_physical(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_physical.call(this, offset, buffer, buffer_size, bytes_read)
    end
    def write_physical(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_physical.call(this, offset, buffer, buffer_size, bytes_written)
    end
    def read_control(this : IDebugDataSpaces4*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_control.call(this, processor, offset, buffer, buffer_size, bytes_read)
    end
    def write_control(this : IDebugDataSpaces4*, processor : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_control.call(this, processor, offset, buffer, buffer_size, bytes_written)
    end
    def read_io(this : IDebugDataSpaces4*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_read)
    end
    def write_io(this : IDebugDataSpaces4*, interface_type : UInt32, bus_number : UInt32, address_space : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_io.call(this, interface_type, bus_number, address_space, offset, buffer, buffer_size, bytes_written)
    end
    def read_msr(this : IDebugDataSpaces4*, msr : UInt32, value : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_msr.call(this, msr, value)
    end
    def write_msr(this : IDebugDataSpaces4*, msr : UInt32, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_msr.call(this, msr, value)
    end
    def read_bus_data(this : IDebugDataSpaces4*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_read)
    end
    def write_bus_data(this : IDebugDataSpaces4*, bus_data_type : UInt32, bus_number : UInt32, slot_number : UInt32, offset : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bus_data.call(this, bus_data_type, bus_number, slot_number, offset, buffer, buffer_size, bytes_written)
    end
    def check_low_memory(this : IDebugDataSpaces4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_low_memory.call(this)
    end
    def read_debugger_data(this : IDebugDataSpaces4*, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_debugger_data.call(this, index, buffer, buffer_size, data_size)
    end
    def read_processor_system_data(this : IDebugDataSpaces4*, processor : UInt32, index : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_processor_system_data.call(this, processor, index, buffer, buffer_size, data_size)
    end
    def virtual_to_physical(this : IDebugDataSpaces4*, virtual : UInt64, physical : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.virtual_to_physical.call(this, virtual, physical)
    end
    def get_virtual_translation_physical_offsets(this : IDebugDataSpaces4*, virtual : UInt64, offsets : UInt64*, offsets_size : UInt32, levels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsets_size, levels)
    end
    def read_handle_data(this : IDebugDataSpaces4*, handle : UInt64, data_type : UInt32, buffer : Void*, buffer_size : UInt32, data_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_handle_data.call(this, handle, data_type, buffer, buffer_size, data_size)
    end
    def fill_virtual(this : IDebugDataSpaces4*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_virtual.call(this, start, size, pattern, pattern_size, filled)
    end
    def fill_physical(this : IDebugDataSpaces4*, start : UInt64, size : UInt32, pattern : Void*, pattern_size : UInt32, filled : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_physical.call(this, start, size, pattern, pattern_size, filled)
    end
    def query_virtual(this : IDebugDataSpaces4*, offset : UInt64, info : Win32cr::System::Memory::MEMORY_BASIC_INFORMATION64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_virtual.call(this, offset, info)
    end
    def read_image_nt_headers(this : IDebugDataSpaces4*, image_base : UInt64, headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_image_nt_headers.call(this, image_base, headers)
    end
    def read_tagged(this : IDebugDataSpaces4*, tag : LibC::GUID*, offset : UInt32, buffer : Void*, buffer_size : UInt32, total_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_tagged.call(this, tag, offset, buffer, buffer_size, total_size)
    end
    def start_enum_tagged(this : IDebugDataSpaces4*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_enum_tagged.call(this, handle)
    end
    def get_next_tagged(this : IDebugDataSpaces4*, handle : UInt64, tag : LibC::GUID*, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_tagged.call(this, handle, tag, size)
    end
    def end_enum_tagged(this : IDebugDataSpaces4*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_enum_tagged.call(this, handle)
    end
    def get_offset_information(this : IDebugDataSpaces4*, space : UInt32, which : UInt32, offset : UInt64, buffer : Void*, buffer_size : UInt32, info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_information.call(this, space, which, offset, buffer, buffer_size, info_size)
    end
    def get_next_differently_valid_offset_virtual(this : IDebugDataSpaces4*, offset : UInt64, next_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_differently_valid_offset_virtual.call(this, offset, next_offset)
    end
    def get_valid_region_virtual(this : IDebugDataSpaces4*, base : UInt64, size : UInt32, valid_base : UInt64*, valid_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_valid_region_virtual.call(this, base, size, valid_base, valid_size)
    end
    def search_virtual2(this : IDebugDataSpaces4*, offset : UInt64, length : UInt64, flags : UInt32, pattern : Void*, pattern_size : UInt32, pattern_granularity : UInt32, match_offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.search_virtual2.call(this, offset, length, flags, pattern, pattern_size, pattern_granularity, match_offset)
    end
    def read_multi_byte_string_virtual(this : IDebugDataSpaces4*, offset : UInt64, max_bytes : UInt32, buffer : UInt8*, buffer_size : UInt32, string_bytes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_multi_byte_string_virtual.call(this, offset, max_bytes, buffer, buffer_size, string_bytes)
    end
    def read_multi_byte_string_virtual_wide(this : IDebugDataSpaces4*, offset : UInt64, max_bytes : UInt32, code_page : UInt32, buffer : UInt16*, buffer_size : UInt32, string_bytes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_multi_byte_string_virtual_wide.call(this, offset, max_bytes, code_page, buffer, buffer_size, string_bytes)
    end
    def read_unicode_string_virtual(this : IDebugDataSpaces4*, offset : UInt64, max_bytes : UInt32, code_page : UInt32, buffer : UInt8*, buffer_size : UInt32, string_bytes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_unicode_string_virtual.call(this, offset, max_bytes, code_page, buffer, buffer_size, string_bytes)
    end
    def read_unicode_string_virtual_wide(this : IDebugDataSpaces4*, offset : UInt64, max_bytes : UInt32, buffer : UInt16*, buffer_size : UInt32, string_bytes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_unicode_string_virtual_wide.call(this, offset, max_bytes, buffer, buffer_size, string_bytes)
    end
    def read_physical2(this : IDebugDataSpaces4*, offset : UInt64, flags : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_physical2.call(this, offset, flags, buffer, buffer_size, bytes_read)
    end
    def write_physical2(this : IDebugDataSpaces4*, offset : UInt64, flags : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_physical2.call(this, offset, flags, buffer, buffer_size, bytes_written)
    end

  end

  @[Extern]
  record IDebugEventCallbacksVtbl,
    query_interface : Proc(IDebugEventCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugEventCallbacks*, UInt32),
    release : Proc(IDebugEventCallbacks*, UInt32),
    get_interest_mask : Proc(IDebugEventCallbacks*, UInt32*, Win32cr::Foundation::HRESULT),
    breakpoint : Proc(IDebugEventCallbacks*, Void*, Win32cr::Foundation::HRESULT),
    exception : Proc(IDebugEventCallbacks*, Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, UInt32, Win32cr::Foundation::HRESULT),
    create_thread : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_thread : Proc(IDebugEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_process : Proc(IDebugEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    load_module : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    unload_module : Proc(IDebugEventCallbacks*, Win32cr::Foundation::PSTR, UInt64, Win32cr::Foundation::HRESULT),
    system_error : Proc(IDebugEventCallbacks*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    session_status : Proc(IDebugEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    change_debuggee_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_engine_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_symbol_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugEventCallbacks, lpVtbl : IDebugEventCallbacksVtbl* do
    GUID = LibC::GUID.new(0x337be28b_u32, 0x5036_u16, 0x4d72_u16, StaticArray[0xb6_u8, 0xbf_u8, 0xc4_u8, 0x5f_u8, 0xbb_u8, 0x9f_u8, 0x2e_u8, 0xaa_u8])
    def query_interface(this : IDebugEventCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugEventCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugEventCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interest_mask(this : IDebugEventCallbacks*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def breakpoint(this : IDebugEventCallbacks*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.breakpoint.call(this, bp)
    end
    def exception(this : IDebugEventCallbacks*, exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, first_chance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exception.call(this, exception, first_chance)
    end
    def create_thread(this : IDebugEventCallbacks*, handle : UInt64, data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_thread.call(this, handle, data_offset, start_offset)
    end
    def exit_thread(this : IDebugEventCallbacks*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_thread.call(this, exit_code)
    end
    def create_process_a(this : IDebugEventCallbacks*, image_file_handle : UInt64, handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PSTR, image_name : Win32cr::Foundation::PSTR, check_sum : UInt32, time_date_stamp : UInt32, initial_thread_handle : UInt64, thread_data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, image_file_handle, handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, initial_thread_handle, thread_data_offset, start_offset)
    end
    def exit_process(this : IDebugEventCallbacks*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_process.call(this, exit_code)
    end
    def load_module(this : IDebugEventCallbacks*, image_file_handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PSTR, image_name : Win32cr::Foundation::PSTR, check_sum : UInt32, time_date_stamp : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_module.call(this, image_file_handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp)
    end
    def unload_module(this : IDebugEventCallbacks*, image_base_name : Win32cr::Foundation::PSTR, base_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unload_module.call(this, image_base_name, base_offset)
    end
    def system_error(this : IDebugEventCallbacks*, error : UInt32, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.system_error.call(this, error, level)
    end
    def session_status(this : IDebugEventCallbacks*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_status.call(this, status)
    end
    def change_debuggee_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_debuggee_state.call(this, flags, argument)
    end
    def change_engine_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_engine_state.call(this, flags, argument)
    end
    def change_symbol_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_symbol_state.call(this, flags, argument)
    end

  end

  @[Extern]
  record IDebugEventCallbacksWideVtbl,
    query_interface : Proc(IDebugEventCallbacksWide*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugEventCallbacksWide*, UInt32),
    release : Proc(IDebugEventCallbacksWide*, UInt32),
    get_interest_mask : Proc(IDebugEventCallbacksWide*, UInt32*, Win32cr::Foundation::HRESULT),
    breakpoint : Proc(IDebugEventCallbacksWide*, Void*, Win32cr::Foundation::HRESULT),
    exception : Proc(IDebugEventCallbacksWide*, Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, UInt32, Win32cr::Foundation::HRESULT),
    create_thread : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_thread : Proc(IDebugEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_process : Proc(IDebugEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    load_module : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    unload_module : Proc(IDebugEventCallbacksWide*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    system_error : Proc(IDebugEventCallbacksWide*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    session_status : Proc(IDebugEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    change_debuggee_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_engine_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_symbol_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugEventCallbacksWide, lpVtbl : IDebugEventCallbacksWideVtbl* do
    GUID = LibC::GUID.new(0x690e046_u32, 0x9c23_u16, 0x45ac_u16, StaticArray[0xa0_u8, 0x4f_u8, 0x98_u8, 0x7a_u8, 0xc2_u8, 0x9a_u8, 0xd0_u8, 0xd3_u8])
    def query_interface(this : IDebugEventCallbacksWide*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugEventCallbacksWide*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugEventCallbacksWide*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interest_mask(this : IDebugEventCallbacksWide*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def breakpoint(this : IDebugEventCallbacksWide*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.breakpoint.call(this, bp)
    end
    def exception(this : IDebugEventCallbacksWide*, exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, first_chance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exception.call(this, exception, first_chance)
    end
    def create_thread(this : IDebugEventCallbacksWide*, handle : UInt64, data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_thread.call(this, handle, data_offset, start_offset)
    end
    def exit_thread(this : IDebugEventCallbacksWide*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_thread.call(this, exit_code)
    end
    def create_process_a(this : IDebugEventCallbacksWide*, image_file_handle : UInt64, handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32, initial_thread_handle : UInt64, thread_data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, image_file_handle, handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, initial_thread_handle, thread_data_offset, start_offset)
    end
    def exit_process(this : IDebugEventCallbacksWide*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_process.call(this, exit_code)
    end
    def load_module(this : IDebugEventCallbacksWide*, image_file_handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_module.call(this, image_file_handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp)
    end
    def unload_module(this : IDebugEventCallbacksWide*, image_base_name : Win32cr::Foundation::PWSTR, base_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unload_module.call(this, image_base_name, base_offset)
    end
    def system_error(this : IDebugEventCallbacksWide*, error : UInt32, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.system_error.call(this, error, level)
    end
    def session_status(this : IDebugEventCallbacksWide*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_status.call(this, status)
    end
    def change_debuggee_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_debuggee_state.call(this, flags, argument)
    end
    def change_engine_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_engine_state.call(this, flags, argument)
    end
    def change_symbol_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_symbol_state.call(this, flags, argument)
    end

  end

  @[Extern]
  record IDebugEventContextCallbacksVtbl,
    query_interface : Proc(IDebugEventContextCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugEventContextCallbacks*, UInt32),
    release : Proc(IDebugEventContextCallbacks*, UInt32),
    get_interest_mask : Proc(IDebugEventContextCallbacks*, UInt32*, Win32cr::Foundation::HRESULT),
    breakpoint : Proc(IDebugEventContextCallbacks*, Void*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    exception : Proc(IDebugEventContextCallbacks*, Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_thread : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt64, Void*, UInt32, Win32cr::Foundation::HRESULT),
    exit_thread : Proc(IDebugEventContextCallbacks*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Void*, UInt32, Win32cr::Foundation::HRESULT),
    exit_process : Proc(IDebugEventContextCallbacks*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    load_module : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    unload_module : Proc(IDebugEventContextCallbacks*, Win32cr::Foundation::PWSTR, UInt64, Void*, UInt32, Win32cr::Foundation::HRESULT),
    system_error : Proc(IDebugEventContextCallbacks*, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    session_status : Proc(IDebugEventContextCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    change_debuggee_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, Void*, UInt32, Win32cr::Foundation::HRESULT),
    change_engine_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, Void*, UInt32, Win32cr::Foundation::HRESULT),
    change_symbol_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugEventContextCallbacks, lpVtbl : IDebugEventContextCallbacksVtbl* do
    GUID = LibC::GUID.new(0x61a4905b_u32, 0x23f9_u16, 0x4247_u16, StaticArray[0xb3_u8, 0xc5_u8, 0x53_u8, 0xd0_u8, 0x87_u8, 0x52_u8, 0x9a_u8, 0xb7_u8])
    def query_interface(this : IDebugEventContextCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugEventContextCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugEventContextCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interest_mask(this : IDebugEventContextCallbacks*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def breakpoint(this : IDebugEventContextCallbacks*, bp : Void*, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.breakpoint.call(this, bp, context, context_size)
    end
    def exception(this : IDebugEventContextCallbacks*, exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, first_chance : UInt32, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exception.call(this, exception, first_chance, context, context_size)
    end
    def create_thread(this : IDebugEventContextCallbacks*, handle : UInt64, data_offset : UInt64, start_offset : UInt64, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_thread.call(this, handle, data_offset, start_offset, context, context_size)
    end
    def exit_thread(this : IDebugEventContextCallbacks*, exit_code : UInt32, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_thread.call(this, exit_code, context, context_size)
    end
    def create_process_a(this : IDebugEventContextCallbacks*, image_file_handle : UInt64, handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32, initial_thread_handle : UInt64, thread_data_offset : UInt64, start_offset : UInt64, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, image_file_handle, handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, initial_thread_handle, thread_data_offset, start_offset, context, context_size)
    end
    def exit_process(this : IDebugEventContextCallbacks*, exit_code : UInt32, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_process.call(this, exit_code, context, context_size)
    end
    def load_module(this : IDebugEventContextCallbacks*, image_file_handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_module.call(this, image_file_handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, context, context_size)
    end
    def unload_module(this : IDebugEventContextCallbacks*, image_base_name : Win32cr::Foundation::PWSTR, base_offset : UInt64, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unload_module.call(this, image_base_name, base_offset, context, context_size)
    end
    def system_error(this : IDebugEventContextCallbacks*, error : UInt32, level : UInt32, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.system_error.call(this, error, level, context, context_size)
    end
    def session_status(this : IDebugEventContextCallbacks*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_status.call(this, status)
    end
    def change_debuggee_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_debuggee_state.call(this, flags, argument, context, context_size)
    end
    def change_engine_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64, context : Void*, context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_engine_state.call(this, flags, argument, context, context_size)
    end
    def change_symbol_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_symbol_state.call(this, flags, argument)
    end

  end

  @[Extern]
  record IDebugInputCallbacksVtbl,
    query_interface : Proc(IDebugInputCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugInputCallbacks*, UInt32),
    release : Proc(IDebugInputCallbacks*, UInt32),
    start_input : Proc(IDebugInputCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    end_input : Proc(IDebugInputCallbacks*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugInputCallbacks, lpVtbl : IDebugInputCallbacksVtbl* do
    GUID = LibC::GUID.new(0x9f50e42c_u32, 0xf136_u16, 0x499e_u16, StaticArray[0x9a_u8, 0x97_u8, 0x73_u8, 0x3_u8, 0x6c_u8, 0x94_u8, 0xed_u8, 0x2d_u8])
    def query_interface(this : IDebugInputCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugInputCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugInputCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_input(this : IDebugInputCallbacks*, buffer_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_input.call(this, buffer_size)
    end
    def end_input(this : IDebugInputCallbacks*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_input.call(this)
    end

  end

  @[Extern]
  record IDebugOutputCallbacksVtbl,
    query_interface : Proc(IDebugOutputCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugOutputCallbacks*, UInt32),
    release : Proc(IDebugOutputCallbacks*, UInt32),
    output : Proc(IDebugOutputCallbacks*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugOutputCallbacks, lpVtbl : IDebugOutputCallbacksVtbl* do
    GUID = LibC::GUID.new(0x4bf58045_u32, 0xd654_u16, 0x4c40_u16, StaticArray[0xb0_u8, 0xaf_u8, 0x68_u8, 0x30_u8, 0x90_u8, 0xf3_u8, 0x56_u8, 0xdc_u8])
    def query_interface(this : IDebugOutputCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugOutputCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugOutputCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def output(this : IDebugOutputCallbacks*, mask : UInt32, text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, text)
    end

  end

  @[Extern]
  record IDebugOutputCallbacksWideVtbl,
    query_interface : Proc(IDebugOutputCallbacksWide*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugOutputCallbacksWide*, UInt32),
    release : Proc(IDebugOutputCallbacksWide*, UInt32),
    output : Proc(IDebugOutputCallbacksWide*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugOutputCallbacksWide, lpVtbl : IDebugOutputCallbacksWideVtbl* do
    GUID = LibC::GUID.new(0x4c7fd663_u32, 0xc394_u16, 0x4e26_u16, StaticArray[0x8e_u8, 0xf1_u8, 0x34_u8, 0xad_u8, 0x5e_u8, 0xd3_u8, 0x76_u8, 0x4c_u8])
    def query_interface(this : IDebugOutputCallbacksWide*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugOutputCallbacksWide*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugOutputCallbacksWide*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def output(this : IDebugOutputCallbacksWide*, mask : UInt32, text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, text)
    end

  end

  @[Extern]
  record IDebugOutputCallbacks2Vtbl,
    query_interface : Proc(IDebugOutputCallbacks2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugOutputCallbacks2*, UInt32),
    release : Proc(IDebugOutputCallbacks2*, UInt32),
    output : Proc(IDebugOutputCallbacks2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_interest_mask : Proc(IDebugOutputCallbacks2*, UInt32*, Win32cr::Foundation::HRESULT),
    output2 : Proc(IDebugOutputCallbacks2*, UInt32, UInt32, UInt64, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugOutputCallbacks2, lpVtbl : IDebugOutputCallbacks2Vtbl* do
    GUID = LibC::GUID.new(0x67721fe9_u32, 0x56d2_u16, 0x4a44_u16, StaticArray[0xa3_u8, 0x25_u8, 0x2b_u8, 0x65_u8, 0x51_u8, 0x3c_u8, 0xe6_u8, 0xeb_u8])
    def query_interface(this : IDebugOutputCallbacks2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugOutputCallbacks2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugOutputCallbacks2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def output(this : IDebugOutputCallbacks2*, mask : UInt32, text : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output.call(this, mask, text)
    end
    def get_interest_mask(this : IDebugOutputCallbacks2*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def output2(this : IDebugOutputCallbacks2*, which : UInt32, flags : UInt32, arg : UInt64, text : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output2.call(this, which, flags, arg, text)
    end

  end

  @[Extern]
  record IDebugRegistersVtbl,
    query_interface : Proc(IDebugRegisters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugRegisters*, UInt32),
    release : Proc(IDebugRegisters*, UInt32),
    get_number_registers : Proc(IDebugRegisters*, UInt32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDebugRegisters*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*, Win32cr::Foundation::HRESULT),
    get_index_by_name : Proc(IDebugRegisters*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDebugRegisters*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IDebugRegisters*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    get_values : Proc(IDebugRegisters*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_values : Proc(IDebugRegisters*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    output_registers : Proc(IDebugRegisters*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_instruction_offset : Proc(IDebugRegisters*, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_offset : Proc(IDebugRegisters*, UInt64*, Win32cr::Foundation::HRESULT),
    get_frame_offset : Proc(IDebugRegisters*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugRegisters, lpVtbl : IDebugRegistersVtbl* do
    GUID = LibC::GUID.new(0xce289126_u32, 0x9e84_u16, 0x45a7_u16, StaticArray[0x93_u8, 0x7e_u8, 0x67_u8, 0xbb_u8, 0x18_u8, 0x69_u8, 0x14_u8, 0x93_u8])
    def query_interface(this : IDebugRegisters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugRegisters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugRegisters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_registers(this : IDebugRegisters*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_registers.call(this, number)
    end
    def get_description(this : IDebugRegisters*, register : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, desc : Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, register, name_buffer, name_buffer_size, name_size, desc)
    end
    def get_index_by_name(this : IDebugRegisters*, name : Win32cr::Foundation::PSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_by_name.call(this, name, index)
    end
    def get_value(this : IDebugRegisters*, register : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, register, value)
    end
    def set_value(this : IDebugRegisters*, register : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, register, value)
    end
    def get_values(this : IDebugRegisters*, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_values.call(this, count, indices, start, values)
    end
    def set_values(this : IDebugRegisters*, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_values.call(this, count, indices, start, values)
    end
    def output_registers(this : IDebugRegisters*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_registers.call(this, output_control, flags)
    end
    def get_instruction_offset(this : IDebugRegisters*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_instruction_offset.call(this, offset)
    end
    def get_stack_offset(this : IDebugRegisters*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_offset.call(this, offset)
    end
    def get_frame_offset(this : IDebugRegisters*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frame_offset.call(this, offset)
    end

  end

  @[Extern]
  record IDebugRegisters2Vtbl,
    query_interface : Proc(IDebugRegisters2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugRegisters2*, UInt32),
    release : Proc(IDebugRegisters2*, UInt32),
    get_number_registers : Proc(IDebugRegisters2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDebugRegisters2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*, Win32cr::Foundation::HRESULT),
    get_index_by_name : Proc(IDebugRegisters2*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDebugRegisters2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IDebugRegisters2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    get_values : Proc(IDebugRegisters2*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_values : Proc(IDebugRegisters2*, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    output_registers : Proc(IDebugRegisters2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_instruction_offset : Proc(IDebugRegisters2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_offset : Proc(IDebugRegisters2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_frame_offset : Proc(IDebugRegisters2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_description_wide : Proc(IDebugRegisters2*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*, Win32cr::Foundation::HRESULT),
    get_index_by_name_wide : Proc(IDebugRegisters2*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_pseudo_registers : Proc(IDebugRegisters2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pseudo_description : Proc(IDebugRegisters2*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pseudo_description_wide : Proc(IDebugRegisters2*, UInt32, UInt16*, UInt32, UInt32*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pseudo_index_by_name : Proc(IDebugRegisters2*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_pseudo_index_by_name_wide : Proc(IDebugRegisters2*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_pseudo_values : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_pseudo_values : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    get_values2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    set_values2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*, Win32cr::Foundation::HRESULT),
    output_registers2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_instruction_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_stack_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_frame_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugRegisters2, lpVtbl : IDebugRegisters2Vtbl* do
    GUID = LibC::GUID.new(0x1656afa9_u32, 0x19c6_u16, 0x4e3a_u16, StaticArray[0x97_u8, 0xe7_u8, 0x5d_u8, 0xc9_u8, 0x16_u8, 0xc_u8, 0xf9_u8, 0xc4_u8])
    def query_interface(this : IDebugRegisters2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugRegisters2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugRegisters2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_registers(this : IDebugRegisters2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_registers.call(this, number)
    end
    def get_description(this : IDebugRegisters2*, register : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, desc : Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, register, name_buffer, name_buffer_size, name_size, desc)
    end
    def get_index_by_name(this : IDebugRegisters2*, name : Win32cr::Foundation::PSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_by_name.call(this, name, index)
    end
    def get_value(this : IDebugRegisters2*, register : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, register, value)
    end
    def set_value(this : IDebugRegisters2*, register : UInt32, value : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, register, value)
    end
    def get_values(this : IDebugRegisters2*, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_values.call(this, count, indices, start, values)
    end
    def set_values(this : IDebugRegisters2*, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_values.call(this, count, indices, start, values)
    end
    def output_registers(this : IDebugRegisters2*, output_control : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_registers.call(this, output_control, flags)
    end
    def get_instruction_offset(this : IDebugRegisters2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_instruction_offset.call(this, offset)
    end
    def get_stack_offset(this : IDebugRegisters2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_offset.call(this, offset)
    end
    def get_frame_offset(this : IDebugRegisters2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frame_offset.call(this, offset)
    end
    def get_description_wide(this : IDebugRegisters2*, register : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, desc : Win32cr::System::Diagnostics::Debug::DEBUG_REGISTER_DESCRIPTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description_wide.call(this, register, name_buffer, name_buffer_size, name_size, desc)
    end
    def get_index_by_name_wide(this : IDebugRegisters2*, name : Win32cr::Foundation::PWSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_by_name_wide.call(this, name, index)
    end
    def get_number_pseudo_registers(this : IDebugRegisters2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_pseudo_registers.call(this, number)
    end
    def get_pseudo_description(this : IDebugRegisters2*, register : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, type_module : UInt64*, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pseudo_description.call(this, register, name_buffer, name_buffer_size, name_size, type_module, type_id)
    end
    def get_pseudo_description_wide(this : IDebugRegisters2*, register : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, type_module : UInt64*, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pseudo_description_wide.call(this, register, name_buffer, name_buffer_size, name_size, type_module, type_id)
    end
    def get_pseudo_index_by_name(this : IDebugRegisters2*, name : Win32cr::Foundation::PSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pseudo_index_by_name.call(this, name, index)
    end
    def get_pseudo_index_by_name_wide(this : IDebugRegisters2*, name : Win32cr::Foundation::PWSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pseudo_index_by_name_wide.call(this, name, index)
    end
    def get_pseudo_values(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pseudo_values.call(this, source, count, indices, start, values)
    end
    def set_pseudo_values(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pseudo_values.call(this, source, count, indices, start, values)
    end
    def get_values2(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_values2.call(this, source, count, indices, start, values)
    end
    def set_values2(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : Win32cr::System::Diagnostics::Debug::DEBUG_VALUE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_values2.call(this, source, count, indices, start, values)
    end
    def output_registers2(this : IDebugRegisters2*, output_control : UInt32, source : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_registers2.call(this, output_control, source, flags)
    end
    def get_instruction_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_instruction_offset2.call(this, source, offset)
    end
    def get_stack_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_offset2.call(this, source, offset)
    end
    def get_frame_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frame_offset2.call(this, source, offset)
    end

  end

  @[Extern]
  record IDebugSymbolGroupVtbl,
    query_interface : Proc(IDebugSymbolGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbolGroup*, UInt32),
    release : Proc(IDebugSymbolGroup*, UInt32),
    get_number_symbols : Proc(IDebugSymbolGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol : Proc(IDebugSymbolGroup*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    remove_symbol_by_name : Proc(IDebugSymbolGroup*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_symbol_by_index : Proc(IDebugSymbolGroup*, UInt32, Win32cr::Foundation::HRESULT),
    get_symbol_name : Proc(IDebugSymbolGroup*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_parameters : Proc(IDebugSymbolGroup*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_PARAMETERS*, Win32cr::Foundation::HRESULT),
    expand_symbol : Proc(IDebugSymbolGroup*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    output_symbols : Proc(IDebugSymbolGroup*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    write_symbol : Proc(IDebugSymbolGroup*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_as_type : Proc(IDebugSymbolGroup*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbolGroup, lpVtbl : IDebugSymbolGroupVtbl* do
    GUID = LibC::GUID.new(0xf2528316_u32, 0xf1a_u16, 0x4431_u16, StaticArray[0xae_u8, 0xed_u8, 0x11_u8, 0xd0_u8, 0x96_u8, 0xe1_u8, 0xe2_u8, 0xab_u8])
    def query_interface(this : IDebugSymbolGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbolGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbolGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_symbols(this : IDebugSymbolGroup*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_symbols.call(this, number)
    end
    def add_symbol(this : IDebugSymbolGroup*, name : Win32cr::Foundation::PSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol.call(this, name, index)
    end
    def remove_symbol_by_name(this : IDebugSymbolGroup*, name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_by_name.call(this, name)
    end
    def remove_symbol_by_index(this : IDebugSymbolGroup*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_by_index.call(this, index)
    end
    def get_symbol_name(this : IDebugSymbolGroup*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_name.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_parameters(this : IDebugSymbolGroup*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_parameters.call(this, start, count, params)
    end
    def expand_symbol(this : IDebugSymbolGroup*, index : UInt32, expand : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.expand_symbol.call(this, index, expand)
    end
    def output_symbols(this : IDebugSymbolGroup*, output_control : UInt32, flags : UInt32, start : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbols.call(this, output_control, flags, start, count)
    end
    def write_symbol(this : IDebugSymbolGroup*, index : UInt32, value : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_symbol.call(this, index, value)
    end
    def output_as_type(this : IDebugSymbolGroup*, index : UInt32, type__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_as_type.call(this, index, type__)
    end

  end

  @[Extern]
  record IDebugSymbolGroup2Vtbl,
    query_interface : Proc(IDebugSymbolGroup2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbolGroup2*, UInt32),
    release : Proc(IDebugSymbolGroup2*, UInt32),
    get_number_symbols : Proc(IDebugSymbolGroup2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol : Proc(IDebugSymbolGroup2*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    remove_symbol_by_name : Proc(IDebugSymbolGroup2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    remove_symbol_by_index : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::HRESULT),
    get_symbol_name : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_parameters : Proc(IDebugSymbolGroup2*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_PARAMETERS*, Win32cr::Foundation::HRESULT),
    expand_symbol : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    output_symbols : Proc(IDebugSymbolGroup2*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    write_symbol : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    output_as_type : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_symbol_wide : Proc(IDebugSymbolGroup2*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    remove_symbol_by_name_wide : Proc(IDebugSymbolGroup2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_symbol_name_wide : Proc(IDebugSymbolGroup2*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_symbol_wide : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    output_as_type_wide : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_symbol_type_name : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_name_wide : Proc(IDebugSymbolGroup2*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_size : Proc(IDebugSymbolGroup2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_offset : Proc(IDebugSymbolGroup2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_symbol_register : Proc(IDebugSymbolGroup2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_value_text : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_value_text_wide : Proc(IDebugSymbolGroup2*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_information : Proc(IDebugSymbolGroup2*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbolGroup2, lpVtbl : IDebugSymbolGroup2Vtbl* do
    GUID = LibC::GUID.new(0x6a7ccc5f_u32, 0xfb5e_u16, 0x4dcc_u16, StaticArray[0xb4_u8, 0x1c_u8, 0x6c_u8, 0x20_u8, 0x30_u8, 0x7b_u8, 0xcc_u8, 0xc7_u8])
    def query_interface(this : IDebugSymbolGroup2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbolGroup2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbolGroup2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_symbols(this : IDebugSymbolGroup2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_symbols.call(this, number)
    end
    def add_symbol(this : IDebugSymbolGroup2*, name : Win32cr::Foundation::PSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol.call(this, name, index)
    end
    def remove_symbol_by_name(this : IDebugSymbolGroup2*, name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_by_name.call(this, name)
    end
    def remove_symbol_by_index(this : IDebugSymbolGroup2*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_by_index.call(this, index)
    end
    def get_symbol_name(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_name.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_parameters(this : IDebugSymbolGroup2*, start : UInt32, count : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_parameters.call(this, start, count, params)
    end
    def expand_symbol(this : IDebugSymbolGroup2*, index : UInt32, expand : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.expand_symbol.call(this, index, expand)
    end
    def output_symbols(this : IDebugSymbolGroup2*, output_control : UInt32, flags : UInt32, start : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbols.call(this, output_control, flags, start, count)
    end
    def write_symbol(this : IDebugSymbolGroup2*, index : UInt32, value : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_symbol.call(this, index, value)
    end
    def output_as_type(this : IDebugSymbolGroup2*, index : UInt32, type__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_as_type.call(this, index, type__)
    end
    def add_symbol_wide(this : IDebugSymbolGroup2*, name : Win32cr::Foundation::PWSTR, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_wide.call(this, name, index)
    end
    def remove_symbol_by_name_wide(this : IDebugSymbolGroup2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_by_name_wide.call(this, name)
    end
    def get_symbol_name_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_name_wide.call(this, index, buffer, buffer_size, name_size)
    end
    def write_symbol_wide(this : IDebugSymbolGroup2*, index : UInt32, value : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_symbol_wide.call(this, index, value)
    end
    def output_as_type_wide(this : IDebugSymbolGroup2*, index : UInt32, type__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_as_type_wide.call(this, index, type__)
    end
    def get_symbol_type_name(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_name.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_type_name_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_name_wide.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_size(this : IDebugSymbolGroup2*, index : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_size.call(this, index, size)
    end
    def get_symbol_offset(this : IDebugSymbolGroup2*, index : UInt32, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_offset.call(this, index, offset)
    end
    def get_symbol_register(this : IDebugSymbolGroup2*, index : UInt32, register : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_register.call(this, index, register)
    end
    def get_symbol_value_text(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_value_text.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_value_text_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_value_text_wide.call(this, index, buffer, buffer_size, name_size)
    end
    def get_symbol_entry_information(this : IDebugSymbolGroup2*, index : UInt32, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_information.call(this, index, entry)
    end

  end

  @[Extern]
  record IDebugSymbolsVtbl,
    query_interface : Proc(IDebugSymbols*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbols*, UInt32),
    release : Proc(IDebugSymbols*, UInt32),
    get_symbol_options : Proc(IDebugSymbols*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol_options : Proc(IDebugSymbols*, UInt32, Win32cr::Foundation::HRESULT),
    remove_symbol_options : Proc(IDebugSymbols*, UInt32, Win32cr::Foundation::HRESULT),
    set_symbol_options : Proc(IDebugSymbols*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset : Proc(IDebugSymbols*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset : Proc(IDebugSymbols*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset : Proc(IDebugSymbols*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line : Proc(IDebugSymbols*, UInt32, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_modules : Proc(IDebugSymbols*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_by_index : Proc(IDebugSymbols*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset : Proc(IDebugSymbols*, UInt64, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_names : Proc(IDebugSymbols*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_parameters : Proc(IDebugSymbols*, UInt32, UInt64*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_symbol_module : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name : Proc(IDebugSymbols*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id : Proc(IDebugSymbols*, UInt64, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_size : Proc(IDebugSymbols*, UInt64, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset : Proc(IDebugSymbols*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_type_id : Proc(IDebugSymbols*, UInt64, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    read_typed_data_virtual : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_virtual : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_virtual : Proc(IDebugSymbols*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_typed_data_physical : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_physical : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_physical : Proc(IDebugSymbols*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_scope : Proc(IDebugSymbols*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope : Proc(IDebugSymbols*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    reset_scope : Proc(IDebugSymbols*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group : Proc(IDebugSymbols*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group : Proc(IDebugSymbols*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match : Proc(IDebugSymbols*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    end_symbol_match : Proc(IDebugSymbols*, UInt64, Win32cr::Foundation::HRESULT),
    reload : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_image_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_image_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_source_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element : Proc(IDebugSymbols*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_source_path : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    find_source_file : Proc(IDebugSymbols*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets : Proc(IDebugSymbols*, Win32cr::Foundation::PSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbols, lpVtbl : IDebugSymbolsVtbl* do
    GUID = LibC::GUID.new(0x8c31e98c_u32, 0x983a_u16, 0x48a5_u16, StaticArray[0x90_u8, 0x16_u8, 0x6f_u8, 0xe5_u8, 0xd6_u8, 0x67_u8, 0xa9_u8, 0x50_u8])
    def query_interface(this : IDebugSymbols*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbols*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbols*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbol_options(this : IDebugSymbols*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_options.call(this, options)
    end
    def add_symbol_options(this : IDebugSymbols*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_options.call(this, options)
    end
    def remove_symbol_options(this : IDebugSymbols*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_options.call(this, options)
    end
    def set_symbol_options(this : IDebugSymbols*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_options.call(this, options)
    end
    def get_name_by_offset(this : IDebugSymbols*, offset : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name(this : IDebugSymbols*, symbol : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name.call(this, symbol, offset)
    end
    def get_near_name_by_offset(this : IDebugSymbols*, offset : UInt64, delta : Int32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset(this : IDebugSymbols*, offset : UInt64, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line(this : IDebugSymbols*, line : UInt32, file : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line.call(this, line, file, offset)
    end
    def get_number_modules(this : IDebugSymbols*, loaded : UInt32*, unloaded : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_modules.call(this, loaded, unloaded)
    end
    def get_module_by_index(this : IDebugSymbols*, index : UInt32, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_index.call(this, index, base)
    end
    def get_module_by_module_name(this : IDebugSymbols*, name : Win32cr::Foundation::PSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name.call(this, name, start_index, index, base)
    end
    def get_module_by_offset(this : IDebugSymbols*, offset : UInt64, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset.call(this, offset, start_index, index, base)
    end
    def get_module_names(this : IDebugSymbols*, index : UInt32, base : UInt64, image_name_buffer : UInt8*, image_name_buffer_size : UInt32, image_name_size : UInt32*, module_name_buffer : UInt8*, module_name_buffer_size : UInt32, module_name_size : UInt32*, loaded_image_name_buffer : UInt8*, loaded_image_name_buffer_size : UInt32, loaded_image_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_names.call(this, index, base, image_name_buffer, image_name_buffer_size, image_name_size, module_name_buffer, module_name_buffer_size, module_name_size, loaded_image_name_buffer, loaded_image_name_buffer_size, loaded_image_name_size)
    end
    def get_module_parameters(this : IDebugSymbols*, count : UInt32, bases : UInt64*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_parameters.call(this, count, bases, start, params)
    end
    def get_symbol_module(this : IDebugSymbols*, symbol : Win32cr::Foundation::PSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module.call(this, symbol, base)
    end
    def get_type_name(this : IDebugSymbols*, module__ : UInt64, type_id : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id(this : IDebugSymbols*, module__ : UInt64, name : Win32cr::Foundation::PSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id.call(this, module__, name, type_id)
    end
    def get_type_size(this : IDebugSymbols*, module__ : UInt64, type_id : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_size.call(this, module__, type_id, size)
    end
    def get_field_offset(this : IDebugSymbols*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id(this : IDebugSymbols*, symbol : Win32cr::Foundation::PSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id.call(this, symbol, type_id, module__)
    end
    def get_offset_type_id(this : IDebugSymbols*, offset : UInt64, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_type_id.call(this, offset, type_id, module__)
    end
    def read_typed_data_virtual(this : IDebugSymbols*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_virtual(this : IDebugSymbols*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_virtual(this : IDebugSymbols*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_virtual.call(this, output_control, offset, module__, type_id, flags)
    end
    def read_typed_data_physical(this : IDebugSymbols*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_physical(this : IDebugSymbols*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_physical(this : IDebugSymbols*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_physical.call(this, output_control, offset, module__, type_id, flags)
    end
    def get_scope(this : IDebugSymbols*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope(this : IDebugSymbols*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def reset_scope(this : IDebugSymbols*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_scope.call(this)
    end
    def get_scope_symbol_group(this : IDebugSymbols*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group.call(this, flags, update, symbols)
    end
    def create_symbol_group(this : IDebugSymbols*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group.call(this, group)
    end
    def start_symbol_match(this : IDebugSymbols*, pattern : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match.call(this, pattern, handle)
    end
    def get_next_symbol_match(this : IDebugSymbols*, handle : UInt64, buffer : UInt8*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def end_symbol_match(this : IDebugSymbols*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_symbol_match.call(this, handle)
    end
    def reload(this : IDebugSymbols*, module__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload.call(this, module__)
    end
    def get_symbol_path(this : IDebugSymbols*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path(this : IDebugSymbols*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path.call(this, path)
    end
    def append_symbol_path(this : IDebugSymbols*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path.call(this, addition)
    end
    def get_image_path(this : IDebugSymbols*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path(this : IDebugSymbols*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path.call(this, path)
    end
    def append_image_path(this : IDebugSymbols*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path.call(this, addition)
    end
    def get_source_path(this : IDebugSymbols*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element(this : IDebugSymbols*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path(this : IDebugSymbols*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path.call(this, path)
    end
    def append_source_path(this : IDebugSymbols*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path.call(this, addition)
    end
    def find_source_file(this : IDebugSymbols*, start_element : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets(this : IDebugSymbols*, file : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets.call(this, file, buffer, buffer_lines, file_lines)
    end

  end

  @[Extern]
  record IDebugSymbols2Vtbl,
    query_interface : Proc(IDebugSymbols2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbols2*, UInt32),
    release : Proc(IDebugSymbols2*, UInt32),
    get_symbol_options : Proc(IDebugSymbols2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT),
    remove_symbol_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT),
    set_symbol_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset : Proc(IDebugSymbols2*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset : Proc(IDebugSymbols2*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset : Proc(IDebugSymbols2*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_modules : Proc(IDebugSymbols2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_by_index : Proc(IDebugSymbols2*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_names : Proc(IDebugSymbols2*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_parameters : Proc(IDebugSymbols2*, UInt32, UInt64*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_symbol_module : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id : Proc(IDebugSymbols2*, UInt64, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_size : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset : Proc(IDebugSymbols2*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_type_id : Proc(IDebugSymbols2*, UInt64, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    read_typed_data_virtual : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_virtual : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_virtual : Proc(IDebugSymbols2*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_typed_data_physical : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_physical : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_physical : Proc(IDebugSymbols2*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_scope : Proc(IDebugSymbols2*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope : Proc(IDebugSymbols2*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    reset_scope : Proc(IDebugSymbols2*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group : Proc(IDebugSymbols2*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group : Proc(IDebugSymbols2*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match : Proc(IDebugSymbols2*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    end_symbol_match : Proc(IDebugSymbols2*, UInt64, Win32cr::Foundation::HRESULT),
    reload : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_image_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_image_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_source_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element : Proc(IDebugSymbols2*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_source_path : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    find_source_file : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets : Proc(IDebugSymbols2*, Win32cr::Foundation::PSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information : Proc(IDebugSymbols2*, UInt32, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string : Proc(IDebugSymbols2*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_options : Proc(IDebugSymbols2*, UInt32*, Win32cr::Foundation::HRESULT),
    add_type_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT),
    remove_type_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT),
    set_type_options : Proc(IDebugSymbols2*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbols2, lpVtbl : IDebugSymbols2Vtbl* do
    GUID = LibC::GUID.new(0x3a707211_u32, 0xafdd_u16, 0x4495_u16, StaticArray[0xad_u8, 0x4f_u8, 0x56_u8, 0xfe_u8, 0xcd_u8, 0xf8_u8, 0x16_u8, 0x3f_u8])
    def query_interface(this : IDebugSymbols2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbols2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbols2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbol_options(this : IDebugSymbols2*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_options.call(this, options)
    end
    def add_symbol_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_options.call(this, options)
    end
    def remove_symbol_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_options.call(this, options)
    end
    def set_symbol_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_options.call(this, options)
    end
    def get_name_by_offset(this : IDebugSymbols2*, offset : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name(this : IDebugSymbols2*, symbol : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name.call(this, symbol, offset)
    end
    def get_near_name_by_offset(this : IDebugSymbols2*, offset : UInt64, delta : Int32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset(this : IDebugSymbols2*, offset : UInt64, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line(this : IDebugSymbols2*, line : UInt32, file : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line.call(this, line, file, offset)
    end
    def get_number_modules(this : IDebugSymbols2*, loaded : UInt32*, unloaded : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_modules.call(this, loaded, unloaded)
    end
    def get_module_by_index(this : IDebugSymbols2*, index : UInt32, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_index.call(this, index, base)
    end
    def get_module_by_module_name(this : IDebugSymbols2*, name : Win32cr::Foundation::PSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name.call(this, name, start_index, index, base)
    end
    def get_module_by_offset(this : IDebugSymbols2*, offset : UInt64, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset.call(this, offset, start_index, index, base)
    end
    def get_module_names(this : IDebugSymbols2*, index : UInt32, base : UInt64, image_name_buffer : UInt8*, image_name_buffer_size : UInt32, image_name_size : UInt32*, module_name_buffer : UInt8*, module_name_buffer_size : UInt32, module_name_size : UInt32*, loaded_image_name_buffer : UInt8*, loaded_image_name_buffer_size : UInt32, loaded_image_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_names.call(this, index, base, image_name_buffer, image_name_buffer_size, image_name_size, module_name_buffer, module_name_buffer_size, module_name_size, loaded_image_name_buffer, loaded_image_name_buffer_size, loaded_image_name_size)
    end
    def get_module_parameters(this : IDebugSymbols2*, count : UInt32, bases : UInt64*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_parameters.call(this, count, bases, start, params)
    end
    def get_symbol_module(this : IDebugSymbols2*, symbol : Win32cr::Foundation::PSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module.call(this, symbol, base)
    end
    def get_type_name(this : IDebugSymbols2*, module__ : UInt64, type_id : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id(this : IDebugSymbols2*, module__ : UInt64, name : Win32cr::Foundation::PSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id.call(this, module__, name, type_id)
    end
    def get_type_size(this : IDebugSymbols2*, module__ : UInt64, type_id : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_size.call(this, module__, type_id, size)
    end
    def get_field_offset(this : IDebugSymbols2*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id(this : IDebugSymbols2*, symbol : Win32cr::Foundation::PSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id.call(this, symbol, type_id, module__)
    end
    def get_offset_type_id(this : IDebugSymbols2*, offset : UInt64, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_type_id.call(this, offset, type_id, module__)
    end
    def read_typed_data_virtual(this : IDebugSymbols2*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_virtual(this : IDebugSymbols2*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_virtual(this : IDebugSymbols2*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_virtual.call(this, output_control, offset, module__, type_id, flags)
    end
    def read_typed_data_physical(this : IDebugSymbols2*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_physical(this : IDebugSymbols2*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_physical(this : IDebugSymbols2*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_physical.call(this, output_control, offset, module__, type_id, flags)
    end
    def get_scope(this : IDebugSymbols2*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope(this : IDebugSymbols2*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def reset_scope(this : IDebugSymbols2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_scope.call(this)
    end
    def get_scope_symbol_group(this : IDebugSymbols2*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group.call(this, flags, update, symbols)
    end
    def create_symbol_group(this : IDebugSymbols2*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group.call(this, group)
    end
    def start_symbol_match(this : IDebugSymbols2*, pattern : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match.call(this, pattern, handle)
    end
    def get_next_symbol_match(this : IDebugSymbols2*, handle : UInt64, buffer : UInt8*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def end_symbol_match(this : IDebugSymbols2*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_symbol_match.call(this, handle)
    end
    def reload(this : IDebugSymbols2*, module__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload.call(this, module__)
    end
    def get_symbol_path(this : IDebugSymbols2*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path(this : IDebugSymbols2*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path.call(this, path)
    end
    def append_symbol_path(this : IDebugSymbols2*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path.call(this, addition)
    end
    def get_image_path(this : IDebugSymbols2*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path(this : IDebugSymbols2*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path.call(this, path)
    end
    def append_image_path(this : IDebugSymbols2*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path.call(this, addition)
    end
    def get_source_path(this : IDebugSymbols2*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element(this : IDebugSymbols2*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path(this : IDebugSymbols2*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path.call(this, path)
    end
    def append_source_path(this : IDebugSymbols2*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path.call(this, addition)
    end
    def find_source_file(this : IDebugSymbols2*, start_element : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets(this : IDebugSymbols2*, file : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information(this : IDebugSymbols2*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string(this : IDebugSymbols2*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name(this : IDebugSymbols2*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name(this : IDebugSymbols2*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def get_type_options(this : IDebugSymbols2*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_options.call(this, options)
    end
    def add_type_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_options.call(this, options)
    end
    def remove_type_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_type_options.call(this, options)
    end
    def set_type_options(this : IDebugSymbols2*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_options.call(this, options)
    end

  end

  @[Extern]
  record IDebugSymbols3Vtbl,
    query_interface : Proc(IDebugSymbols3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbols3*, UInt32),
    release : Proc(IDebugSymbols3*, UInt32),
    get_symbol_options : Proc(IDebugSymbols3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_symbol_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    set_symbol_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset : Proc(IDebugSymbols3*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset : Proc(IDebugSymbols3*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_modules : Proc(IDebugSymbols3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_by_index : Proc(IDebugSymbols3*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_names : Proc(IDebugSymbols3*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_parameters : Proc(IDebugSymbols3*, UInt32, UInt64*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_symbol_module : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id : Proc(IDebugSymbols3*, UInt64, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_size : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_type_id : Proc(IDebugSymbols3*, UInt64, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    read_typed_data_virtual : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_virtual : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_virtual : Proc(IDebugSymbols3*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_typed_data_physical : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_physical : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_physical : Proc(IDebugSymbols3*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_scope : Proc(IDebugSymbols3*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope : Proc(IDebugSymbols3*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    reset_scope : Proc(IDebugSymbols3*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group : Proc(IDebugSymbols3*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group : Proc(IDebugSymbols3*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match : Proc(IDebugSymbols3*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    end_symbol_match : Proc(IDebugSymbols3*, UInt64, Win32cr::Foundation::HRESULT),
    reload : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_image_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_image_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_source_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element : Proc(IDebugSymbols3*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_source_path : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    find_source_file : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information : Proc(IDebugSymbols3*, UInt32, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_options : Proc(IDebugSymbols3*, UInt32*, Win32cr::Foundation::HRESULT),
    add_type_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    remove_type_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    set_type_options : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset_wide : Proc(IDebugSymbols3*, UInt64, Int32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32*, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line_wide : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_symbol_module_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id_wide : Proc(IDebugSymbols3*, UInt64, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group2 : Proc(IDebugSymbols3*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group2 : Proc(IDebugSymbols3*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match_wide : Proc(IDebugSymbols3*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    reload_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path_wide : Proc(IDebugSymbols3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_image_path_wide : Proc(IDebugSymbols3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_image_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_source_path_wide : Proc(IDebugSymbols3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element_wide : Proc(IDebugSymbols3*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_source_path_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    find_source_file_wide : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information_wide : Proc(IDebugSymbols3*, UInt32, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string_wide : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_managed_module : Proc(IDebugSymbols3*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2 : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset2 : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    add_synthetic_module : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    add_synthetic_module_wide : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    remove_synthetic_module : Proc(IDebugSymbols3*, UInt64, Win32cr::Foundation::HRESULT),
    get_current_scope_frame_index : Proc(IDebugSymbols3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_scope_frame_by_index : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope_from_jit_debug_info : Proc(IDebugSymbols3*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    set_scope_from_stored_event : Proc(IDebugSymbols3*, Win32cr::Foundation::HRESULT),
    output_symbol_by_offset : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_function_entry_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol_wide : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    remove_synthetic_symbol : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name : Proc(IDebugSymbols3*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols3*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_token : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_information : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string_wide : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_offset_regions : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line_wide : Proc(IDebugSymbols3*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string_wide : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_offset_regions : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_by_source_entry : Proc(IDebugSymbols3*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbols3, lpVtbl : IDebugSymbols3Vtbl* do
    GUID = LibC::GUID.new(0xf02fbecc_u32, 0x50ac_u16, 0x4f36_u16, StaticArray[0x9a_u8, 0xd9_u8, 0xc9_u8, 0x75_u8, 0xe8_u8, 0xf3_u8, 0x2f_u8, 0xf8_u8])
    def query_interface(this : IDebugSymbols3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbols3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbols3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbol_options(this : IDebugSymbols3*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_options.call(this, options)
    end
    def add_symbol_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_options.call(this, options)
    end
    def remove_symbol_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_options.call(this, options)
    end
    def set_symbol_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_options.call(this, options)
    end
    def get_name_by_offset(this : IDebugSymbols3*, offset : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name.call(this, symbol, offset)
    end
    def get_near_name_by_offset(this : IDebugSymbols3*, offset : UInt64, delta : Int32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset(this : IDebugSymbols3*, offset : UInt64, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line(this : IDebugSymbols3*, line : UInt32, file : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line.call(this, line, file, offset)
    end
    def get_number_modules(this : IDebugSymbols3*, loaded : UInt32*, unloaded : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_modules.call(this, loaded, unloaded)
    end
    def get_module_by_index(this : IDebugSymbols3*, index : UInt32, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_index.call(this, index, base)
    end
    def get_module_by_module_name(this : IDebugSymbols3*, name : Win32cr::Foundation::PSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name.call(this, name, start_index, index, base)
    end
    def get_module_by_offset(this : IDebugSymbols3*, offset : UInt64, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset.call(this, offset, start_index, index, base)
    end
    def get_module_names(this : IDebugSymbols3*, index : UInt32, base : UInt64, image_name_buffer : UInt8*, image_name_buffer_size : UInt32, image_name_size : UInt32*, module_name_buffer : UInt8*, module_name_buffer_size : UInt32, module_name_size : UInt32*, loaded_image_name_buffer : UInt8*, loaded_image_name_buffer_size : UInt32, loaded_image_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_names.call(this, index, base, image_name_buffer, image_name_buffer_size, image_name_size, module_name_buffer, module_name_buffer_size, module_name_size, loaded_image_name_buffer, loaded_image_name_buffer_size, loaded_image_name_size)
    end
    def get_module_parameters(this : IDebugSymbols3*, count : UInt32, bases : UInt64*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_parameters.call(this, count, bases, start, params)
    end
    def get_symbol_module(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module.call(this, symbol, base)
    end
    def get_type_name(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id(this : IDebugSymbols3*, module__ : UInt64, name : Win32cr::Foundation::PSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id.call(this, module__, name, type_id)
    end
    def get_type_size(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_size.call(this, module__, type_id, size)
    end
    def get_field_offset(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id.call(this, symbol, type_id, module__)
    end
    def get_offset_type_id(this : IDebugSymbols3*, offset : UInt64, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_type_id.call(this, offset, type_id, module__)
    end
    def read_typed_data_virtual(this : IDebugSymbols3*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_virtual(this : IDebugSymbols3*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_virtual(this : IDebugSymbols3*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_virtual.call(this, output_control, offset, module__, type_id, flags)
    end
    def read_typed_data_physical(this : IDebugSymbols3*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_physical(this : IDebugSymbols3*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_physical(this : IDebugSymbols3*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_physical.call(this, output_control, offset, module__, type_id, flags)
    end
    def get_scope(this : IDebugSymbols3*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope(this : IDebugSymbols3*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def reset_scope(this : IDebugSymbols3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_scope.call(this)
    end
    def get_scope_symbol_group(this : IDebugSymbols3*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group.call(this, flags, update, symbols)
    end
    def create_symbol_group(this : IDebugSymbols3*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group.call(this, group)
    end
    def start_symbol_match(this : IDebugSymbols3*, pattern : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match.call(this, pattern, handle)
    end
    def get_next_symbol_match(this : IDebugSymbols3*, handle : UInt64, buffer : UInt8*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def end_symbol_match(this : IDebugSymbols3*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_symbol_match.call(this, handle)
    end
    def reload(this : IDebugSymbols3*, module__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload.call(this, module__)
    end
    def get_symbol_path(this : IDebugSymbols3*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path(this : IDebugSymbols3*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path.call(this, path)
    end
    def append_symbol_path(this : IDebugSymbols3*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path.call(this, addition)
    end
    def get_image_path(this : IDebugSymbols3*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path(this : IDebugSymbols3*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path.call(this, path)
    end
    def append_image_path(this : IDebugSymbols3*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path.call(this, addition)
    end
    def get_source_path(this : IDebugSymbols3*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element(this : IDebugSymbols3*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path(this : IDebugSymbols3*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path.call(this, path)
    end
    def append_source_path(this : IDebugSymbols3*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path.call(this, addition)
    end
    def find_source_file(this : IDebugSymbols3*, start_element : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets(this : IDebugSymbols3*, file : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information(this : IDebugSymbols3*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string(this : IDebugSymbols3*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def get_type_options(this : IDebugSymbols3*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_options.call(this, options)
    end
    def add_type_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_options.call(this, options)
    end
    def remove_type_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_type_options.call(this, options)
    end
    def set_type_options(this : IDebugSymbols3*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_options.call(this, options)
    end
    def get_name_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset_wide.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name_wide(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name_wide.call(this, symbol, offset)
    end
    def get_near_name_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, delta : Int32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset_wide.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, line : UInt32*, file_buffer : UInt16*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset_wide.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line_wide(this : IDebugSymbols3*, line : UInt32, file : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line_wide.call(this, line, file, offset)
    end
    def get_module_by_module_name_wide(this : IDebugSymbols3*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name_wide.call(this, name, start_index, index, base)
    end
    def get_symbol_module_wide(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PWSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module_wide.call(this, symbol, base)
    end
    def get_type_name_wide(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name_wide.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id_wide(this : IDebugSymbols3*, module__ : UInt64, name : Win32cr::Foundation::PWSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id_wide.call(this, module__, name, type_id)
    end
    def get_field_offset_wide(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PWSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset_wide.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id_wide(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PWSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id_wide.call(this, symbol, type_id, module__)
    end
    def get_scope_symbol_group2(this : IDebugSymbols3*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group2.call(this, flags, update, symbols)
    end
    def create_symbol_group2(this : IDebugSymbols3*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group2.call(this, group)
    end
    def start_symbol_match_wide(this : IDebugSymbols3*, pattern : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match_wide.call(this, pattern, handle)
    end
    def get_next_symbol_match_wide(this : IDebugSymbols3*, handle : UInt64, buffer : UInt16*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match_wide.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def reload_wide(this : IDebugSymbols3*, module__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_wide.call(this, module__)
    end
    def get_symbol_path_wide(this : IDebugSymbols3*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path_wide(this : IDebugSymbols3*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path_wide.call(this, path)
    end
    def append_symbol_path_wide(this : IDebugSymbols3*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path_wide.call(this, addition)
    end
    def get_image_path_wide(this : IDebugSymbols3*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path_wide(this : IDebugSymbols3*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path_wide.call(this, path)
    end
    def append_image_path_wide(this : IDebugSymbols3*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path_wide.call(this, addition)
    end
    def get_source_path_wide(this : IDebugSymbols3*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element_wide(this : IDebugSymbols3*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element_wide.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path_wide(this : IDebugSymbols3*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path_wide.call(this, path)
    end
    def append_source_path_wide(this : IDebugSymbols3*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path_wide.call(this, addition)
    end
    def find_source_file_wide(this : IDebugSymbols3*, start_element : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, found_element : UInt32*, buffer : UInt16*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_wide.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets_wide(this : IDebugSymbols3*, file : Win32cr::Foundation::PWSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets_wide.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information_wide(this : IDebugSymbols3*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PWSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string_wide(this : IDebugSymbols3*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name_wide(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name_wide.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name_wide(this : IDebugSymbols3*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name_wide.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def is_managed_module(this : IDebugSymbols3*, index : UInt32, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_managed_module.call(this, index, base)
    end
    def get_module_by_module_name2(this : IDebugSymbols3*, name : Win32cr::Foundation::PSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_module_name2_wide(this : IDebugSymbols3*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2_wide.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_offset2(this : IDebugSymbols3*, offset : UInt64, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset2.call(this, offset, start_index, flags, index, base)
    end
    def add_synthetic_module(this : IDebugSymbols3*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module.call(this, base, size, image_path, module_name, flags)
    end
    def add_synthetic_module_wide(this : IDebugSymbols3*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PWSTR, module_name : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module_wide.call(this, base, size, image_path, module_name, flags)
    end
    def remove_synthetic_module(this : IDebugSymbols3*, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_module.call(this, base)
    end
    def get_current_scope_frame_index(this : IDebugSymbols3*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_scope_frame_index.call(this, index)
    end
    def set_scope_frame_by_index(this : IDebugSymbols3*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_frame_by_index.call(this, index)
    end
    def set_scope_from_jit_debug_info(this : IDebugSymbols3*, output_control : UInt32, info_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_jit_debug_info.call(this, output_control, info_offset)
    end
    def set_scope_from_stored_event(this : IDebugSymbols3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_stored_event.call(this)
    end
    def output_symbol_by_offset(this : IDebugSymbols3*, output_control : UInt32, flags : UInt32, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbol_by_offset.call(this, output_control, flags, offset)
    end
    def get_function_entry_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, buffer : Void*, buffer_size : UInt32, buffer_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffer_size, buffer_needed)
    end
    def get_field_type_and_offset(this : IDebugSymbols3*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def get_field_type_and_offset_wide(this : IDebugSymbols3*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PWSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset_wide.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def add_synthetic_symbol(this : IDebugSymbols3*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
    end
    def add_synthetic_symbol_wide(this : IDebugSymbols3*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PWSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
    end
    def remove_synthetic_symbol(this : IDebugSymbols3*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_symbol.call(this, id)
    end
    def get_symbol_entries_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, displacements : UInt64*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, ids_count, entries)
    end
    def get_symbol_entries_by_name(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entries_by_name_wide(this : IDebugSymbols3*, symbol : Win32cr::Foundation::PWSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entry_by_token(this : IDebugSymbols3*, module_base : UInt64, token : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_token.call(this, module_base, token, id)
    end
    def get_symbol_entry_information(this : IDebugSymbols3*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, info : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_information.call(this, id, info)
    end
    def get_symbol_entry_string(this : IDebugSymbols3*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_string_wide(this : IDebugSymbols3*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_offset_regions(this : IDebugSymbols3*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regions_count, regions_avail)
    end
    def get_symbol_entry_by_symbol_entry(this : IDebugSymbols3*, from_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, to_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_symbol_entry.call(this, from_id, flags, to_id)
    end
    def get_source_entries_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_offset.call(this, offset, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line(this : IDebugSymbols3*, line : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line_wide(this : IDebugSymbols3*, line : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entry_string(this : IDebugSymbols3*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_string_wide(this : IDebugSymbols3*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_offset_regions(this : IDebugSymbols3*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regions_count, regions_avail)
    end
    def get_source_entry_by_source_entry(this : IDebugSymbols3*, from_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, to_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_by_source_entry.call(this, from_entry, flags, to_entry)
    end

  end

  @[Extern]
  record IDebugSymbols4Vtbl,
    query_interface : Proc(IDebugSymbols4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbols4*, UInt32),
    release : Proc(IDebugSymbols4*, UInt32),
    get_symbol_options : Proc(IDebugSymbols4*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    remove_symbol_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    set_symbol_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset : Proc(IDebugSymbols4*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset : Proc(IDebugSymbols4*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_modules : Proc(IDebugSymbols4*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_by_index : Proc(IDebugSymbols4*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_names : Proc(IDebugSymbols4*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_parameters : Proc(IDebugSymbols4*, UInt32, UInt64*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_symbol_module : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id : Proc(IDebugSymbols4*, UInt64, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_size : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_type_id : Proc(IDebugSymbols4*, UInt64, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    read_typed_data_virtual : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_virtual : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_virtual : Proc(IDebugSymbols4*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_typed_data_physical : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_physical : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_physical : Proc(IDebugSymbols4*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_scope : Proc(IDebugSymbols4*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope : Proc(IDebugSymbols4*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    reset_scope : Proc(IDebugSymbols4*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group : Proc(IDebugSymbols4*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group : Proc(IDebugSymbols4*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match : Proc(IDebugSymbols4*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    end_symbol_match : Proc(IDebugSymbols4*, UInt64, Win32cr::Foundation::HRESULT),
    reload : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_image_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_image_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_source_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element : Proc(IDebugSymbols4*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_source_path : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    find_source_file : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information : Proc(IDebugSymbols4*, UInt32, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_options : Proc(IDebugSymbols4*, UInt32*, Win32cr::Foundation::HRESULT),
    add_type_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    remove_type_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    set_type_options : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset_wide : Proc(IDebugSymbols4*, UInt64, Int32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32*, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line_wide : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_symbol_module_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id_wide : Proc(IDebugSymbols4*, UInt64, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group2 : Proc(IDebugSymbols4*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group2 : Proc(IDebugSymbols4*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match_wide : Proc(IDebugSymbols4*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    reload_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path_wide : Proc(IDebugSymbols4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_image_path_wide : Proc(IDebugSymbols4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_image_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_source_path_wide : Proc(IDebugSymbols4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element_wide : Proc(IDebugSymbols4*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_source_path_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    find_source_file_wide : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information_wide : Proc(IDebugSymbols4*, UInt32, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string_wide : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_managed_module : Proc(IDebugSymbols4*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2 : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset2 : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    add_synthetic_module : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    add_synthetic_module_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    remove_synthetic_module : Proc(IDebugSymbols4*, UInt64, Win32cr::Foundation::HRESULT),
    get_current_scope_frame_index : Proc(IDebugSymbols4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_scope_frame_by_index : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope_from_jit_debug_info : Proc(IDebugSymbols4*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    set_scope_from_stored_event : Proc(IDebugSymbols4*, Win32cr::Foundation::HRESULT),
    output_symbol_by_offset : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_function_entry_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    remove_synthetic_symbol : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name : Proc(IDebugSymbols4*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols4*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_token : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_information : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string_wide : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_offset_regions : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line_wide : Proc(IDebugSymbols4*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string_wide : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_offset_regions : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_by_source_entry : Proc(IDebugSymbols4*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, Win32cr::Foundation::HRESULT),
    get_scope_ex : Proc(IDebugSymbols4*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope_ex : Proc(IDebugSymbols4*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_inline_context : Proc(IDebugSymbols4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_name_by_inline_context_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_inline_context : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_inline_context_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    output_symbol_by_inline_context : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbols4, lpVtbl : IDebugSymbols4Vtbl* do
    GUID = LibC::GUID.new(0xe391bbd8_u32, 0x9d8c_u16, 0x4418_u16, StaticArray[0x84_u8, 0xb_u8, 0xc0_u8, 0x6_u8, 0x59_u8, 0x2a_u8, 0x17_u8, 0x52_u8])
    def query_interface(this : IDebugSymbols4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbols4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbols4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbol_options(this : IDebugSymbols4*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_options.call(this, options)
    end
    def add_symbol_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_options.call(this, options)
    end
    def remove_symbol_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_options.call(this, options)
    end
    def set_symbol_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_options.call(this, options)
    end
    def get_name_by_offset(this : IDebugSymbols4*, offset : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name.call(this, symbol, offset)
    end
    def get_near_name_by_offset(this : IDebugSymbols4*, offset : UInt64, delta : Int32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset(this : IDebugSymbols4*, offset : UInt64, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line(this : IDebugSymbols4*, line : UInt32, file : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line.call(this, line, file, offset)
    end
    def get_number_modules(this : IDebugSymbols4*, loaded : UInt32*, unloaded : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_modules.call(this, loaded, unloaded)
    end
    def get_module_by_index(this : IDebugSymbols4*, index : UInt32, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_index.call(this, index, base)
    end
    def get_module_by_module_name(this : IDebugSymbols4*, name : Win32cr::Foundation::PSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name.call(this, name, start_index, index, base)
    end
    def get_module_by_offset(this : IDebugSymbols4*, offset : UInt64, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset.call(this, offset, start_index, index, base)
    end
    def get_module_names(this : IDebugSymbols4*, index : UInt32, base : UInt64, image_name_buffer : UInt8*, image_name_buffer_size : UInt32, image_name_size : UInt32*, module_name_buffer : UInt8*, module_name_buffer_size : UInt32, module_name_size : UInt32*, loaded_image_name_buffer : UInt8*, loaded_image_name_buffer_size : UInt32, loaded_image_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_names.call(this, index, base, image_name_buffer, image_name_buffer_size, image_name_size, module_name_buffer, module_name_buffer_size, module_name_size, loaded_image_name_buffer, loaded_image_name_buffer_size, loaded_image_name_size)
    end
    def get_module_parameters(this : IDebugSymbols4*, count : UInt32, bases : UInt64*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_parameters.call(this, count, bases, start, params)
    end
    def get_symbol_module(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module.call(this, symbol, base)
    end
    def get_type_name(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id(this : IDebugSymbols4*, module__ : UInt64, name : Win32cr::Foundation::PSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id.call(this, module__, name, type_id)
    end
    def get_type_size(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_size.call(this, module__, type_id, size)
    end
    def get_field_offset(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id.call(this, symbol, type_id, module__)
    end
    def get_offset_type_id(this : IDebugSymbols4*, offset : UInt64, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_type_id.call(this, offset, type_id, module__)
    end
    def read_typed_data_virtual(this : IDebugSymbols4*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_virtual(this : IDebugSymbols4*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_virtual(this : IDebugSymbols4*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_virtual.call(this, output_control, offset, module__, type_id, flags)
    end
    def read_typed_data_physical(this : IDebugSymbols4*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_physical(this : IDebugSymbols4*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_physical(this : IDebugSymbols4*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_physical.call(this, output_control, offset, module__, type_id, flags)
    end
    def get_scope(this : IDebugSymbols4*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope(this : IDebugSymbols4*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def reset_scope(this : IDebugSymbols4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_scope.call(this)
    end
    def get_scope_symbol_group(this : IDebugSymbols4*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group.call(this, flags, update, symbols)
    end
    def create_symbol_group(this : IDebugSymbols4*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group.call(this, group)
    end
    def start_symbol_match(this : IDebugSymbols4*, pattern : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match.call(this, pattern, handle)
    end
    def get_next_symbol_match(this : IDebugSymbols4*, handle : UInt64, buffer : UInt8*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def end_symbol_match(this : IDebugSymbols4*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_symbol_match.call(this, handle)
    end
    def reload(this : IDebugSymbols4*, module__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload.call(this, module__)
    end
    def get_symbol_path(this : IDebugSymbols4*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path(this : IDebugSymbols4*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path.call(this, path)
    end
    def append_symbol_path(this : IDebugSymbols4*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path.call(this, addition)
    end
    def get_image_path(this : IDebugSymbols4*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path(this : IDebugSymbols4*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path.call(this, path)
    end
    def append_image_path(this : IDebugSymbols4*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path.call(this, addition)
    end
    def get_source_path(this : IDebugSymbols4*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element(this : IDebugSymbols4*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path(this : IDebugSymbols4*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path.call(this, path)
    end
    def append_source_path(this : IDebugSymbols4*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path.call(this, addition)
    end
    def find_source_file(this : IDebugSymbols4*, start_element : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets(this : IDebugSymbols4*, file : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information(this : IDebugSymbols4*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string(this : IDebugSymbols4*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def get_type_options(this : IDebugSymbols4*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_options.call(this, options)
    end
    def add_type_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_options.call(this, options)
    end
    def remove_type_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_type_options.call(this, options)
    end
    def set_type_options(this : IDebugSymbols4*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_options.call(this, options)
    end
    def get_name_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset_wide.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name_wide(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name_wide.call(this, symbol, offset)
    end
    def get_near_name_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, delta : Int32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset_wide.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, line : UInt32*, file_buffer : UInt16*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset_wide.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line_wide(this : IDebugSymbols4*, line : UInt32, file : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line_wide.call(this, line, file, offset)
    end
    def get_module_by_module_name_wide(this : IDebugSymbols4*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name_wide.call(this, name, start_index, index, base)
    end
    def get_symbol_module_wide(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PWSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module_wide.call(this, symbol, base)
    end
    def get_type_name_wide(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name_wide.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id_wide(this : IDebugSymbols4*, module__ : UInt64, name : Win32cr::Foundation::PWSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id_wide.call(this, module__, name, type_id)
    end
    def get_field_offset_wide(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PWSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset_wide.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id_wide(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PWSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id_wide.call(this, symbol, type_id, module__)
    end
    def get_scope_symbol_group2(this : IDebugSymbols4*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group2.call(this, flags, update, symbols)
    end
    def create_symbol_group2(this : IDebugSymbols4*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group2.call(this, group)
    end
    def start_symbol_match_wide(this : IDebugSymbols4*, pattern : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match_wide.call(this, pattern, handle)
    end
    def get_next_symbol_match_wide(this : IDebugSymbols4*, handle : UInt64, buffer : UInt16*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match_wide.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def reload_wide(this : IDebugSymbols4*, module__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_wide.call(this, module__)
    end
    def get_symbol_path_wide(this : IDebugSymbols4*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path_wide(this : IDebugSymbols4*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path_wide.call(this, path)
    end
    def append_symbol_path_wide(this : IDebugSymbols4*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path_wide.call(this, addition)
    end
    def get_image_path_wide(this : IDebugSymbols4*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path_wide(this : IDebugSymbols4*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path_wide.call(this, path)
    end
    def append_image_path_wide(this : IDebugSymbols4*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path_wide.call(this, addition)
    end
    def get_source_path_wide(this : IDebugSymbols4*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element_wide(this : IDebugSymbols4*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element_wide.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path_wide(this : IDebugSymbols4*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path_wide.call(this, path)
    end
    def append_source_path_wide(this : IDebugSymbols4*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path_wide.call(this, addition)
    end
    def find_source_file_wide(this : IDebugSymbols4*, start_element : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, found_element : UInt32*, buffer : UInt16*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_wide.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets_wide(this : IDebugSymbols4*, file : Win32cr::Foundation::PWSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets_wide.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information_wide(this : IDebugSymbols4*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PWSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string_wide(this : IDebugSymbols4*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name_wide(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name_wide.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name_wide(this : IDebugSymbols4*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name_wide.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def is_managed_module(this : IDebugSymbols4*, index : UInt32, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_managed_module.call(this, index, base)
    end
    def get_module_by_module_name2(this : IDebugSymbols4*, name : Win32cr::Foundation::PSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_module_name2_wide(this : IDebugSymbols4*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2_wide.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_offset2(this : IDebugSymbols4*, offset : UInt64, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset2.call(this, offset, start_index, flags, index, base)
    end
    def add_synthetic_module(this : IDebugSymbols4*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module.call(this, base, size, image_path, module_name, flags)
    end
    def add_synthetic_module_wide(this : IDebugSymbols4*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PWSTR, module_name : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module_wide.call(this, base, size, image_path, module_name, flags)
    end
    def remove_synthetic_module(this : IDebugSymbols4*, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_module.call(this, base)
    end
    def get_current_scope_frame_index(this : IDebugSymbols4*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_scope_frame_index.call(this, index)
    end
    def set_scope_frame_by_index(this : IDebugSymbols4*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_frame_by_index.call(this, index)
    end
    def set_scope_from_jit_debug_info(this : IDebugSymbols4*, output_control : UInt32, info_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_jit_debug_info.call(this, output_control, info_offset)
    end
    def set_scope_from_stored_event(this : IDebugSymbols4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_stored_event.call(this)
    end
    def output_symbol_by_offset(this : IDebugSymbols4*, output_control : UInt32, flags : UInt32, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbol_by_offset.call(this, output_control, flags, offset)
    end
    def get_function_entry_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, buffer : Void*, buffer_size : UInt32, buffer_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffer_size, buffer_needed)
    end
    def get_field_type_and_offset(this : IDebugSymbols4*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def get_field_type_and_offset_wide(this : IDebugSymbols4*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PWSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset_wide.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def add_synthetic_symbol(this : IDebugSymbols4*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
    end
    def add_synthetic_symbol_wide(this : IDebugSymbols4*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PWSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
    end
    def remove_synthetic_symbol(this : IDebugSymbols4*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_symbol.call(this, id)
    end
    def get_symbol_entries_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, displacements : UInt64*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, ids_count, entries)
    end
    def get_symbol_entries_by_name(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entries_by_name_wide(this : IDebugSymbols4*, symbol : Win32cr::Foundation::PWSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entry_by_token(this : IDebugSymbols4*, module_base : UInt64, token : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_token.call(this, module_base, token, id)
    end
    def get_symbol_entry_information(this : IDebugSymbols4*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, info : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_information.call(this, id, info)
    end
    def get_symbol_entry_string(this : IDebugSymbols4*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_string_wide(this : IDebugSymbols4*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_offset_regions(this : IDebugSymbols4*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regions_count, regions_avail)
    end
    def get_symbol_entry_by_symbol_entry(this : IDebugSymbols4*, from_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, to_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_symbol_entry.call(this, from_id, flags, to_id)
    end
    def get_source_entries_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_offset.call(this, offset, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line(this : IDebugSymbols4*, line : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line_wide(this : IDebugSymbols4*, line : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entry_string(this : IDebugSymbols4*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_string_wide(this : IDebugSymbols4*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_offset_regions(this : IDebugSymbols4*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regions_count, regions_avail)
    end
    def get_source_entry_by_source_entry(this : IDebugSymbols4*, from_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, to_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_by_source_entry.call(this, from_entry, flags, to_entry)
    end
    def get_scope_ex(this : IDebugSymbols4*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_ex.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope_ex(this : IDebugSymbols4*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_ex.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def get_name_by_inline_context(this : IDebugSymbols4*, offset : UInt64, inline_context : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_inline_context.call(this, offset, inline_context, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_name_by_inline_context_wide(this : IDebugSymbols4*, offset : UInt64, inline_context : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_inline_context_wide.call(this, offset, inline_context, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_inline_context(this : IDebugSymbols4*, offset : UInt64, inline_context : UInt32, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_inline_context.call(this, offset, inline_context, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_line_by_inline_context_wide(this : IDebugSymbols4*, offset : UInt64, inline_context : UInt32, line : UInt32*, file_buffer : UInt16*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_inline_context_wide.call(this, offset, inline_context, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def output_symbol_by_inline_context(this : IDebugSymbols4*, output_control : UInt32, flags : UInt32, offset : UInt64, inline_context : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbol_by_inline_context.call(this, output_control, flags, offset, inline_context)
    end

  end

  @[Extern]
  record IDebugSymbols5Vtbl,
    query_interface : Proc(IDebugSymbols5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSymbols5*, UInt32),
    release : Proc(IDebugSymbols5*, UInt32),
    get_symbol_options : Proc(IDebugSymbols5*, UInt32*, Win32cr::Foundation::HRESULT),
    add_symbol_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    remove_symbol_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    set_symbol_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset : Proc(IDebugSymbols5*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset : Proc(IDebugSymbols5*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_number_modules : Proc(IDebugSymbols5*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_by_index : Proc(IDebugSymbols5*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_names : Proc(IDebugSymbols5*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_parameters : Proc(IDebugSymbols5*, UInt32, UInt64*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_symbol_module : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id : Proc(IDebugSymbols5*, UInt64, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_size : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_type_id : Proc(IDebugSymbols5*, UInt64, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    read_typed_data_virtual : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_virtual : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_virtual : Proc(IDebugSymbols5*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_typed_data_physical : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_typed_data_physical : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    output_typed_data_physical : Proc(IDebugSymbols5*, UInt32, UInt64, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_scope : Proc(IDebugSymbols5*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope : Proc(IDebugSymbols5*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    reset_scope : Proc(IDebugSymbols5*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group : Proc(IDebugSymbols5*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group : Proc(IDebugSymbols5*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match : Proc(IDebugSymbols5*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    end_symbol_match : Proc(IDebugSymbols5*, UInt64, Win32cr::Foundation::HRESULT),
    reload : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_image_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_image_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    get_source_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element : Proc(IDebugSymbols5*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    append_source_path : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    find_source_file : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information : Proc(IDebugSymbols5*, UInt32, UInt64, Win32cr::Foundation::PSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_options : Proc(IDebugSymbols5*, UInt32*, Win32cr::Foundation::HRESULT),
    add_type_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    remove_type_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    set_type_options : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_name_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_near_name_by_offset_wide : Proc(IDebugSymbols5*, UInt64, Int32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32*, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_offset_by_line_wide : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_symbol_module_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_type_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_id_wide : Proc(IDebugSymbols5*, UInt64, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_type_id_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_scope_symbol_group2 : Proc(IDebugSymbols5*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_symbol_group2 : Proc(IDebugSymbols5*, Void**, Win32cr::Foundation::HRESULT),
    start_symbol_match_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_next_symbol_match_wide : Proc(IDebugSymbols5*, UInt64, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    reload_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_symbol_path_wide : Proc(IDebugSymbols5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_symbol_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_symbol_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_image_path_wide : Proc(IDebugSymbols5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_image_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_image_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_source_path_wide : Proc(IDebugSymbols5*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_path_element_wide : Proc(IDebugSymbols5*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_source_path_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    find_source_file_wide : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_file_line_offsets_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_version_information_wide : Proc(IDebugSymbols5*, UInt32, UInt64, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_module_name_string_wide : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_constant_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt64, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_managed_module : Proc(IDebugSymbols5*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2 : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_module_name2_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_module_by_offset2 : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    add_synthetic_module : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::HRESULT),
    add_synthetic_module_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    remove_synthetic_module : Proc(IDebugSymbols5*, UInt64, Win32cr::Foundation::HRESULT),
    get_current_scope_frame_index : Proc(IDebugSymbols5*, UInt32*, Win32cr::Foundation::HRESULT),
    set_scope_frame_by_index : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope_from_jit_debug_info : Proc(IDebugSymbols5*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    set_scope_from_stored_event : Proc(IDebugSymbols5*, Win32cr::Foundation::HRESULT),
    output_symbol_by_offset : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    get_function_entry_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_field_type_and_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    add_synthetic_symbol_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    remove_synthetic_symbol : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name : Proc(IDebugSymbols5*, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols5*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_token : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_information : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_string_wide : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_offset_regions : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entries_by_line_wide : Proc(IDebugSymbols5*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_string_wide : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_offset_regions : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_entry_by_source_entry : Proc(IDebugSymbols5*, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, Win32cr::Foundation::HRESULT),
    get_scope_ex : Proc(IDebugSymbols5*, UInt64*, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_scope_ex : Proc(IDebugSymbols5*, UInt64, Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_name_by_inline_context : Proc(IDebugSymbols5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_name_by_inline_context_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_inline_context : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    get_line_by_inline_context_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, UInt16*, UInt32, UInt32*, UInt64*, Win32cr::Foundation::HRESULT),
    output_symbol_by_inline_context : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, UInt32, Win32cr::Foundation::HRESULT),
    get_current_scope_frame_index_ex : Proc(IDebugSymbols5*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_scope_frame_by_index_ex : Proc(IDebugSymbols5*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSymbols5, lpVtbl : IDebugSymbols5Vtbl* do
    GUID = LibC::GUID.new(0xc65fa83e_u32, 0x1e69_u16, 0x475e_u16, StaticArray[0x8e_u8, 0xe_u8, 0xb5_u8, 0xd7_u8, 0x9e_u8, 0x9c_u8, 0xc1_u8, 0x7e_u8])
    def query_interface(this : IDebugSymbols5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSymbols5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSymbols5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbol_options(this : IDebugSymbols5*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_options.call(this, options)
    end
    def add_symbol_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_symbol_options.call(this, options)
    end
    def remove_symbol_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_symbol_options.call(this, options)
    end
    def set_symbol_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_options.call(this, options)
    end
    def get_name_by_offset(this : IDebugSymbols5*, offset : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name.call(this, symbol, offset)
    end
    def get_near_name_by_offset(this : IDebugSymbols5*, offset : UInt64, delta : Int32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset(this : IDebugSymbols5*, offset : UInt64, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line(this : IDebugSymbols5*, line : UInt32, file : Win32cr::Foundation::PSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line.call(this, line, file, offset)
    end
    def get_number_modules(this : IDebugSymbols5*, loaded : UInt32*, unloaded : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_modules.call(this, loaded, unloaded)
    end
    def get_module_by_index(this : IDebugSymbols5*, index : UInt32, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_index.call(this, index, base)
    end
    def get_module_by_module_name(this : IDebugSymbols5*, name : Win32cr::Foundation::PSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name.call(this, name, start_index, index, base)
    end
    def get_module_by_offset(this : IDebugSymbols5*, offset : UInt64, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset.call(this, offset, start_index, index, base)
    end
    def get_module_names(this : IDebugSymbols5*, index : UInt32, base : UInt64, image_name_buffer : UInt8*, image_name_buffer_size : UInt32, image_name_size : UInt32*, module_name_buffer : UInt8*, module_name_buffer_size : UInt32, module_name_size : UInt32*, loaded_image_name_buffer : UInt8*, loaded_image_name_buffer_size : UInt32, loaded_image_name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_names.call(this, index, base, image_name_buffer, image_name_buffer_size, image_name_size, module_name_buffer, module_name_buffer_size, module_name_size, loaded_image_name_buffer, loaded_image_name_buffer_size, loaded_image_name_size)
    end
    def get_module_parameters(this : IDebugSymbols5*, count : UInt32, bases : UInt64*, start : UInt32, params : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_parameters.call(this, count, bases, start, params)
    end
    def get_symbol_module(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module.call(this, symbol, base)
    end
    def get_type_name(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id(this : IDebugSymbols5*, module__ : UInt64, name : Win32cr::Foundation::PSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id.call(this, module__, name, type_id)
    end
    def get_type_size(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_size.call(this, module__, type_id, size)
    end
    def get_field_offset(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id.call(this, symbol, type_id, module__)
    end
    def get_offset_type_id(this : IDebugSymbols5*, offset : UInt64, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_type_id.call(this, offset, type_id, module__)
    end
    def read_typed_data_virtual(this : IDebugSymbols5*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_virtual(this : IDebugSymbols5*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_virtual.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_virtual(this : IDebugSymbols5*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_virtual.call(this, output_control, offset, module__, type_id, flags)
    end
    def read_typed_data_physical(this : IDebugSymbols5*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_read : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_read)
    end
    def write_typed_data_physical(this : IDebugSymbols5*, offset : UInt64, module__ : UInt64, type_id : UInt32, buffer : Void*, buffer_size : UInt32, bytes_written : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_typed_data_physical.call(this, offset, module__, type_id, buffer, buffer_size, bytes_written)
    end
    def output_typed_data_physical(this : IDebugSymbols5*, output_control : UInt32, offset : UInt64, module__ : UInt64, type_id : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_typed_data_physical.call(this, output_control, offset, module__, type_id, flags)
    end
    def get_scope(this : IDebugSymbols5*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope(this : IDebugSymbols5*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def reset_scope(this : IDebugSymbols5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_scope.call(this)
    end
    def get_scope_symbol_group(this : IDebugSymbols5*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group.call(this, flags, update, symbols)
    end
    def create_symbol_group(this : IDebugSymbols5*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group.call(this, group)
    end
    def start_symbol_match(this : IDebugSymbols5*, pattern : Win32cr::Foundation::PSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match.call(this, pattern, handle)
    end
    def get_next_symbol_match(this : IDebugSymbols5*, handle : UInt64, buffer : UInt8*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def end_symbol_match(this : IDebugSymbols5*, handle : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_symbol_match.call(this, handle)
    end
    def reload(this : IDebugSymbols5*, module__ : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload.call(this, module__)
    end
    def get_symbol_path(this : IDebugSymbols5*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path(this : IDebugSymbols5*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path.call(this, path)
    end
    def append_symbol_path(this : IDebugSymbols5*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path.call(this, addition)
    end
    def get_image_path(this : IDebugSymbols5*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path(this : IDebugSymbols5*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path.call(this, path)
    end
    def append_image_path(this : IDebugSymbols5*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path.call(this, addition)
    end
    def get_source_path(this : IDebugSymbols5*, buffer : UInt8*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element(this : IDebugSymbols5*, index : UInt32, buffer : UInt8*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path(this : IDebugSymbols5*, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path.call(this, path)
    end
    def append_source_path(this : IDebugSymbols5*, addition : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path.call(this, addition)
    end
    def find_source_file(this : IDebugSymbols5*, start_element : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, found_element : UInt32*, buffer : UInt8*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets(this : IDebugSymbols5*, file : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information(this : IDebugSymbols5*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string(this : IDebugSymbols5*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def get_type_options(this : IDebugSymbols5*, options : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_options.call(this, options)
    end
    def add_type_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_options.call(this, options)
    end
    def remove_type_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_type_options.call(this, options)
    end
    def set_type_options(this : IDebugSymbols5*, options : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_options.call(this, options)
    end
    def get_name_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_offset_wide.call(this, offset, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_offset_by_name_wide(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_name_wide.call(this, symbol, offset)
    end
    def get_near_name_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, delta : Int32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_near_name_by_offset_wide.call(this, offset, delta, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, line : UInt32*, file_buffer : UInt16*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_offset_wide.call(this, offset, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_offset_by_line_wide(this : IDebugSymbols5*, line : UInt32, file : Win32cr::Foundation::PWSTR, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset_by_line_wide.call(this, line, file, offset)
    end
    def get_module_by_module_name_wide(this : IDebugSymbols5*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name_wide.call(this, name, start_index, index, base)
    end
    def get_symbol_module_wide(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PWSTR, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_module_wide.call(this, symbol, base)
    end
    def get_type_name_wide(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_name_wide.call(this, module__, type_id, name_buffer, name_buffer_size, name_size)
    end
    def get_type_id_wide(this : IDebugSymbols5*, module__ : UInt64, name : Win32cr::Foundation::PWSTR, type_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_id_wide.call(this, module__, name, type_id)
    end
    def get_field_offset_wide(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, field : Win32cr::Foundation::PWSTR, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_offset_wide.call(this, module__, type_id, field, offset)
    end
    def get_symbol_type_id_wide(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PWSTR, type_id : UInt32*, module__ : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_type_id_wide.call(this, symbol, type_id, module__)
    end
    def get_scope_symbol_group2(this : IDebugSymbols5*, flags : UInt32, update : Void*, symbols : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_symbol_group2.call(this, flags, update, symbols)
    end
    def create_symbol_group2(this : IDebugSymbols5*, group : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_symbol_group2.call(this, group)
    end
    def start_symbol_match_wide(this : IDebugSymbols5*, pattern : Win32cr::Foundation::PWSTR, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_symbol_match_wide.call(this, pattern, handle)
    end
    def get_next_symbol_match_wide(this : IDebugSymbols5*, handle : UInt64, buffer : UInt16*, buffer_size : UInt32, match_size : UInt32*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_symbol_match_wide.call(this, handle, buffer, buffer_size, match_size, offset)
    end
    def reload_wide(this : IDebugSymbols5*, module__ : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_wide.call(this, module__)
    end
    def get_symbol_path_wide(this : IDebugSymbols5*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_symbol_path_wide(this : IDebugSymbols5*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_symbol_path_wide.call(this, path)
    end
    def append_symbol_path_wide(this : IDebugSymbols5*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_symbol_path_wide.call(this, addition)
    end
    def get_image_path_wide(this : IDebugSymbols5*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def set_image_path_wide(this : IDebugSymbols5*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_path_wide.call(this, path)
    end
    def append_image_path_wide(this : IDebugSymbols5*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_image_path_wide.call(this, addition)
    end
    def get_source_path_wide(this : IDebugSymbols5*, buffer : UInt16*, buffer_size : UInt32, path_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_wide.call(this, buffer, buffer_size, path_size)
    end
    def get_source_path_element_wide(this : IDebugSymbols5*, index : UInt32, buffer : UInt16*, buffer_size : UInt32, element_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_path_element_wide.call(this, index, buffer, buffer_size, element_size)
    end
    def set_source_path_wide(this : IDebugSymbols5*, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_path_wide.call(this, path)
    end
    def append_source_path_wide(this : IDebugSymbols5*, addition : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_source_path_wide.call(this, addition)
    end
    def find_source_file_wide(this : IDebugSymbols5*, start_element : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, found_element : UInt32*, buffer : UInt16*, buffer_size : UInt32, found_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_source_file_wide.call(this, start_element, file, flags, found_element, buffer, buffer_size, found_size)
    end
    def get_source_file_line_offsets_wide(this : IDebugSymbols5*, file : Win32cr::Foundation::PWSTR, buffer : UInt64*, buffer_lines : UInt32, file_lines : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_file_line_offsets_wide.call(this, file, buffer, buffer_lines, file_lines)
    end
    def get_module_version_information_wide(this : IDebugSymbols5*, index : UInt32, base : UInt64, item : Win32cr::Foundation::PWSTR, buffer : Void*, buffer_size : UInt32, ver_info_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffer_size, ver_info_size)
    end
    def get_module_name_string_wide(this : IDebugSymbols5*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffer_size, name_size)
    end
    def get_constant_name_wide(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, value : UInt64, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_name_wide.call(this, module__, type_id, value, name_buffer, name_buffer_size, name_size)
    end
    def get_field_name_wide(this : IDebugSymbols5*, module__ : UInt64, type_id : UInt32, field_index : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_name_wide.call(this, module__, type_id, field_index, name_buffer, name_buffer_size, name_size)
    end
    def is_managed_module(this : IDebugSymbols5*, index : UInt32, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_managed_module.call(this, index, base)
    end
    def get_module_by_module_name2(this : IDebugSymbols5*, name : Win32cr::Foundation::PSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_module_name2_wide(this : IDebugSymbols5*, name : Win32cr::Foundation::PWSTR, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_module_name2_wide.call(this, name, start_index, flags, index, base)
    end
    def get_module_by_offset2(this : IDebugSymbols5*, offset : UInt64, start_index : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_by_offset2.call(this, offset, start_index, flags, index, base)
    end
    def add_synthetic_module(this : IDebugSymbols5*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module.call(this, base, size, image_path, module_name, flags)
    end
    def add_synthetic_module_wide(this : IDebugSymbols5*, base : UInt64, size : UInt32, image_path : Win32cr::Foundation::PWSTR, module_name : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_module_wide.call(this, base, size, image_path, module_name, flags)
    end
    def remove_synthetic_module(this : IDebugSymbols5*, base : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_module.call(this, base)
    end
    def get_current_scope_frame_index(this : IDebugSymbols5*, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_scope_frame_index.call(this, index)
    end
    def set_scope_frame_by_index(this : IDebugSymbols5*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_frame_by_index.call(this, index)
    end
    def set_scope_from_jit_debug_info(this : IDebugSymbols5*, output_control : UInt32, info_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_jit_debug_info.call(this, output_control, info_offset)
    end
    def set_scope_from_stored_event(this : IDebugSymbols5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_from_stored_event.call(this)
    end
    def output_symbol_by_offset(this : IDebugSymbols5*, output_control : UInt32, flags : UInt32, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbol_by_offset.call(this, output_control, flags, offset)
    end
    def get_function_entry_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, buffer : Void*, buffer_size : UInt32, buffer_needed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffer_size, buffer_needed)
    end
    def get_field_type_and_offset(this : IDebugSymbols5*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def get_field_type_and_offset_wide(this : IDebugSymbols5*, module__ : UInt64, container_type_id : UInt32, field : Win32cr::Foundation::PWSTR, field_type_id : UInt32*, offset : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_type_and_offset_wide.call(this, module__, container_type_id, field, field_type_id, offset)
    end
    def add_synthetic_symbol(this : IDebugSymbols5*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
    end
    def add_synthetic_symbol_wide(this : IDebugSymbols5*, offset : UInt64, size : UInt32, name : Win32cr::Foundation::PWSTR, flags : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
    end
    def remove_synthetic_symbol(this : IDebugSymbols5*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_synthetic_symbol.call(this, id)
    end
    def get_symbol_entries_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, displacements : UInt64*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, ids_count, entries)
    end
    def get_symbol_entries_by_name(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entries_by_name_wide(this : IDebugSymbols5*, symbol : Win32cr::Foundation::PWSTR, flags : UInt32, ids : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, ids_count : UInt32, entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, ids_count, entries)
    end
    def get_symbol_entry_by_token(this : IDebugSymbols5*, module_base : UInt64, token : UInt32, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_token.call(this, module_base, token, id)
    end
    def get_symbol_entry_information(this : IDebugSymbols5*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, info : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_information.call(this, id, info)
    end
    def get_symbol_entry_string(this : IDebugSymbols5*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_string_wide(this : IDebugSymbols5*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffer_size, string_size)
    end
    def get_symbol_entry_offset_regions(this : IDebugSymbols5*, id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regions_count, regions_avail)
    end
    def get_symbol_entry_by_symbol_entry(this : IDebugSymbols5*, from_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*, flags : UInt32, to_id : Win32cr::System::Diagnostics::Debug::DEBUG_MODULE_AND_ID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_entry_by_symbol_entry.call(this, from_id, flags, to_id)
    end
    def get_source_entries_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_offset.call(this, offset, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line(this : IDebugSymbols5*, line : UInt32, file : Win32cr::Foundation::PSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entries_by_line_wide(this : IDebugSymbols5*, line : UInt32, file : Win32cr::Foundation::PWSTR, flags : UInt32, entries : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, entries_count : UInt32, entries_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entries_count, entries_avail)
    end
    def get_source_entry_string(this : IDebugSymbols5*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_string_wide(this : IDebugSymbols5*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt16*, buffer_size : UInt32, string_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffer_size, string_size)
    end
    def get_source_entry_offset_regions(this : IDebugSymbols5*, entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : Win32cr::System::Diagnostics::Debug::DEBUG_OFFSET_REGION*, regions_count : UInt32, regions_avail : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regions_count, regions_avail)
    end
    def get_source_entry_by_source_entry(this : IDebugSymbols5*, from_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, to_entry : Win32cr::System::Diagnostics::Debug::DEBUG_SYMBOL_SOURCE_ENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_entry_by_source_entry.call(this, from_entry, flags, to_entry)
    end
    def get_scope_ex(this : IDebugSymbols5*, instruction_offset : UInt64*, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_ex.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def set_scope_ex(this : IDebugSymbols5*, instruction_offset : UInt64, scope_frame : Win32cr::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, scope_context : Void*, scope_context_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_ex.call(this, instruction_offset, scope_frame, scope_context, scope_context_size)
    end
    def get_name_by_inline_context(this : IDebugSymbols5*, offset : UInt64, inline_context : UInt32, name_buffer : UInt8*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_inline_context.call(this, offset, inline_context, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_name_by_inline_context_wide(this : IDebugSymbols5*, offset : UInt64, inline_context : UInt32, name_buffer : UInt16*, name_buffer_size : UInt32, name_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_by_inline_context_wide.call(this, offset, inline_context, name_buffer, name_buffer_size, name_size, displacement)
    end
    def get_line_by_inline_context(this : IDebugSymbols5*, offset : UInt64, inline_context : UInt32, line : UInt32*, file_buffer : UInt8*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_inline_context.call(this, offset, inline_context, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def get_line_by_inline_context_wide(this : IDebugSymbols5*, offset : UInt64, inline_context : UInt32, line : UInt32*, file_buffer : UInt16*, file_buffer_size : UInt32, file_size : UInt32*, displacement : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_by_inline_context_wide.call(this, offset, inline_context, line, file_buffer, file_buffer_size, file_size, displacement)
    end
    def output_symbol_by_inline_context(this : IDebugSymbols5*, output_control : UInt32, flags : UInt32, offset : UInt64, inline_context : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.output_symbol_by_inline_context.call(this, output_control, flags, offset, inline_context)
    end
    def get_current_scope_frame_index_ex(this : IDebugSymbols5*, flags : UInt32, index : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_scope_frame_index_ex.call(this, flags, index)
    end
    def set_scope_frame_by_index_ex(this : IDebugSymbols5*, flags : UInt32, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_frame_by_index_ex.call(this, flags, index)
    end

  end

  @[Extern]
  record IDebugSystemObjectsVtbl,
    query_interface : Proc(IDebugSystemObjects*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSystemObjects*, UInt32),
    release : Proc(IDebugSystemObjects*, UInt32),
    get_event_thread : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_process : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_id : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_thread_id : Proc(IDebugSystemObjects*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_process_id : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_process_id : Proc(IDebugSystemObjects*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_threads : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads : Proc(IDebugSystemObjects*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_ids_by_index : Proc(IDebugSystemObjects*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_processor : Proc(IDebugSystemObjects*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_data_offset : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_teb : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_teb : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_system_id : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_system_id : Proc(IDebugSystemObjects*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_handle : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_handle : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processes : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_ids_by_index : Proc(IDebugSystemObjects*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_data_offset : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_data_offset : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_peb : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_peb : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_system_id : Proc(IDebugSystemObjects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_id_by_system_id : Proc(IDebugSystemObjects*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_handle : Proc(IDebugSystemObjects*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_handle : Proc(IDebugSystemObjects*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_executable_name : Proc(IDebugSystemObjects*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSystemObjects, lpVtbl : IDebugSystemObjectsVtbl* do
    GUID = LibC::GUID.new(0x6b86fe2c_u32, 0x2c4f_u16, 0x4f0c_u16, StaticArray[0x9d_u8, 0xa2_u8, 0x17_u8, 0x43_u8, 0x11_u8, 0xac_u8, 0xc3_u8, 0x27_u8])
    def query_interface(this : IDebugSystemObjects*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSystemObjects*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSystemObjects*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_thread(this : IDebugSystemObjects*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_thread.call(this, id)
    end
    def get_event_process(this : IDebugSystemObjects*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_process.call(this, id)
    end
    def get_current_thread_id(this : IDebugSystemObjects*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_id.call(this, id)
    end
    def set_current_thread_id(this : IDebugSystemObjects*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_thread_id.call(this, id)
    end
    def get_current_process_id(this : IDebugSystemObjects*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_id.call(this, id)
    end
    def set_current_process_id(this : IDebugSystemObjects*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_process_id.call(this, id)
    end
    def get_number_threads(this : IDebugSystemObjects*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_threads.call(this, number)
    end
    def get_total_number_threads(this : IDebugSystemObjects*, total : UInt32*, largest_process : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads.call(this, total, largest_process)
    end
    def get_thread_ids_by_index(this : IDebugSystemObjects*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_thread_id_by_processor(this : IDebugSystemObjects*, processor : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_processor.call(this, processor, id)
    end
    def get_current_thread_data_offset(this : IDebugSystemObjects*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_data_offset.call(this, offset)
    end
    def get_thread_id_by_data_offset(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_data_offset.call(this, offset, id)
    end
    def get_current_thread_teb(this : IDebugSystemObjects*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_teb.call(this, offset)
    end
    def get_thread_id_by_teb(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_teb.call(this, offset, id)
    end
    def get_current_thread_system_id(this : IDebugSystemObjects*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_system_id.call(this, sys_id)
    end
    def get_thread_id_by_system_id(this : IDebugSystemObjects*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_thread_handle(this : IDebugSystemObjects*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_handle.call(this, handle)
    end
    def get_thread_id_by_handle(this : IDebugSystemObjects*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_handle.call(this, handle, id)
    end
    def get_number_processes(this : IDebugSystemObjects*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processes.call(this, number)
    end
    def get_process_ids_by_index(this : IDebugSystemObjects*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_current_process_data_offset(this : IDebugSystemObjects*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_data_offset.call(this, offset)
    end
    def get_process_id_by_data_offset(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_data_offset.call(this, offset, id)
    end
    def get_current_process_peb(this : IDebugSystemObjects*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_peb.call(this, offset)
    end
    def get_process_id_by_peb(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_peb.call(this, offset, id)
    end
    def get_current_process_system_id(this : IDebugSystemObjects*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_system_id.call(this, sys_id)
    end
    def get_process_id_by_system_id(this : IDebugSystemObjects*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_process_handle(this : IDebugSystemObjects*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_handle.call(this, handle)
    end
    def get_process_id_by_handle(this : IDebugSystemObjects*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_handle.call(this, handle, id)
    end
    def get_current_process_executable_name(this : IDebugSystemObjects*, buffer : UInt8*, buffer_size : UInt32, exe_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_executable_name.call(this, buffer, buffer_size, exe_size)
    end

  end

  @[Extern]
  record IDebugSystemObjects2Vtbl,
    query_interface : Proc(IDebugSystemObjects2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSystemObjects2*, UInt32),
    release : Proc(IDebugSystemObjects2*, UInt32),
    get_event_thread : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_process : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_id : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_thread_id : Proc(IDebugSystemObjects2*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_process_id : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_process_id : Proc(IDebugSystemObjects2*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_threads : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads : Proc(IDebugSystemObjects2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_ids_by_index : Proc(IDebugSystemObjects2*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_processor : Proc(IDebugSystemObjects2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_teb : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_teb : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_system_id : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_system_id : Proc(IDebugSystemObjects2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_handle : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_handle : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processes : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_ids_by_index : Proc(IDebugSystemObjects2*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_data_offset : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_data_offset : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_peb : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_peb : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_system_id : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_id_by_system_id : Proc(IDebugSystemObjects2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_handle : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_handle : Proc(IDebugSystemObjects2*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_executable_name : Proc(IDebugSystemObjects2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_up_time : Proc(IDebugSystemObjects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64, Win32cr::Foundation::HRESULT),
    get_implicit_process_data_offset : Proc(IDebugSystemObjects2*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_process_data_offset : Proc(IDebugSystemObjects2*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSystemObjects2, lpVtbl : IDebugSystemObjects2Vtbl* do
    GUID = LibC::GUID.new(0xae9f5ff_u32, 0x1852_u16, 0x4679_u16, StaticArray[0xb0_u8, 0x55_u8, 0x49_u8, 0x4b_u8, 0xee_u8, 0x64_u8, 0x7_u8, 0xee_u8])
    def query_interface(this : IDebugSystemObjects2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSystemObjects2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSystemObjects2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_thread(this : IDebugSystemObjects2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_thread.call(this, id)
    end
    def get_event_process(this : IDebugSystemObjects2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_process.call(this, id)
    end
    def get_current_thread_id(this : IDebugSystemObjects2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_id.call(this, id)
    end
    def set_current_thread_id(this : IDebugSystemObjects2*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_thread_id.call(this, id)
    end
    def get_current_process_id(this : IDebugSystemObjects2*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_id.call(this, id)
    end
    def set_current_process_id(this : IDebugSystemObjects2*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_process_id.call(this, id)
    end
    def get_number_threads(this : IDebugSystemObjects2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_threads.call(this, number)
    end
    def get_total_number_threads(this : IDebugSystemObjects2*, total : UInt32*, largest_process : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads.call(this, total, largest_process)
    end
    def get_thread_ids_by_index(this : IDebugSystemObjects2*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_thread_id_by_processor(this : IDebugSystemObjects2*, processor : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_processor.call(this, processor, id)
    end
    def get_current_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_data_offset.call(this, offset)
    end
    def get_thread_id_by_data_offset(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_data_offset.call(this, offset, id)
    end
    def get_current_thread_teb(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_teb.call(this, offset)
    end
    def get_thread_id_by_teb(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_teb.call(this, offset, id)
    end
    def get_current_thread_system_id(this : IDebugSystemObjects2*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_system_id.call(this, sys_id)
    end
    def get_thread_id_by_system_id(this : IDebugSystemObjects2*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_thread_handle(this : IDebugSystemObjects2*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_handle.call(this, handle)
    end
    def get_thread_id_by_handle(this : IDebugSystemObjects2*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_handle.call(this, handle, id)
    end
    def get_number_processes(this : IDebugSystemObjects2*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processes.call(this, number)
    end
    def get_process_ids_by_index(this : IDebugSystemObjects2*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_current_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_data_offset.call(this, offset)
    end
    def get_process_id_by_data_offset(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_data_offset.call(this, offset, id)
    end
    def get_current_process_peb(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_peb.call(this, offset)
    end
    def get_process_id_by_peb(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_peb.call(this, offset, id)
    end
    def get_current_process_system_id(this : IDebugSystemObjects2*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_system_id.call(this, sys_id)
    end
    def get_process_id_by_system_id(this : IDebugSystemObjects2*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_process_handle(this : IDebugSystemObjects2*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_handle.call(this, handle)
    end
    def get_process_id_by_handle(this : IDebugSystemObjects2*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_handle.call(this, handle, id)
    end
    def get_current_process_executable_name(this : IDebugSystemObjects2*, buffer : UInt8*, buffer_size : UInt32, exe_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_executable_name.call(this, buffer, buffer_size, exe_size)
    end
    def get_current_process_up_time(this : IDebugSystemObjects2*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_up_time.call(this, up_time)
    end
    def get_implicit_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_thread_data_offset.call(this, offset)
    end
    def set_implicit_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_thread_data_offset.call(this, offset)
    end
    def get_implicit_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_process_data_offset.call(this, offset)
    end
    def set_implicit_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_process_data_offset.call(this, offset)
    end

  end

  @[Extern]
  record IDebugSystemObjects3Vtbl,
    query_interface : Proc(IDebugSystemObjects3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSystemObjects3*, UInt32),
    release : Proc(IDebugSystemObjects3*, UInt32),
    get_event_thread : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_process : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_id : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_thread_id : Proc(IDebugSystemObjects3*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_process_id : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_process_id : Proc(IDebugSystemObjects3*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_threads : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads : Proc(IDebugSystemObjects3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_processor : Proc(IDebugSystemObjects3*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_teb : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_teb : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_system_id : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_system_id : Proc(IDebugSystemObjects3*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_handle : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_handle : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processes : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_data_offset : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_data_offset : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_peb : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_peb : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_system_id : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_id_by_system_id : Proc(IDebugSystemObjects3*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_handle : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_handle : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_executable_name : Proc(IDebugSystemObjects3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_up_time : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64, Win32cr::Foundation::HRESULT),
    get_implicit_process_data_offset : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_process_data_offset : Proc(IDebugSystemObjects3*, UInt64, Win32cr::Foundation::HRESULT),
    get_event_system : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_id : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_system_id : Proc(IDebugSystemObjects3*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_systems : Proc(IDebugSystemObjects3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads_and_processes : Proc(IDebugSystemObjects3*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_server : Proc(IDebugSystemObjects3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_system_by_server : Proc(IDebugSystemObjects3*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_server_name : Proc(IDebugSystemObjects3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSystemObjects3, lpVtbl : IDebugSystemObjects3Vtbl* do
    GUID = LibC::GUID.new(0xe9676e2f_u32, 0xe286_u16, 0x4ea3_u16, StaticArray[0xb0_u8, 0xf9_u8, 0xdf_u8, 0xe5_u8, 0xd9_u8, 0xfc_u8, 0x33_u8, 0xe_u8])
    def query_interface(this : IDebugSystemObjects3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSystemObjects3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSystemObjects3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_thread(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_thread.call(this, id)
    end
    def get_event_process(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_process.call(this, id)
    end
    def get_current_thread_id(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_id.call(this, id)
    end
    def set_current_thread_id(this : IDebugSystemObjects3*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_thread_id.call(this, id)
    end
    def get_current_process_id(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_id.call(this, id)
    end
    def set_current_process_id(this : IDebugSystemObjects3*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_process_id.call(this, id)
    end
    def get_number_threads(this : IDebugSystemObjects3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_threads.call(this, number)
    end
    def get_total_number_threads(this : IDebugSystemObjects3*, total : UInt32*, largest_process : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads.call(this, total, largest_process)
    end
    def get_thread_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_thread_id_by_processor(this : IDebugSystemObjects3*, processor : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_processor.call(this, processor, id)
    end
    def get_current_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_data_offset.call(this, offset)
    end
    def get_thread_id_by_data_offset(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_data_offset.call(this, offset, id)
    end
    def get_current_thread_teb(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_teb.call(this, offset)
    end
    def get_thread_id_by_teb(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_teb.call(this, offset, id)
    end
    def get_current_thread_system_id(this : IDebugSystemObjects3*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_system_id.call(this, sys_id)
    end
    def get_thread_id_by_system_id(this : IDebugSystemObjects3*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_thread_handle(this : IDebugSystemObjects3*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_handle.call(this, handle)
    end
    def get_thread_id_by_handle(this : IDebugSystemObjects3*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_handle.call(this, handle, id)
    end
    def get_number_processes(this : IDebugSystemObjects3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processes.call(this, number)
    end
    def get_process_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_current_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_data_offset.call(this, offset)
    end
    def get_process_id_by_data_offset(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_data_offset.call(this, offset, id)
    end
    def get_current_process_peb(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_peb.call(this, offset)
    end
    def get_process_id_by_peb(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_peb.call(this, offset, id)
    end
    def get_current_process_system_id(this : IDebugSystemObjects3*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_system_id.call(this, sys_id)
    end
    def get_process_id_by_system_id(this : IDebugSystemObjects3*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_process_handle(this : IDebugSystemObjects3*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_handle.call(this, handle)
    end
    def get_process_id_by_handle(this : IDebugSystemObjects3*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_handle.call(this, handle, id)
    end
    def get_current_process_executable_name(this : IDebugSystemObjects3*, buffer : UInt8*, buffer_size : UInt32, exe_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_executable_name.call(this, buffer, buffer_size, exe_size)
    end
    def get_current_process_up_time(this : IDebugSystemObjects3*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_up_time.call(this, up_time)
    end
    def get_implicit_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_thread_data_offset.call(this, offset)
    end
    def set_implicit_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_thread_data_offset.call(this, offset)
    end
    def get_implicit_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_process_data_offset.call(this, offset)
    end
    def set_implicit_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_process_data_offset.call(this, offset)
    end
    def get_event_system(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_system.call(this, id)
    end
    def get_current_system_id(this : IDebugSystemObjects3*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_id.call(this, id)
    end
    def set_current_system_id(this : IDebugSystemObjects3*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_system_id.call(this, id)
    end
    def get_number_systems(this : IDebugSystemObjects3*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_systems.call(this, number)
    end
    def get_system_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_ids_by_index.call(this, start, count, ids)
    end
    def get_total_number_threads_and_processes(this : IDebugSystemObjects3*, total_threads : UInt32*, total_processes : UInt32*, largest_process_threads : UInt32*, largest_system_threads : UInt32*, largest_system_processes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads_and_processes.call(this, total_threads, total_processes, largest_process_threads, largest_system_threads, largest_system_processes)
    end
    def get_current_system_server(this : IDebugSystemObjects3*, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_server.call(this, server)
    end
    def get_system_by_server(this : IDebugSystemObjects3*, server : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_by_server.call(this, server, id)
    end
    def get_current_system_server_name(this : IDebugSystemObjects3*, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_server_name.call(this, buffer, buffer_size, name_size)
    end

  end

  @[Extern]
  record IDebugSystemObjects4Vtbl,
    query_interface : Proc(IDebugSystemObjects4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSystemObjects4*, UInt32),
    release : Proc(IDebugSystemObjects4*, UInt32),
    get_event_thread : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_process : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_id : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_thread_id : Proc(IDebugSystemObjects4*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_process_id : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_process_id : Proc(IDebugSystemObjects4*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_threads : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads : Proc(IDebugSystemObjects4*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_processor : Proc(IDebugSystemObjects4*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_teb : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_teb : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_system_id : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_system_id : Proc(IDebugSystemObjects4*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_thread_handle : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_thread_id_by_handle : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_processes : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_data_offset : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_data_offset : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_peb : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_peb : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_system_id : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_id_by_system_id : Proc(IDebugSystemObjects4*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_handle : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_process_id_by_handle : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_executable_name : Proc(IDebugSystemObjects4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_up_time : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64, Win32cr::Foundation::HRESULT),
    get_implicit_process_data_offset : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    set_implicit_process_data_offset : Proc(IDebugSystemObjects4*, UInt64, Win32cr::Foundation::HRESULT),
    get_event_system : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_id : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_system_id : Proc(IDebugSystemObjects4*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_systems : Proc(IDebugSystemObjects4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_system_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_total_number_threads_and_processes : Proc(IDebugSystemObjects4*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_server : Proc(IDebugSystemObjects4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_system_by_server : Proc(IDebugSystemObjects4*, UInt64, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_server_name : Proc(IDebugSystemObjects4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_process_executable_name_wide : Proc(IDebugSystemObjects4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_system_server_name_wide : Proc(IDebugSystemObjects4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSystemObjects4, lpVtbl : IDebugSystemObjects4Vtbl* do
    GUID = LibC::GUID.new(0x489468e6_u32, 0x7d0f_u16, 0x4af5_u16, StaticArray[0x87_u8, 0xab_u8, 0x25_u8, 0x20_u8, 0x74_u8, 0x54_u8, 0xd5_u8, 0x53_u8])
    def query_interface(this : IDebugSystemObjects4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSystemObjects4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSystemObjects4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_thread(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_thread.call(this, id)
    end
    def get_event_process(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_process.call(this, id)
    end
    def get_current_thread_id(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_id.call(this, id)
    end
    def set_current_thread_id(this : IDebugSystemObjects4*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_thread_id.call(this, id)
    end
    def get_current_process_id(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_id.call(this, id)
    end
    def set_current_process_id(this : IDebugSystemObjects4*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_process_id.call(this, id)
    end
    def get_number_threads(this : IDebugSystemObjects4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_threads.call(this, number)
    end
    def get_total_number_threads(this : IDebugSystemObjects4*, total : UInt32*, largest_process : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads.call(this, total, largest_process)
    end
    def get_thread_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_thread_id_by_processor(this : IDebugSystemObjects4*, processor : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_processor.call(this, processor, id)
    end
    def get_current_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_data_offset.call(this, offset)
    end
    def get_thread_id_by_data_offset(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_data_offset.call(this, offset, id)
    end
    def get_current_thread_teb(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_teb.call(this, offset)
    end
    def get_thread_id_by_teb(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_teb.call(this, offset, id)
    end
    def get_current_thread_system_id(this : IDebugSystemObjects4*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_system_id.call(this, sys_id)
    end
    def get_thread_id_by_system_id(this : IDebugSystemObjects4*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_thread_handle(this : IDebugSystemObjects4*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread_handle.call(this, handle)
    end
    def get_thread_id_by_handle(this : IDebugSystemObjects4*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_id_by_handle.call(this, handle, id)
    end
    def get_number_processes(this : IDebugSystemObjects4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_processes.call(this, number)
    end
    def get_process_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*, sys_ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_ids_by_index.call(this, start, count, ids, sys_ids)
    end
    def get_current_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_data_offset.call(this, offset)
    end
    def get_process_id_by_data_offset(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_data_offset.call(this, offset, id)
    end
    def get_current_process_peb(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_peb.call(this, offset)
    end
    def get_process_id_by_peb(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_peb.call(this, offset, id)
    end
    def get_current_process_system_id(this : IDebugSystemObjects4*, sys_id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_system_id.call(this, sys_id)
    end
    def get_process_id_by_system_id(this : IDebugSystemObjects4*, sys_id : UInt32, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_system_id.call(this, sys_id, id)
    end
    def get_current_process_handle(this : IDebugSystemObjects4*, handle : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_handle.call(this, handle)
    end
    def get_process_id_by_handle(this : IDebugSystemObjects4*, handle : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id_by_handle.call(this, handle, id)
    end
    def get_current_process_executable_name(this : IDebugSystemObjects4*, buffer : UInt8*, buffer_size : UInt32, exe_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_executable_name.call(this, buffer, buffer_size, exe_size)
    end
    def get_current_process_up_time(this : IDebugSystemObjects4*, up_time : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_up_time.call(this, up_time)
    end
    def get_implicit_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_thread_data_offset.call(this, offset)
    end
    def set_implicit_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_thread_data_offset.call(this, offset)
    end
    def get_implicit_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implicit_process_data_offset.call(this, offset)
    end
    def set_implicit_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_implicit_process_data_offset.call(this, offset)
    end
    def get_event_system(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_system.call(this, id)
    end
    def get_current_system_id(this : IDebugSystemObjects4*, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_id.call(this, id)
    end
    def set_current_system_id(this : IDebugSystemObjects4*, id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_system_id.call(this, id)
    end
    def get_number_systems(this : IDebugSystemObjects4*, number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_systems.call(this, number)
    end
    def get_system_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_ids_by_index.call(this, start, count, ids)
    end
    def get_total_number_threads_and_processes(this : IDebugSystemObjects4*, total_threads : UInt32*, total_processes : UInt32*, largest_process_threads : UInt32*, largest_system_threads : UInt32*, largest_system_processes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_number_threads_and_processes.call(this, total_threads, total_processes, largest_process_threads, largest_system_threads, largest_system_processes)
    end
    def get_current_system_server(this : IDebugSystemObjects4*, server : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_server.call(this, server)
    end
    def get_system_by_server(this : IDebugSystemObjects4*, server : UInt64, id : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_by_server.call(this, server, id)
    end
    def get_current_system_server_name(this : IDebugSystemObjects4*, buffer : UInt8*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_server_name.call(this, buffer, buffer_size, name_size)
    end
    def get_current_process_executable_name_wide(this : IDebugSystemObjects4*, buffer : UInt16*, buffer_size : UInt32, exe_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_process_executable_name_wide.call(this, buffer, buffer_size, exe_size)
    end
    def get_current_system_server_name_wide(this : IDebugSystemObjects4*, buffer : UInt16*, buffer_size : UInt32, name_size : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_system_server_name_wide.call(this, buffer, buffer_size, name_size)
    end

  end

  @[Extern]
  record DebugBaseEventCallbacksVtbl,
    query_interface : Proc(DebugBaseEventCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DebugBaseEventCallbacks*, UInt32),
    release : Proc(DebugBaseEventCallbacks*, UInt32),
    get_interest_mask : Proc(DebugBaseEventCallbacks*, UInt32*, Win32cr::Foundation::HRESULT),
    breakpoint : Proc(DebugBaseEventCallbacks*, Void*, Win32cr::Foundation::HRESULT),
    exception : Proc(DebugBaseEventCallbacks*, Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, UInt32, Win32cr::Foundation::HRESULT),
    create_thread : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_thread : Proc(DebugBaseEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_process : Proc(DebugBaseEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    load_module : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    unload_module : Proc(DebugBaseEventCallbacks*, Win32cr::Foundation::PSTR, UInt64, Win32cr::Foundation::HRESULT),
    system_error : Proc(DebugBaseEventCallbacks*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    session_status : Proc(DebugBaseEventCallbacks*, UInt32, Win32cr::Foundation::HRESULT),
    change_debuggee_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_engine_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_symbol_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DebugBaseEventCallbacks, lpVtbl : DebugBaseEventCallbacksVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : DebugBaseEventCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DebugBaseEventCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DebugBaseEventCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interest_mask(this : DebugBaseEventCallbacks*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def breakpoint(this : DebugBaseEventCallbacks*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.breakpoint.call(this, bp)
    end
    def exception(this : DebugBaseEventCallbacks*, exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, first_chance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exception.call(this, exception, first_chance)
    end
    def create_thread(this : DebugBaseEventCallbacks*, handle : UInt64, data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_thread.call(this, handle, data_offset, start_offset)
    end
    def exit_thread(this : DebugBaseEventCallbacks*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_thread.call(this, exit_code)
    end
    def create_process_a(this : DebugBaseEventCallbacks*, image_file_handle : UInt64, handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PSTR, image_name : Win32cr::Foundation::PSTR, check_sum : UInt32, time_date_stamp : UInt32, initial_thread_handle : UInt64, thread_data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, image_file_handle, handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, initial_thread_handle, thread_data_offset, start_offset)
    end
    def exit_process(this : DebugBaseEventCallbacks*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_process.call(this, exit_code)
    end
    def load_module(this : DebugBaseEventCallbacks*, image_file_handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PSTR, image_name : Win32cr::Foundation::PSTR, check_sum : UInt32, time_date_stamp : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_module.call(this, image_file_handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp)
    end
    def unload_module(this : DebugBaseEventCallbacks*, image_base_name : Win32cr::Foundation::PSTR, base_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unload_module.call(this, image_base_name, base_offset)
    end
    def system_error(this : DebugBaseEventCallbacks*, error : UInt32, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.system_error.call(this, error, level)
    end
    def session_status(this : DebugBaseEventCallbacks*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_status.call(this, status)
    end
    def change_debuggee_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_debuggee_state.call(this, flags, argument)
    end
    def change_engine_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_engine_state.call(this, flags, argument)
    end
    def change_symbol_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_symbol_state.call(this, flags, argument)
    end

  end

  @[Extern]
  record DebugBaseEventCallbacksWideVtbl,
    query_interface : Proc(DebugBaseEventCallbacksWide*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DebugBaseEventCallbacksWide*, UInt32),
    release : Proc(DebugBaseEventCallbacksWide*, UInt32),
    get_interest_mask : Proc(DebugBaseEventCallbacksWide*, UInt32*, Win32cr::Foundation::HRESULT),
    breakpoint : Proc(DebugBaseEventCallbacksWide*, Void*, Win32cr::Foundation::HRESULT),
    exception : Proc(DebugBaseEventCallbacksWide*, Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, UInt32, Win32cr::Foundation::HRESULT),
    create_thread : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_thread : Proc(DebugBaseEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    create_process_a : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    exit_process : Proc(DebugBaseEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    load_module : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    unload_module : Proc(DebugBaseEventCallbacksWide*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    system_error : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    session_status : Proc(DebugBaseEventCallbacksWide*, UInt32, Win32cr::Foundation::HRESULT),
    change_debuggee_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_engine_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT),
    change_symbol_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DebugBaseEventCallbacksWide, lpVtbl : DebugBaseEventCallbacksWideVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : DebugBaseEventCallbacksWide*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DebugBaseEventCallbacksWide*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DebugBaseEventCallbacksWide*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interest_mask(this : DebugBaseEventCallbacksWide*, mask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interest_mask.call(this, mask)
    end
    def breakpoint(this : DebugBaseEventCallbacksWide*, bp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.breakpoint.call(this, bp)
    end
    def exception(this : DebugBaseEventCallbacksWide*, exception : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD64*, first_chance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exception.call(this, exception, first_chance)
    end
    def create_thread(this : DebugBaseEventCallbacksWide*, handle : UInt64, data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_thread.call(this, handle, data_offset, start_offset)
    end
    def exit_thread(this : DebugBaseEventCallbacksWide*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_thread.call(this, exit_code)
    end
    def create_process_a(this : DebugBaseEventCallbacksWide*, image_file_handle : UInt64, handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32, initial_thread_handle : UInt64, thread_data_offset : UInt64, start_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_process_a.call(this, image_file_handle, handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp, initial_thread_handle, thread_data_offset, start_offset)
    end
    def exit_process(this : DebugBaseEventCallbacksWide*, exit_code : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exit_process.call(this, exit_code)
    end
    def load_module(this : DebugBaseEventCallbacksWide*, image_file_handle : UInt64, base_offset : UInt64, module_size : UInt32, module_name : Win32cr::Foundation::PWSTR, image_name : Win32cr::Foundation::PWSTR, check_sum : UInt32, time_date_stamp : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_module.call(this, image_file_handle, base_offset, module_size, module_name, image_name, check_sum, time_date_stamp)
    end
    def unload_module(this : DebugBaseEventCallbacksWide*, image_base_name : Win32cr::Foundation::PWSTR, base_offset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unload_module.call(this, image_base_name, base_offset)
    end
    def system_error(this : DebugBaseEventCallbacksWide*, error : UInt32, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.system_error.call(this, error, level)
    end
    def session_status(this : DebugBaseEventCallbacksWide*, status : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_status.call(this, status)
    end
    def change_debuggee_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_debuggee_state.call(this, flags, argument)
    end
    def change_engine_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_engine_state.call(this, flags, argument)
    end
    def change_symbol_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_symbol_state.call(this, flags, argument)
    end

  end

  @[Extern]
  record IHostDataModelAccessVtbl,
    query_interface : Proc(IHostDataModelAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IHostDataModelAccess*, UInt32),
    release : Proc(IHostDataModelAccess*, UInt32),
    get_data_model : Proc(IHostDataModelAccess*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IHostDataModelAccess, lpVtbl : IHostDataModelAccessVtbl* do
    GUID = LibC::GUID.new(0xf2bce54e_u32, 0x4835_u16, 0x4f8a_u16, StaticArray[0x83_u8, 0x6e_u8, 0x79_u8, 0x81_u8, 0xe2_u8, 0x99_u8, 0x4_u8, 0xd1_u8])
    def query_interface(this : IHostDataModelAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IHostDataModelAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IHostDataModelAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data_model(this : IHostDataModelAccess*, manager : Void**, host : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_model.call(this, manager, host)
    end

  end

  @[Extern]
  record IKeyStoreVtbl,
    query_interface : Proc(IKeyStore*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IKeyStore*, UInt32),
    release : Proc(IKeyStore*, UInt32),
    get_key : Proc(IKeyStore*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key : Proc(IKeyStore*, Win32cr::Foundation::PWSTR, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_key_value : Proc(IKeyStore*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key_value : Proc(IKeyStore*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    clear_keys : Proc(IKeyStore*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IKeyStore, lpVtbl : IKeyStoreVtbl* do
    GUID = LibC::GUID.new(0xfc7557d_u32, 0x401d_u16, 0x4fca_u16, StaticArray[0x93_u8, 0x65_u8, 0xda_u8, 0x1e_u8, 0x98_u8, 0x50_u8, 0x69_u8, 0x7c_u8])
    def query_interface(this : IKeyStore*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IKeyStore*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IKeyStore*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_key(this : IKeyStore*, key : Win32cr::Foundation::PWSTR, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key.call(this, key, object, metadata)
    end
    def set_key(this : IKeyStore*, key : Win32cr::Foundation::PWSTR, object : Void*, metadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key.call(this, key, object, metadata)
    end
    def get_key_value(this : IKeyStore*, key : Win32cr::Foundation::PWSTR, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_value.call(this, key, object, metadata)
    end
    def set_key_value(this : IKeyStore*, key : Win32cr::Foundation::PWSTR, object : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key_value.call(this, key, object)
    end
    def clear_keys(this : IKeyStore*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_keys.call(this)
    end

  end

  @[Extern]
  record IModelObjectVtbl,
    query_interface : Proc(IModelObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelObject*, UInt32),
    release : Proc(IModelObject*, UInt32),
    get_context : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    get_kind : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::ModelObjectKind*, Win32cr::Foundation::HRESULT),
    get_intrinsic_value : Proc(IModelObject*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_intrinsic_value_as : Proc(IModelObject*, UInt16, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_key_value : Proc(IModelObject*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key_value : Proc(IModelObject*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    enumerate_key_values : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    enumerate_raw_values : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::SymbolKind, UInt32, Void**, Win32cr::Foundation::HRESULT),
    dereference : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    try_cast_to_runtime_type : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    get_concept : Proc(IModelObject*, LibC::GUID*, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_location : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    get_target_info : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::Location*, Void**, Win32cr::Foundation::HRESULT),
    get_number_of_parent_models : Proc(IModelObject*, UInt64*, Win32cr::Foundation::HRESULT),
    get_parent_model : Proc(IModelObject*, UInt64, Void**, Void**, Win32cr::Foundation::HRESULT),
    add_parent_model : Proc(IModelObject*, Void*, Void*, UInt8, Win32cr::Foundation::HRESULT),
    remove_parent_model : Proc(IModelObject*, Void*, Win32cr::Foundation::HRESULT),
    get_key : Proc(IModelObject*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_key_reference : Proc(IModelObject*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key : Proc(IModelObject*, Win32cr::Foundation::PWSTR, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_keys : Proc(IModelObject*, Win32cr::Foundation::HRESULT),
    enumerate_keys : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_key_references : Proc(IModelObject*, Void**, Win32cr::Foundation::HRESULT),
    set_concept : Proc(IModelObject*, LibC::GUID*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_concepts : Proc(IModelObject*, Win32cr::Foundation::HRESULT),
    get_raw_reference : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    enumerate_raw_references : Proc(IModelObject*, Win32cr::System::Diagnostics::Debug::SymbolKind, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_context_for_data_model : Proc(IModelObject*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_context_for_data_model : Proc(IModelObject*, Void*, Void**, Win32cr::Foundation::HRESULT),
    compare : Proc(IModelObject*, Void*, Void**, Win32cr::Foundation::HRESULT),
    is_equal_to : Proc(IModelObject*, Void*, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelObject, lpVtbl : IModelObjectVtbl* do
    GUID = LibC::GUID.new(0xe28c7893_u32, 0x3f4b_u16, 0x4b96_u16, StaticArray[0xba_u8, 0xca_u8, 0x29_u8, 0x3c_u8, 0xdc_u8, 0x55_u8, 0xf4_u8, 0x5d_u8])
    def query_interface(this : IModelObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IModelObject*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def get_kind(this : IModelObject*, kind : Win32cr::System::Diagnostics::Debug::ModelObjectKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_kind.call(this, kind)
    end
    def get_intrinsic_value(this : IModelObject*, intrinsicData : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_value.call(this, intrinsicData)
    end
    def get_intrinsic_value_as(this : IModelObject*, vt : UInt16, intrinsicData : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_value_as.call(this, vt, intrinsicData)
    end
    def get_key_value(this : IModelObject*, key : Win32cr::Foundation::PWSTR, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_value.call(this, key, object, metadata)
    end
    def set_key_value(this : IModelObject*, key : Win32cr::Foundation::PWSTR, object : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key_value.call(this, key, object)
    end
    def enumerate_key_values(this : IModelObject*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_key_values.call(this, enumerator)
    end
    def get_raw_value(this : IModelObject*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, searchFlags : UInt32, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, kind, name, searchFlags, object)
    end
    def enumerate_raw_values(this : IModelObject*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, searchFlags : UInt32, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_raw_values.call(this, kind, searchFlags, enumerator)
    end
    def dereference(this : IModelObject*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dereference.call(this, object)
    end
    def try_cast_to_runtime_type(this : IModelObject*, runtimeTypedObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.try_cast_to_runtime_type.call(this, runtimeTypedObject)
    end
    def get_concept(this : IModelObject*, conceptId : LibC::GUID*, conceptInterface : Void**, conceptMetadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_concept.call(this, conceptId, conceptInterface, conceptMetadata)
    end
    def get_location(this : IModelObject*, location : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location.call(this, location)
    end
    def get_type_info(this : IModelObject*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, type__)
    end
    def get_target_info(this : IModelObject*, location : Win32cr::System::Diagnostics::Debug::Location*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_target_info.call(this, location, type__)
    end
    def get_number_of_parent_models(this : IModelObject*, numModels : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_parent_models.call(this, numModels)
    end
    def get_parent_model(this : IModelObject*, i : UInt64, model : Void**, contextObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent_model.call(this, i, model, contextObject)
    end
    def add_parent_model(this : IModelObject*, model : Void*, contextObject : Void*, override : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_parent_model.call(this, model, contextObject, override)
    end
    def remove_parent_model(this : IModelObject*, model : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_parent_model.call(this, model)
    end
    def get_key(this : IModelObject*, key : Win32cr::Foundation::PWSTR, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key.call(this, key, object, metadata)
    end
    def get_key_reference(this : IModelObject*, key : Win32cr::Foundation::PWSTR, objectReference : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_reference.call(this, key, objectReference, metadata)
    end
    def set_key(this : IModelObject*, key : Win32cr::Foundation::PWSTR, object : Void*, metadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key.call(this, key, object, metadata)
    end
    def clear_keys(this : IModelObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_keys.call(this)
    end
    def enumerate_keys(this : IModelObject*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_keys.call(this, enumerator)
    end
    def enumerate_key_references(this : IModelObject*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_key_references.call(this, enumerator)
    end
    def set_concept(this : IModelObject*, conceptId : LibC::GUID*, conceptInterface : Void*, conceptMetadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_concept.call(this, conceptId, conceptInterface, conceptMetadata)
    end
    def clear_concepts(this : IModelObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_concepts.call(this)
    end
    def get_raw_reference(this : IModelObject*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, searchFlags : UInt32, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_reference.call(this, kind, name, searchFlags, object)
    end
    def enumerate_raw_references(this : IModelObject*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, searchFlags : UInt32, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_raw_references.call(this, kind, searchFlags, enumerator)
    end
    def set_context_for_data_model(this : IModelObject*, dataModelObject : Void*, context : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_context_for_data_model.call(this, dataModelObject, context)
    end
    def get_context_for_data_model(this : IModelObject*, dataModelObject : Void*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_for_data_model.call(this, dataModelObject, context)
    end
    def compare(this : IModelObject*, other : Void*, ppResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, other, ppResult)
    end
    def is_equal_to(this : IModelObject*, other : Void*, equal : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_to.call(this, other, equal)
    end

  end

  @[Extern]
  record IDataModelManagerVtbl,
    query_interface : Proc(IDataModelManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelManager*, UInt32),
    release : Proc(IDataModelManager*, UInt32),
    close : Proc(IDataModelManager*, Win32cr::Foundation::HRESULT),
    create_no_value : Proc(IDataModelManager*, Void**, Win32cr::Foundation::HRESULT),
    create_error_object : Proc(IDataModelManager*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_typed_object : Proc(IDataModelManager*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_typed_object_reference : Proc(IDataModelManager*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_synthetic_object : Proc(IDataModelManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_data_model_object : Proc(IDataModelManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_intrinsic_object : Proc(IDataModelManager*, Win32cr::System::Diagnostics::Debug::ModelObjectKind, Win32cr::System::Com::VARIANT*, Void**, Win32cr::Foundation::HRESULT),
    create_typed_intrinsic_object : Proc(IDataModelManager*, Win32cr::System::Com::VARIANT*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_model_for_type_signature : Proc(IDataModelManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_model_for_type : Proc(IDataModelManager*, Void*, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    register_model_for_type_signature : Proc(IDataModelManager*, Void*, Void*, Win32cr::Foundation::HRESULT),
    unregister_model_for_type_signature : Proc(IDataModelManager*, Void*, Void*, Win32cr::Foundation::HRESULT),
    register_extension_for_type_signature : Proc(IDataModelManager*, Void*, Void*, Win32cr::Foundation::HRESULT),
    unregister_extension_for_type_signature : Proc(IDataModelManager*, Void*, Void*, Win32cr::Foundation::HRESULT),
    create_metadata_store : Proc(IDataModelManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_root_namespace : Proc(IDataModelManager*, Void**, Win32cr::Foundation::HRESULT),
    register_named_model : Proc(IDataModelManager*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    unregister_named_model : Proc(IDataModelManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acquire_named_model : Proc(IDataModelManager*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelManager, lpVtbl : IDataModelManagerVtbl* do
    GUID = LibC::GUID.new(0x73fe19f4_u32, 0xa110_u16, 0x4500_u16, StaticArray[0x8e_u8, 0xd9_u8, 0x3c_u8, 0x28_u8, 0x89_u8, 0x6f_u8, 0x50_u8, 0x8c_u8])
    def query_interface(this : IDataModelManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def close(this : IDataModelManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def create_no_value(this : IDataModelManager*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_no_value.call(this, object)
    end
    def create_error_object(this : IDataModelManager*, hrError : Win32cr::Foundation::HRESULT, pwszMessage : Win32cr::Foundation::PWSTR, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_error_object.call(this, hrError, pwszMessage, object)
    end
    def create_typed_object(this : IDataModelManager*, context : Void*, objectLocation : Win32cr::System::Diagnostics::Debug::Location, objectType : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_object.call(this, context, objectLocation, objectType, object)
    end
    def create_typed_object_reference(this : IDataModelManager*, context : Void*, objectLocation : Win32cr::System::Diagnostics::Debug::Location, objectType : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_object_reference.call(this, context, objectLocation, objectType, object)
    end
    def create_synthetic_object(this : IDataModelManager*, context : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_synthetic_object.call(this, context, object)
    end
    def create_data_model_object(this : IDataModelManager*, dataModel : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_data_model_object.call(this, dataModel, object)
    end
    def create_intrinsic_object(this : IDataModelManager*, objectKind : Win32cr::System::Diagnostics::Debug::ModelObjectKind, intrinsicData : Win32cr::System::Com::VARIANT*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_intrinsic_object.call(this, objectKind, intrinsicData, object)
    end
    def create_typed_intrinsic_object(this : IDataModelManager*, intrinsicData : Win32cr::System::Com::VARIANT*, type__ : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_intrinsic_object.call(this, intrinsicData, type__, object)
    end
    def get_model_for_type_signature(this : IDataModelManager*, typeSignature : Void*, dataModel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_model_for_type_signature.call(this, typeSignature, dataModel)
    end
    def get_model_for_type(this : IDataModelManager*, type__ : Void*, dataModel : Void**, typeSignature : Void**, wildcardMatches : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_model_for_type.call(this, type__, dataModel, typeSignature, wildcardMatches)
    end
    def register_model_for_type_signature(this : IDataModelManager*, typeSignature : Void*, dataModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_model_for_type_signature.call(this, typeSignature, dataModel)
    end
    def unregister_model_for_type_signature(this : IDataModelManager*, dataModel : Void*, typeSignature : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_model_for_type_signature.call(this, dataModel, typeSignature)
    end
    def register_extension_for_type_signature(this : IDataModelManager*, typeSignature : Void*, dataModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_extension_for_type_signature.call(this, typeSignature, dataModel)
    end
    def unregister_extension_for_type_signature(this : IDataModelManager*, dataModel : Void*, typeSignature : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_extension_for_type_signature.call(this, dataModel, typeSignature)
    end
    def create_metadata_store(this : IDataModelManager*, parentStore : Void*, metadataStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_metadata_store.call(this, parentStore, metadataStore)
    end
    def get_root_namespace(this : IDataModelManager*, rootNamespace : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_namespace.call(this, rootNamespace)
    end
    def register_named_model(this : IDataModelManager*, modelName : Win32cr::Foundation::PWSTR, modeObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_named_model.call(this, modelName, modeObject)
    end
    def unregister_named_model(this : IDataModelManager*, modelName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_named_model.call(this, modelName)
    end
    def acquire_named_model(this : IDataModelManager*, modelName : Win32cr::Foundation::PWSTR, modelObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acquire_named_model.call(this, modelName, modelObject)
    end

  end

  @[Extern]
  record IModelKeyReferenceVtbl,
    query_interface : Proc(IModelKeyReference*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelKeyReference*, UInt32),
    release : Proc(IModelKeyReference*, UInt32),
    get_key_name : Proc(IModelKeyReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_original_object : Proc(IModelKeyReference*, Void**, Win32cr::Foundation::HRESULT),
    get_context_object : Proc(IModelKeyReference*, Void**, Win32cr::Foundation::HRESULT),
    get_key : Proc(IModelKeyReference*, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_key_value : Proc(IModelKeyReference*, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key : Proc(IModelKeyReference*, Void*, Void*, Win32cr::Foundation::HRESULT),
    set_key_value : Proc(IModelKeyReference*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelKeyReference, lpVtbl : IModelKeyReferenceVtbl* do
    GUID = LibC::GUID.new(0x5253dcf8_u32, 0x5aff_u16, 0x4c62_u16, StaticArray[0xb3_u8, 0x2_u8, 0x56_u8, 0xa2_u8, 0x89_u8, 0xe0_u8, 0x9_u8, 0x98_u8])
    def query_interface(this : IModelKeyReference*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelKeyReference*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelKeyReference*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_key_name(this : IModelKeyReference*, keyName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_name.call(this, keyName)
    end
    def get_original_object(this : IModelKeyReference*, originalObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_object.call(this, originalObject)
    end
    def get_context_object(this : IModelKeyReference*, containingObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_object.call(this, containingObject)
    end
    def get_key(this : IModelKeyReference*, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key.call(this, object, metadata)
    end
    def get_key_value(this : IModelKeyReference*, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_value.call(this, object, metadata)
    end
    def set_key(this : IModelKeyReference*, object : Void*, metadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key.call(this, object, metadata)
    end
    def set_key_value(this : IModelKeyReference*, object : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key_value.call(this, object)
    end

  end

  @[Extern]
  record IModelPropertyAccessorVtbl,
    query_interface : Proc(IModelPropertyAccessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelPropertyAccessor*, UInt32),
    release : Proc(IModelPropertyAccessor*, UInt32),
    get_value : Proc(IModelPropertyAccessor*, Win32cr::Foundation::PWSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    set_value : Proc(IModelPropertyAccessor*, Win32cr::Foundation::PWSTR, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelPropertyAccessor, lpVtbl : IModelPropertyAccessorVtbl* do
    GUID = LibC::GUID.new(0x5a0c63d9_u32, 0x526_u16, 0x42b8_u16, StaticArray[0x96_u8, 0xc_u8, 0x95_u8, 0x16_u8, 0xa3_u8, 0x25_u8, 0x4c_u8, 0x85_u8])
    def query_interface(this : IModelPropertyAccessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelPropertyAccessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelPropertyAccessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_value(this : IModelPropertyAccessor*, key : Win32cr::Foundation::PWSTR, contextObject : Void*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, key, contextObject, value)
    end
    def set_value(this : IModelPropertyAccessor*, key : Win32cr::Foundation::PWSTR, contextObject : Void*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, key, contextObject, value)
    end

  end

  @[Extern]
  record IModelMethodVtbl,
    query_interface : Proc(IModelMethod*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelMethod*, UInt32),
    release : Proc(IModelMethod*, UInt32),
    call : Proc(IModelMethod*, Void*, UInt64, Void**, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelMethod, lpVtbl : IModelMethodVtbl* do
    GUID = LibC::GUID.new(0x80600c1f_u32, 0xb90b_u16, 0x4896_u16, StaticArray[0x82_u8, 0xad_u8, 0x1c_u8, 0x0_u8, 0x20_u8, 0x79_u8, 0x9_u8, 0xe8_u8])
    def query_interface(this : IModelMethod*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelMethod*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelMethod*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def call(this : IModelMethod*, pContextObject : Void*, argCount : UInt64, ppArguments : Void**, ppResult : Void**, ppMetadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call.call(this, pContextObject, argCount, ppArguments, ppResult, ppMetadata)
    end

  end

  @[Extern]
  record IKeyEnumeratorVtbl,
    query_interface : Proc(IKeyEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IKeyEnumerator*, UInt32),
    release : Proc(IKeyEnumerator*, UInt32),
    reset : Proc(IKeyEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IKeyEnumerator*, Win32cr::Foundation::BSTR*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IKeyEnumerator, lpVtbl : IKeyEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x345fa92e_u32, 0x5e00_u16, 0x4319_u16, StaticArray[0x9c_u8, 0xae_u8, 0x97_u8, 0x1f_u8, 0x76_u8, 0x1_u8, 0xcd_u8, 0xcf_u8])
    def query_interface(this : IKeyEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IKeyEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IKeyEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IKeyEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IKeyEnumerator*, key : Win32cr::Foundation::BSTR*, value : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, key, value, metadata)
    end

  end

  @[Extern]
  record IRawEnumeratorVtbl,
    query_interface : Proc(IRawEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRawEnumerator*, UInt32),
    release : Proc(IRawEnumerator*, UInt32),
    reset : Proc(IRawEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IRawEnumerator*, Win32cr::Foundation::BSTR*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRawEnumerator, lpVtbl : IRawEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xe13613f9_u32, 0x3a3c_u16, 0x40b5_u16, StaticArray[0x8f_u8, 0x48_u8, 0x1e_u8, 0x5e_u8, 0xbf_u8, 0xb9_u8, 0xb2_u8, 0x1b_u8])
    def query_interface(this : IRawEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRawEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRawEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IRawEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IRawEnumerator*, name : Win32cr::Foundation::BSTR*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, name, kind, value)
    end

  end

  @[Extern]
  record IDataModelConceptVtbl,
    query_interface : Proc(IDataModelConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelConcept*, UInt32),
    release : Proc(IDataModelConcept*, UInt32),
    initialize_object : Proc(IDataModelConcept*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDataModelConcept*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelConcept, lpVtbl : IDataModelConceptVtbl* do
    GUID = LibC::GUID.new(0xfcb98d1d_u32, 0x1114_u16, 0x4fbf_u16, StaticArray[0xb2_u8, 0x4c_u8, 0xef_u8, 0xfc_u8, 0xb5_u8, 0xde_u8, 0xf0_u8, 0xd3_u8])
    def query_interface(this : IDataModelConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_object(this : IDataModelConcept*, modelObject : Void*, matchingTypeSignature : Void*, wildcardMatches : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_object.call(this, modelObject, matchingTypeSignature, wildcardMatches)
    end
    def get_name(this : IDataModelConcept*, modelName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, modelName)
    end

  end

  @[Extern]
  record IStringDisplayableConceptVtbl,
    query_interface : Proc(IStringDisplayableConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStringDisplayableConcept*, UInt32),
    release : Proc(IStringDisplayableConcept*, UInt32),
    to_display_string : Proc(IStringDisplayableConcept*, Void*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IStringDisplayableConcept, lpVtbl : IStringDisplayableConceptVtbl* do
    GUID = LibC::GUID.new(0xd28e8d70_u32, 0x6c00_u16, 0x4205_u16, StaticArray[0x94_u8, 0xd_u8, 0x50_u8, 0x10_u8, 0x16_u8, 0x60_u8, 0x1e_u8, 0xa3_u8])
    def query_interface(this : IStringDisplayableConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStringDisplayableConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStringDisplayableConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def to_display_string(this : IStringDisplayableConcept*, contextObject : Void*, metadata : Void*, displayString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.to_display_string.call(this, contextObject, metadata, displayString)
    end

  end

  @[Extern]
  record ICodeAddressConceptVtbl,
    query_interface : Proc(ICodeAddressConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICodeAddressConcept*, UInt32),
    release : Proc(ICodeAddressConcept*, UInt32),
    get_containing_symbol : Proc(ICodeAddressConcept*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICodeAddressConcept, lpVtbl : ICodeAddressConceptVtbl* do
    GUID = LibC::GUID.new(0xc7371568_u32, 0x5c78_u16, 0x4a00_u16, StaticArray[0xa4_u8, 0xab_u8, 0x6e_u8, 0xf8_u8, 0x82_u8, 0x31_u8, 0x84_u8, 0xcb_u8])
    def query_interface(this : ICodeAddressConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICodeAddressConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICodeAddressConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_containing_symbol(this : ICodeAddressConcept*, pContextObject : Void*, ppSymbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_symbol.call(this, pContextObject, ppSymbol)
    end

  end

  @[Extern]
  record IModelIteratorVtbl,
    query_interface : Proc(IModelIterator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelIterator*, UInt32),
    release : Proc(IModelIterator*, UInt32),
    reset : Proc(IModelIterator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IModelIterator*, Void**, UInt64, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelIterator, lpVtbl : IModelIteratorVtbl* do
    GUID = LibC::GUID.new(0xe4622136_u32, 0x927d_u16, 0x4490_u16, StaticArray[0x87_u8, 0x4f_u8, 0x58_u8, 0x1f_u8, 0x3e_u8, 0x4e_u8, 0x36_u8, 0x88_u8])
    def query_interface(this : IModelIterator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelIterator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelIterator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IModelIterator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IModelIterator*, object : Void**, dimensions : UInt64, indexers : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, object, dimensions, indexers, metadata)
    end

  end

  @[Extern]
  record IIterableConceptVtbl,
    query_interface : Proc(IIterableConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIterableConcept*, UInt32),
    release : Proc(IIterableConcept*, UInt32),
    get_default_index_dimensionality : Proc(IIterableConcept*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    get_iterator : Proc(IIterableConcept*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IIterableConcept, lpVtbl : IIterableConceptVtbl* do
    GUID = LibC::GUID.new(0xf5d49d0c_u32, 0xb02_u16, 0x4301_u16, StaticArray[0x9c_u8, 0x9b_u8, 0xb3_u8, 0xa6_u8, 0x3_u8, 0x76_u8, 0x28_u8, 0xf3_u8])
    def query_interface(this : IIterableConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIterableConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIterableConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_default_index_dimensionality(this : IIterableConcept*, contextObject : Void*, dimensionality : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_index_dimensionality.call(this, contextObject, dimensionality)
    end
    def get_iterator(this : IIterableConcept*, contextObject : Void*, iterator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_iterator.call(this, contextObject, iterator)
    end

  end

  @[Extern]
  record IIndexableConceptVtbl,
    query_interface : Proc(IIndexableConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIndexableConcept*, UInt32),
    release : Proc(IIndexableConcept*, UInt32),
    get_dimensionality : Proc(IIndexableConcept*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    get_at : Proc(IIndexableConcept*, Void*, UInt64, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_at : Proc(IIndexableConcept*, Void*, UInt64, Void**, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IIndexableConcept, lpVtbl : IIndexableConceptVtbl* do
    GUID = LibC::GUID.new(0xd1fad99f_u32, 0x3f53_u16, 0x4457_u16, StaticArray[0x85_u8, 0xc_u8, 0x80_u8, 0x51_u8, 0xdf_u8, 0x2d_u8, 0x3f_u8, 0xb5_u8])
    def query_interface(this : IIndexableConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIndexableConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIndexableConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_dimensionality(this : IIndexableConcept*, contextObject : Void*, dimensionality : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dimensionality.call(this, contextObject, dimensionality)
    end
    def get_at(this : IIndexableConcept*, contextObject : Void*, indexerCount : UInt64, indexers : Void**, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_at.call(this, contextObject, indexerCount, indexers, object, metadata)
    end
    def set_at(this : IIndexableConcept*, contextObject : Void*, indexerCount : UInt64, indexers : Void**, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_at.call(this, contextObject, indexerCount, indexers, value)
    end

  end

  @[Extern]
  record IPreferredRuntimeTypeConceptVtbl,
    query_interface : Proc(IPreferredRuntimeTypeConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPreferredRuntimeTypeConcept*, UInt32),
    release : Proc(IPreferredRuntimeTypeConcept*, UInt32),
    cast_to_preferred_runtime_type : Proc(IPreferredRuntimeTypeConcept*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPreferredRuntimeTypeConcept, lpVtbl : IPreferredRuntimeTypeConceptVtbl* do
    GUID = LibC::GUID.new(0x9d6c1d7b_u32, 0xa76f_u16, 0x4618_u16, StaticArray[0x80_u8, 0x68_u8, 0x5f_u8, 0x76_u8, 0xbd_u8, 0x9a_u8, 0x4e_u8, 0x8a_u8])
    def query_interface(this : IPreferredRuntimeTypeConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPreferredRuntimeTypeConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPreferredRuntimeTypeConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cast_to_preferred_runtime_type(this : IPreferredRuntimeTypeConcept*, contextObject : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cast_to_preferred_runtime_type.call(this, contextObject, object)
    end

  end

  @[Extern]
  record IDebugHostVtbl,
    query_interface : Proc(IDebugHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHost*, UInt32),
    release : Proc(IDebugHost*, UInt32),
    get_host_defined_interface : Proc(IDebugHost*, Void**, Win32cr::Foundation::HRESULT),
    get_current_context : Proc(IDebugHost*, Void**, Win32cr::Foundation::HRESULT),
    get_default_metadata : Proc(IDebugHost*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHost, lpVtbl : IDebugHostVtbl* do
    GUID = LibC::GUID.new(0xb8c74943_u32, 0x6b2c_u16, 0x4eeb_u16, StaticArray[0xb5_u8, 0xc5_u8, 0x35_u8, 0xd3_u8, 0x78_u8, 0xa6_u8, 0xd9_u8, 0x9d_u8])
    def query_interface(this : IDebugHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_host_defined_interface(this : IDebugHost*, hostUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_host_defined_interface.call(this, hostUnk)
    end
    def get_current_context(this : IDebugHost*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_context.call(this, context)
    end
    def get_default_metadata(this : IDebugHost*, defaultMetadataStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_metadata.call(this, defaultMetadataStore)
    end

  end

  @[Extern]
  record IDebugHostContextVtbl,
    query_interface : Proc(IDebugHostContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostContext*, UInt32),
    release : Proc(IDebugHostContext*, UInt32),
    is_equal_to : Proc(IDebugHostContext*, Void*, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostContext, lpVtbl : IDebugHostContextVtbl* do
    GUID = LibC::GUID.new(0xa68c70d8_u32, 0x5ec0_u16, 0x46e5_u16, StaticArray[0xb7_u8, 0x75_u8, 0x31_u8, 0x34_u8, 0xa4_u8, 0x8e_u8, 0xa2_u8, 0xe3_u8])
    def query_interface(this : IDebugHostContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_equal_to(this : IDebugHostContext*, pContext : Void*, pIsEqual : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_to.call(this, pContext, pIsEqual)
    end

  end

  @[Extern]
  record IDebugHostErrorSinkVtbl,
    query_interface : Proc(IDebugHostErrorSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostErrorSink*, UInt32),
    release : Proc(IDebugHostErrorSink*, UInt32),
    report_error : Proc(IDebugHostErrorSink*, Win32cr::System::Diagnostics::Debug::ErrorClass, Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostErrorSink, lpVtbl : IDebugHostErrorSinkVtbl* do
    GUID = LibC::GUID.new(0xc8ff0f0b_u32, 0xfce9_u16, 0x467e_u16, StaticArray[0x8b_u8, 0xb3_u8, 0x5d_u8, 0x69_u8, 0xef_u8, 0x10_u8, 0x9c_u8, 0x0_u8])
    def query_interface(this : IDebugHostErrorSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostErrorSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostErrorSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def report_error(this : IDebugHostErrorSink*, errClass : Win32cr::System::Diagnostics::Debug::ErrorClass, hrError : Win32cr::Foundation::HRESULT, message : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_error.call(this, errClass, hrError, message)
    end

  end

  @[Extern]
  record IDebugHostSymbolVtbl,
    query_interface : Proc(IDebugHostSymbol*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostSymbol*, UInt32),
    release : Proc(IDebugHostSymbol*, UInt32),
    get_context : Proc(IDebugHostSymbol*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostSymbol*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostSymbol*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostSymbol*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostSymbol*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostSymbol*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostSymbol*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostSymbol, lpVtbl : IDebugHostSymbolVtbl* do
    GUID = LibC::GUID.new(0xf819103_u32, 0x87de_u16, 0x4e96_u16, StaticArray[0x82_u8, 0x77_u8, 0xe0_u8, 0x5c_u8, 0xd4_u8, 0x41_u8, 0xfb_u8, 0x22_u8])
    def query_interface(this : IDebugHostSymbol*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostSymbol*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostSymbol*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostSymbol*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostSymbol*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostSymbol*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostSymbol*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostSymbol*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostSymbol*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostSymbol*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end

  end

  @[Extern]
  record IDebugHostSymbolEnumeratorVtbl,
    query_interface : Proc(IDebugHostSymbolEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostSymbolEnumerator*, UInt32),
    release : Proc(IDebugHostSymbolEnumerator*, UInt32),
    reset : Proc(IDebugHostSymbolEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDebugHostSymbolEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostSymbolEnumerator, lpVtbl : IDebugHostSymbolEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x28d96c86_u32, 0x10a3_u16, 0x4976_u16, StaticArray[0xb1_u8, 0x4e_u8, 0xea_u8, 0xef_u8, 0x47_u8, 0x90_u8, 0xaa_u8, 0x1f_u8])
    def query_interface(this : IDebugHostSymbolEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostSymbolEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostSymbolEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IDebugHostSymbolEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IDebugHostSymbolEnumerator*, symbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, symbol)
    end

  end

  @[Extern]
  record IDebugHostModuleVtbl,
    query_interface : Proc(IDebugHostModule*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostModule*, UInt32),
    release : Proc(IDebugHostModule*, UInt32),
    get_context : Proc(IDebugHostModule*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostModule*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostModule*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostModule*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostModule*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostModule*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostModule*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_image_name : Proc(IDebugHostModule*, UInt8, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_base_location : Proc(IDebugHostModule*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT),
    get_version : Proc(IDebugHostModule*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    find_type_by_name : Proc(IDebugHostModule*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    find_symbol_by_rva : Proc(IDebugHostModule*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    find_symbol_by_name : Proc(IDebugHostModule*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostModule, lpVtbl : IDebugHostModuleVtbl* do
    GUID = LibC::GUID.new(0xc9ba3e18_u32, 0xd070_u16, 0x4378_u16, StaticArray[0xbb_u8, 0xd0_u8, 0x34_u8, 0x61_u8, 0x3b_u8, 0x34_u8, 0x6e_u8, 0x1e_u8])
    def query_interface(this : IDebugHostModule*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostModule*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostModule*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostModule*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostModule*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostModule*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostModule*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostModule*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostModule*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostModule*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_image_name(this : IDebugHostModule*, allowPath : UInt8, imageName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_name.call(this, allowPath, imageName)
    end
    def get_base_location(this : IDebugHostModule*, moduleBaseLocation : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_base_location.call(this, moduleBaseLocation)
    end
    def get_version(this : IDebugHostModule*, fileVersion : UInt64*, productVersion : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, fileVersion, productVersion)
    end
    def find_type_by_name(this : IDebugHostModule*, typeName : Win32cr::Foundation::PWSTR, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_type_by_name.call(this, typeName, type__)
    end
    def find_symbol_by_rva(this : IDebugHostModule*, rva : UInt64, symbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_symbol_by_rva.call(this, rva, symbol)
    end
    def find_symbol_by_name(this : IDebugHostModule*, symbolName : Win32cr::Foundation::PWSTR, symbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_symbol_by_name.call(this, symbolName, symbol)
    end

  end

  @[Extern]
  record IDebugHostTypeVtbl,
    query_interface : Proc(IDebugHostType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostType*, UInt32),
    release : Proc(IDebugHostType*, UInt32),
    get_context : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostType*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_type_kind : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::TypeKind*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IDebugHostType*, UInt64*, Win32cr::Foundation::HRESULT),
    get_base_type : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    get_hash_code : Proc(IDebugHostType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_intrinsic_type : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::IntrinsicKind*, UInt16*, Win32cr::Foundation::HRESULT),
    get_bit_field : Proc(IDebugHostType*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pointer_kind : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::PointerKind*, Win32cr::Foundation::HRESULT),
    get_member_type : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    create_pointer_to : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::PointerKind, Void**, Win32cr::Foundation::HRESULT),
    get_array_dimensionality : Proc(IDebugHostType*, UInt64*, Win32cr::Foundation::HRESULT),
    get_array_dimensions : Proc(IDebugHostType*, UInt64, Win32cr::System::Diagnostics::Debug::ArrayDimension*, Win32cr::Foundation::HRESULT),
    create_array_of : Proc(IDebugHostType*, UInt64, Win32cr::System::Diagnostics::Debug::ArrayDimension*, Void**, Win32cr::Foundation::HRESULT),
    get_function_calling_convention : Proc(IDebugHostType*, Win32cr::System::Diagnostics::Debug::CallingConventionKind*, Win32cr::Foundation::HRESULT),
    get_function_return_type : Proc(IDebugHostType*, Void**, Win32cr::Foundation::HRESULT),
    get_function_parameter_type_count : Proc(IDebugHostType*, UInt64*, Win32cr::Foundation::HRESULT),
    get_function_parameter_type_at : Proc(IDebugHostType*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    is_generic : Proc(IDebugHostType*, Bool*, Win32cr::Foundation::HRESULT),
    get_generic_argument_count : Proc(IDebugHostType*, UInt64*, Win32cr::Foundation::HRESULT),
    get_generic_argument_at : Proc(IDebugHostType*, UInt64, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostType, lpVtbl : IDebugHostTypeVtbl* do
    GUID = LibC::GUID.new(0x3aadc353_u32, 0x2b14_u16, 0x4abb_u16, StaticArray[0x98_u8, 0x93_u8, 0x5e_u8, 0x3_u8, 0x45_u8, 0x8e_u8, 0x7_u8, 0xee_u8])
    def query_interface(this : IDebugHostType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostType*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostType*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostType*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostType*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostType*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostType*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostType*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_type_kind(this : IDebugHostType*, kind : Win32cr::System::Diagnostics::Debug::TypeKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_kind.call(this, kind)
    end
    def get_size(this : IDebugHostType*, size : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, size)
    end
    def get_base_type(this : IDebugHostType*, baseType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_base_type.call(this, baseType)
    end
    def get_hash_code(this : IDebugHostType*, hashCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_code.call(this, hashCode)
    end
    def get_intrinsic_type(this : IDebugHostType*, intrinsicKind : Win32cr::System::Diagnostics::Debug::IntrinsicKind*, carrierType : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_type.call(this, intrinsicKind, carrierType)
    end
    def get_bit_field(this : IDebugHostType*, lsbOfField : UInt32*, lengthOfField : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_field.call(this, lsbOfField, lengthOfField)
    end
    def get_pointer_kind(this : IDebugHostType*, pointerKind : Win32cr::System::Diagnostics::Debug::PointerKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pointer_kind.call(this, pointerKind)
    end
    def get_member_type(this : IDebugHostType*, memberType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_member_type.call(this, memberType)
    end
    def create_pointer_to(this : IDebugHostType*, kind : Win32cr::System::Diagnostics::Debug::PointerKind, newType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pointer_to.call(this, kind, newType)
    end
    def get_array_dimensionality(this : IDebugHostType*, arrayDimensionality : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_array_dimensionality.call(this, arrayDimensionality)
    end
    def get_array_dimensions(this : IDebugHostType*, dimensions : UInt64, pDimensions : Win32cr::System::Diagnostics::Debug::ArrayDimension*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_array_dimensions.call(this, dimensions, pDimensions)
    end
    def create_array_of(this : IDebugHostType*, dimensions : UInt64, pDimensions : Win32cr::System::Diagnostics::Debug::ArrayDimension*, newType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_array_of.call(this, dimensions, pDimensions, newType)
    end
    def get_function_calling_convention(this : IDebugHostType*, conventionKind : Win32cr::System::Diagnostics::Debug::CallingConventionKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_calling_convention.call(this, conventionKind)
    end
    def get_function_return_type(this : IDebugHostType*, returnType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_return_type.call(this, returnType)
    end
    def get_function_parameter_type_count(this : IDebugHostType*, count : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_parameter_type_count.call(this, count)
    end
    def get_function_parameter_type_at(this : IDebugHostType*, i : UInt64, parameterType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_parameter_type_at.call(this, i, parameterType)
    end
    def is_generic(this : IDebugHostType*, isGeneric : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_generic.call(this, isGeneric)
    end
    def get_generic_argument_count(this : IDebugHostType*, argCount : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_generic_argument_count.call(this, argCount)
    end
    def get_generic_argument_at(this : IDebugHostType*, i : UInt64, argument : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_generic_argument_at.call(this, i, argument)
    end

  end

  @[Extern]
  record IDebugHostConstantVtbl,
    query_interface : Proc(IDebugHostConstant*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostConstant*, UInt32),
    release : Proc(IDebugHostConstant*, UInt32),
    get_context : Proc(IDebugHostConstant*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostConstant*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostConstant*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostConstant*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostConstant*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostConstant*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostConstant*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDebugHostConstant*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostConstant, lpVtbl : IDebugHostConstantVtbl* do
    GUID = LibC::GUID.new(0x62787edc_u32, 0xfa76_u16, 0x4690_u16, StaticArray[0xbd_u8, 0x71_u8, 0x5e_u8, 0x8c_u8, 0x3e_u8, 0x29_u8, 0x37_u8, 0xec_u8])
    def query_interface(this : IDebugHostConstant*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostConstant*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostConstant*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostConstant*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostConstant*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostConstant*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostConstant*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostConstant*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostConstant*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostConstant*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_value(this : IDebugHostConstant*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, value)
    end

  end

  @[Extern]
  record IDebugHostFieldVtbl,
    query_interface : Proc(IDebugHostField*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostField*, UInt32),
    release : Proc(IDebugHostField*, UInt32),
    get_context : Proc(IDebugHostField*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostField*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostField*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostField*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostField*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostField*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostField*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_location_kind : Proc(IDebugHostField*, Win32cr::System::Diagnostics::Debug::LocationKind*, Win32cr::Foundation::HRESULT),
    get_offset : Proc(IDebugHostField*, UInt64*, Win32cr::Foundation::HRESULT),
    get_location : Proc(IDebugHostField*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDebugHostField*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostField, lpVtbl : IDebugHostFieldVtbl* do
    GUID = LibC::GUID.new(0xe06f6495_u32, 0x16bc_u16, 0x4cc9_u16, StaticArray[0xb1_u8, 0x1d_u8, 0x2a_u8, 0x6b_u8, 0x23_u8, 0xfa_u8, 0x72_u8, 0xf3_u8])
    def query_interface(this : IDebugHostField*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostField*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostField*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostField*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostField*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostField*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostField*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostField*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostField*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostField*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_location_kind(this : IDebugHostField*, locationKind : Win32cr::System::Diagnostics::Debug::LocationKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location_kind.call(this, locationKind)
    end
    def get_offset(this : IDebugHostField*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset.call(this, offset)
    end
    def get_location(this : IDebugHostField*, location : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location.call(this, location)
    end
    def get_value(this : IDebugHostField*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, value)
    end

  end

  @[Extern]
  record IDebugHostDataVtbl,
    query_interface : Proc(IDebugHostData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostData*, UInt32),
    release : Proc(IDebugHostData*, UInt32),
    get_context : Proc(IDebugHostData*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostData*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostData*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostData*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostData*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostData*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_location_kind : Proc(IDebugHostData*, Win32cr::System::Diagnostics::Debug::LocationKind*, Win32cr::Foundation::HRESULT),
    get_location : Proc(IDebugHostData*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDebugHostData*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostData, lpVtbl : IDebugHostDataVtbl* do
    GUID = LibC::GUID.new(0xa3d64993_u32, 0x826c_u16, 0x44fa_u16, StaticArray[0x89_u8, 0x7d_u8, 0x92_u8, 0x6f_u8, 0x2f_u8, 0xe7_u8, 0xad_u8, 0xb_u8])
    def query_interface(this : IDebugHostData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostData*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostData*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostData*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostData*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostData*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostData*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostData*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_location_kind(this : IDebugHostData*, locationKind : Win32cr::System::Diagnostics::Debug::LocationKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location_kind.call(this, locationKind)
    end
    def get_location(this : IDebugHostData*, location : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location.call(this, location)
    end
    def get_value(this : IDebugHostData*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, value)
    end

  end

  @[Extern]
  record IDebugHostPublicVtbl,
    query_interface : Proc(IDebugHostPublic*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostPublic*, UInt32),
    release : Proc(IDebugHostPublic*, UInt32),
    get_context : Proc(IDebugHostPublic*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostPublic*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostPublic*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostPublic*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostPublic*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostPublic*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostPublic*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_location_kind : Proc(IDebugHostPublic*, Win32cr::System::Diagnostics::Debug::LocationKind*, Win32cr::Foundation::HRESULT),
    get_location : Proc(IDebugHostPublic*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostPublic, lpVtbl : IDebugHostPublicVtbl* do
    GUID = LibC::GUID.new(0x6c597ac9_u32, 0xfb4d_u16, 0x4f6d_u16, StaticArray[0x9f_u8, 0x39_u8, 0x22_u8, 0x48_u8, 0x85_u8, 0x39_u8, 0xf8_u8, 0xf4_u8])
    def query_interface(this : IDebugHostPublic*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostPublic*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostPublic*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostPublic*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostPublic*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostPublic*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostPublic*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostPublic*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostPublic*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostPublic*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_location_kind(this : IDebugHostPublic*, locationKind : Win32cr::System::Diagnostics::Debug::LocationKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location_kind.call(this, locationKind)
    end
    def get_location(this : IDebugHostPublic*, location : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location.call(this, location)
    end

  end

  @[Extern]
  record IDebugHostBaseClassVtbl,
    query_interface : Proc(IDebugHostBaseClass*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostBaseClass*, UInt32),
    release : Proc(IDebugHostBaseClass*, UInt32),
    get_context : Proc(IDebugHostBaseClass*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostBaseClass*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostBaseClass*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostBaseClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostBaseClass*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostBaseClass*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostBaseClass*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_offset : Proc(IDebugHostBaseClass*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostBaseClass, lpVtbl : IDebugHostBaseClassVtbl* do
    GUID = LibC::GUID.new(0xb94d57d2_u32, 0x390b_u16, 0x40f7_u16, StaticArray[0xb5_u8, 0xb4_u8, 0xb6_u8, 0xdb_u8, 0x89_u8, 0x7d_u8, 0x97_u8, 0x4b_u8])
    def query_interface(this : IDebugHostBaseClass*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostBaseClass*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostBaseClass*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostBaseClass*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostBaseClass*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostBaseClass*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostBaseClass*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostBaseClass*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostBaseClass*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostBaseClass*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_offset(this : IDebugHostBaseClass*, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_offset.call(this, offset)
    end

  end

  @[Extern]
  record IDebugHostSymbolsVtbl,
    query_interface : Proc(IDebugHostSymbols*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostSymbols*, UInt32),
    release : Proc(IDebugHostSymbols*, UInt32),
    create_module_signature : Proc(IDebugHostSymbols*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_type_signature : Proc(IDebugHostSymbols*, Win32cr::Foundation::PWSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_type_signature_for_module_range : Proc(IDebugHostSymbols*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    enumerate_modules : Proc(IDebugHostSymbols*, Void*, Void**, Win32cr::Foundation::HRESULT),
    find_module_by_name : Proc(IDebugHostSymbols*, Void*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    find_module_by_location : Proc(IDebugHostSymbols*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void**, Win32cr::Foundation::HRESULT),
    get_most_derived_object : Proc(IDebugHostSymbols*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, Win32cr::System::Diagnostics::Debug::Location*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostSymbols, lpVtbl : IDebugHostSymbolsVtbl* do
    GUID = LibC::GUID.new(0x854fd751_u32, 0xc2e1_u16, 0x4eb2_u16, StaticArray[0xb5_u8, 0x25_u8, 0x66_u8, 0x19_u8, 0xcb_u8, 0x97_u8, 0xa5_u8, 0x88_u8])
    def query_interface(this : IDebugHostSymbols*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostSymbols*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostSymbols*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_module_signature(this : IDebugHostSymbols*, pwszModuleName : Win32cr::Foundation::PWSTR, pwszMinVersion : Win32cr::Foundation::PWSTR, pwszMaxVersion : Win32cr::Foundation::PWSTR, ppModuleSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_module_signature.call(this, pwszModuleName, pwszMinVersion, pwszMaxVersion, ppModuleSignature)
    end
    def create_type_signature(this : IDebugHostSymbols*, signatureSpecification : Win32cr::Foundation::PWSTR, module__ : Void*, typeSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_type_signature.call(this, signatureSpecification, module__, typeSignature)
    end
    def create_type_signature_for_module_range(this : IDebugHostSymbols*, signatureSpecification : Win32cr::Foundation::PWSTR, moduleName : Win32cr::Foundation::PWSTR, minVersion : Win32cr::Foundation::PWSTR, maxVersion : Win32cr::Foundation::PWSTR, typeSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_type_signature_for_module_range.call(this, signatureSpecification, moduleName, minVersion, maxVersion, typeSignature)
    end
    def enumerate_modules(this : IDebugHostSymbols*, context : Void*, moduleEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_modules.call(this, context, moduleEnum)
    end
    def find_module_by_name(this : IDebugHostSymbols*, context : Void*, moduleName : Win32cr::Foundation::PWSTR, module__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_module_by_name.call(this, context, moduleName, module__)
    end
    def find_module_by_location(this : IDebugHostSymbols*, context : Void*, moduleLocation : Win32cr::System::Diagnostics::Debug::Location, module__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_module_by_location.call(this, context, moduleLocation, module__)
    end
    def get_most_derived_object(this : IDebugHostSymbols*, pContext : Void*, location : Win32cr::System::Diagnostics::Debug::Location, objectType : Void*, derivedLocation : Win32cr::System::Diagnostics::Debug::Location*, derivedType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_most_derived_object.call(this, pContext, location, objectType, derivedLocation, derivedType)
    end

  end

  @[Extern]
  record IDebugHostMemoryVtbl,
    query_interface : Proc(IDebugHostMemory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostMemory*, UInt32),
    release : Proc(IDebugHostMemory*, UInt32),
    read_bytes : Proc(IDebugHostMemory*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_bytes : Proc(IDebugHostMemory*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_pointers : Proc(IDebugHostMemory*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers : Proc(IDebugHostMemory*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_display_string_for_location : Proc(IDebugHostMemory*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt8, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostMemory, lpVtbl : IDebugHostMemoryVtbl* do
    GUID = LibC::GUID.new(0x212149c9_u32, 0x9183_u16, 0x4a3e_u16, StaticArray[0xb0_u8, 0xe_u8, 0x4f_u8, 0xd1_u8, 0xdc_u8, 0x95_u8, 0x33_u8, 0x9b_u8])
    def query_interface(this : IDebugHostMemory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostMemory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostMemory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_bytes(this : IDebugHostMemory*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, buffer : Void*, bufferSize : UInt64, bytesRead : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bytes.call(this, context, location, buffer, bufferSize, bytesRead)
    end
    def write_bytes(this : IDebugHostMemory*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, buffer : Void*, bufferSize : UInt64, bytesWritten : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bytes.call(this, context, location, buffer, bufferSize, bytesWritten)
    end
    def read_pointers(this : IDebugHostMemory*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, count : UInt64, pointers : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers.call(this, context, location, count, pointers)
    end
    def write_pointers(this : IDebugHostMemory*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, count : UInt64, pointers : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers.call(this, context, location, count, pointers)
    end
    def get_display_string_for_location(this : IDebugHostMemory*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, verbose : UInt8, locationName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_string_for_location.call(this, context, location, verbose, locationName)
    end

  end

  @[Extern]
  record IDebugHostEvaluatorVtbl,
    query_interface : Proc(IDebugHostEvaluator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostEvaluator*, UInt32),
    release : Proc(IDebugHostEvaluator*, UInt32),
    evaluate_expression : Proc(IDebugHostEvaluator*, Void*, Win32cr::Foundation::PWSTR, Void*, Void**, Void**, Win32cr::Foundation::HRESULT),
    evaluate_extended_expression : Proc(IDebugHostEvaluator*, Void*, Win32cr::Foundation::PWSTR, Void*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostEvaluator, lpVtbl : IDebugHostEvaluatorVtbl* do
    GUID = LibC::GUID.new(0xfef9a21_u32, 0x577e_u16, 0x4997_u16, StaticArray[0xac_u8, 0x7b_u8, 0x1c_u8, 0x48_u8, 0x83_u8, 0x24_u8, 0x1d_u8, 0x99_u8])
    def query_interface(this : IDebugHostEvaluator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostEvaluator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostEvaluator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def evaluate_expression(this : IDebugHostEvaluator*, context : Void*, expression : Win32cr::Foundation::PWSTR, bindingContext : Void*, result : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_expression.call(this, context, expression, bindingContext, result, metadata)
    end
    def evaluate_extended_expression(this : IDebugHostEvaluator*, context : Void*, expression : Win32cr::Foundation::PWSTR, bindingContext : Void*, result : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_extended_expression.call(this, context, expression, bindingContext, result, metadata)
    end

  end

  @[Extern]
  record IDebugHostModuleSignatureVtbl,
    query_interface : Proc(IDebugHostModuleSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostModuleSignature*, UInt32),
    release : Proc(IDebugHostModuleSignature*, UInt32),
    is_match : Proc(IDebugHostModuleSignature*, Void*, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostModuleSignature, lpVtbl : IDebugHostModuleSignatureVtbl* do
    GUID = LibC::GUID.new(0x31e53a5a_u32, 0x1ee_u16, 0x4bbb_u16, StaticArray[0xb8_u8, 0x99_u8, 0x4b_u8, 0x46_u8, 0xae_u8, 0x7d_u8, 0x59_u8, 0x5c_u8])
    def query_interface(this : IDebugHostModuleSignature*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostModuleSignature*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostModuleSignature*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_match(this : IDebugHostModuleSignature*, pModule : Void*, isMatch : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_match.call(this, pModule, isMatch)
    end

  end

  @[Extern]
  record IDebugHostTypeSignatureVtbl,
    query_interface : Proc(IDebugHostTypeSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostTypeSignature*, UInt32),
    release : Proc(IDebugHostTypeSignature*, UInt32),
    get_hash_code : Proc(IDebugHostTypeSignature*, UInt32*, Win32cr::Foundation::HRESULT),
    is_match : Proc(IDebugHostTypeSignature*, Void*, Bool*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostTypeSignature*, Void*, Win32cr::System::Diagnostics::Debug::SignatureComparison*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostTypeSignature, lpVtbl : IDebugHostTypeSignatureVtbl* do
    GUID = LibC::GUID.new(0x3aadc353_u32, 0x2b14_u16, 0x4abb_u16, StaticArray[0x98_u8, 0x93_u8, 0x5e_u8, 0x3_u8, 0x45_u8, 0x8e_u8, 0x7_u8, 0xee_u8])
    def query_interface(this : IDebugHostTypeSignature*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostTypeSignature*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostTypeSignature*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_hash_code(this : IDebugHostTypeSignature*, hashCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_code.call(this, hashCode)
    end
    def is_match(this : IDebugHostTypeSignature*, type__ : Void*, isMatch : Bool*, wildcardMatches : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_match.call(this, type__, isMatch, wildcardMatches)
    end
    def compare_against(this : IDebugHostTypeSignature*, typeSignature : Void*, result : Win32cr::System::Diagnostics::Debug::SignatureComparison*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, typeSignature, result)
    end

  end

  @[Extern]
  record IDebugHostSymbol2Vtbl,
    query_interface : Proc(IDebugHostSymbol2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostSymbol2*, UInt32),
    release : Proc(IDebugHostSymbol2*, UInt32),
    get_context : Proc(IDebugHostSymbol2*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostSymbol2*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostSymbol2*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostSymbol2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostSymbol2*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostSymbol2*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostSymbol2*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_language : Proc(IDebugHostSymbol2*, Win32cr::System::Diagnostics::Debug::LanguageKind*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostSymbol2, lpVtbl : IDebugHostSymbol2Vtbl* do
    GUID = LibC::GUID.new(0x21515b67_u32, 0x6720_u16, 0x4257_u16, StaticArray[0x8a_u8, 0x68_u8, 0x7_u8, 0x7d_u8, 0xc9_u8, 0x44_u8, 0x47_u8, 0x1c_u8])
    def query_interface(this : IDebugHostSymbol2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostSymbol2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostSymbol2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostSymbol2*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostSymbol2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostSymbol2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostSymbol2*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostSymbol2*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostSymbol2*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostSymbol2*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_language(this : IDebugHostSymbol2*, pKind : Win32cr::System::Diagnostics::Debug::LanguageKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, pKind)
    end

  end

  @[Extern]
  record IDebugHostType2Vtbl,
    query_interface : Proc(IDebugHostType2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostType2*, UInt32),
    release : Proc(IDebugHostType2*, UInt32),
    get_context : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostType2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostType2*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_type_kind : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::TypeKind*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IDebugHostType2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_base_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    get_hash_code : Proc(IDebugHostType2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_intrinsic_type : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::IntrinsicKind*, UInt16*, Win32cr::Foundation::HRESULT),
    get_bit_field : Proc(IDebugHostType2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pointer_kind : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::PointerKind*, Win32cr::Foundation::HRESULT),
    get_member_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    create_pointer_to : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::PointerKind, Void**, Win32cr::Foundation::HRESULT),
    get_array_dimensionality : Proc(IDebugHostType2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_array_dimensions : Proc(IDebugHostType2*, UInt64, Win32cr::System::Diagnostics::Debug::ArrayDimension*, Win32cr::Foundation::HRESULT),
    create_array_of : Proc(IDebugHostType2*, UInt64, Win32cr::System::Diagnostics::Debug::ArrayDimension*, Void**, Win32cr::Foundation::HRESULT),
    get_function_calling_convention : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::CallingConventionKind*, Win32cr::Foundation::HRESULT),
    get_function_return_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    get_function_parameter_type_count : Proc(IDebugHostType2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_function_parameter_type_at : Proc(IDebugHostType2*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    is_generic : Proc(IDebugHostType2*, Bool*, Win32cr::Foundation::HRESULT),
    get_generic_argument_count : Proc(IDebugHostType2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_generic_argument_at : Proc(IDebugHostType2*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    is_typedef : Proc(IDebugHostType2*, Bool*, Win32cr::Foundation::HRESULT),
    get_typedef_base_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    get_typedef_final_base_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT),
    get_function_var_args_kind : Proc(IDebugHostType2*, Win32cr::System::Diagnostics::Debug::VarArgsKind*, Win32cr::Foundation::HRESULT),
    get_function_instance_pointer_type : Proc(IDebugHostType2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostType2, lpVtbl : IDebugHostType2Vtbl* do
    GUID = LibC::GUID.new(0xb28632b9_u32, 0x8506_u16, 0x4676_u16, StaticArray[0x87_u8, 0xce_u8, 0x8f_u8, 0x7e_u8, 0x5_u8, 0xe5_u8, 0x98_u8, 0x76_u8])
    def query_interface(this : IDebugHostType2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostType2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostType2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostType2*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostType2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostType2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostType2*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostType2*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostType2*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostType2*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_type_kind(this : IDebugHostType2*, kind : Win32cr::System::Diagnostics::Debug::TypeKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_kind.call(this, kind)
    end
    def get_size(this : IDebugHostType2*, size : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, size)
    end
    def get_base_type(this : IDebugHostType2*, baseType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_base_type.call(this, baseType)
    end
    def get_hash_code(this : IDebugHostType2*, hashCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_code.call(this, hashCode)
    end
    def get_intrinsic_type(this : IDebugHostType2*, intrinsicKind : Win32cr::System::Diagnostics::Debug::IntrinsicKind*, carrierType : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_type.call(this, intrinsicKind, carrierType)
    end
    def get_bit_field(this : IDebugHostType2*, lsbOfField : UInt32*, lengthOfField : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_field.call(this, lsbOfField, lengthOfField)
    end
    def get_pointer_kind(this : IDebugHostType2*, pointerKind : Win32cr::System::Diagnostics::Debug::PointerKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pointer_kind.call(this, pointerKind)
    end
    def get_member_type(this : IDebugHostType2*, memberType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_member_type.call(this, memberType)
    end
    def create_pointer_to(this : IDebugHostType2*, kind : Win32cr::System::Diagnostics::Debug::PointerKind, newType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pointer_to.call(this, kind, newType)
    end
    def get_array_dimensionality(this : IDebugHostType2*, arrayDimensionality : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_array_dimensionality.call(this, arrayDimensionality)
    end
    def get_array_dimensions(this : IDebugHostType2*, dimensions : UInt64, pDimensions : Win32cr::System::Diagnostics::Debug::ArrayDimension*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_array_dimensions.call(this, dimensions, pDimensions)
    end
    def create_array_of(this : IDebugHostType2*, dimensions : UInt64, pDimensions : Win32cr::System::Diagnostics::Debug::ArrayDimension*, newType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_array_of.call(this, dimensions, pDimensions, newType)
    end
    def get_function_calling_convention(this : IDebugHostType2*, conventionKind : Win32cr::System::Diagnostics::Debug::CallingConventionKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_calling_convention.call(this, conventionKind)
    end
    def get_function_return_type(this : IDebugHostType2*, returnType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_return_type.call(this, returnType)
    end
    def get_function_parameter_type_count(this : IDebugHostType2*, count : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_parameter_type_count.call(this, count)
    end
    def get_function_parameter_type_at(this : IDebugHostType2*, i : UInt64, parameterType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_parameter_type_at.call(this, i, parameterType)
    end
    def is_generic(this : IDebugHostType2*, isGeneric : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_generic.call(this, isGeneric)
    end
    def get_generic_argument_count(this : IDebugHostType2*, argCount : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_generic_argument_count.call(this, argCount)
    end
    def get_generic_argument_at(this : IDebugHostType2*, i : UInt64, argument : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_generic_argument_at.call(this, i, argument)
    end
    def is_typedef(this : IDebugHostType2*, isTypedef : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_typedef.call(this, isTypedef)
    end
    def get_typedef_base_type(this : IDebugHostType2*, baseType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_typedef_base_type.call(this, baseType)
    end
    def get_typedef_final_base_type(this : IDebugHostType2*, finalBaseType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_typedef_final_base_type.call(this, finalBaseType)
    end
    def get_function_var_args_kind(this : IDebugHostType2*, varArgsKind : Win32cr::System::Diagnostics::Debug::VarArgsKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_var_args_kind.call(this, varArgsKind)
    end
    def get_function_instance_pointer_type(this : IDebugHostType2*, instancePointerType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function_instance_pointer_type.call(this, instancePointerType)
    end

  end

  @[Extern]
  record IDebugHostStatusVtbl,
    query_interface : Proc(IDebugHostStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostStatus*, UInt32),
    release : Proc(IDebugHostStatus*, UInt32),
    poll_user_interrupt : Proc(IDebugHostStatus*, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostStatus, lpVtbl : IDebugHostStatusVtbl* do
    GUID = LibC::GUID.new(0x4f3e1ce2_u32, 0x86b2_u16, 0x4c7a_u16, StaticArray[0x9c_u8, 0x65_u8, 0xd0_u8, 0xa9_u8, 0xd0_u8, 0xee_u8, 0xcf_u8, 0x44_u8])
    def query_interface(this : IDebugHostStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def poll_user_interrupt(this : IDebugHostStatus*, interruptRequested : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.poll_user_interrupt.call(this, interruptRequested)
    end

  end

  @[Extern]
  record IDataModelScriptClientVtbl,
    query_interface : Proc(IDataModelScriptClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptClient*, UInt32),
    release : Proc(IDataModelScriptClient*, UInt32),
    report_error : Proc(IDataModelScriptClient*, Win32cr::System::Diagnostics::Debug::ErrorClass, Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptClient, lpVtbl : IDataModelScriptClientVtbl* do
    GUID = LibC::GUID.new(0x3b362b0e_u32, 0x89f0_u16, 0x46c6_u16, StaticArray[0xa6_u8, 0x63_u8, 0xdf_u8, 0xdc_u8, 0x95_u8, 0x19_u8, 0x4a_u8, 0xef_u8])
    def query_interface(this : IDataModelScriptClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def report_error(this : IDataModelScriptClient*, errClass : Win32cr::System::Diagnostics::Debug::ErrorClass, hrFail : Win32cr::Foundation::HRESULT, message : Win32cr::Foundation::PWSTR, line : UInt32, position : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_error.call(this, errClass, hrFail, message, line, position)
    end

  end

  @[Extern]
  record IDataModelScriptTemplateVtbl,
    query_interface : Proc(IDataModelScriptTemplate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptTemplate*, UInt32),
    release : Proc(IDataModelScriptTemplate*, UInt32),
    get_name : Proc(IDataModelScriptTemplate*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDataModelScriptTemplate*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_content : Proc(IDataModelScriptTemplate*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptTemplate, lpVtbl : IDataModelScriptTemplateVtbl* do
    GUID = LibC::GUID.new(0x1303dec4_u32, 0xfa3b_u16, 0x4f1b_u16, StaticArray[0x92_u8, 0x24_u8, 0xb9_u8, 0x53_u8, 0xd1_u8, 0x6b_u8, 0xab_u8, 0xb5_u8])
    def query_interface(this : IDataModelScriptTemplate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptTemplate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptTemplate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDataModelScriptTemplate*, templateName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, templateName)
    end
    def get_description(this : IDataModelScriptTemplate*, templateDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, templateDescription)
    end
    def get_content(this : IDataModelScriptTemplate*, contentStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content.call(this, contentStream)
    end

  end

  @[Extern]
  record IDataModelScriptVtbl,
    query_interface : Proc(IDataModelScript*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScript*, UInt32),
    release : Proc(IDataModelScript*, UInt32),
    get_name : Proc(IDataModelScript*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IDataModelScript*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    populate : Proc(IDataModelScript*, Void*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDataModelScript*, Void*, Win32cr::Foundation::HRESULT),
    unlink : Proc(IDataModelScript*, Win32cr::Foundation::HRESULT),
    is_invocable : Proc(IDataModelScript*, Bool*, Win32cr::Foundation::HRESULT),
    invoke_main : Proc(IDataModelScript*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScript, lpVtbl : IDataModelScriptVtbl* do
    GUID = LibC::GUID.new(0x7b4d30fc_u32, 0xb14a_u16, 0x49f8_u16, StaticArray[0x8d_u8, 0x87_u8, 0xd9_u8, 0xa1_u8, 0x48_u8, 0xc_u8, 0x97_u8, 0xf7_u8])
    def query_interface(this : IDataModelScript*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScript*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScript*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDataModelScript*, scriptName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, scriptName)
    end
    def rename(this : IDataModelScript*, scriptName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, scriptName)
    end
    def populate(this : IDataModelScript*, contentStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.populate.call(this, contentStream)
    end
    def execute(this : IDataModelScript*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, client)
    end
    def unlink(this : IDataModelScript*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlink.call(this)
    end
    def is_invocable(this : IDataModelScript*, isInvocable : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_invocable.call(this, isInvocable)
    end
    def invoke_main(this : IDataModelScript*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_main.call(this, client)
    end

  end

  @[Extern]
  record IDataModelScriptTemplateEnumeratorVtbl,
    query_interface : Proc(IDataModelScriptTemplateEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptTemplateEnumerator*, UInt32),
    release : Proc(IDataModelScriptTemplateEnumerator*, UInt32),
    reset : Proc(IDataModelScriptTemplateEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDataModelScriptTemplateEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptTemplateEnumerator, lpVtbl : IDataModelScriptTemplateEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x69ce6ae2_u32, 0x2268_u16, 0x4e6f_u16, StaticArray[0xb0_u8, 0x62_u8, 0x20_u8, 0xce_u8, 0x62_u8, 0xbf_u8, 0xe6_u8, 0x77_u8])
    def query_interface(this : IDataModelScriptTemplateEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptTemplateEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptTemplateEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IDataModelScriptTemplateEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IDataModelScriptTemplateEnumerator*, templateContent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, templateContent)
    end

  end

  @[Extern]
  record IDataModelScriptProviderVtbl,
    query_interface : Proc(IDataModelScriptProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptProvider*, UInt32),
    release : Proc(IDataModelScriptProvider*, UInt32),
    get_name : Proc(IDataModelScriptProvider*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_extension : Proc(IDataModelScriptProvider*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_script : Proc(IDataModelScriptProvider*, Void**, Win32cr::Foundation::HRESULT),
    get_default_template_content : Proc(IDataModelScriptProvider*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_templates : Proc(IDataModelScriptProvider*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptProvider, lpVtbl : IDataModelScriptProviderVtbl* do
    GUID = LibC::GUID.new(0x513461e0_u32, 0x4fca_u16, 0x48ce_u16, StaticArray[0x86_u8, 0x58_u8, 0x32_u8, 0xf3_u8, 0xe2_u8, 0x5_u8, 0x6f_u8, 0x3b_u8])
    def query_interface(this : IDataModelScriptProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDataModelScriptProvider*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_extension(this : IDataModelScriptProvider*, extension : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extension.call(this, extension)
    end
    def create_script(this : IDataModelScriptProvider*, script : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_script.call(this, script)
    end
    def get_default_template_content(this : IDataModelScriptProvider*, templateContent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_template_content.call(this, templateContent)
    end
    def enumerate_templates(this : IDataModelScriptProvider*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_templates.call(this, enumerator)
    end

  end

  @[Extern]
  record IDataModelScriptProviderEnumeratorVtbl,
    query_interface : Proc(IDataModelScriptProviderEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptProviderEnumerator*, UInt32),
    release : Proc(IDataModelScriptProviderEnumerator*, UInt32),
    reset : Proc(IDataModelScriptProviderEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDataModelScriptProviderEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptProviderEnumerator, lpVtbl : IDataModelScriptProviderEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x95ba00e2_u32, 0x704a_u16, 0x4fe2_u16, StaticArray[0xa8_u8, 0xf1_u8, 0xa7_u8, 0xe7_u8, 0xd8_u8, 0xfb_u8, 0x9_u8, 0x41_u8])
    def query_interface(this : IDataModelScriptProviderEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptProviderEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptProviderEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IDataModelScriptProviderEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IDataModelScriptProviderEnumerator*, provider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, provider)
    end

  end

  @[Extern]
  record IDataModelScriptManagerVtbl,
    query_interface : Proc(IDataModelScriptManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptManager*, UInt32),
    release : Proc(IDataModelScriptManager*, UInt32),
    get_default_name_binder : Proc(IDataModelScriptManager*, Void**, Win32cr::Foundation::HRESULT),
    register_script_provider : Proc(IDataModelScriptManager*, Void*, Win32cr::Foundation::HRESULT),
    unregister_script_provider : Proc(IDataModelScriptManager*, Void*, Win32cr::Foundation::HRESULT),
    find_provider_for_script_type : Proc(IDataModelScriptManager*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    find_provider_for_script_extension : Proc(IDataModelScriptManager*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    enumerate_script_providers : Proc(IDataModelScriptManager*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptManager, lpVtbl : IDataModelScriptManagerVtbl* do
    GUID = LibC::GUID.new(0x6fd11e33_u32, 0xe5ad_u16, 0x410b_u16, StaticArray[0x80_u8, 0x11_u8, 0x68_u8, 0xc6_u8, 0xbc_u8, 0x4b_u8, 0xf8_u8, 0xd_u8])
    def query_interface(this : IDataModelScriptManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_default_name_binder(this : IDataModelScriptManager*, ppNameBinder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_name_binder.call(this, ppNameBinder)
    end
    def register_script_provider(this : IDataModelScriptManager*, provider : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_script_provider.call(this, provider)
    end
    def unregister_script_provider(this : IDataModelScriptManager*, provider : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_script_provider.call(this, provider)
    end
    def find_provider_for_script_type(this : IDataModelScriptManager*, scriptType : Win32cr::Foundation::PWSTR, provider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_provider_for_script_type.call(this, scriptType, provider)
    end
    def find_provider_for_script_extension(this : IDataModelScriptManager*, scriptExtension : Win32cr::Foundation::PWSTR, provider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_provider_for_script_extension.call(this, scriptExtension, provider)
    end
    def enumerate_script_providers(this : IDataModelScriptManager*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_script_providers.call(this, enumerator)
    end

  end

  @[Extern]
  record IDynamicKeyProviderConceptVtbl,
    query_interface : Proc(IDynamicKeyProviderConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDynamicKeyProviderConcept*, UInt32),
    release : Proc(IDynamicKeyProviderConcept*, UInt32),
    get_key : Proc(IDynamicKeyProviderConcept*, Void*, Win32cr::Foundation::PWSTR, Void**, Void**, Bool*, Win32cr::Foundation::HRESULT),
    set_key : Proc(IDynamicKeyProviderConcept*, Void*, Win32cr::Foundation::PWSTR, Void*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_keys : Proc(IDynamicKeyProviderConcept*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDynamicKeyProviderConcept, lpVtbl : IDynamicKeyProviderConceptVtbl* do
    GUID = LibC::GUID.new(0xe7983fa1_u32, 0x80a7_u16, 0x498c_u16, StaticArray[0x98_u8, 0x8f_u8, 0x51_u8, 0x8d_u8, 0xdc_u8, 0x5d_u8, 0x40_u8, 0x25_u8])
    def query_interface(this : IDynamicKeyProviderConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDynamicKeyProviderConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDynamicKeyProviderConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_key(this : IDynamicKeyProviderConcept*, contextObject : Void*, key : Win32cr::Foundation::PWSTR, keyValue : Void**, metadata : Void**, hasKey : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key.call(this, contextObject, key, keyValue, metadata, hasKey)
    end
    def set_key(this : IDynamicKeyProviderConcept*, contextObject : Void*, key : Win32cr::Foundation::PWSTR, keyValue : Void*, metadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key.call(this, contextObject, key, keyValue, metadata)
    end
    def enumerate_keys(this : IDynamicKeyProviderConcept*, contextObject : Void*, ppEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_keys.call(this, contextObject, ppEnumerator)
    end

  end

  @[Extern]
  record IDynamicConceptProviderConceptVtbl,
    query_interface : Proc(IDynamicConceptProviderConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDynamicConceptProviderConcept*, UInt32),
    release : Proc(IDynamicConceptProviderConcept*, UInt32),
    get_concept : Proc(IDynamicConceptProviderConcept*, Void*, LibC::GUID*, Void**, Void**, Bool*, Win32cr::Foundation::HRESULT),
    set_concept : Proc(IDynamicConceptProviderConcept*, Void*, LibC::GUID*, Void*, Void*, Win32cr::Foundation::HRESULT),
    notify_parent : Proc(IDynamicConceptProviderConcept*, Void*, Win32cr::Foundation::HRESULT),
    notify_parent_change : Proc(IDynamicConceptProviderConcept*, Void*, Win32cr::Foundation::HRESULT),
    notify_destruct : Proc(IDynamicConceptProviderConcept*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDynamicConceptProviderConcept, lpVtbl : IDynamicConceptProviderConceptVtbl* do
    GUID = LibC::GUID.new(0x95a7f7dd_u32, 0x602e_u16, 0x483f_u16, StaticArray[0x9d_u8, 0x6_u8, 0xa1_u8, 0x5c_u8, 0xe_u8, 0xe1_u8, 0x31_u8, 0x74_u8])
    def query_interface(this : IDynamicConceptProviderConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDynamicConceptProviderConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDynamicConceptProviderConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_concept(this : IDynamicConceptProviderConcept*, contextObject : Void*, conceptId : LibC::GUID*, conceptInterface : Void**, conceptMetadata : Void**, hasConcept : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_concept.call(this, contextObject, conceptId, conceptInterface, conceptMetadata, hasConcept)
    end
    def set_concept(this : IDynamicConceptProviderConcept*, contextObject : Void*, conceptId : LibC::GUID*, conceptInterface : Void*, conceptMetadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_concept.call(this, contextObject, conceptId, conceptInterface, conceptMetadata)
    end
    def notify_parent(this : IDynamicConceptProviderConcept*, parentModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_parent.call(this, parentModel)
    end
    def notify_parent_change(this : IDynamicConceptProviderConcept*, parentModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_parent_change.call(this, parentModel)
    end
    def notify_destruct(this : IDynamicConceptProviderConcept*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_destruct.call(this)
    end

  end

  @[Extern]
  record IDataModelScriptHostContextVtbl,
    query_interface : Proc(IDataModelScriptHostContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptHostContext*, UInt32),
    release : Proc(IDataModelScriptHostContext*, UInt32),
    notify_script_change : Proc(IDataModelScriptHostContext*, Void*, Win32cr::System::Diagnostics::Debug::ScriptChangeKind, Win32cr::Foundation::HRESULT),
    get_namespace_object : Proc(IDataModelScriptHostContext*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptHostContext, lpVtbl : IDataModelScriptHostContextVtbl* do
    GUID = LibC::GUID.new(0x14d366a_u32, 0x1f23_u16, 0x4981_u16, StaticArray[0x92_u8, 0x19_u8, 0xb2_u8, 0xdb_u8, 0x8b_u8, 0x40_u8, 0x20_u8, 0x54_u8])
    def query_interface(this : IDataModelScriptHostContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptHostContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptHostContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_script_change(this : IDataModelScriptHostContext*, script : Void*, changeKind : Win32cr::System::Diagnostics::Debug::ScriptChangeKind) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_script_change.call(this, script, changeKind)
    end
    def get_namespace_object(this : IDataModelScriptHostContext*, namespaceObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespace_object.call(this, namespaceObject)
    end

  end

  @[Extern]
  record IDebugHostScriptHostVtbl,
    query_interface : Proc(IDebugHostScriptHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostScriptHost*, UInt32),
    release : Proc(IDebugHostScriptHost*, UInt32),
    create_context : Proc(IDebugHostScriptHost*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostScriptHost, lpVtbl : IDebugHostScriptHostVtbl* do
    GUID = LibC::GUID.new(0xb70334a4_u32, 0xb92c_u16, 0x4570_u16, StaticArray[0x93_u8, 0xa1_u8, 0xd3_u8, 0xeb_u8, 0x68_u8, 0x66_u8, 0x49_u8, 0xa0_u8])
    def query_interface(this : IDebugHostScriptHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostScriptHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostScriptHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_context(this : IDebugHostScriptHost*, script : Void*, scriptContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_context.call(this, script, scriptContext)
    end

  end

  @[Extern]
  record IDataModelNameBinderVtbl,
    query_interface : Proc(IDataModelNameBinder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelNameBinder*, UInt32),
    release : Proc(IDataModelNameBinder*, UInt32),
    bind_value : Proc(IDataModelNameBinder*, Void*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    bind_reference : Proc(IDataModelNameBinder*, Void*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    enumerate_values : Proc(IDataModelNameBinder*, Void*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_references : Proc(IDataModelNameBinder*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelNameBinder, lpVtbl : IDataModelNameBinderVtbl* do
    GUID = LibC::GUID.new(0xaf352b7b_u32, 0x8292_u16, 0x4c01_u16, StaticArray[0xb3_u8, 0x60_u8, 0x2d_u8, 0xc3_u8, 0x69_u8, 0x6c_u8, 0x65_u8, 0xe7_u8])
    def query_interface(this : IDataModelNameBinder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelNameBinder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelNameBinder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def bind_value(this : IDataModelNameBinder*, contextObject : Void*, name : Win32cr::Foundation::PWSTR, value : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_value.call(this, contextObject, name, value, metadata)
    end
    def bind_reference(this : IDataModelNameBinder*, contextObject : Void*, name : Win32cr::Foundation::PWSTR, reference : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_reference.call(this, contextObject, name, reference, metadata)
    end
    def enumerate_values(this : IDataModelNameBinder*, contextObject : Void*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_values.call(this, contextObject, enumerator)
    end
    def enumerate_references(this : IDataModelNameBinder*, contextObject : Void*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_references.call(this, contextObject, enumerator)
    end

  end

  @[Extern]
  record IModelKeyReference2Vtbl,
    query_interface : Proc(IModelKeyReference2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IModelKeyReference2*, UInt32),
    release : Proc(IModelKeyReference2*, UInt32),
    get_key_name : Proc(IModelKeyReference2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_original_object : Proc(IModelKeyReference2*, Void**, Win32cr::Foundation::HRESULT),
    get_context_object : Proc(IModelKeyReference2*, Void**, Win32cr::Foundation::HRESULT),
    get_key : Proc(IModelKeyReference2*, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_key_value : Proc(IModelKeyReference2*, Void**, Void**, Win32cr::Foundation::HRESULT),
    set_key : Proc(IModelKeyReference2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    set_key_value : Proc(IModelKeyReference2*, Void*, Win32cr::Foundation::HRESULT),
    override_context_object : Proc(IModelKeyReference2*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IModelKeyReference2, lpVtbl : IModelKeyReference2Vtbl* do
    GUID = LibC::GUID.new(0x80e2f7c5_u32, 0x7159_u16, 0x4e92_u16, StaticArray[0x88_u8, 0x7e_u8, 0x7e_u8, 0x3_u8, 0x47_u8, 0xe8_u8, 0x84_u8, 0x6_u8])
    def query_interface(this : IModelKeyReference2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IModelKeyReference2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IModelKeyReference2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_key_name(this : IModelKeyReference2*, keyName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_name.call(this, keyName)
    end
    def get_original_object(this : IModelKeyReference2*, originalObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_object.call(this, originalObject)
    end
    def get_context_object(this : IModelKeyReference2*, containingObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_object.call(this, containingObject)
    end
    def get_key(this : IModelKeyReference2*, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key.call(this, object, metadata)
    end
    def get_key_value(this : IModelKeyReference2*, object : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_value.call(this, object, metadata)
    end
    def set_key(this : IModelKeyReference2*, object : Void*, metadata : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key.call(this, object, metadata)
    end
    def set_key_value(this : IModelKeyReference2*, object : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key_value.call(this, object)
    end
    def override_context_object(this : IModelKeyReference2*, newContextObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.override_context_object.call(this, newContextObject)
    end

  end

  @[Extern]
  record IDebugHostEvaluator2Vtbl,
    query_interface : Proc(IDebugHostEvaluator2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostEvaluator2*, UInt32),
    release : Proc(IDebugHostEvaluator2*, UInt32),
    evaluate_expression : Proc(IDebugHostEvaluator2*, Void*, Win32cr::Foundation::PWSTR, Void*, Void**, Void**, Win32cr::Foundation::HRESULT),
    evaluate_extended_expression : Proc(IDebugHostEvaluator2*, Void*, Win32cr::Foundation::PWSTR, Void*, Void**, Void**, Win32cr::Foundation::HRESULT),
    assign_to : Proc(IDebugHostEvaluator2*, Void*, Void*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostEvaluator2, lpVtbl : IDebugHostEvaluator2Vtbl* do
    GUID = LibC::GUID.new(0xa117a435_u32, 0x1fb4_u16, 0x4092_u16, StaticArray[0xa2_u8, 0xab_u8, 0xa9_u8, 0x29_u8, 0x57_u8, 0x6c_u8, 0x1e_u8, 0x87_u8])
    def query_interface(this : IDebugHostEvaluator2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostEvaluator2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostEvaluator2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def evaluate_expression(this : IDebugHostEvaluator2*, context : Void*, expression : Win32cr::Foundation::PWSTR, bindingContext : Void*, result : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_expression.call(this, context, expression, bindingContext, result, metadata)
    end
    def evaluate_extended_expression(this : IDebugHostEvaluator2*, context : Void*, expression : Win32cr::Foundation::PWSTR, bindingContext : Void*, result : Void**, metadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate_extended_expression.call(this, context, expression, bindingContext, result, metadata)
    end
    def assign_to(this : IDebugHostEvaluator2*, assignmentReference : Void*, assignmentValue : Void*, assignmentResult : Void**, assignmentMetadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assign_to.call(this, assignmentReference, assignmentValue, assignmentResult, assignmentMetadata)
    end

  end

  @[Extern]
  record IDataModelManager2Vtbl,
    query_interface : Proc(IDataModelManager2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelManager2*, UInt32),
    release : Proc(IDataModelManager2*, UInt32),
    close : Proc(IDataModelManager2*, Win32cr::Foundation::HRESULT),
    create_no_value : Proc(IDataModelManager2*, Void**, Win32cr::Foundation::HRESULT),
    create_error_object : Proc(IDataModelManager2*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_typed_object : Proc(IDataModelManager2*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_typed_object_reference : Proc(IDataModelManager2*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_synthetic_object : Proc(IDataModelManager2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_data_model_object : Proc(IDataModelManager2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_intrinsic_object : Proc(IDataModelManager2*, Win32cr::System::Diagnostics::Debug::ModelObjectKind, Win32cr::System::Com::VARIANT*, Void**, Win32cr::Foundation::HRESULT),
    create_typed_intrinsic_object : Proc(IDataModelManager2*, Win32cr::System::Com::VARIANT*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_model_for_type_signature : Proc(IDataModelManager2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_model_for_type : Proc(IDataModelManager2*, Void*, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    register_model_for_type_signature : Proc(IDataModelManager2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    unregister_model_for_type_signature : Proc(IDataModelManager2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    register_extension_for_type_signature : Proc(IDataModelManager2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    unregister_extension_for_type_signature : Proc(IDataModelManager2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    create_metadata_store : Proc(IDataModelManager2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_root_namespace : Proc(IDataModelManager2*, Void**, Win32cr::Foundation::HRESULT),
    register_named_model : Proc(IDataModelManager2*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    unregister_named_model : Proc(IDataModelManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acquire_named_model : Proc(IDataModelManager2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    acquire_sub_namespace : Proc(IDataModelManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_typed_intrinsic_object_ex : Proc(IDataModelManager2*, Void*, Win32cr::System::Com::VARIANT*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelManager2, lpVtbl : IDataModelManager2Vtbl* do
    GUID = LibC::GUID.new(0xf412c5ea_u32, 0x2284_u16, 0x4622_u16, StaticArray[0xa6_u8, 0x60_u8, 0xa6_u8, 0x97_u8, 0x16_u8, 0xd_u8, 0x33_u8, 0x12_u8])
    def query_interface(this : IDataModelManager2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelManager2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelManager2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def close(this : IDataModelManager2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def create_no_value(this : IDataModelManager2*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_no_value.call(this, object)
    end
    def create_error_object(this : IDataModelManager2*, hrError : Win32cr::Foundation::HRESULT, pwszMessage : Win32cr::Foundation::PWSTR, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_error_object.call(this, hrError, pwszMessage, object)
    end
    def create_typed_object(this : IDataModelManager2*, context : Void*, objectLocation : Win32cr::System::Diagnostics::Debug::Location, objectType : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_object.call(this, context, objectLocation, objectType, object)
    end
    def create_typed_object_reference(this : IDataModelManager2*, context : Void*, objectLocation : Win32cr::System::Diagnostics::Debug::Location, objectType : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_object_reference.call(this, context, objectLocation, objectType, object)
    end
    def create_synthetic_object(this : IDataModelManager2*, context : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_synthetic_object.call(this, context, object)
    end
    def create_data_model_object(this : IDataModelManager2*, dataModel : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_data_model_object.call(this, dataModel, object)
    end
    def create_intrinsic_object(this : IDataModelManager2*, objectKind : Win32cr::System::Diagnostics::Debug::ModelObjectKind, intrinsicData : Win32cr::System::Com::VARIANT*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_intrinsic_object.call(this, objectKind, intrinsicData, object)
    end
    def create_typed_intrinsic_object(this : IDataModelManager2*, intrinsicData : Win32cr::System::Com::VARIANT*, type__ : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_intrinsic_object.call(this, intrinsicData, type__, object)
    end
    def get_model_for_type_signature(this : IDataModelManager2*, typeSignature : Void*, dataModel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_model_for_type_signature.call(this, typeSignature, dataModel)
    end
    def get_model_for_type(this : IDataModelManager2*, type__ : Void*, dataModel : Void**, typeSignature : Void**, wildcardMatches : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_model_for_type.call(this, type__, dataModel, typeSignature, wildcardMatches)
    end
    def register_model_for_type_signature(this : IDataModelManager2*, typeSignature : Void*, dataModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_model_for_type_signature.call(this, typeSignature, dataModel)
    end
    def unregister_model_for_type_signature(this : IDataModelManager2*, dataModel : Void*, typeSignature : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_model_for_type_signature.call(this, dataModel, typeSignature)
    end
    def register_extension_for_type_signature(this : IDataModelManager2*, typeSignature : Void*, dataModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_extension_for_type_signature.call(this, typeSignature, dataModel)
    end
    def unregister_extension_for_type_signature(this : IDataModelManager2*, dataModel : Void*, typeSignature : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_extension_for_type_signature.call(this, dataModel, typeSignature)
    end
    def create_metadata_store(this : IDataModelManager2*, parentStore : Void*, metadataStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_metadata_store.call(this, parentStore, metadataStore)
    end
    def get_root_namespace(this : IDataModelManager2*, rootNamespace : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_namespace.call(this, rootNamespace)
    end
    def register_named_model(this : IDataModelManager2*, modelName : Win32cr::Foundation::PWSTR, modeObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_named_model.call(this, modelName, modeObject)
    end
    def unregister_named_model(this : IDataModelManager2*, modelName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_named_model.call(this, modelName)
    end
    def acquire_named_model(this : IDataModelManager2*, modelName : Win32cr::Foundation::PWSTR, modelObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acquire_named_model.call(this, modelName, modelObject)
    end
    def acquire_sub_namespace(this : IDataModelManager2*, modelName : Win32cr::Foundation::PWSTR, subNamespaceModelName : Win32cr::Foundation::PWSTR, accessName : Win32cr::Foundation::PWSTR, metadata : Void*, namespaceModelObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acquire_sub_namespace.call(this, modelName, subNamespaceModelName, accessName, metadata, namespaceModelObject)
    end
    def create_typed_intrinsic_object_ex(this : IDataModelManager2*, context : Void*, intrinsicData : Win32cr::System::Com::VARIANT*, type__ : Void*, object : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_typed_intrinsic_object_ex.call(this, context, intrinsicData, type__, object)
    end

  end

  @[Extern]
  record IDebugHostMemory2Vtbl,
    query_interface : Proc(IDebugHostMemory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostMemory2*, UInt32),
    release : Proc(IDebugHostMemory2*, UInt32),
    read_bytes : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_bytes : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, Void*, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    read_pointers : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    write_pointers : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt64, UInt64*, Win32cr::Foundation::HRESULT),
    get_display_string_for_location : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, UInt8, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    linearize_location : Proc(IDebugHostMemory2*, Void*, Win32cr::System::Diagnostics::Debug::Location, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostMemory2, lpVtbl : IDebugHostMemory2Vtbl* do
    GUID = LibC::GUID.new(0xeea033de_u32, 0x38f6_u16, 0x416b_u16, StaticArray[0xa2_u8, 0x51_u8, 0x1d_u8, 0x37_u8, 0x71_u8, 0x0_u8, 0x12_u8, 0x70_u8])
    def query_interface(this : IDebugHostMemory2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostMemory2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostMemory2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_bytes(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, buffer : Void*, bufferSize : UInt64, bytesRead : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bytes.call(this, context, location, buffer, bufferSize, bytesRead)
    end
    def write_bytes(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, buffer : Void*, bufferSize : UInt64, bytesWritten : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_bytes.call(this, context, location, buffer, bufferSize, bytesWritten)
    end
    def read_pointers(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, count : UInt64, pointers : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_pointers.call(this, context, location, count, pointers)
    end
    def write_pointers(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, count : UInt64, pointers : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_pointers.call(this, context, location, count, pointers)
    end
    def get_display_string_for_location(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, verbose : UInt8, locationName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_string_for_location.call(this, context, location, verbose, locationName)
    end
    def linearize_location(this : IDebugHostMemory2*, context : Void*, location : Win32cr::System::Diagnostics::Debug::Location, pLinearizedLocation : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.linearize_location.call(this, context, location, pLinearizedLocation)
    end

  end

  @[Extern]
  record IDebugHostExtensibilityVtbl,
    query_interface : Proc(IDebugHostExtensibility*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostExtensibility*, UInt32),
    release : Proc(IDebugHostExtensibility*, UInt32),
    create_function_alias : Proc(IDebugHostExtensibility*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    destroy_function_alias : Proc(IDebugHostExtensibility*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostExtensibility, lpVtbl : IDebugHostExtensibilityVtbl* do
    GUID = LibC::GUID.new(0x3c2b24e1_u32, 0x11d0_u16, 0x4f86_u16, StaticArray[0x8a_u8, 0xe5_u8, 0x4d_u8, 0xf1_u8, 0x66_u8, 0xf7_u8, 0x32_u8, 0x53_u8])
    def query_interface(this : IDebugHostExtensibility*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostExtensibility*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostExtensibility*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_function_alias(this : IDebugHostExtensibility*, aliasName : Win32cr::Foundation::PWSTR, functionObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_function_alias.call(this, aliasName, functionObject)
    end
    def destroy_function_alias(this : IDebugHostExtensibility*, aliasName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destroy_function_alias.call(this, aliasName)
    end

  end

  @[Extern]
  record IDataModelScriptDebugClientVtbl,
    query_interface : Proc(IDataModelScriptDebugClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugClient*, UInt32),
    release : Proc(IDataModelScriptDebugClient*, UInt32),
    notify_debug_event : Proc(IDataModelScriptDebugClient*, Win32cr::System::Diagnostics::Debug::ScriptDebugEventInformation*, Void*, Void*, Win32cr::System::Diagnostics::Debug::ScriptExecutionKind*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugClient, lpVtbl : IDataModelScriptDebugClientVtbl* do
    GUID = LibC::GUID.new(0x53159b6d_u32, 0xd4c4_u16, 0x471b_u16, StaticArray[0xa8_u8, 0x63_u8, 0x5b_u8, 0x11_u8, 0xc_u8, 0xa8_u8, 0x0_u8, 0xca_u8])
    def query_interface(this : IDataModelScriptDebugClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_debug_event(this : IDataModelScriptDebugClient*, pEventInfo : Win32cr::System::Diagnostics::Debug::ScriptDebugEventInformation*, pScript : Void*, pEventDataObject : Void*, resumeEventKind : Win32cr::System::Diagnostics::Debug::ScriptExecutionKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_debug_event.call(this, pEventInfo, pScript, pEventDataObject, resumeEventKind)
    end

  end

  @[Extern]
  record IDataModelScriptDebugVariableSetEnumeratorVtbl,
    query_interface : Proc(IDataModelScriptDebugVariableSetEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugVariableSetEnumerator*, UInt32),
    release : Proc(IDataModelScriptDebugVariableSetEnumerator*, UInt32),
    reset : Proc(IDataModelScriptDebugVariableSetEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDataModelScriptDebugVariableSetEnumerator*, Win32cr::Foundation::BSTR*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugVariableSetEnumerator, lpVtbl : IDataModelScriptDebugVariableSetEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xf9feed7_u32, 0xd045_u16, 0x4ac3_u16, StaticArray[0x98_u8, 0xa8_u8, 0xa9_u8, 0x89_u8, 0x42_u8, 0xcf_u8, 0x6a_u8, 0x35_u8])
    def query_interface(this : IDataModelScriptDebugVariableSetEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugVariableSetEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugVariableSetEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IDataModelScriptDebugVariableSetEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IDataModelScriptDebugVariableSetEnumerator*, variableName : Win32cr::Foundation::BSTR*, variableValue : Void**, variableMetadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, variableName, variableValue, variableMetadata)
    end

  end

  @[Extern]
  record IDataModelScriptDebugStackFrameVtbl,
    query_interface : Proc(IDataModelScriptDebugStackFrame*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugStackFrame*, UInt32),
    release : Proc(IDataModelScriptDebugStackFrame*, UInt32),
    get_name : Proc(IDataModelScriptDebugStackFrame*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_position : Proc(IDataModelScriptDebugStackFrame*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    is_transition_point : Proc(IDataModelScriptDebugStackFrame*, Bool*, Win32cr::Foundation::HRESULT),
    get_transition : Proc(IDataModelScriptDebugStackFrame*, Void**, Bool*, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IDataModelScriptDebugStackFrame*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    enumerate_locals : Proc(IDataModelScriptDebugStackFrame*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_arguments : Proc(IDataModelScriptDebugStackFrame*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugStackFrame, lpVtbl : IDataModelScriptDebugStackFrameVtbl* do
    GUID = LibC::GUID.new(0xdec6ed5e_u32, 0x6360_u16, 0x4941_u16, StaticArray[0xab_u8, 0x4c_u8, 0xa2_u8, 0x64_u8, 0x9_u8, 0xde_u8, 0x4f_u8, 0x82_u8])
    def query_interface(this : IDataModelScriptDebugStackFrame*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugStackFrame*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugStackFrame*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDataModelScriptDebugStackFrame*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_position(this : IDataModelScriptDebugStackFrame*, position : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, positionSpanEnd : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, lineText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position.call(this, position, positionSpanEnd, lineText)
    end
    def is_transition_point(this : IDataModelScriptDebugStackFrame*, isTransitionPoint : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_transition_point.call(this, isTransitionPoint)
    end
    def get_transition(this : IDataModelScriptDebugStackFrame*, transitionScript : Void**, isTransitionContiguous : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transition.call(this, transitionScript, isTransitionContiguous)
    end
    def evaluate(this : IDataModelScriptDebugStackFrame*, pwszExpression : Win32cr::Foundation::PWSTR, ppResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, pwszExpression, ppResult)
    end
    def enumerate_locals(this : IDataModelScriptDebugStackFrame*, variablesEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_locals.call(this, variablesEnum)
    end
    def enumerate_arguments(this : IDataModelScriptDebugStackFrame*, variablesEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_arguments.call(this, variablesEnum)
    end

  end

  @[Extern]
  record IDataModelScriptDebugStackVtbl,
    query_interface : Proc(IDataModelScriptDebugStack*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugStack*, UInt32),
    release : Proc(IDataModelScriptDebugStack*, UInt32),
    get_frame_count : Proc(IDataModelScriptDebugStack*, UInt64),
    get_stack_frame : Proc(IDataModelScriptDebugStack*, UInt64, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugStack, lpVtbl : IDataModelScriptDebugStackVtbl* do
    GUID = LibC::GUID.new(0x51364dd_u32, 0xe449_u16, 0x443e_u16, StaticArray[0x97_u8, 0x62_u8, 0xfe_u8, 0x57_u8, 0x8f_u8, 0x4a_u8, 0x54_u8, 0x73_u8])
    def query_interface(this : IDataModelScriptDebugStack*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugStack*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugStack*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_frame_count(this : IDataModelScriptDebugStack*) : UInt64
      @lpVtbl.try &.value.get_frame_count.call(this)
    end
    def get_stack_frame(this : IDataModelScriptDebugStack*, frameNumber : UInt64, stackFrame : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_frame.call(this, frameNumber, stackFrame)
    end

  end

  @[Extern]
  record IDataModelScriptDebugBreakpointVtbl,
    query_interface : Proc(IDataModelScriptDebugBreakpoint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugBreakpoint*, UInt32),
    release : Proc(IDataModelScriptDebugBreakpoint*, UInt32),
    get_id : Proc(IDataModelScriptDebugBreakpoint*, UInt64),
    is_enabled : Proc(IDataModelScriptDebugBreakpoint*, Bool),
    enable : Proc(IDataModelScriptDebugBreakpoint*, Void),
    disable : Proc(IDataModelScriptDebugBreakpoint*, Void),
    remove : Proc(IDataModelScriptDebugBreakpoint*, Void),
    get_position : Proc(IDataModelScriptDebugBreakpoint*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugBreakpoint, lpVtbl : IDataModelScriptDebugBreakpointVtbl* do
    GUID = LibC::GUID.new(0x6bb27b35_u32, 0x2e6_u16, 0x47cb_u16, StaticArray[0x90_u8, 0xa0_u8, 0x53_u8, 0x71_u8, 0x24_u8, 0x40_u8, 0x32_u8, 0xde_u8])
    def query_interface(this : IDataModelScriptDebugBreakpoint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugBreakpoint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugBreakpoint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IDataModelScriptDebugBreakpoint*) : UInt64
      @lpVtbl.try &.value.get_id.call(this)
    end
    def is_enabled(this : IDataModelScriptDebugBreakpoint*) : Bool
      @lpVtbl.try &.value.is_enabled.call(this)
    end
    def enable(this : IDataModelScriptDebugBreakpoint*) : Void
      @lpVtbl.try &.value.enable.call(this)
    end
    def disable(this : IDataModelScriptDebugBreakpoint*) : Void
      @lpVtbl.try &.value.disable.call(this)
    end
    def remove(this : IDataModelScriptDebugBreakpoint*) : Void
      @lpVtbl.try &.value.remove.call(this)
    end
    def get_position(this : IDataModelScriptDebugBreakpoint*, position : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, positionSpanEnd : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, lineText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position.call(this, position, positionSpanEnd, lineText)
    end

  end

  @[Extern]
  record IDataModelScriptDebugBreakpointEnumeratorVtbl,
    query_interface : Proc(IDataModelScriptDebugBreakpointEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebugBreakpointEnumerator*, UInt32),
    release : Proc(IDataModelScriptDebugBreakpointEnumerator*, UInt32),
    reset : Proc(IDataModelScriptDebugBreakpointEnumerator*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDataModelScriptDebugBreakpointEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebugBreakpointEnumerator, lpVtbl : IDataModelScriptDebugBreakpointEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x39484a75_u32, 0xb4f3_u16, 0x4799_u16, StaticArray[0x86_u8, 0xda_u8, 0x69_u8, 0x1a_u8, 0xfa_u8, 0x57_u8, 0xb2_u8, 0x99_u8])
    def query_interface(this : IDataModelScriptDebugBreakpointEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebugBreakpointEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebugBreakpointEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset(this : IDataModelScriptDebugBreakpointEnumerator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_next(this : IDataModelScriptDebugBreakpointEnumerator*, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, breakpoint)
    end

  end

  @[Extern]
  record IDataModelScriptDebugVtbl,
    query_interface : Proc(IDataModelScriptDebug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebug*, UInt32),
    release : Proc(IDataModelScriptDebug*, UInt32),
    get_debug_state : Proc(IDataModelScriptDebug*, Win32cr::System::Diagnostics::Debug::ScriptDebugState),
    get_current_position : Proc(IDataModelScriptDebug*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_stack : Proc(IDataModelScriptDebug*, Void**, Win32cr::Foundation::HRESULT),
    set_breakpoint : Proc(IDataModelScriptDebug*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    find_breakpoint_by_id : Proc(IDataModelScriptDebug*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    enumerate_breakpoints : Proc(IDataModelScriptDebug*, Void**, Win32cr::Foundation::HRESULT),
    get_event_filter : Proc(IDataModelScriptDebug*, Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, Bool*, Win32cr::Foundation::HRESULT),
    set_event_filter : Proc(IDataModelScriptDebug*, Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, UInt8, Win32cr::Foundation::HRESULT),
    start_debugging : Proc(IDataModelScriptDebug*, Void*, Win32cr::Foundation::HRESULT),
    stop_debugging : Proc(IDataModelScriptDebug*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebug, lpVtbl : IDataModelScriptDebugVtbl* do
    GUID = LibC::GUID.new(0xde8e0945_u32, 0x9750_u16, 0x4471_u16, StaticArray[0xab_u8, 0x76_u8, 0xa8_u8, 0xf7_u8, 0x9d_u8, 0x6e_u8, 0xc3_u8, 0x50_u8])
    def query_interface(this : IDataModelScriptDebug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_debug_state(this : IDataModelScriptDebug*) : Win32cr::System::Diagnostics::Debug::ScriptDebugState
      @lpVtbl.try &.value.get_debug_state.call(this)
    end
    def get_current_position(this : IDataModelScriptDebug*, currentPosition : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, positionSpanEnd : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, lineText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, currentPosition, positionSpanEnd, lineText)
    end
    def get_stack(this : IDataModelScriptDebug*, stack : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack.call(this, stack)
    end
    def set_breakpoint(this : IDataModelScriptDebug*, linePosition : UInt32, columnPosition : UInt32, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_breakpoint.call(this, linePosition, columnPosition, breakpoint)
    end
    def find_breakpoint_by_id(this : IDataModelScriptDebug*, breakpointId : UInt64, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_breakpoint_by_id.call(this, breakpointId, breakpoint)
    end
    def enumerate_breakpoints(this : IDataModelScriptDebug*, breakpointEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_breakpoints.call(this, breakpointEnum)
    end
    def get_event_filter(this : IDataModelScriptDebug*, eventFilter : Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, isBreakEnabled : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter.call(this, eventFilter, isBreakEnabled)
    end
    def set_event_filter(this : IDataModelScriptDebug*, eventFilter : Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, isBreakEnabled : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter.call(this, eventFilter, isBreakEnabled)
    end
    def start_debugging(this : IDataModelScriptDebug*, debugClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_debugging.call(this, debugClient)
    end
    def stop_debugging(this : IDataModelScriptDebug*, debugClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_debugging.call(this, debugClient)
    end

  end

  @[Extern]
  record IDataModelScriptDebug2Vtbl,
    query_interface : Proc(IDataModelScriptDebug2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataModelScriptDebug2*, UInt32),
    release : Proc(IDataModelScriptDebug2*, UInt32),
    get_debug_state : Proc(IDataModelScriptDebug2*, Win32cr::System::Diagnostics::Debug::ScriptDebugState),
    get_current_position : Proc(IDataModelScriptDebug2*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_stack : Proc(IDataModelScriptDebug2*, Void**, Win32cr::Foundation::HRESULT),
    set_breakpoint : Proc(IDataModelScriptDebug2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    find_breakpoint_by_id : Proc(IDataModelScriptDebug2*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    enumerate_breakpoints : Proc(IDataModelScriptDebug2*, Void**, Win32cr::Foundation::HRESULT),
    get_event_filter : Proc(IDataModelScriptDebug2*, Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, Bool*, Win32cr::Foundation::HRESULT),
    set_event_filter : Proc(IDataModelScriptDebug2*, Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, UInt8, Win32cr::Foundation::HRESULT),
    start_debugging : Proc(IDataModelScriptDebug2*, Void*, Win32cr::Foundation::HRESULT),
    stop_debugging : Proc(IDataModelScriptDebug2*, Void*, Win32cr::Foundation::HRESULT),
    set_breakpoint_at_function : Proc(IDataModelScriptDebug2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataModelScriptDebug2, lpVtbl : IDataModelScriptDebug2Vtbl* do
    GUID = LibC::GUID.new(0xcbb10ed3_u32, 0x839e_u16, 0x426c_u16, StaticArray[0x92_u8, 0x43_u8, 0xe2_u8, 0x35_u8, 0x35_u8, 0xc1_u8, 0xae_u8, 0x1a_u8])
    def query_interface(this : IDataModelScriptDebug2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataModelScriptDebug2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataModelScriptDebug2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_debug_state(this : IDataModelScriptDebug2*) : Win32cr::System::Diagnostics::Debug::ScriptDebugState
      @lpVtbl.try &.value.get_debug_state.call(this)
    end
    def get_current_position(this : IDataModelScriptDebug2*, currentPosition : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, positionSpanEnd : Win32cr::System::Diagnostics::Debug::ScriptDebugPosition*, lineText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, currentPosition, positionSpanEnd, lineText)
    end
    def get_stack(this : IDataModelScriptDebug2*, stack : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack.call(this, stack)
    end
    def set_breakpoint(this : IDataModelScriptDebug2*, linePosition : UInt32, columnPosition : UInt32, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_breakpoint.call(this, linePosition, columnPosition, breakpoint)
    end
    def find_breakpoint_by_id(this : IDataModelScriptDebug2*, breakpointId : UInt64, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_breakpoint_by_id.call(this, breakpointId, breakpoint)
    end
    def enumerate_breakpoints(this : IDataModelScriptDebug2*, breakpointEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_breakpoints.call(this, breakpointEnum)
    end
    def get_event_filter(this : IDataModelScriptDebug2*, eventFilter : Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, isBreakEnabled : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_filter.call(this, eventFilter, isBreakEnabled)
    end
    def set_event_filter(this : IDataModelScriptDebug2*, eventFilter : Win32cr::System::Diagnostics::Debug::ScriptDebugEventFilter, isBreakEnabled : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_filter.call(this, eventFilter, isBreakEnabled)
    end
    def start_debugging(this : IDataModelScriptDebug2*, debugClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_debugging.call(this, debugClient)
    end
    def stop_debugging(this : IDataModelScriptDebug2*, debugClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_debugging.call(this, debugClient)
    end
    def set_breakpoint_at_function(this : IDataModelScriptDebug2*, functionName : Win32cr::Foundation::PWSTR, breakpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_breakpoint_at_function.call(this, functionName, breakpoint)
    end

  end

  @[Extern]
  record IDebugHostModule2Vtbl,
    query_interface : Proc(IDebugHostModule2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHostModule2*, UInt32),
    release : Proc(IDebugHostModule2*, UInt32),
    get_context : Proc(IDebugHostModule2*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_children : Proc(IDebugHostModule2*, Win32cr::System::Diagnostics::Debug::SymbolKind, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_symbol_kind : Proc(IDebugHostModule2*, Win32cr::System::Diagnostics::Debug::SymbolKind*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugHostModule2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDebugHostModule2*, Void**, Win32cr::Foundation::HRESULT),
    get_containing_module : Proc(IDebugHostModule2*, Void**, Win32cr::Foundation::HRESULT),
    compare_against : Proc(IDebugHostModule2*, Void*, UInt32, Bool*, Win32cr::Foundation::HRESULT),
    get_image_name : Proc(IDebugHostModule2*, UInt8, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_base_location : Proc(IDebugHostModule2*, Win32cr::System::Diagnostics::Debug::Location*, Win32cr::Foundation::HRESULT),
    get_version : Proc(IDebugHostModule2*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    find_type_by_name : Proc(IDebugHostModule2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    find_symbol_by_rva : Proc(IDebugHostModule2*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    find_symbol_by_name : Proc(IDebugHostModule2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    find_containing_symbol_by_rva : Proc(IDebugHostModule2*, UInt64, Void**, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHostModule2, lpVtbl : IDebugHostModule2Vtbl* do
    GUID = LibC::GUID.new(0xb51887e8_u32, 0xbcd0_u16, 0x4e8f_u16, StaticArray[0xa8_u8, 0xc7_u8, 0x43_u8, 0x43_u8, 0x98_u8, 0xb7_u8, 0x8c_u8, 0x37_u8])
    def query_interface(this : IDebugHostModule2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHostModule2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHostModule2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context(this : IDebugHostModule2*, context : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, context)
    end
    def enumerate_children(this : IDebugHostModule2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind, name : Win32cr::Foundation::PWSTR, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_children.call(this, kind, name, ppEnum)
    end
    def get_symbol_kind(this : IDebugHostModule2*, kind : Win32cr::System::Diagnostics::Debug::SymbolKind*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_kind.call(this, kind)
    end
    def get_name(this : IDebugHostModule2*, symbolName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, symbolName)
    end
    def get_type(this : IDebugHostModule2*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_containing_module(this : IDebugHostModule2*, containingModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_containing_module.call(this, containingModule)
    end
    def compare_against(this : IDebugHostModule2*, pComparisonSymbol : Void*, comparisonFlags : UInt32, pMatches : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_against.call(this, pComparisonSymbol, comparisonFlags, pMatches)
    end
    def get_image_name(this : IDebugHostModule2*, allowPath : UInt8, imageName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_name.call(this, allowPath, imageName)
    end
    def get_base_location(this : IDebugHostModule2*, moduleBaseLocation : Win32cr::System::Diagnostics::Debug::Location*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_base_location.call(this, moduleBaseLocation)
    end
    def get_version(this : IDebugHostModule2*, fileVersion : UInt64*, productVersion : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, fileVersion, productVersion)
    end
    def find_type_by_name(this : IDebugHostModule2*, typeName : Win32cr::Foundation::PWSTR, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_type_by_name.call(this, typeName, type__)
    end
    def find_symbol_by_rva(this : IDebugHostModule2*, rva : UInt64, symbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_symbol_by_rva.call(this, rva, symbol)
    end
    def find_symbol_by_name(this : IDebugHostModule2*, symbolName : Win32cr::Foundation::PWSTR, symbol : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_symbol_by_name.call(this, symbolName, symbol)
    end
    def find_containing_symbol_by_rva(this : IDebugHostModule2*, rva : UInt64, symbol : Void**, offset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_containing_symbol_by_rva.call(this, rva, symbol, offset)
    end

  end

  @[Extern]
  record IComparableConceptVtbl,
    query_interface : Proc(IComparableConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComparableConcept*, UInt32),
    release : Proc(IComparableConcept*, UInt32),
    compare_objects : Proc(IComparableConcept*, Void*, Void*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IComparableConcept, lpVtbl : IComparableConceptVtbl* do
    GUID = LibC::GUID.new(0xa7830646_u32, 0x9f0c_u16, 0x4a31_u16, StaticArray[0xba_u8, 0x19_u8, 0x50_u8, 0x3f_u8, 0x33_u8, 0xe6_u8, 0xc8_u8, 0xa3_u8])
    def query_interface(this : IComparableConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComparableConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComparableConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def compare_objects(this : IComparableConcept*, contextObject : Void*, otherObject : Void*, comparisonResult : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_objects.call(this, contextObject, otherObject, comparisonResult)
    end

  end

  @[Extern]
  record IEquatableConceptVtbl,
    query_interface : Proc(IEquatableConcept*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEquatableConcept*, UInt32),
    release : Proc(IEquatableConcept*, UInt32),
    are_objects_equal : Proc(IEquatableConcept*, Void*, Void*, Bool*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEquatableConcept, lpVtbl : IEquatableConceptVtbl* do
    GUID = LibC::GUID.new(0xc52d5d3d_u32, 0x609d_u16, 0x4d5d_u16, StaticArray[0x8a_u8, 0x82_u8, 0x46_u8, 0xb0_u8, 0xac_u8, 0xde_u8, 0xc4_u8, 0xf4_u8])
    def query_interface(this : IEquatableConcept*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEquatableConcept*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEquatableConcept*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def are_objects_equal(this : IEquatableConcept*, contextObject : Void*, otherObject : Void*, isEqual : Bool*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.are_objects_equal.call(this, contextObject, otherObject, isEqual)
    end

  end

  @[Extern]
  record IActiveScriptSiteVtbl,
    query_interface : Proc(IActiveScriptSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSite*, UInt32),
    release : Proc(IActiveScriptSite*, UInt32),
    get_lcid : Proc(IActiveScriptSite*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_info : Proc(IActiveScriptSite*, Win32cr::Foundation::PWSTR, UInt32, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_doc_version_string : Proc(IActiveScriptSite*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    on_script_terminate : Proc(IActiveScriptSite*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    on_state_change : Proc(IActiveScriptSite*, Win32cr::System::Diagnostics::Debug::SCRIPTSTATE, Win32cr::Foundation::HRESULT),
    on_script_error : Proc(IActiveScriptSite*, Void*, Win32cr::Foundation::HRESULT),
    on_enter_script : Proc(IActiveScriptSite*, Win32cr::Foundation::HRESULT),
    on_leave_script : Proc(IActiveScriptSite*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSite, lpVtbl : IActiveScriptSiteVtbl* do
    GUID = LibC::GUID.new(0xdb01a1e3_u32, 0xa42b_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScriptSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_lcid(this : IActiveScriptSite*, plcid : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lcid.call(this, plcid)
    end
    def get_item_info(this : IActiveScriptSite*, pstrName : Win32cr::Foundation::PWSTR, dwReturnMask : UInt32, ppiunkItem : Void**, ppti : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_info.call(this, pstrName, dwReturnMask, ppiunkItem, ppti)
    end
    def get_doc_version_string(this : IActiveScriptSite*, pbstrVersion : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_version_string.call(this, pbstrVersion)
    end
    def on_script_terminate(this : IActiveScriptSite*, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_script_terminate.call(this, pvarResult, pexcepinfo)
    end
    def on_state_change(this : IActiveScriptSite*, ssScriptState : Win32cr::System::Diagnostics::Debug::SCRIPTSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_state_change.call(this, ssScriptState)
    end
    def on_script_error(this : IActiveScriptSite*, pscripterror : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_script_error.call(this, pscripterror)
    end
    def on_enter_script(this : IActiveScriptSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_enter_script.call(this)
    end
    def on_leave_script(this : IActiveScriptSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_leave_script.call(this)
    end

  end

  @[Extern]
  record IActiveScriptErrorVtbl,
    query_interface : Proc(IActiveScriptError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptError*, UInt32),
    release : Proc(IActiveScriptError*, UInt32),
    get_exception_info : Proc(IActiveScriptError*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IActiveScriptError*, UInt32*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    get_source_line_text : Proc(IActiveScriptError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptError, lpVtbl : IActiveScriptErrorVtbl* do
    GUID = LibC::GUID.new(0xeae1ba61_u32, 0xa4ed_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScriptError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_exception_info(this : IActiveScriptError*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_info.call(this, pexcepinfo)
    end
    def get_source_position(this : IActiveScriptError*, pdwSourceContext : UInt32*, pulLineNumber : UInt32*, plCharacterPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pdwSourceContext, pulLineNumber, plCharacterPosition)
    end
    def get_source_line_text(this : IActiveScriptError*, pbstrSourceLine : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_line_text.call(this, pbstrSourceLine)
    end

  end

  @[Extern]
  record IActiveScriptError64Vtbl,
    query_interface : Proc(IActiveScriptError64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptError64*, UInt32),
    release : Proc(IActiveScriptError64*, UInt32),
    get_exception_info : Proc(IActiveScriptError64*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IActiveScriptError64*, UInt32*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    get_source_line_text : Proc(IActiveScriptError64*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_source_position64 : Proc(IActiveScriptError64*, UInt64*, UInt32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptError64, lpVtbl : IActiveScriptError64Vtbl* do
    GUID = LibC::GUID.new(0xb21fb2a1_u32, 0x5b8f_u16, 0x4963_u16, StaticArray[0x8c_u8, 0x21_u8, 0x21_u8, 0x45_u8, 0xf_u8, 0x84_u8, 0xed_u8, 0x7f_u8])
    def query_interface(this : IActiveScriptError64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptError64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptError64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_exception_info(this : IActiveScriptError64*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_info.call(this, pexcepinfo)
    end
    def get_source_position(this : IActiveScriptError64*, pdwSourceContext : UInt32*, pulLineNumber : UInt32*, plCharacterPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pdwSourceContext, pulLineNumber, plCharacterPosition)
    end
    def get_source_line_text(this : IActiveScriptError64*, pbstrSourceLine : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_line_text.call(this, pbstrSourceLine)
    end
    def get_source_position64(this : IActiveScriptError64*, pdwSourceContext : UInt64*, pulLineNumber : UInt32*, plCharacterPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position64.call(this, pdwSourceContext, pulLineNumber, plCharacterPosition)
    end

  end

  @[Extern]
  record IActiveScriptSiteWindowVtbl,
    query_interface : Proc(IActiveScriptSiteWindow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteWindow*, UInt32),
    release : Proc(IActiveScriptSiteWindow*, UInt32),
    get_window : Proc(IActiveScriptSiteWindow*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    enable_modeless : Proc(IActiveScriptSiteWindow*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteWindow, lpVtbl : IActiveScriptSiteWindowVtbl* do
    GUID = LibC::GUID.new(0xd10f6761_u32, 0x83e9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScriptSiteWindow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteWindow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteWindow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IActiveScriptSiteWindow*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def enable_modeless(this : IActiveScriptSiteWindow*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_modeless.call(this, fEnable)
    end

  end

  @[Extern]
  record IActiveScriptSiteUIControlVtbl,
    query_interface : Proc(IActiveScriptSiteUIControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteUIControl*, UInt32),
    release : Proc(IActiveScriptSiteUIControl*, UInt32),
    get_ui_behavior : Proc(IActiveScriptSiteUIControl*, Win32cr::System::Diagnostics::Debug::SCRIPTUICITEM, Win32cr::System::Diagnostics::Debug::SCRIPTUICHANDLING*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteUIControl, lpVtbl : IActiveScriptSiteUIControlVtbl* do
    GUID = LibC::GUID.new(0xaedae97e_u32, 0xd7ee_u16, 0x4796_u16, StaticArray[0xb9_u8, 0x60_u8, 0x7f_u8, 0x9_u8, 0x2a_u8, 0xe8_u8, 0x44_u8, 0xab_u8])
    def query_interface(this : IActiveScriptSiteUIControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteUIControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteUIControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ui_behavior(this : IActiveScriptSiteUIControl*, uic_item : Win32cr::System::Diagnostics::Debug::SCRIPTUICITEM, pUicHandling : Win32cr::System::Diagnostics::Debug::SCRIPTUICHANDLING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ui_behavior.call(this, uic_item, pUicHandling)
    end

  end

  @[Extern]
  record IActiveScriptSiteInterruptPollVtbl,
    query_interface : Proc(IActiveScriptSiteInterruptPoll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteInterruptPoll*, UInt32),
    release : Proc(IActiveScriptSiteInterruptPoll*, UInt32),
    query_continue : Proc(IActiveScriptSiteInterruptPoll*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteInterruptPoll, lpVtbl : IActiveScriptSiteInterruptPollVtbl* do
    GUID = LibC::GUID.new(0x539698a0_u32, 0xcdca_u16, 0x11cf_u16, StaticArray[0xa5_u8, 0xeb_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0xa0_u8, 0x63_u8])
    def query_interface(this : IActiveScriptSiteInterruptPoll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteInterruptPoll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteInterruptPoll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_continue(this : IActiveScriptSiteInterruptPoll*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_continue.call(this)
    end

  end

  @[Extern]
  record IActiveScriptVtbl,
    query_interface : Proc(IActiveScript*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScript*, UInt32),
    release : Proc(IActiveScript*, UInt32),
    set_script_site : Proc(IActiveScript*, Void*, Win32cr::Foundation::HRESULT),
    get_script_site : Proc(IActiveScript*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_script_state : Proc(IActiveScript*, Win32cr::System::Diagnostics::Debug::SCRIPTSTATE, Win32cr::Foundation::HRESULT),
    get_script_state : Proc(IActiveScript*, Win32cr::System::Diagnostics::Debug::SCRIPTSTATE*, Win32cr::Foundation::HRESULT),
    close : Proc(IActiveScript*, Win32cr::Foundation::HRESULT),
    add_named_item : Proc(IActiveScript*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    add_type_lib : Proc(IActiveScript*, LibC::GUID*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_script_dispatch : Proc(IActiveScript*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_current_script_thread_id : Proc(IActiveScript*, UInt32*, Win32cr::Foundation::HRESULT),
    get_script_thread_id : Proc(IActiveScript*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_script_thread_state : Proc(IActiveScript*, UInt32, Win32cr::System::Diagnostics::Debug::SCRIPTTHREADSTATE*, Win32cr::Foundation::HRESULT),
    interrupt_script_thread : Proc(IActiveScript*, UInt32, Win32cr::System::Com::EXCEPINFO*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IActiveScript*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScript, lpVtbl : IActiveScriptVtbl* do
    GUID = LibC::GUID.new(0xbb1a2ae1_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScript*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScript*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScript*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_script_site(this : IActiveScript*, pass : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_script_site.call(this, pass)
    end
    def get_script_site(this : IActiveScript*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_site.call(this, riid, ppvObject)
    end
    def set_script_state(this : IActiveScript*, ss : Win32cr::System::Diagnostics::Debug::SCRIPTSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_script_state.call(this, ss)
    end
    def get_script_state(this : IActiveScript*, pssState : Win32cr::System::Diagnostics::Debug::SCRIPTSTATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_state.call(this, pssState)
    end
    def close(this : IActiveScript*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def add_named_item(this : IActiveScript*, pstrName : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_named_item.call(this, pstrName, dwFlags)
    end
    def add_type_lib(this : IActiveScript*, rguidTypeLib : LibC::GUID*, dwMajor : UInt32, dwMinor : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_lib.call(this, rguidTypeLib, dwMajor, dwMinor, dwFlags)
    end
    def get_script_dispatch(this : IActiveScript*, pstrItemName : Win32cr::Foundation::PWSTR, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_dispatch.call(this, pstrItemName, ppdisp)
    end
    def get_current_script_thread_id(this : IActiveScript*, pstidThread : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_script_thread_id.call(this, pstidThread)
    end
    def get_script_thread_id(this : IActiveScript*, dwWin32ThreadId : UInt32, pstidThread : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_thread_id.call(this, dwWin32ThreadId, pstidThread)
    end
    def get_script_thread_state(this : IActiveScript*, stidThread : UInt32, pstsState : Win32cr::System::Diagnostics::Debug::SCRIPTTHREADSTATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_thread_state.call(this, stidThread, pstsState)
    end
    def interrupt_script_thread(this : IActiveScript*, stidThread : UInt32, pexcepinfo : Win32cr::System::Com::EXCEPINFO*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.interrupt_script_thread.call(this, stidThread, pexcepinfo, dwFlags)
    end
    def clone(this : IActiveScript*, ppscript : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppscript)
    end

  end

  @[Extern]
  record IActiveScriptParse32Vtbl,
    query_interface : Proc(IActiveScriptParse32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParse32*, UInt32),
    release : Proc(IActiveScriptParse32*, UInt32),
    init_new : Proc(IActiveScriptParse32*, Win32cr::Foundation::HRESULT),
    add_scriptlet : Proc(IActiveScriptParse32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::BSTR*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    parse_script_text : Proc(IActiveScriptParse32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParse32, lpVtbl : IActiveScriptParse32Vtbl* do
    GUID = LibC::GUID.new(0xbb1a2ae2_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScriptParse32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParse32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParse32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_new(this : IActiveScriptParse32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def add_scriptlet(this : IActiveScriptParse32*, pstrDefaultName : Win32cr::Foundation::PWSTR, pstrCode : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, pstrSubItemName : Win32cr::Foundation::PWSTR, pstrEventName : Win32cr::Foundation::PWSTR, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt32, ulStartingLineNumber : UInt32, dwFlags : UInt32, pbstrName : Win32cr::Foundation::BSTR*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_scriptlet.call(this, pstrDefaultName, pstrCode, pstrItemName, pstrSubItemName, pstrEventName, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, pbstrName, pexcepinfo)
    end
    def parse_script_text(this : IActiveScriptParse32*, pstrCode : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt32, ulStartingLineNumber : UInt32, dwFlags : UInt32, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_script_text.call(this, pstrCode, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, pvarResult, pexcepinfo)
    end

  end

  @[Extern]
  record IActiveScriptParse64Vtbl,
    query_interface : Proc(IActiveScriptParse64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParse64*, UInt32),
    release : Proc(IActiveScriptParse64*, UInt32),
    init_new : Proc(IActiveScriptParse64*, Win32cr::Foundation::HRESULT),
    add_scriptlet : Proc(IActiveScriptParse64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::Foundation::BSTR*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    parse_script_text : Proc(IActiveScriptParse64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParse64, lpVtbl : IActiveScriptParse64Vtbl* do
    GUID = LibC::GUID.new(0xc7ef7658_u32, 0xe1ee_u16, 0x480e_u16, StaticArray[0x97_u8, 0xea_u8, 0xd5_u8, 0x2c_u8, 0xb4_u8, 0xd7_u8, 0x6d_u8, 0x17_u8])
    def query_interface(this : IActiveScriptParse64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParse64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParse64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_new(this : IActiveScriptParse64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def add_scriptlet(this : IActiveScriptParse64*, pstrDefaultName : Win32cr::Foundation::PWSTR, pstrCode : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, pstrSubItemName : Win32cr::Foundation::PWSTR, pstrEventName : Win32cr::Foundation::PWSTR, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt64, ulStartingLineNumber : UInt32, dwFlags : UInt32, pbstrName : Win32cr::Foundation::BSTR*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_scriptlet.call(this, pstrDefaultName, pstrCode, pstrItemName, pstrSubItemName, pstrEventName, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, pbstrName, pexcepinfo)
    end
    def parse_script_text(this : IActiveScriptParse64*, pstrCode : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt64, ulStartingLineNumber : UInt32, dwFlags : UInt32, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_script_text.call(this, pstrCode, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, pvarResult, pexcepinfo)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedureOld32Vtbl,
    query_interface : Proc(IActiveScriptParseProcedureOld32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedureOld32*, UInt32),
    release : Proc(IActiveScriptParseProcedureOld32*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedureOld32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedureOld32, lpVtbl : IActiveScriptParseProcedureOld32Vtbl* do
    GUID = LibC::GUID.new(0x1cff0050_u32, 0x6fdd_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x28_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IActiveScriptParseProcedureOld32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedureOld32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedureOld32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedureOld32*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt32, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedureOld64Vtbl,
    query_interface : Proc(IActiveScriptParseProcedureOld64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedureOld64*, UInt32),
    release : Proc(IActiveScriptParseProcedureOld64*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedureOld64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedureOld64, lpVtbl : IActiveScriptParseProcedureOld64Vtbl* do
    GUID = LibC::GUID.new(0x21f57128_u32, 0x8c9_u16, 0x4638_u16, StaticArray[0xba_u8, 0x12_u8, 0x22_u8, 0xd1_u8, 0x5d_u8, 0x88_u8, 0xdc_u8, 0x5c_u8])
    def query_interface(this : IActiveScriptParseProcedureOld64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedureOld64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedureOld64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedureOld64*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt64, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedure32Vtbl,
    query_interface : Proc(IActiveScriptParseProcedure32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedure32*, UInt32),
    release : Proc(IActiveScriptParseProcedure32*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedure32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedure32, lpVtbl : IActiveScriptParseProcedure32Vtbl* do
    GUID = LibC::GUID.new(0xaa5b6a80_u32, 0xb834_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x2f_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IActiveScriptParseProcedure32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedure32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedure32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedure32*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrProcedureName : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt32, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrProcedureName, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedure64Vtbl,
    query_interface : Proc(IActiveScriptParseProcedure64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedure64*, UInt32),
    release : Proc(IActiveScriptParseProcedure64*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedure64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedure64, lpVtbl : IActiveScriptParseProcedure64Vtbl* do
    GUID = LibC::GUID.new(0xc64713b6_u32, 0xe029_u16, 0x4cc5_u16, StaticArray[0x92_u8, 0x0_u8, 0x43_u8, 0x8b_u8, 0x72_u8, 0x89_u8, 0xb_u8, 0x6a_u8])
    def query_interface(this : IActiveScriptParseProcedure64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedure64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedure64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedure64*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrProcedureName : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt64, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrProcedureName, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedure2_32Vtbl,
    query_interface : Proc(IActiveScriptParseProcedure2_32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedure2_32*, UInt32),
    release : Proc(IActiveScriptParseProcedure2_32*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedure2_32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedure2_32, lpVtbl : IActiveScriptParseProcedure2_32Vtbl* do
    GUID = LibC::GUID.new(0x71ee5b20_u32, 0xfb04_u16, 0x11d1_u16, StaticArray[0xb3_u8, 0xa8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xe8_u8, 0xb2_u8])
    def query_interface(this : IActiveScriptParseProcedure2_32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedure2_32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedure2_32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedure2_32*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrProcedureName : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt32, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrProcedureName, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptParseProcedure2_64Vtbl,
    query_interface : Proc(IActiveScriptParseProcedure2_64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptParseProcedure2_64*, UInt32),
    release : Proc(IActiveScriptParseProcedure2_64*, UInt32),
    parse_procedure_text : Proc(IActiveScriptParseProcedure2_64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, UInt64, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptParseProcedure2_64, lpVtbl : IActiveScriptParseProcedure2_64Vtbl* do
    GUID = LibC::GUID.new(0xfe7c4271_u32, 0x210c_u16, 0x448d_u16, StaticArray[0x9f_u8, 0x54_u8, 0x76_u8, 0xda_u8, 0xb7_u8, 0x4_u8, 0x7b_u8, 0x28_u8])
    def query_interface(this : IActiveScriptParseProcedure2_64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptParseProcedure2_64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptParseProcedure2_64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptParseProcedure2_64*, pstrCode : Win32cr::Foundation::PWSTR, pstrFormalParams : Win32cr::Foundation::PWSTR, pstrProcedureName : Win32cr::Foundation::PWSTR, pstrItemName : Win32cr::Foundation::PWSTR, punkContext : Void*, pstrDelimiter : Win32cr::Foundation::PWSTR, dwSourceContextCookie : UInt64, ulStartingLineNumber : UInt32, dwFlags : UInt32, ppdisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pstrCode, pstrFormalParams, pstrProcedureName, pstrItemName, punkContext, pstrDelimiter, dwSourceContextCookie, ulStartingLineNumber, dwFlags, ppdisp)
    end

  end

  @[Extern]
  record IActiveScriptEncodeVtbl,
    query_interface : Proc(IActiveScriptEncode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptEncode*, UInt32),
    release : Proc(IActiveScriptEncode*, UInt32),
    encode_section : Proc(IActiveScriptEncode*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    decode_script : Proc(IActiveScriptEncode*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_encode_prog_id : Proc(IActiveScriptEncode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptEncode, lpVtbl : IActiveScriptEncodeVtbl* do
    GUID = LibC::GUID.new(0xbb1a2ae3_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IActiveScriptEncode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptEncode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptEncode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def encode_section(this : IActiveScriptEncode*, pchIn : Win32cr::Foundation::PWSTR, cchIn : UInt32, pchOut : Win32cr::Foundation::PWSTR, cchOut : UInt32, pcchRet : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_section.call(this, pchIn, cchIn, pchOut, cchOut, pcchRet)
    end
    def decode_script(this : IActiveScriptEncode*, pchIn : Win32cr::Foundation::PWSTR, cchIn : UInt32, pchOut : Win32cr::Foundation::PWSTR, cchOut : UInt32, pcchRet : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_script.call(this, pchIn, cchIn, pchOut, cchOut, pcchRet)
    end
    def get_encode_prog_id(this : IActiveScriptEncode*, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encode_prog_id.call(this, pbstrOut)
    end

  end

  @[Extern]
  record IActiveScriptHostEncodeVtbl,
    query_interface : Proc(IActiveScriptHostEncode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptHostEncode*, UInt32),
    release : Proc(IActiveScriptHostEncode*, UInt32),
    encode_script_host_file : Proc(IActiveScriptHostEncode*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptHostEncode, lpVtbl : IActiveScriptHostEncodeVtbl* do
    GUID = LibC::GUID.new(0xbee9b76e_u32, 0xcfe3_u16, 0x11d1_u16, StaticArray[0xb7_u8, 0x47_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
    def query_interface(this : IActiveScriptHostEncode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptHostEncode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptHostEncode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def encode_script_host_file(this : IActiveScriptHostEncode*, bstrInFile : Win32cr::Foundation::BSTR, pbstrOutFile : Win32cr::Foundation::BSTR*, cFlags : UInt32, bstrDefaultLang : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_script_host_file.call(this, bstrInFile, pbstrOutFile, cFlags, bstrDefaultLang)
    end

  end

  @[Extern]
  record IBindEventHandlerVtbl,
    query_interface : Proc(IBindEventHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBindEventHandler*, UInt32),
    release : Proc(IBindEventHandler*, UInt32),
    bind_handler : Proc(IBindEventHandler*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBindEventHandler, lpVtbl : IBindEventHandlerVtbl* do
    GUID = LibC::GUID.new(0x63cdbcb0_u32, 0xc1b1_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x36_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IBindEventHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBindEventHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBindEventHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def bind_handler(this : IBindEventHandler*, pstrEvent : Win32cr::Foundation::PWSTR, pdisp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_handler.call(this, pstrEvent, pdisp)
    end

  end

  @[Extern]
  record IActiveScriptStatsVtbl,
    query_interface : Proc(IActiveScriptStats*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptStats*, UInt32),
    release : Proc(IActiveScriptStats*, UInt32),
    get_stat : Proc(IActiveScriptStats*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stat_ex : Proc(IActiveScriptStats*, LibC::GUID*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    reset_stats : Proc(IActiveScriptStats*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptStats, lpVtbl : IActiveScriptStatsVtbl* do
    GUID = LibC::GUID.new(0xb8da6310_u32, 0xe19b_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x3c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IActiveScriptStats*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptStats*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptStats*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stat(this : IActiveScriptStats*, stid : UInt32, pluHi : UInt32*, pluLo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stat.call(this, stid, pluHi, pluLo)
    end
    def get_stat_ex(this : IActiveScriptStats*, guid : LibC::GUID*, pluHi : UInt32*, pluLo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stat_ex.call(this, guid, pluHi, pluLo)
    end
    def reset_stats(this : IActiveScriptStats*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_stats.call(this)
    end

  end

  @[Extern]
  record IActiveScriptPropertyVtbl,
    query_interface : Proc(IActiveScriptProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProperty*, UInt32),
    release : Proc(IActiveScriptProperty*, UInt32),
    get_property : Proc(IActiveScriptProperty*, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(IActiveScriptProperty*, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProperty, lpVtbl : IActiveScriptPropertyVtbl* do
    GUID = LibC::GUID.new(0x4954e0d0_u32, 0xfbc7_u16, 0x11d1_u16, StaticArray[0x84_u8, 0x10_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfc_u8])
    def query_interface(this : IActiveScriptProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property(this : IActiveScriptProperty*, dwProperty : UInt32, pvarIndex : Win32cr::System::Com::VARIANT*, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, dwProperty, pvarIndex, pvarValue)
    end
    def set_property(this : IActiveScriptProperty*, dwProperty : UInt32, pvarIndex : Win32cr::System::Com::VARIANT*, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, dwProperty, pvarIndex, pvarValue)
    end

  end

  @[Extern]
  record ITridentEventSinkVtbl,
    query_interface : Proc(ITridentEventSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITridentEventSink*, UInt32),
    release : Proc(ITridentEventSink*, UInt32),
    fire_event : Proc(ITridentEventSink*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITridentEventSink, lpVtbl : ITridentEventSinkVtbl* do
    GUID = LibC::GUID.new(0x1dc9ca50_u32, 0x6ef_u16, 0x11d2_u16, StaticArray[0x84_u8, 0x15_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfc_u8])
    def query_interface(this : ITridentEventSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITridentEventSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITridentEventSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def fire_event(this : ITridentEventSink*, pstrEvent : Win32cr::Foundation::PWSTR, pdp : Win32cr::System::Com::DISPPARAMS*, pvarRes : Win32cr::System::Com::VARIANT*, pei : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_event.call(this, pstrEvent, pdp, pvarRes, pei)
    end

  end

  @[Extern]
  record IActiveScriptGarbageCollectorVtbl,
    query_interface : Proc(IActiveScriptGarbageCollector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptGarbageCollector*, UInt32),
    release : Proc(IActiveScriptGarbageCollector*, UInt32),
    collect_garbage : Proc(IActiveScriptGarbageCollector*, Win32cr::System::Diagnostics::Debug::SCRIPTGCTYPE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptGarbageCollector, lpVtbl : IActiveScriptGarbageCollectorVtbl* do
    GUID = LibC::GUID.new(0x6aa2c4a0_u32, 0x2b53_u16, 0x11d4_u16, StaticArray[0xa2_u8, 0xa0_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xd3_u8, 0x50_u8, 0x90_u8])
    def query_interface(this : IActiveScriptGarbageCollector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptGarbageCollector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptGarbageCollector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def collect_garbage(this : IActiveScriptGarbageCollector*, scriptgctype : Win32cr::System::Diagnostics::Debug::SCRIPTGCTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.collect_garbage.call(this, scriptgctype)
    end

  end

  @[Extern]
  record IActiveScriptSIPInfoVtbl,
    query_interface : Proc(IActiveScriptSIPInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSIPInfo*, UInt32),
    release : Proc(IActiveScriptSIPInfo*, UInt32),
    get_sipoid : Proc(IActiveScriptSIPInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSIPInfo, lpVtbl : IActiveScriptSIPInfoVtbl* do
    GUID = LibC::GUID.new(0x764651d0_u32, 0x38de_u16, 0x11d4_u16, StaticArray[0xa2_u8, 0xa3_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xd3_u8, 0x50_u8, 0x90_u8])
    def query_interface(this : IActiveScriptSIPInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSIPInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSIPInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_sipoid(this : IActiveScriptSIPInfo*, poid_sip : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sipoid.call(this, poid_sip)
    end

  end

  @[Extern]
  record IActiveScriptSiteTraceInfoVtbl,
    query_interface : Proc(IActiveScriptSiteTraceInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteTraceInfo*, UInt32),
    release : Proc(IActiveScriptSiteTraceInfo*, UInt32),
    send_script_trace_info : Proc(IActiveScriptSiteTraceInfo*, Win32cr::System::Diagnostics::Debug::SCRIPTTRACEINFO, LibC::GUID, UInt32, Int32, Int32, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteTraceInfo, lpVtbl : IActiveScriptSiteTraceInfoVtbl* do
    GUID = LibC::GUID.new(0x4b7272ae_u32, 0x1955_u16, 0x4bfe_u16, StaticArray[0x98_u8, 0xb0_u8, 0x78_u8, 0x6_u8, 0x21_u8, 0x88_u8, 0x85_u8, 0x69_u8])
    def query_interface(this : IActiveScriptSiteTraceInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteTraceInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteTraceInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def send_script_trace_info(this : IActiveScriptSiteTraceInfo*, stiEventType : Win32cr::System::Diagnostics::Debug::SCRIPTTRACEINFO, guidContextID : LibC::GUID, dwScriptContextCookie : UInt32, lScriptStatementStart : Int32, lScriptStatementEnd : Int32, dwReserved : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_script_trace_info.call(this, stiEventType, guidContextID, dwScriptContextCookie, lScriptStatementStart, lScriptStatementEnd, dwReserved)
    end

  end

  @[Extern]
  record IActiveScriptTraceInfoVtbl,
    query_interface : Proc(IActiveScriptTraceInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptTraceInfo*, UInt32),
    release : Proc(IActiveScriptTraceInfo*, UInt32),
    start_script_tracing : Proc(IActiveScriptTraceInfo*, Void*, LibC::GUID, Win32cr::Foundation::HRESULT),
    stop_script_tracing : Proc(IActiveScriptTraceInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptTraceInfo, lpVtbl : IActiveScriptTraceInfoVtbl* do
    GUID = LibC::GUID.new(0xc35456e7_u32, 0xbebf_u16, 0x4a1b_u16, StaticArray[0x86_u8, 0xa9_u8, 0x24_u8, 0xd5_u8, 0x6b_u8, 0xe8_u8, 0xb3_u8, 0x69_u8])
    def query_interface(this : IActiveScriptTraceInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptTraceInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptTraceInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_script_tracing(this : IActiveScriptTraceInfo*, pSiteTraceInfo : Void*, guidContextID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_script_tracing.call(this, pSiteTraceInfo, guidContextID)
    end
    def stop_script_tracing(this : IActiveScriptTraceInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_script_tracing.call(this)
    end

  end

  @[Extern]
  record IActiveScriptStringCompareVtbl,
    query_interface : Proc(IActiveScriptStringCompare*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptStringCompare*, UInt32),
    release : Proc(IActiveScriptStringCompare*, UInt32),
    str_comp : Proc(IActiveScriptStringCompare*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptStringCompare, lpVtbl : IActiveScriptStringCompareVtbl* do
    GUID = LibC::GUID.new(0x58562769_u32, 0xed52_u16, 0x42f7_u16, StaticArray[0x84_u8, 0x3_u8, 0x49_u8, 0x63_u8, 0x51_u8, 0x4e_u8, 0x1f_u8, 0x11_u8])
    def query_interface(this : IActiveScriptStringCompare*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptStringCompare*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptStringCompare*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def str_comp(this : IActiveScriptStringCompare*, bszStr1 : Win32cr::Foundation::BSTR, bszStr2 : Win32cr::Foundation::BSTR, iRet : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.str_comp.call(this, bszStr1, bszStr2, iRet)
    end

  end

  @[Extern]
  record IDebugPropertyVtbl,
    query_interface : Proc(IDebugProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugProperty*, UInt32),
    release : Proc(IDebugProperty*, UInt32),
    get_property_info : Proc(IDebugProperty*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*, Win32cr::Foundation::HRESULT),
    get_extended_info : Proc(IDebugProperty*, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_value_as_string : Proc(IDebugProperty*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    enum_members : Proc(IDebugProperty*, UInt32, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IDebugProperty*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugProperty, lpVtbl : IDebugPropertyVtbl* do
    GUID = LibC::GUID.new(0x51973c50_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property_info(this : IDebugProperty*, dwFieldSpec : UInt32, nRadix : UInt32, pPropertyInfo : Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_info.call(this, dwFieldSpec, nRadix, pPropertyInfo)
    end
    def get_extended_info(this : IDebugProperty*, cInfos : UInt32, rgguidExtendedInfo : LibC::GUID*, rgvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_info.call(this, cInfos, rgguidExtendedInfo, rgvar)
    end
    def set_value_as_string(this : IDebugProperty*, pszValue : Win32cr::Foundation::PWSTR, nRadix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_as_string.call(this, pszValue, nRadix)
    end
    def enum_members(this : IDebugProperty*, dwFieldSpec : UInt32, nRadix : UInt32, refiid : LibC::GUID*, ppepi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_members.call(this, dwFieldSpec, nRadix, refiid, ppepi)
    end
    def get_parent(this : IDebugProperty*, ppDebugProp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppDebugProp)
    end

  end

  @[Extern]
  record IEnumDebugPropertyInfoVtbl,
    query_interface : Proc(IEnumDebugPropertyInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugPropertyInfo*, UInt32),
    release : Proc(IEnumDebugPropertyInfo*, UInt32),
    next__ : Proc(IEnumDebugPropertyInfo*, UInt32, Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugPropertyInfo*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugPropertyInfo*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugPropertyInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_count : Proc(IEnumDebugPropertyInfo*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugPropertyInfo, lpVtbl : IEnumDebugPropertyInfoVtbl* do
    GUID = LibC::GUID.new(0x51973c51_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugPropertyInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugPropertyInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugPropertyInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugPropertyInfo*, celt : UInt32, pi : Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*, pcEltsfetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pi, pcEltsfetched)
    end
    def skip(this : IEnumDebugPropertyInfo*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugPropertyInfo*, ppepi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppepi)
    end
    def get_count(this : IEnumDebugPropertyInfo*, pcelt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcelt)
    end

  end

  @[Extern]
  record IDebugExtendedPropertyVtbl,
    query_interface : Proc(IDebugExtendedProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugExtendedProperty*, UInt32),
    release : Proc(IDebugExtendedProperty*, UInt32),
    get_property_info : Proc(IDebugExtendedProperty*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*, Win32cr::Foundation::HRESULT),
    get_extended_info : Proc(IDebugExtendedProperty*, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_value_as_string : Proc(IDebugExtendedProperty*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    enum_members : Proc(IDebugExtendedProperty*, UInt32, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IDebugExtendedProperty*, Void**, Win32cr::Foundation::HRESULT),
    get_extended_property_info : Proc(IDebugExtendedProperty*, UInt32, UInt32, Win32cr::System::Diagnostics::Debug::ExtendedDebugPropertyInfo*, Win32cr::Foundation::HRESULT),
    enum_extended_members : Proc(IDebugExtendedProperty*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugExtendedProperty, lpVtbl : IDebugExtendedPropertyVtbl* do
    GUID = LibC::GUID.new(0x51973c52_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugExtendedProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugExtendedProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugExtendedProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property_info(this : IDebugExtendedProperty*, dwFieldSpec : UInt32, nRadix : UInt32, pPropertyInfo : Win32cr::System::Diagnostics::Debug::DebugPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_info.call(this, dwFieldSpec, nRadix, pPropertyInfo)
    end
    def get_extended_info(this : IDebugExtendedProperty*, cInfos : UInt32, rgguidExtendedInfo : LibC::GUID*, rgvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_info.call(this, cInfos, rgguidExtendedInfo, rgvar)
    end
    def set_value_as_string(this : IDebugExtendedProperty*, pszValue : Win32cr::Foundation::PWSTR, nRadix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_as_string.call(this, pszValue, nRadix)
    end
    def enum_members(this : IDebugExtendedProperty*, dwFieldSpec : UInt32, nRadix : UInt32, refiid : LibC::GUID*, ppepi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_members.call(this, dwFieldSpec, nRadix, refiid, ppepi)
    end
    def get_parent(this : IDebugExtendedProperty*, ppDebugProp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppDebugProp)
    end
    def get_extended_property_info(this : IDebugExtendedProperty*, dwFieldSpec : UInt32, nRadix : UInt32, pExtendedPropertyInfo : Win32cr::System::Diagnostics::Debug::ExtendedDebugPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_property_info.call(this, dwFieldSpec, nRadix, pExtendedPropertyInfo)
    end
    def enum_extended_members(this : IDebugExtendedProperty*, dwFieldSpec : UInt32, nRadix : UInt32, ppeepi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_extended_members.call(this, dwFieldSpec, nRadix, ppeepi)
    end

  end

  @[Extern]
  record IEnumDebugExtendedPropertyInfoVtbl,
    query_interface : Proc(IEnumDebugExtendedPropertyInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugExtendedPropertyInfo*, UInt32),
    release : Proc(IEnumDebugExtendedPropertyInfo*, UInt32),
    next__ : Proc(IEnumDebugExtendedPropertyInfo*, UInt32, Win32cr::System::Diagnostics::Debug::ExtendedDebugPropertyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugExtendedPropertyInfo*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugExtendedPropertyInfo*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugExtendedPropertyInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_count : Proc(IEnumDebugExtendedPropertyInfo*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugExtendedPropertyInfo, lpVtbl : IEnumDebugExtendedPropertyInfoVtbl* do
    GUID = LibC::GUID.new(0x51973c53_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugExtendedPropertyInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugExtendedPropertyInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugExtendedPropertyInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugExtendedPropertyInfo*, celt : UInt32, rgExtendedPropertyInfo : Win32cr::System::Diagnostics::Debug::ExtendedDebugPropertyInfo*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgExtendedPropertyInfo, pceltFetched)
    end
    def skip(this : IEnumDebugExtendedPropertyInfo*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugExtendedPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugExtendedPropertyInfo*, pedpe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pedpe)
    end
    def get_count(this : IEnumDebugExtendedPropertyInfo*, pcelt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcelt)
    end

  end

  @[Extern]
  record IPerPropertyBrowsing2Vtbl,
    query_interface : Proc(IPerPropertyBrowsing2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPerPropertyBrowsing2*, UInt32),
    release : Proc(IPerPropertyBrowsing2*, UInt32),
    get_display_string : Proc(IPerPropertyBrowsing2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    map_property_to_page : Proc(IPerPropertyBrowsing2*, Int32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_predefined_strings : Proc(IPerPropertyBrowsing2*, Int32, Win32cr::System::Ole::CALPOLESTR*, Win32cr::System::Ole::CADWORD*, Win32cr::Foundation::HRESULT),
    set_predefined_value : Proc(IPerPropertyBrowsing2*, Int32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPerPropertyBrowsing2, lpVtbl : IPerPropertyBrowsing2Vtbl* do
    GUID = LibC::GUID.new(0x51973c54_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IPerPropertyBrowsing2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPerPropertyBrowsing2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPerPropertyBrowsing2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_display_string(this : IPerPropertyBrowsing2*, dispid : Int32, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_string.call(this, dispid, pBstr)
    end
    def map_property_to_page(this : IPerPropertyBrowsing2*, dispid : Int32, pClsidPropPage : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_property_to_page.call(this, dispid, pClsidPropPage)
    end
    def get_predefined_strings(this : IPerPropertyBrowsing2*, dispid : Int32, pCaStrings : Win32cr::System::Ole::CALPOLESTR*, pCaCookies : Win32cr::System::Ole::CADWORD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_predefined_strings.call(this, dispid, pCaStrings, pCaCookies)
    end
    def set_predefined_value(this : IPerPropertyBrowsing2*, dispid : Int32, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_predefined_value.call(this, dispid, dwCookie)
    end

  end

  @[Extern]
  record IDebugPropertyEnumType_AllVtbl,
    query_interface : Proc(IDebugPropertyEnumType_All*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPropertyEnumType_All*, UInt32),
    release : Proc(IDebugPropertyEnumType_All*, UInt32),
    get_name : Proc(IDebugPropertyEnumType_All*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPropertyEnumType_All, lpVtbl : IDebugPropertyEnumType_AllVtbl* do
    GUID = LibC::GUID.new(0x51973c55_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugPropertyEnumType_All*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPropertyEnumType_All*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPropertyEnumType_All*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugPropertyEnumType_All*, __midl__i_debug_property_enum_type_all0000 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, __midl__i_debug_property_enum_type_all0000)
    end

  end

  @[Extern]
  record IDebugPropertyEnumType_LocalsVtbl,
    query_interface : Proc(IDebugPropertyEnumType_Locals*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPropertyEnumType_Locals*, UInt32),
    release : Proc(IDebugPropertyEnumType_Locals*, UInt32),
    get_name : Proc(IDebugPropertyEnumType_Locals*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPropertyEnumType_Locals, lpVtbl : IDebugPropertyEnumType_LocalsVtbl* do
    GUID = LibC::GUID.new(0x51973c56_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugPropertyEnumType_Locals*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPropertyEnumType_Locals*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPropertyEnumType_Locals*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugPropertyEnumType_Locals*, __midl__i_debug_property_enum_type_all0000 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, __midl__i_debug_property_enum_type_all0000)
    end

  end

  @[Extern]
  record IDebugPropertyEnumType_ArgumentsVtbl,
    query_interface : Proc(IDebugPropertyEnumType_Arguments*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPropertyEnumType_Arguments*, UInt32),
    release : Proc(IDebugPropertyEnumType_Arguments*, UInt32),
    get_name : Proc(IDebugPropertyEnumType_Arguments*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPropertyEnumType_Arguments, lpVtbl : IDebugPropertyEnumType_ArgumentsVtbl* do
    GUID = LibC::GUID.new(0x51973c57_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugPropertyEnumType_Arguments*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPropertyEnumType_Arguments*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPropertyEnumType_Arguments*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugPropertyEnumType_Arguments*, __midl__i_debug_property_enum_type_all0000 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, __midl__i_debug_property_enum_type_all0000)
    end

  end

  @[Extern]
  record IDebugPropertyEnumType_LocalsPlusArgsVtbl,
    query_interface : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, UInt32),
    release : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, UInt32),
    get_name : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPropertyEnumType_LocalsPlusArgs, lpVtbl : IDebugPropertyEnumType_LocalsPlusArgsVtbl* do
    GUID = LibC::GUID.new(0x51973c58_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugPropertyEnumType_LocalsPlusArgs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPropertyEnumType_LocalsPlusArgs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPropertyEnumType_LocalsPlusArgs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugPropertyEnumType_LocalsPlusArgs*, __midl__i_debug_property_enum_type_all0000 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, __midl__i_debug_property_enum_type_all0000)
    end

  end

  @[Extern]
  record IDebugPropertyEnumType_RegistersVtbl,
    query_interface : Proc(IDebugPropertyEnumType_Registers*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugPropertyEnumType_Registers*, UInt32),
    release : Proc(IDebugPropertyEnumType_Registers*, UInt32),
    get_name : Proc(IDebugPropertyEnumType_Registers*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugPropertyEnumType_Registers, lpVtbl : IDebugPropertyEnumType_RegistersVtbl* do
    GUID = LibC::GUID.new(0x51973c59_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugPropertyEnumType_Registers*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugPropertyEnumType_Registers*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugPropertyEnumType_Registers*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugPropertyEnumType_Registers*, __midl__i_debug_property_enum_type_all0000 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, __midl__i_debug_property_enum_type_all0000)
    end

  end

  @[Extern]
  record IActiveScriptDebug32Vtbl,
    query_interface : Proc(IActiveScriptDebug32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptDebug32*, UInt32),
    release : Proc(IActiveScriptDebug32*, UInt32),
    get_script_text_attributes : Proc(IActiveScriptDebug32*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_scriptlet_text_attributes : Proc(IActiveScriptDebug32*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    enum_code_contexts_of_position : Proc(IActiveScriptDebug32*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptDebug32, lpVtbl : IActiveScriptDebug32Vtbl* do
    GUID = LibC::GUID.new(0x51973c10_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IActiveScriptDebug32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptDebug32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptDebug32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_script_text_attributes(this : IActiveScriptDebug32*, pstrCode : UInt16*, uNumCodeChars : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_text_attributes.call(this, pstrCode, uNumCodeChars, pstrDelimiter, dwFlags, pattr)
    end
    def get_scriptlet_text_attributes(this : IActiveScriptDebug32*, pstrCode : UInt16*, uNumCodeChars : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scriptlet_text_attributes.call(this, pstrCode, uNumCodeChars, pstrDelimiter, dwFlags, pattr)
    end
    def enum_code_contexts_of_position(this : IActiveScriptDebug32*, dwSourceContext : UInt32, uCharacterOffset : UInt32, uNumChars : UInt32, ppescc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_contexts_of_position.call(this, dwSourceContext, uCharacterOffset, uNumChars, ppescc)
    end

  end

  @[Extern]
  record IActiveScriptDebug64Vtbl,
    query_interface : Proc(IActiveScriptDebug64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptDebug64*, UInt32),
    release : Proc(IActiveScriptDebug64*, UInt32),
    get_script_text_attributes : Proc(IActiveScriptDebug64*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_scriptlet_text_attributes : Proc(IActiveScriptDebug64*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    enum_code_contexts_of_position : Proc(IActiveScriptDebug64*, UInt64, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptDebug64, lpVtbl : IActiveScriptDebug64Vtbl* do
    GUID = LibC::GUID.new(0xbc437e23_u32, 0xf5b8_u16, 0x47f4_u16, StaticArray[0xbb_u8, 0x79_u8, 0x7d_u8, 0x1c_u8, 0xe5_u8, 0x48_u8, 0x3b_u8, 0x86_u8])
    def query_interface(this : IActiveScriptDebug64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptDebug64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptDebug64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_script_text_attributes(this : IActiveScriptDebug64*, pstrCode : UInt16*, uNumCodeChars : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_text_attributes.call(this, pstrCode, uNumCodeChars, pstrDelimiter, dwFlags, pattr)
    end
    def get_scriptlet_text_attributes(this : IActiveScriptDebug64*, pstrCode : UInt16*, uNumCodeChars : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scriptlet_text_attributes.call(this, pstrCode, uNumCodeChars, pstrDelimiter, dwFlags, pattr)
    end
    def enum_code_contexts_of_position(this : IActiveScriptDebug64*, dwSourceContext : UInt64, uCharacterOffset : UInt32, uNumChars : UInt32, ppescc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_contexts_of_position.call(this, dwSourceContext, uCharacterOffset, uNumChars, ppescc)
    end

  end

  @[Extern]
  record IActiveScriptSiteDebug32Vtbl,
    query_interface : Proc(IActiveScriptSiteDebug32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteDebug32*, UInt32),
    release : Proc(IActiveScriptSiteDebug32*, UInt32),
    get_document_context_from_position : Proc(IActiveScriptSiteDebug32*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_application : Proc(IActiveScriptSiteDebug32*, Void**, Win32cr::Foundation::HRESULT),
    get_root_application_node : Proc(IActiveScriptSiteDebug32*, Void**, Win32cr::Foundation::HRESULT),
    on_script_error_debug : Proc(IActiveScriptSiteDebug32*, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteDebug32, lpVtbl : IActiveScriptSiteDebug32Vtbl* do
    GUID = LibC::GUID.new(0x51973c11_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IActiveScriptSiteDebug32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteDebug32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteDebug32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_document_context_from_position(this : IActiveScriptSiteDebug32*, dwSourceContext : UInt32, uCharacterOffset : UInt32, uNumChars : UInt32, ppsc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_context_from_position.call(this, dwSourceContext, uCharacterOffset, uNumChars, ppsc)
    end
    def get_application(this : IActiveScriptSiteDebug32*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application.call(this, ppda)
    end
    def get_root_application_node(this : IActiveScriptSiteDebug32*, ppdanRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_application_node.call(this, ppdanRoot)
    end
    def on_script_error_debug(this : IActiveScriptSiteDebug32*, pErrorDebug : Void*, pfEnterDebugger : Win32cr::Foundation::BOOL*, pfCallOnScriptErrorWhenContinuing : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_script_error_debug.call(this, pErrorDebug, pfEnterDebugger, pfCallOnScriptErrorWhenContinuing)
    end

  end

  @[Extern]
  record IActiveScriptSiteDebug64Vtbl,
    query_interface : Proc(IActiveScriptSiteDebug64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteDebug64*, UInt32),
    release : Proc(IActiveScriptSiteDebug64*, UInt32),
    get_document_context_from_position : Proc(IActiveScriptSiteDebug64*, UInt64, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_application : Proc(IActiveScriptSiteDebug64*, Void**, Win32cr::Foundation::HRESULT),
    get_root_application_node : Proc(IActiveScriptSiteDebug64*, Void**, Win32cr::Foundation::HRESULT),
    on_script_error_debug : Proc(IActiveScriptSiteDebug64*, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteDebug64, lpVtbl : IActiveScriptSiteDebug64Vtbl* do
    GUID = LibC::GUID.new(0xd6b96b0a_u32, 0x7463_u16, 0x402c_u16, StaticArray[0x92_u8, 0xac_u8, 0x89_u8, 0x98_u8, 0x42_u8, 0x26_u8, 0x94_u8, 0x2f_u8])
    def query_interface(this : IActiveScriptSiteDebug64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteDebug64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteDebug64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_document_context_from_position(this : IActiveScriptSiteDebug64*, dwSourceContext : UInt64, uCharacterOffset : UInt32, uNumChars : UInt32, ppsc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_context_from_position.call(this, dwSourceContext, uCharacterOffset, uNumChars, ppsc)
    end
    def get_application(this : IActiveScriptSiteDebug64*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application.call(this, ppda)
    end
    def get_root_application_node(this : IActiveScriptSiteDebug64*, ppdanRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_application_node.call(this, ppdanRoot)
    end
    def on_script_error_debug(this : IActiveScriptSiteDebug64*, pErrorDebug : Void*, pfEnterDebugger : Win32cr::Foundation::BOOL*, pfCallOnScriptErrorWhenContinuing : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_script_error_debug.call(this, pErrorDebug, pfEnterDebugger, pfCallOnScriptErrorWhenContinuing)
    end

  end

  @[Extern]
  record IActiveScriptSiteDebugExVtbl,
    query_interface : Proc(IActiveScriptSiteDebugEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptSiteDebugEx*, UInt32),
    release : Proc(IActiveScriptSiteDebugEx*, UInt32),
    on_can_not_jit_script_error_debug : Proc(IActiveScriptSiteDebugEx*, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptSiteDebugEx, lpVtbl : IActiveScriptSiteDebugExVtbl* do
    GUID = LibC::GUID.new(0xbb722ccb_u32, 0x6ad2_u16, 0x41c6_u16, StaticArray[0xb7_u8, 0x80_u8, 0xaf_u8, 0x9c_u8, 0x3_u8, 0xee_u8, 0x69_u8, 0xf5_u8])
    def query_interface(this : IActiveScriptSiteDebugEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptSiteDebugEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptSiteDebugEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_can_not_jit_script_error_debug(this : IActiveScriptSiteDebugEx*, pErrorDebug : Void*, pfCallOnScriptErrorWhenContinuing : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_can_not_jit_script_error_debug.call(this, pErrorDebug, pfCallOnScriptErrorWhenContinuing)
    end

  end

  @[Extern]
  record IActiveScriptErrorDebugVtbl,
    query_interface : Proc(IActiveScriptErrorDebug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptErrorDebug*, UInt32),
    release : Proc(IActiveScriptErrorDebug*, UInt32),
    get_exception_info : Proc(IActiveScriptErrorDebug*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IActiveScriptErrorDebug*, UInt32*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    get_source_line_text : Proc(IActiveScriptErrorDebug*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_context : Proc(IActiveScriptErrorDebug*, Void**, Win32cr::Foundation::HRESULT),
    get_stack_frame : Proc(IActiveScriptErrorDebug*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptErrorDebug, lpVtbl : IActiveScriptErrorDebugVtbl* do
    GUID = LibC::GUID.new(0x51973c12_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IActiveScriptErrorDebug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptErrorDebug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptErrorDebug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_exception_info(this : IActiveScriptErrorDebug*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_info.call(this, pexcepinfo)
    end
    def get_source_position(this : IActiveScriptErrorDebug*, pdwSourceContext : UInt32*, pulLineNumber : UInt32*, plCharacterPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pdwSourceContext, pulLineNumber, plCharacterPosition)
    end
    def get_source_line_text(this : IActiveScriptErrorDebug*, pbstrSourceLine : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_line_text.call(this, pbstrSourceLine)
    end
    def get_document_context(this : IActiveScriptErrorDebug*, ppssc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_context.call(this, ppssc)
    end
    def get_stack_frame(this : IActiveScriptErrorDebug*, ppdsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_frame.call(this, ppdsf)
    end

  end

  @[Extern]
  record IDebugCodeContextVtbl,
    query_interface : Proc(IDebugCodeContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugCodeContext*, UInt32),
    release : Proc(IDebugCodeContext*, UInt32),
    get_document_context : Proc(IDebugCodeContext*, Void**, Win32cr::Foundation::HRESULT),
    set_break_point : Proc(IDebugCodeContext*, Win32cr::System::Diagnostics::Debug::BREAKPOINT_STATE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugCodeContext, lpVtbl : IDebugCodeContextVtbl* do
    GUID = LibC::GUID.new(0x51973c13_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugCodeContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugCodeContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugCodeContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_document_context(this : IDebugCodeContext*, ppsc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_context.call(this, ppsc)
    end
    def set_break_point(this : IDebugCodeContext*, bps : Win32cr::System::Diagnostics::Debug::BREAKPOINT_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_point.call(this, bps)
    end

  end

  @[Extern]
  record IDebugExpressionVtbl,
    query_interface : Proc(IDebugExpression*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugExpression*, UInt32),
    release : Proc(IDebugExpression*, UInt32),
    start : Proc(IDebugExpression*, Void*, Win32cr::Foundation::HRESULT),
    abort : Proc(IDebugExpression*, Win32cr::Foundation::HRESULT),
    query_is_complete : Proc(IDebugExpression*, Win32cr::Foundation::HRESULT),
    get_result_as_string : Proc(IDebugExpression*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_result_as_debug_property : Proc(IDebugExpression*, Win32cr::Foundation::HRESULT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugExpression, lpVtbl : IDebugExpressionVtbl* do
    GUID = LibC::GUID.new(0x51973c14_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugExpression*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugExpression*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugExpression*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IDebugExpression*, pdecb : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pdecb)
    end
    def abort(this : IDebugExpression*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def query_is_complete(this : IDebugExpression*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_complete.call(this)
    end
    def get_result_as_string(this : IDebugExpression*, phrResult : Win32cr::Foundation::HRESULT*, pbstrResult : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_result_as_string.call(this, phrResult, pbstrResult)
    end
    def get_result_as_debug_property(this : IDebugExpression*, phrResult : Win32cr::Foundation::HRESULT*, ppdp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_result_as_debug_property.call(this, phrResult, ppdp)
    end

  end

  @[Extern]
  record IDebugExpressionContextVtbl,
    query_interface : Proc(IDebugExpressionContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugExpressionContext*, UInt32),
    release : Proc(IDebugExpressionContext*, UInt32),
    parse_language_text : Proc(IDebugExpressionContext*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_language_info : Proc(IDebugExpressionContext*, Win32cr::Foundation::BSTR*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugExpressionContext, lpVtbl : IDebugExpressionContextVtbl* do
    GUID = LibC::GUID.new(0x51973c15_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugExpressionContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugExpressionContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugExpressionContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_language_text(this : IDebugExpressionContext*, pstrCode : Win32cr::Foundation::PWSTR, nRadix : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, ppe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_language_text.call(this, pstrCode, nRadix, pstrDelimiter, dwFlags, ppe)
    end
    def get_language_info(this : IDebugExpressionContext*, pbstrLanguageName : Win32cr::Foundation::BSTR*, pLanguageID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_info.call(this, pbstrLanguageName, pLanguageID)
    end

  end

  @[Extern]
  record IDebugExpressionCallBackVtbl,
    query_interface : Proc(IDebugExpressionCallBack*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugExpressionCallBack*, UInt32),
    release : Proc(IDebugExpressionCallBack*, UInt32),
    onComplete : Proc(IDebugExpressionCallBack*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugExpressionCallBack, lpVtbl : IDebugExpressionCallBackVtbl* do
    GUID = LibC::GUID.new(0x51973c16_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugExpressionCallBack*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugExpressionCallBack*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugExpressionCallBack*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onComplete(this : IDebugExpressionCallBack*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onComplete.call(this)
    end

  end

  @[Extern]
  record IDebugStackFrameVtbl,
    query_interface : Proc(IDebugStackFrame*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugStackFrame*, UInt32),
    release : Proc(IDebugStackFrame*, UInt32),
    get_code_context : Proc(IDebugStackFrame*, Void**, Win32cr::Foundation::HRESULT),
    get_description_string : Proc(IDebugStackFrame*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_language_string : Proc(IDebugStackFrame*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_thread : Proc(IDebugStackFrame*, Void**, Win32cr::Foundation::HRESULT),
    get_debug_property : Proc(IDebugStackFrame*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugStackFrame, lpVtbl : IDebugStackFrameVtbl* do
    GUID = LibC::GUID.new(0x51973c17_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugStackFrame*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugStackFrame*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugStackFrame*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_code_context(this : IDebugStackFrame*, ppcc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_context.call(this, ppcc)
    end
    def get_description_string(this : IDebugStackFrame*, fLong : Win32cr::Foundation::BOOL, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description_string.call(this, fLong, pbstrDescription)
    end
    def get_language_string(this : IDebugStackFrame*, fLong : Win32cr::Foundation::BOOL, pbstrLanguage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_string.call(this, fLong, pbstrLanguage)
    end
    def get_thread(this : IDebugStackFrame*, ppat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread.call(this, ppat)
    end
    def get_debug_property(this : IDebugStackFrame*, ppDebugProp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_property.call(this, ppDebugProp)
    end

  end

  @[Extern]
  record IDebugStackFrameSnifferVtbl,
    query_interface : Proc(IDebugStackFrameSniffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugStackFrameSniffer*, UInt32),
    release : Proc(IDebugStackFrameSniffer*, UInt32),
    enum_stack_frames : Proc(IDebugStackFrameSniffer*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugStackFrameSniffer, lpVtbl : IDebugStackFrameSnifferVtbl* do
    GUID = LibC::GUID.new(0x51973c18_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugStackFrameSniffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugStackFrameSniffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugStackFrameSniffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_stack_frames(this : IDebugStackFrameSniffer*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end

  end

  @[Extern]
  record IDebugStackFrameSnifferEx32Vtbl,
    query_interface : Proc(IDebugStackFrameSnifferEx32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugStackFrameSnifferEx32*, UInt32),
    release : Proc(IDebugStackFrameSnifferEx32*, UInt32),
    enum_stack_frames : Proc(IDebugStackFrameSnifferEx32*, Void**, Win32cr::Foundation::HRESULT),
    enum_stack_frames_ex32 : Proc(IDebugStackFrameSnifferEx32*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugStackFrameSnifferEx32, lpVtbl : IDebugStackFrameSnifferEx32Vtbl* do
    GUID = LibC::GUID.new(0x51973c19_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugStackFrameSnifferEx32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugStackFrameSnifferEx32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugStackFrameSnifferEx32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_stack_frames(this : IDebugStackFrameSnifferEx32*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end
    def enum_stack_frames_ex32(this : IDebugStackFrameSnifferEx32*, dwSpMin : UInt32, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames_ex32.call(this, dwSpMin, ppedsf)
    end

  end

  @[Extern]
  record IDebugStackFrameSnifferEx64Vtbl,
    query_interface : Proc(IDebugStackFrameSnifferEx64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugStackFrameSnifferEx64*, UInt32),
    release : Proc(IDebugStackFrameSnifferEx64*, UInt32),
    enum_stack_frames : Proc(IDebugStackFrameSnifferEx64*, Void**, Win32cr::Foundation::HRESULT),
    enum_stack_frames_ex64 : Proc(IDebugStackFrameSnifferEx64*, UInt64, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugStackFrameSnifferEx64, lpVtbl : IDebugStackFrameSnifferEx64Vtbl* do
    GUID = LibC::GUID.new(0x8cd12af4_u32, 0x49c1_u16, 0x4d52_u16, StaticArray[0x8d_u8, 0x8a_u8, 0xc1_u8, 0x46_u8, 0xf4_u8, 0x75_u8, 0x81_u8, 0xaa_u8])
    def query_interface(this : IDebugStackFrameSnifferEx64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugStackFrameSnifferEx64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugStackFrameSnifferEx64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_stack_frames(this : IDebugStackFrameSnifferEx64*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end
    def enum_stack_frames_ex64(this : IDebugStackFrameSnifferEx64*, dwSpMin : UInt64, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames_ex64.call(this, dwSpMin, ppedsf)
    end

  end

  @[Extern]
  record IDebugSyncOperationVtbl,
    query_interface : Proc(IDebugSyncOperation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSyncOperation*, UInt32),
    release : Proc(IDebugSyncOperation*, UInt32),
    get_target_thread : Proc(IDebugSyncOperation*, Void**, Win32cr::Foundation::HRESULT),
    execute : Proc(IDebugSyncOperation*, Void**, Win32cr::Foundation::HRESULT),
    in_progress_abort : Proc(IDebugSyncOperation*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSyncOperation, lpVtbl : IDebugSyncOperationVtbl* do
    GUID = LibC::GUID.new(0x51973c1a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugSyncOperation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSyncOperation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSyncOperation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_target_thread(this : IDebugSyncOperation*, ppatTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_target_thread.call(this, ppatTarget)
    end
    def execute(this : IDebugSyncOperation*, ppunkResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, ppunkResult)
    end
    def in_progress_abort(this : IDebugSyncOperation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.in_progress_abort.call(this)
    end

  end

  @[Extern]
  record IDebugAsyncOperationVtbl,
    query_interface : Proc(IDebugAsyncOperation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAsyncOperation*, UInt32),
    release : Proc(IDebugAsyncOperation*, UInt32),
    get_sync_debug_operation : Proc(IDebugAsyncOperation*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(IDebugAsyncOperation*, Void*, Win32cr::Foundation::HRESULT),
    abort : Proc(IDebugAsyncOperation*, Win32cr::Foundation::HRESULT),
    query_is_complete : Proc(IDebugAsyncOperation*, Win32cr::Foundation::HRESULT),
    get_result : Proc(IDebugAsyncOperation*, Win32cr::Foundation::HRESULT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAsyncOperation, lpVtbl : IDebugAsyncOperationVtbl* do
    GUID = LibC::GUID.new(0x51973c1b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugAsyncOperation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAsyncOperation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAsyncOperation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_sync_debug_operation(this : IDebugAsyncOperation*, ppsdo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sync_debug_operation.call(this, ppsdo)
    end
    def start(this : IDebugAsyncOperation*, padocb : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, padocb)
    end
    def abort(this : IDebugAsyncOperation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def query_is_complete(this : IDebugAsyncOperation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_complete.call(this)
    end
    def get_result(this : IDebugAsyncOperation*, phrResult : Win32cr::Foundation::HRESULT*, ppunkResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_result.call(this, phrResult, ppunkResult)
    end

  end

  @[Extern]
  record IDebugAsyncOperationCallBackVtbl,
    query_interface : Proc(IDebugAsyncOperationCallBack*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugAsyncOperationCallBack*, UInt32),
    release : Proc(IDebugAsyncOperationCallBack*, UInt32),
    onComplete : Proc(IDebugAsyncOperationCallBack*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugAsyncOperationCallBack, lpVtbl : IDebugAsyncOperationCallBackVtbl* do
    GUID = LibC::GUID.new(0x51973c1c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugAsyncOperationCallBack*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugAsyncOperationCallBack*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugAsyncOperationCallBack*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onComplete(this : IDebugAsyncOperationCallBack*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onComplete.call(this)
    end

  end

  @[Extern]
  record IEnumDebugCodeContextsVtbl,
    query_interface : Proc(IEnumDebugCodeContexts*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugCodeContexts*, UInt32),
    release : Proc(IEnumDebugCodeContexts*, UInt32),
    next__ : Proc(IEnumDebugCodeContexts*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugCodeContexts*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugCodeContexts*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugCodeContexts*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugCodeContexts, lpVtbl : IEnumDebugCodeContextsVtbl* do
    GUID = LibC::GUID.new(0x51973c1d_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugCodeContexts*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugCodeContexts*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugCodeContexts*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugCodeContexts*, celt : UInt32, pscc : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pscc, pceltFetched)
    end
    def skip(this : IEnumDebugCodeContexts*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugCodeContexts*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugCodeContexts*, ppescc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppescc)
    end

  end

  @[Extern]
  record IEnumDebugStackFramesVtbl,
    query_interface : Proc(IEnumDebugStackFrames*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugStackFrames*, UInt32),
    release : Proc(IEnumDebugStackFrames*, UInt32),
    next__ : Proc(IEnumDebugStackFrames*, UInt32, Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugStackFrames*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugStackFrames*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugStackFrames*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugStackFrames, lpVtbl : IEnumDebugStackFramesVtbl* do
    GUID = LibC::GUID.new(0x51973c1e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugStackFrames*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugStackFrames*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugStackFrames*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugStackFrames*, celt : UInt32, prgdsfd : Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, prgdsfd, pceltFetched)
    end
    def skip(this : IEnumDebugStackFrames*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugStackFrames*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugStackFrames*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppedsf)
    end

  end

  @[Extern]
  record IEnumDebugStackFrames64Vtbl,
    query_interface : Proc(IEnumDebugStackFrames64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugStackFrames64*, UInt32),
    release : Proc(IEnumDebugStackFrames64*, UInt32),
    next__ : Proc(IEnumDebugStackFrames64*, UInt32, Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugStackFrames64*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugStackFrames64*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugStackFrames64*, Void**, Win32cr::Foundation::HRESULT),
    next64 : Proc(IEnumDebugStackFrames64*, UInt32, Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor64*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugStackFrames64, lpVtbl : IEnumDebugStackFrames64Vtbl* do
    GUID = LibC::GUID.new(0xdc38853_u32, 0xc1b0_u16, 0x4176_u16, StaticArray[0xa9_u8, 0x84_u8, 0xb2_u8, 0x98_u8, 0x36_u8, 0x10_u8, 0x27_u8, 0xaf_u8])
    def query_interface(this : IEnumDebugStackFrames64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugStackFrames64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugStackFrames64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugStackFrames64*, celt : UInt32, prgdsfd : Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, prgdsfd, pceltFetched)
    end
    def skip(this : IEnumDebugStackFrames64*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugStackFrames64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugStackFrames64*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppedsf)
    end
    def next64(this : IEnumDebugStackFrames64*, celt : UInt32, prgdsfd : Win32cr::System::Diagnostics::Debug::DebugStackFrameDescriptor64*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next64.call(this, celt, prgdsfd, pceltFetched)
    end

  end

  @[Extern]
  record IDebugDocumentInfoVtbl,
    query_interface : Proc(IDebugDocumentInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentInfo*, UInt32),
    release : Proc(IDebugDocumentInfo*, UInt32),
    get_name : Proc(IDebugDocumentInfo*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugDocumentInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentInfo, lpVtbl : IDebugDocumentInfoVtbl* do
    GUID = LibC::GUID.new(0x51973c1f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugDocumentInfo*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugDocumentInfo*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end

  end

  @[Extern]
  record IDebugDocumentProviderVtbl,
    query_interface : Proc(IDebugDocumentProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentProvider*, UInt32),
    release : Proc(IDebugDocumentProvider*, UInt32),
    get_name : Proc(IDebugDocumentProvider*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugDocumentProvider*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_document : Proc(IDebugDocumentProvider*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentProvider, lpVtbl : IDebugDocumentProviderVtbl* do
    GUID = LibC::GUID.new(0x51973c20_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugDocumentProvider*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugDocumentProvider*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end
    def get_document(this : IDebugDocumentProvider*, ppssd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document.call(this, ppssd)
    end

  end

  @[Extern]
  record IDebugDocumentVtbl,
    query_interface : Proc(IDebugDocument*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocument*, UInt32),
    release : Proc(IDebugDocument*, UInt32),
    get_name : Proc(IDebugDocument*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugDocument*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocument, lpVtbl : IDebugDocumentVtbl* do
    GUID = LibC::GUID.new(0x51973c21_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocument*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocument*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocument*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugDocument*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugDocument*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end

  end

  @[Extern]
  record IDebugDocumentTextVtbl,
    query_interface : Proc(IDebugDocumentText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentText*, UInt32),
    release : Proc(IDebugDocumentText*, UInt32),
    get_name : Proc(IDebugDocumentText*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugDocumentText*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_document_attributes : Proc(IDebugDocumentText*, UInt32*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IDebugDocumentText*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_position_of_line : Proc(IDebugDocumentText*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_line_of_position : Proc(IDebugDocumentText*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IDebugDocumentText*, UInt32, UInt16*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::HRESULT),
    get_position_of_context : Proc(IDebugDocumentText*, Void*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_of_position : Proc(IDebugDocumentText*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentText, lpVtbl : IDebugDocumentTextVtbl* do
    GUID = LibC::GUID.new(0x51973c22_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugDocumentText*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugDocumentText*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end
    def get_document_attributes(this : IDebugDocumentText*, ptextdocattr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_attributes.call(this, ptextdocattr)
    end
    def get_size(this : IDebugDocumentText*, pcNumLines : UInt32*, pcNumChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pcNumLines, pcNumChars)
    end
    def get_position_of_line(this : IDebugDocumentText*, cLineNumber : UInt32, pcCharacterPosition : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position_of_line.call(this, cLineNumber, pcCharacterPosition)
    end
    def get_line_of_position(this : IDebugDocumentText*, cCharacterPosition : UInt32, pcLineNumber : UInt32*, pcCharacterOffsetInLine : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_of_position.call(this, cCharacterPosition, pcLineNumber, pcCharacterOffsetInLine)
    end
    def get_text(this : IDebugDocumentText*, cCharacterPosition : UInt32, pcharText : UInt16*, pstaTextAttr : UInt16*, pcNumChars : UInt32*, cMaxChars : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, cCharacterPosition, pcharText, pstaTextAttr, pcNumChars, cMaxChars)
    end
    def get_position_of_context(this : IDebugDocumentText*, psc : Void*, pcCharacterPosition : UInt32*, cNumChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position_of_context.call(this, psc, pcCharacterPosition, cNumChars)
    end
    def get_context_of_position(this : IDebugDocumentText*, cCharacterPosition : UInt32, cNumChars : UInt32, ppsc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_of_position.call(this, cCharacterPosition, cNumChars, ppsc)
    end

  end

  @[Extern]
  record IDebugDocumentTextEventsVtbl,
    query_interface : Proc(IDebugDocumentTextEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentTextEvents*, UInt32),
    release : Proc(IDebugDocumentTextEvents*, UInt32),
    onDestroy : Proc(IDebugDocumentTextEvents*, Win32cr::Foundation::HRESULT),
    onInsertText : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    onRemoveText : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    onReplaceText : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    onUpdateTextAttributes : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    onUpdateDocumentAttributes : Proc(IDebugDocumentTextEvents*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentTextEvents, lpVtbl : IDebugDocumentTextEventsVtbl* do
    GUID = LibC::GUID.new(0x51973c23_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentTextEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentTextEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentTextEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onDestroy(this : IDebugDocumentTextEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onDestroy.call(this)
    end
    def onInsertText(this : IDebugDocumentTextEvents*, cCharacterPosition : UInt32, cNumToInsert : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onInsertText.call(this, cCharacterPosition, cNumToInsert)
    end
    def onRemoveText(this : IDebugDocumentTextEvents*, cCharacterPosition : UInt32, cNumToRemove : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onRemoveText.call(this, cCharacterPosition, cNumToRemove)
    end
    def onReplaceText(this : IDebugDocumentTextEvents*, cCharacterPosition : UInt32, cNumToReplace : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onReplaceText.call(this, cCharacterPosition, cNumToReplace)
    end
    def onUpdateTextAttributes(this : IDebugDocumentTextEvents*, cCharacterPosition : UInt32, cNumToUpdate : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onUpdateTextAttributes.call(this, cCharacterPosition, cNumToUpdate)
    end
    def onUpdateDocumentAttributes(this : IDebugDocumentTextEvents*, textdocattr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onUpdateDocumentAttributes.call(this, textdocattr)
    end

  end

  @[Extern]
  record IDebugDocumentTextAuthorVtbl,
    query_interface : Proc(IDebugDocumentTextAuthor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentTextAuthor*, UInt32),
    release : Proc(IDebugDocumentTextAuthor*, UInt32),
    get_name : Proc(IDebugDocumentTextAuthor*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugDocumentTextAuthor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_document_attributes : Proc(IDebugDocumentTextAuthor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IDebugDocumentTextAuthor*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_position_of_line : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_line_of_position : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt16*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::HRESULT),
    get_position_of_context : Proc(IDebugDocumentTextAuthor*, Void*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_context_of_position : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    insert_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    remove_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    replace_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentTextAuthor, lpVtbl : IDebugDocumentTextAuthorVtbl* do
    GUID = LibC::GUID.new(0x51973c24_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentTextAuthor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentTextAuthor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentTextAuthor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugDocumentTextAuthor*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugDocumentTextAuthor*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end
    def get_document_attributes(this : IDebugDocumentTextAuthor*, ptextdocattr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_attributes.call(this, ptextdocattr)
    end
    def get_size(this : IDebugDocumentTextAuthor*, pcNumLines : UInt32*, pcNumChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pcNumLines, pcNumChars)
    end
    def get_position_of_line(this : IDebugDocumentTextAuthor*, cLineNumber : UInt32, pcCharacterPosition : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position_of_line.call(this, cLineNumber, pcCharacterPosition)
    end
    def get_line_of_position(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, pcLineNumber : UInt32*, pcCharacterOffsetInLine : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_of_position.call(this, cCharacterPosition, pcLineNumber, pcCharacterOffsetInLine)
    end
    def get_text(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, pcharText : UInt16*, pstaTextAttr : UInt16*, pcNumChars : UInt32*, cMaxChars : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, cCharacterPosition, pcharText, pstaTextAttr, pcNumChars, cMaxChars)
    end
    def get_position_of_context(this : IDebugDocumentTextAuthor*, psc : Void*, pcCharacterPosition : UInt32*, cNumChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position_of_context.call(this, psc, pcCharacterPosition, cNumChars)
    end
    def get_context_of_position(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, cNumChars : UInt32, ppsc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_of_position.call(this, cCharacterPosition, cNumChars, ppsc)
    end
    def insert_text(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, cNumToInsert : UInt32, pcharText : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_text.call(this, cCharacterPosition, cNumToInsert, pcharText)
    end
    def remove_text(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, cNumToRemove : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_text.call(this, cCharacterPosition, cNumToRemove)
    end
    def replace_text(this : IDebugDocumentTextAuthor*, cCharacterPosition : UInt32, cNumToReplace : UInt32, pcharText : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replace_text.call(this, cCharacterPosition, cNumToReplace, pcharText)
    end

  end

  @[Extern]
  record IDebugDocumentTextExternalAuthorVtbl,
    query_interface : Proc(IDebugDocumentTextExternalAuthor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentTextExternalAuthor*, UInt32),
    release : Proc(IDebugDocumentTextExternalAuthor*, UInt32),
    get_path_name : Proc(IDebugDocumentTextExternalAuthor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IDebugDocumentTextExternalAuthor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    notify_changed : Proc(IDebugDocumentTextExternalAuthor*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentTextExternalAuthor, lpVtbl : IDebugDocumentTextExternalAuthorVtbl* do
    GUID = LibC::GUID.new(0x51973c25_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentTextExternalAuthor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentTextExternalAuthor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentTextExternalAuthor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_path_name(this : IDebugDocumentTextExternalAuthor*, pbstrLongName : Win32cr::Foundation::BSTR*, pfIsOriginalFile : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_path_name.call(this, pbstrLongName, pfIsOriginalFile)
    end
    def get_file_name(this : IDebugDocumentTextExternalAuthor*, pbstrShortName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, pbstrShortName)
    end
    def notify_changed(this : IDebugDocumentTextExternalAuthor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_changed.call(this)
    end

  end

  @[Extern]
  record IDebugDocumentHelper32Vtbl,
    query_interface : Proc(IDebugDocumentHelper32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentHelper32*, UInt32),
    release : Proc(IDebugDocumentHelper32*, UInt32),
    init : Proc(IDebugDocumentHelper32*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    attach : Proc(IDebugDocumentHelper32*, Void*, Win32cr::Foundation::HRESULT),
    detach : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::HRESULT),
    add_unicode_text : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dbcs_text : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    set_debug_document_host : Proc(IDebugDocumentHelper32*, Void*, Win32cr::Foundation::HRESULT),
    add_deferred_text : Proc(IDebugDocumentHelper32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    define_script_block : Proc(IDebugDocumentHelper32*, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL, UInt32*, Win32cr::Foundation::HRESULT),
    set_default_text_attr : Proc(IDebugDocumentHelper32*, UInt16, Win32cr::Foundation::HRESULT),
    set_text_attributes : Proc(IDebugDocumentHelper32*, UInt32, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    set_long_name : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_short_name : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_document_attr : Proc(IDebugDocumentHelper32*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_application_node : Proc(IDebugDocumentHelper32*, Void**, Win32cr::Foundation::HRESULT),
    get_script_block_info : Proc(IDebugDocumentHelper32*, UInt32, Void**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    create_debug_document_context : Proc(IDebugDocumentHelper32*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    bring_document_to_top : Proc(IDebugDocumentHelper32*, Win32cr::Foundation::HRESULT),
    bring_document_context_to_top : Proc(IDebugDocumentHelper32*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentHelper32, lpVtbl : IDebugDocumentHelper32Vtbl* do
    GUID = LibC::GUID.new(0x51973c26_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentHelper32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentHelper32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentHelper32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IDebugDocumentHelper32*, pda : Void*, pszShortName : Win32cr::Foundation::PWSTR, pszLongName : Win32cr::Foundation::PWSTR, docAttr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pda, pszShortName, pszLongName, docAttr)
    end
    def attach(this : IDebugDocumentHelper32*, pddhParent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach.call(this, pddhParent)
    end
    def detach(this : IDebugDocumentHelper32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach.call(this)
    end
    def add_unicode_text(this : IDebugDocumentHelper32*, pszText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_unicode_text.call(this, pszText)
    end
    def add_dbcs_text(this : IDebugDocumentHelper32*, pszText : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dbcs_text.call(this, pszText)
    end
    def set_debug_document_host(this : IDebugDocumentHelper32*, pddh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_document_host.call(this, pddh)
    end
    def add_deferred_text(this : IDebugDocumentHelper32*, cChars : UInt32, dwTextStartCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_deferred_text.call(this, cChars, dwTextStartCookie)
    end
    def define_script_block(this : IDebugDocumentHelper32*, ulCharOffset : UInt32, cChars : UInt32, pas : Void*, fScriptlet : Win32cr::Foundation::BOOL, pdwSourceContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.define_script_block.call(this, ulCharOffset, cChars, pas, fScriptlet, pdwSourceContext)
    end
    def set_default_text_attr(this : IDebugDocumentHelper32*, staTextAttr : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_text_attr.call(this, staTextAttr)
    end
    def set_text_attributes(this : IDebugDocumentHelper32*, ulCharOffset : UInt32, cChars : UInt32, pstaTextAttr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_attributes.call(this, ulCharOffset, cChars, pstaTextAttr)
    end
    def set_long_name(this : IDebugDocumentHelper32*, pszLongName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_long_name.call(this, pszLongName)
    end
    def set_short_name(this : IDebugDocumentHelper32*, pszShortName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_short_name.call(this, pszShortName)
    end
    def set_document_attr(this : IDebugDocumentHelper32*, pszAttributes : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_document_attr.call(this, pszAttributes)
    end
    def get_debug_application_node(this : IDebugDocumentHelper32*, ppdan : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_application_node.call(this, ppdan)
    end
    def get_script_block_info(this : IDebugDocumentHelper32*, dwSourceContext : UInt32, ppasd : Void**, piCharPos : UInt32*, pcChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_block_info.call(this, dwSourceContext, ppasd, piCharPos, pcChars)
    end
    def create_debug_document_context(this : IDebugDocumentHelper32*, iCharPos : UInt32, cChars : UInt32, ppddc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_debug_document_context.call(this, iCharPos, cChars, ppddc)
    end
    def bring_document_to_top(this : IDebugDocumentHelper32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_to_top.call(this)
    end
    def bring_document_context_to_top(this : IDebugDocumentHelper32*, pddc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_context_to_top.call(this, pddc)
    end

  end

  @[Extern]
  record IDebugDocumentHelper64Vtbl,
    query_interface : Proc(IDebugDocumentHelper64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentHelper64*, UInt32),
    release : Proc(IDebugDocumentHelper64*, UInt32),
    init : Proc(IDebugDocumentHelper64*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    attach : Proc(IDebugDocumentHelper64*, Void*, Win32cr::Foundation::HRESULT),
    detach : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::HRESULT),
    add_unicode_text : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_dbcs_text : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    set_debug_document_host : Proc(IDebugDocumentHelper64*, Void*, Win32cr::Foundation::HRESULT),
    add_deferred_text : Proc(IDebugDocumentHelper64*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    define_script_block : Proc(IDebugDocumentHelper64*, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL, UInt64*, Win32cr::Foundation::HRESULT),
    set_default_text_attr : Proc(IDebugDocumentHelper64*, UInt16, Win32cr::Foundation::HRESULT),
    set_text_attributes : Proc(IDebugDocumentHelper64*, UInt32, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    set_long_name : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_short_name : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_document_attr : Proc(IDebugDocumentHelper64*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_application_node : Proc(IDebugDocumentHelper64*, Void**, Win32cr::Foundation::HRESULT),
    get_script_block_info : Proc(IDebugDocumentHelper64*, UInt64, Void**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    create_debug_document_context : Proc(IDebugDocumentHelper64*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    bring_document_to_top : Proc(IDebugDocumentHelper64*, Win32cr::Foundation::HRESULT),
    bring_document_context_to_top : Proc(IDebugDocumentHelper64*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentHelper64, lpVtbl : IDebugDocumentHelper64Vtbl* do
    GUID = LibC::GUID.new(0xc4c7363c_u32, 0x20fd_u16, 0x47f9_u16, StaticArray[0xbd_u8, 0x82_u8, 0x48_u8, 0x55_u8, 0xe0_u8, 0x15_u8, 0x8_u8, 0x71_u8])
    def query_interface(this : IDebugDocumentHelper64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentHelper64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentHelper64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IDebugDocumentHelper64*, pda : Void*, pszShortName : Win32cr::Foundation::PWSTR, pszLongName : Win32cr::Foundation::PWSTR, docAttr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pda, pszShortName, pszLongName, docAttr)
    end
    def attach(this : IDebugDocumentHelper64*, pddhParent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach.call(this, pddhParent)
    end
    def detach(this : IDebugDocumentHelper64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach.call(this)
    end
    def add_unicode_text(this : IDebugDocumentHelper64*, pszText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_unicode_text.call(this, pszText)
    end
    def add_dbcs_text(this : IDebugDocumentHelper64*, pszText : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dbcs_text.call(this, pszText)
    end
    def set_debug_document_host(this : IDebugDocumentHelper64*, pddh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_document_host.call(this, pddh)
    end
    def add_deferred_text(this : IDebugDocumentHelper64*, cChars : UInt32, dwTextStartCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_deferred_text.call(this, cChars, dwTextStartCookie)
    end
    def define_script_block(this : IDebugDocumentHelper64*, ulCharOffset : UInt32, cChars : UInt32, pas : Void*, fScriptlet : Win32cr::Foundation::BOOL, pdwSourceContext : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.define_script_block.call(this, ulCharOffset, cChars, pas, fScriptlet, pdwSourceContext)
    end
    def set_default_text_attr(this : IDebugDocumentHelper64*, staTextAttr : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_text_attr.call(this, staTextAttr)
    end
    def set_text_attributes(this : IDebugDocumentHelper64*, ulCharOffset : UInt32, cChars : UInt32, pstaTextAttr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_attributes.call(this, ulCharOffset, cChars, pstaTextAttr)
    end
    def set_long_name(this : IDebugDocumentHelper64*, pszLongName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_long_name.call(this, pszLongName)
    end
    def set_short_name(this : IDebugDocumentHelper64*, pszShortName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_short_name.call(this, pszShortName)
    end
    def set_document_attr(this : IDebugDocumentHelper64*, pszAttributes : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_document_attr.call(this, pszAttributes)
    end
    def get_debug_application_node(this : IDebugDocumentHelper64*, ppdan : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_application_node.call(this, ppdan)
    end
    def get_script_block_info(this : IDebugDocumentHelper64*, dwSourceContext : UInt64, ppasd : Void**, piCharPos : UInt32*, pcChars : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_block_info.call(this, dwSourceContext, ppasd, piCharPos, pcChars)
    end
    def create_debug_document_context(this : IDebugDocumentHelper64*, iCharPos : UInt32, cChars : UInt32, ppddc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_debug_document_context.call(this, iCharPos, cChars, ppddc)
    end
    def bring_document_to_top(this : IDebugDocumentHelper64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_to_top.call(this)
    end
    def bring_document_context_to_top(this : IDebugDocumentHelper64*, pddc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_context_to_top.call(this, pddc)
    end

  end

  @[Extern]
  record IDebugDocumentHostVtbl,
    query_interface : Proc(IDebugDocumentHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentHost*, UInt32),
    release : Proc(IDebugDocumentHost*, UInt32),
    get_deferred_text : Proc(IDebugDocumentHost*, UInt32, UInt16*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::HRESULT),
    get_script_text_attributes : Proc(IDebugDocumentHost*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    on_create_document_context : Proc(IDebugDocumentHost*, Void**, Win32cr::Foundation::HRESULT),
    get_path_name : Proc(IDebugDocumentHost*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IDebugDocumentHost*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    notify_changed : Proc(IDebugDocumentHost*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentHost, lpVtbl : IDebugDocumentHostVtbl* do
    GUID = LibC::GUID.new(0x51973c27_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_deferred_text(this : IDebugDocumentHost*, dwTextStartCookie : UInt32, pcharText : UInt16*, pstaTextAttr : UInt16*, pcNumChars : UInt32*, cMaxChars : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deferred_text.call(this, dwTextStartCookie, pcharText, pstaTextAttr, pcNumChars, cMaxChars)
    end
    def get_script_text_attributes(this : IDebugDocumentHost*, pstrCode : UInt16*, uNumCodeChars : UInt32, pstrDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_text_attributes.call(this, pstrCode, uNumCodeChars, pstrDelimiter, dwFlags, pattr)
    end
    def on_create_document_context(this : IDebugDocumentHost*, ppunkOuter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_create_document_context.call(this, ppunkOuter)
    end
    def get_path_name(this : IDebugDocumentHost*, pbstrLongName : Win32cr::Foundation::BSTR*, pfIsOriginalFile : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_path_name.call(this, pbstrLongName, pfIsOriginalFile)
    end
    def get_file_name(this : IDebugDocumentHost*, pbstrShortName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, pbstrShortName)
    end
    def notify_changed(this : IDebugDocumentHost*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_changed.call(this)
    end

  end

  @[Extern]
  record IDebugDocumentContextVtbl,
    query_interface : Proc(IDebugDocumentContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugDocumentContext*, UInt32),
    release : Proc(IDebugDocumentContext*, UInt32),
    get_document : Proc(IDebugDocumentContext*, Void**, Win32cr::Foundation::HRESULT),
    enum_code_contexts : Proc(IDebugDocumentContext*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugDocumentContext, lpVtbl : IDebugDocumentContextVtbl* do
    GUID = LibC::GUID.new(0x51973c28_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugDocumentContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugDocumentContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugDocumentContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_document(this : IDebugDocumentContext*, ppsd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document.call(this, ppsd)
    end
    def enum_code_contexts(this : IDebugDocumentContext*, ppescc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_contexts.call(this, ppescc)
    end

  end

  @[Extern]
  record IDebugSessionProviderVtbl,
    query_interface : Proc(IDebugSessionProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugSessionProvider*, UInt32),
    release : Proc(IDebugSessionProvider*, UInt32),
    start_debug_session : Proc(IDebugSessionProvider*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugSessionProvider, lpVtbl : IDebugSessionProviderVtbl* do
    GUID = LibC::GUID.new(0x51973c29_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugSessionProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugSessionProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugSessionProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_debug_session(this : IDebugSessionProvider*, pda : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_debug_session.call(this, pda)
    end

  end

  @[Extern]
  record IApplicationDebuggerVtbl,
    query_interface : Proc(IApplicationDebugger*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IApplicationDebugger*, UInt32),
    release : Proc(IApplicationDebugger*, UInt32),
    query_alive : Proc(IApplicationDebugger*, Win32cr::Foundation::HRESULT),
    create_instance_at_debugger : Proc(IApplicationDebugger*, LibC::GUID*, Void*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    onDebugOutput : Proc(IApplicationDebugger*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    onHandleBreakPoint : Proc(IApplicationDebugger*, Void*, Win32cr::System::Diagnostics::Debug::BREAKREASON, Void*, Win32cr::Foundation::HRESULT),
    onClose : Proc(IApplicationDebugger*, Win32cr::Foundation::HRESULT),
    onDebuggerEvent : Proc(IApplicationDebugger*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IApplicationDebugger, lpVtbl : IApplicationDebuggerVtbl* do
    GUID = LibC::GUID.new(0x51973c2a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IApplicationDebugger*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IApplicationDebugger*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IApplicationDebugger*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_alive(this : IApplicationDebugger*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_alive.call(this)
    end
    def create_instance_at_debugger(this : IApplicationDebugger*, rclsid : LibC::GUID*, pUnkOuter : Void*, dwClsContext : UInt32, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_at_debugger.call(this, rclsid, pUnkOuter, dwClsContext, riid, ppvObject)
    end
    def onDebugOutput(this : IApplicationDebugger*, pstr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onDebugOutput.call(this, pstr)
    end
    def onHandleBreakPoint(this : IApplicationDebugger*, prpt : Void*, br : Win32cr::System::Diagnostics::Debug::BREAKREASON, pError : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onHandleBreakPoint.call(this, prpt, br, pError)
    end
    def onClose(this : IApplicationDebugger*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onClose.call(this)
    end
    def onDebuggerEvent(this : IApplicationDebugger*, riid : LibC::GUID*, punk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onDebuggerEvent.call(this, riid, punk)
    end

  end

  @[Extern]
  record IApplicationDebuggerUIVtbl,
    query_interface : Proc(IApplicationDebuggerUI*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IApplicationDebuggerUI*, UInt32),
    release : Proc(IApplicationDebuggerUI*, UInt32),
    bring_document_to_top : Proc(IApplicationDebuggerUI*, Void*, Win32cr::Foundation::HRESULT),
    bring_document_context_to_top : Proc(IApplicationDebuggerUI*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IApplicationDebuggerUI, lpVtbl : IApplicationDebuggerUIVtbl* do
    GUID = LibC::GUID.new(0x51973c2b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IApplicationDebuggerUI*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IApplicationDebuggerUI*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IApplicationDebuggerUI*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def bring_document_to_top(this : IApplicationDebuggerUI*, pddt : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_to_top.call(this, pddt)
    end
    def bring_document_context_to_top(this : IApplicationDebuggerUI*, pddc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bring_document_context_to_top.call(this, pddc)
    end

  end

  @[Extern]
  record IMachineDebugManagerVtbl,
    query_interface : Proc(IMachineDebugManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMachineDebugManager*, UInt32),
    release : Proc(IMachineDebugManager*, UInt32),
    add_application : Proc(IMachineDebugManager*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_application : Proc(IMachineDebugManager*, UInt32, Win32cr::Foundation::HRESULT),
    enum_applications : Proc(IMachineDebugManager*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMachineDebugManager, lpVtbl : IMachineDebugManagerVtbl* do
    GUID = LibC::GUID.new(0x51973c2c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IMachineDebugManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMachineDebugManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMachineDebugManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_application(this : IMachineDebugManager*, pda : Void*, pdwAppCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application.call(this, pda, pdwAppCookie)
    end
    def remove_application(this : IMachineDebugManager*, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_application.call(this, dwAppCookie)
    end
    def enum_applications(this : IMachineDebugManager*, ppeda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_applications.call(this, ppeda)
    end

  end

  @[Extern]
  record IMachineDebugManagerCookieVtbl,
    query_interface : Proc(IMachineDebugManagerCookie*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMachineDebugManagerCookie*, UInt32),
    release : Proc(IMachineDebugManagerCookie*, UInt32),
    add_application : Proc(IMachineDebugManagerCookie*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    remove_application : Proc(IMachineDebugManagerCookie*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    enum_applications : Proc(IMachineDebugManagerCookie*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMachineDebugManagerCookie, lpVtbl : IMachineDebugManagerCookieVtbl* do
    GUID = LibC::GUID.new(0x51973c2d_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IMachineDebugManagerCookie*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMachineDebugManagerCookie*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMachineDebugManagerCookie*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_application(this : IMachineDebugManagerCookie*, pda : Void*, dwDebugAppCookie : UInt32, pdwAppCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application.call(this, pda, dwDebugAppCookie, pdwAppCookie)
    end
    def remove_application(this : IMachineDebugManagerCookie*, dwDebugAppCookie : UInt32, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_application.call(this, dwDebugAppCookie, dwAppCookie)
    end
    def enum_applications(this : IMachineDebugManagerCookie*, ppeda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_applications.call(this, ppeda)
    end

  end

  @[Extern]
  record IMachineDebugManagerEventsVtbl,
    query_interface : Proc(IMachineDebugManagerEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMachineDebugManagerEvents*, UInt32),
    release : Proc(IMachineDebugManagerEvents*, UInt32),
    onAddApplication : Proc(IMachineDebugManagerEvents*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    onRemoveApplication : Proc(IMachineDebugManagerEvents*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMachineDebugManagerEvents, lpVtbl : IMachineDebugManagerEventsVtbl* do
    GUID = LibC::GUID.new(0x51973c2e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IMachineDebugManagerEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMachineDebugManagerEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMachineDebugManagerEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onAddApplication(this : IMachineDebugManagerEvents*, pda : Void*, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onAddApplication.call(this, pda, dwAppCookie)
    end
    def onRemoveApplication(this : IMachineDebugManagerEvents*, pda : Void*, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onRemoveApplication.call(this, pda, dwAppCookie)
    end

  end

  @[Extern]
  record IProcessDebugManager32Vtbl,
    query_interface : Proc(IProcessDebugManager32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProcessDebugManager32*, UInt32),
    release : Proc(IProcessDebugManager32*, UInt32),
    create_application : Proc(IProcessDebugManager32*, Void**, Win32cr::Foundation::HRESULT),
    get_default_application : Proc(IProcessDebugManager32*, Void**, Win32cr::Foundation::HRESULT),
    add_application : Proc(IProcessDebugManager32*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_application : Proc(IProcessDebugManager32*, UInt32, Win32cr::Foundation::HRESULT),
    create_debug_document_helper : Proc(IProcessDebugManager32*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProcessDebugManager32, lpVtbl : IProcessDebugManager32Vtbl* do
    GUID = LibC::GUID.new(0x51973c2f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IProcessDebugManager32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProcessDebugManager32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProcessDebugManager32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_application(this : IProcessDebugManager32*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_application.call(this, ppda)
    end
    def get_default_application(this : IProcessDebugManager32*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_application.call(this, ppda)
    end
    def add_application(this : IProcessDebugManager32*, pda : Void*, pdwAppCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application.call(this, pda, pdwAppCookie)
    end
    def remove_application(this : IProcessDebugManager32*, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_application.call(this, dwAppCookie)
    end
    def create_debug_document_helper(this : IProcessDebugManager32*, punkOuter : Void*, pddh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_debug_document_helper.call(this, punkOuter, pddh)
    end

  end

  @[Extern]
  record IProcessDebugManager64Vtbl,
    query_interface : Proc(IProcessDebugManager64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProcessDebugManager64*, UInt32),
    release : Proc(IProcessDebugManager64*, UInt32),
    create_application : Proc(IProcessDebugManager64*, Void**, Win32cr::Foundation::HRESULT),
    get_default_application : Proc(IProcessDebugManager64*, Void**, Win32cr::Foundation::HRESULT),
    add_application : Proc(IProcessDebugManager64*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_application : Proc(IProcessDebugManager64*, UInt32, Win32cr::Foundation::HRESULT),
    create_debug_document_helper : Proc(IProcessDebugManager64*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProcessDebugManager64, lpVtbl : IProcessDebugManager64Vtbl* do
    GUID = LibC::GUID.new(0x56b9fc1c_u32, 0x63a9_u16, 0x4cc1_u16, StaticArray[0xac_u8, 0x21_u8, 0x8_u8, 0x7d_u8, 0x69_u8, 0xa1_u8, 0x7f_u8, 0xab_u8])
    def query_interface(this : IProcessDebugManager64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProcessDebugManager64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProcessDebugManager64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_application(this : IProcessDebugManager64*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_application.call(this, ppda)
    end
    def get_default_application(this : IProcessDebugManager64*, ppda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_application.call(this, ppda)
    end
    def add_application(this : IProcessDebugManager64*, pda : Void*, pdwAppCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application.call(this, pda, pdwAppCookie)
    end
    def remove_application(this : IProcessDebugManager64*, dwAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_application.call(this, dwAppCookie)
    end
    def create_debug_document_helper(this : IProcessDebugManager64*, punkOuter : Void*, pddh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_debug_document_helper.call(this, punkOuter, pddh)
    end

  end

  @[Extern]
  record IRemoteDebugApplicationVtbl,
    query_interface : Proc(IRemoteDebugApplication*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugApplication*, UInt32),
    release : Proc(IRemoteDebugApplication*, UInt32),
    resume_from_break_point : Proc(IRemoteDebugApplication*, Void*, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION, Win32cr::Foundation::HRESULT),
    cause_break : Proc(IRemoteDebugApplication*, Win32cr::Foundation::HRESULT),
    connect_debugger : Proc(IRemoteDebugApplication*, Void*, Win32cr::Foundation::HRESULT),
    disconnect_debugger : Proc(IRemoteDebugApplication*, Win32cr::Foundation::HRESULT),
    get_debugger : Proc(IRemoteDebugApplication*, Void**, Win32cr::Foundation::HRESULT),
    create_instance_at_application : Proc(IRemoteDebugApplication*, LibC::GUID*, Void*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    query_alive : Proc(IRemoteDebugApplication*, Win32cr::Foundation::HRESULT),
    enum_threads : Proc(IRemoteDebugApplication*, Void**, Win32cr::Foundation::HRESULT),
    get_name : Proc(IRemoteDebugApplication*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_root_node : Proc(IRemoteDebugApplication*, Void**, Win32cr::Foundation::HRESULT),
    enum_global_expression_contexts : Proc(IRemoteDebugApplication*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugApplication, lpVtbl : IRemoteDebugApplicationVtbl* do
    GUID = LibC::GUID.new(0x51973c30_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IRemoteDebugApplication*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugApplication*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugApplication*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def resume_from_break_point(this : IRemoteDebugApplication*, prptFocus : Void*, bra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, era : Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume_from_break_point.call(this, prptFocus, bra, era)
    end
    def cause_break(this : IRemoteDebugApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cause_break.call(this)
    end
    def connect_debugger(this : IRemoteDebugApplication*, pad : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_debugger.call(this, pad)
    end
    def disconnect_debugger(this : IRemoteDebugApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_debugger.call(this)
    end
    def get_debugger(this : IRemoteDebugApplication*, pad : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debugger.call(this, pad)
    end
    def create_instance_at_application(this : IRemoteDebugApplication*, rclsid : LibC::GUID*, pUnkOuter : Void*, dwClsContext : UInt32, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_at_application.call(this, rclsid, pUnkOuter, dwClsContext, riid, ppvObject)
    end
    def query_alive(this : IRemoteDebugApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_alive.call(this)
    end
    def enum_threads(this : IRemoteDebugApplication*, pperdat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_threads.call(this, pperdat)
    end
    def get_name(this : IRemoteDebugApplication*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_root_node(this : IRemoteDebugApplication*, ppdanRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_node.call(this, ppdanRoot)
    end
    def enum_global_expression_contexts(this : IRemoteDebugApplication*, ppedec : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_global_expression_contexts.call(this, ppedec)
    end

  end

  @[Extern]
  record IDebugApplication32Vtbl,
    query_interface : Proc(IDebugApplication32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplication32*, UInt32),
    release : Proc(IDebugApplication32*, UInt32),
    resume_from_break_point : Proc(IDebugApplication32*, Void*, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION, Win32cr::Foundation::HRESULT),
    cause_break : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    connect_debugger : Proc(IDebugApplication32*, Void*, Win32cr::Foundation::HRESULT),
    disconnect_debugger : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    get_debugger : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    create_instance_at_application : Proc(IDebugApplication32*, LibC::GUID*, Void*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    query_alive : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    enum_threads : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugApplication32*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_root_node : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    enum_global_expression_contexts : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    set_name : Proc(IDebugApplication32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    step_out_complete : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    debug_output : Proc(IDebugApplication32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_debug_session : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    handle_break_point : Proc(IDebugApplication32*, Win32cr::System::Diagnostics::Debug::BREAKREASON, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, Win32cr::Foundation::HRESULT),
    close : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    get_break_flags : Proc(IDebugApplication32*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_current_thread : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    create_async_debug_operation : Proc(IDebugApplication32*, Void*, Void**, Win32cr::Foundation::HRESULT),
    add_stack_frame_sniffer : Proc(IDebugApplication32*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_stack_frame_sniffer : Proc(IDebugApplication32*, UInt32, Win32cr::Foundation::HRESULT),
    query_current_thread_is_debugger_thread : Proc(IDebugApplication32*, Win32cr::Foundation::HRESULT),
    synchronous_call_in_debugger_thread : Proc(IDebugApplication32*, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    create_application_node : Proc(IDebugApplication32*, Void**, Win32cr::Foundation::HRESULT),
    fire_debugger_event : Proc(IDebugApplication32*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    handle_runtime_error : Proc(IDebugApplication32*, Void*, Void*, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    f_can_jit_debug : Proc(IDebugApplication32*, Win32cr::Foundation::BOOL),
    f_is_auto_jit_debug_enabled : Proc(IDebugApplication32*, Win32cr::Foundation::BOOL),
    add_global_expression_context_provider : Proc(IDebugApplication32*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_global_expression_context_provider : Proc(IDebugApplication32*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplication32, lpVtbl : IDebugApplication32Vtbl* do
    GUID = LibC::GUID.new(0x51973c32_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugApplication32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplication32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplication32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def resume_from_break_point(this : IDebugApplication32*, prptFocus : Void*, bra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, era : Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume_from_break_point.call(this, prptFocus, bra, era)
    end
    def cause_break(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cause_break.call(this)
    end
    def connect_debugger(this : IDebugApplication32*, pad : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_debugger.call(this, pad)
    end
    def disconnect_debugger(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_debugger.call(this)
    end
    def get_debugger(this : IDebugApplication32*, pad : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debugger.call(this, pad)
    end
    def create_instance_at_application(this : IDebugApplication32*, rclsid : LibC::GUID*, pUnkOuter : Void*, dwClsContext : UInt32, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_at_application.call(this, rclsid, pUnkOuter, dwClsContext, riid, ppvObject)
    end
    def query_alive(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_alive.call(this)
    end
    def enum_threads(this : IDebugApplication32*, pperdat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_threads.call(this, pperdat)
    end
    def get_name(this : IDebugApplication32*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_root_node(this : IDebugApplication32*, ppdanRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_node.call(this, ppdanRoot)
    end
    def enum_global_expression_contexts(this : IDebugApplication32*, ppedec : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_global_expression_contexts.call(this, ppedec)
    end
    def set_name(this : IDebugApplication32*, pstrName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, pstrName)
    end
    def step_out_complete(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step_out_complete.call(this)
    end
    def debug_output(this : IDebugApplication32*, pstr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.debug_output.call(this, pstr)
    end
    def start_debug_session(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_debug_session.call(this)
    end
    def handle_break_point(this : IDebugApplication32*, br : Win32cr::System::Diagnostics::Debug::BREAKREASON, pbra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handle_break_point.call(this, br, pbra)
    end
    def close(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_break_flags(this : IDebugApplication32*, pabf : UInt32*, pprdatSteppingThread : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_break_flags.call(this, pabf, pprdatSteppingThread)
    end
    def get_current_thread(this : IDebugApplication32*, pat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread.call(this, pat)
    end
    def create_async_debug_operation(this : IDebugApplication32*, psdo : Void*, ppado : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_async_debug_operation.call(this, psdo, ppado)
    end
    def add_stack_frame_sniffer(this : IDebugApplication32*, pdsfs : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stack_frame_sniffer.call(this, pdsfs, pdwCookie)
    end
    def remove_stack_frame_sniffer(this : IDebugApplication32*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stack_frame_sniffer.call(this, dwCookie)
    end
    def query_current_thread_is_debugger_thread(this : IDebugApplication32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_current_thread_is_debugger_thread.call(this)
    end
    def synchronous_call_in_debugger_thread(this : IDebugApplication32*, pptc : Void*, dwParam1 : UInt32, dwParam2 : UInt32, dwParam3 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_in_debugger_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def create_application_node(this : IDebugApplication32*, ppdanNew : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_application_node.call(this, ppdanNew)
    end
    def fire_debugger_event(this : IDebugApplication32*, riid : LibC::GUID*, punk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_debugger_event.call(this, riid, punk)
    end
    def handle_runtime_error(this : IDebugApplication32*, pErrorDebug : Void*, pScriptSite : Void*, pbra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, perra : Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION*, pfCallOnScriptError : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handle_runtime_error.call(this, pErrorDebug, pScriptSite, pbra, perra, pfCallOnScriptError)
    end
    def f_can_jit_debug(this : IDebugApplication32*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.f_can_jit_debug.call(this)
    end
    def f_is_auto_jit_debug_enabled(this : IDebugApplication32*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.f_is_auto_jit_debug_enabled.call(this)
    end
    def add_global_expression_context_provider(this : IDebugApplication32*, pdsfs : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_global_expression_context_provider.call(this, pdsfs, pdwCookie)
    end
    def remove_global_expression_context_provider(this : IDebugApplication32*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_global_expression_context_provider.call(this, dwCookie)
    end

  end

  @[Extern]
  record IDebugApplication64Vtbl,
    query_interface : Proc(IDebugApplication64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplication64*, UInt32),
    release : Proc(IDebugApplication64*, UInt32),
    resume_from_break_point : Proc(IDebugApplication64*, Void*, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION, Win32cr::Foundation::HRESULT),
    cause_break : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    connect_debugger : Proc(IDebugApplication64*, Void*, Win32cr::Foundation::HRESULT),
    disconnect_debugger : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    get_debugger : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    create_instance_at_application : Proc(IDebugApplication64*, LibC::GUID*, Void*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    query_alive : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    enum_threads : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    get_name : Proc(IDebugApplication64*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_root_node : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    enum_global_expression_contexts : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    set_name : Proc(IDebugApplication64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    step_out_complete : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    debug_output : Proc(IDebugApplication64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    start_debug_session : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    handle_break_point : Proc(IDebugApplication64*, Win32cr::System::Diagnostics::Debug::BREAKREASON, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, Win32cr::Foundation::HRESULT),
    close : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    get_break_flags : Proc(IDebugApplication64*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_current_thread : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    create_async_debug_operation : Proc(IDebugApplication64*, Void*, Void**, Win32cr::Foundation::HRESULT),
    add_stack_frame_sniffer : Proc(IDebugApplication64*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_stack_frame_sniffer : Proc(IDebugApplication64*, UInt32, Win32cr::Foundation::HRESULT),
    query_current_thread_is_debugger_thread : Proc(IDebugApplication64*, Win32cr::Foundation::HRESULT),
    synchronous_call_in_debugger_thread : Proc(IDebugApplication64*, Void*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    create_application_node : Proc(IDebugApplication64*, Void**, Win32cr::Foundation::HRESULT),
    fire_debugger_event : Proc(IDebugApplication64*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    handle_runtime_error : Proc(IDebugApplication64*, Void*, Void*, Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    f_can_jit_debug : Proc(IDebugApplication64*, Win32cr::Foundation::BOOL),
    f_is_auto_jit_debug_enabled : Proc(IDebugApplication64*, Win32cr::Foundation::BOOL),
    add_global_expression_context_provider : Proc(IDebugApplication64*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    remove_global_expression_context_provider : Proc(IDebugApplication64*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplication64, lpVtbl : IDebugApplication64Vtbl* do
    GUID = LibC::GUID.new(0x4dedc754_u32, 0x4c7_u16, 0x4f10_u16, StaticArray[0x9e_u8, 0x60_u8, 0x16_u8, 0xa3_u8, 0x90_u8, 0xfe_u8, 0x6e_u8, 0x62_u8])
    def query_interface(this : IDebugApplication64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplication64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplication64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def resume_from_break_point(this : IDebugApplication64*, prptFocus : Void*, bra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION, era : Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume_from_break_point.call(this, prptFocus, bra, era)
    end
    def cause_break(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cause_break.call(this)
    end
    def connect_debugger(this : IDebugApplication64*, pad : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_debugger.call(this, pad)
    end
    def disconnect_debugger(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_debugger.call(this)
    end
    def get_debugger(this : IDebugApplication64*, pad : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debugger.call(this, pad)
    end
    def create_instance_at_application(this : IDebugApplication64*, rclsid : LibC::GUID*, pUnkOuter : Void*, dwClsContext : UInt32, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_at_application.call(this, rclsid, pUnkOuter, dwClsContext, riid, ppvObject)
    end
    def query_alive(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_alive.call(this)
    end
    def enum_threads(this : IDebugApplication64*, pperdat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_threads.call(this, pperdat)
    end
    def get_name(this : IDebugApplication64*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_root_node(this : IDebugApplication64*, ppdanRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_node.call(this, ppdanRoot)
    end
    def enum_global_expression_contexts(this : IDebugApplication64*, ppedec : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_global_expression_contexts.call(this, ppedec)
    end
    def set_name(this : IDebugApplication64*, pstrName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, pstrName)
    end
    def step_out_complete(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step_out_complete.call(this)
    end
    def debug_output(this : IDebugApplication64*, pstr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.debug_output.call(this, pstr)
    end
    def start_debug_session(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_debug_session.call(this)
    end
    def handle_break_point(this : IDebugApplication64*, br : Win32cr::System::Diagnostics::Debug::BREAKREASON, pbra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handle_break_point.call(this, br, pbra)
    end
    def close(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_break_flags(this : IDebugApplication64*, pabf : UInt32*, pprdatSteppingThread : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_break_flags.call(this, pabf, pprdatSteppingThread)
    end
    def get_current_thread(this : IDebugApplication64*, pat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_thread.call(this, pat)
    end
    def create_async_debug_operation(this : IDebugApplication64*, psdo : Void*, ppado : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_async_debug_operation.call(this, psdo, ppado)
    end
    def add_stack_frame_sniffer(this : IDebugApplication64*, pdsfs : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stack_frame_sniffer.call(this, pdsfs, pdwCookie)
    end
    def remove_stack_frame_sniffer(this : IDebugApplication64*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stack_frame_sniffer.call(this, dwCookie)
    end
    def query_current_thread_is_debugger_thread(this : IDebugApplication64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_current_thread_is_debugger_thread.call(this)
    end
    def synchronous_call_in_debugger_thread(this : IDebugApplication64*, pptc : Void*, dwParam1 : UInt64, dwParam2 : UInt64, dwParam3 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_in_debugger_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def create_application_node(this : IDebugApplication64*, ppdanNew : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_application_node.call(this, ppdanNew)
    end
    def fire_debugger_event(this : IDebugApplication64*, riid : LibC::GUID*, punk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_debugger_event.call(this, riid, punk)
    end
    def handle_runtime_error(this : IDebugApplication64*, pErrorDebug : Void*, pScriptSite : Void*, pbra : Win32cr::System::Diagnostics::Debug::BREAKRESUME_ACTION*, perra : Win32cr::System::Diagnostics::Debug::ERRORRESUMEACTION*, pfCallOnScriptError : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handle_runtime_error.call(this, pErrorDebug, pScriptSite, pbra, perra, pfCallOnScriptError)
    end
    def f_can_jit_debug(this : IDebugApplication64*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.f_can_jit_debug.call(this)
    end
    def f_is_auto_jit_debug_enabled(this : IDebugApplication64*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.f_is_auto_jit_debug_enabled.call(this)
    end
    def add_global_expression_context_provider(this : IDebugApplication64*, pdsfs : Void*, pdwCookie : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_global_expression_context_provider.call(this, pdsfs, pdwCookie)
    end
    def remove_global_expression_context_provider(this : IDebugApplication64*, dwCookie : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_global_expression_context_provider.call(this, dwCookie)
    end

  end

  @[Extern]
  record IRemoteDebugApplicationEventsVtbl,
    query_interface : Proc(IRemoteDebugApplicationEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugApplicationEvents*, UInt32),
    release : Proc(IRemoteDebugApplicationEvents*, UInt32),
    on_connect_debugger : Proc(IRemoteDebugApplicationEvents*, Void*, Win32cr::Foundation::HRESULT),
    on_disconnect_debugger : Proc(IRemoteDebugApplicationEvents*, Win32cr::Foundation::HRESULT),
    on_set_name : Proc(IRemoteDebugApplicationEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_debug_output : Proc(IRemoteDebugApplicationEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_close : Proc(IRemoteDebugApplicationEvents*, Win32cr::Foundation::HRESULT),
    on_enter_break_point : Proc(IRemoteDebugApplicationEvents*, Void*, Win32cr::Foundation::HRESULT),
    on_leave_break_point : Proc(IRemoteDebugApplicationEvents*, Void*, Win32cr::Foundation::HRESULT),
    on_create_thread : Proc(IRemoteDebugApplicationEvents*, Void*, Win32cr::Foundation::HRESULT),
    on_destroy_thread : Proc(IRemoteDebugApplicationEvents*, Void*, Win32cr::Foundation::HRESULT),
    on_break_flag_change : Proc(IRemoteDebugApplicationEvents*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugApplicationEvents, lpVtbl : IRemoteDebugApplicationEventsVtbl* do
    GUID = LibC::GUID.new(0x51973c33_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IRemoteDebugApplicationEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugApplicationEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugApplicationEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_connect_debugger(this : IRemoteDebugApplicationEvents*, pad : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_connect_debugger.call(this, pad)
    end
    def on_disconnect_debugger(this : IRemoteDebugApplicationEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_disconnect_debugger.call(this)
    end
    def on_set_name(this : IRemoteDebugApplicationEvents*, pstrName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_set_name.call(this, pstrName)
    end
    def on_debug_output(this : IRemoteDebugApplicationEvents*, pstr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_debug_output.call(this, pstr)
    end
    def on_close(this : IRemoteDebugApplicationEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_close.call(this)
    end
    def on_enter_break_point(this : IRemoteDebugApplicationEvents*, prdat : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_enter_break_point.call(this, prdat)
    end
    def on_leave_break_point(this : IRemoteDebugApplicationEvents*, prdat : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_leave_break_point.call(this, prdat)
    end
    def on_create_thread(this : IRemoteDebugApplicationEvents*, prdat : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_create_thread.call(this, prdat)
    end
    def on_destroy_thread(this : IRemoteDebugApplicationEvents*, prdat : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_destroy_thread.call(this, prdat)
    end
    def on_break_flag_change(this : IRemoteDebugApplicationEvents*, abf : UInt32, prdatSteppingThread : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_break_flag_change.call(this, abf, prdatSteppingThread)
    end

  end

  @[Extern]
  record IDebugApplicationNodeVtbl,
    query_interface : Proc(IDebugApplicationNode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationNode*, UInt32),
    release : Proc(IDebugApplicationNode*, UInt32),
    get_name : Proc(IDebugApplicationNode*, Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_class_id : Proc(IDebugApplicationNode*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_document : Proc(IDebugApplicationNode*, Void**, Win32cr::Foundation::HRESULT),
    enum_children : Proc(IDebugApplicationNode*, Void**, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IDebugApplicationNode*, Void**, Win32cr::Foundation::HRESULT),
    set_document_provider : Proc(IDebugApplicationNode*, Void*, Win32cr::Foundation::HRESULT),
    close : Proc(IDebugApplicationNode*, Win32cr::Foundation::HRESULT),
    attach : Proc(IDebugApplicationNode*, Void*, Win32cr::Foundation::HRESULT),
    detach : Proc(IDebugApplicationNode*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationNode, lpVtbl : IDebugApplicationNodeVtbl* do
    GUID = LibC::GUID.new(0x51973c34_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugApplicationNode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationNode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationNode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IDebugApplicationNode*, dnt : Win32cr::System::Diagnostics::Debug::DOCUMENTNAMETYPE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dnt, pbstrName)
    end
    def get_document_class_id(this : IDebugApplicationNode*, pclsidDocument : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_class_id.call(this, pclsidDocument)
    end
    def get_document(this : IDebugApplicationNode*, ppssd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document.call(this, ppssd)
    end
    def enum_children(this : IDebugApplicationNode*, pperddp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_children.call(this, pperddp)
    end
    def get_parent(this : IDebugApplicationNode*, pprddp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, pprddp)
    end
    def set_document_provider(this : IDebugApplicationNode*, pddp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_document_provider.call(this, pddp)
    end
    def close(this : IDebugApplicationNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def attach(this : IDebugApplicationNode*, pdanParent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach.call(this, pdanParent)
    end
    def detach(this : IDebugApplicationNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach.call(this)
    end

  end

  @[Extern]
  record IDebugApplicationNodeEventsVtbl,
    query_interface : Proc(IDebugApplicationNodeEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationNodeEvents*, UInt32),
    release : Proc(IDebugApplicationNodeEvents*, UInt32),
    onAddChild : Proc(IDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT),
    onRemoveChild : Proc(IDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT),
    onDetach : Proc(IDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT),
    onAttach : Proc(IDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationNodeEvents, lpVtbl : IDebugApplicationNodeEventsVtbl* do
    GUID = LibC::GUID.new(0x51973c35_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugApplicationNodeEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationNodeEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationNodeEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onAddChild(this : IDebugApplicationNodeEvents*, prddpChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onAddChild.call(this, prddpChild)
    end
    def onRemoveChild(this : IDebugApplicationNodeEvents*, prddpChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onRemoveChild.call(this, prddpChild)
    end
    def onDetach(this : IDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onDetach.call(this)
    end
    def onAttach(this : IDebugApplicationNodeEvents*, prddpParent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onAttach.call(this, prddpParent)
    end

  end

  @[Extern]
  record AsyncIDebugApplicationNodeEventsVtbl,
    query_interface : Proc(AsyncIDebugApplicationNodeEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(AsyncIDebugApplicationNodeEvents*, UInt32),
    release : Proc(AsyncIDebugApplicationNodeEvents*, UInt32),
    begin_on_add_child : Proc(AsyncIDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT),
    finish_on_add_child : Proc(AsyncIDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT),
    begin_on_remove_child : Proc(AsyncIDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT),
    finish_on_remove_child : Proc(AsyncIDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT),
    begin_on_detach : Proc(AsyncIDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT),
    finish_on_detach : Proc(AsyncIDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT),
    begin_on_attach : Proc(AsyncIDebugApplicationNodeEvents*, Void*, Win32cr::Foundation::HRESULT),
    finish_on_attach : Proc(AsyncIDebugApplicationNodeEvents*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record AsyncIDebugApplicationNodeEvents, lpVtbl : AsyncIDebugApplicationNodeEventsVtbl* do
    GUID = LibC::GUID.new(0xa2e3aa3b_u32, 0xaa8d_u16, 0x4ebf_u16, StaticArray[0x84_u8, 0xcd_u8, 0x64_u8, 0x8b_u8, 0x73_u8, 0x7b_u8, 0x8c_u8, 0x13_u8])
    def query_interface(this : AsyncIDebugApplicationNodeEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : AsyncIDebugApplicationNodeEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : AsyncIDebugApplicationNodeEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_on_add_child(this : AsyncIDebugApplicationNodeEvents*, prddpChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_on_add_child.call(this, prddpChild)
    end
    def finish_on_add_child(this : AsyncIDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_on_add_child.call(this)
    end
    def begin_on_remove_child(this : AsyncIDebugApplicationNodeEvents*, prddpChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_on_remove_child.call(this, prddpChild)
    end
    def finish_on_remove_child(this : AsyncIDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_on_remove_child.call(this)
    end
    def begin_on_detach(this : AsyncIDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_on_detach.call(this)
    end
    def finish_on_detach(this : AsyncIDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_on_detach.call(this)
    end
    def begin_on_attach(this : AsyncIDebugApplicationNodeEvents*, prddpParent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_on_attach.call(this, prddpParent)
    end
    def finish_on_attach(this : AsyncIDebugApplicationNodeEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_on_attach.call(this)
    end

  end

  @[Extern]
  record IDebugThreadCall32Vtbl,
    query_interface : Proc(IDebugThreadCall32*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugThreadCall32*, UInt32),
    release : Proc(IDebugThreadCall32*, UInt32),
    thread_call_handler : Proc(IDebugThreadCall32*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugThreadCall32, lpVtbl : IDebugThreadCall32Vtbl* do
    GUID = LibC::GUID.new(0x51973c36_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugThreadCall32*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugThreadCall32*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugThreadCall32*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def thread_call_handler(this : IDebugThreadCall32*, dwParam1 : UInt32, dwParam2 : UInt32, dwParam3 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.thread_call_handler.call(this, dwParam1, dwParam2, dwParam3)
    end

  end

  @[Extern]
  record IDebugThreadCall64Vtbl,
    query_interface : Proc(IDebugThreadCall64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugThreadCall64*, UInt32),
    release : Proc(IDebugThreadCall64*, UInt32),
    thread_call_handler : Proc(IDebugThreadCall64*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugThreadCall64, lpVtbl : IDebugThreadCall64Vtbl* do
    GUID = LibC::GUID.new(0xcb3fa335_u32, 0xe979_u16, 0x42fd_u16, StaticArray[0x9f_u8, 0xcf_u8, 0xa7_u8, 0x54_u8, 0x6a_u8, 0xf_u8, 0x39_u8, 0x5_u8])
    def query_interface(this : IDebugThreadCall64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugThreadCall64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugThreadCall64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def thread_call_handler(this : IDebugThreadCall64*, dwParam1 : UInt64, dwParam2 : UInt64, dwParam3 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.thread_call_handler.call(this, dwParam1, dwParam2, dwParam3)
    end

  end

  @[Extern]
  record IRemoteDebugApplicationThreadVtbl,
    query_interface : Proc(IRemoteDebugApplicationThread*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugApplicationThread*, UInt32),
    release : Proc(IRemoteDebugApplicationThread*, UInt32),
    get_system_thread_id : Proc(IRemoteDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    get_application : Proc(IRemoteDebugApplicationThread*, Void**, Win32cr::Foundation::HRESULT),
    enum_stack_frames : Proc(IRemoteDebugApplicationThread*, Void**, Win32cr::Foundation::HRESULT),
    get_description : Proc(IRemoteDebugApplicationThread*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_next_statement : Proc(IRemoteDebugApplicationThread*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IRemoteDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    suspend : Proc(IRemoteDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    resume : Proc(IRemoteDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    get_suspend_count : Proc(IRemoteDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugApplicationThread, lpVtbl : IRemoteDebugApplicationThreadVtbl* do
    GUID = LibC::GUID.new(0x51973c37_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IRemoteDebugApplicationThread*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugApplicationThread*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugApplicationThread*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_system_thread_id(this : IRemoteDebugApplicationThread*, dwThreadId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_thread_id.call(this, dwThreadId)
    end
    def get_application(this : IRemoteDebugApplicationThread*, pprda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application.call(this, pprda)
    end
    def enum_stack_frames(this : IRemoteDebugApplicationThread*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end
    def get_description(this : IRemoteDebugApplicationThread*, pbstrDescription : Win32cr::Foundation::BSTR*, pbstrState : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription, pbstrState)
    end
    def set_next_statement(this : IRemoteDebugApplicationThread*, pStackFrame : Void*, pCodeContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_statement.call(this, pStackFrame, pCodeContext)
    end
    def get_state(this : IRemoteDebugApplicationThread*, pState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pState)
    end
    def suspend(this : IRemoteDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suspend.call(this, pdwCount)
    end
    def resume(this : IRemoteDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this, pdwCount)
    end
    def get_suspend_count(this : IRemoteDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_count.call(this, pdwCount)
    end

  end

  @[Extern]
  record IDebugApplicationThreadVtbl,
    query_interface : Proc(IDebugApplicationThread*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationThread*, UInt32),
    release : Proc(IDebugApplicationThread*, UInt32),
    get_system_thread_id : Proc(IDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    get_application : Proc(IDebugApplicationThread*, Void**, Win32cr::Foundation::HRESULT),
    enum_stack_frames : Proc(IDebugApplicationThread*, Void**, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDebugApplicationThread*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_next_statement : Proc(IDebugApplicationThread*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    suspend : Proc(IDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    resume : Proc(IDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    get_suspend_count : Proc(IDebugApplicationThread*, UInt32*, Win32cr::Foundation::HRESULT),
    synchronous_call_into_thread32 : Proc(IDebugApplicationThread*, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    query_is_current_thread : Proc(IDebugApplicationThread*, Win32cr::Foundation::HRESULT),
    query_is_debugger_thread : Proc(IDebugApplicationThread*, Win32cr::Foundation::HRESULT),
    set_description : Proc(IDebugApplicationThread*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_state_string : Proc(IDebugApplicationThread*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationThread, lpVtbl : IDebugApplicationThreadVtbl* do
    GUID = LibC::GUID.new(0x51973c38_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugApplicationThread*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationThread*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationThread*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_system_thread_id(this : IDebugApplicationThread*, dwThreadId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_thread_id.call(this, dwThreadId)
    end
    def get_application(this : IDebugApplicationThread*, pprda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application.call(this, pprda)
    end
    def enum_stack_frames(this : IDebugApplicationThread*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end
    def get_description(this : IDebugApplicationThread*, pbstrDescription : Win32cr::Foundation::BSTR*, pbstrState : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription, pbstrState)
    end
    def set_next_statement(this : IDebugApplicationThread*, pStackFrame : Void*, pCodeContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_statement.call(this, pStackFrame, pCodeContext)
    end
    def get_state(this : IDebugApplicationThread*, pState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pState)
    end
    def suspend(this : IDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suspend.call(this, pdwCount)
    end
    def resume(this : IDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this, pdwCount)
    end
    def get_suspend_count(this : IDebugApplicationThread*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_count.call(this, pdwCount)
    end
    def synchronous_call_into_thread32(this : IDebugApplicationThread*, pstcb : Void*, dwParam1 : UInt32, dwParam2 : UInt32, dwParam3 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_into_thread32.call(this, pstcb, dwParam1, dwParam2, dwParam3)
    end
    def query_is_current_thread(this : IDebugApplicationThread*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_current_thread.call(this)
    end
    def query_is_debugger_thread(this : IDebugApplicationThread*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_debugger_thread.call(this)
    end
    def set_description(this : IDebugApplicationThread*, pstrDescription : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_description.call(this, pstrDescription)
    end
    def set_state_string(this : IDebugApplicationThread*, pstrState : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state_string.call(this, pstrState)
    end

  end

  @[Extern]
  record IDebugApplicationThread64Vtbl,
    query_interface : Proc(IDebugApplicationThread64*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationThread64*, UInt32),
    release : Proc(IDebugApplicationThread64*, UInt32),
    get_system_thread_id : Proc(IDebugApplicationThread64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_application : Proc(IDebugApplicationThread64*, Void**, Win32cr::Foundation::HRESULT),
    enum_stack_frames : Proc(IDebugApplicationThread64*, Void**, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDebugApplicationThread64*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_next_statement : Proc(IDebugApplicationThread64*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IDebugApplicationThread64*, UInt32*, Win32cr::Foundation::HRESULT),
    suspend : Proc(IDebugApplicationThread64*, UInt32*, Win32cr::Foundation::HRESULT),
    resume : Proc(IDebugApplicationThread64*, UInt32*, Win32cr::Foundation::HRESULT),
    get_suspend_count : Proc(IDebugApplicationThread64*, UInt32*, Win32cr::Foundation::HRESULT),
    synchronous_call_into_thread32 : Proc(IDebugApplicationThread64*, Void*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    query_is_current_thread : Proc(IDebugApplicationThread64*, Win32cr::Foundation::HRESULT),
    query_is_debugger_thread : Proc(IDebugApplicationThread64*, Win32cr::Foundation::HRESULT),
    set_description : Proc(IDebugApplicationThread64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_state_string : Proc(IDebugApplicationThread64*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    synchronous_call_into_thread64 : Proc(IDebugApplicationThread64*, Void*, UInt64, UInt64, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationThread64, lpVtbl : IDebugApplicationThread64Vtbl* do
    GUID = LibC::GUID.new(0x9dac5886_u32, 0xdbad_u16, 0x456d_u16, StaticArray[0x9d_u8, 0xee_u8, 0x5d_u8, 0xec_u8, 0x39_u8, 0xab_u8, 0x3d_u8, 0xda_u8])
    def query_interface(this : IDebugApplicationThread64*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationThread64*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationThread64*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_system_thread_id(this : IDebugApplicationThread64*, dwThreadId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_thread_id.call(this, dwThreadId)
    end
    def get_application(this : IDebugApplicationThread64*, pprda : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application.call(this, pprda)
    end
    def enum_stack_frames(this : IDebugApplicationThread64*, ppedsf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stack_frames.call(this, ppedsf)
    end
    def get_description(this : IDebugApplicationThread64*, pbstrDescription : Win32cr::Foundation::BSTR*, pbstrState : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription, pbstrState)
    end
    def set_next_statement(this : IDebugApplicationThread64*, pStackFrame : Void*, pCodeContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_next_statement.call(this, pStackFrame, pCodeContext)
    end
    def get_state(this : IDebugApplicationThread64*, pState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pState)
    end
    def suspend(this : IDebugApplicationThread64*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suspend.call(this, pdwCount)
    end
    def resume(this : IDebugApplicationThread64*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this, pdwCount)
    end
    def get_suspend_count(this : IDebugApplicationThread64*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_count.call(this, pdwCount)
    end
    def synchronous_call_into_thread32(this : IDebugApplicationThread64*, pstcb : Void*, dwParam1 : UInt32, dwParam2 : UInt32, dwParam3 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_into_thread32.call(this, pstcb, dwParam1, dwParam2, dwParam3)
    end
    def query_is_current_thread(this : IDebugApplicationThread64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_current_thread.call(this)
    end
    def query_is_debugger_thread(this : IDebugApplicationThread64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_debugger_thread.call(this)
    end
    def set_description(this : IDebugApplicationThread64*, pstrDescription : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_description.call(this, pstrDescription)
    end
    def set_state_string(this : IDebugApplicationThread64*, pstrState : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state_string.call(this, pstrState)
    end
    def synchronous_call_into_thread64(this : IDebugApplicationThread64*, pstcb : Void*, dwParam1 : UInt64, dwParam2 : UInt64, dwParam3 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_into_thread64.call(this, pstcb, dwParam1, dwParam2, dwParam3)
    end

  end

  @[Extern]
  record IDebugCookieVtbl,
    query_interface : Proc(IDebugCookie*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugCookie*, UInt32),
    release : Proc(IDebugCookie*, UInt32),
    set_debug_cookie : Proc(IDebugCookie*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugCookie, lpVtbl : IDebugCookieVtbl* do
    GUID = LibC::GUID.new(0x51973c39_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugCookie*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugCookie*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugCookie*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_debug_cookie(this : IDebugCookie*, dwDebugAppCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_cookie.call(this, dwDebugAppCookie)
    end

  end

  @[Extern]
  record IEnumDebugApplicationNodesVtbl,
    query_interface : Proc(IEnumDebugApplicationNodes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugApplicationNodes*, UInt32),
    release : Proc(IEnumDebugApplicationNodes*, UInt32),
    next__ : Proc(IEnumDebugApplicationNodes*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugApplicationNodes*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugApplicationNodes*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugApplicationNodes*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugApplicationNodes, lpVtbl : IEnumDebugApplicationNodesVtbl* do
    GUID = LibC::GUID.new(0x51973c3a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugApplicationNodes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugApplicationNodes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugApplicationNodes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugApplicationNodes*, celt : UInt32, pprddp : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pprddp, pceltFetched)
    end
    def skip(this : IEnumDebugApplicationNodes*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugApplicationNodes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugApplicationNodes*, pperddp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pperddp)
    end

  end

  @[Extern]
  record IEnumRemoteDebugApplicationsVtbl,
    query_interface : Proc(IEnumRemoteDebugApplications*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumRemoteDebugApplications*, UInt32),
    release : Proc(IEnumRemoteDebugApplications*, UInt32),
    next__ : Proc(IEnumRemoteDebugApplications*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumRemoteDebugApplications*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumRemoteDebugApplications*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumRemoteDebugApplications*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumRemoteDebugApplications, lpVtbl : IEnumRemoteDebugApplicationsVtbl* do
    GUID = LibC::GUID.new(0x51973c3b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumRemoteDebugApplications*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumRemoteDebugApplications*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumRemoteDebugApplications*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumRemoteDebugApplications*, celt : UInt32, ppda : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppda, pceltFetched)
    end
    def skip(this : IEnumRemoteDebugApplications*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumRemoteDebugApplications*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumRemoteDebugApplications*, ppessd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppessd)
    end

  end

  @[Extern]
  record IEnumRemoteDebugApplicationThreadsVtbl,
    query_interface : Proc(IEnumRemoteDebugApplicationThreads*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumRemoteDebugApplicationThreads*, UInt32),
    release : Proc(IEnumRemoteDebugApplicationThreads*, UInt32),
    next__ : Proc(IEnumRemoteDebugApplicationThreads*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumRemoteDebugApplicationThreads*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumRemoteDebugApplicationThreads*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumRemoteDebugApplicationThreads*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumRemoteDebugApplicationThreads, lpVtbl : IEnumRemoteDebugApplicationThreadsVtbl* do
    GUID = LibC::GUID.new(0x51973c3c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumRemoteDebugApplicationThreads*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumRemoteDebugApplicationThreads*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumRemoteDebugApplicationThreads*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumRemoteDebugApplicationThreads*, celt : UInt32, pprdat : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pprdat, pceltFetched)
    end
    def skip(this : IEnumRemoteDebugApplicationThreads*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumRemoteDebugApplicationThreads*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumRemoteDebugApplicationThreads*, pperdat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pperdat)
    end

  end

  @[Extern]
  record IDebugFormatterVtbl,
    query_interface : Proc(IDebugFormatter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugFormatter*, UInt32),
    release : Proc(IDebugFormatter*, UInt32),
    get_string_for_variant : Proc(IDebugFormatter*, Win32cr::System::Com::VARIANT*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_variant_for_string : Proc(IDebugFormatter*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_string_for_var_type : Proc(IDebugFormatter*, UInt16, Win32cr::System::Com::TYPEDESC*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugFormatter, lpVtbl : IDebugFormatterVtbl* do
    GUID = LibC::GUID.new(0x51973c05_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugFormatter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugFormatter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugFormatter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_string_for_variant(this : IDebugFormatter*, pvar : Win32cr::System::Com::VARIANT*, nRadix : UInt32, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_for_variant.call(this, pvar, nRadix, pbstrValue)
    end
    def get_variant_for_string(this : IDebugFormatter*, pwstrValue : Win32cr::Foundation::PWSTR, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_variant_for_string.call(this, pwstrValue, pvar)
    end
    def get_string_for_var_type(this : IDebugFormatter*, vt : UInt16, ptdescArrayType : Win32cr::System::Com::TYPEDESC*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_for_var_type.call(this, vt, ptdescArrayType, pbstr)
    end

  end

  @[Extern]
  record ISimpleConnectionPointVtbl,
    query_interface : Proc(ISimpleConnectionPoint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISimpleConnectionPoint*, UInt32),
    release : Proc(ISimpleConnectionPoint*, UInt32),
    get_event_count : Proc(ISimpleConnectionPoint*, UInt32*, Win32cr::Foundation::HRESULT),
    describe_events : Proc(ISimpleConnectionPoint*, UInt32, UInt32, Int32*, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    advise : Proc(ISimpleConnectionPoint*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unadvise : Proc(ISimpleConnectionPoint*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISimpleConnectionPoint, lpVtbl : ISimpleConnectionPointVtbl* do
    GUID = LibC::GUID.new(0x51973c3e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : ISimpleConnectionPoint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISimpleConnectionPoint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISimpleConnectionPoint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_count(this : ISimpleConnectionPoint*, pulCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_count.call(this, pulCount)
    end
    def describe_events(this : ISimpleConnectionPoint*, iEvent : UInt32, cEvents : UInt32, prgid : Int32*, prgbstr : Win32cr::Foundation::BSTR*, pcEventsFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.describe_events.call(this, iEvent, cEvents, prgid, prgbstr, pcEventsFetched)
    end
    def advise(this : ISimpleConnectionPoint*, pdisp : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise.call(this, pdisp, pdwCookie)
    end
    def unadvise(this : ISimpleConnectionPoint*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unadvise.call(this, dwCookie)
    end

  end

  @[Extern]
  record IDebugHelperVtbl,
    query_interface : Proc(IDebugHelper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugHelper*, UInt32),
    release : Proc(IDebugHelper*, UInt32),
    create_property_browser : Proc(IDebugHelper*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::PWSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_property_browser_ex : Proc(IDebugHelper*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::PWSTR, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_simple_connection_point : Proc(IDebugHelper*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugHelper, lpVtbl : IDebugHelperVtbl* do
    GUID = LibC::GUID.new(0x51973c3f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IDebugHelper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugHelper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugHelper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_property_browser(this : IDebugHelper*, pvar : Win32cr::System::Com::VARIANT*, bstrName : Win32cr::Foundation::PWSTR, pdat : Void*, ppdob : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_property_browser.call(this, pvar, bstrName, pdat, ppdob)
    end
    def create_property_browser_ex(this : IDebugHelper*, pvar : Win32cr::System::Com::VARIANT*, bstrName : Win32cr::Foundation::PWSTR, pdat : Void*, pdf : Void*, ppdob : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_property_browser_ex.call(this, pvar, bstrName, pdat, pdf, ppdob)
    end
    def create_simple_connection_point(this : IDebugHelper*, pdisp : Void*, ppscp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_simple_connection_point.call(this, pdisp, ppscp)
    end

  end

  @[Extern]
  record IEnumDebugExpressionContextsVtbl,
    query_interface : Proc(IEnumDebugExpressionContexts*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDebugExpressionContexts*, UInt32),
    release : Proc(IEnumDebugExpressionContexts*, UInt32),
    next__ : Proc(IEnumDebugExpressionContexts*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDebugExpressionContexts*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDebugExpressionContexts*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDebugExpressionContexts*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDebugExpressionContexts, lpVtbl : IEnumDebugExpressionContextsVtbl* do
    GUID = LibC::GUID.new(0x51973c40_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IEnumDebugExpressionContexts*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDebugExpressionContexts*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDebugExpressionContexts*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDebugExpressionContexts*, celt : UInt32, ppdec : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppdec, pceltFetched)
    end
    def skip(this : IEnumDebugExpressionContexts*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumDebugExpressionContexts*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDebugExpressionContexts*, ppedec : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppedec)
    end

  end

  @[Extern]
  record IProvideExpressionContextsVtbl,
    query_interface : Proc(IProvideExpressionContexts*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideExpressionContexts*, UInt32),
    release : Proc(IProvideExpressionContexts*, UInt32),
    enum_expression_contexts : Proc(IProvideExpressionContexts*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideExpressionContexts, lpVtbl : IProvideExpressionContextsVtbl* do
    GUID = LibC::GUID.new(0x51973c41_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
    def query_interface(this : IProvideExpressionContexts*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideExpressionContexts*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideExpressionContexts*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_expression_contexts(this : IProvideExpressionContexts*, ppedec : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_expression_contexts.call(this, ppedec)
    end

  end

  @[Extern]
  record IActiveScriptProfilerControlVtbl,
    query_interface : Proc(IActiveScriptProfilerControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerControl*, UInt32),
    release : Proc(IActiveScriptProfilerControl*, UInt32),
    start_profiling : Proc(IActiveScriptProfilerControl*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl*, UInt32, Win32cr::Foundation::HRESULT),
    stop_profiling : Proc(IActiveScriptProfilerControl*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerControl, lpVtbl : IActiveScriptProfilerControlVtbl* do
    GUID = LibC::GUID.new(0x784b5ff0_u32, 0x69b0_u16, 0x47d1_u16, StaticArray[0xa7_u8, 0xdc_u8, 0x25_u8, 0x18_u8, 0xf4_u8, 0x23_u8, 0xe_u8, 0x90_u8])
    def query_interface(this : IActiveScriptProfilerControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_profiling(this : IActiveScriptProfilerControl*, clsidProfilerObject : LibC::GUID*, dwEventMask : UInt32, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_profiling.call(this, clsidProfilerObject, dwEventMask, dwContext)
    end
    def set_profiler_event_mask(this : IActiveScriptProfilerControl*, dwEventMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profiler_event_mask.call(this, dwEventMask)
    end
    def stop_profiling(this : IActiveScriptProfilerControl*, hrShutdownReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_profiling.call(this, hrShutdownReason)
    end

  end

  @[Extern]
  record IActiveScriptProfilerControl2Vtbl,
    query_interface : Proc(IActiveScriptProfilerControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerControl2*, UInt32),
    release : Proc(IActiveScriptProfilerControl2*, UInt32),
    start_profiling : Proc(IActiveScriptProfilerControl2*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl2*, UInt32, Win32cr::Foundation::HRESULT),
    stop_profiling : Proc(IActiveScriptProfilerControl2*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    complete_profiler_start : Proc(IActiveScriptProfilerControl2*, Win32cr::Foundation::HRESULT),
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerControl2, lpVtbl : IActiveScriptProfilerControl2Vtbl* do
    GUID = LibC::GUID.new(0x47810165_u32, 0x498f_u16, 0x40be_u16, StaticArray[0x94_u8, 0xf1_u8, 0x65_u8, 0x35_u8, 0x57_u8, 0xe9_u8, 0xe7_u8, 0xda_u8])
    def query_interface(this : IActiveScriptProfilerControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_profiling(this : IActiveScriptProfilerControl2*, clsidProfilerObject : LibC::GUID*, dwEventMask : UInt32, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_profiling.call(this, clsidProfilerObject, dwEventMask, dwContext)
    end
    def set_profiler_event_mask(this : IActiveScriptProfilerControl2*, dwEventMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profiler_event_mask.call(this, dwEventMask)
    end
    def stop_profiling(this : IActiveScriptProfilerControl2*, hrShutdownReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_profiling.call(this, hrShutdownReason)
    end
    def complete_profiler_start(this : IActiveScriptProfilerControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.complete_profiler_start.call(this)
    end
    def prepare_profiler_stop(this : IActiveScriptProfilerControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_profiler_stop.call(this)
    end

  end

  @[Extern]
  record IActiveScriptProfilerHeapEnumVtbl,
    query_interface : Proc(IActiveScriptProfilerHeapEnum*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerHeapEnum*, UInt32),
    release : Proc(IActiveScriptProfilerHeapEnum*, UInt32),
    next__ : Proc(IActiveScriptProfilerHeapEnum*, UInt32, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT**, UInt32*, Win32cr::Foundation::HRESULT),
    get_optional_info : Proc(IActiveScriptProfilerHeapEnum*, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT*, UInt32, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_OPTIONAL_INFO*, Win32cr::Foundation::HRESULT),
    free_object_and_optional_info : Proc(IActiveScriptProfilerHeapEnum*, UInt32, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT**, Win32cr::Foundation::HRESULT),
    get_name_id_map : Proc(IActiveScriptProfilerHeapEnum*, Win32cr::Foundation::PWSTR***, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerHeapEnum, lpVtbl : IActiveScriptProfilerHeapEnumVtbl* do
    GUID = LibC::GUID.new(0x32e4694e_u32, 0xd37_u16, 0x419b_u16, StaticArray[0xb9_u8, 0x3d_u8, 0xfa_u8, 0x20_u8, 0xde_u8, 0xd6_u8, 0xe8_u8, 0xea_u8])
    def query_interface(this : IActiveScriptProfilerHeapEnum*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerHeapEnum*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerHeapEnum*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IActiveScriptProfilerHeapEnum*, celt : UInt32, heapObjects : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, heapObjects, pceltFetched)
    end
    def get_optional_info(this : IActiveScriptProfilerHeapEnum*, heapObject : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT*, celt : UInt32, optionalInfo : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT_OPTIONAL_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_optional_info.call(this, heapObject, celt, optionalInfo)
    end
    def free_object_and_optional_info(this : IActiveScriptProfilerHeapEnum*, celt : UInt32, heapObjects : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_OBJECT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_object_and_optional_info.call(this, celt, heapObjects)
    end
    def get_name_id_map(this : IActiveScriptProfilerHeapEnum*, pNameList : Win32cr::Foundation::PWSTR***, pcelt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_id_map.call(this, pNameList, pcelt)
    end

  end

  @[Extern]
  record IActiveScriptProfilerControl3Vtbl,
    query_interface : Proc(IActiveScriptProfilerControl3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerControl3*, UInt32),
    release : Proc(IActiveScriptProfilerControl3*, UInt32),
    start_profiling : Proc(IActiveScriptProfilerControl3*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl3*, UInt32, Win32cr::Foundation::HRESULT),
    stop_profiling : Proc(IActiveScriptProfilerControl3*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    complete_profiler_start : Proc(IActiveScriptProfilerControl3*, Win32cr::Foundation::HRESULT),
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl3*, Win32cr::Foundation::HRESULT),
    enum_heap : Proc(IActiveScriptProfilerControl3*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerControl3, lpVtbl : IActiveScriptProfilerControl3Vtbl* do
    GUID = LibC::GUID.new(0xb403015_u32, 0xf381_u16, 0x4023_u16, StaticArray[0xa5_u8, 0xd0_u8, 0x6f_u8, 0xed_u8, 0x7_u8, 0x6d_u8, 0xe7_u8, 0x16_u8])
    def query_interface(this : IActiveScriptProfilerControl3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerControl3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerControl3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_profiling(this : IActiveScriptProfilerControl3*, clsidProfilerObject : LibC::GUID*, dwEventMask : UInt32, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_profiling.call(this, clsidProfilerObject, dwEventMask, dwContext)
    end
    def set_profiler_event_mask(this : IActiveScriptProfilerControl3*, dwEventMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profiler_event_mask.call(this, dwEventMask)
    end
    def stop_profiling(this : IActiveScriptProfilerControl3*, hrShutdownReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_profiling.call(this, hrShutdownReason)
    end
    def complete_profiler_start(this : IActiveScriptProfilerControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.complete_profiler_start.call(this)
    end
    def prepare_profiler_stop(this : IActiveScriptProfilerControl3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_profiler_stop.call(this)
    end
    def enum_heap(this : IActiveScriptProfilerControl3*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_heap.call(this, ppEnum)
    end

  end

  @[Extern]
  record IActiveScriptProfilerControl4Vtbl,
    query_interface : Proc(IActiveScriptProfilerControl4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerControl4*, UInt32),
    release : Proc(IActiveScriptProfilerControl4*, UInt32),
    start_profiling : Proc(IActiveScriptProfilerControl4*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl4*, UInt32, Win32cr::Foundation::HRESULT),
    stop_profiling : Proc(IActiveScriptProfilerControl4*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    complete_profiler_start : Proc(IActiveScriptProfilerControl4*, Win32cr::Foundation::HRESULT),
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl4*, Win32cr::Foundation::HRESULT),
    enum_heap : Proc(IActiveScriptProfilerControl4*, Void**, Win32cr::Foundation::HRESULT),
    summarize_heap : Proc(IActiveScriptProfilerControl4*, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerControl4, lpVtbl : IActiveScriptProfilerControl4Vtbl* do
    GUID = LibC::GUID.new(0x160f94fd_u32, 0x9dbc_u16, 0x40d4_u16, StaticArray[0x9e_u8, 0xac_u8, 0x2b_u8, 0x71_u8, 0xdb_u8, 0x31_u8, 0x32_u8, 0xf4_u8])
    def query_interface(this : IActiveScriptProfilerControl4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerControl4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerControl4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_profiling(this : IActiveScriptProfilerControl4*, clsidProfilerObject : LibC::GUID*, dwEventMask : UInt32, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_profiling.call(this, clsidProfilerObject, dwEventMask, dwContext)
    end
    def set_profiler_event_mask(this : IActiveScriptProfilerControl4*, dwEventMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profiler_event_mask.call(this, dwEventMask)
    end
    def stop_profiling(this : IActiveScriptProfilerControl4*, hrShutdownReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_profiling.call(this, hrShutdownReason)
    end
    def complete_profiler_start(this : IActiveScriptProfilerControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.complete_profiler_start.call(this)
    end
    def prepare_profiler_stop(this : IActiveScriptProfilerControl4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_profiler_stop.call(this)
    end
    def enum_heap(this : IActiveScriptProfilerControl4*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_heap.call(this, ppEnum)
    end
    def summarize_heap(this : IActiveScriptProfilerControl4*, heapSummary : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.summarize_heap.call(this, heapSummary)
    end

  end

  @[Extern]
  record IActiveScriptProfilerControl5Vtbl,
    query_interface : Proc(IActiveScriptProfilerControl5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerControl5*, UInt32),
    release : Proc(IActiveScriptProfilerControl5*, UInt32),
    start_profiling : Proc(IActiveScriptProfilerControl5*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl5*, UInt32, Win32cr::Foundation::HRESULT),
    stop_profiling : Proc(IActiveScriptProfilerControl5*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    complete_profiler_start : Proc(IActiveScriptProfilerControl5*, Win32cr::Foundation::HRESULT),
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl5*, Win32cr::Foundation::HRESULT),
    enum_heap : Proc(IActiveScriptProfilerControl5*, Void**, Win32cr::Foundation::HRESULT),
    summarize_heap : Proc(IActiveScriptProfilerControl5*, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY*, Win32cr::Foundation::HRESULT),
    enum_heap2 : Proc(IActiveScriptProfilerControl5*, Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_ENUM_FLAGS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerControl5, lpVtbl : IActiveScriptProfilerControl5Vtbl* do
    GUID = LibC::GUID.new(0x1c01a2d1_u32, 0x8f0f_u16, 0x46a5_u16, StaticArray[0x97_u8, 0x20_u8, 0xd_u8, 0x7e_u8, 0xd2_u8, 0xc6_u8, 0x2f_u8, 0xa_u8])
    def query_interface(this : IActiveScriptProfilerControl5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerControl5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerControl5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_profiling(this : IActiveScriptProfilerControl5*, clsidProfilerObject : LibC::GUID*, dwEventMask : UInt32, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_profiling.call(this, clsidProfilerObject, dwEventMask, dwContext)
    end
    def set_profiler_event_mask(this : IActiveScriptProfilerControl5*, dwEventMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profiler_event_mask.call(this, dwEventMask)
    end
    def stop_profiling(this : IActiveScriptProfilerControl5*, hrShutdownReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_profiling.call(this, hrShutdownReason)
    end
    def complete_profiler_start(this : IActiveScriptProfilerControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.complete_profiler_start.call(this)
    end
    def prepare_profiler_stop(this : IActiveScriptProfilerControl5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_profiler_stop.call(this)
    end
    def enum_heap(this : IActiveScriptProfilerControl5*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_heap.call(this, ppEnum)
    end
    def summarize_heap(this : IActiveScriptProfilerControl5*, heapSummary : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_SUMMARY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.summarize_heap.call(this, heapSummary)
    end
    def enum_heap2(this : IActiveScriptProfilerControl5*, enumFlags : Win32cr::System::Diagnostics::Debug::PROFILER_HEAP_ENUM_FLAGS, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_heap2.call(this, enumFlags, ppEnum)
    end

  end

  @[Extern]
  record IActiveScriptProfilerCallbackVtbl,
    query_interface : Proc(IActiveScriptProfilerCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerCallback*, UInt32),
    release : Proc(IActiveScriptProfilerCallback*, UInt32),
    initialize__ : Proc(IActiveScriptProfilerCallback*, UInt32, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IActiveScriptProfilerCallback*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    script_compiled : Proc(IActiveScriptProfilerCallback*, Int32, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Void*, Win32cr::Foundation::HRESULT),
    function_compiled : Proc(IActiveScriptProfilerCallback*, Int32, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    on_function_enter : Proc(IActiveScriptProfilerCallback*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_function_exit : Proc(IActiveScriptProfilerCallback*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerCallback, lpVtbl : IActiveScriptProfilerCallbackVtbl* do
    GUID = LibC::GUID.new(0x740eca23_u32, 0x7d9d_u16, 0x42e5_u16, StaticArray[0xba_u8, 0x9d_u8, 0xf8_u8, 0xb2_u8, 0x4b_u8, 0x1c_u8, 0x7a_u8, 0x9b_u8])
    def query_interface(this : IActiveScriptProfilerCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IActiveScriptProfilerCallback*, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, dwContext)
    end
    def shutdown(this : IActiveScriptProfilerCallback*, hrReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this, hrReason)
    end
    def script_compiled(this : IActiveScriptProfilerCallback*, scriptId : Int32, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.script_compiled.call(this, scriptId, type__, pIDebugDocumentContext)
    end
    def function_compiled(this : IActiveScriptProfilerCallback*, functionId : Int32, scriptId : Int32, pwszFunctionName : Win32cr::Foundation::PWSTR, pwszFunctionNameHint : Win32cr::Foundation::PWSTR, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.function_compiled.call(this, functionId, scriptId, pwszFunctionName, pwszFunctionNameHint, pIDebugDocumentContext)
    end
    def on_function_enter(this : IActiveScriptProfilerCallback*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_enter.call(this, scriptId, functionId)
    end
    def on_function_exit(this : IActiveScriptProfilerCallback*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_exit.call(this, scriptId, functionId)
    end

  end

  @[Extern]
  record IActiveScriptProfilerCallback2Vtbl,
    query_interface : Proc(IActiveScriptProfilerCallback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerCallback2*, UInt32),
    release : Proc(IActiveScriptProfilerCallback2*, UInt32),
    initialize__ : Proc(IActiveScriptProfilerCallback2*, UInt32, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IActiveScriptProfilerCallback2*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    script_compiled : Proc(IActiveScriptProfilerCallback2*, Int32, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Void*, Win32cr::Foundation::HRESULT),
    function_compiled : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    on_function_enter : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_function_exit : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_function_enter_by_name : Proc(IActiveScriptProfilerCallback2*, Win32cr::Foundation::PWSTR, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Win32cr::Foundation::HRESULT),
    on_function_exit_by_name : Proc(IActiveScriptProfilerCallback2*, Win32cr::Foundation::PWSTR, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerCallback2, lpVtbl : IActiveScriptProfilerCallback2Vtbl* do
    GUID = LibC::GUID.new(0x31b7f8ad_u32, 0xa637_u16, 0x409c_u16, StaticArray[0xb2_u8, 0x2f_u8, 0x4_u8, 0x9_u8, 0x95_u8, 0xb6_u8, 0x10_u8, 0x3d_u8])
    def query_interface(this : IActiveScriptProfilerCallback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerCallback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerCallback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IActiveScriptProfilerCallback2*, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, dwContext)
    end
    def shutdown(this : IActiveScriptProfilerCallback2*, hrReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this, hrReason)
    end
    def script_compiled(this : IActiveScriptProfilerCallback2*, scriptId : Int32, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.script_compiled.call(this, scriptId, type__, pIDebugDocumentContext)
    end
    def function_compiled(this : IActiveScriptProfilerCallback2*, functionId : Int32, scriptId : Int32, pwszFunctionName : Win32cr::Foundation::PWSTR, pwszFunctionNameHint : Win32cr::Foundation::PWSTR, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.function_compiled.call(this, functionId, scriptId, pwszFunctionName, pwszFunctionNameHint, pIDebugDocumentContext)
    end
    def on_function_enter(this : IActiveScriptProfilerCallback2*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_enter.call(this, scriptId, functionId)
    end
    def on_function_exit(this : IActiveScriptProfilerCallback2*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_exit.call(this, scriptId, functionId)
    end
    def on_function_enter_by_name(this : IActiveScriptProfilerCallback2*, pwszFunctionName : Win32cr::Foundation::PWSTR, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_enter_by_name.call(this, pwszFunctionName, type__)
    end
    def on_function_exit_by_name(this : IActiveScriptProfilerCallback2*, pwszFunctionName : Win32cr::Foundation::PWSTR, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_exit_by_name.call(this, pwszFunctionName, type__)
    end

  end

  @[Extern]
  record IActiveScriptProfilerCallback3Vtbl,
    query_interface : Proc(IActiveScriptProfilerCallback3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptProfilerCallback3*, UInt32),
    release : Proc(IActiveScriptProfilerCallback3*, UInt32),
    initialize__ : Proc(IActiveScriptProfilerCallback3*, UInt32, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IActiveScriptProfilerCallback3*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    script_compiled : Proc(IActiveScriptProfilerCallback3*, Int32, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Void*, Win32cr::Foundation::HRESULT),
    function_compiled : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    on_function_enter : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_function_exit : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_function_enter_by_name : Proc(IActiveScriptProfilerCallback3*, Win32cr::Foundation::PWSTR, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Win32cr::Foundation::HRESULT),
    on_function_exit_by_name : Proc(IActiveScriptProfilerCallback3*, Win32cr::Foundation::PWSTR, Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, Win32cr::Foundation::HRESULT),
    set_web_worker_id : Proc(IActiveScriptProfilerCallback3*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptProfilerCallback3, lpVtbl : IActiveScriptProfilerCallback3Vtbl* do
    GUID = LibC::GUID.new(0x6ac5ad25_u32, 0x2037_u16, 0x4687_u16, StaticArray[0x91_u8, 0xdf_u8, 0xb5_u8, 0x99_u8, 0x79_u8, 0xd9_u8, 0x3d_u8, 0x73_u8])
    def query_interface(this : IActiveScriptProfilerCallback3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptProfilerCallback3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptProfilerCallback3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IActiveScriptProfilerCallback3*, dwContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, dwContext)
    end
    def shutdown(this : IActiveScriptProfilerCallback3*, hrReason : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this, hrReason)
    end
    def script_compiled(this : IActiveScriptProfilerCallback3*, scriptId : Int32, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.script_compiled.call(this, scriptId, type__, pIDebugDocumentContext)
    end
    def function_compiled(this : IActiveScriptProfilerCallback3*, functionId : Int32, scriptId : Int32, pwszFunctionName : Win32cr::Foundation::PWSTR, pwszFunctionNameHint : Win32cr::Foundation::PWSTR, pIDebugDocumentContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.function_compiled.call(this, functionId, scriptId, pwszFunctionName, pwszFunctionNameHint, pIDebugDocumentContext)
    end
    def on_function_enter(this : IActiveScriptProfilerCallback3*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_enter.call(this, scriptId, functionId)
    end
    def on_function_exit(this : IActiveScriptProfilerCallback3*, scriptId : Int32, functionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_exit.call(this, scriptId, functionId)
    end
    def on_function_enter_by_name(this : IActiveScriptProfilerCallback3*, pwszFunctionName : Win32cr::Foundation::PWSTR, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_enter_by_name.call(this, pwszFunctionName, type__)
    end
    def on_function_exit_by_name(this : IActiveScriptProfilerCallback3*, pwszFunctionName : Win32cr::Foundation::PWSTR, type__ : Win32cr::System::Diagnostics::Debug::PROFILER_SCRIPT_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_function_exit_by_name.call(this, pwszFunctionName, type__)
    end
    def set_web_worker_id(this : IActiveScriptProfilerCallback3*, webWorkerId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_web_worker_id.call(this, webWorkerId)
    end

  end

  @[Extern]
  record IScriptNodeVtbl,
    query_interface : Proc(IScriptNode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScriptNode*, UInt32),
    release : Proc(IScriptNode*, UInt32),
    alive : Proc(IScriptNode*, Win32cr::Foundation::HRESULT),
    delete : Proc(IScriptNode*, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IScriptNode*, Void**, Win32cr::Foundation::HRESULT),
    get_index_in_parent : Proc(IScriptNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_cookie : Proc(IScriptNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_of_children : Proc(IScriptNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_child : Proc(IScriptNode*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_language : Proc(IScriptNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_child_entry : Proc(IScriptNode*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_child_handler : Proc(IScriptNode*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IScriptNode, lpVtbl : IScriptNodeVtbl* do
    GUID = LibC::GUID.new(0xaee2a94_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
    def query_interface(this : IScriptNode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScriptNode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScriptNode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def alive(this : IScriptNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alive.call(this)
    end
    def delete(this : IScriptNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_parent(this : IScriptNode*, ppsnParent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppsnParent)
    end
    def get_index_in_parent(this : IScriptNode*, pisn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_in_parent.call(this, pisn)
    end
    def get_cookie(this : IScriptNode*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pdwCookie)
    end
    def get_number_of_children(this : IScriptNode*, pcsn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_children.call(this, pcsn)
    end
    def get_child(this : IScriptNode*, isn : UInt32, ppsn : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_child.call(this, isn, ppsn)
    end
    def get_language(this : IScriptNode*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, pbstr)
    end
    def create_child_entry(this : IScriptNode*, isn : UInt32, dwCookie : UInt32, pszDelimiter : Win32cr::Foundation::PWSTR, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_entry.call(this, isn, dwCookie, pszDelimiter, ppse)
    end
    def create_child_handler(this : IScriptNode*, pszDefaultName : Win32cr::Foundation::PWSTR, prgpszNames : Win32cr::Foundation::PWSTR*, cpszNames : UInt32, pszEvent : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, ptiSignature : Void*, iMethodSignature : UInt32, isn : UInt32, dwCookie : UInt32, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_handler.call(this, pszDefaultName, prgpszNames, cpszNames, pszEvent, pszDelimiter, ptiSignature, iMethodSignature, isn, dwCookie, ppse)
    end

  end

  @[Extern]
  record IScriptEntryVtbl,
    query_interface : Proc(IScriptEntry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScriptEntry*, UInt32),
    release : Proc(IScriptEntry*, UInt32),
    alive : Proc(IScriptEntry*, Win32cr::Foundation::HRESULT),
    delete : Proc(IScriptEntry*, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IScriptEntry*, Void**, Win32cr::Foundation::HRESULT),
    get_index_in_parent : Proc(IScriptEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_cookie : Proc(IScriptEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_of_children : Proc(IScriptEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_child : Proc(IScriptEntry*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_language : Proc(IScriptEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_child_entry : Proc(IScriptEntry*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_child_handler : Proc(IScriptEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_text : Proc(IScriptEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_text : Proc(IScriptEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_body : Proc(IScriptEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_body : Proc(IScriptEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_name : Proc(IScriptEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_name : Proc(IScriptEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_item_name : Proc(IScriptEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_item_name : Proc(IScriptEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_signature : Proc(IScriptEntry*, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    set_signature : Proc(IScriptEntry*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_range : Proc(IScriptEntry*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IScriptEntry, lpVtbl : IScriptEntryVtbl* do
    GUID = LibC::GUID.new(0xaee2a95_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
    def query_interface(this : IScriptEntry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScriptEntry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScriptEntry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def alive(this : IScriptEntry*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alive.call(this)
    end
    def delete(this : IScriptEntry*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_parent(this : IScriptEntry*, ppsnParent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppsnParent)
    end
    def get_index_in_parent(this : IScriptEntry*, pisn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_in_parent.call(this, pisn)
    end
    def get_cookie(this : IScriptEntry*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pdwCookie)
    end
    def get_number_of_children(this : IScriptEntry*, pcsn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_children.call(this, pcsn)
    end
    def get_child(this : IScriptEntry*, isn : UInt32, ppsn : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_child.call(this, isn, ppsn)
    end
    def get_language(this : IScriptEntry*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, pbstr)
    end
    def create_child_entry(this : IScriptEntry*, isn : UInt32, dwCookie : UInt32, pszDelimiter : Win32cr::Foundation::PWSTR, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_entry.call(this, isn, dwCookie, pszDelimiter, ppse)
    end
    def create_child_handler(this : IScriptEntry*, pszDefaultName : Win32cr::Foundation::PWSTR, prgpszNames : Win32cr::Foundation::PWSTR*, cpszNames : UInt32, pszEvent : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, ptiSignature : Void*, iMethodSignature : UInt32, isn : UInt32, dwCookie : UInt32, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_handler.call(this, pszDefaultName, prgpszNames, cpszNames, pszEvent, pszDelimiter, ptiSignature, iMethodSignature, isn, dwCookie, ppse)
    end
    def get_text(this : IScriptEntry*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, pbstr)
    end
    def set_text(this : IScriptEntry*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text.call(this, psz)
    end
    def get_body(this : IScriptEntry*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_body.call(this, pbstr)
    end
    def set_body(this : IScriptEntry*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_body.call(this, psz)
    end
    def get_name(this : IScriptEntry*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstr)
    end
    def set_name(this : IScriptEntry*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, psz)
    end
    def get_item_name(this : IScriptEntry*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_name.call(this, pbstr)
    end
    def set_item_name(this : IScriptEntry*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item_name.call(this, psz)
    end
    def get_signature(this : IScriptEntry*, ppti : Void**, piMethod : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signature.call(this, ppti, piMethod)
    end
    def set_signature(this : IScriptEntry*, pti : Void*, iMethod : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_signature.call(this, pti, iMethod)
    end
    def get_range(this : IScriptEntry*, pichMin : UInt32*, pcch : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range.call(this, pichMin, pcch)
    end

  end

  @[Extern]
  record IScriptScriptletVtbl,
    query_interface : Proc(IScriptScriptlet*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScriptScriptlet*, UInt32),
    release : Proc(IScriptScriptlet*, UInt32),
    alive : Proc(IScriptScriptlet*, Win32cr::Foundation::HRESULT),
    delete : Proc(IScriptScriptlet*, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IScriptScriptlet*, Void**, Win32cr::Foundation::HRESULT),
    get_index_in_parent : Proc(IScriptScriptlet*, UInt32*, Win32cr::Foundation::HRESULT),
    get_cookie : Proc(IScriptScriptlet*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_of_children : Proc(IScriptScriptlet*, UInt32*, Win32cr::Foundation::HRESULT),
    get_child : Proc(IScriptScriptlet*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_language : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_child_entry : Proc(IScriptScriptlet*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_child_handler : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_text : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_text : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_body : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_body : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_name : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_name : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_item_name : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_item_name : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_signature : Proc(IScriptScriptlet*, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    set_signature : Proc(IScriptScriptlet*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_range : Proc(IScriptScriptlet*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_sub_item_name : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_sub_item_name : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_event_name : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_event_name : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_simple_event_name : Proc(IScriptScriptlet*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_simple_event_name : Proc(IScriptScriptlet*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IScriptScriptlet, lpVtbl : IScriptScriptletVtbl* do
    GUID = LibC::GUID.new(0xaee2a96_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
    def query_interface(this : IScriptScriptlet*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScriptScriptlet*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScriptScriptlet*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def alive(this : IScriptScriptlet*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alive.call(this)
    end
    def delete(this : IScriptScriptlet*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_parent(this : IScriptScriptlet*, ppsnParent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppsnParent)
    end
    def get_index_in_parent(this : IScriptScriptlet*, pisn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_in_parent.call(this, pisn)
    end
    def get_cookie(this : IScriptScriptlet*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pdwCookie)
    end
    def get_number_of_children(this : IScriptScriptlet*, pcsn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_children.call(this, pcsn)
    end
    def get_child(this : IScriptScriptlet*, isn : UInt32, ppsn : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_child.call(this, isn, ppsn)
    end
    def get_language(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, pbstr)
    end
    def create_child_entry(this : IScriptScriptlet*, isn : UInt32, dwCookie : UInt32, pszDelimiter : Win32cr::Foundation::PWSTR, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_entry.call(this, isn, dwCookie, pszDelimiter, ppse)
    end
    def create_child_handler(this : IScriptScriptlet*, pszDefaultName : Win32cr::Foundation::PWSTR, prgpszNames : Win32cr::Foundation::PWSTR*, cpszNames : UInt32, pszEvent : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, ptiSignature : Void*, iMethodSignature : UInt32, isn : UInt32, dwCookie : UInt32, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child_handler.call(this, pszDefaultName, prgpszNames, cpszNames, pszEvent, pszDelimiter, ptiSignature, iMethodSignature, isn, dwCookie, ppse)
    end
    def get_text(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, pbstr)
    end
    def set_text(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text.call(this, psz)
    end
    def get_body(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_body.call(this, pbstr)
    end
    def set_body(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_body.call(this, psz)
    end
    def get_name(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstr)
    end
    def set_name(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, psz)
    end
    def get_item_name(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_name.call(this, pbstr)
    end
    def set_item_name(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item_name.call(this, psz)
    end
    def get_signature(this : IScriptScriptlet*, ppti : Void**, piMethod : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signature.call(this, ppti, piMethod)
    end
    def set_signature(this : IScriptScriptlet*, pti : Void*, iMethod : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_signature.call(this, pti, iMethod)
    end
    def get_range(this : IScriptScriptlet*, pichMin : UInt32*, pcch : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range.call(this, pichMin, pcch)
    end
    def get_sub_item_name(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_item_name.call(this, pbstr)
    end
    def set_sub_item_name(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sub_item_name.call(this, psz)
    end
    def get_event_name(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_name.call(this, pbstr)
    end
    def set_event_name(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_name.call(this, psz)
    end
    def get_simple_event_name(this : IScriptScriptlet*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_simple_event_name.call(this, pbstr)
    end
    def set_simple_event_name(this : IScriptScriptlet*, psz : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_simple_event_name.call(this, psz)
    end

  end

  @[Extern]
  record IActiveScriptAuthorVtbl,
    query_interface : Proc(IActiveScriptAuthor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptAuthor*, UInt32),
    release : Proc(IActiveScriptAuthor*, UInt32),
    add_named_item : Proc(IActiveScriptAuthor*, Win32cr::Foundation::PWSTR, UInt32, Void*, Win32cr::Foundation::HRESULT),
    add_scriptlet : Proc(IActiveScriptAuthor*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    parse_script_text : Proc(IActiveScriptAuthor*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_script_text_attributes : Proc(IActiveScriptAuthor*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_scriptlet_text_attributes : Proc(IActiveScriptAuthor*, UInt16*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_root : Proc(IActiveScriptAuthor*, Void**, Win32cr::Foundation::HRESULT),
    get_language_flags : Proc(IActiveScriptAuthor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_handler : Proc(IActiveScriptAuthor*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    remove_named_item : Proc(IActiveScriptAuthor*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_type_lib : Proc(IActiveScriptAuthor*, LibC::GUID*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    remove_type_lib : Proc(IActiveScriptAuthor*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_chars : Proc(IActiveScriptAuthor*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info_from_context : Proc(IActiveScriptAuthor*, Win32cr::Foundation::PWSTR, UInt32, UInt32, UInt32, UInt32*, UInt32*, UInt32*, Int32*, Int32*, Void**, Win32cr::Foundation::HRESULT),
    is_commit_char : Proc(IActiveScriptAuthor*, UInt16, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptAuthor, lpVtbl : IActiveScriptAuthorVtbl* do
    GUID = LibC::GUID.new(0x9c109da0_u32, 0x7006_u16, 0x11d1_u16, StaticArray[0xb3_u8, 0x6c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xe8_u8, 0xb2_u8])
    def query_interface(this : IActiveScriptAuthor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptAuthor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptAuthor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_named_item(this : IActiveScriptAuthor*, pszName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pdisp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_named_item.call(this, pszName, dwFlags, pdisp)
    end
    def add_scriptlet(this : IActiveScriptAuthor*, pszDefaultName : Win32cr::Foundation::PWSTR, pszCode : Win32cr::Foundation::PWSTR, pszItemName : Win32cr::Foundation::PWSTR, pszSubItemName : Win32cr::Foundation::PWSTR, pszEventName : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, dwCookie : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_scriptlet.call(this, pszDefaultName, pszCode, pszItemName, pszSubItemName, pszEventName, pszDelimiter, dwCookie, dwFlags)
    end
    def parse_script_text(this : IActiveScriptAuthor*, pszCode : Win32cr::Foundation::PWSTR, pszItemName : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, dwCookie : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_script_text.call(this, pszCode, pszItemName, pszDelimiter, dwCookie, dwFlags)
    end
    def get_script_text_attributes(this : IActiveScriptAuthor*, pszCode : UInt16*, cch : UInt32, pszDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_text_attributes.call(this, pszCode, cch, pszDelimiter, dwFlags, pattr)
    end
    def get_scriptlet_text_attributes(this : IActiveScriptAuthor*, pszCode : UInt16*, cch : UInt32, pszDelimiter : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pattr : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scriptlet_text_attributes.call(this, pszCode, cch, pszDelimiter, dwFlags, pattr)
    end
    def get_root(this : IActiveScriptAuthor*, ppsp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root.call(this, ppsp)
    end
    def get_language_flags(this : IActiveScriptAuthor*, pgrfasa : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_flags.call(this, pgrfasa)
    end
    def get_event_handler(this : IActiveScriptAuthor*, pdisp : Void*, pszItem : Win32cr::Foundation::PWSTR, pszSubItem : Win32cr::Foundation::PWSTR, pszEvent : Win32cr::Foundation::PWSTR, ppse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_handler.call(this, pdisp, pszItem, pszSubItem, pszEvent, ppse)
    end
    def remove_named_item(this : IActiveScriptAuthor*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_named_item.call(this, pszName)
    end
    def add_type_lib(this : IActiveScriptAuthor*, rguidTypeLib : LibC::GUID*, dwMajor : UInt32, dwMinor : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_type_lib.call(this, rguidTypeLib, dwMajor, dwMinor, dwFlags)
    end
    def remove_type_lib(this : IActiveScriptAuthor*, rguidTypeLib : LibC::GUID*, dwMajor : UInt32, dwMinor : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_type_lib.call(this, rguidTypeLib, dwMajor, dwMinor)
    end
    def get_chars(this : IActiveScriptAuthor*, fRequestedList : UInt32, pbstrChars : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_chars.call(this, fRequestedList, pbstrChars)
    end
    def get_info_from_context(this : IActiveScriptAuthor*, pszCode : Win32cr::Foundation::PWSTR, cchCode : UInt32, ichCurrentPosition : UInt32, dwListTypesRequested : UInt32, pdwListTypesProvided : UInt32*, pichListAnchorPosition : UInt32*, pichFuncAnchorPosition : UInt32*, pmemid : Int32*, piCurrentParameter : Int32*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_from_context.call(this, pszCode, cchCode, ichCurrentPosition, dwListTypesRequested, pdwListTypesProvided, pichListAnchorPosition, pichFuncAnchorPosition, pmemid, piCurrentParameter, ppunk)
    end
    def is_commit_char(this : IActiveScriptAuthor*, ch : UInt16, pfcommit : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_commit_char.call(this, ch, pfcommit)
    end

  end

  @[Extern]
  record IActiveScriptAuthorProcedureVtbl,
    query_interface : Proc(IActiveScriptAuthorProcedure*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptAuthorProcedure*, UInt32),
    release : Proc(IActiveScriptAuthorProcedure*, UInt32),
    parse_procedure_text : Proc(IActiveScriptAuthorProcedure*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptAuthorProcedure, lpVtbl : IActiveScriptAuthorProcedureVtbl* do
    GUID = LibC::GUID.new(0x7e2d4b70_u32, 0xbd9a_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x36_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IActiveScriptAuthorProcedure*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptAuthorProcedure*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptAuthorProcedure*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_procedure_text(this : IActiveScriptAuthorProcedure*, pszCode : Win32cr::Foundation::PWSTR, pszFormalParams : Win32cr::Foundation::PWSTR, pszProcedureName : Win32cr::Foundation::PWSTR, pszItemName : Win32cr::Foundation::PWSTR, pszDelimiter : Win32cr::Foundation::PWSTR, dwCookie : UInt32, dwFlags : UInt32, pdispFor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_procedure_text.call(this, pszCode, pszFormalParams, pszProcedureName, pszItemName, pszDelimiter, dwCookie, dwFlags, pdispFor)
    end

  end

  @[Extern]
  record IDebugApplicationNode100Vtbl,
    query_interface : Proc(IDebugApplicationNode100*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationNode100*, UInt32),
    release : Proc(IDebugApplicationNode100*, UInt32),
    set_filter_for_event_sink : Proc(IDebugApplicationNode100*, UInt32, Win32cr::System::Diagnostics::Debug::APPLICATION_NODE_EVENT_FILTER, Win32cr::Foundation::HRESULT),
    get_excluded_documents : Proc(IDebugApplicationNode100*, Win32cr::System::Diagnostics::Debug::APPLICATION_NODE_EVENT_FILTER, Win32cr::System::Diagnostics::Debug::TEXT_DOCUMENT_ARRAY*, Win32cr::Foundation::HRESULT),
    query_is_child_node : Proc(IDebugApplicationNode100*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationNode100, lpVtbl : IDebugApplicationNode100Vtbl* do
    GUID = LibC::GUID.new(0x90a7734e_u32, 0x841b_u16, 0x4f77_u16, StaticArray[0x93_u8, 0x84_u8, 0xa2_u8, 0x89_u8, 0x1e_u8, 0x76_u8, 0xe7_u8, 0xe2_u8])
    def query_interface(this : IDebugApplicationNode100*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationNode100*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationNode100*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_filter_for_event_sink(this : IDebugApplicationNode100*, dwCookie : UInt32, filter : Win32cr::System::Diagnostics::Debug::APPLICATION_NODE_EVENT_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filter_for_event_sink.call(this, dwCookie, filter)
    end
    def get_excluded_documents(this : IDebugApplicationNode100*, filter : Win32cr::System::Diagnostics::Debug::APPLICATION_NODE_EVENT_FILTER, pDocuments : Win32cr::System::Diagnostics::Debug::TEXT_DOCUMENT_ARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_excluded_documents.call(this, filter, pDocuments)
    end
    def query_is_child_node(this : IDebugApplicationNode100*, pSearchKey : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_is_child_node.call(this, pSearchKey)
    end

  end

  @[Extern]
  record IWebAppDiagnosticsSetupVtbl,
    query_interface : Proc(IWebAppDiagnosticsSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWebAppDiagnosticsSetup*, UInt32),
    release : Proc(IWebAppDiagnosticsSetup*, UInt32),
    diagnostics_supported : Proc(IWebAppDiagnosticsSetup*, Int16*, Win32cr::Foundation::HRESULT),
    create_object_with_site_at_web_app : Proc(IWebAppDiagnosticsSetup*, LibC::GUID*, UInt32, LibC::GUID*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWebAppDiagnosticsSetup, lpVtbl : IWebAppDiagnosticsSetupVtbl* do
    GUID = LibC::GUID.new(0x379bfbe1_u32, 0xc6c9_u16, 0x432a_u16, StaticArray[0x93_u8, 0xe1_u8, 0x6d_u8, 0x17_u8, 0x65_u8, 0x6c_u8, 0x53_u8, 0x8c_u8])
    def query_interface(this : IWebAppDiagnosticsSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWebAppDiagnosticsSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWebAppDiagnosticsSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def diagnostics_supported(this : IWebAppDiagnosticsSetup*, pRetVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.diagnostics_supported.call(this, pRetVal)
    end
    def create_object_with_site_at_web_app(this : IWebAppDiagnosticsSetup*, rclsid : LibC::GUID*, dwClsContext : UInt32, riid : LibC::GUID*, hPassToObject : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object_with_site_at_web_app.call(this, rclsid, dwClsContext, riid, hPassToObject)
    end

  end

  @[Extern]
  record IRemoteDebugApplication110Vtbl,
    query_interface : Proc(IRemoteDebugApplication110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugApplication110*, UInt32),
    release : Proc(IRemoteDebugApplication110*, UInt32),
    set_debugger_options : Proc(IRemoteDebugApplication110*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::Foundation::HRESULT),
    get_current_debugger_options : Proc(IRemoteDebugApplication110*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*, Win32cr::Foundation::HRESULT),
    get_main_thread : Proc(IRemoteDebugApplication110*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugApplication110, lpVtbl : IRemoteDebugApplication110Vtbl* do
    GUID = LibC::GUID.new(0xd5fe005b_u32, 0x2836_u16, 0x485e_u16, StaticArray[0xb1_u8, 0xf9_u8, 0x89_u8, 0xd9_u8, 0x1a_u8, 0xa2_u8, 0x4f_u8, 0xd4_u8])
    def query_interface(this : IRemoteDebugApplication110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugApplication110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugApplication110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_debugger_options(this : IRemoteDebugApplication110*, mask : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, value : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debugger_options.call(this, mask, value)
    end
    def get_current_debugger_options(this : IRemoteDebugApplication110*, pCurrentOptions : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_debugger_options.call(this, pCurrentOptions)
    end
    def get_main_thread(this : IRemoteDebugApplication110*, ppThread : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_main_thread.call(this, ppThread)
    end

  end

  @[Extern]
  record IDebugApplication11032Vtbl,
    query_interface : Proc(IDebugApplication11032*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplication11032*, UInt32),
    release : Proc(IDebugApplication11032*, UInt32),
    set_debugger_options : Proc(IDebugApplication11032*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::Foundation::HRESULT),
    get_current_debugger_options : Proc(IDebugApplication11032*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*, Win32cr::Foundation::HRESULT),
    get_main_thread : Proc(IDebugApplication11032*, Void**, Win32cr::Foundation::HRESULT),
    synchronous_call_in_main_thread : Proc(IDebugApplication11032*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    asynchronous_call_in_main_thread : Proc(IDebugApplication11032*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    callable_wait_for_handles : Proc(IDebugApplication11032*, UInt32, Win32cr::Foundation::HANDLE*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplication11032, lpVtbl : IDebugApplication11032Vtbl* do
    GUID = LibC::GUID.new(0xbdb3b5de_u32, 0x89f2_u16, 0x4e11_u16, StaticArray[0x84_u8, 0xa5_u8, 0x97_u8, 0x44_u8, 0x5f_u8, 0x94_u8, 0x1c_u8, 0x7d_u8])
    def query_interface(this : IDebugApplication11032*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplication11032*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplication11032*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_debugger_options(this : IDebugApplication11032*, mask : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, value : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debugger_options.call(this, mask, value)
    end
    def get_current_debugger_options(this : IDebugApplication11032*, pCurrentOptions : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_debugger_options.call(this, pCurrentOptions)
    end
    def get_main_thread(this : IDebugApplication11032*, ppThread : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_main_thread.call(this, ppThread)
    end
    def synchronous_call_in_main_thread(this : IDebugApplication11032*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_in_main_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def asynchronous_call_in_main_thread(this : IDebugApplication11032*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.asynchronous_call_in_main_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def callable_wait_for_handles(this : IDebugApplication11032*, handleCount : UInt32, pHandles : Win32cr::Foundation::HANDLE*, pIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.callable_wait_for_handles.call(this, handleCount, pHandles, pIndex)
    end

  end

  @[Extern]
  record IDebugApplication11064Vtbl,
    query_interface : Proc(IDebugApplication11064*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplication11064*, UInt32),
    release : Proc(IDebugApplication11064*, UInt32),
    set_debugger_options : Proc(IDebugApplication11064*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, Win32cr::Foundation::HRESULT),
    get_current_debugger_options : Proc(IDebugApplication11064*, Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*, Win32cr::Foundation::HRESULT),
    get_main_thread : Proc(IDebugApplication11064*, Void**, Win32cr::Foundation::HRESULT),
    synchronous_call_in_main_thread : Proc(IDebugApplication11064*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    asynchronous_call_in_main_thread : Proc(IDebugApplication11064*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    callable_wait_for_handles : Proc(IDebugApplication11064*, UInt32, Win32cr::Foundation::HANDLE*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplication11064, lpVtbl : IDebugApplication11064Vtbl* do
    GUID = LibC::GUID.new(0x2039d958_u32, 0x4eeb_u16, 0x496a_u16, StaticArray[0x87_u8, 0xbb_u8, 0x2e_u8, 0x52_u8, 0x1_u8, 0xea_u8, 0xde_u8, 0xef_u8])
    def query_interface(this : IDebugApplication11064*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplication11064*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplication11064*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_debugger_options(this : IDebugApplication11064*, mask : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS, value : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debugger_options.call(this, mask, value)
    end
    def get_current_debugger_options(this : IDebugApplication11064*, pCurrentOptions : Win32cr::System::Diagnostics::Debug::SCRIPT_DEBUGGER_OPTIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_debugger_options.call(this, pCurrentOptions)
    end
    def get_main_thread(this : IDebugApplication11064*, ppThread : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_main_thread.call(this, ppThread)
    end
    def synchronous_call_in_main_thread(this : IDebugApplication11064*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.synchronous_call_in_main_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def asynchronous_call_in_main_thread(this : IDebugApplication11064*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.asynchronous_call_in_main_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end
    def callable_wait_for_handles(this : IDebugApplication11064*, handleCount : UInt32, pHandles : Win32cr::Foundation::HANDLE*, pIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.callable_wait_for_handles.call(this, handleCount, pHandles, pIndex)
    end

  end

  @[Extern]
  record IWebAppDiagnosticsObjectInitializationVtbl,
    query_interface : Proc(IWebAppDiagnosticsObjectInitialization*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWebAppDiagnosticsObjectInitialization*, UInt32),
    release : Proc(IWebAppDiagnosticsObjectInitialization*, UInt32),
    initialize__ : Proc(IWebAppDiagnosticsObjectInitialization*, Win32cr::Foundation::HANDLE_PTR, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWebAppDiagnosticsObjectInitialization, lpVtbl : IWebAppDiagnosticsObjectInitializationVtbl* do
    GUID = LibC::GUID.new(0x16ff3a42_u32, 0xa5f5_u16, 0x432b_u16, StaticArray[0xb6_u8, 0x25_u8, 0x8e_u8, 0x8e_u8, 0x16_u8, 0xf5_u8, 0x7e_u8, 0x15_u8])
    def query_interface(this : IWebAppDiagnosticsObjectInitialization*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWebAppDiagnosticsObjectInitialization*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWebAppDiagnosticsObjectInitialization*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IWebAppDiagnosticsObjectInitialization*, hPassedHandle : Win32cr::Foundation::HANDLE_PTR, pDebugApplication : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, hPassedHandle, pDebugApplication)
    end

  end

  @[Extern]
  record IActiveScriptWinRTErrorDebugVtbl,
    query_interface : Proc(IActiveScriptWinRTErrorDebug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptWinRTErrorDebug*, UInt32),
    release : Proc(IActiveScriptWinRTErrorDebug*, UInt32),
    get_exception_info : Proc(IActiveScriptWinRTErrorDebug*, Win32cr::System::Com::EXCEPINFO*, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IActiveScriptWinRTErrorDebug*, UInt32*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    get_source_line_text : Proc(IActiveScriptWinRTErrorDebug*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_restricted_error_string : Proc(IActiveScriptWinRTErrorDebug*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_restricted_error_reference : Proc(IActiveScriptWinRTErrorDebug*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_capability_sid : Proc(IActiveScriptWinRTErrorDebug*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptWinRTErrorDebug, lpVtbl : IActiveScriptWinRTErrorDebugVtbl* do
    GUID = LibC::GUID.new(0x73a3f82a_u32, 0xfe9_u16, 0x4b33_u16, StaticArray[0xba_u8, 0x3b_u8, 0xfe_u8, 0x9_u8, 0x5f_u8, 0x69_u8, 0x7e_u8, 0xa_u8])
    def query_interface(this : IActiveScriptWinRTErrorDebug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptWinRTErrorDebug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptWinRTErrorDebug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_exception_info(this : IActiveScriptWinRTErrorDebug*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_info.call(this, pexcepinfo)
    end
    def get_source_position(this : IActiveScriptWinRTErrorDebug*, pdwSourceContext : UInt32*, pulLineNumber : UInt32*, plCharacterPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pdwSourceContext, pulLineNumber, plCharacterPosition)
    end
    def get_source_line_text(this : IActiveScriptWinRTErrorDebug*, pbstrSourceLine : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_line_text.call(this, pbstrSourceLine)
    end
    def get_restricted_error_string(this : IActiveScriptWinRTErrorDebug*, errorString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_restricted_error_string.call(this, errorString)
    end
    def get_restricted_error_reference(this : IActiveScriptWinRTErrorDebug*, referenceString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_restricted_error_reference.call(this, referenceString)
    end
    def get_capability_sid(this : IActiveScriptWinRTErrorDebug*, capabilitySid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capability_sid.call(this, capabilitySid)
    end

  end

  @[Extern]
  record IActiveScriptErrorDebug110Vtbl,
    query_interface : Proc(IActiveScriptErrorDebug110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActiveScriptErrorDebug110*, UInt32),
    release : Proc(IActiveScriptErrorDebug110*, UInt32),
    get_exception_thrown_kind : Proc(IActiveScriptErrorDebug110*, Win32cr::System::Diagnostics::Debug::SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IActiveScriptErrorDebug110, lpVtbl : IActiveScriptErrorDebug110Vtbl* do
    GUID = LibC::GUID.new(0x516e42b6_u32, 0x89a8_u16, 0x4530_u16, StaticArray[0x93_u8, 0x7b_u8, 0x5f_u8, 0x7_u8, 0x8_u8, 0x43_u8, 0x14_u8, 0x42_u8])
    def query_interface(this : IActiveScriptErrorDebug110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActiveScriptErrorDebug110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActiveScriptErrorDebug110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_exception_thrown_kind(this : IActiveScriptErrorDebug110*, pExceptionKind : Win32cr::System::Diagnostics::Debug::SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_thrown_kind.call(this, pExceptionKind)
    end

  end

  @[Extern]
  record IDebugApplicationThreadEvents110Vtbl,
    query_interface : Proc(IDebugApplicationThreadEvents110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationThreadEvents110*, UInt32),
    release : Proc(IDebugApplicationThreadEvents110*, UInt32),
    on_suspend_for_break_point : Proc(IDebugApplicationThreadEvents110*, Win32cr::Foundation::HRESULT),
    on_resume_from_break_point : Proc(IDebugApplicationThreadEvents110*, Win32cr::Foundation::HRESULT),
    on_thread_request_complete : Proc(IDebugApplicationThreadEvents110*, Win32cr::Foundation::HRESULT),
    on_begin_thread_request : Proc(IDebugApplicationThreadEvents110*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationThreadEvents110, lpVtbl : IDebugApplicationThreadEvents110Vtbl* do
    GUID = LibC::GUID.new(0x84e5e468_u32, 0xd5da_u16, 0x48a8_u16, StaticArray[0x83_u8, 0xf4_u8, 0x40_u8, 0x36_u8, 0x64_u8, 0x29_u8, 0x0_u8, 0x7b_u8])
    def query_interface(this : IDebugApplicationThreadEvents110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationThreadEvents110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationThreadEvents110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_suspend_for_break_point(this : IDebugApplicationThreadEvents110*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_suspend_for_break_point.call(this)
    end
    def on_resume_from_break_point(this : IDebugApplicationThreadEvents110*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_resume_from_break_point.call(this)
    end
    def on_thread_request_complete(this : IDebugApplicationThreadEvents110*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_thread_request_complete.call(this)
    end
    def on_begin_thread_request(this : IDebugApplicationThreadEvents110*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_begin_thread_request.call(this)
    end

  end

  @[Extern]
  record IDebugApplicationThread11032Vtbl,
    query_interface : Proc(IDebugApplicationThread11032*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationThread11032*, UInt32),
    release : Proc(IDebugApplicationThread11032*, UInt32),
    get_active_thread_request_count : Proc(IDebugApplicationThread11032*, UInt32*, Win32cr::Foundation::HRESULT),
    is_suspended_for_break_point : Proc(IDebugApplicationThread11032*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_thread_callable : Proc(IDebugApplicationThread11032*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    asynchronous_call_into_thread : Proc(IDebugApplicationThread11032*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationThread11032, lpVtbl : IDebugApplicationThread11032Vtbl* do
    GUID = LibC::GUID.new(0x2194ac5c_u32, 0x6561_u16, 0x404a_u16, StaticArray[0xa2_u8, 0xe9_u8, 0xf5_u8, 0x7d_u8, 0x72_u8, 0xde_u8, 0x37_u8, 0x2_u8])
    def query_interface(this : IDebugApplicationThread11032*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationThread11032*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationThread11032*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_active_thread_request_count(this : IDebugApplicationThread11032*, puiThreadRequests : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_active_thread_request_count.call(this, puiThreadRequests)
    end
    def is_suspended_for_break_point(this : IDebugApplicationThread11032*, pfIsSuspended : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_suspended_for_break_point.call(this, pfIsSuspended)
    end
    def is_thread_callable(this : IDebugApplicationThread11032*, pfIsCallable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_thread_callable.call(this, pfIsCallable)
    end
    def asynchronous_call_into_thread(this : IDebugApplicationThread11032*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.asynchronous_call_into_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end

  end

  @[Extern]
  record IDebugApplicationThread11064Vtbl,
    query_interface : Proc(IDebugApplicationThread11064*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugApplicationThread11064*, UInt32),
    release : Proc(IDebugApplicationThread11064*, UInt32),
    get_active_thread_request_count : Proc(IDebugApplicationThread11064*, UInt32*, Win32cr::Foundation::HRESULT),
    is_suspended_for_break_point : Proc(IDebugApplicationThread11064*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_thread_callable : Proc(IDebugApplicationThread11064*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    asynchronous_call_into_thread : Proc(IDebugApplicationThread11064*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugApplicationThread11064, lpVtbl : IDebugApplicationThread11064Vtbl* do
    GUID = LibC::GUID.new(0x420aa4cc_u32, 0xefd8_u16, 0x4dac_u16, StaticArray[0x98_u8, 0x3b_u8, 0x47_u8, 0x12_u8, 0x78_u8, 0x26_u8, 0x91_u8, 0x7d_u8])
    def query_interface(this : IDebugApplicationThread11064*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugApplicationThread11064*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugApplicationThread11064*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_active_thread_request_count(this : IDebugApplicationThread11064*, puiThreadRequests : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_active_thread_request_count.call(this, puiThreadRequests)
    end
    def is_suspended_for_break_point(this : IDebugApplicationThread11064*, pfIsSuspended : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_suspended_for_break_point.call(this, pfIsSuspended)
    end
    def is_thread_callable(this : IDebugApplicationThread11064*, pfIsCallable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_thread_callable.call(this, pfIsCallable)
    end
    def asynchronous_call_into_thread(this : IDebugApplicationThread11064*, pptc : Void*, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT, dwParam3 : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.asynchronous_call_into_thread.call(this, pptc, dwParam1, dwParam2, dwParam3)
    end

  end

  @[Extern]
  record IRemoteDebugCriticalErrorEvent110Vtbl,
    query_interface : Proc(IRemoteDebugCriticalErrorEvent110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugCriticalErrorEvent110*, UInt32),
    release : Proc(IRemoteDebugCriticalErrorEvent110*, UInt32),
    get_error_info : Proc(IRemoteDebugCriticalErrorEvent110*, Win32cr::Foundation::BSTR*, Int32*, Win32cr::Foundation::BSTR*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugCriticalErrorEvent110, lpVtbl : IRemoteDebugCriticalErrorEvent110Vtbl* do
    GUID = LibC::GUID.new(0x2f69c611_u32, 0x6b14_u16, 0x47e8_u16, StaticArray[0x92_u8, 0x60_u8, 0x4b_u8, 0xb7_u8, 0xc5_u8, 0x2f_u8, 0x50_u8, 0x4b_u8])
    def query_interface(this : IRemoteDebugCriticalErrorEvent110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugCriticalErrorEvent110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugCriticalErrorEvent110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error_info(this : IRemoteDebugCriticalErrorEvent110*, pbstrSource : Win32cr::Foundation::BSTR*, pMessageId : Int32*, pbstrMessage : Win32cr::Foundation::BSTR*, ppLocation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_info.call(this, pbstrSource, pMessageId, pbstrMessage, ppLocation)
    end

  end

  @[Extern]
  record IScriptInvocationContextVtbl,
    query_interface : Proc(IScriptInvocationContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScriptInvocationContext*, UInt32),
    release : Proc(IScriptInvocationContext*, UInt32),
    get_context_type : Proc(IScriptInvocationContext*, Win32cr::System::Diagnostics::Debug::SCRIPT_INVOCATION_CONTEXT_TYPE*, Win32cr::Foundation::HRESULT),
    get_context_description : Proc(IScriptInvocationContext*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_context_object : Proc(IScriptInvocationContext*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IScriptInvocationContext, lpVtbl : IScriptInvocationContextVtbl* do
    GUID = LibC::GUID.new(0x5d7741b7_u32, 0xaf7e_u16, 0x4a2a_u16, StaticArray[0x85_u8, 0xe5_u8, 0xc7_u8, 0x7f_u8, 0x4d_u8, 0x6_u8, 0x59_u8, 0xfb_u8])
    def query_interface(this : IScriptInvocationContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScriptInvocationContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScriptInvocationContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_context_type(this : IScriptInvocationContext*, pInvocationContextType : Win32cr::System::Diagnostics::Debug::SCRIPT_INVOCATION_CONTEXT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_type.call(this, pInvocationContextType)
    end
    def get_context_description(this : IScriptInvocationContext*, pDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_description.call(this, pDescription)
    end
    def get_context_object(this : IScriptInvocationContext*, ppContextObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context_object.call(this, ppContextObject)
    end

  end

  @[Extern]
  record IDebugStackFrame110Vtbl,
    query_interface : Proc(IDebugStackFrame110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDebugStackFrame110*, UInt32),
    release : Proc(IDebugStackFrame110*, UInt32),
    get_code_context : Proc(IDebugStackFrame110*, Void**, Win32cr::Foundation::HRESULT),
    get_description_string : Proc(IDebugStackFrame110*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_language_string : Proc(IDebugStackFrame110*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_thread : Proc(IDebugStackFrame110*, Void**, Win32cr::Foundation::HRESULT),
    get_debug_property : Proc(IDebugStackFrame110*, Void**, Win32cr::Foundation::HRESULT),
    get_stack_frame_type : Proc(IDebugStackFrame110*, Win32cr::System::Diagnostics::Debug::DEBUG_STACKFRAME_TYPE*, Win32cr::Foundation::HRESULT),
    get_script_invocation_context : Proc(IDebugStackFrame110*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDebugStackFrame110, lpVtbl : IDebugStackFrame110Vtbl* do
    GUID = LibC::GUID.new(0x4b509611_u32, 0xb6ea_u16, 0x4b24_u16, StaticArray[0xad_u8, 0xcb_u8, 0xd0_u8, 0xcc_u8, 0xfd_u8, 0x1a_u8, 0x7e_u8, 0x33_u8])
    def query_interface(this : IDebugStackFrame110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDebugStackFrame110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDebugStackFrame110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_code_context(this : IDebugStackFrame110*, ppcc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_context.call(this, ppcc)
    end
    def get_description_string(this : IDebugStackFrame110*, fLong : Win32cr::Foundation::BOOL, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description_string.call(this, fLong, pbstrDescription)
    end
    def get_language_string(this : IDebugStackFrame110*, fLong : Win32cr::Foundation::BOOL, pbstrLanguage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_string.call(this, fLong, pbstrLanguage)
    end
    def get_thread(this : IDebugStackFrame110*, ppat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread.call(this, ppat)
    end
    def get_debug_property(this : IDebugStackFrame110*, ppDebugProp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_property.call(this, ppDebugProp)
    end
    def get_stack_frame_type(this : IDebugStackFrame110*, pStackFrameKind : Win32cr::System::Diagnostics::Debug::DEBUG_STACKFRAME_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_frame_type.call(this, pStackFrameKind)
    end
    def get_script_invocation_context(this : IDebugStackFrame110*, ppInvocationContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_invocation_context.call(this, ppInvocationContext)
    end

  end

  @[Extern]
  record IRemoteDebugInfoEvent110Vtbl,
    query_interface : Proc(IRemoteDebugInfoEvent110*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRemoteDebugInfoEvent110*, UInt32),
    release : Proc(IRemoteDebugInfoEvent110*, UInt32),
    get_event_info : Proc(IRemoteDebugInfoEvent110*, Win32cr::System::Diagnostics::Debug::DEBUG_EVENT_INFO_TYPE*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRemoteDebugInfoEvent110, lpVtbl : IRemoteDebugInfoEvent110Vtbl* do
    GUID = LibC::GUID.new(0x9ff56bb6_u32, 0xeb89_u16, 0x4c0f_u16, StaticArray[0x88_u8, 0x23_u8, 0xcc_u8, 0x2a_u8, 0x4c_u8, 0xb_u8, 0x7f_u8, 0x26_u8])
    def query_interface(this : IRemoteDebugInfoEvent110*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRemoteDebugInfoEvent110*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRemoteDebugInfoEvent110*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_info(this : IRemoteDebugInfoEvent110*, pMessageType : Win32cr::System::Diagnostics::Debug::DEBUG_EVENT_INFO_TYPE*, pbstrMessage : Win32cr::Foundation::BSTR*, pbstrUrl : Win32cr::Foundation::BSTR*, ppLocation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_info.call(this, pMessageType, pbstrMessage, pbstrUrl, ppLocation)
    end

  end

  @[Extern]
  record IJsDebugVtbl,
    query_interface : Proc(IJsDebug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebug*, UInt32),
    release : Proc(IJsDebug*, UInt32),
    open_virtual_process : Proc(IJsDebug*, UInt32, UInt64, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebug, lpVtbl : IJsDebugVtbl* do
    GUID = LibC::GUID.new(0xbe0e89da_u32, 0x2ac5_u16, 0x4c04_u16, StaticArray[0xac_u8, 0x5e_u8, 0x59_u8, 0x95_u8, 0x6a_u8, 0xae_u8, 0x36_u8, 0x13_u8])
    def query_interface(this : IJsDebug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_virtual_process(this : IJsDebug*, processId : UInt32, runtimeJsBaseAddress : UInt64, pDataTarget : Void*, ppProcess : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_virtual_process.call(this, processId, runtimeJsBaseAddress, pDataTarget, ppProcess)
    end

  end

  @[Extern]
  record IJsDebugProcessVtbl,
    query_interface : Proc(IJsDebugProcess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugProcess*, UInt32),
    release : Proc(IJsDebugProcess*, UInt32),
    create_stack_walker : Proc(IJsDebugProcess*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_break_point : Proc(IJsDebugProcess*, UInt64, UInt32, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    perform_async_break : Proc(IJsDebugProcess*, UInt32, Win32cr::Foundation::HRESULT),
    get_external_step_address : Proc(IJsDebugProcess*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugProcess, lpVtbl : IJsDebugProcessVtbl* do
    GUID = LibC::GUID.new(0x3d587168_u32, 0x6a2d_u16, 0x4041_u16, StaticArray[0xbd_u8, 0x3b_u8, 0xd_u8, 0xe6_u8, 0x74_u8, 0x50_u8, 0x28_u8, 0x62_u8])
    def query_interface(this : IJsDebugProcess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugProcess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugProcess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_stack_walker(this : IJsDebugProcess*, threadId : UInt32, ppStackWalker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stack_walker.call(this, threadId, ppStackWalker)
    end
    def create_break_point(this : IJsDebugProcess*, documentId : UInt64, characterOffset : UInt32, characterCount : UInt32, isEnabled : Win32cr::Foundation::BOOL, ppDebugBreakPoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_break_point.call(this, documentId, characterOffset, characterCount, isEnabled, ppDebugBreakPoint)
    end
    def perform_async_break(this : IJsDebugProcess*, threadId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.perform_async_break.call(this, threadId)
    end
    def get_external_step_address(this : IJsDebugProcess*, pCodeAddress : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_external_step_address.call(this, pCodeAddress)
    end

  end

  @[Extern]
  record IJsDebugStackWalkerVtbl,
    query_interface : Proc(IJsDebugStackWalker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugStackWalker*, UInt32),
    release : Proc(IJsDebugStackWalker*, UInt32),
    get_next : Proc(IJsDebugStackWalker*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugStackWalker, lpVtbl : IJsDebugStackWalkerVtbl* do
    GUID = LibC::GUID.new(0xdb24b094_u32, 0x73c4_u16, 0x456c_u16, StaticArray[0xa4_u8, 0xec_u8, 0xe9_u8, 0xe_u8, 0xa0_u8, 0xb_u8, 0xdf_u8, 0xe3_u8])
    def query_interface(this : IJsDebugStackWalker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugStackWalker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugStackWalker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next(this : IJsDebugStackWalker*, ppFrame : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, ppFrame)
    end

  end

  @[Extern]
  record IJsDebugFrameVtbl,
    query_interface : Proc(IJsDebugFrame*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugFrame*, UInt32),
    release : Proc(IJsDebugFrame*, UInt32),
    get_stack_range : Proc(IJsDebugFrame*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IJsDebugFrame*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_document_position_with_id : Proc(IJsDebugFrame*, UInt64*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_document_position_with_name : Proc(IJsDebugFrame*, Win32cr::Foundation::BSTR*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_debug_property : Proc(IJsDebugFrame*, Void**, Win32cr::Foundation::HRESULT),
    get_return_address : Proc(IJsDebugFrame*, UInt64*, Win32cr::Foundation::HRESULT),
    evaluate : Proc(IJsDebugFrame*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugFrame, lpVtbl : IJsDebugFrameVtbl* do
    GUID = LibC::GUID.new(0xc9196637_u32, 0xab9d_u16, 0x44b2_u16, StaticArray[0xba_u8, 0xd2_u8, 0x13_u8, 0xb9_u8, 0x5b_u8, 0x3f_u8, 0x39_u8, 0xe_u8])
    def query_interface(this : IJsDebugFrame*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugFrame*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugFrame*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stack_range(this : IJsDebugFrame*, pStart : UInt64*, pEnd : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stack_range.call(this, pStart, pEnd)
    end
    def get_name(this : IJsDebugFrame*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pName)
    end
    def get_document_position_with_id(this : IJsDebugFrame*, pDocumentId : UInt64*, pCharacterOffset : UInt32*, pStatementCharCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_position_with_id.call(this, pDocumentId, pCharacterOffset, pStatementCharCount)
    end
    def get_document_position_with_name(this : IJsDebugFrame*, pDocumentName : Win32cr::Foundation::BSTR*, pLine : UInt32*, pColumn : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_position_with_name.call(this, pDocumentName, pLine, pColumn)
    end
    def get_debug_property(this : IJsDebugFrame*, ppDebugProperty : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_property.call(this, ppDebugProperty)
    end
    def get_return_address(this : IJsDebugFrame*, pReturnAddress : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_return_address.call(this, pReturnAddress)
    end
    def evaluate(this : IJsDebugFrame*, pExpressionText : Win32cr::Foundation::PWSTR, ppDebugProperty : Void**, pError : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evaluate.call(this, pExpressionText, ppDebugProperty, pError)
    end

  end

  @[Extern]
  record IJsDebugPropertyVtbl,
    query_interface : Proc(IJsDebugProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugProperty*, UInt32),
    release : Proc(IJsDebugProperty*, UInt32),
    get_property_info : Proc(IJsDebugProperty*, UInt32, Win32cr::System::Diagnostics::Debug::JsDebugPropertyInfo*, Win32cr::Foundation::HRESULT),
    get_members : Proc(IJsDebugProperty*, Win32cr::System::Diagnostics::Debug::JS_PROPERTY_MEMBERS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugProperty, lpVtbl : IJsDebugPropertyVtbl* do
    GUID = LibC::GUID.new(0xf8ffcf2b_u32, 0x3aa4_u16, 0x4320_u16, StaticArray[0x85_u8, 0xc3_u8, 0x52_u8, 0xa3_u8, 0x12_u8, 0xba_u8, 0x96_u8, 0x33_u8])
    def query_interface(this : IJsDebugProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property_info(this : IJsDebugProperty*, nRadix : UInt32, pPropertyInfo : Win32cr::System::Diagnostics::Debug::JsDebugPropertyInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_info.call(this, nRadix, pPropertyInfo)
    end
    def get_members(this : IJsDebugProperty*, members : Win32cr::System::Diagnostics::Debug::JS_PROPERTY_MEMBERS, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_members.call(this, members, ppEnum)
    end

  end

  @[Extern]
  record IJsEnumDebugPropertyVtbl,
    query_interface : Proc(IJsEnumDebugProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsEnumDebugProperty*, UInt32),
    release : Proc(IJsEnumDebugProperty*, UInt32),
    next__ : Proc(IJsEnumDebugProperty*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IJsEnumDebugProperty*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsEnumDebugProperty, lpVtbl : IJsEnumDebugPropertyVtbl* do
    GUID = LibC::GUID.new(0x4092432f_u32, 0x2f0f_u16, 0x4fe1_u16, StaticArray[0xb6_u8, 0x38_u8, 0x5b_u8, 0x74_u8, 0xa5_u8, 0x2c_u8, 0xdc_u8, 0xbe_u8])
    def query_interface(this : IJsEnumDebugProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsEnumDebugProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsEnumDebugProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IJsEnumDebugProperty*, count : UInt32, ppDebugProperty : Void**, pActualCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, count, ppDebugProperty, pActualCount)
    end
    def get_count(this : IJsEnumDebugProperty*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end

  end

  @[Extern]
  record IJsDebugBreakPointVtbl,
    query_interface : Proc(IJsDebugBreakPoint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugBreakPoint*, UInt32),
    release : Proc(IJsDebugBreakPoint*, UInt32),
    is_enabled : Proc(IJsDebugBreakPoint*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    enable : Proc(IJsDebugBreakPoint*, Win32cr::Foundation::HRESULT),
    disable : Proc(IJsDebugBreakPoint*, Win32cr::Foundation::HRESULT),
    delete : Proc(IJsDebugBreakPoint*, Win32cr::Foundation::HRESULT),
    get_document_position : Proc(IJsDebugBreakPoint*, UInt64*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugBreakPoint, lpVtbl : IJsDebugBreakPointVtbl* do
    GUID = LibC::GUID.new(0xdf6773e3_u32, 0xed8d_u16, 0x488b_u16, StaticArray[0x8a_u8, 0x3e_u8, 0x58_u8, 0x12_u8, 0x57_u8, 0x7d_u8, 0x15_u8, 0x42_u8])
    def query_interface(this : IJsDebugBreakPoint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugBreakPoint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugBreakPoint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_enabled(this : IJsDebugBreakPoint*, pIsEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_enabled.call(this, pIsEnabled)
    end
    def enable(this : IJsDebugBreakPoint*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable.call(this)
    end
    def disable(this : IJsDebugBreakPoint*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable.call(this)
    end
    def delete(this : IJsDebugBreakPoint*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_document_position(this : IJsDebugBreakPoint*, pDocumentId : UInt64*, pCharacterOffset : UInt32*, pStatementCharCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document_position.call(this, pDocumentId, pCharacterOffset, pStatementCharCount)
    end

  end

  @[Extern]
  record IEnumJsStackFramesVtbl,
    query_interface : Proc(IEnumJsStackFrames*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumJsStackFrames*, UInt32),
    release : Proc(IEnumJsStackFrames*, UInt32),
    next__ : Proc(IEnumJsStackFrames*, UInt32, Win32cr::System::Diagnostics::Debug::JS_NATIVE_FRAME*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumJsStackFrames*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumJsStackFrames, lpVtbl : IEnumJsStackFramesVtbl* do
    GUID = LibC::GUID.new(0x5e7da34b_u32, 0xfb51_u16, 0x4791_u16, StaticArray[0xab_u8, 0xe7_u8, 0xcb_u8, 0x5b_u8, 0xdf_u8, 0x41_u8, 0x97_u8, 0x55_u8])
    def query_interface(this : IEnumJsStackFrames*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumJsStackFrames*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumJsStackFrames*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumJsStackFrames*, cFrameCount : UInt32, pFrames : Win32cr::System::Diagnostics::Debug::JS_NATIVE_FRAME*, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFrameCount, pFrames, pcFetched)
    end
    def reset(this : IEnumJsStackFrames*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record IJsDebugDataTargetVtbl,
    query_interface : Proc(IJsDebugDataTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJsDebugDataTarget*, UInt32),
    release : Proc(IJsDebugDataTarget*, UInt32),
    read_memory : Proc(IJsDebugDataTarget*, UInt64, Win32cr::System::Diagnostics::Debug::JsDebugReadMemoryFlags, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write_memory : Proc(IJsDebugDataTarget*, UInt64, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_virtual_memory : Proc(IJsDebugDataTarget*, UInt64, UInt32, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    free_virtual_memory : Proc(IJsDebugDataTarget*, UInt64, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_tls_value : Proc(IJsDebugDataTarget*, UInt32, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    read_bstr : Proc(IJsDebugDataTarget*, UInt64, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    read_null_terminated_string : Proc(IJsDebugDataTarget*, UInt64, UInt16, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_stack_frame_enumerator : Proc(IJsDebugDataTarget*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_thread_context : Proc(IJsDebugDataTarget*, UInt32, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJsDebugDataTarget, lpVtbl : IJsDebugDataTargetVtbl* do
    GUID = LibC::GUID.new(0x53b28977_u32, 0x53a1_u16, 0x48e5_u16, StaticArray[0x90_u8, 0x0_u8, 0x5d_u8, 0xd_u8, 0xfa_u8, 0x89_u8, 0x39_u8, 0x31_u8])
    def query_interface(this : IJsDebugDataTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJsDebugDataTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJsDebugDataTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_memory(this : IJsDebugDataTarget*, address : UInt64, flags : Win32cr::System::Diagnostics::Debug::JsDebugReadMemoryFlags, pBuffer : UInt8*, size : UInt32, pBytesRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_memory.call(this, address, flags, pBuffer, size, pBytesRead)
    end
    def write_memory(this : IJsDebugDataTarget*, address : UInt64, pMemory : UInt8*, size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_memory.call(this, address, pMemory, size)
    end
    def allocate_virtual_memory(this : IJsDebugDataTarget*, address : UInt64, size : UInt32, allocationType : UInt32, pageProtection : UInt32, pAllocatedAddress : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_virtual_memory.call(this, address, size, allocationType, pageProtection, pAllocatedAddress)
    end
    def free_virtual_memory(this : IJsDebugDataTarget*, address : UInt64, size : UInt32, freeType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_virtual_memory.call(this, address, size, freeType)
    end
    def get_tls_value(this : IJsDebugDataTarget*, threadId : UInt32, tlsIndex : UInt32, pValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tls_value.call(this, threadId, tlsIndex, pValue)
    end
    def read_bstr(this : IJsDebugDataTarget*, address : UInt64, pString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_bstr.call(this, address, pString)
    end
    def read_null_terminated_string(this : IJsDebugDataTarget*, address : UInt64, characterSize : UInt16, maxCharacters : UInt32, pString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_null_terminated_string.call(this, address, characterSize, maxCharacters, pString)
    end
    def create_stack_frame_enumerator(this : IJsDebugDataTarget*, threadId : UInt32, ppEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stack_frame_enumerator.call(this, threadId, ppEnumerator)
    end
    def get_thread_context(this : IJsDebugDataTarget*, threadId : UInt32, contextFlags : UInt32, contextSize : UInt32, pContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_thread_context.call(this, threadId, contextFlags, contextSize, pContext)
    end

  end

  @[Extern]
  record IObjectSafetyVtbl,
    query_interface : Proc(IObjectSafety*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectSafety*, UInt32),
    release : Proc(IObjectSafety*, UInt32),
    get_interface_safety_options : Proc(IObjectSafety*, LibC::GUID*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interface_safety_options : Proc(IObjectSafety*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectSafety, lpVtbl : IObjectSafetyVtbl* do
    GUID = LibC::GUID.new(0xcb5bdc81_u32, 0x93c1_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IObjectSafety*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectSafety*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectSafety*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_interface_safety_options(this : IObjectSafety*, riid : LibC::GUID*, pdwSupportedOptions : UInt32*, pdwEnabledOptions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_interface_safety_options.call(this, riid, pdwSupportedOptions, pdwEnabledOptions)
    end
    def set_interface_safety_options(this : IObjectSafety*, riid : LibC::GUID*, dwOptionSetMask : UInt32, dwEnabledOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interface_safety_options.call(this, riid, dwOptionSetMask, dwEnabledOptions)
    end

  end

  @[Link("kernel32")]
  @[Link("ntdll")]
  @[Link("dbgeng")]
  @[Link("dbgmodel")]
  @[Link("advapi32")]
  @[Link("dbghelp")]
  @[Link("imagehlp")]
  @[Link("user32")]
  lib C
    {% if flag?(:arm) %}
    fun RtlAddFunctionTable(function_table : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*, entry_count : UInt32, base_address : LibC::UIntPtrT) : Win32cr::Foundation::BOOLEAN
  {% end %}

    {% if flag?(:arm) %}
    fun RtlDeleteFunctionTable(function_table : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*) : Win32cr::Foundation::BOOLEAN
  {% end %}

    {% if flag?(:arm) %}
    fun RtlAddGrowableFunctionTable(dynamic_table : Void**, function_table : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*, entry_count : UInt32, maximum_entry_count : UInt32, range_base : LibC::UIntPtrT, range_end : LibC::UIntPtrT) : UInt32
  {% end %}

    {% if flag?(:arm) %}
    fun RtlLookupFunctionEntry(control_pc : LibC::UIntPtrT, image_base : LibC::UIntPtrT*, history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*) : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*
  {% end %}

    {% if flag?(:arm) %}
    fun RtlVirtualUnwind(handler_type : Win32cr::System::Diagnostics::Debug::RTL_VIRTUAL_UNWIND_HANDLER_TYPE, image_base : LibC::UIntPtrT, control_pc : LibC::UIntPtrT, function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*, context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, handler_data : Void**, establisher_frame : LibC::UIntPtrT*, context_pointers : Win32cr::System::Diagnostics::Debug::KNONVOLATILE_CONTEXT_POINTERS_ARM64*) : Win32cr::System::Kernel::EXCEPTION_ROUTINE
  {% end %}

    fun DebugConnect(remote_options : Win32cr::Foundation::PSTR, interface_id : LibC::GUID*, interface : Void**) : Win32cr::Foundation::HRESULT

    fun DebugConnectWide(remote_options : Win32cr::Foundation::PWSTR, interface_id : LibC::GUID*, interface : Void**) : Win32cr::Foundation::HRESULT

    fun DebugCreate(interface_id : LibC::GUID*, interface : Void**) : Win32cr::Foundation::HRESULT

    fun DebugCreateEx(interface_id : LibC::GUID*, dbg_eng_options : UInt32, interface : Void**) : Win32cr::Foundation::HRESULT

    fun CreateDataModelManager(debugHost : Void*, manager : Void**) : Win32cr::Foundation::HRESULT

    fun ReadProcessMemory(hProcess : Win32cr::Foundation::HANDLE, lpBaseAddress : Void*, lpBuffer : Void*, nSize : LibC::UIntPtrT, lpNumberOfBytesRead : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun WriteProcessMemory(hProcess : Win32cr::Foundation::HANDLE, lpBaseAddress : Void*, lpBuffer : Void*, nSize : LibC::UIntPtrT, lpNumberOfBytesWritten : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun GetThreadContext(hThread : Win32cr::Foundation::HANDLE, lpContext : Win32cr::System::Diagnostics::Debug::CONTEXT*) : Win32cr::Foundation::BOOL

    fun SetThreadContext(hThread : Win32cr::Foundation::HANDLE, lpContext : Win32cr::System::Diagnostics::Debug::CONTEXT*) : Win32cr::Foundation::BOOL

    fun FlushInstructionCache(hProcess : Win32cr::Foundation::HANDLE, lpBaseAddress : Void*, dwSize : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun Wow64GetThreadContext(hThread : Win32cr::Foundation::HANDLE, lpContext : Win32cr::System::Diagnostics::Debug::WOW64_CONTEXT*) : Win32cr::Foundation::BOOL

    fun Wow64SetThreadContext(hThread : Win32cr::Foundation::HANDLE, lpContext : Win32cr::System::Diagnostics::Debug::WOW64_CONTEXT*) : Win32cr::Foundation::BOOL

    fun RtlCaptureStackBackTrace(frames_to_skip : UInt32, frames_to_capture : UInt32, back_trace : Void**, back_trace_hash : UInt32*) : UInt16

    # Commented out due to being part of LibC
    #fun RtlCaptureContext(context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*) : Void

    {% if flag?(:x86_64) %}
    fun RtlCaptureContext2(context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*) : Void
  {% end %}

    fun RtlUnwind(target_frame : Void*, target_ip : Void*, exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*, return_value : Void*) : Void

    {% if flag?(:x86_64) %}
    fun RtlAddFunctionTable(function_table : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*, entry_count : UInt32, base_address : UInt64) : Win32cr::Foundation::BOOLEAN
  {% end %}

    {% if flag?(:x86_64) %}
    fun RtlDeleteFunctionTable(function_table : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*) : Win32cr::Foundation::BOOLEAN
  {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun RtlInstallFunctionTableCallback(table_identifier : UInt64, base_address : UInt64, length : UInt32, callback : Win32cr::System::Diagnostics::Debug::PGET_RUNTIME_FUNCTION_CALLBACK, context : Void*, out_of_process_callback_dll : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOLEAN
  {% end %}

    {% if flag?(:x86_64) %}
    fun RtlAddGrowableFunctionTable(dynamic_table : Void**, function_table : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*, entry_count : UInt32, maximum_entry_count : UInt32, range_base : LibC::UIntPtrT, range_end : LibC::UIntPtrT) : UInt32
  {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun RtlGrowFunctionTable(dynamic_table : Void*, new_entry_count : UInt32) : Void
  {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun RtlDeleteGrowableFunctionTable(dynamic_table : Void*) : Void
  {% end %}

    {% if flag?(:x86_64) %}
    fun RtlLookupFunctionEntry(control_pc : UInt64, image_base : UInt64*, history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*) : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*
  {% end %}

    fun RtlRestoreContext(context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*) : Void

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun RtlUnwindEx(target_frame : Void*, target_ip : Void*, exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*, return_value : Void*, context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, history_table : Win32cr::System::Diagnostics::Debug::UNWIND_HISTORY_TABLE*) : Void
  {% end %}

    {% if flag?(:x86_64) %}
    fun RtlVirtualUnwind(handler_type : Win32cr::System::Diagnostics::Debug::RTL_VIRTUAL_UNWIND_HANDLER_TYPE, image_base : UInt64, control_pc : UInt64, function_entry : Win32cr::System::Diagnostics::Debug::IMAGE_RUNTIME_FUNCTION_ENTRY*, context_record : Win32cr::System::Diagnostics::Debug::CONTEXT*, handler_data : Void**, establisher_frame : UInt64*, context_pointers : Win32cr::System::Diagnostics::Debug::KNONVOLATILE_CONTEXT_POINTERS*) : Win32cr::System::Kernel::EXCEPTION_ROUTINE
  {% end %}

    fun RtlRaiseException(exception_record : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*) : Void

    fun RtlPcToFileHeader(pc_value : Void*, base_of_image : Void**) : Void*

    fun IsDebuggerPresent : Win32cr::Foundation::BOOL

    fun DebugBreak : Void

    fun OutputDebugStringA(lpOutputString : Win32cr::Foundation::PSTR) : Void

    fun OutputDebugStringW(lpOutputString : Win32cr::Foundation::PWSTR) : Void

    fun ContinueDebugEvent(dwProcessId : UInt32, dwThreadId : UInt32, dwContinueStatus : UInt32) : Win32cr::Foundation::BOOL

    fun WaitForDebugEvent(lpDebugEvent : Win32cr::System::Diagnostics::Debug::DEBUG_EVENT*, dwMilliseconds : UInt32) : Win32cr::Foundation::BOOL

    fun DebugActiveProcess(dwProcessId : UInt32) : Win32cr::Foundation::BOOL

    fun DebugActiveProcessStop(dwProcessId : UInt32) : Win32cr::Foundation::BOOL

    fun CheckRemoteDebuggerPresent(hProcess : Win32cr::Foundation::HANDLE, pbDebuggerPresent : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::BOOL

    fun WaitForDebugEventEx(lpDebugEvent : Win32cr::System::Diagnostics::Debug::DEBUG_EVENT*, dwMilliseconds : UInt32) : Win32cr::Foundation::BOOL

    fun EncodePointer(ptr : Void*) : Void*

    fun DecodePointer(ptr : Void*) : Void*

    fun EncodeSystemPointer(ptr : Void*) : Void*

    fun DecodeSystemPointer(ptr : Void*) : Void*

    fun EncodeRemotePointer(process_handle : Win32cr::Foundation::HANDLE, ptr : Void*, encoded_ptr : Void**) : Win32cr::Foundation::HRESULT

    fun DecodeRemotePointer(process_handle : Win32cr::Foundation::HANDLE, ptr : Void*, decoded_ptr : Void**) : Win32cr::Foundation::HRESULT

    fun Beep(dwFreq : UInt32, dwDuration : UInt32) : Win32cr::Foundation::BOOL

    fun RaiseException(dwExceptionCode : UInt32, dwExceptionFlags : UInt32, nNumberOfArguments : UInt32, lpArguments : LibC::UIntPtrT*) : Void

    fun UnhandledExceptionFilter(exception_info : Win32cr::System::Diagnostics::Debug::EXCEPTION_POINTERS*) : Int32

    fun SetUnhandledExceptionFilter(lpTopLevelExceptionFilter : Win32cr::System::Diagnostics::Debug::LPTOP_LEVEL_EXCEPTION_FILTER) : Win32cr::System::Diagnostics::Debug::LPTOP_LEVEL_EXCEPTION_FILTER

    fun GetErrorMode : UInt32

    fun SetErrorMode(uMode : Win32cr::System::Diagnostics::Debug::THREAD_ERROR_MODE) : UInt32

    # Commented out due to being part of LibC
    #fun AddVectoredExceptionHandler(first : UInt32, handler : Win32cr::System::Diagnostics::Debug::PVECTORED_EXCEPTION_HANDLER) : Void*

    fun RemoveVectoredExceptionHandler(handle : Void*) : UInt32

    fun AddVectoredContinueHandler(first : UInt32, handler : Win32cr::System::Diagnostics::Debug::PVECTORED_EXCEPTION_HANDLER) : Void*

    fun RemoveVectoredContinueHandler(handle : Void*) : UInt32

    fun RaiseFailFastException(pExceptionRecord : Win32cr::System::Diagnostics::Debug::EXCEPTION_RECORD*, pContextRecord : Win32cr::System::Diagnostics::Debug::CONTEXT*, dwFlags : UInt32) : Void

    fun FatalAppExitA(uAction : UInt32, lpMessageText : Win32cr::Foundation::PSTR) : Void

    fun FatalAppExitW(uAction : UInt32, lpMessageText : Win32cr::Foundation::PWSTR) : Void

    fun GetThreadErrorMode : UInt32

    fun SetThreadErrorMode(dwNewMode : Win32cr::System::Diagnostics::Debug::THREAD_ERROR_MODE, lpOldMode : Win32cr::System::Diagnostics::Debug::THREAD_ERROR_MODE*) : Win32cr::Foundation::BOOL

    fun TerminateProcessOnMemoryExhaustion(failed_allocation_size : LibC::UIntPtrT) : Void

    fun OpenThreadWaitChainSession(flags : Win32cr::System::Diagnostics::Debug::OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS, callback : Win32cr::System::Diagnostics::Debug::PWAITCHAINCALLBACK) : Void*

    fun CloseThreadWaitChainSession(wct_handle : Void*) : Void

    fun GetThreadWaitChain(wct_handle : Void*, context : LibC::UIntPtrT, flags : Win32cr::System::Diagnostics::Debug::WAIT_CHAIN_THREAD_OPTIONS, thread_id : UInt32, node_count : UInt32*, node_info_array : Win32cr::System::Diagnostics::Debug::WAITCHAIN_NODE_INFO*, is_cycle : Int32*) : Win32cr::Foundation::BOOL

    fun RegisterWaitChainCOMCallback(call_state_callback : Win32cr::System::Diagnostics::Debug::PCOGETCALLSTATE, activation_state_callback : Win32cr::System::Diagnostics::Debug::PCOGETACTIVATIONSTATE) : Void

    fun MiniDumpWriteDump(hProcess : Win32cr::Foundation::HANDLE, process_id : UInt32, hFile : Win32cr::Foundation::HANDLE, dump_type : Win32cr::System::Diagnostics::Debug::MINIDUMP_TYPE, exception_param : Win32cr::System::Diagnostics::Debug::MINIDUMP_EXCEPTION_INFORMATION*, user_stream_param : Win32cr::System::Diagnostics::Debug::MINIDUMP_USER_STREAM_INFORMATION*, callback_param : Win32cr::System::Diagnostics::Debug::MINIDUMP_CALLBACK_INFORMATION*) : Win32cr::Foundation::BOOL

    fun MiniDumpReadDumpStream(base_of_dump : Void*, stream_number : UInt32, dir : Win32cr::System::Diagnostics::Debug::MINIDUMP_DIRECTORY**, stream_pointer : Void**, stream_size : UInt32*) : Win32cr::Foundation::BOOL

    fun BindImage(image_name : Win32cr::Foundation::PSTR, dll_path : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun BindImageEx(flags : UInt32, image_name : Win32cr::Foundation::PSTR, dll_path : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, status_routine : Win32cr::System::Diagnostics::Debug::PIMAGEHLP_STATUS_ROUTINE) : Win32cr::Foundation::BOOL

    fun ReBaseImage(current_image_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, fReBase : Win32cr::Foundation::BOOL, fRebaseSysfileOk : Win32cr::Foundation::BOOL, fGoingDown : Win32cr::Foundation::BOOL, check_image_size : UInt32, old_image_size : UInt32*, old_image_base : LibC::UIntPtrT*, new_image_size : UInt32*, new_image_base : LibC::UIntPtrT*, time_stamp : UInt32) : Win32cr::Foundation::BOOL

    fun ReBaseImage64(current_image_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, fReBase : Win32cr::Foundation::BOOL, fRebaseSysfileOk : Win32cr::Foundation::BOOL, fGoingDown : Win32cr::Foundation::BOOL, check_image_size : UInt32, old_image_size : UInt32*, old_image_base : UInt64*, new_image_size : UInt32*, new_image_base : UInt64*, time_stamp : UInt32) : Win32cr::Foundation::BOOL

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun CheckSumMappedFile(base_address : Void*, file_length : UInt32, header_sum : UInt32*, check_sum : UInt32*) : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*
  {% end %}

    fun MapFileAndCheckSumA(filename : Win32cr::Foundation::PSTR, header_sum : UInt32*, check_sum : UInt32*) : UInt32

    fun MapFileAndCheckSumW(filename : Win32cr::Foundation::PWSTR, header_sum : UInt32*, check_sum : UInt32*) : UInt32

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun GetImageConfigInformation(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, image_config_information : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_DIRECTORY64*) : Win32cr::Foundation::BOOL
  {% end %}

    fun GetImageUnusedHeaderBytes(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, size_unused_header_bytes : UInt32*) : UInt32

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun SetImageConfigInformation(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, image_config_information : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_DIRECTORY64*) : Win32cr::Foundation::BOOL
  {% end %}

    fun ImageGetDigestStream(file_handle : Win32cr::Foundation::HANDLE, digest_level : UInt32, digest_function : Win32cr::System::Diagnostics::Debug::DIGEST_FUNCTION, digest_handle : Void*) : Win32cr::Foundation::BOOL

    fun ImageAddCertificate(file_handle : Win32cr::Foundation::HANDLE, certificate : Win32cr::Security::WinTrust::WIN_CERTIFICATE*, index : UInt32*) : Win32cr::Foundation::BOOL

    fun ImageRemoveCertificate(file_handle : Win32cr::Foundation::HANDLE, index : UInt32) : Win32cr::Foundation::BOOL

    fun ImageEnumerateCertificates(file_handle : Win32cr::Foundation::HANDLE, type_filter : UInt16, certificate_count : UInt32*, indices : UInt32*, index_count : UInt32) : Win32cr::Foundation::BOOL

    fun ImageGetCertificateData(file_handle : Win32cr::Foundation::HANDLE, certificate_index : UInt32, certificate : Win32cr::Security::WinTrust::WIN_CERTIFICATE*, required_length : UInt32*) : Win32cr::Foundation::BOOL

    fun ImageGetCertificateHeader(file_handle : Win32cr::Foundation::HANDLE, certificate_index : UInt32, certificateheader : Win32cr::Security::WinTrust::WIN_CERTIFICATE*) : Win32cr::Foundation::BOOL

    fun ImageLoad(dll_name : Win32cr::Foundation::PSTR, dll_path : Win32cr::Foundation::PSTR) : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*

    fun ImageUnload(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*) : Win32cr::Foundation::BOOL

    fun MapAndLoad(image_name : Win32cr::Foundation::PSTR, dll_path : Win32cr::Foundation::PSTR, loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, dot_dll : Win32cr::Foundation::BOOL, read_only : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun UnMapAndLoad(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*) : Win32cr::Foundation::BOOL

    fun TouchFileTimes(file_handle : Win32cr::Foundation::HANDLE, pSystemTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::BOOL

    fun UpdateDebugInfoFile(image_file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, debug_file_path : Win32cr::Foundation::PSTR, nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*) : Win32cr::Foundation::BOOL

    fun UpdateDebugInfoFileEx(image_file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, debug_file_path : Win32cr::Foundation::PSTR, nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*, old_check_sum : UInt32) : Win32cr::Foundation::BOOL

    fun SymFindDebugInfoFile(hProcess : Win32cr::Foundation::HANDLE, file_name : Win32cr::Foundation::PSTR, debug_file_path : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_DEBUG_FILE_CALLBACK, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun SymFindDebugInfoFileW(hProcess : Win32cr::Foundation::HANDLE, file_name : Win32cr::Foundation::PWSTR, debug_file_path : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_DEBUG_FILE_CALLBACKW, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun FindDebugInfoFile(file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, debug_file_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HANDLE

    fun FindDebugInfoFileEx(file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, debug_file_path : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_DEBUG_FILE_CALLBACK, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun FindDebugInfoFileExW(file_name : Win32cr::Foundation::PWSTR, symbol_path : Win32cr::Foundation::PWSTR, debug_file_path : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_DEBUG_FILE_CALLBACKW, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun SymFindFileInPath(hprocess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, id : Void*, two : UInt32, three : UInt32, flags : Win32cr::System::Diagnostics::Debug::SYM_FIND_ID_OPTION, found_file : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PFINDFILEINPATHCALLBACK, context : Void*) : Win32cr::Foundation::BOOL

    fun SymFindFileInPathW(hprocess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PWSTR, file_name : Win32cr::Foundation::PWSTR, id : Void*, two : UInt32, three : UInt32, flags : Win32cr::System::Diagnostics::Debug::SYM_FIND_ID_OPTION, found_file : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PFINDFILEINPATHCALLBACKW, context : Void*) : Win32cr::Foundation::BOOL

    fun SymFindExecutableImage(hProcess : Win32cr::Foundation::HANDLE, file_name : Win32cr::Foundation::PSTR, image_file_path : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_EXE_FILE_CALLBACK, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun SymFindExecutableImageW(hProcess : Win32cr::Foundation::HANDLE, file_name : Win32cr::Foundation::PWSTR, image_file_path : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_EXE_FILE_CALLBACKW, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun FindExecutableImage(file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, image_file_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HANDLE

    fun FindExecutableImageEx(file_name : Win32cr::Foundation::PSTR, symbol_path : Win32cr::Foundation::PSTR, image_file_path : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_EXE_FILE_CALLBACK, caller_data : Void*) : Win32cr::Foundation::HANDLE

    fun FindExecutableImageExW(file_name : Win32cr::Foundation::PWSTR, symbol_path : Win32cr::Foundation::PWSTR, image_file_path : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PFIND_EXE_FILE_CALLBACKW, caller_data : Void*) : Win32cr::Foundation::HANDLE

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun ImageNtHeader(base : Void*) : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*
  {% end %}

    fun ImageDirectoryEntryToDataEx(base : Void*, mapped_as_image : Win32cr::Foundation::BOOLEAN, directory_entry : Win32cr::System::Diagnostics::Debug::IMAGE_DIRECTORY_ENTRY, size : UInt32*, found_header : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER**) : Void*

    fun ImageDirectoryEntryToData(base : Void*, mapped_as_image : Win32cr::Foundation::BOOLEAN, directory_entry : Win32cr::System::Diagnostics::Debug::IMAGE_DIRECTORY_ENTRY, size : UInt32*) : Void*

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun ImageRvaToSection(nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*, base : Void*, rva : UInt32) : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
  {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    fun ImageRvaToVa(nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS64*, base : Void*, rva : UInt32, last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER**) : Void*
  {% end %}

    fun SearchTreeForFile(root_path : Win32cr::Foundation::PSTR, input_path_name : Win32cr::Foundation::PSTR, output_path_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SearchTreeForFileW(root_path : Win32cr::Foundation::PWSTR, input_path_name : Win32cr::Foundation::PWSTR, output_path_buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun EnumDirTree(hProcess : Win32cr::Foundation::HANDLE, root_path : Win32cr::Foundation::PSTR, input_path_name : Win32cr::Foundation::PSTR, output_path_buffer : Win32cr::Foundation::PSTR, cb : Win32cr::System::Diagnostics::Debug::PENUMDIRTREE_CALLBACK, data : Void*) : Win32cr::Foundation::BOOL

    fun EnumDirTreeW(hProcess : Win32cr::Foundation::HANDLE, root_path : Win32cr::Foundation::PWSTR, input_path_name : Win32cr::Foundation::PWSTR, output_path_buffer : Win32cr::Foundation::PWSTR, cb : Win32cr::System::Diagnostics::Debug::PENUMDIRTREE_CALLBACKW, data : Void*) : Win32cr::Foundation::BOOL

    fun MakeSureDirectoryPathExists(dir_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun UnDecorateSymbolName(name : Win32cr::Foundation::PSTR, outputString : UInt8*, maxStringLength : UInt32, flags : UInt32) : UInt32

    fun UnDecorateSymbolNameW(name : Win32cr::Foundation::PWSTR, outputString : UInt16*, maxStringLength : UInt32, flags : UInt32) : UInt32

    # Commented out due to being part of LibC
    #fun StackWalk64(machine_type : UInt32, hProcess : Win32cr::Foundation::HANDLE, hThread : Win32cr::Foundation::HANDLE, stack_frame : Win32cr::System::Diagnostics::Debug::STACKFRAME64*, context_record : Void*, read_memory_routine : Win32cr::System::Diagnostics::Debug::PREAD_PROCESS_MEMORY_ROUTINE64, function_table_access_routine : Win32cr::System::Diagnostics::Debug::PFUNCTION_TABLE_ACCESS_ROUTINE64, get_module_base_routine : Win32cr::System::Diagnostics::Debug::PGET_MODULE_BASE_ROUTINE64, translate_address : Win32cr::System::Diagnostics::Debug::PTRANSLATE_ADDRESS_ROUTINE64) : Win32cr::Foundation::BOOL

    fun StackWalkEx(machine_type : UInt32, hProcess : Win32cr::Foundation::HANDLE, hThread : Win32cr::Foundation::HANDLE, stack_frame : Win32cr::System::Diagnostics::Debug::STACKFRAME_EX*, context_record : Void*, read_memory_routine : Win32cr::System::Diagnostics::Debug::PREAD_PROCESS_MEMORY_ROUTINE64, function_table_access_routine : Win32cr::System::Diagnostics::Debug::PFUNCTION_TABLE_ACCESS_ROUTINE64, get_module_base_routine : Win32cr::System::Diagnostics::Debug::PGET_MODULE_BASE_ROUTINE64, translate_address : Win32cr::System::Diagnostics::Debug::PTRANSLATE_ADDRESS_ROUTINE64, flags : UInt32) : Win32cr::Foundation::BOOL

    fun ImagehlpApiVersion : Win32cr::System::Diagnostics::Debug::API_VERSION*

    fun ImagehlpApiVersionEx(app_version : Win32cr::System::Diagnostics::Debug::API_VERSION*) : Win32cr::System::Diagnostics::Debug::API_VERSION*

    fun GetTimestampForLoadedLibrary(module__ : Win32cr::Foundation::HINSTANCE) : UInt32

    fun SymSetParentWindow(hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::BOOL

    fun SymSetHomeDirectory(hProcess : Win32cr::Foundation::HANDLE, dir : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun SymSetHomeDirectoryW(hProcess : Win32cr::Foundation::HANDLE, dir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun SymGetHomeDirectory(type__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_HD_TYPE, dir : UInt8*, size : LibC::UIntPtrT) : Win32cr::Foundation::PSTR

    fun SymGetHomeDirectoryW(type__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_HD_TYPE, dir : UInt16*, size : LibC::UIntPtrT) : Win32cr::Foundation::PWSTR

    fun SymGetOmaps(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, omap_to : Win32cr::System::Diagnostics::Debug::OMAP**, cOmapTo : UInt64*, omap_from : Win32cr::System::Diagnostics::Debug::OMAP**, cOmapFrom : UInt64*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymSetOptions(sym_options : UInt32) : UInt32

    # Commented out due to being part of LibC
    #fun SymGetOptions : UInt32

    # Commented out due to being part of LibC
    #fun SymCleanup(hProcess : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL

    fun SymGetExtendedOption(option : Win32cr::System::Diagnostics::Debug::IMAGEHLP_EXTENDED_OPTIONS) : Win32cr::Foundation::BOOL

    fun SymSetExtendedOption(option : Win32cr::System::Diagnostics::Debug::IMAGEHLP_EXTENDED_OPTIONS, value : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun SymMatchString(string : Win32cr::Foundation::PSTR, expression : Win32cr::Foundation::PSTR, fCase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun SymMatchStringA(string : Win32cr::Foundation::PSTR, expression : Win32cr::Foundation::PSTR, fCase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun SymMatchStringW(string : Win32cr::Foundation::PWSTR, expression : Win32cr::Foundation::PWSTR, fCase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun SymEnumSourceFiles(hProcess : Win32cr::Foundation::HANDLE, mod_base : UInt64, mask : Win32cr::Foundation::PSTR, cbSrcFiles : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSOURCEFILES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumSourceFilesW(hProcess : Win32cr::Foundation::HANDLE, mod_base : UInt64, mask : Win32cr::Foundation::PWSTR, cbSrcFiles : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSOURCEFILES_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumerateModules64(hProcess : Win32cr::Foundation::HANDLE, enum_modules_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMMODULES_CALLBACK64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumerateModulesW64(hProcess : Win32cr::Foundation::HANDLE, enum_modules_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMMODULES_CALLBACKW64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun EnumerateLoadedModulesEx(hProcess : Win32cr::Foundation::HANDLE, enum_loaded_modules_callback : Win32cr::System::Diagnostics::Debug::PENUMLOADED_MODULES_CALLBACK64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun EnumerateLoadedModulesExW(hProcess : Win32cr::Foundation::HANDLE, enum_loaded_modules_callback : Win32cr::System::Diagnostics::Debug::PENUMLOADED_MODULES_CALLBACKW64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun EnumerateLoadedModules64(hProcess : Win32cr::Foundation::HANDLE, enum_loaded_modules_callback : Win32cr::System::Diagnostics::Debug::PENUMLOADED_MODULES_CALLBACK64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun EnumerateLoadedModulesW64(hProcess : Win32cr::Foundation::HANDLE, enum_loaded_modules_callback : Win32cr::System::Diagnostics::Debug::PENUMLOADED_MODULES_CALLBACKW64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymFunctionTableAccess64(hProcess : Win32cr::Foundation::HANDLE, addr_base : UInt64) : Void*

    fun SymFunctionTableAccess64AccessRoutines(hProcess : Win32cr::Foundation::HANDLE, addr_base : UInt64, read_memory_routine : Win32cr::System::Diagnostics::Debug::PREAD_PROCESS_MEMORY_ROUTINE64, get_module_base_routine : Win32cr::System::Diagnostics::Debug::PGET_MODULE_BASE_ROUTINE64) : Void*

    fun SymGetUnwindInfo(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, buffer : Void*, size : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetModuleInfo64(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64, module_info : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULE64*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymGetModuleInfoW64(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64, module_info : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULEW64*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymGetModuleBase64(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64) : UInt64

    fun SymEnumLines(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, obj : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR, enum_lines_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMLINES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumLinesW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, obj : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR, enum_lines_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMLINES_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymGetLineFromAddr64(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64, pdwDisplacement : UInt32*, line64 : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE64*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymGetLineFromAddrW64(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt64, pdwDisplacement : UInt32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINEW64*) : Win32cr::Foundation::BOOL

    fun SymGetLineFromInlineContext(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64, inline_context : UInt32, qwModuleBaseAddress : UInt64, pdwDisplacement : UInt32*, line64 : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE64*) : Win32cr::Foundation::BOOL

    fun SymGetLineFromInlineContextW(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt64, inline_context : UInt32, qwModuleBaseAddress : UInt64, pdwDisplacement : UInt32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINEW64*) : Win32cr::Foundation::BOOL

    fun SymEnumSourceLines(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, obj : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR, line : UInt32, flags : UInt32, enum_lines_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMLINES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumSourceLinesW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, obj : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR, line : UInt32, flags : UInt32, enum_lines_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMLINES_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymAddrIncludeInlineTrace(hProcess : Win32cr::Foundation::HANDLE, address : UInt64) : UInt32

    fun SymCompareInlineTrace(hProcess : Win32cr::Foundation::HANDLE, address1 : UInt64, inline_context1 : UInt32, ret_address1 : UInt64, address2 : UInt64, ret_address2 : UInt64) : UInt32

    fun SymQueryInlineTrace(hProcess : Win32cr::Foundation::HANDLE, start_address : UInt64, start_context : UInt32, start_ret_address : UInt64, cur_address : UInt64, cur_context : UInt32*, cur_frame_index : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetLineFromName64(hProcess : Win32cr::Foundation::HANDLE, module_name : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, dwLineNumber : UInt32, plDisplacement : Int32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE64*) : Win32cr::Foundation::BOOL

    fun SymGetLineFromNameW64(hProcess : Win32cr::Foundation::HANDLE, module_name : Win32cr::Foundation::PWSTR, file_name : Win32cr::Foundation::PWSTR, dwLineNumber : UInt32, plDisplacement : Int32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINEW64*) : Win32cr::Foundation::BOOL

    fun SymGetLineNext64(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE64*) : Win32cr::Foundation::BOOL

    fun SymGetLineNextW64(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINEW64*) : Win32cr::Foundation::BOOL

    fun SymGetLinePrev64(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE64*) : Win32cr::Foundation::BOOL

    fun SymGetLinePrevW64(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINEW64*) : Win32cr::Foundation::BOOL

    fun SymGetFileLineOffsets64(hProcess : Win32cr::Foundation::HANDLE, module_name : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, buffer : UInt64*, buffer_lines : UInt32) : UInt32

    fun SymMatchFileName(file_name : Win32cr::Foundation::PSTR, match : Win32cr::Foundation::PSTR, file_name_stop : Win32cr::Foundation::PSTR*, match_stop : Win32cr::Foundation::PSTR*) : Win32cr::Foundation::BOOL

    fun SymMatchFileNameW(file_name : Win32cr::Foundation::PWSTR, match : Win32cr::Foundation::PWSTR, file_name_stop : Win32cr::Foundation::PWSTR*, match_stop : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFile(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, params : Win32cr::Foundation::PSTR, file_spec : Win32cr::Foundation::PSTR, file_path : UInt8*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, params : Win32cr::Foundation::PWSTR, file_spec : Win32cr::Foundation::PWSTR, file_path : UInt16*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileToken(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PSTR, token : Void**, size : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileTokenByTokenName(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PSTR, token_name : Win32cr::Foundation::PSTR, token_parameters : Win32cr::Foundation::PSTR, token : Void**, size : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileChecksumW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PWSTR, pCheckSumType : UInt32*, pChecksum : UInt8*, checksumSize : UInt32, pActualBytesWritten : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileChecksum(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PSTR, pCheckSumType : UInt32*, pChecksum : UInt8*, checksumSize : UInt32, pActualBytesWritten : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileTokenW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PWSTR, token : Void**, size : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileTokenByTokenNameW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PWSTR, token_name : Win32cr::Foundation::PWSTR, token_parameters : Win32cr::Foundation::PWSTR, token : Void**, size : UInt32*) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileFromToken(hProcess : Win32cr::Foundation::HANDLE, token : Void*, params : Win32cr::Foundation::PSTR, file_path : UInt8*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileFromTokenByTokenName(hProcess : Win32cr::Foundation::HANDLE, token : Void*, token_name : Win32cr::Foundation::PSTR, params : Win32cr::Foundation::PSTR, file_path : UInt8*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileFromTokenW(hProcess : Win32cr::Foundation::HANDLE, token : Void*, params : Win32cr::Foundation::PWSTR, file_path : UInt16*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceFileFromTokenByTokenNameW(hProcess : Win32cr::Foundation::HANDLE, token : Void*, token_name : Win32cr::Foundation::PWSTR, params : Win32cr::Foundation::PWSTR, file_path : UInt16*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceVarFromToken(hProcess : Win32cr::Foundation::HANDLE, token : Void*, params : Win32cr::Foundation::PSTR, var_name : Win32cr::Foundation::PSTR, value : UInt8*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSourceVarFromTokenW(hProcess : Win32cr::Foundation::HANDLE, token : Void*, params : Win32cr::Foundation::PWSTR, var_name : Win32cr::Foundation::PWSTR, value : UInt16*, size : UInt32) : Win32cr::Foundation::BOOL

    fun SymEnumSourceFileTokens(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, callback : Win32cr::System::Diagnostics::Debug::PENUMSOURCEFILETOKENSCALLBACK) : Win32cr::Foundation::BOOL

    fun SymInitialize(hProcess : Win32cr::Foundation::HANDLE, user_search_path : Win32cr::Foundation::PSTR, fInvadeProcess : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymInitializeW(hProcess : Win32cr::Foundation::HANDLE, user_search_path : Win32cr::Foundation::PWSTR, fInvadeProcess : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun SymGetSearchPath(hProcess : Win32cr::Foundation::HANDLE, search_path_a : UInt8*, search_path_length : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetSearchPathW(hProcess : Win32cr::Foundation::HANDLE, search_path_a : UInt16*, search_path_length : UInt32) : Win32cr::Foundation::BOOL

    fun SymSetSearchPath(hProcess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SymSetSearchPathW(hProcess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun SymLoadModuleEx(hProcess : Win32cr::Foundation::HANDLE, hFile : Win32cr::Foundation::HANDLE, image_name : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, base_of_dll : UInt64, dll_size : UInt32, data : Win32cr::System::Diagnostics::Debug::MODLOAD_DATA*, flags : Win32cr::System::Diagnostics::Debug::SYM_LOAD_FLAGS) : UInt64

    fun SymLoadModuleExW(hProcess : Win32cr::Foundation::HANDLE, hFile : Win32cr::Foundation::HANDLE, image_name : Win32cr::Foundation::PWSTR, module_name : Win32cr::Foundation::PWSTR, base_of_dll : UInt64, dll_size : UInt32, data : Win32cr::System::Diagnostics::Debug::MODLOAD_DATA*, flags : Win32cr::System::Diagnostics::Debug::SYM_LOAD_FLAGS) : UInt64

    fun SymUnloadModule64(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64) : Win32cr::Foundation::BOOL

    fun SymUnDName64(sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*, un_dec_name : UInt8*, un_dec_name_length : UInt32) : Win32cr::Foundation::BOOL

    fun SymRegisterCallback64(hProcess : Win32cr::Foundation::HANDLE, callback_function : Win32cr::System::Diagnostics::Debug::PSYMBOL_REGISTERED_CALLBACK64, user_context : UInt64) : Win32cr::Foundation::BOOL

    fun SymRegisterCallbackW64(hProcess : Win32cr::Foundation::HANDLE, callback_function : Win32cr::System::Diagnostics::Debug::PSYMBOL_REGISTERED_CALLBACK64, user_context : UInt64) : Win32cr::Foundation::BOOL

    fun SymRegisterFunctionEntryCallback64(hProcess : Win32cr::Foundation::HANDLE, callback_function : Win32cr::System::Diagnostics::Debug::PSYMBOL_FUNCENTRY_CALLBACK64, user_context : UInt64) : Win32cr::Foundation::BOOL

    fun SymSetContext(hProcess : Win32cr::Foundation::HANDLE, stack_frame : Win32cr::System::Diagnostics::Debug::IMAGEHLP_STACK_FRAME*, context : Void*) : Win32cr::Foundation::BOOL

    fun SymSetScopeFromAddr(hProcess : Win32cr::Foundation::HANDLE, address : UInt64) : Win32cr::Foundation::BOOL

    fun SymSetScopeFromInlineContext(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, inline_context : UInt32) : Win32cr::Foundation::BOOL

    fun SymSetScopeFromIndex(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32) : Win32cr::Foundation::BOOL

    fun SymEnumProcesses(enum_processes_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMPROCESSES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymFromAddr(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, displacement : UInt64*, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun SymFromAddrW(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, displacement : UInt64*, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymFromInlineContext(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, inline_context : UInt32, displacement : UInt64*, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymFromInlineContextW(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, inline_context : UInt32, displacement : UInt64*, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymFromToken(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, token : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymFromTokenW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, token : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymNext(hProcess : Win32cr::Foundation::HANDLE, si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymNextW(hProcess : Win32cr::Foundation::HANDLE, siw : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymPrev(hProcess : Win32cr::Foundation::HANDLE, si : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymPrevW(hProcess : Win32cr::Foundation::HANDLE, siw : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymFromName(hProcess : Win32cr::Foundation::HANDLE, name : Win32cr::Foundation::PSTR, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymFromNameW(hProcess : Win32cr::Foundation::HANDLE, name : Win32cr::Foundation::PWSTR, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymEnumSymbols(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumSymbolsEx(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*, options : UInt32) : Win32cr::Foundation::BOOL

    fun SymEnumSymbolsW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PWSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumSymbolsExW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PWSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*, options : UInt32) : Win32cr::Foundation::BOOL

    fun SymEnumSymbolsForAddr(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumSymbolsForAddrW(hProcess : Win32cr::Foundation::HANDLE, address : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymSearch(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, sym_tag : UInt32, mask : Win32cr::Foundation::PSTR, address : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*, options : UInt32) : Win32cr::Foundation::BOOL

    fun SymSearchW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, sym_tag : UInt32, mask : Win32cr::Foundation::PWSTR, address : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*, options : UInt32) : Win32cr::Foundation::BOOL

    fun SymGetScope(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymGetScopeW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymFromIndex(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymFromIndexW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, index : UInt32, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymGetTypeInfo(hProcess : Win32cr::Foundation::HANDLE, mod_base : UInt64, type_id : UInt32, get_type : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL_TYPE_INFO, pInfo : Void*) : Win32cr::Foundation::BOOL

    fun SymGetTypeInfoEx(hProcess : Win32cr::Foundation::HANDLE, mod_base : UInt64, params : Win32cr::System::Diagnostics::Debug::IMAGEHLP_GET_TYPE_INFO_PARAMS*) : Win32cr::Foundation::BOOL

    fun SymEnumTypes(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumTypesW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumTypesByName(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumTypesByNameW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, mask : Win32cr::Foundation::PWSTR, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymGetTypeFromName(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PSTR, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFO*) : Win32cr::Foundation::BOOL

    fun SymGetTypeFromNameW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PWSTR, symbol : Win32cr::System::Diagnostics::Debug::SYMBOL_INFOW*) : Win32cr::Foundation::BOOL

    fun SymAddSymbol(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PSTR, address : UInt64, size : UInt32, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymAddSymbolW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PWSTR, address : UInt64, size : UInt32, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymDeleteSymbol(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PSTR, address : UInt64, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymDeleteSymbolW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, name : Win32cr::Foundation::PWSTR, address : UInt64, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymRefreshModuleList(hProcess : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL

    fun SymAddSourceStream(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, stream_file : Win32cr::Foundation::PSTR, buffer : UInt8*, size : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun SymAddSourceStreamA(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, stream_file : Win32cr::Foundation::PSTR, buffer : UInt8*, size : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun SymAddSourceStreamW(hProcess : Win32cr::Foundation::HANDLE, base : UInt64, file_spec : Win32cr::Foundation::PWSTR, buffer : UInt8*, size : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun SymSrvIsStoreW(hProcess : Win32cr::Foundation::HANDLE, path : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun SymSrvIsStore(hProcess : Win32cr::Foundation::HANDLE, path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SymSrvDeltaName(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PSTR, type__ : Win32cr::Foundation::PSTR, file1 : Win32cr::Foundation::PSTR, file2 : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun SymSrvDeltaNameW(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PWSTR, type__ : Win32cr::Foundation::PWSTR, file1 : Win32cr::Foundation::PWSTR, file2 : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun SymSrvGetSupplement(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PSTR, node : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun SymSrvGetSupplementW(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PWSTR, node : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun SymSrvGetFileIndexes(file : Win32cr::Foundation::PSTR, id : LibC::GUID*, val1 : UInt32*, val2 : UInt32*, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvGetFileIndexesW(file : Win32cr::Foundation::PWSTR, id : LibC::GUID*, val1 : UInt32*, val2 : UInt32*, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvGetFileIndexStringW(hProcess : Win32cr::Foundation::HANDLE, srv_path : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR, index : UInt16*, size : LibC::UIntPtrT, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvGetFileIndexString(hProcess : Win32cr::Foundation::HANDLE, srv_path : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR, index : UInt8*, size : LibC::UIntPtrT, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvGetFileIndexInfo(file : Win32cr::Foundation::PSTR, info : Win32cr::System::Diagnostics::Debug::SYMSRV_INDEX_INFO*, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvGetFileIndexInfoW(file : Win32cr::Foundation::PWSTR, info : Win32cr::System::Diagnostics::Debug::SYMSRV_INDEX_INFOW*, flags : UInt32) : Win32cr::Foundation::BOOL

    fun SymSrvStoreSupplement(hProcess : Win32cr::Foundation::HANDLE, srv_path : Win32cr::Foundation::PSTR, node : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR, flags : UInt32) : Win32cr::Foundation::PSTR

    fun SymSrvStoreSupplementW(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PWSTR, node : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR, flags : UInt32) : Win32cr::Foundation::PWSTR

    fun SymSrvStoreFile(hProcess : Win32cr::Foundation::HANDLE, srv_path : Win32cr::Foundation::PSTR, file : Win32cr::Foundation::PSTR, flags : Win32cr::System::Diagnostics::Debug::SYM_SRV_STORE_FILE_FLAGS) : Win32cr::Foundation::PSTR

    fun SymSrvStoreFileW(hProcess : Win32cr::Foundation::HANDLE, srv_path : Win32cr::Foundation::PWSTR, file : Win32cr::Foundation::PWSTR, flags : Win32cr::System::Diagnostics::Debug::SYM_SRV_STORE_FILE_FLAGS) : Win32cr::Foundation::PWSTR

    fun SymGetSymbolFile(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PSTR, image_file : Win32cr::Foundation::PSTR, type__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SF_TYPE, symbol_file : UInt8*, cSymbolFile : LibC::UIntPtrT, dbg_file : UInt8*, cDbgFile : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun SymGetSymbolFileW(hProcess : Win32cr::Foundation::HANDLE, sym_path : Win32cr::Foundation::PWSTR, image_file : Win32cr::Foundation::PWSTR, type__ : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SF_TYPE, symbol_file : UInt16*, cSymbolFile : LibC::UIntPtrT, dbg_file : UInt16*, cDbgFile : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun DbgHelpCreateUserDump(file_name : Win32cr::Foundation::PSTR, callback : Win32cr::System::Diagnostics::Debug::PDBGHELP_CREATE_USER_DUMP_CALLBACK, user_data : Void*) : Win32cr::Foundation::BOOL

    fun DbgHelpCreateUserDumpW(file_name : Win32cr::Foundation::PWSTR, callback : Win32cr::System::Diagnostics::Debug::PDBGHELP_CREATE_USER_DUMP_CALLBACK, user_data : Void*) : Win32cr::Foundation::BOOL

    fun SymGetSymFromAddr64(hProcess : Win32cr::Foundation::HANDLE, qwAddr : UInt64, pdwDisplacement : UInt64*, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*) : Win32cr::Foundation::BOOL

    fun SymGetSymFromName64(hProcess : Win32cr::Foundation::HANDLE, name : Win32cr::Foundation::PSTR, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*) : Win32cr::Foundation::BOOL

    fun FindFileInPath(hprocess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, id : Void*, two : UInt32, three : UInt32, flags : UInt32, file_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun FindFileInSearchPath(hprocess : Win32cr::Foundation::HANDLE, search_path_a : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, one : UInt32, two : UInt32, three : UInt32, file_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SymEnumSym(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMERATESYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumerateSymbols64(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSYMBOLS_CALLBACK64, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymEnumerateSymbolsW64(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt64, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSYMBOLS_CALLBACK64W, user_context : Void*) : Win32cr::Foundation::BOOL

    fun SymLoadModule64(hProcess : Win32cr::Foundation::HANDLE, hFile : Win32cr::Foundation::HANDLE, image_name : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, base_of_dll : UInt64, size_of_dll : UInt32) : UInt64

    fun SymGetSymNext64(hProcess : Win32cr::Foundation::HANDLE, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*) : Win32cr::Foundation::BOOL

    fun SymGetSymPrev64(hProcess : Win32cr::Foundation::HANDLE, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL64*) : Win32cr::Foundation::BOOL

    fun SetCheckUserInterruptShared(lpStartAddress : Win32cr::System::Diagnostics::Debug::LPCALL_BACK_USER_INTERRUPT_ROUTINE) : Void

    fun GetSymLoadError : UInt32

    fun SetSymLoadError(error : UInt32) : Void

    fun ReportSymbolLoadSummary(hProcess : Win32cr::Foundation::HANDLE, pLoadModule : Win32cr::Foundation::PWSTR, pSymbolData : Win32cr::System::Diagnostics::Debug::DBGHELP_DATA_REPORT_STRUCT*) : Win32cr::Foundation::BOOL

    fun RemoveInvalidModuleList(hProcess : Win32cr::Foundation::HANDLE) : Void

    fun RangeMapCreate : Void*

    fun RangeMapFree(rmap_handle : Void*) : Void

    fun RangeMapAddPeImageSections(rmap_handle : Void*, image_name : Win32cr::Foundation::PWSTR, mapped_image : Void*, mapping_bytes : UInt32, image_base : UInt64, user_tag : UInt64, mapping_flags : UInt32) : Win32cr::Foundation::BOOL

    fun RangeMapRemove(rmap_handle : Void*, user_tag : UInt64) : Win32cr::Foundation::BOOL

    fun RangeMapRead(rmap_handle : Void*, offset : UInt64, buffer : Void*, request_bytes : UInt32, flags : UInt32, done_bytes : UInt32*) : Win32cr::Foundation::BOOL

    fun RangeMapWrite(rmap_handle : Void*, offset : UInt64, buffer : Void*, request_bytes : UInt32, flags : UInt32, done_bytes : UInt32*) : Win32cr::Foundation::BOOL

    fun MessageBeep(uType : UInt32) : Win32cr::Foundation::BOOL

    fun FatalExit(exit_code : Int32) : Void

    fun GetThreadSelectorEntry(hThread : Win32cr::Foundation::HANDLE, dwSelector : UInt32, lpSelectorEntry : Win32cr::System::Diagnostics::Debug::LDT_ENTRY*) : Win32cr::Foundation::BOOL

    fun Wow64GetThreadSelectorEntry(hThread : Win32cr::Foundation::HANDLE, dwSelector : UInt32, lpSelectorEntry : Win32cr::System::Diagnostics::Debug::WOW64_LDT_ENTRY*) : Win32cr::Foundation::BOOL

    fun DebugSetProcessKillOnExit(kill_on_exit : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun DebugBreakProcess(process : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun FormatMessageA(dwFlags : Win32cr::System::Diagnostics::Debug::FORMAT_MESSAGE_OPTIONS, lpSource : Void*, dwMessageId : UInt32, dwLanguageId : UInt32, lpBuffer : Win32cr::Foundation::PSTR, nSize : UInt32, arguments : Int8**) : UInt32

    # Commented out due to being part of LibC
    #fun FormatMessageW(dwFlags : Win32cr::System::Diagnostics::Debug::FORMAT_MESSAGE_OPTIONS, lpSource : Void*, dwMessageId : UInt32, dwLanguageId : UInt32, lpBuffer : Win32cr::Foundation::PWSTR, nSize : UInt32, arguments : Int8**) : UInt32

    fun CopyContext(destination : Win32cr::System::Diagnostics::Debug::CONTEXT*, context_flags : UInt32, source : Win32cr::System::Diagnostics::Debug::CONTEXT*) : Win32cr::Foundation::BOOL

    fun InitializeContext(buffer : Void*, context_flags : UInt32, context : Win32cr::System::Diagnostics::Debug::CONTEXT**, context_length : UInt32*) : Win32cr::Foundation::BOOL

    fun InitializeContext2(buffer : Void*, context_flags : UInt32, context : Win32cr::System::Diagnostics::Debug::CONTEXT**, context_length : UInt32*, x_state_compaction_mask : UInt64) : Win32cr::Foundation::BOOL

    {% if flag?(:i386) || flag?(:x86_64) %}
    fun GetEnabledXStateFeatures : UInt64
  {% end %}

    {% if flag?(:i386) || flag?(:x86_64) %}
    fun GetXStateFeaturesMask(context : Win32cr::System::Diagnostics::Debug::CONTEXT*, feature_mask : UInt64*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) || flag?(:x86_64) %}
    fun LocateXStateFeature(context : Win32cr::System::Diagnostics::Debug::CONTEXT*, feature_id : UInt32, length : UInt32*) : Void*
  {% end %}

    {% if flag?(:i386) || flag?(:x86_64) %}
    fun SetXStateFeaturesMask(context : Win32cr::System::Diagnostics::Debug::CONTEXT*, feature_mask : UInt64) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun CheckSumMappedFile(base_address : Void*, file_length : UInt32, header_sum : UInt32*, check_sum : UInt32*) : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*
  {% end %}

    {% if flag?(:i386) %}
    fun GetImageConfigInformation(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, image_config_information : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_DIRECTORY32*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SetImageConfigInformation(loaded_image : Win32cr::System::Diagnostics::Debug::LOADED_IMAGE*, image_config_information : Win32cr::System::Diagnostics::Debug::IMAGE_LOAD_CONFIG_DIRECTORY32*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun ImageNtHeader(base : Void*) : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*
  {% end %}

    {% if flag?(:i386) %}
    fun ImageRvaToSection(nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*, base : Void*, rva : UInt32) : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER*
  {% end %}

    {% if flag?(:i386) %}
    fun ImageRvaToVa(nt_headers : Win32cr::System::Diagnostics::Debug::IMAGE_NT_HEADERS32*, base : Void*, rva : UInt32, last_rva_section : Win32cr::System::Diagnostics::Debug::IMAGE_SECTION_HEADER**) : Void*
  {% end %}

    {% if flag?(:i386) %}
    fun StackWalk(machine_type : UInt32, hProcess : Win32cr::Foundation::HANDLE, hThread : Win32cr::Foundation::HANDLE, stack_frame : Win32cr::System::Diagnostics::Debug::STACKFRAME*, context_record : Void*, read_memory_routine : Win32cr::System::Diagnostics::Debug::PREAD_PROCESS_MEMORY_ROUTINE, function_table_access_routine : Win32cr::System::Diagnostics::Debug::PFUNCTION_TABLE_ACCESS_ROUTINE, get_module_base_routine : Win32cr::System::Diagnostics::Debug::PGET_MODULE_BASE_ROUTINE, translate_address : Win32cr::System::Diagnostics::Debug::PTRANSLATE_ADDRESS_ROUTINE) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymEnumerateModules(hProcess : Win32cr::Foundation::HANDLE, enum_modules_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMMODULES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun EnumerateLoadedModules(hProcess : Win32cr::Foundation::HANDLE, enum_loaded_modules_callback : Win32cr::System::Diagnostics::Debug::PENUMLOADED_MODULES_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymFunctionTableAccess(hProcess : Win32cr::Foundation::HANDLE, addr_base : UInt32) : Void*
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetModuleInfo(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt32, module_info : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULE*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetModuleInfoW(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt32, module_info : Win32cr::System::Diagnostics::Debug::IMAGEHLP_MODULEW*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetModuleBase(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt32) : UInt32
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetLineFromAddr(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt32, pdwDisplacement : UInt32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetLineFromName(hProcess : Win32cr::Foundation::HANDLE, module_name : Win32cr::Foundation::PSTR, file_name : Win32cr::Foundation::PSTR, dwLineNumber : UInt32, plDisplacement : Int32*, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetLineNext(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetLinePrev(hProcess : Win32cr::Foundation::HANDLE, line : Win32cr::System::Diagnostics::Debug::IMAGEHLP_LINE*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymUnloadModule(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt32) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymUnDName(sym : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*, un_dec_name : UInt8*, un_dec_name_length : UInt32) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymRegisterCallback(hProcess : Win32cr::Foundation::HANDLE, callback_function : Win32cr::System::Diagnostics::Debug::PSYMBOL_REGISTERED_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymRegisterFunctionEntryCallback(hProcess : Win32cr::Foundation::HANDLE, callback_function : Win32cr::System::Diagnostics::Debug::PSYMBOL_FUNCENTRY_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetSymFromAddr(hProcess : Win32cr::Foundation::HANDLE, dwAddr : UInt32, pdwDisplacement : UInt32*, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetSymFromName(hProcess : Win32cr::Foundation::HANDLE, name : Win32cr::Foundation::PSTR, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymEnumerateSymbols(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt32, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSYMBOLS_CALLBACK, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymEnumerateSymbolsW(hProcess : Win32cr::Foundation::HANDLE, base_of_dll : UInt32, enum_symbols_callback : Win32cr::System::Diagnostics::Debug::PSYM_ENUMSYMBOLS_CALLBACKW, user_context : Void*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymLoadModule(hProcess : Win32cr::Foundation::HANDLE, hFile : Win32cr::Foundation::HANDLE, image_name : Win32cr::Foundation::PSTR, module_name : Win32cr::Foundation::PSTR, base_of_dll : UInt32, size_of_dll : UInt32) : UInt32
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetSymNext(hProcess : Win32cr::Foundation::HANDLE, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*) : Win32cr::Foundation::BOOL
  {% end %}

    {% if flag?(:i386) %}
    fun SymGetSymPrev(hProcess : Win32cr::Foundation::HANDLE, symbol : Win32cr::System::Diagnostics::Debug::IMAGEHLP_SYMBOL*) : Win32cr::Foundation::BOOL
  {% end %}

  end
end