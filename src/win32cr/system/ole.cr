require "./com.cr"
require "./../foundation.cr"
require "./../ui/windows_and_messaging.cr"
require "./../graphics/gdi.cr"
require "./com/structured_storage.cr"
require "./../media.cr"
require "./../ui/controls/dialogs.cr"
require "./../ui/controls.cr"

module Win32cr::System::Ole
  extend self
  alias LPFNOLEUIHOOK = Proc(Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, UInt32)

  CTL_E_ILLEGALFUNCTIONCALL = -2146828283_i32
  CONNECT_E_FIRST = -2147220992_i32
  SELFREG_E_FIRST = -2147220992_i32
  PERPROP_E_FIRST = -2147220992_i32
  OLECMDERR_E_FIRST = -2147221248_i32
  OLECMDERR_E_DISABLED = -2147221247_i32
  OLECMDERR_E_NOHELP = -2147221246_i32
  OLECMDERR_E_CANCELED = -2147221245_i32
  OLECMDERR_E_UNKNOWNGROUP = -2147221244_i32
  CONNECT_E_NOCONNECTION = -2147220992_i32
  CONNECT_E_ADVISELIMIT = -2147220991_i32
  CONNECT_E_CANNOTCONNECT = -2147220990_i32
  CONNECT_E_OVERRIDDEN = -2147220989_i32
  SELFREG_E_TYPELIB = -2147220992_i32
  SELFREG_E_CLASS = -2147220991_i32
  PERPROP_E_NOPAGEAVAILABLE = -2147220992_i32
  CLSID_CFontPropPage = "0be35200-8f91-11ce-9de3-00aa004bb851"
  CLSID_CColorPropPage = "0be35201-8f91-11ce-9de3-00aa004bb851"
  CLSID_CPicturePropPage = "0be35202-8f91-11ce-9de3-00aa004bb851"
  CLSID_PersistPropset = "fb8f0821-0164-101b-84ed-08002b2ec713"
  CLSID_ConvertVBX = "fb8f0822-0164-101b-84ed-08002b2ec713"
  CLSID_StdFont = "0be35203-8f91-11ce-9de3-00aa004bb851"
  CLSID_StdPicture = "0be35204-8f91-11ce-9de3-00aa004bb851"
  GUID_HIMETRIC = "66504300-be0f-101a-8bbb-00aa00300cab"
  GUID_COLOR = "66504301-be0f-101a-8bbb-00aa00300cab"
  GUID_XPOSPIXEL = "66504302-be0f-101a-8bbb-00aa00300cab"
  GUID_YPOSPIXEL = "66504303-be0f-101a-8bbb-00aa00300cab"
  GUID_XSIZEPIXEL = "66504304-be0f-101a-8bbb-00aa00300cab"
  GUID_YSIZEPIXEL = "66504305-be0f-101a-8bbb-00aa00300cab"
  GUID_XPOS = "66504306-be0f-101a-8bbb-00aa00300cab"
  GUID_YPOS = "66504307-be0f-101a-8bbb-00aa00300cab"
  GUID_XSIZE = "66504308-be0f-101a-8bbb-00aa00300cab"
  GUID_YSIZE = "66504309-be0f-101a-8bbb-00aa00300cab"
  GUID_TRISTATE = "6650430a-be0f-101a-8bbb-00aa00300cab"
  GUID_OPTIONVALUEEXCLUSIVE = "6650430b-be0f-101a-8bbb-00aa00300cab"
  GUID_CHECKVALUEEXCLUSIVE = "6650430c-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTNAME = "6650430d-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTSIZE = "6650430e-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTBOLD = "6650430f-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTITALIC = "66504310-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTUNDERSCORE = "66504311-be0f-101a-8bbb-00aa00300cab"
  GUID_FONTSTRIKETHROUGH = "66504312-be0f-101a-8bbb-00aa00300cab"
  GUID_HANDLE = "66504313-be0f-101a-8bbb-00aa00300cab"
  PICTYPE_UNINITIALIZED = -1_i32
  PICTYPE_NONE = 0_u32
  PICTYPE_BITMAP = 1_u32
  PICTYPE_METAFILE = 2_u32
  PICTYPE_ICON = 3_u32
  PICTYPE_ENHMETAFILE = 4_u32
  CONNECT_E_LAST = -2147220977_i32
  CONNECT_S_FIRST = 262656_i32
  CONNECT_S_LAST = 262671_i32
  SELFREG_E_LAST = -2147220977_i32
  SELFREG_S_FIRST = 262656_i32
  SELFREG_S_LAST = 262671_i32
  PERPROP_E_LAST = -2147220977_i32
  PERPROP_S_FIRST = 262656_i32
  PERPROP_S_LAST = 262671_i32
  OLEIVERB_PROPERTIES = -7_i32
  VT_STREAMED_PROPSET = 73_u32
  VT_STORED_PROPSET = 74_u32
  VT_BLOB_PROPSET = 75_u32
  VT_VERBOSE_ENUM = 76_u32
  OCM__BASE = 8192_u32
  LP_DEFAULT = 0_u32
  LP_MONOCHROME = 1_u32
  LP_VGACOLOR = 2_u32
  LP_COLOR = 4_u32
  DISPID_AUTOSIZE = -500_i32
  DISPID_BACKCOLOR = -501_i32
  DISPID_BACKSTYLE = -502_i32
  DISPID_BORDERCOLOR = -503_i32
  DISPID_BORDERSTYLE = -504_i32
  DISPID_BORDERWIDTH = -505_i32
  DISPID_DRAWMODE = -507_i32
  DISPID_DRAWSTYLE = -508_i32
  DISPID_DRAWWIDTH = -509_i32
  DISPID_FILLCOLOR = -510_i32
  DISPID_FILLSTYLE = -511_i32
  DISPID_FONT = -512_i32
  DISPID_FORECOLOR = -513_i32
  DISPID_ENABLED = -514_i32
  DISPID_HWND = -515_i32
  DISPID_TABSTOP = -516_i32
  DISPID_TEXT = -517_i32
  DISPID_CAPTION = -518_i32
  DISPID_BORDERVISIBLE = -519_i32
  DISPID_APPEARANCE = -520_i32
  DISPID_MOUSEPOINTER = -521_i32
  DISPID_MOUSEICON = -522_i32
  DISPID_PICTURE = -523_i32
  DISPID_VALID = -524_i32
  DISPID_READYSTATE = -525_i32
  DISPID_LISTINDEX = -526_i32
  DISPID_SELECTED = -527_i32
  DISPID_LIST = -528_i32
  DISPID_COLUMN = -529_i32
  DISPID_LISTCOUNT = -531_i32
  DISPID_MULTISELECT = -532_i32
  DISPID_MAXLENGTH = -533_i32
  DISPID_PASSWORDCHAR = -534_i32
  DISPID_SCROLLBARS = -535_i32
  DISPID_WORDWRAP = -536_i32
  DISPID_MULTILINE = -537_i32
  DISPID_NUMBEROFROWS = -538_i32
  DISPID_NUMBEROFCOLUMNS = -539_i32
  DISPID_DISPLAYSTYLE = -540_i32
  DISPID_GROUPNAME = -541_i32
  DISPID_IMEMODE = -542_i32
  DISPID_ACCELERATOR = -543_i32
  DISPID_ENTERKEYBEHAVIOR = -544_i32
  DISPID_TABKEYBEHAVIOR = -545_i32
  DISPID_SELTEXT = -546_i32
  DISPID_SELSTART = -547_i32
  DISPID_SELLENGTH = -548_i32
  DISPID_REFRESH = -550_i32
  DISPID_DOCLICK = -551_i32
  DISPID_ABOUTBOX = -552_i32
  DISPID_ADDITEM = -553_i32
  DISPID_CLEAR = -554_i32
  DISPID_REMOVEITEM = -555_i32
  DISPID_CLICK = -600_i32
  DISPID_DBLCLICK = -601_i32
  DISPID_KEYDOWN = -602_i32
  DISPID_KEYPRESS = -603_i32
  DISPID_KEYUP = -604_i32
  DISPID_MOUSEDOWN = -605_i32
  DISPID_MOUSEMOVE = -606_i32
  DISPID_MOUSEUP = -607_i32
  DISPID_ERROREVENT = -608_i32
  DISPID_READYSTATECHANGE = -609_i32
  DISPID_CLICK_VALUE = -610_i32
  DISPID_RIGHTTOLEFT = -611_i32
  DISPID_TOPTOBOTTOM = -612_i32
  DISPID_THIS = -613_i32
  DISPID_AMBIENT_BACKCOLOR = -701_i32
  DISPID_AMBIENT_DISPLAYNAME = -702_i32
  DISPID_AMBIENT_FONT = -703_i32
  DISPID_AMBIENT_FORECOLOR = -704_i32
  DISPID_AMBIENT_LOCALEID = -705_i32
  DISPID_AMBIENT_MESSAGEREFLECT = -706_i32
  DISPID_AMBIENT_SCALEUNITS = -707_i32
  DISPID_AMBIENT_TEXTALIGN = -708_i32
  DISPID_AMBIENT_USERMODE = -709_i32
  DISPID_AMBIENT_UIDEAD = -710_i32
  DISPID_AMBIENT_SHOWGRABHANDLES = -711_i32
  DISPID_AMBIENT_SHOWHATCHING = -712_i32
  DISPID_AMBIENT_DISPLAYASDEFAULT = -713_i32
  DISPID_AMBIENT_SUPPORTSMNEMONICS = -714_i32
  DISPID_AMBIENT_AUTOCLIP = -715_i32
  DISPID_AMBIENT_APPEARANCE = -716_i32
  DISPID_AMBIENT_CODEPAGE = -725_i32
  DISPID_AMBIENT_PALETTE = -726_i32
  DISPID_AMBIENT_CHARSET = -727_i32
  DISPID_AMBIENT_TRANSFERPRIORITY = -728_i32
  DISPID_AMBIENT_RIGHTTOLEFT = -732_i32
  DISPID_AMBIENT_TOPTOBOTTOM = -733_i32
  DISPID_Name = -800_i32
  DISPID_Delete = -801_i32
  DISPID_Object = -802_i32
  DISPID_Parent = -803_i32
  DISPID_FONT_NAME = 0_u32
  DISPID_FONT_SIZE = 2_u32
  DISPID_FONT_BOLD = 3_u32
  DISPID_FONT_ITALIC = 4_u32
  DISPID_FONT_UNDER = 5_u32
  DISPID_FONT_STRIKE = 6_u32
  DISPID_FONT_WEIGHT = 7_u32
  DISPID_FONT_CHARSET = 8_u32
  DISPID_FONT_CHANGED = 9_u32
  DISPID_PICT_HANDLE = 0_u32
  DISPID_PICT_HPAL = 2_u32
  DISPID_PICT_TYPE = 3_u32
  DISPID_PICT_WIDTH = 4_u32
  DISPID_PICT_HEIGHT = 5_u32
  DISPID_PICT_RENDER = 6_u32
  STDOLE_TLB = "stdole2.tlb"
  STDTYPE_TLB = "stdole2.tlb"
  GC_WCH_SIBLING = 1_i32
  TIFLAGS_EXTENDDISPATCHONLY = 1_u32
  OLECMDERR_E_NOTSUPPORTED = -2147221248_i32
  MSOCMDERR_E_FIRST = -2147221248_i32
  MSOCMDERR_E_NOTSUPPORTED = -2147221248_i32
  MSOCMDERR_E_DISABLED = -2147221247_i32
  MSOCMDERR_E_NOHELP = -2147221246_i32
  MSOCMDERR_E_CANCELED = -2147221245_i32
  MSOCMDERR_E_UNKNOWNGROUP = -2147221244_i32
  OLECMD_TASKDLGID_ONBEFOREUNLOAD = 1_u32
  OLECMDARGINDEX_SHOWPAGEACTIONMENU_HWND = 0_u32
  OLECMDARGINDEX_SHOWPAGEACTIONMENU_X = 1_u32
  OLECMDARGINDEX_SHOWPAGEACTIONMENU_Y = 2_u32
  OLECMDARGINDEX_ACTIVEXINSTALL_PUBLISHER = 0_u32
  OLECMDARGINDEX_ACTIVEXINSTALL_DISPLAYNAME = 1_u32
  OLECMDARGINDEX_ACTIVEXINSTALL_CLSID = 2_u32
  OLECMDARGINDEX_ACTIVEXINSTALL_INSTALLSCOPE = 3_u32
  OLECMDARGINDEX_ACTIVEXINSTALL_SOURCEURL = 4_u32
  INSTALL_SCOPE_INVALID = 0_u32
  INSTALL_SCOPE_MACHINE = 1_u32
  INSTALL_SCOPE_USER = 2_u32
  MK_ALT = 32_u32
  DD_DEFSCROLLINSET = 11_u32
  DD_DEFSCROLLDELAY = 50_u32
  DD_DEFSCROLLINTERVAL = 50_u32
  DD_DEFDRAGDELAY = 200_u32
  DD_DEFDRAGMINDIST = 2_u32
  OT_LINK = 1_i32
  OT_EMBEDDED = 2_i32
  OT_STATIC = 3_i32
  OLEVERB_PRIMARY = 0_u32
  OF_SET = 1_u32
  OF_GET = 2_u32
  OF_HANDLER = 4_u32
  WIN32 = 100_u32
  OLEIVERB_PRIMARY = 0_i32
  OLEIVERB_SHOW = -1_i32
  OLEIVERB_OPEN = -2_i32
  OLEIVERB_HIDE = -3_i32
  OLEIVERB_UIACTIVATE = -4_i32
  OLEIVERB_INPLACEACTIVATE = -5_i32
  OLEIVERB_DISCARDUNDOSTATE = -6_i32
  EMBDHLP_INPROC_HANDLER = 0_i32
  EMBDHLP_INPROC_SERVER = 1_i32
  EMBDHLP_CREATENOW = 0_i32
  EMBDHLP_DELAYCREATE = 65536_i32
  OLECREATE_LEAVERUNNING = 1_u32
  IDC_OLEUIHELP = 99_u32
  IDC_IO_CREATENEW = 2100_u32
  IDC_IO_CREATEFROMFILE = 2101_u32
  IDC_IO_LINKFILE = 2102_u32
  IDC_IO_OBJECTTYPELIST = 2103_u32
  IDC_IO_DISPLAYASICON = 2104_u32
  IDC_IO_CHANGEICON = 2105_u32
  IDC_IO_FILE = 2106_u32
  IDC_IO_FILEDISPLAY = 2107_u32
  IDC_IO_RESULTIMAGE = 2108_u32
  IDC_IO_RESULTTEXT = 2109_u32
  IDC_IO_ICONDISPLAY = 2110_u32
  IDC_IO_OBJECTTYPETEXT = 2111_u32
  IDC_IO_FILETEXT = 2112_u32
  IDC_IO_FILETYPE = 2113_u32
  IDC_IO_INSERTCONTROL = 2114_u32
  IDC_IO_ADDCONTROL = 2115_u32
  IDC_IO_CONTROLTYPELIST = 2116_u32
  IDC_PS_PASTE = 500_u32
  IDC_PS_PASTELINK = 501_u32
  IDC_PS_SOURCETEXT = 502_u32
  IDC_PS_PASTELIST = 503_u32
  IDC_PS_PASTELINKLIST = 504_u32
  IDC_PS_DISPLAYLIST = 505_u32
  IDC_PS_DISPLAYASICON = 506_u32
  IDC_PS_ICONDISPLAY = 507_u32
  IDC_PS_CHANGEICON = 508_u32
  IDC_PS_RESULTIMAGE = 509_u32
  IDC_PS_RESULTTEXT = 510_u32
  IDC_CI_GROUP = 120_u32
  IDC_CI_CURRENT = 121_u32
  IDC_CI_CURRENTICON = 122_u32
  IDC_CI_DEFAULT = 123_u32
  IDC_CI_DEFAULTICON = 124_u32
  IDC_CI_FROMFILE = 125_u32
  IDC_CI_FROMFILEEDIT = 126_u32
  IDC_CI_ICONLIST = 127_u32
  IDC_CI_LABEL = 128_u32
  IDC_CI_LABELEDIT = 129_u32
  IDC_CI_BROWSE = 130_u32
  IDC_CI_ICONDISPLAY = 131_u32
  IDC_CV_OBJECTTYPE = 150_u32
  IDC_CV_DISPLAYASICON = 152_u32
  IDC_CV_CHANGEICON = 153_u32
  IDC_CV_ACTIVATELIST = 154_u32
  IDC_CV_CONVERTTO = 155_u32
  IDC_CV_ACTIVATEAS = 156_u32
  IDC_CV_RESULTTEXT = 157_u32
  IDC_CV_CONVERTLIST = 158_u32
  IDC_CV_ICONDISPLAY = 165_u32
  IDC_EL_CHANGESOURCE = 201_u32
  IDC_EL_AUTOMATIC = 202_u32
  IDC_EL_CANCELLINK = 209_u32
  IDC_EL_UPDATENOW = 210_u32
  IDC_EL_OPENSOURCE = 211_u32
  IDC_EL_MANUAL = 212_u32
  IDC_EL_LINKSOURCE = 216_u32
  IDC_EL_LINKTYPE = 217_u32
  IDC_EL_LINKSLISTBOX = 206_u32
  IDC_EL_COL1 = 220_u32
  IDC_EL_COL2 = 221_u32
  IDC_EL_COL3 = 222_u32
  IDC_BZ_RETRY = 600_u32
  IDC_BZ_ICON = 601_u32
  IDC_BZ_MESSAGE1 = 602_u32
  IDC_BZ_SWITCHTO = 604_u32
  IDC_UL_METER = 1029_u32
  IDC_UL_STOP = 1030_u32
  IDC_UL_PERCENT = 1031_u32
  IDC_UL_PROGRESS = 1032_u32
  IDC_PU_LINKS = 900_u32
  IDC_PU_TEXT = 901_u32
  IDC_PU_CONVERT = 902_u32
  IDC_PU_ICON = 908_u32
  IDC_GP_OBJECTNAME = 1009_u32
  IDC_GP_OBJECTTYPE = 1010_u32
  IDC_GP_OBJECTSIZE = 1011_u32
  IDC_GP_CONVERT = 1013_u32
  IDC_GP_OBJECTICON = 1014_u32
  IDC_GP_OBJECTLOCATION = 1022_u32
  IDC_VP_PERCENT = 1000_u32
  IDC_VP_CHANGEICON = 1001_u32
  IDC_VP_EDITABLE = 1002_u32
  IDC_VP_ASICON = 1003_u32
  IDC_VP_RELATIVE = 1005_u32
  IDC_VP_SPIN = 1006_u32
  IDC_VP_SCALETXT = 1034_u32
  IDC_VP_ICONDISPLAY = 1021_u32
  IDC_VP_RESULTIMAGE = 1033_u32
  IDC_LP_OPENSOURCE = 1006_u32
  IDC_LP_UPDATENOW = 1007_u32
  IDC_LP_BREAKLINK = 1008_u32
  IDC_LP_LINKSOURCE = 1012_u32
  IDC_LP_CHANGESOURCE = 1015_u32
  IDC_LP_AUTOMATIC = 1016_u32
  IDC_LP_MANUAL = 1017_u32
  IDC_LP_DATE = 1018_u32
  IDC_LP_TIME = 1019_u32
  IDD_INSERTOBJECT = 1000_u32
  IDD_CHANGEICON = 1001_u32
  IDD_CONVERT = 1002_u32
  IDD_PASTESPECIAL = 1003_u32
  IDD_EDITLINKS = 1004_u32
  IDD_BUSY = 1006_u32
  IDD_UPDATELINKS = 1007_u32
  IDD_CHANGESOURCE = 1009_u32
  IDD_INSERTFILEBROWSE = 1010_u32
  IDD_CHANGEICONBROWSE = 1011_u32
  IDD_CONVERTONLY = 1012_u32
  IDD_CHANGESOURCE4 = 1013_u32
  IDD_GNRLPROPS = 1100_u32
  IDD_VIEWPROPS = 1101_u32
  IDD_LINKPROPS = 1102_u32
  IDD_CONVERT4 = 1103_u32
  IDD_CONVERTONLY4 = 1104_u32
  IDD_EDITLINKS4 = 1105_u32
  IDD_GNRLPROPS4 = 1106_u32
  IDD_LINKPROPS4 = 1107_u32
  IDD_PASTESPECIAL4 = 1108_u32
  IDD_CANNOTUPDATELINK = 1008_u32
  IDD_LINKSOURCEUNAVAILABLE = 1020_u32
  IDD_SERVERNOTFOUND = 1023_u32
  IDD_OUTOFMEMORY = 1024_u32
  IDD_SERVERNOTREGW = 1021_u32
  IDD_LINKTYPECHANGEDW = 1022_u32
  IDD_SERVERNOTREGA = 1025_u32
  IDD_LINKTYPECHANGEDA = 1026_u32
  IDD_SERVERNOTREG = 1021_u32
  IDD_LINKTYPECHANGED = 1022_u32
  OLESTDDELIM = "\\"
  SZOLEUI_MSG_HELP = "OLEUI_MSG_HELP"
  SZOLEUI_MSG_ENDDIALOG = "OLEUI_MSG_ENDDIALOG"
  SZOLEUI_MSG_BROWSE = "OLEUI_MSG_BROWSE"
  SZOLEUI_MSG_CHANGEICON = "OLEUI_MSG_CHANGEICON"
  SZOLEUI_MSG_CLOSEBUSYDIALOG = "OLEUI_MSG_CLOSEBUSYDIALOG"
  SZOLEUI_MSG_CONVERT = "OLEUI_MSG_CONVERT"
  SZOLEUI_MSG_CHANGESOURCE = "OLEUI_MSG_CHANGESOURCE"
  SZOLEUI_MSG_ADDCONTROL = "OLEUI_MSG_ADDCONTROL"
  SZOLEUI_MSG_BROWSE_OFN = "OLEUI_MSG_BROWSE_OFN"
  ID_BROWSE_CHANGEICON = 1_u32
  ID_BROWSE_INSERTFILE = 2_u32
  ID_BROWSE_ADDCONTROL = 3_u32
  ID_BROWSE_CHANGESOURCE = 4_u32
  OLEUI_FALSE = 0_u32
  OLEUI_SUCCESS = 1_u32
  OLEUI_OK = 1_u32
  OLEUI_CANCEL = 2_u32
  OLEUI_ERR_STANDARDMIN = 100_u32
  OLEUI_ERR_OLEMEMALLOC = 100_u32
  OLEUI_ERR_STRUCTURENULL = 101_u32
  OLEUI_ERR_STRUCTUREINVALID = 102_u32
  OLEUI_ERR_CBSTRUCTINCORRECT = 103_u32
  OLEUI_ERR_HWNDOWNERINVALID = 104_u32
  OLEUI_ERR_LPSZCAPTIONINVALID = 105_u32
  OLEUI_ERR_LPFNHOOKINVALID = 106_u32
  OLEUI_ERR_HINSTANCEINVALID = 107_u32
  OLEUI_ERR_LPSZTEMPLATEINVALID = 108_u32
  OLEUI_ERR_HRESOURCEINVALID = 109_u32
  OLEUI_ERR_FINDTEMPLATEFAILURE = 110_u32
  OLEUI_ERR_LOADTEMPLATEFAILURE = 111_u32
  OLEUI_ERR_DIALOGFAILURE = 112_u32
  OLEUI_ERR_LOCALMEMALLOC = 113_u32
  OLEUI_ERR_GLOBALMEMALLOC = 114_u32
  OLEUI_ERR_LOADSTRING = 115_u32
  OLEUI_ERR_STANDARDMAX = 116_u32
  IOF_SHOWHELP = 1_i32
  IOF_SELECTCREATENEW = 2_i32
  IOF_SELECTCREATEFROMFILE = 4_i32
  IOF_CHECKLINK = 8_i32
  IOF_CHECKDISPLAYASICON = 16_i32
  IOF_CREATENEWOBJECT = 32_i32
  IOF_CREATEFILEOBJECT = 64_i32
  IOF_CREATELINKOBJECT = 128_i32
  IOF_DISABLELINK = 256_i32
  IOF_VERIFYSERVERSEXIST = 512_i32
  IOF_DISABLEDISPLAYASICON = 1024_i32
  IOF_HIDECHANGEICON = 2048_i32
  IOF_SHOWINSERTCONTROL = 4096_i32
  IOF_SELECTCREATECONTROL = 8192_i32
  OLEUI_IOERR_LPSZFILEINVALID = 116_u32
  OLEUI_IOERR_LPSZLABELINVALID = 117_u32
  OLEUI_IOERR_HICONINVALID = 118_u32
  OLEUI_IOERR_LPFORMATETCINVALID = 119_u32
  OLEUI_IOERR_PPVOBJINVALID = 120_u32
  OLEUI_IOERR_LPIOLECLIENTSITEINVALID = 121_u32
  OLEUI_IOERR_LPISTORAGEINVALID = 122_u32
  OLEUI_IOERR_SCODEHASERROR = 123_u32
  OLEUI_IOERR_LPCLSIDEXCLUDEINVALID = 124_u32
  OLEUI_IOERR_CCHFILEINVALID = 125_u32
  PS_MAXLINKTYPES = 8_u32
  PSF_SHOWHELP = 1_i32
  PSF_SELECTPASTE = 2_i32
  PSF_SELECTPASTELINK = 4_i32
  PSF_CHECKDISPLAYASICON = 8_i32
  PSF_DISABLEDISPLAYASICON = 16_i32
  PSF_HIDECHANGEICON = 32_i32
  PSF_STAYONCLIPBOARDCHANGE = 64_i32
  PSF_NOREFRESHDATAOBJECT = 128_i32
  OLEUI_IOERR_SRCDATAOBJECTINVALID = 116_u32
  OLEUI_IOERR_ARRPASTEENTRIESINVALID = 117_u32
  OLEUI_IOERR_ARRLINKTYPESINVALID = 118_u32
  OLEUI_PSERR_CLIPBOARDCHANGED = 119_u32
  OLEUI_PSERR_GETCLIPBOARDFAILED = 120_u32
  OLEUI_ELERR_LINKCNTRNULL = 116_u32
  OLEUI_ELERR_LINKCNTRINVALID = 117_u32
  ELF_SHOWHELP = 1_i32
  ELF_DISABLEUPDATENOW = 2_i32
  ELF_DISABLEOPENSOURCE = 4_i32
  ELF_DISABLECHANGESOURCE = 8_i32
  ELF_DISABLECANCELLINK = 16_i32
  CIF_SHOWHELP = 1_i32
  CIF_SELECTCURRENT = 2_i32
  CIF_SELECTDEFAULT = 4_i32
  CIF_SELECTFROMFILE = 8_i32
  CIF_USEICONEXE = 16_i32
  OLEUI_CIERR_MUSTHAVECLSID = 116_u32
  OLEUI_CIERR_MUSTHAVECURRENTMETAFILE = 117_u32
  OLEUI_CIERR_SZICONEXEINVALID = 118_u32
  PROP_HWND_CHGICONDLG = "HWND_CIDLG"
  CF_SHOWHELPBUTTON = 1_i32
  CF_SETCONVERTDEFAULT = 2_i32
  CF_SETACTIVATEDEFAULT = 4_i32
  CF_SELECTCONVERTTO = 8_i32
  CF_SELECTACTIVATEAS = 16_i32
  CF_DISABLEDISPLAYASICON = 32_i32
  CF_DISABLEACTIVATEAS = 64_i32
  CF_HIDECHANGEICON = 128_i32
  CF_CONVERTONLY = 256_i32
  OLEUI_CTERR_CLASSIDINVALID = 117_u32
  OLEUI_CTERR_DVASPECTINVALID = 118_u32
  OLEUI_CTERR_CBFORMATINVALID = 119_u32
  OLEUI_CTERR_HMETAPICTINVALID = 120_u32
  OLEUI_CTERR_STRINGINVALID = 121_u32
  BZ_DISABLECANCELBUTTON = 1_i32
  BZ_DISABLESWITCHTOBUTTON = 2_i32
  BZ_DISABLERETRYBUTTON = 4_i32
  BZ_NOTRESPONDINGDIALOG = 8_i32
  OLEUI_BZERR_HTASKINVALID = 116_u32
  OLEUI_BZ_SWITCHTOSELECTED = 117_u32
  OLEUI_BZ_RETRYSELECTED = 118_u32
  OLEUI_BZ_CALLUNBLOCKED = 119_u32
  CSF_SHOWHELP = 1_i32
  CSF_VALIDSOURCE = 2_i32
  CSF_ONLYGETSOURCE = 4_i32
  CSF_EXPLORER = 8_i32
  OLEUI_CSERR_LINKCNTRNULL = 116_u32
  OLEUI_CSERR_LINKCNTRINVALID = 117_u32
  OLEUI_CSERR_FROMNOTNULL = 118_u32
  OLEUI_CSERR_TONOTNULL = 119_u32
  OLEUI_CSERR_SOURCENULL = 120_u32
  OLEUI_CSERR_SOURCEINVALID = 121_u32
  OLEUI_CSERR_SOURCEPARSERROR = 122_u32
  OLEUI_CSERR_SOURCEPARSEERROR = 122_u32
  VPF_SELECTRELATIVE = 1_i32
  VPF_DISABLERELATIVE = 2_i32
  VPF_DISABLESCALE = 4_i32
  OPF_OBJECTISLINK = 1_i32
  OPF_NOFILLDEFAULT = 2_i32
  OPF_SHOWHELP = 4_i32
  OPF_DISABLECONVERT = 8_i32
  OLEUI_OPERR_SUBPROPNULL = 116_u32
  OLEUI_OPERR_SUBPROPINVALID = 117_u32
  OLEUI_OPERR_PROPSHEETNULL = 118_u32
  OLEUI_OPERR_PROPSHEETINVALID = 119_u32
  OLEUI_OPERR_SUPPROP = 120_u32
  OLEUI_OPERR_PROPSINVALID = 121_u32
  OLEUI_OPERR_PAGESINCORRECT = 122_u32
  OLEUI_OPERR_INVALIDPAGES = 123_u32
  OLEUI_OPERR_NOTSUPPORTED = 124_u32
  OLEUI_OPERR_DLGPROCNOTNULL = 125_u32
  OLEUI_OPERR_LPARAMNOTZERO = 126_u32
  OLEUI_GPERR_STRINGINVALID = 127_u32
  OLEUI_GPERR_CLASSIDINVALID = 128_u32
  OLEUI_GPERR_LPCLSIDEXCLUDEINVALID = 129_u32
  OLEUI_GPERR_CBFORMATINVALID = 130_u32
  OLEUI_VPERR_METAPICTINVALID = 131_u32
  OLEUI_VPERR_DVASPECTINVALID = 132_u32
  OLEUI_LPERR_LINKCNTRNULL = 133_u32
  OLEUI_LPERR_LINKCNTRINVALID = 134_u32
  OLEUI_OPERR_PROPERTYSHEET = 135_u32
  OLEUI_OPERR_OBJINFOINVALID = 136_u32
  OLEUI_OPERR_LINKINFOINVALID = 137_u32
  OLEUI_QUERY_GETCLASSID = 65280_u32
  OLEUI_QUERY_LINKBROKEN = 65281_u32
  FADF_AUTO = 1_u32
  FADF_STATIC = 2_u32
  FADF_EMBEDDED = 4_u32
  FADF_FIXEDSIZE = 16_u32
  FADF_RECORD = 32_u32
  FADF_HAVEIID = 64_u32
  FADF_HAVEVARTYPE = 128_u32
  FADF_BSTR = 256_u32
  FADF_UNKNOWN = 512_u32
  FADF_DISPATCH = 1024_u32
  FADF_VARIANT = 2048_u32
  FADF_RESERVED = 61448_u32
  PARAMFLAG_NONE = 0_u32
  PARAMFLAG_FIN = 1_u32
  PARAMFLAG_FOUT = 2_u32
  PARAMFLAG_FLCID = 4_u32
  PARAMFLAG_FRETVAL = 8_u32
  PARAMFLAG_FOPT = 16_u32
  PARAMFLAG_FHASDEFAULT = 32_u32
  PARAMFLAG_FHASCUSTDATA = 64_u32
  IDLFLAG_NONE = 0_u32
  IDLFLAG_FIN = 1_u32
  IDLFLAG_FOUT = 2_u32
  IDLFLAG_FLCID = 4_u32
  IDLFLAG_FRETVAL = 8_u32
  IMPLTYPEFLAG_FDEFAULT = 1_u32
  IMPLTYPEFLAG_FSOURCE = 2_u32
  IMPLTYPEFLAG_FRESTRICTED = 4_u32
  IMPLTYPEFLAG_FDEFAULTVTABLE = 8_u32
  DISPID_UNKNOWN = -1_i32
  DISPID_VALUE = 0_u32
  DISPID_PROPERTYPUT = -3_i32
  DISPID_NEWENUM = -4_i32
  DISPID_EVALUATE = -5_i32
  DISPID_CONSTRUCTOR = -6_i32
  DISPID_DESTRUCTOR = -7_i32
  DISPID_COLLECT = -8_i32
  STDOLE_MAJORVERNUM = 1_u32
  STDOLE_MINORVERNUM = 0_u32
  STDOLE_LCID = 0_u32
  STDOLE2_MAJORVERNUM = 2_u32
  STDOLE2_MINORVERNUM = 0_u32
  STDOLE2_LCID = 0_u32
  VARIANT_NOVALUEPROP = 1_u32
  VARIANT_ALPHABOOL = 2_u32
  VARIANT_NOUSEROVERRIDE = 4_u32
  VARIANT_CALENDAR_HIJRI = 8_u32
  VARIANT_LOCALBOOL = 16_u32
  VARIANT_CALENDAR_THAI = 32_u32
  VARIANT_CALENDAR_GREGORIAN = 64_u32
  VARIANT_USE_NLS = 128_u32
  LOCALE_USE_NLS = 268435456_u32
  VTDATEGRE_MAX = 2958465_u32
  VTDATEGRE_MIN = -657434_i32
  NUMPRS_LEADING_WHITE = 1_u32
  NUMPRS_TRAILING_WHITE = 2_u32
  NUMPRS_LEADING_PLUS = 4_u32
  NUMPRS_TRAILING_PLUS = 8_u32
  NUMPRS_LEADING_MINUS = 16_u32
  NUMPRS_TRAILING_MINUS = 32_u32
  NUMPRS_HEX_OCT = 64_u32
  NUMPRS_PARENS = 128_u32
  NUMPRS_DECIMAL = 256_u32
  NUMPRS_THOUSANDS = 512_u32
  NUMPRS_CURRENCY = 1024_u32
  NUMPRS_EXPONENT = 2048_u32
  NUMPRS_USE_ALL = 4096_u32
  NUMPRS_STD = 8191_u32
  NUMPRS_NEG = 65536_u32
  NUMPRS_INEXACT = 131072_u32
  VARCMP_LT = 0_u32
  VARCMP_EQ = 1_u32
  VARCMP_GT = 2_u32
  VARCMP_NULL = 3_u32
  MEMBERID_NIL = -1_i32
  ID_DEFAULTINST = -2_i32
  DISPATCH_METHOD = 1_u32
  DISPATCH_PROPERTYGET = 2_u32
  DISPATCH_PROPERTYPUT = 4_u32
  DISPATCH_PROPERTYPUTREF = 8_u32
  LOAD_TLB_AS_32BIT = 32_u32
  LOAD_TLB_AS_64BIT = 64_u32
  ACTIVEOBJECT_STRONG = 0_u32
  ACTIVEOBJECT_WEAK = 1_u32
  Fdexnamecasesensitive = 1_i32
  Fdexnameensure = 2_i32
  Fdexnameimplicit = 4_i32
  Fdexnamecaseinsensitive = 8_i32
  Fdexnameinternal = 16_i32
  Fdexnamenodynamicproperties = 32_i32
  Fdexpropcanget = 1_i32
  Fdexpropcannotget = 2_i32
  Fdexpropcanput = 4_i32
  Fdexpropcannotput = 8_i32
  Fdexpropcanputref = 16_i32
  Fdexpropcannotputref = 32_i32
  Fdexpropnosideeffects = 64_i32
  Fdexpropdynamictype = 128_i32
  Fdexpropcancall = 256_i32
  Fdexpropcannotcall = 512_i32
  Fdexpropcanconstruct = 1024_i32
  Fdexpropcannotconstruct = 2048_i32
  Fdexpropcansourceevents = 4096_i32
  Fdexpropcannotsourceevents = 8192_i32
  Fdexenumdefault = 1_i32
  Fdexenumall = 2_i32
  DISPATCH_CONSTRUCT = 16384_u32
  DISPID_STARTENUM = -1_i32
  SID_VariantConversion = "1f101481-bccd-11d0-9336-00a0c90dcaa9"
  SID_GetCaller = "4717cc40-bcb9-11d0-9336-00a0c90dcaa9"
  SID_ProvideRuntimeContext = "74a5040c-dd0c-48f0-ac85-194c3259180a"

  @[Flags]
  enum UPDFCACHE_FLAGS : UInt32
    UPDFCACHE_ALL = 2147483647_u32
    UPDFCACHE_ALLBUTNODATACACHE = 2147483646_u32
    UPDFCACHE_NORMALCACHE = 8_u32
    UPDFCACHE_IFBLANK = 16_u32
    UPDFCACHE_ONLYIFBLANK = 2147483648_u32
    UPDFCACHE_NODATACACHE = 1_u32
    UPDFCACHE_ONSAVECACHE = 2_u32
    UPDFCACHE_ONSTOPCACHE = 4_u32
    UPDFCACHE_IFBLANKORONSAVECACHE = 18_u32
  end
  enum ENUM_CONTROLS_WHICH_FLAGS : UInt32
    GCW_WCH_SIBLING = 1_u32
    GC_WCH_CONTAINER = 2_u32
    GC_WCH_CONTAINED = 3_u32
    GC_WCH_ALL = 4_u32
    GC_WCH_FREVERSEDIR = 134217728_u32
    GC_WCH_FONLYAFTER = 268435456_u32
    GC_WCH_FONLYBEFORE = 536870912_u32
    GC_WCH_FSELECTED = 1073741824_u32
  end
  enum MULTICLASSINFO_FLAGS : UInt32
    MULTICLASSINFO_GETTYPEINFO = 1_u32
    MULTICLASSINFO_GETNUMRESERVEDDISPIDS = 2_u32
    MULTICLASSINFO_GETIIDPRIMARY = 4_u32
    MULTICLASSINFO_GETIIDSOURCE = 8_u32
  end
  @[Flags]
  enum DROPEFFECT : UInt32
    DROPEFFECT_NONE = 0_u32
    DROPEFFECT_COPY = 1_u32
    DROPEFFECT_MOVE = 2_u32
    DROPEFFECT_LINK = 4_u32
    DROPEFFECT_SCROLL = 2147483648_u32
  end
  enum VARENUM
    VT_EMPTY = 0_i32
    VT_NULL = 1_i32
    VT_I2 = 2_i32
    VT_I4 = 3_i32
    VT_R4 = 4_i32
    VT_R8 = 5_i32
    VT_CY = 6_i32
    VT_DATE = 7_i32
    VT_BSTR = 8_i32
    VT_DISPATCH = 9_i32
    VT_ERROR = 10_i32
    VT_BOOL = 11_i32
    VT_VARIANT = 12_i32
    VT_UNKNOWN = 13_i32
    VT_DECIMAL = 14_i32
    VT_I1 = 16_i32
    VT_UI1 = 17_i32
    VT_UI2 = 18_i32
    VT_UI4 = 19_i32
    VT_I8 = 20_i32
    VT_UI8 = 21_i32
    VT_INT = 22_i32
    VT_UINT = 23_i32
    VT_VOID = 24_i32
    VT_HRESULT = 25_i32
    VT_PTR = 26_i32
    VT_SAFEARRAY = 27_i32
    VT_CARRAY = 28_i32
    VT_USERDEFINED = 29_i32
    VT_LPSTR = 30_i32
    VT_LPWSTR = 31_i32
    VT_RECORD = 36_i32
    VT_INT_PTR = 37_i32
    VT_UINT_PTR = 38_i32
    VT_FILETIME = 64_i32
    VT_BLOB = 65_i32
    VT_STREAM = 66_i32
    VT_STORAGE = 67_i32
    VT_STREAMED_OBJECT = 68_i32
    VT_STORED_OBJECT = 69_i32
    VT_BLOB_OBJECT = 70_i32
    VT_CF = 71_i32
    VT_CLSID = 72_i32
    VT_VERSIONED_STREAM = 73_i32
    VT_BSTR_BLOB = 4095_i32
    VT_VECTOR = 4096_i32
    VT_ARRAY = 8192_i32
    VT_BYREF = 16384_i32
    VT_RESERVED = 32768_i32
    VT_ILLEGAL = 65535_i32
    VT_ILLEGALMASKED = 4095_i32
    VT_TYPEMASK = 4095_i32
  end
  enum SF_TYPE
    SF_ERROR = 10_i32
    SF_I1 = 16_i32
    SF_I2 = 2_i32
    SF_I4 = 3_i32
    SF_I8 = 20_i32
    SF_BSTR = 8_i32
    SF_UNKNOWN = 13_i32
    SF_DISPATCH = 9_i32
    SF_VARIANT = 12_i32
    SF_RECORD = 36_i32
    SF_HAVEIID = 32781_i32
  end
  enum TYPEFLAGS
    TYPEFLAG_FAPPOBJECT = 1_i32
    TYPEFLAG_FCANCREATE = 2_i32
    TYPEFLAG_FLICENSED = 4_i32
    TYPEFLAG_FPREDECLID = 8_i32
    TYPEFLAG_FHIDDEN = 16_i32
    TYPEFLAG_FCONTROL = 32_i32
    TYPEFLAG_FDUAL = 64_i32
    TYPEFLAG_FNONEXTENSIBLE = 128_i32
    TYPEFLAG_FOLEAUTOMATION = 256_i32
    TYPEFLAG_FRESTRICTED = 512_i32
    TYPEFLAG_FAGGREGATABLE = 1024_i32
    TYPEFLAG_FREPLACEABLE = 2048_i32
    TYPEFLAG_FDISPATCHABLE = 4096_i32
    TYPEFLAG_FREVERSEBIND = 8192_i32
    TYPEFLAG_FPROXY = 16384_i32
  end
  enum FUNCFLAGS
    FUNCFLAG_FRESTRICTED = 1_i32
    FUNCFLAG_FSOURCE = 2_i32
    FUNCFLAG_FBINDABLE = 4_i32
    FUNCFLAG_FREQUESTEDIT = 8_i32
    FUNCFLAG_FDISPLAYBIND = 16_i32
    FUNCFLAG_FDEFAULTBIND = 32_i32
    FUNCFLAG_FHIDDEN = 64_i32
    FUNCFLAG_FUSESGETLASTERROR = 128_i32
    FUNCFLAG_FDEFAULTCOLLELEM = 256_i32
    FUNCFLAG_FUIDEFAULT = 512_i32
    FUNCFLAG_FNONBROWSABLE = 1024_i32
    FUNCFLAG_FREPLACEABLE = 2048_i32
    FUNCFLAG_FIMMEDIATEBIND = 4096_i32
  end
  enum VARFLAGS
    VARFLAG_FREADONLY = 1_i32
    VARFLAG_FSOURCE = 2_i32
    VARFLAG_FBINDABLE = 4_i32
    VARFLAG_FREQUESTEDIT = 8_i32
    VARFLAG_FDISPLAYBIND = 16_i32
    VARFLAG_FDEFAULTBIND = 32_i32
    VARFLAG_FHIDDEN = 64_i32
    VARFLAG_FRESTRICTED = 128_i32
    VARFLAG_FDEFAULTCOLLELEM = 256_i32
    VARFLAG_FUIDEFAULT = 512_i32
    VARFLAG_FNONBROWSABLE = 1024_i32
    VARFLAG_FREPLACEABLE = 2048_i32
    VARFLAG_FIMMEDIATEBIND = 4096_i32
  end
  enum LIBFLAGS
    LIBFLAG_FRESTRICTED = 1_i32
    LIBFLAG_FCONTROL = 2_i32
    LIBFLAG_FHIDDEN = 4_i32
    LIBFLAG_FHASDISKIMAGE = 8_i32
  end
  enum CHANGEKIND
    CHANGEKIND_ADDMEMBER = 0_i32
    CHANGEKIND_DELETEMEMBER = 1_i32
    CHANGEKIND_SETNAMES = 2_i32
    CHANGEKIND_SETDOCUMENTATION = 3_i32
    CHANGEKIND_GENERAL = 4_i32
    CHANGEKIND_INVALIDATE = 5_i32
    CHANGEKIND_CHANGEFAILED = 6_i32
    CHANGEKIND_MAX = 7_i32
  end
  enum DISCARDCACHE
    DISCARDCACHE_SAVEIFDIRTY = 0_i32
    DISCARDCACHE_NOSAVE = 1_i32
  end
  enum OLEGETMONIKER
    OLEGETMONIKER_ONLYIFTHERE = 1_i32
    OLEGETMONIKER_FORCEASSIGN = 2_i32
    OLEGETMONIKER_UNASSIGN = 3_i32
    OLEGETMONIKER_TEMPFORUSER = 4_i32
  end
  enum OLEWHICHMK
    OLEWHICHMK_CONTAINER = 1_i32
    OLEWHICHMK_OBJREL = 2_i32
    OLEWHICHMK_OBJFULL = 3_i32
  end
  enum USERCLASSTYPE
    USERCLASSTYPE_FULL = 1_i32
    USERCLASSTYPE_SHORT = 2_i32
    USERCLASSTYPE_APPNAME = 3_i32
  end
  enum OLEMISC
    OLEMISC_RECOMPOSEONRESIZE = 1_i32
    OLEMISC_ONLYICONIC = 2_i32
    OLEMISC_INSERTNOTREPLACE = 4_i32
    OLEMISC_STATIC = 8_i32
    OLEMISC_CANTLINKINSIDE = 16_i32
    OLEMISC_CANLINKBYOLE1 = 32_i32
    OLEMISC_ISLINKOBJECT = 64_i32
    OLEMISC_INSIDEOUT = 128_i32
    OLEMISC_ACTIVATEWHENVISIBLE = 256_i32
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512_i32
    OLEMISC_INVISIBLEATRUNTIME = 1024_i32
    OLEMISC_ALWAYSRUN = 2048_i32
    OLEMISC_ACTSLIKEBUTTON = 4096_i32
    OLEMISC_ACTSLIKELABEL = 8192_i32
    OLEMISC_NOUIACTIVATE = 16384_i32
    OLEMISC_ALIGNABLE = 32768_i32
    OLEMISC_SIMPLEFRAME = 65536_i32
    OLEMISC_SETCLIENTSITEFIRST = 131072_i32
    OLEMISC_IMEMODE = 262144_i32
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288_i32
    OLEMISC_WANTSTOMENUMERGE = 1048576_i32
    OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152_i32
  end
  enum OLECLOSE
    OLECLOSE_SAVEIFDIRTY = 0_i32
    OLECLOSE_NOSAVE = 1_i32
    OLECLOSE_PROMPTSAVE = 2_i32
  end
  enum OLERENDER
    OLERENDER_NONE = 0_i32
    OLERENDER_DRAW = 1_i32
    OLERENDER_FORMAT = 2_i32
    OLERENDER_ASIS = 3_i32
  end
  enum OLEUPDATE
    OLEUPDATE_ALWAYS = 1_i32
    OLEUPDATE_ONCALL = 3_i32
  end
  enum OLELINKBIND
    OLELINKBIND_EVENIFCLASSDIFF = 1_i32
  end
  enum BINDSPEED
    BINDSPEED_INDEFINITE = 1_i32
    BINDSPEED_MODERATE = 2_i32
    BINDSPEED_IMMEDIATE = 3_i32
  end
  enum OLECONTF
    OLECONTF_EMBEDDINGS = 1_i32
    OLECONTF_LINKS = 2_i32
    OLECONTF_OTHERS = 4_i32
    OLECONTF_ONLYUSER = 8_i32
    OLECONTF_ONLYIFRUNNING = 16_i32
  end
  enum OLEVERBATTRIB
    OLEVERBATTRIB_NEVERDIRTIES = 1_i32
    OLEVERBATTRIB_ONCONTAINERMENU = 2_i32
  end
  enum REGKIND
    REGKIND_DEFAULT = 0_i32
    REGKIND_REGISTER = 1_i32
    REGKIND_NONE = 2_i32
  end
  enum UASFLAGS
    UAS_NORMAL = 0_i32
    UAS_BLOCKED = 1_i32
    UAS_NOPARENTENABLE = 2_i32
    UAS_MASK = 3_i32
  end
  enum READYSTATE
    READYSTATE_UNINITIALIZED = 0_i32
    READYSTATE_LOADING = 1_i32
    READYSTATE_LOADED = 2_i32
    READYSTATE_INTERACTIVE = 3_i32
    READYSTATE_COMPLETE = 4_i32
  end
  enum GUIDKIND
    GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1_i32
  end
  enum CTRLINFO
    CTRLINFO_EATS_RETURN = 1_i32
    CTRLINFO_EATS_ESCAPE = 2_i32
  end
  enum XFORMCOORDS
    XFORMCOORDS_POSITION = 1_i32
    XFORMCOORDS_SIZE = 2_i32
    XFORMCOORDS_HIMETRICTOCONTAINER = 4_i32
    XFORMCOORDS_CONTAINERTOHIMETRIC = 8_i32
    XFORMCOORDS_EVENTCOMPAT = 16_i32
  end
  enum PROPPAGESTATUS
    PROPPAGESTATUS_DIRTY = 1_i32
    PROPPAGESTATUS_VALIDATE = 2_i32
    PROPPAGESTATUS_CLEAN = 4_i32
  end
  enum PictureAttributes
    PICTURE_SCALABLE = 1_i32
    PICTURE_TRANSPARENT = 2_i32
  end
  enum ACTIVATEFLAGS
    ACTIVATE_WINDOWLESS = 1_i32
  end
  enum OLEDCFLAGS
    OLEDC_NODRAW = 1_i32
    OLEDC_PAINTBKGND = 2_i32
    OLEDC_OFFSCREEN = 4_i32
  end
  enum VIEWSTATUS
    VIEWSTATUS_OPAQUE = 1_i32
    VIEWSTATUS_SOLIDBKGND = 2_i32
    VIEWSTATUS_DVASPECTOPAQUE = 4_i32
    VIEWSTATUS_DVASPECTTRANSPARENT = 8_i32
    VIEWSTATUS_SURFACE = 16_i32
    VIEWSTATUS_3DSURFACE = 32_i32
  end
  enum HITRESULT
    HITRESULT_OUTSIDE = 0_i32
    HITRESULT_TRANSPARENT = 1_i32
    HITRESULT_CLOSE = 2_i32
    HITRESULT_HIT = 3_i32
  end
  enum DVASPECT2
    DVASPECT_OPAQUE = 16_i32
    DVASPECT_TRANSPARENT = 32_i32
  end
  enum ExtentMode
    DVEXTENT_CONTENT = 0_i32
    DVEXTENT_INTEGRAL = 1_i32
  end
  enum AspectInfoFlag
    DVASPECTINFOFLAG_CANOPTIMIZE = 1_i32
  end
  enum POINTERINACTIVE
    POINTERINACTIVE_ACTIVATEONENTRY = 1_i32
    POINTERINACTIVE_DEACTIVATEONLEAVE = 2_i32
    POINTERINACTIVE_ACTIVATEONDRAG = 4_i32
  end
  enum PROPBAG2_TYPE
    PROPBAG2_TYPE_UNDEFINED = 0_i32
    PROPBAG2_TYPE_DATA = 1_i32
    PROPBAG2_TYPE_URL = 2_i32
    PROPBAG2_TYPE_OBJECT = 3_i32
    PROPBAG2_TYPE_STREAM = 4_i32
    PROPBAG2_TYPE_STORAGE = 5_i32
    PROPBAG2_TYPE_MONIKER = 6_i32
  end
  enum QACONTAINERFLAGS
    QACONTAINER_SHOWHATCHING = 1_i32
    QACONTAINER_SHOWGRABHANDLES = 2_i32
    QACONTAINER_USERMODE = 4_i32
    QACONTAINER_DISPLAYASDEFAULT = 8_i32
    QACONTAINER_UIDEAD = 16_i32
    QACONTAINER_AUTOCLIP = 32_i32
    QACONTAINER_MESSAGEREFLECT = 64_i32
    QACONTAINER_SUPPORTSMNEMONICS = 128_i32
  end
  enum OLE_TRISTATE
    Triunchecked = 0_i32
    Trichecked = 1_i32
    Trigray = 2_i32
  end
  enum DOCMISC
    DOCMISC_CANCREATEMULTIPLEVIEWS = 1_i32
    DOCMISC_SUPPORTCOMPLEXRECTANGLES = 2_i32
    DOCMISC_CANTOPENEDIT = 4_i32
    DOCMISC_NOFILESUPPORT = 8_i32
  end
  @[Flags]
  enum PRINTFLAG : UInt32
    PRINTFLAG_MAYBOTHERUSER = 1_u32
    PRINTFLAG_PROMPTUSER = 2_u32
    PRINTFLAG_USERMAYCHANGEPRINTER = 4_u32
    PRINTFLAG_RECOMPOSETODEVICE = 8_u32
    PRINTFLAG_DONTACTUALLYPRINT = 16_u32
    PRINTFLAG_FORCEPROPERTIES = 32_u32
    PRINTFLAG_PRINTTOFILE = 64_u32
  end
  enum OLECMDF
    OLECMDF_SUPPORTED = 1_i32
    OLECMDF_ENABLED = 2_i32
    OLECMDF_LATCHED = 4_i32
    OLECMDF_NINCHED = 8_i32
    OLECMDF_INVISIBLE = 16_i32
    OLECMDF_DEFHIDEONCTXTMENU = 32_i32
  end
  enum OLECMDTEXTF
    OLECMDTEXTF_NONE = 0_i32
    OLECMDTEXTF_NAME = 1_i32
    OLECMDTEXTF_STATUS = 2_i32
  end
  enum OLECMDEXECOPT
    OLECMDEXECOPT_DODEFAULT = 0_i32
    OLECMDEXECOPT_PROMPTUSER = 1_i32
    OLECMDEXECOPT_DONTPROMPTUSER = 2_i32
    OLECMDEXECOPT_SHOWHELP = 3_i32
  end
  enum OLECMDID
    OLECMDID_OPEN = 1_i32
    OLECMDID_NEW = 2_i32
    OLECMDID_SAVE = 3_i32
    OLECMDID_SAVEAS = 4_i32
    OLECMDID_SAVECOPYAS = 5_i32
    OLECMDID_PRINT = 6_i32
    OLECMDID_PRINTPREVIEW = 7_i32
    OLECMDID_PAGESETUP = 8_i32
    OLECMDID_SPELL = 9_i32
    OLECMDID_PROPERTIES = 10_i32
    OLECMDID_CUT = 11_i32
    OLECMDID_COPY = 12_i32
    OLECMDID_PASTE = 13_i32
    OLECMDID_PASTESPECIAL = 14_i32
    OLECMDID_UNDO = 15_i32
    OLECMDID_REDO = 16_i32
    OLECMDID_SELECTALL = 17_i32
    OLECMDID_CLEARSELECTION = 18_i32
    OLECMDID_ZOOM = 19_i32
    OLECMDID_GETZOOMRANGE = 20_i32
    OLECMDID_UPDATECOMMANDS = 21_i32
    OLECMDID_REFRESH = 22_i32
    OLECMDID_STOP = 23_i32
    OLECMDID_HIDETOOLBARS = 24_i32
    OLECMDID_SETPROGRESSMAX = 25_i32
    OLECMDID_SETPROGRESSPOS = 26_i32
    OLECMDID_SETPROGRESSTEXT = 27_i32
    OLECMDID_SETTITLE = 28_i32
    OLECMDID_SETDOWNLOADSTATE = 29_i32
    OLECMDID_STOPDOWNLOAD = 30_i32
    OLECMDID_ONTOOLBARACTIVATED = 31_i32
    OLECMDID_FIND = 32_i32
    OLECMDID_DELETE = 33_i32
    OLECMDID_HTTPEQUIV = 34_i32
    OLECMDID_HTTPEQUIV_DONE = 35_i32
    OLECMDID_ENABLE_INTERACTION = 36_i32
    OLECMDID_ONUNLOAD = 37_i32
    OLECMDID_PROPERTYBAG2 = 38_i32
    OLECMDID_PREREFRESH = 39_i32
    OLECMDID_SHOWSCRIPTERROR = 40_i32
    OLECMDID_SHOWMESSAGE = 41_i32
    OLECMDID_SHOWFIND = 42_i32
    OLECMDID_SHOWPAGESETUP = 43_i32
    OLECMDID_SHOWPRINT = 44_i32
    OLECMDID_CLOSE = 45_i32
    OLECMDID_ALLOWUILESSSAVEAS = 46_i32
    OLECMDID_DONTDOWNLOADCSS = 47_i32
    OLECMDID_UPDATEPAGESTATUS = 48_i32
    OLECMDID_PRINT2 = 49_i32
    OLECMDID_PRINTPREVIEW2 = 50_i32
    OLECMDID_SETPRINTTEMPLATE = 51_i32
    OLECMDID_GETPRINTTEMPLATE = 52_i32
    OLECMDID_PAGEACTIONBLOCKED = 55_i32
    OLECMDID_PAGEACTIONUIQUERY = 56_i32
    OLECMDID_FOCUSVIEWCONTROLS = 57_i32
    OLECMDID_FOCUSVIEWCONTROLSQUERY = 58_i32
    OLECMDID_SHOWPAGEACTIONMENU = 59_i32
    OLECMDID_ADDTRAVELENTRY = 60_i32
    OLECMDID_UPDATETRAVELENTRY = 61_i32
    OLECMDID_UPDATEBACKFORWARDSTATE = 62_i32
    OLECMDID_OPTICAL_ZOOM = 63_i32
    OLECMDID_OPTICAL_GETZOOMRANGE = 64_i32
    OLECMDID_WINDOWSTATECHANGED = 65_i32
    OLECMDID_ACTIVEXINSTALLSCOPE = 66_i32
    OLECMDID_UPDATETRAVELENTRY_DATARECOVERY = 67_i32
    OLECMDID_SHOWTASKDLG = 68_i32
    OLECMDID_POPSTATEEVENT = 69_i32
    OLECMDID_VIEWPORT_MODE = 70_i32
    OLECMDID_LAYOUT_VIEWPORT_WIDTH = 71_i32
    OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM = 72_i32
    OLECMDID_USER_OPTICAL_ZOOM = 73_i32
    OLECMDID_PAGEAVAILABLE = 74_i32
    OLECMDID_GETUSERSCALABLE = 75_i32
    OLECMDID_UPDATE_CARET = 76_i32
    OLECMDID_ENABLE_VISIBILITY = 77_i32
    OLECMDID_MEDIA_PLAYBACK = 78_i32
    OLECMDID_SETFAVICON = 79_i32
    OLECMDID_SET_HOST_FULLSCREENMODE = 80_i32
    OLECMDID_EXITFULLSCREEN = 81_i32
    OLECMDID_SCROLLCOMPLETE = 82_i32
    OLECMDID_ONBEFOREUNLOAD = 83_i32
    OLECMDID_SHOWMESSAGE_BLOCKABLE = 84_i32
    OLECMDID_SHOWTASKDLG_BLOCKABLE = 85_i32
  end
  enum MEDIAPLAYBACK_STATE
    MEDIAPLAYBACK_RESUME = 0_i32
    MEDIAPLAYBACK_PAUSE = 1_i32
    MEDIAPLAYBACK_PAUSE_AND_SUSPEND = 2_i32
    MEDIAPLAYBACK_RESUME_FROM_SUSPEND = 3_i32
  end
  enum IGNOREMIME
    IGNOREMIME_PROMPT = 1_i32
    IGNOREMIME_TEXT = 2_i32
  end
  enum WPCSETTING
    WPCSETTING_LOGGING_ENABLED = 1_i32
    WPCSETTING_FILEDOWNLOAD_BLOCKED = 2_i32
  end
  enum OLECMDID_REFRESHFLAG
    OLECMDIDF_REFRESH_NORMAL = 0_i32
    OLECMDIDF_REFRESH_IFEXPIRED = 1_i32
    OLECMDIDF_REFRESH_CONTINUE = 2_i32
    OLECMDIDF_REFRESH_COMPLETELY = 3_i32
    OLECMDIDF_REFRESH_NO_CACHE = 4_i32
    OLECMDIDF_REFRESH_RELOAD = 5_i32
    OLECMDIDF_REFRESH_LEVELMASK = 255_i32
    OLECMDIDF_REFRESH_CLEARUSERINPUT = 4096_i32
    OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 8192_i32
    OLECMDIDF_REFRESH_THROUGHSCRIPT = 16384_i32
    OLECMDIDF_REFRESH_SKIPBEFOREUNLOADEVENT = 32768_i32
    OLECMDIDF_REFRESH_PAGEACTION_ACTIVEXINSTALL = 65536_i32
    OLECMDIDF_REFRESH_PAGEACTION_FILEDOWNLOAD = 131072_i32
    OLECMDIDF_REFRESH_PAGEACTION_LOCALMACHINE = 262144_i32
    OLECMDIDF_REFRESH_PAGEACTION_POPUPWINDOW = 524288_i32
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 1048576_i32
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNTRUSTED = 2097152_i32
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTRANET = 4194304_i32
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTERNET = 8388608_i32
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNRESTRICTED = 16777216_i32
    OLECMDIDF_REFRESH_PAGEACTION_MIXEDCONTENT = 33554432_i32
    OLECMDIDF_REFRESH_PAGEACTION_INVALID_CERT = 67108864_i32
    OLECMDIDF_REFRESH_PAGEACTION_ALLOW_VERSION = 134217728_i32
  end
  enum OLECMDID_PAGEACTIONFLAG
    OLECMDIDF_PAGEACTION_FILEDOWNLOAD = 1_i32
    OLECMDIDF_PAGEACTION_ACTIVEXINSTALL = 2_i32
    OLECMDIDF_PAGEACTION_ACTIVEXTRUSTFAIL = 4_i32
    OLECMDIDF_PAGEACTION_ACTIVEXUSERDISABLE = 8_i32
    OLECMDIDF_PAGEACTION_ACTIVEXDISALLOW = 16_i32
    OLECMDIDF_PAGEACTION_ACTIVEXUNSAFE = 32_i32
    OLECMDIDF_PAGEACTION_POPUPWINDOW = 64_i32
    OLECMDIDF_PAGEACTION_LOCALMACHINE = 128_i32
    OLECMDIDF_PAGEACTION_MIMETEXTPLAIN = 256_i32
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE = 512_i32
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXINSTALL = 512_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 1024_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNTRUSTED = 2048_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTRANET = 4096_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTERNET = 8192_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNRESTRICTED = 16384_i32
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNDENY = 32768_i32
    OLECMDIDF_PAGEACTION_POPUPALLOWED = 65536_i32
    OLECMDIDF_PAGEACTION_SCRIPTPROMPT = 131072_i32
    OLECMDIDF_PAGEACTION_ACTIVEXUSERAPPROVAL = 262144_i32
    OLECMDIDF_PAGEACTION_MIXEDCONTENT = 524288_i32
    OLECMDIDF_PAGEACTION_INVALID_CERT = 1048576_i32
    OLECMDIDF_PAGEACTION_INTRANETZONEREQUEST = 2097152_i32
    OLECMDIDF_PAGEACTION_XSSFILTERED = 4194304_i32
    OLECMDIDF_PAGEACTION_SPOOFABLEIDNHOST = 8388608_i32
    OLECMDIDF_PAGEACTION_ACTIVEX_EPM_INCOMPATIBLE = 16777216_i32
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL = 33554432_i32
    OLECMDIDF_PAGEACTION_WPCBLOCKED = 67108864_i32
    OLECMDIDF_PAGEACTION_WPCBLOCKED_ACTIVEX = 134217728_i32
    OLECMDIDF_PAGEACTION_EXTENSION_COMPAT_BLOCKED = 268435456_i32
    OLECMDIDF_PAGEACTION_NORESETACTIVEX = 536870912_i32
    OLECMDIDF_PAGEACTION_GENERIC_STATE = 1073741824_i32
    OLECMDIDF_PAGEACTION_RESET = -2147483648_i32
  end
  enum OLECMDID_BROWSERSTATEFLAG
    OLECMDIDF_BROWSERSTATE_EXTENSIONSOFF = 1_i32
    OLECMDIDF_BROWSERSTATE_IESECURITY = 2_i32
    OLECMDIDF_BROWSERSTATE_PROTECTEDMODE_OFF = 4_i32
    OLECMDIDF_BROWSERSTATE_RESET = 8_i32
    OLECMDIDF_BROWSERSTATE_REQUIRESACTIVEX = 16_i32
    OLECMDIDF_BROWSERSTATE_DESKTOPHTMLDIALOG = 32_i32
    OLECMDIDF_BROWSERSTATE_BLOCKEDVERSION = 64_i32
  end
  enum OLECMDID_OPTICAL_ZOOMFLAG
    OLECMDIDF_OPTICAL_ZOOM_NOPERSIST = 1_i32
    OLECMDIDF_OPTICAL_ZOOM_NOLAYOUT = 16_i32
    OLECMDIDF_OPTICAL_ZOOM_NOTRANSIENT = 32_i32
    OLECMDIDF_OPTICAL_ZOOM_RELOADFORNEWTAB = 64_i32
  end
  enum PAGEACTION_UI
    PAGEACTION_UI_DEFAULT = 0_i32
    PAGEACTION_UI_MODAL = 1_i32
    PAGEACTION_UI_MODELESS = 2_i32
    PAGEACTION_UI_SILENT = 3_i32
  end
  enum OLECMDID_WINDOWSTATE_FLAG
    OLECMDIDF_WINDOWSTATE_USERVISIBLE = 1_i32
    OLECMDIDF_WINDOWSTATE_ENABLED = 2_i32
    OLECMDIDF_WINDOWSTATE_USERVISIBLE_VALID = 65536_i32
    OLECMDIDF_WINDOWSTATE_ENABLED_VALID = 131072_i32
  end
  enum OLECMDID_VIEWPORT_MODE_FLAG
    OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH = 1_i32
    OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM = 2_i32
    OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH_VALID = 65536_i32
    OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM_VALID = 131072_i32
  end
  enum OLEUIPASTEFLAG
    OLEUIPASTE_ENABLEICON = 2048_i32
    OLEUIPASTE_PASTEONLY = 0_i32
    OLEUIPASTE_PASTE = 512_i32
    OLEUIPASTE_LINKANYTYPE = 1024_i32
    OLEUIPASTE_LINKTYPE1 = 1_i32
    OLEUIPASTE_LINKTYPE2 = 2_i32
    OLEUIPASTE_LINKTYPE3 = 4_i32
    OLEUIPASTE_LINKTYPE4 = 8_i32
    OLEUIPASTE_LINKTYPE5 = 16_i32
    OLEUIPASTE_LINKTYPE6 = 32_i32
    OLEUIPASTE_LINKTYPE7 = 64_i32
    OLEUIPASTE_LINKTYPE8 = 128_i32
  end

  @[Extern]
  struct Wiresafearr_bstr_
    property size : UInt32
    property aBstr : Win32cr::System::Com::FLAGGED_WORD_BLOB**
    def initialize(@size : UInt32, @aBstr : Win32cr::System::Com::FLAGGED_WORD_BLOB**)
    end
  end

  @[Extern]
  struct Wiresafearr_unknown_
    property size : UInt32
    property apUnknown : Void**
    def initialize(@size : UInt32, @apUnknown : Void**)
    end
  end

  @[Extern]
  struct Wiresafearr_dispatch_
    property size : UInt32
    property apDispatch : Void**
    def initialize(@size : UInt32, @apDispatch : Void**)
    end
  end

  @[Extern]
  struct Wiresafearr_variant_
    property size : UInt32
    property aVariant : Win32cr::System::Ole::Wirevariant_**
    def initialize(@size : UInt32, @aVariant : Win32cr::System::Ole::Wirevariant_**)
    end
  end

  @[Extern]
  struct Wiresafearr_brecord_
    property size : UInt32
    property aRecord : Win32cr::System::Ole::Wirebrecord_**
    def initialize(@size : UInt32, @aRecord : Win32cr::System::Ole::Wirebrecord_**)
    end
  end

  @[Extern]
  struct Wiresafearr_haveiid_
    property size : UInt32
    property apUnknown : Void**
    property iid : LibC::GUID
    def initialize(@size : UInt32, @apUnknown : Void**, @iid : LibC::GUID)
    end
  end

  @[Extern]
  struct Wiresafearray_union_
    property sfType : UInt32
    property u : U_e__struct_

    # Nested Type U_e__struct_
    @[Extern(union: true)]
    struct U_e__struct_
    property bstr_str : Win32cr::System::Ole::Wiresafearr_bstr_
    property unknown_str : Win32cr::System::Ole::Wiresafearr_unknown_
    property dispatch_str : Win32cr::System::Ole::Wiresafearr_dispatch_
    property variant_str : Win32cr::System::Ole::Wiresafearr_variant_
    property record_str : Win32cr::System::Ole::Wiresafearr_brecord_
    property have_iid_str : Win32cr::System::Ole::Wiresafearr_haveiid_
    property byte_str : Win32cr::System::Com::BYTE_SIZEDARR
    property word_str : Win32cr::System::Com::SHORT_SIZEDARR
    property long_str : Win32cr::System::Com::LONG_SIZEDARR
    property hyper_str : Win32cr::System::Com::HYPER_SIZEDARR
    def initialize(@bstr_str : Win32cr::System::Ole::Wiresafearr_bstr_, @unknown_str : Win32cr::System::Ole::Wiresafearr_unknown_, @dispatch_str : Win32cr::System::Ole::Wiresafearr_dispatch_, @variant_str : Win32cr::System::Ole::Wiresafearr_variant_, @record_str : Win32cr::System::Ole::Wiresafearr_brecord_, @have_iid_str : Win32cr::System::Ole::Wiresafearr_haveiid_, @byte_str : Win32cr::System::Com::BYTE_SIZEDARR, @word_str : Win32cr::System::Com::SHORT_SIZEDARR, @long_str : Win32cr::System::Com::LONG_SIZEDARR, @hyper_str : Win32cr::System::Com::HYPER_SIZEDARR)
    end
    end

    def initialize(@sfType : UInt32, @u : U_e__struct_)
    end
  end

  @[Extern]
  struct Wiresafearray_
    property cDims : UInt16
    property fFeatures : UInt16
    property cbElements : UInt32
    property cLocks : UInt32
    property uArrayStructs : Win32cr::System::Ole::Wiresafearray_union_
    property rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*
    def initialize(@cDims : UInt16, @fFeatures : UInt16, @cbElements : UInt32, @cLocks : UInt32, @uArrayStructs : Win32cr::System::Ole::Wiresafearray_union_, @rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*)
    end
  end

  @[Extern]
  struct Wirebrecord_
    property fFlags : UInt32
    property clSize : UInt32
    property pRecInfo : Void*
    property pRecord : UInt8*
    def initialize(@fFlags : UInt32, @clSize : UInt32, @pRecInfo : Void*, @pRecord : UInt8*)
    end
  end

  @[Extern]
  struct Wirevariant_
    property clSize : UInt32
    property rpcReserved : UInt32
    property vt : UInt16
    property wReserved1 : UInt16
    property wReserved2 : UInt16
    property wReserved3 : UInt16
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property llVal : Int64
    property lVal : Int32
    property bVal : UInt8
    property iVal : Int16
    property fltVal : Float32
    property dblVal : Float64
    property boolVal : Int16
    property scode : Int32
    property cyVal : Win32cr::System::Com::CY
    property date : Float64
    property bstrVal : Win32cr::System::Com::FLAGGED_WORD_BLOB*
    property punkVal : Void*
    property pdispVal : Void*
    property parray : Win32cr::System::Ole::Wiresafearray_**
    property brecVal : Win32cr::System::Ole::Wirebrecord_*
    property pbVal : UInt8*
    property piVal : Int16*
    property plVal : Int32*
    property pllVal : Int64*
    property pfltVal : Float32*
    property pdblVal : Float64*
    property pboolVal : Int16*
    property pscode : Int32*
    property pcyVal : Win32cr::System::Com::CY*
    property pdate : Float64*
    property pbstrVal : Win32cr::System::Com::FLAGGED_WORD_BLOB**
    property ppunkVal : Void**
    property ppdispVal : Void**
    property pparray : Win32cr::System::Ole::Wiresafearray_***
    property pvarVal : Win32cr::System::Ole::Wirevariant_**
    property cVal : Win32cr::Foundation::CHAR
    property uiVal : UInt16
    property ulVal : UInt32
    property ullVal : UInt64
    property intVal : Int32
    property uintVal : UInt32
    property decVal : Win32cr::Foundation::DECIMAL
    property pdecVal : Win32cr::Foundation::DECIMAL*
    property pcVal : Win32cr::Foundation::PSTR
    property puiVal : UInt16*
    property pulVal : UInt32*
    property pullVal : UInt64*
    property pintVal : Int32*
    property puintVal : UInt32*
    def initialize(@llVal : Int64, @lVal : Int32, @bVal : UInt8, @iVal : Int16, @fltVal : Float32, @dblVal : Float64, @boolVal : Int16, @scode : Int32, @cyVal : Win32cr::System::Com::CY, @date : Float64, @bstrVal : Win32cr::System::Com::FLAGGED_WORD_BLOB*, @punkVal : Void*, @pdispVal : Void*, @parray : Win32cr::System::Ole::Wiresafearray_**, @brecVal : Win32cr::System::Ole::Wirebrecord_*, @pbVal : UInt8*, @piVal : Int16*, @plVal : Int32*, @pllVal : Int64*, @pfltVal : Float32*, @pdblVal : Float64*, @pboolVal : Int16*, @pscode : Int32*, @pcyVal : Win32cr::System::Com::CY*, @pdate : Float64*, @pbstrVal : Win32cr::System::Com::FLAGGED_WORD_BLOB**, @ppunkVal : Void**, @ppdispVal : Void**, @pparray : Win32cr::System::Ole::Wiresafearray_***, @pvarVal : Win32cr::System::Ole::Wirevariant_**, @cVal : Win32cr::Foundation::CHAR, @uiVal : UInt16, @ulVal : UInt32, @ullVal : UInt64, @intVal : Int32, @uintVal : UInt32, @decVal : Win32cr::Foundation::DECIMAL, @pdecVal : Win32cr::Foundation::DECIMAL*, @pcVal : Win32cr::Foundation::PSTR, @puiVal : UInt16*, @pulVal : UInt32*, @pullVal : UInt64*, @pintVal : Int32*, @puintVal : UInt32*)
    end
    end

    def initialize(@clSize : UInt32, @rpcReserved : UInt32, @vt : UInt16, @wReserved1 : UInt16, @wReserved2 : UInt16, @wReserved3 : UInt16, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct ARRAYDESC
    property tdescElem : Win32cr::System::Com::TYPEDESC
    property cDims : UInt16
    property rgbounds : Win32cr::System::Com::SAFEARRAYBOUND*
    def initialize(@tdescElem : Win32cr::System::Com::TYPEDESC, @cDims : UInt16, @rgbounds : Win32cr::System::Com::SAFEARRAYBOUND*)
    end
  end

  @[Extern]
  struct PARAMDESCEX
    property cBytes : UInt32
    property varDefaultValue : Win32cr::System::Com::VARIANT
    def initialize(@cBytes : UInt32, @varDefaultValue : Win32cr::System::Com::VARIANT)
    end
  end

  @[Extern]
  struct PARAMDESC
    property pparamdescex : Win32cr::System::Ole::PARAMDESCEX*
    property wParamFlags : UInt16
    def initialize(@pparamdescex : Win32cr::System::Ole::PARAMDESCEX*, @wParamFlags : UInt16)
    end
  end

  @[Extern]
  struct CLEANLOCALSTORAGE
    property pInterface : Void*
    property pStorage : Void*
    property flags : UInt32
    def initialize(@pInterface : Void*, @pStorage : Void*, @flags : UInt32)
    end
  end

  @[Extern]
  struct OBJECTDESCRIPTOR
    property cbSize : UInt32
    property clsid : LibC::GUID
    property dwDrawAspect : UInt32
    property sizel : Win32cr::Foundation::SIZE
    property pointl : Win32cr::Foundation::POINTL
    property dwStatus : UInt32
    property dwFullUserTypeName : UInt32
    property dwSrcOfCopy : UInt32
    def initialize(@cbSize : UInt32, @clsid : LibC::GUID, @dwDrawAspect : UInt32, @sizel : Win32cr::Foundation::SIZE, @pointl : Win32cr::Foundation::POINTL, @dwStatus : UInt32, @dwFullUserTypeName : UInt32, @dwSrcOfCopy : UInt32)
    end
  end

  @[Extern]
  struct OIFI
    property cb : UInt32
    property fMDIApp : Win32cr::Foundation::BOOL
    property hwndFrame : Win32cr::Foundation::HWND
    property haccel : Win32cr::UI::WindowsAndMessaging::HACCEL
    property cAccelEntries : UInt32
    def initialize(@cb : UInt32, @fMDIApp : Win32cr::Foundation::BOOL, @hwndFrame : Win32cr::Foundation::HWND, @haccel : Win32cr::UI::WindowsAndMessaging::HACCEL, @cAccelEntries : UInt32)
    end
  end

  @[Extern]
  struct OleMenuGroupWidths
    property width : Int32[6]
    def initialize(@width : Int32[6])
    end
  end

  @[Extern]
  struct OLEVERB
    property lVerb : Int32
    property lpszVerbName : Win32cr::Foundation::PWSTR
    property fuFlags : UInt32
    property grfAttribs : UInt32
    def initialize(@lVerb : Int32, @lpszVerbName : Win32cr::Foundation::PWSTR, @fuFlags : UInt32, @grfAttribs : UInt32)
    end
  end

  @[Extern]
  struct NUMPARSE
    property cDig : Int32
    property dwInFlags : UInt32
    property dwOutFlags : UInt32
    property cchUsed : Int32
    property nBaseShift : Int32
    property nPwr10 : Int32
    def initialize(@cDig : Int32, @dwInFlags : UInt32, @dwOutFlags : UInt32, @cchUsed : Int32, @nBaseShift : Int32, @nPwr10 : Int32)
    end
  end

  @[Extern]
  struct UDATE
    property st : Win32cr::Foundation::SYSTEMTIME
    property wDayOfYear : UInt16
    def initialize(@st : Win32cr::Foundation::SYSTEMTIME, @wDayOfYear : UInt16)
    end
  end

  @[Extern]
  struct PARAMDATA
    property szName : Win32cr::Foundation::PWSTR
    property vt : UInt16
    def initialize(@szName : Win32cr::Foundation::PWSTR, @vt : UInt16)
    end
  end

  @[Extern]
  struct METHODDATA
    property szName : Win32cr::Foundation::PWSTR
    property ppdata : Win32cr::System::Ole::PARAMDATA*
    property dispid : Int32
    property iMeth : UInt32
    property cc : Win32cr::System::Com::CALLCONV
    property cArgs : UInt32
    property wFlags : UInt16
    property vtReturn : UInt16
    def initialize(@szName : Win32cr::Foundation::PWSTR, @ppdata : Win32cr::System::Ole::PARAMDATA*, @dispid : Int32, @iMeth : UInt32, @cc : Win32cr::System::Com::CALLCONV, @cArgs : UInt32, @wFlags : UInt16, @vtReturn : UInt16)
    end
  end

  @[Extern]
  struct INTERFACEDATA
    property pmethdata : Win32cr::System::Ole::METHODDATA*
    property cMembers : UInt32
    def initialize(@pmethdata : Win32cr::System::Ole::METHODDATA*, @cMembers : UInt32)
    end
  end

  @[Extern]
  struct LICINFO
    property cbLicInfo : Int32
    property fRuntimeKeyAvail : Win32cr::Foundation::BOOL
    property fLicVerified : Win32cr::Foundation::BOOL
    def initialize(@cbLicInfo : Int32, @fRuntimeKeyAvail : Win32cr::Foundation::BOOL, @fLicVerified : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct CONTROLINFO
    property cb : UInt32
    property hAccel : Win32cr::UI::WindowsAndMessaging::HACCEL
    property cAccel : UInt16
    property dwFlags : UInt32
    def initialize(@cb : UInt32, @hAccel : Win32cr::UI::WindowsAndMessaging::HACCEL, @cAccel : UInt16, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct POINTF
    property x : Float32
    property y : Float32
    def initialize(@x : Float32, @y : Float32)
    end
  end

  @[Extern]
  struct PROPPAGEINFO
    property cb : UInt32
    property pszTitle : Win32cr::Foundation::PWSTR
    property size : Win32cr::Foundation::SIZE
    property pszDocString : Win32cr::Foundation::PWSTR
    property pszHelpFile : Win32cr::Foundation::PWSTR
    property dwHelpContext : UInt32
    def initialize(@cb : UInt32, @pszTitle : Win32cr::Foundation::PWSTR, @size : Win32cr::Foundation::SIZE, @pszDocString : Win32cr::Foundation::PWSTR, @pszHelpFile : Win32cr::Foundation::PWSTR, @dwHelpContext : UInt32)
    end
  end

  @[Extern]
  struct CAUUID
    property cElems : UInt32
    property pElems : LibC::GUID*
    def initialize(@cElems : UInt32, @pElems : LibC::GUID*)
    end
  end

  @[Extern]
  struct ExtentInfo
    property cb : UInt32
    property dwExtentMode : UInt32
    property sizelProposed : Win32cr::Foundation::SIZE
    def initialize(@cb : UInt32, @dwExtentMode : UInt32, @sizelProposed : Win32cr::Foundation::SIZE)
    end
  end

  @[Extern]
  struct AspectInfo
    property cb : UInt32
    property dwFlags : UInt32
    def initialize(@cb : UInt32, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CALPOLESTR
    property cElems : UInt32
    property pElems : Win32cr::Foundation::PWSTR*
    def initialize(@cElems : UInt32, @pElems : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CADWORD
    property cElems : UInt32
    property pElems : UInt32*
    def initialize(@cElems : UInt32, @pElems : UInt32*)
    end
  end

  @[Extern]
  struct QACONTAINER
    property cbSize : UInt32
    property pClientSite : Void*
    property pAdviseSink : Void*
    property pPropertyNotifySink : Void*
    property pUnkEventSink : Void*
    property dwAmbientFlags : UInt32
    property colorFore : UInt32
    property colorBack : UInt32
    property pFont : Void*
    property pUndoMgr : Void*
    property dwAppearance : UInt32
    property lcid : Int32
    property hpal : Win32cr::Graphics::Gdi::HPALETTE
    property pBindHost : Void*
    property pOleControlSite : Void*
    property pServiceProvider : Void*
    def initialize(@cbSize : UInt32, @pClientSite : Void*, @pAdviseSink : Void*, @pPropertyNotifySink : Void*, @pUnkEventSink : Void*, @dwAmbientFlags : UInt32, @colorFore : UInt32, @colorBack : UInt32, @pFont : Void*, @pUndoMgr : Void*, @dwAppearance : UInt32, @lcid : Int32, @hpal : Win32cr::Graphics::Gdi::HPALETTE, @pBindHost : Void*, @pOleControlSite : Void*, @pServiceProvider : Void*)
    end
  end

  @[Extern]
  struct QACONTROL
    property cbSize : UInt32
    property dwMiscStatus : UInt32
    property dwViewStatus : UInt32
    property dwEventCookie : UInt32
    property dwPropNotifyCookie : UInt32
    property dwPointerActivationPolicy : UInt32
    def initialize(@cbSize : UInt32, @dwMiscStatus : UInt32, @dwViewStatus : UInt32, @dwEventCookie : UInt32, @dwPropNotifyCookie : UInt32, @dwPointerActivationPolicy : UInt32)
    end
  end

  @[Extern]
  struct OCPFIPARAMS
    property cbStructSize : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property x : Int32
    property y : Int32
    property lpszCaption : Win32cr::Foundation::PWSTR
    property cObjects : UInt32
    property lplpUnk : Void**
    property cPages : UInt32
    property lpPages : LibC::GUID*
    property lcid : UInt32
    property dispidInitialProperty : Int32
    def initialize(@cbStructSize : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @x : Int32, @y : Int32, @lpszCaption : Win32cr::Foundation::PWSTR, @cObjects : UInt32, @lplpUnk : Void**, @cPages : UInt32, @lpPages : LibC::GUID*, @lcid : UInt32, @dispidInitialProperty : Int32)
    end
  end

  @[Extern]
  struct FONTDESC
    property cbSizeofstruct : UInt32
    property lpstrName : Win32cr::Foundation::PWSTR
    property cySize : Win32cr::System::Com::CY
    property sWeight : Int16
    property sCharset : Int16
    property fItalic : Win32cr::Foundation::BOOL
    property fUnderline : Win32cr::Foundation::BOOL
    property fStrikethrough : Win32cr::Foundation::BOOL
    def initialize(@cbSizeofstruct : UInt32, @lpstrName : Win32cr::Foundation::PWSTR, @cySize : Win32cr::System::Com::CY, @sWeight : Int16, @sCharset : Int16, @fItalic : Win32cr::Foundation::BOOL, @fUnderline : Win32cr::Foundation::BOOL, @fStrikethrough : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct PICTDESC
    property cbSizeofstruct : UInt32
    property picType : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property bmp : Bmp_e__struct_
    property wmf : Wmf_e__struct_
    property icon : Icon_e__struct_
    property emf : Emf_e__struct_

      # Nested Type Icon_e__struct_
      @[Extern]
      struct Icon_e__struct_
    property hicon : Win32cr::UI::WindowsAndMessaging::HICON
    def initialize(@hicon : Win32cr::UI::WindowsAndMessaging::HICON)
    end
      end


      # Nested Type Bmp_e__struct_
      @[Extern]
      struct Bmp_e__struct_
    property hbitmap : Win32cr::Graphics::Gdi::HBITMAP
    property hpal : Win32cr::Graphics::Gdi::HPALETTE
    def initialize(@hbitmap : Win32cr::Graphics::Gdi::HBITMAP, @hpal : Win32cr::Graphics::Gdi::HPALETTE)
    end
      end


      # Nested Type Wmf_e__struct_
      @[Extern]
      struct Wmf_e__struct_
    property hmeta : Win32cr::Graphics::Gdi::HMETAFILE
    property xExt : Int32
    property yExt : Int32
    def initialize(@hmeta : Win32cr::Graphics::Gdi::HMETAFILE, @xExt : Int32, @yExt : Int32)
    end
      end


      # Nested Type Emf_e__struct_
      @[Extern]
      struct Emf_e__struct_
    property hemf : Win32cr::Graphics::Gdi::HENHMETAFILE
    def initialize(@hemf : Win32cr::Graphics::Gdi::HENHMETAFILE)
    end
      end

    def initialize(@bmp : Bmp_e__struct_, @wmf : Wmf_e__struct_, @icon : Icon_e__struct_, @emf : Emf_e__struct_)
    end
    end

    def initialize(@cbSizeofstruct : UInt32, @picType : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct PAGERANGE
    property nFromPage : Int32
    property nToPage : Int32
    def initialize(@nFromPage : Int32, @nToPage : Int32)
    end
  end

  @[Extern]
  struct PAGESET
    property cbStruct : UInt32
    property fOddPages : Win32cr::Foundation::BOOL
    property fEvenPages : Win32cr::Foundation::BOOL
    property cPageRange : UInt32
    property rgPages : Win32cr::System::Ole::PAGERANGE*
    def initialize(@cbStruct : UInt32, @fOddPages : Win32cr::Foundation::BOOL, @fEvenPages : Win32cr::Foundation::BOOL, @cPageRange : UInt32, @rgPages : Win32cr::System::Ole::PAGERANGE*)
    end
  end

  @[Extern]
  struct OLECMD
    property cmdID : UInt32
    property cmdf : UInt32
    def initialize(@cmdID : UInt32, @cmdf : UInt32)
    end
  end

  @[Extern]
  struct OLECMDTEXT
    property cmdtextf : UInt32
    property cwActual : UInt32
    property cwBuf : UInt32
    property rgwz : UInt16*
    def initialize(@cmdtextf : UInt32, @cwActual : UInt32, @cwBuf : UInt32, @rgwz : UInt16*)
    end
  end

  @[Extern]
  struct OLEUIINSERTOBJECTW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property clsid : LibC::GUID
    property lpszFile : Win32cr::Foundation::PWSTR
    property cchFile : UInt32
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    property iid : LibC::GUID
    property oleRender : UInt32
    property lpFormatEtc : Win32cr::System::Com::FORMATETC*
    property lpIOleClientSite : Void*
    property lpIStorage : Void*
    property ppvObj : Void**
    property sc : Int32
    property hMetaPict : LibC::IntPtrT
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @clsid : LibC::GUID, @lpszFile : Win32cr::Foundation::PWSTR, @cchFile : UInt32, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*, @iid : LibC::GUID, @oleRender : UInt32, @lpFormatEtc : Win32cr::System::Com::FORMATETC*, @lpIOleClientSite : Void*, @lpIStorage : Void*, @ppvObj : Void**, @sc : Int32, @hMetaPict : LibC::IntPtrT)
    end
  end

  @[Extern]
  struct OLEUIINSERTOBJECTA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property clsid : LibC::GUID
    property lpszFile : Win32cr::Foundation::PSTR
    property cchFile : UInt32
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    property iid : LibC::GUID
    property oleRender : UInt32
    property lpFormatEtc : Win32cr::System::Com::FORMATETC*
    property lpIOleClientSite : Void*
    property lpIStorage : Void*
    property ppvObj : Void**
    property sc : Int32
    property hMetaPict : LibC::IntPtrT
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @clsid : LibC::GUID, @lpszFile : Win32cr::Foundation::PSTR, @cchFile : UInt32, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*, @iid : LibC::GUID, @oleRender : UInt32, @lpFormatEtc : Win32cr::System::Com::FORMATETC*, @lpIOleClientSite : Void*, @lpIStorage : Void*, @ppvObj : Void**, @sc : Int32, @hMetaPict : LibC::IntPtrT)
    end
  end

  @[Extern]
  struct OLEUIPASTEENTRYW
    property fmtetc : Win32cr::System::Com::FORMATETC
    property lpstrFormatName : Win32cr::Foundation::PWSTR
    property lpstrResultText : Win32cr::Foundation::PWSTR
    property dwFlags : UInt32
    property dwScratchSpace : UInt32
    def initialize(@fmtetc : Win32cr::System::Com::FORMATETC, @lpstrFormatName : Win32cr::Foundation::PWSTR, @lpstrResultText : Win32cr::Foundation::PWSTR, @dwFlags : UInt32, @dwScratchSpace : UInt32)
    end
  end

  @[Extern]
  struct OLEUIPASTEENTRYA
    property fmtetc : Win32cr::System::Com::FORMATETC
    property lpstrFormatName : Win32cr::Foundation::PSTR
    property lpstrResultText : Win32cr::Foundation::PSTR
    property dwFlags : UInt32
    property dwScratchSpace : UInt32
    def initialize(@fmtetc : Win32cr::System::Com::FORMATETC, @lpstrFormatName : Win32cr::Foundation::PSTR, @lpstrResultText : Win32cr::Foundation::PSTR, @dwFlags : UInt32, @dwScratchSpace : UInt32)
    end
  end

  @[Extern]
  struct OLEUIPASTESPECIALW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpSrcDataObj : Void*
    property arrPasteEntries : Win32cr::System::Ole::OLEUIPASTEENTRYW*
    property cPasteEntries : Int32
    property arrLinkTypes : UInt32*
    property cLinkTypes : Int32
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    property nSelectedIndex : Int32
    property fLink : Win32cr::Foundation::BOOL
    property hMetaPict : LibC::IntPtrT
    property sizel : Win32cr::Foundation::SIZE
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @lpSrcDataObj : Void*, @arrPasteEntries : Win32cr::System::Ole::OLEUIPASTEENTRYW*, @cPasteEntries : Int32, @arrLinkTypes : UInt32*, @cLinkTypes : Int32, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*, @nSelectedIndex : Int32, @fLink : Win32cr::Foundation::BOOL, @hMetaPict : LibC::IntPtrT, @sizel : Win32cr::Foundation::SIZE)
    end
  end

  @[Extern]
  struct OLEUIPASTESPECIALA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpSrcDataObj : Void*
    property arrPasteEntries : Win32cr::System::Ole::OLEUIPASTEENTRYA*
    property cPasteEntries : Int32
    property arrLinkTypes : UInt32*
    property cLinkTypes : Int32
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    property nSelectedIndex : Int32
    property fLink : Win32cr::Foundation::BOOL
    property hMetaPict : LibC::IntPtrT
    property sizel : Win32cr::Foundation::SIZE
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @lpSrcDataObj : Void*, @arrPasteEntries : Win32cr::System::Ole::OLEUIPASTEENTRYA*, @cPasteEntries : Int32, @arrLinkTypes : UInt32*, @cLinkTypes : Int32, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*, @nSelectedIndex : Int32, @fLink : Win32cr::Foundation::BOOL, @hMetaPict : LibC::IntPtrT, @sizel : Win32cr::Foundation::SIZE)
    end
  end

  @[Extern]
  struct OLEUIEDITLINKSW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpOleUILinkContainer : Void*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @lpOleUILinkContainer : Void*)
    end
  end

  @[Extern]
  struct OLEUIEDITLINKSA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpOleUILinkContainer : Void*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @lpOleUILinkContainer : Void*)
    end
  end

  @[Extern]
  struct OLEUICHANGEICONW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property hMetaPict : LibC::IntPtrT
    property clsid : LibC::GUID
    property szIconExe : UInt16[260]
    property cchIconExe : Int32
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @hMetaPict : LibC::IntPtrT, @clsid : LibC::GUID, @szIconExe : UInt16[260], @cchIconExe : Int32)
    end
  end

  @[Extern]
  struct OLEUICHANGEICONA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property hMetaPict : LibC::IntPtrT
    property clsid : LibC::GUID
    property szIconExe : Win32cr::Foundation::CHAR[260]
    property cchIconExe : Int32
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @hMetaPict : LibC::IntPtrT, @clsid : LibC::GUID, @szIconExe : Win32cr::Foundation::CHAR[260], @cchIconExe : Int32)
    end
  end

  @[Extern]
  struct OLEUICONVERTW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property clsid : LibC::GUID
    property clsidConvertDefault : LibC::GUID
    property clsidActivateDefault : LibC::GUID
    property clsidNew : LibC::GUID
    property dvAspect : UInt32
    property wFormat : UInt16
    property fIsLinkedObject : Win32cr::Foundation::BOOL
    property hMetaPict : LibC::IntPtrT
    property lpszUserType : Win32cr::Foundation::PWSTR
    property fObjectsIconChanged : Win32cr::Foundation::BOOL
    property lpszDefLabel : Win32cr::Foundation::PWSTR
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @clsid : LibC::GUID, @clsidConvertDefault : LibC::GUID, @clsidActivateDefault : LibC::GUID, @clsidNew : LibC::GUID, @dvAspect : UInt32, @wFormat : UInt16, @fIsLinkedObject : Win32cr::Foundation::BOOL, @hMetaPict : LibC::IntPtrT, @lpszUserType : Win32cr::Foundation::PWSTR, @fObjectsIconChanged : Win32cr::Foundation::BOOL, @lpszDefLabel : Win32cr::Foundation::PWSTR, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*)
    end
  end

  @[Extern]
  struct OLEUICONVERTA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property clsid : LibC::GUID
    property clsidConvertDefault : LibC::GUID
    property clsidActivateDefault : LibC::GUID
    property clsidNew : LibC::GUID
    property dvAspect : UInt32
    property wFormat : UInt16
    property fIsLinkedObject : Win32cr::Foundation::BOOL
    property hMetaPict : LibC::IntPtrT
    property lpszUserType : Win32cr::Foundation::PSTR
    property fObjectsIconChanged : Win32cr::Foundation::BOOL
    property lpszDefLabel : Win32cr::Foundation::PSTR
    property cClsidExclude : UInt32
    property lpClsidExclude : LibC::GUID*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @clsid : LibC::GUID, @clsidConvertDefault : LibC::GUID, @clsidActivateDefault : LibC::GUID, @clsidNew : LibC::GUID, @dvAspect : UInt32, @wFormat : UInt16, @fIsLinkedObject : Win32cr::Foundation::BOOL, @hMetaPict : LibC::IntPtrT, @lpszUserType : Win32cr::Foundation::PSTR, @fObjectsIconChanged : Win32cr::Foundation::BOOL, @lpszDefLabel : Win32cr::Foundation::PSTR, @cClsidExclude : UInt32, @lpClsidExclude : LibC::GUID*)
    end
  end

  @[Extern]
  struct OLEUIBUSYW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property hTask : Win32cr::Media::HTASK
    property lphWndDialog : Win32cr::Foundation::HWND*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @hTask : Win32cr::Media::HTASK, @lphWndDialog : Win32cr::Foundation::HWND*)
    end
  end

  @[Extern]
  struct OLEUIBUSYA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property hTask : Win32cr::Media::HTASK
    property lphWndDialog : Win32cr::Foundation::HWND*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @hTask : Win32cr::Media::HTASK, @lphWndDialog : Win32cr::Foundation::HWND*)
    end
  end

  @[Extern]
  struct OLEUICHANGESOURCEW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PWSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PWSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpOFN : Win32cr::UI::Controls::Dialogs::OPENFILENAMEW*
    property dwReserved1 : UInt32[4]
    property lpOleUILinkContainer : Void*
    property dwLink : UInt32
    property lpszDisplayName : Win32cr::Foundation::PWSTR
    property nFileLength : UInt32
    property lpszFrom : Win32cr::Foundation::PWSTR
    property lpszTo : Win32cr::Foundation::PWSTR
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PWSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PWSTR, @hResource : Win32cr::Foundation::HRSRC, @lpOFN : Win32cr::UI::Controls::Dialogs::OPENFILENAMEW*, @dwReserved1 : UInt32[4], @lpOleUILinkContainer : Void*, @dwLink : UInt32, @lpszDisplayName : Win32cr::Foundation::PWSTR, @nFileLength : UInt32, @lpszFrom : Win32cr::Foundation::PWSTR, @lpszTo : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct OLEUICHANGESOURCEA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property hWndOwner : Win32cr::Foundation::HWND
    property lpszCaption : Win32cr::Foundation::PSTR
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property hInstance : Win32cr::Foundation::HINSTANCE
    property lpszTemplate : Win32cr::Foundation::PSTR
    property hResource : Win32cr::Foundation::HRSRC
    property lpOFN : Win32cr::UI::Controls::Dialogs::OPENFILENAMEA*
    property dwReserved1 : UInt32[4]
    property lpOleUILinkContainer : Void*
    property dwLink : UInt32
    property lpszDisplayName : Win32cr::Foundation::PSTR
    property nFileLength : UInt32
    property lpszFrom : Win32cr::Foundation::PSTR
    property lpszTo : Win32cr::Foundation::PSTR
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @hWndOwner : Win32cr::Foundation::HWND, @lpszCaption : Win32cr::Foundation::PSTR, @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @hInstance : Win32cr::Foundation::HINSTANCE, @lpszTemplate : Win32cr::Foundation::PSTR, @hResource : Win32cr::Foundation::HRSRC, @lpOFN : Win32cr::UI::Controls::Dialogs::OPENFILENAMEA*, @dwReserved1 : UInt32[4], @lpOleUILinkContainer : Void*, @dwLink : UInt32, @lpszDisplayName : Win32cr::Foundation::PSTR, @nFileLength : UInt32, @lpszFrom : Win32cr::Foundation::PSTR, @lpszTo : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct OLEUIGNRLPROPSW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*)
    end
  end

  @[Extern]
  struct OLEUIGNRLPROPSA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*)
    end
  end

  @[Extern]
  struct OLEUIVIEWPROPSW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*
    property nScaleMin : Int32
    property nScaleMax : Int32
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*, @nScaleMin : Int32, @nScaleMax : Int32)
    end
  end

  @[Extern]
  struct OLEUIVIEWPROPSA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*
    property nScaleMin : Int32
    property nScaleMax : Int32
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*, @nScaleMin : Int32, @nScaleMax : Int32)
    end
  end

  @[Extern]
  struct OLEUILINKPROPSW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSW*)
    end
  end

  @[Extern]
  struct OLEUILINKPROPSA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property dwReserved1 : UInt32[2]
    property lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK
    property lCustData : Win32cr::Foundation::LPARAM
    property dwReserved2 : UInt32[3]
    property lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @dwReserved1 : UInt32[2], @lpfnHook : Win32cr::System::Ole::LPFNOLEUIHOOK, @lCustData : Win32cr::Foundation::LPARAM, @dwReserved2 : UInt32[3], @lpOP : Win32cr::System::Ole::OLEUIOBJECTPROPSA*)
    end
  end

  @[Extern]
  struct OLEUIOBJECTPROPSW
    property cbStruct : UInt32
    property dwFlags : UInt32
    property lpPS : Win32cr::UI::Controls::PROPSHEETHEADERW_V2*
    property dwObject : UInt32
    property lpObjInfo : Void*
    property dwLink : UInt32
    property lpLinkInfo : Void*
    property lpGP : Win32cr::System::Ole::OLEUIGNRLPROPSW*
    property lpVP : Win32cr::System::Ole::OLEUIVIEWPROPSW*
    property lpLP : Win32cr::System::Ole::OLEUILINKPROPSW*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @lpPS : Win32cr::UI::Controls::PROPSHEETHEADERW_V2*, @dwObject : UInt32, @lpObjInfo : Void*, @dwLink : UInt32, @lpLinkInfo : Void*, @lpGP : Win32cr::System::Ole::OLEUIGNRLPROPSW*, @lpVP : Win32cr::System::Ole::OLEUIVIEWPROPSW*, @lpLP : Win32cr::System::Ole::OLEUILINKPROPSW*)
    end
  end

  @[Extern]
  struct OLEUIOBJECTPROPSA
    property cbStruct : UInt32
    property dwFlags : UInt32
    property lpPS : Win32cr::UI::Controls::PROPSHEETHEADERA_V2*
    property dwObject : UInt32
    property lpObjInfo : Void*
    property dwLink : UInt32
    property lpLinkInfo : Void*
    property lpGP : Win32cr::System::Ole::OLEUIGNRLPROPSA*
    property lpVP : Win32cr::System::Ole::OLEUIVIEWPROPSA*
    property lpLP : Win32cr::System::Ole::OLEUILINKPROPSA*
    def initialize(@cbStruct : UInt32, @dwFlags : UInt32, @lpPS : Win32cr::UI::Controls::PROPSHEETHEADERA_V2*, @dwObject : UInt32, @lpObjInfo : Void*, @dwLink : UInt32, @lpLinkInfo : Void*, @lpGP : Win32cr::System::Ole::OLEUIGNRLPROPSA*, @lpVP : Win32cr::System::Ole::OLEUIVIEWPROPSA*, @lpLP : Win32cr::System::Ole::OLEUILINKPROPSA*)
    end
  end

  @[Extern]
  record ICreateTypeInfoVtbl,
    query_interface : Proc(ICreateTypeInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateTypeInfo*, UInt32),
    release : Proc(ICreateTypeInfo*, UInt32),
    set_guid : Proc(ICreateTypeInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_type_flags : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::HRESULT),
    set_doc_string : Proc(ICreateTypeInfo*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_context : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::HRESULT),
    set_version : Proc(ICreateTypeInfo*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    add_ref_type_info : Proc(ICreateTypeInfo*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    add_func_desc : Proc(ICreateTypeInfo*, UInt32, Win32cr::System::Com::FUNCDESC*, Win32cr::Foundation::HRESULT),
    add_impl_type : Proc(ICreateTypeInfo*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_impl_type_flags : Proc(ICreateTypeInfo*, UInt32, Int32, Win32cr::Foundation::HRESULT),
    set_alignment : Proc(ICreateTypeInfo*, UInt16, Win32cr::Foundation::HRESULT),
    set_schema : Proc(ICreateTypeInfo*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_var_desc : Proc(ICreateTypeInfo*, UInt32, Win32cr::System::Com::VARDESC*, Win32cr::Foundation::HRESULT),
    set_func_and_param_names : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::HRESULT),
    set_var_name : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_type_desc_alias : Proc(ICreateTypeInfo*, Win32cr::System::Com::TYPEDESC*, Win32cr::Foundation::HRESULT),
    define_func_as_dll_entry : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_func_doc_string : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_var_doc_string : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_func_help_context : Proc(ICreateTypeInfo*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_var_help_context : Proc(ICreateTypeInfo*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_mops : Proc(ICreateTypeInfo*, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_type_idldesc : Proc(ICreateTypeInfo*, Win32cr::System::Com::IDLDESC*, Win32cr::Foundation::HRESULT),
    lay_out : Proc(ICreateTypeInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateTypeInfo, lpVtbl : ICreateTypeInfoVtbl* do
    GUID = LibC::GUID.new(0x20405_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ICreateTypeInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateTypeInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateTypeInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_guid(this : ICreateTypeInfo*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guid)
    end
    def set_type_flags(this : ICreateTypeInfo*, uTypeFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_flags.call(this, uTypeFlags)
    end
    def set_doc_string(this : ICreateTypeInfo*, pStrDoc : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_doc_string.call(this, pStrDoc)
    end
    def set_help_context(this : ICreateTypeInfo*, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_context.call(this, dwHelpContext)
    end
    def set_version(this : ICreateTypeInfo*, wMajorVerNum : UInt16, wMinorVerNum : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_version.call(this, wMajorVerNum, wMinorVerNum)
    end
    def add_ref_type_info(this : ICreateTypeInfo*, pTInfo : Void*, phRefType : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_type_info.call(this, pTInfo, phRefType)
    end
    def add_func_desc(this : ICreateTypeInfo*, index : UInt32, pFuncDesc : Win32cr::System::Com::FUNCDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_func_desc.call(this, index, pFuncDesc)
    end
    def add_impl_type(this : ICreateTypeInfo*, index : UInt32, hRefType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_impl_type.call(this, index, hRefType)
    end
    def set_impl_type_flags(this : ICreateTypeInfo*, index : UInt32, implTypeFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_impl_type_flags.call(this, index, implTypeFlags)
    end
    def set_alignment(this : ICreateTypeInfo*, cbAlignment : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alignment.call(this, cbAlignment)
    end
    def set_schema(this : ICreateTypeInfo*, pStrSchema : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_schema.call(this, pStrSchema)
    end
    def add_var_desc(this : ICreateTypeInfo*, index : UInt32, pVarDesc : Win32cr::System::Com::VARDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_var_desc.call(this, index, pVarDesc)
    end
    def set_func_and_param_names(this : ICreateTypeInfo*, index : UInt32, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_and_param_names.call(this, index, rgszNames, cNames)
    end
    def set_var_name(this : ICreateTypeInfo*, index : UInt32, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_name.call(this, index, szName)
    end
    def set_type_desc_alias(this : ICreateTypeInfo*, pTDescAlias : Win32cr::System::Com::TYPEDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_desc_alias.call(this, pTDescAlias)
    end
    def define_func_as_dll_entry(this : ICreateTypeInfo*, index : UInt32, szDllName : Win32cr::Foundation::PWSTR, szProcName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.define_func_as_dll_entry.call(this, index, szDllName, szProcName)
    end
    def set_func_doc_string(this : ICreateTypeInfo*, index : UInt32, szDocString : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_doc_string.call(this, index, szDocString)
    end
    def set_var_doc_string(this : ICreateTypeInfo*, index : UInt32, szDocString : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_doc_string.call(this, index, szDocString)
    end
    def set_func_help_context(this : ICreateTypeInfo*, index : UInt32, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_help_context.call(this, index, dwHelpContext)
    end
    def set_var_help_context(this : ICreateTypeInfo*, index : UInt32, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_help_context.call(this, index, dwHelpContext)
    end
    def set_mops(this : ICreateTypeInfo*, index : UInt32, bstrMops : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mops.call(this, index, bstrMops)
    end
    def set_type_idldesc(this : ICreateTypeInfo*, pIdlDesc : Win32cr::System::Com::IDLDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_idldesc.call(this, pIdlDesc)
    end
    def lay_out(this : ICreateTypeInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lay_out.call(this)
    end

  end

  @[Extern]
  record ICreateTypeInfo2Vtbl,
    query_interface : Proc(ICreateTypeInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateTypeInfo2*, UInt32),
    release : Proc(ICreateTypeInfo2*, UInt32),
    set_guid : Proc(ICreateTypeInfo2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_type_flags : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    set_doc_string : Proc(ICreateTypeInfo2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_context : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    set_version : Proc(ICreateTypeInfo2*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    add_ref_type_info : Proc(ICreateTypeInfo2*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    add_func_desc : Proc(ICreateTypeInfo2*, UInt32, Win32cr::System::Com::FUNCDESC*, Win32cr::Foundation::HRESULT),
    add_impl_type : Proc(ICreateTypeInfo2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_impl_type_flags : Proc(ICreateTypeInfo2*, UInt32, Int32, Win32cr::Foundation::HRESULT),
    set_alignment : Proc(ICreateTypeInfo2*, UInt16, Win32cr::Foundation::HRESULT),
    set_schema : Proc(ICreateTypeInfo2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_var_desc : Proc(ICreateTypeInfo2*, UInt32, Win32cr::System::Com::VARDESC*, Win32cr::Foundation::HRESULT),
    set_func_and_param_names : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::HRESULT),
    set_var_name : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_type_desc_alias : Proc(ICreateTypeInfo2*, Win32cr::System::Com::TYPEDESC*, Win32cr::Foundation::HRESULT),
    define_func_as_dll_entry : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_func_doc_string : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_var_doc_string : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_func_help_context : Proc(ICreateTypeInfo2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_var_help_context : Proc(ICreateTypeInfo2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_mops : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_type_idldesc : Proc(ICreateTypeInfo2*, Win32cr::System::Com::IDLDESC*, Win32cr::Foundation::HRESULT),
    lay_out : Proc(ICreateTypeInfo2*, Win32cr::Foundation::HRESULT),
    delete_func_desc : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    delete_func_desc_by_mem_id : Proc(ICreateTypeInfo2*, Int32, Win32cr::System::Com::INVOKEKIND, Win32cr::Foundation::HRESULT),
    delete_var_desc : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    delete_var_desc_by_mem_id : Proc(ICreateTypeInfo2*, Int32, Win32cr::Foundation::HRESULT),
    delete_impl_type : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    set_cust_data : Proc(ICreateTypeInfo2*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_func_cust_data : Proc(ICreateTypeInfo2*, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_param_cust_data : Proc(ICreateTypeInfo2*, UInt32, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_var_cust_data : Proc(ICreateTypeInfo2*, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_impl_type_cust_data : Proc(ICreateTypeInfo2*, UInt32, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_help_string_context : Proc(ICreateTypeInfo2*, UInt32, Win32cr::Foundation::HRESULT),
    set_func_help_string_context : Proc(ICreateTypeInfo2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_var_help_string_context : Proc(ICreateTypeInfo2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    invalidate : Proc(ICreateTypeInfo2*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ICreateTypeInfo2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateTypeInfo2, lpVtbl : ICreateTypeInfo2Vtbl* do
    GUID = LibC::GUID.new(0x2040e_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ICreateTypeInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateTypeInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateTypeInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_guid(this : ICreateTypeInfo2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guid)
    end
    def set_type_flags(this : ICreateTypeInfo2*, uTypeFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_flags.call(this, uTypeFlags)
    end
    def set_doc_string(this : ICreateTypeInfo2*, pStrDoc : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_doc_string.call(this, pStrDoc)
    end
    def set_help_context(this : ICreateTypeInfo2*, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_context.call(this, dwHelpContext)
    end
    def set_version(this : ICreateTypeInfo2*, wMajorVerNum : UInt16, wMinorVerNum : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_version.call(this, wMajorVerNum, wMinorVerNum)
    end
    def add_ref_type_info(this : ICreateTypeInfo2*, pTInfo : Void*, phRefType : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_type_info.call(this, pTInfo, phRefType)
    end
    def add_func_desc(this : ICreateTypeInfo2*, index : UInt32, pFuncDesc : Win32cr::System::Com::FUNCDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_func_desc.call(this, index, pFuncDesc)
    end
    def add_impl_type(this : ICreateTypeInfo2*, index : UInt32, hRefType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_impl_type.call(this, index, hRefType)
    end
    def set_impl_type_flags(this : ICreateTypeInfo2*, index : UInt32, implTypeFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_impl_type_flags.call(this, index, implTypeFlags)
    end
    def set_alignment(this : ICreateTypeInfo2*, cbAlignment : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alignment.call(this, cbAlignment)
    end
    def set_schema(this : ICreateTypeInfo2*, pStrSchema : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_schema.call(this, pStrSchema)
    end
    def add_var_desc(this : ICreateTypeInfo2*, index : UInt32, pVarDesc : Win32cr::System::Com::VARDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_var_desc.call(this, index, pVarDesc)
    end
    def set_func_and_param_names(this : ICreateTypeInfo2*, index : UInt32, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_and_param_names.call(this, index, rgszNames, cNames)
    end
    def set_var_name(this : ICreateTypeInfo2*, index : UInt32, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_name.call(this, index, szName)
    end
    def set_type_desc_alias(this : ICreateTypeInfo2*, pTDescAlias : Win32cr::System::Com::TYPEDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_desc_alias.call(this, pTDescAlias)
    end
    def define_func_as_dll_entry(this : ICreateTypeInfo2*, index : UInt32, szDllName : Win32cr::Foundation::PWSTR, szProcName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.define_func_as_dll_entry.call(this, index, szDllName, szProcName)
    end
    def set_func_doc_string(this : ICreateTypeInfo2*, index : UInt32, szDocString : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_doc_string.call(this, index, szDocString)
    end
    def set_var_doc_string(this : ICreateTypeInfo2*, index : UInt32, szDocString : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_doc_string.call(this, index, szDocString)
    end
    def set_func_help_context(this : ICreateTypeInfo2*, index : UInt32, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_help_context.call(this, index, dwHelpContext)
    end
    def set_var_help_context(this : ICreateTypeInfo2*, index : UInt32, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_help_context.call(this, index, dwHelpContext)
    end
    def set_mops(this : ICreateTypeInfo2*, index : UInt32, bstrMops : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mops.call(this, index, bstrMops)
    end
    def set_type_idldesc(this : ICreateTypeInfo2*, pIdlDesc : Win32cr::System::Com::IDLDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type_idldesc.call(this, pIdlDesc)
    end
    def lay_out(this : ICreateTypeInfo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lay_out.call(this)
    end
    def delete_func_desc(this : ICreateTypeInfo2*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_func_desc.call(this, index)
    end
    def delete_func_desc_by_mem_id(this : ICreateTypeInfo2*, memid : Int32, invKind : Win32cr::System::Com::INVOKEKIND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_func_desc_by_mem_id.call(this, memid, invKind)
    end
    def delete_var_desc(this : ICreateTypeInfo2*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_var_desc.call(this, index)
    end
    def delete_var_desc_by_mem_id(this : ICreateTypeInfo2*, memid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_var_desc_by_mem_id.call(this, memid)
    end
    def delete_impl_type(this : ICreateTypeInfo2*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_impl_type.call(this, index)
    end
    def set_cust_data(this : ICreateTypeInfo2*, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cust_data.call(this, guid, pVarVal)
    end
    def set_func_cust_data(this : ICreateTypeInfo2*, index : UInt32, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_cust_data.call(this, index, guid, pVarVal)
    end
    def set_param_cust_data(this : ICreateTypeInfo2*, indexFunc : UInt32, indexParam : UInt32, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_param_cust_data.call(this, indexFunc, indexParam, guid, pVarVal)
    end
    def set_var_cust_data(this : ICreateTypeInfo2*, index : UInt32, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_cust_data.call(this, index, guid, pVarVal)
    end
    def set_impl_type_cust_data(this : ICreateTypeInfo2*, index : UInt32, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_impl_type_cust_data.call(this, index, guid, pVarVal)
    end
    def set_help_string_context(this : ICreateTypeInfo2*, dwHelpStringContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_string_context.call(this, dwHelpStringContext)
    end
    def set_func_help_string_context(this : ICreateTypeInfo2*, index : UInt32, dwHelpStringContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_func_help_string_context.call(this, index, dwHelpStringContext)
    end
    def set_var_help_string_context(this : ICreateTypeInfo2*, index : UInt32, dwHelpStringContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_var_help_string_context.call(this, index, dwHelpStringContext)
    end
    def invalidate(this : ICreateTypeInfo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate.call(this)
    end
    def set_name(this : ICreateTypeInfo2*, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, szName)
    end

  end

  @[Extern]
  record ICreateTypeLibVtbl,
    query_interface : Proc(ICreateTypeLib*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateTypeLib*, UInt32),
    release : Proc(ICreateTypeLib*, UInt32),
    create_type_info : Proc(ICreateTypeLib*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::TYPEKIND, Void**, Win32cr::Foundation::HRESULT),
    set_name : Proc(ICreateTypeLib*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_version : Proc(ICreateTypeLib*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    set_guid : Proc(ICreateTypeLib*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_doc_string : Proc(ICreateTypeLib*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_file_name : Proc(ICreateTypeLib*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_context : Proc(ICreateTypeLib*, UInt32, Win32cr::Foundation::HRESULT),
    set_lcid : Proc(ICreateTypeLib*, UInt32, Win32cr::Foundation::HRESULT),
    set_lib_flags : Proc(ICreateTypeLib*, UInt32, Win32cr::Foundation::HRESULT),
    save_all_changes : Proc(ICreateTypeLib*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateTypeLib, lpVtbl : ICreateTypeLibVtbl* do
    GUID = LibC::GUID.new(0x20406_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ICreateTypeLib*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateTypeLib*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateTypeLib*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_type_info(this : ICreateTypeLib*, szName : Win32cr::Foundation::PWSTR, tkind : Win32cr::System::Com::TYPEKIND, ppCTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_type_info.call(this, szName, tkind, ppCTInfo)
    end
    def set_name(this : ICreateTypeLib*, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, szName)
    end
    def set_version(this : ICreateTypeLib*, wMajorVerNum : UInt16, wMinorVerNum : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_version.call(this, wMajorVerNum, wMinorVerNum)
    end
    def set_guid(this : ICreateTypeLib*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guid)
    end
    def set_doc_string(this : ICreateTypeLib*, szDoc : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_doc_string.call(this, szDoc)
    end
    def set_help_file_name(this : ICreateTypeLib*, szHelpFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_file_name.call(this, szHelpFileName)
    end
    def set_help_context(this : ICreateTypeLib*, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_context.call(this, dwHelpContext)
    end
    def set_lcid(this : ICreateTypeLib*, lcid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_lcid.call(this, lcid)
    end
    def set_lib_flags(this : ICreateTypeLib*, uLibFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_lib_flags.call(this, uLibFlags)
    end
    def save_all_changes(this : ICreateTypeLib*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_all_changes.call(this)
    end

  end

  @[Extern]
  record ICreateTypeLib2Vtbl,
    query_interface : Proc(ICreateTypeLib2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateTypeLib2*, UInt32),
    release : Proc(ICreateTypeLib2*, UInt32),
    create_type_info : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::TYPEKIND, Void**, Win32cr::Foundation::HRESULT),
    set_name : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_version : Proc(ICreateTypeLib2*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    set_guid : Proc(ICreateTypeLib2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_doc_string : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_file_name : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_context : Proc(ICreateTypeLib2*, UInt32, Win32cr::Foundation::HRESULT),
    set_lcid : Proc(ICreateTypeLib2*, UInt32, Win32cr::Foundation::HRESULT),
    set_lib_flags : Proc(ICreateTypeLib2*, UInt32, Win32cr::Foundation::HRESULT),
    save_all_changes : Proc(ICreateTypeLib2*, Win32cr::Foundation::HRESULT),
    delete_type_info : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_cust_data : Proc(ICreateTypeLib2*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_help_string_context : Proc(ICreateTypeLib2*, UInt32, Win32cr::Foundation::HRESULT),
    set_help_string_dll : Proc(ICreateTypeLib2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateTypeLib2, lpVtbl : ICreateTypeLib2Vtbl* do
    GUID = LibC::GUID.new(0x2040f_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ICreateTypeLib2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateTypeLib2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateTypeLib2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_type_info(this : ICreateTypeLib2*, szName : Win32cr::Foundation::PWSTR, tkind : Win32cr::System::Com::TYPEKIND, ppCTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_type_info.call(this, szName, tkind, ppCTInfo)
    end
    def set_name(this : ICreateTypeLib2*, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, szName)
    end
    def set_version(this : ICreateTypeLib2*, wMajorVerNum : UInt16, wMinorVerNum : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_version.call(this, wMajorVerNum, wMinorVerNum)
    end
    def set_guid(this : ICreateTypeLib2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guid)
    end
    def set_doc_string(this : ICreateTypeLib2*, szDoc : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_doc_string.call(this, szDoc)
    end
    def set_help_file_name(this : ICreateTypeLib2*, szHelpFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_file_name.call(this, szHelpFileName)
    end
    def set_help_context(this : ICreateTypeLib2*, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_context.call(this, dwHelpContext)
    end
    def set_lcid(this : ICreateTypeLib2*, lcid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_lcid.call(this, lcid)
    end
    def set_lib_flags(this : ICreateTypeLib2*, uLibFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_lib_flags.call(this, uLibFlags)
    end
    def save_all_changes(this : ICreateTypeLib2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_all_changes.call(this)
    end
    def delete_type_info(this : ICreateTypeLib2*, szName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_type_info.call(this, szName)
    end
    def set_cust_data(this : ICreateTypeLib2*, guid : LibC::GUID*, pVarVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cust_data.call(this, guid, pVarVal)
    end
    def set_help_string_context(this : ICreateTypeLib2*, dwHelpStringContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_string_context.call(this, dwHelpStringContext)
    end
    def set_help_string_dll(this : ICreateTypeLib2*, szFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_string_dll.call(this, szFileName)
    end

  end

  @[Extern]
  record IEnumVARIANTVtbl,
    query_interface : Proc(IEnumVARIANT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumVARIANT*, UInt32),
    release : Proc(IEnumVARIANT*, UInt32),
    next__ : Proc(IEnumVARIANT*, UInt32, Win32cr::System::Com::VARIANT*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumVARIANT*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumVARIANT*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumVARIANT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumVARIANT, lpVtbl : IEnumVARIANTVtbl* do
    GUID = LibC::GUID.new(0x20404_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IEnumVARIANT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumVARIANT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumVARIANT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumVARIANT*, celt : UInt32, rgVar : Win32cr::System::Com::VARIANT*, pCeltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgVar, pCeltFetched)
    end
    def skip(this : IEnumVARIANT*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumVARIANT*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITypeChangeEventsVtbl,
    query_interface : Proc(ITypeChangeEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITypeChangeEvents*, UInt32),
    release : Proc(ITypeChangeEvents*, UInt32),
    request_type_change : Proc(ITypeChangeEvents*, Win32cr::System::Ole::CHANGEKIND, Void*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::HRESULT),
    after_type_change : Proc(ITypeChangeEvents*, Win32cr::System::Ole::CHANGEKIND, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITypeChangeEvents, lpVtbl : ITypeChangeEventsVtbl* do
    GUID = LibC::GUID.new(0x20410_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ITypeChangeEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITypeChangeEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITypeChangeEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def request_type_change(this : ITypeChangeEvents*, changeKind : Win32cr::System::Ole::CHANGEKIND, pTInfoBefore : Void*, pStrName : Win32cr::Foundation::PWSTR, pfCancel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_type_change.call(this, changeKind, pTInfoBefore, pStrName, pfCancel)
    end
    def after_type_change(this : ITypeChangeEvents*, changeKind : Win32cr::System::Ole::CHANGEKIND, pTInfoAfter : Void*, pStrName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.after_type_change.call(this, changeKind, pTInfoAfter, pStrName)
    end

  end

  @[Extern]
  record ICreateErrorInfoVtbl,
    query_interface : Proc(ICreateErrorInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateErrorInfo*, UInt32),
    release : Proc(ICreateErrorInfo*, UInt32),
    set_guid : Proc(ICreateErrorInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_source : Proc(ICreateErrorInfo*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_description : Proc(ICreateErrorInfo*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_file : Proc(ICreateErrorInfo*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_help_context : Proc(ICreateErrorInfo*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateErrorInfo, lpVtbl : ICreateErrorInfoVtbl* do
    GUID = LibC::GUID.new(0x22f03340_u32, 0x547d_u16, 0x101b_u16, StaticArray[0x8e_u8, 0x65_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x2b_u8, 0xd1_u8, 0x19_u8])
    def query_interface(this : ICreateErrorInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateErrorInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateErrorInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_guid(this : ICreateErrorInfo*, rguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, rguid)
    end
    def set_source(this : ICreateErrorInfo*, szSource : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source.call(this, szSource)
    end
    def set_description(this : ICreateErrorInfo*, szDescription : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_description.call(this, szDescription)
    end
    def set_help_file(this : ICreateErrorInfo*, szHelpFile : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_file.call(this, szHelpFile)
    end
    def set_help_context(this : ICreateErrorInfo*, dwHelpContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_help_context.call(this, dwHelpContext)
    end

  end

  @[Extern]
  record ITypeFactoryVtbl,
    query_interface : Proc(ITypeFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITypeFactory*, UInt32),
    release : Proc(ITypeFactory*, UInt32),
    create_from_type_info : Proc(ITypeFactory*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITypeFactory, lpVtbl : ITypeFactoryVtbl* do
    GUID = LibC::GUID.new(0x2e_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ITypeFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITypeFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITypeFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_from_type_info(this : ITypeFactory*, pTypeInfo : Void*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_from_type_info.call(this, pTypeInfo, riid, ppv)
    end

  end

  @[Extern]
  record ITypeMarshalVtbl,
    query_interface : Proc(ITypeMarshal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITypeMarshal*, UInt32),
    release : Proc(ITypeMarshal*, UInt32),
    size : Proc(ITypeMarshal*, Void*, UInt32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    marshal : Proc(ITypeMarshal*, Void*, UInt32, Void*, UInt32, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    unmarshal : Proc(ITypeMarshal*, Void*, UInt32, UInt32, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    free : Proc(ITypeMarshal*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITypeMarshal, lpVtbl : ITypeMarshalVtbl* do
    GUID = LibC::GUID.new(0x2d_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : ITypeMarshal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITypeMarshal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITypeMarshal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def size(this : ITypeMarshal*, pvType : Void*, dwDestContext : UInt32, pvDestContext : Void*, pSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.size.call(this, pvType, dwDestContext, pvDestContext, pSize)
    end
    def marshal(this : ITypeMarshal*, pvType : Void*, dwDestContext : UInt32, pvDestContext : Void*, cbBufferLength : UInt32, pBuffer : UInt8*, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.marshal.call(this, pvType, dwDestContext, pvDestContext, cbBufferLength, pBuffer, pcbWritten)
    end
    def unmarshal(this : ITypeMarshal*, pvType : Void*, dwFlags : UInt32, cbBufferLength : UInt32, pBuffer : UInt8*, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmarshal.call(this, pvType, dwFlags, cbBufferLength, pBuffer, pcbRead)
    end
    def free(this : ITypeMarshal*, pvType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free.call(this, pvType)
    end

  end

  @[Extern]
  record IRecordInfoVtbl,
    query_interface : Proc(IRecordInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRecordInfo*, UInt32),
    release : Proc(IRecordInfo*, UInt32),
    record_init : Proc(IRecordInfo*, Void*, Win32cr::Foundation::HRESULT),
    record_clear : Proc(IRecordInfo*, Void*, Win32cr::Foundation::HRESULT),
    record_copy : Proc(IRecordInfo*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IRecordInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IRecordInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IRecordInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IRecordInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_field : Proc(IRecordInfo*, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_field_no_copy : Proc(IRecordInfo*, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Void**, Win32cr::Foundation::HRESULT),
    put_field : Proc(IRecordInfo*, UInt32, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_field_no_copy : Proc(IRecordInfo*, UInt32, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_field_names : Proc(IRecordInfo*, UInt32*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    is_matching_type : Proc(IRecordInfo*, Void*, Win32cr::Foundation::BOOL),
    record_create : Proc(IRecordInfo*, Void*),
    record_create_copy : Proc(IRecordInfo*, Void*, Void**, Win32cr::Foundation::HRESULT),
    record_destroy : Proc(IRecordInfo*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRecordInfo, lpVtbl : IRecordInfoVtbl* do
    GUID = LibC::GUID.new(0x2f_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IRecordInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRecordInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRecordInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def record_init(this : IRecordInfo*, pvNew : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_init.call(this, pvNew)
    end
    def record_clear(this : IRecordInfo*, pvExisting : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_clear.call(this, pvExisting)
    end
    def record_copy(this : IRecordInfo*, pvExisting : Void*, pvNew : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_copy.call(this, pvExisting, pvNew)
    end
    def get_guid(this : IRecordInfo*, pguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, pguid)
    end
    def get_name(this : IRecordInfo*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_size(this : IRecordInfo*, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pcbSize)
    end
    def get_type_info(this : IRecordInfo*, ppTypeInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, ppTypeInfo)
    end
    def get_field(this : IRecordInfo*, pvData : Void*, szFieldName : Win32cr::Foundation::PWSTR, pvarField : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field.call(this, pvData, szFieldName, pvarField)
    end
    def get_field_no_copy(this : IRecordInfo*, pvData : Void*, szFieldName : Win32cr::Foundation::PWSTR, pvarField : Win32cr::System::Com::VARIANT*, ppvDataCArray : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_no_copy.call(this, pvData, szFieldName, pvarField, ppvDataCArray)
    end
    def put_field(this : IRecordInfo*, wFlags : UInt32, pvData : Void*, szFieldName : Win32cr::Foundation::PWSTR, pvarField : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_field.call(this, wFlags, pvData, szFieldName, pvarField)
    end
    def put_field_no_copy(this : IRecordInfo*, wFlags : UInt32, pvData : Void*, szFieldName : Win32cr::Foundation::PWSTR, pvarField : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_field_no_copy.call(this, wFlags, pvData, szFieldName, pvarField)
    end
    def get_field_names(this : IRecordInfo*, pcNames : UInt32*, rgBstrNames : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field_names.call(this, pcNames, rgBstrNames)
    end
    def is_matching_type(this : IRecordInfo*, pRecordInfo : Void*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_matching_type.call(this, pRecordInfo)
    end
    def record_create(this : IRecordInfo*) : Void*
      @lpVtbl.try &.value.record_create.call(this)
    end
    def record_create_copy(this : IRecordInfo*, pvSource : Void*, ppvDest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_create_copy.call(this, pvSource, ppvDest)
    end
    def record_destroy(this : IRecordInfo*, pvRecord : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_destroy.call(this, pvRecord)
    end

  end

  @[Extern]
  record IOleAdviseHolderVtbl,
    query_interface : Proc(IOleAdviseHolder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleAdviseHolder*, UInt32),
    release : Proc(IOleAdviseHolder*, UInt32),
    advise : Proc(IOleAdviseHolder*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unadvise : Proc(IOleAdviseHolder*, UInt32, Win32cr::Foundation::HRESULT),
    enum_advise : Proc(IOleAdviseHolder*, Void**, Win32cr::Foundation::HRESULT),
    send_on_rename : Proc(IOleAdviseHolder*, Void*, Win32cr::Foundation::HRESULT),
    send_on_save : Proc(IOleAdviseHolder*, Win32cr::Foundation::HRESULT),
    send_on_close : Proc(IOleAdviseHolder*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleAdviseHolder, lpVtbl : IOleAdviseHolderVtbl* do
    GUID = LibC::GUID.new(0x111_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleAdviseHolder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleAdviseHolder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleAdviseHolder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def advise(this : IOleAdviseHolder*, pAdvise : Void*, pdwConnection : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise.call(this, pAdvise, pdwConnection)
    end
    def unadvise(this : IOleAdviseHolder*, dwConnection : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unadvise.call(this, dwConnection)
    end
    def enum_advise(this : IOleAdviseHolder*, ppenumAdvise : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_advise.call(this, ppenumAdvise)
    end
    def send_on_rename(this : IOleAdviseHolder*, pmk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_on_rename.call(this, pmk)
    end
    def send_on_save(this : IOleAdviseHolder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_on_save.call(this)
    end
    def send_on_close(this : IOleAdviseHolder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_on_close.call(this)
    end

  end

  @[Extern]
  record IOleCacheVtbl,
    query_interface : Proc(IOleCache*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleCache*, UInt32),
    release : Proc(IOleCache*, UInt32),
    cache : Proc(IOleCache*, Win32cr::System::Com::FORMATETC*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    uncache : Proc(IOleCache*, UInt32, Win32cr::Foundation::HRESULT),
    enum_cache : Proc(IOleCache*, Void**, Win32cr::Foundation::HRESULT),
    init_cache : Proc(IOleCache*, Void*, Win32cr::Foundation::HRESULT),
    set_data : Proc(IOleCache*, Win32cr::System::Com::FORMATETC*, Win32cr::System::Com::STGMEDIUM*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleCache, lpVtbl : IOleCacheVtbl* do
    GUID = LibC::GUID.new(0x11e_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleCache*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleCache*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleCache*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cache(this : IOleCache*, pformatetc : Win32cr::System::Com::FORMATETC*, advf : UInt32, pdwConnection : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cache.call(this, pformatetc, advf, pdwConnection)
    end
    def uncache(this : IOleCache*, dwConnection : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uncache.call(this, dwConnection)
    end
    def enum_cache(this : IOleCache*, ppenumSTATDATA : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cache.call(this, ppenumSTATDATA)
    end
    def init_cache(this : IOleCache*, pDataObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_cache.call(this, pDataObject)
    end
    def set_data(this : IOleCache*, pformatetc : Win32cr::System::Com::FORMATETC*, pmedium : Win32cr::System::Com::STGMEDIUM*, fRelease : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data.call(this, pformatetc, pmedium, fRelease)
    end

  end

  @[Extern]
  record IOleCache2Vtbl,
    query_interface : Proc(IOleCache2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleCache2*, UInt32),
    release : Proc(IOleCache2*, UInt32),
    cache : Proc(IOleCache2*, Win32cr::System::Com::FORMATETC*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    uncache : Proc(IOleCache2*, UInt32, Win32cr::Foundation::HRESULT),
    enum_cache : Proc(IOleCache2*, Void**, Win32cr::Foundation::HRESULT),
    init_cache : Proc(IOleCache2*, Void*, Win32cr::Foundation::HRESULT),
    set_data : Proc(IOleCache2*, Win32cr::System::Com::FORMATETC*, Win32cr::System::Com::STGMEDIUM*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    update_cache : Proc(IOleCache2*, Void*, Win32cr::System::Ole::UPDFCACHE_FLAGS, Void*, Win32cr::Foundation::HRESULT),
    discard_cache : Proc(IOleCache2*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleCache2, lpVtbl : IOleCache2Vtbl* do
    GUID = LibC::GUID.new(0x128_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleCache2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleCache2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleCache2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cache(this : IOleCache2*, pformatetc : Win32cr::System::Com::FORMATETC*, advf : UInt32, pdwConnection : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cache.call(this, pformatetc, advf, pdwConnection)
    end
    def uncache(this : IOleCache2*, dwConnection : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uncache.call(this, dwConnection)
    end
    def enum_cache(this : IOleCache2*, ppenumSTATDATA : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cache.call(this, ppenumSTATDATA)
    end
    def init_cache(this : IOleCache2*, pDataObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_cache.call(this, pDataObject)
    end
    def set_data(this : IOleCache2*, pformatetc : Win32cr::System::Com::FORMATETC*, pmedium : Win32cr::System::Com::STGMEDIUM*, fRelease : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data.call(this, pformatetc, pmedium, fRelease)
    end
    def update_cache(this : IOleCache2*, pDataObject : Void*, grfUpdf : Win32cr::System::Ole::UPDFCACHE_FLAGS, pReserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_cache.call(this, pDataObject, grfUpdf, pReserved)
    end
    def discard_cache(this : IOleCache2*, dwDiscardOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_cache.call(this, dwDiscardOptions)
    end

  end

  @[Extern]
  record IOleCacheControlVtbl,
    query_interface : Proc(IOleCacheControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleCacheControl*, UInt32),
    release : Proc(IOleCacheControl*, UInt32),
    on_run : Proc(IOleCacheControl*, Void*, Win32cr::Foundation::HRESULT),
    on_stop : Proc(IOleCacheControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleCacheControl, lpVtbl : IOleCacheControlVtbl* do
    GUID = LibC::GUID.new(0x129_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleCacheControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleCacheControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleCacheControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_run(this : IOleCacheControl*, pDataObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_run.call(this, pDataObject)
    end
    def on_stop(this : IOleCacheControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_stop.call(this)
    end

  end

  @[Extern]
  record IParseDisplayNameVtbl,
    query_interface : Proc(IParseDisplayName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IParseDisplayName*, UInt32),
    release : Proc(IParseDisplayName*, UInt32),
    parse_display_name : Proc(IParseDisplayName*, Void*, Win32cr::Foundation::PWSTR, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IParseDisplayName, lpVtbl : IParseDisplayNameVtbl* do
    GUID = LibC::GUID.new(0x11a_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IParseDisplayName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IParseDisplayName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IParseDisplayName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_display_name(this : IParseDisplayName*, pbc : Void*, pszDisplayName : Win32cr::Foundation::PWSTR, pchEaten : UInt32*, ppmkOut : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_display_name.call(this, pbc, pszDisplayName, pchEaten, ppmkOut)
    end

  end

  @[Extern]
  record IOleContainerVtbl,
    query_interface : Proc(IOleContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleContainer*, UInt32),
    release : Proc(IOleContainer*, UInt32),
    parse_display_name : Proc(IOleContainer*, Void*, Win32cr::Foundation::PWSTR, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    enum_objects : Proc(IOleContainer*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    lock_container : Proc(IOleContainer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleContainer, lpVtbl : IOleContainerVtbl* do
    GUID = LibC::GUID.new(0x11b_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_display_name(this : IOleContainer*, pbc : Void*, pszDisplayName : Win32cr::Foundation::PWSTR, pchEaten : UInt32*, ppmkOut : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_display_name.call(this, pbc, pszDisplayName, pchEaten, ppmkOut)
    end
    def enum_objects(this : IOleContainer*, grfFlags : UInt32, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_objects.call(this, grfFlags, ppenum)
    end
    def lock_container(this : IOleContainer*, fLock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_container.call(this, fLock)
    end

  end

  @[Extern]
  record IOleClientSiteVtbl,
    query_interface : Proc(IOleClientSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleClientSite*, UInt32),
    release : Proc(IOleClientSite*, UInt32),
    save_object : Proc(IOleClientSite*, Win32cr::Foundation::HRESULT),
    get_moniker : Proc(IOleClientSite*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_container : Proc(IOleClientSite*, Void**, Win32cr::Foundation::HRESULT),
    show_object : Proc(IOleClientSite*, Win32cr::Foundation::HRESULT),
    on_show_window : Proc(IOleClientSite*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    request_new_object_layout : Proc(IOleClientSite*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleClientSite, lpVtbl : IOleClientSiteVtbl* do
    GUID = LibC::GUID.new(0x118_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleClientSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleClientSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleClientSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def save_object(this : IOleClientSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_object.call(this)
    end
    def get_moniker(this : IOleClientSite*, dwAssign : UInt32, dwWhichMoniker : UInt32, ppmk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_moniker.call(this, dwAssign, dwWhichMoniker, ppmk)
    end
    def get_container(this : IOleClientSite*, ppContainer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container.call(this, ppContainer)
    end
    def show_object(this : IOleClientSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_object.call(this)
    end
    def on_show_window(this : IOleClientSite*, fShow : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_show_window.call(this, fShow)
    end
    def request_new_object_layout(this : IOleClientSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_new_object_layout.call(this)
    end

  end

  @[Extern]
  record IOleObjectVtbl,
    query_interface : Proc(IOleObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleObject*, UInt32),
    release : Proc(IOleObject*, UInt32),
    set_client_site : Proc(IOleObject*, Void*, Win32cr::Foundation::HRESULT),
    get_client_site : Proc(IOleObject*, Void**, Win32cr::Foundation::HRESULT),
    set_host_names : Proc(IOleObject*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    close : Proc(IOleObject*, UInt32, Win32cr::Foundation::HRESULT),
    set_moniker : Proc(IOleObject*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_moniker : Proc(IOleObject*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    init_from_data : Proc(IOleObject*, Void*, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    get_clipboard_data : Proc(IOleObject*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    do_verb : Proc(IOleObject*, Int32, Win32cr::UI::WindowsAndMessaging::MSG*, Void*, Int32, Win32cr::Foundation::HWND, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    enum_verbs : Proc(IOleObject*, Void**, Win32cr::Foundation::HRESULT),
    update : Proc(IOleObject*, Win32cr::Foundation::HRESULT),
    is_up_to_date : Proc(IOleObject*, Win32cr::Foundation::HRESULT),
    get_user_class_id : Proc(IOleObject*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_user_type : Proc(IOleObject*, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_extent : Proc(IOleObject*, UInt32, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_extent : Proc(IOleObject*, UInt32, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    advise : Proc(IOleObject*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unadvise : Proc(IOleObject*, UInt32, Win32cr::Foundation::HRESULT),
    enum_advise : Proc(IOleObject*, Void**, Win32cr::Foundation::HRESULT),
    get_misc_status : Proc(IOleObject*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_color_scheme : Proc(IOleObject*, Win32cr::Graphics::Gdi::LOGPALETTE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleObject, lpVtbl : IOleObjectVtbl* do
    GUID = LibC::GUID.new(0x112_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_client_site(this : IOleObject*, pClientSite : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_site.call(this, pClientSite)
    end
    def get_client_site(this : IOleObject*, ppClientSite : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_client_site.call(this, ppClientSite)
    end
    def set_host_names(this : IOleObject*, szContainerApp : Win32cr::Foundation::PWSTR, szContainerObj : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_host_names.call(this, szContainerApp, szContainerObj)
    end
    def close(this : IOleObject*, dwSaveOption : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this, dwSaveOption)
    end
    def set_moniker(this : IOleObject*, dwWhichMoniker : UInt32, pmk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_moniker.call(this, dwWhichMoniker, pmk)
    end
    def get_moniker(this : IOleObject*, dwAssign : UInt32, dwWhichMoniker : UInt32, ppmk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_moniker.call(this, dwAssign, dwWhichMoniker, ppmk)
    end
    def init_from_data(this : IOleObject*, pDataObject : Void*, fCreation : Win32cr::Foundation::BOOL, dwReserved : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_from_data.call(this, pDataObject, fCreation, dwReserved)
    end
    def get_clipboard_data(this : IOleObject*, dwReserved : UInt32, ppDataObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clipboard_data.call(this, dwReserved, ppDataObject)
    end
    def do_verb(this : IOleObject*, iVerb : Int32, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*, pActiveSite : Void*, lindex : Int32, hwndParent : Win32cr::Foundation::HWND, lprcPosRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do_verb.call(this, iVerb, lpmsg, pActiveSite, lindex, hwndParent, lprcPosRect)
    end
    def enum_verbs(this : IOleObject*, ppEnumOleVerb : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_verbs.call(this, ppEnumOleVerb)
    end
    def update(this : IOleObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this)
    end
    def is_up_to_date(this : IOleObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_up_to_date.call(this)
    end
    def get_user_class_id(this : IOleObject*, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_user_class_id.call(this, pClsid)
    end
    def get_user_type(this : IOleObject*, dwFormOfType : UInt32, pszUserType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_user_type.call(this, dwFormOfType, pszUserType)
    end
    def set_extent(this : IOleObject*, dwDrawAspect : UInt32, psizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_extent.call(this, dwDrawAspect, psizel)
    end
    def get_extent(this : IOleObject*, dwDrawAspect : UInt32, psizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extent.call(this, dwDrawAspect, psizel)
    end
    def advise(this : IOleObject*, pAdvSink : Void*, pdwConnection : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise.call(this, pAdvSink, pdwConnection)
    end
    def unadvise(this : IOleObject*, dwConnection : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unadvise.call(this, dwConnection)
    end
    def enum_advise(this : IOleObject*, ppenumAdvise : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_advise.call(this, ppenumAdvise)
    end
    def get_misc_status(this : IOleObject*, dwAspect : UInt32, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_misc_status.call(this, dwAspect, pdwStatus)
    end
    def set_color_scheme(this : IOleObject*, pLogpal : Win32cr::Graphics::Gdi::LOGPALETTE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_scheme.call(this, pLogpal)
    end

  end

  @[Extern]
  record IOleWindowVtbl,
    query_interface : Proc(IOleWindow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleWindow*, UInt32),
    release : Proc(IOleWindow*, UInt32),
    get_window : Proc(IOleWindow*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleWindow*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleWindow, lpVtbl : IOleWindowVtbl* do
    GUID = LibC::GUID.new(0x114_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleWindow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleWindow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleWindow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleWindow*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleWindow*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end

  end

  @[Extern]
  record IOleLinkVtbl,
    query_interface : Proc(IOleLink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleLink*, UInt32),
    release : Proc(IOleLink*, UInt32),
    set_update_options : Proc(IOleLink*, UInt32, Win32cr::Foundation::HRESULT),
    get_update_options : Proc(IOleLink*, UInt32*, Win32cr::Foundation::HRESULT),
    set_source_moniker : Proc(IOleLink*, Void*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_source_moniker : Proc(IOleLink*, Void**, Win32cr::Foundation::HRESULT),
    set_source_display_name : Proc(IOleLink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_source_display_name : Proc(IOleLink*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    bind_to_source : Proc(IOleLink*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    bind_if_running : Proc(IOleLink*, Win32cr::Foundation::HRESULT),
    get_bound_source : Proc(IOleLink*, Void**, Win32cr::Foundation::HRESULT),
    unbind_source : Proc(IOleLink*, Win32cr::Foundation::HRESULT),
    update : Proc(IOleLink*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleLink, lpVtbl : IOleLinkVtbl* do
    GUID = LibC::GUID.new(0x11d_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleLink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleLink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleLink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_update_options(this : IOleLink*, dwUpdateOpt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_update_options.call(this, dwUpdateOpt)
    end
    def get_update_options(this : IOleLink*, pdwUpdateOpt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_update_options.call(this, pdwUpdateOpt)
    end
    def set_source_moniker(this : IOleLink*, pmk : Void*, rclsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_moniker.call(this, pmk, rclsid)
    end
    def get_source_moniker(this : IOleLink*, ppmk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_moniker.call(this, ppmk)
    end
    def set_source_display_name(this : IOleLink*, pszStatusText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_display_name.call(this, pszStatusText)
    end
    def get_source_display_name(this : IOleLink*, ppszDisplayName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_display_name.call(this, ppszDisplayName)
    end
    def bind_to_source(this : IOleLink*, bindflags : UInt32, pbc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_source.call(this, bindflags, pbc)
    end
    def bind_if_running(this : IOleLink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_if_running.call(this)
    end
    def get_bound_source(this : IOleLink*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bound_source.call(this, ppunk)
    end
    def unbind_source(this : IOleLink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unbind_source.call(this)
    end
    def update(this : IOleLink*, pbc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, pbc)
    end

  end

  @[Extern]
  record IOleItemContainerVtbl,
    query_interface : Proc(IOleItemContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleItemContainer*, UInt32),
    release : Proc(IOleItemContainer*, UInt32),
    parse_display_name : Proc(IOleItemContainer*, Void*, Win32cr::Foundation::PWSTR, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    enum_objects : Proc(IOleItemContainer*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    lock_container : Proc(IOleItemContainer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_object : Proc(IOleItemContainer*, Win32cr::Foundation::PWSTR, UInt32, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_object_storage : Proc(IOleItemContainer*, Win32cr::Foundation::PWSTR, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_running : Proc(IOleItemContainer*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleItemContainer, lpVtbl : IOleItemContainerVtbl* do
    GUID = LibC::GUID.new(0x11c_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleItemContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleItemContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleItemContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse_display_name(this : IOleItemContainer*, pbc : Void*, pszDisplayName : Win32cr::Foundation::PWSTR, pchEaten : UInt32*, ppmkOut : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_display_name.call(this, pbc, pszDisplayName, pchEaten, ppmkOut)
    end
    def enum_objects(this : IOleItemContainer*, grfFlags : UInt32, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_objects.call(this, grfFlags, ppenum)
    end
    def lock_container(this : IOleItemContainer*, fLock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_container.call(this, fLock)
    end
    def get_object(this : IOleItemContainer*, pszItem : Win32cr::Foundation::PWSTR, dwSpeedNeeded : UInt32, pbc : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, pszItem, dwSpeedNeeded, pbc, riid, ppvObject)
    end
    def get_object_storage(this : IOleItemContainer*, pszItem : Win32cr::Foundation::PWSTR, pbc : Void*, riid : LibC::GUID*, ppvStorage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_storage.call(this, pszItem, pbc, riid, ppvStorage)
    end
    def is_running(this : IOleItemContainer*, pszItem : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_running.call(this, pszItem)
    end

  end

  @[Extern]
  record IOleInPlaceUIWindowVtbl,
    query_interface : Proc(IOleInPlaceUIWindow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceUIWindow*, UInt32),
    release : Proc(IOleInPlaceUIWindow*, UInt32),
    get_window : Proc(IOleInPlaceUIWindow*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceUIWindow*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_border : Proc(IOleInPlaceUIWindow*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    request_border_space : Proc(IOleInPlaceUIWindow*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_border_space : Proc(IOleInPlaceUIWindow*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_active_object : Proc(IOleInPlaceUIWindow*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceUIWindow, lpVtbl : IOleInPlaceUIWindowVtbl* do
    GUID = LibC::GUID.new(0x115_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleInPlaceUIWindow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceUIWindow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceUIWindow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceUIWindow*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceUIWindow*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def get_border(this : IOleInPlaceUIWindow*, lprectBorder : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border.call(this, lprectBorder)
    end
    def request_border_space(this : IOleInPlaceUIWindow*, pborderwidths : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_border_space.call(this, pborderwidths)
    end
    def set_border_space(this : IOleInPlaceUIWindow*, pborderwidths : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_space.call(this, pborderwidths)
    end
    def set_active_object(this : IOleInPlaceUIWindow*, pActiveObject : Void*, pszObjName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_active_object.call(this, pActiveObject, pszObjName)
    end

  end

  @[Extern]
  record IOleInPlaceActiveObjectVtbl,
    query_interface : Proc(IOleInPlaceActiveObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceActiveObject*, UInt32),
    release : Proc(IOleInPlaceActiveObject*, UInt32),
    get_window : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IOleInPlaceActiveObject*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT),
    on_frame_window_activate : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_doc_window_activate : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    resize_border : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::RECT*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    enable_modeless : Proc(IOleInPlaceActiveObject*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceActiveObject, lpVtbl : IOleInPlaceActiveObjectVtbl* do
    GUID = LibC::GUID.new(0x117_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleInPlaceActiveObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceActiveObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceActiveObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceActiveObject*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceActiveObject*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def translate_accelerator(this : IOleInPlaceActiveObject*, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, lpmsg)
    end
    def on_frame_window_activate(this : IOleInPlaceActiveObject*, fActivate : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_frame_window_activate.call(this, fActivate)
    end
    def on_doc_window_activate(this : IOleInPlaceActiveObject*, fActivate : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_doc_window_activate.call(this, fActivate)
    end
    def resize_border(this : IOleInPlaceActiveObject*, prcBorder : Win32cr::Foundation::RECT*, pUIWindow : Void*, fFrameWindow : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resize_border.call(this, prcBorder, pUIWindow, fFrameWindow)
    end
    def enable_modeless(this : IOleInPlaceActiveObject*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_modeless.call(this, fEnable)
    end

  end

  @[Extern]
  record IOleInPlaceFrameVtbl,
    query_interface : Proc(IOleInPlaceFrame*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceFrame*, UInt32),
    release : Proc(IOleInPlaceFrame*, UInt32),
    get_window : Proc(IOleInPlaceFrame*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceFrame*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_border : Proc(IOleInPlaceFrame*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    request_border_space : Proc(IOleInPlaceFrame*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_border_space : Proc(IOleInPlaceFrame*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_active_object : Proc(IOleInPlaceFrame*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    insert_menus : Proc(IOleInPlaceFrame*, Win32cr::UI::WindowsAndMessaging::HMENU, Win32cr::System::Ole::OleMenuGroupWidths*, Win32cr::Foundation::HRESULT),
    set_menu : Proc(IOleInPlaceFrame*, Win32cr::UI::WindowsAndMessaging::HMENU, LibC::IntPtrT, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    remove_menus : Proc(IOleInPlaceFrame*, Win32cr::UI::WindowsAndMessaging::HMENU, Win32cr::Foundation::HRESULT),
    set_status_text : Proc(IOleInPlaceFrame*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enable_modeless : Proc(IOleInPlaceFrame*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IOleInPlaceFrame*, Win32cr::UI::WindowsAndMessaging::MSG*, UInt16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceFrame, lpVtbl : IOleInPlaceFrameVtbl* do
    GUID = LibC::GUID.new(0x116_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleInPlaceFrame*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceFrame*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceFrame*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceFrame*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceFrame*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def get_border(this : IOleInPlaceFrame*, lprectBorder : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border.call(this, lprectBorder)
    end
    def request_border_space(this : IOleInPlaceFrame*, pborderwidths : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_border_space.call(this, pborderwidths)
    end
    def set_border_space(this : IOleInPlaceFrame*, pborderwidths : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_space.call(this, pborderwidths)
    end
    def set_active_object(this : IOleInPlaceFrame*, pActiveObject : Void*, pszObjName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_active_object.call(this, pActiveObject, pszObjName)
    end
    def insert_menus(this : IOleInPlaceFrame*, hmenuShared : Win32cr::UI::WindowsAndMessaging::HMENU, lpMenuWidths : Win32cr::System::Ole::OleMenuGroupWidths*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_menus.call(this, hmenuShared, lpMenuWidths)
    end
    def set_menu(this : IOleInPlaceFrame*, hmenuShared : Win32cr::UI::WindowsAndMessaging::HMENU, holemenu : LibC::IntPtrT, hwndActiveObject : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_menu.call(this, hmenuShared, holemenu, hwndActiveObject)
    end
    def remove_menus(this : IOleInPlaceFrame*, hmenuShared : Win32cr::UI::WindowsAndMessaging::HMENU) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_menus.call(this, hmenuShared)
    end
    def set_status_text(this : IOleInPlaceFrame*, pszStatusText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status_text.call(this, pszStatusText)
    end
    def enable_modeless(this : IOleInPlaceFrame*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_modeless.call(this, fEnable)
    end
    def translate_accelerator(this : IOleInPlaceFrame*, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*, wID : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, lpmsg, wID)
    end

  end

  @[Extern]
  record IOleInPlaceObjectVtbl,
    query_interface : Proc(IOleInPlaceObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceObject*, UInt32),
    release : Proc(IOleInPlaceObject*, UInt32),
    get_window : Proc(IOleInPlaceObject*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceObject*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    in_place_deactivate : Proc(IOleInPlaceObject*, Win32cr::Foundation::HRESULT),
    ui_deactivate : Proc(IOleInPlaceObject*, Win32cr::Foundation::HRESULT),
    set_object_rects : Proc(IOleInPlaceObject*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    reactivate_and_undo : Proc(IOleInPlaceObject*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceObject, lpVtbl : IOleInPlaceObjectVtbl* do
    GUID = LibC::GUID.new(0x113_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleInPlaceObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceObject*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceObject*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def in_place_deactivate(this : IOleInPlaceObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.in_place_deactivate.call(this)
    end
    def ui_deactivate(this : IOleInPlaceObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ui_deactivate.call(this)
    end
    def set_object_rects(this : IOleInPlaceObject*, lprcPosRect : Win32cr::Foundation::RECT*, lprcClipRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object_rects.call(this, lprcPosRect, lprcClipRect)
    end
    def reactivate_and_undo(this : IOleInPlaceObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reactivate_and_undo.call(this)
    end

  end

  @[Extern]
  record IOleInPlaceSiteVtbl,
    query_interface : Proc(IOleInPlaceSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceSite*, UInt32),
    release : Proc(IOleInPlaceSite*, UInt32),
    get_window : Proc(IOleInPlaceSite*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceSite*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    can_in_place_activate : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    on_in_place_activate : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    on_ui_activate : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    get_window_context : Proc(IOleInPlaceSite*, Void**, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::System::Ole::OIFI*, Win32cr::Foundation::HRESULT),
    scroll : Proc(IOleInPlaceSite*, Win32cr::Foundation::SIZE, Win32cr::Foundation::HRESULT),
    on_ui_deactivate : Proc(IOleInPlaceSite*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_in_place_deactivate : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    discard_undo_state : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    deactivate_and_undo : Proc(IOleInPlaceSite*, Win32cr::Foundation::HRESULT),
    on_pos_rect_change : Proc(IOleInPlaceSite*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceSite, lpVtbl : IOleInPlaceSiteVtbl* do
    GUID = LibC::GUID.new(0x119_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IOleInPlaceSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceSite*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceSite*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def can_in_place_activate(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_in_place_activate.call(this)
    end
    def on_in_place_activate(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_activate.call(this)
    end
    def on_ui_activate(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_activate.call(this)
    end
    def get_window_context(this : IOleInPlaceSite*, ppFrame : Void**, ppDoc : Void**, lprcPosRect : Win32cr::Foundation::RECT*, lprcClipRect : Win32cr::Foundation::RECT*, lpFrameInfo : Win32cr::System::Ole::OIFI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window_context.call(this, ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo)
    end
    def scroll(this : IOleInPlaceSite*, scrollExtant : Win32cr::Foundation::SIZE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scroll.call(this, scrollExtant)
    end
    def on_ui_deactivate(this : IOleInPlaceSite*, fUndoable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_deactivate.call(this, fUndoable)
    end
    def on_in_place_deactivate(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_deactivate.call(this)
    end
    def discard_undo_state(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_undo_state.call(this)
    end
    def deactivate_and_undo(this : IOleInPlaceSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deactivate_and_undo.call(this)
    end
    def on_pos_rect_change(this : IOleInPlaceSite*, lprcPosRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_pos_rect_change.call(this, lprcPosRect)
    end

  end

  @[Extern]
  record IContinueVtbl,
    query_interface : Proc(IContinue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IContinue*, UInt32),
    release : Proc(IContinue*, UInt32),
    f_continue : Proc(IContinue*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IContinue, lpVtbl : IContinueVtbl* do
    GUID = LibC::GUID.new(0x12a_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IContinue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IContinue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IContinue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def f_continue(this : IContinue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.f_continue.call(this)
    end

  end

  @[Extern]
  record IViewObjectVtbl,
    query_interface : Proc(IViewObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewObject*, UInt32),
    release : Proc(IViewObject*, UInt32),
    draw : Proc(IViewObject*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECTL*, Win32cr::Foundation::RECTL*, LibC::IntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_color_set : Proc(IViewObject*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::LOGPALETTE**, Win32cr::Foundation::HRESULT),
    freeze : Proc(IViewObject*, UInt32, Int32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unfreeze : Proc(IViewObject*, UInt32, Win32cr::Foundation::HRESULT),
    set_advise : Proc(IViewObject*, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_advise : Proc(IViewObject*, UInt32*, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewObject, lpVtbl : IViewObjectVtbl* do
    GUID = LibC::GUID.new(0x10d_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IViewObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def draw(this : IViewObject*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hdcTargetDev : Win32cr::Graphics::Gdi::HDC, hdcDraw : Win32cr::Graphics::Gdi::HDC, lprcBounds : Win32cr::Foundation::RECTL*, lprcWBounds : Win32cr::Foundation::RECTL*, pfnContinue : LibC::IntPtrT, dwContinue : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw.call(this, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue)
    end
    def get_color_set(this : IViewObject*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hicTargetDev : Win32cr::Graphics::Gdi::HDC, ppColorSet : Win32cr::Graphics::Gdi::LOGPALETTE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_set.call(this, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet)
    end
    def freeze(this : IViewObject*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, pdwFreeze : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeze.call(this, dwDrawAspect, lindex, pvAspect, pdwFreeze)
    end
    def unfreeze(this : IViewObject*, dwFreeze : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unfreeze.call(this, dwFreeze)
    end
    def set_advise(this : IViewObject*, aspects : UInt32, advf : UInt32, pAdvSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_advise.call(this, aspects, advf, pAdvSink)
    end
    def get_advise(this : IViewObject*, pAspects : UInt32*, pAdvf : UInt32*, ppAdvSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_advise.call(this, pAspects, pAdvf, ppAdvSink)
    end

  end

  @[Extern]
  record IViewObject2Vtbl,
    query_interface : Proc(IViewObject2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewObject2*, UInt32),
    release : Proc(IViewObject2*, UInt32),
    draw : Proc(IViewObject2*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECTL*, Win32cr::Foundation::RECTL*, LibC::IntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_color_set : Proc(IViewObject2*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::LOGPALETTE**, Win32cr::Foundation::HRESULT),
    freeze : Proc(IViewObject2*, UInt32, Int32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unfreeze : Proc(IViewObject2*, UInt32, Win32cr::Foundation::HRESULT),
    set_advise : Proc(IViewObject2*, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_advise : Proc(IViewObject2*, UInt32*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_extent : Proc(IViewObject2*, UInt32, Int32, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewObject2, lpVtbl : IViewObject2Vtbl* do
    GUID = LibC::GUID.new(0x127_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IViewObject2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewObject2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewObject2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def draw(this : IViewObject2*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hdcTargetDev : Win32cr::Graphics::Gdi::HDC, hdcDraw : Win32cr::Graphics::Gdi::HDC, lprcBounds : Win32cr::Foundation::RECTL*, lprcWBounds : Win32cr::Foundation::RECTL*, pfnContinue : LibC::IntPtrT, dwContinue : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw.call(this, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue)
    end
    def get_color_set(this : IViewObject2*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hicTargetDev : Win32cr::Graphics::Gdi::HDC, ppColorSet : Win32cr::Graphics::Gdi::LOGPALETTE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_set.call(this, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet)
    end
    def freeze(this : IViewObject2*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, pdwFreeze : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeze.call(this, dwDrawAspect, lindex, pvAspect, pdwFreeze)
    end
    def unfreeze(this : IViewObject2*, dwFreeze : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unfreeze.call(this, dwFreeze)
    end
    def set_advise(this : IViewObject2*, aspects : UInt32, advf : UInt32, pAdvSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_advise.call(this, aspects, advf, pAdvSink)
    end
    def get_advise(this : IViewObject2*, pAspects : UInt32*, pAdvf : UInt32*, ppAdvSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_advise.call(this, pAspects, pAdvf, ppAdvSink)
    end
    def get_extent(this : IViewObject2*, dwDrawAspect : UInt32, lindex : Int32, ptd : Win32cr::System::Com::DVTARGETDEVICE*, lpsizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extent.call(this, dwDrawAspect, lindex, ptd, lpsizel)
    end

  end

  @[Extern]
  record IDropSourceVtbl,
    query_interface : Proc(IDropSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDropSource*, UInt32),
    release : Proc(IDropSource*, UInt32),
    query_continue_drag : Proc(IDropSource*, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    give_feedback : Proc(IDropSource*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDropSource, lpVtbl : IDropSourceVtbl* do
    GUID = LibC::GUID.new(0x121_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IDropSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDropSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDropSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_continue_drag(this : IDropSource*, fEscapePressed : Win32cr::Foundation::BOOL, grfKeyState : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_continue_drag.call(this, fEscapePressed, grfKeyState)
    end
    def give_feedback(this : IDropSource*, dwEffect : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.give_feedback.call(this, dwEffect)
    end

  end

  @[Extern]
  record IDropTargetVtbl,
    query_interface : Proc(IDropTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDropTarget*, UInt32),
    release : Proc(IDropTarget*, UInt32),
    drag_enter : Proc(IDropTarget*, Void*, UInt32, Win32cr::Foundation::POINTL, UInt32*, Win32cr::Foundation::HRESULT),
    drag_over : Proc(IDropTarget*, UInt32, Win32cr::Foundation::POINTL, UInt32*, Win32cr::Foundation::HRESULT),
    drag_leave : Proc(IDropTarget*, Win32cr::Foundation::HRESULT),
    drop : Proc(IDropTarget*, Void*, UInt32, Win32cr::Foundation::POINTL, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDropTarget, lpVtbl : IDropTargetVtbl* do
    GUID = LibC::GUID.new(0x122_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IDropTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDropTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDropTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def drag_enter(this : IDropTarget*, pDataObj : Void*, grfKeyState : UInt32, pt : Win32cr::Foundation::POINTL, pdwEffect : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drag_enter.call(this, pDataObj, grfKeyState, pt, pdwEffect)
    end
    def drag_over(this : IDropTarget*, grfKeyState : UInt32, pt : Win32cr::Foundation::POINTL, pdwEffect : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drag_over.call(this, grfKeyState, pt, pdwEffect)
    end
    def drag_leave(this : IDropTarget*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drag_leave.call(this)
    end
    def drop(this : IDropTarget*, pDataObj : Void*, grfKeyState : UInt32, pt : Win32cr::Foundation::POINTL, pdwEffect : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop.call(this, pDataObj, grfKeyState, pt, pdwEffect)
    end

  end

  @[Extern]
  record IDropSourceNotifyVtbl,
    query_interface : Proc(IDropSourceNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDropSourceNotify*, UInt32),
    release : Proc(IDropSourceNotify*, UInt32),
    drag_enter_target : Proc(IDropSourceNotify*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    drag_leave_target : Proc(IDropSourceNotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDropSourceNotify, lpVtbl : IDropSourceNotifyVtbl* do
    GUID = LibC::GUID.new(0x12b_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IDropSourceNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDropSourceNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDropSourceNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def drag_enter_target(this : IDropSourceNotify*, hwndTarget : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drag_enter_target.call(this, hwndTarget)
    end
    def drag_leave_target(this : IDropSourceNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drag_leave_target.call(this)
    end

  end

  @[Extern]
  record IEnterpriseDropTargetVtbl,
    query_interface : Proc(IEnterpriseDropTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnterpriseDropTarget*, UInt32),
    release : Proc(IEnterpriseDropTarget*, UInt32),
    set_drop_source_enterprise_id : Proc(IEnterpriseDropTarget*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    is_evaluating_edp_policy : Proc(IEnterpriseDropTarget*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnterpriseDropTarget, lpVtbl : IEnterpriseDropTargetVtbl* do
    GUID = LibC::GUID.new(0x390e3878_u32, 0xfd55_u16, 0x4e18_u16, StaticArray[0x81_u8, 0x9d_u8, 0x46_u8, 0x82_u8, 0x8_u8, 0x1c_u8, 0xc_u8, 0xfd_u8])
    def query_interface(this : IEnterpriseDropTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnterpriseDropTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnterpriseDropTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_drop_source_enterprise_id(this : IEnterpriseDropTarget*, identity : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_drop_source_enterprise_id.call(this, identity)
    end
    def is_evaluating_edp_policy(this : IEnterpriseDropTarget*, value : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_evaluating_edp_policy.call(this, value)
    end

  end

  @[Extern]
  record IEnumOLEVERBVtbl,
    query_interface : Proc(IEnumOLEVERB*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumOLEVERB*, UInt32),
    release : Proc(IEnumOLEVERB*, UInt32),
    next__ : Proc(IEnumOLEVERB*, UInt32, Win32cr::System::Ole::OLEVERB*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumOLEVERB*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumOLEVERB*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumOLEVERB*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumOLEVERB, lpVtbl : IEnumOLEVERBVtbl* do
    GUID = LibC::GUID.new(0x104_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IEnumOLEVERB*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumOLEVERB*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumOLEVERB*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumOLEVERB*, celt : UInt32, rgelt : Win32cr::System::Ole::OLEVERB*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumOLEVERB*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumOLEVERB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumOLEVERB*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IClassFactory2Vtbl,
    query_interface : Proc(IClassFactory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IClassFactory2*, UInt32),
    release : Proc(IClassFactory2*, UInt32),
    create_instance : Proc(IClassFactory2*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    lock_server : Proc(IClassFactory2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_lic_info : Proc(IClassFactory2*, Win32cr::System::Ole::LICINFO*, Win32cr::Foundation::HRESULT),
    request_lic_key : Proc(IClassFactory2*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_instance_lic : Proc(IClassFactory2*, Void*, Void*, LibC::GUID*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IClassFactory2, lpVtbl : IClassFactory2Vtbl* do
    GUID = LibC::GUID.new(0xb196b28f_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IClassFactory2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IClassFactory2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IClassFactory2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IClassFactory2*, pUnkOuter : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, pUnkOuter, riid, ppvObject)
    end
    def lock_server(this : IClassFactory2*, fLock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_server.call(this, fLock)
    end
    def get_lic_info(this : IClassFactory2*, pLicInfo : Win32cr::System::Ole::LICINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lic_info.call(this, pLicInfo)
    end
    def request_lic_key(this : IClassFactory2*, dwReserved : UInt32, pBstrKey : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_lic_key.call(this, dwReserved, pBstrKey)
    end
    def create_instance_lic(this : IClassFactory2*, pUnkOuter : Void*, pUnkReserved : Void*, riid : LibC::GUID*, bstrKey : Win32cr::Foundation::BSTR, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_lic.call(this, pUnkOuter, pUnkReserved, riid, bstrKey, ppvObj)
    end

  end

  @[Extern]
  record IProvideClassInfoVtbl,
    query_interface : Proc(IProvideClassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideClassInfo*, UInt32),
    release : Proc(IProvideClassInfo*, UInt32),
    get_class_info : Proc(IProvideClassInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideClassInfo, lpVtbl : IProvideClassInfoVtbl* do
    GUID = LibC::GUID.new(0xb196b283_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IProvideClassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideClassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideClassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_info(this : IProvideClassInfo*, ppTI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_info.call(this, ppTI)
    end

  end

  @[Extern]
  record IProvideClassInfo2Vtbl,
    query_interface : Proc(IProvideClassInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideClassInfo2*, UInt32),
    release : Proc(IProvideClassInfo2*, UInt32),
    get_class_info : Proc(IProvideClassInfo2*, Void**, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IProvideClassInfo2*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideClassInfo2, lpVtbl : IProvideClassInfo2Vtbl* do
    GUID = LibC::GUID.new(0xa6bc3ac0_u32, 0xdbaa_u16, 0x11ce_u16, StaticArray[0x9d_u8, 0xe3_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4b_u8, 0xb8_u8, 0x51_u8])
    def query_interface(this : IProvideClassInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideClassInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideClassInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_info(this : IProvideClassInfo2*, ppTI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_info.call(this, ppTI)
    end
    def get_guid(this : IProvideClassInfo2*, dwGuidKind : UInt32, pGUID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, dwGuidKind, pGUID)
    end

  end

  @[Extern]
  record IProvideMultipleClassInfoVtbl,
    query_interface : Proc(IProvideMultipleClassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideMultipleClassInfo*, UInt32),
    release : Proc(IProvideMultipleClassInfo*, UInt32),
    get_class_info : Proc(IProvideMultipleClassInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IProvideMultipleClassInfo*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_multi_type_info_count : Proc(IProvideMultipleClassInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_info_of_index : Proc(IProvideMultipleClassInfo*, UInt32, Win32cr::System::Ole::MULTICLASSINFO_FLAGS, Void**, UInt32*, UInt32*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideMultipleClassInfo, lpVtbl : IProvideMultipleClassInfoVtbl* do
    GUID = LibC::GUID.new(0xa7aba9c1_u32, 0x8983_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
    def query_interface(this : IProvideMultipleClassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideMultipleClassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideMultipleClassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_info(this : IProvideMultipleClassInfo*, ppTI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_info.call(this, ppTI)
    end
    def get_guid(this : IProvideMultipleClassInfo*, dwGuidKind : UInt32, pGUID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, dwGuidKind, pGUID)
    end
    def get_multi_type_info_count(this : IProvideMultipleClassInfo*, pcti : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_type_info_count.call(this, pcti)
    end
    def get_info_of_index(this : IProvideMultipleClassInfo*, iti : UInt32, dwFlags : Win32cr::System::Ole::MULTICLASSINFO_FLAGS, pptiCoClass : Void**, pdwTIFlags : UInt32*, pcdispidReserved : UInt32*, piidPrimary : LibC::GUID*, piidSource : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_of_index.call(this, iti, dwFlags, pptiCoClass, pdwTIFlags, pcdispidReserved, piidPrimary, piidSource)
    end

  end

  @[Extern]
  record IOleControlVtbl,
    query_interface : Proc(IOleControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleControl*, UInt32),
    release : Proc(IOleControl*, UInt32),
    get_control_info : Proc(IOleControl*, Win32cr::System::Ole::CONTROLINFO*, Win32cr::Foundation::HRESULT),
    on_mnemonic : Proc(IOleControl*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT),
    on_ambient_property_change : Proc(IOleControl*, Int32, Win32cr::Foundation::HRESULT),
    freeze_events : Proc(IOleControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleControl, lpVtbl : IOleControlVtbl* do
    GUID = LibC::GUID.new(0xb196b288_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IOleControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_control_info(this : IOleControl*, pCI : Win32cr::System::Ole::CONTROLINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_control_info.call(this, pCI)
    end
    def on_mnemonic(this : IOleControl*, pMsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_mnemonic.call(this, pMsg)
    end
    def on_ambient_property_change(this : IOleControl*, dispID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ambient_property_change.call(this, dispID)
    end
    def freeze_events(this : IOleControl*, bFreeze : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeze_events.call(this, bFreeze)
    end

  end

  @[Extern]
  record IOleControlSiteVtbl,
    query_interface : Proc(IOleControlSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleControlSite*, UInt32),
    release : Proc(IOleControlSite*, UInt32),
    on_control_info_changed : Proc(IOleControlSite*, Win32cr::Foundation::HRESULT),
    lock_in_place_active : Proc(IOleControlSite*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_extended_control : Proc(IOleControlSite*, Void**, Win32cr::Foundation::HRESULT),
    transform_coords : Proc(IOleControlSite*, Win32cr::Foundation::POINTL*, Win32cr::System::Ole::POINTF*, Win32cr::System::Ole::XFORMCOORDS, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IOleControlSite*, Win32cr::UI::WindowsAndMessaging::MSG*, UInt32, Win32cr::Foundation::HRESULT),
    on_focus : Proc(IOleControlSite*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    show_property_frame : Proc(IOleControlSite*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleControlSite, lpVtbl : IOleControlSiteVtbl* do
    GUID = LibC::GUID.new(0xb196b289_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IOleControlSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleControlSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleControlSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_control_info_changed(this : IOleControlSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_control_info_changed.call(this)
    end
    def lock_in_place_active(this : IOleControlSite*, fLock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_in_place_active.call(this, fLock)
    end
    def get_extended_control(this : IOleControlSite*, ppDisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_control.call(this, ppDisp)
    end
    def transform_coords(this : IOleControlSite*, pPtlHimetric : Win32cr::Foundation::POINTL*, pPtfContainer : Win32cr::System::Ole::POINTF*, dwFlags : Win32cr::System::Ole::XFORMCOORDS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transform_coords.call(this, pPtlHimetric, pPtfContainer, dwFlags)
    end
    def translate_accelerator(this : IOleControlSite*, pMsg : Win32cr::UI::WindowsAndMessaging::MSG*, grfModifiers : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, pMsg, grfModifiers)
    end
    def on_focus(this : IOleControlSite*, fGotFocus : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_focus.call(this, fGotFocus)
    end
    def show_property_frame(this : IOleControlSite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_property_frame.call(this)
    end

  end

  @[Extern]
  record IPropertyPageVtbl,
    query_interface : Proc(IPropertyPage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPropertyPage*, UInt32),
    release : Proc(IPropertyPage*, UInt32),
    set_page_site : Proc(IPropertyPage*, Void*, Win32cr::Foundation::HRESULT),
    activate : Proc(IPropertyPage*, Win32cr::Foundation::HWND, Win32cr::Foundation::RECT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    deactivate : Proc(IPropertyPage*, Win32cr::Foundation::HRESULT),
    get_page_info : Proc(IPropertyPage*, Win32cr::System::Ole::PROPPAGEINFO*, Win32cr::Foundation::HRESULT),
    set_objects : Proc(IPropertyPage*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    show : Proc(IPropertyPage*, UInt32, Win32cr::Foundation::HRESULT),
    move : Proc(IPropertyPage*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    is_page_dirty : Proc(IPropertyPage*, Win32cr::Foundation::HRESULT),
    apply : Proc(IPropertyPage*, Win32cr::Foundation::HRESULT),
    help : Proc(IPropertyPage*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IPropertyPage*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPropertyPage, lpVtbl : IPropertyPageVtbl* do
    GUID = LibC::GUID.new(0xb196b28d_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IPropertyPage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPropertyPage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPropertyPage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_page_site(this : IPropertyPage*, pPageSite : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_page_site.call(this, pPageSite)
    end
    def activate(this : IPropertyPage*, hWndParent : Win32cr::Foundation::HWND, pRect : Win32cr::Foundation::RECT*, bModal : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate.call(this, hWndParent, pRect, bModal)
    end
    def deactivate(this : IPropertyPage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deactivate.call(this)
    end
    def get_page_info(this : IPropertyPage*, pPageInfo : Win32cr::System::Ole::PROPPAGEINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_info.call(this, pPageInfo)
    end
    def set_objects(this : IPropertyPage*, cObjects : UInt32, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_objects.call(this, cObjects, ppUnk)
    end
    def show(this : IPropertyPage*, nCmdShow : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show.call(this, nCmdShow)
    end
    def move(this : IPropertyPage*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, pRect)
    end
    def is_page_dirty(this : IPropertyPage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_page_dirty.call(this)
    end
    def apply(this : IPropertyPage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply.call(this)
    end
    def help(this : IPropertyPage*, pszHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.help.call(this, pszHelpDir)
    end
    def translate_accelerator(this : IPropertyPage*, pMsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, pMsg)
    end

  end

  @[Extern]
  record IPropertyPage2Vtbl,
    query_interface : Proc(IPropertyPage2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPropertyPage2*, UInt32),
    release : Proc(IPropertyPage2*, UInt32),
    set_page_site : Proc(IPropertyPage2*, Void*, Win32cr::Foundation::HRESULT),
    activate : Proc(IPropertyPage2*, Win32cr::Foundation::HWND, Win32cr::Foundation::RECT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    deactivate : Proc(IPropertyPage2*, Win32cr::Foundation::HRESULT),
    get_page_info : Proc(IPropertyPage2*, Win32cr::System::Ole::PROPPAGEINFO*, Win32cr::Foundation::HRESULT),
    set_objects : Proc(IPropertyPage2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    show : Proc(IPropertyPage2*, UInt32, Win32cr::Foundation::HRESULT),
    move : Proc(IPropertyPage2*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    is_page_dirty : Proc(IPropertyPage2*, Win32cr::Foundation::HRESULT),
    apply : Proc(IPropertyPage2*, Win32cr::Foundation::HRESULT),
    help : Proc(IPropertyPage2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IPropertyPage2*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT),
    edit_property : Proc(IPropertyPage2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPropertyPage2, lpVtbl : IPropertyPage2Vtbl* do
    GUID = LibC::GUID.new(0x1e44665_u32, 0x24ac_u16, 0x101b_u16, StaticArray[0x84_u8, 0xed_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x2e_u8, 0xc7_u8, 0x13_u8])
    def query_interface(this : IPropertyPage2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPropertyPage2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPropertyPage2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_page_site(this : IPropertyPage2*, pPageSite : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_page_site.call(this, pPageSite)
    end
    def activate(this : IPropertyPage2*, hWndParent : Win32cr::Foundation::HWND, pRect : Win32cr::Foundation::RECT*, bModal : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate.call(this, hWndParent, pRect, bModal)
    end
    def deactivate(this : IPropertyPage2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deactivate.call(this)
    end
    def get_page_info(this : IPropertyPage2*, pPageInfo : Win32cr::System::Ole::PROPPAGEINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_info.call(this, pPageInfo)
    end
    def set_objects(this : IPropertyPage2*, cObjects : UInt32, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_objects.call(this, cObjects, ppUnk)
    end
    def show(this : IPropertyPage2*, nCmdShow : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show.call(this, nCmdShow)
    end
    def move(this : IPropertyPage2*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, pRect)
    end
    def is_page_dirty(this : IPropertyPage2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_page_dirty.call(this)
    end
    def apply(this : IPropertyPage2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply.call(this)
    end
    def help(this : IPropertyPage2*, pszHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.help.call(this, pszHelpDir)
    end
    def translate_accelerator(this : IPropertyPage2*, pMsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, pMsg)
    end
    def edit_property(this : IPropertyPage2*, dispID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.edit_property.call(this, dispID)
    end

  end

  @[Extern]
  record IPropertyPageSiteVtbl,
    query_interface : Proc(IPropertyPageSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPropertyPageSite*, UInt32),
    release : Proc(IPropertyPageSite*, UInt32),
    on_status_change : Proc(IPropertyPageSite*, Win32cr::System::Ole::PROPPAGESTATUS, Win32cr::Foundation::HRESULT),
    get_locale_id : Proc(IPropertyPageSite*, UInt32*, Win32cr::Foundation::HRESULT),
    get_page_container : Proc(IPropertyPageSite*, Void**, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IPropertyPageSite*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPropertyPageSite, lpVtbl : IPropertyPageSiteVtbl* do
    GUID = LibC::GUID.new(0xb196b28c_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IPropertyPageSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPropertyPageSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPropertyPageSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_status_change(this : IPropertyPageSite*, dwFlags : Win32cr::System::Ole::PROPPAGESTATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_status_change.call(this, dwFlags)
    end
    def get_locale_id(this : IPropertyPageSite*, pLocaleID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locale_id.call(this, pLocaleID)
    end
    def get_page_container(this : IPropertyPageSite*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_container.call(this, ppUnk)
    end
    def translate_accelerator(this : IPropertyPageSite*, pMsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, pMsg)
    end

  end

  @[Extern]
  record IPropertyNotifySinkVtbl,
    query_interface : Proc(IPropertyNotifySink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPropertyNotifySink*, UInt32),
    release : Proc(IPropertyNotifySink*, UInt32),
    on_changed : Proc(IPropertyNotifySink*, Int32, Win32cr::Foundation::HRESULT),
    on_request_edit : Proc(IPropertyNotifySink*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPropertyNotifySink, lpVtbl : IPropertyNotifySinkVtbl* do
    GUID = LibC::GUID.new(0x9bfbbc02_u32, 0xeff1_u16, 0x101a_u16, StaticArray[0x84_u8, 0xed_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IPropertyNotifySink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPropertyNotifySink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPropertyNotifySink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_changed(this : IPropertyNotifySink*, dispID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_changed.call(this, dispID)
    end
    def on_request_edit(this : IPropertyNotifySink*, dispID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_request_edit.call(this, dispID)
    end

  end

  @[Extern]
  record ISpecifyPropertyPagesVtbl,
    query_interface : Proc(ISpecifyPropertyPages*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpecifyPropertyPages*, UInt32),
    release : Proc(ISpecifyPropertyPages*, UInt32),
    get_pages : Proc(ISpecifyPropertyPages*, Win32cr::System::Ole::CAUUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISpecifyPropertyPages, lpVtbl : ISpecifyPropertyPagesVtbl* do
    GUID = LibC::GUID.new(0xb196b28b_u32, 0xbab4_u16, 0x101a_u16, StaticArray[0xb6_u8, 0x9c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : ISpecifyPropertyPages*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpecifyPropertyPages*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpecifyPropertyPages*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pages(this : ISpecifyPropertyPages*, pPages : Win32cr::System::Ole::CAUUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pages.call(this, pPages)
    end

  end

  @[Extern]
  record IPersistPropertyBagVtbl,
    query_interface : Proc(IPersistPropertyBag*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistPropertyBag*, UInt32),
    release : Proc(IPersistPropertyBag*, UInt32),
    get_class_id : Proc(IPersistPropertyBag*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    init_new : Proc(IPersistPropertyBag*, Win32cr::Foundation::HRESULT),
    load : Proc(IPersistPropertyBag*, Void*, Void*, Win32cr::Foundation::HRESULT),
    save : Proc(IPersistPropertyBag*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPersistPropertyBag, lpVtbl : IPersistPropertyBagVtbl* do
    GUID = LibC::GUID.new(0x37d84f60_u32, 0x42cb_u16, 0x11ce_u16, StaticArray[0x81_u8, 0x35_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4b_u8, 0xb8_u8, 0x51_u8])
    def query_interface(this : IPersistPropertyBag*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistPropertyBag*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistPropertyBag*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IPersistPropertyBag*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def init_new(this : IPersistPropertyBag*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def load(this : IPersistPropertyBag*, pPropBag : Void*, pErrorLog : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pPropBag, pErrorLog)
    end
    def save(this : IPersistPropertyBag*, pPropBag : Void*, fClearDirty : Win32cr::Foundation::BOOL, fSaveAllProperties : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pPropBag, fClearDirty, fSaveAllProperties)
    end

  end

  @[Extern]
  record ISimpleFrameSiteVtbl,
    query_interface : Proc(ISimpleFrameSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISimpleFrameSite*, UInt32),
    release : Proc(ISimpleFrameSite*, UInt32),
    pre_message_filter : Proc(ISimpleFrameSite*, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, UInt32*, Win32cr::Foundation::HRESULT),
    post_message_filter : Proc(ISimpleFrameSite*, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISimpleFrameSite, lpVtbl : ISimpleFrameSiteVtbl* do
    GUID = LibC::GUID.new(0x742b0e01_u32, 0x14e6_u16, 0x101b_u16, StaticArray[0x91_u8, 0x4e_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x30_u8, 0xc_u8, 0xab_u8])
    def query_interface(this : ISimpleFrameSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISimpleFrameSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISimpleFrameSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def pre_message_filter(this : ISimpleFrameSite*, hWnd : Win32cr::Foundation::HWND, msg : UInt32, wp : Win32cr::Foundation::WPARAM, lp : Win32cr::Foundation::LPARAM, plResult : Win32cr::Foundation::LRESULT*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_message_filter.call(this, hWnd, msg, wp, lp, plResult, pdwCookie)
    end
    def post_message_filter(this : ISimpleFrameSite*, hWnd : Win32cr::Foundation::HWND, msg : UInt32, wp : Win32cr::Foundation::WPARAM, lp : Win32cr::Foundation::LPARAM, plResult : Win32cr::Foundation::LRESULT*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_message_filter.call(this, hWnd, msg, wp, lp, plResult, dwCookie)
    end

  end

  @[Extern]
  record IFontVtbl,
    query_interface : Proc(IFont*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFont*, UInt32),
    release : Proc(IFont*, UInt32),
    get_Name : Proc(IFont*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Name : Proc(IFont*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Size : Proc(IFont*, Win32cr::System::Com::CY*, Win32cr::Foundation::HRESULT),
    put_Size : Proc(IFont*, Win32cr::System::Com::CY, Win32cr::Foundation::HRESULT),
    get_Bold : Proc(IFont*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Bold : Proc(IFont*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Italic : Proc(IFont*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Italic : Proc(IFont*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Underline : Proc(IFont*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Underline : Proc(IFont*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Strikethrough : Proc(IFont*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Strikethrough : Proc(IFont*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Weight : Proc(IFont*, Int16*, Win32cr::Foundation::HRESULT),
    put_Weight : Proc(IFont*, Int16, Win32cr::Foundation::HRESULT),
    get_Charset : Proc(IFont*, Int16*, Win32cr::Foundation::HRESULT),
    put_Charset : Proc(IFont*, Int16, Win32cr::Foundation::HRESULT),
    get_hFont : Proc(IFont*, Win32cr::Graphics::Gdi::HFONT*, Win32cr::Foundation::HRESULT),
    clone : Proc(IFont*, Void**, Win32cr::Foundation::HRESULT),
    is_equal : Proc(IFont*, Void*, Win32cr::Foundation::HRESULT),
    set_ratio : Proc(IFont*, Int32, Int32, Win32cr::Foundation::HRESULT),
    query_text_metrics : Proc(IFont*, Win32cr::Graphics::Gdi::TEXTMETRICW*, Win32cr::Foundation::HRESULT),
    add_ref_hfont : Proc(IFont*, Win32cr::Graphics::Gdi::HFONT, Win32cr::Foundation::HRESULT),
    release_hfont : Proc(IFont*, Win32cr::Graphics::Gdi::HFONT, Win32cr::Foundation::HRESULT),
    set_hdc : Proc(IFont*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFont, lpVtbl : IFontVtbl* do
    GUID = LibC::GUID.new(0xbef6e002_u32, 0xa874_u16, 0x101a_u16, StaticArray[0x8b_u8, 0xba_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x30_u8, 0xc_u8, 0xab_u8])
    def query_interface(this : IFont*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFont*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFont*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Name(this : IFont*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pName)
    end
    def put_Name(this : IFont*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Name.call(this, name)
    end
    def get_Size(this : IFont*, pSize : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Size.call(this, pSize)
    end
    def put_Size(this : IFont*, size : Win32cr::System::Com::CY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Size.call(this, size)
    end
    def get_Bold(this : IFont*, pBold : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bold.call(this, pBold)
    end
    def put_Bold(this : IFont*, bold : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bold.call(this, bold)
    end
    def get_Italic(this : IFont*, pItalic : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Italic.call(this, pItalic)
    end
    def put_Italic(this : IFont*, italic : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Italic.call(this, italic)
    end
    def get_Underline(this : IFont*, pUnderline : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Underline.call(this, pUnderline)
    end
    def put_Underline(this : IFont*, underline : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Underline.call(this, underline)
    end
    def get_Strikethrough(this : IFont*, pStrikethrough : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Strikethrough.call(this, pStrikethrough)
    end
    def put_Strikethrough(this : IFont*, strikethrough : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Strikethrough.call(this, strikethrough)
    end
    def get_Weight(this : IFont*, pWeight : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Weight.call(this, pWeight)
    end
    def put_Weight(this : IFont*, weight : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Weight.call(this, weight)
    end
    def get_Charset(this : IFont*, pCharset : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Charset.call(this, pCharset)
    end
    def put_Charset(this : IFont*, charset : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Charset.call(this, charset)
    end
    def get_hFont(this : IFont*, phFont : Win32cr::Graphics::Gdi::HFONT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hFont.call(this, phFont)
    end
    def clone(this : IFont*, ppFont : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppFont)
    end
    def is_equal(this : IFont*, pFontOther : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pFontOther)
    end
    def set_ratio(this : IFont*, cyLogical : Int32, cyHimetric : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ratio.call(this, cyLogical, cyHimetric)
    end
    def query_text_metrics(this : IFont*, pTM : Win32cr::Graphics::Gdi::TEXTMETRICW*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_text_metrics.call(this, pTM)
    end
    def add_ref_hfont(this : IFont*, hFont : Win32cr::Graphics::Gdi::HFONT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_hfont.call(this, hFont)
    end
    def release_hfont(this : IFont*, hFont : Win32cr::Graphics::Gdi::HFONT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_hfont.call(this, hFont)
    end
    def set_hdc(this : IFont*, hDC : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hdc.call(this, hDC)
    end

  end

  @[Extern]
  record IPictureVtbl,
    query_interface : Proc(IPicture*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPicture*, UInt32),
    release : Proc(IPicture*, UInt32),
    get_Handle : Proc(IPicture*, UInt32*, Win32cr::Foundation::HRESULT),
    get_hPal : Proc(IPicture*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IPicture*, Int16*, Win32cr::Foundation::HRESULT),
    get_Width : Proc(IPicture*, Int32*, Win32cr::Foundation::HRESULT),
    get_Height : Proc(IPicture*, Int32*, Win32cr::Foundation::HRESULT),
    render : Proc(IPicture*, Win32cr::Graphics::Gdi::HDC, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_hPal : Proc(IPicture*, UInt32, Win32cr::Foundation::HRESULT),
    get_CurDC : Proc(IPicture*, Win32cr::Graphics::Gdi::HDC*, Win32cr::Foundation::HRESULT),
    select_picture : Proc(IPicture*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HDC*, UInt32*, Win32cr::Foundation::HRESULT),
    get_KeepOriginalFormat : Proc(IPicture*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_KeepOriginalFormat : Proc(IPicture*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    picture_changed : Proc(IPicture*, Win32cr::Foundation::HRESULT),
    save_as_file : Proc(IPicture*, Void*, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    get_Attributes : Proc(IPicture*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPicture, lpVtbl : IPictureVtbl* do
    GUID = LibC::GUID.new(0x7bf80980_u32, 0xbf32_u16, 0x101a_u16, StaticArray[0x8b_u8, 0xbb_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x30_u8, 0xc_u8, 0xab_u8])
    def query_interface(this : IPicture*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPicture*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPicture*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Handle(this : IPicture*, pHandle : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Handle.call(this, pHandle)
    end
    def get_hPal(this : IPicture*, phPal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hPal.call(this, phPal)
    end
    def get_Type(this : IPicture*, pType : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pType)
    end
    def get_Width(this : IPicture*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Width.call(this, pWidth)
    end
    def get_Height(this : IPicture*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Height.call(this, pHeight)
    end
    def render(this : IPicture*, hDC : Win32cr::Graphics::Gdi::HDC, x : Int32, y : Int32, cx : Int32, cy : Int32, xSrc : Int32, ySrc : Int32, cxSrc : Int32, cySrc : Int32, pRcWBounds : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, hDC, x, y, cx, cy, xSrc, ySrc, cxSrc, cySrc, pRcWBounds)
    end
    def set_hPal(this : IPicture*, hPal : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hPal.call(this, hPal)
    end
    def get_CurDC(this : IPicture*, phDC : Win32cr::Graphics::Gdi::HDC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurDC.call(this, phDC)
    end
    def select_picture(this : IPicture*, hDCIn : Win32cr::Graphics::Gdi::HDC, phDCOut : Win32cr::Graphics::Gdi::HDC*, phBmpOut : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_picture.call(this, hDCIn, phDCOut, phBmpOut)
    end
    def get_KeepOriginalFormat(this : IPicture*, pKeep : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeepOriginalFormat.call(this, pKeep)
    end
    def put_KeepOriginalFormat(this : IPicture*, keep : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeepOriginalFormat.call(this, keep)
    end
    def picture_changed(this : IPicture*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.picture_changed.call(this)
    end
    def save_as_file(this : IPicture*, pStream : Void*, fSaveMemCopy : Win32cr::Foundation::BOOL, pCbSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_as_file.call(this, pStream, fSaveMemCopy, pCbSize)
    end
    def get_Attributes(this : IPicture*, pDwAttr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Attributes.call(this, pDwAttr)
    end

  end

  @[Extern]
  record IPicture2Vtbl,
    query_interface : Proc(IPicture2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPicture2*, UInt32),
    release : Proc(IPicture2*, UInt32),
    get_Handle : Proc(IPicture2*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_hPal : Proc(IPicture2*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IPicture2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Width : Proc(IPicture2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Height : Proc(IPicture2*, Int32*, Win32cr::Foundation::HRESULT),
    render : Proc(IPicture2*, Win32cr::Graphics::Gdi::HDC, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_hPal : Proc(IPicture2*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_CurDC : Proc(IPicture2*, Win32cr::Graphics::Gdi::HDC*, Win32cr::Foundation::HRESULT),
    select_picture : Proc(IPicture2*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HDC*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_KeepOriginalFormat : Proc(IPicture2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_KeepOriginalFormat : Proc(IPicture2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    picture_changed : Proc(IPicture2*, Win32cr::Foundation::HRESULT),
    save_as_file : Proc(IPicture2*, Void*, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    get_Attributes : Proc(IPicture2*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPicture2, lpVtbl : IPicture2Vtbl* do
    GUID = LibC::GUID.new(0xf5185dd8_u32, 0x2012_u16, 0x4b0b_u16, StaticArray[0xaa_u8, 0xd9_u8, 0xf0_u8, 0x52_u8, 0xc6_u8, 0xbd_u8, 0x48_u8, 0x2b_u8])
    def query_interface(this : IPicture2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPicture2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPicture2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Handle(this : IPicture2*, pHandle : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Handle.call(this, pHandle)
    end
    def get_hPal(this : IPicture2*, phPal : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hPal.call(this, phPal)
    end
    def get_Type(this : IPicture2*, pType : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pType)
    end
    def get_Width(this : IPicture2*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Width.call(this, pWidth)
    end
    def get_Height(this : IPicture2*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Height.call(this, pHeight)
    end
    def render(this : IPicture2*, hDC : Win32cr::Graphics::Gdi::HDC, x : Int32, y : Int32, cx : Int32, cy : Int32, xSrc : Int32, ySrc : Int32, cxSrc : Int32, cySrc : Int32, pRcWBounds : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, hDC, x, y, cx, cy, xSrc, ySrc, cxSrc, cySrc, pRcWBounds)
    end
    def set_hPal(this : IPicture2*, hPal : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hPal.call(this, hPal)
    end
    def get_CurDC(this : IPicture2*, phDC : Win32cr::Graphics::Gdi::HDC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurDC.call(this, phDC)
    end
    def select_picture(this : IPicture2*, hDCIn : Win32cr::Graphics::Gdi::HDC, phDCOut : Win32cr::Graphics::Gdi::HDC*, phBmpOut : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_picture.call(this, hDCIn, phDCOut, phBmpOut)
    end
    def get_KeepOriginalFormat(this : IPicture2*, pKeep : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeepOriginalFormat.call(this, pKeep)
    end
    def put_KeepOriginalFormat(this : IPicture2*, keep : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeepOriginalFormat.call(this, keep)
    end
    def picture_changed(this : IPicture2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.picture_changed.call(this)
    end
    def save_as_file(this : IPicture2*, pStream : Void*, fSaveMemCopy : Win32cr::Foundation::BOOL, pCbSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_as_file.call(this, pStream, fSaveMemCopy, pCbSize)
    end
    def get_Attributes(this : IPicture2*, pDwAttr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Attributes.call(this, pDwAttr)
    end

  end

  @[Extern]
  record IFontEventsDispVtbl,
    query_interface : Proc(IFontEventsDisp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFontEventsDisp*, UInt32),
    release : Proc(IFontEventsDisp*, UInt32),
    get_type_info_count : Proc(IFontEventsDisp*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFontEventsDisp*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFontEventsDisp*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFontEventsDisp*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFontEventsDisp, lpVtbl : IFontEventsDispVtbl* do
    GUID = LibC::GUID.new(0x4ef6100a_u32, 0xaf88_u16, 0x11d0_u16, StaticArray[0x98_u8, 0x46_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x99_u8, 0x93_u8])
    def query_interface(this : IFontEventsDisp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFontEventsDisp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFontEventsDisp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFontEventsDisp*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFontEventsDisp*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFontEventsDisp*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFontEventsDisp*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IFontDispVtbl,
    query_interface : Proc(IFontDisp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFontDisp*, UInt32),
    release : Proc(IFontDisp*, UInt32),
    get_type_info_count : Proc(IFontDisp*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFontDisp*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFontDisp*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFontDisp*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFontDisp, lpVtbl : IFontDispVtbl* do
    GUID = LibC::GUID.new(0xbef6e003_u32, 0xa874_u16, 0x101a_u16, StaticArray[0x8b_u8, 0xba_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x30_u8, 0xc_u8, 0xab_u8])
    def query_interface(this : IFontDisp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFontDisp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFontDisp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFontDisp*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFontDisp*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFontDisp*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFontDisp*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IPictureDispVtbl,
    query_interface : Proc(IPictureDisp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPictureDisp*, UInt32),
    release : Proc(IPictureDisp*, UInt32),
    get_type_info_count : Proc(IPictureDisp*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IPictureDisp*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IPictureDisp*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IPictureDisp*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPictureDisp, lpVtbl : IPictureDispVtbl* do
    GUID = LibC::GUID.new(0x7bf80981_u32, 0xbf32_u16, 0x101a_u16, StaticArray[0x8b_u8, 0xbb_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x30_u8, 0xc_u8, 0xab_u8])
    def query_interface(this : IPictureDisp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPictureDisp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPictureDisp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IPictureDisp*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IPictureDisp*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IPictureDisp*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IPictureDisp*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IOleInPlaceObjectWindowlessVtbl,
    query_interface : Proc(IOleInPlaceObjectWindowless*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceObjectWindowless*, UInt32),
    release : Proc(IOleInPlaceObjectWindowless*, UInt32),
    get_window : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    in_place_deactivate : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::HRESULT),
    ui_deactivate : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::HRESULT),
    set_object_rects : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    reactivate_and_undo : Proc(IOleInPlaceObjectWindowless*, Win32cr::Foundation::HRESULT),
    on_window_message : Proc(IOleInPlaceObjectWindowless*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::HRESULT),
    get_drop_target : Proc(IOleInPlaceObjectWindowless*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceObjectWindowless, lpVtbl : IOleInPlaceObjectWindowlessVtbl* do
    GUID = LibC::GUID.new(0x1c2056cc_u32, 0x5ef4_u16, 0x101b_u16, StaticArray[0x8b_u8, 0xc8_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3e_u8, 0x3b_u8, 0x29_u8])
    def query_interface(this : IOleInPlaceObjectWindowless*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceObjectWindowless*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceObjectWindowless*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceObjectWindowless*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceObjectWindowless*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def in_place_deactivate(this : IOleInPlaceObjectWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.in_place_deactivate.call(this)
    end
    def ui_deactivate(this : IOleInPlaceObjectWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ui_deactivate.call(this)
    end
    def set_object_rects(this : IOleInPlaceObjectWindowless*, lprcPosRect : Win32cr::Foundation::RECT*, lprcClipRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object_rects.call(this, lprcPosRect, lprcClipRect)
    end
    def reactivate_and_undo(this : IOleInPlaceObjectWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reactivate_and_undo.call(this)
    end
    def on_window_message(this : IOleInPlaceObjectWindowless*, msg : UInt32, wParam : Win32cr::Foundation::WPARAM, lParam : Win32cr::Foundation::LPARAM, plResult : Win32cr::Foundation::LRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_window_message.call(this, msg, wParam, lParam, plResult)
    end
    def get_drop_target(this : IOleInPlaceObjectWindowless*, ppDropTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drop_target.call(this, ppDropTarget)
    end

  end

  @[Extern]
  record IOleInPlaceSiteExVtbl,
    query_interface : Proc(IOleInPlaceSiteEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceSiteEx*, UInt32),
    release : Proc(IOleInPlaceSiteEx*, UInt32),
    get_window : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    can_in_place_activate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    on_in_place_activate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    on_ui_activate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    get_window_context : Proc(IOleInPlaceSiteEx*, Void**, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::System::Ole::OIFI*, Win32cr::Foundation::HRESULT),
    scroll : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::SIZE, Win32cr::Foundation::HRESULT),
    on_ui_deactivate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_in_place_deactivate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    discard_undo_state : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    deactivate_and_undo : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT),
    on_pos_rect_change : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_in_place_activate_ex : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    on_in_place_deactivate_ex : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    request_ui_activate : Proc(IOleInPlaceSiteEx*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceSiteEx, lpVtbl : IOleInPlaceSiteExVtbl* do
    GUID = LibC::GUID.new(0x9c2cad80_u32, 0x3424_u16, 0x11cf_u16, StaticArray[0xb6_u8, 0x70_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4c_u8, 0xd6_u8, 0xd8_u8])
    def query_interface(this : IOleInPlaceSiteEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceSiteEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceSiteEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceSiteEx*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceSiteEx*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def can_in_place_activate(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_in_place_activate.call(this)
    end
    def on_in_place_activate(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_activate.call(this)
    end
    def on_ui_activate(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_activate.call(this)
    end
    def get_window_context(this : IOleInPlaceSiteEx*, ppFrame : Void**, ppDoc : Void**, lprcPosRect : Win32cr::Foundation::RECT*, lprcClipRect : Win32cr::Foundation::RECT*, lpFrameInfo : Win32cr::System::Ole::OIFI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window_context.call(this, ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo)
    end
    def scroll(this : IOleInPlaceSiteEx*, scrollExtant : Win32cr::Foundation::SIZE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scroll.call(this, scrollExtant)
    end
    def on_ui_deactivate(this : IOleInPlaceSiteEx*, fUndoable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_deactivate.call(this, fUndoable)
    end
    def on_in_place_deactivate(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_deactivate.call(this)
    end
    def discard_undo_state(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_undo_state.call(this)
    end
    def deactivate_and_undo(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deactivate_and_undo.call(this)
    end
    def on_pos_rect_change(this : IOleInPlaceSiteEx*, lprcPosRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_pos_rect_change.call(this, lprcPosRect)
    end
    def on_in_place_activate_ex(this : IOleInPlaceSiteEx*, pfNoRedraw : Win32cr::Foundation::BOOL*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_activate_ex.call(this, pfNoRedraw, dwFlags)
    end
    def on_in_place_deactivate_ex(this : IOleInPlaceSiteEx*, fNoRedraw : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_deactivate_ex.call(this, fNoRedraw)
    end
    def request_ui_activate(this : IOleInPlaceSiteEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_ui_activate.call(this)
    end

  end

  @[Extern]
  record IOleInPlaceSiteWindowlessVtbl,
    query_interface : Proc(IOleInPlaceSiteWindowless*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleInPlaceSiteWindowless*, UInt32),
    release : Proc(IOleInPlaceSiteWindowless*, UInt32),
    get_window : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    context_sensitive_help : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    can_in_place_activate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    on_in_place_activate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    on_ui_activate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    get_window_context : Proc(IOleInPlaceSiteWindowless*, Void**, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::System::Ole::OIFI*, Win32cr::Foundation::HRESULT),
    scroll : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::SIZE, Win32cr::Foundation::HRESULT),
    on_ui_deactivate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_in_place_deactivate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    discard_undo_state : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    deactivate_and_undo : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    on_pos_rect_change : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_in_place_activate_ex : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    on_in_place_deactivate_ex : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    request_ui_activate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    can_windowless_activate : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    get_capture : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    set_capture : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_focus : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::HRESULT),
    set_focus : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_dc : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Graphics::Gdi::HDC*, Win32cr::Foundation::HRESULT),
    release_dc : Proc(IOleInPlaceSiteWindowless*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT),
    invalidate_rect : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::RECT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    invalidate_rgn : Proc(IOleInPlaceSiteWindowless*, Win32cr::Graphics::Gdi::HRGN, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    scroll_rect : Proc(IOleInPlaceSiteWindowless*, Int32, Int32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    adjust_rect : Proc(IOleInPlaceSiteWindowless*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_def_window_message : Proc(IOleInPlaceSiteWindowless*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleInPlaceSiteWindowless, lpVtbl : IOleInPlaceSiteWindowlessVtbl* do
    GUID = LibC::GUID.new(0x922eada0_u32, 0x3424_u16, 0x11cf_u16, StaticArray[0xb6_u8, 0x70_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4c_u8, 0xd6_u8, 0xd8_u8])
    def query_interface(this : IOleInPlaceSiteWindowless*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleInPlaceSiteWindowless*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleInPlaceSiteWindowless*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_window(this : IOleInPlaceSiteWindowless*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window.call(this, phwnd)
    end
    def context_sensitive_help(this : IOleInPlaceSiteWindowless*, fEnterMode : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.context_sensitive_help.call(this, fEnterMode)
    end
    def can_in_place_activate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_in_place_activate.call(this)
    end
    def on_in_place_activate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_activate.call(this)
    end
    def on_ui_activate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_activate.call(this)
    end
    def get_window_context(this : IOleInPlaceSiteWindowless*, ppFrame : Void**, ppDoc : Void**, lprcPosRect : Win32cr::Foundation::RECT*, lprcClipRect : Win32cr::Foundation::RECT*, lpFrameInfo : Win32cr::System::Ole::OIFI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window_context.call(this, ppFrame, ppDoc, lprcPosRect, lprcClipRect, lpFrameInfo)
    end
    def scroll(this : IOleInPlaceSiteWindowless*, scrollExtant : Win32cr::Foundation::SIZE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scroll.call(this, scrollExtant)
    end
    def on_ui_deactivate(this : IOleInPlaceSiteWindowless*, fUndoable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_ui_deactivate.call(this, fUndoable)
    end
    def on_in_place_deactivate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_deactivate.call(this)
    end
    def discard_undo_state(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_undo_state.call(this)
    end
    def deactivate_and_undo(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deactivate_and_undo.call(this)
    end
    def on_pos_rect_change(this : IOleInPlaceSiteWindowless*, lprcPosRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_pos_rect_change.call(this, lprcPosRect)
    end
    def on_in_place_activate_ex(this : IOleInPlaceSiteWindowless*, pfNoRedraw : Win32cr::Foundation::BOOL*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_activate_ex.call(this, pfNoRedraw, dwFlags)
    end
    def on_in_place_deactivate_ex(this : IOleInPlaceSiteWindowless*, fNoRedraw : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_in_place_deactivate_ex.call(this, fNoRedraw)
    end
    def request_ui_activate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_ui_activate.call(this)
    end
    def can_windowless_activate(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_windowless_activate.call(this)
    end
    def get_capture(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capture.call(this)
    end
    def set_capture(this : IOleInPlaceSiteWindowless*, fCapture : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_capture.call(this, fCapture)
    end
    def get_focus(this : IOleInPlaceSiteWindowless*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_focus.call(this)
    end
    def set_focus(this : IOleInPlaceSiteWindowless*, fFocus : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_focus.call(this, fFocus)
    end
    def get_dc(this : IOleInPlaceSiteWindowless*, pRect : Win32cr::Foundation::RECT*, grfFlags : UInt32, phDC : Win32cr::Graphics::Gdi::HDC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dc.call(this, pRect, grfFlags, phDC)
    end
    def release_dc(this : IOleInPlaceSiteWindowless*, hDC : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_dc.call(this, hDC)
    end
    def invalidate_rect(this : IOleInPlaceSiteWindowless*, pRect : Win32cr::Foundation::RECT*, fErase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_rect.call(this, pRect, fErase)
    end
    def invalidate_rgn(this : IOleInPlaceSiteWindowless*, hRGN : Win32cr::Graphics::Gdi::HRGN, fErase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_rgn.call(this, hRGN, fErase)
    end
    def scroll_rect(this : IOleInPlaceSiteWindowless*, dx : Int32, dy : Int32, pRectScroll : Win32cr::Foundation::RECT*, pRectClip : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scroll_rect.call(this, dx, dy, pRectScroll, pRectClip)
    end
    def adjust_rect(this : IOleInPlaceSiteWindowless*, prc : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adjust_rect.call(this, prc)
    end
    def on_def_window_message(this : IOleInPlaceSiteWindowless*, msg : UInt32, wParam : Win32cr::Foundation::WPARAM, lParam : Win32cr::Foundation::LPARAM, plResult : Win32cr::Foundation::LRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_def_window_message.call(this, msg, wParam, lParam, plResult)
    end

  end

  @[Extern]
  record IViewObjectExVtbl,
    query_interface : Proc(IViewObjectEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewObjectEx*, UInt32),
    release : Proc(IViewObjectEx*, UInt32),
    draw : Proc(IViewObjectEx*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECTL*, Win32cr::Foundation::RECTL*, LibC::IntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_color_set : Proc(IViewObjectEx*, UInt32, Int32, Void*, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::LOGPALETTE**, Win32cr::Foundation::HRESULT),
    freeze : Proc(IViewObjectEx*, UInt32, Int32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unfreeze : Proc(IViewObjectEx*, UInt32, Win32cr::Foundation::HRESULT),
    set_advise : Proc(IViewObjectEx*, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_advise : Proc(IViewObjectEx*, UInt32*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_extent : Proc(IViewObjectEx*, UInt32, Int32, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_rect : Proc(IViewObjectEx*, UInt32, Win32cr::Foundation::RECTL*, Win32cr::Foundation::HRESULT),
    get_view_status : Proc(IViewObjectEx*, UInt32*, Win32cr::Foundation::HRESULT),
    query_hit_point : Proc(IViewObjectEx*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::POINT, Int32, UInt32*, Win32cr::Foundation::HRESULT),
    query_hit_rect : Proc(IViewObjectEx*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Int32, UInt32*, Win32cr::Foundation::HRESULT),
    get_natural_extent : Proc(IViewObjectEx*, Win32cr::System::Com::DVASPECT, Int32, Win32cr::System::Com::DVTARGETDEVICE*, Win32cr::Graphics::Gdi::HDC, Win32cr::System::Ole::ExtentInfo*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewObjectEx, lpVtbl : IViewObjectExVtbl* do
    GUID = LibC::GUID.new(0x3af24292_u32, 0xc96_u16, 0x11ce_u16, StaticArray[0xa0_u8, 0xcf_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0xa_u8, 0xb8_u8])
    def query_interface(this : IViewObjectEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewObjectEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewObjectEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def draw(this : IViewObjectEx*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hdcTargetDev : Win32cr::Graphics::Gdi::HDC, hdcDraw : Win32cr::Graphics::Gdi::HDC, lprcBounds : Win32cr::Foundation::RECTL*, lprcWBounds : Win32cr::Foundation::RECTL*, pfnContinue : LibC::IntPtrT, dwContinue : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw.call(this, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue)
    end
    def get_color_set(this : IViewObjectEx*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hicTargetDev : Win32cr::Graphics::Gdi::HDC, ppColorSet : Win32cr::Graphics::Gdi::LOGPALETTE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_set.call(this, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet)
    end
    def freeze(this : IViewObjectEx*, dwDrawAspect : UInt32, lindex : Int32, pvAspect : Void*, pdwFreeze : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeze.call(this, dwDrawAspect, lindex, pvAspect, pdwFreeze)
    end
    def unfreeze(this : IViewObjectEx*, dwFreeze : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unfreeze.call(this, dwFreeze)
    end
    def set_advise(this : IViewObjectEx*, aspects : UInt32, advf : UInt32, pAdvSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_advise.call(this, aspects, advf, pAdvSink)
    end
    def get_advise(this : IViewObjectEx*, pAspects : UInt32*, pAdvf : UInt32*, ppAdvSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_advise.call(this, pAspects, pAdvf, ppAdvSink)
    end
    def get_extent(this : IViewObjectEx*, dwDrawAspect : UInt32, lindex : Int32, ptd : Win32cr::System::Com::DVTARGETDEVICE*, lpsizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extent.call(this, dwDrawAspect, lindex, ptd, lpsizel)
    end
    def get_rect(this : IViewObjectEx*, dwAspect : UInt32, pRect : Win32cr::Foundation::RECTL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rect.call(this, dwAspect, pRect)
    end
    def get_view_status(this : IViewObjectEx*, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_view_status.call(this, pdwStatus)
    end
    def query_hit_point(this : IViewObjectEx*, dwAspect : UInt32, pRectBounds : Win32cr::Foundation::RECT*, ptlLoc : Win32cr::Foundation::POINT, lCloseHint : Int32, pHitResult : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_hit_point.call(this, dwAspect, pRectBounds, ptlLoc, lCloseHint, pHitResult)
    end
    def query_hit_rect(this : IViewObjectEx*, dwAspect : UInt32, pRectBounds : Win32cr::Foundation::RECT*, pRectLoc : Win32cr::Foundation::RECT*, lCloseHint : Int32, pHitResult : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_hit_rect.call(this, dwAspect, pRectBounds, pRectLoc, lCloseHint, pHitResult)
    end
    def get_natural_extent(this : IViewObjectEx*, dwAspect : Win32cr::System::Com::DVASPECT, lindex : Int32, ptd : Win32cr::System::Com::DVTARGETDEVICE*, hicTargetDev : Win32cr::Graphics::Gdi::HDC, pExtentInfo : Win32cr::System::Ole::ExtentInfo*, pSizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_natural_extent.call(this, dwAspect, lindex, ptd, hicTargetDev, pExtentInfo, pSizel)
    end

  end

  @[Extern]
  record IOleUndoUnitVtbl,
    query_interface : Proc(IOleUndoUnit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUndoUnit*, UInt32),
    release : Proc(IOleUndoUnit*, UInt32),
    do__ : Proc(IOleUndoUnit*, Void*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IOleUndoUnit*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_unit_type : Proc(IOleUndoUnit*, LibC::GUID*, Int32*, Win32cr::Foundation::HRESULT),
    on_next_add : Proc(IOleUndoUnit*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUndoUnit, lpVtbl : IOleUndoUnitVtbl* do
    GUID = LibC::GUID.new(0x894ad3b0_u32, 0xef97_u16, 0x11ce_u16, StaticArray[0x9b_u8, 0xc9_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x8e_u8, 0x1_u8])
    def query_interface(this : IOleUndoUnit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUndoUnit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUndoUnit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def do__(this : IOleUndoUnit*, pUndoManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do__.call(this, pUndoManager)
    end
    def get_description(this : IOleUndoUnit*, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pBstr)
    end
    def get_unit_type(this : IOleUndoUnit*, pClsid : LibC::GUID*, plID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unit_type.call(this, pClsid, plID)
    end
    def on_next_add(this : IOleUndoUnit*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_next_add.call(this)
    end

  end

  @[Extern]
  record IOleParentUndoUnitVtbl,
    query_interface : Proc(IOleParentUndoUnit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleParentUndoUnit*, UInt32),
    release : Proc(IOleParentUndoUnit*, UInt32),
    do__ : Proc(IOleParentUndoUnit*, Void*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IOleParentUndoUnit*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_unit_type : Proc(IOleParentUndoUnit*, LibC::GUID*, Int32*, Win32cr::Foundation::HRESULT),
    on_next_add : Proc(IOleParentUndoUnit*, Win32cr::Foundation::HRESULT),
    open : Proc(IOleParentUndoUnit*, Void*, Win32cr::Foundation::HRESULT),
    close : Proc(IOleParentUndoUnit*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    add : Proc(IOleParentUndoUnit*, Void*, Win32cr::Foundation::HRESULT),
    find_unit : Proc(IOleParentUndoUnit*, Void*, Win32cr::Foundation::HRESULT),
    get_parent_state : Proc(IOleParentUndoUnit*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleParentUndoUnit, lpVtbl : IOleParentUndoUnitVtbl* do
    GUID = LibC::GUID.new(0xa1faf330_u32, 0xef97_u16, 0x11ce_u16, StaticArray[0x9b_u8, 0xc9_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x8e_u8, 0x1_u8])
    def query_interface(this : IOleParentUndoUnit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleParentUndoUnit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleParentUndoUnit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def do__(this : IOleParentUndoUnit*, pUndoManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do__.call(this, pUndoManager)
    end
    def get_description(this : IOleParentUndoUnit*, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pBstr)
    end
    def get_unit_type(this : IOleParentUndoUnit*, pClsid : LibC::GUID*, plID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unit_type.call(this, pClsid, plID)
    end
    def on_next_add(this : IOleParentUndoUnit*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_next_add.call(this)
    end
    def open(this : IOleParentUndoUnit*, pPUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, pPUU)
    end
    def close(this : IOleParentUndoUnit*, pPUU : Void*, fCommit : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this, pPUU, fCommit)
    end
    def add(this : IOleParentUndoUnit*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pUU)
    end
    def find_unit(this : IOleParentUndoUnit*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_unit.call(this, pUU)
    end
    def get_parent_state(this : IOleParentUndoUnit*, pdwState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent_state.call(this, pdwState)
    end

  end

  @[Extern]
  record IEnumOleUndoUnitsVtbl,
    query_interface : Proc(IEnumOleUndoUnits*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumOleUndoUnits*, UInt32),
    release : Proc(IEnumOleUndoUnits*, UInt32),
    next__ : Proc(IEnumOleUndoUnits*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumOleUndoUnits*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumOleUndoUnits*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumOleUndoUnits*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumOleUndoUnits, lpVtbl : IEnumOleUndoUnitsVtbl* do
    GUID = LibC::GUID.new(0xb3e7c340_u32, 0xef97_u16, 0x11ce_u16, StaticArray[0x9b_u8, 0xc9_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x8e_u8, 0x1_u8])
    def query_interface(this : IEnumOleUndoUnits*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumOleUndoUnits*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumOleUndoUnits*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumOleUndoUnits*, cElt : UInt32, rgElt : Void**, pcEltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cElt, rgElt, pcEltFetched)
    end
    def skip(this : IEnumOleUndoUnits*, cElt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cElt)
    end
    def reset(this : IEnumOleUndoUnits*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumOleUndoUnits*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IOleUndoManagerVtbl,
    query_interface : Proc(IOleUndoManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUndoManager*, UInt32),
    release : Proc(IOleUndoManager*, UInt32),
    open : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::HRESULT),
    close : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    add : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::HRESULT),
    get_open_parent_state : Proc(IOleUndoManager*, UInt32*, Win32cr::Foundation::HRESULT),
    discard_from : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::HRESULT),
    undo_to : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::HRESULT),
    redo_to : Proc(IOleUndoManager*, Void*, Win32cr::Foundation::HRESULT),
    enum_undoable : Proc(IOleUndoManager*, Void**, Win32cr::Foundation::HRESULT),
    enum_redoable : Proc(IOleUndoManager*, Void**, Win32cr::Foundation::HRESULT),
    get_last_undo_description : Proc(IOleUndoManager*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_last_redo_description : Proc(IOleUndoManager*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enable : Proc(IOleUndoManager*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUndoManager, lpVtbl : IOleUndoManagerVtbl* do
    GUID = LibC::GUID.new(0xd001f200_u32, 0xef97_u16, 0x11ce_u16, StaticArray[0x9b_u8, 0xc9_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x8e_u8, 0x1_u8])
    def query_interface(this : IOleUndoManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUndoManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUndoManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : IOleUndoManager*, pPUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, pPUU)
    end
    def close(this : IOleUndoManager*, pPUU : Void*, fCommit : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this, pPUU, fCommit)
    end
    def add(this : IOleUndoManager*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pUU)
    end
    def get_open_parent_state(this : IOleUndoManager*, pdwState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_open_parent_state.call(this, pdwState)
    end
    def discard_from(this : IOleUndoManager*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_from.call(this, pUU)
    end
    def undo_to(this : IOleUndoManager*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.undo_to.call(this, pUU)
    end
    def redo_to(this : IOleUndoManager*, pUU : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.redo_to.call(this, pUU)
    end
    def enum_undoable(this : IOleUndoManager*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_undoable.call(this, ppEnum)
    end
    def enum_redoable(this : IOleUndoManager*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_redoable.call(this, ppEnum)
    end
    def get_last_undo_description(this : IOleUndoManager*, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_undo_description.call(this, pBstr)
    end
    def get_last_redo_description(this : IOleUndoManager*, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_redo_description.call(this, pBstr)
    end
    def enable(this : IOleUndoManager*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable.call(this, fEnable)
    end

  end

  @[Extern]
  record IPointerInactiveVtbl,
    query_interface : Proc(IPointerInactive*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPointerInactive*, UInt32),
    release : Proc(IPointerInactive*, UInt32),
    get_activation_policy : Proc(IPointerInactive*, UInt32*, Win32cr::Foundation::HRESULT),
    on_inactive_mouse_move : Proc(IPointerInactive*, Win32cr::Foundation::RECT*, Int32, Int32, UInt32, Win32cr::Foundation::HRESULT),
    on_inactive_set_cursor : Proc(IPointerInactive*, Win32cr::Foundation::RECT*, Int32, Int32, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPointerInactive, lpVtbl : IPointerInactiveVtbl* do
    GUID = LibC::GUID.new(0x55980ba0_u32, 0x35aa_u16, 0x11cf_u16, StaticArray[0xb6_u8, 0x71_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4c_u8, 0xd6_u8, 0xd8_u8])
    def query_interface(this : IPointerInactive*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPointerInactive*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPointerInactive*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_activation_policy(this : IPointerInactive*, pdwPolicy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_activation_policy.call(this, pdwPolicy)
    end
    def on_inactive_mouse_move(this : IPointerInactive*, pRectBounds : Win32cr::Foundation::RECT*, x : Int32, y : Int32, grfKeyState : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_inactive_mouse_move.call(this, pRectBounds, x, y, grfKeyState)
    end
    def on_inactive_set_cursor(this : IPointerInactive*, pRectBounds : Win32cr::Foundation::RECT*, x : Int32, y : Int32, dwMouseMsg : UInt32, fSetAlways : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_inactive_set_cursor.call(this, pRectBounds, x, y, dwMouseMsg, fSetAlways)
    end

  end

  @[Extern]
  record IObjectWithSiteVtbl,
    query_interface : Proc(IObjectWithSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectWithSite*, UInt32),
    release : Proc(IObjectWithSite*, UInt32),
    set_site : Proc(IObjectWithSite*, Void*, Win32cr::Foundation::HRESULT),
    get_site : Proc(IObjectWithSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectWithSite, lpVtbl : IObjectWithSiteVtbl* do
    GUID = LibC::GUID.new(0xfc4801a3_u32, 0x2ba9_u16, 0x11cf_u16, StaticArray[0xa2_u8, 0x29_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3d_u8, 0x73_u8, 0x52_u8])
    def query_interface(this : IObjectWithSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectWithSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectWithSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_site(this : IObjectWithSite*, pUnkSite : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_site.call(this, pUnkSite)
    end
    def get_site(this : IObjectWithSite*, riid : LibC::GUID*, ppvSite : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_site.call(this, riid, ppvSite)
    end

  end

  @[Extern]
  record IPerPropertyBrowsingVtbl,
    query_interface : Proc(IPerPropertyBrowsing*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPerPropertyBrowsing*, UInt32),
    release : Proc(IPerPropertyBrowsing*, UInt32),
    get_display_string : Proc(IPerPropertyBrowsing*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    map_property_to_page : Proc(IPerPropertyBrowsing*, Int32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_predefined_strings : Proc(IPerPropertyBrowsing*, Int32, Win32cr::System::Ole::CALPOLESTR*, Win32cr::System::Ole::CADWORD*, Win32cr::Foundation::HRESULT),
    get_predefined_value : Proc(IPerPropertyBrowsing*, Int32, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPerPropertyBrowsing, lpVtbl : IPerPropertyBrowsingVtbl* do
    GUID = LibC::GUID.new(0x376bd3aa_u32, 0x3845_u16, 0x101b_u16, StaticArray[0x84_u8, 0xed_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x2e_u8, 0xc7_u8, 0x13_u8])
    def query_interface(this : IPerPropertyBrowsing*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPerPropertyBrowsing*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPerPropertyBrowsing*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_display_string(this : IPerPropertyBrowsing*, dispID : Int32, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_string.call(this, dispID, pBstr)
    end
    def map_property_to_page(this : IPerPropertyBrowsing*, dispID : Int32, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_property_to_page.call(this, dispID, pClsid)
    end
    def get_predefined_strings(this : IPerPropertyBrowsing*, dispID : Int32, pCaStringsOut : Win32cr::System::Ole::CALPOLESTR*, pCaCookiesOut : Win32cr::System::Ole::CADWORD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_predefined_strings.call(this, dispID, pCaStringsOut, pCaCookiesOut)
    end
    def get_predefined_value(this : IPerPropertyBrowsing*, dispID : Int32, dwCookie : UInt32, pVarOut : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_predefined_value.call(this, dispID, dwCookie, pVarOut)
    end

  end

  @[Extern]
  record IPersistPropertyBag2Vtbl,
    query_interface : Proc(IPersistPropertyBag2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistPropertyBag2*, UInt32),
    release : Proc(IPersistPropertyBag2*, UInt32),
    get_class_id : Proc(IPersistPropertyBag2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    init_new : Proc(IPersistPropertyBag2*, Win32cr::Foundation::HRESULT),
    load : Proc(IPersistPropertyBag2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    save : Proc(IPersistPropertyBag2*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_dirty : Proc(IPersistPropertyBag2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPersistPropertyBag2, lpVtbl : IPersistPropertyBag2Vtbl* do
    GUID = LibC::GUID.new(0x22f55881_u32, 0x280b_u16, 0x11d0_u16, StaticArray[0xa8_u8, 0xa9_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc_u8, 0x20_u8, 0x4_u8])
    def query_interface(this : IPersistPropertyBag2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistPropertyBag2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistPropertyBag2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IPersistPropertyBag2*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def init_new(this : IPersistPropertyBag2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def load(this : IPersistPropertyBag2*, pPropBag : Void*, pErrLog : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pPropBag, pErrLog)
    end
    def save(this : IPersistPropertyBag2*, pPropBag : Void*, fClearDirty : Win32cr::Foundation::BOOL, fSaveAllProperties : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pPropBag, fClearDirty, fSaveAllProperties)
    end
    def is_dirty(this : IPersistPropertyBag2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_dirty.call(this)
    end

  end

  @[Extern]
  record IAdviseSinkExVtbl,
    query_interface : Proc(IAdviseSinkEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAdviseSinkEx*, UInt32),
    release : Proc(IAdviseSinkEx*, UInt32),
    on_data_change : Proc(IAdviseSinkEx*, Win32cr::System::Com::FORMATETC*, Win32cr::System::Com::STGMEDIUM*, Void),
    on_view_change : Proc(IAdviseSinkEx*, UInt32, Int32, Void),
    on_rename : Proc(IAdviseSinkEx*, Void*, Void),
    on_save : Proc(IAdviseSinkEx*, Void),
    on_close : Proc(IAdviseSinkEx*, Void),
    on_view_status_change : Proc(IAdviseSinkEx*, UInt32, Void)


  @[Extern]
  record IAdviseSinkEx, lpVtbl : IAdviseSinkExVtbl* do
    GUID = LibC::GUID.new(0x3af24290_u32, 0xc96_u16, 0x11ce_u16, StaticArray[0xa0_u8, 0xcf_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0xa_u8, 0xb8_u8])
    def query_interface(this : IAdviseSinkEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAdviseSinkEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAdviseSinkEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_data_change(this : IAdviseSinkEx*, pFormatetc : Win32cr::System::Com::FORMATETC*, pStgmed : Win32cr::System::Com::STGMEDIUM*) : Void
      @lpVtbl.try &.value.on_data_change.call(this, pFormatetc, pStgmed)
    end
    def on_view_change(this : IAdviseSinkEx*, dwAspect : UInt32, lindex : Int32) : Void
      @lpVtbl.try &.value.on_view_change.call(this, dwAspect, lindex)
    end
    def on_rename(this : IAdviseSinkEx*, pmk : Void*) : Void
      @lpVtbl.try &.value.on_rename.call(this, pmk)
    end
    def on_save(this : IAdviseSinkEx*) : Void
      @lpVtbl.try &.value.on_save.call(this)
    end
    def on_close(this : IAdviseSinkEx*) : Void
      @lpVtbl.try &.value.on_close.call(this)
    end
    def on_view_status_change(this : IAdviseSinkEx*, dwViewStatus : UInt32) : Void
      @lpVtbl.try &.value.on_view_status_change.call(this, dwViewStatus)
    end

  end

  @[Extern]
  record IQuickActivateVtbl,
    query_interface : Proc(IQuickActivate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQuickActivate*, UInt32),
    release : Proc(IQuickActivate*, UInt32),
    quick_activate : Proc(IQuickActivate*, Win32cr::System::Ole::QACONTAINER*, Win32cr::System::Ole::QACONTROL*, Win32cr::Foundation::HRESULT),
    set_content_extent : Proc(IQuickActivate*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_content_extent : Proc(IQuickActivate*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IQuickActivate, lpVtbl : IQuickActivateVtbl* do
    GUID = LibC::GUID.new(0xcf51ed10_u32, 0x62fe_u16, 0x11cf_u16, StaticArray[0xbf_u8, 0x86_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0x48_u8, 0x36_u8])
    def query_interface(this : IQuickActivate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQuickActivate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQuickActivate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def quick_activate(this : IQuickActivate*, pQaContainer : Win32cr::System::Ole::QACONTAINER*, pQaControl : Win32cr::System::Ole::QACONTROL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.quick_activate.call(this, pQaContainer, pQaControl)
    end
    def set_content_extent(this : IQuickActivate*, pSizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_content_extent.call(this, pSizel)
    end
    def get_content_extent(this : IQuickActivate*, pSizel : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_extent.call(this, pSizel)
    end

  end

  @[Extern]
  record IVBGetControlVtbl,
    query_interface : Proc(IVBGetControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBGetControl*, UInt32),
    release : Proc(IVBGetControl*, UInt32),
    enum_controls : Proc(IVBGetControl*, Win32cr::System::Ole::OLECONTF, Win32cr::System::Ole::ENUM_CONTROLS_WHICH_FLAGS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVBGetControl, lpVtbl : IVBGetControlVtbl* do
    GUID = LibC::GUID.new(0x40a050a0_u32, 0x3c31_u16, 0x101b_u16, StaticArray[0xa8_u8, 0x2e_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x2b_u8, 0x23_u8, 0x37_u8])
    def query_interface(this : IVBGetControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBGetControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBGetControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_controls(this : IVBGetControl*, dwOleContF : Win32cr::System::Ole::OLECONTF, dwWhich : Win32cr::System::Ole::ENUM_CONTROLS_WHICH_FLAGS, ppenumUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_controls.call(this, dwOleContF, dwWhich, ppenumUnk)
    end

  end

  @[Extern]
  record IGetOleObjectVtbl,
    query_interface : Proc(IGetOleObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetOleObject*, UInt32),
    release : Proc(IGetOleObject*, UInt32),
    get_ole_object : Proc(IGetOleObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetOleObject, lpVtbl : IGetOleObjectVtbl* do
    GUID = LibC::GUID.new(0x8a701da0_u32, 0x4feb_u16, 0x101b_u16, StaticArray[0xa8_u8, 0x2e_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x2b_u8, 0x23_u8, 0x37_u8])
    def query_interface(this : IGetOleObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetOleObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetOleObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ole_object(this : IGetOleObject*, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ole_object.call(this, riid, ppvObj)
    end

  end

  @[Extern]
  record IVBFormatVtbl,
    query_interface : Proc(IVBFormat*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBFormat*, UInt32),
    release : Proc(IVBFormat*, UInt32),
    format : Proc(IVBFormat*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, Void*, UInt16, Int32, Int16, UInt16, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVBFormat, lpVtbl : IVBFormatVtbl* do
    GUID = LibC::GUID.new(0x9849fd60_u32, 0x3768_u16, 0x101b_u16, StaticArray[0x8d_u8, 0x72_u8, 0xae_u8, 0x61_u8, 0x64_u8, 0xff_u8, 0xe3_u8, 0xcf_u8])
    def query_interface(this : IVBFormat*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBFormat*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBFormat*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def format(this : IVBFormat*, vData : Win32cr::System::Com::VARIANT*, bstrFormat : Win32cr::Foundation::BSTR, lpBuffer : Void*, cb : UInt16, lcid : Int32, sFirstDayOfWeek : Int16, sFirstWeekOfYear : UInt16, rcb : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.format.call(this, vData, bstrFormat, lpBuffer, cb, lcid, sFirstDayOfWeek, sFirstWeekOfYear, rcb)
    end

  end

  @[Extern]
  record IGetVBAObjectVtbl,
    query_interface : Proc(IGetVBAObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetVBAObject*, UInt32),
    release : Proc(IGetVBAObject*, UInt32),
    get_object : Proc(IGetVBAObject*, LibC::GUID*, Void**, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetVBAObject, lpVtbl : IGetVBAObjectVtbl* do
    GUID = LibC::GUID.new(0x91733a60_u32, 0x3f4c_u16, 0x101b_u16, StaticArray[0xa3_u8, 0xf6_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x34_u8, 0xe4_u8, 0xe9_u8])
    def query_interface(this : IGetVBAObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetVBAObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetVBAObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object(this : IGetVBAObject*, riid : LibC::GUID*, ppvObj : Void**, dwReserved : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, riid, ppvObj, dwReserved)
    end

  end

  @[Extern]
  record IOleDocumentVtbl,
    query_interface : Proc(IOleDocument*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleDocument*, UInt32),
    release : Proc(IOleDocument*, UInt32),
    create_view : Proc(IOleDocument*, Void*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_doc_misc_status : Proc(IOleDocument*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_views : Proc(IOleDocument*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleDocument, lpVtbl : IOleDocumentVtbl* do
    GUID = LibC::GUID.new(0xb722bcc5_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IOleDocument*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleDocument*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleDocument*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_view(this : IOleDocument*, pIPSite : Void*, pstm : Void*, dwReserved : UInt32, ppView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_view.call(this, pIPSite, pstm, dwReserved, ppView)
    end
    def get_doc_misc_status(this : IOleDocument*, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_misc_status.call(this, pdwStatus)
    end
    def enum_views(this : IOleDocument*, ppEnum : Void**, ppView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_views.call(this, ppEnum, ppView)
    end

  end

  @[Extern]
  record IOleDocumentSiteVtbl,
    query_interface : Proc(IOleDocumentSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleDocumentSite*, UInt32),
    release : Proc(IOleDocumentSite*, UInt32),
    activate_me : Proc(IOleDocumentSite*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleDocumentSite, lpVtbl : IOleDocumentSiteVtbl* do
    GUID = LibC::GUID.new(0xb722bcc7_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IOleDocumentSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleDocumentSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleDocumentSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activate_me(this : IOleDocumentSite*, pViewToActivate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_me.call(this, pViewToActivate)
    end

  end

  @[Extern]
  record IOleDocumentViewVtbl,
    query_interface : Proc(IOleDocumentView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleDocumentView*, UInt32),
    release : Proc(IOleDocumentView*, UInt32),
    set_in_place_site : Proc(IOleDocumentView*, Void*, Win32cr::Foundation::HRESULT),
    get_in_place_site : Proc(IOleDocumentView*, Void**, Win32cr::Foundation::HRESULT),
    get_document : Proc(IOleDocumentView*, Void**, Win32cr::Foundation::HRESULT),
    set_rect : Proc(IOleDocumentView*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_rect : Proc(IOleDocumentView*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_rect_complex : Proc(IOleDocumentView*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    show : Proc(IOleDocumentView*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    ui_activate : Proc(IOleDocumentView*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    open : Proc(IOleDocumentView*, Win32cr::Foundation::HRESULT),
    close_view : Proc(IOleDocumentView*, UInt32, Win32cr::Foundation::HRESULT),
    save_view_state : Proc(IOleDocumentView*, Void*, Win32cr::Foundation::HRESULT),
    apply_view_state : Proc(IOleDocumentView*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IOleDocumentView*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleDocumentView, lpVtbl : IOleDocumentViewVtbl* do
    GUID = LibC::GUID.new(0xb722bcc6_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IOleDocumentView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleDocumentView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleDocumentView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_in_place_site(this : IOleDocumentView*, pIPSite : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_in_place_site.call(this, pIPSite)
    end
    def get_in_place_site(this : IOleDocumentView*, ppIPSite : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_in_place_site.call(this, ppIPSite)
    end
    def get_document(this : IOleDocumentView*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_document.call(this, ppunk)
    end
    def set_rect(this : IOleDocumentView*, prcView : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rect.call(this, prcView)
    end
    def get_rect(this : IOleDocumentView*, prcView : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rect.call(this, prcView)
    end
    def set_rect_complex(this : IOleDocumentView*, prcView : Win32cr::Foundation::RECT*, prcHScroll : Win32cr::Foundation::RECT*, prcVScroll : Win32cr::Foundation::RECT*, prcSizeBox : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rect_complex.call(this, prcView, prcHScroll, prcVScroll, prcSizeBox)
    end
    def show(this : IOleDocumentView*, fShow : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show.call(this, fShow)
    end
    def ui_activate(this : IOleDocumentView*, fUIActivate : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ui_activate.call(this, fUIActivate)
    end
    def open(this : IOleDocumentView*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this)
    end
    def close_view(this : IOleDocumentView*, dwReserved : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_view.call(this, dwReserved)
    end
    def save_view_state(this : IOleDocumentView*, pstm : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_view_state.call(this, pstm)
    end
    def apply_view_state(this : IOleDocumentView*, pstm : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply_view_state.call(this, pstm)
    end
    def clone(this : IOleDocumentView*, pIPSiteNew : Void*, ppViewNew : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pIPSiteNew, ppViewNew)
    end

  end

  @[Extern]
  record IEnumOleDocumentViewsVtbl,
    query_interface : Proc(IEnumOleDocumentViews*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumOleDocumentViews*, UInt32),
    release : Proc(IEnumOleDocumentViews*, UInt32),
    next__ : Proc(IEnumOleDocumentViews*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumOleDocumentViews*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumOleDocumentViews*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumOleDocumentViews*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumOleDocumentViews, lpVtbl : IEnumOleDocumentViewsVtbl* do
    GUID = LibC::GUID.new(0xb722bcc8_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IEnumOleDocumentViews*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumOleDocumentViews*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumOleDocumentViews*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumOleDocumentViews*, cViews : UInt32, rgpView : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cViews, rgpView, pcFetched)
    end
    def skip(this : IEnumOleDocumentViews*, cViews : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cViews)
    end
    def reset(this : IEnumOleDocumentViews*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumOleDocumentViews*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IContinueCallbackVtbl,
    query_interface : Proc(IContinueCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IContinueCallback*, UInt32),
    release : Proc(IContinueCallback*, UInt32),
    f_continue : Proc(IContinueCallback*, Win32cr::Foundation::HRESULT),
    f_continue_printing : Proc(IContinueCallback*, Int32, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IContinueCallback, lpVtbl : IContinueCallbackVtbl* do
    GUID = LibC::GUID.new(0xb722bcca_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IContinueCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IContinueCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IContinueCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def f_continue(this : IContinueCallback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.f_continue.call(this)
    end
    def f_continue_printing(this : IContinueCallback*, nCntPrinted : Int32, nCurPage : Int32, pwszPrintStatus : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.f_continue_printing.call(this, nCntPrinted, nCurPage, pwszPrintStatus)
    end

  end

  @[Extern]
  record IPrintVtbl,
    query_interface : Proc(IPrint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPrint*, UInt32),
    release : Proc(IPrint*, UInt32),
    set_initial_page_num : Proc(IPrint*, Int32, Win32cr::Foundation::HRESULT),
    get_page_info : Proc(IPrint*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    print : Proc(IPrint*, UInt32, Win32cr::System::Com::DVTARGETDEVICE**, Win32cr::System::Ole::PAGESET**, Win32cr::System::Com::STGMEDIUM*, Void*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPrint, lpVtbl : IPrintVtbl* do
    GUID = LibC::GUID.new(0xb722bcc9_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IPrint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPrint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPrint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_initial_page_num(this : IPrint*, nFirstPage : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_initial_page_num.call(this, nFirstPage)
    end
    def get_page_info(this : IPrint*, pnFirstPage : Int32*, pcPages : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_info.call(this, pnFirstPage, pcPages)
    end
    def print(this : IPrint*, grfFlags : UInt32, pptd : Win32cr::System::Com::DVTARGETDEVICE**, ppPageSet : Win32cr::System::Ole::PAGESET**, pstgmOptions : Win32cr::System::Com::STGMEDIUM*, pcallback : Void*, nFirstPage : Int32, pcPagesPrinted : Int32*, pnLastPage : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.print.call(this, grfFlags, pptd, ppPageSet, pstgmOptions, pcallback, nFirstPage, pcPagesPrinted, pnLastPage)
    end

  end

  @[Extern]
  record IOleCommandTargetVtbl,
    query_interface : Proc(IOleCommandTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleCommandTarget*, UInt32),
    release : Proc(IOleCommandTarget*, UInt32),
    query_status : Proc(IOleCommandTarget*, LibC::GUID*, UInt32, Win32cr::System::Ole::OLECMD*, Win32cr::System::Ole::OLECMDTEXT*, Win32cr::Foundation::HRESULT),
    exec : Proc(IOleCommandTarget*, LibC::GUID*, UInt32, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleCommandTarget, lpVtbl : IOleCommandTargetVtbl* do
    GUID = LibC::GUID.new(0xb722bccb_u32, 0x4e68_u16, 0x101b_u16, StaticArray[0xa2_u8, 0xbc_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x40_u8, 0x47_u8, 0x70_u8])
    def query_interface(this : IOleCommandTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleCommandTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleCommandTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_status(this : IOleCommandTarget*, pguidCmdGroup : LibC::GUID*, cCmds : UInt32, prgCmds : Win32cr::System::Ole::OLECMD*, pCmdText : Win32cr::System::Ole::OLECMDTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_status.call(this, pguidCmdGroup, cCmds, prgCmds, pCmdText)
    end
    def exec(this : IOleCommandTarget*, pguidCmdGroup : LibC::GUID*, nCmdID : UInt32, nCmdexecopt : UInt32, pvaIn : Win32cr::System::Com::VARIANT*, pvaOut : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exec.call(this, pguidCmdGroup, nCmdID, nCmdexecopt, pvaIn, pvaOut)
    end

  end

  @[Extern]
  record IZoomEventsVtbl,
    query_interface : Proc(IZoomEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IZoomEvents*, UInt32),
    release : Proc(IZoomEvents*, UInt32),
    on_zoom_percent_changed : Proc(IZoomEvents*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IZoomEvents, lpVtbl : IZoomEventsVtbl* do
    GUID = LibC::GUID.new(0x41b68150_u32, 0x904c_u16, 0x4e17_u16, StaticArray[0xa0_u8, 0xba_u8, 0xa4_u8, 0x38_u8, 0x18_u8, 0x2e_u8, 0x35_u8, 0x9d_u8])
    def query_interface(this : IZoomEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IZoomEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IZoomEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_zoom_percent_changed(this : IZoomEvents*, ulZoomPercent : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_zoom_percent_changed.call(this, ulZoomPercent)
    end

  end

  @[Extern]
  record IProtectFocusVtbl,
    query_interface : Proc(IProtectFocus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProtectFocus*, UInt32),
    release : Proc(IProtectFocus*, UInt32),
    allow_focus_change : Proc(IProtectFocus*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProtectFocus, lpVtbl : IProtectFocusVtbl* do
    GUID = LibC::GUID.new(0xd81f90a3_u32, 0x8156_u16, 0x44f7_u16, StaticArray[0xad_u8, 0x28_u8, 0x5a_u8, 0xbb_u8, 0x87_u8, 0x0_u8, 0x32_u8, 0x74_u8])
    def query_interface(this : IProtectFocus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProtectFocus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProtectFocus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def allow_focus_change(this : IProtectFocus*, pfAllow : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allow_focus_change.call(this, pfAllow)
    end

  end

  @[Extern]
  record IProtectedModeMenuServicesVtbl,
    query_interface : Proc(IProtectedModeMenuServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProtectedModeMenuServices*, UInt32),
    release : Proc(IProtectedModeMenuServices*, UInt32),
    create_menu : Proc(IProtectedModeMenuServices*, Win32cr::UI::WindowsAndMessaging::HMENU*, Win32cr::Foundation::HRESULT),
    load_menu : Proc(IProtectedModeMenuServices*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::UI::WindowsAndMessaging::HMENU*, Win32cr::Foundation::HRESULT),
    load_menu_id : Proc(IProtectedModeMenuServices*, Win32cr::Foundation::PWSTR, UInt16, Win32cr::UI::WindowsAndMessaging::HMENU*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProtectedModeMenuServices, lpVtbl : IProtectedModeMenuServicesVtbl* do
    GUID = LibC::GUID.new(0x73c105ee_u32, 0x9dff_u16, 0x4a07_u16, StaticArray[0xb8_u8, 0x3c_u8, 0x7e_u8, 0xff_u8, 0x29_u8, 0xc_u8, 0x26_u8, 0x6e_u8])
    def query_interface(this : IProtectedModeMenuServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProtectedModeMenuServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProtectedModeMenuServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_menu(this : IProtectedModeMenuServices*, phMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_menu.call(this, phMenu)
    end
    def load_menu(this : IProtectedModeMenuServices*, pszModuleName : Win32cr::Foundation::PWSTR, pszMenuName : Win32cr::Foundation::PWSTR, phMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_menu.call(this, pszModuleName, pszMenuName, phMenu)
    end
    def load_menu_id(this : IProtectedModeMenuServices*, pszModuleName : Win32cr::Foundation::PWSTR, wResourceID : UInt16, phMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_menu_id.call(this, pszModuleName, wResourceID, phMenu)
    end

  end

  @[Extern]
  record IOleUILinkContainerWVtbl,
    query_interface : Proc(IOleUILinkContainerW*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUILinkContainerW*, UInt32),
    release : Proc(IOleUILinkContainerW*, UInt32),
    get_next_link : Proc(IOleUILinkContainerW*, UInt32, UInt32),
    set_link_update_options : Proc(IOleUILinkContainerW*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_link_update_options : Proc(IOleUILinkContainerW*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_link_source : Proc(IOleUILinkContainerW*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_link_source : Proc(IOleUILinkContainerW*, UInt32, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_link_source : Proc(IOleUILinkContainerW*, UInt32, Win32cr::Foundation::HRESULT),
    update_link : Proc(IOleUILinkContainerW*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_link : Proc(IOleUILinkContainerW*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUILinkContainerW, lpVtbl : IOleUILinkContainerWVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUILinkContainerW*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUILinkContainerW*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUILinkContainerW*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_link(this : IOleUILinkContainerW*, dwLink : UInt32) : UInt32
      @lpVtbl.try &.value.get_next_link.call(this, dwLink)
    end
    def set_link_update_options(this : IOleUILinkContainerW*, dwLink : UInt32, dwUpdateOpt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_update_options.call(this, dwLink, dwUpdateOpt)
    end
    def get_link_update_options(this : IOleUILinkContainerW*, dwLink : UInt32, lpdwUpdateOpt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_update_options.call(this, dwLink, lpdwUpdateOpt)
    end
    def set_link_source(this : IOleUILinkContainerW*, dwLink : UInt32, lpszDisplayName : Win32cr::Foundation::PWSTR, lenFileName : UInt32, pchEaten : UInt32*, fValidateSource : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_source.call(this, dwLink, lpszDisplayName, lenFileName, pchEaten, fValidateSource)
    end
    def get_link_source(this : IOleUILinkContainerW*, dwLink : UInt32, lplpszDisplayName : Win32cr::Foundation::PWSTR*, lplenFileName : UInt32*, lplpszFullLinkType : Win32cr::Foundation::PWSTR*, lplpszShortLinkType : Win32cr::Foundation::PWSTR*, lpfSourceAvailable : Win32cr::Foundation::BOOL*, lpfIsSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_source.call(this, dwLink, lplpszDisplayName, lplenFileName, lplpszFullLinkType, lplpszShortLinkType, lpfSourceAvailable, lpfIsSelected)
    end
    def open_link_source(this : IOleUILinkContainerW*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_link_source.call(this, dwLink)
    end
    def update_link(this : IOleUILinkContainerW*, dwLink : UInt32, fErrorMessage : Win32cr::Foundation::BOOL, fReserved : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_link.call(this, dwLink, fErrorMessage, fReserved)
    end
    def cancel_link(this : IOleUILinkContainerW*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_link.call(this, dwLink)
    end

  end

  @[Extern]
  record IOleUILinkContainerAVtbl,
    query_interface : Proc(IOleUILinkContainerA*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUILinkContainerA*, UInt32),
    release : Proc(IOleUILinkContainerA*, UInt32),
    get_next_link : Proc(IOleUILinkContainerA*, UInt32, UInt32),
    set_link_update_options : Proc(IOleUILinkContainerA*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_link_update_options : Proc(IOleUILinkContainerA*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_link_source : Proc(IOleUILinkContainerA*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_link_source : Proc(IOleUILinkContainerA*, UInt32, Win32cr::Foundation::PSTR*, UInt32*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_link_source : Proc(IOleUILinkContainerA*, UInt32, Win32cr::Foundation::HRESULT),
    update_link : Proc(IOleUILinkContainerA*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_link : Proc(IOleUILinkContainerA*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUILinkContainerA, lpVtbl : IOleUILinkContainerAVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUILinkContainerA*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUILinkContainerA*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUILinkContainerA*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_link(this : IOleUILinkContainerA*, dwLink : UInt32) : UInt32
      @lpVtbl.try &.value.get_next_link.call(this, dwLink)
    end
    def set_link_update_options(this : IOleUILinkContainerA*, dwLink : UInt32, dwUpdateOpt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_update_options.call(this, dwLink, dwUpdateOpt)
    end
    def get_link_update_options(this : IOleUILinkContainerA*, dwLink : UInt32, lpdwUpdateOpt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_update_options.call(this, dwLink, lpdwUpdateOpt)
    end
    def set_link_source(this : IOleUILinkContainerA*, dwLink : UInt32, lpszDisplayName : Win32cr::Foundation::PSTR, lenFileName : UInt32, pchEaten : UInt32*, fValidateSource : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_source.call(this, dwLink, lpszDisplayName, lenFileName, pchEaten, fValidateSource)
    end
    def get_link_source(this : IOleUILinkContainerA*, dwLink : UInt32, lplpszDisplayName : Win32cr::Foundation::PSTR*, lplenFileName : UInt32*, lplpszFullLinkType : Win32cr::Foundation::PSTR*, lplpszShortLinkType : Win32cr::Foundation::PSTR*, lpfSourceAvailable : Win32cr::Foundation::BOOL*, lpfIsSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_source.call(this, dwLink, lplpszDisplayName, lplenFileName, lplpszFullLinkType, lplpszShortLinkType, lpfSourceAvailable, lpfIsSelected)
    end
    def open_link_source(this : IOleUILinkContainerA*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_link_source.call(this, dwLink)
    end
    def update_link(this : IOleUILinkContainerA*, dwLink : UInt32, fErrorMessage : Win32cr::Foundation::BOOL, fReserved : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_link.call(this, dwLink, fErrorMessage, fReserved)
    end
    def cancel_link(this : IOleUILinkContainerA*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_link.call(this, dwLink)
    end

  end

  @[Extern]
  record IOleUIObjInfoWVtbl,
    query_interface : Proc(IOleUIObjInfoW*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUIObjInfoW*, UInt32),
    release : Proc(IOleUIObjInfoW*, UInt32),
    get_object_info : Proc(IOleUIObjInfoW*, UInt32, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_convert_info : Proc(IOleUIObjInfoW*, UInt32, LibC::GUID*, UInt16*, LibC::GUID*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT),
    convert_object : Proc(IOleUIObjInfoW*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_view_info : Proc(IOleUIObjInfoW*, UInt32, LibC::IntPtrT*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    set_view_info : Proc(IOleUIObjInfoW*, UInt32, LibC::IntPtrT, UInt32, Int32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUIObjInfoW, lpVtbl : IOleUIObjInfoWVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUIObjInfoW*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUIObjInfoW*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUIObjInfoW*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object_info(this : IOleUIObjInfoW*, dwObject : UInt32, lpdwObjSize : UInt32*, lplpszLabel : Win32cr::Foundation::PWSTR*, lplpszType : Win32cr::Foundation::PWSTR*, lplpszShortType : Win32cr::Foundation::PWSTR*, lplpszLocation : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_info.call(this, dwObject, lpdwObjSize, lplpszLabel, lplpszType, lplpszShortType, lplpszLocation)
    end
    def get_convert_info(this : IOleUIObjInfoW*, dwObject : UInt32, lpClassID : LibC::GUID*, lpwFormat : UInt16*, lpConvertDefaultClassID : LibC::GUID*, lplpClsidExclude : LibC::GUID**, lpcClsidExclude : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_convert_info.call(this, dwObject, lpClassID, lpwFormat, lpConvertDefaultClassID, lplpClsidExclude, lpcClsidExclude)
    end
    def convert_object(this : IOleUIObjInfoW*, dwObject : UInt32, clsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_object.call(this, dwObject, clsidNew)
    end
    def get_view_info(this : IOleUIObjInfoW*, dwObject : UInt32, phMetaPict : LibC::IntPtrT*, pdvAspect : UInt32*, pnCurrentScale : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_view_info.call(this, dwObject, phMetaPict, pdvAspect, pnCurrentScale)
    end
    def set_view_info(this : IOleUIObjInfoW*, dwObject : UInt32, hMetaPict : LibC::IntPtrT, dvAspect : UInt32, nCurrentScale : Int32, bRelativeToOrig : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_view_info.call(this, dwObject, hMetaPict, dvAspect, nCurrentScale, bRelativeToOrig)
    end

  end

  @[Extern]
  record IOleUIObjInfoAVtbl,
    query_interface : Proc(IOleUIObjInfoA*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUIObjInfoA*, UInt32),
    release : Proc(IOleUIObjInfoA*, UInt32),
    get_object_info : Proc(IOleUIObjInfoA*, UInt32, UInt32*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::HRESULT),
    get_convert_info : Proc(IOleUIObjInfoA*, UInt32, LibC::GUID*, UInt16*, LibC::GUID*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT),
    convert_object : Proc(IOleUIObjInfoA*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_view_info : Proc(IOleUIObjInfoA*, UInt32, LibC::IntPtrT*, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    set_view_info : Proc(IOleUIObjInfoA*, UInt32, LibC::IntPtrT, UInt32, Int32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUIObjInfoA, lpVtbl : IOleUIObjInfoAVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUIObjInfoA*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUIObjInfoA*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUIObjInfoA*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object_info(this : IOleUIObjInfoA*, dwObject : UInt32, lpdwObjSize : UInt32*, lplpszLabel : Win32cr::Foundation::PSTR*, lplpszType : Win32cr::Foundation::PSTR*, lplpszShortType : Win32cr::Foundation::PSTR*, lplpszLocation : Win32cr::Foundation::PSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_info.call(this, dwObject, lpdwObjSize, lplpszLabel, lplpszType, lplpszShortType, lplpszLocation)
    end
    def get_convert_info(this : IOleUIObjInfoA*, dwObject : UInt32, lpClassID : LibC::GUID*, lpwFormat : UInt16*, lpConvertDefaultClassID : LibC::GUID*, lplpClsidExclude : LibC::GUID**, lpcClsidExclude : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_convert_info.call(this, dwObject, lpClassID, lpwFormat, lpConvertDefaultClassID, lplpClsidExclude, lpcClsidExclude)
    end
    def convert_object(this : IOleUIObjInfoA*, dwObject : UInt32, clsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_object.call(this, dwObject, clsidNew)
    end
    def get_view_info(this : IOleUIObjInfoA*, dwObject : UInt32, phMetaPict : LibC::IntPtrT*, pdvAspect : UInt32*, pnCurrentScale : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_view_info.call(this, dwObject, phMetaPict, pdvAspect, pnCurrentScale)
    end
    def set_view_info(this : IOleUIObjInfoA*, dwObject : UInt32, hMetaPict : LibC::IntPtrT, dvAspect : UInt32, nCurrentScale : Int32, bRelativeToOrig : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_view_info.call(this, dwObject, hMetaPict, dvAspect, nCurrentScale, bRelativeToOrig)
    end

  end

  @[Extern]
  record IOleUILinkInfoWVtbl,
    query_interface : Proc(IOleUILinkInfoW*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUILinkInfoW*, UInt32),
    release : Proc(IOleUILinkInfoW*, UInt32),
    get_next_link : Proc(IOleUILinkInfoW*, UInt32, UInt32),
    set_link_update_options : Proc(IOleUILinkInfoW*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_link_update_options : Proc(IOleUILinkInfoW*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_link_source : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_link_source : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_link_source : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::HRESULT),
    update_link : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_link : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::HRESULT),
    get_last_update : Proc(IOleUILinkInfoW*, UInt32, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUILinkInfoW, lpVtbl : IOleUILinkInfoWVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUILinkInfoW*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUILinkInfoW*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUILinkInfoW*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_link(this : IOleUILinkInfoW*, dwLink : UInt32) : UInt32
      @lpVtbl.try &.value.get_next_link.call(this, dwLink)
    end
    def set_link_update_options(this : IOleUILinkInfoW*, dwLink : UInt32, dwUpdateOpt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_update_options.call(this, dwLink, dwUpdateOpt)
    end
    def get_link_update_options(this : IOleUILinkInfoW*, dwLink : UInt32, lpdwUpdateOpt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_update_options.call(this, dwLink, lpdwUpdateOpt)
    end
    def set_link_source(this : IOleUILinkInfoW*, dwLink : UInt32, lpszDisplayName : Win32cr::Foundation::PWSTR, lenFileName : UInt32, pchEaten : UInt32*, fValidateSource : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_source.call(this, dwLink, lpszDisplayName, lenFileName, pchEaten, fValidateSource)
    end
    def get_link_source(this : IOleUILinkInfoW*, dwLink : UInt32, lplpszDisplayName : Win32cr::Foundation::PWSTR*, lplenFileName : UInt32*, lplpszFullLinkType : Win32cr::Foundation::PWSTR*, lplpszShortLinkType : Win32cr::Foundation::PWSTR*, lpfSourceAvailable : Win32cr::Foundation::BOOL*, lpfIsSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_source.call(this, dwLink, lplpszDisplayName, lplenFileName, lplpszFullLinkType, lplpszShortLinkType, lpfSourceAvailable, lpfIsSelected)
    end
    def open_link_source(this : IOleUILinkInfoW*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_link_source.call(this, dwLink)
    end
    def update_link(this : IOleUILinkInfoW*, dwLink : UInt32, fErrorMessage : Win32cr::Foundation::BOOL, fReserved : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_link.call(this, dwLink, fErrorMessage, fReserved)
    end
    def cancel_link(this : IOleUILinkInfoW*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_link.call(this, dwLink)
    end
    def get_last_update(this : IOleUILinkInfoW*, dwLink : UInt32, lpLastUpdate : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_update.call(this, dwLink, lpLastUpdate)
    end

  end

  @[Extern]
  record IOleUILinkInfoAVtbl,
    query_interface : Proc(IOleUILinkInfoA*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOleUILinkInfoA*, UInt32),
    release : Proc(IOleUILinkInfoA*, UInt32),
    get_next_link : Proc(IOleUILinkInfoA*, UInt32, UInt32),
    set_link_update_options : Proc(IOleUILinkInfoA*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_link_update_options : Proc(IOleUILinkInfoA*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_link_source : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_link_source : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::PSTR*, UInt32*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    open_link_source : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::HRESULT),
    update_link : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_link : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::HRESULT),
    get_last_update : Proc(IOleUILinkInfoA*, UInt32, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOleUILinkInfoA, lpVtbl : IOleUILinkInfoAVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IOleUILinkInfoA*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOleUILinkInfoA*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOleUILinkInfoA*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_link(this : IOleUILinkInfoA*, dwLink : UInt32) : UInt32
      @lpVtbl.try &.value.get_next_link.call(this, dwLink)
    end
    def set_link_update_options(this : IOleUILinkInfoA*, dwLink : UInt32, dwUpdateOpt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_update_options.call(this, dwLink, dwUpdateOpt)
    end
    def get_link_update_options(this : IOleUILinkInfoA*, dwLink : UInt32, lpdwUpdateOpt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_update_options.call(this, dwLink, lpdwUpdateOpt)
    end
    def set_link_source(this : IOleUILinkInfoA*, dwLink : UInt32, lpszDisplayName : Win32cr::Foundation::PSTR, lenFileName : UInt32, pchEaten : UInt32*, fValidateSource : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_link_source.call(this, dwLink, lpszDisplayName, lenFileName, pchEaten, fValidateSource)
    end
    def get_link_source(this : IOleUILinkInfoA*, dwLink : UInt32, lplpszDisplayName : Win32cr::Foundation::PSTR*, lplenFileName : UInt32*, lplpszFullLinkType : Win32cr::Foundation::PSTR*, lplpszShortLinkType : Win32cr::Foundation::PSTR*, lpfSourceAvailable : Win32cr::Foundation::BOOL*, lpfIsSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_source.call(this, dwLink, lplpszDisplayName, lplenFileName, lplpszFullLinkType, lplpszShortLinkType, lpfSourceAvailable, lpfIsSelected)
    end
    def open_link_source(this : IOleUILinkInfoA*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_link_source.call(this, dwLink)
    end
    def update_link(this : IOleUILinkInfoA*, dwLink : UInt32, fErrorMessage : Win32cr::Foundation::BOOL, fReserved : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_link.call(this, dwLink, fErrorMessage, fReserved)
    end
    def cancel_link(this : IOleUILinkInfoA*, dwLink : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_link.call(this, dwLink)
    end
    def get_last_update(this : IOleUILinkInfoA*, dwLink : UInt32, lpLastUpdate : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_update.call(this, dwLink, lpLastUpdate)
    end

  end

  @[Extern]
  record IDispatchExVtbl,
    query_interface : Proc(IDispatchEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDispatchEx*, UInt32),
    release : Proc(IDispatchEx*, UInt32),
    get_type_info_count : Proc(IDispatchEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDispatchEx*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDispatchEx*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDispatchEx*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_disp_id : Proc(IDispatchEx*, Win32cr::Foundation::BSTR, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_ex : Proc(IDispatchEx*, Int32, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, Void*, Win32cr::Foundation::HRESULT),
    delete_member_by_name : Proc(IDispatchEx*, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::HRESULT),
    delete_member_by_disp_id : Proc(IDispatchEx*, Int32, Win32cr::Foundation::HRESULT),
    get_member_properties : Proc(IDispatchEx*, Int32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_member_name : Proc(IDispatchEx*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_next_disp_id : Proc(IDispatchEx*, UInt32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name_space_parent : Proc(IDispatchEx*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDispatchEx, lpVtbl : IDispatchExVtbl* do
    GUID = LibC::GUID.new(0xa6ef9860_u32, 0xc720_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x37_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IDispatchEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDispatchEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDispatchEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDispatchEx*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDispatchEx*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDispatchEx*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDispatchEx*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_disp_id(this : IDispatchEx*, bstrName : Win32cr::Foundation::BSTR, grfdex : UInt32, pid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disp_id.call(this, bstrName, grfdex, pid)
    end
    def invoke_ex(this : IDispatchEx*, id : Int32, lcid : UInt32, wFlags : UInt16, pdp : Win32cr::System::Com::DISPPARAMS*, pvarRes : Win32cr::System::Com::VARIANT*, pei : Win32cr::System::Com::EXCEPINFO*, pspCaller : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_ex.call(this, id, lcid, wFlags, pdp, pvarRes, pei, pspCaller)
    end
    def delete_member_by_name(this : IDispatchEx*, bstrName : Win32cr::Foundation::BSTR, grfdex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_member_by_name.call(this, bstrName, grfdex)
    end
    def delete_member_by_disp_id(this : IDispatchEx*, id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_member_by_disp_id.call(this, id)
    end
    def get_member_properties(this : IDispatchEx*, id : Int32, grfdexFetch : UInt32, pgrfdex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_member_properties.call(this, id, grfdexFetch, pgrfdex)
    end
    def get_member_name(this : IDispatchEx*, id : Int32, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_member_name.call(this, id, pbstrName)
    end
    def get_next_disp_id(this : IDispatchEx*, grfdex : UInt32, id : Int32, pid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_disp_id.call(this, grfdex, id, pid)
    end
    def get_name_space_parent(this : IDispatchEx*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_space_parent.call(this, ppunk)
    end

  end

  @[Extern]
  record IDispErrorVtbl,
    query_interface : Proc(IDispError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDispError*, UInt32),
    release : Proc(IDispError*, UInt32),
    query_error_info : Proc(IDispError*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    get_next : Proc(IDispError*, Void**, Win32cr::Foundation::HRESULT),
    get_hresult : Proc(IDispError*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_source : Proc(IDispError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_help_info : Proc(IDispError*, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IDispError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDispError, lpVtbl : IDispErrorVtbl* do
    GUID = LibC::GUID.new(0xa6ef9861_u32, 0xc720_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x37_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IDispError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDispError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDispError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_error_info(this : IDispError*, guidErrorType : LibC::GUID, ppde : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_error_info.call(this, guidErrorType, ppde)
    end
    def get_next(this : IDispError*, ppde : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, ppde)
    end
    def get_hresult(this : IDispError*, phr : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hresult.call(this, phr)
    end
    def get_source(this : IDispError*, pbstrSource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source.call(this, pbstrSource)
    end
    def get_help_info(this : IDispError*, pbstrFileName : Win32cr::Foundation::BSTR*, pdwContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_help_info.call(this, pbstrFileName, pdwContext)
    end
    def get_description(this : IDispError*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription)
    end

  end

  @[Extern]
  record IVariantChangeTypeVtbl,
    query_interface : Proc(IVariantChangeType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVariantChangeType*, UInt32),
    release : Proc(IVariantChangeType*, UInt32),
    change_type : Proc(IVariantChangeType*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, UInt32, UInt16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVariantChangeType, lpVtbl : IVariantChangeTypeVtbl* do
    GUID = LibC::GUID.new(0xa6ef9862_u32, 0xc720_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x37_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
    def query_interface(this : IVariantChangeType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVariantChangeType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVariantChangeType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def change_type(this : IVariantChangeType*, pvarDst : Win32cr::System::Com::VARIANT*, pvarSrc : Win32cr::System::Com::VARIANT*, lcid : UInt32, vtNew : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_type.call(this, pvarDst, pvarSrc, lcid, vtNew)
    end

  end

  @[Extern]
  record IObjectIdentityVtbl,
    query_interface : Proc(IObjectIdentity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectIdentity*, UInt32),
    release : Proc(IObjectIdentity*, UInt32),
    is_equal_object : Proc(IObjectIdentity*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectIdentity, lpVtbl : IObjectIdentityVtbl* do
    GUID = LibC::GUID.new(0xca04b7e6_u32, 0xd21_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0xc5_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
    def query_interface(this : IObjectIdentity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectIdentity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectIdentity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_equal_object(this : IObjectIdentity*, punk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_object.call(this, punk)
    end

  end

  @[Extern]
  record ICanHandleExceptionVtbl,
    query_interface : Proc(ICanHandleException*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICanHandleException*, UInt32),
    release : Proc(ICanHandleException*, UInt32),
    can_handle_exception : Proc(ICanHandleException*, Win32cr::System::Com::EXCEPINFO*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICanHandleException, lpVtbl : ICanHandleExceptionVtbl* do
    GUID = LibC::GUID.new(0xc5598e60_u32, 0xb307_u16, 0x11d1_u16, StaticArray[0xb2_u8, 0x7d_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfb_u8])
    def query_interface(this : ICanHandleException*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICanHandleException*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICanHandleException*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def can_handle_exception(this : ICanHandleException*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_handle_exception.call(this, pExcepInfo, pvar)
    end

  end

  @[Extern]
  record IProvideRuntimeContextVtbl,
    query_interface : Proc(IProvideRuntimeContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideRuntimeContext*, UInt32),
    release : Proc(IProvideRuntimeContext*, UInt32),
    get_current_source_context : Proc(IProvideRuntimeContext*, LibC::UIntPtrT*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideRuntimeContext, lpVtbl : IProvideRuntimeContextVtbl* do
    GUID = LibC::GUID.new(0x10e2414a_u32, 0xec59_u16, 0x49d2_u16, StaticArray[0xbc_u8, 0x51_u8, 0x5a_u8, 0xdd_u8, 0x2c_u8, 0x36_u8, 0xfe_u8, 0xbc_u8])
    def query_interface(this : IProvideRuntimeContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideRuntimeContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideRuntimeContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_current_source_context(this : IProvideRuntimeContext*, pdwContext : LibC::UIntPtrT*, pfExecutingGlobalCode : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_source_context.call(this, pdwContext, pfExecutingGlobalCode)
    end

  end

  def dosDateTimeToVariantTime(wDosDate : UInt16, wDosTime : UInt16, pvtime : Float64*) : Int32
    C.DosDateTimeToVariantTime(wDosDate, wDosTime, pvtime)
  end

  def variantTimeToDosDateTime(vtime : Float64, pwDosDate : UInt16*, pwDosTime : UInt16*) : Int32
    C.VariantTimeToDosDateTime(vtime, pwDosDate, pwDosTime)
  end

  def systemTimeToVariantTime(lpSystemTime : Win32cr::Foundation::SYSTEMTIME*, pvtime : Float64*) : Int32
    C.SystemTimeToVariantTime(lpSystemTime, pvtime)
  end

  def variantTimeToSystemTime(vtime : Float64, lpSystemTime : Win32cr::Foundation::SYSTEMTIME*) : Int32
    C.VariantTimeToSystemTime(vtime, lpSystemTime)
  end

  def safeArrayAllocDescriptor(cDims : UInt32, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
    C.SafeArrayAllocDescriptor(cDims, ppsaOut)
  end

  def safeArrayAllocDescriptorEx(vt : UInt16, cDims : UInt32, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
    C.SafeArrayAllocDescriptorEx(vt, cDims, ppsaOut)
  end

  def safeArrayAllocData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayAllocData(psa)
  end

  def safeArrayCreate(vt : UInt16, cDims : UInt32, rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*) : Win32cr::System::Com::SAFEARRAY*
    C.SafeArrayCreate(vt, cDims, rgsabound)
  end

  def safeArrayCreateEx(vt : UInt16, cDims : UInt32, rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*, pvExtra : Void*) : Win32cr::System::Com::SAFEARRAY*
    C.SafeArrayCreateEx(vt, cDims, rgsabound, pvExtra)
  end

  def safeArrayCopyData(psaSource : Win32cr::System::Com::SAFEARRAY*, psaTarget : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayCopyData(psaSource, psaTarget)
  end

  def safeArrayReleaseDescriptor(psa : Win32cr::System::Com::SAFEARRAY*) : Void
    C.SafeArrayReleaseDescriptor(psa)
  end

  def safeArrayDestroyDescriptor(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayDestroyDescriptor(psa)
  end

  def safeArrayReleaseData(pData : Void*) : Void
    C.SafeArrayReleaseData(pData)
  end

  def safeArrayDestroyData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayDestroyData(psa)
  end

  def safeArrayAddRef(psa : Win32cr::System::Com::SAFEARRAY*, ppDataToRelease : Void**) : Win32cr::Foundation::HRESULT
    C.SafeArrayAddRef(psa, ppDataToRelease)
  end

  def safeArrayDestroy(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayDestroy(psa)
  end

  def safeArrayRedim(psa : Win32cr::System::Com::SAFEARRAY*, psaboundNew : Win32cr::System::Com::SAFEARRAYBOUND*) : Win32cr::Foundation::HRESULT
    C.SafeArrayRedim(psa, psaboundNew)
  end

  def safeArrayGetDim(psa : Win32cr::System::Com::SAFEARRAY*) : UInt32
    C.SafeArrayGetDim(psa)
  end

  def safeArrayGetElemsize(psa : Win32cr::System::Com::SAFEARRAY*) : UInt32
    C.SafeArrayGetElemsize(psa)
  end

  def safeArrayGetUBound(psa : Win32cr::System::Com::SAFEARRAY*, nDim : UInt32, plUbound : Int32*) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetUBound(psa, nDim, plUbound)
  end

  def safeArrayGetLBound(psa : Win32cr::System::Com::SAFEARRAY*, nDim : UInt32, plLbound : Int32*) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetLBound(psa, nDim, plLbound)
  end

  def safeArrayLock(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayLock(psa)
  end

  def safeArrayUnlock(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayUnlock(psa)
  end

  def safeArrayAccessData(psa : Win32cr::System::Com::SAFEARRAY*, ppvData : Void**) : Win32cr::Foundation::HRESULT
    C.SafeArrayAccessData(psa, ppvData)
  end

  def safeArrayUnaccessData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
    C.SafeArrayUnaccessData(psa)
  end

  def safeArrayGetElement(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, pv : Void*) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetElement(psa, rgIndices, pv)
  end

  def safeArrayPutElement(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, pv : Void*) : Win32cr::Foundation::HRESULT
    C.SafeArrayPutElement(psa, rgIndices, pv)
  end

  def safeArrayCopy(psa : Win32cr::System::Com::SAFEARRAY*, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
    C.SafeArrayCopy(psa, ppsaOut)
  end

  def safeArrayPtrOfIndex(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, ppvData : Void**) : Win32cr::Foundation::HRESULT
    C.SafeArrayPtrOfIndex(psa, rgIndices, ppvData)
  end

  def safeArraySetRecordInfo(psa : Win32cr::System::Com::SAFEARRAY*, prinfo : Void*) : Win32cr::Foundation::HRESULT
    C.SafeArraySetRecordInfo(psa, prinfo)
  end

  def safeArrayGetRecordInfo(psa : Win32cr::System::Com::SAFEARRAY*, prinfo : Void**) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetRecordInfo(psa, prinfo)
  end

  def safeArraySetIID(psa : Win32cr::System::Com::SAFEARRAY*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
    C.SafeArraySetIID(psa, guid)
  end

  def safeArrayGetIID(psa : Win32cr::System::Com::SAFEARRAY*, pguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetIID(psa, pguid)
  end

  def safeArrayGetVartype(psa : Win32cr::System::Com::SAFEARRAY*, pvt : UInt16*) : Win32cr::Foundation::HRESULT
    C.SafeArrayGetVartype(psa, pvt)
  end

  def safeArrayCreateVector(vt : UInt16, lLbound : Int32, cElements : UInt32) : Win32cr::System::Com::SAFEARRAY*
    C.SafeArrayCreateVector(vt, lLbound, cElements)
  end

  def safeArrayCreateVectorEx(vt : UInt16, lLbound : Int32, cElements : UInt32, pvExtra : Void*) : Win32cr::System::Com::SAFEARRAY*
    C.SafeArrayCreateVectorEx(vt, lLbound, cElements, pvExtra)
  end

  def variantInit(pvarg : Win32cr::System::Com::VARIANT*) : Void
    C.VariantInit(pvarg)
  end

  def variantClear(pvarg : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VariantClear(pvarg)
  end

  def variantCopy(pvargDest : Win32cr::System::Com::VARIANT*, pvargSrc : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VariantCopy(pvargDest, pvargSrc)
  end

  def variantCopyInd(pvarDest : Win32cr::System::Com::VARIANT*, pvargSrc : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VariantCopyInd(pvarDest, pvargSrc)
  end

  def variantChangeType(pvargDest : Win32cr::System::Com::VARIANT*, pvarSrc : Win32cr::System::Com::VARIANT*, wFlags : UInt16, vt : UInt16) : Win32cr::Foundation::HRESULT
    C.VariantChangeType(pvargDest, pvarSrc, wFlags, vt)
  end

  def variantChangeTypeEx(pvargDest : Win32cr::System::Com::VARIANT*, pvarSrc : Win32cr::System::Com::VARIANT*, lcid : UInt32, wFlags : UInt16, vt : UInt16) : Win32cr::Foundation::HRESULT
    C.VariantChangeTypeEx(pvargDest, pvarSrc, lcid, wFlags, vt)
  end

  def vectorFromBstr(bstr : Win32cr::Foundation::BSTR, ppsa : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
    C.VectorFromBstr(bstr, ppsa)
  end

  def bstrFromVector(psa : Win32cr::System::Com::SAFEARRAY*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.BstrFromVector(psa, pbstr)
  end

  def varUI1FromI2(sIn : Int16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromI2(sIn, pbOut)
  end

  def varUI1FromI4(lIn : Int32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromI4(lIn, pbOut)
  end

  def varUI1FromI8(i64In : Int64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromI8(i64In, pbOut)
  end

  def varUI1FromR4(fltIn : Float32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromR4(fltIn, pbOut)
  end

  def varUI1FromR8(dblIn : Float64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromR8(dblIn, pbOut)
  end

  def varUI1FromCy(cyIn : Win32cr::System::Com::CY, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromCy(cyIn, pbOut)
  end

  def varUI1FromDate(dateIn : Float64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromDate(dateIn, pbOut)
  end

  def varUI1FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromStr(strIn, lcid, dwFlags, pbOut)
  end

  def varUI1FromDisp(pdispIn : Void*, lcid : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromDisp(pdispIn, lcid, pbOut)
  end

  def varUI1FromBool(boolIn : Int16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromBool(boolIn, pbOut)
  end

  def varUI1FromI1(cIn : Win32cr::Foundation::CHAR, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromI1(cIn, pbOut)
  end

  def varUI1FromUI2(uiIn : UInt16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromUI2(uiIn, pbOut)
  end

  def varUI1FromUI4(ulIn : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromUI4(ulIn, pbOut)
  end

  def varUI1FromUI8(ui64In : UInt64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromUI8(ui64In, pbOut)
  end

  def varUI1FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pbOut : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarUI1FromDec(pdecIn, pbOut)
  end

  def varI2FromUI1(bIn : UInt8, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromUI1(bIn, psOut)
  end

  def varI2FromI4(lIn : Int32, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromI4(lIn, psOut)
  end

  def varI2FromI8(i64In : Int64, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromI8(i64In, psOut)
  end

  def varI2FromR4(fltIn : Float32, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromR4(fltIn, psOut)
  end

  def varI2FromR8(dblIn : Float64, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromR8(dblIn, psOut)
  end

  def varI2FromCy(cyIn : Win32cr::System::Com::CY, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromCy(cyIn, psOut)
  end

  def varI2FromDate(dateIn : Float64, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromDate(dateIn, psOut)
  end

  def varI2FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromStr(strIn, lcid, dwFlags, psOut)
  end

  def varI2FromDisp(pdispIn : Void*, lcid : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromDisp(pdispIn, lcid, psOut)
  end

  def varI2FromBool(boolIn : Int16, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromBool(boolIn, psOut)
  end

  def varI2FromI1(cIn : Win32cr::Foundation::CHAR, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromI1(cIn, psOut)
  end

  def varI2FromUI2(uiIn : UInt16, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromUI2(uiIn, psOut)
  end

  def varI2FromUI4(ulIn : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromUI4(ulIn, psOut)
  end

  def varI2FromUI8(ui64In : UInt64, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromUI8(ui64In, psOut)
  end

  def varI2FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, psOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarI2FromDec(pdecIn, psOut)
  end

  def varI4FromUI1(bIn : UInt8, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromUI1(bIn, plOut)
  end

  def varI4FromI2(sIn : Int16, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromI2(sIn, plOut)
  end

  def varI4FromI8(i64In : Int64, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromI8(i64In, plOut)
  end

  def varI4FromR4(fltIn : Float32, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromR4(fltIn, plOut)
  end

  def varI4FromR8(dblIn : Float64, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromR8(dblIn, plOut)
  end

  def varI4FromCy(cyIn : Win32cr::System::Com::CY, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromCy(cyIn, plOut)
  end

  def varI4FromDate(dateIn : Float64, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromDate(dateIn, plOut)
  end

  def varI4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromStr(strIn, lcid, dwFlags, plOut)
  end

  def varI4FromDisp(pdispIn : Void*, lcid : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromDisp(pdispIn, lcid, plOut)
  end

  def varI4FromBool(boolIn : Int16, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromBool(boolIn, plOut)
  end

  def varI4FromI1(cIn : Win32cr::Foundation::CHAR, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromI1(cIn, plOut)
  end

  def varI4FromUI2(uiIn : UInt16, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromUI2(uiIn, plOut)
  end

  def varI4FromUI4(ulIn : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromUI4(ulIn, plOut)
  end

  def varI4FromUI8(ui64In : UInt64, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromUI8(ui64In, plOut)
  end

  def varI4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, plOut : Int32*) : Win32cr::Foundation::HRESULT
    C.VarI4FromDec(pdecIn, plOut)
  end

  def varI8FromUI1(bIn : UInt8, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromUI1(bIn, pi64Out)
  end

  def varI8FromI2(sIn : Int16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromI2(sIn, pi64Out)
  end

  def varI8FromR4(fltIn : Float32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromR4(fltIn, pi64Out)
  end

  def varI8FromR8(dblIn : Float64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromR8(dblIn, pi64Out)
  end

  def varI8FromCy(cyIn : Win32cr::System::Com::CY, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromCy(cyIn, pi64Out)
  end

  def varI8FromDate(dateIn : Float64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromDate(dateIn, pi64Out)
  end

  def varI8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromStr(strIn, lcid, dwFlags, pi64Out)
  end

  def varI8FromDisp(pdispIn : Void*, lcid : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromDisp(pdispIn, lcid, pi64Out)
  end

  def varI8FromBool(boolIn : Int16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromBool(boolIn, pi64Out)
  end

  def varI8FromI1(cIn : Win32cr::Foundation::CHAR, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromI1(cIn, pi64Out)
  end

  def varI8FromUI2(uiIn : UInt16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromUI2(uiIn, pi64Out)
  end

  def varI8FromUI4(ulIn : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromUI4(ulIn, pi64Out)
  end

  def varI8FromUI8(ui64In : UInt64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromUI8(ui64In, pi64Out)
  end

  def varI8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pi64Out : Int64*) : Win32cr::Foundation::HRESULT
    C.VarI8FromDec(pdecIn, pi64Out)
  end

  def varR4FromUI1(bIn : UInt8, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromUI1(bIn, pfltOut)
  end

  def varR4FromI2(sIn : Int16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromI2(sIn, pfltOut)
  end

  def varR4FromI4(lIn : Int32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromI4(lIn, pfltOut)
  end

  def varR4FromI8(i64In : Int64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromI8(i64In, pfltOut)
  end

  def varR4FromR8(dblIn : Float64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromR8(dblIn, pfltOut)
  end

  def varR4FromCy(cyIn : Win32cr::System::Com::CY, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromCy(cyIn, pfltOut)
  end

  def varR4FromDate(dateIn : Float64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromDate(dateIn, pfltOut)
  end

  def varR4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromStr(strIn, lcid, dwFlags, pfltOut)
  end

  def varR4FromDisp(pdispIn : Void*, lcid : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromDisp(pdispIn, lcid, pfltOut)
  end

  def varR4FromBool(boolIn : Int16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromBool(boolIn, pfltOut)
  end

  def varR4FromI1(cIn : Win32cr::Foundation::CHAR, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromI1(cIn, pfltOut)
  end

  def varR4FromUI2(uiIn : UInt16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromUI2(uiIn, pfltOut)
  end

  def varR4FromUI4(ulIn : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromUI4(ulIn, pfltOut)
  end

  def varR4FromUI8(ui64In : UInt64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromUI8(ui64In, pfltOut)
  end

  def varR4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pfltOut : Float32*) : Win32cr::Foundation::HRESULT
    C.VarR4FromDec(pdecIn, pfltOut)
  end

  def varR8FromUI1(bIn : UInt8, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromUI1(bIn, pdblOut)
  end

  def varR8FromI2(sIn : Int16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromI2(sIn, pdblOut)
  end

  def varR8FromI4(lIn : Int32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromI4(lIn, pdblOut)
  end

  def varR8FromI8(i64In : Int64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromI8(i64In, pdblOut)
  end

  def varR8FromR4(fltIn : Float32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromR4(fltIn, pdblOut)
  end

  def varR8FromCy(cyIn : Win32cr::System::Com::CY, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromCy(cyIn, pdblOut)
  end

  def varR8FromDate(dateIn : Float64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromDate(dateIn, pdblOut)
  end

  def varR8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromStr(strIn, lcid, dwFlags, pdblOut)
  end

  def varR8FromDisp(pdispIn : Void*, lcid : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromDisp(pdispIn, lcid, pdblOut)
  end

  def varR8FromBool(boolIn : Int16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromBool(boolIn, pdblOut)
  end

  def varR8FromI1(cIn : Win32cr::Foundation::CHAR, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromI1(cIn, pdblOut)
  end

  def varR8FromUI2(uiIn : UInt16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromUI2(uiIn, pdblOut)
  end

  def varR8FromUI4(ulIn : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromUI4(ulIn, pdblOut)
  end

  def varR8FromUI8(ui64In : UInt64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromUI8(ui64In, pdblOut)
  end

  def varR8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pdblOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8FromDec(pdecIn, pdblOut)
  end

  def varDateFromUI1(bIn : UInt8, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUI1(bIn, pdateOut)
  end

  def varDateFromI2(sIn : Int16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromI2(sIn, pdateOut)
  end

  def varDateFromI4(lIn : Int32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromI4(lIn, pdateOut)
  end

  def varDateFromI8(i64In : Int64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromI8(i64In, pdateOut)
  end

  def varDateFromR4(fltIn : Float32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromR4(fltIn, pdateOut)
  end

  def varDateFromR8(dblIn : Float64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromR8(dblIn, pdateOut)
  end

  def varDateFromCy(cyIn : Win32cr::System::Com::CY, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromCy(cyIn, pdateOut)
  end

  def varDateFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromStr(strIn, lcid, dwFlags, pdateOut)
  end

  def varDateFromDisp(pdispIn : Void*, lcid : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromDisp(pdispIn, lcid, pdateOut)
  end

  def varDateFromBool(boolIn : Int16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromBool(boolIn, pdateOut)
  end

  def varDateFromI1(cIn : Win32cr::Foundation::CHAR, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromI1(cIn, pdateOut)
  end

  def varDateFromUI2(uiIn : UInt16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUI2(uiIn, pdateOut)
  end

  def varDateFromUI4(ulIn : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUI4(ulIn, pdateOut)
  end

  def varDateFromUI8(ui64In : UInt64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUI8(ui64In, pdateOut)
  end

  def varDateFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromDec(pdecIn, pdateOut)
  end

  def varCyFromUI1(bIn : UInt8, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromUI1(bIn, pcyOut)
  end

  def varCyFromI2(sIn : Int16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromI2(sIn, pcyOut)
  end

  def varCyFromI4(lIn : Int32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromI4(lIn, pcyOut)
  end

  def varCyFromI8(i64In : Int64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromI8(i64In, pcyOut)
  end

  def varCyFromR4(fltIn : Float32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromR4(fltIn, pcyOut)
  end

  def varCyFromR8(dblIn : Float64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromR8(dblIn, pcyOut)
  end

  def varCyFromDate(dateIn : Float64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromDate(dateIn, pcyOut)
  end

  def varCyFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromStr(strIn, lcid, dwFlags, pcyOut)
  end

  def varCyFromDisp(pdispIn : Void*, lcid : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromDisp(pdispIn, lcid, pcyOut)
  end

  def varCyFromBool(boolIn : Int16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromBool(boolIn, pcyOut)
  end

  def varCyFromI1(cIn : Win32cr::Foundation::CHAR, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromI1(cIn, pcyOut)
  end

  def varCyFromUI2(uiIn : UInt16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromUI2(uiIn, pcyOut)
  end

  def varCyFromUI4(ulIn : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromUI4(ulIn, pcyOut)
  end

  def varCyFromUI8(ui64In : UInt64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromUI8(ui64In, pcyOut)
  end

  def varCyFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFromDec(pdecIn, pcyOut)
  end

  def varBstrFromUI1(bVal : UInt8, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromUI1(bVal, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromI2(iVal : Int16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromI2(iVal, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromI4(lIn : Int32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromI4(lIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromI8(i64In : Int64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromI8(i64In, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromR4(fltIn : Float32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromR4(fltIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromR8(dblIn : Float64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromR8(dblIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromCy(cyIn : Win32cr::System::Com::CY, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromCy(cyIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromDate(dateIn : Float64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromDate(dateIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromDisp(pdispIn : Void*, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromDisp(pdispIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromBool(boolIn : Int16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromBool(boolIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromI1(cIn : Win32cr::Foundation::CHAR, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromI1(cIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromUI2(uiIn : UInt16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromUI2(uiIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromUI4(ulIn : UInt32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromUI4(ulIn, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromUI8(ui64In : UInt64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromUI8(ui64In, lcid, dwFlags, pbstrOut)
  end

  def varBstrFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarBstrFromDec(pdecIn, lcid, dwFlags, pbstrOut)
  end

  def varBoolFromUI1(bIn : UInt8, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromUI1(bIn, pboolOut)
  end

  def varBoolFromI2(sIn : Int16, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromI2(sIn, pboolOut)
  end

  def varBoolFromI4(lIn : Int32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromI4(lIn, pboolOut)
  end

  def varBoolFromI8(i64In : Int64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromI8(i64In, pboolOut)
  end

  def varBoolFromR4(fltIn : Float32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromR4(fltIn, pboolOut)
  end

  def varBoolFromR8(dblIn : Float64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromR8(dblIn, pboolOut)
  end

  def varBoolFromDate(dateIn : Float64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromDate(dateIn, pboolOut)
  end

  def varBoolFromCy(cyIn : Win32cr::System::Com::CY, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromCy(cyIn, pboolOut)
  end

  def varBoolFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromStr(strIn, lcid, dwFlags, pboolOut)
  end

  def varBoolFromDisp(pdispIn : Void*, lcid : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromDisp(pdispIn, lcid, pboolOut)
  end

  def varBoolFromI1(cIn : Win32cr::Foundation::CHAR, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromI1(cIn, pboolOut)
  end

  def varBoolFromUI2(uiIn : UInt16, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromUI2(uiIn, pboolOut)
  end

  def varBoolFromUI4(ulIn : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromUI4(ulIn, pboolOut)
  end

  def varBoolFromUI8(i64In : UInt64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromUI8(i64In, pboolOut)
  end

  def varBoolFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pboolOut : Int16*) : Win32cr::Foundation::HRESULT
    C.VarBoolFromDec(pdecIn, pboolOut)
  end

  def varI1FromUI1(bIn : UInt8, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromUI1(bIn, pcOut)
  end

  def varI1FromI2(uiIn : Int16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromI2(uiIn, pcOut)
  end

  def varI1FromI4(lIn : Int32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromI4(lIn, pcOut)
  end

  def varI1FromI8(i64In : Int64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromI8(i64In, pcOut)
  end

  def varI1FromR4(fltIn : Float32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromR4(fltIn, pcOut)
  end

  def varI1FromR8(dblIn : Float64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromR8(dblIn, pcOut)
  end

  def varI1FromDate(dateIn : Float64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromDate(dateIn, pcOut)
  end

  def varI1FromCy(cyIn : Win32cr::System::Com::CY, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromCy(cyIn, pcOut)
  end

  def varI1FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromStr(strIn, lcid, dwFlags, pcOut)
  end

  def varI1FromDisp(pdispIn : Void*, lcid : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromDisp(pdispIn, lcid, pcOut)
  end

  def varI1FromBool(boolIn : Int16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromBool(boolIn, pcOut)
  end

  def varI1FromUI2(uiIn : UInt16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromUI2(uiIn, pcOut)
  end

  def varI1FromUI4(ulIn : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromUI4(ulIn, pcOut)
  end

  def varI1FromUI8(i64In : UInt64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromUI8(i64In, pcOut)
  end

  def varI1FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
    C.VarI1FromDec(pdecIn, pcOut)
  end

  def varUI2FromUI1(bIn : UInt8, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromUI1(bIn, puiOut)
  end

  def varUI2FromI2(uiIn : Int16, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromI2(uiIn, puiOut)
  end

  def varUI2FromI4(lIn : Int32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromI4(lIn, puiOut)
  end

  def varUI2FromI8(i64In : Int64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromI8(i64In, puiOut)
  end

  def varUI2FromR4(fltIn : Float32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromR4(fltIn, puiOut)
  end

  def varUI2FromR8(dblIn : Float64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromR8(dblIn, puiOut)
  end

  def varUI2FromDate(dateIn : Float64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromDate(dateIn, puiOut)
  end

  def varUI2FromCy(cyIn : Win32cr::System::Com::CY, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromCy(cyIn, puiOut)
  end

  def varUI2FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromStr(strIn, lcid, dwFlags, puiOut)
  end

  def varUI2FromDisp(pdispIn : Void*, lcid : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromDisp(pdispIn, lcid, puiOut)
  end

  def varUI2FromBool(boolIn : Int16, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromBool(boolIn, puiOut)
  end

  def varUI2FromI1(cIn : Win32cr::Foundation::CHAR, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromI1(cIn, puiOut)
  end

  def varUI2FromUI4(ulIn : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromUI4(ulIn, puiOut)
  end

  def varUI2FromUI8(i64In : UInt64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromUI8(i64In, puiOut)
  end

  def varUI2FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, puiOut : UInt16*) : Win32cr::Foundation::HRESULT
    C.VarUI2FromDec(pdecIn, puiOut)
  end

  def varUI4FromUI1(bIn : UInt8, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromUI1(bIn, pulOut)
  end

  def varUI4FromI2(uiIn : Int16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromI2(uiIn, pulOut)
  end

  def varUI4FromI4(lIn : Int32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromI4(lIn, pulOut)
  end

  def varUI4FromI8(i64In : Int64, plOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromI8(i64In, plOut)
  end

  def varUI4FromR4(fltIn : Float32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromR4(fltIn, pulOut)
  end

  def varUI4FromR8(dblIn : Float64, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromR8(dblIn, pulOut)
  end

  def varUI4FromDate(dateIn : Float64, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromDate(dateIn, pulOut)
  end

  def varUI4FromCy(cyIn : Win32cr::System::Com::CY, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromCy(cyIn, pulOut)
  end

  def varUI4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromStr(strIn, lcid, dwFlags, pulOut)
  end

  def varUI4FromDisp(pdispIn : Void*, lcid : UInt32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromDisp(pdispIn, lcid, pulOut)
  end

  def varUI4FromBool(boolIn : Int16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromBool(boolIn, pulOut)
  end

  def varUI4FromI1(cIn : Win32cr::Foundation::CHAR, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromI1(cIn, pulOut)
  end

  def varUI4FromUI2(uiIn : UInt16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromUI2(uiIn, pulOut)
  end

  def varUI4FromUI8(ui64In : UInt64, plOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromUI8(ui64In, plOut)
  end

  def varUI4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pulOut : UInt32*) : Win32cr::Foundation::HRESULT
    C.VarUI4FromDec(pdecIn, pulOut)
  end

  def varUI8FromUI1(bIn : UInt8, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromUI1(bIn, pi64Out)
  end

  def varUI8FromI2(sIn : Int16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromI2(sIn, pi64Out)
  end

  def varUI8FromI8(ui64In : Int64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromI8(ui64In, pi64Out)
  end

  def varUI8FromR4(fltIn : Float32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromR4(fltIn, pi64Out)
  end

  def varUI8FromR8(dblIn : Float64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromR8(dblIn, pi64Out)
  end

  def varUI8FromCy(cyIn : Win32cr::System::Com::CY, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromCy(cyIn, pi64Out)
  end

  def varUI8FromDate(dateIn : Float64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromDate(dateIn, pi64Out)
  end

  def varUI8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromStr(strIn, lcid, dwFlags, pi64Out)
  end

  def varUI8FromDisp(pdispIn : Void*, lcid : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromDisp(pdispIn, lcid, pi64Out)
  end

  def varUI8FromBool(boolIn : Int16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromBool(boolIn, pi64Out)
  end

  def varUI8FromI1(cIn : Win32cr::Foundation::CHAR, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromI1(cIn, pi64Out)
  end

  def varUI8FromUI2(uiIn : UInt16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromUI2(uiIn, pi64Out)
  end

  def varUI8FromUI4(ulIn : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromUI4(ulIn, pi64Out)
  end

  def varUI8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT
    C.VarUI8FromDec(pdecIn, pi64Out)
  end

  def varDecFromUI1(bIn : UInt8, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromUI1(bIn, pdecOut)
  end

  def varDecFromI2(uiIn : Int16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromI2(uiIn, pdecOut)
  end

  def varDecFromI4(lIn : Int32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromI4(lIn, pdecOut)
  end

  def varDecFromI8(i64In : Int64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromI8(i64In, pdecOut)
  end

  def varDecFromR4(fltIn : Float32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromR4(fltIn, pdecOut)
  end

  def varDecFromR8(dblIn : Float64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromR8(dblIn, pdecOut)
  end

  def varDecFromDate(dateIn : Float64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromDate(dateIn, pdecOut)
  end

  def varDecFromCy(cyIn : Win32cr::System::Com::CY, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromCy(cyIn, pdecOut)
  end

  def varDecFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromStr(strIn, lcid, dwFlags, pdecOut)
  end

  def varDecFromDisp(pdispIn : Void*, lcid : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromDisp(pdispIn, lcid, pdecOut)
  end

  def varDecFromBool(boolIn : Int16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromBool(boolIn, pdecOut)
  end

  def varDecFromI1(cIn : Win32cr::Foundation::CHAR, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromI1(cIn, pdecOut)
  end

  def varDecFromUI2(uiIn : UInt16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromUI2(uiIn, pdecOut)
  end

  def varDecFromUI4(ulIn : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromUI4(ulIn, pdecOut)
  end

  def varDecFromUI8(ui64In : UInt64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFromUI8(ui64In, pdecOut)
  end

  def varParseNumFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pnumprs : Win32cr::System::Ole::NUMPARSE*, rgbDig : UInt8*) : Win32cr::Foundation::HRESULT
    C.VarParseNumFromStr(strIn, lcid, dwFlags, pnumprs, rgbDig)
  end

  def varNumFromParseNum(pnumprs : Win32cr::System::Ole::NUMPARSE*, rgbDig : UInt8*, dwVtBits : UInt32, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarNumFromParseNum(pnumprs, rgbDig, dwVtBits, pvar)
  end

  def varAdd(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarAdd(pvarLeft, pvarRight, pvarResult)
  end

  def varAnd(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarAnd(pvarLeft, pvarRight, pvarResult)
  end

  def varCat(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarCat(pvarLeft, pvarRight, pvarResult)
  end

  def varDiv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarDiv(pvarLeft, pvarRight, pvarResult)
  end

  def varEqv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarEqv(pvarLeft, pvarRight, pvarResult)
  end

  def varIdiv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarIdiv(pvarLeft, pvarRight, pvarResult)
  end

  def varImp(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarImp(pvarLeft, pvarRight, pvarResult)
  end

  def varMod(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarMod(pvarLeft, pvarRight, pvarResult)
  end

  def varMul(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarMul(pvarLeft, pvarRight, pvarResult)
  end

  def varOr(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarOr(pvarLeft, pvarRight, pvarResult)
  end

  def varPow(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarPow(pvarLeft, pvarRight, pvarResult)
  end

  def varSub(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarSub(pvarLeft, pvarRight, pvarResult)
  end

  def varXor(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarXor(pvarLeft, pvarRight, pvarResult)
  end

  def varAbs(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarAbs(pvarIn, pvarResult)
  end

  def varFix(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarFix(pvarIn, pvarResult)
  end

  def varInt(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarInt(pvarIn, pvarResult)
  end

  def varNeg(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarNeg(pvarIn, pvarResult)
  end

  def varNot(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarNot(pvarIn, pvarResult)
  end

  def varRound(pvarIn : Win32cr::System::Com::VARIANT*, cDecimals : Int32, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.VarRound(pvarIn, cDecimals, pvarResult)
  end

  def varCmp(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, lcid : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
    C.VarCmp(pvarLeft, pvarRight, lcid, dwFlags)
  end

  def varDecAdd(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecAdd(pdecLeft, pdecRight, pdecResult)
  end

  def varDecDiv(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecDiv(pdecLeft, pdecRight, pdecResult)
  end

  def varDecMul(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecMul(pdecLeft, pdecRight, pdecResult)
  end

  def varDecSub(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecSub(pdecLeft, pdecRight, pdecResult)
  end

  def varDecAbs(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecAbs(pdecIn, pdecResult)
  end

  def varDecFix(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecFix(pdecIn, pdecResult)
  end

  def varDecInt(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecInt(pdecIn, pdecResult)
  end

  def varDecNeg(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecNeg(pdecIn, pdecResult)
  end

  def varDecRound(pdecIn : Win32cr::Foundation::DECIMAL*, cDecimals : Int32, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecRound(pdecIn, cDecimals, pdecResult)
  end

  def varDecCmp(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT
    C.VarDecCmp(pdecLeft, pdecRight)
  end

  def varDecCmpR8(pdecLeft : Win32cr::Foundation::DECIMAL*, dblRight : Float64) : Win32cr::Foundation::HRESULT
    C.VarDecCmpR8(pdecLeft, dblRight)
  end

  def varCyAdd(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyAdd(cyLeft, cyRight, pcyResult)
  end

  def varCyMul(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyMul(cyLeft, cyRight, pcyResult)
  end

  def varCyMulI4(cyLeft : Win32cr::System::Com::CY, lRight : Int32, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyMulI4(cyLeft, lRight, pcyResult)
  end

  def varCyMulI8(cyLeft : Win32cr::System::Com::CY, lRight : Int64, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyMulI8(cyLeft, lRight, pcyResult)
  end

  def varCySub(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCySub(cyLeft, cyRight, pcyResult)
  end

  def varCyAbs(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyAbs(cyIn, pcyResult)
  end

  def varCyFix(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyFix(cyIn, pcyResult)
  end

  def varCyInt(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyInt(cyIn, pcyResult)
  end

  def varCyNeg(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyNeg(cyIn, pcyResult)
  end

  def varCyRound(cyIn : Win32cr::System::Com::CY, cDecimals : Int32, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
    C.VarCyRound(cyIn, cDecimals, pcyResult)
  end

  def varCyCmp(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY) : Win32cr::Foundation::HRESULT
    C.VarCyCmp(cyLeft, cyRight)
  end

  def varCyCmpR8(cyLeft : Win32cr::System::Com::CY, dblRight : Float64) : Win32cr::Foundation::HRESULT
    C.VarCyCmpR8(cyLeft, dblRight)
  end

  def varBstrCat(bstrLeft : Win32cr::Foundation::BSTR, bstrRight : Win32cr::Foundation::BSTR, pbstrResult : UInt16**) : Win32cr::Foundation::HRESULT
    C.VarBstrCat(bstrLeft, bstrRight, pbstrResult)
  end

  def varBstrCmp(bstrLeft : Win32cr::Foundation::BSTR, bstrRight : Win32cr::Foundation::BSTR, lcid : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
    C.VarBstrCmp(bstrLeft, bstrRight, lcid, dwFlags)
  end

  def varR8Pow(dblLeft : Float64, dblRight : Float64, pdblResult : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8Pow(dblLeft, dblRight, pdblResult)
  end

  def varR4CmpR8(fltLeft : Float32, dblRight : Float64) : Win32cr::Foundation::HRESULT
    C.VarR4CmpR8(fltLeft, dblRight)
  end

  def varR8Round(dblIn : Float64, cDecimals : Int32, pdblResult : Float64*) : Win32cr::Foundation::HRESULT
    C.VarR8Round(dblIn, cDecimals, pdblResult)
  end

  def varDateFromUdate(pudateIn : Win32cr::System::Ole::UDATE*, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUdate(pudateIn, dwFlags, pdateOut)
  end

  def varDateFromUdateEx(pudateIn : Win32cr::System::Ole::UDATE*, lcid : UInt32, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT
    C.VarDateFromUdateEx(pudateIn, lcid, dwFlags, pdateOut)
  end

  def varUdateFromDate(dateIn : Float64, dwFlags : UInt32, pudateOut : Win32cr::System::Ole::UDATE*) : Win32cr::Foundation::HRESULT
    C.VarUdateFromDate(dateIn, dwFlags, pudateOut)
  end

  def getAltMonthNames(lcid : UInt32, prgp : Win32cr::Foundation::PWSTR**) : Win32cr::Foundation::HRESULT
    C.GetAltMonthNames(lcid, prgp)
  end

  def varFormat(pvarIn : Win32cr::System::Com::VARIANT*, pstrFormat : Win32cr::Foundation::PWSTR, iFirstDay : Int32, iFirstWeek : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarFormat(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut)
  end

  def varFormatDateTime(pvarIn : Win32cr::System::Com::VARIANT*, iNamedFormat : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarFormatDateTime(pvarIn, iNamedFormat, dwFlags, pbstrOut)
  end

  def varFormatNumber(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarFormatNumber(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut)
  end

  def varFormatPercent(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarFormatPercent(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut)
  end

  def varFormatCurrency(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarFormatCurrency(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut)
  end

  def varWeekdayName(iWeekday : Int32, fAbbrev : Int32, iFirstDay : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarWeekdayName(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut)
  end

  def varMonthName(iMonth : Int32, fAbbrev : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
    C.VarMonthName(iMonth, fAbbrev, dwFlags, pbstrOut)
  end

  def varFormatFromTokens(pvarIn : Win32cr::System::Com::VARIANT*, pstrFormat : Win32cr::Foundation::PWSTR, pbTokCur : UInt8*, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*, lcid : UInt32) : Win32cr::Foundation::HRESULT
    C.VarFormatFromTokens(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid)
  end

  def varTokenizeFormatString(pstrFormat : Win32cr::Foundation::PWSTR, rgbTok : UInt8*, cbTok : Int32, iFirstDay : Int32, iFirstWeek : Int32, lcid : UInt32, pcbActual : Int32*) : Win32cr::Foundation::HRESULT
    C.VarTokenizeFormatString(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual)
  end

  def lHashValOfNameSysA(syskind : Win32cr::System::Com::SYSKIND, lcid : UInt32, szName : Win32cr::Foundation::PSTR) : UInt32
    C.LHashValOfNameSysA(syskind, lcid, szName)
  end

  def lHashValOfNameSys(syskind : Win32cr::System::Com::SYSKIND, lcid : UInt32, szName : Win32cr::Foundation::PWSTR) : UInt32
    C.LHashValOfNameSys(syskind, lcid, szName)
  end

  def loadTypeLib(szFile : Win32cr::Foundation::PWSTR, pptlib : Void**) : Win32cr::Foundation::HRESULT
    C.LoadTypeLib(szFile, pptlib)
  end

  def loadTypeLibEx(szFile : Win32cr::Foundation::PWSTR, regkind : Win32cr::System::Ole::REGKIND, pptlib : Void**) : Win32cr::Foundation::HRESULT
    C.LoadTypeLibEx(szFile, regkind, pptlib)
  end

  def loadRegTypeLib(rguid : LibC::GUID*, wVerMajor : UInt16, wVerMinor : UInt16, lcid : UInt32, pptlib : Void**) : Win32cr::Foundation::HRESULT
    C.LoadRegTypeLib(rguid, wVerMajor, wVerMinor, lcid, pptlib)
  end

  def queryPathOfRegTypeLib(guid : LibC::GUID*, wMaj : UInt16, wMin : UInt16, lcid : UInt32, lpbstrPathName : UInt16**) : Win32cr::Foundation::HRESULT
    C.QueryPathOfRegTypeLib(guid, wMaj, wMin, lcid, lpbstrPathName)
  end

  def registerTypeLib(ptlib : Void*, szFullPath : Win32cr::Foundation::PWSTR, szHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
    C.RegisterTypeLib(ptlib, szFullPath, szHelpDir)
  end

  def unRegisterTypeLib(libID : LibC::GUID*, wVerMajor : UInt16, wVerMinor : UInt16, lcid : UInt32, syskind : Win32cr::System::Com::SYSKIND) : Win32cr::Foundation::HRESULT
    C.UnRegisterTypeLib(libID, wVerMajor, wVerMinor, lcid, syskind)
  end

  def registerTypeLibForUser(ptlib : Void*, szFullPath : Win32cr::Foundation::PWSTR, szHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
    C.RegisterTypeLibForUser(ptlib, szFullPath, szHelpDir)
  end

  def unRegisterTypeLibForUser(libID : LibC::GUID*, wMajorVerNum : UInt16, wMinorVerNum : UInt16, lcid : UInt32, syskind : Win32cr::System::Com::SYSKIND) : Win32cr::Foundation::HRESULT
    C.UnRegisterTypeLibForUser(libID, wMajorVerNum, wMinorVerNum, lcid, syskind)
  end

  def createTypeLib(syskind : Win32cr::System::Com::SYSKIND, szFile : Win32cr::Foundation::PWSTR, ppctlib : Void**) : Win32cr::Foundation::HRESULT
    C.CreateTypeLib(syskind, szFile, ppctlib)
  end

  def createTypeLib2(syskind : Win32cr::System::Com::SYSKIND, szFile : Win32cr::Foundation::PWSTR, ppctlib : Void**) : Win32cr::Foundation::HRESULT
    C.CreateTypeLib2(syskind, szFile, ppctlib)
  end

  def dispGetParam(pdispparams : Win32cr::System::Com::DISPPARAMS*, position : UInt32, vtTarg : UInt16, pvarResult : Win32cr::System::Com::VARIANT*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
    C.DispGetParam(pdispparams, position, vtTarg, pvarResult, puArgErr)
  end

  def dispGetIDsOfNames(ptinfo : Void*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, rgdispid : Int32*) : Win32cr::Foundation::HRESULT
    C.DispGetIDsOfNames(ptinfo, rgszNames, cNames, rgdispid)
  end

  def dispInvoke(_this : Void*, ptinfo : Void*, dispidMember : Int32, wFlags : UInt16, pparams : Win32cr::System::Com::DISPPARAMS*, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
    C.DispInvoke(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr)
  end

  def createDispTypeInfo(pidata : Win32cr::System::Ole::INTERFACEDATA*, lcid : UInt32, pptinfo : Void**) : Win32cr::Foundation::HRESULT
    C.CreateDispTypeInfo(pidata, lcid, pptinfo)
  end

  def createStdDispatch(punkOuter : Void*, pvThis : Void*, ptinfo : Void*, ppunkStdDisp : Void**) : Win32cr::Foundation::HRESULT
    C.CreateStdDispatch(punkOuter, pvThis, ptinfo, ppunkStdDisp)
  end

  def dispCallFunc(pvInstance : Void*, oVft : LibC::UIntPtrT, cc : Win32cr::System::Com::CALLCONV, vtReturn : UInt16, cActuals : UInt32, prgvt : UInt16*, prgpvarg : Win32cr::System::Com::VARIANT**, pvargResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
    C.DispCallFunc(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult)
  end

  def registerActiveObject(punk : Void*, rclsid : LibC::GUID*, dwFlags : UInt32, pdwRegister : UInt32*) : Win32cr::Foundation::HRESULT
    C.RegisterActiveObject(punk, rclsid, dwFlags, pdwRegister)
  end

  def revokeActiveObject(dwRegister : UInt32, pvReserved : Void*) : Win32cr::Foundation::HRESULT
    C.RevokeActiveObject(dwRegister, pvReserved)
  end

  def getActiveObject(rclsid : LibC::GUID*, pvReserved : Void*, ppunk : Void**) : Win32cr::Foundation::HRESULT
    C.GetActiveObject(rclsid, pvReserved, ppunk)
  end

  def createErrorInfo(pperrinfo : Void**) : Win32cr::Foundation::HRESULT
    C.CreateErrorInfo(pperrinfo)
  end

  def getRecordInfoFromTypeInfo(pTypeInfo : Void*, ppRecInfo : Void**) : Win32cr::Foundation::HRESULT
    C.GetRecordInfoFromTypeInfo(pTypeInfo, ppRecInfo)
  end

  def getRecordInfoFromGuids(rGuidTypeLib : LibC::GUID*, uVerMajor : UInt32, uVerMinor : UInt32, lcid : UInt32, rGuidTypeInfo : LibC::GUID*, ppRecInfo : Void**) : Win32cr::Foundation::HRESULT
    C.GetRecordInfoFromGuids(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo)
  end

  def oaBuildVersion : UInt32
    C.OaBuildVersion
  end

  def clearCustData(pCustData : Win32cr::System::Com::CUSTDATA*) : Void
    C.ClearCustData(pCustData)
  end

  def oaEnablePerUserTLibRegistration : Void
    C.OaEnablePerUserTLibRegistration
  end

  def oleBuildVersion : UInt32
    C.OleBuildVersion
  end

  def oleInitialize(pvReserved : Void*) : Win32cr::Foundation::HRESULT
    C.OleInitialize(pvReserved)
  end

  def oleUninitialize : Void
    C.OleUninitialize
  end

  def oleQueryLinkFromData(pSrcDataObject : Void*) : Win32cr::Foundation::HRESULT
    C.OleQueryLinkFromData(pSrcDataObject)
  end

  def oleQueryCreateFromData(pSrcDataObject : Void*) : Win32cr::Foundation::HRESULT
    C.OleQueryCreateFromData(pSrcDataObject)
  end

  def oleCreate(rclsid : LibC::GUID*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreate(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateEx(rclsid : LibC::GUID*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateEx(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleCreateFromData(pSrcDataObj : Void*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateFromData(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateFromDataEx(pSrcDataObj : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateFromDataEx(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleCreateLinkFromData(pSrcDataObj : Void*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLinkFromData(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateLinkFromDataEx(pSrcDataObj : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLinkFromDataEx(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleCreateStaticFromData(pSrcDataObj : Void*, iid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateStaticFromData(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateLink(pmkLinkSrc : Void*, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLink(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateLinkEx(pmkLinkSrc : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLinkEx(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleCreateLinkToFile(lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLinkToFile(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateLinkToFileEx(lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateLinkToFileEx(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleCreateFromFile(rclsid : LibC::GUID*, lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateFromFile(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj)
  end

  def oleCreateFromFileEx(rclsid : LibC::GUID*, lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateFromFileEx(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj)
  end

  def oleLoad(pStg : Void*, riid : LibC::GUID*, pClientSite : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoad(pStg, riid, pClientSite, ppvObj)
  end

  def oleSave(pPS : Void*, pStg : Void*, fSameAsLoad : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
    C.OleSave(pPS, pStg, fSameAsLoad)
  end

  def oleLoadFromStream(pStm : Void*, iidInterface : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadFromStream(pStm, iidInterface, ppvObj)
  end

  def oleSaveToStream(pPStm : Void*, pStm : Void*) : Win32cr::Foundation::HRESULT
    C.OleSaveToStream(pPStm, pStm)
  end

  def oleSetContainedObject(pUnknown : Void*, fContained : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
    C.OleSetContainedObject(pUnknown, fContained)
  end

  def oleNoteObjectVisible(pUnknown : Void*, fVisible : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
    C.OleNoteObjectVisible(pUnknown, fVisible)
  end

  def registerDragDrop(hwnd : Win32cr::Foundation::HWND, pDropTarget : Void*) : Win32cr::Foundation::HRESULT
    C.RegisterDragDrop(hwnd, pDropTarget)
  end

  def revokeDragDrop(hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
    C.RevokeDragDrop(hwnd)
  end

  def doDragDrop(pDataObj : Void*, pDropSource : Void*, dwOKEffects : Win32cr::System::Ole::DROPEFFECT, pdwEffect : Win32cr::System::Ole::DROPEFFECT*) : Win32cr::Foundation::HRESULT
    C.DoDragDrop(pDataObj, pDropSource, dwOKEffects, pdwEffect)
  end

  def oleSetClipboard(pDataObj : Void*) : Win32cr::Foundation::HRESULT
    C.OleSetClipboard(pDataObj)
  end

  def oleGetClipboard(ppDataObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleGetClipboard(ppDataObj)
  end

  def oleGetClipboardWithEnterpriseInfo(dataObject : Void**, dataEnterpriseId : Win32cr::Foundation::PWSTR*, sourceDescription : Win32cr::Foundation::PWSTR*, targetDescription : Win32cr::Foundation::PWSTR*, dataDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
    C.OleGetClipboardWithEnterpriseInfo(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription)
  end

  def oleFlushClipboard : Win32cr::Foundation::HRESULT
    C.OleFlushClipboard
  end

  def oleIsCurrentClipboard(pDataObj : Void*) : Win32cr::Foundation::HRESULT
    C.OleIsCurrentClipboard(pDataObj)
  end

  def oleCreateMenuDescriptor(hmenuCombined : Win32cr::UI::WindowsAndMessaging::HMENU, lpMenuWidths : Win32cr::System::Ole::OleMenuGroupWidths*) : LibC::IntPtrT
    C.OleCreateMenuDescriptor(hmenuCombined, lpMenuWidths)
  end

  def oleSetMenuDescriptor(holemenu : LibC::IntPtrT, hwndFrame : Win32cr::Foundation::HWND, hwndActiveObject : Win32cr::Foundation::HWND, lpFrame : Void*, lpActiveObj : Void*) : Win32cr::Foundation::HRESULT
    C.OleSetMenuDescriptor(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj)
  end

  def oleDestroyMenuDescriptor(holemenu : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
    C.OleDestroyMenuDescriptor(holemenu)
  end

  def oleTranslateAccelerator(lpFrame : Void*, lpFrameInfo : Win32cr::System::Ole::OIFI*, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
    C.OleTranslateAccelerator(lpFrame, lpFrameInfo, lpmsg)
  end

  def oleDuplicateData(hSrc : Win32cr::Foundation::HANDLE, cfFormat : UInt16, uiFlags : UInt32) : Win32cr::Foundation::HANDLE
    C.OleDuplicateData(hSrc, cfFormat, uiFlags)
  end

  def oleDraw(pUnknown : Void*, dwAspect : UInt32, hdcDraw : Win32cr::Graphics::Gdi::HDC, lprcBounds : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
    C.OleDraw(pUnknown, dwAspect, hdcDraw, lprcBounds)
  end

  def oleRun(pUnknown : Void*) : Win32cr::Foundation::HRESULT
    C.OleRun(pUnknown)
  end

  def oleIsRunning(pObject : Void*) : Win32cr::Foundation::BOOL
    C.OleIsRunning(pObject)
  end

  def oleLockRunning(pUnknown : Void*, fLock : Win32cr::Foundation::BOOL, fLastUnlockCloses : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
    C.OleLockRunning(pUnknown, fLock, fLastUnlockCloses)
  end

  def releaseStgMedium(param0 : Win32cr::System::Com::STGMEDIUM*) : Void
    C.ReleaseStgMedium(param0)
  end

  def createOleAdviseHolder(ppOAHolder : Void**) : Win32cr::Foundation::HRESULT
    C.CreateOleAdviseHolder(ppOAHolder)
  end

  def oleCreateDefaultHandler(clsid : LibC::GUID*, pUnkOuter : Void*, riid : LibC::GUID*, lplpObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateDefaultHandler(clsid, pUnkOuter, riid, lplpObj)
  end

  def oleCreateEmbeddingHelper(clsid : LibC::GUID*, pUnkOuter : Void*, flags : UInt32, pCF : Void*, riid : LibC::GUID*, lplpObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateEmbeddingHelper(clsid, pUnkOuter, flags, pCF, riid, lplpObj)
  end

  def isAccelerator(hAccel : Win32cr::UI::WindowsAndMessaging::HACCEL, cAccelEntries : Int32, lpMsg : Win32cr::UI::WindowsAndMessaging::MSG*, lpwCmd : UInt16*) : Win32cr::Foundation::BOOL
    C.IsAccelerator(hAccel, cAccelEntries, lpMsg, lpwCmd)
  end

  def oleGetIconOfFile(lpszPath : Win32cr::Foundation::PWSTR, fUseFileAsLabel : Win32cr::Foundation::BOOL) : LibC::IntPtrT
    C.OleGetIconOfFile(lpszPath, fUseFileAsLabel)
  end

  def oleGetIconOfClass(rclsid : LibC::GUID*, lpszLabel : Win32cr::Foundation::PWSTR, fUseTypeAsLabel : Win32cr::Foundation::BOOL) : LibC::IntPtrT
    C.OleGetIconOfClass(rclsid, lpszLabel, fUseTypeAsLabel)
  end

  def oleMetafilePictFromIconAndLabel(hIcon : Win32cr::UI::WindowsAndMessaging::HICON, lpszLabel : Win32cr::Foundation::PWSTR, lpszSourceFile : Win32cr::Foundation::PWSTR, iIconIndex : UInt32) : LibC::IntPtrT
    C.OleMetafilePictFromIconAndLabel(hIcon, lpszLabel, lpszSourceFile, iIconIndex)
  end

  def oleRegGetUserType(clsid : LibC::GUID*, dwFormOfType : UInt32, pszUserType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
    C.OleRegGetUserType(clsid, dwFormOfType, pszUserType)
  end

  def oleRegGetMiscStatus(clsid : LibC::GUID*, dwAspect : UInt32, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
    C.OleRegGetMiscStatus(clsid, dwAspect, pdwStatus)
  end

  def oleRegEnumFormatEtc(clsid : LibC::GUID*, dwDirection : UInt32, ppenum : Void**) : Win32cr::Foundation::HRESULT
    C.OleRegEnumFormatEtc(clsid, dwDirection, ppenum)
  end

  def oleRegEnumVerbs(clsid : LibC::GUID*, ppenum : Void**) : Win32cr::Foundation::HRESULT
    C.OleRegEnumVerbs(clsid, ppenum)
  end

  def oleDoAutoConvert(pStg : Void*, pClsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT
    C.OleDoAutoConvert(pStg, pClsidNew)
  end

  def oleGetAutoConvert(clsidOld : LibC::GUID*, pClsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT
    C.OleGetAutoConvert(clsidOld, pClsidNew)
  end

  def oleSetAutoConvert(clsidOld : LibC::GUID*, clsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT
    C.OleSetAutoConvert(clsidOld, clsidNew)
  end

  def hRGNUserSize(param0 : UInt32*, param1 : UInt32, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt32
    C.HRGN_UserSize(param0, param1, param2)
  end

  def hRGNUserMarshal(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*
    C.HRGN_UserMarshal(param0, param1, param2)
  end

  def hRGNUserUnmarshal(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*
    C.HRGN_UserUnmarshal(param0, param1, param2)
  end

  def hRGNUserFree(param0 : UInt32*, param1 : Win32cr::Graphics::Gdi::HRGN*) : Void
    C.HRGN_UserFree(param0, param1)
  end

  def hRGNUserSize64(param0 : UInt32*, param1 : UInt32, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt32
    C.HRGN_UserSize64(param0, param1, param2)
  end

  def hRGNUserMarshal64(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*
    C.HRGN_UserMarshal64(param0, param1, param2)
  end

  def hRGNUserUnmarshal64(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*
    C.HRGN_UserUnmarshal64(param0, param1, param2)
  end

  def hRGNUserFree64(param0 : UInt32*, param1 : Win32cr::Graphics::Gdi::HRGN*) : Void
    C.HRGN_UserFree64(param0, param1)
  end

  def oleCreatePropertyFrame(hwndOwner : Win32cr::Foundation::HWND, x : UInt32, y : UInt32, lpszCaption : Win32cr::Foundation::PWSTR, cObjects : UInt32, ppUnk : Void**, cPages : UInt32, pPageClsID : LibC::GUID*, lcid : UInt32, dwReserved : UInt32, pvReserved : Void*) : Win32cr::Foundation::HRESULT
    C.OleCreatePropertyFrame(hwndOwner, x, y, lpszCaption, cObjects, ppUnk, cPages, pPageClsID, lcid, dwReserved, pvReserved)
  end

  def oleCreatePropertyFrameIndirect(lpParams : Win32cr::System::Ole::OCPFIPARAMS*) : Win32cr::Foundation::HRESULT
    C.OleCreatePropertyFrameIndirect(lpParams)
  end

  def oleTranslateColor(clr : UInt32, hpal : Win32cr::Graphics::Gdi::HPALETTE, lpcolorref : UInt32*) : Win32cr::Foundation::HRESULT
    C.OleTranslateColor(clr, hpal, lpcolorref)
  end

  def oleCreateFontIndirect(lpFontDesc : Win32cr::System::Ole::FONTDESC*, riid : LibC::GUID*, lplpvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreateFontIndirect(lpFontDesc, riid, lplpvObj)
  end

  def oleCreatePictureIndirect(lpPictDesc : Win32cr::System::Ole::PICTDESC*, riid : LibC::GUID*, fOwn : Win32cr::Foundation::BOOL, lplpvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleCreatePictureIndirect(lpPictDesc, riid, fOwn, lplpvObj)
  end

  def oleLoadPicture(lpstream : Void*, lSize : Int32, fRunmode : Win32cr::Foundation::BOOL, riid : LibC::GUID*, lplpvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadPicture(lpstream, lSize, fRunmode, riid, lplpvObj)
  end

  def oleLoadPictureEx(lpstream : Void*, lSize : Int32, fRunmode : Win32cr::Foundation::BOOL, riid : LibC::GUID*, xSizeDesired : UInt32, ySizeDesired : UInt32, dwFlags : UInt32, lplpvObj : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadPictureEx(lpstream, lSize, fRunmode, riid, xSizeDesired, ySizeDesired, dwFlags, lplpvObj)
  end

  def oleLoadPicturePath(szURLorPath : Win32cr::Foundation::PWSTR, punkCaller : Void*, dwReserved : UInt32, clrReserved : UInt32, riid : LibC::GUID*, ppvRet : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadPicturePath(szURLorPath, punkCaller, dwReserved, clrReserved, riid, ppvRet)
  end

  def oleLoadPictureFile(varFileName : Win32cr::System::Com::VARIANT, lplpdispPicture : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadPictureFile(varFileName, lplpdispPicture)
  end

  def oleLoadPictureFileEx(varFileName : Win32cr::System::Com::VARIANT, xSizeDesired : UInt32, ySizeDesired : UInt32, dwFlags : UInt32, lplpdispPicture : Void**) : Win32cr::Foundation::HRESULT
    C.OleLoadPictureFileEx(varFileName, xSizeDesired, ySizeDesired, dwFlags, lplpdispPicture)
  end

  def oleSavePictureFile(lpdispPicture : Void*, bstrFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
    C.OleSavePictureFile(lpdispPicture, bstrFileName)
  end

  def oleIconToCursor(hinstExe : Win32cr::Foundation::HINSTANCE, hIcon : Win32cr::UI::WindowsAndMessaging::HICON) : Win32cr::UI::WindowsAndMessaging::HCURSOR
    C.OleIconToCursor(hinstExe, hIcon)
  end

  def oleUIAddVerbMenuW(lpOleObj : Void*, lpszShortType : Win32cr::Foundation::PWSTR, hMenu : Win32cr::UI::WindowsAndMessaging::HMENU, uPos : UInt32, uIDVerbMin : UInt32, uIDVerbMax : UInt32, bAddConvert : Win32cr::Foundation::BOOL, idConvert : UInt32, lphMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::BOOL
    C.OleUIAddVerbMenuW(lpOleObj, lpszShortType, hMenu, uPos, uIDVerbMin, uIDVerbMax, bAddConvert, idConvert, lphMenu)
  end

  def oleUIAddVerbMenuA(lpOleObj : Void*, lpszShortType : Win32cr::Foundation::PSTR, hMenu : Win32cr::UI::WindowsAndMessaging::HMENU, uPos : UInt32, uIDVerbMin : UInt32, uIDVerbMax : UInt32, bAddConvert : Win32cr::Foundation::BOOL, idConvert : UInt32, lphMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::BOOL
    C.OleUIAddVerbMenuA(lpOleObj, lpszShortType, hMenu, uPos, uIDVerbMin, uIDVerbMax, bAddConvert, idConvert, lphMenu)
  end

  def oleUIInsertObjectW(param0 : Win32cr::System::Ole::OLEUIINSERTOBJECTW*) : UInt32
    C.OleUIInsertObjectW(param0)
  end

  def oleUIInsertObjectA(param0 : Win32cr::System::Ole::OLEUIINSERTOBJECTA*) : UInt32
    C.OleUIInsertObjectA(param0)
  end

  def oleUIPasteSpecialW(param0 : Win32cr::System::Ole::OLEUIPASTESPECIALW*) : UInt32
    C.OleUIPasteSpecialW(param0)
  end

  def oleUIPasteSpecialA(param0 : Win32cr::System::Ole::OLEUIPASTESPECIALA*) : UInt32
    C.OleUIPasteSpecialA(param0)
  end

  def oleUIEditLinksW(param0 : Win32cr::System::Ole::OLEUIEDITLINKSW*) : UInt32
    C.OleUIEditLinksW(param0)
  end

  def oleUIEditLinksA(param0 : Win32cr::System::Ole::OLEUIEDITLINKSA*) : UInt32
    C.OleUIEditLinksA(param0)
  end

  def oleUIChangeIconW(param0 : Win32cr::System::Ole::OLEUICHANGEICONW*) : UInt32
    C.OleUIChangeIconW(param0)
  end

  def oleUIChangeIconA(param0 : Win32cr::System::Ole::OLEUICHANGEICONA*) : UInt32
    C.OleUIChangeIconA(param0)
  end

  def oleUIConvertW(param0 : Win32cr::System::Ole::OLEUICONVERTW*) : UInt32
    C.OleUIConvertW(param0)
  end

  def oleUIConvertA(param0 : Win32cr::System::Ole::OLEUICONVERTA*) : UInt32
    C.OleUIConvertA(param0)
  end

  def oleUICanConvertOrActivateAs(rClsid : LibC::GUID*, fIsLinkedObject : Win32cr::Foundation::BOOL, wFormat : UInt16) : Win32cr::Foundation::BOOL
    C.OleUICanConvertOrActivateAs(rClsid, fIsLinkedObject, wFormat)
  end

  def oleUIBusyW(param0 : Win32cr::System::Ole::OLEUIBUSYW*) : UInt32
    C.OleUIBusyW(param0)
  end

  def oleUIBusyA(param0 : Win32cr::System::Ole::OLEUIBUSYA*) : UInt32
    C.OleUIBusyA(param0)
  end

  def oleUIChangeSourceW(param0 : Win32cr::System::Ole::OLEUICHANGESOURCEW*) : UInt32
    C.OleUIChangeSourceW(param0)
  end

  def oleUIChangeSourceA(param0 : Win32cr::System::Ole::OLEUICHANGESOURCEA*) : UInt32
    C.OleUIChangeSourceA(param0)
  end

  def oleUIObjectPropertiesW(param0 : Win32cr::System::Ole::OLEUIOBJECTPROPSW*) : UInt32
    C.OleUIObjectPropertiesW(param0)
  end

  def oleUIObjectPropertiesA(param0 : Win32cr::System::Ole::OLEUIOBJECTPROPSA*) : UInt32
    C.OleUIObjectPropertiesA(param0)
  end

  def oleUIPromptUserW(nTemplate : Int32, hwndParent : Win32cr::Foundation::HWND) : Int32
    C.OleUIPromptUserW(nTemplate, hwndParent)
  end

  def oleUIPromptUserA(nTemplate : Int32, hwndParent : Win32cr::Foundation::HWND) : Int32
    C.OleUIPromptUserA(nTemplate, hwndParent)
  end

  def oleUIUpdateLinksW(lpOleUILinkCntr : Void*, hwndParent : Win32cr::Foundation::HWND, lpszTitle : Win32cr::Foundation::PWSTR, cLinks : Int32) : Win32cr::Foundation::BOOL
    C.OleUIUpdateLinksW(lpOleUILinkCntr, hwndParent, lpszTitle, cLinks)
  end

  def oleUIUpdateLinksA(lpOleUILinkCntr : Void*, hwndParent : Win32cr::Foundation::HWND, lpszTitle : Win32cr::Foundation::PSTR, cLinks : Int32) : Win32cr::Foundation::BOOL
    C.OleUIUpdateLinksA(lpOleUILinkCntr, hwndParent, lpszTitle, cLinks)
  end

  @[Link("oleaut32")]
  @[Link("ole32")]
  @[Link("oledlg")]
  lib C
    # :nodoc:
    fun DosDateTimeToVariantTime(wDosDate : UInt16, wDosTime : UInt16, pvtime : Float64*) : Int32

    # :nodoc:
    fun VariantTimeToDosDateTime(vtime : Float64, pwDosDate : UInt16*, pwDosTime : UInt16*) : Int32

    # :nodoc:
    fun SystemTimeToVariantTime(lpSystemTime : Win32cr::Foundation::SYSTEMTIME*, pvtime : Float64*) : Int32

    # :nodoc:
    fun VariantTimeToSystemTime(vtime : Float64, lpSystemTime : Win32cr::Foundation::SYSTEMTIME*) : Int32

    # :nodoc:
    fun SafeArrayAllocDescriptor(cDims : UInt32, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayAllocDescriptorEx(vt : UInt16, cDims : UInt32, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayAllocData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayCreate(vt : UInt16, cDims : UInt32, rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*) : Win32cr::System::Com::SAFEARRAY*

    # :nodoc:
    fun SafeArrayCreateEx(vt : UInt16, cDims : UInt32, rgsabound : Win32cr::System::Com::SAFEARRAYBOUND*, pvExtra : Void*) : Win32cr::System::Com::SAFEARRAY*

    # :nodoc:
    fun SafeArrayCopyData(psaSource : Win32cr::System::Com::SAFEARRAY*, psaTarget : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayReleaseDescriptor(psa : Win32cr::System::Com::SAFEARRAY*) : Void

    # :nodoc:
    fun SafeArrayDestroyDescriptor(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayReleaseData(pData : Void*) : Void

    # :nodoc:
    fun SafeArrayDestroyData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayAddRef(psa : Win32cr::System::Com::SAFEARRAY*, ppDataToRelease : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayDestroy(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayRedim(psa : Win32cr::System::Com::SAFEARRAY*, psaboundNew : Win32cr::System::Com::SAFEARRAYBOUND*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetDim(psa : Win32cr::System::Com::SAFEARRAY*) : UInt32

    # :nodoc:
    fun SafeArrayGetElemsize(psa : Win32cr::System::Com::SAFEARRAY*) : UInt32

    # :nodoc:
    fun SafeArrayGetUBound(psa : Win32cr::System::Com::SAFEARRAY*, nDim : UInt32, plUbound : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetLBound(psa : Win32cr::System::Com::SAFEARRAY*, nDim : UInt32, plLbound : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayLock(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayUnlock(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayAccessData(psa : Win32cr::System::Com::SAFEARRAY*, ppvData : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayUnaccessData(psa : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetElement(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, pv : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayPutElement(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, pv : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayCopy(psa : Win32cr::System::Com::SAFEARRAY*, ppsaOut : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayPtrOfIndex(psa : Win32cr::System::Com::SAFEARRAY*, rgIndices : Int32*, ppvData : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArraySetRecordInfo(psa : Win32cr::System::Com::SAFEARRAY*, prinfo : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetRecordInfo(psa : Win32cr::System::Com::SAFEARRAY*, prinfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArraySetIID(psa : Win32cr::System::Com::SAFEARRAY*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetIID(psa : Win32cr::System::Com::SAFEARRAY*, pguid : LibC::GUID*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayGetVartype(psa : Win32cr::System::Com::SAFEARRAY*, pvt : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SafeArrayCreateVector(vt : UInt16, lLbound : Int32, cElements : UInt32) : Win32cr::System::Com::SAFEARRAY*

    # :nodoc:
    fun SafeArrayCreateVectorEx(vt : UInt16, lLbound : Int32, cElements : UInt32, pvExtra : Void*) : Win32cr::System::Com::SAFEARRAY*

    # :nodoc:
    fun VariantInit(pvarg : Win32cr::System::Com::VARIANT*) : Void

    # :nodoc:
    fun VariantClear(pvarg : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VariantCopy(pvargDest : Win32cr::System::Com::VARIANT*, pvargSrc : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VariantCopyInd(pvarDest : Win32cr::System::Com::VARIANT*, pvargSrc : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VariantChangeType(pvargDest : Win32cr::System::Com::VARIANT*, pvarSrc : Win32cr::System::Com::VARIANT*, wFlags : UInt16, vt : UInt16) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VariantChangeTypeEx(pvargDest : Win32cr::System::Com::VARIANT*, pvarSrc : Win32cr::System::Com::VARIANT*, lcid : UInt32, wFlags : UInt16, vt : UInt16) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VectorFromBstr(bstr : Win32cr::Foundation::BSTR, ppsa : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun BstrFromVector(psa : Win32cr::System::Com::SAFEARRAY*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromI2(sIn : Int16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromI4(lIn : Int32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromI8(i64In : Int64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromR4(fltIn : Float32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromR8(dblIn : Float64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromCy(cyIn : Win32cr::System::Com::CY, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromDate(dateIn : Float64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromDisp(pdispIn : Void*, lcid : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromBool(boolIn : Int16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromI1(cIn : Win32cr::Foundation::CHAR, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromUI2(uiIn : UInt16, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromUI4(ulIn : UInt32, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromUI8(ui64In : UInt64, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI1FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pbOut : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromUI1(bIn : UInt8, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromI4(lIn : Int32, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromI8(i64In : Int64, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromR4(fltIn : Float32, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromR8(dblIn : Float64, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromCy(cyIn : Win32cr::System::Com::CY, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromDate(dateIn : Float64, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromDisp(pdispIn : Void*, lcid : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromBool(boolIn : Int16, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromI1(cIn : Win32cr::Foundation::CHAR, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromUI2(uiIn : UInt16, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromUI4(ulIn : UInt32, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromUI8(ui64In : UInt64, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI2FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, psOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromUI1(bIn : UInt8, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromI2(sIn : Int16, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromI8(i64In : Int64, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromR4(fltIn : Float32, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromR8(dblIn : Float64, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromCy(cyIn : Win32cr::System::Com::CY, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromDate(dateIn : Float64, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromDisp(pdispIn : Void*, lcid : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromBool(boolIn : Int16, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromI1(cIn : Win32cr::Foundation::CHAR, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromUI2(uiIn : UInt16, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromUI4(ulIn : UInt32, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromUI8(ui64In : UInt64, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, plOut : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromUI1(bIn : UInt8, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromI2(sIn : Int16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromR4(fltIn : Float32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromR8(dblIn : Float64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromCy(cyIn : Win32cr::System::Com::CY, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromDate(dateIn : Float64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromDisp(pdispIn : Void*, lcid : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromBool(boolIn : Int16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromI1(cIn : Win32cr::Foundation::CHAR, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromUI2(uiIn : UInt16, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromUI4(ulIn : UInt32, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromUI8(ui64In : UInt64, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pi64Out : Int64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromUI1(bIn : UInt8, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromI2(sIn : Int16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromI4(lIn : Int32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromI8(i64In : Int64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromR8(dblIn : Float64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromCy(cyIn : Win32cr::System::Com::CY, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromDate(dateIn : Float64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromDisp(pdispIn : Void*, lcid : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromBool(boolIn : Int16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromI1(cIn : Win32cr::Foundation::CHAR, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromUI2(uiIn : UInt16, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromUI4(ulIn : UInt32, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromUI8(ui64In : UInt64, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pfltOut : Float32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromUI1(bIn : UInt8, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromI2(sIn : Int16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromI4(lIn : Int32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromI8(i64In : Int64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromR4(fltIn : Float32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromCy(cyIn : Win32cr::System::Com::CY, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromDate(dateIn : Float64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromDisp(pdispIn : Void*, lcid : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromBool(boolIn : Int16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromI1(cIn : Win32cr::Foundation::CHAR, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromUI2(uiIn : UInt16, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromUI4(ulIn : UInt32, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromUI8(ui64In : UInt64, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pdblOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUI1(bIn : UInt8, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromI2(sIn : Int16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromI4(lIn : Int32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromI8(i64In : Int64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromR4(fltIn : Float32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromR8(dblIn : Float64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromCy(cyIn : Win32cr::System::Com::CY, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromDisp(pdispIn : Void*, lcid : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromBool(boolIn : Int16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromI1(cIn : Win32cr::Foundation::CHAR, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUI2(uiIn : UInt16, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUI4(ulIn : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUI8(ui64In : UInt64, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromUI1(bIn : UInt8, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromI2(sIn : Int16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromI4(lIn : Int32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromI8(i64In : Int64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromR4(fltIn : Float32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromR8(dblIn : Float64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromDate(dateIn : Float64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromDisp(pdispIn : Void*, lcid : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromBool(boolIn : Int16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromI1(cIn : Win32cr::Foundation::CHAR, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromUI2(uiIn : UInt16, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromUI4(ulIn : UInt32, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromUI8(ui64In : UInt64, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pcyOut : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromUI1(bVal : UInt8, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromI2(iVal : Int16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromI4(lIn : Int32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromI8(i64In : Int64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromR4(fltIn : Float32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromR8(dblIn : Float64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromCy(cyIn : Win32cr::System::Com::CY, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromDate(dateIn : Float64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromDisp(pdispIn : Void*, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromBool(boolIn : Int16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromI1(cIn : Win32cr::Foundation::CHAR, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromUI2(uiIn : UInt16, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromUI4(ulIn : UInt32, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromUI8(ui64In : UInt64, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, lcid : UInt32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromUI1(bIn : UInt8, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromI2(sIn : Int16, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromI4(lIn : Int32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromI8(i64In : Int64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromR4(fltIn : Float32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromR8(dblIn : Float64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromDate(dateIn : Float64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromCy(cyIn : Win32cr::System::Com::CY, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromDisp(pdispIn : Void*, lcid : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromI1(cIn : Win32cr::Foundation::CHAR, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromUI2(uiIn : UInt16, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromUI4(ulIn : UInt32, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromUI8(i64In : UInt64, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBoolFromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pboolOut : Int16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromUI1(bIn : UInt8, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromI2(uiIn : Int16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromI4(lIn : Int32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromI8(i64In : Int64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromR4(fltIn : Float32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromR8(dblIn : Float64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromDate(dateIn : Float64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromCy(cyIn : Win32cr::System::Com::CY, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromDisp(pdispIn : Void*, lcid : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromBool(boolIn : Int16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromUI2(uiIn : UInt16, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromUI4(ulIn : UInt32, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromUI8(i64In : UInt64, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarI1FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pcOut : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromUI1(bIn : UInt8, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromI2(uiIn : Int16, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromI4(lIn : Int32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromI8(i64In : Int64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromR4(fltIn : Float32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromR8(dblIn : Float64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromDate(dateIn : Float64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromCy(cyIn : Win32cr::System::Com::CY, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromDisp(pdispIn : Void*, lcid : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromBool(boolIn : Int16, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromI1(cIn : Win32cr::Foundation::CHAR, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromUI4(ulIn : UInt32, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromUI8(i64In : UInt64, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI2FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, puiOut : UInt16*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromUI1(bIn : UInt8, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromI2(uiIn : Int16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromI4(lIn : Int32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromI8(i64In : Int64, plOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromR4(fltIn : Float32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromR8(dblIn : Float64, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromDate(dateIn : Float64, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromCy(cyIn : Win32cr::System::Com::CY, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromDisp(pdispIn : Void*, lcid : UInt32, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromBool(boolIn : Int16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromI1(cIn : Win32cr::Foundation::CHAR, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromUI2(uiIn : UInt16, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromUI8(ui64In : UInt64, plOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI4FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pulOut : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromUI1(bIn : UInt8, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromI2(sIn : Int16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromI8(ui64In : Int64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromR4(fltIn : Float32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromR8(dblIn : Float64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromCy(cyIn : Win32cr::System::Com::CY, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromDate(dateIn : Float64, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromDisp(pdispIn : Void*, lcid : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromBool(boolIn : Int16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromI1(cIn : Win32cr::Foundation::CHAR, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromUI2(uiIn : UInt16, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromUI4(ulIn : UInt32, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUI8FromDec(pdecIn : Win32cr::Foundation::DECIMAL*, pi64Out : UInt64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromUI1(bIn : UInt8, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromI2(uiIn : Int16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromI4(lIn : Int32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromI8(i64In : Int64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromR4(fltIn : Float32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromR8(dblIn : Float64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromDate(dateIn : Float64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromCy(cyIn : Win32cr::System::Com::CY, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromDisp(pdispIn : Void*, lcid : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromBool(boolIn : Int16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromI1(cIn : Win32cr::Foundation::CHAR, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromUI2(uiIn : UInt16, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromUI4(ulIn : UInt32, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFromUI8(ui64In : UInt64, pdecOut : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarParseNumFromStr(strIn : Win32cr::Foundation::PWSTR, lcid : UInt32, dwFlags : UInt32, pnumprs : Win32cr::System::Ole::NUMPARSE*, rgbDig : UInt8*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarNumFromParseNum(pnumprs : Win32cr::System::Ole::NUMPARSE*, rgbDig : UInt8*, dwVtBits : UInt32, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarAdd(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarAnd(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCat(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDiv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarEqv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarIdiv(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarImp(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarMod(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarMul(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarOr(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarPow(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarSub(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarXor(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarAbs(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFix(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarInt(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarNeg(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarNot(pvarIn : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarRound(pvarIn : Win32cr::System::Com::VARIANT*, cDecimals : Int32, pvarResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCmp(pvarLeft : Win32cr::System::Com::VARIANT*, pvarRight : Win32cr::System::Com::VARIANT*, lcid : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecAdd(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecDiv(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecMul(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecSub(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecAbs(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecFix(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecInt(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecNeg(pdecIn : Win32cr::Foundation::DECIMAL*, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecRound(pdecIn : Win32cr::Foundation::DECIMAL*, cDecimals : Int32, pdecResult : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecCmp(pdecLeft : Win32cr::Foundation::DECIMAL*, pdecRight : Win32cr::Foundation::DECIMAL*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDecCmpR8(pdecLeft : Win32cr::Foundation::DECIMAL*, dblRight : Float64) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyAdd(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyMul(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyMulI4(cyLeft : Win32cr::System::Com::CY, lRight : Int32, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyMulI8(cyLeft : Win32cr::System::Com::CY, lRight : Int64, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCySub(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyAbs(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyFix(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyInt(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyNeg(cyIn : Win32cr::System::Com::CY, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyRound(cyIn : Win32cr::System::Com::CY, cDecimals : Int32, pcyResult : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyCmp(cyLeft : Win32cr::System::Com::CY, cyRight : Win32cr::System::Com::CY) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarCyCmpR8(cyLeft : Win32cr::System::Com::CY, dblRight : Float64) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrCat(bstrLeft : Win32cr::Foundation::BSTR, bstrRight : Win32cr::Foundation::BSTR, pbstrResult : UInt16**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarBstrCmp(bstrLeft : Win32cr::Foundation::BSTR, bstrRight : Win32cr::Foundation::BSTR, lcid : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8Pow(dblLeft : Float64, dblRight : Float64, pdblResult : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR4CmpR8(fltLeft : Float32, dblRight : Float64) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarR8Round(dblIn : Float64, cDecimals : Int32, pdblResult : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUdate(pudateIn : Win32cr::System::Ole::UDATE*, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarDateFromUdateEx(pudateIn : Win32cr::System::Ole::UDATE*, lcid : UInt32, dwFlags : UInt32, pdateOut : Float64*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarUdateFromDate(dateIn : Float64, dwFlags : UInt32, pudateOut : Win32cr::System::Ole::UDATE*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun GetAltMonthNames(lcid : UInt32, prgp : Win32cr::Foundation::PWSTR**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormat(pvarIn : Win32cr::System::Com::VARIANT*, pstrFormat : Win32cr::Foundation::PWSTR, iFirstDay : Int32, iFirstWeek : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormatDateTime(pvarIn : Win32cr::System::Com::VARIANT*, iNamedFormat : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormatNumber(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormatPercent(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormatCurrency(pvarIn : Win32cr::System::Com::VARIANT*, iNumDig : Int32, iIncLead : Int32, iUseParens : Int32, iGroup : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarWeekdayName(iWeekday : Int32, fAbbrev : Int32, iFirstDay : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarMonthName(iMonth : Int32, fAbbrev : Int32, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarFormatFromTokens(pvarIn : Win32cr::System::Com::VARIANT*, pstrFormat : Win32cr::Foundation::PWSTR, pbTokCur : UInt8*, dwFlags : UInt32, pbstrOut : Win32cr::Foundation::BSTR*, lcid : UInt32) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun VarTokenizeFormatString(pstrFormat : Win32cr::Foundation::PWSTR, rgbTok : UInt8*, cbTok : Int32, iFirstDay : Int32, iFirstWeek : Int32, lcid : UInt32, pcbActual : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun LHashValOfNameSysA(syskind : Win32cr::System::Com::SYSKIND, lcid : UInt32, szName : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun LHashValOfNameSys(syskind : Win32cr::System::Com::SYSKIND, lcid : UInt32, szName : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun LoadTypeLib(szFile : Win32cr::Foundation::PWSTR, pptlib : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun LoadTypeLibEx(szFile : Win32cr::Foundation::PWSTR, regkind : Win32cr::System::Ole::REGKIND, pptlib : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun LoadRegTypeLib(rguid : LibC::GUID*, wVerMajor : UInt16, wVerMinor : UInt16, lcid : UInt32, pptlib : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun QueryPathOfRegTypeLib(guid : LibC::GUID*, wMaj : UInt16, wMin : UInt16, lcid : UInt32, lpbstrPathName : UInt16**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RegisterTypeLib(ptlib : Void*, szFullPath : Win32cr::Foundation::PWSTR, szHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun UnRegisterTypeLib(libID : LibC::GUID*, wVerMajor : UInt16, wVerMinor : UInt16, lcid : UInt32, syskind : Win32cr::System::Com::SYSKIND) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RegisterTypeLibForUser(ptlib : Void*, szFullPath : Win32cr::Foundation::PWSTR, szHelpDir : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun UnRegisterTypeLibForUser(libID : LibC::GUID*, wMajorVerNum : UInt16, wMinorVerNum : UInt16, lcid : UInt32, syskind : Win32cr::System::Com::SYSKIND) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun CreateTypeLib(syskind : Win32cr::System::Com::SYSKIND, szFile : Win32cr::Foundation::PWSTR, ppctlib : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun CreateTypeLib2(syskind : Win32cr::System::Com::SYSKIND, szFile : Win32cr::Foundation::PWSTR, ppctlib : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun DispGetParam(pdispparams : Win32cr::System::Com::DISPPARAMS*, position : UInt32, vtTarg : UInt16, pvarResult : Win32cr::System::Com::VARIANT*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun DispGetIDsOfNames(ptinfo : Void*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, rgdispid : Int32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun DispInvoke(_this : Void*, ptinfo : Void*, dispidMember : Int32, wFlags : UInt16, pparams : Win32cr::System::Com::DISPPARAMS*, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun CreateDispTypeInfo(pidata : Win32cr::System::Ole::INTERFACEDATA*, lcid : UInt32, pptinfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun CreateStdDispatch(punkOuter : Void*, pvThis : Void*, ptinfo : Void*, ppunkStdDisp : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun DispCallFunc(pvInstance : Void*, oVft : LibC::UIntPtrT, cc : Win32cr::System::Com::CALLCONV, vtReturn : UInt16, cActuals : UInt32, prgvt : UInt16*, prgpvarg : Win32cr::System::Com::VARIANT**, pvargResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RegisterActiveObject(punk : Void*, rclsid : LibC::GUID*, dwFlags : UInt32, pdwRegister : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RevokeActiveObject(dwRegister : UInt32, pvReserved : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun GetActiveObject(rclsid : LibC::GUID*, pvReserved : Void*, ppunk : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun CreateErrorInfo(pperrinfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun GetRecordInfoFromTypeInfo(pTypeInfo : Void*, ppRecInfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun GetRecordInfoFromGuids(rGuidTypeLib : LibC::GUID*, uVerMajor : UInt32, uVerMinor : UInt32, lcid : UInt32, rGuidTypeInfo : LibC::GUID*, ppRecInfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OaBuildVersion : UInt32

    # :nodoc:
    fun ClearCustData(pCustData : Win32cr::System::Com::CUSTDATA*) : Void

    # :nodoc:
    fun OaEnablePerUserTLibRegistration : Void

    # :nodoc:
    fun OleBuildVersion : UInt32

    # :nodoc:
    fun OleInitialize(pvReserved : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleUninitialize : Void

    # :nodoc:
    fun OleQueryLinkFromData(pSrcDataObject : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleQueryCreateFromData(pSrcDataObject : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreate(rclsid : LibC::GUID*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateEx(rclsid : LibC::GUID*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateFromData(pSrcDataObj : Void*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateFromDataEx(pSrcDataObj : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLinkFromData(pSrcDataObj : Void*, riid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLinkFromDataEx(pSrcDataObj : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateStaticFromData(pSrcDataObj : Void*, iid : LibC::GUID*, renderopt : UInt32, pFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLink(pmkLinkSrc : Void*, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLinkEx(pmkLinkSrc : Void*, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLinkToFile(lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateLinkToFileEx(lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateFromFile(rclsid : LibC::GUID*, lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, renderopt : UInt32, lpFormatEtc : Win32cr::System::Com::FORMATETC*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateFromFileEx(rclsid : LibC::GUID*, lpszFileName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, dwFlags : UInt32, renderopt : UInt32, cFormats : UInt32, rgAdvf : UInt32*, rgFormatEtc : Win32cr::System::Com::FORMATETC*, lpAdviseSink : Void*, rgdwConnection : UInt32*, pClientSite : Void*, pStg : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoad(pStg : Void*, riid : LibC::GUID*, pClientSite : Void*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSave(pPS : Void*, pStg : Void*, fSameAsLoad : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadFromStream(pStm : Void*, iidInterface : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSaveToStream(pPStm : Void*, pStm : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSetContainedObject(pUnknown : Void*, fContained : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleNoteObjectVisible(pUnknown : Void*, fVisible : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RegisterDragDrop(hwnd : Win32cr::Foundation::HWND, pDropTarget : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun RevokeDragDrop(hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun DoDragDrop(pDataObj : Void*, pDropSource : Void*, dwOKEffects : Win32cr::System::Ole::DROPEFFECT, pdwEffect : Win32cr::System::Ole::DROPEFFECT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSetClipboard(pDataObj : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleGetClipboard(ppDataObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleGetClipboardWithEnterpriseInfo(dataObject : Void**, dataEnterpriseId : Win32cr::Foundation::PWSTR*, sourceDescription : Win32cr::Foundation::PWSTR*, targetDescription : Win32cr::Foundation::PWSTR*, dataDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleFlushClipboard : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleIsCurrentClipboard(pDataObj : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateMenuDescriptor(hmenuCombined : Win32cr::UI::WindowsAndMessaging::HMENU, lpMenuWidths : Win32cr::System::Ole::OleMenuGroupWidths*) : LibC::IntPtrT

    # :nodoc:
    fun OleSetMenuDescriptor(holemenu : LibC::IntPtrT, hwndFrame : Win32cr::Foundation::HWND, hwndActiveObject : Win32cr::Foundation::HWND, lpFrame : Void*, lpActiveObj : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleDestroyMenuDescriptor(holemenu : LibC::IntPtrT) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleTranslateAccelerator(lpFrame : Void*, lpFrameInfo : Win32cr::System::Ole::OIFI*, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleDuplicateData(hSrc : Win32cr::Foundation::HANDLE, cfFormat : UInt16, uiFlags : UInt32) : Win32cr::Foundation::HANDLE

    # :nodoc:
    fun OleDraw(pUnknown : Void*, dwAspect : UInt32, hdcDraw : Win32cr::Graphics::Gdi::HDC, lprcBounds : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleRun(pUnknown : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleIsRunning(pObject : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleLockRunning(pUnknown : Void*, fLock : Win32cr::Foundation::BOOL, fLastUnlockCloses : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun ReleaseStgMedium(param0 : Win32cr::System::Com::STGMEDIUM*) : Void

    # :nodoc:
    fun CreateOleAdviseHolder(ppOAHolder : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateDefaultHandler(clsid : LibC::GUID*, pUnkOuter : Void*, riid : LibC::GUID*, lplpObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateEmbeddingHelper(clsid : LibC::GUID*, pUnkOuter : Void*, flags : UInt32, pCF : Void*, riid : LibC::GUID*, lplpObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun IsAccelerator(hAccel : Win32cr::UI::WindowsAndMessaging::HACCEL, cAccelEntries : Int32, lpMsg : Win32cr::UI::WindowsAndMessaging::MSG*, lpwCmd : UInt16*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleGetIconOfFile(lpszPath : Win32cr::Foundation::PWSTR, fUseFileAsLabel : Win32cr::Foundation::BOOL) : LibC::IntPtrT

    # :nodoc:
    fun OleGetIconOfClass(rclsid : LibC::GUID*, lpszLabel : Win32cr::Foundation::PWSTR, fUseTypeAsLabel : Win32cr::Foundation::BOOL) : LibC::IntPtrT

    # :nodoc:
    fun OleMetafilePictFromIconAndLabel(hIcon : Win32cr::UI::WindowsAndMessaging::HICON, lpszLabel : Win32cr::Foundation::PWSTR, lpszSourceFile : Win32cr::Foundation::PWSTR, iIconIndex : UInt32) : LibC::IntPtrT

    # :nodoc:
    fun OleRegGetUserType(clsid : LibC::GUID*, dwFormOfType : UInt32, pszUserType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleRegGetMiscStatus(clsid : LibC::GUID*, dwAspect : UInt32, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleRegEnumFormatEtc(clsid : LibC::GUID*, dwDirection : UInt32, ppenum : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleRegEnumVerbs(clsid : LibC::GUID*, ppenum : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleDoAutoConvert(pStg : Void*, pClsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleGetAutoConvert(clsidOld : LibC::GUID*, pClsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSetAutoConvert(clsidOld : LibC::GUID*, clsidNew : LibC::GUID*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun HRGN_UserSize(param0 : UInt32*, param1 : UInt32, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt32

    # :nodoc:
    fun HRGN_UserMarshal(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*

    # :nodoc:
    fun HRGN_UserUnmarshal(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*

    # :nodoc:
    fun HRGN_UserFree(param0 : UInt32*, param1 : Win32cr::Graphics::Gdi::HRGN*) : Void

    # :nodoc:
    fun HRGN_UserSize64(param0 : UInt32*, param1 : UInt32, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt32

    # :nodoc:
    fun HRGN_UserMarshal64(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*

    # :nodoc:
    fun HRGN_UserUnmarshal64(param0 : UInt32*, param1 : UInt8*, param2 : Win32cr::Graphics::Gdi::HRGN*) : UInt8*

    # :nodoc:
    fun HRGN_UserFree64(param0 : UInt32*, param1 : Win32cr::Graphics::Gdi::HRGN*) : Void

    # :nodoc:
    fun OleCreatePropertyFrame(hwndOwner : Win32cr::Foundation::HWND, x : UInt32, y : UInt32, lpszCaption : Win32cr::Foundation::PWSTR, cObjects : UInt32, ppUnk : Void**, cPages : UInt32, pPageClsID : LibC::GUID*, lcid : UInt32, dwReserved : UInt32, pvReserved : Void*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreatePropertyFrameIndirect(lpParams : Win32cr::System::Ole::OCPFIPARAMS*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleTranslateColor(clr : UInt32, hpal : Win32cr::Graphics::Gdi::HPALETTE, lpcolorref : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreateFontIndirect(lpFontDesc : Win32cr::System::Ole::FONTDESC*, riid : LibC::GUID*, lplpvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleCreatePictureIndirect(lpPictDesc : Win32cr::System::Ole::PICTDESC*, riid : LibC::GUID*, fOwn : Win32cr::Foundation::BOOL, lplpvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadPicture(lpstream : Void*, lSize : Int32, fRunmode : Win32cr::Foundation::BOOL, riid : LibC::GUID*, lplpvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadPictureEx(lpstream : Void*, lSize : Int32, fRunmode : Win32cr::Foundation::BOOL, riid : LibC::GUID*, xSizeDesired : UInt32, ySizeDesired : UInt32, dwFlags : UInt32, lplpvObj : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadPicturePath(szURLorPath : Win32cr::Foundation::PWSTR, punkCaller : Void*, dwReserved : UInt32, clrReserved : UInt32, riid : LibC::GUID*, ppvRet : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadPictureFile(varFileName : Win32cr::System::Com::VARIANT, lplpdispPicture : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleLoadPictureFileEx(varFileName : Win32cr::System::Com::VARIANT, xSizeDesired : UInt32, ySizeDesired : UInt32, dwFlags : UInt32, lplpdispPicture : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleSavePictureFile(lpdispPicture : Void*, bstrFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun OleIconToCursor(hinstExe : Win32cr::Foundation::HINSTANCE, hIcon : Win32cr::UI::WindowsAndMessaging::HICON) : Win32cr::UI::WindowsAndMessaging::HCURSOR

    # :nodoc:
    fun OleUIAddVerbMenuW(lpOleObj : Void*, lpszShortType : Win32cr::Foundation::PWSTR, hMenu : Win32cr::UI::WindowsAndMessaging::HMENU, uPos : UInt32, uIDVerbMin : UInt32, uIDVerbMax : UInt32, bAddConvert : Win32cr::Foundation::BOOL, idConvert : UInt32, lphMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleUIAddVerbMenuA(lpOleObj : Void*, lpszShortType : Win32cr::Foundation::PSTR, hMenu : Win32cr::UI::WindowsAndMessaging::HMENU, uPos : UInt32, uIDVerbMin : UInt32, uIDVerbMax : UInt32, bAddConvert : Win32cr::Foundation::BOOL, idConvert : UInt32, lphMenu : Win32cr::UI::WindowsAndMessaging::HMENU*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleUIInsertObjectW(param0 : Win32cr::System::Ole::OLEUIINSERTOBJECTW*) : UInt32

    # :nodoc:
    fun OleUIInsertObjectA(param0 : Win32cr::System::Ole::OLEUIINSERTOBJECTA*) : UInt32

    # :nodoc:
    fun OleUIPasteSpecialW(param0 : Win32cr::System::Ole::OLEUIPASTESPECIALW*) : UInt32

    # :nodoc:
    fun OleUIPasteSpecialA(param0 : Win32cr::System::Ole::OLEUIPASTESPECIALA*) : UInt32

    # :nodoc:
    fun OleUIEditLinksW(param0 : Win32cr::System::Ole::OLEUIEDITLINKSW*) : UInt32

    # :nodoc:
    fun OleUIEditLinksA(param0 : Win32cr::System::Ole::OLEUIEDITLINKSA*) : UInt32

    # :nodoc:
    fun OleUIChangeIconW(param0 : Win32cr::System::Ole::OLEUICHANGEICONW*) : UInt32

    # :nodoc:
    fun OleUIChangeIconA(param0 : Win32cr::System::Ole::OLEUICHANGEICONA*) : UInt32

    # :nodoc:
    fun OleUIConvertW(param0 : Win32cr::System::Ole::OLEUICONVERTW*) : UInt32

    # :nodoc:
    fun OleUIConvertA(param0 : Win32cr::System::Ole::OLEUICONVERTA*) : UInt32

    # :nodoc:
    fun OleUICanConvertOrActivateAs(rClsid : LibC::GUID*, fIsLinkedObject : Win32cr::Foundation::BOOL, wFormat : UInt16) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleUIBusyW(param0 : Win32cr::System::Ole::OLEUIBUSYW*) : UInt32

    # :nodoc:
    fun OleUIBusyA(param0 : Win32cr::System::Ole::OLEUIBUSYA*) : UInt32

    # :nodoc:
    fun OleUIChangeSourceW(param0 : Win32cr::System::Ole::OLEUICHANGESOURCEW*) : UInt32

    # :nodoc:
    fun OleUIChangeSourceA(param0 : Win32cr::System::Ole::OLEUICHANGESOURCEA*) : UInt32

    # :nodoc:
    fun OleUIObjectPropertiesW(param0 : Win32cr::System::Ole::OLEUIOBJECTPROPSW*) : UInt32

    # :nodoc:
    fun OleUIObjectPropertiesA(param0 : Win32cr::System::Ole::OLEUIOBJECTPROPSA*) : UInt32

    # :nodoc:
    fun OleUIPromptUserW(nTemplate : Int32, hwndParent : Win32cr::Foundation::HWND) : Int32

    # :nodoc:
    fun OleUIPromptUserA(nTemplate : Int32, hwndParent : Win32cr::Foundation::HWND) : Int32

    # :nodoc:
    fun OleUIUpdateLinksW(lpOleUILinkCntr : Void*, hwndParent : Win32cr::Foundation::HWND, lpszTitle : Win32cr::Foundation::PWSTR, cLinks : Int32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun OleUIUpdateLinksA(lpOleUILinkCntr : Void*, hwndParent : Win32cr::Foundation::HWND, lpszTitle : Win32cr::Foundation::PSTR, cLinks : Int32) : Win32cr::Foundation::BOOL

  end
end