require "./../foundation.cr"
require "./com.cr"
require "./windows_programming.cr"
require "./registry.cr"
require "./../security/cryptography.cr"

module Win32cr::System::ApplicationInstallationAndServicing
  extend self
  alias MSIHANDLE = UInt32
  alias LPDISPLAYVAL = Proc(Void*, Win32cr::System::ApplicationInstallationAndServicing::RESULTTYPES, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias LPEVALCOMCALLBACK = Proc(Win32cr::System::ApplicationInstallationAndServicing::STATUSTYPES, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::BOOL)

  alias INSTALLUI_HANDLERA = Proc(Void*, UInt32, Win32cr::Foundation::PSTR, Int32)

  alias INSTALLUI_HANDLERW = Proc(Void*, UInt32, Win32cr::Foundation::PWSTR, Int32)

  alias PINSTALLUI_HANDLER_RECORD = Proc(Void*, UInt32, Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, Int32)

  alias PPATCH_PROGRESS_CALLBACK = Proc(Void*, UInt32, UInt32, Win32cr::Foundation::BOOL)

  alias PPATCH_SYMLOAD_CALLBACK = Proc(UInt32, Win32cr::Foundation::PSTR, UInt32, UInt32, UInt32, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  UIALL = 32768_u32
  LOGTOKEN_TYPE_MASK = 3_u32
  LOGTOKEN_UNSPECIFIED = 0_u32
  LOGTOKEN_NO_LOG = 1_u32
  LOGTOKEN_SETUPAPI_APPLOG = 2_u32
  LOGTOKEN_SETUPAPI_DEVLOG = 3_u32
  TXTLOG_SETUPAPI_DEVLOG = 1_u32
  TXTLOG_SETUPAPI_CMDLINE = 2_u32
  TXTLOG_SETUPAPI_BITS = 3_u32
  TXTLOG_ERROR = 1_u32
  TXTLOG_WARNING = 2_u32
  TXTLOG_SYSTEM_STATE_CHANGE = 3_u32
  TXTLOG_SUMMARY = 4_u32
  TXTLOG_DETAILS = 5_u32
  TXTLOG_VERBOSE = 6_u32
  TXTLOG_VERY_VERBOSE = 7_u32
  TXTLOG_RESERVED_FLAGS = 65520_u32
  TXTLOG_TIMESTAMP = 65536_u32
  TXTLOG_DEPTH_INCR = 131072_u32
  TXTLOG_DEPTH_DECR = 262144_u32
  TXTLOG_TAB_1 = 524288_u32
  TXTLOG_FLUSH_FILE = 1048576_u32
  TXTLOG_DEVINST = 1_u32
  TXTLOG_INF = 2_u32
  TXTLOG_FILEQ = 4_u32
  TXTLOG_COPYFILES = 8_u32
  TXTLOG_SIGVERIF = 32_u32
  TXTLOG_BACKUP = 128_u32
  TXTLOG_UI = 256_u32
  TXTLOG_UTIL = 512_u32
  TXTLOG_INFDB = 1024_u32
  TXTLOG_DRVSETUP = 4194304_u32
  TXTLOG_POLICY = 8388608_u32
  TXTLOG_NEWDEV = 16777216_u32
  TXTLOG_UMPNPMGR = 33554432_u32
  TXTLOG_DRIVER_STORE = 67108864_u32
  TXTLOG_SETUP = 134217728_u32
  TXTLOG_CMI = 268435456_u32
  TXTLOG_DEVMGR = 536870912_u32
  TXTLOG_INSTALLER = 1073741824_u32
  TXTLOG_VENDOR = 2147483648_u32
  CLSID_EvalCom2 = "6e5e1910-8053-4660-b795-6b612e29bc58"
  WIN32_MSM_ = 100_u32
  LIBID_MsmMergeTypeLib = "0adda82f-2c26-11d2-ad65-00a0c9af11a6"
  CLSID_MsmMerge2 = "f94985d5-29f9-4743-9805-99bc3f35b678"
  WIN32_MSI_ = 500_u32
  MAX_GUID_CHARS = 38_u32
  MAX_FEATURE_CHARS = 38_u32
  INSTALLPROPERTY_PACKAGENAME = "PackageName"
  INSTALLPROPERTY_TRANSFORMS = "Transforms"
  INSTALLPROPERTY_LANGUAGE = "Language"
  INSTALLPROPERTY_PRODUCTNAME = "ProductName"
  INSTALLPROPERTY_ASSIGNMENTTYPE = "AssignmentType"
  INSTALLPROPERTY_INSTANCETYPE = "InstanceType"
  INSTALLPROPERTY_AUTHORIZED_LUA_APP = "AuthorizedLUAApp"
  INSTALLPROPERTY_PACKAGECODE = "PackageCode"
  INSTALLPROPERTY_VERSION = "Version"
  INSTALLPROPERTY_PRODUCTICON = "ProductIcon"
  INSTALLPROPERTY_INSTALLEDPRODUCTNAME = "InstalledProductName"
  INSTALLPROPERTY_VERSIONSTRING = "VersionString"
  INSTALLPROPERTY_HELPLINK = "HelpLink"
  INSTALLPROPERTY_HELPTELEPHONE = "HelpTelephone"
  INSTALLPROPERTY_INSTALLLOCATION = "InstallLocation"
  INSTALLPROPERTY_INSTALLSOURCE = "InstallSource"
  INSTALLPROPERTY_INSTALLDATE = "InstallDate"
  INSTALLPROPERTY_PUBLISHER = "Publisher"
  INSTALLPROPERTY_LOCALPACKAGE = "LocalPackage"
  INSTALLPROPERTY_URLINFOABOUT = "URLInfoAbout"
  INSTALLPROPERTY_URLUPDATEINFO = "URLUpdateInfo"
  INSTALLPROPERTY_VERSIONMINOR = "VersionMinor"
  INSTALLPROPERTY_VERSIONMAJOR = "VersionMajor"
  INSTALLPROPERTY_PRODUCTID = "ProductID"
  INSTALLPROPERTY_REGCOMPANY = "RegCompany"
  INSTALLPROPERTY_REGOWNER = "RegOwner"
  INSTALLPROPERTY_INSTALLEDLANGUAGE = "InstalledLanguage"
  INSTALLPROPERTY_UNINSTALLABLE = "Uninstallable"
  INSTALLPROPERTY_PRODUCTSTATE = "State"
  INSTALLPROPERTY_PATCHSTATE = "State"
  INSTALLPROPERTY_PATCHTYPE = "PatchType"
  INSTALLPROPERTY_LUAENABLED = "LUAEnabled"
  INSTALLPROPERTY_DISPLAYNAME = "DisplayName"
  INSTALLPROPERTY_MOREINFOURL = "MoreInfoURL"
  INSTALLPROPERTY_LASTUSEDSOURCE = "LastUsedSource"
  INSTALLPROPERTY_LASTUSEDTYPE = "LastUsedType"
  INSTALLPROPERTY_MEDIAPACKAGEPATH = "MediaPackagePath"
  INSTALLPROPERTY_DISKPROMPT = "DiskPrompt"
  MSI_INVALID_HASH_IS_FATAL = 1_u32
  ERROR_ROLLBACK_DISABLED = 1653_u32
  MSI_NULL_INTEGER = 2147483648_u32
  INSTALLMESSAGE_TYPEMASK = -16777216_i32
  STREAM_FORMAT_COMPLIB_MODULE = 0_u32
  STREAM_FORMAT_COMPLIB_MANIFEST = 1_u32
  STREAM_FORMAT_WIN32_MODULE = 2_u32
  STREAM_FORMAT_WIN32_MANIFEST = 4_u32
  IASSEMBLYCACHEITEM_COMMIT_FLAG_REFRESH = 1_u32
  ASSEMBLYINFO_FLAG_INSTALLED = 1_u32
  ASSEMBLYINFO_FLAG_PAYLOADRESIDENT = 2_u32
  IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_INSTALLED = 1_u32
  IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_REFRESHED = 2_u32
  IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_ALREADY_INSTALLED = 3_u32
  FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID = "8cedc215-ac4b-488b-93c0-a50a49cb2fb8"
  FUSION_REFCOUNT_FILEPATH_GUID = "b02f9d65-fb77-4f7a-afa5-b391309f11c9"
  FUSION_REFCOUNT_OPAQUE_STRING_GUID = "2ec93463-b0c3-45e1-8364-327e96aea856"
  SFC_DISABLE_NORMAL = 0_u32
  SFC_DISABLE_ASK = 1_u32
  SFC_DISABLE_ONCE = 2_u32
  SFC_DISABLE_SETUP = 3_u32
  SFC_DISABLE_NOPOPUPS = 4_u32
  SFC_SCAN_NORMAL = 0_u32
  SFC_SCAN_ALWAYS = 1_u32
  SFC_SCAN_ONCE = 2_u32
  SFC_SCAN_IMMEDIATE = 3_u32
  SFC_QUOTA_DEFAULT = 50_u32
  SFC_IDLE_TRIGGER = "WFP_IDLE_TRIGGER"
  IPROPNAME_PRODUCTNAME = "ProductName"
  IPROPNAME_PRODUCTCODE = "ProductCode"
  IPROPNAME_PRODUCTVERSION = "ProductVersion"
  IPROPNAME_INSTALLLANGUAGE = "ProductLanguage"
  IPROPNAME_MANUFACTURER = "Manufacturer"
  IPROPNAME_UPGRADECODE = "UpgradeCode"
  IPROPNAME_PIDTEMPLATE = "PIDTemplate"
  IPROPNAME_DISKPROMPT = "DiskPrompt"
  IPROPNAME_LEFTUNIT = "LeftUnit"
  IPROPNAME_ADMIN_PROPERTIES = "AdminProperties"
  IPROPNAME_DEFAULTUIFONT = "DefaultUIFont"
  IPROPNAME_ALLOWEDPROPERTIES = "SecureCustomProperties"
  IPROPNAME_ENABLEUSERCONTROL = "EnableUserControl"
  IPROPNAME_HIDDEN_PROPERTIES = "MsiHiddenProperties"
  IPROPNAME_USERNAME = "USERNAME"
  IPROPNAME_COMPANYNAME = "COMPANYNAME"
  IPROPNAME_PIDKEY = "PIDKEY"
  IPROPNAME_PATCH = "PATCH"
  IPROPNAME_MSIPATCHREMOVE = "MSIPATCHREMOVE"
  IPROPNAME_TARGETDIR = "TARGETDIR"
  IPROPNAME_ACTION = "ACTION"
  IPROPNAME_LIMITUI = "LIMITUI"
  IPROPNAME_LOGACTION = "LOGACTION"
  IPROPNAME_ALLUSERS = "ALLUSERS"
  IPROPNAME_INSTALLLEVEL = "INSTALLLEVEL"
  IPROPNAME_REBOOT = "REBOOT"
  IPROPNAME_REBOOTPROMPT = "REBOOTPROMPT"
  IPROPNAME_EXECUTEMODE = "EXECUTEMODE"
  IPROPVALUE_EXECUTEMODE_NONE = "NONE"
  IPROPVALUE_EXECUTEMODE_SCRIPT = "SCRIPT"
  IPROPNAME_EXECUTEACTION = "EXECUTEACTION"
  IPROPNAME_SOURCELIST = "SOURCELIST"
  IPROPNAME_ROOTDRIVE = "ROOTDRIVE"
  IPROPNAME_TRANSFORMS = "TRANSFORMS"
  IPROPNAME_TRANSFORMSATSOURCE = "TRANSFORMSATSOURCE"
  IPROPNAME_TRANSFORMSSECURE = "TRANSFORMSSECURE"
  IPROPNAME_SEQUENCE = "SEQUENCE"
  IPROPNAME_SHORTFILENAMES = "SHORTFILENAMES"
  IPROPNAME_PRIMARYFOLDER = "PRIMARYFOLDER"
  IPROPNAME_AFTERREBOOT = "AFTERREBOOT"
  IPROPNAME_NOCOMPANYNAME = "NOCOMPANYNAME"
  IPROPNAME_NOUSERNAME = "NOUSERNAME"
  IPROPNAME_DISABLEROLLBACK = "DISABLEROLLBACK"
  IPROPNAME_AVAILABLEFREEREG = "AVAILABLEFREEREG"
  IPROPNAME_DISABLEADVTSHORTCUTS = "DISABLEADVTSHORTCUTS"
  IPROPNAME_PATCHNEWPACKAGECODE = "PATCHNEWPACKAGECODE"
  IPROPNAME_PATCHNEWSUMMARYSUBJECT = "PATCHNEWSUMMARYSUBJECT"
  IPROPNAME_PATCHNEWSUMMARYCOMMENTS = "PATCHNEWSUMMARYCOMMENTS"
  IPROPNAME_PRODUCTLANGUAGE = "PRODUCTLANGUAGE"
  IPROPNAME_CHECKCRCS = "MSICHECKCRCS"
  IPROPNAME_MSINODISABLEMEDIA = "MSINODISABLEMEDIA"
  IPROPNAME_CARRYINGNDP = "CARRYINGNDP"
  IPROPVALUE__CARRYINGNDP_URTREINSTALL = "URTREINSTALL"
  IPROPVALUE__CARRYINGNDP_URTUPGRADE = "URTUPGRADE"
  IPROPNAME_ENFORCE_UPGRADE_COMPONENT_RULES = "MSIENFORCEUPGRADECOMPONENTRULES"
  IPROPNAME_MSINEWINSTANCE = "MSINEWINSTANCE"
  IPROPNAME_MSIINSTANCEGUID = "MSIINSTANCEGUID"
  IPROPNAME_MSIPACKAGEDOWNLOADLOCALCOPY = "MSIPACKAGEDOWNLOADLOCALCOPY"
  IPROPNAME_MSIPATCHDOWNLOADLOCALCOPY = "MSIPATCHDOWNLOADLOCALCOPY"
  IPROPNAME_MSIDISABLELUAPATCHING = "MSIDISABLELUAPATCHING"
  IPROPNAME_MSILOGGINGMODE = "MsiLogging"
  IPROPNAME_MSILOGFILELOCATION = "MsiLogFileLocation"
  IPROPNAME_MSI_RM_CONTROL = "MSIRESTARTMANAGERCONTROL"
  IPROPVALUE_MSI_RM_CONTROL_DISABLE = "Disable"
  IPROPVALUE_MSI_RM_CONTROL_DISABLESHUTDOWN = "DisableShutdown"
  IPROPNAME_MSI_RM_SESSION_KEY = "MsiRestartManagerSessionKey"
  IPROPNAME_MSI_REBOOT_PENDING = "MsiSystemRebootPending"
  IPROPNAME_MSI_RM_SHUTDOWN = "MSIRMSHUTDOWN"
  IPROPNAME_MSI_RM_DISABLE_RESTART = "MSIDISABLERMRESTART"
  IPROPNAME_MSI_UAC_DEPLOYMENT_COMPLIANT = "MSIDEPLOYMENTCOMPLIANT"
  IPROPNAME_MSI_USE_REAL_ADMIN_DETECTION = "MSIUSEREALADMINDETECTION"
  IPROPNAME_MSI_UNINSTALL_SUPERSEDED_COMPONENTS = "MSIUNINSTALLSUPERSEDEDCOMPONENTS"
  IPROPNAME_MSIDISABLEEEUI = "MSIDISABLEEEUI"
  IPROPNAME_MSI_FASTINSTALL = "MSIFASTINSTALL"
  IPROPNAME_INSTALLPERUSER = "MSIINSTALLPERUSER"
  IPROPNAME_INTERNALINSTALLEDPERUSER = "MSIINTERNALINSTALLEDPERUSER"
  IPROPNAME_ARPAUTHORIZEDCDFPREFIX = "ARPAUTHORIZEDCDFPREFIX"
  IPROPNAME_ARPCOMMENTS = "ARPCOMMENTS"
  IPROPNAME_ARPCONTACT = "ARPCONTACT"
  IPROPNAME_ARPHELPLINK = "ARPHELPLINK"
  IPROPNAME_ARPHELPTELEPHONE = "ARPHELPTELEPHONE"
  IPROPNAME_ARPINSTALLLOCATION = "ARPINSTALLLOCATION"
  IPROPNAME_ARPNOMODIFY = "ARPNOMODIFY"
  IPROPNAME_ARPNOREMOVE = "ARPNOREMOVE"
  IPROPNAME_ARPNOREPAIR = "ARPNOREPAIR"
  IPROPNAME_ARPREADME = "ARPREADME"
  IPROPNAME_ARPSIZE = "ARPSIZE"
  IPROPNAME_ARPSYSTEMCOMPONENT = "ARPSYSTEMCOMPONENT"
  IPROPNAME_ARPURLINFOABOUT = "ARPURLINFOABOUT"
  IPROPNAME_ARPURLUPDATEINFO = "ARPURLUPDATEINFO"
  IPROPNAME_ARPPRODUCTICON = "ARPPRODUCTICON"
  IPROPNAME_ARPSETTINGSIDENTIFIER = "MSIARPSETTINGSIDENTIFIER"
  IPROPNAME_ARPSHIMFLAGS = "SHIMFLAGS"
  IPROPNAME_ARPSHIMVERSIONNT = "SHIMVERSIONNT"
  IPROPNAME_ARPSHIMSERVICEPACKLEVEL = "SHIMSERVICEPACKLEVEL"
  IPROPNAME_INSTALLED = "Installed"
  IPROPNAME_PRODUCTSTATE = "ProductState"
  IPROPNAME_PRESELECTED = "Preselected"
  IPROPNAME_RESUME = "RESUME"
  IPROPNAME_UPDATESTARTED = "UpdateStarted"
  IPROPNAME_PRODUCTID = "ProductID"
  IPROPNAME_OUTOFDISKSPACE = "OutOfDiskSpace"
  IPROPNAME_OUTOFNORBDISKSPACE = "OutOfNoRbDiskSpace"
  IPROPNAME_COSTINGCOMPLETE = "CostingComplete"
  IPROPNAME_SOURCEDIR = "SourceDir"
  IPROPNAME_REPLACEDINUSEFILES = "ReplacedInUseFiles"
  IPROPNAME_PRIMARYFOLDER_PATH = "PrimaryVolumePath"
  IPROPNAME_PRIMARYFOLDER_SPACEAVAILABLE = "PrimaryVolumeSpaceAvailable"
  IPROPNAME_PRIMARYFOLDER_SPACEREQUIRED = "PrimaryVolumeSpaceRequired"
  IPROPNAME_PRIMARYFOLDER_SPACEREMAINING = "PrimaryVolumeSpaceRemaining"
  IPROPNAME_ISADMINPACKAGE = "IsAdminPackage"
  IPROPNAME_ROLLBACKDISABLED = "RollbackDisabled"
  IPROPNAME_RESTRICTEDUSERCONTROL = "RestrictedUserControl"
  IPROPNAME_SOURCERESONLY = "MsiUISourceResOnly"
  IPROPNAME_HIDECANCEL = "MsiUIHideCancel"
  IPROPNAME_PROGRESSONLY = "MsiUIProgressOnly"
  IPROPNAME_UACONLY = "MsiUIUACOnly"
  IPROPNAME_TIME = "Time"
  IPROPNAME_DATE = "Date"
  IPROPNAME_DATETIME = "DateTime"
  IPROPNAME_ARM = "Arm"
  IPROPNAME_ARM64 = "Arm64"
  IPROPNAME_INTEL = "Intel"
  IPROPNAME_TEMPLATE_AMD64 = "AMD64"
  IPROPNAME_TEMPLATE_X64 = "x64"
  IPROPNAME_MSIAMD64 = "MsiAMD64"
  IPROPNAME_MSIX64 = "Msix64"
  IPROPNAME_INTEL64 = "Intel64"
  IPROPNAME_IA64 = "IA64"
  IPROPNAME_TEXTHEIGHT = "TextHeight"
  IPROPNAME_TEXTINTERNALLEADING = "TextInternalLeading"
  IPROPNAME_SCREENX = "ScreenX"
  IPROPNAME_SCREENY = "ScreenY"
  IPROPNAME_CAPTIONHEIGHT = "CaptionHeight"
  IPROPNAME_BORDERTOP = "BorderTop"
  IPROPNAME_BORDERSIDE = "BorderSide"
  IPROPNAME_COLORBITS = "ColorBits"
  IPROPNAME_PHYSICALMEMORY = "PhysicalMemory"
  IPROPNAME_VIRTUALMEMORY = "VirtualMemory"
  IPROPNAME_TEXTHEIGHT_CORRECTION = "TextHeightCorrection"
  IPROPNAME_MSITABLETPC = "MsiTabletPC"
  IPROPNAME_VERSIONNT = "VersionNT"
  IPROPNAME_VERSION9X = "Version9X"
  IPROPNAME_VERSIONNT64 = "VersionNT64"
  IPROPNAME_WINDOWSBUILD = "WindowsBuild"
  IPROPNAME_SERVICEPACKLEVEL = "ServicePackLevel"
  IPROPNAME_SERVICEPACKLEVELMINOR = "ServicePackLevelMinor"
  IPROPNAME_SHAREDWINDOWS = "SharedWindows"
  IPROPNAME_COMPUTERNAME = "ComputerName"
  IPROPNAME_SHELLADVTSUPPORT = "ShellAdvtSupport"
  IPROPNAME_OLEADVTSUPPORT = "OLEAdvtSupport"
  IPROPNAME_SYSTEMLANGUAGEID = "SystemLanguageID"
  IPROPNAME_TTCSUPPORT = "TTCSupport"
  IPROPNAME_TERMSERVER = "TerminalServer"
  IPROPNAME_REMOTEADMINTS = "RemoteAdminTS"
  IPROPNAME_REDIRECTEDDLLSUPPORT = "RedirectedDllSupport"
  IPROPNAME_NTPRODUCTTYPE = "MsiNTProductType"
  IPROPNAME_NTSUITEBACKOFFICE = "MsiNTSuiteBackOffice"
  IPROPNAME_NTSUITEDATACENTER = "MsiNTSuiteDataCenter"
  IPROPNAME_NTSUITEENTERPRISE = "MsiNTSuiteEnterprise"
  IPROPNAME_NTSUITESMALLBUSINESS = "MsiNTSuiteSmallBusiness"
  IPROPNAME_NTSUITESMALLBUSINESSRESTRICTED = "MsiNTSuiteSmallBusinessRestricted"
  IPROPNAME_NTSUITEPERSONAL = "MsiNTSuitePersonal"
  IPROPNAME_NTSUITEWEBSERVER = "MsiNTSuiteWebServer"
  IPROPNAME_NETASSEMBLYSUPPORT = "MsiNetAssemblySupport"
  IPROPNAME_WIN32ASSEMBLYSUPPORT = "MsiWin32AssemblySupport"
  IPROPNAME_LOGONUSER = "LogonUser"
  IPROPNAME_USERSID = "UserSID"
  IPROPNAME_ADMINUSER = "AdminUser"
  IPROPNAME_USERLANGUAGEID = "UserLanguageID"
  IPROPNAME_PRIVILEGED = "Privileged"
  IPROPNAME_RUNNINGELEVATED = "MsiRunningElevated"
  IPROPNAME_TRUEADMINUSER = "MsiTrueAdminUser"
  IPROPNAME_WINDOWS_FOLDER = "WindowsFolder"
  IPROPNAME_SYSTEM_FOLDER = "SystemFolder"
  IPROPNAME_SYSTEM16_FOLDER = "System16Folder"
  IPROPNAME_WINDOWS_VOLUME = "WindowsVolume"
  IPROPNAME_TEMP_FOLDER = "TempFolder"
  IPROPNAME_PROGRAMFILES_FOLDER = "ProgramFilesFolder"
  IPROPNAME_COMMONFILES_FOLDER = "CommonFilesFolder"
  IPROPNAME_SYSTEM64_FOLDER = "System64Folder"
  IPROPNAME_PROGRAMFILES64_FOLDER = "ProgramFiles64Folder"
  IPROPNAME_COMMONFILES64_FOLDER = "CommonFiles64Folder"
  IPROPNAME_STARTMENU_FOLDER = "StartMenuFolder"
  IPROPNAME_PROGRAMMENU_FOLDER = "ProgramMenuFolder"
  IPROPNAME_STARTUP_FOLDER = "StartupFolder"
  IPROPNAME_NETHOOD_FOLDER = "NetHoodFolder"
  IPROPNAME_PERSONAL_FOLDER = "PersonalFolder"
  IPROPNAME_SENDTO_FOLDER = "SendToFolder"
  IPROPNAME_DESKTOP_FOLDER = "DesktopFolder"
  IPROPNAME_TEMPLATE_FOLDER = "TemplateFolder"
  IPROPNAME_FONTS_FOLDER = "FontsFolder"
  IPROPNAME_FAVORITES_FOLDER = "FavoritesFolder"
  IPROPNAME_RECENT_FOLDER = "RecentFolder"
  IPROPNAME_APPDATA_FOLDER = "AppDataFolder"
  IPROPNAME_PRINTHOOD_FOLDER = "PrintHoodFolder"
  IPROPNAME_ADMINTOOLS_FOLDER = "AdminToolsFolder"
  IPROPNAME_COMMONAPPDATA_FOLDER = "CommonAppDataFolder"
  IPROPNAME_LOCALAPPDATA_FOLDER = "LocalAppDataFolder"
  IPROPNAME_MYPICTURES_FOLDER = "MyPicturesFolder"
  IPROPNAME_FEATUREADDLOCAL = "ADDLOCAL"
  IPROPNAME_FEATUREADDSOURCE = "ADDSOURCE"
  IPROPNAME_FEATUREADDDEFAULT = "ADDDEFAULT"
  IPROPNAME_FEATUREREMOVE = "REMOVE"
  IPROPNAME_FEATUREADVERTISE = "ADVERTISE"
  IPROPVALUE_FEATURE_ALL = "ALL"
  IPROPNAME_COMPONENTADDLOCAL = "COMPADDLOCAL"
  IPROPNAME_COMPONENTADDSOURCE = "COMPADDSOURCE"
  IPROPNAME_COMPONENTADDDEFAULT = "COMPADDDEFAULT"
  IPROPNAME_FILEADDLOCAL = "FILEADDLOCAL"
  IPROPNAME_FILEADDSOURCE = "FILEADDSOURCE"
  IPROPNAME_FILEADDDEFAULT = "FILEADDDEFAULT"
  IPROPNAME_REINSTALL = "REINSTALL"
  IPROPNAME_REINSTALLMODE = "REINSTALLMODE"
  IPROPNAME_PROMPTROLLBACKCOST = "PROMPTROLLBACKCOST"
  IPROPVALUE_RBCOST_PROMPT = "P"
  IPROPVALUE_RBCOST_SILENT = "D"
  IPROPVALUE_RBCOST_FAIL = "F"
  IPROPNAME_CUSTOMACTIONDATA = "CustomActionData"
  IACTIONNAME_INSTALL = "INSTALL"
  IACTIONNAME_ADVERTISE = "ADVERTISE"
  IACTIONNAME_ADMIN = "ADMIN"
  IACTIONNAME_SEQUENCE = "SEQUENCE"
  IACTIONNAME_COLLECTUSERINFO = "CollectUserInfo"
  IACTIONNAME_FIRSTRUN = "FirstRun"
  PID_TITLE = 2_u32
  PID_SUBJECT = 3_u32
  PID_AUTHOR = 4_u32
  PID_KEYWORDS = 5_u32
  PID_COMMENTS = 6_u32
  PID_TEMPLATE = 7_u32
  PID_LASTAUTHOR = 8_u32
  PID_REVNUMBER = 9_u32
  PID_EDITTIME = 10_u32
  PID_LASTPRINTED = 11_u32
  PID_CREATE_DTM = 12_u32
  PID_LASTSAVE_DTM = 13_u32
  PID_PAGECOUNT = 14_u32
  PID_WORDCOUNT = 15_u32
  PID_CHARCOUNT = 16_u32
  PID_THUMBNAIL = 17_u32
  PID_APPNAME = 18_u32
  PID_MSIVERSION = 14_u32
  PID_MSISOURCE = 15_u32
  PID_MSIRESTRICT = 16_u32
  PATCH_OPTION_USE_BEST = 0_u32
  PATCH_OPTION_USE_LZX_BEST = 3_u32
  PATCH_OPTION_USE_LZX_A = 1_u32
  PATCH_OPTION_USE_LZX_B = 2_u32
  PATCH_OPTION_USE_LZX_LARGE = 4_u32
  PATCH_OPTION_NO_BINDFIX = 65536_u32
  PATCH_OPTION_NO_LOCKFIX = 131072_u32
  PATCH_OPTION_NO_REBASE = 262144_u32
  PATCH_OPTION_FAIL_IF_SAME_FILE = 524288_u32
  PATCH_OPTION_FAIL_IF_BIGGER = 1048576_u32
  PATCH_OPTION_NO_CHECKSUM = 2097152_u32
  PATCH_OPTION_NO_RESTIMEFIX = 4194304_u32
  PATCH_OPTION_NO_TIMESTAMP = 8388608_u32
  PATCH_OPTION_SIGNATURE_MD5 = 16777216_u32
  PATCH_OPTION_INTERLEAVE_FILES = 1073741824_u32
  PATCH_OPTION_RESERVED1 = 2147483648_u32
  PATCH_OPTION_VALID_FLAGS = 3237937159_u32
  PATCH_SYMBOL_NO_IMAGEHLP = 1_u32
  PATCH_SYMBOL_NO_FAILURES = 2_u32
  PATCH_SYMBOL_UNDECORATED_TOO = 4_u32
  PATCH_SYMBOL_RESERVED1 = 2147483648_u32
  PATCH_TRANSFORM_PE_RESOURCE_2 = 256_u32
  PATCH_TRANSFORM_PE_IRELOC_2 = 512_u32
  APPLY_OPTION_FAIL_IF_EXACT = 1_u32
  APPLY_OPTION_FAIL_IF_CLOSE = 2_u32
  APPLY_OPTION_TEST_ONLY = 4_u32
  APPLY_OPTION_VALID_FLAGS = 7_u32
  ERROR_PATCH_ENCODE_FAILURE = 3222155521_u32
  ERROR_PATCH_INVALID_OPTIONS = 3222155522_u32
  ERROR_PATCH_SAME_FILE = 3222155523_u32
  ERROR_PATCH_RETAIN_RANGES_DIFFER = 3222155524_u32
  ERROR_PATCH_BIGGER_THAN_COMPRESSED = 3222155525_u32
  ERROR_PATCH_IMAGEHLP_FAILURE = 3222155526_u32
  ERROR_PATCH_DECODE_FAILURE = 3222159617_u32
  ERROR_PATCH_CORRUPT = 3222159618_u32
  ERROR_PATCH_NEWER_FORMAT = 3222159619_u32
  ERROR_PATCH_WRONG_FILE = 3222159620_u32
  ERROR_PATCH_NOT_NECESSARY = 3222159621_u32
  ERROR_PATCH_NOT_AVAILABLE = 3222159622_u32
  ERROR_PCW_BASE = 3222163713_u32
  ERROR_PCW_PCP_DOESNT_EXIST = 3222163713_u32
  ERROR_PCW_PCP_BAD_FORMAT = 3222163714_u32
  ERROR_PCW_CANT_CREATE_TEMP_FOLDER = 3222163715_u32
  ERROR_PCW_MISSING_PATCH_PATH = 3222163716_u32
  ERROR_PCW_CANT_OVERWRITE_PATCH = 3222163717_u32
  ERROR_PCW_CANT_CREATE_PATCH_FILE = 3222163718_u32
  ERROR_PCW_MISSING_PATCH_GUID = 3222163719_u32
  ERROR_PCW_BAD_PATCH_GUID = 3222163720_u32
  ERROR_PCW_BAD_GUIDS_TO_REPLACE = 3222163721_u32
  ERROR_PCW_BAD_TARGET_PRODUCT_CODE_LIST = 3222163722_u32
  ERROR_PCW_NO_UPGRADED_IMAGES_TO_PATCH = 3222163723_u32
  ERROR_PCW_BAD_API_PATCHING_SYMBOL_FLAGS = 3222163725_u32
  ERROR_PCW_OODS_COPYING_MSI = 3222163726_u32
  ERROR_PCW_UPGRADED_IMAGE_NAME_TOO_LONG = 3222163727_u32
  ERROR_PCW_BAD_UPGRADED_IMAGE_NAME = 3222163728_u32
  ERROR_PCW_DUP_UPGRADED_IMAGE_NAME = 3222163729_u32
  ERROR_PCW_UPGRADED_IMAGE_PATH_TOO_LONG = 3222163730_u32
  ERROR_PCW_UPGRADED_IMAGE_PATH_EMPTY = 3222163731_u32
  ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_EXIST = 3222163732_u32
  ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_MSI = 3222163733_u32
  ERROR_PCW_UPGRADED_IMAGE_COMPRESSED = 3222163734_u32
  ERROR_PCW_TARGET_IMAGE_NAME_TOO_LONG = 3222163735_u32
  ERROR_PCW_BAD_TARGET_IMAGE_NAME = 3222163736_u32
  ERROR_PCW_DUP_TARGET_IMAGE_NAME = 3222163737_u32
  ERROR_PCW_TARGET_IMAGE_PATH_TOO_LONG = 3222163738_u32
  ERROR_PCW_TARGET_IMAGE_PATH_EMPTY = 3222163739_u32
  ERROR_PCW_TARGET_IMAGE_PATH_NOT_EXIST = 3222163740_u32
  ERROR_PCW_TARGET_IMAGE_PATH_NOT_MSI = 3222163741_u32
  ERROR_PCW_TARGET_IMAGE_COMPRESSED = 3222163742_u32
  ERROR_PCW_TARGET_BAD_PROD_VALIDATE = 3222163743_u32
  ERROR_PCW_TARGET_BAD_PROD_CODE_VAL = 3222163744_u32
  ERROR_PCW_UPGRADED_MISSING_SRC_FILES = 3222163745_u32
  ERROR_PCW_TARGET_MISSING_SRC_FILES = 3222163746_u32
  ERROR_PCW_IMAGE_FAMILY_NAME_TOO_LONG = 3222163747_u32
  ERROR_PCW_BAD_IMAGE_FAMILY_NAME = 3222163748_u32
  ERROR_PCW_DUP_IMAGE_FAMILY_NAME = 3222163749_u32
  ERROR_PCW_BAD_IMAGE_FAMILY_SRC_PROP = 3222163750_u32
  ERROR_PCW_UFILEDATA_LONG_FILE_TABLE_KEY = 3222163751_u32
  ERROR_PCW_UFILEDATA_BLANK_FILE_TABLE_KEY = 3222163752_u32
  ERROR_PCW_UFILEDATA_MISSING_FILE_TABLE_KEY = 3222163753_u32
  ERROR_PCW_EXTFILE_LONG_FILE_TABLE_KEY = 3222163754_u32
  ERROR_PCW_EXTFILE_BLANK_FILE_TABLE_KEY = 3222163755_u32
  ERROR_PCW_EXTFILE_BAD_FAMILY_FIELD = 3222163756_u32
  ERROR_PCW_EXTFILE_LONG_PATH_TO_FILE = 3222163757_u32
  ERROR_PCW_EXTFILE_BLANK_PATH_TO_FILE = 3222163758_u32
  ERROR_PCW_EXTFILE_MISSING_FILE = 3222163759_u32
  ERROR_PCW_BAD_FILE_SEQUENCE_START = 3222163770_u32
  ERROR_PCW_CANT_COPY_FILE_TO_TEMP_FOLDER = 3222163771_u32
  ERROR_PCW_CANT_CREATE_ONE_PATCH_FILE = 3222163772_u32
  ERROR_PCW_BAD_IMAGE_FAMILY_DISKID = 3222163773_u32
  ERROR_PCW_BAD_IMAGE_FAMILY_FILESEQSTART = 3222163774_u32
  ERROR_PCW_BAD_UPGRADED_IMAGE_FAMILY = 3222163775_u32
  ERROR_PCW_BAD_TARGET_IMAGE_UPGRADED = 3222163776_u32
  ERROR_PCW_DUP_TARGET_IMAGE_PACKCODE = 3222163777_u32
  ERROR_PCW_UFILEDATA_BAD_UPGRADED_FIELD = 3222163778_u32
  ERROR_PCW_MISMATCHED_PRODUCT_CODES = 3222163779_u32
  ERROR_PCW_MISMATCHED_PRODUCT_VERSIONS = 3222163780_u32
  ERROR_PCW_CANNOT_WRITE_DDF = 3222163781_u32
  ERROR_PCW_CANNOT_RUN_MAKECAB = 3222163782_u32
  ERROR_PCW_WRITE_SUMMARY_PROPERTIES = 3222163787_u32
  ERROR_PCW_TFILEDATA_LONG_FILE_TABLE_KEY = 3222163788_u32
  ERROR_PCW_TFILEDATA_BLANK_FILE_TABLE_KEY = 3222163789_u32
  ERROR_PCW_TFILEDATA_MISSING_FILE_TABLE_KEY = 3222163790_u32
  ERROR_PCW_TFILEDATA_BAD_TARGET_FIELD = 3222163791_u32
  ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_TOO_LONG = 3222163792_u32
  ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_EXIST = 3222163793_u32
  ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_MSI = 3222163794_u32
  ERROR_PCW_DUP_UPGRADED_IMAGE_PACKCODE = 3222163795_u32
  ERROR_PCW_UFILEIGNORE_BAD_UPGRADED_FIELD = 3222163796_u32
  ERROR_PCW_UFILEIGNORE_LONG_FILE_TABLE_KEY = 3222163797_u32
  ERROR_PCW_UFILEIGNORE_BLANK_FILE_TABLE_KEY = 3222163798_u32
  ERROR_PCW_UFILEIGNORE_BAD_FILE_TABLE_KEY = 3222163799_u32
  ERROR_PCW_FAMILY_RANGE_NAME_TOO_LONG = 3222163800_u32
  ERROR_PCW_BAD_FAMILY_RANGE_NAME = 3222163801_u32
  ERROR_PCW_FAMILY_RANGE_LONG_FILE_TABLE_KEY = 3222163802_u32
  ERROR_PCW_FAMILY_RANGE_BLANK_FILE_TABLE_KEY = 3222163803_u32
  ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_OFFSETS = 3222163804_u32
  ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_OFFSETS = 3222163805_u32
  ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_OFFSETS = 3222163806_u32
  ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_LENGTHS = 3222163807_u32
  ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_LENGTHS = 3222163808_u32
  ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_LENGTHS = 3222163809_u32
  ERROR_PCW_FAMILY_RANGE_COUNT_MISMATCH = 3222163810_u32
  ERROR_PCW_EXTFILE_LONG_IGNORE_OFFSETS = 3222163811_u32
  ERROR_PCW_EXTFILE_BAD_IGNORE_OFFSETS = 3222163812_u32
  ERROR_PCW_EXTFILE_LONG_IGNORE_LENGTHS = 3222163813_u32
  ERROR_PCW_EXTFILE_BAD_IGNORE_LENGTHS = 3222163814_u32
  ERROR_PCW_EXTFILE_IGNORE_COUNT_MISMATCH = 3222163815_u32
  ERROR_PCW_EXTFILE_LONG_RETAIN_OFFSETS = 3222163816_u32
  ERROR_PCW_EXTFILE_BAD_RETAIN_OFFSETS = 3222163817_u32
  ERROR_PCW_TFILEDATA_LONG_IGNORE_OFFSETS = 3222163819_u32
  ERROR_PCW_TFILEDATA_BAD_IGNORE_OFFSETS = 3222163820_u32
  ERROR_PCW_TFILEDATA_LONG_IGNORE_LENGTHS = 3222163821_u32
  ERROR_PCW_TFILEDATA_BAD_IGNORE_LENGTHS = 3222163822_u32
  ERROR_PCW_TFILEDATA_IGNORE_COUNT_MISMATCH = 3222163823_u32
  ERROR_PCW_TFILEDATA_LONG_RETAIN_OFFSETS = 3222163824_u32
  ERROR_PCW_TFILEDATA_BAD_RETAIN_OFFSETS = 3222163825_u32
  ERROR_PCW_CANT_GENERATE_TRANSFORM = 3222163827_u32
  ERROR_PCW_CANT_CREATE_SUMMARY_INFO = 3222163828_u32
  ERROR_PCW_CANT_GENERATE_TRANSFORM_POUND = 3222163829_u32
  ERROR_PCW_CANT_CREATE_SUMMARY_INFO_POUND = 3222163830_u32
  ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_CODE = 3222163831_u32
  ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_VERSION = 3222163832_u32
  ERROR_PCW_BAD_UPGRADED_IMAGE_UPGRADE_CODE = 3222163833_u32
  ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_CODE = 3222163834_u32
  ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_VERSION = 3222163835_u32
  ERROR_PCW_BAD_TARGET_IMAGE_UPGRADE_CODE = 3222163836_u32
  ERROR_PCW_MATCHED_PRODUCT_VERSIONS = 3222163837_u32
  ERROR_PCW_OBSOLETION_WITH_SEQUENCE_DATA = 3222163838_u32
  ERROR_PCW_OBSOLETION_WITH_MSI30 = 3222163839_u32
  ERROR_PCW_OBSOLETION_WITH_PATCHSEQUENCE = 3222163840_u32
  ERROR_PCW_CANNOT_CREATE_TABLE = 3222163841_u32
  ERROR_PCW_CANT_GENERATE_SEQUENCEINFO_MAJORUPGD = 3222163842_u32
  ERROR_PCW_MAJOR_UPGD_WITHOUT_SEQUENCING = 3222163843_u32
  ERROR_PCW_BAD_PRODUCTVERSION_VALIDATION = 3222163844_u32
  ERROR_PCW_BAD_TRANSFORMSET = 3222163845_u32
  ERROR_PCW_BAD_TGT_UPD_IMAGES = 3222163846_u32
  ERROR_PCW_BAD_SUPERCEDENCE = 3222163847_u32
  ERROR_PCW_BAD_SEQUENCE = 3222163848_u32
  ERROR_PCW_BAD_TARGET = 3222163849_u32
  ERROR_PCW_NULL_PATCHFAMILY = 3222163850_u32
  ERROR_PCW_NULL_SEQUENCE_NUMBER = 3222163851_u32
  ERROR_PCW_BAD_VERSION_STRING = 3222163852_u32
  ERROR_PCW_BAD_MAJOR_VERSION = 3222163853_u32
  ERROR_PCW_SEQUENCING_BAD_TARGET = 3222163854_u32
  ERROR_PCW_PATCHMETADATA_PROP_NOT_SET = 3222163855_u32
  ERROR_PCW_INVALID_PATCHMETADATA_PROP = 3222163856_u32
  ERROR_PCW_INVALID_SUPERCEDENCE = 3222163857_u32
  ERROR_PCW_DUPLICATE_SEQUENCE_RECORD = 3222163858_u32
  ERROR_PCW_WRONG_PATCHMETADATA_STRD_PROP = 3222163859_u32
  ERROR_PCW_INVALID_PARAMETER = 3222163860_u32
  ERROR_PCW_CREATEFILE_LOG_FAILED = 3222163861_u32
  ERROR_PCW_INVALID_LOG_LEVEL = 3222163862_u32
  ERROR_PCW_INVALID_UI_LEVEL = 3222163863_u32
  ERROR_PCW_ERROR_WRITING_TO_LOG = 3222163864_u32
  ERROR_PCW_OUT_OF_MEMORY = 3222163865_u32
  ERROR_PCW_UNKNOWN_ERROR = 3222163866_u32
  ERROR_PCW_UNKNOWN_INFO = 3222163867_u32
  ERROR_PCW_UNKNOWN_WARN = 3222163868_u32
  ERROR_PCW_OPEN_VIEW = 3222163869_u32
  ERROR_PCW_EXECUTE_VIEW = 3222163870_u32
  ERROR_PCW_VIEW_FETCH = 3222163871_u32
  ERROR_PCW_FAILED_EXPAND_PATH = 3222163872_u32
  ERROR_PCW_INTERNAL_ERROR = 3222163969_u32
  ERROR_PCW_INVALID_PCP_PROPERTY = 3222163970_u32
  ERROR_PCW_INVALID_PCP_TARGETIMAGES = 3222163971_u32
  ERROR_PCW_LAX_VALIDATION_FLAGS = 3222163972_u32
  ERROR_PCW_FAILED_CREATE_TRANSFORM = 3222163973_u32
  ERROR_PCW_CANT_DELETE_TEMP_FOLDER = 3222163974_u32
  ERROR_PCW_MISSING_DIRECTORY_TABLE = 3222163975_u32
  ERROR_PCW_INVALID_SUPERSEDENCE_VALUE = 3222163976_u32
  ERROR_PCW_INVALID_PATCH_TYPE_SEQUENCING = 3222163977_u32
  ERROR_PCW_CANT_READ_FILE = 3222163978_u32
  ERROR_PCW_TARGET_WRONG_PRODUCT_VERSION_COMP = 3222163979_u32
  ERROR_PCW_INVALID_PCP_UPGRADEDFILESTOIGNORE = 3222163980_u32
  ERROR_PCW_INVALID_PCP_UPGRADEDIMAGES = 3222163981_u32
  ERROR_PCW_INVALID_PCP_EXTERNALFILES = 3222163982_u32
  ERROR_PCW_INVALID_PCP_IMAGEFAMILIES = 3222163983_u32
  ERROR_PCW_INVALID_PCP_PATCHSEQUENCE = 3222163984_u32
  ERROR_PCW_INVALID_PCP_TARGETFILES_OPTIONALDATA = 3222163985_u32
  ERROR_PCW_INVALID_PCP_UPGRADEDFILES_OPTIONALDATA = 3222163986_u32
  ERROR_PCW_MISSING_PATCHMETADATA = 3222163987_u32
  ERROR_PCW_IMAGE_PATH_NOT_EXIST = 3222163988_u32
  ERROR_PCW_INVALID_RANGE_ELEMENT = 3222163989_u32
  ERROR_PCW_INVALID_MAJOR_VERSION = 3222163990_u32
  ERROR_PCW_INVALID_PCP_PROPERTIES = 3222163991_u32
  ERROR_PCW_INVALID_PCP_FAMILYFILERANGES = 3222163992_u32
  INFO_BASE = 3222229249_u32
  INFO_PASSED_MAIN_CONTROL = 3222229249_u32
  INFO_ENTERING_PHASE_I_VALIDATION = 3222229250_u32
  INFO_ENTERING_PHASE_I = 3222229251_u32
  INFO_PCP_PATH = 3222229252_u32
  INFO_TEMP_DIR = 3222229253_u32
  INFO_SET_OPTIONS = 3222229254_u32
  INFO_PROPERTY = 3222229255_u32
  INFO_ENTERING_PHASE_II = 3222229256_u32
  INFO_ENTERING_PHASE_III = 3222229257_u32
  INFO_ENTERING_PHASE_IV = 3222229258_u32
  INFO_ENTERING_PHASE_V = 3222229259_u32
  INFO_GENERATING_METADATA = 3222229265_u32
  INFO_TEMP_DIR_CLEANUP = 3222229266_u32
  INFO_PATCHCACHE_FILEINFO_FAILURE = 3222229267_u32
  INFO_PATCHCACHE_PCI_READFAILURE = 3222229268_u32
  INFO_PATCHCACHE_PCI_WRITEFAILURE = 3222229269_u32
  INFO_USING_USER_MSI_FOR_PATCH_TABLES = 3222229270_u32
  INFO_SUCCESSFUL_PATCH_CREATION = 3222229271_u32
  WARN_BASE = 3222294785_u32
  WARN_MAJOR_UPGRADE_PATCH = 3222294785_u32
  WARN_SEQUENCE_DATA_GENERATION_DISABLED = 3222294786_u32
  WARN_SEQUENCE_DATA_SUPERSEDENCE_IGNORED = 3222294787_u32
  WARN_IMPROPER_TRANSFORM_VALIDATION = 3222294788_u32
  WARN_PCW_MISMATCHED_PRODUCT_CODES = 3222294789_u32
  WARN_PCW_MISMATCHED_PRODUCT_VERSIONS = 3222294790_u32
  WARN_INVALID_TRANSFORM_VALIDATION = 3222294791_u32
  WARN_BAD_MAJOR_VERSION = 3222294792_u32
  WARN_FILE_VERSION_DOWNREV = 3222294793_u32
  WARN_EQUAL_FILE_VERSION = 3222294794_u32
  WARN_PATCHPROPERTYNOTSET = 3222294795_u32
  WARN_OBSOLETION_WITH_SEQUENCE_DATA = 3222294802_u32
  WARN_OBSOLETION_WITH_MSI30 = 3222294801_u32
  WARN_OBSOLETION_WITH_PATCHSEQUENCE = 3222294803_u32
  DELTA_MAX_HASH_SIZE = 32_u32
  Cchmaxinteger = 12_i32
  LOGNONE = 0_u32
  LOGINFO = 1_u32
  LOGWARN = 2_u32
  LOGERR = 4_u32
  LOGPERFMESSAGES = 8_u32
  LOGALL = 15_u32
  UINONE = 0_u32
  UILOGBITS = 15_u32
  DEFAULT_MINIMUM_REQUIRED_MSI_VERSION = 100_u32
  DEFAULT_FILE_SEQUENCE_START = 2_u32
  DEFAULT_DISK_ID = 2_u32

  CLSID_MsmMerge = LibC::GUID.new(0xadda830_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])

  CLSID_PMSvc = LibC::GUID.new(0xb9e511fc_u32, 0xe364_u16, 0x497a_u16, StaticArray[0xa1_u8, 0x21_u8, 0xb7_u8, 0xb3_u8, 0x61_u8, 0x2c_u8, 0xed_u8, 0xce_u8])

  enum MSIASSEMBLYINFO : UInt32
    MSIASSEMBLYINFO_NETASSEMBLY = 0_u32
    MSIASSEMBLYINFO_WIN32ASSEMBLY = 1_u32
  end
  enum IASSEMBLYCACHE_UNINSTALL_DISPOSITION : UInt32
    IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED = 1_u32
    IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE = 2_u32
    IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED = 3_u32
    IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING = 4_u32
  end
  @[Flags]
  enum QUERYASMINFO_FLAGS : UInt32
    QUERYASMINFO_FLAG_VALIDATE = 1_u32
  end
  enum RESULTTYPES
    Ieunknown = 0_i32
    Ieerror = 1_i32
    Iewarning = 2_i32
    Ieinfo = 3_i32
  end
  enum STATUSTYPES
    Iestatusgetcub = 0_i32
    Iestatusicecount = 1_i32
    Iestatusmerge = 2_i32
    Iestatussummaryinfo = 3_i32
    Iestatuscreateengine = 4_i32
    Iestatusstarting = 5_i32
    Iestatusrunice = 6_i32
    Iestatusshutdown = 7_i32
    Iestatussuccess = 8_i32
    Iestatusfail = 9_i32
    Iestatuscancel = 10_i32
  end
  enum Msmerrortype
    Msmerrorlanguageunsupported = 1_i32
    Msmerrorlanguagefailed = 2_i32
    Msmerrorexclusion = 3_i32
    Msmerrortablemerge = 4_i32
    Msmerrorresequencemerge = 5_i32
    Msmerrorfilecreate = 6_i32
    Msmerrordircreate = 7_i32
    Msmerrorfeaturerequired = 8_i32
  end
  enum INSTALLMESSAGE
    INSTALLMESSAGE_FATALEXIT = 0_i32
    INSTALLMESSAGE_ERROR = 16777216_i32
    INSTALLMESSAGE_WARNING = 33554432_i32
    INSTALLMESSAGE_USER = 50331648_i32
    INSTALLMESSAGE_INFO = 67108864_i32
    INSTALLMESSAGE_FILESINUSE = 83886080_i32
    INSTALLMESSAGE_RESOLVESOURCE = 100663296_i32
    INSTALLMESSAGE_OUTOFDISKSPACE = 117440512_i32
    INSTALLMESSAGE_ACTIONSTART = 134217728_i32
    INSTALLMESSAGE_ACTIONDATA = 150994944_i32
    INSTALLMESSAGE_PROGRESS = 167772160_i32
    INSTALLMESSAGE_COMMONDATA = 184549376_i32
    INSTALLMESSAGE_INITIALIZE = 201326592_i32
    INSTALLMESSAGE_TERMINATE = 218103808_i32
    INSTALLMESSAGE_SHOWDIALOG = 234881024_i32
    INSTALLMESSAGE_PERFORMANCE = 251658240_i32
    INSTALLMESSAGE_RMFILESINUSE = 419430400_i32
    INSTALLMESSAGE_INSTALLSTART = 436207616_i32
    INSTALLMESSAGE_INSTALLEND = 452984832_i32
  end
  enum INSTALLUILEVEL
    INSTALLUILEVEL_NOCHANGE = 0_i32
    INSTALLUILEVEL_DEFAULT = 1_i32
    INSTALLUILEVEL_NONE = 2_i32
    INSTALLUILEVEL_BASIC = 3_i32
    INSTALLUILEVEL_REDUCED = 4_i32
    INSTALLUILEVEL_FULL = 5_i32
    INSTALLUILEVEL_ENDDIALOG = 128_i32
    INSTALLUILEVEL_PROGRESSONLY = 64_i32
    INSTALLUILEVEL_HIDECANCEL = 32_i32
    INSTALLUILEVEL_SOURCERESONLY = 256_i32
    INSTALLUILEVEL_UACONLY = 512_i32
  end
  enum INSTALLSTATE
    INSTALLSTATE_NOTUSED = -7_i32
    INSTALLSTATE_BADCONFIG = -6_i32
    INSTALLSTATE_INCOMPLETE = -5_i32
    INSTALLSTATE_SOURCEABSENT = -4_i32
    INSTALLSTATE_MOREDATA = -3_i32
    INSTALLSTATE_INVALIDARG = -2_i32
    INSTALLSTATE_UNKNOWN = -1_i32
    INSTALLSTATE_BROKEN = 0_i32
    INSTALLSTATE_ADVERTISED = 1_i32
    INSTALLSTATE_REMOVED = 1_i32
    INSTALLSTATE_ABSENT = 2_i32
    INSTALLSTATE_LOCAL = 3_i32
    INSTALLSTATE_SOURCE = 4_i32
    INSTALLSTATE_DEFAULT = 5_i32
  end
  enum USERINFOSTATE
    USERINFOSTATE_MOREDATA = -3_i32
    USERINFOSTATE_INVALIDARG = -2_i32
    USERINFOSTATE_UNKNOWN = -1_i32
    USERINFOSTATE_ABSENT = 0_i32
    USERINFOSTATE_PRESENT = 1_i32
  end
  enum INSTALLLEVEL
    INSTALLLEVEL_DEFAULT = 0_i32
    INSTALLLEVEL_MINIMUM = 1_i32
    INSTALLLEVEL_MAXIMUM = 65535_i32
  end
  enum REINSTALLMODE
    REINSTALLMODE_REPAIR = 1_i32
    REINSTALLMODE_FILEMISSING = 2_i32
    REINSTALLMODE_FILEOLDERVERSION = 4_i32
    REINSTALLMODE_FILEEQUALVERSION = 8_i32
    REINSTALLMODE_FILEEXACT = 16_i32
    REINSTALLMODE_FILEVERIFY = 32_i32
    REINSTALLMODE_FILEREPLACE = 64_i32
    REINSTALLMODE_MACHINEDATA = 128_i32
    REINSTALLMODE_USERDATA = 256_i32
    REINSTALLMODE_SHORTCUT = 512_i32
    REINSTALLMODE_PACKAGE = 1024_i32
  end
  enum INSTALLOGMODE
    INSTALLLOGMODE_FATALEXIT = 1_i32
    INSTALLLOGMODE_ERROR = 2_i32
    INSTALLLOGMODE_WARNING = 4_i32
    INSTALLLOGMODE_USER = 8_i32
    INSTALLLOGMODE_INFO = 16_i32
    INSTALLLOGMODE_RESOLVESOURCE = 64_i32
    INSTALLLOGMODE_OUTOFDISKSPACE = 128_i32
    INSTALLLOGMODE_ACTIONSTART = 256_i32
    INSTALLLOGMODE_ACTIONDATA = 512_i32
    INSTALLLOGMODE_COMMONDATA = 2048_i32
    INSTALLLOGMODE_PROPERTYDUMP = 1024_i32
    INSTALLLOGMODE_VERBOSE = 4096_i32
    INSTALLLOGMODE_EXTRADEBUG = 8192_i32
    INSTALLLOGMODE_LOGONLYONERROR = 16384_i32
    INSTALLLOGMODE_LOGPERFORMANCE = 32768_i32
    INSTALLLOGMODE_PROGRESS = 1024_i32
    INSTALLLOGMODE_INITIALIZE = 4096_i32
    INSTALLLOGMODE_TERMINATE = 8192_i32
    INSTALLLOGMODE_SHOWDIALOG = 16384_i32
    INSTALLLOGMODE_FILESINUSE = 32_i32
    INSTALLLOGMODE_RMFILESINUSE = 33554432_i32
    INSTALLLOGMODE_INSTALLSTART = 67108864_i32
    INSTALLLOGMODE_INSTALLEND = 134217728_i32
  end
  enum INSTALLLOGATTRIBUTES
    INSTALLLOGATTRIBUTES_APPEND = 1_i32
    INSTALLLOGATTRIBUTES_FLUSHEACHLINE = 2_i32
  end
  enum INSTALLFEATUREATTRIBUTE
    INSTALLFEATUREATTRIBUTE_FAVORLOCAL = 1_i32
    INSTALLFEATUREATTRIBUTE_FAVORSOURCE = 2_i32
    INSTALLFEATUREATTRIBUTE_FOLLOWPARENT = 4_i32
    INSTALLFEATUREATTRIBUTE_FAVORADVERTISE = 8_i32
    INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE = 16_i32
    INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE = 32_i32
  end
  enum INSTALLMODE
    INSTALLMODE_NODETECTION_ANY = -4_i32
    INSTALLMODE_NOSOURCERESOLUTION = -3_i32
    INSTALLMODE_NODETECTION = -2_i32
    INSTALLMODE_EXISTING = -1_i32
    INSTALLMODE_DEFAULT = 0_i32
  end
  enum MSIPATCHSTATE
    MSIPATCHSTATE_INVALID = 0_i32
    MSIPATCHSTATE_APPLIED = 1_i32
    MSIPATCHSTATE_SUPERSEDED = 2_i32
    MSIPATCHSTATE_OBSOLETED = 4_i32
    MSIPATCHSTATE_REGISTERED = 8_i32
    MSIPATCHSTATE_ALL = 15_i32
  end
  enum MSIINSTALLCONTEXT
    MSIINSTALLCONTEXT_FIRSTVISIBLE = 0_i32
    MSIINSTALLCONTEXT_NONE = 0_i32
    MSIINSTALLCONTEXT_USERMANAGED = 1_i32
    MSIINSTALLCONTEXT_USERUNMANAGED = 2_i32
    MSIINSTALLCONTEXT_MACHINE = 4_i32
    MSIINSTALLCONTEXT_ALL = 7_i32
    MSIINSTALLCONTEXT_ALLUSERMANAGED = 8_i32
  end
  enum MSIPATCHDATATYPE
    MSIPATCH_DATATYPE_PATCHFILE = 0_i32
    MSIPATCH_DATATYPE_XMLPATH = 1_i32
    MSIPATCH_DATATYPE_XMLBLOB = 2_i32
  end
  enum SCRIPTFLAGS
    SCRIPTFLAGS_CACHEINFO = 1_i32
    SCRIPTFLAGS_SHORTCUTS = 4_i32
    SCRIPTFLAGS_MACHINEASSIGN = 8_i32
    SCRIPTFLAGS_REGDATA_CNFGINFO = 32_i32
    SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST = 64_i32
    SCRIPTFLAGS_REGDATA_CLASSINFO = 128_i32
    SCRIPTFLAGS_REGDATA_EXTENSIONINFO = 256_i32
    SCRIPTFLAGS_REGDATA_APPINFO = 384_i32
    SCRIPTFLAGS_REGDATA = 416_i32
  end
  enum ADVERTISEFLAGS
    ADVERTISEFLAGS_MACHINEASSIGN = 0_i32
    ADVERTISEFLAGS_USERASSIGN = 1_i32
  end
  enum INSTALLTYPE
    INSTALLTYPE_DEFAULT = 0_i32
    INSTALLTYPE_NETWORK_IMAGE = 1_i32
    INSTALLTYPE_SINGLE_INSTANCE = 2_i32
  end
  enum MSIARCHITECTUREFLAGS
    MSIARCHITECTUREFLAGS_X86 = 1_i32
    MSIARCHITECTUREFLAGS_IA64 = 2_i32
    MSIARCHITECTUREFLAGS_AMD64 = 4_i32
    MSIARCHITECTUREFLAGS_ARM = 8_i32
  end
  enum MSIOPENPACKAGEFLAGS
    MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE = 1_i32
  end
  enum MSIADVERTISEOPTIONFLAGS
    MSIADVERTISEOPTIONFLAGS_INSTANCE = 1_i32
  end
  enum MSISOURCETYPE
    MSISOURCETYPE_UNKNOWN = 0_i32
    MSISOURCETYPE_NETWORK = 1_i32
    MSISOURCETYPE_URL = 2_i32
    MSISOURCETYPE_MEDIA = 4_i32
  end
  enum MSICODE
    MSICODE_PRODUCT = 0_i32
    MSICODE_PATCH = 1073741824_i32
  end
  enum MSITRANSACTION
    MSITRANSACTION_CHAIN_EMBEDDEDUI = 1_i32
    MSITRANSACTION_JOIN_EXISTING_EMBEDDEDUI = 2_i32
  end
  enum MSITRANSACTIONSTATE : UInt32
    MSITRANSACTIONSTATE_ROLLBACK = 0_u32
    MSITRANSACTIONSTATE_COMMIT = 1_u32
  end
  enum MSIDBSTATE
    MSIDBSTATE_ERROR = -1_i32
    MSIDBSTATE_READ = 0_i32
    MSIDBSTATE_WRITE = 1_i32
  end
  enum MSIMODIFY
    MSIMODIFY_SEEK = -1_i32
    MSIMODIFY_REFRESH = 0_i32
    MSIMODIFY_INSERT = 1_i32
    MSIMODIFY_UPDATE = 2_i32
    MSIMODIFY_ASSIGN = 3_i32
    MSIMODIFY_REPLACE = 4_i32
    MSIMODIFY_MERGE = 5_i32
    MSIMODIFY_DELETE = 6_i32
    MSIMODIFY_INSERT_TEMPORARY = 7_i32
    MSIMODIFY_VALIDATE = 8_i32
    MSIMODIFY_VALIDATE_NEW = 9_i32
    MSIMODIFY_VALIDATE_FIELD = 10_i32
    MSIMODIFY_VALIDATE_DELETE = 11_i32
  end
  enum MSICOLINFO
    MSICOLINFO_NAMES = 0_i32
    MSICOLINFO_TYPES = 1_i32
  end
  enum MSICONDITION
    MSICONDITION_FALSE = 0_i32
    MSICONDITION_TRUE = 1_i32
    MSICONDITION_NONE = 2_i32
    MSICONDITION_ERROR = 3_i32
  end
  enum MSICOSTTREE
    MSICOSTTREE_SELFONLY = 0_i32
    MSICOSTTREE_CHILDREN = 1_i32
    MSICOSTTREE_PARENTS = 2_i32
    MSICOSTTREE_RESERVED = 3_i32
  end
  enum MSIDBERROR
    MSIDBERROR_INVALIDARG = -3_i32
    MSIDBERROR_MOREDATA = -2_i32
    MSIDBERROR_FUNCTIONERROR = -1_i32
    MSIDBERROR_NOERROR = 0_i32
    MSIDBERROR_DUPLICATEKEY = 1_i32
    MSIDBERROR_REQUIRED = 2_i32
    MSIDBERROR_BADLINK = 3_i32
    MSIDBERROR_OVERFLOW = 4_i32
    MSIDBERROR_UNDERFLOW = 5_i32
    MSIDBERROR_NOTINSET = 6_i32
    MSIDBERROR_BADVERSION = 7_i32
    MSIDBERROR_BADCASE = 8_i32
    MSIDBERROR_BADGUID = 9_i32
    MSIDBERROR_BADWILDCARD = 10_i32
    MSIDBERROR_BADIDENTIFIER = 11_i32
    MSIDBERROR_BADLANGUAGE = 12_i32
    MSIDBERROR_BADFILENAME = 13_i32
    MSIDBERROR_BADPATH = 14_i32
    MSIDBERROR_BADCONDITION = 15_i32
    MSIDBERROR_BADFORMATTED = 16_i32
    MSIDBERROR_BADTEMPLATE = 17_i32
    MSIDBERROR_BADDEFAULTDIR = 18_i32
    MSIDBERROR_BADREGPATH = 19_i32
    MSIDBERROR_BADCUSTOMSOURCE = 20_i32
    MSIDBERROR_BADPROPERTY = 21_i32
    MSIDBERROR_MISSINGDATA = 22_i32
    MSIDBERROR_BADCATEGORY = 23_i32
    MSIDBERROR_BADKEYTABLE = 24_i32
    MSIDBERROR_BADMAXMINVALUES = 25_i32
    MSIDBERROR_BADCABINET = 26_i32
    MSIDBERROR_BADSHORTCUT = 27_i32
    MSIDBERROR_STRINGOVERFLOW = 28_i32
    MSIDBERROR_BADLOCALIZEATTRIB = 29_i32
  end
  enum MSIRUNMODE
    MSIRUNMODE_ADMIN = 0_i32
    MSIRUNMODE_ADVERTISE = 1_i32
    MSIRUNMODE_MAINTENANCE = 2_i32
    MSIRUNMODE_ROLLBACKENABLED = 3_i32
    MSIRUNMODE_LOGENABLED = 4_i32
    MSIRUNMODE_OPERATIONS = 5_i32
    MSIRUNMODE_REBOOTATEND = 6_i32
    MSIRUNMODE_REBOOTNOW = 7_i32
    MSIRUNMODE_CABINET = 8_i32
    MSIRUNMODE_SOURCESHORTNAMES = 9_i32
    MSIRUNMODE_TARGETSHORTNAMES = 10_i32
    MSIRUNMODE_RESERVED11 = 11_i32
    MSIRUNMODE_WINDOWS9X = 12_i32
    MSIRUNMODE_ZAWENABLED = 13_i32
    MSIRUNMODE_RESERVED14 = 14_i32
    MSIRUNMODE_RESERVED15 = 15_i32
    MSIRUNMODE_SCHEDULED = 16_i32
    MSIRUNMODE_ROLLBACK = 17_i32
    MSIRUNMODE_COMMIT = 18_i32
  end
  enum MSITRANSFORM_ERROR
    MSITRANSFORM_ERROR_ADDEXISTINGROW = 1_i32
    MSITRANSFORM_ERROR_DELMISSINGROW = 2_i32
    MSITRANSFORM_ERROR_ADDEXISTINGTABLE = 4_i32
    MSITRANSFORM_ERROR_DELMISSINGTABLE = 8_i32
    MSITRANSFORM_ERROR_UPDATEMISSINGROW = 16_i32
    MSITRANSFORM_ERROR_CHANGECODEPAGE = 32_i32
    MSITRANSFORM_ERROR_VIEWTRANSFORM = 256_i32
    MSITRANSFORM_ERROR_NONE = 0_i32
  end
  enum MSITRANSFORM_VALIDATE
    MSITRANSFORM_VALIDATE_LANGUAGE = 1_i32
    MSITRANSFORM_VALIDATE_PRODUCT = 2_i32
    MSITRANSFORM_VALIDATE_PLATFORM = 4_i32
    MSITRANSFORM_VALIDATE_MAJORVERSION = 8_i32
    MSITRANSFORM_VALIDATE_MINORVERSION = 16_i32
    MSITRANSFORM_VALIDATE_UPDATEVERSION = 32_i32
    MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION = 64_i32
    MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION = 128_i32
    MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION = 256_i32
    MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION = 512_i32
    MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION = 1024_i32
    MSITRANSFORM_VALIDATE_UPGRADECODE = 2048_i32
  end
  enum ASM_NAME
    ASM_NAME_PUBLIC_KEY = 0_i32
    ASM_NAME_PUBLIC_KEY_TOKEN = 1_i32
    ASM_NAME_HASH_VALUE = 2_i32
    ASM_NAME_NAME = 3_i32
    ASM_NAME_MAJOR_VERSION = 4_i32
    ASM_NAME_MINOR_VERSION = 5_i32
    ASM_NAME_BUILD_NUMBER = 6_i32
    ASM_NAME_REVISION_NUMBER = 7_i32
    ASM_NAME_CULTURE = 8_i32
    ASM_NAME_PROCESSOR_ID_ARRAY = 9_i32
    ASM_NAME_OSINFO_ARRAY = 10_i32
    ASM_NAME_HASH_ALGID = 11_i32
    ASM_NAME_ALIAS = 12_i32
    ASM_NAME_CODEBASE_URL = 13_i32
    ASM_NAME_CODEBASE_LASTMOD = 14_i32
    ASM_NAME_NULL_PUBLIC_KEY = 15_i32
    ASM_NAME_NULL_PUBLIC_KEY_TOKEN = 16_i32
    ASM_NAME_CUSTOM = 17_i32
    ASM_NAME_NULL_CUSTOM = 18_i32
    ASM_NAME_MVID = 19_i32
    ASM_NAME_MAX_PARAMS = 20_i32
  end
  @[Flags]
  enum ASM_BIND_FLAGS : UInt32
    ASM_BINDF_FORCE_CACHE_INSTALL = 1_u32
    ASM_BINDF_RFS_INTEGRITY_CHECK = 2_u32
    ASM_BINDF_RFS_MODULE_CHECK = 4_u32
    ASM_BINDF_BINPATH_PROBE_ONLY = 8_u32
    ASM_BINDF_SHARED_BINPATH_HINT = 16_u32
    ASM_BINDF_PARENT_ASM_HINT = 32_u32
  end
  enum ASM_DISPLAY_FLAGS
    ASM_DISPLAYF_VERSION = 1_i32
    ASM_DISPLAYF_CULTURE = 2_i32
    ASM_DISPLAYF_PUBLIC_KEY_TOKEN = 4_i32
    ASM_DISPLAYF_PUBLIC_KEY = 8_i32
    ASM_DISPLAYF_CUSTOM = 16_i32
    ASM_DISPLAYF_PROCESSORARCHITECTURE = 32_i32
    ASM_DISPLAYF_LANGUAGEID = 64_i32
  end
  enum ASM_CMP_FLAGS
    ASM_CMPF_NAME = 1_i32
    ASM_CMPF_MAJOR_VERSION = 2_i32
    ASM_CMPF_MINOR_VERSION = 4_i32
    ASM_CMPF_BUILD_NUMBER = 8_i32
    ASM_CMPF_REVISION_NUMBER = 16_i32
    ASM_CMPF_PUBLIC_KEY_TOKEN = 32_i32
    ASM_CMPF_CULTURE = 64_i32
    ASM_CMPF_CUSTOM = 128_i32
    ASM_CMPF_ALL = 255_i32
    ASM_CMPF_DEFAULT = 256_i32
  end
  enum CREATE_ASM_NAME_OBJ_FLAGS
    CANOF_PARSE_DISPLAY_NAME = 1_i32
    CANOF_SET_DEFAULT_VALUES = 2_i32
  end
  enum Msidbcontrolattributes
    Msidbcontrolattributesvisible = 1_i32
    Msidbcontrolattributesenabled = 2_i32
    Msidbcontrolattributessunken = 4_i32
    Msidbcontrolattributesindirect = 8_i32
    Msidbcontrolattributesinteger = 16_i32
    Msidbcontrolattributesrtlro = 32_i32
    Msidbcontrolattributesrightaligned = 64_i32
    Msidbcontrolattributesleftscroll = 128_i32
    Msidbcontrolattributesbidi = 224_i32
    Msidbcontrolattributestransparent = 65536_i32
    Msidbcontrolattributesnoprefix = 131072_i32
    Msidbcontrolattributesnowrap = 262144_i32
    Msidbcontrolattributesformatsize = 524288_i32
    Msidbcontrolattributesuserslanguage = 1048576_i32
    Msidbcontrolattributesmultiline = 65536_i32
    Msidbcontrolattributespasswordinput = 2097152_i32
    Msidbcontrolattributesprogress95 = 65536_i32
    Msidbcontrolattributesremovablevolume = 65536_i32
    Msidbcontrolattributesfixedvolume = 131072_i32
    Msidbcontrolattributesremotevolume = 262144_i32
    Msidbcontrolattributescdromvolume = 524288_i32
    Msidbcontrolattributesramdiskvolume = 1048576_i32
    Msidbcontrolattributesfloppyvolume = 2097152_i32
    Msidbcontrolshowrollbackcost = 4194304_i32
    Msidbcontrolattributessorted = 65536_i32
    Msidbcontrolattributescombolist = 131072_i32
    Msidbcontrolattributesimagehandle = 65536_i32
    Msidbcontrolattributespushlike = 131072_i32
    Msidbcontrolattributesbitmap = 262144_i32
    Msidbcontrolattributesicon = 524288_i32
    Msidbcontrolattributesfixedsize = 1048576_i32
    Msidbcontrolattributesiconsize16 = 2097152_i32
    Msidbcontrolattributesiconsize32 = 4194304_i32
    Msidbcontrolattributesiconsize48 = 6291456_i32
    Msidbcontrolattributeselevationshield = 8388608_i32
    Msidbcontrolattributeshasborder = 16777216_i32
  end
  enum Msidblocatortype
    Msidblocatortypedirectory = 0_i32
    Msidblocatortypefilename = 1_i32
    Msidblocatortyperawvalue = 2_i32
    Msidblocatortype64bit = 16_i32
  end
  enum Msidbcomponentattributes
    Msidbcomponentattributeslocalonly = 0_i32
    Msidbcomponentattributessourceonly = 1_i32
    Msidbcomponentattributesoptional = 2_i32
    Msidbcomponentattributesregistrykeypath = 4_i32
    Msidbcomponentattributesshareddllrefcount = 8_i32
    Msidbcomponentattributespermanent = 16_i32
    Msidbcomponentattributesodbcdatasource = 32_i32
    Msidbcomponentattributestransitive = 64_i32
    Msidbcomponentattributesneveroverwrite = 128_i32
    Msidbcomponentattributes64bit = 256_i32
    Msidbcomponentattributesdisableregistryreflection = 512_i32
    Msidbcomponentattributesuninstallonsupersedence = 1024_i32
    Msidbcomponentattributesshared = 2048_i32
  end
  enum Msidbassemblyattributes
    Msidbassemblyattributesurt = 0_i32
    Msidbassemblyattributeswin32 = 1_i32
  end
  enum Msidbcustomactiontype
    Msidbcustomactiontypedll = 1_i32
    Msidbcustomactiontypeexe = 2_i32
    Msidbcustomactiontypetextdata = 3_i32
    Msidbcustomactiontypejscript = 5_i32
    Msidbcustomactiontypevbscript = 6_i32
    Msidbcustomactiontypeinstall = 7_i32
    Msidbcustomactiontypebinarydata = 0_i32
    Msidbcustomactiontypesourcefile = 16_i32
    Msidbcustomactiontypedirectory = 32_i32
    Msidbcustomactiontypeproperty = 48_i32
    Msidbcustomactiontypecontinue = 64_i32
    Msidbcustomactiontypeasync = 128_i32
    Msidbcustomactiontypefirstsequence = 256_i32
    Msidbcustomactiontypeonceperprocess = 512_i32
    Msidbcustomactiontypeclientrepeat = 768_i32
    Msidbcustomactiontypeinscript = 1024_i32
    Msidbcustomactiontyperollback = 256_i32
    Msidbcustomactiontypecommit = 512_i32
    Msidbcustomactiontypenoimpersonate = 2048_i32
    Msidbcustomactiontypetsaware = 16384_i32
    Msidbcustomactiontype64bitscript = 4096_i32
    Msidbcustomactiontypehidetarget = 8192_i32
    Msidbcustomactiontypepatchuninstall = 32768_i32
  end
  enum Msidbdialogattributes
    Msidbdialogattributesvisible = 1_i32
    Msidbdialogattributesmodal = 2_i32
    Msidbdialogattributesminimize = 4_i32
    Msidbdialogattributessysmodal = 8_i32
    Msidbdialogattributeskeepmodeless = 16_i32
    Msidbdialogattributestrackdiskspace = 32_i32
    Msidbdialogattributesusecustompalette = 64_i32
    Msidbdialogattributesrtlro = 128_i32
    Msidbdialogattributesrightaligned = 256_i32
    Msidbdialogattributesleftscroll = 512_i32
    Msidbdialogattributesbidi = 896_i32
    Msidbdialogattributeserror = 65536_i32
  end
  enum Msidbfeatureattributes
    Msidbfeatureattributesfavorlocal = 0_i32
    Msidbfeatureattributesfavorsource = 1_i32
    Msidbfeatureattributesfollowparent = 2_i32
    Msidbfeatureattributesfavoradvertise = 4_i32
    Msidbfeatureattributesdisallowadvertise = 8_i32
    Msidbfeatureattributesuidisallowabsent = 16_i32
    Msidbfeatureattributesnounsupportedadvertise = 32_i32
  end
  enum Msidbfileattributes
    Msidbfileattributesreadonly = 1_i32
    Msidbfileattributeshidden = 2_i32
    Msidbfileattributessystem = 4_i32
    Msidbfileattributesreserved0 = 8_i32
    Msidbfileattributesisolatedcomp = 16_i32
    Msidbfileattributesreserved1 = 64_i32
    Msidbfileattributesreserved2 = 128_i32
    Msidbfileattributesreserved3 = 256_i32
    Msidbfileattributesvital = 512_i32
    Msidbfileattributeschecksum = 1024_i32
    Msidbfileattributespatchadded = 4096_i32
    Msidbfileattributesnoncompressed = 8192_i32
    Msidbfileattributescompressed = 16384_i32
    Msidbfileattributesreserved4 = 32768_i32
  end
  enum Msidbinifileaction
    Msidbinifileactionaddline = 0_i32
    Msidbinifileactioncreateline = 1_i32
    Msidbinifileactionremoveline = 2_i32
    Msidbinifileactionaddtag = 3_i32
    Msidbinifileactionremovetag = 4_i32
  end
  enum Msidbmovefileoptions
    Msidbmovefileoptionsmove = 1_i32
  end
  enum Msidbodbcdatasourceregistration
    Msidbodbcdatasourceregistrationpermachine = 0_i32
    Msidbodbcdatasourceregistrationperuser = 1_i32
  end
  enum Msidbclassattributes
    Msidbclassattributesrelativepath = 1_i32
  end
  enum Msidbpatchattributes
    Msidbpatchattributesnonvital = 1_i32
  end
  enum Msidbregistryroot
    Msidbregistryrootclassesroot = 0_i32
    Msidbregistryrootcurrentuser = 1_i32
    Msidbregistryrootlocalmachine = 2_i32
    Msidbregistryrootusers = 3_i32
  end
  enum Msidbremovefileinstallmode
    Msidbremovefileinstallmodeoninstall = 1_i32
    Msidbremovefileinstallmodeonremove = 2_i32
    Msidbremovefileinstallmodeonboth = 3_i32
  end
  enum Msidbservicecontrolevent
    Msidbservicecontroleventstart = 1_i32
    Msidbservicecontroleventstop = 2_i32
    Msidbservicecontroleventdelete = 8_i32
    Msidbservicecontroleventuninstallstart = 16_i32
    Msidbservicecontroleventuninstallstop = 32_i32
    Msidbservicecontroleventuninstalldelete = 128_i32
  end
  enum Msidbserviceconfigevent
    Msidbserviceconfigeventinstall = 1_i32
    Msidbserviceconfigeventuninstall = 2_i32
    Msidbserviceconfigeventreinstall = 4_i32
  end
  enum Msidbserviceinstallerrorcontrol
    Msidbserviceinstallerrorcontrolvital = 32768_i32
  end
  enum Msidbtextstylestylebits
    Msidbtextstylestylebitsbold = 1_i32
    Msidbtextstylestylebitsitalic = 2_i32
    Msidbtextstylestylebitsunderline = 4_i32
    Msidbtextstylestylebitsstrike = 8_i32
  end
  enum Msidbupgradeattributes
    Msidbupgradeattributesmigratefeatures = 1_i32
    Msidbupgradeattributesonlydetect = 2_i32
    Msidbupgradeattributesignoreremovefailure = 4_i32
    Msidbupgradeattributesversionmininclusive = 256_i32
    Msidbupgradeattributesversionmaxinclusive = 512_i32
    Msidbupgradeattributeslanguagesexclusive = 1024_i32
  end
  enum Msidbembeddeduiattributes
    Msidbembeddedui = 1_i32
    Msidbembeddedhandlesbasic = 2_i32
  end
  enum Msidbsuminfosourcetype
    Msidbsuminfosourcetypesfn = 1_i32
    Msidbsuminfosourcetypecompressed = 2_i32
    Msidbsuminfosourcetypeadminimage = 4_i32
    Msidbsuminfosourcetypeluapackage = 8_i32
  end
  enum Msirbreboottype
    Msirbrebootimmediate = 1_i32
    Msirbrebootdeferred = 2_i32
  end
  enum Msirbrebootreason
    Msirbrebootundeterminedreason = 0_i32
    Msirbrebootinusefilesreason = 1_i32
    Msirbrebootschedulerebootreason = 2_i32
    Msirbrebootforcerebootreason = 3_i32
    Msirbrebootcustomactionreason = 4_i32
  end
  enum Msififastinstallbits
    Msififastinstallnosr = 1_i32
    Msififastinstallquickcosting = 2_i32
    Msififastinstalllessprgmsg = 4_i32
  end
  enum TILE_TEMPLATE_TYPE
    TILE_TEMPLATE_INVALID = 0_i32
    TILE_TEMPLATE_FLIP = 5_i32
    TILE_TEMPLATE_DEEPLINK = 13_i32
    TILE_TEMPLATE_CYCLE = 14_i32
    TILE_TEMPLATE_METROCOUNT = 1_i32
    TILE_TEMPLATE_AGILESTORE = 2_i32
    TILE_TEMPLATE_GAMES = 3_i32
    TILE_TEMPLATE_CALENDAR = 4_i32
    TILE_TEMPLATE_MUSICVIDEO = 7_i32
    TILE_TEMPLATE_PEOPLE = 10_i32
    TILE_TEMPLATE_CONTACT = 11_i32
    TILE_TEMPLATE_GROUP = 12_i32
    TILE_TEMPLATE_DEFAULT = 15_i32
    TILE_TEMPLATE_BADGE = 16_i32
    TILE_TEMPLATE_BLOCK = 17_i32
    TILE_TEMPLATE_TEXT01 = 18_i32
    TILE_TEMPLATE_TEXT02 = 19_i32
    TILE_TEMPLATE_TEXT03 = 20_i32
    TILE_TEMPLATE_TEXT04 = 21_i32
    TILE_TEMPLATE_TEXT05 = 22_i32
    TILE_TEMPLATE_TEXT06 = 23_i32
    TILE_TEMPLATE_TEXT07 = 24_i32
    TILE_TEMPLATE_TEXT08 = 25_i32
    TILE_TEMPLATE_TEXT09 = 26_i32
    TILE_TEMPLATE_TEXT10 = 27_i32
    TILE_TEMPLATE_TEXT11 = 28_i32
    TILE_TEMPLATE_IMAGE = 29_i32
    TILE_TEMPLATE_IMAGECOLLECTION = 30_i32
    TILE_TEMPLATE_IMAGEANDTEXT01 = 31_i32
    TILE_TEMPLATE_IMAGEANDTEXT02 = 32_i32
    TILE_TEMPLATE_BLOCKANDTEXT01 = 33_i32
    TILE_TEMPLATE_BLOCKANDTEXT02 = 34_i32
    TILE_TEMPLATE_PEEKIMAGEANDTEXT01 = 35_i32
    TILE_TEMPLATE_PEEKIMAGEANDTEXT02 = 36_i32
    TILE_TEMPLATE_PEEKIMAGEANDTEXT03 = 37_i32
    TILE_TEMPLATE_PEEKIMAGEANDTEXT04 = 38_i32
    TILE_TEMPLATE_PEEKIMAGE01 = 39_i32
    TILE_TEMPLATE_PEEKIMAGE02 = 40_i32
    TILE_TEMPLATE_PEEKIMAGE03 = 41_i32
    TILE_TEMPLATE_PEEKIMAGE04 = 42_i32
    TILE_TEMPLATE_PEEKIMAGE05 = 43_i32
    TILE_TEMPLATE_PEEKIMAGE06 = 44_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION01 = 45_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION02 = 46_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION03 = 47_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION04 = 48_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION05 = 49_i32
    TILE_TEMPLATE_PEEKIMAGECOLLECTION06 = 50_i32
    TILE_TEMPLATE_SMALLIMAGEANDTEXT01 = 51_i32
    TILE_TEMPLATE_SMALLIMAGEANDTEXT02 = 52_i32
    TILE_TEMPLATE_SMALLIMAGEANDTEXT03 = 53_i32
    TILE_TEMPLATE_SMALLIMAGEANDTEXT04 = 54_i32
    TILE_TEMPLATE_SMALLIMAGEANDTEXT05 = 55_i32
    TILE_TEMPLATE_METROCOUNTQUEUE = 56_i32
    TILE_TEMPLATE_SEARCH = 57_i32
    TILE_TEMPLATE_TILEFLYOUT01 = 58_i32
    TILE_TEMPLATE_FOLDER = 59_i32
    TILE_TEMPLATE_ALL = 100_i32
  end
  enum PM_APP_GENRE
    PM_APP_GENRE_GAMES = 0_i32
    PM_APP_GENRE_OTHER = 1_i32
    PM_APP_GENRE_INVALID = 2_i32
  end
  enum PM_APPLICATION_INSTALL_TYPE
    PM_APPLICATION_INSTALL_NORMAL = 0_i32
    PM_APPLICATION_INSTALL_IN_ROM = 1_i32
    PM_APPLICATION_INSTALL_PA = 2_i32
    PM_APPLICATION_INSTALL_DEBUG = 3_i32
    PM_APPLICATION_INSTALL_ENTERPRISE = 4_i32
    PM_APPLICATION_INSTALL_INVALID = 5_i32
  end
  enum PM_APPLICATION_STATE
    PM_APPLICATION_STATE_MIN = 0_i32
    PM_APPLICATION_STATE_INSTALLED = 1_i32
    PM_APPLICATION_STATE_INSTALLING = 2_i32
    PM_APPLICATION_STATE_UPDATING = 3_i32
    PM_APPLICATION_STATE_UNINSTALLING = 4_i32
    PM_APPLICATION_STATE_LICENSE_UPDATING = 5_i32
    PM_APPLICATION_STATE_MOVING = 6_i32
    PM_APPLICATION_STATE_DISABLED_SD_CARD = 7_i32
    PM_APPLICATION_STATE_DISABLED_ENTERPRISE = 8_i32
    PM_APPLICATION_STATE_DISABLED_BACKING_UP = 9_i32
    PM_APPLICATION_STATE_DISABLED_MDIL_BINDING = 10_i32
    PM_APPLICATION_STATE_MAX = 10_i32
    PM_APPLICATION_STATE_INVALID = 11_i32
  end
  enum PM_APPLICATION_HUBTYPE
    PM_APPLICATION_HUBTYPE_NONMUSIC = 0_i32
    PM_APPLICATION_HUBTYPE_MUSIC = 1_i32
    PM_APPLICATION_HUBTYPE_INVALID = 2_i32
  end
  enum PM_TILE_HUBTYPE
    PM_TILE_HUBTYPE_MUSIC = 1_i32
    PM_TILE_HUBTYPE_MOSETTINGS = 268435456_i32
    PM_TILE_HUBTYPE_GAMES = 536870912_i32
    PM_TILE_HUBTYPE_APPLIST = 1073741824_i32
    PM_TILE_HUBTYPE_STARTMENU = -2147483648_i32
    PM_TILE_HUBTYPE_LOCKSCREEN = 16777216_i32
    PM_TILE_HUBTYPE_KIDZONE = 33554432_i32
    PM_TILE_HUBTYPE_CACHED = 67108864_i32
    PM_TILE_HUBTYPE_INVALID = 67108865_i32
  end
  enum PM_STARTTILE_TYPE
    PM_STARTTILE_TYPE_PRIMARY = 1_i32
    PM_STARTTILE_TYPE_SECONDARY = 2_i32
    PM_STARTTILE_TYPE_APPLIST = 3_i32
    PM_STARTTILE_TYPE_APPLISTPRIMARY = 4_i32
    PM_STARTTILE_TYPE_INVALID = 5_i32
  end
  enum PM_TASK_TYPE
    PM_TASK_TYPE_NORMAL = 0_i32
    PM_TASK_TYPE_DEFAULT = 1_i32
    PM_TASK_TYPE_SETTINGS = 2_i32
    PM_TASK_TYPE_BACKGROUNDSERVICEAGENT = 3_i32
    PM_TASK_TYPE_BACKGROUNDWORKER = 4_i32
    PM_TASK_TYPE_INVALID = 5_i32
  end
  enum PACKMAN_RUNTIME
    PACKMAN_RUNTIME_NATIVE = 1_i32
    PACKMAN_RUNTIME_SILVERLIGHTMOBILE = 2_i32
    PACKMAN_RUNTIME_XNA = 3_i32
    PACKMAN_RUNTIME_MODERN_NATIVE = 4_i32
    PACKMAN_RUNTIME_JUPITER = 5_i32
    PACKMAN_RUNTIME_INVALID = 6_i32
  end
  enum PM_ACTIVATION_POLICY
    PM_ACTIVATION_POLICY_RESUME = 0_i32
    PM_ACTIVATION_POLICY_RESUMESAMEPARAMS = 1_i32
    PM_ACTIVATION_POLICY_REPLACE = 2_i32
    PM_ACTIVATION_POLICY_REPLACESAMEPARAMS = 3_i32
    PM_ACTIVATION_POLICY_MULTISESSION = 4_i32
    PM_ACTIVATION_POLICY_REPLACE_IGNOREFOREGROUND = 5_i32
    PM_ACTIVATION_POLICY_UNKNOWN = 6_i32
    PM_ACTIVATION_POLICY_INVALID = 7_i32
  end
  enum PM_TASK_TRANSITION
    PM_TASK_TRANSITION_DEFAULT = 0_i32
    PM_TASK_TRANSITION_NONE = 1_i32
    PM_TASK_TRANSITION_TURNSTILE = 2_i32
    PM_TASK_TRANSITION_SLIDE = 3_i32
    PM_TASK_TRANSITION_SWIVEL = 4_i32
    PM_TASK_TRANSITION_READERBOARD = 5_i32
    PM_TASK_TRANSITION_CUSTOM = 6_i32
    PM_TASK_TRANSITION_INVALID = 7_i32
  end
  enum PM_ENUM_APP_FILTER
    PM_APP_FILTER_ALL = 0_i32
    PM_APP_FILTER_VISIBLE = 1_i32
    PM_APP_FILTER_GENRE = 2_i32
    PM_APP_FILTER_NONGAMES = 3_i32
    PM_APP_FILTER_HUBTYPE = 4_i32
    PM_APP_FILTER_PINABLEONKIDZONE = 5_i32
    PM_APP_FILTER_ALL_INCLUDE_MODERN = 6_i32
    PM_APP_FILTER_FRAMEWORK = 7_i32
    PM_APP_FILTER_MAX = 8_i32
  end
  enum PM_ENUM_TILE_FILTER
    PM_TILE_FILTER_APPLIST = 8_i32
    PM_TILE_FILTER_PINNED = 9_i32
    PM_TILE_FILTER_HUBTYPE = 10_i32
    PM_TILE_FILTER_APP_ALL = 11_i32
    PM_TILE_FILTER_MAX = 12_i32
  end
  enum PM_ENUM_TASK_FILTER
    PM_TASK_FILTER_APP_ALL = 12_i32
    PM_TASK_FILTER_TASK_TYPE = 13_i32
    PM_TASK_FILTER_DEHYD_SUPRESSING = 14_i32
    PM_TASK_FILTER_APP_TASK_TYPE = 15_i32
    PM_TASK_FILTER_BGEXECUTION = 16_i32
    PM_TASK_FILTER_MAX = 17_i32
  end
  enum PM_ENUM_EXTENSION_FILTER
    PM_ENUM_EXTENSION_FILTER_BY_CONSUMER = 17_i32
    PM_ENUM_EXTENSION_FILTER_APPCONNECT = 17_i32
    PM_ENUM_EXTENSION_FILTER_PROTOCOL_ALL = 18_i32
    PM_ENUM_EXTENSION_FILTER_FTASSOC_FILETYPE_ALL = 19_i32
    PM_ENUM_EXTENSION_FILTER_FTASSOC_CONTENTTYPE_ALL = 20_i32
    PM_ENUM_EXTENSION_FILTER_FTASSOC_APPLICATION_ALL = 21_i32
    PM_ENUM_EXTENSION_FILTER_SHARETARGET_ALL = 22_i32
    PM_ENUM_EXTENSION_FILTER_FILEOPENPICKER_ALL = 23_i32
    PM_ENUM_EXTENSION_FILTER_FILESAVEPICKER_ALL = 24_i32
    PM_ENUM_EXTENSION_FILTER_CACHEDFILEUPDATER_ALL = 25_i32
    PM_ENUM_EXTENSION_FILTER_MAX = 26_i32
  end
  enum PM_ENUM_BSA_FILTER
    PM_ENUM_BSA_FILTER_ALL = 26_i32
    PM_ENUM_BSA_FILTER_BY_TASKID = 27_i32
    PM_ENUM_BSA_FILTER_BY_PRODUCTID = 28_i32
    PM_ENUM_BSA_FILTER_BY_PERIODIC = 29_i32
    PM_ENUM_BSA_FILTER_BY_ALL_LAUNCHONBOOT = 30_i32
    PM_ENUM_BSA_FILTER_MAX = 31_i32
  end
  enum PM_ENUM_BW_FILTER
    PM_ENUM_BW_FILTER_BOOTWORKER_ALL = 31_i32
    PM_ENUM_BW_FILTER_BY_TASKID = 32_i32
    PM_ENUM_BW_FILTER_MAX = 33_i32
  end
  enum PM_LIVETILE_RECURRENCE_TYPE
    PM_LIVETILE_RECURRENCE_TYPE_INSTANT = 0_i32
    PM_LIVETILE_RECURRENCE_TYPE_ONETIME = 1_i32
    PM_LIVETILE_RECURRENCE_TYPE_INTERVAL = 2_i32
    PM_LIVETILE_RECURRENCE_TYPE_MAX = 2_i32
  end
  enum PM_TILE_SIZE
    PM_TILE_SIZE_SMALL = 0_i32
    PM_TILE_SIZE_MEDIUM = 1_i32
    PM_TILE_SIZE_LARGE = 2_i32
    PM_TILE_SIZE_SQUARE310X310 = 3_i32
    PM_TILE_SIZE_TALL150X310 = 4_i32
    PM_TILE_SIZE_INVALID = 5_i32
  end
  enum PM_LOGO_SIZE
    PM_LOGO_SIZE_SMALL = 0_i32
    PM_LOGO_SIZE_MEDIUM = 1_i32
    PM_LOGO_SIZE_LARGE = 2_i32
    PM_LOGO_SIZE_INVALID = 3_i32
  end
  enum ACTCTX_REQUESTED_RUN_LEVEL
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0_i32
    ACTCTX_RUN_LEVEL_AS_INVOKER = 1_i32
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2_i32
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3_i32
    ACTCTX_RUN_LEVEL_NUMBERS = 4_i32
  end
  enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0_i32
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1_i32
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2_i32
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3_i32
  end

  @[Extern]
  struct PMSIHANDLE
    property m_h : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE
    def initialize(@m_h : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE)
    end
  end

  @[Extern]
  struct MSIPATCHSEQUENCEINFOA
    property szPatchData : Win32cr::Foundation::PSTR
    property ePatchDataType : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHDATATYPE
    property dwOrder : UInt32
    property uStatus : UInt32
    def initialize(@szPatchData : Win32cr::Foundation::PSTR, @ePatchDataType : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHDATATYPE, @dwOrder : UInt32, @uStatus : UInt32)
    end
  end

  @[Extern]
  struct MSIPATCHSEQUENCEINFOW
    property szPatchData : Win32cr::Foundation::PWSTR
    property ePatchDataType : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHDATATYPE
    property dwOrder : UInt32
    property uStatus : UInt32
    def initialize(@szPatchData : Win32cr::Foundation::PWSTR, @ePatchDataType : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHDATATYPE, @dwOrder : UInt32, @uStatus : UInt32)
    end
  end

  @[Extern]
  struct MSIFILEHASHINFO
    property dwFileHashInfoSize : UInt32
    property dwData : UInt32[4]
    def initialize(@dwFileHashInfoSize : UInt32, @dwData : UInt32[4])
    end
  end

  @[Extern]
  struct ASSEMBLY_INFO
    property cbAssemblyInfo : UInt32
    property dwAssemblyFlags : UInt32
    property uliAssemblySizeInKB : Win32cr::Foundation::ULARGE_INTEGER
    property pszCurrentAssemblyPathBuf : Win32cr::Foundation::PWSTR
    property cchBuf : UInt32
    def initialize(@cbAssemblyInfo : UInt32, @dwAssemblyFlags : UInt32, @uliAssemblySizeInKB : Win32cr::Foundation::ULARGE_INTEGER, @pszCurrentAssemblyPathBuf : Win32cr::Foundation::PWSTR, @cchBuf : UInt32)
    end
  end

  @[Extern]
  struct FUSION_INSTALL_REFERENCE
    property cbSize : UInt32
    property dwFlags : UInt32
    property guidScheme : LibC::GUID
    property szIdentifier : Win32cr::Foundation::PWSTR
    property szNonCannonicalData : Win32cr::Foundation::PWSTR
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @guidScheme : LibC::GUID, @szIdentifier : Win32cr::Foundation::PWSTR, @szNonCannonicalData : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct PROTECTED_FILE_DATA
    property file_name : UInt16[260]
    property file_number : UInt32
    def initialize(@file_name : UInt16[260], @file_number : UInt32)
    end
  end

  @[Extern]
  struct Tagapptasktype_
    property product_id : LibC::GUID
    property task_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE
    def initialize(@product_id : LibC::GUID, @task_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE)
    end
  end

  @[Extern]
  struct PM_EXTENSIONCONSUMER
    property consumer_pid : LibC::GUID
    property extension_id : Win32cr::Foundation::BSTR
    def initialize(@consumer_pid : LibC::GUID, @extension_id : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_BSATASKID
    property product_id : LibC::GUID
    property task_id : Win32cr::Foundation::BSTR
    def initialize(@product_id : LibC::GUID, @task_id : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_BWTASKID
    property product_id : LibC::GUID
    property task_id : Win32cr::Foundation::BSTR
    def initialize(@product_id : LibC::GUID, @task_id : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_ENUM_FILTER
    property filter_type : Int32
    property filter_parameter : FilterParameter_e__Union_

    # Nested Type FilterParameter_e__Union_
    @[Extern(union: true)]
    struct FilterParameter_e__Union_
    property dummy : Int32
    property genre : Win32cr::System::ApplicationInstallationAndServicing::PM_APP_GENRE
    property app_hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_HUBTYPE
    property hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE
    property tasktype : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE
    property task_product_id : LibC::GUID
    property tile_product_id : LibC::GUID
    property app_task_type : Win32cr::System::ApplicationInstallationAndServicing::Tagapptasktype_
    property consumer : Win32cr::System::ApplicationInstallationAndServicing::PM_EXTENSIONCONSUMER
    property bsa_task : Win32cr::System::ApplicationInstallationAndServicing::PM_BSATASKID
    property bsa_product_id : LibC::GUID
    property bw_task : Win32cr::System::ApplicationInstallationAndServicing::PM_BWTASKID
    property protocol_name : Win32cr::Foundation::BSTR
    property file_type : Win32cr::Foundation::BSTR
    property content_type : Win32cr::Foundation::BSTR
    property app_supported_file_ext_pid : LibC::GUID
    property share_target_file_type : Win32cr::Foundation::BSTR
    def initialize(@dummy : Int32, @genre : Win32cr::System::ApplicationInstallationAndServicing::PM_APP_GENRE, @app_hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_HUBTYPE, @hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, @tasktype : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE, @task_product_id : LibC::GUID, @tile_product_id : LibC::GUID, @app_task_type : Win32cr::System::ApplicationInstallationAndServicing::Tagapptasktype_, @consumer : Win32cr::System::ApplicationInstallationAndServicing::PM_EXTENSIONCONSUMER, @bsa_task : Win32cr::System::ApplicationInstallationAndServicing::PM_BSATASKID, @bsa_product_id : LibC::GUID, @bw_task : Win32cr::System::ApplicationInstallationAndServicing::PM_BWTASKID, @protocol_name : Win32cr::Foundation::BSTR, @file_type : Win32cr::Foundation::BSTR, @content_type : Win32cr::Foundation::BSTR, @app_supported_file_ext_pid : LibC::GUID, @share_target_file_type : Win32cr::Foundation::BSTR)
    end
    end

    def initialize(@filter_type : Int32, @filter_parameter : FilterParameter_e__Union_)
    end
  end

  @[Extern]
  struct PM_STARTAPPBLOB
    property cbSize : UInt32
    property product_id : LibC::GUID
    property app_title : Win32cr::Foundation::BSTR
    property icon_path : Win32cr::Foundation::BSTR
    property is_uninstallable : Win32cr::Foundation::BOOL
    property app_install_type : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE
    property instance_id : LibC::GUID
    property state : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE
    property is_modern : Win32cr::Foundation::BOOL
    property is_modern_light_up : Win32cr::Foundation::BOOL
    property light_up_support_mask : UInt16
    def initialize(@cbSize : UInt32, @product_id : LibC::GUID, @app_title : Win32cr::Foundation::BSTR, @icon_path : Win32cr::Foundation::BSTR, @is_uninstallable : Win32cr::Foundation::BOOL, @app_install_type : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE, @instance_id : LibC::GUID, @state : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE, @is_modern : Win32cr::Foundation::BOOL, @is_modern_light_up : Win32cr::Foundation::BOOL, @light_up_support_mask : UInt16)
    end
  end

  @[Extern]
  struct PM_INVOCATIONINFO
    property uri_base_or_aumid : Win32cr::Foundation::BSTR
    property uri_fragment_or_args : Win32cr::Foundation::BSTR
    def initialize(@uri_base_or_aumid : Win32cr::Foundation::BSTR, @uri_fragment_or_args : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_STARTTILEBLOB
    property cbSize : UInt32
    property product_id : LibC::GUID
    property tile_id : Win32cr::Foundation::BSTR
    property template_type : Win32cr::System::ApplicationInstallationAndServicing::TILE_TEMPLATE_TYPE
    property hub_position : UInt32[32]
    property hub_visibility_bitmask : UInt32
    property is_default : Win32cr::Foundation::BOOL
    property tile_type : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILE_TYPE
    property pbPropBlob : UInt8*
    property cbPropBlob : UInt32
    property is_restoring : Win32cr::Foundation::BOOL
    property is_modern : Win32cr::Foundation::BOOL
    property invocation_info : Win32cr::System::ApplicationInstallationAndServicing::PM_INVOCATIONINFO
    def initialize(@cbSize : UInt32, @product_id : LibC::GUID, @tile_id : Win32cr::Foundation::BSTR, @template_type : Win32cr::System::ApplicationInstallationAndServicing::TILE_TEMPLATE_TYPE, @hub_position : UInt32[32], @hub_visibility_bitmask : UInt32, @is_default : Win32cr::Foundation::BOOL, @tile_type : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILE_TYPE, @pbPropBlob : UInt8*, @cbPropBlob : UInt32, @is_restoring : Win32cr::Foundation::BOOL, @is_modern : Win32cr::Foundation::BOOL, @invocation_info : Win32cr::System::ApplicationInstallationAndServicing::PM_INVOCATIONINFO)
    end
  end

  @[Extern]
  struct PM_INSTALLINFO
    property product_id : LibC::GUID
    property package_path : Win32cr::Foundation::BSTR
    property instance_id : LibC::GUID
    property pbLicense : UInt8*
    property cbLicense : UInt32
    property is_uninstall_disabled : Win32cr::Foundation::BOOL
    property deployment_options : UInt32
    property offer_id : LibC::GUID
    property marketplace_app_version : Win32cr::Foundation::BSTR
    def initialize(@product_id : LibC::GUID, @package_path : Win32cr::Foundation::BSTR, @instance_id : LibC::GUID, @pbLicense : UInt8*, @cbLicense : UInt32, @is_uninstall_disabled : Win32cr::Foundation::BOOL, @deployment_options : UInt32, @offer_id : LibC::GUID, @marketplace_app_version : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_UPDATEINFO_LEGACY
    property product_id : LibC::GUID
    property package_path : Win32cr::Foundation::BSTR
    property instance_id : LibC::GUID
    property pbLicense : UInt8*
    property cbLicense : UInt32
    property marketplace_app_version : Win32cr::Foundation::BSTR
    def initialize(@product_id : LibC::GUID, @package_path : Win32cr::Foundation::BSTR, @instance_id : LibC::GUID, @pbLicense : UInt8*, @cbLicense : UInt32, @marketplace_app_version : Win32cr::Foundation::BSTR)
    end
  end

  @[Extern]
  struct PM_UPDATEINFO
    property product_id : LibC::GUID
    property package_path : Win32cr::Foundation::BSTR
    property instance_id : LibC::GUID
    property pbLicense : UInt8*
    property cbLicense : UInt32
    property marketplace_app_version : Win32cr::Foundation::BSTR
    property deployment_options : UInt32
    def initialize(@product_id : LibC::GUID, @package_path : Win32cr::Foundation::BSTR, @instance_id : LibC::GUID, @pbLicense : UInt8*, @cbLicense : UInt32, @marketplace_app_version : Win32cr::Foundation::BSTR, @deployment_options : UInt32)
    end
  end

  @[Extern]
  struct PATCH_IGNORE_RANGE
    property offset_in_old_file : UInt32
    property length_in_bytes : UInt32
    def initialize(@offset_in_old_file : UInt32, @length_in_bytes : UInt32)
    end
  end

  @[Extern]
  struct PATCH_RETAIN_RANGE
    property offset_in_old_file : UInt32
    property length_in_bytes : UInt32
    property offset_in_new_file : UInt32
    def initialize(@offset_in_old_file : UInt32, @length_in_bytes : UInt32, @offset_in_new_file : UInt32)
    end
  end

  @[Extern]
  struct PATCH_OLD_FILE_INFO_A
    property size_of_this_struct : UInt32
    property old_file_name : Win32cr::Foundation::PSTR
    property ignore_range_count : UInt32
    property ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*
    property retain_range_count : UInt32
    property retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*
    def initialize(@size_of_this_struct : UInt32, @old_file_name : Win32cr::Foundation::PSTR, @ignore_range_count : UInt32, @ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, @retain_range_count : UInt32, @retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*)
    end
  end

  @[Extern]
  struct PATCH_OLD_FILE_INFO_W
    property size_of_this_struct : UInt32
    property old_file_name : Win32cr::Foundation::PWSTR
    property ignore_range_count : UInt32
    property ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*
    property retain_range_count : UInt32
    property retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*
    def initialize(@size_of_this_struct : UInt32, @old_file_name : Win32cr::Foundation::PWSTR, @ignore_range_count : UInt32, @ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, @retain_range_count : UInt32, @retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*)
    end
  end

  @[Extern]
  struct PATCH_OLD_FILE_INFO_H
    property size_of_this_struct : UInt32
    property old_file_handle : Win32cr::Foundation::HANDLE
    property ignore_range_count : UInt32
    property ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*
    property retain_range_count : UInt32
    property retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*
    def initialize(@size_of_this_struct : UInt32, @old_file_handle : Win32cr::Foundation::HANDLE, @ignore_range_count : UInt32, @ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, @retain_range_count : UInt32, @retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*)
    end
  end

  @[Extern]
  struct PATCH_OLD_FILE_INFO
    property size_of_this_struct : UInt32
    property anonymous : Anonymous_e__Union_
    property ignore_range_count : UInt32
    property ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*
    property retain_range_count : UInt32
    property retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property old_file_name_a : Win32cr::Foundation::PSTR
    property old_file_name_w : Win32cr::Foundation::PWSTR
    property old_file_handle : Win32cr::Foundation::HANDLE
    def initialize(@old_file_name_a : Win32cr::Foundation::PSTR, @old_file_name_w : Win32cr::Foundation::PWSTR, @old_file_handle : Win32cr::Foundation::HANDLE)
    end
    end

    def initialize(@size_of_this_struct : UInt32, @anonymous : Anonymous_e__Union_, @ignore_range_count : UInt32, @ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, @retain_range_count : UInt32, @retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*)
    end
  end

  @[Extern]
  struct PATCH_INTERLEAVE_MAP
    property count_ranges : UInt32
    property range : Anonymous_e__Struct_*

    # Nested Type Anonymous_e__Struct_
    @[Extern]
    struct Anonymous_e__Struct_
    property old_offset : UInt32
    property old_length : UInt32
    property new_length : UInt32
    def initialize(@old_offset : UInt32, @old_length : UInt32, @new_length : UInt32)
    end
    end

    def initialize(@count_ranges : UInt32, @range : Anonymous_e__Struct_*)
    end
  end

  @[Extern]
  struct PATCH_OPTION_DATA
    property size_of_this_struct : UInt32
    property symbol_option_flags : UInt32
    property new_file_symbol_path : Win32cr::Foundation::PSTR
    property old_file_symbol_path_array : Win32cr::Foundation::PSTR*
    property extended_option_flags : UInt32
    property sym_load_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_SYMLOAD_CALLBACK
    property sym_load_context : Void*
    property interleave_map_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_INTERLEAVE_MAP**
    property max_lzx_window_size : UInt32
    def initialize(@size_of_this_struct : UInt32, @symbol_option_flags : UInt32, @new_file_symbol_path : Win32cr::Foundation::PSTR, @old_file_symbol_path_array : Win32cr::Foundation::PSTR*, @extended_option_flags : UInt32, @sym_load_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_SYMLOAD_CALLBACK, @sym_load_context : Void*, @interleave_map_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_INTERLEAVE_MAP**, @max_lzx_window_size : UInt32)
    end
  end

  @[Extern]
  struct DELTA_INPUT
    property anonymous : Anonymous_e__Union_
    property uSize : LibC::UIntPtrT
    property editable : Win32cr::Foundation::BOOL

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property lpcStart : Void*
    property lpStart : Void*
    def initialize(@lpcStart : Void*, @lpStart : Void*)
    end
    end

    def initialize(@anonymous : Anonymous_e__Union_, @uSize : LibC::UIntPtrT, @editable : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct DELTA_OUTPUT
    property lpStart : Void*
    property uSize : LibC::UIntPtrT
    def initialize(@lpStart : Void*, @uSize : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct DELTA_HASH
    property hash_size : UInt32
    property hash_value : UInt8[32]
    def initialize(@hash_size : UInt32, @hash_value : UInt8[32])
    end
  end

  @[Extern]
  struct DELTA_HEADER_INFO
    property file_type_set : Int64
    property file_type : Int64
    property flags : Int64
    property target_size : LibC::UIntPtrT
    property target_file_time : Win32cr::Foundation::FILETIME
    property target_hash_alg_id : UInt32
    property target_hash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH
    def initialize(@file_type_set : Int64, @file_type : Int64, @flags : Int64, @target_size : LibC::UIntPtrT, @target_file_time : Win32cr::Foundation::FILETIME, @target_hash_alg_id : UInt32, @target_hash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH)
    end
  end

  @[Extern]
  struct ACTIVATION_CONTEXT_QUERY_INDEX
    property ulAssemblyIndex : UInt32
    property ulFileIndexInAssembly : UInt32
    def initialize(@ulAssemblyIndex : UInt32, @ulFileIndexInAssembly : UInt32)
    end
  end

  @[Extern]
  struct ASSEMBLY_FILE_DETAILED_INFORMATION
    property ulFlags : UInt32
    property ulFilenameLength : UInt32
    property ulPathLength : UInt32
    property lpFileName : Win32cr::Foundation::PWSTR
    property lpFilePath : Win32cr::Foundation::PWSTR
    def initialize(@ulFlags : UInt32, @ulFilenameLength : UInt32, @ulPathLength : UInt32, @lpFileName : Win32cr::Foundation::PWSTR, @lpFilePath : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
    property ulFlags : UInt32
    property ulEncodedAssemblyIdentityLength : UInt32
    property ulManifestPathType : UInt32
    property ulManifestPathLength : UInt32
    property liManifestLastWriteTime : Win32cr::Foundation::LARGE_INTEGER
    property ulPolicyPathType : UInt32
    property ulPolicyPathLength : UInt32
    property liPolicyLastWriteTime : Win32cr::Foundation::LARGE_INTEGER
    property ulMetadataSatelliteRosterIndex : UInt32
    property ulManifestVersionMajor : UInt32
    property ulManifestVersionMinor : UInt32
    property ulPolicyVersionMajor : UInt32
    property ulPolicyVersionMinor : UInt32
    property ulAssemblyDirectoryNameLength : UInt32
    property lpAssemblyEncodedAssemblyIdentity : Win32cr::Foundation::PWSTR
    property lpAssemblyManifestPath : Win32cr::Foundation::PWSTR
    property lpAssemblyPolicyPath : Win32cr::Foundation::PWSTR
    property lpAssemblyDirectoryName : Win32cr::Foundation::PWSTR
    property ulFileCount : UInt32
    def initialize(@ulFlags : UInt32, @ulEncodedAssemblyIdentityLength : UInt32, @ulManifestPathType : UInt32, @ulManifestPathLength : UInt32, @liManifestLastWriteTime : Win32cr::Foundation::LARGE_INTEGER, @ulPolicyPathType : UInt32, @ulPolicyPathLength : UInt32, @liPolicyLastWriteTime : Win32cr::Foundation::LARGE_INTEGER, @ulMetadataSatelliteRosterIndex : UInt32, @ulManifestVersionMajor : UInt32, @ulManifestVersionMinor : UInt32, @ulPolicyVersionMajor : UInt32, @ulPolicyVersionMinor : UInt32, @ulAssemblyDirectoryNameLength : UInt32, @lpAssemblyEncodedAssemblyIdentity : Win32cr::Foundation::PWSTR, @lpAssemblyManifestPath : Win32cr::Foundation::PWSTR, @lpAssemblyPolicyPath : Win32cr::Foundation::PWSTR, @lpAssemblyDirectoryName : Win32cr::Foundation::PWSTR, @ulFileCount : UInt32)
    end
  end

  @[Extern]
  struct ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
    property ulFlags : UInt32
    property run_level : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_REQUESTED_RUN_LEVEL
    property ui_access : UInt32
    def initialize(@ulFlags : UInt32, @run_level : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_REQUESTED_RUN_LEVEL, @ui_access : UInt32)
    end
  end

  @[Extern]
  struct COMPATIBILITY_CONTEXT_ELEMENT
    property id : LibC::GUID
    property type__ : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_COMPATIBILITY_ELEMENT_TYPE
    property max_version_tested : UInt64
    def initialize(@id : LibC::GUID, @type__ : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_COMPATIBILITY_ELEMENT_TYPE, @max_version_tested : UInt64)
    end
  end

  @[Extern]
  struct ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
    property element_count : UInt32
    property elements : Win32cr::System::ApplicationInstallationAndServicing::COMPATIBILITY_CONTEXT_ELEMENT*
    def initialize(@element_count : UInt32, @elements : Win32cr::System::ApplicationInstallationAndServicing::COMPATIBILITY_CONTEXT_ELEMENT*)
    end
  end

  @[Extern]
  struct ACTIVATION_CONTEXT_DETAILED_INFORMATION
    property dwFlags : UInt32
    property ulFormatVersion : UInt32
    property ulAssemblyCount : UInt32
    property ulRootManifestPathType : UInt32
    property ulRootManifestPathChars : UInt32
    property ulRootConfigurationPathType : UInt32
    property ulRootConfigurationPathChars : UInt32
    property ulAppDirPathType : UInt32
    property ulAppDirPathChars : UInt32
    property lpRootManifestPath : Win32cr::Foundation::PWSTR
    property lpRootConfigurationPath : Win32cr::Foundation::PWSTR
    property lpAppDirPath : Win32cr::Foundation::PWSTR
    def initialize(@dwFlags : UInt32, @ulFormatVersion : UInt32, @ulAssemblyCount : UInt32, @ulRootManifestPathType : UInt32, @ulRootManifestPathChars : UInt32, @ulRootConfigurationPathType : UInt32, @ulRootConfigurationPathChars : UInt32, @ulAppDirPathType : UInt32, @ulAppDirPathChars : UInt32, @lpRootManifestPath : Win32cr::Foundation::PWSTR, @lpRootConfigurationPath : Win32cr::Foundation::PWSTR, @lpAppDirPath : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct ACTCTXA
    property cbSize : UInt32
    property dwFlags : UInt32
    property lpSource : Win32cr::Foundation::PSTR
    property wProcessorArchitecture : UInt16
    property wLangId : UInt16
    property lpAssemblyDirectory : Win32cr::Foundation::PSTR
    property lpResourceName : Win32cr::Foundation::PSTR
    property lpApplicationName : Win32cr::Foundation::PSTR
    property hModule : Win32cr::Foundation::HINSTANCE
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @lpSource : Win32cr::Foundation::PSTR, @wProcessorArchitecture : UInt16, @wLangId : UInt16, @lpAssemblyDirectory : Win32cr::Foundation::PSTR, @lpResourceName : Win32cr::Foundation::PSTR, @lpApplicationName : Win32cr::Foundation::PSTR, @hModule : Win32cr::Foundation::HINSTANCE)
    end
  end

  @[Extern]
  struct ACTCTXW
    property cbSize : UInt32
    property dwFlags : UInt32
    property lpSource : Win32cr::Foundation::PWSTR
    property wProcessorArchitecture : UInt16
    property wLangId : UInt16
    property lpAssemblyDirectory : Win32cr::Foundation::PWSTR
    property lpResourceName : Win32cr::Foundation::PWSTR
    property lpApplicationName : Win32cr::Foundation::PWSTR
    property hModule : Win32cr::Foundation::HINSTANCE
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @lpSource : Win32cr::Foundation::PWSTR, @wProcessorArchitecture : UInt16, @wLangId : UInt16, @lpAssemblyDirectory : Win32cr::Foundation::PWSTR, @lpResourceName : Win32cr::Foundation::PWSTR, @lpApplicationName : Win32cr::Foundation::PWSTR, @hModule : Win32cr::Foundation::HINSTANCE)
    end
  end

  @[Extern]
  struct ACTCTX_SECTION_KEYED_DATA
    property cbSize : UInt32
    property ulDataFormatVersion : UInt32
    property lpData : Void*
    property ulLength : UInt32
    property lpSectionGlobalData : Void*
    property ulSectionGlobalDataLength : UInt32
    property lpSectionBase : Void*
    property ulSectionTotalLength : UInt32
    property hActCtx : Win32cr::Foundation::HANDLE
    property ulAssemblyRosterIndex : UInt32
    property ulFlags : UInt32
    property assembly_metadata : Win32cr::System::WindowsProgramming::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
    def initialize(@cbSize : UInt32, @ulDataFormatVersion : UInt32, @lpData : Void*, @ulLength : UInt32, @lpSectionGlobalData : Void*, @ulSectionGlobalDataLength : UInt32, @lpSectionBase : Void*, @ulSectionTotalLength : UInt32, @hActCtx : Win32cr::Foundation::HANDLE, @ulAssemblyRosterIndex : UInt32, @ulFlags : UInt32, @assembly_metadata : Win32cr::System::WindowsProgramming::ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA)
    end
  end

  @[Extern]
  record IValidateVtbl,
    query_interface : Proc(IValidate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IValidate*, UInt32),
    release : Proc(IValidate*, UInt32),
    open_database : Proc(IValidate*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    open_cub : Proc(IValidate*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    close_database : Proc(IValidate*, Win32cr::Foundation::HRESULT),
    close_cub : Proc(IValidate*, Win32cr::Foundation::HRESULT),
    set_display : Proc(IValidate*, Win32cr::System::ApplicationInstallationAndServicing::LPDISPLAYVAL, Void*, Win32cr::Foundation::HRESULT),
    set_status : Proc(IValidate*, Win32cr::System::ApplicationInstallationAndServicing::LPEVALCOMCALLBACK, Void*, Win32cr::Foundation::HRESULT),
    validate : Proc(IValidate*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IValidate, lpVtbl : IValidateVtbl* do
    GUID = LibC::GUID.new(0xe482e5c6_u32, 0xe31e_u16, 0x4143_u16, StaticArray[0xa2_u8, 0xe6_u8, 0xdb_u8, 0xc3_u8, 0xd8_u8, 0xe4_u8, 0xb8_u8, 0xd3_u8])
    def query_interface(this : IValidate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IValidate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IValidate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_database(this : IValidate*, szDatabase : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_database.call(this, szDatabase)
    end
    def open_cub(this : IValidate*, szCUBFile : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_cub.call(this, szCUBFile)
    end
    def close_database(this : IValidate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_database.call(this)
    end
    def close_cub(this : IValidate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_cub.call(this)
    end
    def set_display(this : IValidate*, pDisplayFunction : Win32cr::System::ApplicationInstallationAndServicing::LPDISPLAYVAL, pContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display.call(this, pDisplayFunction, pContext)
    end
    def set_status(this : IValidate*, pStatusFunction : Win32cr::System::ApplicationInstallationAndServicing::LPEVALCOMCALLBACK, pContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, pStatusFunction, pContext)
    end
    def validate(this : IValidate*, wzICEs : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, wzICEs)
    end

  end

  @[Extern]
  record IEnumMsmStringVtbl,
    query_interface : Proc(IEnumMsmString*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMsmString*, UInt32),
    release : Proc(IEnumMsmString*, UInt32),
    next__ : Proc(IEnumMsmString*, UInt32, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMsmString*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMsmString*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMsmString*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumMsmString, lpVtbl : IEnumMsmStringVtbl* do
    GUID = LibC::GUID.new(0xadda826_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IEnumMsmString*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMsmString*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMsmString*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMsmString*, cFetch : UInt32, rgbstrStrings : Win32cr::Foundation::BSTR*, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFetch, rgbstrStrings, pcFetched)
    end
    def skip(this : IEnumMsmString*, cSkip : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cSkip)
    end
    def reset(this : IEnumMsmString*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumMsmString*, pemsmStrings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pemsmStrings)
    end

  end

  @[Extern]
  record IMsmStringsVtbl,
    query_interface : Proc(IMsmStrings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmStrings*, UInt32),
    release : Proc(IMsmStrings*, UInt32),
    get_type_info_count : Proc(IMsmStrings*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmStrings*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmStrings*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmStrings*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMsmStrings*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMsmStrings*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMsmStrings*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmStrings, lpVtbl : IMsmStringsVtbl* do
    GUID = LibC::GUID.new(0xadda827_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmStrings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmStrings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmStrings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmStrings*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmStrings*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmStrings*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmStrings*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Item(this : IMsmStrings*, item : Int32, return__ : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, item, return__)
    end
    def get_Count(this : IMsmStrings*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IMsmStrings*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end

  end

  @[Extern]
  record IMsmErrorVtbl,
    query_interface : Proc(IMsmError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmError*, UInt32),
    release : Proc(IMsmError*, UInt32),
    get_type_info_count : Proc(IMsmError*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmError*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmError*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmError*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMsmError*, Win32cr::System::ApplicationInstallationAndServicing::Msmerrortype*, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IMsmError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Language : Proc(IMsmError*, Int16*, Win32cr::Foundation::HRESULT),
    get_DatabaseTable : Proc(IMsmError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DatabaseKeys : Proc(IMsmError*, Void**, Win32cr::Foundation::HRESULT),
    get_ModuleTable : Proc(IMsmError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ModuleKeys : Proc(IMsmError*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmError, lpVtbl : IMsmErrorVtbl* do
    GUID = LibC::GUID.new(0xadda828_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmError*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmError*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmError*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmError*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IMsmError*, error_type : Win32cr::System::ApplicationInstallationAndServicing::Msmerrortype*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, error_type)
    end
    def get_Path(this : IMsmError*, error_path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, error_path)
    end
    def get_Language(this : IMsmError*, error_language : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Language.call(this, error_language)
    end
    def get_DatabaseTable(this : IMsmError*, error_table : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DatabaseTable.call(this, error_table)
    end
    def get_DatabaseKeys(this : IMsmError*, error_keys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DatabaseKeys.call(this, error_keys)
    end
    def get_ModuleTable(this : IMsmError*, error_table : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModuleTable.call(this, error_table)
    end
    def get_ModuleKeys(this : IMsmError*, error_keys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModuleKeys.call(this, error_keys)
    end

  end

  @[Extern]
  record IEnumMsmErrorVtbl,
    query_interface : Proc(IEnumMsmError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMsmError*, UInt32),
    release : Proc(IEnumMsmError*, UInt32),
    next__ : Proc(IEnumMsmError*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMsmError*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMsmError*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMsmError*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumMsmError, lpVtbl : IEnumMsmErrorVtbl* do
    GUID = LibC::GUID.new(0xadda829_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IEnumMsmError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMsmError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMsmError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMsmError*, cFetch : UInt32, rgmsmErrors : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFetch, rgmsmErrors, pcFetched)
    end
    def skip(this : IEnumMsmError*, cSkip : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cSkip)
    end
    def reset(this : IEnumMsmError*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumMsmError*, pemsmErrors : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pemsmErrors)
    end

  end

  @[Extern]
  record IMsmErrorsVtbl,
    query_interface : Proc(IMsmErrors*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmErrors*, UInt32),
    release : Proc(IMsmErrors*, UInt32),
    get_type_info_count : Proc(IMsmErrors*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmErrors*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmErrors*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmErrors*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMsmErrors*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMsmErrors*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMsmErrors*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmErrors, lpVtbl : IMsmErrorsVtbl* do
    GUID = LibC::GUID.new(0xadda82a_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmErrors*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmErrors*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmErrors*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmErrors*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmErrors*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmErrors*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmErrors*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Item(this : IMsmErrors*, item : Int32, return__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, item, return__)
    end
    def get_Count(this : IMsmErrors*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IMsmErrors*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end

  end

  @[Extern]
  record IMsmDependencyVtbl,
    query_interface : Proc(IMsmDependency*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmDependency*, UInt32),
    release : Proc(IMsmDependency*, UInt32),
    get_type_info_count : Proc(IMsmDependency*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmDependency*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmDependency*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmDependency*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Module : Proc(IMsmDependency*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Language : Proc(IMsmDependency*, Int16*, Win32cr::Foundation::HRESULT),
    get_Version : Proc(IMsmDependency*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmDependency, lpVtbl : IMsmDependencyVtbl* do
    GUID = LibC::GUID.new(0xadda82b_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmDependency*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmDependency*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmDependency*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmDependency*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmDependency*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmDependency*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmDependency*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Module(this : IMsmDependency*, module__ : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Module.call(this, module__)
    end
    def get_Language(this : IMsmDependency*, language : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Language.call(this, language)
    end
    def get_Version(this : IMsmDependency*, version : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, version)
    end

  end

  @[Extern]
  record IEnumMsmDependencyVtbl,
    query_interface : Proc(IEnumMsmDependency*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMsmDependency*, UInt32),
    release : Proc(IEnumMsmDependency*, UInt32),
    next__ : Proc(IEnumMsmDependency*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMsmDependency*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMsmDependency*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMsmDependency*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumMsmDependency, lpVtbl : IEnumMsmDependencyVtbl* do
    GUID = LibC::GUID.new(0xadda82c_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IEnumMsmDependency*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMsmDependency*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMsmDependency*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMsmDependency*, cFetch : UInt32, rgmsmDependencies : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFetch, rgmsmDependencies, pcFetched)
    end
    def skip(this : IEnumMsmDependency*, cSkip : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cSkip)
    end
    def reset(this : IEnumMsmDependency*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumMsmDependency*, pemsmDependencies : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pemsmDependencies)
    end

  end

  @[Extern]
  record IMsmDependenciesVtbl,
    query_interface : Proc(IMsmDependencies*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmDependencies*, UInt32),
    release : Proc(IMsmDependencies*, UInt32),
    get_type_info_count : Proc(IMsmDependencies*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmDependencies*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmDependencies*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmDependencies*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMsmDependencies*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMsmDependencies*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMsmDependencies*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmDependencies, lpVtbl : IMsmDependenciesVtbl* do
    GUID = LibC::GUID.new(0xadda82d_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmDependencies*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmDependencies*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmDependencies*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmDependencies*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmDependencies*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmDependencies*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmDependencies*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Item(this : IMsmDependencies*, item : Int32, return__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, item, return__)
    end
    def get_Count(this : IMsmDependencies*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IMsmDependencies*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end

  end

  @[Extern]
  record IMsmMergeVtbl,
    query_interface : Proc(IMsmMerge*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmMerge*, UInt32),
    release : Proc(IMsmMerge*, UInt32),
    get_type_info_count : Proc(IMsmMerge*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmMerge*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmMerge*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmMerge*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open_database : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    open_module : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    close_database : Proc(IMsmMerge*, Int16, Win32cr::Foundation::HRESULT),
    close_module : Proc(IMsmMerge*, Win32cr::Foundation::HRESULT),
    open_log : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    close_log : Proc(IMsmMerge*, Win32cr::Foundation::HRESULT),
    log : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Errors : Proc(IMsmMerge*, Void**, Win32cr::Foundation::HRESULT),
    get_Dependencies : Proc(IMsmMerge*, Void**, Win32cr::Foundation::HRESULT),
    merge : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    connect : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    extract_cab : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    extract_files : Proc(IMsmMerge*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmMerge, lpVtbl : IMsmMergeVtbl* do
    GUID = LibC::GUID.new(0xadda82e_u32, 0x2c26_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xaf_u8, 0x11_u8, 0xa6_u8])
    def query_interface(this : IMsmMerge*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmMerge*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmMerge*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmMerge*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmMerge*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmMerge*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmMerge*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open_database(this : IMsmMerge*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_database.call(this, path)
    end
    def open_module(this : IMsmMerge*, path : Win32cr::Foundation::BSTR, language : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_module.call(this, path, language)
    end
    def close_database(this : IMsmMerge*, commit : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_database.call(this, commit)
    end
    def close_module(this : IMsmMerge*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_module.call(this)
    end
    def open_log(this : IMsmMerge*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_log.call(this, path)
    end
    def close_log(this : IMsmMerge*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_log.call(this)
    end
    def log(this : IMsmMerge*, message : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.log.call(this, message)
    end
    def get_Errors(this : IMsmMerge*, errors : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Errors.call(this, errors)
    end
    def get_Dependencies(this : IMsmMerge*, dependencies : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Dependencies.call(this, dependencies)
    end
    def merge(this : IMsmMerge*, feature : Win32cr::Foundation::BSTR, redirect_dir : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.merge.call(this, feature, redirect_dir)
    end
    def connect(this : IMsmMerge*, feature : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, feature)
    end
    def extract_cab(this : IMsmMerge*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.extract_cab.call(this, file_name)
    end
    def extract_files(this : IMsmMerge*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.extract_files.call(this, path)
    end

  end

  @[Extern]
  record IMsmGetFilesVtbl,
    query_interface : Proc(IMsmGetFiles*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMsmGetFiles*, UInt32),
    release : Proc(IMsmGetFiles*, UInt32),
    get_type_info_count : Proc(IMsmGetFiles*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMsmGetFiles*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMsmGetFiles*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMsmGetFiles*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ModuleFiles : Proc(IMsmGetFiles*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMsmGetFiles, lpVtbl : IMsmGetFilesVtbl* do
    GUID = LibC::GUID.new(0x7041ae26_u32, 0x2d78_u16, 0x11d2_u16, StaticArray[0x88_u8, 0x8a_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x81_u8, 0xb0_u8, 0x15_u8])
    def query_interface(this : IMsmGetFiles*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMsmGetFiles*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMsmGetFiles*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMsmGetFiles*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMsmGetFiles*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMsmGetFiles*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMsmGetFiles*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ModuleFiles(this : IMsmGetFiles*, files : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModuleFiles.call(this, files)
    end

  end

  @[Extern]
  record IAssemblyNameVtbl,
    query_interface : Proc(IAssemblyName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAssemblyName*, UInt32),
    release : Proc(IAssemblyName*, UInt32),
    set_property : Proc(IAssemblyName*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_property : Proc(IAssemblyName*, UInt32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    finalize__ : Proc(IAssemblyName*, Win32cr::Foundation::HRESULT),
    get_display_name : Proc(IAssemblyName*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::HRESULT),
    reserved : Proc(IAssemblyName*, LibC::GUID*, Void*, Void*, Win32cr::Foundation::PWSTR, Int64, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_name : Proc(IAssemblyName*, UInt32*, UInt16*, Win32cr::Foundation::HRESULT),
    get_version : Proc(IAssemblyName*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    is_equal : Proc(IAssemblyName*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IAssemblyName*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAssemblyName, lpVtbl : IAssemblyNameVtbl* do
    GUID = LibC::GUID.new(0xcd193bc0_u32, 0xb4bc_u16, 0x11d2_u16, StaticArray[0x98_u8, 0x33_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1d_u8, 0x2e_u8])
    def query_interface(this : IAssemblyName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAssemblyName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAssemblyName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_property(this : IAssemblyName*, property_id : UInt32, pvProperty : Void*, cbProperty : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, property_id, pvProperty, cbProperty)
    end
    def get_property(this : IAssemblyName*, property_id : UInt32, pvProperty : Void*, pcbProperty : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, property_id, pvProperty, pcbProperty)
    end
    def finalize__(this : IAssemblyName*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finalize__.call(this)
    end
    def get_display_name(this : IAssemblyName*, szDisplayName : UInt16*, pccDisplayName : UInt32*, dwDisplayFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_name.call(this, szDisplayName, pccDisplayName, dwDisplayFlags)
    end
    def reserved(this : IAssemblyName*, refIID : LibC::GUID*, pUnkReserved1 : Void*, pUnkReserved2 : Void*, szReserved : Win32cr::Foundation::PWSTR, llReserved : Int64, pvReserved : Void*, cbReserved : UInt32, ppReserved : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reserved.call(this, refIID, pUnkReserved1, pUnkReserved2, szReserved, llReserved, pvReserved, cbReserved, ppReserved)
    end
    def get_name(this : IAssemblyName*, lpcwBuffer : UInt32*, pwzName : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, lpcwBuffer, pwzName)
    end
    def get_version(this : IAssemblyName*, pdwVersionHi : UInt32*, pdwVersionLow : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, pdwVersionHi, pdwVersionLow)
    end
    def is_equal(this : IAssemblyName*, pName : Void*, dwCmpFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pName, dwCmpFlags)
    end
    def clone(this : IAssemblyName*, pName : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, pName)
    end

  end

  @[Extern]
  record IAssemblyCacheItemVtbl,
    query_interface : Proc(IAssemblyCacheItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAssemblyCacheItem*, UInt32),
    release : Proc(IAssemblyCacheItem*, UInt32),
    create_stream : Proc(IAssemblyCacheItem*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Void**, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    commit : Proc(IAssemblyCacheItem*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    abort_item : Proc(IAssemblyCacheItem*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAssemblyCacheItem, lpVtbl : IAssemblyCacheItemVtbl* do
    GUID = LibC::GUID.new(0x9e3aaeb4_u32, 0xd1cd_u16, 0x11d2_u16, StaticArray[0xba_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xce_u8, 0xae_u8])
    def query_interface(this : IAssemblyCacheItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAssemblyCacheItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAssemblyCacheItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_stream(this : IAssemblyCacheItem*, dwFlags : UInt32, pszStreamName : Win32cr::Foundation::PWSTR, dwFormat : UInt32, dwFormatFlags : UInt32, ppIStream : Void**, puliMaxSize : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stream.call(this, dwFlags, pszStreamName, dwFormat, dwFormatFlags, ppIStream, puliMaxSize)
    end
    def commit(this : IAssemblyCacheItem*, dwFlags : UInt32, pulDisposition : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, dwFlags, pulDisposition)
    end
    def abort_item(this : IAssemblyCacheItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort_item.call(this)
    end

  end

  @[Extern]
  record IAssemblyCacheVtbl,
    query_interface : Proc(IAssemblyCache*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAssemblyCache*, UInt32),
    release : Proc(IAssemblyCache*, UInt32),
    uninstall_assembly : Proc(IAssemblyCache*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::System::ApplicationInstallationAndServicing::FUSION_INSTALL_REFERENCE*, Win32cr::System::ApplicationInstallationAndServicing::IASSEMBLYCACHE_UNINSTALL_DISPOSITION*, Win32cr::Foundation::HRESULT),
    query_assembly_info : Proc(IAssemblyCache*, Win32cr::System::ApplicationInstallationAndServicing::QUERYASMINFO_FLAGS, Win32cr::Foundation::PWSTR, Win32cr::System::ApplicationInstallationAndServicing::ASSEMBLY_INFO*, Win32cr::Foundation::HRESULT),
    create_assembly_cache_item : Proc(IAssemblyCache*, UInt32, Void*, Void**, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    reserved : Proc(IAssemblyCache*, Void**, Win32cr::Foundation::HRESULT),
    install_assembly : Proc(IAssemblyCache*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::System::ApplicationInstallationAndServicing::FUSION_INSTALL_REFERENCE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAssemblyCache, lpVtbl : IAssemblyCacheVtbl* do
    GUID = LibC::GUID.new(0xe707dcde_u32, 0xd1cd_u16, 0x11d2_u16, StaticArray[0xba_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xce_u8, 0xae_u8])
    def query_interface(this : IAssemblyCache*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAssemblyCache*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAssemblyCache*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def uninstall_assembly(this : IAssemblyCache*, dwFlags : UInt32, pszAssemblyName : Win32cr::Foundation::PWSTR, pRefData : Win32cr::System::ApplicationInstallationAndServicing::FUSION_INSTALL_REFERENCE*, pulDisposition : Win32cr::System::ApplicationInstallationAndServicing::IASSEMBLYCACHE_UNINSTALL_DISPOSITION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninstall_assembly.call(this, dwFlags, pszAssemblyName, pRefData, pulDisposition)
    end
    def query_assembly_info(this : IAssemblyCache*, dwFlags : Win32cr::System::ApplicationInstallationAndServicing::QUERYASMINFO_FLAGS, pszAssemblyName : Win32cr::Foundation::PWSTR, pAsmInfo : Win32cr::System::ApplicationInstallationAndServicing::ASSEMBLY_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_assembly_info.call(this, dwFlags, pszAssemblyName, pAsmInfo)
    end
    def create_assembly_cache_item(this : IAssemblyCache*, dwFlags : UInt32, pvReserved : Void*, ppAsmItem : Void**, pszAssemblyName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_assembly_cache_item.call(this, dwFlags, pvReserved, ppAsmItem, pszAssemblyName)
    end
    def reserved(this : IAssemblyCache*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reserved.call(this, ppUnk)
    end
    def install_assembly(this : IAssemblyCache*, dwFlags : UInt32, pszManifestFilePath : Win32cr::Foundation::PWSTR, pRefData : Win32cr::System::ApplicationInstallationAndServicing::FUSION_INSTALL_REFERENCE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_assembly.call(this, dwFlags, pszManifestFilePath, pRefData)
    end

  end

  @[Extern]
  record IPMApplicationInfoVtbl,
    query_interface : Proc(IPMApplicationInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMApplicationInfo*, UInt32),
    release : Proc(IPMApplicationInfo*, UInt32),
    get_ProductID : Proc(IPMApplicationInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_InstanceID : Proc(IPMApplicationInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_OfferID : Proc(IPMApplicationInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_DefaultTask : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AppTitle : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IconPath : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NotificationState : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_AppInstallType : Proc(IPMApplicationInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE*, Win32cr::Foundation::HRESULT),
    get_State : Proc(IPMApplicationInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE*, Win32cr::Foundation::HRESULT),
    get_IsRevoked : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_UpdateAvailable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_InstallDate : Proc(IPMApplicationInfo*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_IsUninstallable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsThemable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsTrial : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_InstallPath : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DataRoot : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Genre : Proc(IPMApplicationInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_APP_GENRE*, Win32cr::Foundation::HRESULT),
    get_Publisher : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Author : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Version : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AppPlatMajorVersion : Proc(IPMApplicationInfo*, UInt8*, Win32cr::Foundation::HRESULT),
    get_AppPlatMinorVersion : Proc(IPMApplicationInfo*, UInt8*, Win32cr::Foundation::HRESULT),
    get_PublisherID : Proc(IPMApplicationInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_IsMultiCore : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_SID : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AppPlatMajorVersionLightUp : Proc(IPMApplicationInfo*, UInt8*, Win32cr::Foundation::HRESULT),
    get_AppPlatMinorVersionLightUp : Proc(IPMApplicationInfo*, UInt8*, Win32cr::Foundation::HRESULT),
    set_UpdateAvailable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_NotificationState : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_IconPath : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_UninstallableState : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_IsPinableOnKidZone : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsOriginallyPreInstalled : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsInstallOnSD : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsOptoutOnSD : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsOptoutBackupRestore : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_EnterpriseDisabled : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_EnterpriseUninstallable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnterpriseDisabled : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_EnterpriseUninstallable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsVisibleOnAppList : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsInboxApp : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_StorageID : Proc(IPMApplicationInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_StartAppBlob : Proc(IPMApplicationInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_STARTAPPBLOB*, Win32cr::Foundation::HRESULT),
    get_IsMovable : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_DeploymentAppEnumerationHubFilter : Proc(IPMApplicationInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE*, Win32cr::Foundation::HRESULT),
    get_ModifiedDate : Proc(IPMApplicationInfo*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_IsOriginallyRestored : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_ShouldDeferMdilBind : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsFullyPreInstall : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_IsMdilMaintenanceNeeded : Proc(IPMApplicationInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_Title : Proc(IPMApplicationInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMApplicationInfo, lpVtbl : IPMApplicationInfoVtbl* do
    GUID = LibC::GUID.new(0x50afb58a_u32, 0x438c_u16, 0x4088_u16, StaticArray[0x97_u8, 0x89_u8, 0xf8_u8, 0xc4_u8, 0x89_u8, 0x98_u8, 0x29_u8, 0xc7_u8])
    def query_interface(this : IPMApplicationInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMApplicationInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMApplicationInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMApplicationInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_InstanceID(this : IPMApplicationInfo*, pInstanceID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InstanceID.call(this, pInstanceID)
    end
    def get_OfferID(this : IPMApplicationInfo*, pOfferID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OfferID.call(this, pOfferID)
    end
    def get_DefaultTask(this : IPMApplicationInfo*, pDefaultTask : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultTask.call(this, pDefaultTask)
    end
    def get_AppTitle(this : IPMApplicationInfo*, pAppTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppTitle.call(this, pAppTitle)
    end
    def get_IconPath(this : IPMApplicationInfo*, pAppIconPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IconPath.call(this, pAppIconPath)
    end
    def get_NotificationState(this : IPMApplicationInfo*, pIsNotified : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotificationState.call(this, pIsNotified)
    end
    def get_AppInstallType(this : IPMApplicationInfo*, pAppInstallType : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppInstallType.call(this, pAppInstallType)
    end
    def get_State(this : IPMApplicationInfo*, pState : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pState)
    end
    def get_IsRevoked(this : IPMApplicationInfo*, pIsRevoked : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRevoked.call(this, pIsRevoked)
    end
    def get_UpdateAvailable(this : IPMApplicationInfo*, pIsUpdateAvailable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UpdateAvailable.call(this, pIsUpdateAvailable)
    end
    def get_InstallDate(this : IPMApplicationInfo*, pInstallDate : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InstallDate.call(this, pInstallDate)
    end
    def get_IsUninstallable(this : IPMApplicationInfo*, pIsUninstallable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsUninstallable.call(this, pIsUninstallable)
    end
    def get_IsThemable(this : IPMApplicationInfo*, pIsThemable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsThemable.call(this, pIsThemable)
    end
    def get_IsTrial(this : IPMApplicationInfo*, pIsTrial : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsTrial.call(this, pIsTrial)
    end
    def get_InstallPath(this : IPMApplicationInfo*, pInstallPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InstallPath.call(this, pInstallPath)
    end
    def get_DataRoot(this : IPMApplicationInfo*, pDataRoot : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataRoot.call(this, pDataRoot)
    end
    def get_Genre(this : IPMApplicationInfo*, pGenre : Win32cr::System::ApplicationInstallationAndServicing::PM_APP_GENRE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Genre.call(this, pGenre)
    end
    def get_Publisher(this : IPMApplicationInfo*, pPublisher : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Publisher.call(this, pPublisher)
    end
    def get_Author(this : IPMApplicationInfo*, pAuthor : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Author.call(this, pAuthor)
    end
    def get_Description(this : IPMApplicationInfo*, pDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pDescription)
    end
    def get_Version(this : IPMApplicationInfo*, pVersion : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, pVersion)
    end
    def get_InvocationInfo(this : IPMApplicationInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end
    def get_AppPlatMajorVersion(this : IPMApplicationInfo*, pMajorVer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppPlatMajorVersion.call(this, pMajorVer)
    end
    def get_AppPlatMinorVersion(this : IPMApplicationInfo*, pMinorVer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppPlatMinorVersion.call(this, pMinorVer)
    end
    def get_PublisherID(this : IPMApplicationInfo*, pPublisherID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublisherID.call(this, pPublisherID)
    end
    def get_IsMultiCore(this : IPMApplicationInfo*, pIsMultiCore : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsMultiCore.call(this, pIsMultiCore)
    end
    def get_SID(this : IPMApplicationInfo*, pSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SID.call(this, pSID)
    end
    def get_AppPlatMajorVersionLightUp(this : IPMApplicationInfo*, pMajorVer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppPlatMajorVersionLightUp.call(this, pMajorVer)
    end
    def get_AppPlatMinorVersionLightUp(this : IPMApplicationInfo*, pMinorVer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppPlatMinorVersionLightUp.call(this, pMinorVer)
    end
    def set_UpdateAvailable(this : IPMApplicationInfo*, is_update_available : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_UpdateAvailable.call(this, is_update_available)
    end
    def set_NotificationState(this : IPMApplicationInfo*, is_notified : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_NotificationState.call(this, is_notified)
    end
    def set_IconPath(this : IPMApplicationInfo*, app_icon_path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IconPath.call(this, app_icon_path)
    end
    def set_UninstallableState(this : IPMApplicationInfo*, is_uninstallable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_UninstallableState.call(this, is_uninstallable)
    end
    def get_IsPinableOnKidZone(this : IPMApplicationInfo*, pIsPinable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsPinableOnKidZone.call(this, pIsPinable)
    end
    def get_IsOriginallyPreInstalled(this : IPMApplicationInfo*, pIsPreinstalled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsOriginallyPreInstalled.call(this, pIsPreinstalled)
    end
    def get_IsInstallOnSD(this : IPMApplicationInfo*, pIsInstallOnSD : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsInstallOnSD.call(this, pIsInstallOnSD)
    end
    def get_IsOptoutOnSD(this : IPMApplicationInfo*, pIsOptoutOnSD : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsOptoutOnSD.call(this, pIsOptoutOnSD)
    end
    def get_IsOptoutBackupRestore(this : IPMApplicationInfo*, pIsOptoutBackupRestore : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsOptoutBackupRestore.call(this, pIsOptoutBackupRestore)
    end
    def set_EnterpriseDisabled(this : IPMApplicationInfo*, is_disabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_EnterpriseDisabled.call(this, is_disabled)
    end
    def set_EnterpriseUninstallable(this : IPMApplicationInfo*, is_uninstallable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_EnterpriseUninstallable.call(this, is_uninstallable)
    end
    def get_EnterpriseDisabled(this : IPMApplicationInfo*, is_disabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnterpriseDisabled.call(this, is_disabled)
    end
    def get_EnterpriseUninstallable(this : IPMApplicationInfo*, is_uninstallable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnterpriseUninstallable.call(this, is_uninstallable)
    end
    def get_IsVisibleOnAppList(this : IPMApplicationInfo*, pIsVisible : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsVisibleOnAppList.call(this, pIsVisible)
    end
    def get_IsInboxApp(this : IPMApplicationInfo*, pIsInboxApp : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsInboxApp.call(this, pIsInboxApp)
    end
    def get_StorageID(this : IPMApplicationInfo*, pStorageID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StorageID.call(this, pStorageID)
    end
    def get_StartAppBlob(this : IPMApplicationInfo*, pBlob : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTAPPBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartAppBlob.call(this, pBlob)
    end
    def get_IsMovable(this : IPMApplicationInfo*, pIsMovable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsMovable.call(this, pIsMovable)
    end
    def get_DeploymentAppEnumerationHubFilter(this : IPMApplicationInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeploymentAppEnumerationHubFilter.call(this, hub_type)
    end
    def get_ModifiedDate(this : IPMApplicationInfo*, pModifiedDate : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModifiedDate.call(this, pModifiedDate)
    end
    def get_IsOriginallyRestored(this : IPMApplicationInfo*, pIsRestored : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsOriginallyRestored.call(this, pIsRestored)
    end
    def get_ShouldDeferMdilBind(this : IPMApplicationInfo*, pfDeferMdilBind : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ShouldDeferMdilBind.call(this, pfDeferMdilBind)
    end
    def get_IsFullyPreInstall(this : IPMApplicationInfo*, pfIsFullyPreInstall : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsFullyPreInstall.call(this, pfIsFullyPreInstall)
    end
    def set_IsMdilMaintenanceNeeded(this : IPMApplicationInfo*, fIsMdilMaintenanceNeeded : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IsMdilMaintenanceNeeded.call(this, fIsMdilMaintenanceNeeded)
    end
    def set_Title(this : IPMApplicationInfo*, app_title : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_Title.call(this, app_title)
    end

  end

  @[Extern]
  record IPMTilePropertyInfoVtbl,
    query_interface : Proc(IPMTilePropertyInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTilePropertyInfo*, UInt32),
    release : Proc(IPMTilePropertyInfo*, UInt32),
    get_PropertyID : Proc(IPMTilePropertyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PropertyValue : Proc(IPMTilePropertyInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_Property : Proc(IPMTilePropertyInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTilePropertyInfo, lpVtbl : IPMTilePropertyInfoVtbl* do
    GUID = LibC::GUID.new(0x6c2b8017_u32, 0x1efa_u16, 0x42a7_u16, StaticArray[0x86_u8, 0xc0_u8, 0x6d_u8, 0x4b_u8, 0x64_u8, 0xb_u8, 0xf5_u8, 0x28_u8])
    def query_interface(this : IPMTilePropertyInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTilePropertyInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTilePropertyInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_PropertyID(this : IPMTilePropertyInfo*, pPropID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyID.call(this, pPropID)
    end
    def get_PropertyValue(this : IPMTilePropertyInfo*, pPropValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyValue.call(this, pPropValue)
    end
    def set_Property(this : IPMTilePropertyInfo*, prop_value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_Property.call(this, prop_value)
    end

  end

  @[Extern]
  record IPMTilePropertyEnumeratorVtbl,
    query_interface : Proc(IPMTilePropertyEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTilePropertyEnumerator*, UInt32),
    release : Proc(IPMTilePropertyEnumerator*, UInt32),
    get_Next : Proc(IPMTilePropertyEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTilePropertyEnumerator, lpVtbl : IPMTilePropertyEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xcc4cd629_u32, 0x9047_u16, 0x4250_u16, StaticArray[0xaa_u8, 0xc8_u8, 0x93_u8, 0xe_u8, 0x47_u8, 0x81_u8, 0x24_u8, 0x21_u8])
    def query_interface(this : IPMTilePropertyEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTilePropertyEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTilePropertyEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMTilePropertyEnumerator*, ppPropInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppPropInfo)
    end

  end

  @[Extern]
  record IPMTileInfoVtbl,
    query_interface : Proc(IPMTileInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTileInfo*, UInt32),
    release : Proc(IPMTileInfo*, UInt32),
    get_ProductID : Proc(IPMTileInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_TileID : Proc(IPMTileInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TemplateType : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::TILE_TEMPLATE_TYPE*, Win32cr::Foundation::HRESULT),
    get_HubPinnedState : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_HubPosition : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsNotified : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsDefault : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_TaskID : Proc(IPMTileInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TileType : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILE_TYPE*, Win32cr::Foundation::HRESULT),
    get_IsThemable : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_PropertyById : Proc(IPMTileInfo*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMTileInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PropertyEnum : Proc(IPMTileInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_HubTileSize : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_SIZE*, Win32cr::Foundation::HRESULT),
    set_HubPosition : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, UInt32, Win32cr::Foundation::HRESULT),
    set_NotifiedState : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_HubPinnedState : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_HubTileSize : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_SIZE, Win32cr::Foundation::HRESULT),
    set_InvocationInfo : Proc(IPMTileInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_StartTileBlob : Proc(IPMTileInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILEBLOB*, Win32cr::Foundation::HRESULT),
    get_IsRestoring : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsAutoRestoreDisabled : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_IsRestoring : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_IsAutoRestoreDisabled : Proc(IPMTileInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTileInfo, lpVtbl : IPMTileInfoVtbl* do
    GUID = LibC::GUID.new(0xd1604833_u32, 0x2b08_u16, 0x4001_u16, StaticArray[0x82_u8, 0xcd_u8, 0x18_u8, 0x3a_u8, 0xd7_u8, 0x34_u8, 0xf7_u8, 0x52_u8])
    def query_interface(this : IPMTileInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTileInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTileInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMTileInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_TileID(this : IPMTileInfo*, pTileID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TileID.call(this, pTileID)
    end
    def get_TemplateType(this : IPMTileInfo*, pTemplateType : Win32cr::System::ApplicationInstallationAndServicing::TILE_TEMPLATE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateType.call(this, pTemplateType)
    end
    def get_HubPinnedState(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, pPinned : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HubPinnedState.call(this, hub_type, pPinned)
    end
    def get_HubPosition(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, pPosition : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HubPosition.call(this, hub_type, pPosition)
    end
    def get_IsNotified(this : IPMTileInfo*, pIsNotified : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsNotified.call(this, pIsNotified)
    end
    def get_IsDefault(this : IPMTileInfo*, pIsDefault : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsDefault.call(this, pIsDefault)
    end
    def get_TaskID(this : IPMTileInfo*, pTaskID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskID.call(this, pTaskID)
    end
    def get_TileType(this : IPMTileInfo*, pStartTileType : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TileType.call(this, pStartTileType)
    end
    def get_IsThemable(this : IPMTileInfo*, pIsThemable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsThemable.call(this, pIsThemable)
    end
    def get_PropertyById(this : IPMTileInfo*, prop_id : UInt32, ppPropInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyById.call(this, prop_id, ppPropInfo)
    end
    def get_InvocationInfo(this : IPMTileInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end
    def get_PropertyEnum(this : IPMTileInfo*, ppTilePropEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyEnum.call(this, ppTilePropEnum)
    end
    def get_HubTileSize(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, pSize : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HubTileSize.call(this, hub_type, pSize)
    end
    def set_HubPosition(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, position : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_HubPosition.call(this, hub_type, position)
    end
    def set_NotifiedState(this : IPMTileInfo*, notified : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_NotifiedState.call(this, notified)
    end
    def set_HubPinnedState(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, pinned : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_HubPinnedState.call(this, hub_type, pinned)
    end
    def set_HubTileSize(this : IPMTileInfo*, hub_type : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_HUBTYPE, size : Win32cr::System::ApplicationInstallationAndServicing::PM_TILE_SIZE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_HubTileSize.call(this, hub_type, size)
    end
    def set_InvocationInfo(this : IPMTileInfo*, task_name : Win32cr::Foundation::BSTR, task_parameters : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_InvocationInfo.call(this, task_name, task_parameters)
    end
    def get_StartTileBlob(this : IPMTileInfo*, pBlob : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILEBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTileBlob.call(this, pBlob)
    end
    def get_IsRestoring(this : IPMTileInfo*, pIsRestoring : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRestoring.call(this, pIsRestoring)
    end
    def get_IsAutoRestoreDisabled(this : IPMTileInfo*, pIsAutoRestoreDisabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsAutoRestoreDisabled.call(this, pIsAutoRestoreDisabled)
    end
    def set_IsRestoring(this : IPMTileInfo*, restoring : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IsRestoring.call(this, restoring)
    end
    def set_IsAutoRestoreDisabled(this : IPMTileInfo*, auto_restore_disabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IsAutoRestoreDisabled.call(this, auto_restore_disabled)
    end

  end

  @[Extern]
  record IPMTileInfoEnumeratorVtbl,
    query_interface : Proc(IPMTileInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTileInfoEnumerator*, UInt32),
    release : Proc(IPMTileInfoEnumerator*, UInt32),
    get_Next : Proc(IPMTileInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTileInfoEnumerator, lpVtbl : IPMTileInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xded83065_u32, 0xe462_u16, 0x4b2c_u16, StaticArray[0xac_u8, 0xb5_u8, 0xe3_u8, 0x9c_u8, 0xea_u8, 0x61_u8, 0xc8_u8, 0x74_u8])
    def query_interface(this : IPMTileInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTileInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTileInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMTileInfoEnumerator*, ppTileInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppTileInfo)
    end

  end

  @[Extern]
  record IPMApplicationInfoEnumeratorVtbl,
    query_interface : Proc(IPMApplicationInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMApplicationInfoEnumerator*, UInt32),
    release : Proc(IPMApplicationInfoEnumerator*, UInt32),
    get_Next : Proc(IPMApplicationInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMApplicationInfoEnumerator, lpVtbl : IPMApplicationInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xec42a96_u32, 0x4d46_u16, 0x4dc6_u16, StaticArray[0xa3_u8, 0xd9_u8, 0xa7_u8, 0xac_u8, 0xaa_u8, 0xc0_u8, 0xf5_u8, 0xfa_u8])
    def query_interface(this : IPMApplicationInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMApplicationInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMApplicationInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMApplicationInfoEnumerator*, ppAppInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppAppInfo)
    end

  end

  @[Extern]
  record IPMLiveTileJobInfoVtbl,
    query_interface : Proc(IPMLiveTileJobInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMLiveTileJobInfo*, UInt32),
    release : Proc(IPMLiveTileJobInfo*, UInt32),
    get_ProductID : Proc(IPMLiveTileJobInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_TileID : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NextSchedule : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    set_NextSchedule : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::FILETIME, Win32cr::Foundation::HRESULT),
    get_StartSchedule : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    set_StartSchedule : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::FILETIME, Win32cr::Foundation::HRESULT),
    get_IntervalDuration : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_IntervalDuration : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_RunForever : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_RunForever : Proc(IPMLiveTileJobInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_MaxRunCount : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_MaxRunCount : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_RunCount : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_RunCount : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_RecurrenceType : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_RecurrenceType : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_TileXML : Proc(IPMLiveTileJobInfo*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_TileXML : Proc(IPMLiveTileJobInfo*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_UrlXML : Proc(IPMLiveTileJobInfo*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_UrlXML : Proc(IPMLiveTileJobInfo*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_AttemptCount : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_AttemptCount : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_DownloadState : Proc(IPMLiveTileJobInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_DownloadState : Proc(IPMLiveTileJobInfo*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMLiveTileJobInfo, lpVtbl : IPMLiveTileJobInfoVtbl* do
    GUID = LibC::GUID.new(0x6009a81f_u32, 0x4710_u16, 0x4697_u16, StaticArray[0xb5_u8, 0xf6_u8, 0x22_u8, 0x8_u8, 0xf6_u8, 0x5_u8, 0x7b_u8, 0x8e_u8])
    def query_interface(this : IPMLiveTileJobInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMLiveTileJobInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMLiveTileJobInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMLiveTileJobInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_TileID(this : IPMLiveTileJobInfo*, pTileID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TileID.call(this, pTileID)
    end
    def get_NextSchedule(this : IPMLiveTileJobInfo*, pNextSchedule : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NextSchedule.call(this, pNextSchedule)
    end
    def set_NextSchedule(this : IPMLiveTileJobInfo*, ftNextSchedule : Win32cr::Foundation::FILETIME) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_NextSchedule.call(this, ftNextSchedule)
    end
    def get_StartSchedule(this : IPMLiveTileJobInfo*, pStartSchedule : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartSchedule.call(this, pStartSchedule)
    end
    def set_StartSchedule(this : IPMLiveTileJobInfo*, ftStartSchedule : Win32cr::Foundation::FILETIME) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_StartSchedule.call(this, ftStartSchedule)
    end
    def get_IntervalDuration(this : IPMLiveTileJobInfo*, pIntervalDuration : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IntervalDuration.call(this, pIntervalDuration)
    end
    def set_IntervalDuration(this : IPMLiveTileJobInfo*, ulIntervalDuration : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IntervalDuration.call(this, ulIntervalDuration)
    end
    def get_RunForever(this : IPMLiveTileJobInfo*, is_run_forever : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RunForever.call(this, is_run_forever)
    end
    def set_RunForever(this : IPMLiveTileJobInfo*, fRunForever : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_RunForever.call(this, fRunForever)
    end
    def get_MaxRunCount(this : IPMLiveTileJobInfo*, pMaxRunCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxRunCount.call(this, pMaxRunCount)
    end
    def set_MaxRunCount(this : IPMLiveTileJobInfo*, ulMaxRunCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_MaxRunCount.call(this, ulMaxRunCount)
    end
    def get_RunCount(this : IPMLiveTileJobInfo*, pRunCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RunCount.call(this, pRunCount)
    end
    def set_RunCount(this : IPMLiveTileJobInfo*, ulRunCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_RunCount.call(this, ulRunCount)
    end
    def get_RecurrenceType(this : IPMLiveTileJobInfo*, pRecurrenceType : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecurrenceType.call(this, pRecurrenceType)
    end
    def set_RecurrenceType(this : IPMLiveTileJobInfo*, ulRecurrenceType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_RecurrenceType.call(this, ulRecurrenceType)
    end
    def get_TileXML(this : IPMLiveTileJobInfo*, pTileXml : UInt8**, pcbTileXml : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TileXML.call(this, pTileXml, pcbTileXml)
    end
    def set_TileXML(this : IPMLiveTileJobInfo*, pTileXml : UInt8*, cbTileXml : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_TileXML.call(this, pTileXml, cbTileXml)
    end
    def get_UrlXML(this : IPMLiveTileJobInfo*, pUrlXML : UInt8**, pcbUrlXML : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UrlXML.call(this, pUrlXML, pcbUrlXML)
    end
    def set_UrlXML(this : IPMLiveTileJobInfo*, pUrlXML : UInt8*, cbUrlXML : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_UrlXML.call(this, pUrlXML, cbUrlXML)
    end
    def get_AttemptCount(this : IPMLiveTileJobInfo*, pAttemptCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttemptCount.call(this, pAttemptCount)
    end
    def set_AttemptCount(this : IPMLiveTileJobInfo*, ulAttemptCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_AttemptCount.call(this, ulAttemptCount)
    end
    def get_DownloadState(this : IPMLiveTileJobInfo*, pDownloadState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadState.call(this, pDownloadState)
    end
    def set_DownloadState(this : IPMLiveTileJobInfo*, ulDownloadState : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_DownloadState.call(this, ulDownloadState)
    end

  end

  @[Extern]
  record IPMLiveTileJobInfoEnumeratorVtbl,
    query_interface : Proc(IPMLiveTileJobInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMLiveTileJobInfoEnumerator*, UInt32),
    release : Proc(IPMLiveTileJobInfoEnumerator*, UInt32),
    get_Next : Proc(IPMLiveTileJobInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMLiveTileJobInfoEnumerator, lpVtbl : IPMLiveTileJobInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xbc042582_u32, 0x9415_u16, 0x4f36_u16, StaticArray[0x9f_u8, 0x99_u8, 0x6_u8, 0xf1_u8, 0x4_u8, 0xc0_u8, 0x7c_u8, 0x3_u8])
    def query_interface(this : IPMLiveTileJobInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMLiveTileJobInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMLiveTileJobInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMLiveTileJobInfoEnumerator*, ppLiveTileJobInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppLiveTileJobInfo)
    end

  end

  @[Extern]
  record IPMDeploymentManagerVtbl,
    query_interface : Proc(IPMDeploymentManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMDeploymentManager*, UInt32),
    release : Proc(IPMDeploymentManager*, UInt32),
    report_download_begin : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    report_download_progress : Proc(IPMDeploymentManager*, LibC::GUID, UInt16, Win32cr::Foundation::HRESULT),
    report_download_complete : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    begin_install : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*, Win32cr::Foundation::HRESULT),
    begin_update : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*, Win32cr::Foundation::HRESULT),
    begin_deploy_package : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*, Win32cr::Foundation::HRESULT),
    begin_update_deployed_package_legacy : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO_LEGACY*, Win32cr::Foundation::HRESULT),
    begin_uninstall : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    begin_enterprise_app_install : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*, Win32cr::Foundation::HRESULT),
    begin_enterprise_app_update : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*, Win32cr::Foundation::HRESULT),
    begin_update_license : Proc(IPMDeploymentManager*, LibC::GUID, LibC::GUID, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_license_challenge : Proc(IPMDeploymentManager*, Win32cr::Foundation::BSTR, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_license_challenge_by_product_id : Proc(IPMDeploymentManager*, LibC::GUID, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_license_challenge_by_product_id2 : Proc(IPMDeploymentManager*, LibC::GUID, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    revoke_license : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    rebind_mdil_binaries : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT),
    rebind_all_mdil_binaries : Proc(IPMDeploymentManager*, LibC::GUID, LibC::GUID, Win32cr::Foundation::HRESULT),
    regenerate_xbf : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT),
    generate_xbf_for_current_locale : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    begin_provision : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    begin_deprovision : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    reindex_sqlce_databases : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    set_applications_need_maintenance : Proc(IPMDeploymentManager*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    update_chamber_profile : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    enterprise_policy_is_application_allowed : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    begin_update_deployed_package : Proc(IPMDeploymentManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*, Win32cr::Foundation::HRESULT),
    report_restore_cancelled : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    resolve_resource_string : Proc(IPMDeploymentManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    update_capabilities_for_modern_apps : Proc(IPMDeploymentManager*, Win32cr::Foundation::HRESULT),
    report_download_status_update : Proc(IPMDeploymentManager*, LibC::GUID, Win32cr::Foundation::HRESULT),
    begin_uninstall_with_options : Proc(IPMDeploymentManager*, LibC::GUID, UInt32, Win32cr::Foundation::HRESULT),
    bind_deferred_mdil_binaries : Proc(IPMDeploymentManager*, Win32cr::Foundation::HRESULT),
    generate_xaml_lightup_xbf_for_current_locale : Proc(IPMDeploymentManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_license_for_appx : Proc(IPMDeploymentManager*, LibC::GUID, UInt8*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    fix_junctions_for_apps_on_sd_card : Proc(IPMDeploymentManager*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMDeploymentManager, lpVtbl : IPMDeploymentManagerVtbl* do
    GUID = LibC::GUID.new(0x35f785fa_u32, 0x1979_u16, 0x4a8b_u16, StaticArray[0xbc_u8, 0x8f_u8, 0xfd_u8, 0x70_u8, 0xeb_u8, 0xd_u8, 0x15_u8, 0x44_u8])
    def query_interface(this : IPMDeploymentManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMDeploymentManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMDeploymentManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def report_download_begin(this : IPMDeploymentManager*, productID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_download_begin.call(this, productID)
    end
    def report_download_progress(this : IPMDeploymentManager*, productID : LibC::GUID, usProgress : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_download_progress.call(this, productID, usProgress)
    end
    def report_download_complete(this : IPMDeploymentManager*, productID : LibC::GUID, hrResult : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_download_complete.call(this, productID, hrResult)
    end
    def begin_install(this : IPMDeploymentManager*, pInstallInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_install.call(this, pInstallInfo)
    end
    def begin_update(this : IPMDeploymentManager*, pUpdateInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_update.call(this, pUpdateInfo)
    end
    def begin_deploy_package(this : IPMDeploymentManager*, pInstallInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_deploy_package.call(this, pInstallInfo)
    end
    def begin_update_deployed_package_legacy(this : IPMDeploymentManager*, pUpdateInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO_LEGACY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_update_deployed_package_legacy.call(this, pUpdateInfo)
    end
    def begin_uninstall(this : IPMDeploymentManager*, productID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_uninstall.call(this, productID)
    end
    def begin_enterprise_app_install(this : IPMDeploymentManager*, pInstallInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_INSTALLINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_enterprise_app_install.call(this, pInstallInfo)
    end
    def begin_enterprise_app_update(this : IPMDeploymentManager*, pUpdateInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_enterprise_app_update.call(this, pUpdateInfo)
    end
    def begin_update_license(this : IPMDeploymentManager*, productID : LibC::GUID, offerID : LibC::GUID, pbLicense : UInt8*, cbLicense : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_update_license.call(this, productID, offerID, pbLicense, cbLicense)
    end
    def get_license_challenge(this : IPMDeploymentManager*, package_path : Win32cr::Foundation::BSTR, ppbChallenge : UInt8**, pcbChallenge : UInt32*, ppbKID : UInt8**, pcbKID : UInt32*, ppbDeviceID : UInt8**, pcbDeviceID : UInt32*, ppbSaltValue : UInt8**, pcbSaltValue : UInt32*, ppbKGVValue : UInt8**, pcbKGVValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_challenge.call(this, package_path, ppbChallenge, pcbChallenge, ppbKID, pcbKID, ppbDeviceID, pcbDeviceID, ppbSaltValue, pcbSaltValue, ppbKGVValue, pcbKGVValue)
    end
    def get_license_challenge_by_product_id(this : IPMDeploymentManager*, product_id : LibC::GUID, ppbChallenge : UInt8**, pcbLicense : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_challenge_by_product_id.call(this, product_id, ppbChallenge, pcbLicense)
    end
    def get_license_challenge_by_product_id2(this : IPMDeploymentManager*, product_id : LibC::GUID, ppbChallenge : UInt8**, pcbLicense : UInt32*, ppbKID : UInt8**, pcbKID : UInt32*, ppbDeviceID : UInt8**, pcbDeviceID : UInt32*, ppbSaltValue : UInt8**, pcbSaltValue : UInt32*, ppbKGVValue : UInt8**, pcbKGVValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_challenge_by_product_id2.call(this, product_id, ppbChallenge, pcbLicense, ppbKID, pcbKID, ppbDeviceID, pcbDeviceID, ppbSaltValue, pcbSaltValue, ppbKGVValue, pcbKGVValue)
    end
    def revoke_license(this : IPMDeploymentManager*, productID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revoke_license.call(this, productID)
    end
    def rebind_mdil_binaries(this : IPMDeploymentManager*, product_id : LibC::GUID, file_names : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rebind_mdil_binaries.call(this, product_id, file_names)
    end
    def rebind_all_mdil_binaries(this : IPMDeploymentManager*, product_id : LibC::GUID, instance_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rebind_all_mdil_binaries.call(this, product_id, instance_id)
    end
    def regenerate_xbf(this : IPMDeploymentManager*, product_id : LibC::GUID, assembly_paths : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.regenerate_xbf.call(this, product_id, assembly_paths)
    end
    def generate_xbf_for_current_locale(this : IPMDeploymentManager*, product_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_xbf_for_current_locale.call(this, product_id)
    end
    def begin_provision(this : IPMDeploymentManager*, product_id : LibC::GUID, xm_lpath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_provision.call(this, product_id, xm_lpath)
    end
    def begin_deprovision(this : IPMDeploymentManager*, product_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_deprovision.call(this, product_id)
    end
    def reindex_sqlce_databases(this : IPMDeploymentManager*, product_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex_sqlce_databases.call(this, product_id)
    end
    def set_applications_need_maintenance(this : IPMDeploymentManager*, required_maintenance_operations : UInt32, pcApplications : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_applications_need_maintenance.call(this, required_maintenance_operations, pcApplications)
    end
    def update_chamber_profile(this : IPMDeploymentManager*, product_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_chamber_profile.call(this, product_id)
    end
    def enterprise_policy_is_application_allowed(this : IPMDeploymentManager*, productId : LibC::GUID, publisherName : Win32cr::Foundation::PWSTR, pIsAllowed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enterprise_policy_is_application_allowed.call(this, productId, publisherName, pIsAllowed)
    end
    def begin_update_deployed_package(this : IPMDeploymentManager*, pUpdateInfo : Win32cr::System::ApplicationInstallationAndServicing::PM_UPDATEINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_update_deployed_package.call(this, pUpdateInfo)
    end
    def report_restore_cancelled(this : IPMDeploymentManager*, productID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_restore_cancelled.call(this, productID)
    end
    def resolve_resource_string(this : IPMDeploymentManager*, resourceString : Win32cr::Foundation::PWSTR, pResolvedResourceString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolve_resource_string.call(this, resourceString, pResolvedResourceString)
    end
    def update_capabilities_for_modern_apps(this : IPMDeploymentManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_capabilities_for_modern_apps.call(this)
    end
    def report_download_status_update(this : IPMDeploymentManager*, productId : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_download_status_update.call(this, productId)
    end
    def begin_uninstall_with_options(this : IPMDeploymentManager*, productID : LibC::GUID, removalOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_uninstall_with_options.call(this, productID, removalOptions)
    end
    def bind_deferred_mdil_binaries(this : IPMDeploymentManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_deferred_mdil_binaries.call(this)
    end
    def generate_xaml_lightup_xbf_for_current_locale(this : IPMDeploymentManager*, package_family_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_xaml_lightup_xbf_for_current_locale.call(this, package_family_name)
    end
    def add_license_for_appx(this : IPMDeploymentManager*, productID : LibC::GUID, pbLicense : UInt8*, cbLicense : UInt32, pbPlayReadyHeader : UInt8*, cbPlayReadyHeader : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_license_for_appx.call(this, productID, pbLicense, cbLicense, pbPlayReadyHeader, cbPlayReadyHeader)
    end
    def fix_junctions_for_apps_on_sd_card(this : IPMDeploymentManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fix_junctions_for_apps_on_sd_card.call(this)
    end

  end

  @[Extern]
  record IPMEnumerationManagerVtbl,
    query_interface : Proc(IPMEnumerationManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMEnumerationManager*, UInt32),
    release : Proc(IPMEnumerationManager*, UInt32),
    get_AllApplications : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_AllTiles : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_AllTasks : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_AllExtensions : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_AllBackgroundServiceAgents : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_AllBackgroundWorkers : Proc(IPMEnumerationManager*, Void**, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, Win32cr::Foundation::HRESULT),
    get_ApplicationInfo : Proc(IPMEnumerationManager*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    get_TileInfo : Proc(IPMEnumerationManager*, LibC::GUID, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_TaskInfo : Proc(IPMEnumerationManager*, LibC::GUID, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_TaskInfoEx : Proc(IPMEnumerationManager*, LibC::GUID, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_BackgroundServiceAgentInfo : Proc(IPMEnumerationManager*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_AllLiveTileJobs : Proc(IPMEnumerationManager*, Void**, Win32cr::Foundation::HRESULT),
    get_LiveTileJob : Proc(IPMEnumerationManager*, LibC::GUID, Win32cr::Foundation::BSTR, Win32cr::System::ApplicationInstallationAndServicing::PM_LIVETILE_RECURRENCE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_ApplicationInfoExternal : Proc(IPMEnumerationManager*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    get_FileHandlerGenericLogo : Proc(IPMEnumerationManager*, Win32cr::Foundation::BSTR, Win32cr::System::ApplicationInstallationAndServicing::PM_LOGO_SIZE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ApplicationInfoFromAccessClaims : Proc(IPMEnumerationManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_StartTileEnumeratorBlob : Proc(IPMEnumerationManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, UInt32*, Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILEBLOB**, Win32cr::Foundation::HRESULT),
    get_StartAppEnumeratorBlob : Proc(IPMEnumerationManager*, Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, UInt32*, Win32cr::System::ApplicationInstallationAndServicing::PM_STARTAPPBLOB**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMEnumerationManager, lpVtbl : IPMEnumerationManagerVtbl* do
    GUID = LibC::GUID.new(0x698d57c2_u32, 0x292d_u16, 0x4cf3_u16, StaticArray[0xb7_u8, 0x3c_u8, 0xd9_u8, 0x5a_u8, 0x69_u8, 0x22_u8, 0xed_u8, 0x9a_u8])
    def query_interface(this : IPMEnumerationManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMEnumerationManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMEnumerationManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AllApplications(this : IPMEnumerationManager*, ppAppEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllApplications.call(this, ppAppEnum, filter)
    end
    def get_AllTiles(this : IPMEnumerationManager*, ppTileEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllTiles.call(this, ppTileEnum, filter)
    end
    def get_AllTasks(this : IPMEnumerationManager*, ppTaskEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllTasks.call(this, ppTaskEnum, filter)
    end
    def get_AllExtensions(this : IPMEnumerationManager*, ppExtensionEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllExtensions.call(this, ppExtensionEnum, filter)
    end
    def get_AllBackgroundServiceAgents(this : IPMEnumerationManager*, ppBSAEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllBackgroundServiceAgents.call(this, ppBSAEnum, filter)
    end
    def get_AllBackgroundWorkers(this : IPMEnumerationManager*, ppBSWEnum : Void**, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllBackgroundWorkers.call(this, ppBSWEnum, filter)
    end
    def get_ApplicationInfo(this : IPMEnumerationManager*, product_id : LibC::GUID, ppAppInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ApplicationInfo.call(this, product_id, ppAppInfo)
    end
    def get_TileInfo(this : IPMEnumerationManager*, product_id : LibC::GUID, tile_id : Win32cr::Foundation::BSTR, ppTileInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TileInfo.call(this, product_id, tile_id, ppTileInfo)
    end
    def get_TaskInfo(this : IPMEnumerationManager*, product_id : LibC::GUID, task_id : Win32cr::Foundation::BSTR, ppTaskInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskInfo.call(this, product_id, task_id, ppTaskInfo)
    end
    def get_TaskInfoEx(this : IPMEnumerationManager*, product_id : LibC::GUID, task_id : Win32cr::Foundation::PWSTR, ppTaskInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskInfoEx.call(this, product_id, task_id, ppTaskInfo)
    end
    def get_BackgroundServiceAgentInfo(this : IPMEnumerationManager*, bsaid : UInt32, ppTaskInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackgroundServiceAgentInfo.call(this, bsaid, ppTaskInfo)
    end
    def get_AllLiveTileJobs(this : IPMEnumerationManager*, ppLiveTileJobEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllLiveTileJobs.call(this, ppLiveTileJobEnum)
    end
    def get_LiveTileJob(this : IPMEnumerationManager*, product_id : LibC::GUID, tile_id : Win32cr::Foundation::BSTR, recurrence_type : Win32cr::System::ApplicationInstallationAndServicing::PM_LIVETILE_RECURRENCE_TYPE, ppLiveTileJobInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LiveTileJob.call(this, product_id, tile_id, recurrence_type, ppLiveTileJobInfo)
    end
    def get_ApplicationInfoExternal(this : IPMEnumerationManager*, product_id : LibC::GUID, ppAppInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ApplicationInfoExternal.call(this, product_id, ppAppInfo)
    end
    def get_FileHandlerGenericLogo(this : IPMEnumerationManager*, file_type : Win32cr::Foundation::BSTR, logo_size : Win32cr::System::ApplicationInstallationAndServicing::PM_LOGO_SIZE, pLogo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileHandlerGenericLogo.call(this, file_type, logo_size, pLogo)
    end
    def get_ApplicationInfoFromAccessClaims(this : IPMEnumerationManager*, sys_app_id0 : Win32cr::Foundation::BSTR, sys_app_id1 : Win32cr::Foundation::BSTR, ppAppInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ApplicationInfoFromAccessClaims.call(this, sys_app_id0, sys_app_id1, ppAppInfo)
    end
    def get_StartTileEnumeratorBlob(this : IPMEnumerationManager*, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, pcTiles : UInt32*, ppTileBlobs : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTTILEBLOB**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTileEnumeratorBlob.call(this, filter, pcTiles, ppTileBlobs)
    end
    def get_StartAppEnumeratorBlob(this : IPMEnumerationManager*, filter : Win32cr::System::ApplicationInstallationAndServicing::PM_ENUM_FILTER, pcApps : UInt32*, ppAppBlobs : Win32cr::System::ApplicationInstallationAndServicing::PM_STARTAPPBLOB**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartAppEnumeratorBlob.call(this, filter, pcApps, ppAppBlobs)
    end

  end

  @[Extern]
  record IPMTaskInfoVtbl,
    query_interface : Proc(IPMTaskInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTaskInfo*, UInt32),
    release : Proc(IPMTaskInfo*, UInt32),
    get_ProductID : Proc(IPMTaskInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_TaskID : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NavigationPage : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TaskTransition : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TRANSITION*, Win32cr::Foundation::HRESULT),
    get_RuntimeType : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PACKMAN_RUNTIME*, Win32cr::Foundation::HRESULT),
    get_ActivationPolicy : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_ACTIVATION_POLICY*, Win32cr::Foundation::HRESULT),
    get_TaskType : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE*, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ImagePath : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ImageParams : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InstallRootFolder : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DataRootFolder : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsSingleInstanceHost : Proc(IPMTaskInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsInteropEnabled : Proc(IPMTaskInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_ApplicationState : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE*, Win32cr::Foundation::HRESULT),
    get_InstallType : Proc(IPMTaskInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE*, Win32cr::Foundation::HRESULT),
    get_Version : Proc(IPMTaskInfo*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT),
    get_BitsPerPixel : Proc(IPMTaskInfo*, UInt16*, Win32cr::Foundation::HRESULT),
    get_SuppressesDehydration : Proc(IPMTaskInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_BackgroundExecutionAbilities : Proc(IPMTaskInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsOptedForExtendedMem : Proc(IPMTaskInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTaskInfo, lpVtbl : IPMTaskInfoVtbl* do
    GUID = LibC::GUID.new(0xbf1d8c33_u32, 0x1bf5_u16, 0x4ee0_u16, StaticArray[0xb5_u8, 0x49_u8, 0x6b_u8, 0x9d_u8, 0xd3_u8, 0x83_u8, 0x49_u8, 0x42_u8])
    def query_interface(this : IPMTaskInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTaskInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTaskInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMTaskInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_TaskID(this : IPMTaskInfo*, pTaskID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskID.call(this, pTaskID)
    end
    def get_NavigationPage(this : IPMTaskInfo*, pNavigationPage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NavigationPage.call(this, pNavigationPage)
    end
    def get_TaskTransition(this : IPMTaskInfo*, pTaskTransition : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TRANSITION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskTransition.call(this, pTaskTransition)
    end
    def get_RuntimeType(this : IPMTaskInfo*, pRuntimetype : Win32cr::System::ApplicationInstallationAndServicing::PACKMAN_RUNTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RuntimeType.call(this, pRuntimetype)
    end
    def get_ActivationPolicy(this : IPMTaskInfo*, pActivationPolicy : Win32cr::System::ApplicationInstallationAndServicing::PM_ACTIVATION_POLICY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ActivationPolicy.call(this, pActivationPolicy)
    end
    def get_TaskType(this : IPMTaskInfo*, pTaskType : Win32cr::System::ApplicationInstallationAndServicing::PM_TASK_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskType.call(this, pTaskType)
    end
    def get_InvocationInfo(this : IPMTaskInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end
    def get_ImagePath(this : IPMTaskInfo*, pImagePath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImagePath.call(this, pImagePath)
    end
    def get_ImageParams(this : IPMTaskInfo*, pImageParams : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImageParams.call(this, pImageParams)
    end
    def get_InstallRootFolder(this : IPMTaskInfo*, pInstallRootFolder : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InstallRootFolder.call(this, pInstallRootFolder)
    end
    def get_DataRootFolder(this : IPMTaskInfo*, pDataRootFolder : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataRootFolder.call(this, pDataRootFolder)
    end
    def get_IsSingleInstanceHost(this : IPMTaskInfo*, pIsSingleInstanceHost : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSingleInstanceHost.call(this, pIsSingleInstanceHost)
    end
    def get_IsInteropEnabled(this : IPMTaskInfo*, pIsInteropEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsInteropEnabled.call(this, pIsInteropEnabled)
    end
    def get_ApplicationState(this : IPMTaskInfo*, pApplicationState : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ApplicationState.call(this, pApplicationState)
    end
    def get_InstallType(this : IPMTaskInfo*, pInstallType : Win32cr::System::ApplicationInstallationAndServicing::PM_APPLICATION_INSTALL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InstallType.call(this, pInstallType)
    end
    def get_Version(this : IPMTaskInfo*, pTargetMajorVersion : UInt8*, pTargetMinorVersion : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, pTargetMajorVersion, pTargetMinorVersion)
    end
    def get_BitsPerPixel(this : IPMTaskInfo*, pBitsPerPixel : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitsPerPixel.call(this, pBitsPerPixel)
    end
    def get_SuppressesDehydration(this : IPMTaskInfo*, pSuppressesDehydration : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressesDehydration.call(this, pSuppressesDehydration)
    end
    def get_BackgroundExecutionAbilities(this : IPMTaskInfo*, pBackgroundExecutionAbilities : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackgroundExecutionAbilities.call(this, pBackgroundExecutionAbilities)
    end
    def get_IsOptedForExtendedMem(this : IPMTaskInfo*, pIsOptedIn : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsOptedForExtendedMem.call(this, pIsOptedIn)
    end

  end

  @[Extern]
  record IPMTaskInfoEnumeratorVtbl,
    query_interface : Proc(IPMTaskInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMTaskInfoEnumerator*, UInt32),
    release : Proc(IPMTaskInfoEnumerator*, UInt32),
    get_Next : Proc(IPMTaskInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMTaskInfoEnumerator, lpVtbl : IPMTaskInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x630b0f8_u32, 0xbbc_u16, 0x4821_u16, StaticArray[0xbe_u8, 0x74_u8, 0xc7_u8, 0x99_u8, 0x51_u8, 0x66_u8, 0xed_u8, 0x2a_u8])
    def query_interface(this : IPMTaskInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMTaskInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMTaskInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMTaskInfoEnumerator*, ppTaskInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppTaskInfo)
    end

  end

  @[Extern]
  record IPMExtensionInfoVtbl,
    query_interface : Proc(IPMExtensionInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionInfo*, UInt32),
    release : Proc(IPMExtensionInfo*, UInt32),
    get_SupplierPID : Proc(IPMExtensionInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_SupplierTaskID : Proc(IPMExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IPMExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IconPath : Proc(IPMExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ExtraFile : Proc(IPMExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionInfo, lpVtbl : IPMExtensionInfoVtbl* do
    GUID = LibC::GUID.new(0x49acde79_u32, 0x9788_u16, 0x4d0a_u16, StaticArray[0x8a_u8, 0xa0_u8, 0x17_u8, 0x46_u8, 0xaf_u8, 0xdb_u8, 0x9e_u8, 0x9d_u8])
    def query_interface(this : IPMExtensionInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SupplierPID(this : IPMExtensionInfo*, pSupplierPID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupplierPID.call(this, pSupplierPID)
    end
    def get_SupplierTaskID(this : IPMExtensionInfo*, pSupplierTID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupplierTaskID.call(this, pSupplierTID)
    end
    def get_Title(this : IPMExtensionInfo*, pTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, pTitle)
    end
    def get_IconPath(this : IPMExtensionInfo*, pIconPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IconPath.call(this, pIconPath)
    end
    def get_ExtraFile(this : IPMExtensionInfo*, pFilePath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExtraFile.call(this, pFilePath)
    end
    def get_InvocationInfo(this : IPMExtensionInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end

  end

  @[Extern]
  record IPMExtensionFileExtensionInfoVtbl,
    query_interface : Proc(IPMExtensionFileExtensionInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionFileExtensionInfo*, UInt32),
    release : Proc(IPMExtensionFileExtensionInfo*, UInt32),
    get_Name : Proc(IPMExtensionFileExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DisplayName : Proc(IPMExtensionFileExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Logo : Proc(IPMExtensionFileExtensionInfo*, Win32cr::System::ApplicationInstallationAndServicing::PM_LOGO_SIZE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ContentType : Proc(IPMExtensionFileExtensionInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FileType : Proc(IPMExtensionFileExtensionInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMExtensionFileExtensionInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AllFileTypes : Proc(IPMExtensionFileExtensionInfo*, UInt32*, Win32cr::Foundation::BSTR**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionFileExtensionInfo, lpVtbl : IPMExtensionFileExtensionInfoVtbl* do
    GUID = LibC::GUID.new(0x6b87cb6c_u32, 0xb88_u16, 0x4989_u16, StaticArray[0xa4_u8, 0xec_u8, 0x3_u8, 0x37_u8, 0x14_u8, 0xf7_u8, 0x10_u8, 0xd4_u8])
    def query_interface(this : IPMExtensionFileExtensionInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionFileExtensionInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionFileExtensionInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Name(this : IPMExtensionFileExtensionInfo*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pName)
    end
    def get_DisplayName(this : IPMExtensionFileExtensionInfo*, pDisplayName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayName.call(this, pDisplayName)
    end
    def get_Logo(this : IPMExtensionFileExtensionInfo*, logo_size : Win32cr::System::ApplicationInstallationAndServicing::PM_LOGO_SIZE, pLogo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Logo.call(this, logo_size, pLogo)
    end
    def get_ContentType(this : IPMExtensionFileExtensionInfo*, file_type : Win32cr::Foundation::BSTR, pContentType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContentType.call(this, file_type, pContentType)
    end
    def get_FileType(this : IPMExtensionFileExtensionInfo*, content_type : Win32cr::Foundation::BSTR, pFileType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileType.call(this, content_type, pFileType)
    end
    def get_InvocationInfo(this : IPMExtensionFileExtensionInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end
    def get_AllFileTypes(this : IPMExtensionFileExtensionInfo*, pcbTypes : UInt32*, ppTypes : Win32cr::Foundation::BSTR**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllFileTypes.call(this, pcbTypes, ppTypes)
    end

  end

  @[Extern]
  record IPMExtensionProtocolInfoVtbl,
    query_interface : Proc(IPMExtensionProtocolInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionProtocolInfo*, UInt32),
    release : Proc(IPMExtensionProtocolInfo*, UInt32),
    get_Protocol : Proc(IPMExtensionProtocolInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InvocationInfo : Proc(IPMExtensionProtocolInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionProtocolInfo, lpVtbl : IPMExtensionProtocolInfoVtbl* do
    GUID = LibC::GUID.new(0x1e3fa036_u32, 0x51eb_u16, 0x4453_u16, StaticArray[0xba_u8, 0xff_u8, 0xb8_u8, 0xd8_u8, 0xe4_u8, 0xb4_u8, 0x6c_u8, 0x8e_u8])
    def query_interface(this : IPMExtensionProtocolInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionProtocolInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionProtocolInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Protocol(this : IPMExtensionProtocolInfo*, pProtocol : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Protocol.call(this, pProtocol)
    end
    def get_InvocationInfo(this : IPMExtensionProtocolInfo*, pImageUrn : Win32cr::Foundation::BSTR*, pParameters : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pImageUrn, pParameters)
    end

  end

  @[Extern]
  record IPMExtensionShareTargetInfoVtbl,
    query_interface : Proc(IPMExtensionShareTargetInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionShareTargetInfo*, UInt32),
    release : Proc(IPMExtensionShareTargetInfo*, UInt32),
    get_AllFileTypes : Proc(IPMExtensionShareTargetInfo*, UInt32*, Win32cr::Foundation::BSTR**, Win32cr::Foundation::HRESULT),
    get_AllDataFormats : Proc(IPMExtensionShareTargetInfo*, UInt32*, Win32cr::Foundation::BSTR**, Win32cr::Foundation::HRESULT),
    get_SupportsAllFileTypes : Proc(IPMExtensionShareTargetInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionShareTargetInfo, lpVtbl : IPMExtensionShareTargetInfoVtbl* do
    GUID = LibC::GUID.new(0x5471f48b_u32, 0xc65c_u16, 0x4656_u16, StaticArray[0x8c_u8, 0x70_u8, 0x24_u8, 0x2e_u8, 0x31_u8, 0x19_u8, 0x5f_u8, 0xea_u8])
    def query_interface(this : IPMExtensionShareTargetInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionShareTargetInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionShareTargetInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AllFileTypes(this : IPMExtensionShareTargetInfo*, pcTypes : UInt32*, ppTypes : Win32cr::Foundation::BSTR**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllFileTypes.call(this, pcTypes, ppTypes)
    end
    def get_AllDataFormats(this : IPMExtensionShareTargetInfo*, pcDataFormats : UInt32*, ppDataFormats : Win32cr::Foundation::BSTR**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllDataFormats.call(this, pcDataFormats, ppDataFormats)
    end
    def get_SupportsAllFileTypes(this : IPMExtensionShareTargetInfo*, pSupportsAllTypes : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportsAllFileTypes.call(this, pSupportsAllTypes)
    end

  end

  @[Extern]
  record IPMExtensionContractInfoVtbl,
    query_interface : Proc(IPMExtensionContractInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionContractInfo*, UInt32),
    release : Proc(IPMExtensionContractInfo*, UInt32),
    get_InvocationInfo : Proc(IPMExtensionContractInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionContractInfo, lpVtbl : IPMExtensionContractInfoVtbl* do
    GUID = LibC::GUID.new(0xe5666373_u32, 0x7ba1_u16, 0x467c_u16, StaticArray[0xb8_u8, 0x19_u8, 0xb1_u8, 0x75_u8, 0xdb_u8, 0x1c_u8, 0x29_u8, 0x5b_u8])
    def query_interface(this : IPMExtensionContractInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionContractInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionContractInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_InvocationInfo(this : IPMExtensionContractInfo*, pAUMID : Win32cr::Foundation::BSTR*, pArgs : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InvocationInfo.call(this, pAUMID, pArgs)
    end

  end

  @[Extern]
  record IPMExtensionFileOpenPickerInfoVtbl,
    query_interface : Proc(IPMExtensionFileOpenPickerInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionFileOpenPickerInfo*, UInt32),
    release : Proc(IPMExtensionFileOpenPickerInfo*, UInt32),
    get_AllFileTypes : Proc(IPMExtensionFileOpenPickerInfo*, UInt32*, Win32cr::Foundation::BSTR**, Win32cr::Foundation::HRESULT),
    get_SupportsAllFileTypes : Proc(IPMExtensionFileOpenPickerInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionFileOpenPickerInfo, lpVtbl : IPMExtensionFileOpenPickerInfoVtbl* do
    GUID = LibC::GUID.new(0x6dc91d25_u32, 0x9606_u16, 0x420c_u16, StaticArray[0x9a_u8, 0x78_u8, 0xe0_u8, 0x34_u8, 0xa3_u8, 0x41_u8, 0x83_u8, 0x45_u8])
    def query_interface(this : IPMExtensionFileOpenPickerInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionFileOpenPickerInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionFileOpenPickerInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AllFileTypes(this : IPMExtensionFileOpenPickerInfo*, pcTypes : UInt32*, ppTypes : Win32cr::Foundation::BSTR**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllFileTypes.call(this, pcTypes, ppTypes)
    end
    def get_SupportsAllFileTypes(this : IPMExtensionFileOpenPickerInfo*, pSupportsAllTypes : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportsAllFileTypes.call(this, pSupportsAllTypes)
    end

  end

  @[Extern]
  record IPMExtensionFileSavePickerInfoVtbl,
    query_interface : Proc(IPMExtensionFileSavePickerInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionFileSavePickerInfo*, UInt32),
    release : Proc(IPMExtensionFileSavePickerInfo*, UInt32),
    get_AllFileTypes : Proc(IPMExtensionFileSavePickerInfo*, UInt32*, Win32cr::Foundation::BSTR**, Win32cr::Foundation::HRESULT),
    get_SupportsAllFileTypes : Proc(IPMExtensionFileSavePickerInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionFileSavePickerInfo, lpVtbl : IPMExtensionFileSavePickerInfoVtbl* do
    GUID = LibC::GUID.new(0x38005cba_u32, 0xf81a_u16, 0x493e_u16, StaticArray[0xa0_u8, 0xf8_u8, 0x92_u8, 0x2c_u8, 0x86_u8, 0x80_u8, 0xda_u8, 0x43_u8])
    def query_interface(this : IPMExtensionFileSavePickerInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionFileSavePickerInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionFileSavePickerInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AllFileTypes(this : IPMExtensionFileSavePickerInfo*, pcTypes : UInt32*, ppTypes : Win32cr::Foundation::BSTR**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AllFileTypes.call(this, pcTypes, ppTypes)
    end
    def get_SupportsAllFileTypes(this : IPMExtensionFileSavePickerInfo*, pSupportsAllTypes : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportsAllFileTypes.call(this, pSupportsAllTypes)
    end

  end

  @[Extern]
  record IPMExtensionCachedFileUpdaterInfoVtbl,
    query_interface : Proc(IPMExtensionCachedFileUpdaterInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionCachedFileUpdaterInfo*, UInt32),
    release : Proc(IPMExtensionCachedFileUpdaterInfo*, UInt32),
    get_SupportsUpdates : Proc(IPMExtensionCachedFileUpdaterInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionCachedFileUpdaterInfo, lpVtbl : IPMExtensionCachedFileUpdaterInfoVtbl* do
    GUID = LibC::GUID.new(0xe2d77509_u32, 0x4e58_u16, 0x4ba9_u16, StaticArray[0xaf_u8, 0x7e_u8, 0xb6_u8, 0x42_u8, 0xe3_u8, 0x70_u8, 0xe1_u8, 0xb0_u8])
    def query_interface(this : IPMExtensionCachedFileUpdaterInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionCachedFileUpdaterInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionCachedFileUpdaterInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SupportsUpdates(this : IPMExtensionCachedFileUpdaterInfo*, pSupportsUpdates : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportsUpdates.call(this, pSupportsUpdates)
    end

  end

  @[Extern]
  record IPMExtensionInfoEnumeratorVtbl,
    query_interface : Proc(IPMExtensionInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMExtensionInfoEnumerator*, UInt32),
    release : Proc(IPMExtensionInfoEnumerator*, UInt32),
    get_Next : Proc(IPMExtensionInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMExtensionInfoEnumerator, lpVtbl : IPMExtensionInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x403b9e82_u32, 0x1171_u16, 0x4573_u16, StaticArray[0x8e_u8, 0x6f_u8, 0x6f_u8, 0x33_u8, 0xf3_u8, 0x9b_u8, 0x83_u8, 0xdd_u8])
    def query_interface(this : IPMExtensionInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMExtensionInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMExtensionInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMExtensionInfoEnumerator*, ppExtensionInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppExtensionInfo)
    end

  end

  @[Extern]
  record IPMBackgroundServiceAgentInfoVtbl,
    query_interface : Proc(IPMBackgroundServiceAgentInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMBackgroundServiceAgentInfo*, UInt32),
    release : Proc(IPMBackgroundServiceAgentInfo*, UInt32),
    get_ProductID : Proc(IPMBackgroundServiceAgentInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_TaskID : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BSAID : Proc(IPMBackgroundServiceAgentInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BGSpecifier : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BGName : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BGSource : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BGType : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsPeriodic : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsScheduled : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsScheduleAllowed : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsLaunchOnBoot : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_IsScheduled : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_IsScheduleAllowed : Proc(IPMBackgroundServiceAgentInfo*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMBackgroundServiceAgentInfo, lpVtbl : IPMBackgroundServiceAgentInfoVtbl* do
    GUID = LibC::GUID.new(0x3a8b46da_u32, 0x928c_u16, 0x4879_u16, StaticArray[0x99_u8, 0x8c_u8, 0x9_u8, 0xdc_u8, 0x96_u8, 0xf3_u8, 0xd4_u8, 0x90_u8])
    def query_interface(this : IPMBackgroundServiceAgentInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMBackgroundServiceAgentInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMBackgroundServiceAgentInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMBackgroundServiceAgentInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_TaskID(this : IPMBackgroundServiceAgentInfo*, pTaskID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskID.call(this, pTaskID)
    end
    def get_BSAID(this : IPMBackgroundServiceAgentInfo*, pBSAID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BSAID.call(this, pBSAID)
    end
    def get_BGSpecifier(this : IPMBackgroundServiceAgentInfo*, pBGSpecifier : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BGSpecifier.call(this, pBGSpecifier)
    end
    def get_BGName(this : IPMBackgroundServiceAgentInfo*, pBGName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BGName.call(this, pBGName)
    end
    def get_BGSource(this : IPMBackgroundServiceAgentInfo*, pBGSource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BGSource.call(this, pBGSource)
    end
    def get_BGType(this : IPMBackgroundServiceAgentInfo*, pBGType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BGType.call(this, pBGType)
    end
    def get_IsPeriodic(this : IPMBackgroundServiceAgentInfo*, pIsPeriodic : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsPeriodic.call(this, pIsPeriodic)
    end
    def get_IsScheduled(this : IPMBackgroundServiceAgentInfo*, pIsScheduled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsScheduled.call(this, pIsScheduled)
    end
    def get_IsScheduleAllowed(this : IPMBackgroundServiceAgentInfo*, pIsScheduleAllowed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsScheduleAllowed.call(this, pIsScheduleAllowed)
    end
    def get_Description(this : IPMBackgroundServiceAgentInfo*, pDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pDescription)
    end
    def get_IsLaunchOnBoot(this : IPMBackgroundServiceAgentInfo*, pLaunchOnBoot : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsLaunchOnBoot.call(this, pLaunchOnBoot)
    end
    def set_IsScheduled(this : IPMBackgroundServiceAgentInfo*, is_scheduled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IsScheduled.call(this, is_scheduled)
    end
    def set_IsScheduleAllowed(this : IPMBackgroundServiceAgentInfo*, is_schedule_allowed : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_IsScheduleAllowed.call(this, is_schedule_allowed)
    end

  end

  @[Extern]
  record IPMBackgroundWorkerInfoVtbl,
    query_interface : Proc(IPMBackgroundWorkerInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMBackgroundWorkerInfo*, UInt32),
    release : Proc(IPMBackgroundWorkerInfo*, UInt32),
    get_ProductID : Proc(IPMBackgroundWorkerInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_TaskID : Proc(IPMBackgroundWorkerInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BGName : Proc(IPMBackgroundWorkerInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MaxStartupLatency : Proc(IPMBackgroundWorkerInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ExpectedRuntime : Proc(IPMBackgroundWorkerInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsBootWorker : Proc(IPMBackgroundWorkerInfo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMBackgroundWorkerInfo, lpVtbl : IPMBackgroundWorkerInfoVtbl* do
    GUID = LibC::GUID.new(0x7dd4531b_u32, 0xd3bf_u16, 0x4b6b_u16, StaticArray[0x94_u8, 0xf3_u8, 0x69_u8, 0xc0_u8, 0x98_u8, 0xb1_u8, 0x49_u8, 0x7d_u8])
    def query_interface(this : IPMBackgroundWorkerInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMBackgroundWorkerInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMBackgroundWorkerInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ProductID(this : IPMBackgroundWorkerInfo*, pProductID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductID.call(this, pProductID)
    end
    def get_TaskID(this : IPMBackgroundWorkerInfo*, pTaskID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TaskID.call(this, pTaskID)
    end
    def get_BGName(this : IPMBackgroundWorkerInfo*, pBGName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BGName.call(this, pBGName)
    end
    def get_MaxStartupLatency(this : IPMBackgroundWorkerInfo*, pMaxStartupLatency : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxStartupLatency.call(this, pMaxStartupLatency)
    end
    def get_ExpectedRuntime(this : IPMBackgroundWorkerInfo*, pExpectedRuntime : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExpectedRuntime.call(this, pExpectedRuntime)
    end
    def get_IsBootWorker(this : IPMBackgroundWorkerInfo*, pIsBootWorker : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsBootWorker.call(this, pIsBootWorker)
    end

  end

  @[Extern]
  record IPMBackgroundServiceAgentInfoEnumeratorVtbl,
    query_interface : Proc(IPMBackgroundServiceAgentInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMBackgroundServiceAgentInfoEnumerator*, UInt32),
    release : Proc(IPMBackgroundServiceAgentInfoEnumerator*, UInt32),
    get_Next : Proc(IPMBackgroundServiceAgentInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMBackgroundServiceAgentInfoEnumerator, lpVtbl : IPMBackgroundServiceAgentInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x18eb2072_u32, 0xab56_u16, 0x43b3_u16, StaticArray[0x87_u8, 0x2c_u8, 0xbe_u8, 0xaf_u8, 0xb7_u8, 0xa6_u8, 0xb3_u8, 0x91_u8])
    def query_interface(this : IPMBackgroundServiceAgentInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMBackgroundServiceAgentInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMBackgroundServiceAgentInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMBackgroundServiceAgentInfoEnumerator*, ppBSAInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppBSAInfo)
    end

  end

  @[Extern]
  record IPMBackgroundWorkerInfoEnumeratorVtbl,
    query_interface : Proc(IPMBackgroundWorkerInfoEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMBackgroundWorkerInfoEnumerator*, UInt32),
    release : Proc(IPMBackgroundWorkerInfoEnumerator*, UInt32),
    get_Next : Proc(IPMBackgroundWorkerInfoEnumerator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPMBackgroundWorkerInfoEnumerator, lpVtbl : IPMBackgroundWorkerInfoEnumeratorVtbl* do
    GUID = LibC::GUID.new(0x87f479f8_u32, 0x90d8_u16, 0x4ec7_u16, StaticArray[0x92_u8, 0xb9_u8, 0x72_u8, 0x78_u8, 0x7e_u8, 0x2f_u8, 0x63_u8, 0x6b_u8])
    def query_interface(this : IPMBackgroundWorkerInfoEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMBackgroundWorkerInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMBackgroundWorkerInfoEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Next(this : IPMBackgroundWorkerInfoEnumerator*, ppBWInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Next.call(this, ppBWInfo)
    end

  end

  def msiCloseHandle(hAny : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiCloseHandle(hAny)
  end

  def msiCloseAllHandles : UInt32
    C.MsiCloseAllHandles
  end

  def msiSetInternalUI(dwUILevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUILEVEL, phWnd : Win32cr::Foundation::HWND*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUILEVEL
    C.MsiSetInternalUI(dwUILevel, phWnd)
  end

  def msiSetExternalUIA(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERA, dwMessageFilter : UInt32, pvContext : Void*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERA
    C.MsiSetExternalUIA(puiHandler, dwMessageFilter, pvContext)
  end

  def msiSetExternalUIW(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERW, dwMessageFilter : UInt32, pvContext : Void*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERW
    C.MsiSetExternalUIW(puiHandler, dwMessageFilter, pvContext)
  end

  def msiSetExternalUIRecord(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::PINSTALLUI_HANDLER_RECORD, dwMessageFilter : UInt32, pvContext : Void*, ppuiPrevHandler : Win32cr::System::ApplicationInstallationAndServicing::PINSTALLUI_HANDLER_RECORD) : UInt32
    C.MsiSetExternalUIRecord(puiHandler, dwMessageFilter, pvContext, ppuiPrevHandler)
  end

  def msiEnableLogA(dwLogMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLOGMODE, szLogFile : Win32cr::Foundation::PSTR, dwLogAttributes : UInt32) : UInt32
    C.MsiEnableLogA(dwLogMode, szLogFile, dwLogAttributes)
  end

  def msiEnableLogW(dwLogMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLOGMODE, szLogFile : Win32cr::Foundation::PWSTR, dwLogAttributes : UInt32) : UInt32
    C.MsiEnableLogW(dwLogMode, szLogFile, dwLogAttributes)
  end

  def msiQueryProductStateA(szProduct : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiQueryProductStateA(szProduct)
  end

  def msiQueryProductStateW(szProduct : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiQueryProductStateW(szProduct)
  end

  def msiGetProductInfoA(szProduct : Win32cr::Foundation::PSTR, szAttribute : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetProductInfoA(szProduct, szAttribute, lpValueBuf, pcchValueBuf)
  end

  def msiGetProductInfoW(szProduct : Win32cr::Foundation::PWSTR, szAttribute : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetProductInfoW(szProduct, szAttribute, lpValueBuf, pcchValueBuf)
  end

  def msiGetProductInfoExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PSTR, szValue : UInt8*, pcchValue : UInt32*) : UInt32
    C.MsiGetProductInfoExA(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue)
  end

  def msiGetProductInfoExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PWSTR, szValue : UInt16*, pcchValue : UInt32*) : UInt32
    C.MsiGetProductInfoExW(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue)
  end

  def msiInstallProductA(szPackagePath : Win32cr::Foundation::PSTR, szCommandLine : Win32cr::Foundation::PSTR) : UInt32
    C.MsiInstallProductA(szPackagePath, szCommandLine)
  end

  def msiInstallProductW(szPackagePath : Win32cr::Foundation::PWSTR, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiInstallProductW(szPackagePath, szCommandLine)
  end

  def msiConfigureProductA(szProduct : Win32cr::Foundation::PSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiConfigureProductA(szProduct, iInstallLevel, eInstallState)
  end

  def msiConfigureProductW(szProduct : Win32cr::Foundation::PWSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiConfigureProductW(szProduct, iInstallLevel, eInstallState)
  end

  def msiConfigureProductExA(szProduct : Win32cr::Foundation::PSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szCommandLine : Win32cr::Foundation::PSTR) : UInt32
    C.MsiConfigureProductExA(szProduct, iInstallLevel, eInstallState, szCommandLine)
  end

  def msiConfigureProductExW(szProduct : Win32cr::Foundation::PWSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiConfigureProductExW(szProduct, iInstallLevel, eInstallState, szCommandLine)
  end

  def msiReinstallProductA(szProduct : Win32cr::Foundation::PSTR, szReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32
    C.MsiReinstallProductA(szProduct, szReinstallMode)
  end

  def msiReinstallProductW(szProduct : Win32cr::Foundation::PWSTR, szReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32
    C.MsiReinstallProductW(szProduct, szReinstallMode)
  end

  def msiAdvertiseProductExA(szPackagePath : Win32cr::Foundation::PSTR, szScriptfilePath : Win32cr::Foundation::PSTR, szTransforms : Win32cr::Foundation::PSTR, lgidLanguage : UInt16, dwPlatform : UInt32, dwOptions : UInt32) : UInt32
    C.MsiAdvertiseProductExA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions)
  end

  def msiAdvertiseProductExW(szPackagePath : Win32cr::Foundation::PWSTR, szScriptfilePath : Win32cr::Foundation::PWSTR, szTransforms : Win32cr::Foundation::PWSTR, lgidLanguage : UInt16, dwPlatform : UInt32, dwOptions : UInt32) : UInt32
    C.MsiAdvertiseProductExW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions)
  end

  def msiAdvertiseProductA(szPackagePath : Win32cr::Foundation::PSTR, szScriptfilePath : Win32cr::Foundation::PSTR, szTransforms : Win32cr::Foundation::PSTR, lgidLanguage : UInt16) : UInt32
    C.MsiAdvertiseProductA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage)
  end

  def msiAdvertiseProductW(szPackagePath : Win32cr::Foundation::PWSTR, szScriptfilePath : Win32cr::Foundation::PWSTR, szTransforms : Win32cr::Foundation::PWSTR, lgidLanguage : UInt16) : UInt32
    C.MsiAdvertiseProductW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage)
  end

  def msiProcessAdvertiseScriptA(szScriptFile : Win32cr::Foundation::PSTR, szIconFolder : Win32cr::Foundation::PSTR, hRegData : Win32cr::System::Registry::HKEY, fShortcuts : Win32cr::Foundation::BOOL, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32
    C.MsiProcessAdvertiseScriptA(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems)
  end

  def msiProcessAdvertiseScriptW(szScriptFile : Win32cr::Foundation::PWSTR, szIconFolder : Win32cr::Foundation::PWSTR, hRegData : Win32cr::System::Registry::HKEY, fShortcuts : Win32cr::Foundation::BOOL, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32
    C.MsiProcessAdvertiseScriptW(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems)
  end

  def msiAdvertiseScriptA(szScriptFile : Win32cr::Foundation::PSTR, dwFlags : UInt32, phRegData : Win32cr::System::Registry::HKEY*, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32
    C.MsiAdvertiseScriptA(szScriptFile, dwFlags, phRegData, fRemoveItems)
  end

  def msiAdvertiseScriptW(szScriptFile : Win32cr::Foundation::PWSTR, dwFlags : UInt32, phRegData : Win32cr::System::Registry::HKEY*, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32
    C.MsiAdvertiseScriptW(szScriptFile, dwFlags, phRegData, fRemoveItems)
  end

  def msiGetProductInfoFromScriptA(szScriptFile : Win32cr::Foundation::PSTR, lpProductBuf39 : Win32cr::Foundation::PSTR, plgidLanguage : UInt16*, pdwVersion : UInt32*, lpNameBuf : UInt8*, pcchNameBuf : UInt32*, lpPackageBuf : UInt8*, pcchPackageBuf : UInt32*) : UInt32
    C.MsiGetProductInfoFromScriptA(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf)
  end

  def msiGetProductInfoFromScriptW(szScriptFile : Win32cr::Foundation::PWSTR, lpProductBuf39 : Win32cr::Foundation::PWSTR, plgidLanguage : UInt16*, pdwVersion : UInt32*, lpNameBuf : UInt16*, pcchNameBuf : UInt32*, lpPackageBuf : UInt16*, pcchPackageBuf : UInt32*) : UInt32
    C.MsiGetProductInfoFromScriptW(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf)
  end

  def msiGetProductCodeA(szComponent : Win32cr::Foundation::PSTR, lpBuf39 : Win32cr::Foundation::PSTR) : UInt32
    C.MsiGetProductCodeA(szComponent, lpBuf39)
  end

  def msiGetProductCodeW(szComponent : Win32cr::Foundation::PWSTR, lpBuf39 : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiGetProductCodeW(szComponent, lpBuf39)
  end

  def msiGetUserInfoA(szProduct : Win32cr::Foundation::PSTR, lpUserNameBuf : UInt8*, pcchUserNameBuf : UInt32*, lpOrgNameBuf : UInt8*, pcchOrgNameBuf : UInt32*, lpSerialBuf : UInt8*, pcchSerialBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::USERINFOSTATE
    C.MsiGetUserInfoA(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf)
  end

  def msiGetUserInfoW(szProduct : Win32cr::Foundation::PWSTR, lpUserNameBuf : UInt16*, pcchUserNameBuf : UInt32*, lpOrgNameBuf : UInt16*, pcchOrgNameBuf : UInt32*, lpSerialBuf : UInt16*, pcchSerialBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::USERINFOSTATE
    C.MsiGetUserInfoW(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf)
  end

  def msiCollectUserInfoA(szProduct : Win32cr::Foundation::PSTR) : UInt32
    C.MsiCollectUserInfoA(szProduct)
  end

  def msiCollectUserInfoW(szProduct : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiCollectUserInfoW(szProduct)
  end

  def msiApplyPatchA(szPatchPackage : Win32cr::Foundation::PSTR, szInstallPackage : Win32cr::Foundation::PSTR, eInstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szCommandLine : Win32cr::Foundation::PSTR) : UInt32
    C.MsiApplyPatchA(szPatchPackage, szInstallPackage, eInstallType, szCommandLine)
  end

  def msiApplyPatchW(szPatchPackage : Win32cr::Foundation::PWSTR, szInstallPackage : Win32cr::Foundation::PWSTR, eInstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiApplyPatchW(szPatchPackage, szInstallPackage, eInstallType, szCommandLine)
  end

  def msiGetPatchInfoA(szPatch : Win32cr::Foundation::PSTR, szAttribute : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetPatchInfoA(szPatch, szAttribute, lpValueBuf, pcchValueBuf)
  end

  def msiGetPatchInfoW(szPatch : Win32cr::Foundation::PWSTR, szAttribute : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetPatchInfoW(szPatch, szAttribute, lpValueBuf, pcchValueBuf)
  end

  def msiEnumPatchesA(szProduct : Win32cr::Foundation::PSTR, iPatchIndex : UInt32, lpPatchBuf : Win32cr::Foundation::PSTR, lpTransformsBuf : UInt8*, pcchTransformsBuf : UInt32*) : UInt32
    C.MsiEnumPatchesA(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf)
  end

  def msiEnumPatchesW(szProduct : Win32cr::Foundation::PWSTR, iPatchIndex : UInt32, lpPatchBuf : Win32cr::Foundation::PWSTR, lpTransformsBuf : UInt16*, pcchTransformsBuf : UInt32*) : UInt32
    C.MsiEnumPatchesW(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf)
  end

  def msiRemovePatchesA(szPatchList : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, eUninstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szPropertyList : Win32cr::Foundation::PSTR) : UInt32
    C.MsiRemovePatchesA(szPatchList, szProductCode, eUninstallType, szPropertyList)
  end

  def msiRemovePatchesW(szPatchList : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, eUninstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szPropertyList : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiRemovePatchesW(szPatchList, szProductCode, eUninstallType, szPropertyList)
  end

  def msiExtractPatchXMLDataA(szPatchPath : Win32cr::Foundation::PSTR, dwReserved : UInt32, szXMLData : UInt8*, pcchXMLData : UInt32*) : UInt32
    C.MsiExtractPatchXMLDataA(szPatchPath, dwReserved, szXMLData, pcchXMLData)
  end

  def msiExtractPatchXMLDataW(szPatchPath : Win32cr::Foundation::PWSTR, dwReserved : UInt32, szXMLData : UInt16*, pcchXMLData : UInt32*) : UInt32
    C.MsiExtractPatchXMLDataW(szPatchPath, dwReserved, szXMLData, pcchXMLData)
  end

  def msiGetPatchInfoExA(szPatchCode : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PSTR, lpValue : UInt8*, pcchValue : UInt32*) : UInt32
    C.MsiGetPatchInfoExA(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue)
  end

  def msiGetPatchInfoExW(szPatchCode : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PWSTR, lpValue : UInt16*, pcchValue : UInt32*) : UInt32
    C.MsiGetPatchInfoExW(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue)
  end

  def msiApplyMultiplePatchesA(szPatchPackages : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szPropertiesList : Win32cr::Foundation::PSTR) : UInt32
    C.MsiApplyMultiplePatchesA(szPatchPackages, szProductCode, szPropertiesList)
  end

  def msiApplyMultiplePatchesW(szPatchPackages : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szPropertiesList : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiApplyMultiplePatchesW(szPatchPackages, szProductCode, szPropertiesList)
  end

  def msiDeterminePatchSequenceA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOA*) : UInt32
    C.MsiDeterminePatchSequenceA(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo)
  end

  def msiDeterminePatchSequenceW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOW*) : UInt32
    C.MsiDeterminePatchSequenceW(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo)
  end

  def msiDetermineApplicablePatchesA(szProductPackagePath : Win32cr::Foundation::PSTR, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOA*) : UInt32
    C.MsiDetermineApplicablePatchesA(szProductPackagePath, cPatchInfo, pPatchInfo)
  end

  def msiDetermineApplicablePatchesW(szProductPackagePath : Win32cr::Foundation::PWSTR, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOW*) : UInt32
    C.MsiDetermineApplicablePatchesW(szProductPackagePath, cPatchInfo, pPatchInfo)
  end

  def msiEnumPatchesExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwFilter : UInt32, dwIndex : UInt32, szPatchCode : Win32cr::Foundation::PSTR, szTargetProductCode : Win32cr::Foundation::PSTR, pdwTargetProductContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szTargetUserSid : UInt8*, pcchTargetUserSid : UInt32*) : UInt32
    C.MsiEnumPatchesExA(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid)
  end

  def msiEnumPatchesExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwFilter : UInt32, dwIndex : UInt32, szPatchCode : Win32cr::Foundation::PWSTR, szTargetProductCode : Win32cr::Foundation::PWSTR, pdwTargetProductContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szTargetUserSid : UInt16*, pcchTargetUserSid : UInt32*) : UInt32
    C.MsiEnumPatchesExW(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid)
  end

  def msiQueryFeatureStateA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiQueryFeatureStateA(szProduct, szFeature)
  end

  def msiQueryFeatureStateW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiQueryFeatureStateW(szProduct, szFeature)
  end

  def msiQueryFeatureStateExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szFeature : Win32cr::Foundation::PSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiQueryFeatureStateExA(szProductCode, szUserSid, dwContext, szFeature, pdwState)
  end

  def msiQueryFeatureStateExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szFeature : Win32cr::Foundation::PWSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiQueryFeatureStateExW(szProductCode, szUserSid, dwContext, szFeature, pdwState)
  end

  def msiUseFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiUseFeatureA(szProduct, szFeature)
  end

  def msiUseFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiUseFeatureW(szProduct, szFeature)
  end

  def msiUseFeatureExA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, dwInstallMode : UInt32, dwReserved : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiUseFeatureExA(szProduct, szFeature, dwInstallMode, dwReserved)
  end

  def msiUseFeatureExW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, dwInstallMode : UInt32, dwReserved : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiUseFeatureExW(szProduct, szFeature, dwInstallMode, dwReserved)
  end

  def msiGetFeatureUsageA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, pdwUseCount : UInt32*, pwDateUsed : UInt16*) : UInt32
    C.MsiGetFeatureUsageA(szProduct, szFeature, pdwUseCount, pwDateUsed)
  end

  def msiGetFeatureUsageW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, pdwUseCount : UInt32*, pwDateUsed : UInt16*) : UInt32
    C.MsiGetFeatureUsageW(szProduct, szFeature, pdwUseCount, pwDateUsed)
  end

  def msiConfigureFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiConfigureFeatureA(szProduct, szFeature, eInstallState)
  end

  def msiConfigureFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiConfigureFeatureW(szProduct, szFeature, eInstallState)
  end

  def msiReinstallFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, dwReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32
    C.MsiReinstallFeatureA(szProduct, szFeature, dwReinstallMode)
  end

  def msiReinstallFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, dwReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32
    C.MsiReinstallFeatureW(szProduct, szFeature, dwReinstallMode)
  end

  def msiProvideComponentA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideComponentA(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf)
  end

  def msiProvideComponentW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideComponentW(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf)
  end

  def msiProvideQualifiedComponentA(szCategory : Win32cr::Foundation::PSTR, szQualifier : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideQualifiedComponentA(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf)
  end

  def msiProvideQualifiedComponentW(szCategory : Win32cr::Foundation::PWSTR, szQualifier : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideQualifiedComponentW(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf)
  end

  def msiProvideQualifiedComponentExA(szCategory : Win32cr::Foundation::PSTR, szQualifier : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, szProduct : Win32cr::Foundation::PSTR, dwUnused1 : UInt32, dwUnused2 : UInt32, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideQualifiedComponentExA(szCategory, szQualifier, dwInstallMode, szProduct, dwUnused1, dwUnused2, lpPathBuf, pcchPathBuf)
  end

  def msiProvideQualifiedComponentExW(szCategory : Win32cr::Foundation::PWSTR, szQualifier : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, szProduct : Win32cr::Foundation::PWSTR, dwUnused1 : UInt32, dwUnused2 : UInt32, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideQualifiedComponentExW(szCategory, szQualifier, dwInstallMode, szProduct, dwUnused1, dwUnused2, lpPathBuf, pcchPathBuf)
  end

  def msiGetComponentPathA(szProduct : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, lpPathBuf : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiGetComponentPathA(szProduct, szComponent, lpPathBuf, pcchBuf)
  end

  def msiGetComponentPathW(szProduct : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, lpPathBuf : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiGetComponentPathW(szProduct, szComponent, lpPathBuf, pcchBuf)
  end

  def msiGetComponentPathExA(szProductCode : Win32cr::Foundation::PSTR, szComponentCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, lpOutPathBuffer : UInt8*, pcchOutPathBuffer : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiGetComponentPathExA(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer)
  end

  def msiGetComponentPathExW(szProductCode : Win32cr::Foundation::PWSTR, szComponentCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, lpOutPathBuffer : UInt16*, pcchOutPathBuffer : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiGetComponentPathExW(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer)
  end

  def msiProvideAssemblyA(szAssemblyName : Win32cr::Foundation::PSTR, szAppContext : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, dwAssemblyInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIASSEMBLYINFO, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideAssemblyA(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf)
  end

  def msiProvideAssemblyW(szAssemblyName : Win32cr::Foundation::PWSTR, szAppContext : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, dwAssemblyInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIASSEMBLYINFO, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiProvideAssemblyW(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf)
  end

  def msiQueryComponentStateA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szComponentCode : Win32cr::Foundation::PSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiQueryComponentStateA(szProductCode, szUserSid, dwContext, szComponentCode, pdwState)
  end

  def msiQueryComponentStateW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szComponentCode : Win32cr::Foundation::PWSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiQueryComponentStateW(szProductCode, szUserSid, dwContext, szComponentCode, pdwState)
  end

  def msiEnumProductsA(iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32
    C.MsiEnumProductsA(iProductIndex, lpProductBuf)
  end

  def msiEnumProductsW(iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiEnumProductsW(iProductIndex, lpProductBuf)
  end

  def msiEnumProductsExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledProductCode : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32
    C.MsiEnumProductsExA(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumProductsExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledProductCode : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32
    C.MsiEnumProductsExW(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumRelatedProductsA(lpUpgradeCode : Win32cr::Foundation::PSTR, dwReserved : UInt32, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32
    C.MsiEnumRelatedProductsA(lpUpgradeCode, dwReserved, iProductIndex, lpProductBuf)
  end

  def msiEnumRelatedProductsW(lpUpgradeCode : Win32cr::Foundation::PWSTR, dwReserved : UInt32, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiEnumRelatedProductsW(lpUpgradeCode, dwReserved, iProductIndex, lpProductBuf)
  end

  def msiEnumFeaturesA(szProduct : Win32cr::Foundation::PSTR, iFeatureIndex : UInt32, lpFeatureBuf : Win32cr::Foundation::PSTR, lpParentBuf : Win32cr::Foundation::PSTR) : UInt32
    C.MsiEnumFeaturesA(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf)
  end

  def msiEnumFeaturesW(szProduct : Win32cr::Foundation::PWSTR, iFeatureIndex : UInt32, lpFeatureBuf : Win32cr::Foundation::PWSTR, lpParentBuf : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiEnumFeaturesW(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf)
  end

  def msiEnumComponentsA(iComponentIndex : UInt32, lpComponentBuf : Win32cr::Foundation::PSTR) : UInt32
    C.MsiEnumComponentsA(iComponentIndex, lpComponentBuf)
  end

  def msiEnumComponentsW(iComponentIndex : UInt32, lpComponentBuf : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiEnumComponentsW(iComponentIndex, lpComponentBuf)
  end

  def msiEnumComponentsExA(szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledComponentCode : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32
    C.MsiEnumComponentsExA(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumComponentsExW(szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledComponentCode : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32
    C.MsiEnumComponentsExW(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumClientsA(szComponent : Win32cr::Foundation::PSTR, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32
    C.MsiEnumClientsA(szComponent, iProductIndex, lpProductBuf)
  end

  def msiEnumClientsW(szComponent : Win32cr::Foundation::PWSTR, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiEnumClientsW(szComponent, iProductIndex, lpProductBuf)
  end

  def msiEnumClientsExA(szComponent : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwProductIndex : UInt32, szProductBuf : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32
    C.MsiEnumClientsExA(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumClientsExW(szComponent : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwProductIndex : UInt32, szProductBuf : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32
    C.MsiEnumClientsExW(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid)
  end

  def msiEnumComponentQualifiersA(szComponent : Win32cr::Foundation::PSTR, iIndex : UInt32, lpQualifierBuf : UInt8*, pcchQualifierBuf : UInt32*, lpApplicationDataBuf : UInt8*, pcchApplicationDataBuf : UInt32*) : UInt32
    C.MsiEnumComponentQualifiersA(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf)
  end

  def msiEnumComponentQualifiersW(szComponent : Win32cr::Foundation::PWSTR, iIndex : UInt32, lpQualifierBuf : UInt16*, pcchQualifierBuf : UInt32*, lpApplicationDataBuf : UInt16*, pcchApplicationDataBuf : UInt32*) : UInt32
    C.MsiEnumComponentQualifiersW(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf)
  end

  def msiOpenProductA(szProduct : Win32cr::Foundation::PSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenProductA(szProduct, hProduct)
  end

  def msiOpenProductW(szProduct : Win32cr::Foundation::PWSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenProductW(szProduct, hProduct)
  end

  def msiOpenPackageA(szPackagePath : Win32cr::Foundation::PSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenPackageA(szPackagePath, hProduct)
  end

  def msiOpenPackageW(szPackagePath : Win32cr::Foundation::PWSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenPackageW(szPackagePath, hProduct)
  end

  def msiOpenPackageExA(szPackagePath : Win32cr::Foundation::PSTR, dwOptions : UInt32, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenPackageExA(szPackagePath, dwOptions, hProduct)
  end

  def msiOpenPackageExW(szPackagePath : Win32cr::Foundation::PWSTR, dwOptions : UInt32, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenPackageExW(szPackagePath, dwOptions, hProduct)
  end

  def msiGetPatchFileListA(szProductCode : Win32cr::Foundation::PSTR, szPatchPackages : Win32cr::Foundation::PSTR, pcFiles : UInt32*, pphFileRecords : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE**) : UInt32
    C.MsiGetPatchFileListA(szProductCode, szPatchPackages, pcFiles, pphFileRecords)
  end

  def msiGetPatchFileListW(szProductCode : Win32cr::Foundation::PWSTR, szPatchPackages : Win32cr::Foundation::PWSTR, pcFiles : UInt32*, pphFileRecords : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE**) : UInt32
    C.MsiGetPatchFileListW(szProductCode, szPatchPackages, pcFiles, pphFileRecords)
  end

  def msiGetProductPropertyA(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szProperty : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetProductPropertyA(hProduct, szProperty, lpValueBuf, pcchValueBuf)
  end

  def msiGetProductPropertyW(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szProperty : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetProductPropertyW(hProduct, szProperty, lpValueBuf, pcchValueBuf)
  end

  def msiVerifyPackageA(szPackagePath : Win32cr::Foundation::PSTR) : UInt32
    C.MsiVerifyPackageA(szPackagePath)
  end

  def msiVerifyPackageW(szPackagePath : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiVerifyPackageW(szPackagePath)
  end

  def msiGetFeatureInfoA(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, lpAttributes : UInt32*, lpTitleBuf : UInt8*, pcchTitleBuf : UInt32*, lpHelpBuf : UInt8*, pcchHelpBuf : UInt32*) : UInt32
    C.MsiGetFeatureInfoA(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf)
  end

  def msiGetFeatureInfoW(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, lpAttributes : UInt32*, lpTitleBuf : UInt16*, pcchTitleBuf : UInt32*, lpHelpBuf : UInt16*, pcchHelpBuf : UInt32*) : UInt32
    C.MsiGetFeatureInfoW(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf)
  end

  def msiInstallMissingComponentA(szProduct : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiInstallMissingComponentA(szProduct, szComponent, eInstallState)
  end

  def msiInstallMissingComponentW(szProduct : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiInstallMissingComponentW(szProduct, szComponent, eInstallState)
  end

  def msiInstallMissingFileA(szProduct : Win32cr::Foundation::PSTR, szFile : Win32cr::Foundation::PSTR) : UInt32
    C.MsiInstallMissingFileA(szProduct, szFile)
  end

  def msiInstallMissingFileW(szProduct : Win32cr::Foundation::PWSTR, szFile : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiInstallMissingFileW(szProduct, szFile)
  end

  def msiLocateComponentA(szComponent : Win32cr::Foundation::PSTR, lpPathBuf : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiLocateComponentA(szComponent, lpPathBuf, pcchBuf)
  end

  def msiLocateComponentW(szComponent : Win32cr::Foundation::PWSTR, lpPathBuf : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE
    C.MsiLocateComponentW(szComponent, lpPathBuf, pcchBuf)
  end

  def msiSourceListClearAllA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32) : UInt32
    C.MsiSourceListClearAllA(szProduct, szUserName, dwReserved)
  end

  def msiSourceListClearAllW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32) : UInt32
    C.MsiSourceListClearAllW(szProduct, szUserName, dwReserved)
  end

  def msiSourceListAddSourceA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32, szSource : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSourceListAddSourceA(szProduct, szUserName, dwReserved, szSource)
  end

  def msiSourceListAddSourceW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32, szSource : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSourceListAddSourceW(szProduct, szUserName, dwReserved, szSource)
  end

  def msiSourceListForceResolutionA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32) : UInt32
    C.MsiSourceListForceResolutionA(szProduct, szUserName, dwReserved)
  end

  def msiSourceListForceResolutionW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32) : UInt32
    C.MsiSourceListForceResolutionW(szProduct, szUserName, dwReserved)
  end

  def msiSourceListAddSourceExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PSTR, dwIndex : UInt32) : UInt32
    C.MsiSourceListAddSourceExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex)
  end

  def msiSourceListAddSourceExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PWSTR, dwIndex : UInt32) : UInt32
    C.MsiSourceListAddSourceExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex)
  end

  def msiSourceListAddMediaDiskA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32, szVolumeLabel : Win32cr::Foundation::PSTR, szDiskPrompt : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSourceListAddMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt)
  end

  def msiSourceListAddMediaDiskW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32, szVolumeLabel : Win32cr::Foundation::PWSTR, szDiskPrompt : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSourceListAddMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt)
  end

  def msiSourceListClearSourceA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSourceListClearSourceA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource)
  end

  def msiSourceListClearSourceW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSourceListClearSourceW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource)
  end

  def msiSourceListClearMediaDiskA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32) : UInt32
    C.MsiSourceListClearMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId)
  end

  def msiSourceListClearMediaDiskW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32) : UInt32
    C.MsiSourceListClearMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId)
  end

  def msiSourceListClearAllExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32
    C.MsiSourceListClearAllExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions)
  end

  def msiSourceListClearAllExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32
    C.MsiSourceListClearAllExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions)
  end

  def msiSourceListForceResolutionExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32
    C.MsiSourceListForceResolutionExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions)
  end

  def msiSourceListForceResolutionExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32
    C.MsiSourceListForceResolutionExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions)
  end

  def msiSourceListSetInfoA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PSTR, szValue : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSourceListSetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue)
  end

  def msiSourceListSetInfoW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PWSTR, szValue : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSourceListSetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue)
  end

  def msiSourceListGetInfoA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PSTR, szValue : UInt8*, pcchValue : UInt32*) : UInt32
    C.MsiSourceListGetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue)
  end

  def msiSourceListGetInfoW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PWSTR, szValue : UInt16*, pcchValue : UInt32*) : UInt32
    C.MsiSourceListGetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue)
  end

  def msiSourceListEnumSourcesA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, szSource : UInt8*, pcchSource : UInt32*) : UInt32
    C.MsiSourceListEnumSourcesA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource)
  end

  def msiSourceListEnumSourcesW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, szSource : UInt16*, pcchSource : UInt32*) : UInt32
    C.MsiSourceListEnumSourcesW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource)
  end

  def msiSourceListEnumMediaDisksA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, pdwDiskId : UInt32*, szVolumeLabel : UInt8*, pcchVolumeLabel : UInt32*, szDiskPrompt : UInt8*, pcchDiskPrompt : UInt32*) : UInt32
    C.MsiSourceListEnumMediaDisksA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt)
  end

  def msiSourceListEnumMediaDisksW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, pdwDiskId : UInt32*, szVolumeLabel : UInt16*, pcchVolumeLabel : UInt32*, szDiskPrompt : UInt16*, pcchDiskPrompt : UInt32*) : UInt32
    C.MsiSourceListEnumMediaDisksW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt)
  end

  def msiGetFileVersionA(szFilePath : Win32cr::Foundation::PSTR, lpVersionBuf : UInt8*, pcchVersionBuf : UInt32*, lpLangBuf : UInt8*, pcchLangBuf : UInt32*) : UInt32
    C.MsiGetFileVersionA(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf)
  end

  def msiGetFileVersionW(szFilePath : Win32cr::Foundation::PWSTR, lpVersionBuf : UInt16*, pcchVersionBuf : UInt32*, lpLangBuf : UInt16*, pcchLangBuf : UInt32*) : UInt32
    C.MsiGetFileVersionW(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf)
  end

  def msiGetFileHashA(szFilePath : Win32cr::Foundation::PSTR, dwOptions : UInt32, pHash : Win32cr::System::ApplicationInstallationAndServicing::MSIFILEHASHINFO*) : UInt32
    C.MsiGetFileHashA(szFilePath, dwOptions, pHash)
  end

  def msiGetFileHashW(szFilePath : Win32cr::Foundation::PWSTR, dwOptions : UInt32, pHash : Win32cr::System::ApplicationInstallationAndServicing::MSIFILEHASHINFO*) : UInt32
    C.MsiGetFileHashW(szFilePath, dwOptions, pHash)
  end

  def msiGetFileSignatureInformationA(szSignedObjectPath : Win32cr::Foundation::PSTR, dwFlags : UInt32, ppcCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbHashData : UInt8*, pcbHashData : UInt32*) : Win32cr::Foundation::HRESULT
    C.MsiGetFileSignatureInformationA(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData)
  end

  def msiGetFileSignatureInformationW(szSignedObjectPath : Win32cr::Foundation::PWSTR, dwFlags : UInt32, ppcCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbHashData : UInt8*, pcbHashData : UInt32*) : Win32cr::Foundation::HRESULT
    C.MsiGetFileSignatureInformationW(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData)
  end

  def msiGetShortcutTargetA(szShortcutPath : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szFeatureId : Win32cr::Foundation::PSTR, szComponentCode : Win32cr::Foundation::PSTR) : UInt32
    C.MsiGetShortcutTargetA(szShortcutPath, szProductCode, szFeatureId, szComponentCode)
  end

  def msiGetShortcutTargetW(szShortcutPath : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szFeatureId : Win32cr::Foundation::PWSTR, szComponentCode : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiGetShortcutTargetW(szShortcutPath, szProductCode, szFeatureId, szComponentCode)
  end

  def msiIsProductElevatedA(szProduct : Win32cr::Foundation::PSTR, pfElevated : Win32cr::Foundation::BOOL*) : UInt32
    C.MsiIsProductElevatedA(szProduct, pfElevated)
  end

  def msiIsProductElevatedW(szProduct : Win32cr::Foundation::PWSTR, pfElevated : Win32cr::Foundation::BOOL*) : UInt32
    C.MsiIsProductElevatedW(szProduct, pfElevated)
  end

  def msiNotifySidChangeA(pOldSid : Win32cr::Foundation::PSTR, pNewSid : Win32cr::Foundation::PSTR) : UInt32
    C.MsiNotifySidChangeA(pOldSid, pNewSid)
  end

  def msiNotifySidChangeW(pOldSid : Win32cr::Foundation::PWSTR, pNewSid : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiNotifySidChangeW(pOldSid, pNewSid)
  end

  def msiBeginTransactionA(szName : Win32cr::Foundation::PSTR, dwTransactionAttributes : UInt32, phTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32
    C.MsiBeginTransactionA(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent)
  end

  def msiBeginTransactionW(szName : Win32cr::Foundation::PWSTR, dwTransactionAttributes : UInt32, phTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32
    C.MsiBeginTransactionW(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent)
  end

  def msiEndTransaction(dwTransactionState : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSACTIONSTATE) : UInt32
    C.MsiEndTransaction(dwTransactionState)
  end

  def msiJoinTransaction(hTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, dwTransactionAttributes : UInt32, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32
    C.MsiJoinTransaction(hTransactionHandle, dwTransactionAttributes, phChangeOfOwnerEvent)
  end

  def msiDatabaseOpenViewA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szQuery : Win32cr::Foundation::PSTR, phView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiDatabaseOpenViewA(hDatabase, szQuery, phView)
  end

  def msiDatabaseOpenViewW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szQuery : Win32cr::Foundation::PWSTR, phView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiDatabaseOpenViewW(hDatabase, szQuery, phView)
  end

  def msiViewGetErrorA(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szColumnNameBuffer : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBERROR
    C.MsiViewGetErrorA(hView, szColumnNameBuffer, pcchBuf)
  end

  def msiViewGetErrorW(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szColumnNameBuffer : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBERROR
    C.MsiViewGetErrorW(hView, szColumnNameBuffer, pcchBuf)
  end

  def msiViewExecute(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiViewExecute(hView, hRecord)
  end

  def msiViewFetch(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiViewFetch(hView, phRecord)
  end

  def msiViewModify(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eModifyMode : Win32cr::System::ApplicationInstallationAndServicing::MSIMODIFY, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiViewModify(hView, eModifyMode, hRecord)
  end

  def msiViewGetColumnInfo(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eColumnInfo : Win32cr::System::ApplicationInstallationAndServicing::MSICOLINFO, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiViewGetColumnInfo(hView, eColumnInfo, phRecord)
  end

  def msiViewClose(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiViewClose(hView)
  end

  def msiDatabaseGetPrimaryKeysA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiDatabaseGetPrimaryKeysA(hDatabase, szTableName, phRecord)
  end

  def msiDatabaseGetPrimaryKeysW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiDatabaseGetPrimaryKeysW(hDatabase, szTableName, phRecord)
  end

  def msiDatabaseIsTablePersistentA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION
    C.MsiDatabaseIsTablePersistentA(hDatabase, szTableName)
  end

  def msiDatabaseIsTablePersistentW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION
    C.MsiDatabaseIsTablePersistentW(hDatabase, szTableName)
  end

  def msiGetSummaryInformationA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDatabasePath : Win32cr::Foundation::PSTR, uiUpdateCount : UInt32, phSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiGetSummaryInformationA(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo)
  end

  def msiGetSummaryInformationW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDatabasePath : Win32cr::Foundation::PWSTR, uiUpdateCount : UInt32, phSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiGetSummaryInformationW(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo)
  end

  def msiSummaryInfoGetPropertyCount(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, puiPropertyCount : UInt32*) : UInt32
    C.MsiSummaryInfoGetPropertyCount(hSummaryInfo, puiPropertyCount)
  end

  def msiSummaryInfoSetPropertyA(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, uiDataType : UInt32, iValue : Int32, pftValue : Win32cr::Foundation::FILETIME*, szValue : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSummaryInfoSetPropertyA(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue)
  end

  def msiSummaryInfoSetPropertyW(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, uiDataType : UInt32, iValue : Int32, pftValue : Win32cr::Foundation::FILETIME*, szValue : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSummaryInfoSetPropertyW(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue)
  end

  def msiSummaryInfoGetPropertyA(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, puiDataType : UInt32*, piValue : Int32*, pftValue : Win32cr::Foundation::FILETIME*, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiSummaryInfoGetPropertyA(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf)
  end

  def msiSummaryInfoGetPropertyW(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, puiDataType : UInt32*, piValue : Int32*, pftValue : Win32cr::Foundation::FILETIME*, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiSummaryInfoGetPropertyW(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf)
  end

  def msiSummaryInfoPersist(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiSummaryInfoPersist(hSummaryInfo)
  end

  def msiOpenDatabaseA(szDatabasePath : Win32cr::Foundation::PSTR, szPersist : Win32cr::Foundation::PSTR, phDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenDatabaseA(szDatabasePath, szPersist, phDatabase)
  end

  def msiOpenDatabaseW(szDatabasePath : Win32cr::Foundation::PWSTR, szPersist : Win32cr::Foundation::PWSTR, phDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiOpenDatabaseW(szDatabasePath, szPersist, phDatabase)
  end

  def msiDatabaseImportA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolderPath : Win32cr::Foundation::PSTR, szFileName : Win32cr::Foundation::PSTR) : UInt32
    C.MsiDatabaseImportA(hDatabase, szFolderPath, szFileName)
  end

  def msiDatabaseImportW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolderPath : Win32cr::Foundation::PWSTR, szFileName : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiDatabaseImportW(hDatabase, szFolderPath, szFileName)
  end

  def msiDatabaseExportA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR, szFolderPath : Win32cr::Foundation::PSTR, szFileName : Win32cr::Foundation::PSTR) : UInt32
    C.MsiDatabaseExportA(hDatabase, szTableName, szFolderPath, szFileName)
  end

  def msiDatabaseExportW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR, szFolderPath : Win32cr::Foundation::PWSTR, szFileName : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiDatabaseExportW(hDatabase, szTableName, szFolderPath, szFileName)
  end

  def msiDatabaseMergeA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseMerge : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR) : UInt32
    C.MsiDatabaseMergeA(hDatabase, hDatabaseMerge, szTableName)
  end

  def msiDatabaseMergeW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseMerge : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiDatabaseMergeW(hDatabase, hDatabaseMerge, szTableName)
  end

  def msiDatabaseGenerateTransformA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iReserved1 : Int32, iReserved2 : Int32) : UInt32
    C.MsiDatabaseGenerateTransformA(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2)
  end

  def msiDatabaseGenerateTransformW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iReserved1 : Int32, iReserved2 : Int32) : UInt32
    C.MsiDatabaseGenerateTransformW(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2)
  end

  def msiDatabaseApplyTransformA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR) : UInt32
    C.MsiDatabaseApplyTransformA(hDatabase, szTransformFile, iErrorConditions)
  end

  def msiDatabaseApplyTransformW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR) : UInt32
    C.MsiDatabaseApplyTransformW(hDatabase, szTransformFile, iErrorConditions)
  end

  def msiCreateTransformSummaryInfoA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR, iValidation : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_VALIDATE) : UInt32
    C.MsiCreateTransformSummaryInfoA(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation)
  end

  def msiCreateTransformSummaryInfoW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR, iValidation : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_VALIDATE) : UInt32
    C.MsiCreateTransformSummaryInfoW(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation)
  end

  def msiDatabaseCommit(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiDatabaseCommit(hDatabase)
  end

  def msiGetDatabaseState(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBSTATE
    C.MsiGetDatabaseState(hDatabase)
  end

  def msiCreateRecord(cParams : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE
    C.MsiCreateRecord(cParams)
  end

  def msiRecordIsNull(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : Win32cr::Foundation::BOOL
    C.MsiRecordIsNull(hRecord, iField)
  end

  def msiRecordDataSize(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : UInt32
    C.MsiRecordDataSize(hRecord, iField)
  end

  def msiRecordSetInteger(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, iValue : Int32) : UInt32
    C.MsiRecordSetInteger(hRecord, iField, iValue)
  end

  def msiRecordSetStringA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValue : Win32cr::Foundation::PSTR) : UInt32
    C.MsiRecordSetStringA(hRecord, iField, szValue)
  end

  def msiRecordSetStringW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValue : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiRecordSetStringW(hRecord, iField, szValue)
  end

  def msiRecordGetInteger(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : Int32
    C.MsiRecordGetInteger(hRecord, iField)
  end

  def msiRecordGetStringA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiRecordGetStringA(hRecord, iField, szValueBuf, pcchValueBuf)
  end

  def msiRecordGetStringW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiRecordGetStringW(hRecord, iField, szValueBuf, pcchValueBuf)
  end

  def msiRecordGetFieldCount(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiRecordGetFieldCount(hRecord)
  end

  def msiRecordSetStreamA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szFilePath : Win32cr::Foundation::PSTR) : UInt32
    C.MsiRecordSetStreamA(hRecord, iField, szFilePath)
  end

  def msiRecordSetStreamW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szFilePath : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiRecordSetStreamW(hRecord, iField, szFilePath)
  end

  def msiRecordReadStream(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szDataBuf : Win32cr::Foundation::PSTR, pcbDataBuf : UInt32*) : UInt32
    C.MsiRecordReadStream(hRecord, iField, szDataBuf, pcbDataBuf)
  end

  def msiRecordClearData(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiRecordClearData(hRecord)
  end

  def msiGetActiveDatabase(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE
    C.MsiGetActiveDatabase(hInstall)
  end

  def msiSetPropertyA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PSTR, szValue : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSetPropertyA(hInstall, szName, szValue)
  end

  def msiSetPropertyW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PWSTR, szValue : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSetPropertyW(hInstall, szName, szValue)
  end

  def msiGetPropertyA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PSTR, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetPropertyA(hInstall, szName, szValueBuf, pcchValueBuf)
  end

  def msiGetPropertyW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PWSTR, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32
    C.MsiGetPropertyW(hInstall, szName, szValueBuf, pcchValueBuf)
  end

  def msiGetLanguage(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt16
    C.MsiGetLanguage(hInstall)
  end

  def msiGetMode(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eRunMode : Win32cr::System::ApplicationInstallationAndServicing::MSIRUNMODE) : Win32cr::Foundation::BOOL
    C.MsiGetMode(hInstall, eRunMode)
  end

  def msiSetMode(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eRunMode : Win32cr::System::ApplicationInstallationAndServicing::MSIRUNMODE, fState : Win32cr::Foundation::BOOL) : UInt32
    C.MsiSetMode(hInstall, eRunMode, fState)
  end

  def msiFormatRecordA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szResultBuf : UInt8*, pcchResultBuf : UInt32*) : UInt32
    C.MsiFormatRecordA(hInstall, hRecord, szResultBuf, pcchResultBuf)
  end

  def msiFormatRecordW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szResultBuf : UInt16*, pcchResultBuf : UInt32*) : UInt32
    C.MsiFormatRecordW(hInstall, hRecord, szResultBuf, pcchResultBuf)
  end

  def msiDoActionA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szAction : Win32cr::Foundation::PSTR) : UInt32
    C.MsiDoActionA(hInstall, szAction)
  end

  def msiDoActionW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szAction : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiDoActionW(hInstall, szAction)
  end

  def msiSequenceA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTable : Win32cr::Foundation::PSTR, iSequenceMode : Int32) : UInt32
    C.MsiSequenceA(hInstall, szTable, iSequenceMode)
  end

  def msiSequenceW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTable : Win32cr::Foundation::PWSTR, iSequenceMode : Int32) : UInt32
    C.MsiSequenceW(hInstall, szTable, iSequenceMode)
  end

  def msiProcessMessage(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eMessageType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMESSAGE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Int32
    C.MsiProcessMessage(hInstall, eMessageType, hRecord)
  end

  def msiEvaluateConditionA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szCondition : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION
    C.MsiEvaluateConditionA(hInstall, szCondition)
  end

  def msiEvaluateConditionW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szCondition : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION
    C.MsiEvaluateConditionW(hInstall, szCondition)
  end

  def msiGetFeatureStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiGetFeatureStateA(hInstall, szFeature, piInstalled, piAction)
  end

  def msiGetFeatureStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiGetFeatureStateW(hInstall, szFeature, piInstalled, piAction)
  end

  def msiSetFeatureStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiSetFeatureStateA(hInstall, szFeature, iState)
  end

  def msiSetFeatureStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiSetFeatureStateW(hInstall, szFeature, iState)
  end

  def msiSetFeatureAttributesA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, dwAttributes : UInt32) : UInt32
    C.MsiSetFeatureAttributesA(hInstall, szFeature, dwAttributes)
  end

  def msiSetFeatureAttributesW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, dwAttributes : UInt32) : UInt32
    C.MsiSetFeatureAttributesW(hInstall, szFeature, dwAttributes)
  end

  def msiGetComponentStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiGetComponentStateA(hInstall, szComponent, piInstalled, piAction)
  end

  def msiGetComponentStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32
    C.MsiGetComponentStateW(hInstall, szComponent, piInstalled, piAction)
  end

  def msiSetComponentStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiSetComponentStateA(hInstall, szComponent, iState)
  end

  def msiSetComponentStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32
    C.MsiSetComponentStateW(hInstall, szComponent, iState)
  end

  def msiGetFeatureCostA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, iCostTree : Win32cr::System::ApplicationInstallationAndServicing::MSICOSTTREE, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, piCost : Int32*) : UInt32
    C.MsiGetFeatureCostA(hInstall, szFeature, iCostTree, iState, piCost)
  end

  def msiGetFeatureCostW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, iCostTree : Win32cr::System::ApplicationInstallationAndServicing::MSICOSTTREE, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, piCost : Int32*) : UInt32
    C.MsiGetFeatureCostW(hInstall, szFeature, iCostTree, iState, piCost)
  end

  def msiEnumComponentCostsA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, dwIndex : UInt32, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szDriveBuf : UInt8*, pcchDriveBuf : UInt32*, piCost : Int32*, piTempCost : Int32*) : UInt32
    C.MsiEnumComponentCostsA(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost)
  end

  def msiEnumComponentCostsW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, dwIndex : UInt32, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szDriveBuf : UInt16*, pcchDriveBuf : UInt32*, piCost : Int32*, piTempCost : Int32*) : UInt32
    C.MsiEnumComponentCostsW(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost)
  end

  def msiSetInstallLevel(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iInstallLevel : Int32) : UInt32
    C.MsiSetInstallLevel(hInstall, iInstallLevel)
  end

  def msiGetFeatureValidStatesA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, lpInstallStates : UInt32*) : UInt32
    C.MsiGetFeatureValidStatesA(hInstall, szFeature, lpInstallStates)
  end

  def msiGetFeatureValidStatesW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, lpInstallStates : UInt32*) : UInt32
    C.MsiGetFeatureValidStatesW(hInstall, szFeature, lpInstallStates)
  end

  def msiGetSourcePathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiGetSourcePathA(hInstall, szFolder, szPathBuf, pcchPathBuf)
  end

  def msiGetSourcePathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiGetSourcePathW(hInstall, szFolder, szPathBuf, pcchPathBuf)
  end

  def msiGetTargetPathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32
    C.MsiGetTargetPathA(hInstall, szFolder, szPathBuf, pcchPathBuf)
  end

  def msiGetTargetPathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32
    C.MsiGetTargetPathW(hInstall, szFolder, szPathBuf, pcchPathBuf)
  end

  def msiSetTargetPathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szFolderPath : Win32cr::Foundation::PSTR) : UInt32
    C.MsiSetTargetPathA(hInstall, szFolder, szFolderPath)
  end

  def msiSetTargetPathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szFolderPath : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiSetTargetPathW(hInstall, szFolder, szFolderPath)
  end

  def msiVerifyDiskSpace(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32
    C.MsiVerifyDiskSpace(hInstall)
  end

  def msiEnableUIPreview(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, phPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32
    C.MsiEnableUIPreview(hDatabase, phPreview)
  end

  def msiPreviewDialogA(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDialogName : Win32cr::Foundation::PSTR) : UInt32
    C.MsiPreviewDialogA(hPreview, szDialogName)
  end

  def msiPreviewDialogW(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDialogName : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiPreviewDialogW(hPreview, szDialogName)
  end

  def msiPreviewBillboardA(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szControlName : Win32cr::Foundation::PSTR, szBillboard : Win32cr::Foundation::PSTR) : UInt32
    C.MsiPreviewBillboardA(hPreview, szControlName, szBillboard)
  end

  def msiPreviewBillboardW(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szControlName : Win32cr::Foundation::PWSTR, szBillboard : Win32cr::Foundation::PWSTR) : UInt32
    C.MsiPreviewBillboardW(hPreview, szControlName, szBillboard)
  end

  def msiGetLastErrorRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE
    C.MsiGetLastErrorRecord
  end

  def sfcGetNextProtectedFile(rpc_handle : Win32cr::Foundation::HANDLE, prot_file_data : Win32cr::System::ApplicationInstallationAndServicing::PROTECTED_FILE_DATA*) : Win32cr::Foundation::BOOL
    C.SfcGetNextProtectedFile(rpc_handle, prot_file_data)
  end

  def sfcIsFileProtected(rpc_handle : Win32cr::Foundation::HANDLE, prot_file_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
    C.SfcIsFileProtected(rpc_handle, prot_file_name)
  end

  def sfcIsKeyProtected(key_handle : Win32cr::System::Registry::HKEY, sub_key_name : Win32cr::Foundation::PWSTR, key_sam : UInt32) : Win32cr::Foundation::BOOL
    C.SfcIsKeyProtected(key_handle, sub_key_name, key_sam)
  end

  def sfpVerifyFile(pszFileName : Win32cr::Foundation::PSTR, pszError : UInt8*, dwErrSize : UInt32) : Win32cr::Foundation::BOOL
    C.SfpVerifyFile(pszFileName, pszError, dwErrSize)
  end

  def createPatchFileA(old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, patch_file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileA(old_file_name, new_file_name, patch_file_name, option_flags, option_data)
  end

  def createPatchFileW(old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, patch_file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileW(old_file_name, new_file_name, patch_file_name, option_flags, option_data)
  end

  def createPatchFileByHandles(old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, patch_file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileByHandles(old_file_handle, new_file_handle, patch_file_handle, option_flags, option_data)
  end

  def createPatchFileExA(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_A*, new_file_name : Win32cr::Foundation::PSTR, patch_file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileExA(old_file_count, old_file_info_array, new_file_name, patch_file_name, option_flags, option_data, progress_callback, callback_context)
  end

  def createPatchFileExW(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_W*, new_file_name : Win32cr::Foundation::PWSTR, patch_file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileExW(old_file_count, old_file_info_array, new_file_name, patch_file_name, option_flags, option_data, progress_callback, callback_context)
  end

  def createPatchFileByHandlesEx(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_H*, new_file_handle : Win32cr::Foundation::HANDLE, patch_file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.CreatePatchFileByHandlesEx(old_file_count, old_file_info_array, new_file_handle, patch_file_handle, option_flags, option_data, progress_callback, callback_context)
  end

  def extractPatchHeaderToFileA(patch_file_name : Win32cr::Foundation::PSTR, patch_header_file_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.ExtractPatchHeaderToFileA(patch_file_name, patch_header_file_name)
  end

  def extractPatchHeaderToFileW(patch_file_name : Win32cr::Foundation::PWSTR, patch_header_file_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
    C.ExtractPatchHeaderToFileW(patch_file_name, patch_header_file_name)
  end

  def extractPatchHeaderToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, patch_header_file_handle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL
    C.ExtractPatchHeaderToFileByHandles(patch_file_handle, patch_header_file_handle)
  end

  def testApplyPatchToFileA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.TestApplyPatchToFileA(patch_file_name, old_file_name, apply_option_flags)
  end

  def testApplyPatchToFileW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.TestApplyPatchToFileW(patch_file_name, old_file_name, apply_option_flags)
  end

  def testApplyPatchToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.TestApplyPatchToFileByHandles(patch_file_handle, old_file_handle, apply_option_flags)
  end

  def testApplyPatchToFileByBuffers(patch_file_buffer : UInt8*, patch_file_size : UInt32, old_file_buffer : UInt8*, old_file_size : UInt32, new_file_size : UInt32*, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.TestApplyPatchToFileByBuffers(patch_file_buffer, patch_file_size, old_file_buffer, old_file_size, new_file_size, apply_option_flags)
  end

  def applyPatchToFileA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileA(patch_file_name, old_file_name, new_file_name, apply_option_flags)
  end

  def applyPatchToFileW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileW(patch_file_name, old_file_name, new_file_name, apply_option_flags)
  end

  def applyPatchToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileByHandles(patch_file_handle, old_file_handle, new_file_handle, apply_option_flags)
  end

  def applyPatchToFileExA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileExA(patch_file_name, old_file_name, new_file_name, apply_option_flags, progress_callback, callback_context)
  end

  def applyPatchToFileExW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileExW(patch_file_name, old_file_name, new_file_name, apply_option_flags, progress_callback, callback_context)
  end

  def applyPatchToFileByHandlesEx(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileByHandlesEx(patch_file_handle, old_file_handle, new_file_handle, apply_option_flags, progress_callback, callback_context)
  end

  def applyPatchToFileByBuffers(patch_file_mapped : UInt8*, patch_file_size : UInt32, old_file_mapped : UInt8*, old_file_size : UInt32, new_file_buffer : UInt8**, new_file_buffer_size : UInt32, new_file_actual_size : UInt32*, new_file_time : Win32cr::Foundation::FILETIME*, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL
    C.ApplyPatchToFileByBuffers(patch_file_mapped, patch_file_size, old_file_mapped, old_file_size, new_file_buffer, new_file_buffer_size, new_file_actual_size, new_file_time, apply_option_flags, progress_callback, callback_context)
  end

  def getFilePatchSignatureA(file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.GetFilePatchSignatureA(file_name, option_flags, option_data, ignore_range_count, ignore_range_array, retain_range_count, retain_range_array, signature_buffer_size, signature_buffer)
  end

  def getFilePatchSignatureW(file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
    C.GetFilePatchSignatureW(file_name, option_flags, option_data, ignore_range_count, ignore_range_array, retain_range_count, retain_range_array, signature_buffer_size, signature_buffer)
  end

  def getFilePatchSignatureByHandle(file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.GetFilePatchSignatureByHandle(file_handle, option_flags, option_data, ignore_range_count, ignore_range_array, retain_range_count, retain_range_array, signature_buffer_size, signature_buffer)
  end

  def getFilePatchSignatureByBuffer(file_buffer_writable : UInt8*, file_size : UInt32, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.GetFilePatchSignatureByBuffer(file_buffer_writable, file_size, option_flags, option_data, ignore_range_count, ignore_range_array, retain_range_count, retain_range_array, signature_buffer_size, signature_buffer)
  end

  def normalizeFileForPatchSignature(file_buffer : Void*, file_size : UInt32, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, new_file_coff_base : UInt32, new_file_coff_time : UInt32, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*) : Int32
    C.NormalizeFileForPatchSignature(file_buffer, file_size, option_flags, option_data, new_file_coff_base, new_file_coff_time, ignore_range_count, ignore_range_array, retain_range_count, retain_range_array)
  end

  def getDeltaInfoB(delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL
    C.GetDeltaInfoB(delta, lpHeaderInfo)
  end

  def getDeltaInfoA(lpDeltaName : Win32cr::Foundation::PSTR, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL
    C.GetDeltaInfoA(lpDeltaName, lpHeaderInfo)
  end

  def getDeltaInfoW(lpDeltaName : Win32cr::Foundation::PWSTR, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL
    C.GetDeltaInfoW(lpDeltaName, lpHeaderInfo)
  end

  def applyDeltaGetReverseB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpReverseFileTime : Win32cr::Foundation::FILETIME*, lpTarget : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*, lpTargetReverse : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL
    C.ApplyDeltaGetReverseB(apply_flags, source, delta, lpReverseFileTime, lpTarget, lpTargetReverse)
  end

  def applyDeltaB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTarget : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL
    C.ApplyDeltaB(apply_flags, source, delta, lpTarget)
  end

  def applyDeltaProvidedB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTarget : Void*, uTargetSize : LibC::UIntPtrT) : Win32cr::Foundation::BOOL
    C.ApplyDeltaProvidedB(apply_flags, source, delta, lpTarget, uTargetSize)
  end

  def applyDeltaA(apply_flags : Int64, lpSourceName : Win32cr::Foundation::PSTR, lpDeltaName : Win32cr::Foundation::PSTR, lpTargetName : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.ApplyDeltaA(apply_flags, lpSourceName, lpDeltaName, lpTargetName)
  end

  def applyDeltaW(apply_flags : Int64, lpSourceName : Win32cr::Foundation::PWSTR, lpDeltaName : Win32cr::Foundation::PWSTR, lpTargetName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
    C.ApplyDeltaW(apply_flags, lpSourceName, lpDeltaName, lpTargetName)
  end

  def createDeltaB(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, target : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, source_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, target_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDelta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL
    C.CreateDeltaB(file_type_set, set_flags, reset_flags, source, target, source_options, target_options, global_options, lpTargetFileTime, hash_alg_id, lpDelta)
  end

  def createDeltaA(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, lpSourceName : Win32cr::Foundation::PSTR, lpTargetName : Win32cr::Foundation::PSTR, lpSourceOptionsName : Win32cr::Foundation::PSTR, lpTargetOptionsName : Win32cr::Foundation::PSTR, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDeltaName : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL
    C.CreateDeltaA(file_type_set, set_flags, reset_flags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, global_options, lpTargetFileTime, hash_alg_id, lpDeltaName)
  end

  def createDeltaW(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, lpSourceName : Win32cr::Foundation::PWSTR, lpTargetName : Win32cr::Foundation::PWSTR, lpSourceOptionsName : Win32cr::Foundation::PWSTR, lpTargetOptionsName : Win32cr::Foundation::PWSTR, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDeltaName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
    C.CreateDeltaW(file_type_set, set_flags, reset_flags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, global_options, lpTargetFileTime, hash_alg_id, lpDeltaName)
  end

  def getDeltaSignatureB(file_type_set : Int64, hash_alg_id : UInt32, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL
    C.GetDeltaSignatureB(file_type_set, hash_alg_id, source, lpHash)
  end

  def getDeltaSignatureA(file_type_set : Int64, hash_alg_id : UInt32, lpSourceName : Win32cr::Foundation::PSTR, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL
    C.GetDeltaSignatureA(file_type_set, hash_alg_id, lpSourceName, lpHash)
  end

  def getDeltaSignatureW(file_type_set : Int64, hash_alg_id : UInt32, lpSourceName : Win32cr::Foundation::PWSTR, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL
    C.GetDeltaSignatureW(file_type_set, hash_alg_id, lpSourceName, lpHash)
  end

  def deltaNormalizeProvidedB(file_type_set : Int64, normalize_flags : Int64, normalize_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpSource : Void*, uSourceSize : LibC::UIntPtrT) : Win32cr::Foundation::BOOL
    C.DeltaNormalizeProvidedB(file_type_set, normalize_flags, normalize_options, lpSource, uSourceSize)
  end

  def deltaFree(lpMemory : Void*) : Win32cr::Foundation::BOOL
    C.DeltaFree(lpMemory)
  end

  def createActCtxA(pActCtx : Win32cr::System::ApplicationInstallationAndServicing::ACTCTXA*) : Win32cr::Foundation::HANDLE
    C.CreateActCtxA(pActCtx)
  end

  def createActCtxW(pActCtx : Win32cr::System::ApplicationInstallationAndServicing::ACTCTXW*) : Win32cr::Foundation::HANDLE
    C.CreateActCtxW(pActCtx)
  end

  def addRefActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Void
    C.AddRefActCtx(hActCtx)
  end

  def releaseActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Void
    C.ReleaseActCtx(hActCtx)
  end

  def zombifyActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL
    C.ZombifyActCtx(hActCtx)
  end

  def activateActCtx(hActCtx : Win32cr::Foundation::HANDLE, lpCookie : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL
    C.ActivateActCtx(hActCtx, lpCookie)
  end

  def deactivateActCtx(dwFlags : UInt32, ulCookie : LibC::UIntPtrT) : Win32cr::Foundation::BOOL
    C.DeactivateActCtx(dwFlags, ulCookie)
  end

  def getCurrentActCtx(lphActCtx : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::BOOL
    C.GetCurrentActCtx(lphActCtx)
  end

  def findActCtxSectionStringA(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpStringToFind : Win32cr::Foundation::PSTR, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL
    C.FindActCtxSectionStringA(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, returned_data)
  end

  def findActCtxSectionStringW(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpStringToFind : Win32cr::Foundation::PWSTR, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL
    C.FindActCtxSectionStringW(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, returned_data)
  end

  def findActCtxSectionGuid(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpGuidToFind : LibC::GUID*, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL
    C.FindActCtxSectionGuid(dwFlags, lpExtensionGuid, ulSectionId, lpGuidToFind, returned_data)
  end

  def queryActCtxW(dwFlags : UInt32, hActCtx : Win32cr::Foundation::HANDLE, pvSubInstance : Void*, ulInfoClass : UInt32, pvBuffer : Void*, cbBuffer : LibC::UIntPtrT, pcbWrittenOrRequired : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL
    C.QueryActCtxW(dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired)
  end

  def queryActCtxSettingsW(dwFlags : UInt32, hActCtx : Win32cr::Foundation::HANDLE, settingsNameSpace : Win32cr::Foundation::PWSTR, settingName : Win32cr::Foundation::PWSTR, pvBuffer : Win32cr::Foundation::PWSTR, dwBuffer : LibC::UIntPtrT, pdwWrittenOrRequired : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL
    C.QueryActCtxSettingsW(dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired)
  end

  @[Link("msi")]
  @[Link("sfc")]
  @[Link("mspatchc")]
  @[Link("mspatcha")]
  @[Link("msdelta")]
  @[Link("kernel32")]
  lib C
    # :nodoc:
    fun MsiCloseHandle(hAny : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiCloseAllHandles : UInt32

    # :nodoc:
    fun MsiSetInternalUI(dwUILevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUILEVEL, phWnd : Win32cr::Foundation::HWND*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUILEVEL

    # :nodoc:
    fun MsiSetExternalUIA(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERA, dwMessageFilter : UInt32, pvContext : Void*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERA

    # :nodoc:
    fun MsiSetExternalUIW(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERW, dwMessageFilter : UInt32, pvContext : Void*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLUI_HANDLERW

    # :nodoc:
    fun MsiSetExternalUIRecord(puiHandler : Win32cr::System::ApplicationInstallationAndServicing::PINSTALLUI_HANDLER_RECORD, dwMessageFilter : UInt32, pvContext : Void*, ppuiPrevHandler : Win32cr::System::ApplicationInstallationAndServicing::PINSTALLUI_HANDLER_RECORD) : UInt32

    # :nodoc:
    fun MsiEnableLogA(dwLogMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLOGMODE, szLogFile : Win32cr::Foundation::PSTR, dwLogAttributes : UInt32) : UInt32

    # :nodoc:
    fun MsiEnableLogW(dwLogMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLOGMODE, szLogFile : Win32cr::Foundation::PWSTR, dwLogAttributes : UInt32) : UInt32

    # :nodoc:
    fun MsiQueryProductStateA(szProduct : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiQueryProductStateW(szProduct : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiGetProductInfoA(szProduct : Win32cr::Foundation::PSTR, szAttribute : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductInfoW(szProduct : Win32cr::Foundation::PWSTR, szAttribute : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductInfoExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PSTR, szValue : UInt8*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductInfoExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PWSTR, szValue : UInt16*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiInstallProductA(szPackagePath : Win32cr::Foundation::PSTR, szCommandLine : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiInstallProductW(szPackagePath : Win32cr::Foundation::PWSTR, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiConfigureProductA(szProduct : Win32cr::Foundation::PSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiConfigureProductW(szProduct : Win32cr::Foundation::PWSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiConfigureProductExA(szProduct : Win32cr::Foundation::PSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szCommandLine : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiConfigureProductExW(szProduct : Win32cr::Foundation::PWSTR, iInstallLevel : Win32cr::System::ApplicationInstallationAndServicing::INSTALLLEVEL, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiReinstallProductA(szProduct : Win32cr::Foundation::PSTR, szReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32

    # :nodoc:
    fun MsiReinstallProductW(szProduct : Win32cr::Foundation::PWSTR, szReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32

    # :nodoc:
    fun MsiAdvertiseProductExA(szPackagePath : Win32cr::Foundation::PSTR, szScriptfilePath : Win32cr::Foundation::PSTR, szTransforms : Win32cr::Foundation::PSTR, lgidLanguage : UInt16, dwPlatform : UInt32, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiAdvertiseProductExW(szPackagePath : Win32cr::Foundation::PWSTR, szScriptfilePath : Win32cr::Foundation::PWSTR, szTransforms : Win32cr::Foundation::PWSTR, lgidLanguage : UInt16, dwPlatform : UInt32, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiAdvertiseProductA(szPackagePath : Win32cr::Foundation::PSTR, szScriptfilePath : Win32cr::Foundation::PSTR, szTransforms : Win32cr::Foundation::PSTR, lgidLanguage : UInt16) : UInt32

    # :nodoc:
    fun MsiAdvertiseProductW(szPackagePath : Win32cr::Foundation::PWSTR, szScriptfilePath : Win32cr::Foundation::PWSTR, szTransforms : Win32cr::Foundation::PWSTR, lgidLanguage : UInt16) : UInt32

    # :nodoc:
    fun MsiProcessAdvertiseScriptA(szScriptFile : Win32cr::Foundation::PSTR, szIconFolder : Win32cr::Foundation::PSTR, hRegData : Win32cr::System::Registry::HKEY, fShortcuts : Win32cr::Foundation::BOOL, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32

    # :nodoc:
    fun MsiProcessAdvertiseScriptW(szScriptFile : Win32cr::Foundation::PWSTR, szIconFolder : Win32cr::Foundation::PWSTR, hRegData : Win32cr::System::Registry::HKEY, fShortcuts : Win32cr::Foundation::BOOL, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32

    # :nodoc:
    fun MsiAdvertiseScriptA(szScriptFile : Win32cr::Foundation::PSTR, dwFlags : UInt32, phRegData : Win32cr::System::Registry::HKEY*, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32

    # :nodoc:
    fun MsiAdvertiseScriptW(szScriptFile : Win32cr::Foundation::PWSTR, dwFlags : UInt32, phRegData : Win32cr::System::Registry::HKEY*, fRemoveItems : Win32cr::Foundation::BOOL) : UInt32

    # :nodoc:
    fun MsiGetProductInfoFromScriptA(szScriptFile : Win32cr::Foundation::PSTR, lpProductBuf39 : Win32cr::Foundation::PSTR, plgidLanguage : UInt16*, pdwVersion : UInt32*, lpNameBuf : UInt8*, pcchNameBuf : UInt32*, lpPackageBuf : UInt8*, pcchPackageBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductInfoFromScriptW(szScriptFile : Win32cr::Foundation::PWSTR, lpProductBuf39 : Win32cr::Foundation::PWSTR, plgidLanguage : UInt16*, pdwVersion : UInt32*, lpNameBuf : UInt16*, pcchNameBuf : UInt32*, lpPackageBuf : UInt16*, pcchPackageBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductCodeA(szComponent : Win32cr::Foundation::PSTR, lpBuf39 : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiGetProductCodeW(szComponent : Win32cr::Foundation::PWSTR, lpBuf39 : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiGetUserInfoA(szProduct : Win32cr::Foundation::PSTR, lpUserNameBuf : UInt8*, pcchUserNameBuf : UInt32*, lpOrgNameBuf : UInt8*, pcchOrgNameBuf : UInt32*, lpSerialBuf : UInt8*, pcchSerialBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::USERINFOSTATE

    # :nodoc:
    fun MsiGetUserInfoW(szProduct : Win32cr::Foundation::PWSTR, lpUserNameBuf : UInt16*, pcchUserNameBuf : UInt32*, lpOrgNameBuf : UInt16*, pcchOrgNameBuf : UInt32*, lpSerialBuf : UInt16*, pcchSerialBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::USERINFOSTATE

    # :nodoc:
    fun MsiCollectUserInfoA(szProduct : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiCollectUserInfoW(szProduct : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiApplyPatchA(szPatchPackage : Win32cr::Foundation::PSTR, szInstallPackage : Win32cr::Foundation::PSTR, eInstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szCommandLine : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiApplyPatchW(szPatchPackage : Win32cr::Foundation::PWSTR, szInstallPackage : Win32cr::Foundation::PWSTR, eInstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szCommandLine : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiGetPatchInfoA(szPatch : Win32cr::Foundation::PSTR, szAttribute : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetPatchInfoW(szPatch : Win32cr::Foundation::PWSTR, szAttribute : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumPatchesA(szProduct : Win32cr::Foundation::PSTR, iPatchIndex : UInt32, lpPatchBuf : Win32cr::Foundation::PSTR, lpTransformsBuf : UInt8*, pcchTransformsBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumPatchesW(szProduct : Win32cr::Foundation::PWSTR, iPatchIndex : UInt32, lpPatchBuf : Win32cr::Foundation::PWSTR, lpTransformsBuf : UInt16*, pcchTransformsBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiRemovePatchesA(szPatchList : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, eUninstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szPropertyList : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiRemovePatchesW(szPatchList : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, eUninstallType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLTYPE, szPropertyList : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiExtractPatchXMLDataA(szPatchPath : Win32cr::Foundation::PSTR, dwReserved : UInt32, szXMLData : UInt8*, pcchXMLData : UInt32*) : UInt32

    # :nodoc:
    fun MsiExtractPatchXMLDataW(szPatchPath : Win32cr::Foundation::PWSTR, dwReserved : UInt32, szXMLData : UInt16*, pcchXMLData : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetPatchInfoExA(szPatchCode : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PSTR, lpValue : UInt8*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetPatchInfoExW(szPatchCode : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szProperty : Win32cr::Foundation::PWSTR, lpValue : UInt16*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiApplyMultiplePatchesA(szPatchPackages : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szPropertiesList : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiApplyMultiplePatchesW(szPatchPackages : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szPropertiesList : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiDeterminePatchSequenceA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOA*) : UInt32

    # :nodoc:
    fun MsiDeterminePatchSequenceW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOW*) : UInt32

    # :nodoc:
    fun MsiDetermineApplicablePatchesA(szProductPackagePath : Win32cr::Foundation::PSTR, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOA*) : UInt32

    # :nodoc:
    fun MsiDetermineApplicablePatchesW(szProductPackagePath : Win32cr::Foundation::PWSTR, cPatchInfo : UInt32, pPatchInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIPATCHSEQUENCEINFOW*) : UInt32

    # :nodoc:
    fun MsiEnumPatchesExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwFilter : UInt32, dwIndex : UInt32, szPatchCode : Win32cr::Foundation::PSTR, szTargetProductCode : Win32cr::Foundation::PSTR, pdwTargetProductContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szTargetUserSid : UInt8*, pcchTargetUserSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumPatchesExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwFilter : UInt32, dwIndex : UInt32, szPatchCode : Win32cr::Foundation::PWSTR, szTargetProductCode : Win32cr::Foundation::PWSTR, pdwTargetProductContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szTargetUserSid : UInt16*, pcchTargetUserSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiQueryFeatureStateA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiQueryFeatureStateW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiQueryFeatureStateExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szFeature : Win32cr::Foundation::PSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiQueryFeatureStateExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szFeature : Win32cr::Foundation::PWSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiUseFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiUseFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiUseFeatureExA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, dwInstallMode : UInt32, dwReserved : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiUseFeatureExW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, dwInstallMode : UInt32, dwReserved : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiGetFeatureUsageA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, pdwUseCount : UInt32*, pwDateUsed : UInt16*) : UInt32

    # :nodoc:
    fun MsiGetFeatureUsageW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, pdwUseCount : UInt32*, pwDateUsed : UInt16*) : UInt32

    # :nodoc:
    fun MsiConfigureFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiConfigureFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiReinstallFeatureA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, dwReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32

    # :nodoc:
    fun MsiReinstallFeatureW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, dwReinstallMode : Win32cr::System::ApplicationInstallationAndServicing::REINSTALLMODE) : UInt32

    # :nodoc:
    fun MsiProvideComponentA(szProduct : Win32cr::Foundation::PSTR, szFeature : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideComponentW(szProduct : Win32cr::Foundation::PWSTR, szFeature : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideQualifiedComponentA(szCategory : Win32cr::Foundation::PSTR, szQualifier : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideQualifiedComponentW(szCategory : Win32cr::Foundation::PWSTR, szQualifier : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideQualifiedComponentExA(szCategory : Win32cr::Foundation::PSTR, szQualifier : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, szProduct : Win32cr::Foundation::PSTR, dwUnused1 : UInt32, dwUnused2 : UInt32, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideQualifiedComponentExW(szCategory : Win32cr::Foundation::PWSTR, szQualifier : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, szProduct : Win32cr::Foundation::PWSTR, dwUnused1 : UInt32, dwUnused2 : UInt32, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetComponentPathA(szProduct : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, lpPathBuf : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiGetComponentPathW(szProduct : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, lpPathBuf : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiGetComponentPathExA(szProductCode : Win32cr::Foundation::PSTR, szComponentCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, lpOutPathBuffer : UInt8*, pcchOutPathBuffer : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiGetComponentPathExW(szProductCode : Win32cr::Foundation::PWSTR, szComponentCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, lpOutPathBuffer : UInt16*, pcchOutPathBuffer : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiProvideAssemblyA(szAssemblyName : Win32cr::Foundation::PSTR, szAppContext : Win32cr::Foundation::PSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, dwAssemblyInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIASSEMBLYINFO, lpPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiProvideAssemblyW(szAssemblyName : Win32cr::Foundation::PWSTR, szAppContext : Win32cr::Foundation::PWSTR, dwInstallMode : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMODE, dwAssemblyInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIASSEMBLYINFO, lpPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiQueryComponentStateA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szComponentCode : Win32cr::Foundation::PSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiQueryComponentStateW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, szComponentCode : Win32cr::Foundation::PWSTR, pdwState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiEnumProductsA(iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiEnumProductsW(iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiEnumProductsExA(szProductCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledProductCode : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumProductsExW(szProductCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledProductCode : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumRelatedProductsA(lpUpgradeCode : Win32cr::Foundation::PSTR, dwReserved : UInt32, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiEnumRelatedProductsW(lpUpgradeCode : Win32cr::Foundation::PWSTR, dwReserved : UInt32, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiEnumFeaturesA(szProduct : Win32cr::Foundation::PSTR, iFeatureIndex : UInt32, lpFeatureBuf : Win32cr::Foundation::PSTR, lpParentBuf : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiEnumFeaturesW(szProduct : Win32cr::Foundation::PWSTR, iFeatureIndex : UInt32, lpFeatureBuf : Win32cr::Foundation::PWSTR, lpParentBuf : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiEnumComponentsA(iComponentIndex : UInt32, lpComponentBuf : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiEnumComponentsW(iComponentIndex : UInt32, lpComponentBuf : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiEnumComponentsExA(szUserSid : Win32cr::Foundation::PSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledComponentCode : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumComponentsExW(szUserSid : Win32cr::Foundation::PWSTR, dwContext : UInt32, dwIndex : UInt32, szInstalledComponentCode : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumClientsA(szComponent : Win32cr::Foundation::PSTR, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiEnumClientsW(szComponent : Win32cr::Foundation::PWSTR, iProductIndex : UInt32, lpProductBuf : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiEnumClientsExA(szComponent : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwProductIndex : UInt32, szProductBuf : Win32cr::Foundation::PSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt8*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumClientsExW(szComponent : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwProductIndex : UInt32, szProductBuf : Win32cr::Foundation::PWSTR, pdwInstalledContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT*, szSid : UInt16*, pcchSid : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumComponentQualifiersA(szComponent : Win32cr::Foundation::PSTR, iIndex : UInt32, lpQualifierBuf : UInt8*, pcchQualifierBuf : UInt32*, lpApplicationDataBuf : UInt8*, pcchApplicationDataBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiEnumComponentQualifiersW(szComponent : Win32cr::Foundation::PWSTR, iIndex : UInt32, lpQualifierBuf : UInt16*, pcchQualifierBuf : UInt32*, lpApplicationDataBuf : UInt16*, pcchApplicationDataBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiOpenProductA(szProduct : Win32cr::Foundation::PSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenProductW(szProduct : Win32cr::Foundation::PWSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenPackageA(szPackagePath : Win32cr::Foundation::PSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenPackageW(szPackagePath : Win32cr::Foundation::PWSTR, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenPackageExA(szPackagePath : Win32cr::Foundation::PSTR, dwOptions : UInt32, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenPackageExW(szPackagePath : Win32cr::Foundation::PWSTR, dwOptions : UInt32, hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiGetPatchFileListA(szProductCode : Win32cr::Foundation::PSTR, szPatchPackages : Win32cr::Foundation::PSTR, pcFiles : UInt32*, pphFileRecords : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE**) : UInt32

    # :nodoc:
    fun MsiGetPatchFileListW(szProductCode : Win32cr::Foundation::PWSTR, szPatchPackages : Win32cr::Foundation::PWSTR, pcFiles : UInt32*, pphFileRecords : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE**) : UInt32

    # :nodoc:
    fun MsiGetProductPropertyA(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szProperty : Win32cr::Foundation::PSTR, lpValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetProductPropertyW(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szProperty : Win32cr::Foundation::PWSTR, lpValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiVerifyPackageA(szPackagePath : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiVerifyPackageW(szPackagePath : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiGetFeatureInfoA(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, lpAttributes : UInt32*, lpTitleBuf : UInt8*, pcchTitleBuf : UInt32*, lpHelpBuf : UInt8*, pcchHelpBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetFeatureInfoW(hProduct : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, lpAttributes : UInt32*, lpTitleBuf : UInt16*, pcchTitleBuf : UInt32*, lpHelpBuf : UInt16*, pcchHelpBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiInstallMissingComponentA(szProduct : Win32cr::Foundation::PSTR, szComponent : Win32cr::Foundation::PSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiInstallMissingComponentW(szProduct : Win32cr::Foundation::PWSTR, szComponent : Win32cr::Foundation::PWSTR, eInstallState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiInstallMissingFileA(szProduct : Win32cr::Foundation::PSTR, szFile : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiInstallMissingFileW(szProduct : Win32cr::Foundation::PWSTR, szFile : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiLocateComponentA(szComponent : Win32cr::Foundation::PSTR, lpPathBuf : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiLocateComponentW(szComponent : Win32cr::Foundation::PWSTR, lpPathBuf : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE

    # :nodoc:
    fun MsiSourceListClearAllA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListClearAllW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListAddSourceA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32, szSource : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSourceListAddSourceW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32, szSource : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSourceListForceResolutionA(szProduct : Win32cr::Foundation::PSTR, szUserName : Win32cr::Foundation::PSTR, dwReserved : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListForceResolutionW(szProduct : Win32cr::Foundation::PWSTR, szUserName : Win32cr::Foundation::PWSTR, dwReserved : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListAddSourceExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PSTR, dwIndex : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListAddSourceExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PWSTR, dwIndex : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListAddMediaDiskA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32, szVolumeLabel : Win32cr::Foundation::PSTR, szDiskPrompt : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSourceListAddMediaDiskW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32, szVolumeLabel : Win32cr::Foundation::PWSTR, szDiskPrompt : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSourceListClearSourceA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSourceListClearSourceW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szSource : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSourceListClearMediaDiskA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListClearMediaDiskW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwDiskId : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListClearAllExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListClearAllExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListForceResolutionExA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListForceResolutionExW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32) : UInt32

    # :nodoc:
    fun MsiSourceListSetInfoA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PSTR, szValue : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSourceListSetInfoW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PWSTR, szValue : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSourceListGetInfoA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PSTR, szValue : UInt8*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiSourceListGetInfoW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, szProperty : Win32cr::Foundation::PWSTR, szValue : UInt16*, pcchValue : UInt32*) : UInt32

    # :nodoc:
    fun MsiSourceListEnumSourcesA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, szSource : UInt8*, pcchSource : UInt32*) : UInt32

    # :nodoc:
    fun MsiSourceListEnumSourcesW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, szSource : UInt16*, pcchSource : UInt32*) : UInt32

    # :nodoc:
    fun MsiSourceListEnumMediaDisksA(szProductCodeOrPatchCode : Win32cr::Foundation::PSTR, szUserSid : Win32cr::Foundation::PSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, pdwDiskId : UInt32*, szVolumeLabel : UInt8*, pcchVolumeLabel : UInt32*, szDiskPrompt : UInt8*, pcchDiskPrompt : UInt32*) : UInt32

    # :nodoc:
    fun MsiSourceListEnumMediaDisksW(szProductCodeOrPatchCode : Win32cr::Foundation::PWSTR, szUserSid : Win32cr::Foundation::PWSTR, dwContext : Win32cr::System::ApplicationInstallationAndServicing::MSIINSTALLCONTEXT, dwOptions : UInt32, dwIndex : UInt32, pdwDiskId : UInt32*, szVolumeLabel : UInt16*, pcchVolumeLabel : UInt32*, szDiskPrompt : UInt16*, pcchDiskPrompt : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetFileVersionA(szFilePath : Win32cr::Foundation::PSTR, lpVersionBuf : UInt8*, pcchVersionBuf : UInt32*, lpLangBuf : UInt8*, pcchLangBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetFileVersionW(szFilePath : Win32cr::Foundation::PWSTR, lpVersionBuf : UInt16*, pcchVersionBuf : UInt32*, lpLangBuf : UInt16*, pcchLangBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetFileHashA(szFilePath : Win32cr::Foundation::PSTR, dwOptions : UInt32, pHash : Win32cr::System::ApplicationInstallationAndServicing::MSIFILEHASHINFO*) : UInt32

    # :nodoc:
    fun MsiGetFileHashW(szFilePath : Win32cr::Foundation::PWSTR, dwOptions : UInt32, pHash : Win32cr::System::ApplicationInstallationAndServicing::MSIFILEHASHINFO*) : UInt32

    # :nodoc:
    fun MsiGetFileSignatureInformationA(szSignedObjectPath : Win32cr::Foundation::PSTR, dwFlags : UInt32, ppcCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbHashData : UInt8*, pcbHashData : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun MsiGetFileSignatureInformationW(szSignedObjectPath : Win32cr::Foundation::PWSTR, dwFlags : UInt32, ppcCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbHashData : UInt8*, pcbHashData : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun MsiGetShortcutTargetA(szShortcutPath : Win32cr::Foundation::PSTR, szProductCode : Win32cr::Foundation::PSTR, szFeatureId : Win32cr::Foundation::PSTR, szComponentCode : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiGetShortcutTargetW(szShortcutPath : Win32cr::Foundation::PWSTR, szProductCode : Win32cr::Foundation::PWSTR, szFeatureId : Win32cr::Foundation::PWSTR, szComponentCode : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiIsProductElevatedA(szProduct : Win32cr::Foundation::PSTR, pfElevated : Win32cr::Foundation::BOOL*) : UInt32

    # :nodoc:
    fun MsiIsProductElevatedW(szProduct : Win32cr::Foundation::PWSTR, pfElevated : Win32cr::Foundation::BOOL*) : UInt32

    # :nodoc:
    fun MsiNotifySidChangeA(pOldSid : Win32cr::Foundation::PSTR, pNewSid : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiNotifySidChangeW(pOldSid : Win32cr::Foundation::PWSTR, pNewSid : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiBeginTransactionA(szName : Win32cr::Foundation::PSTR, dwTransactionAttributes : UInt32, phTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32

    # :nodoc:
    fun MsiBeginTransactionW(szName : Win32cr::Foundation::PWSTR, dwTransactionAttributes : UInt32, phTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32

    # :nodoc:
    fun MsiEndTransaction(dwTransactionState : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSACTIONSTATE) : UInt32

    # :nodoc:
    fun MsiJoinTransaction(hTransactionHandle : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, dwTransactionAttributes : UInt32, phChangeOfOwnerEvent : Win32cr::Foundation::HANDLE*) : UInt32

    # :nodoc:
    fun MsiDatabaseOpenViewA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szQuery : Win32cr::Foundation::PSTR, phView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiDatabaseOpenViewW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szQuery : Win32cr::Foundation::PWSTR, phView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiViewGetErrorA(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szColumnNameBuffer : UInt8*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBERROR

    # :nodoc:
    fun MsiViewGetErrorW(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szColumnNameBuffer : UInt16*, pcchBuf : UInt32*) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBERROR

    # :nodoc:
    fun MsiViewExecute(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiViewFetch(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiViewModify(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eModifyMode : Win32cr::System::ApplicationInstallationAndServicing::MSIMODIFY, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiViewGetColumnInfo(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eColumnInfo : Win32cr::System::ApplicationInstallationAndServicing::MSICOLINFO, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiViewClose(hView : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiDatabaseGetPrimaryKeysA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiDatabaseGetPrimaryKeysW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR, phRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiDatabaseIsTablePersistentA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION

    # :nodoc:
    fun MsiDatabaseIsTablePersistentW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION

    # :nodoc:
    fun MsiGetSummaryInformationA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDatabasePath : Win32cr::Foundation::PSTR, uiUpdateCount : UInt32, phSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiGetSummaryInformationW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDatabasePath : Win32cr::Foundation::PWSTR, uiUpdateCount : UInt32, phSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiSummaryInfoGetPropertyCount(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, puiPropertyCount : UInt32*) : UInt32

    # :nodoc:
    fun MsiSummaryInfoSetPropertyA(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, uiDataType : UInt32, iValue : Int32, pftValue : Win32cr::Foundation::FILETIME*, szValue : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSummaryInfoSetPropertyW(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, uiDataType : UInt32, iValue : Int32, pftValue : Win32cr::Foundation::FILETIME*, szValue : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSummaryInfoGetPropertyA(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, puiDataType : UInt32*, piValue : Int32*, pftValue : Win32cr::Foundation::FILETIME*, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiSummaryInfoGetPropertyW(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, uiProperty : UInt32, puiDataType : UInt32*, piValue : Int32*, pftValue : Win32cr::Foundation::FILETIME*, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiSummaryInfoPersist(hSummaryInfo : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiOpenDatabaseA(szDatabasePath : Win32cr::Foundation::PSTR, szPersist : Win32cr::Foundation::PSTR, phDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiOpenDatabaseW(szDatabasePath : Win32cr::Foundation::PWSTR, szPersist : Win32cr::Foundation::PWSTR, phDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiDatabaseImportA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolderPath : Win32cr::Foundation::PSTR, szFileName : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseImportW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolderPath : Win32cr::Foundation::PWSTR, szFileName : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseExportA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR, szFolderPath : Win32cr::Foundation::PSTR, szFileName : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseExportW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR, szFolderPath : Win32cr::Foundation::PWSTR, szFileName : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseMergeA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseMerge : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseMergeW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseMerge : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTableName : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiDatabaseGenerateTransformA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iReserved1 : Int32, iReserved2 : Int32) : UInt32

    # :nodoc:
    fun MsiDatabaseGenerateTransformW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iReserved1 : Int32, iReserved2 : Int32) : UInt32

    # :nodoc:
    fun MsiDatabaseApplyTransformA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR) : UInt32

    # :nodoc:
    fun MsiDatabaseApplyTransformW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR) : UInt32

    # :nodoc:
    fun MsiCreateTransformSummaryInfoA(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR, iValidation : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_VALIDATE) : UInt32

    # :nodoc:
    fun MsiCreateTransformSummaryInfoW(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hDatabaseReference : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTransformFile : Win32cr::Foundation::PWSTR, iErrorConditions : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_ERROR, iValidation : Win32cr::System::ApplicationInstallationAndServicing::MSITRANSFORM_VALIDATE) : UInt32

    # :nodoc:
    fun MsiDatabaseCommit(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiGetDatabaseState(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Win32cr::System::ApplicationInstallationAndServicing::MSIDBSTATE

    # :nodoc:
    fun MsiCreateRecord(cParams : UInt32) : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE

    # :nodoc:
    fun MsiRecordIsNull(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun MsiRecordDataSize(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : UInt32

    # :nodoc:
    fun MsiRecordSetInteger(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, iValue : Int32) : UInt32

    # :nodoc:
    fun MsiRecordSetStringA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValue : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiRecordSetStringW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValue : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiRecordGetInteger(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32) : Int32

    # :nodoc:
    fun MsiRecordGetStringA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiRecordGetStringW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiRecordGetFieldCount(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiRecordSetStreamA(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szFilePath : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiRecordSetStreamW(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szFilePath : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiRecordReadStream(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iField : UInt32, szDataBuf : Win32cr::Foundation::PSTR, pcbDataBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiRecordClearData(hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiGetActiveDatabase(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE

    # :nodoc:
    fun MsiSetPropertyA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PSTR, szValue : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSetPropertyW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PWSTR, szValue : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiGetPropertyA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PSTR, szValueBuf : UInt8*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetPropertyW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szName : Win32cr::Foundation::PWSTR, szValueBuf : UInt16*, pcchValueBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetLanguage(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt16

    # :nodoc:
    fun MsiGetMode(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eRunMode : Win32cr::System::ApplicationInstallationAndServicing::MSIRUNMODE) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun MsiSetMode(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eRunMode : Win32cr::System::ApplicationInstallationAndServicing::MSIRUNMODE, fState : Win32cr::Foundation::BOOL) : UInt32

    # :nodoc:
    fun MsiFormatRecordA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szResultBuf : UInt8*, pcchResultBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiFormatRecordW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szResultBuf : UInt16*, pcchResultBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiDoActionA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szAction : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiDoActionW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szAction : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiSequenceA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTable : Win32cr::Foundation::PSTR, iSequenceMode : Int32) : UInt32

    # :nodoc:
    fun MsiSequenceW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szTable : Win32cr::Foundation::PWSTR, iSequenceMode : Int32) : UInt32

    # :nodoc:
    fun MsiProcessMessage(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, eMessageType : Win32cr::System::ApplicationInstallationAndServicing::INSTALLMESSAGE, hRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : Int32

    # :nodoc:
    fun MsiEvaluateConditionA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szCondition : Win32cr::Foundation::PSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION

    # :nodoc:
    fun MsiEvaluateConditionW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szCondition : Win32cr::Foundation::PWSTR) : Win32cr::System::ApplicationInstallationAndServicing::MSICONDITION

    # :nodoc:
    fun MsiGetFeatureStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiGetFeatureStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiSetFeatureStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiSetFeatureStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiSetFeatureAttributesA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, dwAttributes : UInt32) : UInt32

    # :nodoc:
    fun MsiSetFeatureAttributesW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, dwAttributes : UInt32) : UInt32

    # :nodoc:
    fun MsiGetComponentStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiGetComponentStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, piInstalled : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*, piAction : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE*) : UInt32

    # :nodoc:
    fun MsiSetComponentStateA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiSetComponentStateW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE) : UInt32

    # :nodoc:
    fun MsiGetFeatureCostA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, iCostTree : Win32cr::System::ApplicationInstallationAndServicing::MSICOSTTREE, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, piCost : Int32*) : UInt32

    # :nodoc:
    fun MsiGetFeatureCostW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, iCostTree : Win32cr::System::ApplicationInstallationAndServicing::MSICOSTTREE, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, piCost : Int32*) : UInt32

    # :nodoc:
    fun MsiEnumComponentCostsA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PSTR, dwIndex : UInt32, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szDriveBuf : UInt8*, pcchDriveBuf : UInt32*, piCost : Int32*, piTempCost : Int32*) : UInt32

    # :nodoc:
    fun MsiEnumComponentCostsW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szComponent : Win32cr::Foundation::PWSTR, dwIndex : UInt32, iState : Win32cr::System::ApplicationInstallationAndServicing::INSTALLSTATE, szDriveBuf : UInt16*, pcchDriveBuf : UInt32*, piCost : Int32*, piTempCost : Int32*) : UInt32

    # :nodoc:
    fun MsiSetInstallLevel(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, iInstallLevel : Int32) : UInt32

    # :nodoc:
    fun MsiGetFeatureValidStatesA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PSTR, lpInstallStates : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetFeatureValidStatesW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFeature : Win32cr::Foundation::PWSTR, lpInstallStates : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetSourcePathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetSourcePathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetTargetPathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szPathBuf : UInt8*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiGetTargetPathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szPathBuf : UInt16*, pcchPathBuf : UInt32*) : UInt32

    # :nodoc:
    fun MsiSetTargetPathA(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PSTR, szFolderPath : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiSetTargetPathW(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szFolder : Win32cr::Foundation::PWSTR, szFolderPath : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiVerifyDiskSpace(hInstall : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE) : UInt32

    # :nodoc:
    fun MsiEnableUIPreview(hDatabase : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, phPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE*) : UInt32

    # :nodoc:
    fun MsiPreviewDialogA(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDialogName : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiPreviewDialogW(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szDialogName : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiPreviewBillboardA(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szControlName : Win32cr::Foundation::PSTR, szBillboard : Win32cr::Foundation::PSTR) : UInt32

    # :nodoc:
    fun MsiPreviewBillboardW(hPreview : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE, szControlName : Win32cr::Foundation::PWSTR, szBillboard : Win32cr::Foundation::PWSTR) : UInt32

    # :nodoc:
    fun MsiGetLastErrorRecord : Win32cr::System::ApplicationInstallationAndServicing::MSIHANDLE

    # :nodoc:
    fun SfcGetNextProtectedFile(rpc_handle : Win32cr::Foundation::HANDLE, prot_file_data : Win32cr::System::ApplicationInstallationAndServicing::PROTECTED_FILE_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun SfcIsFileProtected(rpc_handle : Win32cr::Foundation::HANDLE, prot_file_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun SfcIsKeyProtected(key_handle : Win32cr::System::Registry::HKEY, sub_key_name : Win32cr::Foundation::PWSTR, key_sam : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun SfpVerifyFile(pszFileName : Win32cr::Foundation::PSTR, pszError : UInt8*, dwErrSize : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileA(old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, patch_file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileW(old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, patch_file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileByHandles(old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, patch_file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileExA(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_A*, new_file_name : Win32cr::Foundation::PSTR, patch_file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileExW(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_W*, new_file_name : Win32cr::Foundation::PWSTR, patch_file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreatePatchFileByHandlesEx(old_file_count : UInt32, old_file_info_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OLD_FILE_INFO_H*, new_file_handle : Win32cr::Foundation::HANDLE, patch_file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ExtractPatchHeaderToFileA(patch_file_name : Win32cr::Foundation::PSTR, patch_header_file_name : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ExtractPatchHeaderToFileW(patch_file_name : Win32cr::Foundation::PWSTR, patch_header_file_name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ExtractPatchHeaderToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, patch_header_file_handle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun TestApplyPatchToFileA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun TestApplyPatchToFileW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun TestApplyPatchToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun TestApplyPatchToFileByBuffers(patch_file_buffer : UInt8*, patch_file_size : UInt32, old_file_buffer : UInt8*, old_file_size : UInt32, new_file_size : UInt32*, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileByHandles(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileExA(patch_file_name : Win32cr::Foundation::PSTR, old_file_name : Win32cr::Foundation::PSTR, new_file_name : Win32cr::Foundation::PSTR, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileExW(patch_file_name : Win32cr::Foundation::PWSTR, old_file_name : Win32cr::Foundation::PWSTR, new_file_name : Win32cr::Foundation::PWSTR, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileByHandlesEx(patch_file_handle : Win32cr::Foundation::HANDLE, old_file_handle : Win32cr::Foundation::HANDLE, new_file_handle : Win32cr::Foundation::HANDLE, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyPatchToFileByBuffers(patch_file_mapped : UInt8*, patch_file_size : UInt32, old_file_mapped : UInt8*, old_file_size : UInt32, new_file_buffer : UInt8**, new_file_buffer_size : UInt32, new_file_actual_size : UInt32*, new_file_time : Win32cr::Foundation::FILETIME*, apply_option_flags : UInt32, progress_callback : Win32cr::System::ApplicationInstallationAndServicing::PPATCH_PROGRESS_CALLBACK, callback_context : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetFilePatchSignatureA(file_name : Win32cr::Foundation::PSTR, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetFilePatchSignatureW(file_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetFilePatchSignatureByHandle(file_handle : Win32cr::Foundation::HANDLE, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetFilePatchSignatureByBuffer(file_buffer_writable : UInt8*, file_size : UInt32, option_flags : UInt32, option_data : Void*, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*, signature_buffer_size : UInt32, signature_buffer : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun NormalizeFileForPatchSignature(file_buffer : Void*, file_size : UInt32, option_flags : UInt32, option_data : Win32cr::System::ApplicationInstallationAndServicing::PATCH_OPTION_DATA*, new_file_coff_base : UInt32, new_file_coff_time : UInt32, ignore_range_count : UInt32, ignore_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_IGNORE_RANGE*, retain_range_count : UInt32, retain_range_array : Win32cr::System::ApplicationInstallationAndServicing::PATCH_RETAIN_RANGE*) : Int32

    # :nodoc:
    fun GetDeltaInfoB(delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetDeltaInfoA(lpDeltaName : Win32cr::Foundation::PSTR, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetDeltaInfoW(lpDeltaName : Win32cr::Foundation::PWSTR, lpHeaderInfo : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HEADER_INFO*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyDeltaGetReverseB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpReverseFileTime : Win32cr::Foundation::FILETIME*, lpTarget : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*, lpTargetReverse : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyDeltaB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTarget : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyDeltaProvidedB(apply_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, delta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTarget : Void*, uTargetSize : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyDeltaA(apply_flags : Int64, lpSourceName : Win32cr::Foundation::PSTR, lpDeltaName : Win32cr::Foundation::PSTR, lpTargetName : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ApplyDeltaW(apply_flags : Int64, lpSourceName : Win32cr::Foundation::PWSTR, lpDeltaName : Win32cr::Foundation::PWSTR, lpTargetName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreateDeltaB(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, target : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, source_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, target_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDelta : Win32cr::System::ApplicationInstallationAndServicing::DELTA_OUTPUT*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreateDeltaA(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, lpSourceName : Win32cr::Foundation::PSTR, lpTargetName : Win32cr::Foundation::PSTR, lpSourceOptionsName : Win32cr::Foundation::PSTR, lpTargetOptionsName : Win32cr::Foundation::PSTR, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDeltaName : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreateDeltaW(file_type_set : Int64, set_flags : Int64, reset_flags : Int64, lpSourceName : Win32cr::Foundation::PWSTR, lpTargetName : Win32cr::Foundation::PWSTR, lpSourceOptionsName : Win32cr::Foundation::PWSTR, lpTargetOptionsName : Win32cr::Foundation::PWSTR, global_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpTargetFileTime : Win32cr::Foundation::FILETIME*, hash_alg_id : UInt32, lpDeltaName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetDeltaSignatureB(file_type_set : Int64, hash_alg_id : UInt32, source : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetDeltaSignatureA(file_type_set : Int64, hash_alg_id : UInt32, lpSourceName : Win32cr::Foundation::PSTR, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetDeltaSignatureW(file_type_set : Int64, hash_alg_id : UInt32, lpSourceName : Win32cr::Foundation::PWSTR, lpHash : Win32cr::System::ApplicationInstallationAndServicing::DELTA_HASH*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun DeltaNormalizeProvidedB(file_type_set : Int64, normalize_flags : Int64, normalize_options : Win32cr::System::ApplicationInstallationAndServicing::DELTA_INPUT, lpSource : Void*, uSourceSize : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun DeltaFree(lpMemory : Void*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun CreateActCtxA(pActCtx : Win32cr::System::ApplicationInstallationAndServicing::ACTCTXA*) : Win32cr::Foundation::HANDLE

    # :nodoc:
    fun CreateActCtxW(pActCtx : Win32cr::System::ApplicationInstallationAndServicing::ACTCTXW*) : Win32cr::Foundation::HANDLE

    # :nodoc:
    fun AddRefActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Void

    # :nodoc:
    fun ReleaseActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Void

    # :nodoc:
    fun ZombifyActCtx(hActCtx : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ActivateActCtx(hActCtx : Win32cr::Foundation::HANDLE, lpCookie : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun DeactivateActCtx(dwFlags : UInt32, ulCookie : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun GetCurrentActCtx(lphActCtx : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun FindActCtxSectionStringA(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpStringToFind : Win32cr::Foundation::PSTR, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun FindActCtxSectionStringW(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpStringToFind : Win32cr::Foundation::PWSTR, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun FindActCtxSectionGuid(dwFlags : UInt32, lpExtensionGuid : LibC::GUID*, ulSectionId : UInt32, lpGuidToFind : LibC::GUID*, returned_data : Win32cr::System::ApplicationInstallationAndServicing::ACTCTX_SECTION_KEYED_DATA*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun QueryActCtxW(dwFlags : UInt32, hActCtx : Win32cr::Foundation::HANDLE, pvSubInstance : Void*, ulInfoClass : UInt32, pvBuffer : Void*, cbBuffer : LibC::UIntPtrT, pcbWrittenOrRequired : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun QueryActCtxSettingsW(dwFlags : UInt32, hActCtx : Win32cr::Foundation::HANDLE, settingsNameSpace : Win32cr::Foundation::PWSTR, settingName : Win32cr::Foundation::PWSTR, pvBuffer : Win32cr::Foundation::PWSTR, dwBuffer : LibC::UIntPtrT, pdwWrittenOrRequired : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

  end
end