require "./com.cr"
require "./../foundation.cr"
require "./../storage/index_server.cr"
require "./com/structured_storage.cr"
require "./search/common.cr"
require "./../ui/shell/properties_system.cr"
require "./distributed_transaction_coordinator.cr"
require "./../security/authorization.cr"
require "./../ui/shell/common.cr"

module Win32cr::System::Search
  extend self
  alias PFNFILLTEXTBUFFER = Proc(Win32cr::System::Search::TEXT_SOURCE*, Win32cr::Foundation::HRESULT)

  alias SQL_ASYNC_NOTIFICATION_CALLBACK = Proc(Void*, Win32cr::Foundation::BOOL, Int16)

  SI_TEMPORARY = 2147483648_u32
  SUBSINFO_ALLFLAGS = 61311_u32
  RS_READY = 1_u32
  RS_SUSPENDED = 2_u32
  RS_UPDATING = 4_u32
  RS_SUSPENDONIDLE = 65536_u32
  RS_MAYBOTHERUSER = 131072_u32
  RS_COMPLETED = 2147483648_u32
  SUBSMGRUPDATE_MINIMIZE = 1_u32
  SUBSMGRUPDATE_MASK = 1_u32
  SUBSMGRENUM_TEMP = 1_u32
  SUBSMGRENUM_MASK = 1_u32
  INET_E_AGENT_MAX_SIZE_EXCEEDED = -2146693248_i32
  INET_S_AGENT_PART_FAIL = 790401_i32
  INET_E_AGENT_CACHE_SIZE_EXCEEDED = -2146693246_i32
  INET_E_AGENT_CONNECTION_FAILED = -2146693245_i32
  INET_E_SCHEDULED_UPDATES_DISABLED = -2146693244_i32
  INET_E_SCHEDULED_UPDATES_RESTRICTED = -2146693243_i32
  INET_E_SCHEDULED_UPDATE_INTERVAL = -2146693242_i32
  INET_E_SCHEDULED_EXCLUDE_RANGE = -2146693241_i32
  INET_E_AGENT_EXCEEDING_CACHE_SIZE = -2146693232_i32
  INET_S_AGENT_INCREASED_CACHE_SIZE = 790416_i32
  OLEDBVER = 624_u32
  DB_NULL_HACCESSOR = 0_u32
  DB_INVALID_HACCESSOR = 0_u32
  DB_NULL_HROW = 0_u32
  DB_NULL_HCHAPTER = 0_u32
  DB_INVALID_HCHAPTER = 0_u32
  STD_BOOKMARKLENGTH = 1_u32
  DBPROPVAL_BMK_NUMERIC = 1_i32
  DBPROPVAL_BMK_KEY = 2_i32
  DBPROPVAL_CL_START = 1_i32
  DBPROPVAL_CL_END = 2_i32
  DBPROPVAL_CU_DML_STATEMENTS = 1_i32
  DBPROPVAL_CU_TABLE_DEFINITION = 2_i32
  DBPROPVAL_CU_INDEX_DEFINITION = 4_i32
  DBPROPVAL_CU_PRIVILEGE_DEFINITION = 8_i32
  DBPROPVAL_CD_NOTNULL = 1_i32
  DBPROPVAL_CB_NULL = 1_i32
  DBPROPVAL_CB_NON_NULL = 2_i32
  DBPROPVAL_FU_NOT_SUPPORTED = 1_i32
  DBPROPVAL_FU_COLUMN = 2_i32
  DBPROPVAL_FU_TABLE = 4_i32
  DBPROPVAL_FU_CATALOG = 8_i32
  DBPROPVAL_GB_NOT_SUPPORTED = 1_i32
  DBPROPVAL_GB_EQUALS_SELECT = 2_i32
  DBPROPVAL_GB_CONTAINS_SELECT = 4_i32
  DBPROPVAL_GB_NO_RELATION = 8_i32
  DBPROPVAL_HT_DIFFERENT_CATALOGS = 1_i32
  DBPROPVAL_HT_DIFFERENT_PROVIDERS = 2_i32
  DBPROPVAL_IC_UPPER = 1_i32
  DBPROPVAL_IC_LOWER = 2_i32
  DBPROPVAL_IC_SENSITIVE = 4_i32
  DBPROPVAL_IC_MIXED = 8_i32
  DBPROPVAL_LM_NONE = 1_i32
  DBPROPVAL_LM_READ = 2_i32
  DBPROPVAL_LM_INTENT = 4_i32
  DBPROPVAL_LM_RITE = 8_i32
  DBPROPVAL_NP_OKTODO = 1_i32
  DBPROPVAL_NP_ABOUTTODO = 2_i32
  DBPROPVAL_NP_SYNCHAFTER = 4_i32
  DBPROPVAL_NP_FAILEDTODO = 8_i32
  DBPROPVAL_NP_DIDEVENT = 16_i32
  DBPROPVAL_NC_END = 1_i32
  DBPROPVAL_NC_HIGH = 2_i32
  DBPROPVAL_NC_LOW = 4_i32
  DBPROPVAL_NC_START = 8_i32
  DBPROPVAL_OO_BLOB = 1_i32
  DBPROPVAL_OO_IPERSIST = 2_i32
  DBPROPVAL_CB_DELETE = 1_i32
  DBPROPVAL_CB_PRESERVE = 2_i32
  DBPROPVAL_SU_DML_STATEMENTS = 1_i32
  DBPROPVAL_SU_TABLE_DEFINITION = 2_i32
  DBPROPVAL_SU_INDEX_DEFINITION = 4_i32
  DBPROPVAL_SU_PRIVILEGE_DEFINITION = 8_i32
  DBPROPVAL_SQ_CORRELATEDSUBQUERIES = 1_i32
  DBPROPVAL_SQ_COMPARISON = 2_i32
  DBPROPVAL_SQ_EXISTS = 4_i32
  DBPROPVAL_SQ_IN = 8_i32
  DBPROPVAL_SQ_QUANTIFIED = 16_i32
  DBPROPVAL_SQ_TABLE = 32_i32
  DBPROPVAL_SS_ISEQUENTIALSTREAM = 1_i32
  DBPROPVAL_SS_ISTREAM = 2_i32
  DBPROPVAL_SS_ISTORAGE = 4_i32
  DBPROPVAL_SS_ILOCKBYTES = 8_i32
  DBPROPVAL_TI_CHAOS = 16_i32
  DBPROPVAL_TI_READUNCOMMITTED = 256_i32
  DBPROPVAL_TI_BROWSE = 256_i32
  DBPROPVAL_TI_CURSORSTABILITY = 4096_i32
  DBPROPVAL_TI_READCOMMITTED = 4096_i32
  DBPROPVAL_TI_REPEATABLEREAD = 65536_i32
  DBPROPVAL_TI_SERIALIZABLE = 1048576_i32
  DBPROPVAL_TI_ISOLATED = 1048576_i32
  DBPROPVAL_TR_COMMIT_DC = 1_i32
  DBPROPVAL_TR_COMMIT = 2_i32
  DBPROPVAL_TR_COMMIT_NO = 4_i32
  DBPROPVAL_TR_ABORT_DC = 8_i32
  DBPROPVAL_TR_ABORT = 16_i32
  DBPROPVAL_TR_ABORT_NO = 32_i32
  DBPROPVAL_TR_DONTCARE = 64_i32
  DBPROPVAL_TR_BOTH = 128_i32
  DBPROPVAL_TR_NONE = 256_i32
  DBPROPVAL_TR_OPTIMISTIC = 512_i32
  DBPROPVAL_RT_FREETHREAD = 1_i32
  DBPROPVAL_RT_APTMTTHREAD = 2_i32
  DBPROPVAL_RT_SINGLETHREAD = 4_i32
  DBPROPVAL_UP_CHANGE = 1_i32
  DBPROPVAL_UP_DELETE = 2_i32
  DBPROPVAL_UP_INSERT = 4_i32
  DBPROPVAL_SQL_NONE = 0_i32
  DBPROPVAL_SQL_ODBC_MINIMUM = 1_i32
  DBPROPVAL_SQL_ODBC_CORE = 2_i32
  DBPROPVAL_SQL_ODBC_EXTENDED = 4_i32
  DBPROPVAL_SQL_ANSI89_IEF = 8_i32
  DBPROPVAL_SQL_ANSI92_ENTRY = 16_i32
  DBPROPVAL_SQL_FIPS_TRANSITIONAL = 32_i32
  DBPROPVAL_SQL_ANSI92_INTERMEDIATE = 64_i32
  DBPROPVAL_SQL_ANSI92_FULL = 128_i32
  DBPROPVAL_SQL_ESCAPECLAUSES = 256_i32
  DBPROPVAL_IT_BTREE = 1_i32
  DBPROPVAL_IT_HASH = 2_i32
  DBPROPVAL_IT_CONTENT = 3_i32
  DBPROPVAL_IT_OTHER = 4_i32
  DBPROPVAL_IN_DISALLOWNULL = 1_i32
  DBPROPVAL_IN_IGNORENULL = 2_i32
  DBPROPVAL_IN_IGNOREANYNULL = 4_i32
  DBPROPVAL_TC_NONE = 0_i32
  DBPROPVAL_TC_DML = 1_i32
  DBPROPVAL_TC_DDL_COMMIT = 2_i32
  DBPROPVAL_TC_DDL_IGNORE = 4_i32
  DBPROPVAL_TC_ALL = 8_i32
  DBPROPVAL_OA_NOTSUPPORTED = 1_i32
  DBPROPVAL_OA_ATEXECUTE = 2_i32
  DBPROPVAL_OA_ATROWRELEASE = 4_i32
  DBPROPVAL_MR_NOTSUPPORTED = 0_i32
  DBPROPVAL_MR_SUPPORTED = 1_i32
  DBPROPVAL_MR_CONCURRENT = 2_i32
  DBPROPVAL_PT_GUID_NAME = 1_i32
  DBPROPVAL_PT_GUID_PROPID = 2_i32
  DBPROPVAL_PT_NAME = 4_i32
  DBPROPVAL_PT_GUID = 8_i32
  DBPROPVAL_PT_PROPID = 16_i32
  DBPROPVAL_PT_PGUID_NAME = 32_i32
  DBPROPVAL_PT_PGUID_PROPID = 64_i32
  DBPROPVAL_NT_SINGLEROW = 1_i32
  DBPROPVAL_NT_MULTIPLEROWS = 2_i32
  DBPROPVAL_ASYNCH_INITIALIZE = 1_i32
  DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION = 2_i32
  DBPROPVAL_ASYNCH_RANDOMPOPULATION = 4_i32
  DBPROPVAL_OP_EQUAL = 1_i32
  DBPROPVAL_OP_RELATIVE = 2_i32
  DBPROPVAL_OP_STRING = 4_i32
  DBPROPVAL_CO_EQUALITY = 1_i32
  DBPROPVAL_CO_STRING = 2_i32
  DBPROPVAL_CO_CASESENSITIVE = 4_i32
  DBPROPVAL_CO_CASEINSENSITIVE = 8_i32
  DBPROPVAL_CO_CONTAINS = 16_i32
  DBPROPVAL_CO_BEGINSWITH = 32_i32
  DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION = 8_i32
  DBPROPVAL_ASYNCH_PREPOPULATE = 16_i32
  DBPROPVAL_ASYNCH_POPULATEONDEMAND = 32_i32
  DBPROPVAL_LM_SINGLEROW = 2_i32
  DBPROPVAL_SQL_SUBMINIMUM = 512_i32
  DBPROPVAL_DST_TDP = 1_i32
  DBPROPVAL_DST_MDP = 2_i32
  DBPROPVAL_DST_TDPANDMDP = 3_i32
  MDPROPVAL_AU_UNSUPPORTED = 0_i32
  MDPROPVAL_AU_UNCHANGED = 1_i32
  MDPROPVAL_AU_UNKNOWN = 2_i32
  MDPROPVAL_MF_WITH_CALCMEMBERS = 1_i32
  MDPROPVAL_MF_WITH_NAMEDSETS = 2_i32
  MDPROPVAL_MF_CREATE_CALCMEMBERS = 4_i32
  MDPROPVAL_MF_CREATE_NAMEDSETS = 8_i32
  MDPROPVAL_MF_SCOPE_SESSION = 16_i32
  MDPROPVAL_MF_SCOPE_GLOBAL = 32_i32
  MDPROPVAL_MMF_COUSIN = 1_i32
  MDPROPVAL_MMF_PARALLELPERIOD = 2_i32
  MDPROPVAL_MMF_OPENINGPERIOD = 4_i32
  MDPROPVAL_MMF_CLOSINGPERIOD = 8_i32
  MDPROPVAL_MNF_MEDIAN = 1_i32
  MDPROPVAL_MNF_VAR = 2_i32
  MDPROPVAL_MNF_STDDEV = 4_i32
  MDPROPVAL_MNF_RANK = 8_i32
  MDPROPVAL_MNF_AGGREGATE = 16_i32
  MDPROPVAL_MNF_COVARIANCE = 32_i32
  MDPROPVAL_MNF_CORRELATION = 64_i32
  MDPROPVAL_MNF_LINREGSLOPE = 128_i32
  MDPROPVAL_MNF_LINREGVARIANCE = 256_i32
  MDPROPVAL_MNF_LINREG2 = 512_i32
  MDPROPVAL_MNF_LINREGPOINT = 1024_i32
  MDPROPVAL_MNF_DRILLDOWNLEVEL = 2048_i32
  MDPROPVAL_MNF_DRILLDOWNMEMBERTOP = 4096_i32
  MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM = 8192_i32
  MDPROPVAL_MNF_DRILLDOWNLEVELTOP = 16384_i32
  MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM = 32768_i32
  MDPROPVAL_MNF_DRILLUPMEMBER = 65536_i32
  MDPROPVAL_MNF_DRILLUPLEVEL = 131072_i32
  MDPROPVAL_MSF_TOPPERCENT = 1_i32
  MDPROPVAL_MSF_BOTTOMPERCENT = 2_i32
  MDPROPVAL_MSF_TOPSUM = 4_i32
  MDPROPVAL_MSF_BOTTOMSUM = 8_i32
  MDPROPVAL_MSF_PERIODSTODATE = 16_i32
  MDPROPVAL_MSF_LASTPERIODS = 32_i32
  MDPROPVAL_MSF_YTD = 64_i32
  MDPROPVAL_MSF_QTD = 128_i32
  MDPROPVAL_MSF_MTD = 256_i32
  MDPROPVAL_MSF_WTD = 512_i32
  MDPROPVAL_MSF_DRILLDOWNMEMBBER = 1024_i32
  MDPROPVAL_MSF_DRILLDOWNLEVEL = 2048_i32
  MDPROPVAL_MSF_DRILLDOWNMEMBERTOP = 4096_i32
  MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM = 8192_i32
  MDPROPVAL_MSF_DRILLDOWNLEVELTOP = 16384_i32
  MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM = 32768_i32
  MDPROPVAL_MSF_DRILLUPMEMBER = 65536_i32
  MDPROPVAL_MSF_DRILLUPLEVEL = 131072_i32
  MDPROPVAL_MSF_TOGGLEDRILLSTATE = 262144_i32
  MDPROPVAL_MD_SELF = 1_i32
  MDPROPVAL_MD_BEFORE = 2_i32
  MDPROPVAL_MD_AFTER = 4_i32
  MDPROPVAL_MSC_LESSTHAN = 1_i32
  MDPROPVAL_MSC_GREATERTHAN = 2_i32
  MDPROPVAL_MSC_LESSTHANEQUAL = 4_i32
  MDPROPVAL_MSC_GREATERTHANEQUAL = 8_i32
  MDPROPVAL_MC_SINGLECASE = 1_i32
  MDPROPVAL_MC_SEARCHEDCASE = 2_i32
  MDPROPVAL_MOQ_OUTERREFERENCE = 1_i32
  MDPROPVAL_MOQ_DATASOURCE_CUBE = 1_i32
  MDPROPVAL_MOQ_CATALOG_CUBE = 2_i32
  MDPROPVAL_MOQ_SCHEMA_CUBE = 4_i32
  MDPROPVAL_MOQ_CUBE_DIM = 8_i32
  MDPROPVAL_MOQ_DIM_HIER = 16_i32
  MDPROPVAL_MOQ_DIMHIER_LEVEL = 32_i32
  MDPROPVAL_MOQ_LEVEL_MEMBER = 64_i32
  MDPROPVAL_MOQ_MEMBER_MEMBER = 128_i32
  MDPROPVAL_MOQ_DIMHIER_MEMBER = 256_i32
  MDPROPVAL_FS_FULL_SUPPORT = 1_i32
  MDPROPVAL_FS_GENERATED_COLUMN = 2_i32
  MDPROPVAL_FS_GENERATED_DIMENSION = 3_i32
  MDPROPVAL_FS_NO_SUPPORT = 4_i32
  MDPROPVAL_NL_NAMEDLEVELS = 1_i32
  MDPROPVAL_NL_NUMBEREDLEVELS = 2_i32
  MDPROPVAL_MJC_SINGLECUBE = 1_i32
  MDPROPVAL_MJC_MULTICUBES = 2_i32
  MDPROPVAL_MJC_IMPLICITCUBE = 4_i32
  MDPROPVAL_RR_NORANGEROWSET = 1_i32
  MDPROPVAL_RR_READONLY = 2_i32
  MDPROPVAL_RR_UPDATE = 4_i32
  MDPROPVAL_MS_MULTIPLETUPLES = 1_i32
  MDPROPVAL_MS_SINGLETUPLE = 2_i32
  MDPROPVAL_NME_ALLDIMENSIONS = 0_i32
  MDPROPVAL_NME_MEASURESONLY = 1_i32
  DBPROPVAL_AO_SEQUENTIAL = 0_i32
  DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS = 1_i32
  DBPROPVAL_AO_RANDOM = 2_i32
  DBPROPVAL_BD_ROWSET = 0_i32
  DBPROPVAL_BD_INTRANSACTION = 1_i32
  DBPROPVAL_BD_XTRANSACTION = 2_i32
  DBPROPVAL_BD_REORGANIZATION = 3_i32
  BMK_DURABILITY_ROWSET = 0_i32
  BMK_DURABILITY_INTRANSACTION = 1_i32
  BMK_DURABILITY_XTRANSACTION = 2_i32
  BMK_DURABILITY_REORGANIZATION = 3_i32
  DBPROPVAL_BO_NOLOG = 0_i32
  DBPROPVAL_BO_NOINDEXUPDATE = 1_i32
  DBPROPVAL_BO_REFINTEGRITY = 2_i32
  DBPROPVAL_STGM_DIRECT = 65536_u32
  DBPROPVAL_STGM_TRANSACTED = 131072_u32
  DBPROPVAL_STGM_CONVERT = 262144_u32
  DBPROPVAL_STGM_FAILIFTHERE = 524288_u32
  DBPROPVAL_STGM_PRIORITY = 1048576_u32
  DBPROPVAL_STGM_DELETEONRELEASE = 2097152_u32
  DBPROPVAL_GB_COLLATE = 16_i32
  DBPROPVAL_CS_UNINITIALIZED = 0_i32
  DBPROPVAL_CS_INITIALIZED = 1_i32
  DBPROPVAL_CS_COMMUNICATIONFAILURE = 2_i32
  DBPROPVAL_RD_RESETALL = -1_i32
  DBPROPVAL_OS_RESOURCEPOOLING = 1_i32
  DBPROPVAL_OS_TXNENLISTMENT = 2_i32
  DBPROPVAL_OS_CLIENTCURSOR = 4_i32
  DBPROPVAL_OS_ENABLEALL = -1_i32
  DBPROPVAL_BI_CROSSROWSET = 1_i32
  MDPROPVAL_NL_SCHEMAONLY = 4_i32
  DBPROPVAL_OS_DISABLEALL = 0_i32
  DBPROPVAL_OO_ROWOBJECT = 4_i32
  DBPROPVAL_OO_SCOPED = 8_i32
  DBPROPVAL_OO_DIRECTBIND = 16_i32
  DBPROPVAL_DST_DOCSOURCE = 4_i32
  DBPROPVAL_GU_NOTSUPPORTED = 1_i32
  DBPROPVAL_GU_SUFFIX = 2_i32
  DB_BINDFLAGS_DELAYFETCHCOLUMNS = 1_i32
  DB_BINDFLAGS_DELAYFETCHSTREAM = 2_i32
  DB_BINDFLAGS_RECURSIVE = 4_i32
  DB_BINDFLAGS_OUTPUT = 8_i32
  DB_BINDFLAGS_COLLECTION = 16_i32
  DB_BINDFLAGS_OPENIFEXISTS = 32_i32
  DB_BINDFLAGS_OVERWRITE = 64_i32
  DB_BINDFLAGS_ISSTRUCTUREDDOCUMENT = 128_i32
  DBPROPVAL_ORS_TABLE = 0_i32
  DBPROPVAL_ORS_INDEX = 1_i32
  DBPROPVAL_ORS_INTEGRATEDINDEX = 2_i32
  DBPROPVAL_TC_DDL_LOCK = 16_i32
  DBPROPVAL_ORS_STOREDPROC = 4_i32
  DBPROPVAL_IN_ALLOWNULL = 0_i32
  DBPROPVAL_OO_SINGLETON = 32_i32
  DBPROPVAL_OS_AGR_AFTERSESSION = 8_i32
  DBPROPVAL_CM_TRANSACTIONS = 1_i32
  DBPROPVAL_TS_CARDINALITY = 1_i32
  DBPROPVAL_TS_HISTOGRAM = 2_i32
  DBPROPVAL_ORS_HISTOGRAM = 8_i32
  MDPROPVAL_VISUAL_MODE_DEFAULT = 0_i32
  MDPROPVAL_VISUAL_MODE_VISUAL = 1_i32
  MDPROPVAL_VISUAL_MODE_VISUAL_OFF = 2_i32
  DB_IMP_LEVEL_ANONYMOUS = 0_u32
  DB_IMP_LEVEL_IDENTIFY = 1_u32
  DB_IMP_LEVEL_IMPERSONATE = 2_u32
  DB_IMP_LEVEL_DELEGATE = 3_u32
  DBPROMPT_PROMPT = 1_u32
  DBPROMPT_COMPLETE = 2_u32
  DBPROMPT_COMPLETEREQUIRED = 3_u32
  DBPROMPT_NOPROMPT = 4_u32
  DB_PROT_LEVEL_NONE = 0_u32
  DB_PROT_LEVEL_CONNECT = 1_u32
  DB_PROT_LEVEL_CALL = 2_u32
  DB_PROT_LEVEL_PKT = 3_u32
  DB_PROT_LEVEL_PKT_INTEGRITY = 4_u32
  DB_PROT_LEVEL_PKT_PRIVACY = 5_u32
  DB_MODE_READ = 1_u32
  DB_MODE_WRITE = 2_u32
  DB_MODE_READWRITE = 3_u32
  DB_MODE_SHARE_DENY_READ = 4_u32
  DB_MODE_SHARE_DENY_WRITE = 8_u32
  DB_MODE_SHARE_EXCLUSIVE = 12_u32
  DB_MODE_SHARE_DENY_NONE = 16_u32
  DBCOMPUTEMODE_COMPUTED = 1_u32
  DBCOMPUTEMODE_DYNAMIC = 2_u32
  DBCOMPUTEMODE_NOTCOMPUTED = 3_u32
  DBPROPVAL_DF_INITIALLY_DEFERRED = 1_u32
  DBPROPVAL_DF_INITIALLY_IMMEDIATE = 2_u32
  DBPROPVAL_DF_NOT_DEFERRABLE = 3_u32
  DBPARAMTYPE_INPUT = 1_u32
  DBPARAMTYPE_INPUTOUTPUT = 2_u32
  DBPARAMTYPE_OUTPUT = 3_u32
  DBPARAMTYPE_RETURNVALUE = 4_u32
  DB_PT_UNKNOWN = 1_u32
  DB_PT_PROCEDURE = 2_u32
  DB_PT_FUNCTION = 3_u32
  DB_REMOTE = 1_u32
  DB_LOCAL_SHARED = 2_u32
  DB_LOCAL_EXCLUSIVE = 3_u32
  DB_COLLATION_ASC = 1_u32
  DB_COLLATION_DESC = 2_u32
  DB_UNSEARCHABLE = 1_u32
  DB_LIKE_ONLY = 2_u32
  DB_ALL_EXCEPT_LIKE = 3_u32
  DB_SEARCHABLE = 4_u32
  MDTREEOP_CHILDREN = 1_u32
  MDTREEOP_SIBLINGS = 2_u32
  MDTREEOP_PARENT = 4_u32
  MDTREEOP_SELF = 8_u32
  MDTREEOP_DESCENDANTS = 16_u32
  MDTREEOP_ANCESTORS = 32_u32
  MD_DIMTYPE_UNKNOWN = 0_u32
  MD_DIMTYPE_TIME = 1_u32
  MD_DIMTYPE_MEASURE = 2_u32
  MD_DIMTYPE_OTHER = 3_u32
  MDLEVEL_TYPE_UNKNOWN = 0_u32
  MDLEVEL_TYPE_REGULAR = 0_u32
  MDLEVEL_TYPE_ALL = 1_u32
  MDLEVEL_TYPE_CALCULATED = 2_u32
  MDLEVEL_TYPE_TIME = 4_u32
  MDLEVEL_TYPE_RESERVED1 = 8_u32
  MDLEVEL_TYPE_TIME_YEARS = 20_u32
  MDLEVEL_TYPE_TIME_HALF_YEAR = 36_u32
  MDLEVEL_TYPE_TIME_QUARTERS = 68_u32
  MDLEVEL_TYPE_TIME_MONTHS = 132_u32
  MDLEVEL_TYPE_TIME_WEEKS = 260_u32
  MDLEVEL_TYPE_TIME_DAYS = 516_u32
  MDLEVEL_TYPE_TIME_HOURS = 772_u32
  MDLEVEL_TYPE_TIME_MINUTES = 1028_u32
  MDLEVEL_TYPE_TIME_SECONDS = 2052_u32
  MDLEVEL_TYPE_TIME_UNDEFINED = 4100_u32
  MDMEASURE_AGGR_UNKNOWN = 0_u32
  MDMEASURE_AGGR_SUM = 1_u32
  MDMEASURE_AGGR_COUNT = 2_u32
  MDMEASURE_AGGR_MIN = 3_u32
  MDMEASURE_AGGR_MAX = 4_u32
  MDMEASURE_AGGR_AVG = 5_u32
  MDMEASURE_AGGR_VAR = 6_u32
  MDMEASURE_AGGR_STD = 7_u32
  MDMEASURE_AGGR_CALCULATED = 127_u32
  MDPROP_MEMBER = 1_u32
  MDPROP_CELL = 2_u32
  MDMEMBER_TYPE_UNKNOWN = 0_u32
  MDMEMBER_TYPE_REGULAR = 1_u32
  MDMEMBER_TYPE_ALL = 2_u32
  MDMEMBER_TYPE_MEASURE = 3_u32
  MDMEMBER_TYPE_FORMULA = 4_u32
  MDMEMBER_TYPE_RESERVE1 = 5_u32
  MDMEMBER_TYPE_RESERVE2 = 6_u32
  MDMEMBER_TYPE_RESERVE3 = 7_u32
  MDMEMBER_TYPE_RESERVE4 = 8_u32
  MDDISPINFO_DRILLED_DOWN = 65536_u32
  MDDISPINFO_PARENT_SAME_AS_PREV = 131072_u32
  DB_COUNTUNAVAILABLE = -1_i32
  MDFF_BOLD = 1_u32
  MDFF_ITALIC = 2_u32
  MDFF_UNDERLINE = 4_u32
  MDFF_STRIKEOUT = 8_u32
  MDAXIS_COLUMNS = 0_u32
  MDAXIS_ROWS = 1_u32
  MDAXIS_PAGES = 2_u32
  MDAXIS_SECTIONS = 3_u32
  MDAXIS_CHAPTERS = 4_u32
  MDAXIS_SLICERS = 4294967295_u32
  CRESTRICTIONS_DBSCHEMA_ASSERTIONS = 3_u32
  CRESTRICTIONS_DBSCHEMA_CATALOGS = 1_u32
  CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS = 3_u32
  CRESTRICTIONS_DBSCHEMA_COLLATIONS = 3_u32
  CRESTRICTIONS_DBSCHEMA_COLUMNS = 4_u32
  CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS = 3_u32
  CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE = 4_u32
  CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE = 3_u32
  CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE = 7_u32
  CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS = 3_u32
  CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS = 7_u32
  CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE = 4_u32
  CRESTRICTIONS_DBSCHEMA_INDEXES = 5_u32
  CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS = 1_u32
  CRESTRICTIONS_DBSCHEMA_OBJECTS = 1_u32
  CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES = 6_u32
  CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES = 5_u32
  CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES = 6_u32
  CRESTRICTIONS_DBSCHEMA_PROCEDURES = 4_u32
  CRESTRICTIONS_DBSCHEMA_SCHEMATA = 3_u32
  CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES = 0_u32
  CRESTRICTIONS_DBSCHEMA_STATISTICS = 3_u32
  CRESTRICTIONS_DBSCHEMA_TABLES = 4_u32
  CRESTRICTIONS_DBSCHEMA_TRANSLATIONS = 3_u32
  CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES = 2_u32
  CRESTRICTIONS_DBSCHEMA_VIEWS = 3_u32
  CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE = 3_u32
  CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE = 3_u32
  CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS = 4_u32
  CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS = 6_u32
  CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS = 3_u32
  CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS = 4_u32
  CRESTRICTIONS_DBSCHEMA_TABLES_INFO = 4_u32
  CRESTRICTIONS_MDSCHEMA_CUBES = 3_u32
  CRESTRICTIONS_MDSCHEMA_DIMENSIONS = 5_u32
  CRESTRICTIONS_MDSCHEMA_HIERARCHIES = 6_u32
  CRESTRICTIONS_MDSCHEMA_LEVELS = 7_u32
  CRESTRICTIONS_MDSCHEMA_MEASURES = 5_u32
  CRESTRICTIONS_MDSCHEMA_PROPERTIES = 9_u32
  CRESTRICTIONS_MDSCHEMA_MEMBERS = 12_u32
  CRESTRICTIONS_DBSCHEMA_TRUSTEE = 4_u32
  CRESTRICTIONS_DBSCHEMA_TABLE_STATISTICS = 7_u32
  CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS_BY_TABLE = 6_u32
  CRESTRICTIONS_MDSCHEMA_FUNCTIONS = 4_u32
  CRESTRICTIONS_MDSCHEMA_ACTIONS = 8_u32
  CRESTRICTIONS_MDSCHEMA_COMMANDS = 5_u32
  CRESTRICTIONS_MDSCHEMA_SETS = 5_u32
  IDENTIFIER_SDK_MASK = 4026531840_u32
  IDENTIFIER_SDK_ERROR = 268435456_u32
  DBPROP_MSDAORA_DETERMINEKEYCOLUMNS = 1_u32
  DBPROP_MSDAORA8_DETERMINEKEYCOLUMNS = 2_u32
  PWPROP_OSPVALUE = 2_u32
  STGM_COLLECTION = 8192_i32
  STGM_OUTPUT = 32768_i32
  STGM_OPEN = -2147483648_i32
  STGM_RECURSIVE = 16777216_i32
  STGM_STRICTOPEN = 1073741824_i32
  KAGPROP_QUERYBASEDUPDATES = 2_u32
  KAGPROP_MARSHALLABLE = 3_u32
  KAGPROP_POSITIONONNEWROW = 4_u32
  KAGPROP_IRowsetChangeExtInfo = 5_u32
  KAGPROP_CURSOR = 6_u32
  KAGPROP_CONCURRENCY = 7_u32
  KAGPROP_BLOBSONFOCURSOR = 8_u32
  KAGPROP_INCLUDENONEXACT = 9_u32
  KAGPROP_FORCESSFIREHOSEMODE = 10_u32
  KAGPROP_FORCENOPARAMETERREBIND = 11_u32
  KAGPROP_FORCENOPREPARE = 12_u32
  KAGPROP_FORCENOREEXECUTE = 13_u32
  KAGPROP_ACCESSIBLEPROCEDURES = 2_u32
  KAGPROP_ACCESSIBLETABLES = 3_u32
  KAGPROP_ODBCSQLOPTIEF = 4_u32
  KAGPROP_OJCAPABILITY = 5_u32
  KAGPROP_PROCEDURES = 6_u32
  KAGPROP_DRIVERNAME = 7_u32
  KAGPROP_DRIVERVER = 8_u32
  KAGPROP_DRIVERODBCVER = 9_u32
  KAGPROP_LIKEESCAPECLAUSE = 10_u32
  KAGPROP_SPECIALCHARACTERS = 11_u32
  KAGPROP_MAXCOLUMNSINGROUPBY = 12_u32
  KAGPROP_MAXCOLUMNSININDEX = 13_u32
  KAGPROP_MAXCOLUMNSINORDERBY = 14_u32
  KAGPROP_MAXCOLUMNSINSELECT = 15_u32
  KAGPROP_MAXCOLUMNSINTABLE = 16_u32
  KAGPROP_NUMERICFUNCTIONS = 17_u32
  KAGPROP_ODBCSQLCONFORMANCE = 18_u32
  KAGPROP_OUTERJOINS = 19_u32
  KAGPROP_STRINGFUNCTIONS = 20_u32
  KAGPROP_SYSTEMFUNCTIONS = 21_u32
  KAGPROP_TIMEDATEFUNCTIONS = 22_u32
  KAGPROP_FILEUSAGE = 23_u32
  KAGPROP_ACTIVESTATEMENTS = 24_u32
  KAGPROP_AUTH_TRUSTEDCONNECTION = 2_u32
  KAGPROP_AUTH_SERVERINTEGRATED = 3_u32
  KAGPROPVAL_CONCUR_ROWVER = 1_u32
  KAGPROPVAL_CONCUR_VALUES = 2_u32
  KAGPROPVAL_CONCUR_LOCK = 4_u32
  KAGPROPVAL_CONCUR_READ_ONLY = 8_u32
  ODBCVER = 896_u32
  ODBC_ADD_DSN = 1_u32
  ODBC_CONFIG_DSN = 2_u32
  ODBC_REMOVE_DSN = 3_u32
  ODBC_ADD_SYS_DSN = 4_u32
  ODBC_CONFIG_SYS_DSN = 5_u32
  ODBC_REMOVE_SYS_DSN = 6_u32
  ODBC_REMOVE_DEFAULT_DSN = 7_u32
  ODBC_INSTALL_INQUIRY = 1_u32
  ODBC_INSTALL_COMPLETE = 2_u32
  ODBC_INSTALL_DRIVER = 1_u32
  ODBC_REMOVE_DRIVER = 2_u32
  ODBC_CONFIG_DRIVER = 3_u32
  ODBC_CONFIG_DRIVER_MAX = 100_u32
  ODBC_BOTH_DSN = 0_u32
  ODBC_USER_DSN = 1_u32
  ODBC_SYSTEM_DSN = 2_u32
  ODBC_ERROR_GENERAL_ERR = 1_u32
  ODBC_ERROR_INVALID_BUFF_LEN = 2_u32
  ODBC_ERROR_INVALID_HWND = 3_u32
  ODBC_ERROR_INVALID_STR = 4_u32
  ODBC_ERROR_INVALID_REQUEST_TYPE = 5_u32
  ODBC_ERROR_COMPONENT_NOT_FOUND = 6_u32
  ODBC_ERROR_INVALID_NAME = 7_u32
  ODBC_ERROR_INVALID_KEYWORD_VALUE = 8_u32
  ODBC_ERROR_INVALID_DSN = 9_u32
  ODBC_ERROR_INVALID_INF = 10_u32
  ODBC_ERROR_REQUEST_FAILED = 11_u32
  ODBC_ERROR_INVALID_PATH = 12_u32
  ODBC_ERROR_LOAD_LIB_FAILED = 13_u32
  ODBC_ERROR_INVALID_PARAM_SEQUENCE = 14_u32
  ODBC_ERROR_INVALID_LOG_FILE = 15_u32
  ODBC_ERROR_USER_CANCELED = 16_u32
  ODBC_ERROR_USAGE_UPDATE_FAILED = 17_u32
  ODBC_ERROR_CREATE_DSN_FAILED = 18_u32
  ODBC_ERROR_WRITING_SYSINFO_FAILED = 19_u32
  ODBC_ERROR_REMOVE_DSN_FAILED = 20_u32
  ODBC_ERROR_OUT_OF_MEM = 21_u32
  ODBC_ERROR_OUTPUT_STRING_TRUNCATED = 22_u32
  ODBC_ERROR_NOTRANINFO = 23_u32
  ODBC_ERROR_MAX = 23_u32
  SQL_MAX_SQLSERVERNAME = 128_u32
  SQL_COPT_SS_BASE = 1200_u32
  SQL_COPT_SS_REMOTE_PWD = 1201_u32
  SQL_COPT_SS_USE_PROC_FOR_PREP = 1202_u32
  SQL_COPT_SS_INTEGRATED_SECURITY = 1203_u32
  SQL_COPT_SS_PRESERVE_CURSORS = 1204_u32
  SQL_COPT_SS_USER_DATA = 1205_u32
  SQL_COPT_SS_FALLBACK_CONNECT = 1210_u32
  SQL_COPT_SS_PERF_DATA = 1211_u32
  SQL_COPT_SS_PERF_DATA_LOG = 1212_u32
  SQL_COPT_SS_PERF_QUERY_INTERVAL = 1213_u32
  SQL_COPT_SS_PERF_QUERY_LOG = 1214_u32
  SQL_COPT_SS_PERF_QUERY = 1215_u32
  SQL_COPT_SS_PERF_DATA_LOG_NOW = 1216_u32
  SQL_COPT_SS_QUOTED_IDENT = 1217_u32
  SQL_COPT_SS_ANSI_NPW = 1218_u32
  SQL_COPT_SS_BCP = 1219_u32
  SQL_COPT_SS_TRANSLATE = 1220_u32
  SQL_COPT_SS_ATTACHDBFILENAME = 1221_u32
  SQL_COPT_SS_CONCAT_NULL = 1222_u32
  SQL_COPT_SS_ENCRYPT = 1223_u32
  SQL_COPT_SS_MAX_USED = 1223_u32
  SQL_SOPT_SS_BASE = 1225_u32
  SQL_SOPT_SS_TEXTPTR_LOGGING = 1225_u32
  SQL_SOPT_SS_CURRENT_COMMAND = 1226_u32
  SQL_SOPT_SS_HIDDEN_COLUMNS = 1227_u32
  SQL_SOPT_SS_NOBROWSETABLE = 1228_u32
  SQL_SOPT_SS_REGIONALIZE = 1229_u32
  SQL_SOPT_SS_CURSOR_OPTIONS = 1230_u32
  SQL_SOPT_SS_NOCOUNT_STATUS = 1231_u32
  SQL_SOPT_SS_DEFER_PREPARE = 1232_u32
  SQL_SOPT_SS_MAX_USED = 1232_u32
  SQL_COPT_SS_BASE_EX = 1240_u32
  SQL_COPT_SS_BROWSE_CONNECT = 1241_u32
  SQL_COPT_SS_BROWSE_SERVER = 1242_u32
  SQL_COPT_SS_WARN_ON_CP_ERROR = 1243_u32
  SQL_COPT_SS_CONNECTION_DEAD = 1244_u32
  SQL_COPT_SS_BROWSE_CACHE_DATA = 1245_u32
  SQL_COPT_SS_RESET_CONNECTION = 1246_u32
  SQL_COPT_SS_EX_MAX_USED = 1246_u32
  SQL_UP_OFF = 0_i32
  SQL_UP_ON = 1_i32
  SQL_UP_ON_DROP = 2_i32
  SQL_UP_DEFAULT = 1_i32
  SQL_IS_OFF = 0_i32
  SQL_IS_ON = 1_i32
  SQL_IS_DEFAULT = 0_i32
  SQL_PC_OFF = 0_i32
  SQL_PC_ON = 1_i32
  SQL_PC_DEFAULT = 0_i32
  SQL_XL_OFF = 0_i32
  SQL_XL_ON = 1_i32
  SQL_XL_DEFAULT = 1_i32
  SQL_FB_OFF = 0_i32
  SQL_FB_ON = 1_i32
  SQL_FB_DEFAULT = 0_i32
  SQL_BCP_OFF = 0_i32
  SQL_BCP_ON = 1_i32
  SQL_BCP_DEFAULT = 0_i32
  SQL_QI_OFF = 0_i32
  SQL_QI_ON = 1_i32
  SQL_QI_DEFAULT = 1_i32
  SQL_AD_OFF = 0_i32
  SQL_AD_ON = 1_i32
  SQL_AD_DEFAULT = 1_i32
  SQL_CN_OFF = 0_i32
  SQL_CN_ON = 1_i32
  SQL_CN_DEFAULT = 1_i32
  SQL_TL_OFF = 0_i32
  SQL_TL_ON = 1_i32
  SQL_TL_DEFAULT = 1_i32
  SQL_HC_OFF = 0_i32
  SQL_HC_ON = 1_i32
  SQL_HC_DEFAULT = 0_i32
  SQL_NB_OFF = 0_i32
  SQL_NB_ON = 1_i32
  SQL_NB_DEFAULT = 0_i32
  SQL_RE_OFF = 0_i32
  SQL_RE_ON = 1_i32
  SQL_RE_DEFAULT = 0_i32
  SQL_CO_OFF = 0_i32
  SQL_CO_FFO = 1_i32
  SQL_CO_AF = 2_i32
  SQL_CO_FIREHOSE_AF = 4_i32
  SQL_CO_DEFAULT = 0_i32
  SQL_NC_OFF = 0_i32
  SQL_NC_ON = 1_i32
  SQL_DP_OFF = 0_i32
  SQL_DP_ON = 1_i32
  SQL_EN_OFF = 0_i32
  SQL_EN_ON = 1_i32
  SQL_MORE_INFO_NO = 0_i32
  SQL_MORE_INFO_YES = 1_i32
  SQL_CACHE_DATA_NO = 0_i32
  SQL_CACHE_DATA_YES = 1_i32
  SQL_RESET_YES = 1_i32
  SQL_WARN_NO = 0_i32
  SQL_WARN_YES = 1_i32
  SQL_CURSOR_FAST_FORWARD_ONLY = 8_u32
  SQL_CA_SS_BASE = 1200_u32
  SQL_CA_SS_COLUMN_SSTYPE = 1200_u32
  SQL_CA_SS_COLUMN_UTYPE = 1201_u32
  SQL_CA_SS_NUM_ORDERS = 1202_u32
  SQL_CA_SS_COLUMN_ORDER = 1203_u32
  SQL_CA_SS_COLUMN_VARYLEN = 1204_u32
  SQL_CA_SS_NUM_COMPUTES = 1205_u32
  SQL_CA_SS_COMPUTE_ID = 1206_u32
  SQL_CA_SS_COMPUTE_BYLIST = 1207_u32
  SQL_CA_SS_COLUMN_ID = 1208_u32
  SQL_CA_SS_COLUMN_OP = 1209_u32
  SQL_CA_SS_COLUMN_SIZE = 1210_u32
  SQL_CA_SS_COLUMN_HIDDEN = 1211_u32
  SQL_CA_SS_COLUMN_KEY = 1212_u32
  SQL_CA_SS_COLUMN_COLLATION = 1214_u32
  SQL_CA_SS_VARIANT_TYPE = 1215_u32
  SQL_CA_SS_VARIANT_SQL_TYPE = 1216_u32
  SQL_CA_SS_VARIANT_SERVER_TYPE = 1217_u32
  SQL_CA_SS_MAX_USED = 1218_u32
  SQLTEXT = 35_u32
  SQLVARBINARY = 37_u32
  SQLINTN = 38_u32
  SQLVARCHAR = 39_u32
  SQLBINARY = 45_u32
  SQLIMAGE = 34_u32
  SQLCHARACTER = 47_u32
  SQLINT1 = 48_u32
  SQLBIT = 50_u32
  SQLINT2 = 52_u32
  SQLINT4 = 56_u32
  SQLMONEY = 60_u32
  SQLDATETIME = 61_u32
  SQLFLT8 = 62_u32
  SQLFLTN = 109_u32
  SQLMONEYN = 110_u32
  SQLDATETIMN = 111_u32
  SQLFLT4 = 59_u32
  SQLMONEY4 = 122_u32
  SQLDATETIM4 = 58_u32
  SQLDECIMAL = 106_u32
  SQLNUMERIC = 108_u32
  SQLUNIQUEID = 36_u32
  SQLBIGCHAR = 175_u32
  SQLBIGVARCHAR = 167_u32
  SQLBIGBINARY = 173_u32
  SQLBIGVARBINARY = 165_u32
  SQLBITN = 104_u32
  SQLNCHAR = 239_u32
  SQLNVARCHAR = 231_u32
  SQLNTEXT = 99_u32
  SQLINT8 = 127_u32
  SQLVARIANT = 98_u32
  SQLudtBINARY = 3_u32
  SQLudtBIT = 16_u32
  SQLudtBITN = 0_u32
  SQLudtCHAR = 1_u32
  SQLudtDATETIM4 = 22_u32
  SQLudtDATETIME = 12_u32
  SQLudtDATETIMN = 15_u32
  SQLudtDECML = 24_u32
  SQLudtDECMLN = 26_u32
  SQLudtFLT4 = 23_u32
  SQLudtFLT8 = 8_u32
  SQLudtFLTN = 14_u32
  SQLudtIMAGE = 20_u32
  SQLudtINT1 = 5_u32
  SQLudtINT2 = 6_u32
  SQLudtINT4 = 7_u32
  SQLudtINTN = 13_u32
  SQLudtMONEY = 11_u32
  SQLudtMONEY4 = 21_u32
  SQLudtMONEYN = 17_u32
  SQLudtNUM = 10_u32
  SQLudtNUMN = 25_u32
  SQLudtSYSNAME = 18_u32
  SQLudtTEXT = 19_u32
  SQLudtTIMESTAMP = 80_u32
  SQLudtUNIQUEIDENTIFIER = 0_u32
  SQLudtVARBINARY = 4_u32
  SQLudtVARCHAR = 2_u32
  MIN_USER_DATATYPE = 256_u32
  SQLAOPSTDEV = 48_u32
  SQLAOPSTDEVP = 49_u32
  SQLAOPVAR = 50_u32
  SQLAOPVARP = 51_u32
  SQLAOPCNT = 75_u32
  SQLAOPSUM = 77_u32
  SQLAOPAVG = 79_u32
  SQLAOPMIN = 81_u32
  SQLAOPMAX = 82_u32
  SQLAOPANY = 83_u32
  SQLAOPNOOP = 86_u32
  SQL_INFO_SS_FIRST = 1199_u32
  SQL_INFO_SS_NETLIB_NAMEW = 1199_u32
  SQL_INFO_SS_NETLIB_NAMEA = 1200_u32
  SQL_INFO_SS_MAX_USED = 1200_u32
  SQL_INFO_SS_NETLIB_NAME = 1199_u32
  SQL_SS_VARIANT = -150_i32
  SQL_DIAG_SS_BASE = -1150_i32
  SQL_DIAG_SS_MSGSTATE = -1150_i32
  SQL_DIAG_DFC_SS_BASE = -200_i32
  EX_ANY = 0_u32
  EX_INFO = 10_u32
  EX_MAXISEVERITY = 10_u32
  EX_MISSING = 11_u32
  EX_TYPE = 12_u32
  EX_DEADLOCK = 13_u32
  EX_PERMIT = 14_u32
  EX_SYNTAX = 15_u32
  EX_USER = 16_u32
  EX_RESOURCE = 17_u32
  EX_INTOK = 18_u32
  MAXUSEVERITY = 18_u32
  EX_LIMIT = 19_u32
  EX_CMDFATAL = 20_u32
  MINFATALERR = 20_u32
  EX_DBFATAL = 21_u32
  EX_TABCORRUPT = 22_u32
  EX_DBCORRUPT = 23_u32
  EX_HARDWARE = 24_u32
  EX_CONTROL = 25_u32
  DBMAXCHAR = 8001_u32
  MAXNAME = 129_u32
  MAXNUMERICLEN = 16_u32
  SQL_PERF_START = 1_u32
  SQL_PERF_STOP = 2_u32
  SQL_SS_DL_DEFAULT = "STATS.LOG"
  SQL_SS_QL_DEFAULT = "QUERY.LOG"
  SQL_SS_QI_DEFAULT = 30000_u32
  SUCCEED = 1_u32
  FAIL = 0_u32
  SUCCEED_ABORT = 2_u32
  SUCCEED_ASYNC = 3_u32
  DB_IN = 1_u32
  DB_OUT = 2_u32
  BCPMAXERRS = 1_u32
  BCPFIRST = 2_u32
  BCPLAST = 3_u32
  BCPBATCH = 4_u32
  BCPKEEPNULLS = 5_u32
  BCPABORT = 6_u32
  BCPODBC = 7_u32
  BCPKEEPIDENTITY = 8_u32
  BCP6xFILEFMT = 9_u32
  BCPHINTSA = 10_u32
  BCPHINTSW = 11_u32
  BCPFILECP = 12_u32
  BCPUNICODEFILE = 13_u32
  BCPTEXTFILE = 14_u32
  BCPFILEFMT = 15_u32
  BCPFILECP_ACP = 0_u32
  BCPFILECP_OEMCP = 1_u32
  BCPFILECP_RAW = -1_i32
  SQL_VARLEN_DATA = -10_i32
  BCPHINTS = 11_u32
  BCP_FMT_TYPE = 1_u32
  BCP_FMT_INDICATOR_LEN = 2_u32
  BCP_FMT_DATA_LEN = 3_u32
  BCP_FMT_TERMINATOR = 4_u32
  BCP_FMT_SERVER_COL = 5_u32
  BCP_FMT_COLLATION = 6_u32
  BCP_FMT_COLLATION_ID = 7_u32
  SQL_FAST_CONNECT = 1200_u32
  SQL_FC_OFF = 0_i32
  SQL_FC_ON = 1_i32
  SQL_FC_DEFAULT = 0_i32
  SQL_COPT_SS_ANSI_OEM = 1206_u32
  SQL_AO_OFF = 0_i32
  SQL_AO_ON = 1_i32
  SQL_AO_DEFAULT = 0_i32
  SQL_REMOTE_PWD = 1201_u32
  SQL_USE_PROCEDURE_FOR_PREPARE = 1202_u32
  SQL_INTEGRATED_SECURITY = 1203_u32
  SQL_PRESERVE_CURSORS = 1204_u32
  SQL_TEXTPTR_LOGGING = 1225_u32
  SQLDECIMALN = 106_u32
  SQLNUMERICN = 108_u32
  DB_E_BOGUS = -2147217665_i32
  DB_E_BADACCESSORHANDLE = -2147217920_i32
  DB_E_ROWLIMITEXCEEDED = -2147217919_i32
  DB_E_READONLYACCESSOR = -2147217918_i32
  DB_E_SCHEMAVIOLATION = -2147217917_i32
  DB_E_BADROWHANDLE = -2147217916_i32
  DB_E_OBJECTOPEN = -2147217915_i32
  DB_E_BADCHAPTER = -2147217914_i32
  DB_E_CANTCONVERTVALUE = -2147217913_i32
  DB_E_BADBINDINFO = -2147217912_i32
  DB_SEC_E_PERMISSIONDENIED = -2147217911_i32
  DB_E_NOTAREFERENCECOLUMN = -2147217910_i32
  DB_E_LIMITREJECTED = -2147217909_i32
  DB_E_NOCOMMAND = -2147217908_i32
  DB_E_COSTLIMIT = -2147217907_i32
  DB_E_BADBOOKMARK = -2147217906_i32
  DB_E_BADLOCKMODE = -2147217905_i32
  DB_E_PARAMNOTOPTIONAL = -2147217904_i32
  DB_E_BADCOLUMNID = -2147217903_i32
  DB_E_BADRATIO = -2147217902_i32
  DB_E_BADVALUES = -2147217901_i32
  DB_E_ERRORSINCOMMAND = -2147217900_i32
  DB_E_CANTCANCEL = -2147217899_i32
  DB_E_DIALECTNOTSUPPORTED = -2147217898_i32
  DB_E_DUPLICATEDATASOURCE = -2147217897_i32
  DB_E_CANNOTRESTART = -2147217896_i32
  DB_E_NOTFOUND = -2147217895_i32
  DB_E_NEWLYINSERTED = -2147217893_i32
  DB_E_CANNOTFREE = -2147217894_i32
  DB_E_GOALREJECTED = -2147217892_i32
  DB_E_UNSUPPORTEDCONVERSION = -2147217891_i32
  DB_E_BADSTARTPOSITION = -2147217890_i32
  DB_E_NOQUERY = -2147217889_i32
  DB_E_NOTREENTRANT = -2147217888_i32
  DB_E_ERRORSOCCURRED = -2147217887_i32
  DB_E_NOAGGREGATION = -2147217886_i32
  DB_E_DELETEDROW = -2147217885_i32
  DB_E_CANTFETCHBACKWARDS = -2147217884_i32
  DB_E_ROWSNOTRELEASED = -2147217883_i32
  DB_E_BADSTORAGEFLAG = -2147217882_i32
  DB_E_BADCOMPAREOP = -2147217881_i32
  DB_E_BADSTATUSVALUE = -2147217880_i32
  DB_E_CANTSCROLLBACKWARDS = -2147217879_i32
  DB_E_BADREGIONHANDLE = -2147217878_i32
  DB_E_NONCONTIGUOUSRANGE = -2147217877_i32
  DB_E_INVALIDTRANSITION = -2147217876_i32
  DB_E_NOTASUBREGION = -2147217875_i32
  DB_E_MULTIPLESTATEMENTS = -2147217874_i32
  DB_E_INTEGRITYVIOLATION = -2147217873_i32
  DB_E_BADTYPENAME = -2147217872_i32
  DB_E_ABORTLIMITREACHED = -2147217871_i32
  DB_E_ROWSETINCOMMAND = -2147217870_i32
  DB_E_CANTTRANSLATE = -2147217869_i32
  DB_E_DUPLICATEINDEXID = -2147217868_i32
  DB_E_NOINDEX = -2147217867_i32
  DB_E_INDEXINUSE = -2147217866_i32
  DB_E_NOTABLE = -2147217865_i32
  DB_E_CONCURRENCYVIOLATION = -2147217864_i32
  DB_E_BADCOPY = -2147217863_i32
  DB_E_BADPRECISION = -2147217862_i32
  DB_E_BADSCALE = -2147217861_i32
  DB_E_BADTABLEID = -2147217860_i32
  DB_E_BADID = -2147217860_i32
  DB_E_BADTYPE = -2147217859_i32
  DB_E_DUPLICATECOLUMNID = -2147217858_i32
  DB_E_DUPLICATETABLEID = -2147217857_i32
  DB_E_TABLEINUSE = -2147217856_i32
  DB_E_NOLOCALE = -2147217855_i32
  DB_E_BADRECORDNUM = -2147217854_i32
  DB_E_BOOKMARKSKIPPED = -2147217853_i32
  DB_E_BADPROPERTYVALUE = -2147217852_i32
  DB_E_INVALID = -2147217851_i32
  DB_E_BADACCESSORFLAGS = -2147217850_i32
  DB_E_BADSTORAGEFLAGS = -2147217849_i32
  DB_E_BYREFACCESSORNOTSUPPORTED = -2147217848_i32
  DB_E_NULLACCESSORNOTSUPPORTED = -2147217847_i32
  DB_E_NOTPREPARED = -2147217846_i32
  DB_E_BADACCESSORTYPE = -2147217845_i32
  DB_E_WRITEONLYACCESSOR = -2147217844_i32
  DB_SEC_E_AUTH_FAILED = -2147217843_i32
  DB_E_CANCELED = -2147217842_i32
  DB_E_CHAPTERNOTRELEASED = -2147217841_i32
  DB_E_BADSOURCEHANDLE = -2147217840_i32
  DB_E_PARAMUNAVAILABLE = -2147217839_i32
  DB_E_ALREADYINITIALIZED = -2147217838_i32
  DB_E_NOTSUPPORTED = -2147217837_i32
  DB_E_MAXPENDCHANGESEXCEEDED = -2147217836_i32
  DB_E_BADORDINAL = -2147217835_i32
  DB_E_PENDINGCHANGES = -2147217834_i32
  DB_E_DATAOVERFLOW = -2147217833_i32
  DB_E_BADHRESULT = -2147217832_i32
  DB_E_BADLOOKUPID = -2147217831_i32
  DB_E_BADDYNAMICERRORID = -2147217830_i32
  DB_E_PENDINGINSERT = -2147217829_i32
  DB_E_BADCONVERTFLAG = -2147217828_i32
  DB_E_BADPARAMETERNAME = -2147217827_i32
  DB_E_MULTIPLESTORAGE = -2147217826_i32
  DB_E_CANTFILTER = -2147217825_i32
  DB_E_CANTORDER = -2147217824_i32
  MD_E_BADTUPLE = -2147217823_i32
  MD_E_BADCOORDINATE = -2147217822_i32
  MD_E_INVALIDAXIS = -2147217821_i32
  MD_E_INVALIDCELLRANGE = -2147217820_i32
  DB_E_NOCOLUMN = -2147217819_i32
  DB_E_COMMANDNOTPERSISTED = -2147217817_i32
  DB_E_DUPLICATEID = -2147217816_i32
  DB_E_OBJECTCREATIONLIMITREACHED = -2147217815_i32
  DB_E_BADINDEXID = -2147217806_i32
  DB_E_BADINITSTRING = -2147217805_i32
  DB_E_NOPROVIDERSREGISTERED = -2147217804_i32
  DB_E_MISMATCHEDPROVIDER = -2147217803_i32
  DB_E_BADCOMMANDID = -2147217802_i32
  SEC_E_PERMISSIONDENIED = -2147217911_i32
  SEC_E_BADTRUSTEEID = -2147217814_i32
  SEC_E_NOTRUSTEEID = -2147217813_i32
  SEC_E_NOMEMBERSHIPSUPPORT = -2147217812_i32
  SEC_E_INVALIDOBJECT = -2147217811_i32
  SEC_E_NOOWNER = -2147217810_i32
  SEC_E_INVALIDACCESSENTRYLIST = -2147217809_i32
  SEC_E_INVALIDOWNER = -2147217808_i32
  SEC_E_INVALIDACCESSENTRY = -2147217807_i32
  DB_E_BADCONSTRAINTTYPE = -2147217801_i32
  DB_E_BADCONSTRAINTFORM = -2147217800_i32
  DB_E_BADDEFERRABILITY = -2147217799_i32
  DB_E_BADMATCHTYPE = -2147217792_i32
  DB_E_BADUPDATEDELETERULE = -2147217782_i32
  DB_E_BADCONSTRAINTID = -2147217781_i32
  DB_E_BADCOMMANDFLAGS = -2147217780_i32
  DB_E_OBJECTMISMATCH = -2147217779_i32
  DB_E_NOSOURCEOBJECT = -2147217775_i32
  DB_E_RESOURCELOCKED = -2147217774_i32
  DB_E_NOTCOLLECTION = -2147217773_i32
  DB_E_READONLY = -2147217772_i32
  DB_E_ASYNCNOTSUPPORTED = -2147217771_i32
  DB_E_CANNOTCONNECT = -2147217770_i32
  DB_E_TIMEOUT = -2147217769_i32
  DB_E_RESOURCEEXISTS = -2147217768_i32
  DB_E_RESOURCEOUTOFSCOPE = -2147217778_i32
  DB_E_DROPRESTRICTED = -2147217776_i32
  DB_E_DUPLICATECONSTRAINTID = -2147217767_i32
  DB_E_OUTOFSPACE = -2147217766_i32
  DB_SEC_E_SAFEMODE_DENIED = -2147217765_i32
  DB_E_NOSTATISTIC = -2147217764_i32
  DB_E_ALTERRESTRICTED = -2147217763_i32
  DB_E_RESOURCENOTSUPPORTED = -2147217762_i32
  DB_E_NOCONSTRAINT = -2147217761_i32
  DB_E_COLUMNUNAVAILABLE = -2147217760_i32
  DB_S_ROWLIMITEXCEEDED = 265920_i32
  DB_S_COLUMNTYPEMISMATCH = 265921_i32
  DB_S_TYPEINFOOVERRIDDEN = 265922_i32
  DB_S_BOOKMARKSKIPPED = 265923_i32
  DB_S_NONEXTROWSET = 265925_i32
  DB_S_ENDOFROWSET = 265926_i32
  DB_S_COMMANDREEXECUTED = 265927_i32
  DB_S_BUFFERFULL = 265928_i32
  DB_S_NORESULT = 265929_i32
  DB_S_CANTRELEASE = 265930_i32
  DB_S_GOALCHANGED = 265931_i32
  DB_S_UNWANTEDOPERATION = 265932_i32
  DB_S_DIALECTIGNORED = 265933_i32
  DB_S_UNWANTEDPHASE = 265934_i32
  DB_S_UNWANTEDREASON = 265935_i32
  DB_S_ASYNCHRONOUS = 265936_i32
  DB_S_COLUMNSCHANGED = 265937_i32
  DB_S_ERRORSRETURNED = 265938_i32
  DB_S_BADROWHANDLE = 265939_i32
  DB_S_DELETEDROW = 265940_i32
  DB_S_TOOMANYCHANGES = 265941_i32
  DB_S_STOPLIMITREACHED = 265942_i32
  DB_S_LOCKUPGRADED = 265944_i32
  DB_S_PROPERTIESCHANGED = 265945_i32
  DB_S_ERRORSOCCURRED = 265946_i32
  DB_S_PARAMUNAVAILABLE = 265947_i32
  DB_S_MULTIPLECHANGES = 265948_i32
  DB_S_NOTSINGLETON = 265943_i32
  DB_S_NOROWSPECIFICCOLUMNS = 265949_i32
  DBPROPFLAGS_PERSIST = 8192_u32
  DBPROPVAL_PERSIST_ADTG = 0_u32
  DBPROPVAL_PERSIST_XML = 1_u32
  DBPROP_PersistFormat = 2_u32
  DBPROP_PersistSchema = 3_u32
  DBPROP_HCHAPTER = 4_u32
  DBPROP_MAINTAINPROPS = 5_u32
  DBPROP_Unicode = 6_u32
  DBPROP_INTERLEAVEDROWS = 8_u32
  MS_PERSIST_PROGID = "MSPersist"
  DISPID_QUERY_RANKVECTOR = 2_u32
  DISPID_QUERY_RANK = 3_u32
  DISPID_QUERY_HITCOUNT = 4_u32
  DISPID_QUERY_WORKID = 5_u32
  DISPID_QUERY_ALL = 6_u32
  DISPID_QUERY_UNFILTERED = 7_u32
  DISPID_QUERY_REVNAME = 8_u32
  DISPID_QUERY_VIRTUALPATH = 9_u32
  DISPID_QUERY_LASTSEENTIME = 10_u32
  CQUERYDISPIDS = 11_u32
  DISPID_QUERY_METADATA_VROOTUSED = 2_u32
  DISPID_QUERY_METADATA_VROOTAUTOMATIC = 3_u32
  DISPID_QUERY_METADATA_VROOTMANUAL = 4_u32
  DISPID_QUERY_METADATA_PROPGUID = 5_u32
  DISPID_QUERY_METADATA_PROPDISPID = 6_u32
  DISPID_QUERY_METADATA_PROPNAME = 7_u32
  DISPID_QUERY_METADATA_STORELEVEL = 8_u32
  DISPID_QUERY_METADATA_PROPMODIFIABLE = 9_u32
  CQUERYMETADISPIDS = 10_u32
  PROPID_DBBMK_BOOKMARK = 2_u32
  PROPID_DBBMK_CHAPTER = 3_u32
  CDBBMKDISPIDS = 8_u32
  PROPID_DBSELF_SELF = 2_u32
  CDBSELFDISPIDS = 8_u32
  CDBCOLDISPIDS = 28_u32
  CQUERYPROPERTY = 64_u32
  QUERY_VALIDBITS = 3_u32
  RTNone = 0_u32
  RTAnd = 1_u32
  RTOr = 2_u32
  RTNot = 3_u32
  RTContent = 4_u32
  RTProperty = 5_u32
  RTProximity = 6_u32
  RTVector = 7_u32
  RTNatLanguage = 8_u32
  GENERATE_METHOD_PREFIXMATCH = 1_u32
  GENERATE_METHOD_STEMMED = 2_u32
  PRRE = 6_u32
  PRAllBits = 7_u32
  PRSomeBits = 8_u32
  PRAll = 256_u32
  PRAny = 512_u32
  QUERY_SORTXASCEND = 2_u32
  QUERY_SORTXDESCEND = 3_u32
  QUERY_SORTDEFAULT = 4_u32
  CATEGORIZE_UNIQUE = 0_u32
  CATEGORIZE_CLUSTER = 1_u32
  CATEGORIZE_BUCKETS = 2_u32
  BUCKET_LINEAR = 0_u32
  BUCKET_EXPONENTIAL = 1_u32
  CATEGORIZE_RANGE = 3_u32
  OCC_INVALID = 4294967295_u32
  MAX_QUERY_RANK = 1000_u32
  OSP_IndexLabel = 0_u32
  SQL_NULL_DATA = -1_i32
  SQL_DATA_AT_EXEC = -2_i32
  SQL_SUCCESS = 0_u32
  SQL_SUCCESS_WITH_INFO = 1_u32
  SQL_NO_DATA = 100_u32
  SQL_PARAM_DATA_AVAILABLE = 101_u32
  SQL_ERROR = -1_i32
  SQL_INVALID_HANDLE = -2_i32
  SQL_STILL_EXECUTING = 2_u32
  SQL_NEED_DATA = 99_u32
  SQL_NTS = -3_i32
  SQL_NTSL = -3_i32
  SQL_MAX_MESSAGE_LENGTH = 512_u32
  SQL_DATE_LEN = 10_u32
  SQL_TIME_LEN = 8_u32
  SQL_TIMESTAMP_LEN = 19_u32
  SQL_HANDLE_ENV = 1_u32
  SQL_HANDLE_DBC = 2_u32
  SQL_HANDLE_STMT = 3_u32
  SQL_HANDLE_DESC = 4_u32
  SQL_ATTR_OUTPUT_NTS = 10001_u32
  SQL_ATTR_AUTO_IPD = 10001_u32
  SQL_ATTR_METADATA_ID = 10014_u32
  SQL_ATTR_APP_ROW_DESC = 10010_u32
  SQL_ATTR_APP_PARAM_DESC = 10011_u32
  SQL_ATTR_IMP_ROW_DESC = 10012_u32
  SQL_ATTR_IMP_PARAM_DESC = 10013_u32
  SQL_ATTR_CURSOR_SCROLLABLE = -1_i32
  SQL_ATTR_CURSOR_SENSITIVITY = -2_i32
  SQL_NONSCROLLABLE = 0_u32
  SQL_SCROLLABLE = 1_u32
  SQL_DESC_COUNT = 1001_u32
  SQL_DESC_TYPE = 1002_u32
  SQL_DESC_LENGTH = 1003_u32
  SQL_DESC_OCTET_LENGTH_PTR = 1004_u32
  SQL_DESC_PRECISION = 1005_u32
  SQL_DESC_SCALE = 1006_u32
  SQL_DESC_DATETIME_INTERVAL_CODE = 1007_u32
  SQL_DESC_NULLABLE = 1008_u32
  SQL_DESC_INDICATOR_PTR = 1009_u32
  SQL_DESC_DATA_PTR = 1010_u32
  SQL_DESC_NAME = 1011_u32
  SQL_DESC_UNNAMED = 1012_u32
  SQL_DESC_OCTET_LENGTH = 1013_u32
  SQL_DESC_ALLOC_TYPE = 1099_u32
  SQL_DIAG_RETURNCODE = 1_u32
  SQL_DIAG_NUMBER = 2_u32
  SQL_DIAG_ROW_COUNT = 3_u32
  SQL_DIAG_SQLSTATE = 4_u32
  SQL_DIAG_NATIVE = 5_u32
  SQL_DIAG_MESSAGE_TEXT = 6_u32
  SQL_DIAG_DYNAMIC_FUNCTION = 7_u32
  SQL_DIAG_CLASS_ORIGIN = 8_u32
  SQL_DIAG_SUBCLASS_ORIGIN = 9_u32
  SQL_DIAG_CONNECTION_NAME = 10_u32
  SQL_DIAG_SERVER_NAME = 11_u32
  SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12_u32
  SQL_DIAG_ALTER_DOMAIN = 3_u32
  SQL_DIAG_ALTER_TABLE = 4_u32
  SQL_DIAG_CALL = 7_u32
  SQL_DIAG_CREATE_ASSERTION = 6_u32
  SQL_DIAG_CREATE_CHARACTER_SET = 8_u32
  SQL_DIAG_CREATE_COLLATION = 10_u32
  SQL_DIAG_CREATE_DOMAIN = 23_u32
  SQL_DIAG_CREATE_INDEX = -1_i32
  SQL_DIAG_CREATE_SCHEMA = 64_u32
  SQL_DIAG_CREATE_TABLE = 77_u32
  SQL_DIAG_CREATE_TRANSLATION = 79_u32
  SQL_DIAG_CREATE_VIEW = 84_u32
  SQL_DIAG_DELETE_WHERE = 19_u32
  SQL_DIAG_DROP_ASSERTION = 24_u32
  SQL_DIAG_DROP_CHARACTER_SET = 25_u32
  SQL_DIAG_DROP_COLLATION = 26_u32
  SQL_DIAG_DROP_DOMAIN = 27_u32
  SQL_DIAG_DROP_INDEX = -2_i32
  SQL_DIAG_DROP_SCHEMA = 31_u32
  SQL_DIAG_DROP_TABLE = 32_u32
  SQL_DIAG_DROP_TRANSLATION = 33_u32
  SQL_DIAG_DROP_VIEW = 36_u32
  SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38_u32
  SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81_u32
  SQL_DIAG_GRANT = 48_u32
  SQL_DIAG_INSERT = 50_u32
  SQL_DIAG_REVOKE = 59_u32
  SQL_DIAG_SELECT_CURSOR = 85_u32
  SQL_DIAG_UNKNOWN_STATEMENT = 0_u32
  SQL_DIAG_UPDATE_WHERE = 82_u32
  SQL_UNKNOWN_TYPE = 0_u32
  SQL_CHAR = 1_u32
  SQL_NUMERIC = 2_u32
  SQL_DECIMAL = 3_u32
  SQL_INTEGER = 4_u32
  SQL_SMALLINT = 5_u32
  SQL_FLOAT = 6_u32
  SQL_REAL = 7_u32
  SQL_DOUBLE = 8_u32
  SQL_DATETIME = 9_u32
  SQL_VARCHAR = 12_u32
  SQL_TYPE_DATE = 91_u32
  SQL_TYPE_TIME = 92_u32
  SQL_TYPE_TIMESTAMP = 93_u32
  SQL_UNSPECIFIED = 0_u32
  SQL_INSENSITIVE = 1_u32
  SQL_SENSITIVE = 2_u32
  SQL_ALL_TYPES = 0_u32
  SQL_DEFAULT = 99_u32
  SQL_ARD_TYPE = -99_i32
  SQL_APD_TYPE = -100_i32
  SQL_CODE_DATE = 1_u32
  SQL_CODE_TIME = 2_u32
  SQL_CODE_TIMESTAMP = 3_u32
  SQL_FALSE = 0_u32
  SQL_TRUE = 1_u32
  SQL_NO_NULLS = 0_u32
  SQL_NULLABLE = 1_u32
  SQL_NULLABLE_UNKNOWN = 2_u32
  SQL_PRED_NONE = 0_u32
  SQL_PRED_CHAR = 1_u32
  SQL_PRED_BASIC = 2_u32
  SQL_NAMED = 0_u32
  SQL_UNNAMED = 1_u32
  SQL_DESC_ALLOC_AUTO = 1_u32
  SQL_DESC_ALLOC_USER = 2_u32
  SQL_CLOSE = 0_u32
  SQL_DROP = 1_u32
  SQL_UNBIND = 2_u32
  SQL_RESET_PARAMS = 3_u32
  SQL_FETCH_NEXT = 1_u32
  SQL_FETCH_FIRST = 2_u32
  SQL_FETCH_LAST = 3_u32
  SQL_FETCH_PRIOR = 4_u32
  SQL_FETCH_ABSOLUTE = 5_u32
  SQL_FETCH_RELATIVE = 6_u32
  SQL_COMMIT = 0_u32
  SQL_ROLLBACK = 1_u32
  SQL_NULL_HENV = 0_u32
  SQL_NULL_HDBC = 0_u32
  SQL_NULL_HSTMT = 0_u32
  SQL_NULL_HDESC = 0_u32
  SQL_NULL_HANDLE = 0_i32
  SQL_SCOPE_CURROW = 0_u32
  SQL_SCOPE_TRANSACTION = 1_u32
  SQL_SCOPE_SESSION = 2_u32
  SQL_PC_UNKNOWN = 0_u32
  SQL_PC_NON_PSEUDO = 1_u32
  SQL_PC_PSEUDO = 2_u32
  SQL_ROW_IDENTIFIER = 1_u32
  SQL_INDEX_UNIQUE = 0_u32
  SQL_INDEX_ALL = 1_u32
  SQL_INDEX_CLUSTERED = 1_u32
  SQL_INDEX_HASHED = 2_u32
  SQL_INDEX_OTHER = 3_u32
  SQL_API_SQLALLOCCONNECT = 1_u32
  SQL_API_SQLALLOCENV = 2_u32
  SQL_API_SQLALLOCHANDLE = 1001_u32
  SQL_API_SQLALLOCSTMT = 3_u32
  SQL_API_SQLBINDCOL = 4_u32
  SQL_API_SQLBINDPARAM = 1002_u32
  SQL_API_SQLCANCEL = 5_u32
  SQL_API_SQLCLOSECURSOR = 1003_u32
  SQL_API_SQLCOLATTRIBUTE = 6_u32
  SQL_API_SQLCOLUMNS = 40_u32
  SQL_API_SQLCONNECT = 7_u32
  SQL_API_SQLCOPYDESC = 1004_u32
  SQL_API_SQLDATASOURCES = 57_u32
  SQL_API_SQLDESCRIBECOL = 8_u32
  SQL_API_SQLDISCONNECT = 9_u32
  SQL_API_SQLENDTRAN = 1005_u32
  SQL_API_SQLERROR = 10_u32
  SQL_API_SQLEXECDIRECT = 11_u32
  SQL_API_SQLEXECUTE = 12_u32
  SQL_API_SQLFETCH = 13_u32
  SQL_API_SQLFETCHSCROLL = 1021_u32
  SQL_API_SQLFREECONNECT = 14_u32
  SQL_API_SQLFREEENV = 15_u32
  SQL_API_SQLFREEHANDLE = 1006_u32
  SQL_API_SQLFREESTMT = 16_u32
  SQL_API_SQLGETCONNECTATTR = 1007_u32
  SQL_API_SQLGETCONNECTOPTION = 42_u32
  SQL_API_SQLGETCURSORNAME = 17_u32
  SQL_API_SQLGETDATA = 43_u32
  SQL_API_SQLGETDESCFIELD = 1008_u32
  SQL_API_SQLGETDESCREC = 1009_u32
  SQL_API_SQLGETDIAGFIELD = 1010_u32
  SQL_API_SQLGETDIAGREC = 1011_u32
  SQL_API_SQLGETENVATTR = 1012_u32
  SQL_API_SQLGETFUNCTIONS = 44_u32
  SQL_API_SQLGETINFO = 45_u32
  SQL_API_SQLGETSTMTATTR = 1014_u32
  SQL_API_SQLGETSTMTOPTION = 46_u32
  SQL_API_SQLGETTYPEINFO = 47_u32
  SQL_API_SQLNUMRESULTCOLS = 18_u32
  SQL_API_SQLPARAMDATA = 48_u32
  SQL_API_SQLPREPARE = 19_u32
  SQL_API_SQLPUTDATA = 49_u32
  SQL_API_SQLROWCOUNT = 20_u32
  SQL_API_SQLSETCONNECTATTR = 1016_u32
  SQL_API_SQLSETCONNECTOPTION = 50_u32
  SQL_API_SQLSETCURSORNAME = 21_u32
  SQL_API_SQLSETDESCFIELD = 1017_u32
  SQL_API_SQLSETDESCREC = 1018_u32
  SQL_API_SQLSETENVATTR = 1019_u32
  SQL_API_SQLSETPARAM = 22_u32
  SQL_API_SQLSETSTMTATTR = 1020_u32
  SQL_API_SQLSETSTMTOPTION = 51_u32
  SQL_API_SQLSPECIALCOLUMNS = 52_u32
  SQL_API_SQLSTATISTICS = 53_u32
  SQL_API_SQLTABLES = 54_u32
  SQL_API_SQLTRANSACT = 23_u32
  SQL_API_SQLCANCELHANDLE = 1550_u32
  SQL_API_SQLCOMPLETEASYNC = 1551_u32
  SQL_MAX_DRIVER_CONNECTIONS = 0_u32
  SQL_MAXIMUM_DRIVER_CONNECTIONS = 0_u32
  SQL_MAX_CONCURRENT_ACTIVITIES = 1_u32
  SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1_u32
  SQL_DATA_SOURCE_NAME = 2_u32
  SQL_FETCH_DIRECTION = 8_u32
  SQL_SERVER_NAME = 13_u32
  SQL_SEARCH_PATTERN_ESCAPE = 14_u32
  SQL_DBMS_NAME = 17_u32
  SQL_DBMS_VER = 18_u32
  SQL_ACCESSIBLE_TABLES = 19_u32
  SQL_ACCESSIBLE_PROCEDURES = 20_u32
  SQL_CURSOR_COMMIT_BEHAVIOR = 23_u32
  SQL_DATA_SOURCE_READ_ONLY = 25_u32
  SQL_DEFAULT_TXN_ISOLATION = 26_u32
  SQL_IDENTIFIER_CASE = 28_u32
  SQL_IDENTIFIER_QUOTE_CHAR = 29_u32
  SQL_MAX_COLUMN_NAME_LEN = 30_u32
  SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30_u32
  SQL_MAX_CURSOR_NAME_LEN = 31_u32
  SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31_u32
  SQL_MAX_SCHEMA_NAME_LEN = 32_u32
  SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32_u32
  SQL_MAX_CATALOG_NAME_LEN = 34_u32
  SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34_u32
  SQL_MAX_TABLE_NAME_LEN = 35_u32
  SQL_SCROLL_CONCURRENCY = 43_u32
  SQL_TXN_CAPABLE = 46_u32
  SQL_TRANSACTION_CAPABLE = 46_u32
  SQL_USER_NAME = 47_u32
  SQL_TXN_ISOLATION_OPTION = 72_u32
  SQL_TRANSACTION_ISOLATION_OPTION = 72_u32
  SQL_INTEGRITY = 73_u32
  SQL_GETDATA_EXTENSIONS = 81_u32
  SQL_NULL_COLLATION = 85_u32
  SQL_ALTER_TABLE = 86_u32
  SQL_ORDER_BY_COLUMNS_IN_SELECT = 90_u32
  SQL_SPECIAL_CHARACTERS = 94_u32
  SQL_MAX_COLUMNS_IN_GROUP_BY = 97_u32
  SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97_u32
  SQL_MAX_COLUMNS_IN_INDEX = 98_u32
  SQL_MAXIMUM_COLUMNS_IN_INDEX = 98_u32
  SQL_MAX_COLUMNS_IN_ORDER_BY = 99_u32
  SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99_u32
  SQL_MAX_COLUMNS_IN_SELECT = 100_u32
  SQL_MAXIMUM_COLUMNS_IN_SELECT = 100_u32
  SQL_MAX_COLUMNS_IN_TABLE = 101_u32
  SQL_MAX_INDEX_SIZE = 102_u32
  SQL_MAXIMUM_INDEX_SIZE = 102_u32
  SQL_MAX_ROW_SIZE = 104_u32
  SQL_MAXIMUM_ROW_SIZE = 104_u32
  SQL_MAX_STATEMENT_LEN = 105_u32
  SQL_MAXIMUM_STATEMENT_LENGTH = 105_u32
  SQL_MAX_TABLES_IN_SELECT = 106_u32
  SQL_MAXIMUM_TABLES_IN_SELECT = 106_u32
  SQL_MAX_USER_NAME_LEN = 107_u32
  SQL_MAXIMUM_USER_NAME_LENGTH = 107_u32
  SQL_OJ_CAPABILITIES = 115_u32
  SQL_OUTER_JOIN_CAPABILITIES = 115_u32
  SQL_XOPEN_CLI_YEAR = 10000_u32
  SQL_CURSOR_SENSITIVITY = 10001_u32
  SQL_DESCRIBE_PARAMETER = 10002_u32
  SQL_CATALOG_NAME = 10003_u32
  SQL_COLLATION_SEQ = 10004_u32
  SQL_MAX_IDENTIFIER_LEN = 10005_u32
  SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005_u32
  SQL_AT_ADD_COLUMN = 1_i32
  SQL_AT_DROP_COLUMN = 2_i32
  SQL_AT_ADD_CONSTRAINT = 8_i32
  SQL_AM_NONE = 0_u32
  SQL_AM_CONNECTION = 1_u32
  SQL_AM_STATEMENT = 2_u32
  SQL_CB_DELETE = 0_u32
  SQL_CB_CLOSE = 1_u32
  SQL_CB_PRESERVE = 2_u32
  SQL_FD_FETCH_NEXT = 1_i32
  SQL_FD_FETCH_FIRST = 2_i32
  SQL_FD_FETCH_LAST = 4_i32
  SQL_FD_FETCH_PRIOR = 8_i32
  SQL_FD_FETCH_ABSOLUTE = 16_i32
  SQL_FD_FETCH_RELATIVE = 32_i32
  SQL_GD_ANY_COLUMN = 1_i32
  SQL_GD_ANY_ORDER = 2_i32
  SQL_IC_UPPER = 1_u32
  SQL_IC_LOWER = 2_u32
  SQL_IC_SENSITIVE = 3_u32
  SQL_IC_MIXED = 4_u32
  SQL_OJ_LEFT = 1_i32
  SQL_OJ_RIGHT = 2_i32
  SQL_OJ_FULL = 4_i32
  SQL_OJ_NESTED = 8_i32
  SQL_OJ_NOT_ORDERED = 16_i32
  SQL_OJ_INNER = 32_i32
  SQL_OJ_ALL_COMPARISON_OPS = 64_i32
  SQL_SCCO_READ_ONLY = 1_i32
  SQL_SCCO_LOCK = 2_i32
  SQL_SCCO_OPT_ROWVER = 4_i32
  SQL_SCCO_OPT_VALUES = 8_i32
  SQL_TC_NONE = 0_u32
  SQL_TC_DML = 1_u32
  SQL_TC_ALL = 2_u32
  SQL_TC_DDL_COMMIT = 3_u32
  SQL_TC_DDL_IGNORE = 4_u32
  SQL_TXN_READ_UNCOMMITTED = 1_i32
  SQL_TRANSACTION_READ_UNCOMMITTED = 1_i32
  SQL_TXN_READ_COMMITTED = 2_i32
  SQL_TRANSACTION_READ_COMMITTED = 2_i32
  SQL_TXN_REPEATABLE_READ = 4_i32
  SQL_TRANSACTION_REPEATABLE_READ = 4_i32
  SQL_TXN_SERIALIZABLE = 8_i32
  SQL_TRANSACTION_SERIALIZABLE = 8_i32
  SQL_NC_HIGH = 0_u32
  SQL_NC_LOW = 1_u32
  SQL_SPEC_MAJOR = 3_u32
  SQL_SPEC_MINOR = 80_u32
  SQL_SPEC_STRING = "03.80"
  SQL_SQLSTATE_SIZE = 5_u32
  SQL_MAX_DSN_LENGTH = 32_u32
  SQL_MAX_OPTION_STRING_LENGTH = 256_u32
  SQL_NO_DATA_FOUND = 100_u32
  SQL_HANDLE_SENV = 5_u32
  SQL_ATTR_ODBC_VERSION = 200_u32
  SQL_ATTR_CONNECTION_POOLING = 201_u32
  SQL_ATTR_CP_MATCH = 202_u32
  SQL_ATTR_APPLICATION_KEY = 203_u32
  SQL_CP_OFF = 0_u32
  SQL_CP_ONE_PER_DRIVER = 1_u32
  SQL_CP_ONE_PER_HENV = 2_u32
  SQL_CP_DRIVER_AWARE = 3_u32
  SQL_CP_DEFAULT = 0_u32
  SQL_CP_STRICT_MATCH = 0_u32
  SQL_CP_RELAXED_MATCH = 1_u32
  SQL_CP_MATCH_DEFAULT = 0_u32
  SQL_OV_ODBC2 = 2_u32
  SQL_OV_ODBC3 = 3_u32
  SQL_OV_ODBC3_80 = 380_u32
  SQL_ACCESS_MODE = 101_u32
  SQL_AUTOCOMMIT = 102_u32
  SQL_LOGIN_TIMEOUT = 103_u32
  SQL_OPT_TRACE = 104_u32
  SQL_OPT_TRACEFILE = 105_u32
  SQL_TRANSLATE_DLL = 106_u32
  SQL_TRANSLATE_OPTION = 107_u32
  SQL_TXN_ISOLATION = 108_u32
  SQL_CURRENT_QUALIFIER = 109_u32
  SQL_ODBC_CURSORS = 110_u32
  SQL_QUIET_MODE = 111_u32
  SQL_PACKET_SIZE = 112_u32
  SQL_ATTR_ACCESS_MODE = 101_u32
  SQL_ATTR_AUTOCOMMIT = 102_u32
  SQL_ATTR_CONNECTION_TIMEOUT = 113_u32
  SQL_ATTR_CURRENT_CATALOG = 109_u32
  SQL_ATTR_DISCONNECT_BEHAVIOR = 114_u32
  SQL_ATTR_ENLIST_IN_DTC = 1207_u32
  SQL_ATTR_ENLIST_IN_XA = 1208_u32
  SQL_ATTR_LOGIN_TIMEOUT = 103_u32
  SQL_ATTR_ODBC_CURSORS = 110_u32
  SQL_ATTR_PACKET_SIZE = 112_u32
  SQL_ATTR_QUIET_MODE = 111_u32
  SQL_ATTR_TRACE = 104_u32
  SQL_ATTR_TRACEFILE = 105_u32
  SQL_ATTR_TRANSLATE_LIB = 106_u32
  SQL_ATTR_TRANSLATE_OPTION = 107_u32
  SQL_ATTR_TXN_ISOLATION = 108_u32
  SQL_ATTR_CONNECTION_DEAD = 1209_u32
  SQL_ATTR_ANSI_APP = 115_u32
  SQL_ATTR_RESET_CONNECTION = 116_u32
  SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE = 117_u32
  SQL_ATTR_ASYNC_DBC_EVENT = 119_u32
  SQL_CONNECT_OPT_DRVR_START = 1000_u32
  SQL_CONN_OPT_MAX = 112_u32
  SQL_CONN_OPT_MIN = 101_u32
  SQL_MODE_READ_WRITE = 0_u32
  SQL_MODE_READ_ONLY = 1_u32
  SQL_MODE_DEFAULT = 0_u32
  SQL_AUTOCOMMIT_OFF = 0_u32
  SQL_AUTOCOMMIT_ON = 1_u32
  SQL_AUTOCOMMIT_DEFAULT = 1_u32
  SQL_LOGIN_TIMEOUT_DEFAULT = 15_u32
  SQL_OPT_TRACE_OFF = 0_u32
  SQL_OPT_TRACE_ON = 1_u32
  SQL_OPT_TRACE_DEFAULT = 0_u32
  SQL_OPT_TRACE_FILE_DEFAULT = "\\SQL.LOG"
  SQL_CUR_USE_IF_NEEDED = 0_u32
  SQL_CUR_USE_ODBC = 1_u32
  SQL_CUR_USE_DRIVER = 2_u32
  SQL_CUR_DEFAULT = 2_u32
  SQL_DB_RETURN_TO_POOL = 0_u32
  SQL_DB_DISCONNECT = 1_u32
  SQL_DB_DEFAULT = 0_u32
  SQL_DTC_DONE = 0_i32
  SQL_CD_TRUE = 1_i32
  SQL_CD_FALSE = 0_i32
  SQL_AA_TRUE = 1_i32
  SQL_AA_FALSE = 0_i32
  SQL_RESET_CONNECTION_YES = 1_u32
  SQL_ASYNC_DBC_ENABLE_ON = 1_u32
  SQL_ASYNC_DBC_ENABLE_OFF = 0_u32
  SQL_ASYNC_DBC_ENABLE_DEFAULT = 0_u32
  SQL_QUERY_TIMEOUT = 0_u32
  SQL_MAX_ROWS = 1_u32
  SQL_NOSCAN = 2_u32
  SQL_MAX_LENGTH = 3_u32
  SQL_ASYNC_ENABLE = 4_u32
  SQL_BIND_TYPE = 5_u32
  SQL_CURSOR_TYPE = 6_u32
  SQL_CONCURRENCY = 7_u32
  SQL_KEYSET_SIZE = 8_u32
  SQL_ROWSET_SIZE = 9_u32
  SQL_SIMULATE_CURSOR = 10_u32
  SQL_RETRIEVE_DATA = 11_u32
  SQL_USE_BOOKMARKS = 12_u32
  SQL_GET_BOOKMARK = 13_u32
  SQL_ROW_NUMBER = 14_u32
  SQL_ATTR_ASYNC_ENABLE = 4_u32
  SQL_ATTR_CONCURRENCY = 7_u32
  SQL_ATTR_CURSOR_TYPE = 6_u32
  SQL_ATTR_ENABLE_AUTO_IPD = 15_u32
  SQL_ATTR_FETCH_BOOKMARK_PTR = 16_u32
  SQL_ATTR_KEYSET_SIZE = 8_u32
  SQL_ATTR_MAX_LENGTH = 3_u32
  SQL_ATTR_MAX_ROWS = 1_u32
  SQL_ATTR_NOSCAN = 2_u32
  SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17_u32
  SQL_ATTR_PARAM_BIND_TYPE = 18_u32
  SQL_ATTR_PARAM_OPERATION_PTR = 19_u32
  SQL_ATTR_PARAM_STATUS_PTR = 20_u32
  SQL_ATTR_PARAMS_PROCESSED_PTR = 21_u32
  SQL_ATTR_PARAMSET_SIZE = 22_u32
  SQL_ATTR_QUERY_TIMEOUT = 0_u32
  SQL_ATTR_RETRIEVE_DATA = 11_u32
  SQL_ATTR_ROW_BIND_OFFSET_PTR = 23_u32
  SQL_ATTR_ROW_BIND_TYPE = 5_u32
  SQL_ATTR_ROW_NUMBER = 14_u32
  SQL_ATTR_ROW_OPERATION_PTR = 24_u32
  SQL_ATTR_ROW_STATUS_PTR = 25_u32
  SQL_ATTR_ROWS_FETCHED_PTR = 26_u32
  SQL_ATTR_ROW_ARRAY_SIZE = 27_u32
  SQL_ATTR_SIMULATE_CURSOR = 10_u32
  SQL_ATTR_USE_BOOKMARKS = 12_u32
  SQL_ATTR_ASYNC_STMT_EVENT = 29_u32
  SQL_STMT_OPT_MAX = 14_u32
  SQL_STMT_OPT_MIN = 0_u32
  SQL_IS_POINTER = -4_i32
  SQL_IS_UINTEGER = -5_i32
  SQL_IS_INTEGER = -6_i32
  SQL_IS_USMALLINT = -7_i32
  SQL_IS_SMALLINT = -8_i32
  SQL_PARAM_BIND_BY_COLUMN = 0_u32
  SQL_PARAM_BIND_TYPE_DEFAULT = 0_u32
  SQL_QUERY_TIMEOUT_DEFAULT = 0_u32
  SQL_MAX_ROWS_DEFAULT = 0_u32
  SQL_NOSCAN_OFF = 0_u32
  SQL_NOSCAN_ON = 1_u32
  SQL_NOSCAN_DEFAULT = 0_u32
  SQL_MAX_LENGTH_DEFAULT = 0_u32
  SQL_ASYNC_ENABLE_OFF = 0_u32
  SQL_ASYNC_ENABLE_ON = 1_u32
  SQL_ASYNC_ENABLE_DEFAULT = 0_u32
  SQL_BIND_BY_COLUMN = 0_u32
  SQL_BIND_TYPE_DEFAULT = 0_u32
  SQL_CONCUR_READ_ONLY = 1_u32
  SQL_CONCUR_LOCK = 2_u32
  SQL_CONCUR_ROWVER = 3_u32
  SQL_CONCUR_VALUES = 4_u32
  SQL_CONCUR_DEFAULT = 1_u32
  SQL_CURSOR_FORWARD_ONLY = 0_u32
  SQL_CURSOR_KEYSET_DRIVEN = 1_u32
  SQL_CURSOR_DYNAMIC = 2_u32
  SQL_CURSOR_STATIC = 3_u32
  SQL_CURSOR_TYPE_DEFAULT = 0_u32
  SQL_ROWSET_SIZE_DEFAULT = 1_u32
  SQL_KEYSET_SIZE_DEFAULT = 0_u32
  SQL_SC_NON_UNIQUE = 0_u32
  SQL_SC_TRY_UNIQUE = 1_u32
  SQL_SC_UNIQUE = 2_u32
  SQL_RD_OFF = 0_u32
  SQL_RD_ON = 1_u32
  SQL_RD_DEFAULT = 1_u32
  SQL_UB_OFF = 0_u32
  SQL_UB_ON = 1_u32
  SQL_UB_DEFAULT = 0_u32
  SQL_UB_FIXED = 1_u32
  SQL_UB_VARIABLE = 2_u32
  SQL_DESC_ARRAY_SIZE = 20_u32
  SQL_DESC_ARRAY_STATUS_PTR = 21_u32
  SQL_DESC_BASE_COLUMN_NAME = 22_u32
  SQL_DESC_BASE_TABLE_NAME = 23_u32
  SQL_DESC_BIND_OFFSET_PTR = 24_u32
  SQL_DESC_BIND_TYPE = 25_u32
  SQL_DESC_DATETIME_INTERVAL_PRECISION = 26_u32
  SQL_DESC_LITERAL_PREFIX = 27_u32
  SQL_DESC_LITERAL_SUFFIX = 28_u32
  SQL_DESC_LOCAL_TYPE_NAME = 29_u32
  SQL_DESC_MAXIMUM_SCALE = 30_u32
  SQL_DESC_MINIMUM_SCALE = 31_u32
  SQL_DESC_NUM_PREC_RADIX = 32_u32
  SQL_DESC_PARAMETER_TYPE = 33_u32
  SQL_DESC_ROWS_PROCESSED_PTR = 34_u32
  SQL_DESC_ROWVER = 35_u32
  SQL_DIAG_CURSOR_ROW_COUNT = -1249_i32
  SQL_DIAG_ROW_NUMBER = -1248_i32
  SQL_DIAG_COLUMN_NUMBER = -1247_i32
  SQL_DATE = 9_u32
  SQL_INTERVAL = 10_u32
  SQL_TIME = 10_u32
  SQL_TIMESTAMP = 11_u32
  SQL_LONGVARCHAR = -1_i32
  SQL_BINARY = -2_i32
  SQL_VARBINARY = -3_i32
  SQL_LONGVARBINARY = -4_i32
  SQL_BIGINT = -5_i32
  SQL_TINYINT = -6_i32
  SQL_BIT = -7_i32
  SQL_GUID = -11_i32
  SQL_CODE_YEAR = 1_u32
  SQL_CODE_MONTH = 2_u32
  SQL_CODE_DAY = 3_u32
  SQL_CODE_HOUR = 4_u32
  SQL_CODE_MINUTE = 5_u32
  SQL_CODE_SECOND = 6_u32
  SQL_CODE_YEAR_TO_MONTH = 7_u32
  SQL_CODE_DAY_TO_HOUR = 8_u32
  SQL_CODE_DAY_TO_MINUTE = 9_u32
  SQL_CODE_DAY_TO_SECOND = 10_u32
  SQL_CODE_HOUR_TO_MINUTE = 11_u32
  SQL_CODE_HOUR_TO_SECOND = 12_u32
  SQL_CODE_MINUTE_TO_SECOND = 13_u32
  SQL_INTERVAL_YEAR = -80_i32
  SQL_INTERVAL_MONTH = -81_i32
  SQL_INTERVAL_YEAR_TO_MONTH = -82_i32
  SQL_INTERVAL_DAY = -83_i32
  SQL_INTERVAL_HOUR = -84_i32
  SQL_INTERVAL_MINUTE = -85_i32
  SQL_INTERVAL_SECOND = -86_i32
  SQL_INTERVAL_DAY_TO_HOUR = -87_i32
  SQL_INTERVAL_DAY_TO_MINUTE = -88_i32
  SQL_INTERVAL_DAY_TO_SECOND = -89_i32
  SQL_INTERVAL_HOUR_TO_MINUTE = -90_i32
  SQL_INTERVAL_HOUR_TO_SECOND = -91_i32
  SQL_INTERVAL_MINUTE_TO_SECOND = -92_i32
  SQL_UNICODE = -95_i32
  SQL_UNICODE_VARCHAR = -96_i32
  SQL_UNICODE_LONGVARCHAR = -97_i32
  SQL_UNICODE_CHAR = -95_i32
  SQL_TYPE_DRIVER_START = -80_i32
  SQL_TYPE_DRIVER_END = -97_i32
  SQL_C_CHAR = 1_u32
  SQL_C_LONG = 4_u32
  SQL_C_SHORT = 5_u32
  SQL_C_FLOAT = 7_u32
  SQL_C_DOUBLE = 8_u32
  SQL_C_NUMERIC = 2_u32
  SQL_C_DEFAULT = 99_u32
  SQL_SIGNED_OFFSET = -20_i32
  SQL_UNSIGNED_OFFSET = -22_i32
  SQL_C_DATE = 9_u32
  SQL_C_TIME = 10_u32
  SQL_C_TIMESTAMP = 11_u32
  SQL_C_TYPE_DATE = 91_u32
  SQL_C_TYPE_TIME = 92_u32
  SQL_C_TYPE_TIMESTAMP = 93_u32
  SQL_C_INTERVAL_YEAR = -80_i32
  SQL_C_INTERVAL_MONTH = -81_i32
  SQL_C_INTERVAL_DAY = -83_i32
  SQL_C_INTERVAL_HOUR = -84_i32
  SQL_C_INTERVAL_MINUTE = -85_i32
  SQL_C_INTERVAL_SECOND = -86_i32
  SQL_C_INTERVAL_YEAR_TO_MONTH = -82_i32
  SQL_C_INTERVAL_DAY_TO_HOUR = -87_i32
  SQL_C_INTERVAL_DAY_TO_MINUTE = -88_i32
  SQL_C_INTERVAL_DAY_TO_SECOND = -89_i32
  SQL_C_INTERVAL_HOUR_TO_MINUTE = -90_i32
  SQL_C_INTERVAL_HOUR_TO_SECOND = -91_i32
  SQL_C_INTERVAL_MINUTE_TO_SECOND = -92_i32
  SQL_C_BINARY = -2_i32
  SQL_C_BIT = -7_i32
  SQL_C_TINYINT = -6_i32
  SQL_C_GUID = -11_i32
  SQL_TYPE_NULL = 0_u32
  SQL_TYPE_MIN = -7_i32
  SQL_TYPE_MAX = 12_u32
  SQL_DRIVER_C_TYPE_BASE = 16384_u32
  SQL_DRIVER_SQL_TYPE_BASE = 16384_u32
  SQL_DRIVER_DESC_FIELD_BASE = 16384_u32
  SQL_DRIVER_DIAG_FIELD_BASE = 16384_u32
  SQL_DRIVER_INFO_TYPE_BASE = 16384_u32
  SQL_DRIVER_CONN_ATTR_BASE = 16384_u32
  SQL_DRIVER_STMT_ATTR_BASE = 16384_u32
  SQL_C_VARBOOKMARK = -2_i32
  SQL_NO_ROW_NUMBER = -1_i32
  SQL_NO_COLUMN_NUMBER = -1_i32
  SQL_ROW_NUMBER_UNKNOWN = -2_i32
  SQL_COLUMN_NUMBER_UNKNOWN = -2_i32
  SQL_DEFAULT_PARAM = -5_i32
  SQL_IGNORE = -6_i32
  SQL_COLUMN_IGNORE = -6_i32
  SQL_LEN_DATA_AT_EXEC_OFFSET = -100_i32
  SQL_LEN_BINARY_ATTR_OFFSET = -100_i32
  SQL_SETPARAM_VALUE_MAX = -1_i32
  SQL_COLUMN_COUNT = 0_u32
  SQL_COLUMN_NAME = 1_u32
  SQL_COLUMN_TYPE = 2_u32
  SQL_COLUMN_LENGTH = 3_u32
  SQL_COLUMN_PRECISION = 4_u32
  SQL_COLUMN_SCALE = 5_u32
  SQL_COLUMN_DISPLAY_SIZE = 6_u32
  SQL_COLUMN_NULLABLE = 7_u32
  SQL_COLUMN_UNSIGNED = 8_u32
  SQL_COLUMN_MONEY = 9_u32
  SQL_COLUMN_UPDATABLE = 10_u32
  SQL_COLUMN_AUTO_INCREMENT = 11_u32
  SQL_COLUMN_CASE_SENSITIVE = 12_u32
  SQL_COLUMN_SEARCHABLE = 13_u32
  SQL_COLUMN_TYPE_NAME = 14_u32
  SQL_COLUMN_TABLE_NAME = 15_u32
  SQL_COLUMN_OWNER_NAME = 16_u32
  SQL_COLUMN_QUALIFIER_NAME = 17_u32
  SQL_COLUMN_LABEL = 18_u32
  SQL_COLATT_OPT_MAX = 18_u32
  SQL_COLUMN_DRIVER_START = 1000_u32
  SQL_COLATT_OPT_MIN = 0_u32
  SQL_ATTR_READONLY = 0_u32
  SQL_ATTR_WRITE = 1_u32
  SQL_ATTR_READWRITE_UNKNOWN = 2_u32
  SQL_UNSEARCHABLE = 0_u32
  SQL_LIKE_ONLY = 1_u32
  SQL_ALL_EXCEPT_LIKE = 2_u32
  SQL_SEARCHABLE = 3_u32
  SQL_PRED_SEARCHABLE = 3_u32
  SQL_NO_TOTAL = -4_i32
  SQL_API_SQLALLOCHANDLESTD = 73_u32
  SQL_API_SQLBULKOPERATIONS = 24_u32
  SQL_API_SQLBINDPARAMETER = 72_u32
  SQL_API_SQLBROWSECONNECT = 55_u32
  SQL_API_SQLCOLATTRIBUTES = 6_u32
  SQL_API_SQLCOLUMNPRIVILEGES = 56_u32
  SQL_API_SQLDESCRIBEPARAM = 58_u32
  SQL_API_SQLDRIVERCONNECT = 41_u32
  SQL_API_SQLDRIVERS = 71_u32
  SQL_API_SQLPRIVATEDRIVERS = 79_u32
  SQL_API_SQLEXTENDEDFETCH = 59_u32
  SQL_API_SQLFOREIGNKEYS = 60_u32
  SQL_API_SQLMORERESULTS = 61_u32
  SQL_API_SQLNATIVESQL = 62_u32
  SQL_API_SQLNUMPARAMS = 63_u32
  SQL_API_SQLPARAMOPTIONS = 64_u32
  SQL_API_SQLPRIMARYKEYS = 65_u32
  SQL_API_SQLPROCEDURECOLUMNS = 66_u32
  SQL_API_SQLPROCEDURES = 67_u32
  SQL_API_SQLSETPOS = 68_u32
  SQL_API_SQLSETSCROLLOPTIONS = 69_u32
  SQL_API_SQLTABLEPRIVILEGES = 70_u32
  SQL_EXT_API_LAST = 72_u32
  SQL_NUM_FUNCTIONS = 23_u32
  SQL_EXT_API_START = 40_u32
  SQL_API_ALL_FUNCTIONS = 0_u32
  SQL_API_LOADBYORDINAL = 199_u32
  SQL_API_ODBC3_ALL_FUNCTIONS = 999_u32
  SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250_u32
  SQL_INFO_FIRST = 0_u32
  SQL_ACTIVE_CONNECTIONS = 0_u32
  SQL_ACTIVE_STATEMENTS = 1_u32
  SQL_DRIVER_HDBC = 3_u32
  SQL_DRIVER_HENV = 4_u32
  SQL_DRIVER_HSTMT = 5_u32
  SQL_DRIVER_NAME = 6_u32
  SQL_DRIVER_VER = 7_u32
  SQL_ODBC_API_CONFORMANCE = 9_u32
  SQL_ODBC_VER = 10_u32
  SQL_ROW_UPDATES = 11_u32
  SQL_ODBC_SAG_CLI_CONFORMANCE = 12_u32
  SQL_ODBC_SQL_CONFORMANCE = 15_u32
  SQL_PROCEDURES = 21_u32
  SQL_CONCAT_NULL_BEHAVIOR = 22_u32
  SQL_CURSOR_ROLLBACK_BEHAVIOR = 24_u32
  SQL_EXPRESSIONS_IN_ORDERBY = 27_u32
  SQL_MAX_OWNER_NAME_LEN = 32_u32
  SQL_MAX_PROCEDURE_NAME_LEN = 33_u32
  SQL_MAX_QUALIFIER_NAME_LEN = 34_u32
  SQL_MULT_RESULT_SETS = 36_u32
  SQL_MULTIPLE_ACTIVE_TXN = 37_u32
  SQL_OUTER_JOINS = 38_u32
  SQL_OWNER_TERM = 39_u32
  SQL_PROCEDURE_TERM = 40_u32
  SQL_QUALIFIER_NAME_SEPARATOR = 41_u32
  SQL_QUALIFIER_TERM = 42_u32
  SQL_SCROLL_OPTIONS = 44_u32
  SQL_TABLE_TERM = 45_u32
  SQL_CONVERT_FUNCTIONS = 48_u32
  SQL_NUMERIC_FUNCTIONS = 49_u32
  SQL_STRING_FUNCTIONS = 50_u32
  SQL_SYSTEM_FUNCTIONS = 51_u32
  SQL_TIMEDATE_FUNCTIONS = 52_u32
  SQL_CONVERT_BIGINT = 53_u32
  SQL_CONVERT_BINARY = 54_u32
  SQL_CONVERT_BIT = 55_u32
  SQL_CONVERT_CHAR = 56_u32
  SQL_CONVERT_DATE = 57_u32
  SQL_CONVERT_DECIMAL = 58_u32
  SQL_CONVERT_DOUBLE = 59_u32
  SQL_CONVERT_FLOAT = 60_u32
  SQL_CONVERT_INTEGER = 61_u32
  SQL_CONVERT_LONGVARCHAR = 62_u32
  SQL_CONVERT_NUMERIC = 63_u32
  SQL_CONVERT_REAL = 64_u32
  SQL_CONVERT_SMALLINT = 65_u32
  SQL_CONVERT_TIME = 66_u32
  SQL_CONVERT_TIMESTAMP = 67_u32
  SQL_CONVERT_TINYINT = 68_u32
  SQL_CONVERT_VARBINARY = 69_u32
  SQL_CONVERT_VARCHAR = 70_u32
  SQL_CONVERT_LONGVARBINARY = 71_u32
  SQL_ODBC_SQL_OPT_IEF = 73_u32
  SQL_CORRELATION_NAME = 74_u32
  SQL_NON_NULLABLE_COLUMNS = 75_u32
  SQL_DRIVER_HLIB = 76_u32
  SQL_DRIVER_ODBC_VER = 77_u32
  SQL_LOCK_TYPES = 78_u32
  SQL_POS_OPERATIONS = 79_u32
  SQL_POSITIONED_STATEMENTS = 80_u32
  SQL_BOOKMARK_PERSISTENCE = 82_u32
  SQL_STATIC_SENSITIVITY = 83_u32
  SQL_FILE_USAGE = 84_u32
  SQL_COLUMN_ALIAS = 87_u32
  SQL_GROUP_BY = 88_u32
  SQL_KEYWORDS = 89_u32
  SQL_OWNER_USAGE = 91_u32
  SQL_QUALIFIER_USAGE = 92_u32
  SQL_QUOTED_IDENTIFIER_CASE = 93_u32
  SQL_SUBQUERIES = 95_u32
  SQL_UNION = 96_u32
  SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103_u32
  SQL_MAX_CHAR_LITERAL_LEN = 108_u32
  SQL_TIMEDATE_ADD_INTERVALS = 109_u32
  SQL_TIMEDATE_DIFF_INTERVALS = 110_u32
  SQL_NEED_LONG_DATA_LEN = 111_u32
  SQL_MAX_BINARY_LITERAL_LEN = 112_u32
  SQL_LIKE_ESCAPE_CLAUSE = 113_u32
  SQL_QUALIFIER_LOCATION = 114_u32
  SQL_INFO_LAST = 114_u32
  SQL_INFO_DRIVER_START = 1000_u32
  SQL_ACTIVE_ENVIRONMENTS = 116_u32
  SQL_ALTER_DOMAIN = 117_u32
  SQL_SQL_CONFORMANCE = 118_u32
  SQL_DATETIME_LITERALS = 119_u32
  SQL_ASYNC_MODE = 10021_u32
  SQL_BATCH_ROW_COUNT = 120_u32
  SQL_BATCH_SUPPORT = 121_u32
  SQL_CATALOG_LOCATION = 114_u32
  SQL_CATALOG_NAME_SEPARATOR = 41_u32
  SQL_CATALOG_TERM = 42_u32
  SQL_CATALOG_USAGE = 92_u32
  SQL_CONVERT_WCHAR = 122_u32
  SQL_CONVERT_INTERVAL_DAY_TIME = 123_u32
  SQL_CONVERT_INTERVAL_YEAR_MONTH = 124_u32
  SQL_CONVERT_WLONGVARCHAR = 125_u32
  SQL_CONVERT_WVARCHAR = 126_u32
  SQL_CREATE_ASSERTION = 127_u32
  SQL_CREATE_CHARACTER_SET = 128_u32
  SQL_CREATE_COLLATION = 129_u32
  SQL_CREATE_DOMAIN = 130_u32
  SQL_CREATE_SCHEMA = 131_u32
  SQL_CREATE_TABLE = 132_u32
  SQL_CREATE_TRANSLATION = 133_u32
  SQL_CREATE_VIEW = 134_u32
  SQL_DRIVER_HDESC = 135_u32
  SQL_DROP_ASSERTION = 136_u32
  SQL_DROP_CHARACTER_SET = 137_u32
  SQL_DROP_COLLATION = 138_u32
  SQL_DROP_DOMAIN = 139_u32
  SQL_DROP_SCHEMA = 140_u32
  SQL_DROP_TABLE = 141_u32
  SQL_DROP_TRANSLATION = 142_u32
  SQL_DROP_VIEW = 143_u32
  SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144_u32
  SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145_u32
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146_u32
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147_u32
  SQL_INDEX_KEYWORDS = 148_u32
  SQL_INFO_SCHEMA_VIEWS = 149_u32
  SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150_u32
  SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151_u32
  SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022_u32
  SQL_ODBC_INTERFACE_CONFORMANCE = 152_u32
  SQL_PARAM_ARRAY_ROW_COUNTS = 153_u32
  SQL_PARAM_ARRAY_SELECTS = 154_u32
  SQL_SCHEMA_TERM = 39_u32
  SQL_SCHEMA_USAGE = 91_u32
  SQL_SQL92_DATETIME_FUNCTIONS = 155_u32
  SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156_u32
  SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157_u32
  SQL_SQL92_GRANT = 158_u32
  SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159_u32
  SQL_SQL92_PREDICATES = 160_u32
  SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161_u32
  SQL_SQL92_REVOKE = 162_u32
  SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163_u32
  SQL_SQL92_STRING_FUNCTIONS = 164_u32
  SQL_SQL92_VALUE_EXPRESSIONS = 165_u32
  SQL_STANDARD_CLI_CONFORMANCE = 166_u32
  SQL_STATIC_CURSOR_ATTRIBUTES1 = 167_u32
  SQL_STATIC_CURSOR_ATTRIBUTES2 = 168_u32
  SQL_AGGREGATE_FUNCTIONS = 169_u32
  SQL_DDL_INDEX = 170_u32
  SQL_DM_VER = 171_u32
  SQL_INSERT_STATEMENT = 172_u32
  SQL_CONVERT_GUID = 173_u32
  SQL_UNION_STATEMENT = 96_u32
  SQL_ASYNC_DBC_FUNCTIONS = 10023_u32
  SQL_DRIVER_AWARE_POOLING_SUPPORTED = 10024_u32
  SQL_ASYNC_NOTIFICATION = 10025_u32
  SQL_ASYNC_NOTIFICATION_NOT_CAPABLE = 0_i32
  SQL_ASYNC_NOTIFICATION_CAPABLE = 1_i32
  SQL_DTC_TRANSITION_COST = 1750_u32
  SQL_AT_ADD_COLUMN_SINGLE = 32_i32
  SQL_AT_ADD_COLUMN_DEFAULT = 64_i32
  SQL_AT_ADD_COLUMN_COLLATION = 128_i32
  SQL_AT_SET_COLUMN_DEFAULT = 256_i32
  SQL_AT_DROP_COLUMN_DEFAULT = 512_i32
  SQL_AT_DROP_COLUMN_CASCADE = 1024_i32
  SQL_AT_DROP_COLUMN_RESTRICT = 2048_i32
  SQL_AT_ADD_TABLE_CONSTRAINT = 4096_i32
  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192_i32
  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384_i32
  SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768_i32
  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536_i32
  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072_i32
  SQL_AT_CONSTRAINT_DEFERRABLE = 262144_i32
  SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288_i32
  SQL_CVT_CHAR = 1_i32
  SQL_CVT_NUMERIC = 2_i32
  SQL_CVT_DECIMAL = 4_i32
  SQL_CVT_INTEGER = 8_i32
  SQL_CVT_SMALLINT = 16_i32
  SQL_CVT_FLOAT = 32_i32
  SQL_CVT_REAL = 64_i32
  SQL_CVT_DOUBLE = 128_i32
  SQL_CVT_VARCHAR = 256_i32
  SQL_CVT_LONGVARCHAR = 512_i32
  SQL_CVT_BINARY = 1024_i32
  SQL_CVT_VARBINARY = 2048_i32
  SQL_CVT_BIT = 4096_i32
  SQL_CVT_TINYINT = 8192_i32
  SQL_CVT_BIGINT = 16384_i32
  SQL_CVT_DATE = 32768_i32
  SQL_CVT_TIME = 65536_i32
  SQL_CVT_TIMESTAMP = 131072_i32
  SQL_CVT_LONGVARBINARY = 262144_i32
  SQL_CVT_INTERVAL_YEAR_MONTH = 524288_i32
  SQL_CVT_INTERVAL_DAY_TIME = 1048576_i32
  SQL_CVT_WCHAR = 2097152_i32
  SQL_CVT_WLONGVARCHAR = 4194304_i32
  SQL_CVT_WVARCHAR = 8388608_i32
  SQL_CVT_GUID = 16777216_i32
  SQL_FN_CVT_CONVERT = 1_i32
  SQL_FN_CVT_CAST = 2_i32
  SQL_FN_STR_CONCAT = 1_i32
  SQL_FN_STR_INSERT = 2_i32
  SQL_FN_STR_LEFT = 4_i32
  SQL_FN_STR_LTRIM = 8_i32
  SQL_FN_STR_LENGTH = 16_i32
  SQL_FN_STR_LOCATE = 32_i32
  SQL_FN_STR_LCASE = 64_i32
  SQL_FN_STR_REPEAT = 128_i32
  SQL_FN_STR_REPLACE = 256_i32
  SQL_FN_STR_RIGHT = 512_i32
  SQL_FN_STR_RTRIM = 1024_i32
  SQL_FN_STR_SUBSTRING = 2048_i32
  SQL_FN_STR_UCASE = 4096_i32
  SQL_FN_STR_ASCII = 8192_i32
  SQL_FN_STR_CHAR = 16384_i32
  SQL_FN_STR_DIFFERENCE = 32768_i32
  SQL_FN_STR_LOCATE_2 = 65536_i32
  SQL_FN_STR_SOUNDEX = 131072_i32
  SQL_FN_STR_SPACE = 262144_i32
  SQL_FN_STR_BIT_LENGTH = 524288_i32
  SQL_FN_STR_CHAR_LENGTH = 1048576_i32
  SQL_FN_STR_CHARACTER_LENGTH = 2097152_i32
  SQL_FN_STR_OCTET_LENGTH = 4194304_i32
  SQL_FN_STR_POSITION = 8388608_i32
  SQL_SSF_CONVERT = 1_i32
  SQL_SSF_LOWER = 2_i32
  SQL_SSF_UPPER = 4_i32
  SQL_SSF_SUBSTRING = 8_i32
  SQL_SSF_TRANSLATE = 16_i32
  SQL_SSF_TRIM_BOTH = 32_i32
  SQL_SSF_TRIM_LEADING = 64_i32
  SQL_SSF_TRIM_TRAILING = 128_i32
  SQL_FN_NUM_ABS = 1_i32
  SQL_FN_NUM_ACOS = 2_i32
  SQL_FN_NUM_ASIN = 4_i32
  SQL_FN_NUM_ATAN = 8_i32
  SQL_FN_NUM_ATAN2 = 16_i32
  SQL_FN_NUM_CEILING = 32_i32
  SQL_FN_NUM_COS = 64_i32
  SQL_FN_NUM_COT = 128_i32
  SQL_FN_NUM_EXP = 256_i32
  SQL_FN_NUM_FLOOR = 512_i32
  SQL_FN_NUM_LOG = 1024_i32
  SQL_FN_NUM_MOD = 2048_i32
  SQL_FN_NUM_SIGN = 4096_i32
  SQL_FN_NUM_SIN = 8192_i32
  SQL_FN_NUM_SQRT = 16384_i32
  SQL_FN_NUM_TAN = 32768_i32
  SQL_FN_NUM_PI = 65536_i32
  SQL_FN_NUM_RAND = 131072_i32
  SQL_FN_NUM_DEGREES = 262144_i32
  SQL_FN_NUM_LOG10 = 524288_i32
  SQL_FN_NUM_POWER = 1048576_i32
  SQL_FN_NUM_RADIANS = 2097152_i32
  SQL_FN_NUM_ROUND = 4194304_i32
  SQL_FN_NUM_TRUNCATE = 8388608_i32
  SQL_SNVF_BIT_LENGTH = 1_i32
  SQL_SNVF_CHAR_LENGTH = 2_i32
  SQL_SNVF_CHARACTER_LENGTH = 4_i32
  SQL_SNVF_EXTRACT = 8_i32
  SQL_SNVF_OCTET_LENGTH = 16_i32
  SQL_SNVF_POSITION = 32_i32
  SQL_FN_TD_NOW = 1_i32
  SQL_FN_TD_CURDATE = 2_i32
  SQL_FN_TD_DAYOFMONTH = 4_i32
  SQL_FN_TD_DAYOFWEEK = 8_i32
  SQL_FN_TD_DAYOFYEAR = 16_i32
  SQL_FN_TD_MONTH = 32_i32
  SQL_FN_TD_QUARTER = 64_i32
  SQL_FN_TD_WEEK = 128_i32
  SQL_FN_TD_YEAR = 256_i32
  SQL_FN_TD_CURTIME = 512_i32
  SQL_FN_TD_HOUR = 1024_i32
  SQL_FN_TD_MINUTE = 2048_i32
  SQL_FN_TD_SECOND = 4096_i32
  SQL_FN_TD_TIMESTAMPADD = 8192_i32
  SQL_FN_TD_TIMESTAMPDIFF = 16384_i32
  SQL_FN_TD_DAYNAME = 32768_i32
  SQL_FN_TD_MONTHNAME = 65536_i32
  SQL_FN_TD_CURRENT_DATE = 131072_i32
  SQL_FN_TD_CURRENT_TIME = 262144_i32
  SQL_FN_TD_CURRENT_TIMESTAMP = 524288_i32
  SQL_FN_TD_EXTRACT = 1048576_i32
  SQL_SDF_CURRENT_DATE = 1_i32
  SQL_SDF_CURRENT_TIME = 2_i32
  SQL_SDF_CURRENT_TIMESTAMP = 4_i32
  SQL_FN_SYS_USERNAME = 1_i32
  SQL_FN_SYS_DBNAME = 2_i32
  SQL_FN_SYS_IFNULL = 4_i32
  SQL_FN_TSI_FRAC_SECOND = 1_i32
  SQL_FN_TSI_SECOND = 2_i32
  SQL_FN_TSI_MINUTE = 4_i32
  SQL_FN_TSI_HOUR = 8_i32
  SQL_FN_TSI_DAY = 16_i32
  SQL_FN_TSI_WEEK = 32_i32
  SQL_FN_TSI_MONTH = 64_i32
  SQL_FN_TSI_QUARTER = 128_i32
  SQL_FN_TSI_YEAR = 256_i32
  SQL_CA1_NEXT = 1_i32
  SQL_CA1_ABSOLUTE = 2_i32
  SQL_CA1_RELATIVE = 4_i32
  SQL_CA1_BOOKMARK = 8_i32
  SQL_CA1_LOCK_NO_CHANGE = 64_i32
  SQL_CA1_LOCK_EXCLUSIVE = 128_i32
  SQL_CA1_LOCK_UNLOCK = 256_i32
  SQL_CA1_POS_POSITION = 512_i32
  SQL_CA1_POS_UPDATE = 1024_i32
  SQL_CA1_POS_DELETE = 2048_i32
  SQL_CA1_POS_REFRESH = 4096_i32
  SQL_CA1_POSITIONED_UPDATE = 8192_i32
  SQL_CA1_POSITIONED_DELETE = 16384_i32
  SQL_CA1_SELECT_FOR_UPDATE = 32768_i32
  SQL_CA1_BULK_ADD = 65536_i32
  SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072_i32
  SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144_i32
  SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288_i32
  SQL_CA2_READ_ONLY_CONCURRENCY = 1_i32
  SQL_CA2_LOCK_CONCURRENCY = 2_i32
  SQL_CA2_OPT_ROWVER_CONCURRENCY = 4_i32
  SQL_CA2_OPT_VALUES_CONCURRENCY = 8_i32
  SQL_CA2_SENSITIVITY_ADDITIONS = 16_i32
  SQL_CA2_SENSITIVITY_DELETIONS = 32_i32
  SQL_CA2_SENSITIVITY_UPDATES = 64_i32
  SQL_CA2_MAX_ROWS_SELECT = 128_i32
  SQL_CA2_MAX_ROWS_INSERT = 256_i32
  SQL_CA2_MAX_ROWS_DELETE = 512_i32
  SQL_CA2_MAX_ROWS_UPDATE = 1024_i32
  SQL_CA2_MAX_ROWS_CATALOG = 2048_i32
  SQL_CA2_CRC_EXACT = 4096_i32
  SQL_CA2_CRC_APPROXIMATE = 8192_i32
  SQL_CA2_SIMULATE_NON_UNIQUE = 16384_i32
  SQL_CA2_SIMULATE_TRY_UNIQUE = 32768_i32
  SQL_CA2_SIMULATE_UNIQUE = 65536_i32
  SQL_OAC_NONE = 0_u32
  SQL_OAC_LEVEL1 = 1_u32
  SQL_OAC_LEVEL2 = 2_u32
  SQL_OSCC_NOT_COMPLIANT = 0_u32
  SQL_OSCC_COMPLIANT = 1_u32
  SQL_OSC_MINIMUM = 0_u32
  SQL_OSC_CORE = 1_u32
  SQL_OSC_EXTENDED = 2_u32
  SQL_CB_NULL = 0_u32
  SQL_CB_NON_NULL = 1_u32
  SQL_SO_FORWARD_ONLY = 1_i32
  SQL_SO_KEYSET_DRIVEN = 2_i32
  SQL_SO_DYNAMIC = 4_i32
  SQL_SO_MIXED = 8_i32
  SQL_SO_STATIC = 16_i32
  SQL_FD_FETCH_RESUME = 64_i32
  SQL_FD_FETCH_BOOKMARK = 128_i32
  SQL_TXN_VERSIONING = 16_i32
  SQL_CN_NONE = 0_u32
  SQL_CN_DIFFERENT = 1_u32
  SQL_CN_ANY = 2_u32
  SQL_NNC_NULL = 0_u32
  SQL_NNC_NON_NULL = 1_u32
  SQL_NC_START = 2_u32
  SQL_NC_END = 4_u32
  SQL_FILE_NOT_SUPPORTED = 0_u32
  SQL_FILE_TABLE = 1_u32
  SQL_FILE_QUALIFIER = 2_u32
  SQL_FILE_CATALOG = 2_u32
  SQL_GD_BLOCK = 4_i32
  SQL_GD_BOUND = 8_i32
  SQL_GD_OUTPUT_PARAMS = 16_i32
  SQL_PS_POSITIONED_DELETE = 1_i32
  SQL_PS_POSITIONED_UPDATE = 2_i32
  SQL_PS_SELECT_FOR_UPDATE = 4_i32
  SQL_GB_NOT_SUPPORTED = 0_u32
  SQL_GB_GROUP_BY_EQUALS_SELECT = 1_u32
  SQL_GB_GROUP_BY_CONTAINS_SELECT = 2_u32
  SQL_GB_NO_RELATION = 3_u32
  SQL_GB_COLLATE = 4_u32
  SQL_OU_DML_STATEMENTS = 1_i32
  SQL_OU_PROCEDURE_INVOCATION = 2_i32
  SQL_OU_TABLE_DEFINITION = 4_i32
  SQL_OU_INDEX_DEFINITION = 8_i32
  SQL_OU_PRIVILEGE_DEFINITION = 16_i32
  SQL_SU_DML_STATEMENTS = 1_i32
  SQL_SU_PROCEDURE_INVOCATION = 2_i32
  SQL_SU_TABLE_DEFINITION = 4_i32
  SQL_SU_INDEX_DEFINITION = 8_i32
  SQL_SU_PRIVILEGE_DEFINITION = 16_i32
  SQL_QU_DML_STATEMENTS = 1_i32
  SQL_QU_PROCEDURE_INVOCATION = 2_i32
  SQL_QU_TABLE_DEFINITION = 4_i32
  SQL_QU_INDEX_DEFINITION = 8_i32
  SQL_QU_PRIVILEGE_DEFINITION = 16_i32
  SQL_CU_DML_STATEMENTS = 1_i32
  SQL_CU_PROCEDURE_INVOCATION = 2_i32
  SQL_CU_TABLE_DEFINITION = 4_i32
  SQL_CU_INDEX_DEFINITION = 8_i32
  SQL_CU_PRIVILEGE_DEFINITION = 16_i32
  SQL_SQ_COMPARISON = 1_i32
  SQL_SQ_EXISTS = 2_i32
  SQL_SQ_IN = 4_i32
  SQL_SQ_QUANTIFIED = 8_i32
  SQL_SQ_CORRELATED_SUBQUERIES = 16_i32
  SQL_U_UNION = 1_i32
  SQL_U_UNION_ALL = 2_i32
  SQL_BP_CLOSE = 1_i32
  SQL_BP_DELETE = 2_i32
  SQL_BP_DROP = 4_i32
  SQL_BP_TRANSACTION = 8_i32
  SQL_BP_UPDATE = 16_i32
  SQL_BP_OTHER_HSTMT = 32_i32
  SQL_BP_SCROLL = 64_i32
  SQL_SS_ADDITIONS = 1_i32
  SQL_SS_DELETIONS = 2_i32
  SQL_SS_UPDATES = 4_i32
  SQL_CV_CREATE_VIEW = 1_i32
  SQL_CV_CHECK_OPTION = 2_i32
  SQL_CV_CASCADED = 4_i32
  SQL_CV_LOCAL = 8_i32
  SQL_LCK_NO_CHANGE = 1_i32
  SQL_LCK_EXCLUSIVE = 2_i32
  SQL_LCK_UNLOCK = 4_i32
  SQL_POS_POSITION = 1_i32
  SQL_POS_REFRESH = 2_i32
  SQL_POS_UPDATE = 4_i32
  SQL_POS_DELETE = 8_i32
  SQL_POS_ADD = 16_i32
  SQL_QL_START = 1_u32
  SQL_QL_END = 2_u32
  SQL_AF_AVG = 1_i32
  SQL_AF_COUNT = 2_i32
  SQL_AF_MAX = 4_i32
  SQL_AF_MIN = 8_i32
  SQL_AF_SUM = 16_i32
  SQL_AF_DISTINCT = 32_i32
  SQL_AF_ALL = 64_i32
  SQL_SC_SQL92_ENTRY = 1_i32
  SQL_SC_FIPS127_2_TRANSITIONAL = 2_i32
  SQL_SC_SQL92_INTERMEDIATE = 4_i32
  SQL_SC_SQL92_FULL = 8_i32
  SQL_DL_SQL92_DATE = 1_i32
  SQL_DL_SQL92_TIME = 2_i32
  SQL_DL_SQL92_TIMESTAMP = 4_i32
  SQL_DL_SQL92_INTERVAL_YEAR = 8_i32
  SQL_DL_SQL92_INTERVAL_MONTH = 16_i32
  SQL_DL_SQL92_INTERVAL_DAY = 32_i32
  SQL_DL_SQL92_INTERVAL_HOUR = 64_i32
  SQL_DL_SQL92_INTERVAL_MINUTE = 128_i32
  SQL_DL_SQL92_INTERVAL_SECOND = 256_i32
  SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512_i32
  SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024_i32
  SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048_i32
  SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096_i32
  SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192_i32
  SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384_i32
  SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768_i32
  SQL_CL_START = 1_u32
  SQL_CL_END = 2_u32
  SQL_BRC_PROCEDURES = 1_u32
  SQL_BRC_EXPLICIT = 2_u32
  SQL_BRC_ROLLED_UP = 4_u32
  SQL_BS_SELECT_EXPLICIT = 1_i32
  SQL_BS_ROW_COUNT_EXPLICIT = 2_i32
  SQL_BS_SELECT_PROC = 4_i32
  SQL_BS_ROW_COUNT_PROC = 8_i32
  SQL_PARC_BATCH = 1_u32
  SQL_PARC_NO_BATCH = 2_u32
  SQL_PAS_BATCH = 1_u32
  SQL_PAS_NO_BATCH = 2_u32
  SQL_PAS_NO_SELECT = 3_u32
  SQL_IK_NONE = 0_i32
  SQL_IK_ASC = 1_i32
  SQL_IK_DESC = 2_i32
  SQL_ISV_ASSERTIONS = 1_i32
  SQL_ISV_CHARACTER_SETS = 2_i32
  SQL_ISV_CHECK_CONSTRAINTS = 4_i32
  SQL_ISV_COLLATIONS = 8_i32
  SQL_ISV_COLUMN_DOMAIN_USAGE = 16_i32
  SQL_ISV_COLUMN_PRIVILEGES = 32_i32
  SQL_ISV_COLUMNS = 64_i32
  SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128_i32
  SQL_ISV_CONSTRAINT_TABLE_USAGE = 256_i32
  SQL_ISV_DOMAIN_CONSTRAINTS = 512_i32
  SQL_ISV_DOMAINS = 1024_i32
  SQL_ISV_KEY_COLUMN_USAGE = 2048_i32
  SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096_i32
  SQL_ISV_SCHEMATA = 8192_i32
  SQL_ISV_SQL_LANGUAGES = 16384_i32
  SQL_ISV_TABLE_CONSTRAINTS = 32768_i32
  SQL_ISV_TABLE_PRIVILEGES = 65536_i32
  SQL_ISV_TABLES = 131072_i32
  SQL_ISV_TRANSLATIONS = 262144_i32
  SQL_ISV_USAGE_PRIVILEGES = 524288_i32
  SQL_ISV_VIEW_COLUMN_USAGE = 1048576_i32
  SQL_ISV_VIEW_TABLE_USAGE = 2097152_i32
  SQL_ISV_VIEWS = 4194304_i32
  SQL_AD_CONSTRAINT_NAME_DEFINITION = 1_i32
  SQL_AD_ADD_DOMAIN_CONSTRAINT = 2_i32
  SQL_AD_DROP_DOMAIN_CONSTRAINT = 4_i32
  SQL_AD_ADD_DOMAIN_DEFAULT = 8_i32
  SQL_AD_DROP_DOMAIN_DEFAULT = 16_i32
  SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32_i32
  SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64_i32
  SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128_i32
  SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256_i32
  SQL_CS_CREATE_SCHEMA = 1_i32
  SQL_CS_AUTHORIZATION = 2_i32
  SQL_CS_DEFAULT_CHARACTER_SET = 4_i32
  SQL_CTR_CREATE_TRANSLATION = 1_i32
  SQL_CA_CREATE_ASSERTION = 1_i32
  SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16_i32
  SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32_i32
  SQL_CA_CONSTRAINT_DEFERRABLE = 64_i32
  SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128_i32
  SQL_CCS_CREATE_CHARACTER_SET = 1_i32
  SQL_CCS_COLLATE_CLAUSE = 2_i32
  SQL_CCS_LIMITED_COLLATION = 4_i32
  SQL_CCOL_CREATE_COLLATION = 1_i32
  SQL_CDO_CREATE_DOMAIN = 1_i32
  SQL_CDO_DEFAULT = 2_i32
  SQL_CDO_CONSTRAINT = 4_i32
  SQL_CDO_COLLATION = 8_i32
  SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16_i32
  SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32_i32
  SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64_i32
  SQL_CDO_CONSTRAINT_DEFERRABLE = 128_i32
  SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256_i32
  SQL_CT_CREATE_TABLE = 1_i32
  SQL_CT_COMMIT_PRESERVE = 2_i32
  SQL_CT_COMMIT_DELETE = 4_i32
  SQL_CT_GLOBAL_TEMPORARY = 8_i32
  SQL_CT_LOCAL_TEMPORARY = 16_i32
  SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32_i32
  SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64_i32
  SQL_CT_CONSTRAINT_DEFERRABLE = 128_i32
  SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256_i32
  SQL_CT_COLUMN_CONSTRAINT = 512_i32
  SQL_CT_COLUMN_DEFAULT = 1024_i32
  SQL_CT_COLUMN_COLLATION = 2048_i32
  SQL_CT_TABLE_CONSTRAINT = 4096_i32
  SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192_i32
  SQL_DI_CREATE_INDEX = 1_i32
  SQL_DI_DROP_INDEX = 2_i32
  SQL_DC_DROP_COLLATION = 1_i32
  SQL_DD_DROP_DOMAIN = 1_i32
  SQL_DD_RESTRICT = 2_i32
  SQL_DD_CASCADE = 4_i32
  SQL_DS_DROP_SCHEMA = 1_i32
  SQL_DS_RESTRICT = 2_i32
  SQL_DS_CASCADE = 4_i32
  SQL_DCS_DROP_CHARACTER_SET = 1_i32
  SQL_DA_DROP_ASSERTION = 1_i32
  SQL_DT_DROP_TABLE = 1_i32
  SQL_DT_RESTRICT = 2_i32
  SQL_DT_CASCADE = 4_i32
  SQL_DTR_DROP_TRANSLATION = 1_i32
  SQL_DV_DROP_VIEW = 1_i32
  SQL_DV_RESTRICT = 2_i32
  SQL_DV_CASCADE = 4_i32
  SQL_IS_INSERT_LITERALS = 1_i32
  SQL_IS_INSERT_SEARCHED = 2_i32
  SQL_IS_SELECT_INTO = 4_i32
  SQL_OIC_CORE = 1_u32
  SQL_OIC_LEVEL1 = 2_u32
  SQL_OIC_LEVEL2 = 3_u32
  SQL_SFKD_CASCADE = 1_i32
  SQL_SFKD_NO_ACTION = 2_i32
  SQL_SFKD_SET_DEFAULT = 4_i32
  SQL_SFKD_SET_NULL = 8_i32
  SQL_SFKU_CASCADE = 1_i32
  SQL_SFKU_NO_ACTION = 2_i32
  SQL_SFKU_SET_DEFAULT = 4_i32
  SQL_SFKU_SET_NULL = 8_i32
  SQL_SG_USAGE_ON_DOMAIN = 1_i32
  SQL_SG_USAGE_ON_CHARACTER_SET = 2_i32
  SQL_SG_USAGE_ON_COLLATION = 4_i32
  SQL_SG_USAGE_ON_TRANSLATION = 8_i32
  SQL_SG_WITH_GRANT_OPTION = 16_i32
  SQL_SG_DELETE_TABLE = 32_i32
  SQL_SG_INSERT_TABLE = 64_i32
  SQL_SG_INSERT_COLUMN = 128_i32
  SQL_SG_REFERENCES_TABLE = 256_i32
  SQL_SG_REFERENCES_COLUMN = 512_i32
  SQL_SG_SELECT_TABLE = 1024_i32
  SQL_SG_UPDATE_TABLE = 2048_i32
  SQL_SG_UPDATE_COLUMN = 4096_i32
  SQL_SP_EXISTS = 1_i32
  SQL_SP_ISNOTNULL = 2_i32
  SQL_SP_ISNULL = 4_i32
  SQL_SP_MATCH_FULL = 8_i32
  SQL_SP_MATCH_PARTIAL = 16_i32
  SQL_SP_MATCH_UNIQUE_FULL = 32_i32
  SQL_SP_MATCH_UNIQUE_PARTIAL = 64_i32
  SQL_SP_OVERLAPS = 128_i32
  SQL_SP_UNIQUE = 256_i32
  SQL_SP_LIKE = 512_i32
  SQL_SP_IN = 1024_i32
  SQL_SP_BETWEEN = 2048_i32
  SQL_SP_COMPARISON = 4096_i32
  SQL_SP_QUANTIFIED_COMPARISON = 8192_i32
  SQL_SRJO_CORRESPONDING_CLAUSE = 1_i32
  SQL_SRJO_CROSS_JOIN = 2_i32
  SQL_SRJO_EXCEPT_JOIN = 4_i32
  SQL_SRJO_FULL_OUTER_JOIN = 8_i32
  SQL_SRJO_INNER_JOIN = 16_i32
  SQL_SRJO_INTERSECT_JOIN = 32_i32
  SQL_SRJO_LEFT_OUTER_JOIN = 64_i32
  SQL_SRJO_NATURAL_JOIN = 128_i32
  SQL_SRJO_RIGHT_OUTER_JOIN = 256_i32
  SQL_SRJO_UNION_JOIN = 512_i32
  SQL_SR_USAGE_ON_DOMAIN = 1_i32
  SQL_SR_USAGE_ON_CHARACTER_SET = 2_i32
  SQL_SR_USAGE_ON_COLLATION = 4_i32
  SQL_SR_USAGE_ON_TRANSLATION = 8_i32
  SQL_SR_GRANT_OPTION_FOR = 16_i32
  SQL_SR_CASCADE = 32_i32
  SQL_SR_RESTRICT = 64_i32
  SQL_SR_DELETE_TABLE = 128_i32
  SQL_SR_INSERT_TABLE = 256_i32
  SQL_SR_INSERT_COLUMN = 512_i32
  SQL_SR_REFERENCES_TABLE = 1024_i32
  SQL_SR_REFERENCES_COLUMN = 2048_i32
  SQL_SR_SELECT_TABLE = 4096_i32
  SQL_SR_UPDATE_TABLE = 8192_i32
  SQL_SR_UPDATE_COLUMN = 16384_i32
  SQL_SRVC_VALUE_EXPRESSION = 1_i32
  SQL_SRVC_NULL = 2_i32
  SQL_SRVC_DEFAULT = 4_i32
  SQL_SRVC_ROW_SUBQUERY = 8_i32
  SQL_SVE_CASE = 1_i32
  SQL_SVE_CAST = 2_i32
  SQL_SVE_COALESCE = 4_i32
  SQL_SVE_NULLIF = 8_i32
  SQL_SCC_XOPEN_CLI_VERSION1 = 1_i32
  SQL_SCC_ISO92_CLI = 2_i32
  SQL_US_UNION = 1_i32
  SQL_US_UNION_ALL = 2_i32
  SQL_DRIVER_AWARE_POOLING_NOT_CAPABLE = 0_i32
  SQL_DRIVER_AWARE_POOLING_CAPABLE = 1_i32
  SQL_DTC_ENLIST_EXPENSIVE = 1_i32
  SQL_DTC_UNENLIST_EXPENSIVE = 2_i32
  SQL_ASYNC_DBC_NOT_CAPABLE = 0_i32
  SQL_ASYNC_DBC_CAPABLE = 1_i32
  SQL_FETCH_FIRST_USER = 31_u32
  SQL_FETCH_FIRST_SYSTEM = 32_u32
  SQL_ENTIRE_ROWSET = 0_u32
  SQL_POSITION = 0_u32
  SQL_REFRESH = 1_u32
  SQL_UPDATE = 2_u32
  SQL_DELETE = 3_u32
  SQL_ADD = 4_u32
  SQL_SETPOS_MAX_OPTION_VALUE = 4_u32
  SQL_UPDATE_BY_BOOKMARK = 5_u32
  SQL_DELETE_BY_BOOKMARK = 6_u32
  SQL_FETCH_BY_BOOKMARK = 7_u32
  SQL_LOCK_NO_CHANGE = 0_u32
  SQL_LOCK_EXCLUSIVE = 1_u32
  SQL_LOCK_UNLOCK = 2_u32
  SQL_SETPOS_MAX_LOCK_VALUE = 2_u32
  SQL_BEST_ROWID = 1_u32
  SQL_ROWVER = 2_u32
  SQL_PC_NOT_PSEUDO = 1_u32
  SQL_QUICK = 0_u32
  SQL_ENSURE = 1_u32
  SQL_TABLE_STAT = 0_u32
  SQL_ALL_CATALOGS = "%"
  SQL_ALL_SCHEMAS = "%"
  SQL_ALL_TABLE_TYPES = "%"
  SQL_DRIVER_NOPROMPT = 0_u32
  SQL_DRIVER_COMPLETE = 1_u32
  SQL_DRIVER_PROMPT = 2_u32
  SQL_DRIVER_COMPLETE_REQUIRED = 3_u32
  SQL_FETCH_BOOKMARK = 8_u32
  SQL_ROW_SUCCESS = 0_u32
  SQL_ROW_DELETED = 1_u32
  SQL_ROW_UPDATED = 2_u32
  SQL_ROW_NOROW = 3_u32
  SQL_ROW_ADDED = 4_u32
  SQL_ROW_ERROR = 5_u32
  SQL_ROW_SUCCESS_WITH_INFO = 6_u32
  SQL_ROW_PROCEED = 0_u32
  SQL_ROW_IGNORE = 1_u32
  SQL_PARAM_SUCCESS = 0_u32
  SQL_PARAM_SUCCESS_WITH_INFO = 6_u32
  SQL_PARAM_ERROR = 5_u32
  SQL_PARAM_UNUSED = 7_u32
  SQL_PARAM_DIAG_UNAVAILABLE = 1_u32
  SQL_PARAM_PROCEED = 0_u32
  SQL_PARAM_IGNORE = 1_u32
  SQL_CASCADE = 0_u32
  SQL_RESTRICT = 1_u32
  SQL_SET_NULL = 2_u32
  SQL_NO_ACTION = 3_u32
  SQL_SET_DEFAULT = 4_u32
  SQL_INITIALLY_DEFERRED = 5_u32
  SQL_INITIALLY_IMMEDIATE = 6_u32
  SQL_NOT_DEFERRABLE = 7_u32
  SQL_PARAM_TYPE_UNKNOWN = 0_u32
  SQL_PARAM_INPUT = 1_u32
  SQL_PARAM_INPUT_OUTPUT = 2_u32
  SQL_RESULT_COL = 3_u32
  SQL_PARAM_OUTPUT = 4_u32
  SQL_RETURN_VALUE = 5_u32
  SQL_PARAM_INPUT_OUTPUT_STREAM = 8_u32
  SQL_PARAM_OUTPUT_STREAM = 16_u32
  SQL_PT_UNKNOWN = 0_u32
  SQL_PT_PROCEDURE = 1_u32
  SQL_PT_FUNCTION = 2_u32
  SQL_ODBC_KEYWORDS = "ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWSSCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE"
  SQL_YEAR = 1_u32
  SQL_MONTH = 2_u32
  SQL_DAY = 3_u32
  SQL_HOUR = 4_u32
  SQL_MINUTE = 5_u32
  SQL_SECOND = 6_u32
  SQL_YEAR_TO_MONTH = 7_u32
  SQL_DAY_TO_HOUR = 8_u32
  SQL_DAY_TO_MINUTE = 9_u32
  SQL_DAY_TO_SECOND = 10_u32
  SQL_HOUR_TO_MINUTE = 11_u32
  SQL_HOUR_TO_SECOND = 12_u32
  SQL_MINUTE_TO_SECOND = 13_u32
  SQL_DATABASE_NAME = 16_u32
  SQL_FD_FETCH_PREV = 8_i32
  SQL_FETCH_PREV = 4_u32
  SQL_CONCUR_TIMESTAMP = 3_u32
  SQL_SCCO_OPT_TIMESTAMP = 4_i32
  SQL_CC_DELETE = 0_u32
  SQL_CR_DELETE = 0_u32
  SQL_CC_CLOSE = 1_u32
  SQL_CR_CLOSE = 1_u32
  SQL_CC_PRESERVE = 2_u32
  SQL_CR_PRESERVE = 2_u32
  SQL_FETCH_RESUME = 7_u32
  SQL_SCROLL_FORWARD_ONLY = 0_i32
  SQL_SCROLL_KEYSET_DRIVEN = -1_i32
  SQL_SCROLL_DYNAMIC = -2_i32
  SQL_SCROLL_STATIC = -3_i32
  TRACE_VERSION = 1000_u32
  TRACE_ON = 1_i32
  TRACE_VS_EVENT_ON = 2_i32
  ODBC_VS_FLAG_UNICODE_ARG = 1_i32
  ODBC_VS_FLAG_UNICODE_COR = 2_i32
  ODBC_VS_FLAG_RETCODE = 4_i32
  ODBC_VS_FLAG_STOP = 8_i32
  CRESTRICTIONS_DBSCHEMA_LINKEDSERVERS = 1_u32
  SSPROP_ENABLEFASTLOAD = 2_u32
  SSPROP_UNICODELCID = 2_u32
  SSPROP_UNICODECOMPARISONSTYLE = 3_u32
  SSPROP_COLUMNLEVELCOLLATION = 4_u32
  SSPROP_CHARACTERSET = 5_u32
  SSPROP_SORTORDER = 6_u32
  SSPROP_CURRENTCOLLATION = 7_u32
  SSPROP_INIT_CURRENTLANGUAGE = 4_u32
  SSPROP_INIT_NETWORKADDRESS = 5_u32
  SSPROP_INIT_NETWORKLIBRARY = 6_u32
  SSPROP_INIT_USEPROCFORPREP = 7_u32
  SSPROP_INIT_AUTOTRANSLATE = 8_u32
  SSPROP_INIT_PACKETSIZE = 9_u32
  SSPROP_INIT_APPNAME = 10_u32
  SSPROP_INIT_WSID = 11_u32
  SSPROP_INIT_FILENAME = 12_u32
  SSPROP_INIT_ENCRYPT = 13_u32
  SSPROP_AUTH_REPL_SERVER_NAME = 14_u32
  SSPROP_INIT_TAGCOLUMNCOLLATION = 15_u32
  SSPROPVAL_USEPROCFORPREP_OFF = 0_u32
  SSPROPVAL_USEPROCFORPREP_ON = 1_u32
  SSPROPVAL_USEPROCFORPREP_ON_DROP = 2_u32
  SSPROP_QUOTEDCATALOGNAMES = 2_u32
  SSPROP_ALLOWNATIVEVARIANT = 3_u32
  SSPROP_SQLXMLXPROGID = 4_u32
  SSPROP_MAXBLOBLENGTH = 8_u32
  SSPROP_FASTLOADOPTIONS = 9_u32
  SSPROP_FASTLOADKEEPNULLS = 10_u32
  SSPROP_FASTLOADKEEPIDENTITY = 11_u32
  SSPROP_CURSORAUTOFETCH = 12_u32
  SSPROP_DEFERPREPARE = 13_u32
  SSPROP_IRowsetFastLoad = 14_u32
  SSPROP_COL_COLLATIONNAME = 14_u32
  SSPROP_STREAM_MAPPINGSCHEMA = 15_u32
  SSPROP_STREAM_XSL = 16_u32
  SSPROP_STREAM_BASEPATH = 17_u32
  SSPROP_STREAM_COMMANDTYPE = 18_u32
  SSPROP_STREAM_XMLROOT = 19_u32
  SSPROP_STREAM_FLAGS = 20_u32
  SSPROP_STREAM_CONTENTTYPE = 23_u32
  STREAM_FLAGS_DISALLOW_URL = 1_u32
  STREAM_FLAGS_DISALLOW_ABSOLUTE_PATH = 2_u32
  STREAM_FLAGS_DISALLOW_QUERY = 4_u32
  STREAM_FLAGS_DONTCACHEMAPPINGSCHEMA = 8_u32
  STREAM_FLAGS_DONTCACHETEMPLATE = 16_u32
  STREAM_FLAGS_DONTCACHEXSL = 32_u32
  STREAM_FLAGS_DISALLOW_UPDATEGRAMS = 64_u32
  STREAM_FLAGS_RESERVED = 4294901760_u32
  SSPROPVAL_COMMANDTYPE_REGULAR = 21_u32
  SSPROPVAL_COMMANDTYPE_BULKLOAD = 22_u32
  DBTYPE_SQLVARIANT = 144_u32
  SQL_HANDLE_DBC_INFO_TOKEN = 6_u32
  SQL_CONN_POOL_RATING_BEST = 100_u32
  SQL_CONN_POOL_RATING_GOOD_ENOUGH = 99_u32
  SQL_CONN_POOL_RATING_USELESS = 0_u32
  SQL_ATTR_DBC_INFO_TOKEN = 118_u32
  SQL_ATTR_ASYNC_DBC_NOTIFICATION_CALLBACK = 120_u32
  SQL_ATTR_ASYNC_DBC_NOTIFICATION_CONTEXT = 121_u32
  SQL_ATTR_ASYNC_STMT_NOTIFICATION_CALLBACK = 30_u32
  SQL_ATTR_ASYNC_STMT_NOTIFICATION_CONTEXT = 31_u32
  SQL_MAX_NUMERIC_LEN = 16_u32
  SQL_WCHAR = -8_i32
  SQL_WVARCHAR = -9_i32
  SQL_WLONGVARCHAR = -10_i32
  SQL_C_WCHAR = -8_i32
  SQL_C_TCHAR = -8_i32
  SQL_SQLSTATE_SIZEW = 10_u32
  CSTORAGEPROPERTY = 23_u32
  CATEGORY_SEARCH = 1_i32
  CATEGORY_COLLATOR = 2_i32
  CATEGORY_GATHERER = 3_i32
  CATEGORY_INDEXER = 4_i32
  EVENT_SSSEARCH_STARTED = 1073742827_i32
  EVENT_SSSEARCH_STARTING_SETUP = 1073742828_i32
  EVENT_SSSEARCH_SETUP_SUCCEEDED = 1073742829_i32
  EVENT_SSSEARCH_SETUP_FAILED = -1073740818_i32
  EVENT_OUTOFMEMORY = -1073740817_i32
  EVENT_SSSEARCH_SETUP_CLEANUP_STARTED = -2147482640_i32
  EVENT_EXCEPTION = -1073740815_i32
  EVENT_SSSEARCH_SETUP_CLEANUP_SUCCEEDED = 1073742834_i32
  EVENT_SSSEARCH_SETUP_CLEANUP_FAILED = -1073740813_i32
  EVENT_SSSEARCH_STOPPED = 1073742837_i32
  EVENT_SSSEARCH_CREATE_PATH_RULES_FAILED = -2147482634_i32
  EVENT_SSSEARCH_DROPPED_EVENTS = -2147482633_i32
  EVENT_SSSEARCH_DATAFILES_MOVE_FAILED = -1073740808_i32
  EVENT_SSSEARCH_DATAFILES_MOVE_SUCCEEDED = 1073742841_i32
  EVENT_SSSEARCH_DATAFILES_MOVE_ROLLBACK_ERRORS = -2147482630_i32
  EVENT_SSSEARCH_CSM_SAVE_FAILED = -1073740805_i32
  EVENT_CONFIG_SYNTAX = -2147482604_i32
  EVENT_UNPRIVILEGED_SERVICE_ACCOUNT = -2147482596_i32
  EVENT_SYSTEM_EXCEPTION = -2147482595_i32
  EVENT_CONFIG_ERROR = -1073738821_i32
  EVENT_GATHERSVC_PERFMON = -1073738818_i32
  EVENT_GATHERER_PERFMON = -1073738817_i32
  EVENT_HASHMAP_INSERT = -1073738816_i32
  EVENT_TRANSLOG_CREATE_TRX = -1073738815_i32
  EVENT_TRANSLOG_APPEND = -1073738814_i32
  EVENT_TRANSLOG_UPDATE = -1073738813_i32
  EVENT_HASHMAP_UPDATE = -1073738811_i32
  EVENT_GATHER_EXCEPTION = -1073738810_i32
  EVENT_TRANSACTION_READ = -1073738809_i32
  EVENT_GATHER_END_CRAWL = 1073744842_i32
  EVENT_GATHER_START_CRAWL = 1073744843_i32
  EVENT_GATHER_INTERNAL = -1073738804_i32
  EVENT_GATHER_CRAWL_NOT_STARTED = -2147480625_i32
  EVENT_GATHER_CRAWL_SEED_ERROR = -2147480624_i32
  EVENT_GATHER_CRITICAL_ERROR = -1073738799_i32
  EVENT_GATHER_ADVISE_FAILED = -1073738798_i32
  EVENT_GATHER_TRANSACTION_FAIL = -1073738797_i32
  EVENT_GATHER_OBJ_INIT_FAILED = -1073738796_i32
  EVENT_GATHER_PLUGIN_INIT_FAILED = -1073738795_i32
  EVENT_GATHER_SERVICE_INIT = -1073738794_i32
  EVENT_GATHER_CANT_CREATE_DOCID = -1073738793_i32
  EVENT_GATHER_CANT_DELETE_DOCID = -1073738792_i32
  EVENT_TRANSLOG_CREATE = -1073738791_i32
  EVENT_REG_VERSION = -1073738790_i32
  EVENT_GATHER_CRAWL_SEED_FAILED = -2147480612_i32
  EVENT_GATHER_CRAWL_SEED_FAILED_INIT = -2147480611_i32
  EVENT_GATHER_REG_MISSING = -2147480610_i32
  EVENT_GATHER_CRAWL_IN_PROGRESS = -2147480609_i32
  EVENT_GATHER_LOCK_FAILED = -1073738784_i32
  EVENT_GATHER_RESET_START = 1073744865_i32
  EVENT_GATHER_START_PAUSE = -2147480606_i32
  EVENT_GATHER_THROTTLE = 1073744867_i32
  EVENT_GATHER_RESUME = 1073744868_i32
  EVENT_GATHER_AUTODESCLEN_ADJUSTED = -2147480603_i32
  EVENT_GATHER_NO_CRAWL_SEEDS = -2147480602_i32
  EVENT_GATHER_END_INCREMENTAL = 1073744871_i32
  EVENT_GATHER_FROM_NOT_SET = -1073738776_i32
  EVENT_GATHER_DELETING_HISTORY_ITEMS = -1073738774_i32
  EVENT_GATHER_STOP_START = 1073744876_i32
  EVENT_GATHER_START_CRAWL_IF_RESET = -2147480595_i32
  EVENT_GATHER_DISK_FULL = -2147480594_i32
  EVENT_GATHER_NO_SCHEMA = -2147480593_i32
  EVENT_GATHER_AUTODESCENCODE_INVALID = -2147480592_i32
  EVENT_GATHER_PLUGINMGR_INIT_FAILED = -1073738767_i32
  EVENT_GATHER_APP_INIT_FAILED = -1073738766_i32
  EVENT_FAILED_INITIALIZE_CRAWL = -1073738765_i32
  EVENT_CRAWL_SCHEDULED = 1073744884_i32
  EVENT_FAILED_CREATE_GATHERER_LOG = -2147480587_i32
  EVENT_WBREAKER_NOT_LOADED = -2147480586_i32
  EVENT_LEARN_PROPAGATION_COPY_FAILED = -2147480585_i32
  EVENT_LEARN_CREATE_DB_FAILED = -2147480584_i32
  EVENT_LEARN_COMPILE_FAILED = -2147480583_i32
  EVENT_LEARN_PROPAGATION_FAILED = -2147480582_i32
  EVENT_GATHER_END_ADAPTIVE = 1073744891_i32
  EVENT_USING_DIFFERENT_WORD_BREAKER = -2147480580_i32
  EVENT_GATHER_RESTORE_COMPLETE = 3069_i32
  EVENT_GATHER_RESTORE_ERROR = -1073738754_i32
  EVENT_AUTOCAT_PERFMON = -1073738753_i32
  EVENT_GATHER_DIRTY_STARTUP = -2147480576_i32
  EVENT_GATHER_HISTORY_CORRUPTION_DETECTED = -2147480575_i32
  EVENT_GATHER_RESTOREAPP_ERROR = -1073738750_i32
  EVENT_GATHER_RESTOREAPP_COMPLETE = 3075_i32
  EVENT_GATHER_BACKUPAPP_ERROR = -1073738748_i32
  EVENT_GATHER_BACKUPAPP_COMPLETE = 3077_i32
  EVENT_GATHER_DAEMON_TERMINATED = -2147480570_i32
  EVENT_NOTIFICATION_FAILURE = -1073738745_i32
  EVENT_NOTIFICATION_FAILURE_SCOPE_EXCEEDED_LOGGING = -2147480568_i32
  EVENT_NOTIFICATION_RESTORED = 1073744905_i32
  EVENT_NOTIFICATION_RESTORED_SCOPE_EXCEEDED_LOGGING = -2147480566_i32
  EVENT_GATHER_PROTOCOLHANDLER_LOAD_FAILED = -1073738741_i32
  EVENT_GATHER_PROTOCOLHANDLER_INIT_FAILED = -1073738740_i32
  EVENT_GATHER_INVALID_NETWORK_ACCESS_ACCOUNT = -1073738739_i32
  EVENT_GATHER_SYSTEM_LCID_CHANGED = -2147480562_i32
  EVENT_GATHER_FLUSH_FAILED = -1073738737_i32
  EVENT_GATHER_CHECKPOINT_FAILED = -1073738736_i32
  EVENT_GATHER_SAVE_FAILED = -1073738735_i32
  EVENT_GATHER_RESTORE_CHECKPOINT_FAILED = -1073738734_i32
  EVENT_GATHER_READ_CHECKPOINT_FAILED = -1073738733_i32
  EVENT_GATHER_CHECKPOINT_CORRUPT = -1073738732_i32
  EVENT_GATHER_CHECKPOINT_FILE_MISSING = -1073738731_i32
  EVENT_STS_INIT_SECURITY_FAILED = -2147480554_i32
  EVENT_LOCAL_GROUP_NOT_EXPANDED = 1073744919_i32
  EVENT_LOCAL_GROUPS_CACHE_FLUSHED = 1073744920_i32
  EVENT_GATHERER_DATASOURCE = -1073738727_i32
  EVENT_AUTOCAT_CANT_CREATE_FILE_SHARE = -1073738726_i32
  EVENT_NOTIFICATION_THREAD_EXIT_FAILED = -1073738725_i32
  EVENT_FILTER_HOST_NOT_INITIALIZED = -1073738724_i32
  EVENT_FILTER_HOST_NOT_TERMINATED = -1073738723_i32
  EVENT_FILTERPOOL_ADD_FAILED = -1073738722_i32
  EVENT_FILTERPOOL_DELETE_FAILED = -1073738721_i32
  EVENT_ENUMERATE_SESSIONS_FAILED = -1073738720_i32
  EVENT_DETAILED_FILTERPOOL_ADD_FAILED = -1073738719_i32
  EVENT_AUDIENCECOMPUTATION_CANNOTSTART = -1073738223_i32
  EVENT_GATHER_RECOVERY_FAILURE = -1073738222_i32
  EVENT_INDEXER_STARTED = 1073748824_i32
  EVENT_INDEXER_SCHEMA_COPY_ERROR = -1073734823_i32
  EVENT_INDEXER_INIT_ERROR = -1073734814_i32
  EVENT_INDEXER_INVALID_DIRECTORY = -1073734813_i32
  EVENT_INDEXER_PROP_ERROR = -1073734812_i32
  EVENT_INDEXER_PAUSED_FOR_DISKFULL = -1073734811_i32
  EVENT_INDEXER_PROP_STOPPED = -2147476633_i32
  EVENT_INDEXER_PROP_SUCCEEDED = 7016_i32
  EVENT_INDEXER_PROP_STARTED = 1073748841_i32
  EVENT_INDEXER_NO_SEARCH_SERVERS = -2147476630_i32
  EVENT_INDEXER_ADD_DSS_SUCCEEDED = 7019_i32
  EVENT_INDEXER_REMOVE_DSS_SUCCEEDED = 7020_i32
  EVENT_INDEXER_ADD_DSS_FAILED = -2147476627_i32
  EVENT_INDEXER_REMOVE_DSS_FAILED = -1073734801_i32
  EVENT_INDEXER_DSS_CONTACT_FAILED = -1073734800_i32
  EVENT_INDEXER_BUILD_FAILED = -1073734797_i32
  EVENT_INDEXER_REG_MISSING = -1073734796_i32
  EVENT_INDEXER_PROPSTORE_INIT_FAILED = -1073734787_i32
  EVENT_INDEXER_CI_LOAD_ERROR = -1073734785_i32
  EVENT_INDEXER_RESET_FOR_CORRUPTION = -1073734784_i32
  EVENT_INDEXER_SHUTDOWN = 1073748866_i32
  EVENT_INDEXER_LOAD_FAIL = -1073734781_i32
  EVENT_INDEXER_PROP_STATE_CORRUPT = -1073734780_i32
  EVENT_INDEXER_DSS_ALREADY_ADDED = 1073748870_i32
  EVENT_INDEXER_BUILD_START = 1073748872_i32
  EVENT_INDEXER_BUILD_ENDED = 1073748873_i32
  EVENT_INDEXER_VERIFY_PROP_ACCOUNT = -1073734768_i32
  EVENT_INDEXER_ADD_DSS_DISCONNECT = -2147476585_i32
  EVENT_INDEXER_PERFMON = -1073734760_i32
  EVENT_INDEXER_MISSING_APP_DIRECTORY = -1073734758_i32
  EVENT_INDEXER_REG_ERROR = -1073734756_i32
  EVENT_INDEXER_DSS_UNABLE_TO_REMOVE = -1073734755_i32
  EVENT_INDEXER_NEW_PROJECT = -1073734754_i32
  EVENT_INDEXER_REMOVED_PROJECT = -1073734753_i32
  EVENT_INDEXER_PROP_COMMITTED = 1073748898_i32
  EVENT_INDEXER_PROP_ABORTED = 1073748899_i32
  EVENT_DSS_NOT_ENABLED = -2147476572_i32
  EVENT_INDEXER_PROP_COMMIT_FAILED = -1073734747_i32
  JET_INIT_ERROR = -1073732824_i32
  JET_NEW_PROP_STORE_ERROR = -1073732823_i32
  JET_GET_PROP_STORE_ERROR = -1073732822_i32
  JET_MULTIINSTANCE_DISABLED = -2147474645_i32
  EVENT_WARNING_CANNOT_UPGRADE_NOISE_FILES = -2147473635_i32
  EVENT_WARNING_CANNOT_UPGRADE_NOISE_FILE = -2147473634_i32
  EVENT_WIN32_ERROR = -2147473633_i32
  EVENT_PERF_COUNTERS_NOT_LOADED = -2147473628_i32
  EVENT_PERF_COUNTERS_REGISTRY_TROUBLE = -2147473627_i32
  EVENT_PERF_COUNTERS_ALREADY_EXISTS = -2147473626_i32
  EVENT_PROTOCOL_HOST_FORCE_TERMINATE = -2147473625_i32
  EVENT_FILTER_HOST_FORCE_TERMINATE = -2147473624_i32
  EVENT_INDEXER_OUT_OF_DATABASE_INSTANCE = -1073731799_i32
  EVENT_INDEXER_FAIL_TO_SET_MAX_JETINSTANCE = -1073731798_i32
  EVENT_INDEXER_FAIL_TO_CREATE_PER_USER_CATALOG = -1073731797_i32
  EVENT_INDEXER_FAIL_TO_UNLOAD_PER_USER_CATALOG = -1073731796_i32
  ERROR_SOURCE_NETWORKING = 768_u32
  ERROR_SOURCE_DATASOURCE = 1024_u32
  ERROR_SOURCE_COLLATOR = 1280_u32
  ERROR_SOURCE_CONNMGR = 1536_u32
  ERROR_SOURCE_QUERY = 1792_u32
  ERROR_SOURCE_SCHEMA = 3072_u32
  ERROR_SOURCE_GATHERER = 3328_u32
  ERROR_SOURCE_INDEXER = 4352_u32
  ERROR_SOURCE_SETUP = 4864_u32
  ERROR_SOURCE_SECURITY = 5120_u32
  ERROR_SOURCE_CMDLINE = 5376_u32
  ERROR_SOURCE_NLADMIN = 6400_u32
  ERROR_SOURCE_SCRIPTPI = 8192_u32
  ERROR_SOURCE_MSS = 8448_u32
  ERROR_SOURCE_XML = 8704_u32
  ERROR_SOURCE_DAV = 8960_u32
  ERROR_SOURCE_FLTRDMN = 9216_u32
  ERROR_SOURCE_OLEDB_BINDER = 9472_u32
  ERROR_SOURCE_NOTESPH = 9728_u32
  ERROR_SOURCE_EXSTOREPH = 9984_u32
  ERROR_SOURCE_SRCH_SCHEMA_CACHE = 13056_u32
  ERROR_SOURCE_CONTENT_SOURCE = 13312_u32
  ERROR_SOURCE_REMOTE_EXSTOREPH = 13568_u32
  ERROR_SOURCE_PEOPLE_IMPORT = 16384_u32
  ERROR_FTE = 13824_u32
  ERROR_FTE_CB = 51968_u32
  ERROR_FTE_FD = 64768_u32
  XML_E_NODEFAULTNS = -2147212800_i32
  XML_E_BADSXQL = -2147212799_i32
  MSS_E_INVALIDAPPNAME = -2147213056_i32
  MSS_E_APPNOTFOUND = -2147213055_i32
  MSS_E_APPALREADYEXISTS = -2147213054_i32
  MSS_E_CATALOGNOTFOUND = -2147213053_i32
  MSS_E_CATALOGSTOPPING = -2147213052_i32
  MSS_E_UNICODEFILEHEADERMISSING = -2147213051_i32
  MSS_E_CATALOGALREADYEXISTS = -2147213050_i32
  NET_E_GENERAL = -2147220736_i32
  NET_E_DISCONNECTED = -2147220733_i32
  NET_E_INVALIDPARAMS = -2147220728_i32
  NET_E_OPERATIONINPROGRESS = -2147220727_i32
  SEC_E_INVALIDCONTEXT = -2147216381_i32
  SEC_E_INITFAILED = -2147216383_i32
  SEC_E_NOTINITIALIZED = -2147216382_i32
  SEC_E_ACCESSDENIED = -2147216129_i32
  DS_E_NOMOREDATA = -2147220480_i32
  DS_E_INVALIDDATASOURCE = -2147220479_i32
  DS_E_DATASOURCENOTAVAILABLE = -2147220478_i32
  DS_E_QUERYCANCELED = -2147220477_i32
  DS_E_UNKNOWNREQUEST = -2147220476_i32
  DS_E_BADREQUEST = -2147220475_i32
  DS_E_SERVERCAPACITY = -2147220474_i32
  DS_E_BADSEQUENCE = -2147220473_i32
  DS_E_MESSAGETOOLONG = -2147220472_i32
  DS_E_SERVERERROR = -2147220471_i32
  DS_E_CONFIGBAD = -2147220470_i32
  DS_E_DATANOTPRESENT = -2147220464_i32
  DS_E_SETSTATUSINPROGRESS = -2147220463_i32
  DS_E_DUPLICATEID = -2147220462_i32
  DS_E_TOOMANYDATASOURCES = -2147220461_i32
  DS_E_REGISTRY = -2147220460_i32
  DS_E_DATASOURCENOTDISABLED = -2147220459_i32
  DS_E_INVALIDTAGDB = -2147220458_i32
  DS_E_INVALIDCATALOGNAME = -2147220457_i32
  DS_E_CONFIGNOTRIGHTTYPE = -2147220456_i32
  DS_E_PROTOCOLVERSION = -2147220455_i32
  DS_E_ALREADYENABLED = -2147220454_i32
  DS_E_INDEXDIRECTORY = -2147220452_i32
  DS_E_VALUETOOLARGE = -2147220451_i32
  DS_E_UNKNOWNPARAM = -2147220450_i32
  DS_E_BUFFERTOOSMALL = -2147220449_i32
  DS_E_PARAMOUTOFRANGE = -2147220448_i32
  DS_E_ALREADYDISABLED = -2147220447_i32
  DS_E_QUERYHUNG = -2147220446_i32
  DS_E_BADRESULT = -2147220445_i32
  DS_E_CANNOTWRITEREGISTRY = -2147220444_i32
  DS_E_CANNOTREMOVECONCURRENT = -2147220443_i32
  DS_E_SEARCHCATNAMECOLLISION = -2147220442_i32
  DS_E_PROPVERSIONMISMATCH = -2147220441_i32
  DS_E_MISSINGCATALOG = -2147220440_i32
  COLL_E_BADSEQUENCE = -2147220223_i32
  COLL_E_NOMOREDATA = -2147220222_i32
  COLL_E_INCOMPATIBLECOLUMNS = -2147220221_i32
  COLL_E_BUFFERTOOSMALL = -2147220220_i32
  COLL_E_BADRESULT = -2147220218_i32
  COLL_E_NOSORTCOLUMN = -2147220217_i32
  COLL_E_DUPLICATEDBID = -2147220216_i32
  COLL_E_TOOMANYMERGECOLUMNS = -2147220215_i32
  COLL_E_NODEFAULTCATALOG = -2147220214_i32
  COLL_E_MAXCONNEXCEEDED = -2147220213_i32
  CM_E_TOOMANYDATASERVERS = -2147219967_i32
  CM_E_TOOMANYDATASOURCES = -2147219966_i32
  CM_E_NOQUERYCONNECTIONS = -2147219965_i32
  CM_E_DATASOURCENOTAVAILABLE = -2147219964_i32
  CM_E_CONNECTIONTIMEOUT = -2147219963_i32
  CM_E_SERVERNOTFOUND = -2147219962_i32
  CM_S_NODATASERVERS = 263687_i32
  CM_E_REGISTRY = -2147219960_i32
  CM_E_INVALIDDATASOURCE = -2147219959_i32
  CM_E_TIMEOUT = -2147219958_i32
  CM_E_INSUFFICIENTBUFFER = -2147219957_i32
  QRY_E_QUERYSYNTAX = -2147219711_i32
  QRY_E_TYPEMISMATCH = -2147219710_i32
  QRY_E_UNHANDLEDTYPE = -2147219709_i32
  QRY_S_NOROWSFOUND = 263940_i32
  QRY_E_TOOMANYCOLUMNS = -2147219707_i32
  QRY_E_TOOMANYDATABASES = -2147219706_i32
  QRY_E_STARTHITTOBIG = -2147219705_i32
  QRY_E_TOOMANYQUERYTERMS = -2147219704_i32
  QRY_E_NODATASOURCES = -2147219703_i32
  QRY_E_TIMEOUT = -2147219702_i32
  QRY_E_COLUMNNOTSORTABLE = -2147219701_i32
  QRY_E_COLUMNNOTSEARCHABLE = -2147219700_i32
  QRY_E_INVALIDCOLUMN = -2147219699_i32
  QRY_E_QUERYCORRUPT = -2147219698_i32
  QRY_E_PREFIXWILDCARD = -2147219697_i32
  QRY_E_INFIXWILDCARD = -2147219696_i32
  QRY_E_WILDCARDPREFIXLENGTH = -2147219695_i32
  QRY_S_TERMIGNORED = 263954_i32
  QRY_E_ENGINEFAILED = -2147219693_i32
  QRY_E_SEARCHTOOBIG = -2147219692_i32
  QRY_E_NULLQUERY = -2147219691_i32
  QRY_S_INEXACTRESULTS = 263958_i32
  QRY_E_NOCOLUMNS = -2147219689_i32
  QRY_E_INVALIDSCOPES = -2147219688_i32
  QRY_E_INVALIDCATALOG = -2147219687_i32
  QRY_E_SCOPECARDINALIDY = -2147219686_i32
  QRY_E_UNEXPECTED = -2147219685_i32
  QRY_E_INVALIDPATH = -2147219684_i32
  QRY_E_LMNOTINITIALIZED = -2147219683_i32
  QRY_E_INVALIDINTERVAL = -2147219682_i32
  QRY_E_NOLOGMANAGER = -2147219681_i32
  SCHEMA_E_LOAD_SPECIAL = -2147218431_i32
  SCHEMA_E_FILENOTFOUND = -2147218430_i32
  SCHEMA_E_NESTEDTAG = -2147218429_i32
  SCHEMA_E_UNEXPECTEDTAG = -2147218428_i32
  SCHEMA_E_VERSIONMISMATCH = -2147218427_i32
  SCHEMA_E_CANNOTCREATEFILE = -2147218426_i32
  SCHEMA_E_CANNOTWRITEFILE = -2147218425_i32
  SCHEMA_E_EMPTYFILE = -2147218424_i32
  SCHEMA_E_INVALIDFILETYPE = -2147218423_i32
  SCHEMA_E_INVALIDDATATYPE = -2147218422_i32
  SCHEMA_E_CANNOTCREATENOISEWORDFILE = -2147218421_i32
  SCHEMA_E_ADDSTOPWORDS = -2147218420_i32
  SCHEMA_E_NAMEEXISTS = -2147218419_i32
  SCHEMA_E_INVALIDVALUE = -2147218418_i32
  SCHEMA_E_BADPROPSPEC = -2147218417_i32
  SCHEMA_E_NOMORECOLUMNS = -2147218416_i32
  SCHEMA_E_FILECHANGED = -2147218415_i32
  SCHEMA_E_BADCOLUMNNAME = -2147218414_i32
  SCHEMA_E_BADPROPPID = -2147218413_i32
  SCHEMA_E_BADATTRIBUTE = -2147218412_i32
  SCHEMA_E_BADFILENAME = -2147218411_i32
  SCHEMA_E_PROPEXISTS = -2147218410_i32
  SCHEMA_E_DUPLICATENOISE = -2147218409_i32
  GTHR_E_DUPLICATE_OBJECT = -2147218174_i32
  GTHR_E_UNABLE_TO_READ_REGISTRY = -2147218173_i32
  GTHR_E_ERROR_WRITING_REGISTRY = -2147218172_i32
  GTHR_E_ERROR_INITIALIZING_PERFMON = -2147218171_i32
  GTHR_E_ERROR_OBJECT_NOT_FOUND = -2147218170_i32
  GTHR_E_URL_EXCLUDED = -2147218169_i32
  GTHR_E_CONFIG_DUP_PROJECT = -2147218166_i32
  GTHR_E_CONFIG_DUP_EXTENSION = -2147218165_i32
  GTHR_E_DUPLICATE_URL = -2147218163_i32
  GTHR_E_TOO_MANY_PLUGINS = -2147218162_i32
  GTHR_E_INVALIDFUNCTION = -2147218161_i32
  GTHR_E_NOFILTERSINK = -2147218160_i32
  GTHR_E_FILTER_PROCESS_TERMINATED = -2147218159_i32
  GTHR_E_FILTER_INVALID_MESSAGE = -2147218158_i32
  GTHR_E_UNSUPPORTED_PROPERTY_TYPE = -2147218157_i32
  GTHR_E_NAME_TOO_LONG = -2147218156_i32
  GTHR_E_NO_IDENTITY = -2147218155_i32
  GTHR_E_FILTER_NOT_FOUND = -2147218154_i32
  GTHR_E_FILTER_NO_MORE_THREADS = -2147218153_i32
  GTHR_E_PRT_HNDLR_PROGID_MISSING = -2147218152_i32
  GTHR_E_FILTER_PROCESS_TERMINATED_QUOTA = -2147218151_i32
  GTHR_E_UNKNOWN_PROTOCOL = -2147218150_i32
  GTHR_E_PROJECT_NOT_INITIALIZED = -2147218149_i32
  GTHR_S_STATUS_CHANGE_IGNORED = 265500_i32
  GTHR_S_STATUS_END_CRAWL = 265501_i32
  GTHR_S_STATUS_RESET = 265502_i32
  GTHR_S_STATUS_THROTTLE = 265503_i32
  GTHR_S_STATUS_RESUME = 265504_i32
  GTHR_S_STATUS_PAUSE = 265505_i32
  GTHR_E_INVALID_PROJECT_NAME = -2147218142_i32
  GTHR_E_SHUTTING_DOWN = -2147218141_i32
  GTHR_S_END_STD_CHUNKS = 265508_i32
  GTHR_E_VALUE_NOT_AVAILABLE = -2147218139_i32
  GTHR_E_OUT_OF_DOC_ID = -2147218138_i32
  GTHR_E_NOTIFICATION_START_PAGE = -2147218137_i32
  GTHR_E_DUP_PROPERTY_MAPPING = -2147218134_i32
  GTHR_S_NO_CRAWL_SEEDS = 265515_i32
  GTHR_E_INVALID_ACCOUNT = -2147218132_i32
  GTHR_E_FILTER_INIT = -2147218130_i32
  GTHR_E_INVALID_ACCOUNT_SYNTAX = -2147218129_i32
  GTHR_S_CANNOT_FILTER = 265520_i32
  GTHR_E_PROXY_NAME = -2147218127_i32
  GTHR_E_SERVER_UNAVAILABLE = -2147218126_i32
  GTHR_S_STATUS_STOP = 265523_i32
  GTHR_E_INVALID_PATH = -2147218124_i32
  GTHR_E_FILTER_NO_CODEPAGE = -2147218123_i32
  GTHR_S_STATUS_START = 265526_i32
  GTHR_E_NO_PRTCLHNLR = -2147218121_i32
  GTHR_E_IE_OFFLINE = -2147218120_i32
  GTHR_E_BAD_FILTER_DAEMON = -2147218119_i32
  GTHR_E_INVALID_MAPPING = -2147218112_i32
  GTHR_E_USER_AGENT_NOT_SPECIFIED = -2147218111_i32
  GTHR_E_FROM_NOT_SPECIFIED = -2147218109_i32
  GTHR_E_INVALID_STREAM_LOGS_COUNT = -2147218108_i32
  GTHR_E_INVALID_EXTENSION = -2147218107_i32
  GTHR_E_INVALID_GROW_FACTOR = -2147218106_i32
  GTHR_E_INVALID_TIME_OUT = -2147218105_i32
  GTHR_E_INVALID_RETRIES = -2147218104_i32
  GTHR_E_INVALID_LOG_FILE_NAME = -2147218103_i32
  GTHR_E_INVALID_HOST_NAME = -2147218096_i32
  GTHR_E_INVALID_START_PAGE = -2147218095_i32
  GTHR_E_DUPLICATE_PROJECT = -2147218094_i32
  GTHR_E_INVALID_DIRECTORY = -2147218093_i32
  GTHR_E_FILTER_INTERRUPTED = -2147218092_i32
  GTHR_E_INVALID_PROXY_PORT = -2147218091_i32
  GTHR_S_CONFIG_HAS_ACCOUNTS = 265558_i32
  GTHR_E_SECRET_NOT_FOUND = -2147218089_i32
  GTHR_E_INVALID_PATH_EXPRESSION = -2147218088_i32
  GTHR_E_INVALID_START_PAGE_HOST = -2147218087_i32
  GTHR_E_INVALID_START_PAGE_PATH = -2147218080_i32
  GTHR_E_APPLICATION_NOT_FOUND = -2147218079_i32
  GTHR_E_CANNOT_REMOVE_PLUGINMGR = -2147218078_i32
  GTHR_E_INVALID_APPLICATION_NAME = -2147218077_i32
  GTHR_E_FILTER_FAULT = -2147218075_i32
  GTHR_E_NON_FIXED_DRIVE = -2147218074_i32
  GTHR_S_PROB_NOT_MODIFIED = 265575_i32
  GTHR_S_CRAWL_SCHEDULED = 265576_i32
  GTHR_S_TRANSACTION_IGNORED = 265577_i32
  GTHR_S_START_FILTER_FROM_PROTOCOL = 265578_i32
  GTHR_E_FILTER_SINGLE_THREADED = -2147218069_i32
  GTHR_S_BAD_FILE_LINK = 265580_i32
  GTHR_E_URL_UNIDENTIFIED = -2147218067_i32
  GTHR_S_NOT_ALL_PARTS = 265582_i32
  GTHR_E_FORCE_NOTIFICATION_RESET = -2147218065_i32
  GTHR_S_END_PROCESS_LOOP_NOTIFY_QUEUE = 265584_i32
  GTHR_S_START_FILTER_FROM_BODY = 265585_i32
  GTHR_E_CONTENT_ID_CONFLICT = -2147218062_i32
  GTHR_E_UNABLE_TO_READ_EXCHANGE_STORE = -2147218061_i32
  GTHR_E_RECOVERABLE_EXOLEDB_ERROR = -2147218060_i32
  GTHR_E_INVALID_CALL_FROM_WBREAKER = -2147218058_i32
  GTHR_E_PROPERTY_LIST_NOT_INITIALIZED = -2147218057_i32
  GTHR_S_MODIFIED_PARTS = 265592_i32
  GHTR_E_LOCAL_SERVER_UNAVAILABLE = -2147218055_i32
  GTHR_E_SCHEMA_ERRORS_OCCURRED = -2147218054_i32
  GTHR_E_TIMEOUT = -2147218053_i32
  GTHR_S_CRAWL_FULL = 265603_i32
  GTHR_S_CRAWL_INCREMENTAL = 265604_i32
  GTHR_S_CRAWL_ADAPTIVE = 265605_i32
  GTHR_E_NOTIFICATION_START_ADDRESS_INVALID = -2147218042_i32
  GTHR_E_NOTIFICATION_TYPE_NOT_SUPPORTED = -2147218041_i32
  GTHR_E_NOTIFICATION_FILE_SHARE_INFO_NOT_AVAILABLE = -2147218040_i32
  GTHR_E_NOTIFICATION_LOCAL_PATH_MUST_USE_FIXED_DRIVE = -2147218039_i32
  GHTR_E_INSUFFICIENT_DISK_SPACE = -2147218037_i32
  GTHR_E_INVALID_RESOURCE_ID = -2147218035_i32
  GTHR_E_NESTED_HIERARCHICAL_START_ADDRESSES = -2147218034_i32
  GTHR_S_NO_INDEX = 265616_i32
  GTHR_S_PAUSE_REASON_EXTERNAL = 265618_i32
  GTHR_S_PAUSE_REASON_UPGRADING = 265619_i32
  GTHR_S_PAUSE_REASON_BACKOFF = 265620_i32
  GTHR_E_RETRY = -2147218027_i32
  GTHR_E_JET_BACKUP_ERROR = -2147218026_i32
  GTHR_E_JET_RESTORE_ERROR = -2147218025_i32
  GTHR_S_OFFICE_CHILD = 265626_i32
  GTHR_E_PLUGIN_NOT_REGISTERED = -2147218021_i32
  GTHR_E_NOTIF_ACCESS_TOKEN_UPDATED = -2147218020_i32
  GTHR_E_DIRMON_NOT_INITIALZED = -2147218019_i32
  GTHR_E_NOTIF_BEING_REMOVED = -2147218018_i32
  GTHR_E_NOTIF_EXCESSIVE_THROUGHPUT = -2147218017_i32
  GTHR_E_INVALID_PATH_SPEC = -2147218016_i32
  GTHR_E_INSUFFICIENT_FEATURE_TERMS = -2147218015_i32
  GTHR_E_INSUFFICIENT_EXAMPLE_CATEGORIES = -2147218014_i32
  GTHR_E_INSUFFICIENT_EXAMPLE_DOCUMENTS = -2147218013_i32
  GTHR_E_AUTOCAT_UNEXPECTED = -2147218012_i32
  GTHR_E_SINGLE_THREADED_EMBEDDING = -2147218011_i32
  GTHR_S_CANNOT_WORDBREAK = 265638_i32
  GTHR_S_USE_MIME_FILTER = 265639_i32
  GTHR_E_FOLDER_CRAWLED_BY_ANOTHER_WORKSPACE = -2147218007_i32
  GTHR_E_EMPTY_DACL = -2147218006_i32
  GTHR_E_OBJECT_NOT_VALID = -2147218005_i32
  GTHR_E_CANNOT_ENABLE_CHECKPOINT = -2147218002_i32
  GTHR_E_SCOPES_EXCEEDED = -2147218001_i32
  GTHR_E_PROPERTIES_EXCEEDED = -2147218000_i32
  GTHR_E_INVALID_START_ADDRESS = -2147217998_i32
  GTHR_S_PAUSE_REASON_PROFILE_IMPORT = 265651_i32
  GTHR_E_PIPE_NOT_CONNECTTED = -2147217996_i32
  GTHR_E_BACKUP_VALIDATION_FAIL = -2147217994_i32
  GTHR_E_BAD_FILTER_HOST = -2147217993_i32
  GTHR_E_NTF_CLIENT_NOT_SUBSCRIBED = -1073476167_i32
  GTHR_E_FILTERPOOL_NOTFOUND = -2147217990_i32
  GTHR_E_ADDLINKS_FAILED_WILL_RETRY_PARENT = -2147217989_i32
  IDX_E_INVALIDTAG = -2147217151_i32
  IDX_E_METAFILE_CORRUPT = -2147217150_i32
  IDX_E_TOO_MANY_SEARCH_SERVERS = -2147217149_i32
  IDX_E_SEARCH_SERVER_ALREADY_EXISTS = -2147217148_i32
  IDX_E_BUILD_IN_PROGRESS = -2147217147_i32
  IDX_E_IDXLSTFILE_CORRUPT = -2147217146_i32
  IDX_E_REGISTRY_ENTRY = -2147217145_i32
  IDX_E_OBJECT_NOT_FOUND = -2147217144_i32
  IDX_E_SEARCH_SERVER_NOT_FOUND = -2147217143_i32
  IDX_E_WB_NOTFOUND = -2147217142_i32
  IDX_E_NOISELIST_NOTFOUND = -2147217141_i32
  IDX_E_STEMMER_NOTFOUND = -2147217140_i32
  IDX_E_PROP_STOPPED = -2147217139_i32
  IDX_E_DISKFULL = -2147217138_i32
  IDX_E_INVALID_INDEX = -2147217137_i32
  IDX_E_CORRUPT_INDEX = -2147217136_i32
  IDX_E_PROPSTORE_INIT_FAILED = -2147217134_i32
  IDX_E_PROP_STATE_CORRUPT = -2147217133_i32
  IDX_S_NO_BUILD_IN_PROGRESS = 266516_i32
  IDX_S_SEARCH_SERVER_ALREADY_EXISTS = 266517_i32
  IDX_S_SEARCH_SERVER_DOES_NOT_EXIST = 266518_i32
  IDX_E_NOT_LOADED = -2147217129_i32
  IDX_E_PROP_MAJOR_VERSION_MISMATCH = -2147217128_i32
  IDX_E_PROP_MINOR_VERSION_MISMATCH = -2147217127_i32
  IDX_E_DSS_NOT_CONNECTED = -2147217126_i32
  IDX_E_DOCUMENT_ABORTED = -2147217125_i32
  IDX_E_CATALOG_DISMOUNTED = -2147217124_i32
  IDX_S_DSS_NOT_AVAILABLE = 266525_i32
  IDX_E_USE_DEFAULT_CONTENTCLASS = -2147217121_i32
  IDX_E_USE_APPGLOBAL_PROPTABLE = -2147217120_i32
  JPS_E_JET_ERR = -2147217025_i32
  JPS_S_DUPLICATE_DOC_DETECTED = 266624_i32
  JPS_E_CATALOG_DECSRIPTION_MISSING = -2147217023_i32
  JPS_E_MISSING_INFORMATION = -2147217022_i32
  JPS_E_INSUFFICIENT_VERSION_STORAGE = -2147217021_i32
  JPS_E_INSUFFICIENT_DATABASE_SESSIONS = -2147217020_i32
  JPS_E_INSUFFICIENT_DATABASE_RESOURCES = -2147217019_i32
  JPS_E_SCHEMA_ERROR = -2147217018_i32
  JPS_E_PROPAGATION_FILE = -2147217017_i32
  JPS_E_PROPAGATION_CORRUPTION = -2147217016_i32
  JPS_E_PROPAGATION_VERSION_MISMATCH = -2147217015_i32
  JPS_E_SHARING_VIOLATION = -2147217014_i32
  EXCI_E_NO_CONFIG = -2147216992_i32
  EXCI_E_INVALID_SERVER_CONFIG = -2147216991_i32
  EXCI_E_ACCESS_DENIED = -2147216990_i32
  EXCI_E_INVALID_EXCHANGE_SERVER = -2147216989_i32
  EXCI_E_BADCONFIG_OR_ACCESSDENIED = -2147216988_i32
  EXCI_E_WRONG_SERVER_OR_ACCT = -2147216987_i32
  EXCI_E_NOT_ADMIN_OR_WRONG_SITE = -2147216986_i32
  EXCI_E_NO_MAPI = -2147216985_i32
  EXCI_E_INVALID_ACCOUNT_INFO = -2147216984_i32
  PRTH_E_INTERNAL_ERROR = -2147216892_i32
  PRTH_S_MAX_GROWTH = 266761_i32
  PRTH_E_WININET = -2147216886_i32
  PRTH_E_RETRY = -2147216885_i32
  PRTH_S_MAX_DOWNLOAD = 266764_i32
  PRTH_E_MIME_EXCLUDED = -2147216883_i32
  PRTH_E_CANT_TRANSFORM_EXTERNAL_ACL = -2147216882_i32
  PRTH_E_CANT_TRANSFORM_DENIED_ACE = -2147216881_i32
  PRTH_E_NO_PROPERTY = -2147216877_i32
  PRTH_S_USE_ROSEBUD = 266772_i32
  PRTH_E_DATABASE_OPEN_ERROR = -2147216875_i32
  PRTH_E_OPLOCK_BROKEN = -2147216874_i32
  PRTH_E_LOAD_FAILED = -2147216873_i32
  PRTH_E_INIT_FAILED = -2147216872_i32
  PRTH_E_VOLUME_MOUNT_POINT = -2147216871_i32
  PRTH_E_TRUNCATED = -2147216870_i32
  GTHR_E_LOCAL_GROUPS_EXPANSION_INTERNAL_ERROR = -2147216867_i32
  PRTH_E_HTTPS_CERTIFICATE_ERROR = -2147216861_i32
  PRTH_E_HTTPS_REQUIRE_CERTIFICATE = -2147216860_i32
  PRTH_S_TRY_IMPERSONATING = 266789_i32
  CMDLINE_E_UNEXPECTED = -2147216127_i32
  CMDLINE_E_PAREN = -2147216126_i32
  CMDLINE_E_PARAM_SIZE = -2147216125_i32
  CMDLINE_E_NOT_INIT = -2147216124_i32
  CMDLINE_E_ALREADY_INIT = -2147216123_i32
  CMDLINE_E_NUM_PARAMS = -2147216122_i32
  NLADMIN_E_DUPLICATE_CATALOG = -2147215103_i32
  NLADMIN_S_NOT_ALL_BUILD_CATALOGS_INITIALIZED = 268546_i32
  NLADMIN_E_FAILED_TO_GIVE_ACCOUNT_PRIVILEGE = -2147215101_i32
  NLADMIN_E_BUILD_CATALOG_NOT_INITIALIZED = -2147215100_i32
  SCRIPTPI_E_CHUNK_NOT_TEXT = -2147213312_i32
  SCRIPTPI_E_PID_NOT_NAME = -2147213311_i32
  SCRIPTPI_E_PID_NOT_NUMERIC = -2147213310_i32
  SCRIPTPI_E_CHUNK_NOT_VALUE = -2147213309_i32
  SCRIPTPI_E_CANNOT_ALTER_CHUNK = -2147213308_i32
  SCRIPTPI_E_ALREADY_COMPLETED = -2147213307_i32
  MAPI_E_NO_SUPPORT_ = -2147221246_i32
  MAPI_E_BAD_CHARWIDTH_ = -2147221245_i32
  MAPI_E_STRING_TOO_LONG_ = -2147221243_i32
  MAPI_E_UNKNOWN_FLAGS_ = -2147221242_i32
  MAPI_E_INVALID_ENTRYID_ = -2147221241_i32
  MAPI_E_INVALID_OBJECT_ = -2147221240_i32
  MAPI_E_OBJECT_CHANGED_ = -2147221239_i32
  MAPI_E_OBJECT_DELETED_ = -2147221238_i32
  MAPI_E_BUSY_ = -2147221237_i32
  MAPI_E_NOT_ENOUGH_DISK_ = -2147221235_i32
  MAPI_E_NOT_ENOUGH_RESOURCES_ = -2147221234_i32
  MAPI_E_NOT_FOUND_ = -2147221233_i32
  MAPI_E_VERSION_ = -2147221232_i32
  MAPI_E_LOGON_FAILED_ = -2147221231_i32
  MAPI_E_SESSION_LIMIT_ = -2147221230_i32
  MAPI_E_USER_CANCEL_ = -2147221229_i32
  MAPI_E_UNABLE_TO_ABORT_ = -2147221228_i32
  MAPI_E_NETWORK_ERROR_ = -2147221227_i32
  MAPI_E_DISK_ERROR_ = -2147221226_i32
  MAPI_E_TOO_COMPLEX_ = -2147221225_i32
  MAPI_E_BAD_COLUMN_ = -2147221224_i32
  MAPI_E_EXTENDED_ERROR_ = -2147221223_i32
  MAPI_E_COMPUTED_ = -2147221222_i32
  MAPI_E_CORRUPT_DATA_ = -2147221221_i32
  MAPI_E_UNCONFIGURED_ = -2147221220_i32
  MAPI_E_FAILONEPROVIDER_ = -2147221219_i32
  MAPI_E_UNKNOWN_CPID_ = -2147221218_i32
  MAPI_E_UNKNOWN_LCID_ = -2147221217_i32
  MAPI_E_PASSWORD_CHANGE_REQUIRED_ = -2147221216_i32
  MAPI_E_PASSWORD_EXPIRED_ = -2147221215_i32
  MAPI_E_INVALID_WORKSTATION_ACCOUNT_ = -2147221214_i32
  MAPI_E_INVALID_ACCESS_TIME_ = -2147221213_i32
  MAPI_E_ACCOUNT_DISABLED_ = -2147221212_i32
  MAPI_E_END_OF_SESSION_ = -2147220992_i32
  MAPI_E_UNKNOWN_ENTRYID_ = -2147220991_i32
  MAPI_E_MISSING_REQUIRED_COLUMN_ = -2147220990_i32
  MAPI_W_NO_SERVICE_ = 262659_i32
  MSG_TEST_MESSAGE = 1074008064_i32
  FLTRDMN_E_UNEXPECTED = -2147212287_i32
  FLTRDMN_E_QI_FILTER_FAILED = -2147212286_i32
  FLTRDMN_E_FILTER_INIT_FAILED = -2147212284_i32
  FLTRDMN_E_ENCRYPTED_DOCUMENT = -2147212283_i32
  FLTRDMN_E_CANNOT_DECRYPT_PASSWORD = -2147212282_i32
  OLEDB_BINDER_CUSTOM_ERROR = -2147212032_i32
  NOTESPH_E_UNEXPECTED_STATE = -2147211775_i32
  NOTESPH_S_IGNORE_ID = 271874_i32
  NOTESPH_E_UNSUPPORTED_CONTENT_FIELD_TYPE = -2147211773_i32
  NOTESPH_E_ITEM_NOT_FOUND = -2147211772_i32
  NOTESPH_E_SERVER_CONFIG = -2147211771_i32
  NOTESPH_E_ATTACHMENTS = -2147211770_i32
  NOTESPH_E_NO_NTID = -2147211769_i32
  NOTESPH_E_DB_ACCESS_DENIED = -2147211768_i32
  NOTESPH_E_NOTESSETUP_ID_MAPPING_ERROR = -2147211767_i32
  NOTESPH_S_LISTKNOWNFIELDS = 271888_i32
  NOTESPH_E_FAIL = -2147211759_i32
  STS_ABORTXMLPARSE = -2147211756_i32
  STS_WS_ERROR = -2147211754_i32
  SPS_WS_ERROR = -2147211753_i32
  EXSTOREPH_E_UNEXPECTED = -2147211519_i32
  CERT_E_NOT_FOUND_OR_NO_PERMISSSION = -2147211263_i32
  SRCH_SCHEMA_CACHE_E_UNEXPECTED = -2147208447_i32
  CONTENT_SOURCE_E_PROPERTY_MAPPING_READ = -2147208191_i32
  CONTENT_SOURCE_E_UNEXPECTED_NULL_POINTER = -2147208190_i32
  CONTENT_SOURCE_E_PROPERTY_MAPPING_BAD_VECTOR_SIZE = -2147208189_i32
  CONTENT_SOURCE_E_CONTENT_CLASS_READ = -2147208188_i32
  CONTENT_SOURCE_E_UNEXPECTED_EXCEPTION = -2147208187_i32
  CONTENT_SOURCE_E_NULL_CONTENT_CLASS_BSTR = -2147208186_i32
  CONTENT_SOURCE_E_CONTENT_SOURCE_COLUMN_TYPE = -2147208185_i32
  CONTENT_SOURCE_E_OUT_OF_RANGE = -2147208184_i32
  CONTENT_SOURCE_E_NULL_URI = -2147208183_i32
  REXSPH_E_INVALID_CALL = -2147207936_i32
  REXSPH_S_REDIRECTED = 275713_i32
  REXSPH_E_REDIRECT_ON_SECURITY_UPDATE = -2147207934_i32
  REXSPH_E_MULTIPLE_REDIRECT = -2147207933_i32
  REXSPH_E_NO_PROPERTY_ON_ROW = -2147207932_i32
  REXSPH_E_TYPE_MISMATCH_ON_READ = -2147207931_i32
  REXSPH_E_UNEXPECTED_DATA_STATUS = -2147207930_i32
  REXSPH_E_UNKNOWN_DATA_TYPE = -2147207929_i32
  REXSPH_E_UNEXPECTED_FILTER_STATE = -2147207928_i32
  REXSPH_E_DUPLICATE_PROPERTY = -2147207927_i32
  PEOPLE_IMPORT_E_DBCONNFAIL = -2147205120_i32
  PEOPLE_IMPORT_NODSDEFINED = -2147205119_i32
  PEOPLE_IMPORT_E_FAILTOGETDSDEF = -2147205118_i32
  PEOPLE_IMPORT_NOMAPPINGDEFINED = -2147205117_i32
  PEOPLE_IMPORT_E_FAILTOGETDSMAPPING = -2147205116_i32
  PEOPLE_IMPORT_E_DATATYPENOTSUPPORTED = -2147205115_i32
  PEOPLE_IMPORT_E_NOCASTINGSUPPORTED = -2147205114_i32
  PEOPLE_IMPORT_E_UPDATE_DIRSYNC_COOKIE = -2147205113_i32
  PEOPLE_IMPORT_E_DIRSYNC_ZERO_COOKIE = -2147205112_i32
  PEOPLE_IMPORT_E_LDAPPATH_TOOLONG = -2147205111_i32
  PEOPLE_IMPORT_E_CANONICALURL_TOOLONG = -2147205110_i32
  PEOPLE_IMPORT_E_USERNAME_NOTRESOLVED = -2147205109_i32
  PEOPLE_IMPORT_E_DC_NOT_AVAILABLE = -2147205108_i32
  PEOPLE_IMPORT_E_DOMAIN_DISCOVER_FAILED = -2147205107_i32
  PEOPLE_IMPORT_E_FAILTOGETLCID = -2147205106_i32
  PEOPLE_IMPORT_E_DOMAIN_REMOVED = -2147205105_i32
  PEOPLE_IMPORT_E_ENUM_ACCESSDENIED = -2147205104_i32
  PEOPLE_IMPORT_E_DIRSYNC_NOTREFRESHED = -2147205103_i32
  FTE_E_SECRET_NOT_FOUND = -2147207678_i32
  FTE_E_PIPE_NOT_CONNECTED = -2147207677_i32
  FTE_E_ADMIN_BLOB_CORRUPT = -2147207676_i32
  FTE_E_FILTER_SINGLE_THREADED = -2147207675_i32
  FTE_E_ERROR_WRITING_REGISTRY = -2147207674_i32
  FTE_E_PROJECT_SHUTDOWN = -2147207673_i32
  FTE_E_PROJECT_NOT_INITALIZED = -2147207672_i32
  FTE_E_PIPE_DATA_CORRUPTED = -2147207671_i32
  FTE_E_URB_TOO_BIG = -2147207664_i32
  FTE_E_INVALID_DOCID = -2147207663_i32
  FTE_E_PAUSE_EXTERNAL = -2147207662_i32
  FTE_E_REJECTED_DUE_TO_PROJECT_STATUS = -2147207661_i32
  FTE_E_FD_DID_NOT_CONNECT = -2147207660_i32
  FTE_E_PROGID_REQUIRED = -2147207658_i32
  FTE_E_STATIC_THREAD_INVALID_ARGUMENTS = -2147207657_i32
  FTE_E_CATALOG_ALREADY_EXISTS = -2147207656_i32
  FTE_S_RESOURCES_STARTING_TO_GET_LOW = 275993_i32
  FTE_E_PATH_TOO_LONG = -2147207654_i32
  FTE_INVALID_ADMIN_CLIENT = -2147207653_i32
  FTE_E_COM_SIGNATURE_VALIDATION = -2147207652_i32
  FTE_E_AFFINITY_MASK = -2147207651_i32
  FTE_E_FD_OWNERSHIP_OBSOLETE = -2147207650_i32
  FTE_E_EXCEEDED_MAX_PLUGINS = -2147207647_i32
  FTE_S_BEYOND_QUOTA = 276002_i32
  FTE_E_DUPLICATE_OBJECT = -2147207644_i32
  FTE_S_REDUNDANT = 276005_i32
  FTE_E_REDUNDANT_TRAN_FAILURE = -2147207642_i32
  FTE_E_DEPENDENT_TRAN_FAILED_TO_PERSIST = -2147207641_i32
  FTE_E_FD_SHUTDOWN = -2147207640_i32
  FTE_E_CATALOG_DOES_NOT_EXIST = -2147207639_i32
  FTE_E_NO_PLUGINS = -2147207638_i32
  FTE_S_STATUS_CHANGE_REQUEST = 276011_i32
  FTE_E_BATCH_ABORTED = -2147207636_i32
  FTE_E_ANOTHER_STATUS_CHANGE_IS_ALREADY_ACTIVE = -2147207635_i32
  FTE_S_RESUME = 276014_i32
  FTE_E_NOT_PROCESSED_DUE_TO_PREVIOUS_ERRORS = -2147207633_i32
  FTE_E_FD_TIMEOUT = -2147207632_i32
  FTE_E_RESOURCE_SHUTDOWN = -2147207631_i32
  FTE_E_INVALID_PROPERTY = -2147207630_i32
  FTE_E_NO_MORE_PROPERTIES = -2147207629_i32
  FTE_E_UNKNOWN_PLUGIN = -2147207628_i32
  FTE_E_LIBRARY_NOT_LOADED = -2147207627_i32
  FTE_E_PERFMON_FULL = -2147207626_i32
  FTE_E_FAILED_TO_CREATE_ACCESSOR = -2147207625_i32
  FTE_E_INVALID_TYPE = -2147207624_i32
  FTE_E_OUT_OF_RANGE = -2147207623_i32
  FTE_E_CORRUPT_PROPERTY_STORE = -2147207622_i32
  FTE_E_PROPERTY_STORE_WORKID_NOTVALID = -2147207621_i32
  FTE_S_PROPERTY_STORE_END_OF_ENUMERATION = 276028_i32
  FTE_E_CORRUPT_GATHERER_HASH_MAP = -2147207619_i32
  FTE_E_KEY_NOT_CACHED = -2147207618_i32
  FTE_E_UPGRADE_INTERFACE_ALREADY_SHUTDOWN = -2147207617_i32
  FTE_E_UPGRADE_INTERFACE_ALREADY_INSTANTIATED = -2147207616_i32
  FTE_E_STACK_CORRUPTED = -2147207615_i32
  FTE_E_INVALID_PROG_ID = -2147207614_i32
  FTE_E_SERIAL_STREAM_CORRUPT = -2147207613_i32
  FTE_E_READONLY_CATALOG = -2147207612_i32
  FTE_E_PERF_NOT_LOADED = -2147207611_i32
  FTE_S_READONLY_CATALOG = 276038_i32
  FTE_E_RETRY_HUGE_DOC = -2147207608_i32
  FTE_E_UNKNOWN_FD_TYPE = -2147207607_i32
  FTE_E_DOC_TOO_HUGE = -2147207606_i32
  FTE_E_DATATYPE_MISALIGNMENT = -2147207605_i32
  FTE_E_ALREADY_INITIALIZED = -2147207604_i32
  FTE_E_FD_USED_TOO_MUCH_MEMORY = -2147207603_i32
  FTE_E_UNEXPECTED_EXIT = -2147207602_i32
  FTE_E_HIGH_MEMORY_PRESSURE = -2147207601_i32
  FTE_E_INVALID_ISOLATE_ERROR_BATCH = -2147207600_i32
  FTE_E_RETRY_SINGLE_DOC_PER_BATCH = -2147207599_i32
  FTE_E_INVALID_PROJECT_ID = -2147207598_i32
  FTE_E_FAILURE_TO_POST_SETCOMPLETION_STATUS = -2147207597_i32
  FTE_E_INVALID_CODEPAGE = -2147207596_i32
  FTE_E_FD_IDLE = -2147207595_i32
  FTE_E_FD_UNRESPONSIVE = -2147207594_i32
  FTE_S_TRY_TO_FLUSH = 276055_i32
  FTE_S_CATALOG_BLOB_MISMATCHED = 276056_i32
  FTE_S_PROPERTY_RESET = 276057_i32
  FTE_E_NO_PROPERTY_STORE = -1073465766_i32
  FTE_E_CB_OUT_OF_MEMORY = -2147169536_i32
  FTE_E_CB_CBID_OUT_OF_BOUND = -2147169535_i32
  FTE_E_CB_NOT_ENOUGH_AVAIL_PHY_MEM = -2147169534_i32
  FTE_E_CB_NOT_ENOUGH_OCC_BUFFER = -2147169533_i32
  FTE_E_CORRUPT_WORDLIST = -2147169532_i32
  FTE_E_FD_NO_IPERSIST_INTERFACE = -2147156736_i32
  FTE_E_FD_IFILTER_INIT_FAILED = -2147156735_i32
  FTE_E_FD_FAILED_TO_LOAD_IFILTER = -2147156734_i32
  FTE_E_FD_DOC_TIMEOUT = -2147156733_i32
  FTE_E_FD_UNEXPECTED_EXIT = -2147156732_i32
  FTE_E_FD_DOC_UNEXPECTED_EXIT = -2147156731_i32
  FTE_E_FD_NOISE_NO_TEXT_FILTER = -2147156730_i32
  FTE_E_FD_NOISE_NO_IPERSISTSTREAM_ON_TEXT_FILTER = -2147156729_i32
  FTE_E_FD_NOISE_TEXT_FILTER_LOAD_FAILED = -2147156728_i32
  FTE_E_FD_NOISE_TEXT_FILTER_INIT_FAILED = -2147156727_i32
  FTE_E_FD_OCCURRENCE_OVERFLOW = -2147156726_i32
  FTE_E_FD_FILTER_CAUSED_SHARING_VIOLATION = -2147156725_i32
  ERROR_SOURCE_PROTHNDLR = 4608_u32
  QUERY_E_ALLNOISE_AND_NO_RELDOC = -2147215859_i32
  QUERY_E_NO_RELDOC = -2147215858_i32
  QUERY_E_ALLNOISE_AND_NO_RELPROP = -2147215857_i32
  QUERY_E_NO_RELPROP = -2147215856_i32
  QUERY_E_REPEATED_RELDOC = -2147215855_i32
  QUERY_E_RELDOC_SYNTAX_NOT_SUPPORTED = -2147215854_i32
  QUERY_E_INVALID_DOCUMENT_IDENTIFIER = -2147215853_i32
  QUERY_E_INCORRECT_VERSION = -2147215852_i32
  QUERY_E_INVALIDSCOPE_COALESCE = -2147215851_i32
  QUERY_E_INVALIDSORT_COALESCE = -2147215850_i32
  QUERY_E_INVALIDCOALESCE = -2147215849_i32
  QUERY_E_UPGRADEINPROGRESS = -2147215848_i32
  QUERY_E_AGGREGATE_NOT_SUPPORTED = -2147215847_i32
  QUERY_E_TOP_LEVEL_IN_GROUP = -2147215846_i32
  QUERY_E_DUPLICATE_RANGE_NAME = -2147215845_i32
  CI_S_NEW_AUXMETADATA = 268329_i32
  CI_E_NO_AUXMETADATA = -2147215318_i32
  CI_S_CLIENT_REQUESTED_ABORT = 268331_i32
  CI_S_RETRY_DOCUMENT = 268332_i32
  CI_E_CORRUPT_FWIDX = -1073473491_i32
  CI_E_DIACRITIC_SETTINGS_DIFFER = -1073473490_i32
  CI_E_INVALID_CATALOG_LIST_VERSION = -2147215313_i32
  CI_S_CATALOG_RESET = 268336_i32
  CI_E_NO_CATALOG_MANAGER = -1073473487_i32
  CI_E_INCONSISTENT_TRANSACTION = -1073473486_i32
  CI_E_PROTECTED_CATALOG_NOT_AVAILABLE = -1073473485_i32
  CI_E_NO_PROTECTED_USER = -1073473484_i32
  CI_E_MULTIPLE_PROTECTED_USERS_UNSUPPORTED = -1073473483_i32
  CI_E_PROTECTED_CATALOG_SID_MISMATCH = -1073473482_i32
  CI_E_PROTECTED_CATALOG_NON_INTERACTIVE_USER = -1073473481_i32
  MSG_CI_MASTER_MERGE_STARTED = 1073745926_i32
  MSG_CI_MASTER_MERGE_COMPLETED = 1073745927_i32
  MSG_CI_MASTER_MERGE_ABORTED = 1073745928_i32
  MSG_CI_MASTER_MERGE_CANT_START = -1073737719_i32
  MSG_CI_MASTER_MERGE_CANT_RESTART = -1073737718_i32
  MSG_CI_MASTER_MERGE_RESTARTED = 1073745945_i32
  MSG_CI_CORRUPT_INDEX_COMPONENT = 1073745962_i32
  MSG_CI_MASTER_MERGE_ABORTED_LOW_DISK = 1073745987_i32
  MSG_CI_MASTER_MERGE_REASON_EXTERNAL = 1073745988_i32
  MSG_CI_MASTER_MERGE_REASON_INDEX_LIMIT = 1073745989_i32
  MSG_CI_MASTER_MERGE_REASON_EXPECTED_DOCS = 1073745990_i32
  MSG_CI_MASTER_MERGE_REASON_NUMBER = 1073745991_i32
  MSG_CI_CREATE_SEVER_ITEM_FAILED = -2147479480_i32
  NOT_N_PARSE_ERROR = 526638_i32
  IDS_MON_DEFAULT_ERROR = 264495_i32
  IDS_MON_ILLEGAL_PASSTHROUGH = 264496_i32
  IDS_MON_PARSE_ERR_1_PARAM = 264497_i32
  IDS_MON_PARSE_ERR_2_PARAM = 264498_i32
  IDS_MON_SEMI_COLON = 264499_i32
  IDS_MON_ORDINAL_OUT_OF_RANGE = 264500_i32
  IDS_MON_VIEW_NOT_DEFINED = 264501_i32
  IDS_MON_COLUMN_NOT_DEFINED = 264502_i32
  IDS_MON_BUILTIN_VIEW = 264503_i32
  IDS_MON_OUT_OF_MEMORY = 264504_i32
  IDS_MON_SELECT_STAR = 264505_i32
  IDS_MON_OR_NOT = 264506_i32
  IDS_MON_CANNOT_CONVERT = 264507_i32
  IDS_MON_OUT_OF_RANGE = 264508_i32
  IDS_MON_RELATIVE_INTERVAL = 264509_i32
  IDS_MON_NOT_COLUMN_OF_VIEW = 264510_i32
  IDS_MON_BUILTIN_PROPERTY = 264511_i32
  IDS_MON_WEIGHT_OUT_OF_RANGE = 264512_i32
  IDS_MON_MATCH_STRING = 264513_i32
  IDS_MON_PROPERTY_NAME_IN_VIEW = 264514_i32
  IDS_MON_VIEW_ALREADY_DEFINED = 264515_i32
  IDS_MON_INVALID_CATALOG = 264516_i32
  IDS_MON_INVALIDSELECT_COALESCE = 264517_i32
  IDS_MON_CANNOT_CAST = 264518_i32
  IDS_MON_DATE_OUT_OF_RANGE = 264519_i32
  IDS_MON_INVALID_IN_GROUP_CLAUSE = 264520_i32
  DBPROPSET_MSDAORA_ROWSET = "e8cc4cbd-fdff-11d0-b865-00a0c9081c1d"
  DBPROPSET_MSDAORA8_ROWSET = "7f06a375-dd6a-43db-b4e0-1fc121e5e62b"
  CLSID_MSDASQL = "c8b522cb-5cf3-11ce-ade5-00aa0044773d"
  CLSID_MSDASQL_ENUMERATOR = "c8b522cd-5cf3-11ce-ade5-00aa0044773d"
  DBPROPSET_PROVIDERDATASOURCEINFO = "497c60e0-7123-11cf-b171-00aa0057599e"
  DBPROPSET_PROVIDERROWSET = "497c60e1-7123-11cf-b171-00aa0057599e"
  DBPROPSET_PROVIDERDBINIT = "497c60e2-7123-11cf-b171-00aa0057599e"
  DBPROPSET_PROVIDERSTMTATTR = "497c60e3-7123-11cf-b171-00aa0057599e"
  DBPROPSET_PROVIDERCONNATTR = "497c60e4-7123-11cf-b171-00aa0057599e"
  CLSID_DataShapeProvider = "3449a1c8-c56c-11d0-ad72-00c04fc29863"
  DBPROPSET_MSDSDBINIT = "55cb91a8-5c7a-11d1-adad-00c04fc29863"
  DBPROPSET_MSDSSESSION = "edf17536-afbf-11d1-8847-0000f879f98c"
  CLSID_MSPersist = "7c07e0d0-4418-11d2-9212-00c04fbbbfb3"
  DBPROPSET_PERSIST = "4d7839a0-5b8e-11d1-a6b3-00a0c9138c66"
  PROGID_MSPersist_W = "MSPersist"
  PROGID_MSPersist_Version_W = "MSPersist.1"
  CLSID_SQLOLEDB = "0c7ff16c-38e3-11d0-97ab-00c04fc2ad98"
  CLSID_SQLOLEDB_ERROR = "c0932c62-38e5-11d0-97ab-00c04fc2ad98"
  CLSID_SQLOLEDB_ENUMERATOR = "dfa22b8e-e68d-11d0-97e4-00c04fc2ad98"
  DBGUID_MSSQLXML = "5d531cb2-e6ed-11d2-b252-00c04f681b71"
  DBGUID_XPATH = "ec2a4293-e898-11d2-b1b7-00c04f680c56"
  DBSCHEMA_LINKEDSERVERS = "9093caf4-2eac-11d1-9809-00c04fc2ad98"
  DBPROPSET_SQLSERVERDATASOURCE = "28efaee4-2d2c-11d1-9807-00c04fc2ad98"
  DBPROPSET_SQLSERVERDATASOURCEINFO = "df10cb94-35f6-11d2-9c54-00c04f7971d3"
  DBPROPSET_SQLSERVERDBINIT = "5cf4ca10-ef21-11d0-97e7-00c04fc2ad98"
  DBPROPSET_SQLSERVERROWSET = "5cf4ca11-ef21-11d0-97e7-00c04fc2ad98"
  DBPROPSET_SQLSERVERSESSION = "28efaee5-2d2c-11d1-9807-00c04fc2ad98"
  DBPROPSET_SQLSERVERCOLUMN = "3b63fb5e-3fbb-11d3-9f29-00c04f8ee9dc"
  DBPROPSET_SQLSERVERSTREAM = "9f79c073-8a6d-4bca-a8a8-c9b79a9b962d"

  CLSID_CSearchManager = LibC::GUID.new(0x7d096c5f_u32, 0xac08_u16, 0x4f1f_u16, StaticArray[0xbe_u8, 0xb7_u8, 0x5c_u8, 0x22_u8, 0xc5_u8, 0x17_u8, 0xce_u8, 0x39_u8])

  CLSID_CSearchRoot = LibC::GUID.new(0x30766bd2_u32, 0xea1c_u16, 0x4f28_u16, StaticArray[0xbf_u8, 0x27_u8, 0xb_u8, 0x44_u8, 0xe2_u8, 0xf6_u8, 0x8d_u8, 0xb7_u8])

  CLSID_CSearchScopeRule = LibC::GUID.new(0xe63de750_u32, 0x3bd7_u16, 0x4be5_u16, StaticArray[0x9c_u8, 0x84_u8, 0x6b_u8, 0x42_u8, 0x81_u8, 0x98_u8, 0x8c_u8, 0x44_u8])

  CLSID_FilterRegistration = LibC::GUID.new(0x9e175b8d_u32, 0xf52a_u16, 0x11d8_u16, StaticArray[0xb9_u8, 0xa5_u8, 0x50_u8, 0x50_u8, 0x54_u8, 0x50_u8, 0x30_u8, 0x30_u8])

  CLSID_QueryParser = LibC::GUID.new(0xb72f8fd8_u32, 0xfab_u16, 0x4dd9_u16, StaticArray[0xbd_u8, 0xbf_u8, 0x24_u8, 0x5a_u8, 0x6c_u8, 0xe1_u8, 0x48_u8, 0x5b_u8])

  CLSID_NegationCondition = LibC::GUID.new(0x8de9c74c_u32, 0x605a_u16, 0x4acd_u16, StaticArray[0xbe_u8, 0xe3_u8, 0x2b_u8, 0x22_u8, 0x2a_u8, 0xa2_u8, 0xd2_u8, 0x3d_u8])

  CLSID_CompoundCondition = LibC::GUID.new(0x116f8d13_u32, 0x101e_u16, 0x4fa5_u16, StaticArray[0x84_u8, 0xd4_u8, 0xff_u8, 0x82_u8, 0x79_u8, 0x38_u8, 0x19_u8, 0x35_u8])

  CLSID_LeafCondition = LibC::GUID.new(0x52f15c89_u32, 0x5a17_u16, 0x48e1_u16, StaticArray[0xbb_u8, 0xcd_u8, 0x46_u8, 0xa3_u8, 0xf8_u8, 0x9c_u8, 0x7c_u8, 0xc2_u8])

  CLSID_ConditionFactory = LibC::GUID.new(0xe03e85b0_u32, 0x7be3_u16, 0x4000_u16, StaticArray[0xba_u8, 0x98_u8, 0x6c_u8, 0x13_u8, 0xde_u8, 0x9f_u8, 0xa4_u8, 0x86_u8])

  CLSID_Interval = LibC::GUID.new(0xd957171f_u32, 0x4bf9_u16, 0x4de2_u16, StaticArray[0xbc_u8, 0xd5_u8, 0xc7_u8, 0xa_u8, 0x7c_u8, 0xa5_u8, 0x58_u8, 0x36_u8])

  CLSID_QueryParserManager = LibC::GUID.new(0x5088b39a_u32, 0x29b4_u16, 0x4d9d_u16, StaticArray[0x82_u8, 0x45_u8, 0x4e_u8, 0xe2_u8, 0x89_u8, 0x22_u8, 0x2f_u8, 0x66_u8])

  CLSID_CSearchLanguageSupport = LibC::GUID.new(0x6a68cc80_u32, 0x4337_u16, 0x4dbc_u16, StaticArray[0xbd_u8, 0x27_u8, 0xfb_u8, 0xfb_u8, 0x10_u8, 0x53_u8, 0x82_u8, 0xb_u8])

  CLSID_SubscriptionMgr = LibC::GUID.new(0xabbe31d0_u32, 0x6dae_u16, 0x11d0_u16, StaticArray[0xbe_u8, 0xca_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x40_u8, 0xbe_u8])

  CLSID_MSDAORA = LibC::GUID.new(0xe8cc4cbe_u32, 0xfdff_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x8_u8, 0x1c_u8, 0x1d_u8])

  CLSID_MSDAORA_ERROR = LibC::GUID.new(0xe8cc4cbf_u32, 0xfdff_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x65_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x8_u8, 0x1c_u8, 0x1d_u8])

  CLSID_MSDAORA8 = LibC::GUID.new(0x7f06a373_u32, 0xdd6a_u16, 0x43db_u16, StaticArray[0xb4_u8, 0xe0_u8, 0x1f_u8, 0xc1_u8, 0x21_u8, 0xe5_u8, 0xe6_u8, 0x2b_u8])

  CLSID_MSDAORA8_ERROR = LibC::GUID.new(0x7f06a374_u32, 0xdd6a_u16, 0x43db_u16, StaticArray[0xb4_u8, 0xe0_u8, 0x1f_u8, 0xc1_u8, 0x21_u8, 0xe5_u8, 0xe6_u8, 0x2b_u8])

  CLSID_DataLinks = LibC::GUID.new(0x2206cdb2_u32, 0x19c1_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xa8_u8, 0x29_u8])

  CLSID_MSDAINITIALIZE = LibC::GUID.new(0x2206cdb0_u32, 0x19c1_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xa8_u8, 0x29_u8])

  CLSID_PDPO = LibC::GUID.new(0xccb4ec60_u32, 0xb9dc_u16, 0x11d1_u16, StaticArray[0xac_u8, 0x80_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0x48_u8, 0x73_u8])

  CLSID_RootBinder = LibC::GUID.new(0xff151822_u32, 0xb0bf_u16, 0x11d1_u16, StaticArray[0xa8_u8, 0xd_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])

  enum DBTYPEENUM
    DBTYPE_EMPTY = 0_i32
    DBTYPE_NULL = 1_i32
    DBTYPE_I2 = 2_i32
    DBTYPE_I4 = 3_i32
    DBTYPE_R4 = 4_i32
    DBTYPE_R8 = 5_i32
    DBTYPE_CY = 6_i32
    DBTYPE_DATE = 7_i32
    DBTYPE_BSTR = 8_i32
    DBTYPE_IDISPATCH = 9_i32
    DBTYPE_ERROR = 10_i32
    DBTYPE_BOOL = 11_i32
    DBTYPE_VARIANT = 12_i32
    DBTYPE_IUNKNOWN = 13_i32
    DBTYPE_DECIMAL = 14_i32
    DBTYPE_UI1 = 17_i32
    DBTYPE_ARRAY = 8192_i32
    DBTYPE_BYREF = 16384_i32
    DBTYPE_I1 = 16_i32
    DBTYPE_UI2 = 18_i32
    DBTYPE_UI4 = 19_i32
    DBTYPE_I8 = 20_i32
    DBTYPE_UI8 = 21_i32
    DBTYPE_GUID = 72_i32
    DBTYPE_VECTOR = 4096_i32
    DBTYPE_RESERVED = 32768_i32
    DBTYPE_BYTES = 128_i32
    DBTYPE_STR = 129_i32
    DBTYPE_WSTR = 130_i32
    DBTYPE_NUMERIC = 131_i32
    DBTYPE_UDT = 132_i32
    DBTYPE_DBDATE = 133_i32
    DBTYPE_DBTIME = 134_i32
    DBTYPE_DBTIMESTAMP = 135_i32
  end
  enum DBTYPEENUM15
    DBTYPE_HCHAPTER = 136_i32
  end
  enum DBTYPEENUM20
    DBTYPE_FILETIME = 64_i32
    DBTYPE_PROPVARIANT = 138_i32
    DBTYPE_VARNUMERIC = 139_i32
  end
  enum DBPARTENUM
    DBPART_INVALID = 0_i32
    DBPART_VALUE = 1_i32
    DBPART_LENGTH = 2_i32
    DBPART_STATUS = 4_i32
  end
  enum DBPARAMIOENUM
    DBPARAMIO_NOTPARAM = 0_i32
    DBPARAMIO_INPUT = 1_i32
    DBPARAMIO_OUTPUT = 2_i32
  end
  enum DBBINDFLAGENUM
    DBBINDFLAG_HTML = 1_i32
  end
  enum DBMEMOWNERENUM
    DBMEMOWNER_CLIENTOWNED = 0_i32
    DBMEMOWNER_PROVIDEROWNED = 1_i32
  end
  enum DBSTATUSENUM
    DBSTATUS_S_OK = 0_i32
    DBSTATUS_E_BADACCESSOR = 1_i32
    DBSTATUS_E_CANTCONVERTVALUE = 2_i32
    DBSTATUS_S_ISNULL = 3_i32
    DBSTATUS_S_TRUNCATED = 4_i32
    DBSTATUS_E_SIGNMISMATCH = 5_i32
    DBSTATUS_E_DATAOVERFLOW = 6_i32
    DBSTATUS_E_CANTCREATE = 7_i32
    DBSTATUS_E_UNAVAILABLE = 8_i32
    DBSTATUS_E_PERMISSIONDENIED = 9_i32
    DBSTATUS_E_INTEGRITYVIOLATION = 10_i32
    DBSTATUS_E_SCHEMAVIOLATION = 11_i32
    DBSTATUS_E_BADSTATUS = 12_i32
    DBSTATUS_S_DEFAULT = 13_i32
  end
  enum DBSTATUSENUM20
    MDSTATUS_S_CELLEMPTY = 14_i32
    DBSTATUS_S_IGNORE = 15_i32
  end
  enum DBSTATUSENUM21
    DBSTATUS_E_DOESNOTEXIST = 16_i32
    DBSTATUS_E_INVALIDURL = 17_i32
    DBSTATUS_E_RESOURCELOCKED = 18_i32
    DBSTATUS_E_RESOURCEEXISTS = 19_i32
    DBSTATUS_E_CANNOTCOMPLETE = 20_i32
    DBSTATUS_E_VOLUMENOTFOUND = 21_i32
    DBSTATUS_E_OUTOFSPACE = 22_i32
    DBSTATUS_S_CANNOTDELETESOURCE = 23_i32
    DBSTATUS_E_READONLY = 24_i32
    DBSTATUS_E_RESOURCEOUTOFSCOPE = 25_i32
    DBSTATUS_S_ALREADYEXISTS = 26_i32
  end
  enum DBBINDURLFLAGENUM
    DBBINDURLFLAG_READ = 1_i32
    DBBINDURLFLAG_WRITE = 2_i32
    DBBINDURLFLAG_READWRITE = 3_i32
    DBBINDURLFLAG_SHARE_DENY_READ = 4_i32
    DBBINDURLFLAG_SHARE_DENY_WRITE = 8_i32
    DBBINDURLFLAG_SHARE_EXCLUSIVE = 12_i32
    DBBINDURLFLAG_SHARE_DENY_NONE = 16_i32
    DBBINDURLFLAG_ASYNCHRONOUS = 4096_i32
    DBBINDURLFLAG_COLLECTION = 8192_i32
    DBBINDURLFLAG_DELAYFETCHSTREAM = 16384_i32
    DBBINDURLFLAG_DELAYFETCHCOLUMNS = 32768_i32
    DBBINDURLFLAG_RECURSIVE = 4194304_i32
    DBBINDURLFLAG_OUTPUT = 8388608_i32
    DBBINDURLFLAG_WAITFORINIT = 16777216_i32
    DBBINDURLFLAG_OPENIFEXISTS = 33554432_i32
    DBBINDURLFLAG_OVERWRITE = 67108864_i32
    DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT = 134217728_i32
  end
  enum DBBINDURLSTATUSENUM
    DBBINDURLSTATUS_S_OK = 0_i32
    DBBINDURLSTATUS_S_DENYNOTSUPPORTED = 1_i32
    DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED = 4_i32
    DBBINDURLSTATUS_S_REDIRECTED = 8_i32
  end
  enum DBSTATUSENUM25
    DBSTATUS_E_CANCELED = 27_i32
    DBSTATUS_E_NOTCOLLECTION = 28_i32
  end
  enum DBROWSTATUSENUM
    DBROWSTATUS_S_OK = 0_i32
    DBROWSTATUS_S_MULTIPLECHANGES = 2_i32
    DBROWSTATUS_S_PENDINGCHANGES = 3_i32
    DBROWSTATUS_E_CANCELED = 4_i32
    DBROWSTATUS_E_CANTRELEASE = 6_i32
    DBROWSTATUS_E_CONCURRENCYVIOLATION = 7_i32
    DBROWSTATUS_E_DELETED = 8_i32
    DBROWSTATUS_E_PENDINGINSERT = 9_i32
    DBROWSTATUS_E_NEWLYINSERTED = 10_i32
    DBROWSTATUS_E_INTEGRITYVIOLATION = 11_i32
    DBROWSTATUS_E_INVALID = 12_i32
    DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 13_i32
    DBROWSTATUS_E_OBJECTOPEN = 14_i32
    DBROWSTATUS_E_OUTOFMEMORY = 15_i32
    DBROWSTATUS_E_PERMISSIONDENIED = 16_i32
    DBROWSTATUS_E_LIMITREACHED = 17_i32
    DBROWSTATUS_E_SCHEMAVIOLATION = 18_i32
    DBROWSTATUS_E_FAIL = 19_i32
  end
  enum DBROWSTATUSENUM20
    DBROWSTATUS_S_NOCHANGE = 20_i32
  end
  enum DBSTATUSENUM26
    DBSTATUS_S_ROWSETCOLUMN = 29_i32
  end
  enum DBCOLUMNFLAGSENUM
    DBCOLUMNFLAGS_ISBOOKMARK = 1_i32
    DBCOLUMNFLAGS_MAYDEFER = 2_i32
    DBCOLUMNFLAGS_WRITE = 4_i32
    DBCOLUMNFLAGS_WRITEUNKNOWN = 8_i32
    DBCOLUMNFLAGS_ISFIXEDLENGTH = 16_i32
    DBCOLUMNFLAGS_ISNULLABLE = 32_i32
    DBCOLUMNFLAGS_MAYBENULL = 64_i32
    DBCOLUMNFLAGS_ISLONG = 128_i32
    DBCOLUMNFLAGS_ISROWID = 256_i32
    DBCOLUMNFLAGS_ISROWVER = 512_i32
    DBCOLUMNFLAGS_CACHEDEFERRED = 4096_i32
  end
  enum DBCOLUMNFLAGSENUM20
    DBCOLUMNFLAGS_SCALEISNEGATIVE = 16384_i32
    DBCOLUMNFLAGS_RESERVED = 32768_i32
  end
  enum DBCOLUMNFLAGS15ENUM
    DBCOLUMNFLAGS_ISCHAPTER = 8192_i32
  end
  enum DBCOLUMNFLAGSENUM21
    DBCOLUMNFLAGS_ISROWURL = 65536_i32
    DBCOLUMNFLAGS_ISDEFAULTSTREAM = 131072_i32
    DBCOLUMNFLAGS_ISCOLLECTION = 262144_i32
  end
  enum DBCOLUMNFLAGSENUM26
    DBCOLUMNFLAGS_ISSTREAM = 524288_i32
    DBCOLUMNFLAGS_ISROWSET = 1048576_i32
    DBCOLUMNFLAGS_ISROW = 2097152_i32
    DBCOLUMNFLAGS_ROWSPECIFICCOLUMN = 4194304_i32
  end
  enum DBTABLESTATISTICSTYPE26
    DBSTAT_HISTOGRAM = 1_i32
    DBSTAT_COLUMN_CARDINALITY = 2_i32
    DBSTAT_TUPLE_CARDINALITY = 4_i32
  end
  enum DBBOOKMARK
    DBBMK_INVALID = 0_i32
    DBBMK_FIRST = 1_i32
    DBBMK_LAST = 2_i32
  end
  enum DBPROPENUM
    DBPROP_ABORTPRESERVE = 2_i32
    DBPROP_ACTIVESESSIONS = 3_i32
    DBPROP_APPENDONLY = 187_i32
    DBPROP_ASYNCTXNABORT = 168_i32
    DBPROP_ASYNCTXNCOMMIT = 4_i32
    DBPROP_AUTH_CACHE_AUTHINFO = 5_i32
    DBPROP_AUTH_ENCRYPT_PASSWORD = 6_i32
    DBPROP_AUTH_INTEGRATED = 7_i32
    DBPROP_AUTH_MASK_PASSWORD = 8_i32
    DBPROP_AUTH_PASSWORD = 9_i32
    DBPROP_AUTH_PERSIST_ENCRYPTED = 10_i32
    DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 11_i32
    DBPROP_AUTH_USERID = 12_i32
    DBPROP_BLOCKINGSTORAGEOBJECTS = 13_i32
    DBPROP_BOOKMARKS = 14_i32
    DBPROP_BOOKMARKSKIPPED = 15_i32
    DBPROP_BOOKMARKTYPE = 16_i32
    DBPROP_BYREFACCESSORS = 120_i32
    DBPROP_CACHEDEFERRED = 17_i32
    DBPROP_CANFETCHBACKWARDS = 18_i32
    DBPROP_CANHOLDROWS = 19_i32
    DBPROP_CANSCROLLBACKWARDS = 21_i32
    DBPROP_CATALOGLOCATION = 22_i32
    DBPROP_CATALOGTERM = 23_i32
    DBPROP_CATALOGUSAGE = 24_i32
    DBPROP_CHANGEINSERTEDROWS = 188_i32
    DBPROP_COL_AUTOINCREMENT = 26_i32
    DBPROP_COL_DEFAULT = 27_i32
    DBPROP_COL_DESCRIPTION = 28_i32
    DBPROP_COL_FIXEDLENGTH = 167_i32
    DBPROP_COL_NULLABLE = 29_i32
    DBPROP_COL_PRIMARYKEY = 30_i32
    DBPROP_COL_UNIQUE = 31_i32
    DBPROP_COLUMNDEFINITION = 32_i32
    DBPROP_COLUMNRESTRICT = 33_i32
    DBPROP_COMMANDTIMEOUT = 34_i32
    DBPROP_COMMITPRESERVE = 35_i32
    DBPROP_CONCATNULLBEHAVIOR = 36_i32
    DBPROP_CURRENTCATALOG = 37_i32
    DBPROP_DATASOURCENAME = 38_i32
    DBPROP_DATASOURCEREADONLY = 39_i32
    DBPROP_DBMSNAME = 40_i32
    DBPROP_DBMSVER = 41_i32
    DBPROP_DEFERRED = 42_i32
    DBPROP_DELAYSTORAGEOBJECTS = 43_i32
    DBPROP_DSOTHREADMODEL = 169_i32
    DBPROP_GROUPBY = 44_i32
    DBPROP_HETEROGENEOUSTABLES = 45_i32
    DBPROP_IAccessor = 121_i32
    DBPROP_IColumnsInfo = 122_i32
    DBPROP_IColumnsRowset = 123_i32
    DBPROP_IConnectionPointContainer = 124_i32
    DBPROP_IConvertType = 194_i32
    DBPROP_IRowset = 126_i32
    DBPROP_IRowsetChange = 127_i32
    DBPROP_IRowsetIdentity = 128_i32
    DBPROP_IRowsetIndex = 159_i32
    DBPROP_IRowsetInfo = 129_i32
    DBPROP_IRowsetLocate = 130_i32
    DBPROP_IRowsetResynch = 132_i32
    DBPROP_IRowsetScroll = 133_i32
    DBPROP_IRowsetUpdate = 134_i32
    DBPROP_ISupportErrorInfo = 135_i32
    DBPROP_ILockBytes = 136_i32
    DBPROP_ISequentialStream = 137_i32
    DBPROP_IStorage = 138_i32
    DBPROP_IStream = 139_i32
    DBPROP_IDENTIFIERCASE = 46_i32
    DBPROP_IMMOBILEROWS = 47_i32
    DBPROP_INDEX_AUTOUPDATE = 48_i32
    DBPROP_INDEX_CLUSTERED = 49_i32
    DBPROP_INDEX_FILLFACTOR = 50_i32
    DBPROP_INDEX_INITIALSIZE = 51_i32
    DBPROP_INDEX_NULLCOLLATION = 52_i32
    DBPROP_INDEX_NULLS = 53_i32
    DBPROP_INDEX_PRIMARYKEY = 54_i32
    DBPROP_INDEX_SORTBOOKMARKS = 55_i32
    DBPROP_INDEX_TEMPINDEX = 163_i32
    DBPROP_INDEX_TYPE = 56_i32
    DBPROP_INDEX_UNIQUE = 57_i32
    DBPROP_INIT_DATASOURCE = 59_i32
    DBPROP_INIT_HWND = 60_i32
    DBPROP_INIT_IMPERSONATION_LEVEL = 61_i32
    DBPROP_INIT_LCID = 186_i32
    DBPROP_INIT_LOCATION = 62_i32
    DBPROP_INIT_MODE = 63_i32
    DBPROP_INIT_PROMPT = 64_i32
    DBPROP_INIT_PROTECTION_LEVEL = 65_i32
    DBPROP_INIT_PROVIDERSTRING = 160_i32
    DBPROP_INIT_TIMEOUT = 66_i32
    DBPROP_LITERALBOOKMARKS = 67_i32
    DBPROP_LITERALIDENTITY = 68_i32
    DBPROP_MAXINDEXSIZE = 70_i32
    DBPROP_MAXOPENROWS = 71_i32
    DBPROP_MAXPENDINGROWS = 72_i32
    DBPROP_MAXROWS = 73_i32
    DBPROP_MAXROWSIZE = 74_i32
    DBPROP_MAXROWSIZEINCLUDESBLOB = 75_i32
    DBPROP_MAXTABLESINSELECT = 76_i32
    DBPROP_MAYWRITECOLUMN = 77_i32
    DBPROP_MEMORYUSAGE = 78_i32
    DBPROP_MULTIPLEPARAMSETS = 191_i32
    DBPROP_MULTIPLERESULTS = 196_i32
    DBPROP_MULTIPLESTORAGEOBJECTS = 80_i32
    DBPROP_MULTITABLEUPDATE = 81_i32
    DBPROP_NOTIFICATIONGRANULARITY = 198_i32
    DBPROP_NOTIFICATIONPHASES = 82_i32
    DBPROP_NOTIFYCOLUMNSET = 171_i32
    DBPROP_NOTIFYROWDELETE = 173_i32
    DBPROP_NOTIFYROWFIRSTCHANGE = 174_i32
    DBPROP_NOTIFYROWINSERT = 175_i32
    DBPROP_NOTIFYROWRESYNCH = 177_i32
    DBPROP_NOTIFYROWSETCHANGED = 211_i32
    DBPROP_NOTIFYROWSETRELEASE = 178_i32
    DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 179_i32
    DBPROP_NOTIFYROWUNDOCHANGE = 180_i32
    DBPROP_NOTIFYROWUNDODELETE = 181_i32
    DBPROP_NOTIFYROWUNDOINSERT = 182_i32
    DBPROP_NOTIFYROWUPDATE = 183_i32
    DBPROP_NULLCOLLATION = 83_i32
    DBPROP_OLEOBJECTS = 84_i32
    DBPROP_ORDERBYCOLUMNSINSELECT = 85_i32
    DBPROP_ORDEREDBOOKMARKS = 86_i32
    DBPROP_OTHERINSERT = 87_i32
    DBPROP_OTHERUPDATEDELETE = 88_i32
    DBPROP_OUTPUTPARAMETERAVAILABILITY = 184_i32
    DBPROP_OWNINSERT = 89_i32
    DBPROP_OWNUPDATEDELETE = 90_i32
    DBPROP_PERSISTENTIDTYPE = 185_i32
    DBPROP_PREPAREABORTBEHAVIOR = 91_i32
    DBPROP_PREPARECOMMITBEHAVIOR = 92_i32
    DBPROP_PROCEDURETERM = 93_i32
    DBPROP_PROVIDERNAME = 96_i32
    DBPROP_PROVIDEROLEDBVER = 97_i32
    DBPROP_PROVIDERVER = 98_i32
    DBPROP_QUICKRESTART = 99_i32
    DBPROP_QUOTEDIDENTIFIERCASE = 100_i32
    DBPROP_REENTRANTEVENTS = 101_i32
    DBPROP_REMOVEDELETED = 102_i32
    DBPROP_REPORTMULTIPLECHANGES = 103_i32
    DBPROP_RETURNPENDINGINSERTS = 189_i32
    DBPROP_ROWRESTRICT = 104_i32
    DBPROP_ROWSETCONVERSIONSONCOMMAND = 192_i32
    DBPROP_ROWTHREADMODEL = 105_i32
    DBPROP_SCHEMATERM = 106_i32
    DBPROP_SCHEMAUSAGE = 107_i32
    DBPROP_SERVERCURSOR = 108_i32
    DBPROP_SESS_AUTOCOMMITISOLEVELS = 190_i32
    DBPROP_SQLSUPPORT = 109_i32
    DBPROP_STRONGIDENTITY = 119_i32
    DBPROP_STRUCTUREDSTORAGE = 111_i32
    DBPROP_SUBQUERIES = 112_i32
    DBPROP_SUPPORTEDTXNDDL = 161_i32
    DBPROP_SUPPORTEDTXNISOLEVELS = 113_i32
    DBPROP_SUPPORTEDTXNISORETAIN = 114_i32
    DBPROP_TABLETERM = 115_i32
    DBPROP_TBL_TEMPTABLE = 140_i32
    DBPROP_TRANSACTEDOBJECT = 116_i32
    DBPROP_UPDATABILITY = 117_i32
    DBPROP_USERNAME = 118_i32
  end
  enum DBPROPENUM15
    DBPROP_FILTERCOMPAREOPS = 209_i32
    DBPROP_FINDCOMPAREOPS = 210_i32
    DBPROP_IChapteredRowset = 202_i32
    DBPROP_IDBAsynchStatus = 203_i32
    DBPROP_IRowsetFind = 204_i32
    DBPROP_IRowsetView = 212_i32
    DBPROP_IViewChapter = 213_i32
    DBPROP_IViewFilter = 214_i32
    DBPROP_IViewRowset = 215_i32
    DBPROP_IViewSort = 216_i32
    DBPROP_INIT_ASYNCH = 200_i32
    DBPROP_MAXOPENCHAPTERS = 199_i32
    DBPROP_MAXORSINFILTER = 205_i32
    DBPROP_MAXSORTCOLUMNS = 206_i32
    DBPROP_ROWSET_ASYNCH = 201_i32
    DBPROP_SORTONINDEX = 207_i32
  end
  enum DBPROPENUM20
    DBPROP_IMultipleResults = 217_i32
    DBPROP_DATASOURCE_TYPE = 251_i32
    MDPROP_AXES = 252_i32
    MDPROP_FLATTENING_SUPPORT = 253_i32
    MDPROP_MDX_JOINCUBES = 254_i32
    MDPROP_NAMED_LEVELS = 255_i32
    MDPROP_RANGEROWSET = 256_i32
    MDPROP_MDX_SLICER = 218_i32
    MDPROP_MDX_CUBEQUALIFICATION = 219_i32
    MDPROP_MDX_OUTERREFERENCE = 220_i32
    MDPROP_MDX_QUERYBYPROPERTY = 221_i32
    MDPROP_MDX_CASESUPPORT = 222_i32
    MDPROP_MDX_STRING_COMPOP = 224_i32
    MDPROP_MDX_DESCFLAGS = 225_i32
    MDPROP_MDX_SET_FUNCTIONS = 226_i32
    MDPROP_MDX_MEMBER_FUNCTIONS = 227_i32
    MDPROP_MDX_NUMERIC_FUNCTIONS = 228_i32
    MDPROP_MDX_FORMULAS = 229_i32
    MDPROP_AGGREGATECELL_UPDATE = 230_i32
    MDPROP_MDX_AGGREGATECELL_UPDATE = 230_i32
    MDPROP_MDX_OBJQUALIFICATION = 261_i32
    MDPROP_MDX_NONMEASURE_EXPRESSIONS = 262_i32
    DBPROP_ACCESSORDER = 231_i32
    DBPROP_BOOKMARKINFO = 232_i32
    DBPROP_INIT_CATALOG = 233_i32
    DBPROP_ROW_BULKOPS = 234_i32
    DBPROP_PROVIDERFRIENDLYNAME = 235_i32
    DBPROP_LOCKMODE = 236_i32
    DBPROP_MULTIPLECONNECTIONS = 237_i32
    DBPROP_UNIQUEROWS = 238_i32
    DBPROP_SERVERDATAONINSERT = 239_i32
    DBPROP_STORAGEFLAGS = 240_i32
    DBPROP_CONNECTIONSTATUS = 244_i32
    DBPROP_ALTERCOLUMN = 245_i32
    DBPROP_COLUMNLCID = 246_i32
    DBPROP_RESETDATASOURCE = 247_i32
    DBPROP_INIT_OLEDBSERVICES = 248_i32
    DBPROP_IRowsetRefresh = 249_i32
    DBPROP_SERVERNAME = 250_i32
    DBPROP_IParentRowset = 257_i32
    DBPROP_HIDDENCOLUMNS = 258_i32
    DBPROP_PROVIDERMEMORY = 259_i32
    DBPROP_CLIENTCURSOR = 260_i32
  end
  enum DBPROPENUM21
    DBPROP_TRUSTEE_USERNAME = 241_i32
    DBPROP_TRUSTEE_AUTHENTICATION = 242_i32
    DBPROP_TRUSTEE_NEWAUTHENTICATION = 243_i32
    DBPROP_IRow = 263_i32
    DBPROP_IRowChange = 264_i32
    DBPROP_IRowSchemaChange = 265_i32
    DBPROP_IGetRow = 266_i32
    DBPROP_IScopedOperations = 267_i32
    DBPROP_IBindResource = 268_i32
    DBPROP_ICreateRow = 269_i32
    DBPROP_INIT_BINDFLAGS = 270_i32
    DBPROP_INIT_LOCKOWNER = 271_i32
    DBPROP_GENERATEURL = 273_i32
    DBPROP_IDBBinderProperties = 274_i32
    DBPROP_IColumnsInfo2 = 275_i32
    DBPROP_IRegisterProvider = 276_i32
    DBPROP_IGetSession = 277_i32
    DBPROP_IGetSourceRow = 278_i32
    DBPROP_IRowsetCurrentIndex = 279_i32
    DBPROP_OPENROWSETSUPPORT = 280_i32
    DBPROP_COL_ISLONG = 281_i32
  end
  enum DBPROPENUM25
    DBPROP_COL_SEED = 282_i32
    DBPROP_COL_INCREMENT = 283_i32
    DBPROP_INIT_GENERALTIMEOUT = 284_i32
    DBPROP_COMSERVICES = 285_i32
  end
  enum DBPROPENUM26
    DBPROP_OUTPUTSTREAM = 286_i32
    DBPROP_OUTPUTENCODING = 287_i32
    DBPROP_TABLESTATISTICS = 288_i32
    DBPROP_SKIPROWCOUNTRESULTS = 291_i32
    DBPROP_IRowsetBookmark = 292_i32
    MDPROP_VISUALMODE = 293_i32
  end
  enum DBPARAMFLAGSENUM
    DBPARAMFLAGS_ISINPUT = 1_i32
    DBPARAMFLAGS_ISOUTPUT = 2_i32
    DBPARAMFLAGS_ISSIGNED = 16_i32
    DBPARAMFLAGS_ISNULLABLE = 64_i32
    DBPARAMFLAGS_ISLONG = 128_i32
  end
  enum DBPARAMFLAGSENUM20
    DBPARAMFLAGS_SCALEISNEGATIVE = 256_i32
  end
  enum DBPROPFLAGSENUM
    DBPROPFLAGS_NOTSUPPORTED = 0_i32
    DBPROPFLAGS_COLUMN = 1_i32
    DBPROPFLAGS_DATASOURCE = 2_i32
    DBPROPFLAGS_DATASOURCECREATE = 4_i32
    DBPROPFLAGS_DATASOURCEINFO = 8_i32
    DBPROPFLAGS_DBINIT = 16_i32
    DBPROPFLAGS_INDEX = 32_i32
    DBPROPFLAGS_ROWSET = 64_i32
    DBPROPFLAGS_TABLE = 128_i32
    DBPROPFLAGS_COLUMNOK = 256_i32
    DBPROPFLAGS_READ = 512_i32
    DBPROPFLAGS_WRITE = 1024_i32
    DBPROPFLAGS_REQUIRED = 2048_i32
    DBPROPFLAGS_SESSION = 4096_i32
  end
  enum DBPROPFLAGSENUM21
    DBPROPFLAGS_TRUSTEE = 8192_i32
  end
  enum DBPROPFLAGSENUM25
    DBPROPFLAGS_VIEW = 16384_i32
  end
  enum DBPROPFLAGSENUM26
    DBPROPFLAGS_STREAM = 32768_i32
  end
  enum DBPROPOPTIONSENUM
    DBPROPOPTIONS_REQUIRED = 0_i32
    DBPROPOPTIONS_SETIFCHEAP = 1_i32
    DBPROPOPTIONS_OPTIONAL = 1_i32
  end
  enum DBPROPSTATUSENUM
    DBPROPSTATUS_OK = 0_i32
    DBPROPSTATUS_NOTSUPPORTED = 1_i32
    DBPROPSTATUS_BADVALUE = 2_i32
    DBPROPSTATUS_BADOPTION = 3_i32
    DBPROPSTATUS_BADCOLUMN = 4_i32
    DBPROPSTATUS_NOTALLSETTABLE = 5_i32
    DBPROPSTATUS_NOTSETTABLE = 6_i32
    DBPROPSTATUS_NOTSET = 7_i32
    DBPROPSTATUS_CONFLICTING = 8_i32
  end
  enum DBPROPSTATUSENUM21
    DBPROPSTATUS_NOTAVAILABLE = 9_i32
  end
  enum DBINDEX_COL_ORDERENUM
    DBINDEX_COL_ORDER_ASC = 0_i32
    DBINDEX_COL_ORDER_DESC = 1_i32
  end
  enum DBCOLUMNDESCFLAGSENUM
    DBCOLUMNDESCFLAGS_TYPENAME = 1_i32
    DBCOLUMNDESCFLAGS_ITYPEINFO = 2_i32
    DBCOLUMNDESCFLAGS_PROPERTIES = 4_i32
    DBCOLUMNDESCFLAGS_CLSID = 8_i32
    DBCOLUMNDESCFLAGS_COLSIZE = 16_i32
    DBCOLUMNDESCFLAGS_DBCID = 32_i32
    DBCOLUMNDESCFLAGS_WTYPE = 64_i32
    DBCOLUMNDESCFLAGS_PRECISION = 128_i32
    DBCOLUMNDESCFLAGS_SCALE = 256_i32
  end
  enum DBEVENTPHASEENUM
    DBEVENTPHASE_OKTODO = 0_i32
    DBEVENTPHASE_ABOUTTODO = 1_i32
    DBEVENTPHASE_SYNCHAFTER = 2_i32
    DBEVENTPHASE_FAILEDTODO = 3_i32
    DBEVENTPHASE_DIDEVENT = 4_i32
  end
  enum DBREASONENUM
    DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0_i32
    DBREASON_ROWSET_RELEASE = 1_i32
    DBREASON_COLUMN_SET = 2_i32
    DBREASON_COLUMN_RECALCULATED = 3_i32
    DBREASON_ROW_ACTIVATE = 4_i32
    DBREASON_ROW_RELEASE = 5_i32
    DBREASON_ROW_DELETE = 6_i32
    DBREASON_ROW_FIRSTCHANGE = 7_i32
    DBREASON_ROW_INSERT = 8_i32
    DBREASON_ROW_RESYNCH = 9_i32
    DBREASON_ROW_UNDOCHANGE = 10_i32
    DBREASON_ROW_UNDOINSERT = 11_i32
    DBREASON_ROW_UNDODELETE = 12_i32
    DBREASON_ROW_UPDATE = 13_i32
    DBREASON_ROWSET_CHANGED = 14_i32
  end
  enum DBREASONENUM15
    DBREASON_ROWPOSITION_CHANGED = 15_i32
    DBREASON_ROWPOSITION_CHAPTERCHANGED = 16_i32
    DBREASON_ROWPOSITION_CLEARED = 17_i32
    DBREASON_ROW_ASYNCHINSERT = 18_i32
  end
  enum DBCOMPAREOPSENUM
    DBCOMPAREOPS_LT = 0_i32
    DBCOMPAREOPS_LE = 1_i32
    DBCOMPAREOPS_EQ = 2_i32
    DBCOMPAREOPS_GE = 3_i32
    DBCOMPAREOPS_GT = 4_i32
    DBCOMPAREOPS_BEGINSWITH = 5_i32
    DBCOMPAREOPS_CONTAINS = 6_i32
    DBCOMPAREOPS_NE = 7_i32
    DBCOMPAREOPS_IGNORE = 8_i32
    DBCOMPAREOPS_CASESENSITIVE = 4096_i32
    DBCOMPAREOPS_CASEINSENSITIVE = 8192_i32
  end
  enum DBCOMPAREOPSENUM20
    DBCOMPAREOPS_NOTBEGINSWITH = 9_i32
    DBCOMPAREOPS_NOTCONTAINS = 10_i32
  end
  enum DBASYNCHOPENUM
    DBASYNCHOP_OPEN = 0_i32
  end
  enum DBASYNCHPHASEENUM
    DBASYNCHPHASE_INITIALIZATION = 0_i32
    DBASYNCHPHASE_POPULATION = 1_i32
    DBASYNCHPHASE_COMPLETE = 2_i32
    DBASYNCHPHASE_CANCELED = 3_i32
  end
  enum DBSORTENUM
    DBSORT_ASCENDING = 0_i32
    DBSORT_DESCENDING = 1_i32
  end
  enum DBCOMMANDPERSISTFLAGENUM
    DBCOMMANDPERSISTFLAG_NOSAVE = 1_i32
  end
  enum DBCOMMANDPERSISTFLAGENUM21
    DBCOMMANDPERSISTFLAG_DEFAULT = 0_i32
    DBCOMMANDPERSISTFLAG_PERSISTVIEW = 2_i32
    DBCOMMANDPERSISTFLAG_PERSISTPROCEDURE = 4_i32
  end
  enum DBCONSTRAINTTYPEENUM
    DBCONSTRAINTTYPE_UNIQUE = 0_i32
    DBCONSTRAINTTYPE_FOREIGNKEY = 1_i32
    DBCONSTRAINTTYPE_PRIMARYKEY = 2_i32
    DBCONSTRAINTTYPE_CHECK = 3_i32
  end
  enum DBUPDELRULEENUM
    DBUPDELRULE_NOACTION = 0_i32
    DBUPDELRULE_CASCADE = 1_i32
    DBUPDELRULE_SETNULL = 2_i32
    DBUPDELRULE_SETDEFAULT = 3_i32
  end
  enum DBMATCHTYPEENUM
    DBMATCHTYPE_FULL = 0_i32
    DBMATCHTYPE_NONE = 1_i32
    DBMATCHTYPE_PARTIAL = 2_i32
  end
  enum DBDEFERRABILITYENUM
    DBDEFERRABILITY_DEFERRED = 1_i32
    DBDEFERRABILITY_DEFERRABLE = 2_i32
  end
  enum DBACCESSORFLAGSENUM
    DBACCESSOR_INVALID = 0_i32
    DBACCESSOR_PASSBYREF = 1_i32
    DBACCESSOR_ROWDATA = 2_i32
    DBACCESSOR_PARAMETERDATA = 4_i32
    DBACCESSOR_OPTIMIZED = 8_i32
    DBACCESSOR_INHERITED = 16_i32
  end
  enum DBBINDSTATUSENUM
    DBBINDSTATUS_OK = 0_i32
    DBBINDSTATUS_BADORDINAL = 1_i32
    DBBINDSTATUS_UNSUPPORTEDCONVERSION = 2_i32
    DBBINDSTATUS_BADBINDINFO = 3_i32
    DBBINDSTATUS_BADSTORAGEFLAGS = 4_i32
    DBBINDSTATUS_NOINTERFACE = 5_i32
    DBBINDSTATUS_MULTIPLESTORAGE = 6_i32
  end
  enum DBCOMPAREENUM
    DBCOMPARE_LT = 0_i32
    DBCOMPARE_EQ = 1_i32
    DBCOMPARE_GT = 2_i32
    DBCOMPARE_NE = 3_i32
    DBCOMPARE_NOTCOMPARABLE = 4_i32
  end
  enum DBPOSITIONFLAGSENUM
    DBPOSITION_OK = 0_i32
    DBPOSITION_NOROW = 1_i32
    DBPOSITION_BOF = 2_i32
    DBPOSITION_EOF = 3_i32
  end
  enum DBPENDINGSTATUSENUM
    DBPENDINGSTATUS_NEW = 1_i32
    DBPENDINGSTATUS_CHANGED = 2_i32
    DBPENDINGSTATUS_DELETED = 4_i32
    DBPENDINGSTATUS_UNCHANGED = 8_i32
    DBPENDINGSTATUS_INVALIDROW = 16_i32
  end
  enum DBSEEKENUM
    DBSEEK_INVALID = 0_i32
    DBSEEK_FIRSTEQ = 1_i32
    DBSEEK_LASTEQ = 2_i32
    DBSEEK_AFTEREQ = 4_i32
    DBSEEK_AFTER = 8_i32
    DBSEEK_BEFOREEQ = 16_i32
    DBSEEK_BEFORE = 32_i32
  end
  enum DBRANGEENUM
    DBRANGE_INCLUSIVESTART = 0_i32
    DBRANGE_INCLUSIVEEND = 0_i32
    DBRANGE_EXCLUSIVESTART = 1_i32
    DBRANGE_EXCLUSIVEEND = 2_i32
    DBRANGE_EXCLUDENULLS = 4_i32
    DBRANGE_PREFIX = 8_i32
    DBRANGE_MATCH = 16_i32
  end
  enum DBRANGEENUM20
    DBRANGE_MATCH_N_SHIFT = 24_i32
    DBRANGE_MATCH_N_MASK = 255_i32
  end
  enum DBRESULTFLAGENUM
    DBRESULTFLAG_DEFAULT = 0_i32
    DBRESULTFLAG_ROWSET = 1_i32
    DBRESULTFLAG_ROW = 2_i32
  end
  enum DBCONVERTFLAGSENUM
    DBCONVERTFLAGS_COLUMN = 0_i32
    DBCONVERTFLAGS_PARAMETER = 1_i32
  end
  enum DBCONVERTFLAGSENUM20
    DBCONVERTFLAGS_ISLONG = 2_i32
    DBCONVERTFLAGS_ISFIXEDLENGTH = 4_i32
    DBCONVERTFLAGS_FROMVARIANT = 8_i32
  end
  enum DBSOURCETYPEENUM
    DBSOURCETYPE_DATASOURCE = 1_i32
    DBSOURCETYPE_ENUMERATOR = 2_i32
  end
  enum DBSOURCETYPEENUM20
    DBSOURCETYPE_DATASOURCE_TDP = 1_i32
    DBSOURCETYPE_DATASOURCE_MDP = 3_i32
  end
  enum DBSOURCETYPEENUM25
    DBSOURCETYPE_BINDER = 4_i32
  end
  enum DBLITERALENUM
    DBLITERAL_INVALID = 0_i32
    DBLITERAL_BINARY_LITERAL = 1_i32
    DBLITERAL_CATALOG_NAME = 2_i32
    DBLITERAL_CATALOG_SEPARATOR = 3_i32
    DBLITERAL_CHAR_LITERAL = 4_i32
    DBLITERAL_COLUMN_ALIAS = 5_i32
    DBLITERAL_COLUMN_NAME = 6_i32
    DBLITERAL_CORRELATION_NAME = 7_i32
    DBLITERAL_CURSOR_NAME = 8_i32
    DBLITERAL_ESCAPE_PERCENT = 9_i32
    DBLITERAL_ESCAPE_UNDERSCORE = 10_i32
    DBLITERAL_INDEX_NAME = 11_i32
    DBLITERAL_LIKE_PERCENT = 12_i32
    DBLITERAL_LIKE_UNDERSCORE = 13_i32
    DBLITERAL_PROCEDURE_NAME = 14_i32
    DBLITERAL_QUOTE = 15_i32
    DBLITERAL_SCHEMA_NAME = 16_i32
    DBLITERAL_TABLE_NAME = 17_i32
    DBLITERAL_TEXT_COMMAND = 18_i32
    DBLITERAL_USER_NAME = 19_i32
    DBLITERAL_VIEW_NAME = 20_i32
  end
  enum DBLITERALENUM20
    DBLITERAL_CUBE_NAME = 21_i32
    DBLITERAL_DIMENSION_NAME = 22_i32
    DBLITERAL_HIERARCHY_NAME = 23_i32
    DBLITERAL_LEVEL_NAME = 24_i32
    DBLITERAL_MEMBER_NAME = 25_i32
    DBLITERAL_PROPERTY_NAME = 26_i32
    DBLITERAL_SCHEMA_SEPARATOR = 27_i32
    DBLITERAL_QUOTE_SUFFIX = 28_i32
  end
  enum DBLITERALENUM21
    DBLITERAL_ESCAPE_PERCENT_SUFFIX = 29_i32
    DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 30_i32
  end
  enum ACCESS_MASKENUM
    PERM_EXCLUSIVE = 512_i32
    PERM_READDESIGN = 1024_i32
    PERM_WRITEDESIGN = 2048_i32
    PERM_WITHGRANT = 4096_i32
    PERM_REFERENCE = 8192_i32
    PERM_CREATE = 16384_i32
    PERM_INSERT = 32768_i32
    PERM_DELETE = 65536_i32
    PERM_READCONTROL = 131072_i32
    PERM_WRITEPERMISSIONS = 262144_i32
    PERM_WRITEOWNER = 524288_i32
    PERM_MAXIMUM_ALLOWED = 33554432_i32
    PERM_ALL = 268435456_i32
    PERM_EXECUTE = 536870912_i32
    PERM_READ = -2147483648_i32
    PERM_UPDATE = 1073741824_i32
    PERM_DROP = 256_i32
  end
  enum DBCOPYFLAGSENUM
    DBCOPY_ASYNC = 256_i32
    DBCOPY_REPLACE_EXISTING = 512_i32
    DBCOPY_ALLOW_EMULATION = 1024_i32
    DBCOPY_NON_RECURSIVE = 2048_i32
    DBCOPY_ATOMIC = 4096_i32
  end
  enum DBMOVEFLAGSENUM
    DBMOVE_REPLACE_EXISTING = 1_i32
    DBMOVE_ASYNC = 256_i32
    DBMOVE_DONT_UPDATE_LINKS = 512_i32
    DBMOVE_ALLOW_EMULATION = 1024_i32
    DBMOVE_ATOMIC = 4096_i32
  end
  enum DBDELETEFLAGSENUM
    DBDELETE_ASYNC = 256_i32
    DBDELETE_ATOMIC = 4096_i32
  end
  enum STRUCTURED_QUERY_SYNTAX
    SQS_NO_SYNTAX = 0_i32
    SQS_ADVANCED_QUERY_SYNTAX = 1_i32
    SQS_NATURAL_QUERY_SYNTAX = 2_i32
  end
  enum STRUCTURED_QUERY_SINGLE_OPTION
    SQSO_SCHEMA = 0_i32
    SQSO_LOCALE_WORD_BREAKING = 1_i32
    SQSO_WORD_BREAKER = 2_i32
    SQSO_NATURAL_SYNTAX = 3_i32
    SQSO_AUTOMATIC_WILDCARD = 4_i32
    SQSO_TRACE_LEVEL = 5_i32
    SQSO_LANGUAGE_KEYWORDS = 6_i32
    SQSO_SYNTAX = 7_i32
    SQSO_TIME_ZONE = 8_i32
    SQSO_IMPLICIT_CONNECTOR = 9_i32
    SQSO_CONNECTOR_CASE = 10_i32
  end
  enum STRUCTURED_QUERY_MULTIOPTION
    SQMO_VIRTUAL_PROPERTY = 0_i32
    SQMO_DEFAULT_PROPERTY = 1_i32
    SQMO_GENERATOR_FOR_TYPE = 2_i32
    SQMO_MAP_PROPERTY = 3_i32
  end
  enum STRUCTURED_QUERY_PARSE_ERROR
    SQPE_NONE = 0_i32
    SQPE_EXTRA_OPENING_PARENTHESIS = 1_i32
    SQPE_EXTRA_CLOSING_PARENTHESIS = 2_i32
    SQPE_IGNORED_MODIFIER = 3_i32
    SQPE_IGNORED_CONNECTOR = 4_i32
    SQPE_IGNORED_KEYWORD = 5_i32
    SQPE_UNHANDLED = 6_i32
  end
  @[Flags]
  enum STRUCTURED_QUERY_RESOLVE_OPTION : UInt32
    SQRO_DEFAULT = 0_u32
    SQRO_DONT_RESOLVE_DATETIME = 1_u32
    SQRO_ALWAYS_ONE_INTERVAL = 2_u32
    SQRO_DONT_SIMPLIFY_CONDITION_TREES = 4_u32
    SQRO_DONT_MAP_RELATIONS = 8_u32
    SQRO_DONT_RESOLVE_RANGES = 16_u32
    SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS = 32_u32
    SQRO_DONT_SPLIT_WORDS = 64_u32
    SQRO_IGNORE_PHRASE_ORDER = 128_u32
    SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES = 256_u32
    SQRO_ADD_ROBUST_ITEM_NAME = 512_u32
  end
  enum CASE_REQUIREMENT
    CASE_REQUIREMENT_ANY = 0_i32
    CASE_REQUIREMENT_UPPER_IF_AQS = 1_i32
  end
  enum INTERVAL_LIMIT_KIND
    ILK_EXPLICIT_INCLUDED = 0_i32
    ILK_EXPLICIT_EXCLUDED = 1_i32
    ILK_NEGATIVE_INFINITY = 2_i32
    ILK_POSITIVE_INFINITY = 3_i32
  end
  enum QUERY_PARSER_MANAGER_OPTION
    QPMO_SCHEMA_BINARY_NAME = 0_i32
    QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH = 1_i32
    QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH = 2_i32
    QPMO_LOCALIZED_SCHEMA_BINARY_PATH = 3_i32
    QPMO_APPEND_LCID_TO_LOCALIZED_PATH = 4_i32
    QPMO_LOCALIZER_SUPPORT = 5_i32
  end
  @[Flags]
  enum CONDITION_CREATION_OPTIONS : UInt32
    CONDITION_CREATION_DEFAULT = 0_u32
    CONDITION_CREATION_NONE = 0_u32
    CONDITION_CREATION_SIMPLIFY = 1_u32
    CONDITION_CREATION_VECTOR_AND = 2_u32
    CONDITION_CREATION_VECTOR_OR = 4_u32
    CONDITION_CREATION_VECTOR_LEAF = 8_u32
    CONDITION_CREATION_USE_CONTENT_LOCALE = 16_u32
  end
  enum NAMED_ENTITY_CERTAINTY
    NEC_LOW = 0_i32
    NEC_MEDIUM = 1_i32
    NEC_HIGH = 2_i32
  end
  enum PROXY_ACCESS
    PROXY_ACCESS_PRECONFIG = 0_i32
    PROXY_ACCESS_DIRECT = 1_i32
    PROXY_ACCESS_PROXY = 2_i32
  end
  enum AUTH_TYPE
    Eauth_type_anonymous = 0_i32
    Eauth_type_ntlm = 1_i32
    Eauth_type_basic = 2_i32
  end
  enum FOLLOW_FLAGS
    FF_INDEXCOMPLEXURLS = 1_i32
    FF_SUPPRESSINDEXING = 2_i32
  end
  enum CLUSION_REASON
    CLUSIONREASON_UNKNOWNSCOPE = 0_i32
    CLUSIONREASON_DEFAULT = 1_i32
    CLUSIONREASON_USER = 2_i32
    CLUSIONREASON_GROUPPOLICY = 3_i32
  end
  enum SEARCH_KIND_OF_CHANGE
    SEARCH_CHANGE_ADD = 0_i32
    SEARCH_CHANGE_DELETE = 1_i32
    SEARCH_CHANGE_MODIFY = 2_i32
    SEARCH_CHANGE_MOVE_RENAME = 3_i32
    SEARCH_CHANGE_SEMANTICS_DIRECTORY = 262144_i32
    SEARCH_CHANGE_SEMANTICS_SHALLOW = 524288_i32
    SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY = 4194304_i32
  end
  enum SEARCH_NOTIFICATION_PRIORITY
    SEARCH_NORMAL_PRIORITY = 0_i32
    SEARCH_HIGH_PRIORITY = 1_i32
  end
  enum SEARCH_INDEXING_PHASE
    SEARCH_INDEXING_PHASE_GATHERER = 0_i32
    SEARCH_INDEXING_PHASE_QUERYABLE = 1_i32
    SEARCH_INDEXING_PHASE_PERSISTED = 2_i32
  end
  enum CatalogStatus
    CATALOG_STATUS_IDLE = 0_i32
    CATALOG_STATUS_PAUSED = 1_i32
    CATALOG_STATUS_RECOVERING = 2_i32
    CATALOG_STATUS_FULL_CRAWL = 3_i32
    CATALOG_STATUS_INCREMENTAL_CRAWL = 4_i32
    CATALOG_STATUS_PROCESSING_NOTIFICATIONS = 5_i32
    CATALOG_STATUS_SHUTTING_DOWN = 6_i32
  end
  enum CatalogPausedReason
    CATALOG_PAUSED_REASON_NONE = 0_i32
    CATALOG_PAUSED_REASON_HIGH_IO = 1_i32
    CATALOG_PAUSED_REASON_HIGH_CPU = 2_i32
    CATALOG_PAUSED_REASON_HIGH_NTF_RATE = 3_i32
    CATALOG_PAUSED_REASON_LOW_BATTERY = 4_i32
    CATALOG_PAUSED_REASON_LOW_MEMORY = 5_i32
    CATALOG_PAUSED_REASON_LOW_DISK = 6_i32
    CATALOG_PAUSED_REASON_DELAYED_RECOVERY = 7_i32
    CATALOG_PAUSED_REASON_USER_ACTIVE = 8_i32
    CATALOG_PAUSED_REASON_EXTERNAL = 9_i32
    CATALOG_PAUSED_REASON_UPGRADING = 10_i32
  end
  enum PRIORITIZE_FLAGS
    PRIORITIZE_FLAG_RETRYFAILEDITEMS = 1_i32
    PRIORITIZE_FLAG_IGNOREFAILURECOUNT = 2_i32
  end
  enum SEARCH_TERM_EXPANSION
    SEARCH_TERM_NO_EXPANSION = 0_i32
    SEARCH_TERM_PREFIX_ALL = 1_i32
    SEARCH_TERM_STEM_ALL = 2_i32
  end
  enum SEARCH_QUERY_SYNTAX
    SEARCH_NO_QUERY_SYNTAX = 0_i32
    SEARCH_ADVANCED_QUERY_SYNTAX = 1_i32
    SEARCH_NATURAL_QUERY_SYNTAX = 2_i32
  end
  enum PRIORITY_LEVEL
    PRIORITY_LEVEL_FOREGROUND = 0_i32
    PRIORITY_LEVEL_HIGH = 1_i32
    PRIORITY_LEVEL_LOW = 2_i32
    PRIORITY_LEVEL_DEFAULT = 3_i32
  end
  enum ROWSETEVENT_ITEMSTATE
    ROWSETEVENT_ITEMSTATE_NOTINROWSET = 0_i32
    ROWSETEVENT_ITEMSTATE_INROWSET = 1_i32
    ROWSETEVENT_ITEMSTATE_UNKNOWN = 2_i32
  end
  enum ROWSETEVENT_TYPE
    ROWSETEVENT_TYPE_DATAEXPIRED = 0_i32
    ROWSETEVENT_TYPE_FOREGROUNDLOST = 1_i32
    ROWSETEVENT_TYPE_SCOPESTATISTICS = 2_i32
  end
  enum SUBSCRIPTIONTYPE
    SUBSTYPE_URL = 0_i32
    SUBSTYPE_CHANNEL = 1_i32
    SUBSTYPE_DESKTOPURL = 2_i32
    SUBSTYPE_EXTERNAL = 3_i32
    SUBSTYPE_DESKTOPCHANNEL = 4_i32
  end
  enum SUBSCRIPTIONINFOFLAGS
    SUBSINFO_SCHEDULE = 1_i32
    SUBSINFO_RECURSE = 2_i32
    SUBSINFO_WEBCRAWL = 4_i32
    SUBSINFO_MAILNOT = 8_i32
    SUBSINFO_MAXSIZEKB = 16_i32
    SUBSINFO_USER = 32_i32
    SUBSINFO_PASSWORD = 64_i32
    SUBSINFO_TASKFLAGS = 256_i32
    SUBSINFO_GLEAM = 512_i32
    SUBSINFO_CHANGESONLY = 1024_i32
    SUBSINFO_CHANNELFLAGS = 2048_i32
    SUBSINFO_FRIENDLYNAME = 8192_i32
    SUBSINFO_NEEDPASSWORD = 16384_i32
    SUBSINFO_TYPE = 32768_i32
  end
  enum CREATESUBSCRIPTIONFLAGS
    CREATESUBS_ADDTOFAVORITES = 1_i32
    CREATESUBS_FROMFAVORITES = 2_i32
    CREATESUBS_NOUI = 4_i32
    CREATESUBS_NOSAVE = 8_i32
    CREATESUBS_SOFTWAREUPDATE = 16_i32
  end
  enum SUBSCRIPTIONSCHEDULE
    SUBSSCHED_AUTO = 0_i32
    SUBSSCHED_DAILY = 1_i32
    SUBSSCHED_WEEKLY = 2_i32
    SUBSSCHED_CUSTOM = 3_i32
    SUBSSCHED_MANUAL = 4_i32
  end
  enum DELIVERY_AGENT_FLAGS
    DELIVERY_AGENT_FLAG_NO_BROADCAST = 4_i32
    DELIVERY_AGENT_FLAG_NO_RESTRICTIONS = 8_i32
    DELIVERY_AGENT_FLAG_SILENT_DIAL = 16_i32
  end
  enum WEBCRAWL_RECURSEFLAGS
    WEBCRAWL_DONT_MAKE_STICKY = 1_i32
    WEBCRAWL_GET_IMAGES = 2_i32
    WEBCRAWL_GET_VIDEOS = 4_i32
    WEBCRAWL_GET_BGSOUNDS = 8_i32
    WEBCRAWL_GET_CONTROLS = 16_i32
    WEBCRAWL_LINKS_ELSEWHERE = 32_i32
    WEBCRAWL_IGNORE_ROBOTSTXT = 128_i32
    WEBCRAWL_ONLY_LINKS_TO_HTML = 256_i32
  end
  enum CHANNEL_AGENT_FLAGS
    CHANNEL_AGENT_DYNAMIC_SCHEDULE = 1_i32
    CHANNEL_AGENT_PRECACHE_SOME = 2_i32
    CHANNEL_AGENT_PRECACHE_ALL = 4_i32
    CHANNEL_AGENT_PRECACHE_SCRNSAVER = 8_i32
  end
  enum DBDATACONVERTENUM
    DBDATACONVERT_DEFAULT = 0_i32
    DBDATACONVERT_SETDATABEHAVIOR = 1_i32
    DBDATACONVERT_LENGTHFROMNTS = 2_i32
    DBDATACONVERT_DSTISFIXEDLENGTH = 4_i32
    DBDATACONVERT_DECIMALSCALE = 8_i32
  end
  enum DCINFOTYPEENUM
    DCINFOTYPE_VERSION = 1_i32
  end
  enum OSPFORMAT
    OSPFORMAT_RAW = 0_i32
    OSPFORMAT_DEFAULT = 0_i32
    OSPFORMAT_FORMATTED = 1_i32
    OSPFORMAT_HTML = 2_i32
  end
  enum OSPRW
    OSPRW_DEFAULT = 1_i32
    OSPRW_READONLY = 0_i32
    OSPRW_READWRITE = 1_i32
    OSPRW_MIXED = 2_i32
  end
  enum OSPFIND
    OSPFIND_DEFAULT = 0_i32
    OSPFIND_UP = 1_i32
    OSPFIND_CASESENSITIVE = 2_i32
    OSPFIND_UPCASESENSITIVE = 3_i32
  end
  enum OSPCOMP
    OSPCOMP_EQ = 1_i32
    OSPCOMP_DEFAULT = 1_i32
    OSPCOMP_LT = 2_i32
    OSPCOMP_LE = 3_i32
    OSPCOMP_GE = 4_i32
    OSPCOMP_GT = 5_i32
    OSPCOMP_NE = 6_i32
  end
  enum OSPXFER
    OSPXFER_COMPLETE = 0_i32
    OSPXFER_ABORT = 1_i32
    OSPXFER_ERROR = 2_i32
  end
  enum EBindInfoOptions
    BIO_BINDER = 1_i32
  end
  enum DBPROMPTOPTIONSENUM
    DBPROMPTOPTIONS_NONE = 0_i32
    DBPROMPTOPTIONS_WIZARDSHEET = 1_i32
    DBPROMPTOPTIONS_PROPERTYSHEET = 2_i32
    DBPROMPTOPTIONS_BROWSEONLY = 8_i32
    DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION = 16_i32
    DBPROMPTOPTIONS_DISABLESAVEPASSWORD = 32_i32
  end
  enum KAGREQDIAGFLAGSENUM
    KAGREQDIAGFLAGS_HEADER = 1_i32
    KAGREQDIAGFLAGS_RECORD = 2_i32
  end
  enum MSDSDBINITPROPENUM
    DBPROP_MSDS_DBINIT_DATAPROVIDER = 2_i32
  end
  enum MSDSSESSIONPROPENUM
    DBPROP_MSDS_SESS_UNIQUENAMES = 2_i32
  end
  enum SQLINTERVAL
    SQL_IS_YEAR = 1_i32
    SQL_IS_MONTH = 2_i32
    SQL_IS_DAY = 3_i32
    SQL_IS_HOUR = 4_i32
    SQL_IS_MINUTE = 5_i32
    SQL_IS_SECOND = 6_i32
    SQL_IS_YEAR_TO_MONTH = 7_i32
    SQL_IS_DAY_TO_HOUR = 8_i32
    SQL_IS_DAY_TO_MINUTE = 9_i32
    SQL_IS_DAY_TO_SECOND = 10_i32
    SQL_IS_HOUR_TO_MINUTE = 11_i32
    SQL_IS_HOUR_TO_SECOND = 12_i32
    SQL_IS_MINUTE_TO_SECOND = 13_i32
  end
  enum DBPROPENUM25_DEPRECATED
    DBPROP_ICommandCost = 141_i32
    DBPROP_ICommandTree = 142_i32
    DBPROP_ICommandValidate = 143_i32
    DBPROP_IDBSchemaCommand = 144_i32
    DBPROP_IProvideMoniker = 125_i32
    DBPROP_IQuery = 146_i32
    DBPROP_IReadData = 147_i32
    DBPROP_IRowsetAsynch = 148_i32
    DBPROP_IRowsetCopyRows = 149_i32
    DBPROP_IRowsetKeys = 151_i32
    DBPROP_IRowsetNewRowAfter = 152_i32
    DBPROP_IRowsetNextRowset = 153_i32
    DBPROP_IRowsetWatchAll = 155_i32
    DBPROP_IRowsetWatchNotify = 156_i32
    DBPROP_IRowsetWatchRegion = 157_i32
    DBPROP_IRowsetWithParameters = 158_i32
  end
  enum DBREASONENUM25
    DBREASON_ROWSET_ROWSADDED = 19_i32
    DBREASON_ROWSET_POPULATIONCOMPLETE = 20_i32
    DBREASON_ROWSET_POPULATIONSTOPPED = 21_i32
  end
  enum DBWATCHNOTIFYENUM
    DBWATCHNOTIFY_ROWSCHANGED = 1_i32
    DBWATCHNOTIFY_QUERYDONE = 2_i32
    DBWATCHNOTIFY_QUERYREEXECUTED = 3_i32
  end
  enum DBWATCHMODEENUM
    DBWATCHMODE_ALL = 1_i32
    DBWATCHMODE_EXTEND = 2_i32
    DBWATCHMODE_MOVE = 4_i32
    DBWATCHMODE_COUNT = 8_i32
  end
  enum DBROWCHANGEKINDENUM
    DBROWCHANGEKIND_INSERT = 0_i32
    DBROWCHANGEKIND_DELETE = 1_i32
    DBROWCHANGEKIND_UPDATE = 2_i32
    DBROWCHANGEKIND_COUNT = 3_i32
  end
  enum DBRESOURCEKINDENUM
    DBRESOURCE_INVALID = 0_i32
    DBRESOURCE_TOTAL = 1_i32
    DBRESOURCE_CPU = 2_i32
    DBRESOURCE_MEMORY = 3_i32
    DBRESOURCE_DISK = 4_i32
    DBRESOURCE_NETWORK = 5_i32
    DBRESOURCE_RESPONSE = 6_i32
    DBRESOURCE_ROWS = 7_i32
    DBRESOURCE_OTHER = 8_i32
  end
  enum DBCOSTUNITENUM
    DBUNIT_INVALID = 0_i32
    DBUNIT_WEIGHT = 1_i32
    DBUNIT_PERCENT = 2_i32
    DBUNIT_MAXIMUM = 4_i32
    DBUNIT_MINIMUM = 8_i32
    DBUNIT_MICRO_SECOND = 16_i32
    DBUNIT_MILLI_SECOND = 32_i32
    DBUNIT_SECOND = 64_i32
    DBUNIT_MINUTE = 128_i32
    DBUNIT_HOUR = 256_i32
    DBUNIT_BYTE = 512_i32
    DBUNIT_KILO_BYTE = 1024_i32
    DBUNIT_MEGA_BYTE = 2048_i32
    DBUNIT_GIGA_BYTE = 4096_i32
    DBUNIT_NUM_MSGS = 8192_i32
    DBUNIT_NUM_LOCKS = 16384_i32
    DBUNIT_NUM_ROWS = 32768_i32
    DBUNIT_OTHER = 65536_i32
  end
  enum DBEXECLIMITSENUM
    DBEXECLIMITS_ABORT = 1_i32
    DBEXECLIMITS_STOP = 2_i32
    DBEXECLIMITS_SUSPEND = 3_i32
  end
  enum SQLVARENUM
    VT_SS_EMPTY = 0_i32
    VT_SS_NULL = 1_i32
    VT_SS_UI1 = 17_i32
    VT_SS_I2 = 2_i32
    VT_SS_I4 = 3_i32
    VT_SS_I8 = 20_i32
    VT_SS_R4 = 4_i32
    VT_SS_R8 = 5_i32
    VT_SS_MONEY = 6_i32
    VT_SS_SMALLMONEY = 200_i32
    VT_SS_WSTRING = 201_i32
    VT_SS_WVARSTRING = 202_i32
    VT_SS_STRING = 203_i32
    VT_SS_VARSTRING = 204_i32
    VT_SS_BIT = 11_i32
    VT_SS_GUID = 72_i32
    VT_SS_NUMERIC = 131_i32
    VT_SS_DECIMAL = 205_i32
    VT_SS_DATETIME = 135_i32
    VT_SS_SMALLDATETIME = 206_i32
    VT_SS_BINARY = 207_i32
    VT_SS_VARBINARY = 208_i32
    VT_SS_UNKNOWN = 209_i32
  end
  enum LOCKMODEENUM
    LOCKMODE_INVALID = 0_i32
    LOCKMODE_EXCLUSIVE = 1_i32
    LOCKMODE_SHARED = 2_i32
  end

  @[Extern]
  struct IRowsetExactScroll
    def initialize()
    end
  end

  @[Extern]
  struct TEXT_SOURCE
    property pfnFillTextBuffer : Win32cr::System::Search::PFNFILLTEXTBUFFER
    property awcBuffer : Win32cr::Foundation::PWSTR
    property iEnd : UInt32
    property iCur : UInt32
    def initialize(@pfnFillTextBuffer : Win32cr::System::Search::PFNFILLTEXTBUFFER, @awcBuffer : Win32cr::Foundation::PWSTR, @iEnd : UInt32, @iCur : UInt32)
    end
  end

  @[Extern]
  struct FILTERED_DATA_SOURCES
    property pwcsExtension : Win32cr::Foundation::PWSTR
    property pwcsMime : Win32cr::Foundation::PWSTR
    property pClsid : LibC::GUID*
    property pwcsOverride : Win32cr::Foundation::PWSTR
    def initialize(@pwcsExtension : Win32cr::Foundation::PWSTR, @pwcsMime : Win32cr::Foundation::PWSTR, @pClsid : LibC::GUID*, @pwcsOverride : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct DB_NUMERIC
    property precision : UInt8
    property scale : UInt8
    property sign : UInt8
    property val : UInt8[16]
    def initialize(@precision : UInt8, @scale : UInt8, @sign : UInt8, @val : UInt8[16])
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBVECTOR
    property size : LibC::UIntPtrT
    property ptr : Void*
    def initialize(@size : LibC::UIntPtrT, @ptr : Void*)
    end
  end
  {% end %}

  @[Extern]
  struct DBDATE
    property year : Int16
    property month : UInt16
    property day : UInt16
    def initialize(@year : Int16, @month : UInt16, @day : UInt16)
    end
  end

  @[Extern]
  struct DBTIME
    property hour : UInt16
    property minute : UInt16
    property second : UInt16
    def initialize(@hour : UInt16, @minute : UInt16, @second : UInt16)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBTIMESTAMP
    property year : Int16
    property month : UInt16
    property day : UInt16
    property hour : UInt16
    property minute : UInt16
    property second : UInt16
    property fraction : UInt32
    def initialize(@year : Int16, @month : UInt16, @day : UInt16, @hour : UInt16, @minute : UInt16, @second : UInt16, @fraction : UInt32)
    end
  end
  {% end %}

  @[Extern]
  struct DB_VARNUMERIC
    property precision : UInt8
    property scale : Int8
    property sign : UInt8
    property val : UInt8*
    def initialize(@precision : UInt8, @scale : Int8, @sign : UInt8, @val : UInt8*)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct SEC_OBJECT_ELEMENT
    property guidObjectType : LibC::GUID
    property object_id : Win32cr::Storage::IndexServer::DBID
    def initialize(@guidObjectType : LibC::GUID, @object_id : Win32cr::Storage::IndexServer::DBID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct SEC_OBJECT
    property cObjects : UInt32
    property prgObjects : Win32cr::System::Search::SEC_OBJECT_ELEMENT*
    def initialize(@cObjects : UInt32, @prgObjects : Win32cr::System::Search::SEC_OBJECT_ELEMENT*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBIMPLICITSESSION
    property pUnkOuter : Void*
    property piid : LibC::GUID*
    property pSession : Void*
    def initialize(@pUnkOuter : Void*, @piid : LibC::GUID*, @pSession : Void*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBOBJECT
    property dwFlags : UInt32
    property iid : LibC::GUID
    def initialize(@dwFlags : UInt32, @iid : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBBINDEXT
    property pExtension : UInt8*
    property ulExtension : LibC::UIntPtrT
    def initialize(@pExtension : UInt8*, @ulExtension : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBBINDING
    property iOrdinal : LibC::UIntPtrT
    property obValue : LibC::UIntPtrT
    property obLength : LibC::UIntPtrT
    property obStatus : LibC::UIntPtrT
    property pTypeInfo : Void*
    property pObject : Win32cr::System::Search::DBOBJECT*
    property pBindExt : Win32cr::System::Search::DBBINDEXT*
    property dwPart : UInt32
    property dwMemOwner : UInt32
    property eParamIO : UInt32
    property cbMaxLen : LibC::UIntPtrT
    property dwFlags : UInt32
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@iOrdinal : LibC::UIntPtrT, @obValue : LibC::UIntPtrT, @obLength : LibC::UIntPtrT, @obStatus : LibC::UIntPtrT, @pTypeInfo : Void*, @pObject : Win32cr::System::Search::DBOBJECT*, @pBindExt : Win32cr::System::Search::DBBINDEXT*, @dwPart : UInt32, @dwMemOwner : UInt32, @eParamIO : UInt32, @cbMaxLen : LibC::UIntPtrT, @dwFlags : UInt32, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBFAILUREINFO
    property hRow : LibC::UIntPtrT
    property iColumn : LibC::UIntPtrT
    property failure : Win32cr::Foundation::HRESULT
    def initialize(@hRow : LibC::UIntPtrT, @iColumn : LibC::UIntPtrT, @failure : Win32cr::Foundation::HRESULT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBCOLUMNINFO
    property pwszName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property iOrdinal : LibC::UIntPtrT
    property dwFlags : UInt32
    property ulColumnSize : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    property columnid : Win32cr::Storage::IndexServer::DBID
    def initialize(@pwszName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @iOrdinal : LibC::UIntPtrT, @dwFlags : UInt32, @ulColumnSize : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8, @columnid : Win32cr::Storage::IndexServer::DBID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPARAMS
    property pData : Void*
    property cParamSets : LibC::UIntPtrT
    property hAccessor : LibC::UIntPtrT
    def initialize(@pData : Void*, @cParamSets : LibC::UIntPtrT, @hAccessor : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPARAMINFO
    property dwFlags : UInt32
    property iOrdinal : LibC::UIntPtrT
    property pwszName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property ulParamSize : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@dwFlags : UInt32, @iOrdinal : LibC::UIntPtrT, @pwszName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @ulParamSize : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPROPIDSET
    property rgPropertyIDs : UInt32*
    property cPropertyIDs : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgPropertyIDs : UInt32*, @cPropertyIDs : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPROPINFO
    property pwszDescription : Win32cr::Foundation::PWSTR
    property dwPropertyID : UInt32
    property dwFlags : UInt32
    property vtType : UInt16
    property vValues : Win32cr::System::Com::VARIANT
    def initialize(@pwszDescription : Win32cr::Foundation::PWSTR, @dwPropertyID : UInt32, @dwFlags : UInt32, @vtType : UInt16, @vValues : Win32cr::System::Com::VARIANT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPROPINFOSET
    property rgPropertyInfos : Win32cr::System::Search::DBPROPINFO*
    property cPropertyInfos : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgPropertyInfos : Win32cr::System::Search::DBPROPINFO*, @cPropertyInfos : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPROP
    property dwPropertyID : UInt32
    property dwOptions : UInt32
    property dwStatus : UInt32
    property colid : Win32cr::Storage::IndexServer::DBID
    property vValue : Win32cr::System::Com::VARIANT
    def initialize(@dwPropertyID : UInt32, @dwOptions : UInt32, @dwStatus : UInt32, @colid : Win32cr::Storage::IndexServer::DBID, @vValue : Win32cr::System::Com::VARIANT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPROPSET
    property rgProperties : Win32cr::System::Search::DBPROP*
    property cProperties : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgProperties : Win32cr::System::Search::DBPROP*, @cProperties : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBINDEXCOLUMNDESC
    property pColumnID : Win32cr::Storage::IndexServer::DBID*
    property eIndexColOrder : UInt32
    def initialize(@pColumnID : Win32cr::Storage::IndexServer::DBID*, @eIndexColOrder : UInt32)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBCOLUMNDESC
    property pwszTypeName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property rgPropertySets : Win32cr::System::Search::DBPROPSET*
    property pclsid : LibC::GUID*
    property cPropertySets : UInt32
    property ulColumnSize : LibC::UIntPtrT
    property dbcid : Win32cr::Storage::IndexServer::DBID
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pwszTypeName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @rgPropertySets : Win32cr::System::Search::DBPROPSET*, @pclsid : LibC::GUID*, @cPropertySets : UInt32, @ulColumnSize : LibC::UIntPtrT, @dbcid : Win32cr::Storage::IndexServer::DBID, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBCOLUMNACCESS
    property pData : Void*
    property columnid : Win32cr::Storage::IndexServer::DBID
    property cbDataLen : LibC::UIntPtrT
    property dwStatus : UInt32
    property cbMaxLen : LibC::UIntPtrT
    property dwReserved : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pData : Void*, @columnid : Win32cr::Storage::IndexServer::DBID, @cbDataLen : LibC::UIntPtrT, @dwStatus : UInt32, @cbMaxLen : LibC::UIntPtrT, @dwReserved : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBCONSTRAINTDESC
    property pConstraintID : Win32cr::Storage::IndexServer::DBID*
    property constraint_type : UInt32
    property cColumns : LibC::UIntPtrT
    property rgColumnList : Win32cr::Storage::IndexServer::DBID*
    property pReferencedTableID : Win32cr::Storage::IndexServer::DBID*
    property cForeignKeyColumns : LibC::UIntPtrT
    property rgForeignKeyColumnList : Win32cr::Storage::IndexServer::DBID*
    property pwszConstraintText : Win32cr::Foundation::PWSTR
    property update_rule : UInt32
    property delete_rule : UInt32
    property match_type : UInt32
    property deferrability : UInt32
    property cReserved : LibC::UIntPtrT
    property rgReserved : Win32cr::System::Search::DBPROPSET*
    def initialize(@pConstraintID : Win32cr::Storage::IndexServer::DBID*, @constraint_type : UInt32, @cColumns : LibC::UIntPtrT, @rgColumnList : Win32cr::Storage::IndexServer::DBID*, @pReferencedTableID : Win32cr::Storage::IndexServer::DBID*, @cForeignKeyColumns : LibC::UIntPtrT, @rgForeignKeyColumnList : Win32cr::Storage::IndexServer::DBID*, @pwszConstraintText : Win32cr::Foundation::PWSTR, @update_rule : UInt32, @delete_rule : UInt32, @match_type : UInt32, @deferrability : UInt32, @cReserved : LibC::UIntPtrT, @rgReserved : Win32cr::System::Search::DBPROPSET*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct MDAXISINFO
    property cbSize : LibC::UIntPtrT
    property iAxis : LibC::UIntPtrT
    property cDimensions : LibC::UIntPtrT
    property cCoordinates : LibC::UIntPtrT
    property rgcColumns : LibC::UIntPtrT*
    property rgpwszDimensionNames : Win32cr::Foundation::PWSTR*
    def initialize(@cbSize : LibC::UIntPtrT, @iAxis : LibC::UIntPtrT, @cDimensions : LibC::UIntPtrT, @cCoordinates : LibC::UIntPtrT, @rgcColumns : LibC::UIntPtrT*, @rgpwszDimensionNames : Win32cr::Foundation::PWSTR*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct RMTPACK
    property pISeqStream : Void*
    property cbData : UInt32
    property cBSTR : UInt32
    property rgBSTR : Win32cr::Foundation::BSTR*
    property cVARIANT : UInt32
    property rgVARIANT : Win32cr::System::Com::VARIANT*
    property cIDISPATCH : UInt32
    property rgIDISPATCH : Void**
    property cIUNKNOWN : UInt32
    property rgIUNKNOWN : Void**
    property cPROPVARIANT : UInt32
    property rgPROPVARIANT : Win32cr::System::Com::StructuredStorage::PROPVARIANT*
    property cArray : UInt32
    property rgArray : Win32cr::System::Com::VARIANT*
    def initialize(@pISeqStream : Void*, @cbData : UInt32, @cBSTR : UInt32, @rgBSTR : Win32cr::Foundation::BSTR*, @cVARIANT : UInt32, @rgVARIANT : Win32cr::System::Com::VARIANT*, @cIDISPATCH : UInt32, @rgIDISPATCH : Void**, @cIUNKNOWN : UInt32, @rgIUNKNOWN : Void**, @cPROPVARIANT : UInt32, @rgPROPVARIANT : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, @cArray : UInt32, @rgArray : Win32cr::System::Com::VARIANT*)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBPARAMBINDINFO
    property pwszDataSourceType : Win32cr::Foundation::PWSTR
    property pwszName : Win32cr::Foundation::PWSTR
    property ulParamSize : LibC::UIntPtrT
    property dwFlags : UInt32
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pwszDataSourceType : Win32cr::Foundation::PWSTR, @pwszName : Win32cr::Foundation::PWSTR, @ulParamSize : LibC::UIntPtrT, @dwFlags : UInt32, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBLITERALINFO
    property pwszLiteralValue : Win32cr::Foundation::PWSTR
    property pwszInvalidChars : Win32cr::Foundation::PWSTR
    property pwszInvalidStartingChars : Win32cr::Foundation::PWSTR
    property lt : UInt32
    property fSupported : Win32cr::Foundation::BOOL
    property cchMaxLen : UInt32
    def initialize(@pwszLiteralValue : Win32cr::Foundation::PWSTR, @pwszInvalidChars : Win32cr::Foundation::PWSTR, @pwszInvalidStartingChars : Win32cr::Foundation::PWSTR, @lt : UInt32, @fSupported : Win32cr::Foundation::BOOL, @cchMaxLen : UInt32)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct ERRORINFO
    property hrError : Win32cr::Foundation::HRESULT
    property dwMinor : UInt32
    property clsid : LibC::GUID
    property iid : LibC::GUID
    property dispid : Int32
    def initialize(@hrError : Win32cr::Foundation::HRESULT, @dwMinor : UInt32, @clsid : LibC::GUID, @iid : LibC::GUID, @dispid : Int32)
    end
  end
  {% end %}

  @[Extern]
  struct HITRANGE
    property iPosition : UInt32
    property cLength : UInt32
    def initialize(@iPosition : UInt32, @cLength : UInt32)
    end
  end

  @[Extern]
  struct TIMEOUT_INFO
    property dwSize : UInt32
    property dwConnectTimeout : UInt32
    property dwDataTimeout : UInt32
    def initialize(@dwSize : UInt32, @dwConnectTimeout : UInt32, @dwDataTimeout : UInt32)
    end
  end

  @[Extern]
  struct PROXY_INFO
    property dwSize : UInt32
    property pcwszUserAgent : Win32cr::Foundation::PWSTR
    property paUseProxy : Win32cr::System::Search::PROXY_ACCESS
    property fLocalBypass : Win32cr::Foundation::BOOL
    property dwPortNumber : UInt32
    property pcwszProxyName : Win32cr::Foundation::PWSTR
    property pcwszBypassList : Win32cr::Foundation::PWSTR
    def initialize(@dwSize : UInt32, @pcwszUserAgent : Win32cr::Foundation::PWSTR, @paUseProxy : Win32cr::System::Search::PROXY_ACCESS, @fLocalBypass : Win32cr::Foundation::BOOL, @dwPortNumber : UInt32, @pcwszProxyName : Win32cr::Foundation::PWSTR, @pcwszBypassList : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct AUTHENTICATION_INFO
    property dwSize : UInt32
    property atAuthenticationType : Win32cr::System::Search::AUTH_TYPE
    property pcwszUser : Win32cr::Foundation::PWSTR
    property pcwszPassword : Win32cr::Foundation::PWSTR
    def initialize(@dwSize : UInt32, @atAuthenticationType : Win32cr::System::Search::AUTH_TYPE, @pcwszUser : Win32cr::Foundation::PWSTR, @pcwszPassword : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct INCREMENTAL_ACCESS_INFO
    property dwSize : UInt32
    property ftLastModifiedTime : Win32cr::Foundation::FILETIME
    def initialize(@dwSize : UInt32, @ftLastModifiedTime : Win32cr::Foundation::FILETIME)
    end
  end

  @[Extern]
  struct ITEM_INFO
    property dwSize : UInt32
    property pcwszFromEMail : Win32cr::Foundation::PWSTR
    property pcwszApplicationName : Win32cr::Foundation::PWSTR
    property pcwszCatalogName : Win32cr::Foundation::PWSTR
    property pcwszContentClass : Win32cr::Foundation::PWSTR
    def initialize(@dwSize : UInt32, @pcwszFromEMail : Win32cr::Foundation::PWSTR, @pcwszApplicationName : Win32cr::Foundation::PWSTR, @pcwszCatalogName : Win32cr::Foundation::PWSTR, @pcwszContentClass : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct SEARCH_ITEM_CHANGE
    property change : Win32cr::System::Search::SEARCH_KIND_OF_CHANGE
    property priority : Win32cr::System::Search::SEARCH_NOTIFICATION_PRIORITY
    property pUserData : Win32cr::System::Com::BLOB*
    property lpwszURL : Win32cr::Foundation::PWSTR
    property lpwszOldURL : Win32cr::Foundation::PWSTR
    def initialize(@change : Win32cr::System::Search::SEARCH_KIND_OF_CHANGE, @priority : Win32cr::System::Search::SEARCH_NOTIFICATION_PRIORITY, @pUserData : Win32cr::System::Com::BLOB*, @lpwszURL : Win32cr::Foundation::PWSTR, @lpwszOldURL : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct SEARCH_ITEM_PERSISTENT_CHANGE
    property change : Win32cr::System::Search::SEARCH_KIND_OF_CHANGE
    property url : Win32cr::Foundation::PWSTR
    property old_url : Win32cr::Foundation::PWSTR
    property priority : Win32cr::System::Search::SEARCH_NOTIFICATION_PRIORITY
    def initialize(@change : Win32cr::System::Search::SEARCH_KIND_OF_CHANGE, @url : Win32cr::Foundation::PWSTR, @old_url : Win32cr::Foundation::PWSTR, @priority : Win32cr::System::Search::SEARCH_NOTIFICATION_PRIORITY)
    end
  end

  @[Extern]
  struct SEARCH_ITEM_INDEXING_STATUS
    property dwDocID : UInt32
    property hrIndexingStatus : Win32cr::Foundation::HRESULT
    def initialize(@dwDocID : UInt32, @hrIndexingStatus : Win32cr::Foundation::HRESULT)
    end
  end

  @[Extern]
  struct SEARCH_COLUMN_PROPERTIES
    property value : Win32cr::System::Com::StructuredStorage::PROPVARIANT
    property lcid : UInt32
    def initialize(@value : Win32cr::System::Com::StructuredStorage::PROPVARIANT, @lcid : UInt32)
    end
  end

  @[Extern]
  struct ITEMPROP
    property variantValue : Win32cr::System::Com::VARIANT
    property pwszName : Win32cr::Foundation::PWSTR
    def initialize(@variantValue : Win32cr::System::Com::VARIANT, @pwszName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct SUBSCRIPTIONITEMINFO
    property cbSize : UInt32
    property dwFlags : UInt32
    property dwPriority : UInt32
    property schedule_group : LibC::GUID
    property clsidAgent : LibC::GUID
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @dwPriority : UInt32, @schedule_group : LibC::GUID, @clsidAgent : LibC::GUID)
    end
  end

  @[Extern]
  struct SUBSCRIPTIONINFO
    property cbSize : UInt32
    property fUpdateFlags : UInt32
    property schedule : Win32cr::System::Search::SUBSCRIPTIONSCHEDULE
    property customGroupCookie : LibC::GUID
    property pTrigger : Void*
    property dwRecurseLevels : UInt32
    property fWebcrawlerFlags : UInt32
    property bMailNotification : Win32cr::Foundation::BOOL
    property bGleam : Win32cr::Foundation::BOOL
    property bChangesOnly : Win32cr::Foundation::BOOL
    property bNeedPassword : Win32cr::Foundation::BOOL
    property fChannelFlags : UInt32
    property bstrUserName : Win32cr::Foundation::BSTR
    property bstrPassword : Win32cr::Foundation::BSTR
    property bstrFriendlyName : Win32cr::Foundation::BSTR
    property dwMaxSizeKB : UInt32
    property subType : Win32cr::System::Search::SUBSCRIPTIONTYPE
    property fTaskFlags : UInt32
    property dwReserved : UInt32
    def initialize(@cbSize : UInt32, @fUpdateFlags : UInt32, @schedule : Win32cr::System::Search::SUBSCRIPTIONSCHEDULE, @customGroupCookie : LibC::GUID, @pTrigger : Void*, @dwRecurseLevels : UInt32, @fWebcrawlerFlags : UInt32, @bMailNotification : Win32cr::Foundation::BOOL, @bGleam : Win32cr::Foundation::BOOL, @bChangesOnly : Win32cr::Foundation::BOOL, @bNeedPassword : Win32cr::Foundation::BOOL, @fChannelFlags : UInt32, @bstrUserName : Win32cr::Foundation::BSTR, @bstrPassword : Win32cr::Foundation::BSTR, @bstrFriendlyName : Win32cr::Foundation::BSTR, @dwMaxSizeKB : UInt32, @subType : Win32cr::System::Search::SUBSCRIPTIONTYPE, @fTaskFlags : UInt32, @dwReserved : UInt32)
    end
  end

  @[Extern]
  struct DCINFO
    property eInfoType : UInt32
    property vData : Win32cr::System::Com::VARIANT
    def initialize(@eInfoType : UInt32, @vData : Win32cr::System::Com::VARIANT)
    end
  end

  @[Extern]
  struct KAGREQDIAG
    property ulDiagFlags : UInt32
    property vt : UInt16
    property sDiagField : Int16
    def initialize(@ulDiagFlags : UInt32, @vt : UInt16, @sDiagField : Int16)
    end
  end

  @[Extern]
  struct KAGGETDIAG
    property ulSize : UInt32
    property vDiagInfo : Win32cr::System::Com::VARIANT
    property sDiagField : Int16
    def initialize(@ulSize : UInt32, @vDiagInfo : Win32cr::System::Com::VARIANT, @sDiagField : Int16)
    end
  end

  @[Extern]
  struct DATE_STRUCT
    property year : Int16
    property month : UInt16
    property day : UInt16
    def initialize(@year : Int16, @month : UInt16, @day : UInt16)
    end
  end

  @[Extern]
  struct TIME_STRUCT
    property hour : UInt16
    property minute : UInt16
    property second : UInt16
    def initialize(@hour : UInt16, @minute : UInt16, @second : UInt16)
    end
  end

  @[Extern]
  struct TIMESTAMP_STRUCT
    property year : Int16
    property month : UInt16
    property day : UInt16
    property hour : UInt16
    property minute : UInt16
    property second : UInt16
    property fraction : UInt32
    def initialize(@year : Int16, @month : UInt16, @day : UInt16, @hour : UInt16, @minute : UInt16, @second : UInt16, @fraction : UInt32)
    end
  end

  @[Extern]
  struct SQL_YEAR_MONTH
    property year : UInt32
    property month : UInt32
    def initialize(@year : UInt32, @month : UInt32)
    end
  end

  @[Extern]
  struct SQL_DAY_SECOND
    property day : UInt32
    property hour : UInt32
    property minute : UInt32
    property second : UInt32
    property fraction : UInt32
    def initialize(@day : UInt32, @hour : UInt32, @minute : UInt32, @second : UInt32, @fraction : UInt32)
    end
  end

  @[Extern]
  struct SQL_INTERVAL_STRUCT
    property interval_type : Win32cr::System::Search::SQLINTERVAL
    property interval_sign : Int16
    property intval : Intval_e__union_

    # Nested Type Intval_e__union_
    @[Extern(union: true)]
    struct Intval_e__union_
    property year_month : Win32cr::System::Search::SQL_YEAR_MONTH
    property day_second : Win32cr::System::Search::SQL_DAY_SECOND
    def initialize(@year_month : Win32cr::System::Search::SQL_YEAR_MONTH, @day_second : Win32cr::System::Search::SQL_DAY_SECOND)
    end
    end

    def initialize(@interval_type : Win32cr::System::Search::SQLINTERVAL, @interval_sign : Int16, @intval : Intval_e__union_)
    end
  end

  @[Extern]
  struct SQL_NUMERIC_STRUCT
    property precision : UInt8
    property scale : Int8
    property sign : UInt8
    property val : UInt8[16]
    def initialize(@precision : UInt8, @scale : Int8, @sign : UInt8, @val : UInt8[16])
    end
  end

  @[Extern]
  struct Dbvarychar
    property len : Int16
    property str : Int8[8001]
    def initialize(@len : Int16, @str : Int8[8001])
    end
  end

  @[Extern]
  struct Dbvarybin
    property len : Int16
    property array : UInt8[8001]
    def initialize(@len : Int16, @array : UInt8[8001])
    end
  end

  @[Extern]
  struct Dbmoney
    property mnyhigh : Int32
    property mnylow : UInt32
    def initialize(@mnyhigh : Int32, @mnylow : UInt32)
    end
  end

  @[Extern]
  struct Dbdatetime
    property dtdays : Int32
    property dttime : UInt32
    def initialize(@dtdays : Int32, @dttime : UInt32)
    end
  end

  @[Extern]
  struct Dbdatetime4
    property numdays : UInt16
    property nummins : UInt16
    def initialize(@numdays : UInt16, @nummins : UInt16)
    end
  end

  @[Extern]
  struct Sqlperf
    property timer_resolution : UInt32
    property sq_lidu : UInt32
    property sq_lidu_rows : UInt32
    property sql_selects : UInt32
    property sql_select_rows : UInt32
    property transactions : UInt32
    property sql_prepares : UInt32
    property exec_directs : UInt32
    property sql_executes : UInt32
    property cursor_opens : UInt32
    property cursor_size : UInt32
    property cursor_used : UInt32
    property percent_cursor_used : Float64
    property avg_fetch_time : Float64
    property avg_cursor_size : Float64
    property avg_cursor_used : Float64
    property sql_fetch_time : UInt32
    property sql_fetch_count : UInt32
    property current_stmt_count : UInt32
    property max_open_stmt : UInt32
    property sum_open_stmt : UInt32
    property current_connection_count : UInt32
    property max_connections_opened : UInt32
    property sum_connections_opened : UInt32
    property sum_connectiontime : UInt32
    property avg_time_opened : Float64
    property server_rnd_trips : UInt32
    property buffers_sent : UInt32
    property buffers_rec : UInt32
    property bytes_sent : UInt32
    property bytes_rec : UInt32
    property msExecutionTime : UInt32
    property msNetWorkServerTime : UInt32
    def initialize(@timer_resolution : UInt32, @sq_lidu : UInt32, @sq_lidu_rows : UInt32, @sql_selects : UInt32, @sql_select_rows : UInt32, @transactions : UInt32, @sql_prepares : UInt32, @exec_directs : UInt32, @sql_executes : UInt32, @cursor_opens : UInt32, @cursor_size : UInt32, @cursor_used : UInt32, @percent_cursor_used : Float64, @avg_fetch_time : Float64, @avg_cursor_size : Float64, @avg_cursor_used : Float64, @sql_fetch_time : UInt32, @sql_fetch_count : UInt32, @current_stmt_count : UInt32, @max_open_stmt : UInt32, @sum_open_stmt : UInt32, @current_connection_count : UInt32, @max_connections_opened : UInt32, @sum_connections_opened : UInt32, @sum_connectiontime : UInt32, @avg_time_opened : Float64, @server_rnd_trips : UInt32, @buffers_sent : UInt32, @buffers_rec : UInt32, @bytes_sent : UInt32, @bytes_rec : UInt32, @msExecutionTime : UInt32, @msNetWorkServerTime : UInt32)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBROWWATCHRANGE
    property hRegion : LibC::UIntPtrT
    property eChangeKind : UInt32
    property hRow : LibC::UIntPtrT
    property iRow : LibC::UIntPtrT
    def initialize(@hRegion : LibC::UIntPtrT, @eChangeKind : UInt32, @hRow : LibC::UIntPtrT, @iRow : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct DBCOST
    property eKind : UInt32
    property dwUnits : UInt32
    property lValue : Int32
    def initialize(@eKind : UInt32, @dwUnits : UInt32, @lValue : Int32)
    end
  end
  {% end %}

  @[Extern]
  struct NOTRESTRICTION
    property pRes : Win32cr::System::Search::RESTRICTION*
    def initialize(@pRes : Win32cr::System::Search::RESTRICTION*)
    end
  end

  @[Extern]
  struct NODERESTRICTION
    property cRes : UInt32
    property paRes : Win32cr::System::Search::RESTRICTION**
    property reserved : UInt32
    def initialize(@cRes : UInt32, @paRes : Win32cr::System::Search::RESTRICTION**, @reserved : UInt32)
    end
  end

  @[Extern]
  struct VECTORRESTRICTION
    property node : Win32cr::System::Search::NODERESTRICTION
    property rank_method : UInt32
    def initialize(@node : Win32cr::System::Search::NODERESTRICTION, @rank_method : UInt32)
    end
  end

  @[Extern]
  struct CONTENTRESTRICTION
    property prop : Win32cr::Storage::IndexServer::FULLPROPSPEC
    property pwcsPhrase : Win32cr::Foundation::PWSTR
    property lcid : UInt32
    property ulGenerateMethod : UInt32
    def initialize(@prop : Win32cr::Storage::IndexServer::FULLPROPSPEC, @pwcsPhrase : Win32cr::Foundation::PWSTR, @lcid : UInt32, @ulGenerateMethod : UInt32)
    end
  end

  @[Extern]
  struct NATLANGUAGERESTRICTION
    property prop : Win32cr::Storage::IndexServer::FULLPROPSPEC
    property pwcsPhrase : Win32cr::Foundation::PWSTR
    property lcid : UInt32
    def initialize(@prop : Win32cr::Storage::IndexServer::FULLPROPSPEC, @pwcsPhrase : Win32cr::Foundation::PWSTR, @lcid : UInt32)
    end
  end

  @[Extern]
  struct PROPERTYRESTRICTION
    property rel : UInt32
    property prop : Win32cr::Storage::IndexServer::FULLPROPSPEC
    property prval : Win32cr::System::Com::StructuredStorage::PROPVARIANT
    def initialize(@rel : UInt32, @prop : Win32cr::Storage::IndexServer::FULLPROPSPEC, @prval : Win32cr::System::Com::StructuredStorage::PROPVARIANT)
    end
  end

  @[Extern]
  struct RESTRICTION
    property rt : UInt32
    property weight : UInt32
    property res : URes_

    # Nested Type URes_
    @[Extern(union: true)]
    struct URes_
    property ar : Win32cr::System::Search::NODERESTRICTION
    property orRestriction : Win32cr::System::Search::NODERESTRICTION
    property pxr : Win32cr::System::Search::NODERESTRICTION
    property vr : Win32cr::System::Search::VECTORRESTRICTION
    property nr : Win32cr::System::Search::NOTRESTRICTION
    property cr : Win32cr::System::Search::CONTENTRESTRICTION
    property nlr : Win32cr::System::Search::NATLANGUAGERESTRICTION
    property pr : Win32cr::System::Search::PROPERTYRESTRICTION
    def initialize(@ar : Win32cr::System::Search::NODERESTRICTION, @orRestriction : Win32cr::System::Search::NODERESTRICTION, @pxr : Win32cr::System::Search::NODERESTRICTION, @vr : Win32cr::System::Search::VECTORRESTRICTION, @nr : Win32cr::System::Search::NOTRESTRICTION, @cr : Win32cr::System::Search::CONTENTRESTRICTION, @nlr : Win32cr::System::Search::NATLANGUAGERESTRICTION, @pr : Win32cr::System::Search::PROPERTYRESTRICTION)
    end
    end

    def initialize(@rt : UInt32, @weight : UInt32, @res : URes_)
    end
  end

  @[Extern]
  struct COLUMNSET
    property cCol : UInt32
    property aCol : Win32cr::Storage::IndexServer::FULLPROPSPEC*
    def initialize(@cCol : UInt32, @aCol : Win32cr::Storage::IndexServer::FULLPROPSPEC*)
    end
  end

  @[Extern]
  struct SORTKEY
    property propColumn : Win32cr::Storage::IndexServer::FULLPROPSPEC
    property dwOrder : UInt32
    property locale : UInt32
    def initialize(@propColumn : Win32cr::Storage::IndexServer::FULLPROPSPEC, @dwOrder : UInt32, @locale : UInt32)
    end
  end

  @[Extern]
  struct SORTSET
    property cCol : UInt32
    property aCol : Win32cr::System::Search::SORTKEY*
    def initialize(@cCol : UInt32, @aCol : Win32cr::System::Search::SORTKEY*)
    end
  end

  @[Extern]
  struct BUCKETCATEGORIZE
    property cBuckets : UInt32
    property distribution : UInt32
    def initialize(@cBuckets : UInt32, @distribution : UInt32)
    end
  end

  @[Extern]
  struct RANGECATEGORIZE
    property cRange : UInt32
    property aRangeBegin : Win32cr::System::Com::StructuredStorage::PROPVARIANT*
    def initialize(@cRange : UInt32, @aRangeBegin : Win32cr::System::Com::StructuredStorage::PROPVARIANT*)
    end
  end

  @[Extern]
  struct CATEGORIZATION
    property ulCatType : UInt32
    property anonymous : Anonymous_e__Union_
    property csColumns : Win32cr::System::Search::COLUMNSET

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property cClusters : UInt32
    property bucket : Win32cr::System::Search::BUCKETCATEGORIZE
    property range : Win32cr::System::Search::RANGECATEGORIZE
    def initialize(@cClusters : UInt32, @bucket : Win32cr::System::Search::BUCKETCATEGORIZE, @range : Win32cr::System::Search::RANGECATEGORIZE)
    end
    end

    def initialize(@ulCatType : UInt32, @anonymous : Anonymous_e__Union_, @csColumns : Win32cr::System::Search::COLUMNSET)
    end
  end

  @[Extern]
  struct CATEGORIZATIONSET
    property cCat : UInt32
    property aCat : Win32cr::System::Search::CATEGORIZATION*
    def initialize(@cCat : UInt32, @aCat : Win32cr::System::Search::CATEGORIZATION*)
    end
  end

  @[Extern]
  struct ODBC_VS_ARGS
    property pguidEvent : LibC::GUID*
    property dwFlags : UInt32
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_
    property ret_code : Int16

    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property wszArg : Win32cr::Foundation::PWSTR
    property szArg : Win32cr::Foundation::PSTR
    def initialize(@wszArg : Win32cr::Foundation::PWSTR, @szArg : Win32cr::Foundation::PSTR)
    end
    end


    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property wszCorrelation : Win32cr::Foundation::PWSTR
    property szCorrelation : Win32cr::Foundation::PSTR
    def initialize(@wszCorrelation : Win32cr::Foundation::PWSTR, @szCorrelation : Win32cr::Foundation::PSTR)
    end
    end

    def initialize(@pguidEvent : LibC::GUID*, @dwFlags : UInt32, @anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_, @ret_code : Int16)
    end
  end

  @[Extern]
  struct SSVARIANT
    property vt : UInt16
    property dwReserved1 : UInt32
    property dwReserved2 : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property bTinyIntVal : UInt8
    property sShortIntVal : Int16
    property lIntVal : Int32
    property llBigIntVal : Int64
    property fltRealVal : Float32
    property dblFloatVal : Float64
    property cyMoneyVal : Win32cr::System::Com::CY
    property n_char_val : NCharVal_
    property char_val : CharVal_
    property fBitVal : Int16
    property rgbGuidVal : UInt8[16]
    property numNumericVal : Win32cr::System::Search::DB_NUMERIC
    property binary_val : BinaryVal_
    property tsDateTimeVal : Win32cr::System::Search::DBTIMESTAMP
    property unknown_type : UnknownType_
    property blob_type : BLOBType_

      # Nested Type UnknownType_
      @[Extern]
      struct UnknownType_
    property dwActualLength : UInt32
    property rgMetadata : UInt8[16]
    property pUnknownData : UInt8*
    def initialize(@dwActualLength : UInt32, @rgMetadata : UInt8[16], @pUnknownData : UInt8*)
    end
      end


      # Nested Type CharVal_
      @[Extern]
      struct CharVal_
    property sActualLength : Int16
    property sMaxLength : Int16
    property pchCharVal : Win32cr::Foundation::PSTR
    property rgbReserved : UInt8[5]
    property dwReserved : UInt32
    property pwchReserved : Win32cr::Foundation::PWSTR
    def initialize(@sActualLength : Int16, @sMaxLength : Int16, @pchCharVal : Win32cr::Foundation::PSTR, @rgbReserved : UInt8[5], @dwReserved : UInt32, @pwchReserved : Win32cr::Foundation::PWSTR)
    end
      end


      # Nested Type BLOBType_
      @[Extern]
      struct BLOBType_
    property dbobj : Win32cr::System::Search::DBOBJECT
    property pUnk : Void*
    def initialize(@dbobj : Win32cr::System::Search::DBOBJECT, @pUnk : Void*)
    end
      end


      # Nested Type NCharVal_
      @[Extern]
      struct NCharVal_
    property sActualLength : Int16
    property sMaxLength : Int16
    property pwchNCharVal : Win32cr::Foundation::PWSTR
    property rgbReserved : UInt8[5]
    property dwReserved : UInt32
    property pwchReserved : Win32cr::Foundation::PWSTR
    def initialize(@sActualLength : Int16, @sMaxLength : Int16, @pwchNCharVal : Win32cr::Foundation::PWSTR, @rgbReserved : UInt8[5], @dwReserved : UInt32, @pwchReserved : Win32cr::Foundation::PWSTR)
    end
      end


      # Nested Type BinaryVal_
      @[Extern]
      struct BinaryVal_
    property sActualLength : Int16
    property sMaxLength : Int16
    property prgbBinaryVal : UInt8*
    property dwReserved : UInt32
    def initialize(@sActualLength : Int16, @sMaxLength : Int16, @prgbBinaryVal : UInt8*, @dwReserved : UInt32)
    end
      end

    def initialize(@bTinyIntVal : UInt8, @sShortIntVal : Int16, @lIntVal : Int32, @llBigIntVal : Int64, @fltRealVal : Float32, @dblFloatVal : Float64, @cyMoneyVal : Win32cr::System::Com::CY, @n_char_val : NCharVal_, @char_val : CharVal_, @fBitVal : Int16, @rgbGuidVal : UInt8[16], @numNumericVal : Win32cr::System::Search::DB_NUMERIC, @binary_val : BinaryVal_, @tsDateTimeVal : Win32cr::System::Search::DBTIMESTAMP, @unknown_type : UnknownType_, @blob_type : BLOBType_)
    end
    end

    def initialize(@vt : UInt16, @dwReserved1 : UInt32, @dwReserved2 : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct SSErrorInfo
    property pwszMessage : Win32cr::Foundation::PWSTR
    property pwszServer : Win32cr::Foundation::PWSTR
    property pwszProcedure : Win32cr::Foundation::PWSTR
    property lNative : Int32
    property bState : UInt8
    property bClass : UInt8
    property wLineNumber : UInt16
    def initialize(@pwszMessage : Win32cr::Foundation::PWSTR, @pwszServer : Win32cr::Foundation::PWSTR, @pwszProcedure : Win32cr::Foundation::PWSTR, @lNative : Int32, @bState : UInt8, @bClass : UInt8, @wLineNumber : UInt16)
    end
  end

  {% if flag?(:i386) %}
  @[Extern]
  struct DBVECTOR
    property size : LibC::UIntPtrT
    property ptr : Void*
    def initialize(@size : LibC::UIntPtrT, @ptr : Void*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBTIMESTAMP
    property year : Int16
    property month : UInt16
    property day : UInt16
    property hour : UInt16
    property minute : UInt16
    property second : UInt16
    property fraction : UInt32
    def initialize(@year : Int16, @month : UInt16, @day : UInt16, @hour : UInt16, @minute : UInt16, @second : UInt16, @fraction : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct SEC_OBJECT_ELEMENT
    property guidObjectType : LibC::GUID
    property object_id : Win32cr::Storage::IndexServer::DBID
    def initialize(@guidObjectType : LibC::GUID, @object_id : Win32cr::Storage::IndexServer::DBID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct SEC_OBJECT
    property cObjects : UInt32
    property prgObjects : Win32cr::System::Search::SEC_OBJECT_ELEMENT*
    def initialize(@cObjects : UInt32, @prgObjects : Win32cr::System::Search::SEC_OBJECT_ELEMENT*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBIMPLICITSESSION
    property pUnkOuter : Void*
    property piid : LibC::GUID*
    property pSession : Void*
    def initialize(@pUnkOuter : Void*, @piid : LibC::GUID*, @pSession : Void*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBOBJECT
    property dwFlags : UInt32
    property iid : LibC::GUID
    def initialize(@dwFlags : UInt32, @iid : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBBINDEXT
    property pExtension : UInt8*
    property ulExtension : LibC::UIntPtrT
    def initialize(@pExtension : UInt8*, @ulExtension : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBBINDING
    property iOrdinal : LibC::UIntPtrT
    property obValue : LibC::UIntPtrT
    property obLength : LibC::UIntPtrT
    property obStatus : LibC::UIntPtrT
    property pTypeInfo : Void*
    property pObject : Win32cr::System::Search::DBOBJECT*
    property pBindExt : Win32cr::System::Search::DBBINDEXT*
    property dwPart : UInt32
    property dwMemOwner : UInt32
    property eParamIO : UInt32
    property cbMaxLen : LibC::UIntPtrT
    property dwFlags : UInt32
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@iOrdinal : LibC::UIntPtrT, @obValue : LibC::UIntPtrT, @obLength : LibC::UIntPtrT, @obStatus : LibC::UIntPtrT, @pTypeInfo : Void*, @pObject : Win32cr::System::Search::DBOBJECT*, @pBindExt : Win32cr::System::Search::DBBINDEXT*, @dwPart : UInt32, @dwMemOwner : UInt32, @eParamIO : UInt32, @cbMaxLen : LibC::UIntPtrT, @dwFlags : UInt32, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBFAILUREINFO
    property hRow : LibC::UIntPtrT
    property iColumn : LibC::UIntPtrT
    property failure : Win32cr::Foundation::HRESULT
    def initialize(@hRow : LibC::UIntPtrT, @iColumn : LibC::UIntPtrT, @failure : Win32cr::Foundation::HRESULT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBCOLUMNINFO
    property pwszName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property iOrdinal : LibC::UIntPtrT
    property dwFlags : UInt32
    property ulColumnSize : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    property columnid : Win32cr::Storage::IndexServer::DBID
    def initialize(@pwszName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @iOrdinal : LibC::UIntPtrT, @dwFlags : UInt32, @ulColumnSize : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8, @columnid : Win32cr::Storage::IndexServer::DBID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPARAMS
    property pData : Void*
    property cParamSets : LibC::UIntPtrT
    property hAccessor : LibC::UIntPtrT
    def initialize(@pData : Void*, @cParamSets : LibC::UIntPtrT, @hAccessor : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPARAMINFO
    property dwFlags : UInt32
    property iOrdinal : LibC::UIntPtrT
    property pwszName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property ulParamSize : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@dwFlags : UInt32, @iOrdinal : LibC::UIntPtrT, @pwszName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @ulParamSize : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPROPIDSET
    property rgPropertyIDs : UInt32*
    property cPropertyIDs : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgPropertyIDs : UInt32*, @cPropertyIDs : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPROPINFO
    property pwszDescription : Win32cr::Foundation::PWSTR
    property dwPropertyID : UInt32
    property dwFlags : UInt32
    property vtType : UInt16
    property vValues : Win32cr::System::Com::VARIANT
    def initialize(@pwszDescription : Win32cr::Foundation::PWSTR, @dwPropertyID : UInt32, @dwFlags : UInt32, @vtType : UInt16, @vValues : Win32cr::System::Com::VARIANT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPROPINFOSET
    property rgPropertyInfos : Win32cr::System::Search::DBPROPINFO*
    property cPropertyInfos : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgPropertyInfos : Win32cr::System::Search::DBPROPINFO*, @cPropertyInfos : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPROP
    property dwPropertyID : UInt32
    property dwOptions : UInt32
    property dwStatus : UInt32
    property colid : Win32cr::Storage::IndexServer::DBID
    property vValue : Win32cr::System::Com::VARIANT
    def initialize(@dwPropertyID : UInt32, @dwOptions : UInt32, @dwStatus : UInt32, @colid : Win32cr::Storage::IndexServer::DBID, @vValue : Win32cr::System::Com::VARIANT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPROPSET
    property rgProperties : Win32cr::System::Search::DBPROP*
    property cProperties : UInt32
    property guidPropertySet : LibC::GUID
    def initialize(@rgProperties : Win32cr::System::Search::DBPROP*, @cProperties : UInt32, @guidPropertySet : LibC::GUID)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBINDEXCOLUMNDESC
    property pColumnID : Win32cr::Storage::IndexServer::DBID*
    property eIndexColOrder : UInt32
    def initialize(@pColumnID : Win32cr::Storage::IndexServer::DBID*, @eIndexColOrder : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBCOLUMNDESC
    property pwszTypeName : Win32cr::Foundation::PWSTR
    property pTypeInfo : Void*
    property rgPropertySets : Win32cr::System::Search::DBPROPSET*
    property pclsid : LibC::GUID*
    property cPropertySets : UInt32
    property ulColumnSize : LibC::UIntPtrT
    property dbcid : Win32cr::Storage::IndexServer::DBID
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pwszTypeName : Win32cr::Foundation::PWSTR, @pTypeInfo : Void*, @rgPropertySets : Win32cr::System::Search::DBPROPSET*, @pclsid : LibC::GUID*, @cPropertySets : UInt32, @ulColumnSize : LibC::UIntPtrT, @dbcid : Win32cr::Storage::IndexServer::DBID, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBCOLUMNACCESS
    property pData : Void*
    property columnid : Win32cr::Storage::IndexServer::DBID
    property cbDataLen : LibC::UIntPtrT
    property dwStatus : UInt32
    property cbMaxLen : LibC::UIntPtrT
    property dwReserved : LibC::UIntPtrT
    property wType : UInt16
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pData : Void*, @columnid : Win32cr::Storage::IndexServer::DBID, @cbDataLen : LibC::UIntPtrT, @dwStatus : UInt32, @cbMaxLen : LibC::UIntPtrT, @dwReserved : LibC::UIntPtrT, @wType : UInt16, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBCONSTRAINTDESC
    property pConstraintID : Win32cr::Storage::IndexServer::DBID*
    property constraint_type : UInt32
    property cColumns : LibC::UIntPtrT
    property rgColumnList : Win32cr::Storage::IndexServer::DBID*
    property pReferencedTableID : Win32cr::Storage::IndexServer::DBID*
    property cForeignKeyColumns : LibC::UIntPtrT
    property rgForeignKeyColumnList : Win32cr::Storage::IndexServer::DBID*
    property pwszConstraintText : Win32cr::Foundation::PWSTR
    property update_rule : UInt32
    property delete_rule : UInt32
    property match_type : UInt32
    property deferrability : UInt32
    property cReserved : LibC::UIntPtrT
    property rgReserved : Win32cr::System::Search::DBPROPSET*
    def initialize(@pConstraintID : Win32cr::Storage::IndexServer::DBID*, @constraint_type : UInt32, @cColumns : LibC::UIntPtrT, @rgColumnList : Win32cr::Storage::IndexServer::DBID*, @pReferencedTableID : Win32cr::Storage::IndexServer::DBID*, @cForeignKeyColumns : LibC::UIntPtrT, @rgForeignKeyColumnList : Win32cr::Storage::IndexServer::DBID*, @pwszConstraintText : Win32cr::Foundation::PWSTR, @update_rule : UInt32, @delete_rule : UInt32, @match_type : UInt32, @deferrability : UInt32, @cReserved : LibC::UIntPtrT, @rgReserved : Win32cr::System::Search::DBPROPSET*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct MDAXISINFO
    property cbSize : LibC::UIntPtrT
    property iAxis : LibC::UIntPtrT
    property cDimensions : LibC::UIntPtrT
    property cCoordinates : LibC::UIntPtrT
    property rgcColumns : LibC::UIntPtrT*
    property rgpwszDimensionNames : Win32cr::Foundation::PWSTR*
    def initialize(@cbSize : LibC::UIntPtrT, @iAxis : LibC::UIntPtrT, @cDimensions : LibC::UIntPtrT, @cCoordinates : LibC::UIntPtrT, @rgcColumns : LibC::UIntPtrT*, @rgpwszDimensionNames : Win32cr::Foundation::PWSTR*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct RMTPACK
    property pISeqStream : Void*
    property cbData : UInt32
    property cBSTR : UInt32
    property rgBSTR : Win32cr::Foundation::BSTR*
    property cVARIANT : UInt32
    property rgVARIANT : Win32cr::System::Com::VARIANT*
    property cIDISPATCH : UInt32
    property rgIDISPATCH : Void**
    property cIUNKNOWN : UInt32
    property rgIUNKNOWN : Void**
    property cPROPVARIANT : UInt32
    property rgPROPVARIANT : Win32cr::System::Com::StructuredStorage::PROPVARIANT*
    property cArray : UInt32
    property rgArray : Win32cr::System::Com::VARIANT*
    def initialize(@pISeqStream : Void*, @cbData : UInt32, @cBSTR : UInt32, @rgBSTR : Win32cr::Foundation::BSTR*, @cVARIANT : UInt32, @rgVARIANT : Win32cr::System::Com::VARIANT*, @cIDISPATCH : UInt32, @rgIDISPATCH : Void**, @cIUNKNOWN : UInt32, @rgIUNKNOWN : Void**, @cPROPVARIANT : UInt32, @rgPROPVARIANT : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, @cArray : UInt32, @rgArray : Win32cr::System::Com::VARIANT*)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBPARAMBINDINFO
    property pwszDataSourceType : Win32cr::Foundation::PWSTR
    property pwszName : Win32cr::Foundation::PWSTR
    property ulParamSize : LibC::UIntPtrT
    property dwFlags : UInt32
    property bPrecision : UInt8
    property bScale : UInt8
    def initialize(@pwszDataSourceType : Win32cr::Foundation::PWSTR, @pwszName : Win32cr::Foundation::PWSTR, @ulParamSize : LibC::UIntPtrT, @dwFlags : UInt32, @bPrecision : UInt8, @bScale : UInt8)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBLITERALINFO
    property pwszLiteralValue : Win32cr::Foundation::PWSTR
    property pwszInvalidChars : Win32cr::Foundation::PWSTR
    property pwszInvalidStartingChars : Win32cr::Foundation::PWSTR
    property lt : UInt32
    property fSupported : Win32cr::Foundation::BOOL
    property cchMaxLen : UInt32
    def initialize(@pwszLiteralValue : Win32cr::Foundation::PWSTR, @pwszInvalidChars : Win32cr::Foundation::PWSTR, @pwszInvalidStartingChars : Win32cr::Foundation::PWSTR, @lt : UInt32, @fSupported : Win32cr::Foundation::BOOL, @cchMaxLen : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct ERRORINFO
    property hrError : Win32cr::Foundation::HRESULT
    property dwMinor : UInt32
    property clsid : LibC::GUID
    property iid : LibC::GUID
    property dispid : Int32
    def initialize(@hrError : Win32cr::Foundation::HRESULT, @dwMinor : UInt32, @clsid : LibC::GUID, @iid : LibC::GUID, @dispid : Int32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBROWWATCHRANGE
    property hRegion : LibC::UIntPtrT
    property eChangeKind : UInt32
    property hRow : LibC::UIntPtrT
    property iRow : LibC::UIntPtrT
    def initialize(@hRegion : LibC::UIntPtrT, @eChangeKind : UInt32, @hRow : LibC::UIntPtrT, @iRow : LibC::UIntPtrT)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct DBCOST
    property eKind : UInt32
    property dwUnits : UInt32
    property lValue : Int32
    def initialize(@eKind : UInt32, @dwUnits : UInt32, @lValue : Int32)
    end
  end
  {% end %}

  @[Extern]
  record IWordSinkVtbl,
    query_interface : Proc(IWordSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWordSink*, UInt32),
    release : Proc(IWordSink*, UInt32),
    put_word : Proc(IWordSink*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    put_alt_word : Proc(IWordSink*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    start_alt_phrase : Proc(IWordSink*, Win32cr::Foundation::HRESULT),
    end_alt_phrase : Proc(IWordSink*, Win32cr::Foundation::HRESULT),
    put_break : Proc(IWordSink*, Win32cr::Storage::IndexServer::WORDREP_BREAK_TYPE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWordSink, lpVtbl : IWordSinkVtbl* do
    GUID = LibC::GUID.new(0xcc907054_u32, 0xc058_u16, 0x101a_u16, StaticArray[0xb5_u8, 0x54_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x33_u8, 0xb0_u8, 0xe6_u8])
    def query_interface(this : IWordSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWordSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWordSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_word(this : IWordSink*, cwc : UInt32, pwcInBuf : Win32cr::Foundation::PWSTR, cwcSrcLen : UInt32, cwcSrcPos : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_word.call(this, cwc, pwcInBuf, cwcSrcLen, cwcSrcPos)
    end
    def put_alt_word(this : IWordSink*, cwc : UInt32, pwcInBuf : Win32cr::Foundation::PWSTR, cwcSrcLen : UInt32, cwcSrcPos : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_alt_word.call(this, cwc, pwcInBuf, cwcSrcLen, cwcSrcPos)
    end
    def start_alt_phrase(this : IWordSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_alt_phrase.call(this)
    end
    def end_alt_phrase(this : IWordSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_alt_phrase.call(this)
    end
    def put_break(this : IWordSink*, breakType : Win32cr::Storage::IndexServer::WORDREP_BREAK_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_break.call(this, breakType)
    end

  end

  @[Extern]
  record IWordBreakerVtbl,
    query_interface : Proc(IWordBreaker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWordBreaker*, UInt32),
    release : Proc(IWordBreaker*, UInt32),
    init : Proc(IWordBreaker*, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    break_text : Proc(IWordBreaker*, Win32cr::System::Search::TEXT_SOURCE*, Void*, Void*, Win32cr::Foundation::HRESULT),
    compose_phrase : Proc(IWordBreaker*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_license_to_use : Proc(IWordBreaker*, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWordBreaker, lpVtbl : IWordBreakerVtbl* do
    GUID = LibC::GUID.new(0xd53552c8_u32, 0x77e3_u16, 0x101a_u16, StaticArray[0xb5_u8, 0x52_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x33_u8, 0xb0_u8, 0xe6_u8])
    def query_interface(this : IWordBreaker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWordBreaker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWordBreaker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IWordBreaker*, fQuery : Win32cr::Foundation::BOOL, ulMaxTokenSize : UInt32, pfLicense : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, fQuery, ulMaxTokenSize, pfLicense)
    end
    def break_text(this : IWordBreaker*, pTextSource : Win32cr::System::Search::TEXT_SOURCE*, pWordSink : Void*, pPhraseSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.break_text.call(this, pTextSource, pWordSink, pPhraseSink)
    end
    def compose_phrase(this : IWordBreaker*, pwcNoun : Win32cr::Foundation::PWSTR, cwcNoun : UInt32, pwcModifier : Win32cr::Foundation::PWSTR, cwcModifier : UInt32, ulAttachmentType : UInt32, pwcPhrase : Win32cr::Foundation::PWSTR, pcwcPhrase : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compose_phrase.call(this, pwcNoun, cwcNoun, pwcModifier, cwcModifier, ulAttachmentType, pwcPhrase, pcwcPhrase)
    end
    def get_license_to_use(this : IWordBreaker*, ppwcsLicense : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_to_use.call(this, ppwcsLicense)
    end

  end

  @[Extern]
  record IWordFormSinkVtbl,
    query_interface : Proc(IWordFormSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWordFormSink*, UInt32),
    release : Proc(IWordFormSink*, UInt32),
    put_alt_word : Proc(IWordFormSink*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    put_word : Proc(IWordFormSink*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWordFormSink, lpVtbl : IWordFormSinkVtbl* do
    GUID = LibC::GUID.new(0xfe77c330_u32, 0x7f42_u16, 0x11ce_u16, StaticArray[0xbe_u8, 0x57_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x51_u8, 0xfe_u8, 0x20_u8])
    def query_interface(this : IWordFormSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWordFormSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWordFormSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_alt_word(this : IWordFormSink*, pwcInBuf : Win32cr::Foundation::PWSTR, cwc : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_alt_word.call(this, pwcInBuf, cwc)
    end
    def put_word(this : IWordFormSink*, pwcInBuf : Win32cr::Foundation::PWSTR, cwc : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_word.call(this, pwcInBuf, cwc)
    end

  end

  @[Extern]
  record IStemmerVtbl,
    query_interface : Proc(IStemmer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStemmer*, UInt32),
    release : Proc(IStemmer*, UInt32),
    init : Proc(IStemmer*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    generate_word_forms : Proc(IStemmer*, Win32cr::Foundation::PWSTR, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_license_to_use : Proc(IStemmer*, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IStemmer, lpVtbl : IStemmerVtbl* do
    GUID = LibC::GUID.new(0xefbaf140_u32, 0x7f42_u16, 0x11ce_u16, StaticArray[0xbe_u8, 0x57_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x51_u8, 0xfe_u8, 0x20_u8])
    def query_interface(this : IStemmer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStemmer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStemmer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IStemmer*, ulMaxTokenSize : UInt32, pfLicense : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, ulMaxTokenSize, pfLicense)
    end
    def generate_word_forms(this : IStemmer*, pwcInBuf : Win32cr::Foundation::PWSTR, cwc : UInt32, pStemSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_word_forms.call(this, pwcInBuf, cwc, pStemSink)
    end
    def get_license_to_use(this : IStemmer*, ppwcsLicense : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_to_use.call(this, ppwcsLicense)
    end

  end

  @[Extern]
  record ISimpleCommandCreatorVtbl,
    query_interface : Proc(ISimpleCommandCreator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISimpleCommandCreator*, UInt32),
    release : Proc(ISimpleCommandCreator*, UInt32),
    create_i_command : Proc(ISimpleCommandCreator*, Void**, Void*, Win32cr::Foundation::HRESULT),
    verify_catalog : Proc(ISimpleCommandCreator*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_default_catalog : Proc(ISimpleCommandCreator*, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISimpleCommandCreator, lpVtbl : ISimpleCommandCreatorVtbl* do
    GUID = LibC::GUID.new(0x5e341ab7_u32, 0x2d0_u16, 0x11d1_u16, StaticArray[0x90_u8, 0xc_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x6_u8, 0x37_u8, 0x96_u8])
    def query_interface(this : ISimpleCommandCreator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISimpleCommandCreator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISimpleCommandCreator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_i_command(this : ISimpleCommandCreator*, ppIUnknown : Void**, pOuterUnk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_i_command.call(this, ppIUnknown, pOuterUnk)
    end
    def verify_catalog(this : ISimpleCommandCreator*, pwszMachine : Win32cr::Foundation::PWSTR, pwszCatalogName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_catalog.call(this, pwszMachine, pwszCatalogName)
    end
    def get_default_catalog(this : ISimpleCommandCreator*, pwszCatalogName : Win32cr::Foundation::PWSTR, cwcIn : UInt32, pcwcOut : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_catalog.call(this, pwszCatalogName, cwcIn, pcwcOut)
    end

  end

  @[Extern]
  record IColumnMapperVtbl,
    query_interface : Proc(IColumnMapper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IColumnMapper*, UInt32),
    release : Proc(IColumnMapper*, UInt32),
    get_prop_info_from_name : Proc(IColumnMapper*, Win32cr::Foundation::PWSTR, Win32cr::Storage::IndexServer::DBID**, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_prop_info_from_id : Proc(IColumnMapper*, Win32cr::Storage::IndexServer::DBID*, UInt16**, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_prop_info : Proc(IColumnMapper*, UInt32, UInt16**, Win32cr::Storage::IndexServer::DBID**, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    is_map_up_to_date : Proc(IColumnMapper*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IColumnMapper, lpVtbl : IColumnMapperVtbl* do
    GUID = LibC::GUID.new(0xb63e37a_u32, 0x9ccc_u16, 0x11d0_u16, StaticArray[0xbc_u8, 0xdb_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xcc_u8, 0xce_u8, 0x4_u8])
    def query_interface(this : IColumnMapper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IColumnMapper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IColumnMapper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_prop_info_from_name(this : IColumnMapper*, wcsPropName : Win32cr::Foundation::PWSTR, ppPropId : Win32cr::Storage::IndexServer::DBID**, pPropType : UInt16*, puiWidth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prop_info_from_name.call(this, wcsPropName, ppPropId, pPropType, puiWidth)
    end
    def get_prop_info_from_id(this : IColumnMapper*, pPropId : Win32cr::Storage::IndexServer::DBID*, pwcsName : UInt16**, pPropType : UInt16*, puiWidth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prop_info_from_id.call(this, pPropId, pwcsName, pPropType, puiWidth)
    end
    def enum_prop_info(this : IColumnMapper*, iEntry : UInt32, pwcsName : UInt16**, ppPropId : Win32cr::Storage::IndexServer::DBID**, pPropType : UInt16*, puiWidth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_prop_info.call(this, iEntry, pwcsName, ppPropId, pPropType, puiWidth)
    end
    def is_map_up_to_date(this : IColumnMapper*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_map_up_to_date.call(this)
    end

  end

  @[Extern]
  record IColumnMapperCreatorVtbl,
    query_interface : Proc(IColumnMapperCreator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IColumnMapperCreator*, UInt32),
    release : Proc(IColumnMapperCreator*, UInt32),
    get_column_mapper : Proc(IColumnMapperCreator*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IColumnMapperCreator, lpVtbl : IColumnMapperCreatorVtbl* do
    GUID = LibC::GUID.new(0xb63e37b_u32, 0x9ccc_u16, 0x11d0_u16, StaticArray[0xbc_u8, 0xdb_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xcc_u8, 0xce_u8, 0x4_u8])
    def query_interface(this : IColumnMapperCreator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IColumnMapperCreator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IColumnMapperCreator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_column_mapper(this : IColumnMapperCreator*, wcsMachineName : Win32cr::Foundation::PWSTR, wcsCatalogName : Win32cr::Foundation::PWSTR, ppColumnMapper : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_mapper.call(this, wcsMachineName, wcsCatalogName, ppColumnMapper)
    end

  end

  @[Extern]
  record ILoadFilterVtbl,
    query_interface : Proc(ILoadFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ILoadFilter*, UInt32),
    release : Proc(ILoadFilter*, UInt32),
    load_i_filter : Proc(ILoadFilter*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::FILTERED_DATA_SOURCES*, Void*, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT),
    load_i_filter_from_storage : Proc(ILoadFilter*, Void*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT),
    load_i_filter_from_stream : Proc(ILoadFilter*, Void*, Win32cr::System::Search::FILTERED_DATA_SOURCES*, Void*, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ILoadFilter, lpVtbl : ILoadFilterVtbl* do
    GUID = LibC::GUID.new(0xc7310722_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x4f_u8])
    def query_interface(this : ILoadFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ILoadFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ILoadFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def load_i_filter(this : ILoadFilter*, pwcsPath : Win32cr::Foundation::PWSTR, pFilteredSources : Win32cr::System::Search::FILTERED_DATA_SOURCES*, pUnkOuter : Void*, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter.call(this, pwcsPath, pFilteredSources, pUnkOuter, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end
    def load_i_filter_from_storage(this : ILoadFilter*, pStg : Void*, pUnkOuter : Void*, pwcsOverride : Win32cr::Foundation::PWSTR, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter_from_storage.call(this, pStg, pUnkOuter, pwcsOverride, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end
    def load_i_filter_from_stream(this : ILoadFilter*, pStm : Void*, pFilteredSources : Win32cr::System::Search::FILTERED_DATA_SOURCES*, pUnkOuter : Void*, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter_from_stream.call(this, pStm, pFilteredSources, pUnkOuter, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end

  end

  @[Extern]
  record ILoadFilterWithPrivateComActivationVtbl,
    query_interface : Proc(ILoadFilterWithPrivateComActivation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ILoadFilterWithPrivateComActivation*, UInt32),
    release : Proc(ILoadFilterWithPrivateComActivation*, UInt32),
    load_i_filter : Proc(ILoadFilterWithPrivateComActivation*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::FILTERED_DATA_SOURCES*, Void*, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT),
    load_i_filter_from_storage : Proc(ILoadFilterWithPrivateComActivation*, Void*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT),
    load_i_filter_from_stream : Proc(ILoadFilterWithPrivateComActivation*, Void*, Win32cr::System::Search::FILTERED_DATA_SOURCES*, Void*, Win32cr::Foundation::BOOL, LibC::GUID*, Int32*, UInt16**, Void**, Win32cr::Foundation::HRESULT),
    load_i_filter_with_private_com_activation : Proc(ILoadFilterWithPrivateComActivation*, Win32cr::System::Search::FILTERED_DATA_SOURCES*, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::BOOL*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ILoadFilterWithPrivateComActivation, lpVtbl : ILoadFilterWithPrivateComActivationVtbl* do
    GUID = LibC::GUID.new(0x40bdbd34_u32, 0x780b_u16, 0x48d3_u16, StaticArray[0x9b_u8, 0xb6_u8, 0x12_u8, 0xeb_u8, 0xd4_u8, 0xad_u8, 0x2e_u8, 0x75_u8])
    def query_interface(this : ILoadFilterWithPrivateComActivation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ILoadFilterWithPrivateComActivation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ILoadFilterWithPrivateComActivation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def load_i_filter(this : ILoadFilterWithPrivateComActivation*, pwcsPath : Win32cr::Foundation::PWSTR, pFilteredSources : Win32cr::System::Search::FILTERED_DATA_SOURCES*, pUnkOuter : Void*, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter.call(this, pwcsPath, pFilteredSources, pUnkOuter, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end
    def load_i_filter_from_storage(this : ILoadFilterWithPrivateComActivation*, pStg : Void*, pUnkOuter : Void*, pwcsOverride : Win32cr::Foundation::PWSTR, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter_from_storage.call(this, pStg, pUnkOuter, pwcsOverride, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end
    def load_i_filter_from_stream(this : ILoadFilterWithPrivateComActivation*, pStm : Void*, pFilteredSources : Win32cr::System::Search::FILTERED_DATA_SOURCES*, pUnkOuter : Void*, fUseDefault : Win32cr::Foundation::BOOL, pFilterClsid : LibC::GUID*, search_dec_size : Int32*, pwcsSearchDesc : UInt16**, ppIFilt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter_from_stream.call(this, pStm, pFilteredSources, pUnkOuter, fUseDefault, pFilterClsid, search_dec_size, pwcsSearchDesc, ppIFilt)
    end
    def load_i_filter_with_private_com_activation(this : ILoadFilterWithPrivateComActivation*, filteredSources : Win32cr::System::Search::FILTERED_DATA_SOURCES*, useDefault : Win32cr::Foundation::BOOL, filterClsid : LibC::GUID*, isFilterPrivateComActivated : Win32cr::Foundation::BOOL*, filterObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_i_filter_with_private_com_activation.call(this, filteredSources, useDefault, filterClsid, isFilterPrivateComActivated, filterObj)
    end

  end

  @[Extern]
  record IRichChunkVtbl,
    query_interface : Proc(IRichChunk*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRichChunk*, UInt32),
    release : Proc(IRichChunk*, UInt32),
    get_data : Proc(IRichChunk*, UInt32*, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRichChunk, lpVtbl : IRichChunkVtbl* do
    GUID = LibC::GUID.new(0x4fdef69c_u32, 0xdbc9_u16, 0x454e_u16, StaticArray[0x99_u8, 0x10_u8, 0xb3_u8, 0x4f_u8, 0x3c_u8, 0x64_u8, 0xb5_u8, 0x10_u8])
    def query_interface(this : IRichChunk*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRichChunk*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRichChunk*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data(this : IRichChunk*, pFirstPos : UInt32*, pLength : UInt32*, ppsz : Win32cr::Foundation::PWSTR*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pFirstPos, pLength, ppsz, pValue)
    end

  end

  @[Extern]
  record IConditionVtbl,
    query_interface : Proc(ICondition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICondition*, UInt32),
    release : Proc(ICondition*, UInt32),
    get_class_id : Proc(ICondition*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_dirty : Proc(ICondition*, Win32cr::Foundation::HRESULT),
    load : Proc(ICondition*, Void*, Win32cr::Foundation::HRESULT),
    save : Proc(ICondition*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_size_max : Proc(ICondition*, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    get_condition_type : Proc(ICondition*, Win32cr::System::Search::Common::CONDITION_TYPE*, Win32cr::Foundation::HRESULT),
    get_sub_conditions : Proc(ICondition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_comparison_info : Proc(ICondition*, Win32cr::Foundation::PWSTR*, Win32cr::System::Search::Common::CONDITION_OPERATION*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_value_type : Proc(ICondition*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_value_normalization : Proc(ICondition*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_input_terms : Proc(ICondition*, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(ICondition*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICondition, lpVtbl : IConditionVtbl* do
    GUID = LibC::GUID.new(0xfc988d4_u32, 0xc935_u16, 0x4b97_u16, StaticArray[0xa9_u8, 0x73_u8, 0x46_u8, 0x28_u8, 0x2e_u8, 0xa1_u8, 0x75_u8, 0xc8_u8])
    def query_interface(this : ICondition*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICondition*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICondition*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : ICondition*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def is_dirty(this : ICondition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_dirty.call(this)
    end
    def load(this : ICondition*, pStm : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pStm)
    end
    def save(this : ICondition*, pStm : Void*, fClearDirty : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pStm, fClearDirty)
    end
    def get_size_max(this : ICondition*, pcbSize : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size_max.call(this, pcbSize)
    end
    def get_condition_type(this : ICondition*, pNodeType : Win32cr::System::Search::Common::CONDITION_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_condition_type.call(this, pNodeType)
    end
    def get_sub_conditions(this : ICondition*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_conditions.call(this, riid, ppv)
    end
    def get_comparison_info(this : ICondition*, ppszPropertyName : Win32cr::Foundation::PWSTR*, pcop : Win32cr::System::Search::Common::CONDITION_OPERATION*, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_comparison_info.call(this, ppszPropertyName, pcop, ppropvar)
    end
    def get_value_type(this : ICondition*, ppszValueTypeName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_type.call(this, ppszValueTypeName)
    end
    def get_value_normalization(this : ICondition*, ppszNormalization : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_normalization.call(this, ppszNormalization)
    end
    def get_input_terms(this : ICondition*, ppPropertyTerm : Void**, ppOperationTerm : Void**, ppValueTerm : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_terms.call(this, ppPropertyTerm, ppOperationTerm, ppValueTerm)
    end
    def clone(this : ICondition*, ppc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppc)
    end

  end

  @[Extern]
  record ICondition2Vtbl,
    query_interface : Proc(ICondition2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICondition2*, UInt32),
    release : Proc(ICondition2*, UInt32),
    get_class_id : Proc(ICondition2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_dirty : Proc(ICondition2*, Win32cr::Foundation::HRESULT),
    load : Proc(ICondition2*, Void*, Win32cr::Foundation::HRESULT),
    save : Proc(ICondition2*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_size_max : Proc(ICondition2*, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    get_condition_type : Proc(ICondition2*, Win32cr::System::Search::Common::CONDITION_TYPE*, Win32cr::Foundation::HRESULT),
    get_sub_conditions : Proc(ICondition2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_comparison_info : Proc(ICondition2*, Win32cr::Foundation::PWSTR*, Win32cr::System::Search::Common::CONDITION_OPERATION*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_value_type : Proc(ICondition2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_value_normalization : Proc(ICondition2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_input_terms : Proc(ICondition2*, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(ICondition2*, Void**, Win32cr::Foundation::HRESULT),
    get_locale : Proc(ICondition2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_leaf_condition_info : Proc(ICondition2*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::Common::CONDITION_OPERATION*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICondition2, lpVtbl : ICondition2Vtbl* do
    GUID = LibC::GUID.new(0xdb8851d_u32, 0x2e5b_u16, 0x47eb_u16, StaticArray[0x92_u8, 0x8_u8, 0xd2_u8, 0x8c_u8, 0x32_u8, 0x5a_u8, 0x1_u8, 0xd7_u8])
    def query_interface(this : ICondition2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICondition2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICondition2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : ICondition2*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def is_dirty(this : ICondition2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_dirty.call(this)
    end
    def load(this : ICondition2*, pStm : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pStm)
    end
    def save(this : ICondition2*, pStm : Void*, fClearDirty : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pStm, fClearDirty)
    end
    def get_size_max(this : ICondition2*, pcbSize : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size_max.call(this, pcbSize)
    end
    def get_condition_type(this : ICondition2*, pNodeType : Win32cr::System::Search::Common::CONDITION_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_condition_type.call(this, pNodeType)
    end
    def get_sub_conditions(this : ICondition2*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_conditions.call(this, riid, ppv)
    end
    def get_comparison_info(this : ICondition2*, ppszPropertyName : Win32cr::Foundation::PWSTR*, pcop : Win32cr::System::Search::Common::CONDITION_OPERATION*, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_comparison_info.call(this, ppszPropertyName, pcop, ppropvar)
    end
    def get_value_type(this : ICondition2*, ppszValueTypeName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_type.call(this, ppszValueTypeName)
    end
    def get_value_normalization(this : ICondition2*, ppszNormalization : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_normalization.call(this, ppszNormalization)
    end
    def get_input_terms(this : ICondition2*, ppPropertyTerm : Void**, ppOperationTerm : Void**, ppValueTerm : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_terms.call(this, ppPropertyTerm, ppOperationTerm, ppValueTerm)
    end
    def clone(this : ICondition2*, ppc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppc)
    end
    def get_locale(this : ICondition2*, ppszLocaleName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locale.call(this, ppszLocaleName)
    end
    def get_leaf_condition_info(this : ICondition2*, ppropkey : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, pcop : Win32cr::System::Search::Common::CONDITION_OPERATION*, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_leaf_condition_info.call(this, ppropkey, pcop, ppropvar)
    end

  end

  @[Extern]
  record IAccessorVtbl,
    query_interface : Proc(IAccessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAccessor*, UInt32),
    release : Proc(IAccessor*, UInt32),
    add_ref_accessor : Proc(IAccessor*, LibC::UIntPtrT, UInt32*, Win32cr::Foundation::HRESULT),
    create_accessor : Proc(IAccessor*, UInt32, LibC::UIntPtrT, Win32cr::System::Search::DBBINDING*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_bindings : Proc(IAccessor*, LibC::UIntPtrT, UInt32*, LibC::UIntPtrT*, Win32cr::System::Search::DBBINDING**, Win32cr::Foundation::HRESULT),
    release_accessor : Proc(IAccessor*, LibC::UIntPtrT, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAccessor, lpVtbl : IAccessorVtbl* do
    GUID = LibC::GUID.new(0xc733a8c_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IAccessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAccessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAccessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_ref_accessor(this : IAccessor*, hAccessor : LibC::UIntPtrT, pcRefCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_accessor.call(this, hAccessor, pcRefCount)
    end
    def create_accessor(this : IAccessor*, dwAccessorFlags : UInt32, cBindings : LibC::UIntPtrT, rgBindings : Win32cr::System::Search::DBBINDING*, cbRowSize : LibC::UIntPtrT, phAccessor : LibC::UIntPtrT*, rgStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_accessor.call(this, dwAccessorFlags, cBindings, rgBindings, cbRowSize, phAccessor, rgStatus)
    end
    def get_bindings(this : IAccessor*, hAccessor : LibC::UIntPtrT, pdwAccessorFlags : UInt32*, pcBindings : LibC::UIntPtrT*, prgBindings : Win32cr::System::Search::DBBINDING**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bindings.call(this, hAccessor, pdwAccessorFlags, pcBindings, prgBindings)
    end
    def release_accessor(this : IAccessor*, hAccessor : LibC::UIntPtrT, pcRefCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_accessor.call(this, hAccessor, pcRefCount)
    end

  end

  @[Extern]
  record IRowsetVtbl,
    query_interface : Proc(IRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowset*, UInt32),
    release : Proc(IRowset*, UInt32),
    add_ref_rows : Proc(IRowset*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_data : Proc(IRowset*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    get_next_rows : Proc(IRowset*, LibC::UIntPtrT, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT),
    release_rows : Proc(IRowset*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    restart_position : Proc(IRowset*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowset, lpVtbl : IRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a7c_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_ref_rows(this : IRowset*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_rows.call(this, cRows, rghRows, rgRefCounts, rgRowStatus)
    end
    def get_data(this : IRowset*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, hRow, hAccessor, pData)
    end
    def get_next_rows(this : IRowset*, hReserved : LibC::UIntPtrT, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_rows.call(this, hReserved, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end
    def release_rows(this : IRowset*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRowOptions : UInt32*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_rows.call(this, cRows, rghRows, rgRowOptions, rgRefCounts, rgRowStatus)
    end
    def restart_position(this : IRowset*, hReserved : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restart_position.call(this, hReserved)
    end

  end

  @[Extern]
  record IRowsetInfoVtbl,
    query_interface : Proc(IRowsetInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetInfo*, UInt32),
    release : Proc(IRowsetInfo*, UInt32),
    get_properties : Proc(IRowsetInfo*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    get_referenced_rowset : Proc(IRowsetInfo*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_specification : Proc(IRowsetInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetInfo, lpVtbl : IRowsetInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a55_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IRowsetInfo*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end
    def get_referenced_rowset(this : IRowsetInfo*, iOrdinal : LibC::UIntPtrT, riid : LibC::GUID*, ppReferencedRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_referenced_rowset.call(this, iOrdinal, riid, ppReferencedRowset)
    end
    def get_specification(this : IRowsetInfo*, riid : LibC::GUID*, ppSpecification : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specification.call(this, riid, ppSpecification)
    end

  end

  @[Extern]
  record IRowsetLocateVtbl,
    query_interface : Proc(IRowsetLocate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetLocate*, UInt32),
    release : Proc(IRowsetLocate*, UInt32),
    add_ref_rows : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_data : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    get_next_rows : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT),
    release_rows : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    restart_position : Proc(IRowsetLocate*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    compare : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::UIntPtrT, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_rows_at : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT),
    get_rows_by_bookmark : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt8**, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    hash : Proc(IRowsetLocate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt8**, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetLocate, lpVtbl : IRowsetLocateVtbl* do
    GUID = LibC::GUID.new(0xc733a7d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetLocate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetLocate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetLocate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_ref_rows(this : IRowsetLocate*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_rows.call(this, cRows, rghRows, rgRefCounts, rgRowStatus)
    end
    def get_data(this : IRowsetLocate*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, hRow, hAccessor, pData)
    end
    def get_next_rows(this : IRowsetLocate*, hReserved : LibC::UIntPtrT, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_rows.call(this, hReserved, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end
    def release_rows(this : IRowsetLocate*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRowOptions : UInt32*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_rows.call(this, cRows, rghRows, rgRowOptions, rgRefCounts, rgRowStatus)
    end
    def restart_position(this : IRowsetLocate*, hReserved : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restart_position.call(this, hReserved)
    end
    def compare(this : IRowsetLocate*, hReserved : LibC::UIntPtrT, cbBookmark1 : LibC::UIntPtrT, pBookmark1 : UInt8*, cbBookmark2 : LibC::UIntPtrT, pBookmark2 : UInt8*, pComparison : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, hReserved, cbBookmark1, pBookmark1, cbBookmark2, pBookmark2, pComparison)
    end
    def get_rows_at(this : IRowsetLocate*, hReserved1 : LibC::UIntPtrT, hReserved2 : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rows_at.call(this, hReserved1, hReserved2, cbBookmark, pBookmark, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end
    def get_rows_by_bookmark(this : IRowsetLocate*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rgcbBookmarks : LibC::UIntPtrT*, rgpBookmarks : UInt8**, rghRows : LibC::UIntPtrT*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rows_by_bookmark.call(this, hReserved, cRows, rgcbBookmarks, rgpBookmarks, rghRows, rgRowStatus)
    end
    def hash(this : IRowsetLocate*, hReserved : LibC::UIntPtrT, cBookmarks : LibC::UIntPtrT, rgcbBookmarks : LibC::UIntPtrT*, rgpBookmarks : UInt8**, rgHashedValues : LibC::UIntPtrT*, rgBookmarkStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash.call(this, hReserved, cBookmarks, rgcbBookmarks, rgpBookmarks, rgHashedValues, rgBookmarkStatus)
    end

  end

  @[Extern]
  record IRowsetResynchVtbl,
    query_interface : Proc(IRowsetResynch*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetResynch*, UInt32),
    release : Proc(IRowsetResynch*, UInt32),
    get_visible_data : Proc(IRowsetResynch*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    resynch_rows : Proc(IRowsetResynch*, LibC::UIntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetResynch, lpVtbl : IRowsetResynchVtbl* do
    GUID = LibC::GUID.new(0xc733a84_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetResynch*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetResynch*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetResynch*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_visible_data(this : IRowsetResynch*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_visible_data.call(this, hRow, hAccessor, pData)
    end
    def resynch_rows(this : IRowsetResynch*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, pcRowsResynched : LibC::UIntPtrT*, prghRowsResynched : LibC::UIntPtrT**, prgRowStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resynch_rows.call(this, cRows, rghRows, pcRowsResynched, prghRowsResynched, prgRowStatus)
    end

  end

  @[Extern]
  record IRowsetScrollVtbl,
    query_interface : Proc(IRowsetScroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetScroll*, UInt32),
    release : Proc(IRowsetScroll*, UInt32),
    add_ref_rows : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_data : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    get_next_rows : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT),
    release_rows : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    restart_position : Proc(IRowsetScroll*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    compare : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::UIntPtrT, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_rows_at : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT),
    get_rows_by_bookmark : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt8**, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    hash : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt8**, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_approximate_position : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::UIntPtrT*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_rows_at_ratio : Proc(IRowsetScroll*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetScroll, lpVtbl : IRowsetScrollVtbl* do
    GUID = LibC::GUID.new(0xc733a7e_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetScroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetScroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetScroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_ref_rows(this : IRowsetScroll*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_rows.call(this, cRows, rghRows, rgRefCounts, rgRowStatus)
    end
    def get_data(this : IRowsetScroll*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, hRow, hAccessor, pData)
    end
    def get_next_rows(this : IRowsetScroll*, hReserved : LibC::UIntPtrT, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_rows.call(this, hReserved, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end
    def release_rows(this : IRowsetScroll*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRowOptions : UInt32*, rgRefCounts : UInt32*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_rows.call(this, cRows, rghRows, rgRowOptions, rgRefCounts, rgRowStatus)
    end
    def restart_position(this : IRowsetScroll*, hReserved : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restart_position.call(this, hReserved)
    end
    def compare(this : IRowsetScroll*, hReserved : LibC::UIntPtrT, cbBookmark1 : LibC::UIntPtrT, pBookmark1 : UInt8*, cbBookmark2 : LibC::UIntPtrT, pBookmark2 : UInt8*, pComparison : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, hReserved, cbBookmark1, pBookmark1, cbBookmark2, pBookmark2, pComparison)
    end
    def get_rows_at(this : IRowsetScroll*, hReserved1 : LibC::UIntPtrT, hReserved2 : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rows_at.call(this, hReserved1, hReserved2, cbBookmark, pBookmark, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end
    def get_rows_by_bookmark(this : IRowsetScroll*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rgcbBookmarks : LibC::UIntPtrT*, rgpBookmarks : UInt8**, rghRows : LibC::UIntPtrT*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rows_by_bookmark.call(this, hReserved, cRows, rgcbBookmarks, rgpBookmarks, rghRows, rgRowStatus)
    end
    def hash(this : IRowsetScroll*, hReserved : LibC::UIntPtrT, cBookmarks : LibC::UIntPtrT, rgcbBookmarks : LibC::UIntPtrT*, rgpBookmarks : UInt8**, rgHashedValues : LibC::UIntPtrT*, rgBookmarkStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash.call(this, hReserved, cBookmarks, rgcbBookmarks, rgpBookmarks, rgHashedValues, rgBookmarkStatus)
    end
    def get_approximate_position(this : IRowsetScroll*, hReserved : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, pulPosition : LibC::UIntPtrT*, pcRows : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_approximate_position.call(this, hReserved, cbBookmark, pBookmark, pulPosition, pcRows)
    end
    def get_rows_at_ratio(this : IRowsetScroll*, hReserved1 : LibC::UIntPtrT, hReserved2 : LibC::UIntPtrT, ulNumerator : LibC::UIntPtrT, ulDenominator : LibC::UIntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rows_at_ratio.call(this, hReserved1, hReserved2, ulNumerator, ulDenominator, cRows, pcRowsObtained, prghRows)
    end

  end

  @[Extern]
  record IChapteredRowsetVtbl,
    query_interface : Proc(IChapteredRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IChapteredRowset*, UInt32),
    release : Proc(IChapteredRowset*, UInt32),
    add_ref_chapter : Proc(IChapteredRowset*, LibC::UIntPtrT, UInt32*, Win32cr::Foundation::HRESULT),
    release_chapter : Proc(IChapteredRowset*, LibC::UIntPtrT, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IChapteredRowset, lpVtbl : IChapteredRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a93_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IChapteredRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IChapteredRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IChapteredRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_ref_chapter(this : IChapteredRowset*, hChapter : LibC::UIntPtrT, pcRefCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ref_chapter.call(this, hChapter, pcRefCount)
    end
    def release_chapter(this : IChapteredRowset*, hChapter : LibC::UIntPtrT, pcRefCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_chapter.call(this, hChapter, pcRefCount)
    end

  end

  @[Extern]
  record IRowsetFindVtbl,
    query_interface : Proc(IRowsetFind*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetFind*, UInt32),
    release : Proc(IRowsetFind*, UInt32),
    find_next_row : Proc(IRowsetFind*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, UInt32, LibC::UIntPtrT, UInt8*, LibC::IntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetFind, lpVtbl : IRowsetFindVtbl* do
    GUID = LibC::GUID.new(0xc733a9d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetFind*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetFind*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetFind*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def find_next_row(this : IRowsetFind*, hChapter : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pFindValue : Void*, compare_op : UInt32, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, lRowsOffset : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, prghRows : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_next_row.call(this, hChapter, hAccessor, pFindValue, compare_op, cbBookmark, pBookmark, lRowsOffset, cRows, pcRowsObtained, prghRows)
    end

  end

  @[Extern]
  record IRowPositionVtbl,
    query_interface : Proc(IRowPosition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowPosition*, UInt32),
    release : Proc(IRowPosition*, UInt32),
    clear_row_position : Proc(IRowPosition*, Win32cr::Foundation::HRESULT),
    get_row_position : Proc(IRowPosition*, LibC::UIntPtrT*, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_rowset : Proc(IRowPosition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IRowPosition*, Void*, Win32cr::Foundation::HRESULT),
    set_row_position : Proc(IRowPosition*, LibC::UIntPtrT, LibC::UIntPtrT, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowPosition, lpVtbl : IRowPositionVtbl* do
    GUID = LibC::GUID.new(0xc733a94_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowPosition*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowPosition*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowPosition*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def clear_row_position(this : IRowPosition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_row_position.call(this)
    end
    def get_row_position(this : IRowPosition*, phChapter : LibC::UIntPtrT*, phRow : LibC::UIntPtrT*, pdwPositionFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_row_position.call(this, phChapter, phRow, pdwPositionFlags)
    end
    def get_rowset(this : IRowPosition*, riid : LibC::GUID*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rowset.call(this, riid, ppRowset)
    end
    def initialize__(this : IRowPosition*, pRowset : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pRowset)
    end
    def set_row_position(this : IRowPosition*, hChapter : LibC::UIntPtrT, hRow : LibC::UIntPtrT, dwPositionFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_row_position.call(this, hChapter, hRow, dwPositionFlags)
    end

  end

  @[Extern]
  record IRowPositionChangeVtbl,
    query_interface : Proc(IRowPositionChange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowPositionChange*, UInt32),
    release : Proc(IRowPositionChange*, UInt32),
    on_row_position_change : Proc(IRowPositionChange*, UInt32, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowPositionChange, lpVtbl : IRowPositionChangeVtbl* do
    GUID = LibC::GUID.new(0x997a571_u32, 0x126e_u16, 0x11d0_u16, StaticArray[0x9f_u8, 0x8a_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa0_u8, 0x63_u8, 0x1e_u8])
    def query_interface(this : IRowPositionChange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowPositionChange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowPositionChange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_row_position_change(this : IRowPositionChange*, eReason : UInt32, ePhase : UInt32, fCantDeny : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_row_position_change.call(this, eReason, ePhase, fCantDeny)
    end

  end

  @[Extern]
  record IViewRowsetVtbl,
    query_interface : Proc(IViewRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewRowset*, UInt32),
    release : Proc(IViewRowset*, UInt32),
    get_specification : Proc(IViewRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_view_rowset : Proc(IViewRowset*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewRowset, lpVtbl : IViewRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a97_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IViewRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_specification(this : IViewRowset*, riid : LibC::GUID*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specification.call(this, riid, ppObject)
    end
    def open_view_rowset(this : IViewRowset*, pUnkOuter : Void*, riid : LibC::GUID*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_view_rowset.call(this, pUnkOuter, riid, ppRowset)
    end

  end

  @[Extern]
  record IViewChapterVtbl,
    query_interface : Proc(IViewChapter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewChapter*, UInt32),
    release : Proc(IViewChapter*, UInt32),
    get_specification : Proc(IViewChapter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_view_chapter : Proc(IViewChapter*, LibC::UIntPtrT, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewChapter, lpVtbl : IViewChapterVtbl* do
    GUID = LibC::GUID.new(0xc733a98_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IViewChapter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewChapter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewChapter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_specification(this : IViewChapter*, riid : LibC::GUID*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specification.call(this, riid, ppRowset)
    end
    def open_view_chapter(this : IViewChapter*, hSource : LibC::UIntPtrT, phViewChapter : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_view_chapter.call(this, hSource, phViewChapter)
    end

  end

  @[Extern]
  record IViewSortVtbl,
    query_interface : Proc(IViewSort*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewSort*, UInt32),
    release : Proc(IViewSort*, UInt32),
    get_sort_order : Proc(IViewSort*, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT),
    set_sort_order : Proc(IViewSort*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewSort, lpVtbl : IViewSortVtbl* do
    GUID = LibC::GUID.new(0xc733a9a_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IViewSort*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewSort*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewSort*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_sort_order(this : IViewSort*, pcValues : LibC::UIntPtrT*, prgColumns : LibC::UIntPtrT**, prgOrders : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sort_order.call(this, pcValues, prgColumns, prgOrders)
    end
    def set_sort_order(this : IViewSort*, cValues : LibC::UIntPtrT, rgColumns : LibC::UIntPtrT*, rgOrders : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sort_order.call(this, cValues, rgColumns, rgOrders)
    end

  end

  @[Extern]
  record IViewFilterVtbl,
    query_interface : Proc(IViewFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IViewFilter*, UInt32),
    release : Proc(IViewFilter*, UInt32),
    get_filter : Proc(IViewFilter*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32**, Void*, Win32cr::Foundation::HRESULT),
    get_filter_bindings : Proc(IViewFilter*, LibC::UIntPtrT*, Win32cr::System::Search::DBBINDING**, Win32cr::Foundation::HRESULT),
    set_filter : Proc(IViewFilter*, LibC::UIntPtrT, LibC::UIntPtrT, UInt32*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IViewFilter, lpVtbl : IViewFilterVtbl* do
    GUID = LibC::GUID.new(0xc733a9b_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IViewFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IViewFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IViewFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_filter(this : IViewFilter*, hAccessor : LibC::UIntPtrT, pcRows : LibC::UIntPtrT*, pCompareOps : UInt32**, pCriteriaData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter.call(this, hAccessor, pcRows, pCompareOps, pCriteriaData)
    end
    def get_filter_bindings(this : IViewFilter*, pcBindings : LibC::UIntPtrT*, prgBindings : Win32cr::System::Search::DBBINDING**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter_bindings.call(this, pcBindings, prgBindings)
    end
    def set_filter(this : IViewFilter*, hAccessor : LibC::UIntPtrT, cRows : LibC::UIntPtrT, compare_ops : UInt32*, pCriteriaData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filter.call(this, hAccessor, cRows, compare_ops, pCriteriaData)
    end

  end

  @[Extern]
  record IRowsetViewVtbl,
    query_interface : Proc(IRowsetView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetView*, UInt32),
    release : Proc(IRowsetView*, UInt32),
    create_view : Proc(IRowsetView*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_view : Proc(IRowsetView*, LibC::UIntPtrT, LibC::GUID*, LibC::UIntPtrT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetView, lpVtbl : IRowsetViewVtbl* do
    GUID = LibC::GUID.new(0xc733a99_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_view(this : IRowsetView*, pUnkOuter : Void*, riid : LibC::GUID*, ppView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_view.call(this, pUnkOuter, riid, ppView)
    end
    def get_view(this : IRowsetView*, hChapter : LibC::UIntPtrT, riid : LibC::GUID*, phChapterSource : LibC::UIntPtrT*, ppView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_view.call(this, hChapter, riid, phChapterSource, ppView)
    end

  end

  @[Extern]
  record IRowsetChangeVtbl,
    query_interface : Proc(IRowsetChange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetChange*, UInt32),
    release : Proc(IRowsetChange*, UInt32),
    delete_rows : Proc(IRowsetChange*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    set_data : Proc(IRowsetChange*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    insert_row : Proc(IRowsetChange*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetChange, lpVtbl : IRowsetChangeVtbl* do
    GUID = LibC::GUID.new(0xc733a05_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetChange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetChange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetChange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def delete_rows(this : IRowsetChange*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_rows.call(this, hReserved, cRows, rghRows, rgRowStatus)
    end
    def set_data(this : IRowsetChange*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data.call(this, hRow, hAccessor, pData)
    end
    def insert_row(this : IRowsetChange*, hReserved : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*, phRow : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_row.call(this, hReserved, hAccessor, pData, phRow)
    end

  end

  @[Extern]
  record IRowsetUpdateVtbl,
    query_interface : Proc(IRowsetUpdate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetUpdate*, UInt32),
    release : Proc(IRowsetUpdate*, UInt32),
    delete_rows : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    set_data : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    insert_row : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_original_data : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    get_pending_rows : Proc(IRowsetUpdate*, LibC::UIntPtrT, UInt32, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT),
    get_row_status : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::HRESULT),
    undo : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT),
    update : Proc(IRowsetUpdate*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetUpdate, lpVtbl : IRowsetUpdateVtbl* do
    GUID = LibC::GUID.new(0xc733a6d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetUpdate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetUpdate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetUpdate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def delete_rows(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgRowStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_rows.call(this, hReserved, cRows, rghRows, rgRowStatus)
    end
    def set_data(this : IRowsetUpdate*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data.call(this, hRow, hAccessor, pData)
    end
    def insert_row(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*, phRow : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_row.call(this, hReserved, hAccessor, pData, phRow)
    end
    def get_original_data(this : IRowsetUpdate*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_data.call(this, hRow, hAccessor, pData)
    end
    def get_pending_rows(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, dwRowStatus : UInt32, pcPendingRows : LibC::UIntPtrT*, prgPendingRows : LibC::UIntPtrT**, prgPendingStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pending_rows.call(this, hReserved, dwRowStatus, pcPendingRows, prgPendingRows, prgPendingStatus)
    end
    def get_row_status(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, rgPendingStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_row_status.call(this, hReserved, cRows, rghRows, rgPendingStatus)
    end
    def undo(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, pcRowsUndone : LibC::UIntPtrT*, prgRowsUndone : LibC::UIntPtrT**, prgRowStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.undo.call(this, hReserved, cRows, rghRows, pcRowsUndone, prgRowsUndone, prgRowStatus)
    end
    def update(this : IRowsetUpdate*, hReserved : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, pcRows : LibC::UIntPtrT*, prgRows : LibC::UIntPtrT**, prgRowStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, hReserved, cRows, rghRows, pcRows, prgRows, prgRowStatus)
    end

  end

  @[Extern]
  record IRowsetIdentityVtbl,
    query_interface : Proc(IRowsetIdentity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetIdentity*, UInt32),
    release : Proc(IRowsetIdentity*, UInt32),
    is_same_row : Proc(IRowsetIdentity*, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetIdentity, lpVtbl : IRowsetIdentityVtbl* do
    GUID = LibC::GUID.new(0xc733a09_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetIdentity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetIdentity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetIdentity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_same_row(this : IRowsetIdentity*, hThisRow : LibC::UIntPtrT, hThatRow : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_same_row.call(this, hThisRow, hThatRow)
    end

  end

  @[Extern]
  record IRowsetNotifyVtbl,
    query_interface : Proc(IRowsetNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetNotify*, UInt32),
    release : Proc(IRowsetNotify*, UInt32),
    on_field_change : Proc(IRowsetNotify*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_row_change : Proc(IRowsetNotify*, Void*, LibC::UIntPtrT, LibC::UIntPtrT*, UInt32, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    on_rowset_change : Proc(IRowsetNotify*, Void*, UInt32, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetNotify, lpVtbl : IRowsetNotifyVtbl* do
    GUID = LibC::GUID.new(0xc733a83_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_field_change(this : IRowsetNotify*, pRowset : Void*, hRow : LibC::UIntPtrT, cColumns : LibC::UIntPtrT, rgColumns : LibC::UIntPtrT*, eReason : UInt32, ePhase : UInt32, fCantDeny : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_field_change.call(this, pRowset, hRow, cColumns, rgColumns, eReason, ePhase, fCantDeny)
    end
    def on_row_change(this : IRowsetNotify*, pRowset : Void*, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, eReason : UInt32, ePhase : UInt32, fCantDeny : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_row_change.call(this, pRowset, cRows, rghRows, eReason, ePhase, fCantDeny)
    end
    def on_rowset_change(this : IRowsetNotify*, pRowset : Void*, eReason : UInt32, ePhase : UInt32, fCantDeny : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_rowset_change.call(this, pRowset, eReason, ePhase, fCantDeny)
    end

  end

  @[Extern]
  record IRowsetIndexVtbl,
    query_interface : Proc(IRowsetIndex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetIndex*, UInt32),
    release : Proc(IRowsetIndex*, UInt32),
    get_index_info : Proc(IRowsetIndex*, LibC::UIntPtrT*, Win32cr::System::Search::DBINDEXCOLUMNDESC**, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    seek : Proc(IRowsetIndex*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_range : Proc(IRowsetIndex*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, LibC::UIntPtrT, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetIndex, lpVtbl : IRowsetIndexVtbl* do
    GUID = LibC::GUID.new(0xc733a82_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetIndex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetIndex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetIndex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_index_info(this : IRowsetIndex*, pcKeyColumns : LibC::UIntPtrT*, prgIndexColumnDesc : Win32cr::System::Search::DBINDEXCOLUMNDESC**, pcIndexPropertySets : UInt32*, prgIndexPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_info.call(this, pcKeyColumns, prgIndexColumnDesc, pcIndexPropertySets, prgIndexPropertySets)
    end
    def seek(this : IRowsetIndex*, hAccessor : LibC::UIntPtrT, cKeyValues : LibC::UIntPtrT, pData : Void*, dwSeekOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, hAccessor, cKeyValues, pData, dwSeekOptions)
    end
    def set_range(this : IRowsetIndex*, hAccessor : LibC::UIntPtrT, cStartKeyColumns : LibC::UIntPtrT, pStartData : Void*, cEndKeyColumns : LibC::UIntPtrT, pEndData : Void*, dwRangeOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_range.call(this, hAccessor, cStartKeyColumns, pStartData, cEndKeyColumns, pEndData, dwRangeOptions)
    end

  end

  @[Extern]
  record ICommandVtbl,
    query_interface : Proc(ICommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommand*, UInt32),
    release : Proc(ICommand*, UInt32),
    cancel : Proc(ICommand*, Win32cr::Foundation::HRESULT),
    execute : Proc(ICommand*, Void*, LibC::GUID*, Win32cr::System::Search::DBPARAMS*, LibC::IntPtrT*, Void**, Win32cr::Foundation::HRESULT),
    get_db_session : Proc(ICommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommand, lpVtbl : ICommandVtbl* do
    GUID = LibC::GUID.new(0xc733a63_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cancel(this : ICommand*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end
    def execute(this : ICommand*, pUnkOuter : Void*, riid : LibC::GUID*, pParams : Win32cr::System::Search::DBPARAMS*, pcRowsAffected : LibC::IntPtrT*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, pUnkOuter, riid, pParams, pcRowsAffected, ppRowset)
    end
    def get_db_session(this : ICommand*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_db_session.call(this, riid, ppSession)
    end

  end

  @[Extern]
  record IMultipleResultsVtbl,
    query_interface : Proc(IMultipleResults*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultipleResults*, UInt32),
    release : Proc(IMultipleResults*, UInt32),
    get_result : Proc(IMultipleResults*, Void*, LibC::IntPtrT, LibC::GUID*, LibC::IntPtrT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMultipleResults, lpVtbl : IMultipleResultsVtbl* do
    GUID = LibC::GUID.new(0xc733a90_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IMultipleResults*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultipleResults*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultipleResults*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_result(this : IMultipleResults*, pUnkOuter : Void*, lResultFlag : LibC::IntPtrT, riid : LibC::GUID*, pcRowsAffected : LibC::IntPtrT*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_result.call(this, pUnkOuter, lResultFlag, riid, pcRowsAffected, ppRowset)
    end

  end

  @[Extern]
  record IConvertTypeVtbl,
    query_interface : Proc(IConvertType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConvertType*, UInt32),
    release : Proc(IConvertType*, UInt32),
    can_convert : Proc(IConvertType*, UInt16, UInt16, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IConvertType, lpVtbl : IConvertTypeVtbl* do
    GUID = LibC::GUID.new(0xc733a88_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IConvertType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConvertType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConvertType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def can_convert(this : IConvertType*, wFromType : UInt16, wToType : UInt16, dwConvertFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_convert.call(this, wFromType, wToType, dwConvertFlags)
    end

  end

  @[Extern]
  record ICommandPrepareVtbl,
    query_interface : Proc(ICommandPrepare*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandPrepare*, UInt32),
    release : Proc(ICommandPrepare*, UInt32),
    prepare : Proc(ICommandPrepare*, UInt32, Win32cr::Foundation::HRESULT),
    unprepare : Proc(ICommandPrepare*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandPrepare, lpVtbl : ICommandPrepareVtbl* do
    GUID = LibC::GUID.new(0xc733a26_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandPrepare*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandPrepare*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandPrepare*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def prepare(this : ICommandPrepare*, cExpectedRuns : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this, cExpectedRuns)
    end
    def unprepare(this : ICommandPrepare*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unprepare.call(this)
    end

  end

  @[Extern]
  record ICommandPropertiesVtbl,
    query_interface : Proc(ICommandProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandProperties*, UInt32),
    release : Proc(ICommandProperties*, UInt32),
    get_properties : Proc(ICommandProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    set_properties : Proc(ICommandProperties*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandProperties, lpVtbl : ICommandPropertiesVtbl* do
    GUID = LibC::GUID.new(0xc733a79_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : ICommandProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end
    def set_properties(this : ICommandProperties*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record ICommandTextVtbl,
    query_interface : Proc(ICommandText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandText*, UInt32),
    release : Proc(ICommandText*, UInt32),
    cancel : Proc(ICommandText*, Win32cr::Foundation::HRESULT),
    execute : Proc(ICommandText*, Void*, LibC::GUID*, Win32cr::System::Search::DBPARAMS*, LibC::IntPtrT*, Void**, Win32cr::Foundation::HRESULT),
    get_db_session : Proc(ICommandText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_command_text : Proc(ICommandText*, LibC::GUID*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_command_text : Proc(ICommandText*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandText, lpVtbl : ICommandTextVtbl* do
    GUID = LibC::GUID.new(0xc733a27_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cancel(this : ICommandText*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end
    def execute(this : ICommandText*, pUnkOuter : Void*, riid : LibC::GUID*, pParams : Win32cr::System::Search::DBPARAMS*, pcRowsAffected : LibC::IntPtrT*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, pUnkOuter, riid, pParams, pcRowsAffected, ppRowset)
    end
    def get_db_session(this : ICommandText*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_db_session.call(this, riid, ppSession)
    end
    def get_command_text(this : ICommandText*, pguidDialect : LibC::GUID*, ppwszCommand : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command_text.call(this, pguidDialect, ppwszCommand)
    end
    def set_command_text(this : ICommandText*, rguidDialect : LibC::GUID*, pwszCommand : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command_text.call(this, rguidDialect, pwszCommand)
    end

  end

  @[Extern]
  record ICommandWithParametersVtbl,
    query_interface : Proc(ICommandWithParameters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandWithParameters*, UInt32),
    release : Proc(ICommandWithParameters*, UInt32),
    get_parameter_info : Proc(ICommandWithParameters*, LibC::UIntPtrT*, Win32cr::System::Search::DBPARAMINFO**, UInt16**, Win32cr::Foundation::HRESULT),
    map_parameter_names : Proc(ICommandWithParameters*, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    set_parameter_info : Proc(ICommandWithParameters*, LibC::UIntPtrT, LibC::UIntPtrT*, Win32cr::System::Search::DBPARAMBINDINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandWithParameters, lpVtbl : ICommandWithParametersVtbl* do
    GUID = LibC::GUID.new(0xc733a64_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandWithParameters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandWithParameters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandWithParameters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_parameter_info(this : ICommandWithParameters*, pcParams : LibC::UIntPtrT*, prgParamInfo : Win32cr::System::Search::DBPARAMINFO**, ppNamesBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_info.call(this, pcParams, prgParamInfo, ppNamesBuffer)
    end
    def map_parameter_names(this : ICommandWithParameters*, cParamNames : LibC::UIntPtrT, rgParamNames : Win32cr::Foundation::PWSTR*, rgParamOrdinals : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_parameter_names.call(this, cParamNames, rgParamNames, rgParamOrdinals)
    end
    def set_parameter_info(this : ICommandWithParameters*, cParams : LibC::UIntPtrT, rgParamOrdinals : LibC::UIntPtrT*, rgParamBindInfo : Win32cr::System::Search::DBPARAMBINDINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameter_info.call(this, cParams, rgParamOrdinals, rgParamBindInfo)
    end

  end

  @[Extern]
  record IColumnsRowsetVtbl,
    query_interface : Proc(IColumnsRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IColumnsRowset*, UInt32),
    release : Proc(IColumnsRowset*, UInt32),
    get_available_columns : Proc(IColumnsRowset*, LibC::UIntPtrT*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    get_columns_rowset : Proc(IColumnsRowset*, Void*, LibC::UIntPtrT, Win32cr::Storage::IndexServer::DBID*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IColumnsRowset, lpVtbl : IColumnsRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a10_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IColumnsRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IColumnsRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IColumnsRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_columns(this : IColumnsRowset*, pcOptColumns : LibC::UIntPtrT*, prgOptColumns : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_columns.call(this, pcOptColumns, prgOptColumns)
    end
    def get_columns_rowset(this : IColumnsRowset*, pUnkOuter : Void*, cOptColumns : LibC::UIntPtrT, rgOptColumns : Win32cr::Storage::IndexServer::DBID*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppColRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_columns_rowset.call(this, pUnkOuter, cOptColumns, rgOptColumns, riid, cPropertySets, rgPropertySets, ppColRowset)
    end

  end

  @[Extern]
  record IColumnsInfoVtbl,
    query_interface : Proc(IColumnsInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IColumnsInfo*, UInt32),
    release : Proc(IColumnsInfo*, UInt32),
    get_column_info : Proc(IColumnsInfo*, LibC::UIntPtrT*, Win32cr::System::Search::DBCOLUMNINFO**, UInt16**, Win32cr::Foundation::HRESULT),
    map_column_i_ds : Proc(IColumnsInfo*, LibC::UIntPtrT, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IColumnsInfo, lpVtbl : IColumnsInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a11_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IColumnsInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IColumnsInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IColumnsInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_column_info(this : IColumnsInfo*, pcColumns : LibC::UIntPtrT*, prgInfo : Win32cr::System::Search::DBCOLUMNINFO**, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_info.call(this, pcColumns, prgInfo, ppStringsBuffer)
    end
    def map_column_i_ds(this : IColumnsInfo*, cColumnIDs : LibC::UIntPtrT, rgColumnIDs : Win32cr::Storage::IndexServer::DBID*, rgColumns : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_column_i_ds.call(this, cColumnIDs, rgColumnIDs, rgColumns)
    end

  end

  @[Extern]
  record IDBCreateCommandVtbl,
    query_interface : Proc(IDBCreateCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBCreateCommand*, UInt32),
    release : Proc(IDBCreateCommand*, UInt32),
    create_command : Proc(IDBCreateCommand*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBCreateCommand, lpVtbl : IDBCreateCommandVtbl* do
    GUID = LibC::GUID.new(0xc733a1d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBCreateCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBCreateCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBCreateCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_command(this : IDBCreateCommand*, pUnkOuter : Void*, riid : LibC::GUID*, ppCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command.call(this, pUnkOuter, riid, ppCommand)
    end

  end

  @[Extern]
  record IDBCreateSessionVtbl,
    query_interface : Proc(IDBCreateSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBCreateSession*, UInt32),
    release : Proc(IDBCreateSession*, UInt32),
    create_session : Proc(IDBCreateSession*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBCreateSession, lpVtbl : IDBCreateSessionVtbl* do
    GUID = LibC::GUID.new(0xc733a5d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBCreateSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBCreateSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBCreateSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_session(this : IDBCreateSession*, pUnkOuter : Void*, riid : LibC::GUID*, ppDBSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, pUnkOuter, riid, ppDBSession)
    end

  end

  @[Extern]
  record ISourcesRowsetVtbl,
    query_interface : Proc(ISourcesRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISourcesRowset*, UInt32),
    release : Proc(ISourcesRowset*, UInt32),
    get_sources_rowset : Proc(ISourcesRowset*, Void*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISourcesRowset, lpVtbl : ISourcesRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a1e_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ISourcesRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISourcesRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISourcesRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_sources_rowset(this : ISourcesRowset*, pUnkOuter : Void*, riid : LibC::GUID*, cPropertySets : UInt32, rgProperties : Win32cr::System::Search::DBPROPSET*, ppSourcesRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sources_rowset.call(this, pUnkOuter, riid, cPropertySets, rgProperties, ppSourcesRowset)
    end

  end

  @[Extern]
  record IDBPropertiesVtbl,
    query_interface : Proc(IDBProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBProperties*, UInt32),
    release : Proc(IDBProperties*, UInt32),
    get_properties : Proc(IDBProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    get_property_info : Proc(IDBProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPINFOSET**, UInt16**, Win32cr::Foundation::HRESULT),
    set_properties : Proc(IDBProperties*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBProperties, lpVtbl : IDBPropertiesVtbl* do
    GUID = LibC::GUID.new(0xc733a8a_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IDBProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end
    def get_property_info(this : IDBProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertyInfoSets : UInt32*, prgPropertyInfoSets : Win32cr::System::Search::DBPROPINFOSET**, ppDescBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_info.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertyInfoSets, prgPropertyInfoSets, ppDescBuffer)
    end
    def set_properties(this : IDBProperties*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record IDBInitializeVtbl,
    query_interface : Proc(IDBInitialize*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBInitialize*, UInt32),
    release : Proc(IDBInitialize*, UInt32),
    initialize__ : Proc(IDBInitialize*, Win32cr::Foundation::HRESULT),
    uninitialize : Proc(IDBInitialize*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBInitialize, lpVtbl : IDBInitializeVtbl* do
    GUID = LibC::GUID.new(0xc733a8b_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBInitialize*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBInitialize*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBInitialize*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDBInitialize*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this)
    end
    def uninitialize(this : IDBInitialize*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninitialize.call(this)
    end

  end

  @[Extern]
  record IDBInfoVtbl,
    query_interface : Proc(IDBInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBInfo*, UInt32),
    release : Proc(IDBInfo*, UInt32),
    get_keywords : Proc(IDBInfo*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_literal_info : Proc(IDBInfo*, UInt32, UInt32*, UInt32*, Win32cr::System::Search::DBLITERALINFO**, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBInfo, lpVtbl : IDBInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a89_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_keywords(this : IDBInfo*, ppwszKeywords : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_keywords.call(this, ppwszKeywords)
    end
    def get_literal_info(this : IDBInfo*, cLiterals : UInt32, rgLiterals : UInt32*, pcLiteralInfo : UInt32*, prgLiteralInfo : Win32cr::System::Search::DBLITERALINFO**, ppCharBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_literal_info.call(this, cLiterals, rgLiterals, pcLiteralInfo, prgLiteralInfo, ppCharBuffer)
    end

  end

  @[Extern]
  record IDBDataSourceAdminVtbl,
    query_interface : Proc(IDBDataSourceAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBDataSourceAdmin*, UInt32),
    release : Proc(IDBDataSourceAdmin*, UInt32),
    create_data_source : Proc(IDBDataSourceAdmin*, UInt32, Win32cr::System::Search::DBPROPSET*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    destroy_data_source : Proc(IDBDataSourceAdmin*, Win32cr::Foundation::HRESULT),
    get_creation_properties : Proc(IDBDataSourceAdmin*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPINFOSET**, UInt16**, Win32cr::Foundation::HRESULT),
    modify_data_source : Proc(IDBDataSourceAdmin*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBDataSourceAdmin, lpVtbl : IDBDataSourceAdminVtbl* do
    GUID = LibC::GUID.new(0xc733a7a_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBDataSourceAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBDataSourceAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBDataSourceAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_data_source(this : IDBDataSourceAdmin*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, pUnkOuter : Void*, riid : LibC::GUID*, ppDBSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_data_source.call(this, cPropertySets, rgPropertySets, pUnkOuter, riid, ppDBSession)
    end
    def destroy_data_source(this : IDBDataSourceAdmin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destroy_data_source.call(this)
    end
    def get_creation_properties(this : IDBDataSourceAdmin*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertyInfoSets : UInt32*, prgPropertyInfoSets : Win32cr::System::Search::DBPROPINFOSET**, ppDescBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_creation_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertyInfoSets, prgPropertyInfoSets, ppDescBuffer)
    end
    def modify_data_source(this : IDBDataSourceAdmin*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.modify_data_source.call(this, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record IDBAsynchNotifyVtbl,
    query_interface : Proc(IDBAsynchNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBAsynchNotify*, UInt32),
    release : Proc(IDBAsynchNotify*, UInt32),
    on_low_resource : Proc(IDBAsynchNotify*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    on_progress : Proc(IDBAsynchNotify*, LibC::UIntPtrT, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_stop : Proc(IDBAsynchNotify*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBAsynchNotify, lpVtbl : IDBAsynchNotifyVtbl* do
    GUID = LibC::GUID.new(0xc733a96_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBAsynchNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBAsynchNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBAsynchNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_low_resource(this : IDBAsynchNotify*, dwReserved : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_low_resource.call(this, dwReserved)
    end
    def on_progress(this : IDBAsynchNotify*, hChapter : LibC::UIntPtrT, eOperation : UInt32, ulProgress : LibC::UIntPtrT, ulProgressMax : LibC::UIntPtrT, eAsynchPhase : UInt32, pwszStatusText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_progress.call(this, hChapter, eOperation, ulProgress, ulProgressMax, eAsynchPhase, pwszStatusText)
    end
    def on_stop(this : IDBAsynchNotify*, hChapter : LibC::UIntPtrT, eOperation : UInt32, hrStatus : Win32cr::Foundation::HRESULT, pwszStatusText : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_stop.call(this, hChapter, eOperation, hrStatus, pwszStatusText)
    end

  end

  @[Extern]
  record IDBAsynchStatusVtbl,
    query_interface : Proc(IDBAsynchStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBAsynchStatus*, UInt32),
    release : Proc(IDBAsynchStatus*, UInt32),
    abort : Proc(IDBAsynchStatus*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::HRESULT),
    get_status : Proc(IDBAsynchStatus*, LibC::UIntPtrT, UInt32, LibC::UIntPtrT*, LibC::UIntPtrT*, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBAsynchStatus, lpVtbl : IDBAsynchStatusVtbl* do
    GUID = LibC::GUID.new(0xc733a95_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBAsynchStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBAsynchStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBAsynchStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def abort(this : IDBAsynchStatus*, hChapter : LibC::UIntPtrT, eOperation : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this, hChapter, eOperation)
    end
    def get_status(this : IDBAsynchStatus*, hChapter : LibC::UIntPtrT, eOperation : UInt32, pulProgress : LibC::UIntPtrT*, pulProgressMax : LibC::UIntPtrT*, peAsynchPhase : UInt32*, ppwszStatusText : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, hChapter, eOperation, pulProgress, pulProgressMax, peAsynchPhase, ppwszStatusText)
    end

  end

  @[Extern]
  record ISessionPropertiesVtbl,
    query_interface : Proc(ISessionProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISessionProperties*, UInt32),
    release : Proc(ISessionProperties*, UInt32),
    get_properties : Proc(ISessionProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    set_properties : Proc(ISessionProperties*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISessionProperties, lpVtbl : ISessionPropertiesVtbl* do
    GUID = LibC::GUID.new(0xc733a85_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ISessionProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISessionProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISessionProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : ISessionProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end
    def set_properties(this : ISessionProperties*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record IIndexDefinitionVtbl,
    query_interface : Proc(IIndexDefinition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIndexDefinition*, UInt32),
    release : Proc(IIndexDefinition*, UInt32),
    create_index : Proc(IIndexDefinition*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT, Win32cr::System::Search::DBINDEXCOLUMNDESC*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    drop_index : Proc(IIndexDefinition*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IIndexDefinition, lpVtbl : IIndexDefinitionVtbl* do
    GUID = LibC::GUID.new(0xc733a68_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IIndexDefinition*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIndexDefinition*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIndexDefinition*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_index(this : IIndexDefinition*, pTableID : Win32cr::Storage::IndexServer::DBID*, pIndexID : Win32cr::Storage::IndexServer::DBID*, cIndexColumnDescs : LibC::UIntPtrT, rgIndexColumnDescs : Win32cr::System::Search::DBINDEXCOLUMNDESC*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppIndexID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_index.call(this, pTableID, pIndexID, cIndexColumnDescs, rgIndexColumnDescs, cPropertySets, rgPropertySets, ppIndexID)
    end
    def drop_index(this : IIndexDefinition*, pTableID : Win32cr::Storage::IndexServer::DBID*, pIndexID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_index.call(this, pTableID, pIndexID)
    end

  end

  @[Extern]
  record ITableDefinitionVtbl,
    query_interface : Proc(ITableDefinition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITableDefinition*, UInt32),
    release : Proc(ITableDefinition*, UInt32),
    create_table : Proc(ITableDefinition*, Void*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNDESC*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Storage::IndexServer::DBID**, Void**, Win32cr::Foundation::HRESULT),
    drop_table : Proc(ITableDefinition*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    add_column : Proc(ITableDefinition*, Win32cr::Storage::IndexServer::DBID*, Win32cr::System::Search::DBCOLUMNDESC*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    drop_column : Proc(ITableDefinition*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITableDefinition, lpVtbl : ITableDefinitionVtbl* do
    GUID = LibC::GUID.new(0xc733a86_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITableDefinition*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITableDefinition*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITableDefinition*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_table(this : ITableDefinition*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, cColumnDescs : LibC::UIntPtrT, rgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppTableID : Win32cr::Storage::IndexServer::DBID**, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_table.call(this, pUnkOuter, pTableID, cColumnDescs, rgColumnDescs, riid, cPropertySets, rgPropertySets, ppTableID, ppRowset)
    end
    def drop_table(this : ITableDefinition*, pTableID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_table.call(this, pTableID)
    end
    def add_column(this : ITableDefinition*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnDesc : Win32cr::System::Search::DBCOLUMNDESC*, ppColumnID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_column.call(this, pTableID, pColumnDesc, ppColumnID)
    end
    def drop_column(this : ITableDefinition*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_column.call(this, pTableID, pColumnID)
    end

  end

  @[Extern]
  record IOpenRowsetVtbl,
    query_interface : Proc(IOpenRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOpenRowset*, UInt32),
    release : Proc(IOpenRowset*, UInt32),
    open_rowset : Proc(IOpenRowset*, Void*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOpenRowset, lpVtbl : IOpenRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a69_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IOpenRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOpenRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOpenRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_rowset(this : IOpenRowset*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, pIndexID : Win32cr::Storage::IndexServer::DBID*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_rowset.call(this, pUnkOuter, pTableID, pIndexID, riid, cPropertySets, rgPropertySets, ppRowset)
    end

  end

  @[Extern]
  record IDBSchemaRowsetVtbl,
    query_interface : Proc(IDBSchemaRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBSchemaRowset*, UInt32),
    release : Proc(IDBSchemaRowset*, UInt32),
    get_rowset : Proc(IDBSchemaRowset*, Void*, LibC::GUID*, UInt32, Win32cr::System::Com::VARIANT*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT),
    get_schemas : Proc(IDBSchemaRowset*, UInt32*, LibC::GUID**, UInt32**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBSchemaRowset, lpVtbl : IDBSchemaRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a7b_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBSchemaRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBSchemaRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBSchemaRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_rowset(this : IDBSchemaRowset*, pUnkOuter : Void*, rguidSchema : LibC::GUID*, cRestrictions : UInt32, rgRestrictions : Win32cr::System::Com::VARIANT*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rowset.call(this, pUnkOuter, rguidSchema, cRestrictions, rgRestrictions, riid, cPropertySets, rgPropertySets, ppRowset)
    end
    def get_schemas(this : IDBSchemaRowset*, pcSchemas : UInt32*, prgSchemas : LibC::GUID**, prgRestrictionSupport : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schemas.call(this, pcSchemas, prgSchemas, prgRestrictionSupport)
    end

  end

  @[Extern]
  record IMDDatasetVtbl,
    query_interface : Proc(IMDDataset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMDDataset*, UInt32),
    release : Proc(IMDDataset*, UInt32),
    free_axis_info : Proc(IMDDataset*, LibC::UIntPtrT, Win32cr::System::Search::MDAXISINFO*, Win32cr::Foundation::HRESULT),
    get_axis_info : Proc(IMDDataset*, LibC::UIntPtrT*, Win32cr::System::Search::MDAXISINFO**, Win32cr::Foundation::HRESULT),
    get_axis_rowset : Proc(IMDDataset*, Void*, LibC::UIntPtrT, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT),
    get_cell_data : Proc(IMDDataset*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    get_specification : Proc(IMDDataset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMDDataset, lpVtbl : IMDDatasetVtbl* do
    GUID = LibC::GUID.new(0xa07cccd1_u32, 0x8148_u16, 0x11d0_u16, StaticArray[0x87_u8, 0xbb_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x39_u8, 0x42_u8])
    def query_interface(this : IMDDataset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMDDataset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMDDataset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def free_axis_info(this : IMDDataset*, cAxes : LibC::UIntPtrT, rgAxisInfo : Win32cr::System::Search::MDAXISINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_axis_info.call(this, cAxes, rgAxisInfo)
    end
    def get_axis_info(this : IMDDataset*, pcAxes : LibC::UIntPtrT*, prgAxisInfo : Win32cr::System::Search::MDAXISINFO**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_axis_info.call(this, pcAxes, prgAxisInfo)
    end
    def get_axis_rowset(this : IMDDataset*, pUnkOuter : Void*, iAxis : LibC::UIntPtrT, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_axis_rowset.call(this, pUnkOuter, iAxis, riid, cPropertySets, rgPropertySets, ppRowset)
    end
    def get_cell_data(this : IMDDataset*, hAccessor : LibC::UIntPtrT, ulStartCell : LibC::UIntPtrT, ulEndCell : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cell_data.call(this, hAccessor, ulStartCell, ulEndCell, pData)
    end
    def get_specification(this : IMDDataset*, riid : LibC::GUID*, ppSpecification : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specification.call(this, riid, ppSpecification)
    end

  end

  @[Extern]
  record IMDFindVtbl,
    query_interface : Proc(IMDFind*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMDFind*, UInt32),
    release : Proc(IMDFind*, UInt32),
    find_cell : Proc(IMDFind*, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    find_tuple : Proc(IMDFind*, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMDFind, lpVtbl : IMDFindVtbl* do
    GUID = LibC::GUID.new(0xa07cccd2_u32, 0x8148_u16, 0x11d0_u16, StaticArray[0x87_u8, 0xbb_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x39_u8, 0x42_u8])
    def query_interface(this : IMDFind*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMDFind*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMDFind*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def find_cell(this : IMDFind*, ulStartingOrdinal : LibC::UIntPtrT, cMembers : LibC::UIntPtrT, rgpwszMember : Win32cr::Foundation::PWSTR*, pulCellOrdinal : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_cell.call(this, ulStartingOrdinal, cMembers, rgpwszMember, pulCellOrdinal)
    end
    def find_tuple(this : IMDFind*, ulAxisIdentifier : UInt32, ulStartingOrdinal : LibC::UIntPtrT, cMembers : LibC::UIntPtrT, rgpwszMember : Win32cr::Foundation::PWSTR*, pulTupleOrdinal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_tuple.call(this, ulAxisIdentifier, ulStartingOrdinal, cMembers, rgpwszMember, pulTupleOrdinal)
    end

  end

  @[Extern]
  record IMDRangeRowsetVtbl,
    query_interface : Proc(IMDRangeRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMDRangeRowset*, UInt32),
    release : Proc(IMDRangeRowset*, UInt32),
    get_range_rowset : Proc(IMDRangeRowset*, Void*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMDRangeRowset, lpVtbl : IMDRangeRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733aa0_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IMDRangeRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMDRangeRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMDRangeRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_range_rowset(this : IMDRangeRowset*, pUnkOuter : Void*, ulStartCell : LibC::UIntPtrT, ulEndCell : LibC::UIntPtrT, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range_rowset.call(this, pUnkOuter, ulStartCell, ulEndCell, riid, cPropertySets, rgPropertySets, ppRowset)
    end

  end

  @[Extern]
  record IAlterTableVtbl,
    query_interface : Proc(IAlterTable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAlterTable*, UInt32),
    release : Proc(IAlterTable*, UInt32),
    alter_column : Proc(IAlterTable*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::System::Search::DBCOLUMNDESC*, Win32cr::Foundation::HRESULT),
    alter_table : Proc(IAlterTable*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAlterTable, lpVtbl : IAlterTableVtbl* do
    GUID = LibC::GUID.new(0xc733aa5_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IAlterTable*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAlterTable*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAlterTable*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def alter_column(this : IAlterTable*, pTableId : Win32cr::Storage::IndexServer::DBID*, pColumnId : Win32cr::Storage::IndexServer::DBID*, dwColumnDescFlags : UInt32, pColumnDesc : Win32cr::System::Search::DBCOLUMNDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alter_column.call(this, pTableId, pColumnId, dwColumnDescFlags, pColumnDesc)
    end
    def alter_table(this : IAlterTable*, pTableId : Win32cr::Storage::IndexServer::DBID*, pNewTableId : Win32cr::Storage::IndexServer::DBID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alter_table.call(this, pTableId, pNewTableId, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record IAlterIndexVtbl,
    query_interface : Proc(IAlterIndex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAlterIndex*, UInt32),
    release : Proc(IAlterIndex*, UInt32),
    alter_index : Proc(IAlterIndex*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAlterIndex, lpVtbl : IAlterIndexVtbl* do
    GUID = LibC::GUID.new(0xc733aa6_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IAlterIndex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAlterIndex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAlterIndex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def alter_index(this : IAlterIndex*, pTableId : Win32cr::Storage::IndexServer::DBID*, pIndexId : Win32cr::Storage::IndexServer::DBID*, pNewIndexId : Win32cr::Storage::IndexServer::DBID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alter_index.call(this, pTableId, pIndexId, pNewIndexId, cPropertySets, rgPropertySets)
    end

  end

  @[Extern]
  record IRowsetChapterMemberVtbl,
    query_interface : Proc(IRowsetChapterMember*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetChapterMember*, UInt32),
    release : Proc(IRowsetChapterMember*, UInt32),
    is_row_in_chapter : Proc(IRowsetChapterMember*, LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetChapterMember, lpVtbl : IRowsetChapterMemberVtbl* do
    GUID = LibC::GUID.new(0xc733aa8_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetChapterMember*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetChapterMember*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetChapterMember*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_row_in_chapter(this : IRowsetChapterMember*, hChapter : LibC::UIntPtrT, hRow : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_row_in_chapter.call(this, hChapter, hRow)
    end

  end

  @[Extern]
  record ICommandPersistVtbl,
    query_interface : Proc(ICommandPersist*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandPersist*, UInt32),
    release : Proc(ICommandPersist*, UInt32),
    delete_command : Proc(ICommandPersist*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    get_current_command : Proc(ICommandPersist*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    load_command : Proc(ICommandPersist*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::Foundation::HRESULT),
    save_command : Proc(ICommandPersist*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandPersist, lpVtbl : ICommandPersistVtbl* do
    GUID = LibC::GUID.new(0xc733aa7_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandPersist*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandPersist*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandPersist*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def delete_command(this : ICommandPersist*, pCommandID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_command.call(this, pCommandID)
    end
    def get_current_command(this : ICommandPersist*, ppCommandID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_command.call(this, ppCommandID)
    end
    def load_command(this : ICommandPersist*, pCommandID : Win32cr::Storage::IndexServer::DBID*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_command.call(this, pCommandID, dwFlags)
    end
    def save_command(this : ICommandPersist*, pCommandID : Win32cr::Storage::IndexServer::DBID*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_command.call(this, pCommandID, dwFlags)
    end

  end

  @[Extern]
  record IRowsetRefreshVtbl,
    query_interface : Proc(IRowsetRefresh*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetRefresh*, UInt32),
    release : Proc(IRowsetRefresh*, UInt32),
    refresh_visible_data : Proc(IRowsetRefresh*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, Win32cr::Foundation::BOOL, LibC::UIntPtrT*, LibC::UIntPtrT**, UInt32**, Win32cr::Foundation::HRESULT),
    get_last_visible_data : Proc(IRowsetRefresh*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetRefresh, lpVtbl : IRowsetRefreshVtbl* do
    GUID = LibC::GUID.new(0xc733aa9_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetRefresh*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetRefresh*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetRefresh*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def refresh_visible_data(this : IRowsetRefresh*, hChapter : LibC::UIntPtrT, cRows : LibC::UIntPtrT, rghRows : LibC::UIntPtrT*, fOverWrite : Win32cr::Foundation::BOOL, pcRowsRefreshed : LibC::UIntPtrT*, prghRowsRefreshed : LibC::UIntPtrT**, prgRowStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh_visible_data.call(this, hChapter, cRows, rghRows, fOverWrite, pcRowsRefreshed, prghRowsRefreshed, prgRowStatus)
    end
    def get_last_visible_data(this : IRowsetRefresh*, hRow : LibC::UIntPtrT, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_visible_data.call(this, hRow, hAccessor, pData)
    end

  end

  @[Extern]
  record IParentRowsetVtbl,
    query_interface : Proc(IParentRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IParentRowset*, UInt32),
    release : Proc(IParentRowset*, UInt32),
    get_child_rowset : Proc(IParentRowset*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IParentRowset, lpVtbl : IParentRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733aaa_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IParentRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IParentRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IParentRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_child_rowset(this : IParentRowset*, pUnkOuter : Void*, iOrdinal : LibC::UIntPtrT, riid : LibC::GUID*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_child_rowset.call(this, pUnkOuter, iOrdinal, riid, ppRowset)
    end

  end

  @[Extern]
  record IErrorRecordsVtbl,
    query_interface : Proc(IErrorRecords*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IErrorRecords*, UInt32),
    release : Proc(IErrorRecords*, UInt32),
    add_error_record : Proc(IErrorRecords*, Win32cr::System::Search::ERRORINFO*, UInt32, Win32cr::System::Com::DISPPARAMS*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_basic_error_info : Proc(IErrorRecords*, UInt32, Win32cr::System::Search::ERRORINFO*, Win32cr::Foundation::HRESULT),
    get_custom_error_object : Proc(IErrorRecords*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_error_info : Proc(IErrorRecords*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_error_parameters : Proc(IErrorRecords*, UInt32, Win32cr::System::Com::DISPPARAMS*, Win32cr::Foundation::HRESULT),
    get_record_count : Proc(IErrorRecords*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IErrorRecords, lpVtbl : IErrorRecordsVtbl* do
    GUID = LibC::GUID.new(0xc733a67_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IErrorRecords*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IErrorRecords*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IErrorRecords*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_error_record(this : IErrorRecords*, pErrorInfo : Win32cr::System::Search::ERRORINFO*, dwLookupID : UInt32, pdispparams : Win32cr::System::Com::DISPPARAMS*, punkCustomError : Void*, dwDynamicErrorID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_error_record.call(this, pErrorInfo, dwLookupID, pdispparams, punkCustomError, dwDynamicErrorID)
    end
    def get_basic_error_info(this : IErrorRecords*, ulRecordNum : UInt32, pErrorInfo : Win32cr::System::Search::ERRORINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_basic_error_info.call(this, ulRecordNum, pErrorInfo)
    end
    def get_custom_error_object(this : IErrorRecords*, ulRecordNum : UInt32, riid : LibC::GUID*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_custom_error_object.call(this, ulRecordNum, riid, ppObject)
    end
    def get_error_info(this : IErrorRecords*, ulRecordNum : UInt32, lcid : UInt32, ppErrorInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_info.call(this, ulRecordNum, lcid, ppErrorInfo)
    end
    def get_error_parameters(this : IErrorRecords*, ulRecordNum : UInt32, pdispparams : Win32cr::System::Com::DISPPARAMS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_parameters.call(this, ulRecordNum, pdispparams)
    end
    def get_record_count(this : IErrorRecords*, pcRecords : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count.call(this, pcRecords)
    end

  end

  @[Extern]
  record IErrorLookupVtbl,
    query_interface : Proc(IErrorLookup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IErrorLookup*, UInt32),
    release : Proc(IErrorLookup*, UInt32),
    get_error_description : Proc(IErrorLookup*, Win32cr::Foundation::HRESULT, UInt32, Win32cr::System::Com::DISPPARAMS*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_help_info : Proc(IErrorLookup*, Win32cr::Foundation::HRESULT, UInt32, UInt32, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    release_errors : Proc(IErrorLookup*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IErrorLookup, lpVtbl : IErrorLookupVtbl* do
    GUID = LibC::GUID.new(0xc733a66_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IErrorLookup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IErrorLookup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IErrorLookup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error_description(this : IErrorLookup*, hrError : Win32cr::Foundation::HRESULT, dwLookupID : UInt32, pdispparams : Win32cr::System::Com::DISPPARAMS*, lcid : UInt32, pbstrSource : Win32cr::Foundation::BSTR*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_description.call(this, hrError, dwLookupID, pdispparams, lcid, pbstrSource, pbstrDescription)
    end
    def get_help_info(this : IErrorLookup*, hrError : Win32cr::Foundation::HRESULT, dwLookupID : UInt32, lcid : UInt32, pbstrHelpFile : Win32cr::Foundation::BSTR*, pdwHelpContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_help_info.call(this, hrError, dwLookupID, lcid, pbstrHelpFile, pdwHelpContext)
    end
    def release_errors(this : IErrorLookup*, dwDynamicErrorID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_errors.call(this, dwDynamicErrorID)
    end

  end

  @[Extern]
  record ISQLErrorInfoVtbl,
    query_interface : Proc(ISQLErrorInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISQLErrorInfo*, UInt32),
    release : Proc(ISQLErrorInfo*, UInt32),
    get_sql_info : Proc(ISQLErrorInfo*, Win32cr::Foundation::BSTR*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISQLErrorInfo, lpVtbl : ISQLErrorInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a74_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ISQLErrorInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISQLErrorInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISQLErrorInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_sql_info(this : ISQLErrorInfo*, pbstrSQLState : Win32cr::Foundation::BSTR*, plNativeError : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sql_info.call(this, pbstrSQLState, plNativeError)
    end

  end

  @[Extern]
  record IGetDataSourceVtbl,
    query_interface : Proc(IGetDataSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetDataSource*, UInt32),
    release : Proc(IGetDataSource*, UInt32),
    get_data_source : Proc(IGetDataSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetDataSource, lpVtbl : IGetDataSourceVtbl* do
    GUID = LibC::GUID.new(0xc733a75_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IGetDataSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetDataSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetDataSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data_source(this : IGetDataSource*, riid : LibC::GUID*, ppDataSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_source.call(this, riid, ppDataSource)
    end

  end

  @[Extern]
  record ITransactionLocalVtbl,
    query_interface : Proc(ITransactionLocal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITransactionLocal*, UInt32),
    release : Proc(ITransactionLocal*, UInt32),
    commit : Proc(ITransactionLocal*, Win32cr::Foundation::BOOL, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    abort : Proc(ITransactionLocal*, Win32cr::System::DistributedTransactionCoordinator::BOID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_transaction_info : Proc(ITransactionLocal*, Win32cr::System::DistributedTransactionCoordinator::XACTTRANSINFO*, Win32cr::Foundation::HRESULT),
    get_options_object : Proc(ITransactionLocal*, Void**, Win32cr::Foundation::HRESULT),
    start_transaction : Proc(ITransactionLocal*, Int32, UInt32, Void*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITransactionLocal, lpVtbl : ITransactionLocalVtbl* do
    GUID = LibC::GUID.new(0xc733a5f_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITransactionLocal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITransactionLocal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITransactionLocal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def commit(this : ITransactionLocal*, fRetaining : Win32cr::Foundation::BOOL, grfTC : UInt32, grfRM : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, fRetaining, grfTC, grfRM)
    end
    def abort(this : ITransactionLocal*, pboidReason : Win32cr::System::DistributedTransactionCoordinator::BOID*, fRetaining : Win32cr::Foundation::BOOL, fAsync : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this, pboidReason, fRetaining, fAsync)
    end
    def get_transaction_info(this : ITransactionLocal*, pinfo : Win32cr::System::DistributedTransactionCoordinator::XACTTRANSINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transaction_info.call(this, pinfo)
    end
    def get_options_object(this : ITransactionLocal*, ppOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_options_object.call(this, ppOptions)
    end
    def start_transaction(this : ITransactionLocal*, isoLevel : Int32, isoFlags : UInt32, pOtherOptions : Void*, pulTransactionLevel : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_transaction.call(this, isoLevel, isoFlags, pOtherOptions, pulTransactionLevel)
    end

  end

  @[Extern]
  record ITransactionJoinVtbl,
    query_interface : Proc(ITransactionJoin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITransactionJoin*, UInt32),
    release : Proc(ITransactionJoin*, UInt32),
    get_options_object : Proc(ITransactionJoin*, Void**, Win32cr::Foundation::HRESULT),
    join_transaction : Proc(ITransactionJoin*, Void*, Int32, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITransactionJoin, lpVtbl : ITransactionJoinVtbl* do
    GUID = LibC::GUID.new(0xc733a5e_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITransactionJoin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITransactionJoin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITransactionJoin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_options_object(this : ITransactionJoin*, ppOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_options_object.call(this, ppOptions)
    end
    def join_transaction(this : ITransactionJoin*, punkTransactionCoord : Void*, isoLevel : Int32, isoFlags : UInt32, pOtherOptions : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_transaction.call(this, punkTransactionCoord, isoLevel, isoFlags, pOtherOptions)
    end

  end

  @[Extern]
  record ITransactionObjectVtbl,
    query_interface : Proc(ITransactionObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITransactionObject*, UInt32),
    release : Proc(ITransactionObject*, UInt32),
    get_transaction_object : Proc(ITransactionObject*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITransactionObject, lpVtbl : ITransactionObjectVtbl* do
    GUID = LibC::GUID.new(0xc733a60_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITransactionObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITransactionObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITransactionObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_transaction_object(this : ITransactionObject*, ulTransactionLevel : UInt32, ppTransactionObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transaction_object.call(this, ulTransactionLevel, ppTransactionObject)
    end

  end

  @[Extern]
  record ITrusteeAdminVtbl,
    query_interface : Proc(ITrusteeAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITrusteeAdmin*, UInt32),
    release : Proc(ITrusteeAdmin*, UInt32),
    compare_trustees : Proc(ITrusteeAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::HRESULT),
    create_trustee : Proc(ITrusteeAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT),
    delete_trustee : Proc(ITrusteeAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::HRESULT),
    set_trustee_properties : Proc(ITrusteeAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT),
    get_trustee_properties : Proc(ITrusteeAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITrusteeAdmin, lpVtbl : ITrusteeAdminVtbl* do
    GUID = LibC::GUID.new(0xc733aa1_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITrusteeAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITrusteeAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITrusteeAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def compare_trustees(this : ITrusteeAdmin*, pTrustee1 : Win32cr::Security::Authorization::TRUSTEE_W*, pTrustee2 : Win32cr::Security::Authorization::TRUSTEE_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_trustees.call(this, pTrustee1, pTrustee2)
    end
    def create_trustee(this : ITrusteeAdmin*, pTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_trustee.call(this, pTrustee, cPropertySets, rgPropertySets)
    end
    def delete_trustee(this : ITrusteeAdmin*, pTrustee : Win32cr::Security::Authorization::TRUSTEE_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_trustee.call(this, pTrustee)
    end
    def set_trustee_properties(this : ITrusteeAdmin*, pTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_trustee_properties.call(this, pTrustee, cPropertySets, rgPropertySets)
    end
    def get_trustee_properties(this : ITrusteeAdmin*, pTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_trustee_properties.call(this, pTrustee, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end

  end

  @[Extern]
  record ITrusteeGroupAdminVtbl,
    query_interface : Proc(ITrusteeGroupAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITrusteeGroupAdmin*, UInt32),
    release : Proc(ITrusteeGroupAdmin*, UInt32),
    add_member : Proc(ITrusteeGroupAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::HRESULT),
    delete_member : Proc(ITrusteeGroupAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::HRESULT),
    is_member : Proc(ITrusteeGroupAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_members : Proc(ITrusteeGroupAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, UInt32*, Win32cr::Security::Authorization::TRUSTEE_W**, Win32cr::Foundation::HRESULT),
    get_memberships : Proc(ITrusteeGroupAdmin*, Win32cr::Security::Authorization::TRUSTEE_W*, UInt32*, Win32cr::Security::Authorization::TRUSTEE_W**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITrusteeGroupAdmin, lpVtbl : ITrusteeGroupAdminVtbl* do
    GUID = LibC::GUID.new(0xc733aa2_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITrusteeGroupAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITrusteeGroupAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITrusteeGroupAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_member(this : ITrusteeGroupAdmin*, pMembershipTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pMemberTrustee : Win32cr::Security::Authorization::TRUSTEE_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_member.call(this, pMembershipTrustee, pMemberTrustee)
    end
    def delete_member(this : ITrusteeGroupAdmin*, pMembershipTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pMemberTrustee : Win32cr::Security::Authorization::TRUSTEE_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_member.call(this, pMembershipTrustee, pMemberTrustee)
    end
    def is_member(this : ITrusteeGroupAdmin*, pMembershipTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pMemberTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pfStatus : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_member.call(this, pMembershipTrustee, pMemberTrustee, pfStatus)
    end
    def get_members(this : ITrusteeGroupAdmin*, pMembershipTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pcMembers : UInt32*, prgMembers : Win32cr::Security::Authorization::TRUSTEE_W**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_members.call(this, pMembershipTrustee, pcMembers, prgMembers)
    end
    def get_memberships(this : ITrusteeGroupAdmin*, pTrustee : Win32cr::Security::Authorization::TRUSTEE_W*, pcMemberships : UInt32*, prgMemberships : Win32cr::Security::Authorization::TRUSTEE_W**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_memberships.call(this, pTrustee, pcMemberships, prgMemberships)
    end

  end

  @[Extern]
  record IObjectAccessControlVtbl,
    query_interface : Proc(IObjectAccessControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectAccessControl*, UInt32),
    release : Proc(IObjectAccessControl*, UInt32),
    get_object_access_rights : Proc(IObjectAccessControl*, Win32cr::System::Search::SEC_OBJECT*, UInt32*, Win32cr::Security::Authorization::EXPLICIT_ACCESS_W**, Win32cr::Foundation::HRESULT),
    get_object_owner : Proc(IObjectAccessControl*, Win32cr::System::Search::SEC_OBJECT*, Win32cr::Security::Authorization::TRUSTEE_W**, Win32cr::Foundation::HRESULT),
    is_object_access_allowed : Proc(IObjectAccessControl*, Win32cr::System::Search::SEC_OBJECT*, Win32cr::Security::Authorization::EXPLICIT_ACCESS_W*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_object_access_rights : Proc(IObjectAccessControl*, Win32cr::System::Search::SEC_OBJECT*, UInt32, Win32cr::Security::Authorization::EXPLICIT_ACCESS_W*, Win32cr::Foundation::HRESULT),
    set_object_owner : Proc(IObjectAccessControl*, Win32cr::System::Search::SEC_OBJECT*, Win32cr::Security::Authorization::TRUSTEE_W*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectAccessControl, lpVtbl : IObjectAccessControlVtbl* do
    GUID = LibC::GUID.new(0xc733aa3_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IObjectAccessControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectAccessControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectAccessControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object_access_rights(this : IObjectAccessControl*, pObject : Win32cr::System::Search::SEC_OBJECT*, pcAccessEntries : UInt32*, prgAccessEntries : Win32cr::Security::Authorization::EXPLICIT_ACCESS_W**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_access_rights.call(this, pObject, pcAccessEntries, prgAccessEntries)
    end
    def get_object_owner(this : IObjectAccessControl*, pObject : Win32cr::System::Search::SEC_OBJECT*, ppOwner : Win32cr::Security::Authorization::TRUSTEE_W**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_owner.call(this, pObject, ppOwner)
    end
    def is_object_access_allowed(this : IObjectAccessControl*, pObject : Win32cr::System::Search::SEC_OBJECT*, pAccessEntry : Win32cr::Security::Authorization::EXPLICIT_ACCESS_W*, pfResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_object_access_allowed.call(this, pObject, pAccessEntry, pfResult)
    end
    def set_object_access_rights(this : IObjectAccessControl*, pObject : Win32cr::System::Search::SEC_OBJECT*, cAccessEntries : UInt32, prgAccessEntries : Win32cr::Security::Authorization::EXPLICIT_ACCESS_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object_access_rights.call(this, pObject, cAccessEntries, prgAccessEntries)
    end
    def set_object_owner(this : IObjectAccessControl*, pObject : Win32cr::System::Search::SEC_OBJECT*, pOwner : Win32cr::Security::Authorization::TRUSTEE_W*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object_owner.call(this, pObject, pOwner)
    end

  end

  @[Extern]
  record ISecurityInfoVtbl,
    query_interface : Proc(ISecurityInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISecurityInfo*, UInt32),
    release : Proc(ISecurityInfo*, UInt32),
    get_current_trustee : Proc(ISecurityInfo*, Win32cr::Security::Authorization::TRUSTEE_W**, Win32cr::Foundation::HRESULT),
    get_object_types : Proc(ISecurityInfo*, UInt32*, LibC::GUID**, Win32cr::Foundation::HRESULT),
    get_permissions : Proc(ISecurityInfo*, LibC::GUID, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISecurityInfo, lpVtbl : ISecurityInfoVtbl* do
    GUID = LibC::GUID.new(0xc733aa4_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ISecurityInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISecurityInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISecurityInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_current_trustee(this : ISecurityInfo*, ppTrustee : Win32cr::Security::Authorization::TRUSTEE_W**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_trustee.call(this, ppTrustee)
    end
    def get_object_types(this : ISecurityInfo*, cObjectTypes : UInt32*, rgObjectTypes : LibC::GUID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_types.call(this, cObjectTypes, rgObjectTypes)
    end
    def get_permissions(this : ISecurityInfo*, object_type : LibC::GUID, pPermissions : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_permissions.call(this, object_type, pPermissions)
    end

  end

  @[Extern]
  record ITableCreationVtbl,
    query_interface : Proc(ITableCreation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITableCreation*, UInt32),
    release : Proc(ITableCreation*, UInt32),
    create_table : Proc(ITableCreation*, Void*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNDESC*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Storage::IndexServer::DBID**, Void**, Win32cr::Foundation::HRESULT),
    drop_table : Proc(ITableCreation*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    add_column : Proc(ITableCreation*, Win32cr::Storage::IndexServer::DBID*, Win32cr::System::Search::DBCOLUMNDESC*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    drop_column : Proc(ITableCreation*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    get_table_definition : Proc(ITableCreation*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT*, Win32cr::System::Search::DBCOLUMNDESC**, UInt32*, Win32cr::System::Search::DBPROPSET**, UInt32*, Win32cr::System::Search::DBCONSTRAINTDESC**, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITableCreation, lpVtbl : ITableCreationVtbl* do
    GUID = LibC::GUID.new(0xc733abc_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITableCreation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITableCreation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITableCreation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_table(this : ITableCreation*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, cColumnDescs : LibC::UIntPtrT, rgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppTableID : Win32cr::Storage::IndexServer::DBID**, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_table.call(this, pUnkOuter, pTableID, cColumnDescs, rgColumnDescs, riid, cPropertySets, rgPropertySets, ppTableID, ppRowset)
    end
    def drop_table(this : ITableCreation*, pTableID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_table.call(this, pTableID)
    end
    def add_column(this : ITableCreation*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnDesc : Win32cr::System::Search::DBCOLUMNDESC*, ppColumnID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_column.call(this, pTableID, pColumnDesc, ppColumnID)
    end
    def drop_column(this : ITableCreation*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_column.call(this, pTableID, pColumnID)
    end
    def get_table_definition(this : ITableCreation*, pTableID : Win32cr::Storage::IndexServer::DBID*, pcColumnDescs : LibC::UIntPtrT*, prgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC**, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**, pcConstraintDescs : UInt32*, prgConstraintDescs : Win32cr::System::Search::DBCONSTRAINTDESC**, ppwszStringBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_definition.call(this, pTableID, pcColumnDescs, prgColumnDescs, pcPropertySets, prgPropertySets, pcConstraintDescs, prgConstraintDescs, ppwszStringBuffer)
    end

  end

  @[Extern]
  record ITableDefinitionWithConstraintsVtbl,
    query_interface : Proc(ITableDefinitionWithConstraints*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITableDefinitionWithConstraints*, UInt32),
    release : Proc(ITableDefinitionWithConstraints*, UInt32),
    create_table : Proc(ITableDefinitionWithConstraints*, Void*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNDESC*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Storage::IndexServer::DBID**, Void**, Win32cr::Foundation::HRESULT),
    drop_table : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    add_column : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, Win32cr::System::Search::DBCOLUMNDESC*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    drop_column : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    get_table_definition : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT*, Win32cr::System::Search::DBCOLUMNDESC**, UInt32*, Win32cr::System::Search::DBPROPSET**, UInt32*, Win32cr::System::Search::DBCONSTRAINTDESC**, UInt16**, Win32cr::Foundation::HRESULT),
    add_constraint : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, Win32cr::System::Search::DBCONSTRAINTDESC*, Win32cr::Foundation::HRESULT),
    create_table_with_constraints : Proc(ITableDefinitionWithConstraints*, Void*, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNDESC*, UInt32, Win32cr::System::Search::DBCONSTRAINTDESC*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Storage::IndexServer::DBID**, Void**, Win32cr::Foundation::HRESULT),
    drop_constraint : Proc(ITableDefinitionWithConstraints*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITableDefinitionWithConstraints, lpVtbl : ITableDefinitionWithConstraintsVtbl* do
    GUID = LibC::GUID.new(0xc733aab_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITableDefinitionWithConstraints*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITableDefinitionWithConstraints*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITableDefinitionWithConstraints*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_table(this : ITableDefinitionWithConstraints*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, cColumnDescs : LibC::UIntPtrT, rgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppTableID : Win32cr::Storage::IndexServer::DBID**, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_table.call(this, pUnkOuter, pTableID, cColumnDescs, rgColumnDescs, riid, cPropertySets, rgPropertySets, ppTableID, ppRowset)
    end
    def drop_table(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_table.call(this, pTableID)
    end
    def add_column(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnDesc : Win32cr::System::Search::DBCOLUMNDESC*, ppColumnID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_column.call(this, pTableID, pColumnDesc, ppColumnID)
    end
    def drop_column(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*, pColumnID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_column.call(this, pTableID, pColumnID)
    end
    def get_table_definition(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*, pcColumnDescs : LibC::UIntPtrT*, prgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC**, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**, pcConstraintDescs : UInt32*, prgConstraintDescs : Win32cr::System::Search::DBCONSTRAINTDESC**, ppwszStringBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_definition.call(this, pTableID, pcColumnDescs, prgColumnDescs, pcPropertySets, prgPropertySets, pcConstraintDescs, prgConstraintDescs, ppwszStringBuffer)
    end
    def add_constraint(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*, pConstraintDesc : Win32cr::System::Search::DBCONSTRAINTDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_constraint.call(this, pTableID, pConstraintDesc)
    end
    def create_table_with_constraints(this : ITableDefinitionWithConstraints*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, cColumnDescs : LibC::UIntPtrT, rgColumnDescs : Win32cr::System::Search::DBCOLUMNDESC*, cConstraintDescs : UInt32, rgConstraintDescs : Win32cr::System::Search::DBCONSTRAINTDESC*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppTableID : Win32cr::Storage::IndexServer::DBID**, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_table_with_constraints.call(this, pUnkOuter, pTableID, cColumnDescs, rgColumnDescs, cConstraintDescs, rgConstraintDescs, riid, cPropertySets, rgPropertySets, ppTableID, ppRowset)
    end
    def drop_constraint(this : ITableDefinitionWithConstraints*, pTableID : Win32cr::Storage::IndexServer::DBID*, pConstraintID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_constraint.call(this, pTableID, pConstraintID)
    end

  end

  @[Extern]
  record IRowVtbl,
    query_interface : Proc(IRow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRow*, UInt32),
    release : Proc(IRow*, UInt32),
    get_columns : Proc(IRow*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNACCESS*, Win32cr::Foundation::HRESULT),
    get_source_rowset : Proc(IRow*, LibC::GUID*, Void**, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    open : Proc(IRow*, Void*, Win32cr::Storage::IndexServer::DBID*, LibC::GUID*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRow, lpVtbl : IRowVtbl* do
    GUID = LibC::GUID.new(0xc733ab4_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_columns(this : IRow*, cColumns : LibC::UIntPtrT, rgColumns : Win32cr::System::Search::DBCOLUMNACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_columns.call(this, cColumns, rgColumns)
    end
    def get_source_rowset(this : IRow*, riid : LibC::GUID*, ppRowset : Void**, phRow : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_rowset.call(this, riid, ppRowset, phRow)
    end
    def open(this : IRow*, pUnkOuter : Void*, pColumnID : Win32cr::Storage::IndexServer::DBID*, rguidColumnType : LibC::GUID*, dwBindFlags : UInt32, riid : LibC::GUID*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, pUnkOuter, pColumnID, rguidColumnType, dwBindFlags, riid, ppUnk)
    end

  end

  @[Extern]
  record IRowChangeVtbl,
    query_interface : Proc(IRowChange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowChange*, UInt32),
    release : Proc(IRowChange*, UInt32),
    set_columns : Proc(IRowChange*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNACCESS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowChange, lpVtbl : IRowChangeVtbl* do
    GUID = LibC::GUID.new(0xc733ab5_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowChange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowChange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowChange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_columns(this : IRowChange*, cColumns : LibC::UIntPtrT, rgColumns : Win32cr::System::Search::DBCOLUMNACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_columns.call(this, cColumns, rgColumns)
    end

  end

  @[Extern]
  record IRowSchemaChangeVtbl,
    query_interface : Proc(IRowSchemaChange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowSchemaChange*, UInt32),
    release : Proc(IRowSchemaChange*, UInt32),
    set_columns : Proc(IRowSchemaChange*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNACCESS*, Win32cr::Foundation::HRESULT),
    delete_columns : Proc(IRowSchemaChange*, LibC::UIntPtrT, Win32cr::Storage::IndexServer::DBID*, UInt32*, Win32cr::Foundation::HRESULT),
    add_columns : Proc(IRowSchemaChange*, LibC::UIntPtrT, Win32cr::System::Search::DBCOLUMNINFO*, Win32cr::System::Search::DBCOLUMNACCESS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowSchemaChange, lpVtbl : IRowSchemaChangeVtbl* do
    GUID = LibC::GUID.new(0xc733aae_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowSchemaChange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowSchemaChange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowSchemaChange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_columns(this : IRowSchemaChange*, cColumns : LibC::UIntPtrT, rgColumns : Win32cr::System::Search::DBCOLUMNACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_columns.call(this, cColumns, rgColumns)
    end
    def delete_columns(this : IRowSchemaChange*, cColumns : LibC::UIntPtrT, rgColumnIDs : Win32cr::Storage::IndexServer::DBID*, rgdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_columns.call(this, cColumns, rgColumnIDs, rgdwStatus)
    end
    def add_columns(this : IRowSchemaChange*, cColumns : LibC::UIntPtrT, rgNewColumnInfo : Win32cr::System::Search::DBCOLUMNINFO*, rgColumns : Win32cr::System::Search::DBCOLUMNACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_columns.call(this, cColumns, rgNewColumnInfo, rgColumns)
    end

  end

  @[Extern]
  record IGetRowVtbl,
    query_interface : Proc(IGetRow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetRow*, UInt32),
    release : Proc(IGetRow*, UInt32),
    get_row_from_hrow : Proc(IGetRow*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_url_from_hrow : Proc(IGetRow*, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetRow, lpVtbl : IGetRowVtbl* do
    GUID = LibC::GUID.new(0xc733aaf_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IGetRow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetRow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetRow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_row_from_hrow(this : IGetRow*, pUnkOuter : Void*, hRow : LibC::UIntPtrT, riid : LibC::GUID*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_row_from_hrow.call(this, pUnkOuter, hRow, riid, ppUnk)
    end
    def get_url_from_hrow(this : IGetRow*, hRow : LibC::UIntPtrT, ppwszURL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url_from_hrow.call(this, hRow, ppwszURL)
    end

  end

  @[Extern]
  record IBindResourceVtbl,
    query_interface : Proc(IBindResource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBindResource*, UInt32),
    release : Proc(IBindResource*, UInt32),
    bind : Proc(IBindResource*, Void*, Win32cr::Foundation::PWSTR, UInt32, LibC::GUID*, LibC::GUID*, Void*, Win32cr::System::Search::DBIMPLICITSESSION*, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBindResource, lpVtbl : IBindResourceVtbl* do
    GUID = LibC::GUID.new(0xc733ab1_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IBindResource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBindResource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBindResource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def bind(this : IBindResource*, pUnkOuter : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwBindURLFlags : UInt32, rguid : LibC::GUID*, riid : LibC::GUID*, pAuthenticate : Void*, pImplSession : Win32cr::System::Search::DBIMPLICITSESSION*, pdwBindStatus : UInt32*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind.call(this, pUnkOuter, pwszURL, dwBindURLFlags, rguid, riid, pAuthenticate, pImplSession, pdwBindStatus, ppUnk)
    end

  end

  @[Extern]
  record IScopedOperationsVtbl,
    query_interface : Proc(IScopedOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScopedOperations*, UInt32),
    release : Proc(IScopedOperations*, UInt32),
    bind : Proc(IScopedOperations*, Void*, Win32cr::Foundation::PWSTR, UInt32, LibC::GUID*, LibC::GUID*, Void*, Win32cr::System::Search::DBIMPLICITSESSION*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    copy : Proc(IScopedOperations*, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, UInt32, Void*, UInt32*, Win32cr::Foundation::PWSTR*, UInt16**, Win32cr::Foundation::HRESULT),
    move : Proc(IScopedOperations*, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, UInt32, Void*, UInt32*, Win32cr::Foundation::PWSTR*, UInt16**, Win32cr::Foundation::HRESULT),
    delete : Proc(IScopedOperations*, LibC::UIntPtrT, Win32cr::Foundation::PWSTR*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    open_rowset : Proc(IScopedOperations*, Void*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, LibC::GUID*, UInt32, Win32cr::System::Search::DBPROPSET*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IScopedOperations, lpVtbl : IScopedOperationsVtbl* do
    GUID = LibC::GUID.new(0xc733ab0_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IScopedOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScopedOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScopedOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def bind(this : IScopedOperations*, pUnkOuter : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwBindURLFlags : UInt32, rguid : LibC::GUID*, riid : LibC::GUID*, pAuthenticate : Void*, pImplSession : Win32cr::System::Search::DBIMPLICITSESSION*, pdwBindStatus : UInt32*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind.call(this, pUnkOuter, pwszURL, dwBindURLFlags, rguid, riid, pAuthenticate, pImplSession, pdwBindStatus, ppUnk)
    end
    def copy(this : IScopedOperations*, cRows : LibC::UIntPtrT, rgpwszSourceURLs : Win32cr::Foundation::PWSTR*, rgpwszDestURLs : Win32cr::Foundation::PWSTR*, dwCopyFlags : UInt32, pAuthenticate : Void*, rgdwStatus : UInt32*, rgpwszNewURLs : Win32cr::Foundation::PWSTR*, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy.call(this, cRows, rgpwszSourceURLs, rgpwszDestURLs, dwCopyFlags, pAuthenticate, rgdwStatus, rgpwszNewURLs, ppStringsBuffer)
    end
    def move(this : IScopedOperations*, cRows : LibC::UIntPtrT, rgpwszSourceURLs : Win32cr::Foundation::PWSTR*, rgpwszDestURLs : Win32cr::Foundation::PWSTR*, dwMoveFlags : UInt32, pAuthenticate : Void*, rgdwStatus : UInt32*, rgpwszNewURLs : Win32cr::Foundation::PWSTR*, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, cRows, rgpwszSourceURLs, rgpwszDestURLs, dwMoveFlags, pAuthenticate, rgdwStatus, rgpwszNewURLs, ppStringsBuffer)
    end
    def delete(this : IScopedOperations*, cRows : LibC::UIntPtrT, rgpwszURLs : Win32cr::Foundation::PWSTR*, dwDeleteFlags : UInt32, rgdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, cRows, rgpwszURLs, dwDeleteFlags, rgdwStatus)
    end
    def open_rowset(this : IScopedOperations*, pUnkOuter : Void*, pTableID : Win32cr::Storage::IndexServer::DBID*, pIndexID : Win32cr::Storage::IndexServer::DBID*, riid : LibC::GUID*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*, ppRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_rowset.call(this, pUnkOuter, pTableID, pIndexID, riid, cPropertySets, rgPropertySets, ppRowset)
    end

  end

  @[Extern]
  record ICreateRowVtbl,
    query_interface : Proc(ICreateRow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateRow*, UInt32),
    release : Proc(ICreateRow*, UInt32),
    create_row : Proc(ICreateRow*, Void*, Win32cr::Foundation::PWSTR, UInt32, LibC::GUID*, LibC::GUID*, Void*, Win32cr::System::Search::DBIMPLICITSESSION*, UInt32*, Win32cr::Foundation::PWSTR*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICreateRow, lpVtbl : ICreateRowVtbl* do
    GUID = LibC::GUID.new(0xc733ab2_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICreateRow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateRow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateRow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_row(this : ICreateRow*, pUnkOuter : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwBindURLFlags : UInt32, rguid : LibC::GUID*, riid : LibC::GUID*, pAuthenticate : Void*, pImplSession : Win32cr::System::Search::DBIMPLICITSESSION*, pdwBindStatus : UInt32*, ppwszNewURL : Win32cr::Foundation::PWSTR*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_row.call(this, pUnkOuter, pwszURL, dwBindURLFlags, rguid, riid, pAuthenticate, pImplSession, pdwBindStatus, ppwszNewURL, ppUnk)
    end

  end

  @[Extern]
  record IDBBinderPropertiesVtbl,
    query_interface : Proc(IDBBinderProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBBinderProperties*, UInt32),
    release : Proc(IDBBinderProperties*, UInt32),
    get_properties : Proc(IDBBinderProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    get_property_info : Proc(IDBBinderProperties*, UInt32, Win32cr::System::Search::DBPROPIDSET*, UInt32*, Win32cr::System::Search::DBPROPINFOSET**, UInt16**, Win32cr::Foundation::HRESULT),
    set_properties : Proc(IDBBinderProperties*, UInt32, Win32cr::System::Search::DBPROPSET*, Win32cr::Foundation::HRESULT),
    reset : Proc(IDBBinderProperties*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBBinderProperties, lpVtbl : IDBBinderPropertiesVtbl* do
    GUID = LibC::GUID.new(0xc733ab3_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBBinderProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBBinderProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBBinderProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IDBBinderProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertySets : UInt32*, prgPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertySets, prgPropertySets)
    end
    def get_property_info(this : IDBBinderProperties*, cPropertyIDSets : UInt32, rgPropertyIDSets : Win32cr::System::Search::DBPROPIDSET*, pcPropertyInfoSets : UInt32*, prgPropertyInfoSets : Win32cr::System::Search::DBPROPINFOSET**, ppDescBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_info.call(this, cPropertyIDSets, rgPropertyIDSets, pcPropertyInfoSets, prgPropertyInfoSets, ppDescBuffer)
    end
    def set_properties(this : IDBBinderProperties*, cPropertySets : UInt32, rgPropertySets : Win32cr::System::Search::DBPROPSET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, cPropertySets, rgPropertySets)
    end
    def reset(this : IDBBinderProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record IColumnsInfo2Vtbl,
    query_interface : Proc(IColumnsInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IColumnsInfo2*, UInt32),
    release : Proc(IColumnsInfo2*, UInt32),
    get_column_info : Proc(IColumnsInfo2*, LibC::UIntPtrT*, Win32cr::System::Search::DBCOLUMNINFO**, UInt16**, Win32cr::Foundation::HRESULT),
    map_column_i_ds : Proc(IColumnsInfo2*, LibC::UIntPtrT, Win32cr::Storage::IndexServer::DBID*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_restricted_column_info : Proc(IColumnsInfo2*, LibC::UIntPtrT, Win32cr::Storage::IndexServer::DBID*, UInt32, LibC::UIntPtrT*, Win32cr::Storage::IndexServer::DBID**, Win32cr::System::Search::DBCOLUMNINFO**, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IColumnsInfo2, lpVtbl : IColumnsInfo2Vtbl* do
    GUID = LibC::GUID.new(0xc733ab8_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IColumnsInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IColumnsInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IColumnsInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_column_info(this : IColumnsInfo2*, pcColumns : LibC::UIntPtrT*, prgInfo : Win32cr::System::Search::DBCOLUMNINFO**, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_info.call(this, pcColumns, prgInfo, ppStringsBuffer)
    end
    def map_column_i_ds(this : IColumnsInfo2*, cColumnIDs : LibC::UIntPtrT, rgColumnIDs : Win32cr::Storage::IndexServer::DBID*, rgColumns : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_column_i_ds.call(this, cColumnIDs, rgColumnIDs, rgColumns)
    end
    def get_restricted_column_info(this : IColumnsInfo2*, cColumnIDMasks : LibC::UIntPtrT, rgColumnIDMasks : Win32cr::Storage::IndexServer::DBID*, dwFlags : UInt32, pcColumns : LibC::UIntPtrT*, prgColumnIDs : Win32cr::Storage::IndexServer::DBID**, prgColumnInfo : Win32cr::System::Search::DBCOLUMNINFO**, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_restricted_column_info.call(this, cColumnIDMasks, rgColumnIDMasks, dwFlags, pcColumns, prgColumnIDs, prgColumnInfo, ppStringsBuffer)
    end

  end

  @[Extern]
  record IRegisterProviderVtbl,
    query_interface : Proc(IRegisterProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRegisterProvider*, UInt32),
    release : Proc(IRegisterProvider*, UInt32),
    get_url_mapping : Proc(IRegisterProvider*, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_url_mapping : Proc(IRegisterProvider*, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, LibC::GUID*, Win32cr::Foundation::HRESULT),
    unregister_provider : Proc(IRegisterProvider*, Win32cr::Foundation::PWSTR, LibC::UIntPtrT, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRegisterProvider, lpVtbl : IRegisterProviderVtbl* do
    GUID = LibC::GUID.new(0xc733ab9_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRegisterProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRegisterProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRegisterProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_url_mapping(this : IRegisterProvider*, pwszURL : Win32cr::Foundation::PWSTR, dwReserved : LibC::UIntPtrT, pclsidProvider : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url_mapping.call(this, pwszURL, dwReserved, pclsidProvider)
    end
    def set_url_mapping(this : IRegisterProvider*, pwszURL : Win32cr::Foundation::PWSTR, dwReserved : LibC::UIntPtrT, rclsidProvider : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_url_mapping.call(this, pwszURL, dwReserved, rclsidProvider)
    end
    def unregister_provider(this : IRegisterProvider*, pwszURL : Win32cr::Foundation::PWSTR, dwReserved : LibC::UIntPtrT, rclsidProvider : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_provider.call(this, pwszURL, dwReserved, rclsidProvider)
    end

  end

  @[Extern]
  record IGetSessionVtbl,
    query_interface : Proc(IGetSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetSession*, UInt32),
    release : Proc(IGetSession*, UInt32),
    get_session : Proc(IGetSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetSession, lpVtbl : IGetSessionVtbl* do
    GUID = LibC::GUID.new(0xc733aba_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IGetSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_session(this : IGetSession*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session.call(this, riid, ppSession)
    end

  end

  @[Extern]
  record IGetSourceRowVtbl,
    query_interface : Proc(IGetSourceRow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetSourceRow*, UInt32),
    release : Proc(IGetSourceRow*, UInt32),
    get_source_row : Proc(IGetSourceRow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IGetSourceRow, lpVtbl : IGetSourceRowVtbl* do
    GUID = LibC::GUID.new(0xc733abb_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IGetSourceRow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetSourceRow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetSourceRow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_source_row(this : IGetSourceRow*, riid : LibC::GUID*, ppRow : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_row.call(this, riid, ppRow)
    end

  end

  @[Extern]
  record IRowsetCurrentIndexVtbl,
    query_interface : Proc(IRowsetCurrentIndex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetCurrentIndex*, UInt32),
    release : Proc(IRowsetCurrentIndex*, UInt32),
    get_index_info : Proc(IRowsetCurrentIndex*, LibC::UIntPtrT*, Win32cr::System::Search::DBINDEXCOLUMNDESC**, UInt32*, Win32cr::System::Search::DBPROPSET**, Win32cr::Foundation::HRESULT),
    seek : Proc(IRowsetCurrentIndex*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_range : Proc(IRowsetCurrentIndex*, LibC::UIntPtrT, LibC::UIntPtrT, Void*, LibC::UIntPtrT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_index : Proc(IRowsetCurrentIndex*, Win32cr::Storage::IndexServer::DBID**, Win32cr::Foundation::HRESULT),
    set_index : Proc(IRowsetCurrentIndex*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetCurrentIndex, lpVtbl : IRowsetCurrentIndexVtbl* do
    GUID = LibC::GUID.new(0xc733abd_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetCurrentIndex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetCurrentIndex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetCurrentIndex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_index_info(this : IRowsetCurrentIndex*, pcKeyColumns : LibC::UIntPtrT*, prgIndexColumnDesc : Win32cr::System::Search::DBINDEXCOLUMNDESC**, pcIndexPropertySets : UInt32*, prgIndexPropertySets : Win32cr::System::Search::DBPROPSET**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_info.call(this, pcKeyColumns, prgIndexColumnDesc, pcIndexPropertySets, prgIndexPropertySets)
    end
    def seek(this : IRowsetCurrentIndex*, hAccessor : LibC::UIntPtrT, cKeyValues : LibC::UIntPtrT, pData : Void*, dwSeekOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, hAccessor, cKeyValues, pData, dwSeekOptions)
    end
    def set_range(this : IRowsetCurrentIndex*, hAccessor : LibC::UIntPtrT, cStartKeyColumns : LibC::UIntPtrT, pStartData : Void*, cEndKeyColumns : LibC::UIntPtrT, pEndData : Void*, dwRangeOptions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_range.call(this, hAccessor, cStartKeyColumns, pStartData, cEndKeyColumns, pEndData, dwRangeOptions)
    end
    def get_index(this : IRowsetCurrentIndex*, ppIndexID : Win32cr::Storage::IndexServer::DBID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index.call(this, ppIndexID)
    end
    def set_index(this : IRowsetCurrentIndex*, pIndexID : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_index.call(this, pIndexID)
    end

  end

  @[Extern]
  record ICommandStreamVtbl,
    query_interface : Proc(ICommandStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandStream*, UInt32),
    release : Proc(ICommandStream*, UInt32),
    get_command_stream : Proc(ICommandStream*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_command_stream : Proc(ICommandStream*, LibC::GUID*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandStream, lpVtbl : ICommandStreamVtbl* do
    GUID = LibC::GUID.new(0xc733abf_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_command_stream(this : ICommandStream*, piid : LibC::GUID*, pguidDialect : LibC::GUID*, ppCommandStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command_stream.call(this, piid, pguidDialect, ppCommandStream)
    end
    def set_command_stream(this : ICommandStream*, riid : LibC::GUID*, rguidDialect : LibC::GUID*, pCommandStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_command_stream.call(this, riid, rguidDialect, pCommandStream)
    end

  end

  @[Extern]
  record IRowsetBookmarkVtbl,
    query_interface : Proc(IRowsetBookmark*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetBookmark*, UInt32),
    release : Proc(IRowsetBookmark*, UInt32),
    position_on_bookmark : Proc(IRowsetBookmark*, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetBookmark, lpVtbl : IRowsetBookmarkVtbl* do
    GUID = LibC::GUID.new(0xc733ac2_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetBookmark*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetBookmark*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetBookmark*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def position_on_bookmark(this : IRowsetBookmark*, hChapter : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.position_on_bookmark.call(this, hChapter, cbBookmark, pBookmark)
    end

  end

  @[Extern]
  record IQueryParserVtbl,
    query_interface : Proc(IQueryParser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQueryParser*, UInt32),
    release : Proc(IQueryParser*, UInt32),
    parse : Proc(IQueryParser*, Win32cr::Foundation::PWSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    set_option : Proc(IQueryParser*, Win32cr::System::Search::STRUCTURED_QUERY_SINGLE_OPTION, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_option : Proc(IQueryParser*, Win32cr::System::Search::STRUCTURED_QUERY_SINGLE_OPTION, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_multi_option : Proc(IQueryParser*, Win32cr::System::Search::STRUCTURED_QUERY_MULTIOPTION, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_schema_provider : Proc(IQueryParser*, Void**, Win32cr::Foundation::HRESULT),
    restate_to_string : Proc(IQueryParser*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    parse_property_value : Proc(IQueryParser*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    restate_property_value_to_string : Proc(IQueryParser*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IQueryParser, lpVtbl : IQueryParserVtbl* do
    GUID = LibC::GUID.new(0x2ebdee67_u32, 0x3505_u16, 0x43f8_u16, StaticArray[0x99_u8, 0x46_u8, 0xea_u8, 0x44_u8, 0xab_u8, 0xc8_u8, 0xe5_u8, 0xb0_u8])
    def query_interface(this : IQueryParser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQueryParser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQueryParser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def parse(this : IQueryParser*, pszInputString : Win32cr::Foundation::PWSTR, pCustomProperties : Void*, ppSolution : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse.call(this, pszInputString, pCustomProperties, ppSolution)
    end
    def set_option(this : IQueryParser*, option : Win32cr::System::Search::STRUCTURED_QUERY_SINGLE_OPTION, pOptionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_option.call(this, option, pOptionValue)
    end
    def get_option(this : IQueryParser*, option : Win32cr::System::Search::STRUCTURED_QUERY_SINGLE_OPTION, pOptionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option.call(this, option, pOptionValue)
    end
    def set_multi_option(this : IQueryParser*, option : Win32cr::System::Search::STRUCTURED_QUERY_MULTIOPTION, pszOptionKey : Win32cr::Foundation::PWSTR, pOptionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_multi_option.call(this, option, pszOptionKey, pOptionValue)
    end
    def get_schema_provider(this : IQueryParser*, ppSchemaProvider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema_provider.call(this, ppSchemaProvider)
    end
    def restate_to_string(this : IQueryParser*, pCondition : Void*, fUseEnglish : Win32cr::Foundation::BOOL, ppszQueryString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restate_to_string.call(this, pCondition, fUseEnglish, ppszQueryString)
    end
    def parse_property_value(this : IQueryParser*, pszPropertyName : Win32cr::Foundation::PWSTR, pszInputString : Win32cr::Foundation::PWSTR, ppSolution : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_property_value.call(this, pszPropertyName, pszInputString, ppSolution)
    end
    def restate_property_value_to_string(this : IQueryParser*, pCondition : Void*, fUseEnglish : Win32cr::Foundation::BOOL, ppszPropertyName : Win32cr::Foundation::PWSTR*, ppszQueryString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restate_property_value_to_string.call(this, pCondition, fUseEnglish, ppszPropertyName, ppszQueryString)
    end

  end

  @[Extern]
  record IConditionFactoryVtbl,
    query_interface : Proc(IConditionFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConditionFactory*, UInt32),
    release : Proc(IConditionFactory*, UInt32),
    make_not : Proc(IConditionFactory*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_and_or : Proc(IConditionFactory*, Win32cr::System::Search::Common::CONDITION_TYPE, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_leaf : Proc(IConditionFactory*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void*, Void*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    resolve : Proc(IConditionFactory*, Void*, Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, Win32cr::Foundation::SYSTEMTIME*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IConditionFactory, lpVtbl : IConditionFactoryVtbl* do
    GUID = LibC::GUID.new(0xa5efe073_u32, 0xb16f_u16, 0x474f_u16, StaticArray[0x9f_u8, 0x3e_u8, 0x9f_u8, 0x8b_u8, 0x49_u8, 0x7a_u8, 0x3e_u8, 0x8_u8])
    def query_interface(this : IConditionFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConditionFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConditionFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def make_not(this : IConditionFactory*, pcSub : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_not.call(this, pcSub, fSimplify, ppcResult)
    end
    def make_and_or(this : IConditionFactory*, ct : Win32cr::System::Search::Common::CONDITION_TYPE, peuSubs : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_and_or.call(this, ct, peuSubs, fSimplify, ppcResult)
    end
    def make_leaf(this : IConditionFactory*, pszPropertyName : Win32cr::Foundation::PWSTR, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, pszValueType : Win32cr::Foundation::PWSTR, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pPropertyNameTerm : Void*, pOperationTerm : Void*, pValueTerm : Void*, fExpand : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_leaf.call(this, pszPropertyName, cop, pszValueType, ppropvar, pPropertyNameTerm, pOperationTerm, pValueTerm, fExpand, ppcResult)
    end
    def resolve(this : IConditionFactory*, pc : Void*, sqro : Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime : Win32cr::Foundation::SYSTEMTIME*, ppcResolved : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolve.call(this, pc, sqro, pstReferenceTime, ppcResolved)
    end

  end

  @[Extern]
  record IQuerySolutionVtbl,
    query_interface : Proc(IQuerySolution*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQuerySolution*, UInt32),
    release : Proc(IQuerySolution*, UInt32),
    make_not : Proc(IQuerySolution*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_and_or : Proc(IQuerySolution*, Win32cr::System::Search::Common::CONDITION_TYPE, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_leaf : Proc(IQuerySolution*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void*, Void*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    resolve : Proc(IQuerySolution*, Void*, Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, Win32cr::Foundation::SYSTEMTIME*, Void**, Win32cr::Foundation::HRESULT),
    get_query : Proc(IQuerySolution*, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_errors : Proc(IQuerySolution*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_lexical_data : Proc(IQuerySolution*, Win32cr::Foundation::PWSTR*, Void**, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IQuerySolution, lpVtbl : IQuerySolutionVtbl* do
    GUID = LibC::GUID.new(0xd6ebc66b_u32, 0x8921_u16, 0x4193_u16, StaticArray[0xaf_u8, 0xdd_u8, 0xa1_u8, 0x78_u8, 0x9f_u8, 0xb7_u8, 0xff_u8, 0x57_u8])
    def query_interface(this : IQuerySolution*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQuerySolution*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQuerySolution*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def make_not(this : IQuerySolution*, pcSub : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_not.call(this, pcSub, fSimplify, ppcResult)
    end
    def make_and_or(this : IQuerySolution*, ct : Win32cr::System::Search::Common::CONDITION_TYPE, peuSubs : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_and_or.call(this, ct, peuSubs, fSimplify, ppcResult)
    end
    def make_leaf(this : IQuerySolution*, pszPropertyName : Win32cr::Foundation::PWSTR, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, pszValueType : Win32cr::Foundation::PWSTR, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pPropertyNameTerm : Void*, pOperationTerm : Void*, pValueTerm : Void*, fExpand : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_leaf.call(this, pszPropertyName, cop, pszValueType, ppropvar, pPropertyNameTerm, pOperationTerm, pValueTerm, fExpand, ppcResult)
    end
    def resolve(this : IQuerySolution*, pc : Void*, sqro : Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime : Win32cr::Foundation::SYSTEMTIME*, ppcResolved : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolve.call(this, pc, sqro, pstReferenceTime, ppcResolved)
    end
    def get_query(this : IQuerySolution*, ppQueryNode : Void**, ppMainType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_query.call(this, ppQueryNode, ppMainType)
    end
    def get_errors(this : IQuerySolution*, riid : LibC::GUID*, ppParseErrors : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errors.call(this, riid, ppParseErrors)
    end
    def get_lexical_data(this : IQuerySolution*, ppszInputString : Win32cr::Foundation::PWSTR*, ppTokens : Void**, plcid : UInt32*, ppWordBreaker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lexical_data.call(this, ppszInputString, ppTokens, plcid, ppWordBreaker)
    end

  end

  @[Extern]
  record IConditionFactory2Vtbl,
    query_interface : Proc(IConditionFactory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConditionFactory2*, UInt32),
    release : Proc(IConditionFactory2*, UInt32),
    make_not : Proc(IConditionFactory2*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_and_or : Proc(IConditionFactory2*, Win32cr::System::Search::Common::CONDITION_TYPE, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    make_leaf : Proc(IConditionFactory2*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void*, Void*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    resolve : Proc(IConditionFactory2*, Void*, Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, Win32cr::Foundation::SYSTEMTIME*, Void**, Win32cr::Foundation::HRESULT),
    create_true_false : Proc(IConditionFactory2*, Win32cr::Foundation::BOOL, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_negation : Proc(IConditionFactory2*, Void*, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compound_from_object_array : Proc(IConditionFactory2*, Win32cr::System::Search::Common::CONDITION_TYPE, Void*, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compound_from_array : Proc(IConditionFactory2*, Win32cr::System::Search::Common::CONDITION_TYPE, Void**, UInt32, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_string_leaf : Proc(IConditionFactory2*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_integer_leaf : Proc(IConditionFactory2*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::Common::CONDITION_OPERATION, Int32, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_boolean_leaf : Proc(IConditionFactory2*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::BOOL, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_leaf : Proc(IConditionFactory2*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Void*, Void*, Win32cr::System::Search::CONDITION_CREATION_OPTIONS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    resolve_condition : Proc(IConditionFactory2*, Void*, Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, Win32cr::Foundation::SYSTEMTIME*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IConditionFactory2, lpVtbl : IConditionFactory2Vtbl* do
    GUID = LibC::GUID.new(0x71d222e1_u32, 0x432f_u16, 0x429e_u16, StaticArray[0x8c_u8, 0x13_u8, 0xb6_u8, 0xda_u8, 0xfd_u8, 0xe5_u8, 0x7_u8, 0x7a_u8])
    def query_interface(this : IConditionFactory2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConditionFactory2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConditionFactory2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def make_not(this : IConditionFactory2*, pcSub : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_not.call(this, pcSub, fSimplify, ppcResult)
    end
    def make_and_or(this : IConditionFactory2*, ct : Win32cr::System::Search::Common::CONDITION_TYPE, peuSubs : Void*, fSimplify : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_and_or.call(this, ct, peuSubs, fSimplify, ppcResult)
    end
    def make_leaf(this : IConditionFactory2*, pszPropertyName : Win32cr::Foundation::PWSTR, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, pszValueType : Win32cr::Foundation::PWSTR, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pPropertyNameTerm : Void*, pOperationTerm : Void*, pValueTerm : Void*, fExpand : Win32cr::Foundation::BOOL, ppcResult : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_leaf.call(this, pszPropertyName, cop, pszValueType, ppropvar, pPropertyNameTerm, pOperationTerm, pValueTerm, fExpand, ppcResult)
    end
    def resolve(this : IConditionFactory2*, pc : Void*, sqro : Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime : Win32cr::Foundation::SYSTEMTIME*, ppcResolved : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolve.call(this, pc, sqro, pstReferenceTime, ppcResolved)
    end
    def create_true_false(this : IConditionFactory2*, fVal : Win32cr::Foundation::BOOL, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_true_false.call(this, fVal, cco, riid, ppv)
    end
    def create_negation(this : IConditionFactory2*, pcSub : Void*, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_negation.call(this, pcSub, cco, riid, ppv)
    end
    def create_compound_from_object_array(this : IConditionFactory2*, ct : Win32cr::System::Search::Common::CONDITION_TYPE, poaSubs : Void*, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compound_from_object_array.call(this, ct, poaSubs, cco, riid, ppv)
    end
    def create_compound_from_array(this : IConditionFactory2*, ct : Win32cr::System::Search::Common::CONDITION_TYPE, ppcondSubs : Void**, cSubs : UInt32, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compound_from_array.call(this, ct, ppcondSubs, cSubs, cco, riid, ppv)
    end
    def create_string_leaf(this : IConditionFactory2*, propkey : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, pszValue : Win32cr::Foundation::PWSTR, pszLocaleName : Win32cr::Foundation::PWSTR, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_string_leaf.call(this, propkey, cop, pszValue, pszLocaleName, cco, riid, ppv)
    end
    def create_integer_leaf(this : IConditionFactory2*, propkey : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, lValue : Int32, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_integer_leaf.call(this, propkey, cop, lValue, cco, riid, ppv)
    end
    def create_boolean_leaf(this : IConditionFactory2*, propkey : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, fValue : Win32cr::Foundation::BOOL, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_boolean_leaf.call(this, propkey, cop, fValue, cco, riid, ppv)
    end
    def create_leaf(this : IConditionFactory2*, propkey : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, propvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pszSemanticType : Win32cr::Foundation::PWSTR, pszLocaleName : Win32cr::Foundation::PWSTR, pPropertyNameTerm : Void*, pOperationTerm : Void*, pValueTerm : Void*, cco : Win32cr::System::Search::CONDITION_CREATION_OPTIONS, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_leaf.call(this, propkey, cop, propvar, pszSemanticType, pszLocaleName, pPropertyNameTerm, pOperationTerm, pValueTerm, cco, riid, ppv)
    end
    def resolve_condition(this : IConditionFactory2*, pc : Void*, sqro : Win32cr::System::Search::STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime : Win32cr::Foundation::SYSTEMTIME*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolve_condition.call(this, pc, sqro, pstReferenceTime, riid, ppv)
    end

  end

  @[Extern]
  record IConditionGeneratorVtbl,
    query_interface : Proc(IConditionGenerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConditionGenerator*, UInt32),
    release : Proc(IConditionGenerator*, UInt32),
    initialize__ : Proc(IConditionGenerator*, Void*, Win32cr::Foundation::HRESULT),
    recognize_named_entities : Proc(IConditionGenerator*, Win32cr::Foundation::PWSTR, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    generate_for_leaf : Proc(IConditionGenerator*, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::Common::CONDITION_OPERATION, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Void*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL*, Void**, Win32cr::Foundation::HRESULT),
    default_phrase : Proc(IConditionGenerator*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IConditionGenerator, lpVtbl : IConditionGeneratorVtbl* do
    GUID = LibC::GUID.new(0x92d2cc58_u32, 0x4386_u16, 0x45a3_u16, StaticArray[0xb9_u8, 0x8c_u8, 0x7e_u8, 0xc_u8, 0xe6_u8, 0x4a_u8, 0x41_u8, 0x17_u8])
    def query_interface(this : IConditionGenerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConditionGenerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConditionGenerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IConditionGenerator*, pSchemaProvider : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSchemaProvider)
    end
    def recognize_named_entities(this : IConditionGenerator*, pszInputString : Win32cr::Foundation::PWSTR, lcidUserLocale : UInt32, pTokenCollection : Void*, pNamedEntities : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.recognize_named_entities.call(this, pszInputString, lcidUserLocale, pTokenCollection, pNamedEntities)
    end
    def generate_for_leaf(this : IConditionGenerator*, pConditionFactory : Void*, pszPropertyName : Win32cr::Foundation::PWSTR, cop : Win32cr::System::Search::Common::CONDITION_OPERATION, pszValueType : Win32cr::Foundation::PWSTR, pszValue : Win32cr::Foundation::PWSTR, pszValue2 : Win32cr::Foundation::PWSTR, pPropertyNameTerm : Void*, pOperationTerm : Void*, pValueTerm : Void*, automaticWildcard : Win32cr::Foundation::BOOL, pNoStringQuery : Win32cr::Foundation::BOOL*, ppQueryExpression : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_for_leaf.call(this, pConditionFactory, pszPropertyName, cop, pszValueType, pszValue, pszValue2, pPropertyNameTerm, pOperationTerm, pValueTerm, automaticWildcard, pNoStringQuery, ppQueryExpression)
    end
    def default_phrase(this : IConditionGenerator*, pszValueType : Win32cr::Foundation::PWSTR, ppropvar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, fUseEnglish : Win32cr::Foundation::BOOL, ppszPhrase : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.default_phrase.call(this, pszValueType, ppropvar, fUseEnglish, ppszPhrase)
    end

  end

  @[Extern]
  record IIntervalVtbl,
    query_interface : Proc(IInterval*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IInterval*, UInt32),
    release : Proc(IInterval*, UInt32),
    get_limits : Proc(IInterval*, Win32cr::System::Search::INTERVAL_LIMIT_KIND*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Search::INTERVAL_LIMIT_KIND*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IInterval, lpVtbl : IIntervalVtbl* do
    GUID = LibC::GUID.new(0x6bf0a714_u32, 0x3c18_u16, 0x430b_u16, StaticArray[0x8b_u8, 0x5d_u8, 0x83_u8, 0xb1_u8, 0xc2_u8, 0x34_u8, 0xd3_u8, 0xdb_u8])
    def query_interface(this : IInterval*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IInterval*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IInterval*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_limits(this : IInterval*, pilkLower : Win32cr::System::Search::INTERVAL_LIMIT_KIND*, ppropvarLower : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pilkUpper : Win32cr::System::Search::INTERVAL_LIMIT_KIND*, ppropvarUpper : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_limits.call(this, pilkLower, ppropvarLower, pilkUpper, ppropvarUpper)
    end

  end

  @[Extern]
  record IMetaDataVtbl,
    query_interface : Proc(IMetaData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMetaData*, UInt32),
    release : Proc(IMetaData*, UInt32),
    get_data : Proc(IMetaData*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMetaData, lpVtbl : IMetaDataVtbl* do
    GUID = LibC::GUID.new(0x780102b0_u32, 0xc43b_u16, 0x4876_u16, StaticArray[0xbc_u8, 0x7b_u8, 0x5e_u8, 0x9b_u8, 0xa5_u8, 0xc8_u8, 0x87_u8, 0x94_u8])
    def query_interface(this : IMetaData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMetaData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMetaData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data(this : IMetaData*, ppszKey : Win32cr::Foundation::PWSTR*, ppszValue : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, ppszKey, ppszValue)
    end

  end

  @[Extern]
  record IEntityVtbl,
    query_interface : Proc(IEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEntity*, UInt32),
    release : Proc(IEntity*, UInt32),
    name : Proc(IEntity*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    base : Proc(IEntity*, Void**, Win32cr::Foundation::HRESULT),
    relationships : Proc(IEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_relationship : Proc(IEntity*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    meta_data : Proc(IEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    named_entities : Proc(IEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_named_entity : Proc(IEntity*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    default_phrase : Proc(IEntity*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEntity, lpVtbl : IEntityVtbl* do
    GUID = LibC::GUID.new(0x24264891_u32, 0xe80b_u16, 0x4fd3_u16, StaticArray[0xb7_u8, 0xce_u8, 0x4f_u8, 0xf2_u8, 0xfa_u8, 0xe8_u8, 0x93_u8, 0x1f_u8])
    def query_interface(this : IEntity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEntity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEntity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def name(this : IEntity*, ppszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name.call(this, ppszName)
    end
    def base(this : IEntity*, pBaseEntity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.base.call(this, pBaseEntity)
    end
    def relationships(this : IEntity*, riid : LibC::GUID*, pRelationships : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.relationships.call(this, riid, pRelationships)
    end
    def get_relationship(this : IEntity*, pszRelationName : Win32cr::Foundation::PWSTR, pRelationship : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_relationship.call(this, pszRelationName, pRelationship)
    end
    def meta_data(this : IEntity*, riid : LibC::GUID*, pMetaData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.meta_data.call(this, riid, pMetaData)
    end
    def named_entities(this : IEntity*, riid : LibC::GUID*, pNamedEntities : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.named_entities.call(this, riid, pNamedEntities)
    end
    def get_named_entity(this : IEntity*, pszValue : Win32cr::Foundation::PWSTR, ppNamedEntity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_named_entity.call(this, pszValue, ppNamedEntity)
    end
    def default_phrase(this : IEntity*, ppszPhrase : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.default_phrase.call(this, ppszPhrase)
    end

  end

  @[Extern]
  record IRelationshipVtbl,
    query_interface : Proc(IRelationship*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRelationship*, UInt32),
    release : Proc(IRelationship*, UInt32),
    name : Proc(IRelationship*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_real : Proc(IRelationship*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    destination : Proc(IRelationship*, Void**, Win32cr::Foundation::HRESULT),
    meta_data : Proc(IRelationship*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    default_phrase : Proc(IRelationship*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRelationship, lpVtbl : IRelationshipVtbl* do
    GUID = LibC::GUID.new(0x2769280b_u32, 0x5108_u16, 0x498c_u16, StaticArray[0x9c_u8, 0x7f_u8, 0xa5_u8, 0x12_u8, 0x39_u8, 0xb6_u8, 0x31_u8, 0x47_u8])
    def query_interface(this : IRelationship*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRelationship*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRelationship*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def name(this : IRelationship*, ppszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name.call(this, ppszName)
    end
    def is_real(this : IRelationship*, pIsReal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_real.call(this, pIsReal)
    end
    def destination(this : IRelationship*, pDestinationEntity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destination.call(this, pDestinationEntity)
    end
    def meta_data(this : IRelationship*, riid : LibC::GUID*, pMetaData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.meta_data.call(this, riid, pMetaData)
    end
    def default_phrase(this : IRelationship*, ppszPhrase : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.default_phrase.call(this, ppszPhrase)
    end

  end

  @[Extern]
  record INamedEntityVtbl,
    query_interface : Proc(INamedEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(INamedEntity*, UInt32),
    release : Proc(INamedEntity*, UInt32),
    get_value : Proc(INamedEntity*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    default_phrase : Proc(INamedEntity*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record INamedEntity, lpVtbl : INamedEntityVtbl* do
    GUID = LibC::GUID.new(0xabdbd0b1_u32, 0x7d54_u16, 0x49fb_u16, StaticArray[0xab_u8, 0x5c_u8, 0xbf_u8, 0xf4_u8, 0x13_u8, 0x0_u8, 0x4_u8, 0xcd_u8])
    def query_interface(this : INamedEntity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : INamedEntity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : INamedEntity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_value(this : INamedEntity*, ppszValue : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, ppszValue)
    end
    def default_phrase(this : INamedEntity*, ppszPhrase : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.default_phrase.call(this, ppszPhrase)
    end

  end

  @[Extern]
  record ISchemaProviderVtbl,
    query_interface : Proc(ISchemaProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaProvider*, UInt32),
    release : Proc(ISchemaProvider*, UInt32),
    entities : Proc(ISchemaProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    root_entity : Proc(ISchemaProvider*, Void**, Win32cr::Foundation::HRESULT),
    get_entity : Proc(ISchemaProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    meta_data : Proc(ISchemaProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    localize : Proc(ISchemaProvider*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    save_binary : Proc(ISchemaProvider*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    lookup_authored_named_entity : Proc(ISchemaProvider*, Void*, Win32cr::Foundation::PWSTR, Void*, UInt32, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISchemaProvider, lpVtbl : ISchemaProviderVtbl* do
    GUID = LibC::GUID.new(0x8cf89bcb_u32, 0x394c_u16, 0x49b2_u16, StaticArray[0xae_u8, 0x28_u8, 0xa5_u8, 0x9d_u8, 0xd4_u8, 0xed_u8, 0x7f_u8, 0x68_u8])
    def query_interface(this : ISchemaProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def entities(this : ISchemaProvider*, riid : LibC::GUID*, pEntities : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.entities.call(this, riid, pEntities)
    end
    def root_entity(this : ISchemaProvider*, pRootEntity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.root_entity.call(this, pRootEntity)
    end
    def get_entity(this : ISchemaProvider*, pszEntityName : Win32cr::Foundation::PWSTR, pEntity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entity.call(this, pszEntityName, pEntity)
    end
    def meta_data(this : ISchemaProvider*, riid : LibC::GUID*, pMetaData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.meta_data.call(this, riid, pMetaData)
    end
    def localize(this : ISchemaProvider*, lcid : UInt32, pSchemaLocalizerSupport : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.localize.call(this, lcid, pSchemaLocalizerSupport)
    end
    def save_binary(this : ISchemaProvider*, pszSchemaBinaryPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_binary.call(this, pszSchemaBinaryPath)
    end
    def lookup_authored_named_entity(this : ISchemaProvider*, pEntity : Void*, pszInputString : Win32cr::Foundation::PWSTR, pTokenCollection : Void*, cTokensBegin : UInt32, pcTokensLength : UInt32*, ppszValue : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lookup_authored_named_entity.call(this, pEntity, pszInputString, pTokenCollection, cTokensBegin, pcTokensLength, ppszValue)
    end

  end

  @[Extern]
  record ITokenCollectionVtbl,
    query_interface : Proc(ITokenCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITokenCollection*, UInt32),
    release : Proc(ITokenCollection*, UInt32),
    number_of_tokens : Proc(ITokenCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_token : Proc(ITokenCollection*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITokenCollection, lpVtbl : ITokenCollectionVtbl* do
    GUID = LibC::GUID.new(0x22d8b4f2_u32, 0xf577_u16, 0x4adb_u16, StaticArray[0xa3_u8, 0x35_u8, 0xc2_u8, 0xae_u8, 0x88_u8, 0x41_u8, 0x6f_u8, 0xab_u8])
    def query_interface(this : ITokenCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITokenCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITokenCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def number_of_tokens(this : ITokenCollection*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.number_of_tokens.call(this, pCount)
    end
    def get_token(this : ITokenCollection*, i : UInt32, pBegin : UInt32*, pLength : UInt32*, ppsz : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_token.call(this, i, pBegin, pLength, ppsz)
    end

  end

  @[Extern]
  record INamedEntityCollectorVtbl,
    query_interface : Proc(INamedEntityCollector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(INamedEntityCollector*, UInt32),
    release : Proc(INamedEntityCollector*, UInt32),
    add : Proc(INamedEntityCollector*, UInt32, UInt32, UInt32, UInt32, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::NAMED_ENTITY_CERTAINTY, Win32cr::Foundation::HRESULT)


  @[Extern]
  record INamedEntityCollector, lpVtbl : INamedEntityCollectorVtbl* do
    GUID = LibC::GUID.new(0xaf2440f6_u32, 0x8afc_u16, 0x47d0_u16, StaticArray[0x9a_u8, 0x7f_u8, 0x39_u8, 0x6a_u8, 0xa_u8, 0xcf_u8, 0xb4_u8, 0x3d_u8])
    def query_interface(this : INamedEntityCollector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : INamedEntityCollector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : INamedEntityCollector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add(this : INamedEntityCollector*, beginSpan : UInt32, endSpan : UInt32, beginActual : UInt32, endActual : UInt32, pType : Void*, pszValue : Win32cr::Foundation::PWSTR, certainty : Win32cr::System::Search::NAMED_ENTITY_CERTAINTY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, beginSpan, endSpan, beginActual, endActual, pType, pszValue, certainty)
    end

  end

  @[Extern]
  record ISchemaLocalizerSupportVtbl,
    query_interface : Proc(ISchemaLocalizerSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaLocalizerSupport*, UInt32),
    release : Proc(ISchemaLocalizerSupport*, UInt32),
    localize : Proc(ISchemaLocalizerSupport*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISchemaLocalizerSupport, lpVtbl : ISchemaLocalizerSupportVtbl* do
    GUID = LibC::GUID.new(0xca3fdca2_u32, 0xbfbe_u16, 0x4eed_u16, StaticArray[0x90_u8, 0xd7_u8, 0xc_u8, 0xae_u8, 0xf0_u8, 0xa1_u8, 0xbd_u8, 0xa1_u8])
    def query_interface(this : ISchemaLocalizerSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaLocalizerSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaLocalizerSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def localize(this : ISchemaLocalizerSupport*, pszGlobalString : Win32cr::Foundation::PWSTR, ppszLocalString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.localize.call(this, pszGlobalString, ppszLocalString)
    end

  end

  @[Extern]
  record IQueryParserManagerVtbl,
    query_interface : Proc(IQueryParserManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQueryParserManager*, UInt32),
    release : Proc(IQueryParserManager*, UInt32),
    create_loaded_parser : Proc(IQueryParserManager*, Win32cr::Foundation::PWSTR, UInt16, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    initialize_options : Proc(IQueryParserManager*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Void*, Win32cr::Foundation::HRESULT),
    set_option : Proc(IQueryParserManager*, Win32cr::System::Search::QUERY_PARSER_MANAGER_OPTION, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IQueryParserManager, lpVtbl : IQueryParserManagerVtbl* do
    GUID = LibC::GUID.new(0xa879e3c4_u32, 0xaf77_u16, 0x44fb_u16, StaticArray[0x8f_u8, 0x37_u8, 0xeb_u8, 0xd1_u8, 0x48_u8, 0x7c_u8, 0xf9_u8, 0x20_u8])
    def query_interface(this : IQueryParserManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQueryParserManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQueryParserManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_loaded_parser(this : IQueryParserManager*, pszCatalog : Win32cr::Foundation::PWSTR, langidForKeywords : UInt16, riid : LibC::GUID*, ppQueryParser : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_loaded_parser.call(this, pszCatalog, langidForKeywords, riid, ppQueryParser)
    end
    def initialize_options(this : IQueryParserManager*, fUnderstandNQS : Win32cr::Foundation::BOOL, fAutoWildCard : Win32cr::Foundation::BOOL, pQueryParser : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_options.call(this, fUnderstandNQS, fAutoWildCard, pQueryParser)
    end
    def set_option(this : IQueryParserManager*, option : Win32cr::System::Search::QUERY_PARSER_MANAGER_OPTION, pOptionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_option.call(this, option, pOptionValue)
    end

  end

  @[Extern]
  record IUrlAccessorVtbl,
    query_interface : Proc(IUrlAccessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUrlAccessor*, UInt32),
    release : Proc(IUrlAccessor*, UInt32),
    add_request_parameter : Proc(IUrlAccessor*, Win32cr::System::Com::StructuredStorage::PROPSPEC*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_doc_format : Proc(IUrlAccessor*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_clsid : Proc(IUrlAccessor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_host : Proc(IUrlAccessor*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_directory : Proc(IUrlAccessor*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IUrlAccessor*, UInt64*, Win32cr::Foundation::HRESULT),
    get_last_modified : Proc(IUrlAccessor*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IUrlAccessor*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_descriptor : Proc(IUrlAccessor*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_redirected_url : Proc(IUrlAccessor*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_provider : Proc(IUrlAccessor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    bind_to_stream : Proc(IUrlAccessor*, Void**, Win32cr::Foundation::HRESULT),
    bind_to_filter : Proc(IUrlAccessor*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IUrlAccessor, lpVtbl : IUrlAccessorVtbl* do
    GUID = LibC::GUID.new(0xb63e318_u32, 0x9ccc_u16, 0x11d0_u16, StaticArray[0xbc_u8, 0xdb_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xcc_u8, 0xce_u8, 0x4_u8])
    def query_interface(this : IUrlAccessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUrlAccessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUrlAccessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_request_parameter(this : IUrlAccessor*, pSpec : Win32cr::System::Com::StructuredStorage::PROPSPEC*, pVar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_request_parameter.call(this, pSpec, pVar)
    end
    def get_doc_format(this : IUrlAccessor*, wszDocFormat : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_format.call(this, wszDocFormat, dwSize, pdwLength)
    end
    def get_clsid(this : IUrlAccessor*, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clsid.call(this, pClsid)
    end
    def get_host(this : IUrlAccessor*, wszHost : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_host.call(this, wszHost, dwSize, pdwLength)
    end
    def is_directory(this : IUrlAccessor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_directory.call(this)
    end
    def get_size(this : IUrlAccessor*, pllSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pllSize)
    end
    def get_last_modified(this : IUrlAccessor*, pftLastModified : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_modified.call(this, pftLastModified)
    end
    def get_file_name(this : IUrlAccessor*, wszFileName : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, wszFileName, dwSize, pdwLength)
    end
    def get_security_descriptor(this : IUrlAccessor*, pSD : UInt8*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_descriptor.call(this, pSD, dwSize, pdwLength)
    end
    def get_redirected_url(this : IUrlAccessor*, wszRedirectedURL : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redirected_url.call(this, wszRedirectedURL, dwSize, pdwLength)
    end
    def get_security_provider(this : IUrlAccessor*, pSPClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_provider.call(this, pSPClsid)
    end
    def bind_to_stream(this : IUrlAccessor*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_stream.call(this, ppStream)
    end
    def bind_to_filter(this : IUrlAccessor*, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_filter.call(this, ppFilter)
    end

  end

  @[Extern]
  record IUrlAccessor2Vtbl,
    query_interface : Proc(IUrlAccessor2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUrlAccessor2*, UInt32),
    release : Proc(IUrlAccessor2*, UInt32),
    add_request_parameter : Proc(IUrlAccessor2*, Win32cr::System::Com::StructuredStorage::PROPSPEC*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_doc_format : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_clsid : Proc(IUrlAccessor2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_host : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_directory : Proc(IUrlAccessor2*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IUrlAccessor2*, UInt64*, Win32cr::Foundation::HRESULT),
    get_last_modified : Proc(IUrlAccessor2*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_descriptor : Proc(IUrlAccessor2*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_redirected_url : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_provider : Proc(IUrlAccessor2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    bind_to_stream : Proc(IUrlAccessor2*, Void**, Win32cr::Foundation::HRESULT),
    bind_to_filter : Proc(IUrlAccessor2*, Void**, Win32cr::Foundation::HRESULT),
    get_display_url : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_document : Proc(IUrlAccessor2*, Win32cr::Foundation::HRESULT),
    get_code_page : Proc(IUrlAccessor2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IUrlAccessor2, lpVtbl : IUrlAccessor2Vtbl* do
    GUID = LibC::GUID.new(0xc7310734_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x4f_u8])
    def query_interface(this : IUrlAccessor2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUrlAccessor2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUrlAccessor2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_request_parameter(this : IUrlAccessor2*, pSpec : Win32cr::System::Com::StructuredStorage::PROPSPEC*, pVar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_request_parameter.call(this, pSpec, pVar)
    end
    def get_doc_format(this : IUrlAccessor2*, wszDocFormat : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_format.call(this, wszDocFormat, dwSize, pdwLength)
    end
    def get_clsid(this : IUrlAccessor2*, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clsid.call(this, pClsid)
    end
    def get_host(this : IUrlAccessor2*, wszHost : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_host.call(this, wszHost, dwSize, pdwLength)
    end
    def is_directory(this : IUrlAccessor2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_directory.call(this)
    end
    def get_size(this : IUrlAccessor2*, pllSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pllSize)
    end
    def get_last_modified(this : IUrlAccessor2*, pftLastModified : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_modified.call(this, pftLastModified)
    end
    def get_file_name(this : IUrlAccessor2*, wszFileName : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, wszFileName, dwSize, pdwLength)
    end
    def get_security_descriptor(this : IUrlAccessor2*, pSD : UInt8*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_descriptor.call(this, pSD, dwSize, pdwLength)
    end
    def get_redirected_url(this : IUrlAccessor2*, wszRedirectedURL : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redirected_url.call(this, wszRedirectedURL, dwSize, pdwLength)
    end
    def get_security_provider(this : IUrlAccessor2*, pSPClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_provider.call(this, pSPClsid)
    end
    def bind_to_stream(this : IUrlAccessor2*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_stream.call(this, ppStream)
    end
    def bind_to_filter(this : IUrlAccessor2*, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_filter.call(this, ppFilter)
    end
    def get_display_url(this : IUrlAccessor2*, wszDocUrl : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_url.call(this, wszDocUrl, dwSize, pdwLength)
    end
    def is_document(this : IUrlAccessor2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_document.call(this)
    end
    def get_code_page(this : IUrlAccessor2*, wszCodePage : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page.call(this, wszCodePage, dwSize, pdwLength)
    end

  end

  @[Extern]
  record IUrlAccessor3Vtbl,
    query_interface : Proc(IUrlAccessor3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUrlAccessor3*, UInt32),
    release : Proc(IUrlAccessor3*, UInt32),
    add_request_parameter : Proc(IUrlAccessor3*, Win32cr::System::Com::StructuredStorage::PROPSPEC*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_doc_format : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_clsid : Proc(IUrlAccessor3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_host : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_directory : Proc(IUrlAccessor3*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IUrlAccessor3*, UInt64*, Win32cr::Foundation::HRESULT),
    get_last_modified : Proc(IUrlAccessor3*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_descriptor : Proc(IUrlAccessor3*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_redirected_url : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_provider : Proc(IUrlAccessor3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    bind_to_stream : Proc(IUrlAccessor3*, Void**, Win32cr::Foundation::HRESULT),
    bind_to_filter : Proc(IUrlAccessor3*, Void**, Win32cr::Foundation::HRESULT),
    get_display_url : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_document : Proc(IUrlAccessor3*, Win32cr::Foundation::HRESULT),
    get_code_page : Proc(IUrlAccessor3*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_impersonation_sid_blobs : Proc(IUrlAccessor3*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Com::BLOB**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IUrlAccessor3, lpVtbl : IUrlAccessor3Vtbl* do
    GUID = LibC::GUID.new(0x6fbc7005_u32, 0x455_u16, 0x4874_u16, StaticArray[0xb8_u8, 0xff_u8, 0x74_u8, 0x39_u8, 0x45_u8, 0x2_u8, 0x41_u8, 0xa3_u8])
    def query_interface(this : IUrlAccessor3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUrlAccessor3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUrlAccessor3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_request_parameter(this : IUrlAccessor3*, pSpec : Win32cr::System::Com::StructuredStorage::PROPSPEC*, pVar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_request_parameter.call(this, pSpec, pVar)
    end
    def get_doc_format(this : IUrlAccessor3*, wszDocFormat : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_format.call(this, wszDocFormat, dwSize, pdwLength)
    end
    def get_clsid(this : IUrlAccessor3*, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clsid.call(this, pClsid)
    end
    def get_host(this : IUrlAccessor3*, wszHost : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_host.call(this, wszHost, dwSize, pdwLength)
    end
    def is_directory(this : IUrlAccessor3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_directory.call(this)
    end
    def get_size(this : IUrlAccessor3*, pllSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pllSize)
    end
    def get_last_modified(this : IUrlAccessor3*, pftLastModified : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_modified.call(this, pftLastModified)
    end
    def get_file_name(this : IUrlAccessor3*, wszFileName : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, wszFileName, dwSize, pdwLength)
    end
    def get_security_descriptor(this : IUrlAccessor3*, pSD : UInt8*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_descriptor.call(this, pSD, dwSize, pdwLength)
    end
    def get_redirected_url(this : IUrlAccessor3*, wszRedirectedURL : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redirected_url.call(this, wszRedirectedURL, dwSize, pdwLength)
    end
    def get_security_provider(this : IUrlAccessor3*, pSPClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_provider.call(this, pSPClsid)
    end
    def bind_to_stream(this : IUrlAccessor3*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_stream.call(this, ppStream)
    end
    def bind_to_filter(this : IUrlAccessor3*, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_filter.call(this, ppFilter)
    end
    def get_display_url(this : IUrlAccessor3*, wszDocUrl : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_url.call(this, wszDocUrl, dwSize, pdwLength)
    end
    def is_document(this : IUrlAccessor3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_document.call(this)
    end
    def get_code_page(this : IUrlAccessor3*, wszCodePage : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page.call(this, wszCodePage, dwSize, pdwLength)
    end
    def get_impersonation_sid_blobs(this : IUrlAccessor3*, pcwszURL : Win32cr::Foundation::PWSTR, pcSidCount : UInt32*, ppSidBlobs : Win32cr::System::Com::BLOB**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_impersonation_sid_blobs.call(this, pcwszURL, pcSidCount, ppSidBlobs)
    end

  end

  @[Extern]
  record IUrlAccessor4Vtbl,
    query_interface : Proc(IUrlAccessor4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUrlAccessor4*, UInt32),
    release : Proc(IUrlAccessor4*, UInt32),
    add_request_parameter : Proc(IUrlAccessor4*, Win32cr::System::Com::StructuredStorage::PROPSPEC*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_doc_format : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_clsid : Proc(IUrlAccessor4*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_host : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_directory : Proc(IUrlAccessor4*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IUrlAccessor4*, UInt64*, Win32cr::Foundation::HRESULT),
    get_last_modified : Proc(IUrlAccessor4*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_descriptor : Proc(IUrlAccessor4*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_redirected_url : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_provider : Proc(IUrlAccessor4*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    bind_to_stream : Proc(IUrlAccessor4*, Void**, Win32cr::Foundation::HRESULT),
    bind_to_filter : Proc(IUrlAccessor4*, Void**, Win32cr::Foundation::HRESULT),
    get_display_url : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_document : Proc(IUrlAccessor4*, Win32cr::Foundation::HRESULT),
    get_code_page : Proc(IUrlAccessor4*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_impersonation_sid_blobs : Proc(IUrlAccessor4*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Com::BLOB**, Win32cr::Foundation::HRESULT),
    should_index_item_content : Proc(IUrlAccessor4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    should_index_property : Proc(IUrlAccessor4*, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IUrlAccessor4, lpVtbl : IUrlAccessor4Vtbl* do
    GUID = LibC::GUID.new(0x5cc51041_u32, 0xc8d2_u16, 0x41d7_u16, StaticArray[0xbc_u8, 0xa3_u8, 0x9e_u8, 0x9e_u8, 0x28_u8, 0x62_u8, 0x97_u8, 0xdc_u8])
    def query_interface(this : IUrlAccessor4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUrlAccessor4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUrlAccessor4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_request_parameter(this : IUrlAccessor4*, pSpec : Win32cr::System::Com::StructuredStorage::PROPSPEC*, pVar : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_request_parameter.call(this, pSpec, pVar)
    end
    def get_doc_format(this : IUrlAccessor4*, wszDocFormat : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doc_format.call(this, wszDocFormat, dwSize, pdwLength)
    end
    def get_clsid(this : IUrlAccessor4*, pClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clsid.call(this, pClsid)
    end
    def get_host(this : IUrlAccessor4*, wszHost : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_host.call(this, wszHost, dwSize, pdwLength)
    end
    def is_directory(this : IUrlAccessor4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_directory.call(this)
    end
    def get_size(this : IUrlAccessor4*, pllSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, pllSize)
    end
    def get_last_modified(this : IUrlAccessor4*, pftLastModified : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_modified.call(this, pftLastModified)
    end
    def get_file_name(this : IUrlAccessor4*, wszFileName : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, wszFileName, dwSize, pdwLength)
    end
    def get_security_descriptor(this : IUrlAccessor4*, pSD : UInt8*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_descriptor.call(this, pSD, dwSize, pdwLength)
    end
    def get_redirected_url(this : IUrlAccessor4*, wszRedirectedURL : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redirected_url.call(this, wszRedirectedURL, dwSize, pdwLength)
    end
    def get_security_provider(this : IUrlAccessor4*, pSPClsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_provider.call(this, pSPClsid)
    end
    def bind_to_stream(this : IUrlAccessor4*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_stream.call(this, ppStream)
    end
    def bind_to_filter(this : IUrlAccessor4*, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_to_filter.call(this, ppFilter)
    end
    def get_display_url(this : IUrlAccessor4*, wszDocUrl : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_url.call(this, wszDocUrl, dwSize, pdwLength)
    end
    def is_document(this : IUrlAccessor4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_document.call(this)
    end
    def get_code_page(this : IUrlAccessor4*, wszCodePage : UInt16*, dwSize : UInt32, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page.call(this, wszCodePage, dwSize, pdwLength)
    end
    def get_impersonation_sid_blobs(this : IUrlAccessor4*, pcwszURL : Win32cr::Foundation::PWSTR, pcSidCount : UInt32*, ppSidBlobs : Win32cr::System::Com::BLOB**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_impersonation_sid_blobs.call(this, pcwszURL, pcSidCount, ppSidBlobs)
    end
    def should_index_item_content(this : IUrlAccessor4*, pfIndexContent : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_index_item_content.call(this, pfIndexContent)
    end
    def should_index_property(this : IUrlAccessor4*, key : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, pfIndexProperty : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_index_property.call(this, key, pfIndexProperty)
    end

  end

  @[Extern]
  record IOpLockStatusVtbl,
    query_interface : Proc(IOpLockStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOpLockStatus*, UInt32),
    release : Proc(IOpLockStatus*, UInt32),
    is_oplock_valid : Proc(IOpLockStatus*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_oplock_broken : Proc(IOpLockStatus*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_oplock_event_handle : Proc(IOpLockStatus*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOpLockStatus, lpVtbl : IOpLockStatusVtbl* do
    GUID = LibC::GUID.new(0xc731065d_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x4f_u8])
    def query_interface(this : IOpLockStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOpLockStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOpLockStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_oplock_valid(this : IOpLockStatus*, pfIsOplockValid : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_oplock_valid.call(this, pfIsOplockValid)
    end
    def is_oplock_broken(this : IOpLockStatus*, pfIsOplockBroken : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_oplock_broken.call(this, pfIsOplockBroken)
    end
    def get_oplock_event_handle(this : IOpLockStatus*, phOplockEv : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_oplock_event_handle.call(this, phOplockEv)
    end

  end

  @[Extern]
  record ISearchProtocolThreadContextVtbl,
    query_interface : Proc(ISearchProtocolThreadContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchProtocolThreadContext*, UInt32),
    release : Proc(ISearchProtocolThreadContext*, UInt32),
    thread_init : Proc(ISearchProtocolThreadContext*, Win32cr::Foundation::HRESULT),
    thread_shutdown : Proc(ISearchProtocolThreadContext*, Win32cr::Foundation::HRESULT),
    thread_idle : Proc(ISearchProtocolThreadContext*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchProtocolThreadContext, lpVtbl : ISearchProtocolThreadContextVtbl* do
    GUID = LibC::GUID.new(0xc73106e1_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x4f_u8])
    def query_interface(this : ISearchProtocolThreadContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchProtocolThreadContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchProtocolThreadContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def thread_init(this : ISearchProtocolThreadContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.thread_init.call(this)
    end
    def thread_shutdown(this : ISearchProtocolThreadContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.thread_shutdown.call(this)
    end
    def thread_idle(this : ISearchProtocolThreadContext*, dwTimeElaspedSinceLastCallInMS : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.thread_idle.call(this, dwTimeElaspedSinceLastCallInMS)
    end

  end

  @[Extern]
  record ISearchProtocolVtbl,
    query_interface : Proc(ISearchProtocol*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchProtocol*, UInt32),
    release : Proc(ISearchProtocol*, UInt32),
    init : Proc(ISearchProtocol*, Win32cr::System::Search::TIMEOUT_INFO*, Void*, Win32cr::System::Search::PROXY_INFO*, Win32cr::Foundation::HRESULT),
    create_accessor : Proc(ISearchProtocol*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::AUTHENTICATION_INFO*, Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, Win32cr::System::Search::ITEM_INFO*, Void**, Win32cr::Foundation::HRESULT),
    close_accessor : Proc(ISearchProtocol*, Void*, Win32cr::Foundation::HRESULT),
    shut_down : Proc(ISearchProtocol*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchProtocol, lpVtbl : ISearchProtocolVtbl* do
    GUID = LibC::GUID.new(0xc73106ba_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x4f_u8])
    def query_interface(this : ISearchProtocol*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchProtocol*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchProtocol*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : ISearchProtocol*, pTimeoutInfo : Win32cr::System::Search::TIMEOUT_INFO*, pProtocolHandlerSite : Void*, pProxyInfo : Win32cr::System::Search::PROXY_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pTimeoutInfo, pProtocolHandlerSite, pProxyInfo)
    end
    def create_accessor(this : ISearchProtocol*, pcwszURL : Win32cr::Foundation::PWSTR, pAuthenticationInfo : Win32cr::System::Search::AUTHENTICATION_INFO*, pIncrementalAccessInfo : Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, pItemInfo : Win32cr::System::Search::ITEM_INFO*, ppAccessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_accessor.call(this, pcwszURL, pAuthenticationInfo, pIncrementalAccessInfo, pItemInfo, ppAccessor)
    end
    def close_accessor(this : ISearchProtocol*, pAccessor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_accessor.call(this, pAccessor)
    end
    def shut_down(this : ISearchProtocol*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shut_down.call(this)
    end

  end

  @[Extern]
  record ISearchProtocol2Vtbl,
    query_interface : Proc(ISearchProtocol2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchProtocol2*, UInt32),
    release : Proc(ISearchProtocol2*, UInt32),
    init : Proc(ISearchProtocol2*, Win32cr::System::Search::TIMEOUT_INFO*, Void*, Win32cr::System::Search::PROXY_INFO*, Win32cr::Foundation::HRESULT),
    create_accessor : Proc(ISearchProtocol2*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::AUTHENTICATION_INFO*, Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, Win32cr::System::Search::ITEM_INFO*, Void**, Win32cr::Foundation::HRESULT),
    close_accessor : Proc(ISearchProtocol2*, Void*, Win32cr::Foundation::HRESULT),
    shut_down : Proc(ISearchProtocol2*, Win32cr::Foundation::HRESULT),
    create_accessor_ex : Proc(ISearchProtocol2*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::AUTHENTICATION_INFO*, Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, Win32cr::System::Search::ITEM_INFO*, Win32cr::System::Com::BLOB*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchProtocol2, lpVtbl : ISearchProtocol2Vtbl* do
    GUID = LibC::GUID.new(0x7789f0b2_u32, 0xb5b2_u16, 0x4722_u16, StaticArray[0x8b_u8, 0x65_u8, 0x5d_u8, 0xbd_u8, 0x15_u8, 0x6_u8, 0x97_u8, 0xa9_u8])
    def query_interface(this : ISearchProtocol2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchProtocol2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchProtocol2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : ISearchProtocol2*, pTimeoutInfo : Win32cr::System::Search::TIMEOUT_INFO*, pProtocolHandlerSite : Void*, pProxyInfo : Win32cr::System::Search::PROXY_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pTimeoutInfo, pProtocolHandlerSite, pProxyInfo)
    end
    def create_accessor(this : ISearchProtocol2*, pcwszURL : Win32cr::Foundation::PWSTR, pAuthenticationInfo : Win32cr::System::Search::AUTHENTICATION_INFO*, pIncrementalAccessInfo : Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, pItemInfo : Win32cr::System::Search::ITEM_INFO*, ppAccessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_accessor.call(this, pcwszURL, pAuthenticationInfo, pIncrementalAccessInfo, pItemInfo, ppAccessor)
    end
    def close_accessor(this : ISearchProtocol2*, pAccessor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_accessor.call(this, pAccessor)
    end
    def shut_down(this : ISearchProtocol2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shut_down.call(this)
    end
    def create_accessor_ex(this : ISearchProtocol2*, pcwszURL : Win32cr::Foundation::PWSTR, pAuthenticationInfo : Win32cr::System::Search::AUTHENTICATION_INFO*, pIncrementalAccessInfo : Win32cr::System::Search::INCREMENTAL_ACCESS_INFO*, pItemInfo : Win32cr::System::Search::ITEM_INFO*, pUserData : Win32cr::System::Com::BLOB*, ppAccessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_accessor_ex.call(this, pcwszURL, pAuthenticationInfo, pIncrementalAccessInfo, pItemInfo, pUserData, ppAccessor)
    end

  end

  @[Extern]
  record IProtocolHandlerSiteVtbl,
    query_interface : Proc(IProtocolHandlerSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProtocolHandlerSite*, UInt32),
    release : Proc(IProtocolHandlerSite*, UInt32),
    get_filter : Proc(IProtocolHandlerSite*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProtocolHandlerSite, lpVtbl : IProtocolHandlerSiteVtbl* do
    GUID = LibC::GUID.new(0xb63e385_u32, 0x9ccc_u16, 0x11d0_u16, StaticArray[0xbc_u8, 0xdb_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xcc_u8, 0xce_u8, 0x4_u8])
    def query_interface(this : IProtocolHandlerSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProtocolHandlerSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProtocolHandlerSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_filter(this : IProtocolHandlerSite*, pclsidObj : LibC::GUID*, pcwszContentType : Win32cr::Foundation::PWSTR, pcwszExtension : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter.call(this, pclsidObj, pcwszContentType, pcwszExtension, ppFilter)
    end

  end

  @[Extern]
  record ISearchRootVtbl,
    query_interface : Proc(ISearchRoot*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchRoot*, UInt32),
    release : Proc(ISearchRoot*, UInt32),
    put_Schedule : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_Schedule : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootURL : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootURL : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_IsHierarchical : Proc(ISearchRoot*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_IsHierarchical : Proc(ISearchRoot*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_ProvidesNotifications : Proc(ISearchRoot*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_ProvidesNotifications : Proc(ISearchRoot*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseNotificationsOnly : Proc(ISearchRoot*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_UseNotificationsOnly : Proc(ISearchRoot*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnumerationDepth : Proc(ISearchRoot*, UInt32, Win32cr::Foundation::HRESULT),
    get_EnumerationDepth : Proc(ISearchRoot*, UInt32*, Win32cr::Foundation::HRESULT),
    put_HostDepth : Proc(ISearchRoot*, UInt32, Win32cr::Foundation::HRESULT),
    get_HostDepth : Proc(ISearchRoot*, UInt32*, Win32cr::Foundation::HRESULT),
    put_FollowDirectories : Proc(ISearchRoot*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_FollowDirectories : Proc(ISearchRoot*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_AuthenticationType : Proc(ISearchRoot*, Win32cr::System::Search::AUTH_TYPE, Win32cr::Foundation::HRESULT),
    get_AuthenticationType : Proc(ISearchRoot*, Win32cr::System::Search::AUTH_TYPE*, Win32cr::Foundation::HRESULT),
    put_User : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_User : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_Password : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_Password : Proc(ISearchRoot*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchRoot, lpVtbl : ISearchRootVtbl* do
    GUID = LibC::GUID.new(0x4c18ccf_u32, 0x1f57_u16, 0x4cbd_u16, StaticArray[0x88_u8, 0xcc_u8, 0x39_u8, 0x0_u8, 0xf5_u8, 0x19_u8, 0x5c_u8, 0xe3_u8])
    def query_interface(this : ISearchRoot*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchRoot*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchRoot*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Schedule(this : ISearchRoot*, pszTaskArg : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Schedule.call(this, pszTaskArg)
    end
    def get_Schedule(this : ISearchRoot*, ppszTaskArg : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schedule.call(this, ppszTaskArg)
    end
    def put_RootURL(this : ISearchRoot*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootURL.call(this, pszURL)
    end
    def get_RootURL(this : ISearchRoot*, ppszURL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootURL.call(this, ppszURL)
    end
    def put_IsHierarchical(this : ISearchRoot*, fIsHierarchical : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHierarchical.call(this, fIsHierarchical)
    end
    def get_IsHierarchical(this : ISearchRoot*, pfIsHierarchical : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHierarchical.call(this, pfIsHierarchical)
    end
    def put_ProvidesNotifications(this : ISearchRoot*, fProvidesNotifications : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProvidesNotifications.call(this, fProvidesNotifications)
    end
    def get_ProvidesNotifications(this : ISearchRoot*, pfProvidesNotifications : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProvidesNotifications.call(this, pfProvidesNotifications)
    end
    def put_UseNotificationsOnly(this : ISearchRoot*, fUseNotificationsOnly : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseNotificationsOnly.call(this, fUseNotificationsOnly)
    end
    def get_UseNotificationsOnly(this : ISearchRoot*, pfUseNotificationsOnly : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseNotificationsOnly.call(this, pfUseNotificationsOnly)
    end
    def put_EnumerationDepth(this : ISearchRoot*, dwDepth : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnumerationDepth.call(this, dwDepth)
    end
    def get_EnumerationDepth(this : ISearchRoot*, pdwDepth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumerationDepth.call(this, pdwDepth)
    end
    def put_HostDepth(this : ISearchRoot*, dwDepth : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HostDepth.call(this, dwDepth)
    end
    def get_HostDepth(this : ISearchRoot*, pdwDepth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HostDepth.call(this, pdwDepth)
    end
    def put_FollowDirectories(this : ISearchRoot*, fFollowDirectories : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FollowDirectories.call(this, fFollowDirectories)
    end
    def get_FollowDirectories(this : ISearchRoot*, pfFollowDirectories : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FollowDirectories.call(this, pfFollowDirectories)
    end
    def put_AuthenticationType(this : ISearchRoot*, authType : Win32cr::System::Search::AUTH_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AuthenticationType.call(this, authType)
    end
    def get_AuthenticationType(this : ISearchRoot*, pAuthType : Win32cr::System::Search::AUTH_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuthenticationType.call(this, pAuthType)
    end
    def put_User(this : ISearchRoot*, pszUser : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_User.call(this, pszUser)
    end
    def get_User(this : ISearchRoot*, ppszUser : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_User.call(this, ppszUser)
    end
    def put_Password(this : ISearchRoot*, pszPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Password.call(this, pszPassword)
    end
    def get_Password(this : ISearchRoot*, ppszPassword : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Password.call(this, ppszPassword)
    end

  end

  @[Extern]
  record IEnumSearchRootsVtbl,
    query_interface : Proc(IEnumSearchRoots*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumSearchRoots*, UInt32),
    release : Proc(IEnumSearchRoots*, UInt32),
    next__ : Proc(IEnumSearchRoots*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumSearchRoots*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumSearchRoots*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumSearchRoots*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumSearchRoots, lpVtbl : IEnumSearchRootsVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x52_u8])
    def query_interface(this : IEnumSearchRoots*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumSearchRoots*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumSearchRoots*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumSearchRoots*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumSearchRoots*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumSearchRoots*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumSearchRoots*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record ISearchScopeRuleVtbl,
    query_interface : Proc(ISearchScopeRule*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchScopeRule*, UInt32),
    release : Proc(ISearchScopeRule*, UInt32),
    get_PatternOrURL : Proc(ISearchScopeRule*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_IsIncluded : Proc(ISearchScopeRule*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_IsDefault : Proc(ISearchScopeRule*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_FollowFlags : Proc(ISearchScopeRule*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchScopeRule, lpVtbl : ISearchScopeRuleVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x53_u8])
    def query_interface(this : ISearchScopeRule*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchScopeRule*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchScopeRule*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_PatternOrURL(this : ISearchScopeRule*, ppszPatternOrURL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PatternOrURL.call(this, ppszPatternOrURL)
    end
    def get_IsIncluded(this : ISearchScopeRule*, pfIsIncluded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsIncluded.call(this, pfIsIncluded)
    end
    def get_IsDefault(this : ISearchScopeRule*, pfIsDefault : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsDefault.call(this, pfIsDefault)
    end
    def get_FollowFlags(this : ISearchScopeRule*, pFollowFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FollowFlags.call(this, pFollowFlags)
    end

  end

  @[Extern]
  record IEnumSearchScopeRulesVtbl,
    query_interface : Proc(IEnumSearchScopeRules*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumSearchScopeRules*, UInt32),
    release : Proc(IEnumSearchScopeRules*, UInt32),
    next__ : Proc(IEnumSearchScopeRules*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumSearchScopeRules*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumSearchScopeRules*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumSearchScopeRules*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumSearchScopeRules, lpVtbl : IEnumSearchScopeRulesVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x54_u8])
    def query_interface(this : IEnumSearchScopeRules*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumSearchScopeRules*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumSearchScopeRules*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumSearchScopeRules*, celt : UInt32, pprgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pprgelt, pceltFetched)
    end
    def skip(this : IEnumSearchScopeRules*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumSearchScopeRules*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumSearchScopeRules*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record ISearchCrawlScopeManagerVtbl,
    query_interface : Proc(ISearchCrawlScopeManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchCrawlScopeManager*, UInt32),
    release : Proc(ISearchCrawlScopeManager*, UInt32),
    add_default_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    add_root : Proc(ISearchCrawlScopeManager*, Void*, Win32cr::Foundation::HRESULT),
    remove_root : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enumerate_roots : Proc(ISearchCrawlScopeManager*, Void**, Win32cr::Foundation::HRESULT),
    add_hierarchical_scope : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    add_user_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    remove_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enumerate_scope_rules : Proc(ISearchCrawlScopeManager*, Void**, Win32cr::Foundation::HRESULT),
    has_parent_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    has_child_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    included_in_crawl_scope : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    included_in_crawl_scope_ex : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::System::Search::CLUSION_REASON*, Win32cr::Foundation::HRESULT),
    revert_to_default_scopes : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::HRESULT),
    save_all : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::HRESULT),
    get_parent_scope_version_id : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::HRESULT),
    remove_default_scope_rule : Proc(ISearchCrawlScopeManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchCrawlScopeManager, lpVtbl : ISearchCrawlScopeManagerVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x55_u8])
    def query_interface(this : ISearchCrawlScopeManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchCrawlScopeManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchCrawlScopeManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_default_scope_rule(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fFollowFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_default_scope_rule.call(this, pszURL, fInclude, fFollowFlags)
    end
    def add_root(this : ISearchCrawlScopeManager*, pSearchRoot : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_root.call(this, pSearchRoot)
    end
    def remove_root(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_root.call(this, pszURL)
    end
    def enumerate_roots(this : ISearchCrawlScopeManager*, ppSearchRoots : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_roots.call(this, ppSearchRoots)
    end
    def add_hierarchical_scope(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fDefault : Win32cr::Foundation::BOOL, fOverrideChildren : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_hierarchical_scope.call(this, pszURL, fInclude, fDefault, fOverrideChildren)
    end
    def add_user_scope_rule(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fOverrideChildren : Win32cr::Foundation::BOOL, fFollowFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_user_scope_rule.call(this, pszURL, fInclude, fOverrideChildren, fFollowFlags)
    end
    def remove_scope_rule(this : ISearchCrawlScopeManager*, pszRule : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_scope_rule.call(this, pszRule)
    end
    def enumerate_scope_rules(this : ISearchCrawlScopeManager*, ppSearchScopeRules : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_scope_rules.call(this, ppSearchScopeRules)
    end
    def has_parent_scope_rule(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, pfHasParentRule : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_parent_scope_rule.call(this, pszURL, pfHasParentRule)
    end
    def has_child_scope_rule(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, pfHasChildRule : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_child_scope_rule.call(this, pszURL, pfHasChildRule)
    end
    def included_in_crawl_scope(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, pfIsIncluded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.included_in_crawl_scope.call(this, pszURL, pfIsIncluded)
    end
    def included_in_crawl_scope_ex(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, pfIsIncluded : Win32cr::Foundation::BOOL*, pReason : Win32cr::System::Search::CLUSION_REASON*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.included_in_crawl_scope_ex.call(this, pszURL, pfIsIncluded, pReason)
    end
    def revert_to_default_scopes(this : ISearchCrawlScopeManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revert_to_default_scopes.call(this)
    end
    def save_all(this : ISearchCrawlScopeManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_all.call(this)
    end
    def get_parent_scope_version_id(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR, plScopeId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent_scope_version_id.call(this, pszURL, plScopeId)
    end
    def remove_default_scope_rule(this : ISearchCrawlScopeManager*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_default_scope_rule.call(this, pszURL)
    end

  end

  @[Extern]
  record ISearchCrawlScopeManager2Vtbl,
    query_interface : Proc(ISearchCrawlScopeManager2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchCrawlScopeManager2*, UInt32),
    release : Proc(ISearchCrawlScopeManager2*, UInt32),
    add_default_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    add_root : Proc(ISearchCrawlScopeManager2*, Void*, Win32cr::Foundation::HRESULT),
    remove_root : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enumerate_roots : Proc(ISearchCrawlScopeManager2*, Void**, Win32cr::Foundation::HRESULT),
    add_hierarchical_scope : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    add_user_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    remove_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enumerate_scope_rules : Proc(ISearchCrawlScopeManager2*, Void**, Win32cr::Foundation::HRESULT),
    has_parent_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    has_child_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    included_in_crawl_scope : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    included_in_crawl_scope_ex : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::System::Search::CLUSION_REASON*, Win32cr::Foundation::HRESULT),
    revert_to_default_scopes : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::HRESULT),
    save_all : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::HRESULT),
    get_parent_scope_version_id : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::HRESULT),
    remove_default_scope_rule : Proc(ISearchCrawlScopeManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_version : Proc(ISearchCrawlScopeManager2*, Int32**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchCrawlScopeManager2, lpVtbl : ISearchCrawlScopeManager2Vtbl* do
    GUID = LibC::GUID.new(0x6292f7ad_u32, 0x4e19_u16, 0x4717_u16, StaticArray[0xa5_u8, 0x34_u8, 0x8f_u8, 0xc2_u8, 0x2b_u8, 0xcd_u8, 0x5c_u8, 0xcd_u8])
    def query_interface(this : ISearchCrawlScopeManager2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchCrawlScopeManager2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchCrawlScopeManager2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_default_scope_rule(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fFollowFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_default_scope_rule.call(this, pszURL, fInclude, fFollowFlags)
    end
    def add_root(this : ISearchCrawlScopeManager2*, pSearchRoot : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_root.call(this, pSearchRoot)
    end
    def remove_root(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_root.call(this, pszURL)
    end
    def enumerate_roots(this : ISearchCrawlScopeManager2*, ppSearchRoots : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_roots.call(this, ppSearchRoots)
    end
    def add_hierarchical_scope(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fDefault : Win32cr::Foundation::BOOL, fOverrideChildren : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_hierarchical_scope.call(this, pszURL, fInclude, fDefault, fOverrideChildren)
    end
    def add_user_scope_rule(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, fInclude : Win32cr::Foundation::BOOL, fOverrideChildren : Win32cr::Foundation::BOOL, fFollowFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_user_scope_rule.call(this, pszURL, fInclude, fOverrideChildren, fFollowFlags)
    end
    def remove_scope_rule(this : ISearchCrawlScopeManager2*, pszRule : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_scope_rule.call(this, pszRule)
    end
    def enumerate_scope_rules(this : ISearchCrawlScopeManager2*, ppSearchScopeRules : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_scope_rules.call(this, ppSearchScopeRules)
    end
    def has_parent_scope_rule(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, pfHasParentRule : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_parent_scope_rule.call(this, pszURL, pfHasParentRule)
    end
    def has_child_scope_rule(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, pfHasChildRule : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_child_scope_rule.call(this, pszURL, pfHasChildRule)
    end
    def included_in_crawl_scope(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, pfIsIncluded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.included_in_crawl_scope.call(this, pszURL, pfIsIncluded)
    end
    def included_in_crawl_scope_ex(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, pfIsIncluded : Win32cr::Foundation::BOOL*, pReason : Win32cr::System::Search::CLUSION_REASON*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.included_in_crawl_scope_ex.call(this, pszURL, pfIsIncluded, pReason)
    end
    def revert_to_default_scopes(this : ISearchCrawlScopeManager2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revert_to_default_scopes.call(this)
    end
    def save_all(this : ISearchCrawlScopeManager2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_all.call(this)
    end
    def get_parent_scope_version_id(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR, plScopeId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent_scope_version_id.call(this, pszURL, plScopeId)
    end
    def remove_default_scope_rule(this : ISearchCrawlScopeManager2*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_default_scope_rule.call(this, pszURL)
    end
    def get_version(this : ISearchCrawlScopeManager2*, plVersion : Int32**, phFileMapping : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, plVersion, phFileMapping)
    end

  end

  @[Extern]
  record ISearchItemsChangedSinkVtbl,
    query_interface : Proc(ISearchItemsChangedSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchItemsChangedSink*, UInt32),
    release : Proc(ISearchItemsChangedSink*, UInt32),
    started_monitoring_scope : Proc(ISearchItemsChangedSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    stopped_monitoring_scope : Proc(ISearchItemsChangedSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_items_changed : Proc(ISearchItemsChangedSink*, UInt32, Win32cr::System::Search::SEARCH_ITEM_CHANGE*, UInt32*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchItemsChangedSink, lpVtbl : ISearchItemsChangedSinkVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x58_u8])
    def query_interface(this : ISearchItemsChangedSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchItemsChangedSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchItemsChangedSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def started_monitoring_scope(this : ISearchItemsChangedSink*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.started_monitoring_scope.call(this, pszURL)
    end
    def stopped_monitoring_scope(this : ISearchItemsChangedSink*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopped_monitoring_scope.call(this, pszURL)
    end
    def on_items_changed(this : ISearchItemsChangedSink*, dwNumberOfChanges : UInt32, rgDataChangeEntries : Win32cr::System::Search::SEARCH_ITEM_CHANGE*, rgdwDocIds : UInt32*, rghrCompletionCodes : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_items_changed.call(this, dwNumberOfChanges, rgDataChangeEntries, rgdwDocIds, rghrCompletionCodes)
    end

  end

  @[Extern]
  record ISearchPersistentItemsChangedSinkVtbl,
    query_interface : Proc(ISearchPersistentItemsChangedSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchPersistentItemsChangedSink*, UInt32),
    release : Proc(ISearchPersistentItemsChangedSink*, UInt32),
    started_monitoring_scope : Proc(ISearchPersistentItemsChangedSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    stopped_monitoring_scope : Proc(ISearchPersistentItemsChangedSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_items_changed : Proc(ISearchPersistentItemsChangedSink*, UInt32, Win32cr::System::Search::SEARCH_ITEM_PERSISTENT_CHANGE*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchPersistentItemsChangedSink, lpVtbl : ISearchPersistentItemsChangedSinkVtbl* do
    GUID = LibC::GUID.new(0xa2ffdf9b_u32, 0x4758_u16, 0x4f84_u16, StaticArray[0xb7_u8, 0x29_u8, 0xdf_u8, 0x81_u8, 0xa1_u8, 0xa0_u8, 0x61_u8, 0x2f_u8])
    def query_interface(this : ISearchPersistentItemsChangedSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchPersistentItemsChangedSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchPersistentItemsChangedSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def started_monitoring_scope(this : ISearchPersistentItemsChangedSink*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.started_monitoring_scope.call(this, pszURL)
    end
    def stopped_monitoring_scope(this : ISearchPersistentItemsChangedSink*, pszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopped_monitoring_scope.call(this, pszURL)
    end
    def on_items_changed(this : ISearchPersistentItemsChangedSink*, dwNumberOfChanges : UInt32, data_change_entries : Win32cr::System::Search::SEARCH_ITEM_PERSISTENT_CHANGE*, hrCompletionCodes : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_items_changed.call(this, dwNumberOfChanges, data_change_entries, hrCompletionCodes)
    end

  end

  @[Extern]
  record ISearchViewChangedSinkVtbl,
    query_interface : Proc(ISearchViewChangedSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchViewChangedSink*, UInt32),
    release : Proc(ISearchViewChangedSink*, UInt32),
    on_change : Proc(ISearchViewChangedSink*, Int32*, Win32cr::System::Search::SEARCH_ITEM_CHANGE*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchViewChangedSink, lpVtbl : ISearchViewChangedSinkVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x65_u8])
    def query_interface(this : ISearchViewChangedSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchViewChangedSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchViewChangedSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_change(this : ISearchViewChangedSink*, pdwDocID : Int32*, pChange : Win32cr::System::Search::SEARCH_ITEM_CHANGE*, pfInView : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_change.call(this, pdwDocID, pChange, pfInView)
    end

  end

  @[Extern]
  record ISearchNotifyInlineSiteVtbl,
    query_interface : Proc(ISearchNotifyInlineSite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchNotifyInlineSite*, UInt32),
    release : Proc(ISearchNotifyInlineSite*, UInt32),
    on_item_indexed_status_change : Proc(ISearchNotifyInlineSite*, Win32cr::System::Search::SEARCH_INDEXING_PHASE, UInt32, Win32cr::System::Search::SEARCH_ITEM_INDEXING_STATUS*, Win32cr::Foundation::HRESULT),
    on_catalog_status_change : Proc(ISearchNotifyInlineSite*, LibC::GUID*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchNotifyInlineSite, lpVtbl : ISearchNotifyInlineSiteVtbl* do
    GUID = LibC::GUID.new(0xb5702e61_u32, 0xe75c_u16, 0x4b64_u16, StaticArray[0x82_u8, 0xa1_u8, 0x6c_u8, 0xb4_u8, 0xf8_u8, 0x32_u8, 0xfc_u8, 0xcf_u8])
    def query_interface(this : ISearchNotifyInlineSite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchNotifyInlineSite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchNotifyInlineSite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_item_indexed_status_change(this : ISearchNotifyInlineSite*, sipStatus : Win32cr::System::Search::SEARCH_INDEXING_PHASE, dwNumEntries : UInt32, rgItemStatusEntries : Win32cr::System::Search::SEARCH_ITEM_INDEXING_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_item_indexed_status_change.call(this, sipStatus, dwNumEntries, rgItemStatusEntries)
    end
    def on_catalog_status_change(this : ISearchNotifyInlineSite*, guidCatalogResetSignature : LibC::GUID*, guidCheckPointSignature : LibC::GUID*, dwLastCheckPointNumber : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_catalog_status_change.call(this, guidCatalogResetSignature, guidCheckPointSignature, dwLastCheckPointNumber)
    end

  end

  @[Extern]
  record ISearchCatalogManagerVtbl,
    query_interface : Proc(ISearchCatalogManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchCatalogManager*, UInt32),
    release : Proc(ISearchCatalogManager*, UInt32),
    get_Name : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_parameter : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT**, Win32cr::Foundation::HRESULT),
    set_parameter : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_catalog_status : Proc(ISearchCatalogManager*, Win32cr::System::Search::CatalogStatus*, Win32cr::System::Search::CatalogPausedReason*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISearchCatalogManager*, Win32cr::Foundation::HRESULT),
    reindex : Proc(ISearchCatalogManager*, Win32cr::Foundation::HRESULT),
    reindex_matching_ur_ls : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    reindex_search_root : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    put_ConnectTimeout : Proc(ISearchCatalogManager*, UInt32, Win32cr::Foundation::HRESULT),
    get_ConnectTimeout : Proc(ISearchCatalogManager*, UInt32*, Win32cr::Foundation::HRESULT),
    put_DataTimeout : Proc(ISearchCatalogManager*, UInt32, Win32cr::Foundation::HRESULT),
    get_DataTimeout : Proc(ISearchCatalogManager*, UInt32*, Win32cr::Foundation::HRESULT),
    number_of_items : Proc(ISearchCatalogManager*, Int32*, Win32cr::Foundation::HRESULT),
    number_of_items_to_index : Proc(ISearchCatalogManager*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    url_being_indexed : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_url_indexing_state : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_persistent_items_changed_sink : Proc(ISearchCatalogManager*, Void**, Win32cr::Foundation::HRESULT),
    register_view_for_notification : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_items_changed_sink : Proc(ISearchCatalogManager*, Void*, LibC::GUID*, Void**, LibC::GUID*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    unregister_view_for_notification : Proc(ISearchCatalogManager*, UInt32, Win32cr::Foundation::HRESULT),
    set_extension_clusion : Proc(ISearchCatalogManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    enumerate_excluded_extensions : Proc(ISearchCatalogManager*, Void**, Win32cr::Foundation::HRESULT),
    get_query_helper : Proc(ISearchCatalogManager*, Void**, Win32cr::Foundation::HRESULT),
    put_DiacriticSensitivity : Proc(ISearchCatalogManager*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_DiacriticSensitivity : Proc(ISearchCatalogManager*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_crawl_scope_manager : Proc(ISearchCatalogManager*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchCatalogManager, lpVtbl : ISearchCatalogManagerVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x50_u8])
    def query_interface(this : ISearchCatalogManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchCatalogManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchCatalogManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Name(this : ISearchCatalogManager*, pszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pszName)
    end
    def get_parameter(this : ISearchCatalogManager*, pszName : Win32cr::Foundation::PWSTR, ppValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter.call(this, pszName, ppValue)
    end
    def set_parameter(this : ISearchCatalogManager*, pszName : Win32cr::Foundation::PWSTR, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameter.call(this, pszName, pValue)
    end
    def get_catalog_status(this : ISearchCatalogManager*, pStatus : Win32cr::System::Search::CatalogStatus*, pPausedReason : Win32cr::System::Search::CatalogPausedReason*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog_status.call(this, pStatus, pPausedReason)
    end
    def reset(this : ISearchCatalogManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def reindex(this : ISearchCatalogManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex.call(this)
    end
    def reindex_matching_ur_ls(this : ISearchCatalogManager*, pszPattern : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex_matching_ur_ls.call(this, pszPattern)
    end
    def reindex_search_root(this : ISearchCatalogManager*, pszRootURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex_search_root.call(this, pszRootURL)
    end
    def put_ConnectTimeout(this : ISearchCatalogManager*, dwConnectTimeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ConnectTimeout.call(this, dwConnectTimeout)
    end
    def get_ConnectTimeout(this : ISearchCatalogManager*, pdwConnectTimeout : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectTimeout.call(this, pdwConnectTimeout)
    end
    def put_DataTimeout(this : ISearchCatalogManager*, dwDataTimeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DataTimeout.call(this, dwDataTimeout)
    end
    def get_DataTimeout(this : ISearchCatalogManager*, pdwDataTimeout : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataTimeout.call(this, pdwDataTimeout)
    end
    def number_of_items(this : ISearchCatalogManager*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.number_of_items.call(this, plCount)
    end
    def number_of_items_to_index(this : ISearchCatalogManager*, plIncrementalCount : Int32*, plNotificationQueue : Int32*, plHighPriorityQueue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.number_of_items_to_index.call(this, plIncrementalCount, plNotificationQueue, plHighPriorityQueue)
    end
    def url_being_indexed(this : ISearchCatalogManager*, pszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.url_being_indexed.call(this, pszUrl)
    end
    def get_url_indexing_state(this : ISearchCatalogManager*, pszURL : Win32cr::Foundation::PWSTR, pdwState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url_indexing_state.call(this, pszURL, pdwState)
    end
    def get_persistent_items_changed_sink(this : ISearchCatalogManager*, ppISearchPersistentItemsChangedSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_persistent_items_changed_sink.call(this, ppISearchPersistentItemsChangedSink)
    end
    def register_view_for_notification(this : ISearchCatalogManager*, pszView : Win32cr::Foundation::PWSTR, pViewChangedSink : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_view_for_notification.call(this, pszView, pViewChangedSink, pdwCookie)
    end
    def get_items_changed_sink(this : ISearchCatalogManager*, pISearchNotifyInlineSite : Void*, riid : LibC::GUID*, ppv : Void**, pGUIDCatalogResetSignature : LibC::GUID*, pGUIDCheckPointSignature : LibC::GUID*, pdwLastCheckPointNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_items_changed_sink.call(this, pISearchNotifyInlineSite, riid, ppv, pGUIDCatalogResetSignature, pGUIDCheckPointSignature, pdwLastCheckPointNumber)
    end
    def unregister_view_for_notification(this : ISearchCatalogManager*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_view_for_notification.call(this, dwCookie)
    end
    def set_extension_clusion(this : ISearchCatalogManager*, pszExtension : Win32cr::Foundation::PWSTR, fExclude : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_extension_clusion.call(this, pszExtension, fExclude)
    end
    def enumerate_excluded_extensions(this : ISearchCatalogManager*, ppExtensions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_excluded_extensions.call(this, ppExtensions)
    end
    def get_query_helper(this : ISearchCatalogManager*, ppSearchQueryHelper : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_query_helper.call(this, ppSearchQueryHelper)
    end
    def put_DiacriticSensitivity(this : ISearchCatalogManager*, fDiacriticSensitive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiacriticSensitivity.call(this, fDiacriticSensitive)
    end
    def get_DiacriticSensitivity(this : ISearchCatalogManager*, pfDiacriticSensitive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiacriticSensitivity.call(this, pfDiacriticSensitive)
    end
    def get_crawl_scope_manager(this : ISearchCatalogManager*, ppCrawlScopeManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_crawl_scope_manager.call(this, ppCrawlScopeManager)
    end

  end

  @[Extern]
  record ISearchCatalogManager2Vtbl,
    query_interface : Proc(ISearchCatalogManager2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchCatalogManager2*, UInt32),
    release : Proc(ISearchCatalogManager2*, UInt32),
    get_Name : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_parameter : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT**, Win32cr::Foundation::HRESULT),
    set_parameter : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_catalog_status : Proc(ISearchCatalogManager2*, Win32cr::System::Search::CatalogStatus*, Win32cr::System::Search::CatalogPausedReason*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISearchCatalogManager2*, Win32cr::Foundation::HRESULT),
    reindex : Proc(ISearchCatalogManager2*, Win32cr::Foundation::HRESULT),
    reindex_matching_ur_ls : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    reindex_search_root : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    put_ConnectTimeout : Proc(ISearchCatalogManager2*, UInt32, Win32cr::Foundation::HRESULT),
    get_ConnectTimeout : Proc(ISearchCatalogManager2*, UInt32*, Win32cr::Foundation::HRESULT),
    put_DataTimeout : Proc(ISearchCatalogManager2*, UInt32, Win32cr::Foundation::HRESULT),
    get_DataTimeout : Proc(ISearchCatalogManager2*, UInt32*, Win32cr::Foundation::HRESULT),
    number_of_items : Proc(ISearchCatalogManager2*, Int32*, Win32cr::Foundation::HRESULT),
    number_of_items_to_index : Proc(ISearchCatalogManager2*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    url_being_indexed : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_url_indexing_state : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Foundation::HRESULT),
    get_persistent_items_changed_sink : Proc(ISearchCatalogManager2*, Void**, Win32cr::Foundation::HRESULT),
    register_view_for_notification : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_items_changed_sink : Proc(ISearchCatalogManager2*, Void*, LibC::GUID*, Void**, LibC::GUID*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    unregister_view_for_notification : Proc(ISearchCatalogManager2*, UInt32, Win32cr::Foundation::HRESULT),
    set_extension_clusion : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    enumerate_excluded_extensions : Proc(ISearchCatalogManager2*, Void**, Win32cr::Foundation::HRESULT),
    get_query_helper : Proc(ISearchCatalogManager2*, Void**, Win32cr::Foundation::HRESULT),
    put_DiacriticSensitivity : Proc(ISearchCatalogManager2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_DiacriticSensitivity : Proc(ISearchCatalogManager2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_crawl_scope_manager : Proc(ISearchCatalogManager2*, Void**, Win32cr::Foundation::HRESULT),
    prioritize_matching_ur_ls : Proc(ISearchCatalogManager2*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::PRIORITIZE_FLAGS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchCatalogManager2, lpVtbl : ISearchCatalogManager2Vtbl* do
    GUID = LibC::GUID.new(0x7ac3286d_u32, 0x4d1d_u16, 0x4817_u16, StaticArray[0x84_u8, 0xfc_u8, 0xc1_u8, 0xc8_u8, 0x5e_u8, 0x3a_u8, 0xf0_u8, 0xd9_u8])
    def query_interface(this : ISearchCatalogManager2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchCatalogManager2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchCatalogManager2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Name(this : ISearchCatalogManager2*, pszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pszName)
    end
    def get_parameter(this : ISearchCatalogManager2*, pszName : Win32cr::Foundation::PWSTR, ppValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter.call(this, pszName, ppValue)
    end
    def set_parameter(this : ISearchCatalogManager2*, pszName : Win32cr::Foundation::PWSTR, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameter.call(this, pszName, pValue)
    end
    def get_catalog_status(this : ISearchCatalogManager2*, pStatus : Win32cr::System::Search::CatalogStatus*, pPausedReason : Win32cr::System::Search::CatalogPausedReason*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog_status.call(this, pStatus, pPausedReason)
    end
    def reset(this : ISearchCatalogManager2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def reindex(this : ISearchCatalogManager2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex.call(this)
    end
    def reindex_matching_ur_ls(this : ISearchCatalogManager2*, pszPattern : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex_matching_ur_ls.call(this, pszPattern)
    end
    def reindex_search_root(this : ISearchCatalogManager2*, pszRootURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reindex_search_root.call(this, pszRootURL)
    end
    def put_ConnectTimeout(this : ISearchCatalogManager2*, dwConnectTimeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ConnectTimeout.call(this, dwConnectTimeout)
    end
    def get_ConnectTimeout(this : ISearchCatalogManager2*, pdwConnectTimeout : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectTimeout.call(this, pdwConnectTimeout)
    end
    def put_DataTimeout(this : ISearchCatalogManager2*, dwDataTimeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DataTimeout.call(this, dwDataTimeout)
    end
    def get_DataTimeout(this : ISearchCatalogManager2*, pdwDataTimeout : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataTimeout.call(this, pdwDataTimeout)
    end
    def number_of_items(this : ISearchCatalogManager2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.number_of_items.call(this, plCount)
    end
    def number_of_items_to_index(this : ISearchCatalogManager2*, plIncrementalCount : Int32*, plNotificationQueue : Int32*, plHighPriorityQueue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.number_of_items_to_index.call(this, plIncrementalCount, plNotificationQueue, plHighPriorityQueue)
    end
    def url_being_indexed(this : ISearchCatalogManager2*, pszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.url_being_indexed.call(this, pszUrl)
    end
    def get_url_indexing_state(this : ISearchCatalogManager2*, pszURL : Win32cr::Foundation::PWSTR, pdwState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url_indexing_state.call(this, pszURL, pdwState)
    end
    def get_persistent_items_changed_sink(this : ISearchCatalogManager2*, ppISearchPersistentItemsChangedSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_persistent_items_changed_sink.call(this, ppISearchPersistentItemsChangedSink)
    end
    def register_view_for_notification(this : ISearchCatalogManager2*, pszView : Win32cr::Foundation::PWSTR, pViewChangedSink : Void*, pdwCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_view_for_notification.call(this, pszView, pViewChangedSink, pdwCookie)
    end
    def get_items_changed_sink(this : ISearchCatalogManager2*, pISearchNotifyInlineSite : Void*, riid : LibC::GUID*, ppv : Void**, pGUIDCatalogResetSignature : LibC::GUID*, pGUIDCheckPointSignature : LibC::GUID*, pdwLastCheckPointNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_items_changed_sink.call(this, pISearchNotifyInlineSite, riid, ppv, pGUIDCatalogResetSignature, pGUIDCheckPointSignature, pdwLastCheckPointNumber)
    end
    def unregister_view_for_notification(this : ISearchCatalogManager2*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_view_for_notification.call(this, dwCookie)
    end
    def set_extension_clusion(this : ISearchCatalogManager2*, pszExtension : Win32cr::Foundation::PWSTR, fExclude : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_extension_clusion.call(this, pszExtension, fExclude)
    end
    def enumerate_excluded_extensions(this : ISearchCatalogManager2*, ppExtensions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_excluded_extensions.call(this, ppExtensions)
    end
    def get_query_helper(this : ISearchCatalogManager2*, ppSearchQueryHelper : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_query_helper.call(this, ppSearchQueryHelper)
    end
    def put_DiacriticSensitivity(this : ISearchCatalogManager2*, fDiacriticSensitive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiacriticSensitivity.call(this, fDiacriticSensitive)
    end
    def get_DiacriticSensitivity(this : ISearchCatalogManager2*, pfDiacriticSensitive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiacriticSensitivity.call(this, pfDiacriticSensitive)
    end
    def get_crawl_scope_manager(this : ISearchCatalogManager2*, ppCrawlScopeManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_crawl_scope_manager.call(this, ppCrawlScopeManager)
    end
    def prioritize_matching_ur_ls(this : ISearchCatalogManager2*, pszPattern : Win32cr::Foundation::PWSTR, dwPrioritizeFlags : Win32cr::System::Search::PRIORITIZE_FLAGS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prioritize_matching_ur_ls.call(this, pszPattern, dwPrioritizeFlags)
    end

  end

  @[Extern]
  record ISearchQueryHelperVtbl,
    query_interface : Proc(ISearchQueryHelper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchQueryHelper*, UInt32),
    release : Proc(ISearchQueryHelper*, UInt32),
    get_ConnectionString : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_QueryContentLocale : Proc(ISearchQueryHelper*, UInt32, Win32cr::Foundation::HRESULT),
    get_QueryContentLocale : Proc(ISearchQueryHelper*, UInt32*, Win32cr::Foundation::HRESULT),
    put_QueryKeywordLocale : Proc(ISearchQueryHelper*, UInt32, Win32cr::Foundation::HRESULT),
    get_QueryKeywordLocale : Proc(ISearchQueryHelper*, UInt32*, Win32cr::Foundation::HRESULT),
    put_QueryTermExpansion : Proc(ISearchQueryHelper*, Win32cr::System::Search::SEARCH_TERM_EXPANSION, Win32cr::Foundation::HRESULT),
    get_QueryTermExpansion : Proc(ISearchQueryHelper*, Win32cr::System::Search::SEARCH_TERM_EXPANSION*, Win32cr::Foundation::HRESULT),
    put_QuerySyntax : Proc(ISearchQueryHelper*, Win32cr::System::Search::SEARCH_QUERY_SYNTAX, Win32cr::Foundation::HRESULT),
    get_QuerySyntax : Proc(ISearchQueryHelper*, Win32cr::System::Search::SEARCH_QUERY_SYNTAX*, Win32cr::Foundation::HRESULT),
    put_QueryContentProperties : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_QueryContentProperties : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_QuerySelectColumns : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_QuerySelectColumns : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_QueryWhereRestrictions : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_QueryWhereRestrictions : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_QuerySorting : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_QuerySorting : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    generate_sql_from_user_query : Proc(ISearchQueryHelper*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    write_properties : Proc(ISearchQueryHelper*, Int32, UInt32, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, Win32cr::System::Search::SEARCH_COLUMN_PROPERTIES*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT),
    put_QueryMaxResults : Proc(ISearchQueryHelper*, Int32, Win32cr::Foundation::HRESULT),
    get_QueryMaxResults : Proc(ISearchQueryHelper*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchQueryHelper, lpVtbl : ISearchQueryHelperVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x63_u8])
    def query_interface(this : ISearchQueryHelper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchQueryHelper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchQueryHelper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ConnectionString(this : ISearchQueryHelper*, pszConnectionString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectionString.call(this, pszConnectionString)
    end
    def put_QueryContentLocale(this : ISearchQueryHelper*, lcid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryContentLocale.call(this, lcid)
    end
    def get_QueryContentLocale(this : ISearchQueryHelper*, plcid : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryContentLocale.call(this, plcid)
    end
    def put_QueryKeywordLocale(this : ISearchQueryHelper*, lcid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryKeywordLocale.call(this, lcid)
    end
    def get_QueryKeywordLocale(this : ISearchQueryHelper*, plcid : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryKeywordLocale.call(this, plcid)
    end
    def put_QueryTermExpansion(this : ISearchQueryHelper*, expandTerms : Win32cr::System::Search::SEARCH_TERM_EXPANSION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryTermExpansion.call(this, expandTerms)
    end
    def get_QueryTermExpansion(this : ISearchQueryHelper*, pExpandTerms : Win32cr::System::Search::SEARCH_TERM_EXPANSION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryTermExpansion.call(this, pExpandTerms)
    end
    def put_QuerySyntax(this : ISearchQueryHelper*, querySyntax : Win32cr::System::Search::SEARCH_QUERY_SYNTAX) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QuerySyntax.call(this, querySyntax)
    end
    def get_QuerySyntax(this : ISearchQueryHelper*, pQuerySyntax : Win32cr::System::Search::SEARCH_QUERY_SYNTAX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QuerySyntax.call(this, pQuerySyntax)
    end
    def put_QueryContentProperties(this : ISearchQueryHelper*, pszContentProperties : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryContentProperties.call(this, pszContentProperties)
    end
    def get_QueryContentProperties(this : ISearchQueryHelper*, ppszContentProperties : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryContentProperties.call(this, ppszContentProperties)
    end
    def put_QuerySelectColumns(this : ISearchQueryHelper*, pszSelectColumns : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QuerySelectColumns.call(this, pszSelectColumns)
    end
    def get_QuerySelectColumns(this : ISearchQueryHelper*, ppszSelectColumns : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QuerySelectColumns.call(this, ppszSelectColumns)
    end
    def put_QueryWhereRestrictions(this : ISearchQueryHelper*, pszRestrictions : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryWhereRestrictions.call(this, pszRestrictions)
    end
    def get_QueryWhereRestrictions(this : ISearchQueryHelper*, ppszRestrictions : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryWhereRestrictions.call(this, ppszRestrictions)
    end
    def put_QuerySorting(this : ISearchQueryHelper*, pszSorting : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QuerySorting.call(this, pszSorting)
    end
    def get_QuerySorting(this : ISearchQueryHelper*, ppszSorting : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QuerySorting.call(this, ppszSorting)
    end
    def generate_sql_from_user_query(this : ISearchQueryHelper*, pszQuery : Win32cr::Foundation::PWSTR, ppszSQL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_sql_from_user_query.call(this, pszQuery, ppszSQL)
    end
    def write_properties(this : ISearchQueryHelper*, itemID : Int32, dwNumberOfColumns : UInt32, pColumns : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY*, pValues : Win32cr::System::Search::SEARCH_COLUMN_PROPERTIES*, pftGatherModifiedTime : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_properties.call(this, itemID, dwNumberOfColumns, pColumns, pValues, pftGatherModifiedTime)
    end
    def put_QueryMaxResults(this : ISearchQueryHelper*, cMaxResults : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_QueryMaxResults.call(this, cMaxResults)
    end
    def get_QueryMaxResults(this : ISearchQueryHelper*, pcMaxResults : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_QueryMaxResults.call(this, pcMaxResults)
    end

  end

  @[Extern]
  record IRowsetPrioritizationVtbl,
    query_interface : Proc(IRowsetPrioritization*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetPrioritization*, UInt32),
    release : Proc(IRowsetPrioritization*, UInt32),
    set_scope_priority : Proc(IRowsetPrioritization*, Win32cr::System::Search::PRIORITY_LEVEL, UInt32, Win32cr::Foundation::HRESULT),
    get_scope_priority : Proc(IRowsetPrioritization*, Win32cr::System::Search::PRIORITY_LEVEL*, UInt32*, Win32cr::Foundation::HRESULT),
    get_scope_statistics : Proc(IRowsetPrioritization*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetPrioritization, lpVtbl : IRowsetPrioritizationVtbl* do
    GUID = LibC::GUID.new(0x42811652_u32, 0x79d_u16, 0x481b_u16, StaticArray[0x87_u8, 0xa2_u8, 0x9_u8, 0xa6_u8, 0x9e_u8, 0xcc_u8, 0x5f_u8, 0x44_u8])
    def query_interface(this : IRowsetPrioritization*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetPrioritization*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetPrioritization*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_scope_priority(this : IRowsetPrioritization*, priority : Win32cr::System::Search::PRIORITY_LEVEL, scopeStatisticsEventFrequency : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scope_priority.call(this, priority, scopeStatisticsEventFrequency)
    end
    def get_scope_priority(this : IRowsetPrioritization*, priority : Win32cr::System::Search::PRIORITY_LEVEL*, scopeStatisticsEventFrequency : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_priority.call(this, priority, scopeStatisticsEventFrequency)
    end
    def get_scope_statistics(this : IRowsetPrioritization*, indexedDocumentCount : UInt32*, oustandingAddCount : UInt32*, oustandingModifyCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope_statistics.call(this, indexedDocumentCount, oustandingAddCount, oustandingModifyCount)
    end

  end

  @[Extern]
  record IRowsetEventsVtbl,
    query_interface : Proc(IRowsetEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetEvents*, UInt32),
    release : Proc(IRowsetEvents*, UInt32),
    on_new_item : Proc(IRowsetEvents*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Search::ROWSETEVENT_ITEMSTATE, Win32cr::Foundation::HRESULT),
    on_changed_item : Proc(IRowsetEvents*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Search::ROWSETEVENT_ITEMSTATE, Win32cr::System::Search::ROWSETEVENT_ITEMSTATE, Win32cr::Foundation::HRESULT),
    on_deleted_item : Proc(IRowsetEvents*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Search::ROWSETEVENT_ITEMSTATE, Win32cr::Foundation::HRESULT),
    on_rowset_event : Proc(IRowsetEvents*, Win32cr::System::Search::ROWSETEVENT_TYPE, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetEvents, lpVtbl : IRowsetEventsVtbl* do
    GUID = LibC::GUID.new(0x1551aea5_u32, 0x5d66_u16, 0x4b11_u16, StaticArray[0x86_u8, 0xf5_u8, 0xd5_u8, 0x63_u8, 0x4c_u8, 0xb2_u8, 0x11_u8, 0xb9_u8])
    def query_interface(this : IRowsetEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_new_item(this : IRowsetEvents*, itemID : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, newItemState : Win32cr::System::Search::ROWSETEVENT_ITEMSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_new_item.call(this, itemID, newItemState)
    end
    def on_changed_item(this : IRowsetEvents*, itemID : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, rowsetItemState : Win32cr::System::Search::ROWSETEVENT_ITEMSTATE, changedItemState : Win32cr::System::Search::ROWSETEVENT_ITEMSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_changed_item.call(this, itemID, rowsetItemState, changedItemState)
    end
    def on_deleted_item(this : IRowsetEvents*, itemID : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, deletedItemState : Win32cr::System::Search::ROWSETEVENT_ITEMSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_deleted_item.call(this, itemID, deletedItemState)
    end
    def on_rowset_event(this : IRowsetEvents*, eventType : Win32cr::System::Search::ROWSETEVENT_TYPE, eventData : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_rowset_event.call(this, eventType, eventData)
    end

  end

  @[Extern]
  record ISearchManagerVtbl,
    query_interface : Proc(ISearchManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchManager*, UInt32),
    release : Proc(ISearchManager*, UInt32),
    get_indexer_version_str : Proc(ISearchManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_indexer_version : Proc(ISearchManager*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_parameter : Proc(ISearchManager*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT**, Win32cr::Foundation::HRESULT),
    set_parameter : Proc(ISearchManager*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_ProxyName : Proc(ISearchManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_BypassList : Proc(ISearchManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_proxy : Proc(ISearchManager*, Win32cr::System::Search::PROXY_ACCESS, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_catalog : Proc(ISearchManager*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_UserAgent : Proc(ISearchManager*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_UserAgent : Proc(ISearchManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_UseProxy : Proc(ISearchManager*, Win32cr::System::Search::PROXY_ACCESS*, Win32cr::Foundation::HRESULT),
    get_LocalBypass : Proc(ISearchManager*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_PortNumber : Proc(ISearchManager*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchManager, lpVtbl : ISearchManagerVtbl* do
    GUID = LibC::GUID.new(0xab310581_u32, 0xac80_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0xf3_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xef_u8, 0x69_u8])
    def query_interface(this : ISearchManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_indexer_version_str(this : ISearchManager*, ppszVersionString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indexer_version_str.call(this, ppszVersionString)
    end
    def get_indexer_version(this : ISearchManager*, pdwMajor : UInt32*, pdwMinor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indexer_version.call(this, pdwMajor, pdwMinor)
    end
    def get_parameter(this : ISearchManager*, pszName : Win32cr::Foundation::PWSTR, ppValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter.call(this, pszName, ppValue)
    end
    def set_parameter(this : ISearchManager*, pszName : Win32cr::Foundation::PWSTR, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameter.call(this, pszName, pValue)
    end
    def get_ProxyName(this : ISearchManager*, ppszProxyName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProxyName.call(this, ppszProxyName)
    end
    def get_BypassList(this : ISearchManager*, ppszBypassList : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BypassList.call(this, ppszBypassList)
    end
    def set_proxy(this : ISearchManager*, sUseProxy : Win32cr::System::Search::PROXY_ACCESS, fLocalByPassProxy : Win32cr::Foundation::BOOL, dwPortNumber : UInt32, pszProxyName : Win32cr::Foundation::PWSTR, pszByPassList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_proxy.call(this, sUseProxy, fLocalByPassProxy, dwPortNumber, pszProxyName, pszByPassList)
    end
    def get_catalog(this : ISearchManager*, pszCatalog : Win32cr::Foundation::PWSTR, ppCatalogManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog.call(this, pszCatalog, ppCatalogManager)
    end
    def get_UserAgent(this : ISearchManager*, ppszUserAgent : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserAgent.call(this, ppszUserAgent)
    end
    def put_UserAgent(this : ISearchManager*, pszUserAgent : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UserAgent.call(this, pszUserAgent)
    end
    def get_UseProxy(this : ISearchManager*, pUseProxy : Win32cr::System::Search::PROXY_ACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseProxy.call(this, pUseProxy)
    end
    def get_LocalBypass(this : ISearchManager*, pfLocalBypass : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalBypass.call(this, pfLocalBypass)
    end
    def get_PortNumber(this : ISearchManager*, pdwPortNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PortNumber.call(this, pdwPortNumber)
    end

  end

  @[Extern]
  record ISearchManager2Vtbl,
    query_interface : Proc(ISearchManager2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchManager2*, UInt32),
    release : Proc(ISearchManager2*, UInt32),
    get_indexer_version_str : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_indexer_version : Proc(ISearchManager2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_parameter : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT**, Win32cr::Foundation::HRESULT),
    set_parameter : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_ProxyName : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_BypassList : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_proxy : Proc(ISearchManager2*, Win32cr::System::Search::PROXY_ACCESS, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_catalog : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_UserAgent : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_UserAgent : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_UseProxy : Proc(ISearchManager2*, Win32cr::System::Search::PROXY_ACCESS*, Win32cr::Foundation::HRESULT),
    get_LocalBypass : Proc(ISearchManager2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_PortNumber : Proc(ISearchManager2*, UInt32*, Win32cr::Foundation::HRESULT),
    create_catalog : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    delete_catalog : Proc(ISearchManager2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchManager2, lpVtbl : ISearchManager2Vtbl* do
    GUID = LibC::GUID.new(0xdbab3f73_u32, 0xdb19_u16, 0x4a79_u16, StaticArray[0xbf_u8, 0xc0_u8, 0xa6_u8, 0x1a_u8, 0x93_u8, 0x88_u8, 0x6d_u8, 0xdf_u8])
    def query_interface(this : ISearchManager2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchManager2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchManager2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_indexer_version_str(this : ISearchManager2*, ppszVersionString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indexer_version_str.call(this, ppszVersionString)
    end
    def get_indexer_version(this : ISearchManager2*, pdwMajor : UInt32*, pdwMinor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indexer_version.call(this, pdwMajor, pdwMinor)
    end
    def get_parameter(this : ISearchManager2*, pszName : Win32cr::Foundation::PWSTR, ppValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter.call(this, pszName, ppValue)
    end
    def set_parameter(this : ISearchManager2*, pszName : Win32cr::Foundation::PWSTR, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameter.call(this, pszName, pValue)
    end
    def get_ProxyName(this : ISearchManager2*, ppszProxyName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProxyName.call(this, ppszProxyName)
    end
    def get_BypassList(this : ISearchManager2*, ppszBypassList : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BypassList.call(this, ppszBypassList)
    end
    def set_proxy(this : ISearchManager2*, sUseProxy : Win32cr::System::Search::PROXY_ACCESS, fLocalByPassProxy : Win32cr::Foundation::BOOL, dwPortNumber : UInt32, pszProxyName : Win32cr::Foundation::PWSTR, pszByPassList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_proxy.call(this, sUseProxy, fLocalByPassProxy, dwPortNumber, pszProxyName, pszByPassList)
    end
    def get_catalog(this : ISearchManager2*, pszCatalog : Win32cr::Foundation::PWSTR, ppCatalogManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog.call(this, pszCatalog, ppCatalogManager)
    end
    def get_UserAgent(this : ISearchManager2*, ppszUserAgent : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserAgent.call(this, ppszUserAgent)
    end
    def put_UserAgent(this : ISearchManager2*, pszUserAgent : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UserAgent.call(this, pszUserAgent)
    end
    def get_UseProxy(this : ISearchManager2*, pUseProxy : Win32cr::System::Search::PROXY_ACCESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseProxy.call(this, pUseProxy)
    end
    def get_LocalBypass(this : ISearchManager2*, pfLocalBypass : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalBypass.call(this, pfLocalBypass)
    end
    def get_PortNumber(this : ISearchManager2*, pdwPortNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PortNumber.call(this, pdwPortNumber)
    end
    def create_catalog(this : ISearchManager2*, pszCatalog : Win32cr::Foundation::PWSTR, ppCatalogManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_catalog.call(this, pszCatalog, ppCatalogManager)
    end
    def delete_catalog(this : ISearchManager2*, pszCatalog : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_catalog.call(this, pszCatalog)
    end

  end

  @[Extern]
  record ISearchLanguageSupportVtbl,
    query_interface : Proc(ISearchLanguageSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchLanguageSupport*, UInt32),
    release : Proc(ISearchLanguageSupport*, UInt32),
    set_diacritic_sensitivity : Proc(ISearchLanguageSupport*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_diacritic_sensitivity : Proc(ISearchLanguageSupport*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    load_word_breaker : Proc(ISearchLanguageSupport*, UInt32, LibC::GUID*, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    load_stemmer : Proc(ISearchLanguageSupport*, UInt32, LibC::GUID*, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    is_prefix_normalized : Proc(ISearchLanguageSupport*, UInt16*, UInt32, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISearchLanguageSupport, lpVtbl : ISearchLanguageSupportVtbl* do
    GUID = LibC::GUID.new(0x24c3cbaa_u32, 0xebc1_u16, 0x491a_u16, StaticArray[0x9e_u8, 0xf1_u8, 0x9f_u8, 0x6d_u8, 0x8d_u8, 0xeb_u8, 0x1b_u8, 0x8f_u8])
    def query_interface(this : ISearchLanguageSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchLanguageSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchLanguageSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_diacritic_sensitivity(this : ISearchLanguageSupport*, fDiacriticSensitive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_diacritic_sensitivity.call(this, fDiacriticSensitive)
    end
    def get_diacritic_sensitivity(this : ISearchLanguageSupport*, pfDiacriticSensitive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_diacritic_sensitivity.call(this, pfDiacriticSensitive)
    end
    def load_word_breaker(this : ISearchLanguageSupport*, lcid : UInt32, riid : LibC::GUID*, ppWordBreaker : Void**, pLcidUsed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_word_breaker.call(this, lcid, riid, ppWordBreaker, pLcidUsed)
    end
    def load_stemmer(this : ISearchLanguageSupport*, lcid : UInt32, riid : LibC::GUID*, ppStemmer : Void**, pLcidUsed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_stemmer.call(this, lcid, riid, ppStemmer, pLcidUsed)
    end
    def is_prefix_normalized(this : ISearchLanguageSupport*, pwcsQueryToken : UInt16*, cwcQueryToken : UInt32, pwcsDocumentToken : UInt16*, cwcDocumentToken : UInt32, pulPrefixLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_prefix_normalized.call(this, pwcsQueryToken, cwcQueryToken, pwcsDocumentToken, cwcDocumentToken, pulPrefixLength)
    end

  end

  @[Extern]
  record IEnumItemPropertiesVtbl,
    query_interface : Proc(IEnumItemProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumItemProperties*, UInt32),
    release : Proc(IEnumItemProperties*, UInt32),
    next__ : Proc(IEnumItemProperties*, UInt32, Win32cr::System::Search::ITEMPROP*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumItemProperties*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumItemProperties*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumItemProperties*, Void**, Win32cr::Foundation::HRESULT),
    get_count : Proc(IEnumItemProperties*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumItemProperties, lpVtbl : IEnumItemPropertiesVtbl* do
    GUID = LibC::GUID.new(0xf72c8d96_u32, 0x6dbd_u16, 0x11d1_u16, StaticArray[0xa1_u8, 0xe8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xfb_u8, 0xe1_u8])
    def query_interface(this : IEnumItemProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumItemProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumItemProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumItemProperties*, celt : UInt32, rgelt : Win32cr::System::Search::ITEMPROP*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumItemProperties*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumItemProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumItemProperties*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end
    def get_count(this : IEnumItemProperties*, pnCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pnCount)
    end

  end

  @[Extern]
  record ISubscriptionItemVtbl,
    query_interface : Proc(ISubscriptionItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISubscriptionItem*, UInt32),
    release : Proc(ISubscriptionItem*, UInt32),
    get_cookie : Proc(ISubscriptionItem*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_subscription_item_info : Proc(ISubscriptionItem*, Win32cr::System::Search::SUBSCRIPTIONITEMINFO*, Win32cr::Foundation::HRESULT),
    set_subscription_item_info : Proc(ISubscriptionItem*, Win32cr::System::Search::SUBSCRIPTIONITEMINFO*, Win32cr::Foundation::HRESULT),
    read_properties : Proc(ISubscriptionItem*, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    write_properties : Proc(ISubscriptionItem*, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enum_properties : Proc(ISubscriptionItem*, Void**, Win32cr::Foundation::HRESULT),
    notify_changed : Proc(ISubscriptionItem*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISubscriptionItem, lpVtbl : ISubscriptionItemVtbl* do
    GUID = LibC::GUID.new(0xa97559f8_u32, 0x6c4a_u16, 0x11d1_u16, StaticArray[0xa1_u8, 0xe8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xfb_u8, 0xe1_u8])
    def query_interface(this : ISubscriptionItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISubscriptionItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISubscriptionItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_cookie(this : ISubscriptionItem*, pCookie : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pCookie)
    end
    def get_subscription_item_info(this : ISubscriptionItem*, pSubscriptionItemInfo : Win32cr::System::Search::SUBSCRIPTIONITEMINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subscription_item_info.call(this, pSubscriptionItemInfo)
    end
    def set_subscription_item_info(this : ISubscriptionItem*, pSubscriptionItemInfo : Win32cr::System::Search::SUBSCRIPTIONITEMINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_subscription_item_info.call(this, pSubscriptionItemInfo)
    end
    def read_properties(this : ISubscriptionItem*, nCount : UInt32, rgwszName : Win32cr::Foundation::PWSTR*, rgValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_properties.call(this, nCount, rgwszName, rgValue)
    end
    def write_properties(this : ISubscriptionItem*, nCount : UInt32, rgwszName : Win32cr::Foundation::PWSTR*, rgValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_properties.call(this, nCount, rgwszName, rgValue)
    end
    def enum_properties(this : ISubscriptionItem*, ppEnumItemProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_properties.call(this, ppEnumItemProperties)
    end
    def notify_changed(this : ISubscriptionItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_changed.call(this)
    end

  end

  @[Extern]
  record IEnumSubscriptionVtbl,
    query_interface : Proc(IEnumSubscription*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumSubscription*, UInt32),
    release : Proc(IEnumSubscription*, UInt32),
    next__ : Proc(IEnumSubscription*, UInt32, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumSubscription*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumSubscription*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumSubscription*, Void**, Win32cr::Foundation::HRESULT),
    get_count : Proc(IEnumSubscription*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumSubscription, lpVtbl : IEnumSubscriptionVtbl* do
    GUID = LibC::GUID.new(0xf72c8d97_u32, 0x6dbd_u16, 0x11d1_u16, StaticArray[0xa1_u8, 0xe8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xfb_u8, 0xe1_u8])
    def query_interface(this : IEnumSubscription*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumSubscription*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumSubscription*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumSubscription*, celt : UInt32, rgelt : LibC::GUID*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumSubscription*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumSubscription*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumSubscription*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end
    def get_count(this : IEnumSubscription*, pnCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pnCount)
    end

  end

  @[Extern]
  record ISubscriptionMgrVtbl,
    query_interface : Proc(ISubscriptionMgr*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISubscriptionMgr*, UInt32),
    release : Proc(ISubscriptionMgr*, UInt32),
    delete_subscription : Proc(ISubscriptionMgr*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    update_subscription : Proc(ISubscriptionMgr*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    update_all : Proc(ISubscriptionMgr*, Win32cr::Foundation::HRESULT),
    is_subscribed : Proc(ISubscriptionMgr*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_subscription_info : Proc(ISubscriptionMgr*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT),
    get_default_info : Proc(ISubscriptionMgr*, Win32cr::System::Search::SUBSCRIPTIONTYPE, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT),
    show_subscription_properties : Proc(ISubscriptionMgr*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    create_subscription : Proc(ISubscriptionMgr*, Win32cr::Foundation::HWND, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Search::SUBSCRIPTIONTYPE, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISubscriptionMgr, lpVtbl : ISubscriptionMgrVtbl* do
    GUID = LibC::GUID.new(0x85fb2c0_u32, 0xdf8_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x4b_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0x41_u8, 0x3f_u8])
    def query_interface(this : ISubscriptionMgr*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISubscriptionMgr*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISubscriptionMgr*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def delete_subscription(this : ISubscriptionMgr*, pwszURL : Win32cr::Foundation::PWSTR, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_subscription.call(this, pwszURL, hwnd)
    end
    def update_subscription(this : ISubscriptionMgr*, pwszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_subscription.call(this, pwszURL)
    end
    def update_all(this : ISubscriptionMgr*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_all.call(this)
    end
    def is_subscribed(this : ISubscriptionMgr*, pwszURL : Win32cr::Foundation::PWSTR, pfSubscribed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subscribed.call(this, pwszURL, pfSubscribed)
    end
    def get_subscription_info(this : ISubscriptionMgr*, pwszURL : Win32cr::Foundation::PWSTR, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subscription_info.call(this, pwszURL, pInfo)
    end
    def get_default_info(this : ISubscriptionMgr*, subType : Win32cr::System::Search::SUBSCRIPTIONTYPE, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_info.call(this, subType, pInfo)
    end
    def show_subscription_properties(this : ISubscriptionMgr*, pwszURL : Win32cr::Foundation::PWSTR, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_subscription_properties.call(this, pwszURL, hwnd)
    end
    def create_subscription(this : ISubscriptionMgr*, hwnd : Win32cr::Foundation::HWND, pwszURL : Win32cr::Foundation::PWSTR, pwszFriendlyName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, subsType : Win32cr::System::Search::SUBSCRIPTIONTYPE, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_subscription.call(this, hwnd, pwszURL, pwszFriendlyName, dwFlags, subsType, pInfo)
    end

  end

  @[Extern]
  record ISubscriptionMgr2Vtbl,
    query_interface : Proc(ISubscriptionMgr2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISubscriptionMgr2*, UInt32),
    release : Proc(ISubscriptionMgr2*, UInt32),
    delete_subscription : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    update_subscription : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    update_all : Proc(ISubscriptionMgr2*, Win32cr::Foundation::HRESULT),
    is_subscribed : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_subscription_info : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT),
    get_default_info : Proc(ISubscriptionMgr2*, Win32cr::System::Search::SUBSCRIPTIONTYPE, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT),
    show_subscription_properties : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    create_subscription : Proc(ISubscriptionMgr2*, Win32cr::Foundation::HWND, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Search::SUBSCRIPTIONTYPE, Win32cr::System::Search::SUBSCRIPTIONINFO*, Win32cr::Foundation::HRESULT),
    get_item_from_url : Proc(ISubscriptionMgr2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_item_from_cookie : Proc(ISubscriptionMgr2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_subscription_run_state : Proc(ISubscriptionMgr2*, UInt32, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_subscriptions : Proc(ISubscriptionMgr2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    update_items : Proc(ISubscriptionMgr2*, UInt32, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    abort_items : Proc(ISubscriptionMgr2*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    abort_all : Proc(ISubscriptionMgr2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISubscriptionMgr2, lpVtbl : ISubscriptionMgr2Vtbl* do
    GUID = LibC::GUID.new(0x614bc270_u32, 0xaedf_u16, 0x11d1_u16, StaticArray[0xa1_u8, 0xf9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xfb_u8, 0xe1_u8])
    def query_interface(this : ISubscriptionMgr2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISubscriptionMgr2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISubscriptionMgr2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def delete_subscription(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_subscription.call(this, pwszURL, hwnd)
    end
    def update_subscription(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_subscription.call(this, pwszURL)
    end
    def update_all(this : ISubscriptionMgr2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_all.call(this)
    end
    def is_subscribed(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR, pfSubscribed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subscribed.call(this, pwszURL, pfSubscribed)
    end
    def get_subscription_info(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subscription_info.call(this, pwszURL, pInfo)
    end
    def get_default_info(this : ISubscriptionMgr2*, subType : Win32cr::System::Search::SUBSCRIPTIONTYPE, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_info.call(this, subType, pInfo)
    end
    def show_subscription_properties(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_subscription_properties.call(this, pwszURL, hwnd)
    end
    def create_subscription(this : ISubscriptionMgr2*, hwnd : Win32cr::Foundation::HWND, pwszURL : Win32cr::Foundation::PWSTR, pwszFriendlyName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, subsType : Win32cr::System::Search::SUBSCRIPTIONTYPE, pInfo : Win32cr::System::Search::SUBSCRIPTIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_subscription.call(this, hwnd, pwszURL, pwszFriendlyName, dwFlags, subsType, pInfo)
    end
    def get_item_from_url(this : ISubscriptionMgr2*, pwszURL : Win32cr::Foundation::PWSTR, ppSubscriptionItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_from_url.call(this, pwszURL, ppSubscriptionItem)
    end
    def get_item_from_cookie(this : ISubscriptionMgr2*, pSubscriptionCookie : LibC::GUID*, ppSubscriptionItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_from_cookie.call(this, pSubscriptionCookie, ppSubscriptionItem)
    end
    def get_subscription_run_state(this : ISubscriptionMgr2*, dwNumCookies : UInt32, pCookies : LibC::GUID*, pdwRunState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subscription_run_state.call(this, dwNumCookies, pCookies, pdwRunState)
    end
    def enum_subscriptions(this : ISubscriptionMgr2*, dwFlags : UInt32, ppEnumSubscriptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_subscriptions.call(this, dwFlags, ppEnumSubscriptions)
    end
    def update_items(this : ISubscriptionMgr2*, dwFlags : UInt32, dwNumCookies : UInt32, pCookies : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_items.call(this, dwFlags, dwNumCookies, pCookies)
    end
    def abort_items(this : ISubscriptionMgr2*, dwNumCookies : UInt32, pCookies : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort_items.call(this, dwNumCookies, pCookies)
    end
    def abort_all(this : ISubscriptionMgr2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort_all.call(this)
    end

  end

  @[Extern]
  record IDataConvertVtbl,
    query_interface : Proc(IDataConvert*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataConvert*, UInt32),
    release : Proc(IDataConvert*, UInt32),
    data_convert : Proc(IDataConvert*, UInt16, UInt16, LibC::UIntPtrT, LibC::UIntPtrT*, Void*, Void*, LibC::UIntPtrT, UInt32, UInt32*, UInt8, UInt8, UInt32, Win32cr::Foundation::HRESULT),
    can_convert : Proc(IDataConvert*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    get_conversion_size : Proc(IDataConvert*, UInt16, UInt16, LibC::UIntPtrT*, LibC::UIntPtrT*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataConvert, lpVtbl : IDataConvertVtbl* do
    GUID = LibC::GUID.new(0xc733a8d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDataConvert*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataConvert*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataConvert*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def data_convert(this : IDataConvert*, wSrcType : UInt16, wDstType : UInt16, cbSrcLength : LibC::UIntPtrT, pcbDstLength : LibC::UIntPtrT*, pSrc : Void*, pDst : Void*, cbDstMaxLength : LibC::UIntPtrT, dbsSrcStatus : UInt32, pdbsStatus : UInt32*, bPrecision : UInt8, bScale : UInt8, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.data_convert.call(this, wSrcType, wDstType, cbSrcLength, pcbDstLength, pSrc, pDst, cbDstMaxLength, dbsSrcStatus, pdbsStatus, bPrecision, bScale, dwFlags)
    end
    def can_convert(this : IDataConvert*, wSrcType : UInt16, wDstType : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_convert.call(this, wSrcType, wDstType)
    end
    def get_conversion_size(this : IDataConvert*, wSrcType : UInt16, wDstType : UInt16, pcbSrcLength : LibC::UIntPtrT*, pcbDstLength : LibC::UIntPtrT*, pSrc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_conversion_size.call(this, wSrcType, wDstType, pcbSrcLength, pcbDstLength, pSrc)
    end

  end

  @[Extern]
  record IDCInfoVtbl,
    query_interface : Proc(IDCInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDCInfo*, UInt32),
    release : Proc(IDCInfo*, UInt32),
    get_info : Proc(IDCInfo*, UInt32, UInt32*, Win32cr::System::Search::DCINFO**, Win32cr::Foundation::HRESULT),
    set_info : Proc(IDCInfo*, UInt32, Win32cr::System::Search::DCINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDCInfo, lpVtbl : IDCInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a9c_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDCInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDCInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDCInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_info(this : IDCInfo*, cInfo : UInt32, rgeInfoType : UInt32*, prgInfo : Win32cr::System::Search::DCINFO**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, cInfo, rgeInfoType, prgInfo)
    end
    def set_info(this : IDCInfo*, cInfo : UInt32, rgInfo : Win32cr::System::Search::DCINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this, cInfo, rgInfo)
    end

  end

  @[Extern]
  record DataSourceListenerVtbl,
    query_interface : Proc(DataSourceListener*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DataSourceListener*, UInt32),
    release : Proc(DataSourceListener*, UInt32),
    dataMemberChanged : Proc(DataSourceListener*, UInt16*, Win32cr::Foundation::HRESULT),
    dataMemberAdded : Proc(DataSourceListener*, UInt16*, Win32cr::Foundation::HRESULT),
    dataMemberRemoved : Proc(DataSourceListener*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DataSourceListener, lpVtbl : DataSourceListenerVtbl* do
    GUID = LibC::GUID.new(0x7c0ffab2_u32, 0xcd84_u16, 0x11d0_u16, StaticArray[0x94_u8, 0x9a_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x10_u8, 0xed_u8])
    def query_interface(this : DataSourceListener*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DataSourceListener*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DataSourceListener*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def dataMemberChanged(this : DataSourceListener*, bstrDM : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dataMemberChanged.call(this, bstrDM)
    end
    def dataMemberAdded(this : DataSourceListener*, bstrDM : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dataMemberAdded.call(this, bstrDM)
    end
    def dataMemberRemoved(this : DataSourceListener*, bstrDM : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dataMemberRemoved.call(this, bstrDM)
    end

  end

  @[Extern]
  record DataSourceVtbl,
    query_interface : Proc(DataSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DataSource*, UInt32),
    release : Proc(DataSource*, UInt32),
    getDataMember : Proc(DataSource*, UInt16*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    getDataMemberName : Proc(DataSource*, Int32, UInt16**, Win32cr::Foundation::HRESULT),
    getDataMemberCount : Proc(DataSource*, Int32*, Win32cr::Foundation::HRESULT),
    addDataSourceListener : Proc(DataSource*, Void*, Win32cr::Foundation::HRESULT),
    removeDataSourceListener : Proc(DataSource*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DataSource, lpVtbl : DataSourceVtbl* do
    GUID = LibC::GUID.new(0x7c0ffab3_u32, 0xcd84_u16, 0x11d0_u16, StaticArray[0x94_u8, 0x9a_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x10_u8, 0xed_u8])
    def query_interface(this : DataSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DataSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DataSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getDataMember(this : DataSource*, bstrDM : UInt16*, riid : LibC::GUID*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDataMember.call(this, bstrDM, riid, ppunk)
    end
    def getDataMemberName(this : DataSource*, lIndex : Int32, pbstrDM : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDataMemberName.call(this, lIndex, pbstrDM)
    end
    def getDataMemberCount(this : DataSource*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDataMemberCount.call(this, plCount)
    end
    def addDataSourceListener(this : DataSource*, pDSL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addDataSourceListener.call(this, pDSL)
    end
    def removeDataSourceListener(this : DataSource*, pDSL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeDataSourceListener.call(this, pDSL)
    end

  end

  @[Extern]
  record OLEDBSimpleProviderListenerVtbl,
    query_interface : Proc(OLEDBSimpleProviderListener*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(OLEDBSimpleProviderListener*, UInt32),
    release : Proc(OLEDBSimpleProviderListener*, UInt32),
    aboutToChangeCell : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    cellChanged : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    aboutToDeleteRows : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    deletedRows : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    aboutToInsertRows : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    insertedRows : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    rowsAvailable : Proc(OLEDBSimpleProviderListener*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    transferComplete : Proc(OLEDBSimpleProviderListener*, Win32cr::System::Search::OSPXFER, Win32cr::Foundation::HRESULT)


  @[Extern]
  record OLEDBSimpleProviderListener, lpVtbl : OLEDBSimpleProviderListenerVtbl* do
    GUID = LibC::GUID.new(0xe0e270c1_u32, 0xc0be_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xe4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa_u8, 0x63_u8, 0x41_u8])
    def query_interface(this : OLEDBSimpleProviderListener*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : OLEDBSimpleProviderListener*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : OLEDBSimpleProviderListener*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def aboutToChangeCell(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, iColumn : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.aboutToChangeCell.call(this, iRow, iColumn)
    end
    def cellChanged(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, iColumn : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cellChanged.call(this, iRow, iColumn)
    end
    def aboutToDeleteRows(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.aboutToDeleteRows.call(this, iRow, cRows)
    end
    def deletedRows(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deletedRows.call(this, iRow, cRows)
    end
    def aboutToInsertRows(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.aboutToInsertRows.call(this, iRow, cRows)
    end
    def insertedRows(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertedRows.call(this, iRow, cRows)
    end
    def rowsAvailable(this : OLEDBSimpleProviderListener*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rowsAvailable.call(this, iRow, cRows)
    end
    def transferComplete(this : OLEDBSimpleProviderListener*, xfer : Win32cr::System::Search::OSPXFER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transferComplete.call(this, xfer)
    end

  end

  @[Extern]
  record OLEDBSimpleProviderVtbl,
    query_interface : Proc(OLEDBSimpleProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(OLEDBSimpleProvider*, UInt32),
    release : Proc(OLEDBSimpleProvider*, UInt32),
    getRowCount : Proc(OLEDBSimpleProvider*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    getColumnCount : Proc(OLEDBSimpleProvider*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    getRWStatus : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::System::Search::OSPRW*, Win32cr::Foundation::HRESULT),
    getVariant : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::System::Search::OSPFORMAT, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    setVariant : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::System::Search::OSPFORMAT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getLocale : Proc(OLEDBSimpleProvider*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    deleteRows : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    insertRows : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    find : Proc(OLEDBSimpleProvider*, LibC::IntPtrT, LibC::IntPtrT, Win32cr::System::Com::VARIANT, Win32cr::System::Search::OSPFIND, Win32cr::System::Search::OSPCOMP, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    addOLEDBSimpleProviderListener : Proc(OLEDBSimpleProvider*, Void*, Win32cr::Foundation::HRESULT),
    removeOLEDBSimpleProviderListener : Proc(OLEDBSimpleProvider*, Void*, Win32cr::Foundation::HRESULT),
    isAsync : Proc(OLEDBSimpleProvider*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    getEstimatedRows : Proc(OLEDBSimpleProvider*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    stopTransfer : Proc(OLEDBSimpleProvider*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record OLEDBSimpleProvider, lpVtbl : OLEDBSimpleProviderVtbl* do
    GUID = LibC::GUID.new(0xe0e270c0_u32, 0xc0be_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xe4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa_u8, 0x63_u8, 0x41_u8])
    def query_interface(this : OLEDBSimpleProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : OLEDBSimpleProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : OLEDBSimpleProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getRowCount(this : OLEDBSimpleProvider*, pcRows : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRowCount.call(this, pcRows)
    end
    def getColumnCount(this : OLEDBSimpleProvider*, pcColumns : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getColumnCount.call(this, pcColumns)
    end
    def getRWStatus(this : OLEDBSimpleProvider*, iRow : LibC::IntPtrT, iColumn : LibC::IntPtrT, prwStatus : Win32cr::System::Search::OSPRW*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRWStatus.call(this, iRow, iColumn, prwStatus)
    end
    def getVariant(this : OLEDBSimpleProvider*, iRow : LibC::IntPtrT, iColumn : LibC::IntPtrT, format : Win32cr::System::Search::OSPFORMAT, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getVariant.call(this, iRow, iColumn, format, pVar)
    end
    def setVariant(this : OLEDBSimpleProvider*, iRow : LibC::IntPtrT, iColumn : LibC::IntPtrT, format : Win32cr::System::Search::OSPFORMAT, var : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setVariant.call(this, iRow, iColumn, format, var)
    end
    def getLocale(this : OLEDBSimpleProvider*, pbstrLocale : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLocale.call(this, pbstrLocale)
    end
    def deleteRows(this : OLEDBSimpleProvider*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsDeleted : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deleteRows.call(this, iRow, cRows, pcRowsDeleted)
    end
    def insertRows(this : OLEDBSimpleProvider*, iRow : LibC::IntPtrT, cRows : LibC::IntPtrT, pcRowsInserted : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertRows.call(this, iRow, cRows, pcRowsInserted)
    end
    def find(this : OLEDBSimpleProvider*, iRowStart : LibC::IntPtrT, iColumn : LibC::IntPtrT, val : Win32cr::System::Com::VARIANT, findFlags : Win32cr::System::Search::OSPFIND, compType : Win32cr::System::Search::OSPCOMP, piRowFound : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find.call(this, iRowStart, iColumn, val, findFlags, compType, piRowFound)
    end
    def addOLEDBSimpleProviderListener(this : OLEDBSimpleProvider*, pospIListener : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addOLEDBSimpleProviderListener.call(this, pospIListener)
    end
    def removeOLEDBSimpleProviderListener(this : OLEDBSimpleProvider*, pospIListener : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeOLEDBSimpleProviderListener.call(this, pospIListener)
    end
    def isAsync(this : OLEDBSimpleProvider*, pbAsynch : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isAsync.call(this, pbAsynch)
    end
    def getEstimatedRows(this : OLEDBSimpleProvider*, piRows : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getEstimatedRows.call(this, piRows)
    end
    def stopTransfer(this : OLEDBSimpleProvider*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopTransfer.call(this)
    end

  end

  @[Extern]
  record DataSourceObjectVtbl,
    query_interface : Proc(DataSourceObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DataSourceObject*, UInt32),
    release : Proc(DataSourceObject*, UInt32),
    get_type_info_count : Proc(DataSourceObject*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DataSourceObject*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DataSourceObject*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DataSourceObject*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DataSourceObject, lpVtbl : DataSourceObjectVtbl* do
    GUID = LibC::GUID.new(0xae9a4e4_u32, 0x18d4_u16, 0x11d1_u16, StaticArray[0xb3_u8, 0xb3_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xc1_u8, 0xa9_u8, 0x24_u8])
    def query_interface(this : DataSourceObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DataSourceObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DataSourceObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DataSourceObject*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DataSourceObject*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DataSourceObject*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DataSourceObject*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IServiceVtbl,
    query_interface : Proc(IService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IService*, UInt32),
    release : Proc(IService*, UInt32),
    invoke_service : Proc(IService*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IService, lpVtbl : IServiceVtbl* do
    GUID = LibC::GUID.new(0x6210e88_u32, 0x1f5_u16, 0x11d1_u16, StaticArray[0xb5_u8, 0x12_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x81_u8, 0xc3_u8, 0x84_u8])
    def query_interface(this : IService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invoke_service(this : IService*, pUnkInner : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_service.call(this, pUnkInner)
    end

  end

  @[Extern]
  record IDBPromptInitializeVtbl,
    query_interface : Proc(IDBPromptInitialize*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBPromptInitialize*, UInt32),
    release : Proc(IDBPromptInitialize*, UInt32),
    prompt_data_source : Proc(IDBPromptInitialize*, Void*, Win32cr::Foundation::HWND, UInt32, UInt32, UInt32*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    prompt_file_name : Proc(IDBPromptInitialize*, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBPromptInitialize, lpVtbl : IDBPromptInitializeVtbl* do
    GUID = LibC::GUID.new(0x2206ccb0_u32, 0x19c1_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xa8_u8, 0x29_u8])
    def query_interface(this : IDBPromptInitialize*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBPromptInitialize*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBPromptInitialize*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def prompt_data_source(this : IDBPromptInitialize*, pUnkOuter : Void*, hWndParent : Win32cr::Foundation::HWND, dwPromptOptions : UInt32, cSourceTypeFilter : UInt32, rgSourceTypeFilter : UInt32*, pwszszzProviderFilter : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppDataSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prompt_data_source.call(this, pUnkOuter, hWndParent, dwPromptOptions, cSourceTypeFilter, rgSourceTypeFilter, pwszszzProviderFilter, riid, ppDataSource)
    end
    def prompt_file_name(this : IDBPromptInitialize*, hWndParent : Win32cr::Foundation::HWND, dwPromptOptions : UInt32, pwszInitialDirectory : Win32cr::Foundation::PWSTR, pwszInitialFile : Win32cr::Foundation::PWSTR, ppwszSelectedFile : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prompt_file_name.call(this, hWndParent, dwPromptOptions, pwszInitialDirectory, pwszInitialFile, ppwszSelectedFile)
    end

  end

  @[Extern]
  record IDataInitializeVtbl,
    query_interface : Proc(IDataInitialize*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataInitialize*, UInt32),
    release : Proc(IDataInitialize*, UInt32),
    get_data_source : Proc(IDataInitialize*, Void*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_initialization_string : Proc(IDataInitialize*, Void*, UInt8, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    create_db_instance : Proc(IDataInitialize*, LibC::GUID*, Void*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_db_instance_ex : Proc(IDataInitialize*, LibC::GUID*, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::System::Com::COSERVERINFO*, UInt32, Win32cr::System::Com::MULTI_QI*, Win32cr::Foundation::HRESULT),
    load_string_from_storage : Proc(IDataInitialize*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    write_string_to_storage : Proc(IDataInitialize*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataInitialize, lpVtbl : IDataInitializeVtbl* do
    GUID = LibC::GUID.new(0x2206ccb1_u32, 0x19c1_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xa8_u8, 0x29_u8])
    def query_interface(this : IDataInitialize*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataInitialize*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataInitialize*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data_source(this : IDataInitialize*, pUnkOuter : Void*, dwClsCtx : UInt32, pwszInitializationString : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppDataSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_source.call(this, pUnkOuter, dwClsCtx, pwszInitializationString, riid, ppDataSource)
    end
    def get_initialization_string(this : IDataInitialize*, pDataSource : Void*, fIncludePassword : UInt8, ppwszInitString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_initialization_string.call(this, pDataSource, fIncludePassword, ppwszInitString)
    end
    def create_db_instance(this : IDataInitialize*, clsidProvider : LibC::GUID*, pUnkOuter : Void*, dwClsCtx : UInt32, pwszReserved : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppDataSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_db_instance.call(this, clsidProvider, pUnkOuter, dwClsCtx, pwszReserved, riid, ppDataSource)
    end
    def create_db_instance_ex(this : IDataInitialize*, clsidProvider : LibC::GUID*, pUnkOuter : Void*, dwClsCtx : UInt32, pwszReserved : Win32cr::Foundation::PWSTR, pServerInfo : Win32cr::System::Com::COSERVERINFO*, cmq : UInt32, rgmqResults : Win32cr::System::Com::MULTI_QI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_db_instance_ex.call(this, clsidProvider, pUnkOuter, dwClsCtx, pwszReserved, pServerInfo, cmq, rgmqResults)
    end
    def load_string_from_storage(this : IDataInitialize*, pwszFileName : Win32cr::Foundation::PWSTR, ppwszInitializationString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_string_from_storage.call(this, pwszFileName, ppwszInitializationString)
    end
    def write_string_to_storage(this : IDataInitialize*, pwszFileName : Win32cr::Foundation::PWSTR, pwszInitializationString : Win32cr::Foundation::PWSTR, dwCreationDisposition : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_string_to_storage.call(this, pwszFileName, pwszInitializationString, dwCreationDisposition)
    end

  end

  @[Extern]
  record IDataSourceLocatorVtbl,
    query_interface : Proc(IDataSourceLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDataSourceLocator*, UInt32),
    release : Proc(IDataSourceLocator*, UInt32),
    get_type_info_count : Proc(IDataSourceLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDataSourceLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDataSourceLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDataSourceLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_hWnd : Proc(IDataSourceLocator*, Int64*, Win32cr::Foundation::HRESULT),
    put_hWnd : Proc(IDataSourceLocator*, Int64, Win32cr::Foundation::HRESULT),
    prompt_new : Proc(IDataSourceLocator*, Void**, Win32cr::Foundation::HRESULT),
    prompt_edit : Proc(IDataSourceLocator*, Void**, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDataSourceLocator, lpVtbl : IDataSourceLocatorVtbl* do
    GUID = LibC::GUID.new(0x2206ccb2_u32, 0x19c1_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xa8_u8, 0x29_u8])
    def query_interface(this : IDataSourceLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDataSourceLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDataSourceLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDataSourceLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDataSourceLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDataSourceLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDataSourceLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_hWnd(this : IDataSourceLocator*, phwndParent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hWnd.call(this, phwndParent)
    end
    def put_hWnd(this : IDataSourceLocator*, hwndParent : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_hWnd.call(this, hwndParent)
    end
    def prompt_new(this : IDataSourceLocator*, ppADOConnection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prompt_new.call(this, ppADOConnection)
    end
    def prompt_edit(this : IDataSourceLocator*, ppADOConnection : Void**, pbSuccess : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prompt_edit.call(this, ppADOConnection, pbSuccess)
    end

  end

  @[Extern]
  record IRowsetChangeExtInfoVtbl,
    query_interface : Proc(IRowsetChangeExtInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetChangeExtInfo*, UInt32),
    release : Proc(IRowsetChangeExtInfo*, UInt32),
    get_original_row : Proc(IRowsetChangeExtInfo*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_pending_columns : Proc(IRowsetChangeExtInfo*, LibC::UIntPtrT, LibC::UIntPtrT, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetChangeExtInfo, lpVtbl : IRowsetChangeExtInfoVtbl* do
    GUID = LibC::GUID.new(0xc733a8f_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetChangeExtInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetChangeExtInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetChangeExtInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_original_row(this : IRowsetChangeExtInfo*, hReserved : LibC::UIntPtrT, hRow : LibC::UIntPtrT, phRowOriginal : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_row.call(this, hReserved, hRow, phRowOriginal)
    end
    def get_pending_columns(this : IRowsetChangeExtInfo*, hReserved : LibC::UIntPtrT, hRow : LibC::UIntPtrT, cColumnOrdinals : UInt32, rgiOrdinals : UInt32*, rgColumnStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pending_columns.call(this, hReserved, hRow, cColumnOrdinals, rgiOrdinals, rgColumnStatus)
    end

  end

  @[Extern]
  record ISQLRequestDiagFieldsVtbl,
    query_interface : Proc(ISQLRequestDiagFields*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISQLRequestDiagFields*, UInt32),
    release : Proc(ISQLRequestDiagFields*, UInt32),
    request_diag_fields : Proc(ISQLRequestDiagFields*, UInt32, Win32cr::System::Search::KAGREQDIAG*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISQLRequestDiagFields, lpVtbl : ISQLRequestDiagFieldsVtbl* do
    GUID = LibC::GUID.new(0x228972f0_u32, 0xb5ff_u16, 0x11d0_u16, StaticArray[0x8a_u8, 0x80_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd6_u8, 0x11_u8, 0xcd_u8])
    def query_interface(this : ISQLRequestDiagFields*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISQLRequestDiagFields*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISQLRequestDiagFields*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def request_diag_fields(this : ISQLRequestDiagFields*, cDiagFields : UInt32, rgDiagFields : Win32cr::System::Search::KAGREQDIAG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_diag_fields.call(this, cDiagFields, rgDiagFields)
    end

  end

  @[Extern]
  record ISQLGetDiagFieldVtbl,
    query_interface : Proc(ISQLGetDiagField*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISQLGetDiagField*, UInt32),
    release : Proc(ISQLGetDiagField*, UInt32),
    get_diag_field : Proc(ISQLGetDiagField*, Win32cr::System::Search::KAGGETDIAG*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISQLGetDiagField, lpVtbl : ISQLGetDiagFieldVtbl* do
    GUID = LibC::GUID.new(0x228972f1_u32, 0xb5ff_u16, 0x11d0_u16, StaticArray[0x8a_u8, 0x80_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd6_u8, 0x11_u8, 0xcd_u8])
    def query_interface(this : ISQLGetDiagField*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISQLGetDiagField*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISQLGetDiagField*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_diag_field(this : ISQLGetDiagField*, pDiagInfo : Win32cr::System::Search::KAGGETDIAG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_diag_field.call(this, pDiagInfo)
    end

  end

  @[Extern]
  record IRowsetNextRowsetVtbl,
    query_interface : Proc(IRowsetNextRowset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetNextRowset*, UInt32),
    release : Proc(IRowsetNextRowset*, UInt32),
    get_next_rowset : Proc(IRowsetNextRowset*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetNextRowset, lpVtbl : IRowsetNextRowsetVtbl* do
    GUID = LibC::GUID.new(0xc733a72_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetNextRowset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetNextRowset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetNextRowset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_rowset(this : IRowsetNextRowset*, pUnkOuter : Void*, riid : LibC::GUID*, ppNextRowset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_rowset.call(this, pUnkOuter, riid, ppNextRowset)
    end

  end

  @[Extern]
  record IRowsetNewRowAfterVtbl,
    query_interface : Proc(IRowsetNewRowAfter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetNewRowAfter*, UInt32),
    release : Proc(IRowsetNewRowAfter*, UInt32),
    set_new_data_after : Proc(IRowsetNewRowAfter*, LibC::UIntPtrT, UInt32, UInt8*, LibC::UIntPtrT, UInt8*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetNewRowAfter, lpVtbl : IRowsetNewRowAfterVtbl* do
    GUID = LibC::GUID.new(0xc733a71_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetNewRowAfter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetNewRowAfter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetNewRowAfter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_new_data_after(this : IRowsetNewRowAfter*, hChapter : LibC::UIntPtrT, cbbmPrevious : UInt32, pbmPrevious : UInt8*, hAccessor : LibC::UIntPtrT, pData : UInt8*, phRow : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_new_data_after.call(this, hChapter, cbbmPrevious, pbmPrevious, hAccessor, pData, phRow)
    end

  end

  @[Extern]
  record IRowsetWithParametersVtbl,
    query_interface : Proc(IRowsetWithParameters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetWithParameters*, UInt32),
    release : Proc(IRowsetWithParameters*, UInt32),
    get_parameter_info : Proc(IRowsetWithParameters*, LibC::UIntPtrT*, Win32cr::System::Search::DBPARAMINFO**, UInt16**, Win32cr::Foundation::HRESULT),
    requery : Proc(IRowsetWithParameters*, Win32cr::System::Search::DBPARAMS*, UInt32*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetWithParameters, lpVtbl : IRowsetWithParametersVtbl* do
    GUID = LibC::GUID.new(0xc733a6e_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetWithParameters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetWithParameters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetWithParameters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_parameter_info(this : IRowsetWithParameters*, pcParams : LibC::UIntPtrT*, prgParamInfo : Win32cr::System::Search::DBPARAMINFO**, ppNamesBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_info.call(this, pcParams, prgParamInfo, ppNamesBuffer)
    end
    def requery(this : IRowsetWithParameters*, pParams : Win32cr::System::Search::DBPARAMS*, pulErrorParam : UInt32*, phReserved : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.requery.call(this, pParams, pulErrorParam, phReserved)
    end

  end

  @[Extern]
  record IRowsetAsynchVtbl,
    query_interface : Proc(IRowsetAsynch*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetAsynch*, UInt32),
    release : Proc(IRowsetAsynch*, UInt32),
    ratio_finished : Proc(IRowsetAsynch*, LibC::UIntPtrT*, LibC::UIntPtrT*, LibC::UIntPtrT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    stop : Proc(IRowsetAsynch*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetAsynch, lpVtbl : IRowsetAsynchVtbl* do
    GUID = LibC::GUID.new(0xc733a0f_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetAsynch*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetAsynch*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetAsynch*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def ratio_finished(this : IRowsetAsynch*, pulDenominator : LibC::UIntPtrT*, pulNumerator : LibC::UIntPtrT*, pcRows : LibC::UIntPtrT*, pfNewRows : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratio_finished.call(this, pulDenominator, pulNumerator, pcRows, pfNewRows)
    end
    def stop(this : IRowsetAsynch*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end

  end

  @[Extern]
  record IRowsetKeysVtbl,
    query_interface : Proc(IRowsetKeys*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetKeys*, UInt32),
    release : Proc(IRowsetKeys*, UInt32),
    list_keys : Proc(IRowsetKeys*, LibC::UIntPtrT*, LibC::UIntPtrT**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetKeys, lpVtbl : IRowsetKeysVtbl* do
    GUID = LibC::GUID.new(0xc733a12_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetKeys*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetKeys*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetKeys*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def list_keys(this : IRowsetKeys*, pcColumns : LibC::UIntPtrT*, prgColumns : LibC::UIntPtrT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.list_keys.call(this, pcColumns, prgColumns)
    end

  end

  @[Extern]
  record IRowsetWatchAllVtbl,
    query_interface : Proc(IRowsetWatchAll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetWatchAll*, UInt32),
    release : Proc(IRowsetWatchAll*, UInt32),
    acknowledge : Proc(IRowsetWatchAll*, Win32cr::Foundation::HRESULT),
    start : Proc(IRowsetWatchAll*, Win32cr::Foundation::HRESULT),
    stop_watching : Proc(IRowsetWatchAll*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetWatchAll, lpVtbl : IRowsetWatchAllVtbl* do
    GUID = LibC::GUID.new(0xc733a73_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetWatchAll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetWatchAll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetWatchAll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def acknowledge(this : IRowsetWatchAll*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acknowledge.call(this)
    end
    def start(this : IRowsetWatchAll*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop_watching(this : IRowsetWatchAll*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_watching.call(this)
    end

  end

  @[Extern]
  record IRowsetWatchNotifyVtbl,
    query_interface : Proc(IRowsetWatchNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetWatchNotify*, UInt32),
    release : Proc(IRowsetWatchNotify*, UInt32),
    on_change : Proc(IRowsetWatchNotify*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetWatchNotify, lpVtbl : IRowsetWatchNotifyVtbl* do
    GUID = LibC::GUID.new(0xc733a44_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetWatchNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetWatchNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetWatchNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_change(this : IRowsetWatchNotify*, pRowset : Void*, eChangeReason : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_change.call(this, pRowset, eChangeReason)
    end

  end

  @[Extern]
  record IRowsetWatchRegionVtbl,
    query_interface : Proc(IRowsetWatchRegion*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetWatchRegion*, UInt32),
    release : Proc(IRowsetWatchRegion*, UInt32),
    acknowledge : Proc(IRowsetWatchRegion*, Win32cr::Foundation::HRESULT),
    start : Proc(IRowsetWatchRegion*, Win32cr::Foundation::HRESULT),
    stop_watching : Proc(IRowsetWatchRegion*, Win32cr::Foundation::HRESULT),
    create_watch_region : Proc(IRowsetWatchRegion*, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    change_watch_mode : Proc(IRowsetWatchRegion*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::HRESULT),
    delete_watch_region : Proc(IRowsetWatchRegion*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_watch_region_info : Proc(IRowsetWatchRegion*, LibC::UIntPtrT, UInt32*, LibC::UIntPtrT*, LibC::UIntPtrT*, UInt8**, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    refresh : Proc(IRowsetWatchRegion*, LibC::UIntPtrT*, Win32cr::System::Search::DBROWWATCHRANGE**, Win32cr::Foundation::HRESULT),
    shrink_watch_region : Proc(IRowsetWatchRegion*, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::IntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetWatchRegion, lpVtbl : IRowsetWatchRegionVtbl* do
    GUID = LibC::GUID.new(0xc733a45_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetWatchRegion*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetWatchRegion*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetWatchRegion*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def acknowledge(this : IRowsetWatchRegion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acknowledge.call(this)
    end
    def start(this : IRowsetWatchRegion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop_watching(this : IRowsetWatchRegion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_watching.call(this)
    end
    def create_watch_region(this : IRowsetWatchRegion*, dwWatchMode : UInt32, phRegion : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_watch_region.call(this, dwWatchMode, phRegion)
    end
    def change_watch_mode(this : IRowsetWatchRegion*, hRegion : LibC::UIntPtrT, dwWatchMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_watch_mode.call(this, hRegion, dwWatchMode)
    end
    def delete_watch_region(this : IRowsetWatchRegion*, hRegion : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_watch_region.call(this, hRegion)
    end
    def get_watch_region_info(this : IRowsetWatchRegion*, hRegion : LibC::UIntPtrT, pdwWatchMode : UInt32*, phChapter : LibC::UIntPtrT*, pcbBookmark : LibC::UIntPtrT*, ppBookmark : UInt8**, pcRows : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watch_region_info.call(this, hRegion, pdwWatchMode, phChapter, pcbBookmark, ppBookmark, pcRows)
    end
    def refresh(this : IRowsetWatchRegion*, pcChangesObtained : LibC::UIntPtrT*, prgChanges : Win32cr::System::Search::DBROWWATCHRANGE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh.call(this, pcChangesObtained, prgChanges)
    end
    def shrink_watch_region(this : IRowsetWatchRegion*, hRegion : LibC::UIntPtrT, hChapter : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, cRows : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shrink_watch_region.call(this, hRegion, hChapter, cbBookmark, pBookmark, cRows)
    end

  end

  @[Extern]
  record IRowsetCopyRowsVtbl,
    query_interface : Proc(IRowsetCopyRows*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetCopyRows*, UInt32),
    release : Proc(IRowsetCopyRows*, UInt32),
    close_source : Proc(IRowsetCopyRows*, UInt16, Win32cr::Foundation::HRESULT),
    copy_by_hrows : Proc(IRowsetCopyRows*, UInt16, LibC::UIntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, UInt32, Win32cr::Foundation::HRESULT),
    copy_rows : Proc(IRowsetCopyRows*, UInt16, LibC::UIntPtrT, LibC::IntPtrT, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    define_source : Proc(IRowsetCopyRows*, Void*, LibC::UIntPtrT, LibC::IntPtrT*, LibC::IntPtrT*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetCopyRows, lpVtbl : IRowsetCopyRowsVtbl* do
    GUID = LibC::GUID.new(0xc733a6b_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IRowsetCopyRows*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetCopyRows*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetCopyRows*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def close_source(this : IRowsetCopyRows*, hSourceID : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_source.call(this, hSourceID)
    end
    def copy_by_hrows(this : IRowsetCopyRows*, hSourceID : UInt16, hReserved : LibC::UIntPtrT, cRows : LibC::IntPtrT, rghRows : LibC::UIntPtrT*, bFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_by_hrows.call(this, hSourceID, hReserved, cRows, rghRows, bFlags)
    end
    def copy_rows(this : IRowsetCopyRows*, hSourceID : UInt16, hReserved : LibC::UIntPtrT, cRows : LibC::IntPtrT, bFlags : UInt32, pcRowsCopied : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_rows.call(this, hSourceID, hReserved, cRows, bFlags, pcRowsCopied)
    end
    def define_source(this : IRowsetCopyRows*, pRowsetSource : Void*, cColIds : LibC::UIntPtrT, rgSourceColumns : LibC::IntPtrT*, rgTargetColumns : LibC::IntPtrT*, phSourceID : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.define_source.call(this, pRowsetSource, cColIds, rgSourceColumns, rgTargetColumns, phSourceID)
    end

  end

  @[Extern]
  record IReadDataVtbl,
    query_interface : Proc(IReadData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IReadData*, UInt32),
    release : Proc(IReadData*, UInt32),
    read_data : Proc(IReadData*, LibC::UIntPtrT, LibC::UIntPtrT, UInt8*, LibC::IntPtrT, LibC::UIntPtrT, LibC::IntPtrT, LibC::UIntPtrT*, UInt8**, LibC::UIntPtrT*, UInt8**, Win32cr::Foundation::HRESULT),
    release_chapter : Proc(IReadData*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IReadData, lpVtbl : IReadDataVtbl* do
    GUID = LibC::GUID.new(0xc733a6a_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IReadData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IReadData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IReadData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read_data(this : IReadData*, hChapter : LibC::UIntPtrT, cbBookmark : LibC::UIntPtrT, pBookmark : UInt8*, lRowsOffset : LibC::IntPtrT, hAccessor : LibC::UIntPtrT, cRows : LibC::IntPtrT, pcRowsObtained : LibC::UIntPtrT*, ppFixedData : UInt8**, pcbVariableTotal : LibC::UIntPtrT*, ppVariableData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_data.call(this, hChapter, cbBookmark, pBookmark, lRowsOffset, hAccessor, cRows, pcRowsObtained, ppFixedData, pcbVariableTotal, ppVariableData)
    end
    def release_chapter(this : IReadData*, hChapter : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_chapter.call(this, hChapter)
    end

  end

  @[Extern]
  record ICommandCostVtbl,
    query_interface : Proc(ICommandCost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandCost*, UInt32),
    release : Proc(ICommandCost*, UInt32),
    get_accumulated_cost : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Search::DBCOST**, Win32cr::Foundation::HRESULT),
    get_cost_estimate : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Search::DBCOST*, Win32cr::Foundation::HRESULT),
    get_cost_goals : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Search::DBCOST*, Win32cr::Foundation::HRESULT),
    get_cost_limits : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::System::Search::DBCOST*, Win32cr::Foundation::HRESULT),
    set_cost_goals : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Search::DBCOST*, Win32cr::Foundation::HRESULT),
    set_cost_limits : Proc(ICommandCost*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::System::Search::DBCOST*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandCost, lpVtbl : ICommandCostVtbl* do
    GUID = LibC::GUID.new(0xc733a4e_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandCost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandCost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandCost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_accumulated_cost(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, pcCostLimits : UInt32*, prgCostLimits : Win32cr::System::Search::DBCOST**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_accumulated_cost.call(this, pwszRowsetName, pcCostLimits, prgCostLimits)
    end
    def get_cost_estimate(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, pcCostEstimates : UInt32*, prgCostEstimates : Win32cr::System::Search::DBCOST*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cost_estimate.call(this, pwszRowsetName, pcCostEstimates, prgCostEstimates)
    end
    def get_cost_goals(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, pcCostGoals : UInt32*, prgCostGoals : Win32cr::System::Search::DBCOST*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cost_goals.call(this, pwszRowsetName, pcCostGoals, prgCostGoals)
    end
    def get_cost_limits(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, pcCostLimits : UInt32*, prgCostLimits : Win32cr::System::Search::DBCOST*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cost_limits.call(this, pwszRowsetName, pcCostLimits, prgCostLimits)
    end
    def set_cost_goals(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, cCostGoals : UInt32, rgCostGoals : Win32cr::System::Search::DBCOST*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cost_goals.call(this, pwszRowsetName, cCostGoals, rgCostGoals)
    end
    def set_cost_limits(this : ICommandCost*, pwszRowsetName : Win32cr::Foundation::PWSTR, cCostLimits : UInt32, prgCostLimits : Win32cr::System::Search::DBCOST*, dwExecutionFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cost_limits.call(this, pwszRowsetName, cCostLimits, prgCostLimits, dwExecutionFlags)
    end

  end

  @[Extern]
  record ICommandValidateVtbl,
    query_interface : Proc(ICommandValidate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommandValidate*, UInt32),
    release : Proc(ICommandValidate*, UInt32),
    validate_completely : Proc(ICommandValidate*, Win32cr::Foundation::HRESULT),
    validate_syntax : Proc(ICommandValidate*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICommandValidate, lpVtbl : ICommandValidateVtbl* do
    GUID = LibC::GUID.new(0xc733a18_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ICommandValidate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommandValidate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommandValidate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def validate_completely(this : ICommandValidate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_completely.call(this)
    end
    def validate_syntax(this : ICommandValidate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_syntax.call(this)
    end

  end

  @[Extern]
  record ITableRenameVtbl,
    query_interface : Proc(ITableRename*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITableRename*, UInt32),
    release : Proc(ITableRename*, UInt32),
    rename_column : Proc(ITableRename*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT),
    rename_table : Proc(ITableRename*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Storage::IndexServer::DBID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITableRename, lpVtbl : ITableRenameVtbl* do
    GUID = LibC::GUID.new(0xc733a77_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : ITableRename*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITableRename*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITableRename*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def rename_column(this : ITableRename*, pTableId : Win32cr::Storage::IndexServer::DBID*, pOldColumnId : Win32cr::Storage::IndexServer::DBID*, pNewColumnId : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename_column.call(this, pTableId, pOldColumnId, pNewColumnId)
    end
    def rename_table(this : ITableRename*, pOldTableId : Win32cr::Storage::IndexServer::DBID*, pOldIndexId : Win32cr::Storage::IndexServer::DBID*, pNewTableId : Win32cr::Storage::IndexServer::DBID*, pNewIndexId : Win32cr::Storage::IndexServer::DBID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename_table.call(this, pOldTableId, pOldIndexId, pNewTableId, pNewIndexId)
    end

  end

  @[Extern]
  record IDBSchemaCommandVtbl,
    query_interface : Proc(IDBSchemaCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDBSchemaCommand*, UInt32),
    release : Proc(IDBSchemaCommand*, UInt32),
    get_command : Proc(IDBSchemaCommand*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_schemas : Proc(IDBSchemaCommand*, UInt32*, LibC::GUID**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDBSchemaCommand, lpVtbl : IDBSchemaCommandVtbl* do
    GUID = LibC::GUID.new(0xc733a50_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IDBSchemaCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDBSchemaCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDBSchemaCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_command(this : IDBSchemaCommand*, pUnkOuter : Void*, rguidSchema : LibC::GUID*, ppCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_command.call(this, pUnkOuter, rguidSchema, ppCommand)
    end
    def get_schemas(this : IDBSchemaCommand*, pcSchemas : UInt32*, prgSchemas : LibC::GUID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schemas.call(this, pcSchemas, prgSchemas)
    end

  end

  @[Extern]
  record IProvideMonikerVtbl,
    query_interface : Proc(IProvideMoniker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProvideMoniker*, UInt32),
    release : Proc(IProvideMoniker*, UInt32),
    get_moniker : Proc(IProvideMoniker*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProvideMoniker, lpVtbl : IProvideMonikerVtbl* do
    GUID = LibC::GUID.new(0xc733a4d_u32, 0x2a1c_u16, 0x11ce_u16, StaticArray[0xad_u8, 0xe5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x44_u8, 0x77_u8, 0x3d_u8])
    def query_interface(this : IProvideMoniker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProvideMoniker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProvideMoniker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_moniker(this : IProvideMoniker*, ppIMoniker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_moniker.call(this, ppIMoniker)
    end

  end

  @[Extern]
  record ISearchQueryHitsVtbl,
    query_interface : Proc(ISearchQueryHits*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISearchQueryHits*, UInt32),
    release : Proc(ISearchQueryHits*, UInt32),
    init : Proc(ISearchQueryHits*, Void*, UInt32, Int32),
    next_hit_moniker : Proc(ISearchQueryHits*, UInt32*, Void***, Int32),
    next_hit_offset : Proc(ISearchQueryHits*, UInt32*, Win32cr::Storage::IndexServer::FILTERREGION**, Int32)


  @[Extern]
  record ISearchQueryHits, lpVtbl : ISearchQueryHitsVtbl* do
    GUID = LibC::GUID.new(0xed8ce7e0_u32, 0x106c_u16, 0x11ce_u16, StaticArray[0x84_u8, 0xe2_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4b_u8, 0x99_u8, 0x86_u8])
    def query_interface(this : ISearchQueryHits*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISearchQueryHits*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISearchQueryHits*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : ISearchQueryHits*, pflt : Void*, ulFlags : UInt32) : Int32
      @lpVtbl.try &.value.init.call(this, pflt, ulFlags)
    end
    def next_hit_moniker(this : ISearchQueryHits*, pcMnk : UInt32*, papMnk : Void***) : Int32
      @lpVtbl.try &.value.next_hit_moniker.call(this, pcMnk, papMnk)
    end
    def next_hit_offset(this : ISearchQueryHits*, pcRegion : UInt32*, paRegion : Win32cr::Storage::IndexServer::FILTERREGION**) : Int32
      @lpVtbl.try &.value.next_hit_offset.call(this, pcRegion, paRegion)
    end

  end

  @[Extern]
  record IRowsetQueryStatusVtbl,
    query_interface : Proc(IRowsetQueryStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetQueryStatus*, UInt32),
    release : Proc(IRowsetQueryStatus*, UInt32),
    get_status : Proc(IRowsetQueryStatus*, UInt32*, Win32cr::Foundation::HRESULT),
    get_status_ex : Proc(IRowsetQueryStatus*, UInt32*, UInt32*, UInt32*, LibC::UIntPtrT*, LibC::UIntPtrT*, LibC::UIntPtrT, UInt8*, LibC::UIntPtrT*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetQueryStatus, lpVtbl : IRowsetQueryStatusVtbl* do
    GUID = LibC::GUID.new(0xa7ac77ed_u32, 0xf8d7_u16, 0x11ce_u16, StaticArray[0xa7_u8, 0x98_u8, 0x0_u8, 0x20_u8, 0xf8_u8, 0x0_u8, 0x80_u8, 0x24_u8])
    def query_interface(this : IRowsetQueryStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetQueryStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetQueryStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_status(this : IRowsetQueryStatus*, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pdwStatus)
    end
    def get_status_ex(this : IRowsetQueryStatus*, pdwStatus : UInt32*, pcFilteredDocuments : UInt32*, pcDocumentsToFilter : UInt32*, pdwRatioFinishedDenominator : LibC::UIntPtrT*, pdwRatioFinishedNumerator : LibC::UIntPtrT*, cbBmk : LibC::UIntPtrT, pBmk : UInt8*, piRowBmk : LibC::UIntPtrT*, pcRowsTotal : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status_ex.call(this, pdwStatus, pcFilteredDocuments, pcDocumentsToFilter, pdwRatioFinishedDenominator, pdwRatioFinishedNumerator, cbBmk, pBmk, piRowBmk, pcRowsTotal)
    end

  end

  @[Extern]
  record IUMSInitializeVtbl,
    query_interface : Proc(IUMSInitialize*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUMSInitialize*, UInt32),
    release : Proc(IUMSInitialize*, UInt32),
    initialize__ : Proc(IUMSInitialize*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IUMSInitialize, lpVtbl : IUMSInitializeVtbl* do
    GUID = LibC::GUID.new(0x5cf4ca14_u32, 0xef21_u16, 0x11d0_u16, StaticArray[0x97_u8, 0xe7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xad_u8, 0x98_u8])
    def query_interface(this : IUMSInitialize*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUMSInitialize*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUMSInitialize*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IUMSInitialize*, pUMS : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pUMS)
    end

  end

  @[Extern]
  record IUMSVtbl,
    sql_ums_suspend : Proc(IUMS*, UInt32, Void),
    sql_ums_yield : Proc(IUMS*, UInt32, Void),
    sql_ums_switch_premptive : Proc(IUMS*, Void),
    sql_ums_switch_non_premptive : Proc(IUMS*, Void),
    sql_ums_f_is_premptive : Proc(IUMS*, Win32cr::Foundation::BOOL)


  @[Extern]
  record IUMS, lpVtbl : IUMSVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def sql_ums_suspend(this : IUMS*, ticks : UInt32) : Void
      @lpVtbl.try &.value.sql_ums_suspend.call(this, ticks)
    end
    def sql_ums_yield(this : IUMS*, ticks : UInt32) : Void
      @lpVtbl.try &.value.sql_ums_yield.call(this, ticks)
    end
    def sql_ums_switch_premptive(this : IUMS*) : Void
      @lpVtbl.try &.value.sql_ums_switch_premptive.call(this)
    end
    def sql_ums_switch_non_premptive(this : IUMS*) : Void
      @lpVtbl.try &.value.sql_ums_switch_non_premptive.call(this)
    end
    def sql_ums_f_is_premptive(this : IUMS*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.sql_ums_f_is_premptive.call(this)
    end

  end

  @[Extern]
  record ISQLServerErrorInfoVtbl,
    query_interface : Proc(ISQLServerErrorInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISQLServerErrorInfo*, UInt32),
    release : Proc(ISQLServerErrorInfo*, UInt32),
    get_error_info : Proc(ISQLServerErrorInfo*, Win32cr::System::Search::SSErrorInfo**, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISQLServerErrorInfo, lpVtbl : ISQLServerErrorInfoVtbl* do
    GUID = LibC::GUID.new(0x5cf4ca12_u32, 0xef21_u16, 0x11d0_u16, StaticArray[0x97_u8, 0xe7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xad_u8, 0x98_u8])
    def query_interface(this : ISQLServerErrorInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISQLServerErrorInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISQLServerErrorInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error_info(this : ISQLServerErrorInfo*, ppErrorInfo : Win32cr::System::Search::SSErrorInfo**, ppStringsBuffer : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_info.call(this, ppErrorInfo, ppStringsBuffer)
    end

  end

  @[Extern]
  record IRowsetFastLoadVtbl,
    query_interface : Proc(IRowsetFastLoad*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRowsetFastLoad*, UInt32),
    release : Proc(IRowsetFastLoad*, UInt32),
    insert_row : Proc(IRowsetFastLoad*, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    commit : Proc(IRowsetFastLoad*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRowsetFastLoad, lpVtbl : IRowsetFastLoadVtbl* do
    GUID = LibC::GUID.new(0x5cf4ca13_u32, 0xef21_u16, 0x11d0_u16, StaticArray[0x97_u8, 0xe7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xad_u8, 0x98_u8])
    def query_interface(this : IRowsetFastLoad*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRowsetFastLoad*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRowsetFastLoad*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def insert_row(this : IRowsetFastLoad*, hAccessor : LibC::UIntPtrT, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_row.call(this, hAccessor, pData)
    end
    def commit(this : IRowsetFastLoad*, fDone : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, fDone)
    end

  end

  @[Extern]
  record ISchemaLockVtbl,
    query_interface : Proc(ISchemaLock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaLock*, UInt32),
    release : Proc(ISchemaLock*, UInt32),
    get_schema_lock : Proc(ISchemaLock*, Win32cr::Storage::IndexServer::DBID*, UInt32, Win32cr::Foundation::HANDLE*, UInt64*, Win32cr::Foundation::HRESULT),
    release_schema_lock : Proc(ISchemaLock*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISchemaLock, lpVtbl : ISchemaLockVtbl* do
    GUID = LibC::GUID.new(0x4c2389fb_u32, 0x2511_u16, 0x11d4_u16, StaticArray[0xb2_u8, 0x58_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xce_u8])
    def query_interface(this : ISchemaLock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaLock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaLock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_schema_lock(this : ISchemaLock*, pTableID : Win32cr::Storage::IndexServer::DBID*, lmMode : UInt32, phLockHandle : Win32cr::Foundation::HANDLE*, pTableVersion : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema_lock.call(this, pTableID, lmMode, phLockHandle, pTableVersion)
    end
    def release_schema_lock(this : ISchemaLock*, hLockHandle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_schema_lock.call(this, hLockHandle)
    end

  end

  def sQLAllocConnect(environment_handle : Void*, connection_handle : Void**) : Int16
    C.SQLAllocConnect(environment_handle, connection_handle)
  end

  def sQLAllocEnv(environment_handle : Void**) : Int16
    C.SQLAllocEnv(environment_handle)
  end

  def sQLAllocHandle(handle_type : Int16, input_handle : Void*, output_handle : Void**) : Int16
    C.SQLAllocHandle(handle_type, input_handle, output_handle)
  end

  def sQLAllocStmt(connection_handle : Void*, statement_handle : Void**) : Int16
    C.SQLAllocStmt(connection_handle, statement_handle)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLBindCol(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int64, str_len_or_ind : Int64*) : Int16
    C.SQLBindCol(statement_handle, column_number, target_type, target_value, buffer_length, str_len_or_ind)
  end
{% end %}

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLBindParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt64, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int64*) : Int16
    C.SQLBindParam(statement_handle, parameter_number, value_type, parameter_type, length_precision, parameter_scale, parameter_value, str_len_or_ind)
  end
{% end %}

  def sQLCancel(statement_handle : Void*) : Int16
    C.SQLCancel(statement_handle)
  end

  def sQLCancelHandle(handle_type : Int16, input_handle : Void*) : Int16
    C.SQLCancelHandle(handle_type, input_handle)
  end

  def sQLCloseCursor(statement_handle : Void*) : Int16
    C.SQLCloseCursor(statement_handle)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttribute(statement_handle : Void*, column_number : UInt16, field_identifier : UInt16, character_attribute : Void*, buffer_length : Int16, string_length : Int16*, numeric_attribute : Int64*) : Int16
    C.SQLColAttribute(statement_handle, column_number, field_identifier, character_attribute, buffer_length, string_length, numeric_attribute)
  end
{% end %}

  def sQLColumns(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, column_name : UInt8*, name_length4 : Int16) : Int16
    C.SQLColumns(statement_handle, catalog_name, name_length1, schema_name, name_length2, table_name, name_length3, column_name, name_length4)
  end

  def sQLCompleteAsync(handle_type : Int16, handle : Void*, async_ret_code_ptr : Int16*) : Int16
    C.SQLCompleteAsync(handle_type, handle, async_ret_code_ptr)
  end

  def sQLConnect(connection_handle : Void*, server_name : UInt8*, name_length1 : Int16, user_name : UInt8*, name_length2 : Int16, authentication : UInt8*, name_length3 : Int16) : Int16
    C.SQLConnect(connection_handle, server_name, name_length1, user_name, name_length2, authentication, name_length3)
  end

  def sQLCopyDesc(source_desc_handle : Void*, target_desc_handle : Void*) : Int16
    C.SQLCopyDesc(source_desc_handle, target_desc_handle)
  end

  def sQLDataSources(environment_handle : Void*, direction : UInt16, server_name : UInt8*, buffer_length1 : Int16, name_length1_ptr : Int16*, description : UInt8*, buffer_length2 : Int16, name_length2_ptr : Int16*) : Int16
    C.SQLDataSources(environment_handle, direction, server_name, buffer_length1, name_length1_ptr, description, buffer_length2, name_length2_ptr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLDescribeCol(statement_handle : Void*, column_number : UInt16, column_name : UInt8*, buffer_length : Int16, name_length : Int16*, data_type : Int16*, column_size : UInt64*, decimal_digits : Int16*, nullable : Int16*) : Int16
    C.SQLDescribeCol(statement_handle, column_number, column_name, buffer_length, name_length, data_type, column_size, decimal_digits, nullable)
  end
{% end %}

  def sQLDisconnect(connection_handle : Void*) : Int16
    C.SQLDisconnect(connection_handle)
  end

  def sQLEndTran(handle_type : Int16, handle : Void*, completion_type : Int16) : Int16
    C.SQLEndTran(handle_type, handle, completion_type)
  end

  def sQLError(environment_handle : Void*, connection_handle : Void*, statement_handle : Void*, sqlstate : UInt8*, native_error : Int32*, message_text : UInt8*, buffer_length : Int16, text_length : Int16*) : Int16
    C.SQLError(environment_handle, connection_handle, statement_handle, sqlstate, native_error, message_text, buffer_length, text_length)
  end

  def sQLExecDirect(statement_handle : Void*, statement_text : UInt8*, text_length : Int32) : Int16
    C.SQLExecDirect(statement_handle, statement_text, text_length)
  end

  def sQLExecute(statement_handle : Void*) : Int16
    C.SQLExecute(statement_handle)
  end

  def sQLFetch(statement_handle : Void*) : Int16
    C.SQLFetch(statement_handle)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLFetchScroll(statement_handle : Void*, fetch_orientation : Int16, fetch_offset : Int64) : Int16
    C.SQLFetchScroll(statement_handle, fetch_orientation, fetch_offset)
  end
{% end %}

  def sQLFreeConnect(connection_handle : Void*) : Int16
    C.SQLFreeConnect(connection_handle)
  end

  def sQLFreeEnv(environment_handle : Void*) : Int16
    C.SQLFreeEnv(environment_handle)
  end

  def sQLFreeHandle(handle_type : Int16, handle : Void*) : Int16
    C.SQLFreeHandle(handle_type, handle)
  end

  def sQLFreeStmt(statement_handle : Void*, option : UInt16) : Int16
    C.SQLFreeStmt(statement_handle, option)
  end

  def sQLGetConnectAttr(connection_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length_ptr : Int32*) : Int16
    C.SQLGetConnectAttr(connection_handle, attribute, value, buffer_length, string_length_ptr)
  end

  def sQLGetConnectOption(connection_handle : Void*, option : UInt16, value : Void*) : Int16
    C.SQLGetConnectOption(connection_handle, option, value)
  end

  def sQLGetCursorName(statement_handle : Void*, cursor_name : UInt8*, buffer_length : Int16, name_length_ptr : Int16*) : Int16
    C.SQLGetCursorName(statement_handle, cursor_name, buffer_length, name_length_ptr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLGetData(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int64, str_len_or_ind_ptr : Int64*) : Int16
    C.SQLGetData(statement_handle, column_number, target_type, target_value, buffer_length, str_len_or_ind_ptr)
  end
{% end %}

  def sQLGetDescField(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16
    C.SQLGetDescField(descriptor_handle, rec_number, field_identifier, value, buffer_length, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLGetDescRec(descriptor_handle : Void*, rec_number : Int16, name : UInt8*, buffer_length : Int16, string_length_ptr : Int16*, type_ptr : Int16*, sub_type_ptr : Int16*, length_ptr : Int64*, precision_ptr : Int16*, scale_ptr : Int16*, nullable_ptr : Int16*) : Int16
    C.SQLGetDescRec(descriptor_handle, rec_number, name, buffer_length, string_length_ptr, type_ptr, sub_type_ptr, length_ptr, precision_ptr, scale_ptr, nullable_ptr)
  end
{% end %}

  def sQLGetDiagField(handle_type : Int16, handle : Void*, rec_number : Int16, diag_identifier : Int16, diag_info : Void*, buffer_length : Int16, string_length : Int16*) : Int16
    C.SQLGetDiagField(handle_type, handle, rec_number, diag_identifier, diag_info, buffer_length, string_length)
  end

  def sQLGetDiagRec(handle_type : Int16, handle : Void*, rec_number : Int16, sqlstate : UInt8*, native_error : Int32*, message_text : UInt8*, buffer_length : Int16, text_length : Int16*) : Int16
    C.SQLGetDiagRec(handle_type, handle, rec_number, sqlstate, native_error, message_text, buffer_length, text_length)
  end

  def sQLGetEnvAttr(environment_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16
    C.SQLGetEnvAttr(environment_handle, attribute, value, buffer_length, string_length)
  end

  def sQLGetFunctions(connection_handle : Void*, function_id : UInt16, supported : UInt16*) : Int16
    C.SQLGetFunctions(connection_handle, function_id, supported)
  end

  def sQLGetInfo(connection_handle : Void*, info_type : UInt16, info_value : Void*, buffer_length : Int16, string_length_ptr : Int16*) : Int16
    C.SQLGetInfo(connection_handle, info_type, info_value, buffer_length, string_length_ptr)
  end

  def sQLGetStmtAttr(statement_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16
    C.SQLGetStmtAttr(statement_handle, attribute, value, buffer_length, string_length)
  end

  def sQLGetStmtOption(statement_handle : Void*, option : UInt16, value : Void*) : Int16
    C.SQLGetStmtOption(statement_handle, option, value)
  end

  def sQLGetTypeInfo(statement_handle : Void*, data_type : Int16) : Int16
    C.SQLGetTypeInfo(statement_handle, data_type)
  end

  def sQLNumResultCols(statement_handle : Void*, column_count : Int16*) : Int16
    C.SQLNumResultCols(statement_handle, column_count)
  end

  def sQLParamData(statement_handle : Void*, value : Void**) : Int16
    C.SQLParamData(statement_handle, value)
  end

  def sQLPrepare(statement_handle : Void*, statement_text : UInt8*, text_length : Int32) : Int16
    C.SQLPrepare(statement_handle, statement_text, text_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLPutData(statement_handle : Void*, data : Void*, str_len_or_ind : Int64) : Int16
    C.SQLPutData(statement_handle, data, str_len_or_ind)
  end
{% end %}

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLRowCount(statement_handle : Void*, row_count : Int64*) : Int16
    C.SQLRowCount(statement_handle, row_count)
  end
{% end %}

  def sQLSetConnectAttr(connection_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16
    C.SQLSetConnectAttr(connection_handle, attribute, value, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetConnectOption(connection_handle : Void*, option : UInt16, value : UInt64) : Int16
    C.SQLSetConnectOption(connection_handle, option, value)
  end
{% end %}

  def sQLSetCursorName(statement_handle : Void*, cursor_name : UInt8*, name_length : Int16) : Int16
    C.SQLSetCursorName(statement_handle, cursor_name, name_length)
  end

  def sQLSetDescField(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32) : Int16
    C.SQLSetDescField(descriptor_handle, rec_number, field_identifier, value, buffer_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetDescRec(descriptor_handle : Void*, rec_number : Int16, type__ : Int16, sub_type : Int16, length : Int64, precision : Int16, scale : Int16, data : Void*, string_length : Int64*, indicator : Int64*) : Int16
    C.SQLSetDescRec(descriptor_handle, rec_number, type__, sub_type, length, precision, scale, data, string_length, indicator)
  end
{% end %}

  def sQLSetEnvAttr(environment_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16
    C.SQLSetEnvAttr(environment_handle, attribute, value, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt64, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int64*) : Int16
    C.SQLSetParam(statement_handle, parameter_number, value_type, parameter_type, length_precision, parameter_scale, parameter_value, str_len_or_ind)
  end
{% end %}

  def sQLSetStmtAttr(statement_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16
    C.SQLSetStmtAttr(statement_handle, attribute, value, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetStmtOption(statement_handle : Void*, option : UInt16, value : UInt64) : Int16
    C.SQLSetStmtOption(statement_handle, option, value)
  end
{% end %}

  def sQLSpecialColumns(statement_handle : Void*, identifier_type : UInt16, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, scope : UInt16, nullable : UInt16) : Int16
    C.SQLSpecialColumns(statement_handle, identifier_type, catalog_name, name_length1, schema_name, name_length2, table_name, name_length3, scope, nullable)
  end

  def sQLStatistics(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, unique : UInt16, reserved : UInt16) : Int16
    C.SQLStatistics(statement_handle, catalog_name, name_length1, schema_name, name_length2, table_name, name_length3, unique, reserved)
  end

  def sQLTables(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, table_type : UInt8*, name_length4 : Int16) : Int16
    C.SQLTables(statement_handle, catalog_name, name_length1, schema_name, name_length2, table_name, name_length3, table_type, name_length4)
  end

  def sQLTransact(environment_handle : Void*, connection_handle : Void*, completion_type : UInt16) : Int16
    C.SQLTransact(environment_handle, connection_handle, completion_type)
  end

  def bcpBatch(param0 : Void*) : Int32
    C.bcp_batch(param0)
  end

  def bcpBind(param0 : Void*, param1 : UInt8*, param2 : Int32, param3 : Int32, param4 : UInt8*, param5 : Int32, param6 : Int32, param7 : Int32) : Int16
    C.bcp_bind(param0, param1, param2, param3, param4, param5, param6, param7)
  end

  def bcpColfmt(param0 : Void*, param1 : Int32, param2 : UInt8, param3 : Int32, param4 : Int32, param5 : UInt8*, param6 : Int32, param7 : Int32) : Int16
    C.bcp_colfmt(param0, param1, param2, param3, param4, param5, param6, param7)
  end

  def bcpCollen(param0 : Void*, param1 : Int32, param2 : Int32) : Int16
    C.bcp_collen(param0, param1, param2)
  end

  def bcpColptr(param0 : Void*, param1 : UInt8*, param2 : Int32) : Int16
    C.bcp_colptr(param0, param1, param2)
  end

  def bcpColumns(param0 : Void*, param1 : Int32) : Int16
    C.bcp_columns(param0, param1)
  end

  def bcpControl(param0 : Void*, param1 : Int32, param2 : Void*) : Int16
    C.bcp_control(param0, param1, param2)
  end

  def bcpDone(param0 : Void*) : Int32
    C.bcp_done(param0)
  end

  def bcpExec(param0 : Void*, param1 : Int32*) : Int16
    C.bcp_exec(param0, param1)
  end

  def bcpGetcolfmt(param0 : Void*, param1 : Int32, param2 : Int32, param3 : Void*, param4 : Int32, param5 : Int32*) : Int16
    C.bcp_getcolfmt(param0, param1, param2, param3, param4, param5)
  end

  def bcpInitA(param0 : Void*, param1 : Win32cr::Foundation::PSTR, param2 : Win32cr::Foundation::PSTR, param3 : Win32cr::Foundation::PSTR, param4 : Int32) : Int16
    C.bcp_initA(param0, param1, param2, param3, param4)
  end

  def bcpInitW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR, param2 : Win32cr::Foundation::PWSTR, param3 : Win32cr::Foundation::PWSTR, param4 : Int32) : Int16
    C.bcp_initW(param0, param1, param2, param3, param4)
  end

  def bcpMoretext(param0 : Void*, param1 : Int32, param2 : UInt8*) : Int16
    C.bcp_moretext(param0, param1, param2)
  end

  def bcpReadfmtA(param0 : Void*, param1 : Win32cr::Foundation::PSTR) : Int16
    C.bcp_readfmtA(param0, param1)
  end

  def bcpReadfmtW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR) : Int16
    C.bcp_readfmtW(param0, param1)
  end

  def bcpSendrow(param0 : Void*) : Int16
    C.bcp_sendrow(param0)
  end

  def bcpSetcolfmt(param0 : Void*, param1 : Int32, param2 : Int32, param3 : Void*, param4 : Int32) : Int16
    C.bcp_setcolfmt(param0, param1, param2, param3, param4)
  end

  def bcpWritefmtA(param0 : Void*, param1 : Win32cr::Foundation::PSTR) : Int16
    C.bcp_writefmtA(param0, param1)
  end

  def bcpWritefmtW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR) : Int16
    C.bcp_writefmtW(param0, param1)
  end

  def dbprtypeA(param0 : Int32) : Win32cr::Foundation::PSTR
    C.dbprtypeA(param0)
  end

  def dbprtypeW(param0 : Int32) : Win32cr::Foundation::PWSTR
    C.dbprtypeW(param0)
  end

  def sQLLinkedServers(param0 : Void*) : Int16
    C.SQLLinkedServers(param0)
  end

  def sQLLinkedCatalogsA(param0 : Void*, param1 : Win32cr::Foundation::PSTR, param2 : Int16) : Int16
    C.SQLLinkedCatalogsA(param0, param1, param2)
  end

  def sQLLinkedCatalogsW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR, param2 : Int16) : Int16
    C.SQLLinkedCatalogsW(param0, param1, param2)
  end

  def sQLInitEnumServers(pwchServerName : Win32cr::Foundation::PWSTR, pwchInstanceName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HANDLE
    C.SQLInitEnumServers(pwchServerName, pwchInstanceName)
  end

  def sQLGetNextEnumeration(hEnumHandle : Win32cr::Foundation::HANDLE, prgEnumData : UInt8*, piEnumLength : Int32*) : Int16
    C.SQLGetNextEnumeration(hEnumHandle, prgEnumData, piEnumLength)
  end

  def sQLCloseEnumServers(hEnumHandle : Win32cr::Foundation::HANDLE) : Int16
    C.SQLCloseEnumServers(hEnumHandle)
  end

  def sQLDriverConnect(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt8*, cchConnStrIn : Int16, szConnStrOut : UInt8*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16
    C.SQLDriverConnect(hdbc, hwnd, szConnStrIn, cchConnStrIn, szConnStrOut, cchConnStrOutMax, pcchConnStrOut, fDriverCompletion)
  end

  def sQLBrowseConnect(hdbc : Void*, szConnStrIn : UInt8*, cchConnStrIn : Int16, szConnStrOut : UInt8*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*) : Int16
    C.SQLBrowseConnect(hdbc, szConnStrIn, cchConnStrIn, szConnStrOut, cchConnStrOutMax, pcchConnStrOut)
  end

  def sQLBulkOperations(statement_handle : Void*, operation : Int16) : Int16
    C.SQLBulkOperations(statement_handle, operation)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttributes(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    C.SQLColAttributes(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

  def sQLColumnPrivileges(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16, szColumnName : UInt8*, cchColumnName : Int16) : Int16
    C.SQLColumnPrivileges(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, szColumnName, cchColumnName)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLDescribeParam(hstmt : Void*, ipar : UInt16, pfSqlType : Int16*, pcbParamDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeParam(hstmt, ipar, pfSqlType, pcbParamDef, pibScale, pfNullable)
  end
{% end %}

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLExtendedFetch(hstmt : Void*, fFetchType : UInt16, irow : Int64, pcrow : UInt64*, rgfRowStatus : UInt16*) : Int16
    C.SQLExtendedFetch(hstmt, fFetchType, irow, pcrow, rgfRowStatus)
  end
{% end %}

  def sQLForeignKeys(hstmt : Void*, szPkCatalogName : UInt8*, cchPkCatalogName : Int16, szPkSchemaName : UInt8*, cchPkSchemaName : Int16, szPkTableName : UInt8*, cchPkTableName : Int16, szFkCatalogName : UInt8*, cchFkCatalogName : Int16, szFkSchemaName : UInt8*, cchFkSchemaName : Int16, szFkTableName : UInt8*, cchFkTableName : Int16) : Int16
    C.SQLForeignKeys(hstmt, szPkCatalogName, cchPkCatalogName, szPkSchemaName, cchPkSchemaName, szPkTableName, cchPkTableName, szFkCatalogName, cchFkCatalogName, szFkSchemaName, cchFkSchemaName, szFkTableName, cchFkTableName)
  end

  def sQLMoreResults(hstmt : Void*) : Int16
    C.SQLMoreResults(hstmt)
  end

  def sQLNativeSql(hdbc : Void*, szSqlStrIn : UInt8*, cchSqlStrIn : Int32, szSqlStr : UInt8*, cchSqlStrMax : Int32, pcbSqlStr : Int32*) : Int16
    C.SQLNativeSql(hdbc, szSqlStrIn, cchSqlStrIn, szSqlStr, cchSqlStrMax, pcbSqlStr)
  end

  def sQLNumParams(hstmt : Void*, pcpar : Int16*) : Int16
    C.SQLNumParams(hstmt, pcpar)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLParamOptions(hstmt : Void*, crow : UInt64, pirow : UInt64*) : Int16
    C.SQLParamOptions(hstmt, crow, pirow)
  end
{% end %}

  def sQLPrimaryKeys(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16) : Int16
    C.SQLPrimaryKeys(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName)
  end

  def sQLProcedureColumns(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szProcName : UInt8*, cchProcName : Int16, szColumnName : UInt8*, cchColumnName : Int16) : Int16
    C.SQLProcedureColumns(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szProcName, cchProcName, szColumnName, cchColumnName)
  end

  def sQLProcedures(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szProcName : UInt8*, cchProcName : Int16) : Int16
    C.SQLProcedures(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szProcName, cchProcName)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetPos(hstmt : Void*, irow : UInt64, fOption : UInt16, fLock : UInt16) : Int16
    C.SQLSetPos(hstmt, irow, fOption, fLock)
  end
{% end %}

  def sQLTablePrivileges(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16) : Int16
    C.SQLTablePrivileges(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName)
  end

  def sQLDrivers(henv : Void*, fDirection : UInt16, szDriverDesc : UInt8*, cchDriverDescMax : Int16, pcchDriverDesc : Int16*, szDriverAttributes : UInt8*, cchDrvrAttrMax : Int16, pcchDrvrAttr : Int16*) : Int16
    C.SQLDrivers(henv, fDirection, szDriverDesc, cchDriverDescMax, pcchDriverDesc, szDriverAttributes, cchDrvrAttrMax, pcchDrvrAttr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLBindParameter(hstmt : Void*, ipar : UInt16, fParamType : Int16, fCType : Int16, fSqlType : Int16, cbColDef : UInt64, ibScale : Int16, rgbValue : Void*, cbValueMax : Int64, pcbValue : Int64*) : Int16
    C.SQLBindParameter(hstmt, ipar, fParamType, fCType, fSqlType, cbColDef, ibScale, rgbValue, cbValueMax, pcbValue)
  end
{% end %}

  def sQLAllocHandleStd(fHandleType : Int16, hInput : Void*, phOutput : Void**) : Int16
    C.SQLAllocHandleStd(fHandleType, hInput, phOutput)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetScrollOptions(hstmt : Void*, fConcurrency : UInt16, crowKeyset : Int64, crowRowset : UInt16) : Int16
    C.SQLSetScrollOptions(hstmt, fConcurrency, crowKeyset, crowRowset)
  end
{% end %}

  def oDBCSetTryWaitValue(dwValue : UInt32) : Win32cr::Foundation::BOOL
    C.ODBCSetTryWaitValue(dwValue)
  end

  def oDBCGetTryWaitValue : UInt32
    C.ODBCGetTryWaitValue
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttributeW(hstmt : Void*, iCol : UInt16, iField : UInt16, pCharAttr : Void*, cbDescMax : Int16, pcbCharAttr : Int16*, pNumAttr : Int64*) : Int16
    C.SQLColAttributeW(hstmt, iCol, iField, pCharAttr, cbDescMax, pcbCharAttr, pNumAttr)
  end
{% end %}

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttributesW(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    C.SQLColAttributesW(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

  def sQLConnectW(hdbc : Void*, szDSN : UInt16*, cchDSN : Int16, szUID : UInt16*, cchUID : Int16, szAuthStr : UInt16*, cchAuthStr : Int16) : Int16
    C.SQLConnectW(hdbc, szDSN, cchDSN, szUID, cchUID, szAuthStr, cchAuthStr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLDescribeColW(hstmt : Void*, icol : UInt16, szColName : UInt16*, cchColNameMax : Int16, pcchColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeColW(hstmt, icol, szColName, cchColNameMax, pcchColName, pfSqlType, pcbColDef, pibScale, pfNullable)
  end
{% end %}

  def sQLErrorW(henv : Void*, hdbc : Void*, hstmt : Void*, wszSqlState : UInt16*, pfNativeError : Int32*, wszErrorMsg : UInt16*, cchErrorMsgMax : Int16, pcchErrorMsg : Int16*) : Int16
    C.SQLErrorW(henv, hdbc, hstmt, wszSqlState, pfNativeError, wszErrorMsg, cchErrorMsgMax, pcchErrorMsg)
  end

  def sQLExecDirectW(hstmt : Void*, szSqlStr : UInt16*, text_length : Int32) : Int16
    C.SQLExecDirectW(hstmt, szSqlStr, text_length)
  end

  def sQLGetConnectAttrW(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    C.SQLGetConnectAttrW(hdbc, fAttribute, rgbValue, cbValueMax, pcbValue)
  end

  def sQLGetCursorNameW(hstmt : Void*, szCursor : UInt16*, cchCursorMax : Int16, pcchCursor : Int16*) : Int16
    C.SQLGetCursorNameW(hstmt, szCursor, cchCursorMax, pcchCursor)
  end

  def sQLSetDescFieldW(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32) : Int16
    C.SQLSetDescFieldW(descriptor_handle, rec_number, field_identifier, value, buffer_length)
  end

  def sQLGetDescFieldW(hdesc : Void*, iRecord : Int16, iField : Int16, rgbValue : Void*, cbBufferLength : Int32, string_length : Int32*) : Int16
    C.SQLGetDescFieldW(hdesc, iRecord, iField, rgbValue, cbBufferLength, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLGetDescRecW(hdesc : Void*, iRecord : Int16, szName : UInt16*, cchNameMax : Int16, pcchName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int64*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    C.SQLGetDescRecW(hdesc, iRecord, szName, cchNameMax, pcchName, pfType, pfSubType, pLength, pPrecision, pScale, pNullable)
  end
{% end %}

  def sQLGetDiagFieldW(fHandleType : Int16, handle : Void*, iRecord : Int16, fDiagField : Int16, rgbDiagInfo : Void*, cbBufferLength : Int16, pcbStringLength : Int16*) : Int16
    C.SQLGetDiagFieldW(fHandleType, handle, iRecord, fDiagField, rgbDiagInfo, cbBufferLength, pcbStringLength)
  end

  def sQLGetDiagRecW(fHandleType : Int16, handle : Void*, iRecord : Int16, szSqlState : UInt16*, pfNativeError : Int32*, szErrorMsg : UInt16*, cchErrorMsgMax : Int16, pcchErrorMsg : Int16*) : Int16
    C.SQLGetDiagRecW(fHandleType, handle, iRecord, szSqlState, pfNativeError, szErrorMsg, cchErrorMsgMax, pcchErrorMsg)
  end

  def sQLPrepareW(hstmt : Void*, szSqlStr : UInt16*, cchSqlStr : Int32) : Int16
    C.SQLPrepareW(hstmt, szSqlStr, cchSqlStr)
  end

  def sQLSetConnectAttrW(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValue : Int32) : Int16
    C.SQLSetConnectAttrW(hdbc, fAttribute, rgbValue, cbValue)
  end

  def sQLSetCursorNameW(hstmt : Void*, szCursor : UInt16*, cchCursor : Int16) : Int16
    C.SQLSetCursorNameW(hstmt, szCursor, cchCursor)
  end

  def sQLColumnsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16
    C.SQLColumnsW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, szColumnName, cchColumnName)
  end

  def sQLGetConnectOptionW(hdbc : Void*, fOption : UInt16, pvParam : Void*) : Int16
    C.SQLGetConnectOptionW(hdbc, fOption, pvParam)
  end

  def sQLGetInfoW(hdbc : Void*, fInfoType : UInt16, rgbInfoValue : Void*, cbInfoValueMax : Int16, pcbInfoValue : Int16*) : Int16
    C.SQLGetInfoW(hdbc, fInfoType, rgbInfoValue, cbInfoValueMax, pcbInfoValue)
  end

  def sQLGetTypeInfoW(statement_handle : Void*, data_type : Int16) : Int16
    C.SQLGetTypeInfoW(statement_handle, data_type)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetConnectOptionW(hdbc : Void*, fOption : UInt16, vParam : UInt64) : Int16
    C.SQLSetConnectOptionW(hdbc, fOption, vParam)
  end
{% end %}

  def sQLSpecialColumnsW(hstmt : Void*, fColType : UInt16, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, fScope : UInt16, fNullable : UInt16) : Int16
    C.SQLSpecialColumnsW(hstmt, fColType, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, fScope, fNullable)
  end

  def sQLStatisticsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, fUnique : UInt16, fAccuracy : UInt16) : Int16
    C.SQLStatisticsW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, fUnique, fAccuracy)
  end

  def sQLTablesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szTableType : UInt16*, cchTableType : Int16) : Int16
    C.SQLTablesW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, szTableType, cchTableType)
  end

  def sQLDataSourcesW(henv : Void*, fDirection : UInt16, szDSN : UInt16*, cchDSNMax : Int16, pcchDSN : Int16*, wszDescription : UInt16*, cchDescriptionMax : Int16, pcchDescription : Int16*) : Int16
    C.SQLDataSourcesW(henv, fDirection, szDSN, cchDSNMax, pcchDSN, wszDescription, cchDescriptionMax, pcchDescription)
  end

  def sQLDriverConnectW(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt16*, cchConnStrIn : Int16, szConnStrOut : UInt16*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16
    C.SQLDriverConnectW(hdbc, hwnd, szConnStrIn, cchConnStrIn, szConnStrOut, cchConnStrOutMax, pcchConnStrOut, fDriverCompletion)
  end

  def sQLBrowseConnectW(hdbc : Void*, szConnStrIn : UInt16*, cchConnStrIn : Int16, szConnStrOut : UInt16*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*) : Int16
    C.SQLBrowseConnectW(hdbc, szConnStrIn, cchConnStrIn, szConnStrOut, cchConnStrOutMax, pcchConnStrOut)
  end

  def sQLColumnPrivilegesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16
    C.SQLColumnPrivilegesW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName, szColumnName, cchColumnName)
  end

  def sQLGetStmtAttrW(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    C.SQLGetStmtAttrW(hstmt, fAttribute, rgbValue, cbValueMax, pcbValue)
  end

  def sQLSetStmtAttrW(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32) : Int16
    C.SQLSetStmtAttrW(hstmt, fAttribute, rgbValue, cbValueMax)
  end

  def sQLForeignKeysW(hstmt : Void*, szPkCatalogName : UInt16*, cchPkCatalogName : Int16, szPkSchemaName : UInt16*, cchPkSchemaName : Int16, szPkTableName : UInt16*, cchPkTableName : Int16, szFkCatalogName : UInt16*, cchFkCatalogName : Int16, szFkSchemaName : UInt16*, cchFkSchemaName : Int16, szFkTableName : UInt16*, cchFkTableName : Int16) : Int16
    C.SQLForeignKeysW(hstmt, szPkCatalogName, cchPkCatalogName, szPkSchemaName, cchPkSchemaName, szPkTableName, cchPkTableName, szFkCatalogName, cchFkCatalogName, szFkSchemaName, cchFkSchemaName, szFkTableName, cchFkTableName)
  end

  def sQLNativeSqlW(hdbc : Void*, szSqlStrIn : UInt16*, cchSqlStrIn : Int32, szSqlStr : UInt16*, cchSqlStrMax : Int32, pcchSqlStr : Int32*) : Int16
    C.SQLNativeSqlW(hdbc, szSqlStrIn, cchSqlStrIn, szSqlStr, cchSqlStrMax, pcchSqlStr)
  end

  def sQLPrimaryKeysW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16) : Int16
    C.SQLPrimaryKeysW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName)
  end

  def sQLProcedureColumnsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szProcName : UInt16*, cchProcName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16
    C.SQLProcedureColumnsW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szProcName, cchProcName, szColumnName, cchColumnName)
  end

  def sQLProceduresW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szProcName : UInt16*, cchProcName : Int16) : Int16
    C.SQLProceduresW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szProcName, cchProcName)
  end

  def sQLTablePrivilegesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16) : Int16
    C.SQLTablePrivilegesW(hstmt, szCatalogName, cchCatalogName, szSchemaName, cchSchemaName, szTableName, cchTableName)
  end

  def sQLDriversW(henv : Void*, fDirection : UInt16, szDriverDesc : UInt16*, cchDriverDescMax : Int16, pcchDriverDesc : Int16*, szDriverAttributes : UInt16*, cchDrvrAttrMax : Int16, pcchDrvrAttr : Int16*) : Int16
    C.SQLDriversW(henv, fDirection, szDriverDesc, cchDriverDescMax, pcchDriverDesc, szDriverAttributes, cchDrvrAttrMax, pcchDrvrAttr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttributeA(hstmt : Void*, iCol : Int16, iField : Int16, pCharAttr : Void*, cbCharAttrMax : Int16, pcbCharAttr : Int16*, pNumAttr : Int64*) : Int16
    C.SQLColAttributeA(hstmt, iCol, iField, pCharAttr, cbCharAttrMax, pcbCharAttr, pNumAttr)
  end
{% end %}

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLColAttributesA(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    C.SQLColAttributesA(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

  def sQLConnectA(hdbc : Void*, szDSN : UInt8*, cbDSN : Int16, szUID : UInt8*, cbUID : Int16, szAuthStr : UInt8*, cbAuthStr : Int16) : Int16
    C.SQLConnectA(hdbc, szDSN, cbDSN, szUID, cbUID, szAuthStr, cbAuthStr)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLDescribeColA(hstmt : Void*, icol : UInt16, szColName : UInt8*, cbColNameMax : Int16, pcbColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeColA(hstmt, icol, szColName, cbColNameMax, pcbColName, pfSqlType, pcbColDef, pibScale, pfNullable)
  end
{% end %}

  def sQLErrorA(henv : Void*, hdbc : Void*, hstmt : Void*, szSqlState : UInt8*, pfNativeError : Int32*, szErrorMsg : UInt8*, cbErrorMsgMax : Int16, pcbErrorMsg : Int16*) : Int16
    C.SQLErrorA(henv, hdbc, hstmt, szSqlState, pfNativeError, szErrorMsg, cbErrorMsgMax, pcbErrorMsg)
  end

  def sQLExecDirectA(hstmt : Void*, szSqlStr : UInt8*, cbSqlStr : Int32) : Int16
    C.SQLExecDirectA(hstmt, szSqlStr, cbSqlStr)
  end

  def sQLGetConnectAttrA(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    C.SQLGetConnectAttrA(hdbc, fAttribute, rgbValue, cbValueMax, pcbValue)
  end

  def sQLGetCursorNameA(hstmt : Void*, szCursor : UInt8*, cbCursorMax : Int16, pcbCursor : Int16*) : Int16
    C.SQLGetCursorNameA(hstmt, szCursor, cbCursorMax, pcbCursor)
  end

  def sQLGetDescFieldA(hdesc : Void*, iRecord : Int16, iField : Int16, rgbValue : Void*, cbBufferLength : Int32, string_length : Int32*) : Int16
    C.SQLGetDescFieldA(hdesc, iRecord, iField, rgbValue, cbBufferLength, string_length)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLGetDescRecA(hdesc : Void*, iRecord : Int16, szName : UInt8*, cbNameMax : Int16, pcbName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int64*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    C.SQLGetDescRecA(hdesc, iRecord, szName, cbNameMax, pcbName, pfType, pfSubType, pLength, pPrecision, pScale, pNullable)
  end
{% end %}

  def sQLGetDiagFieldA(fHandleType : Int16, handle : Void*, iRecord : Int16, fDiagField : Int16, rgbDiagInfo : Void*, cbDiagInfoMax : Int16, pcbDiagInfo : Int16*) : Int16
    C.SQLGetDiagFieldA(fHandleType, handle, iRecord, fDiagField, rgbDiagInfo, cbDiagInfoMax, pcbDiagInfo)
  end

  def sQLGetDiagRecA(fHandleType : Int16, handle : Void*, iRecord : Int16, szSqlState : UInt8*, pfNativeError : Int32*, szErrorMsg : UInt8*, cbErrorMsgMax : Int16, pcbErrorMsg : Int16*) : Int16
    C.SQLGetDiagRecA(fHandleType, handle, iRecord, szSqlState, pfNativeError, szErrorMsg, cbErrorMsgMax, pcbErrorMsg)
  end

  def sQLGetStmtAttrA(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    C.SQLGetStmtAttrA(hstmt, fAttribute, rgbValue, cbValueMax, pcbValue)
  end

  def sQLGetTypeInfoA(statement_handle : Void*, data_type : Int16) : Int16
    C.SQLGetTypeInfoA(statement_handle, data_type)
  end

  def sQLPrepareA(hstmt : Void*, szSqlStr : UInt8*, cbSqlStr : Int32) : Int16
    C.SQLPrepareA(hstmt, szSqlStr, cbSqlStr)
  end

  def sQLSetConnectAttrA(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValue : Int32) : Int16
    C.SQLSetConnectAttrA(hdbc, fAttribute, rgbValue, cbValue)
  end

  def sQLSetCursorNameA(hstmt : Void*, szCursor : UInt8*, cbCursor : Int16) : Int16
    C.SQLSetCursorNameA(hstmt, szCursor, cbCursor)
  end

  def sQLColumnsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16
    C.SQLColumnsA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName, szColumnName, cbColumnName)
  end

  def sQLGetConnectOptionA(hdbc : Void*, fOption : UInt16, pvParam : Void*) : Int16
    C.SQLGetConnectOptionA(hdbc, fOption, pvParam)
  end

  def sQLGetInfoA(hdbc : Void*, fInfoType : UInt16, rgbInfoValue : Void*, cbInfoValueMax : Int16, pcbInfoValue : Int16*) : Int16
    C.SQLGetInfoA(hdbc, fInfoType, rgbInfoValue, cbInfoValueMax, pcbInfoValue)
  end

{% if flag?(:x86_64) || flag?(:arm) %}
  def sQLSetConnectOptionA(hdbc : Void*, fOption : UInt16, vParam : UInt64) : Int16
    C.SQLSetConnectOptionA(hdbc, fOption, vParam)
  end
{% end %}

  def sQLSpecialColumnsA(hstmt : Void*, fColType : UInt16, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, fScope : UInt16, fNullable : UInt16) : Int16
    C.SQLSpecialColumnsA(hstmt, fColType, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName, fScope, fNullable)
  end

  def sQLStatisticsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, fUnique : UInt16, fAccuracy : UInt16) : Int16
    C.SQLStatisticsA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName, fUnique, fAccuracy)
  end

  def sQLTablesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szTableType : UInt8*, cbTableType : Int16) : Int16
    C.SQLTablesA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName, szTableType, cbTableType)
  end

  def sQLDataSourcesA(henv : Void*, fDirection : UInt16, szDSN : UInt8*, cbDSNMax : Int16, pcbDSN : Int16*, szDescription : UInt8*, cbDescriptionMax : Int16, pcbDescription : Int16*) : Int16
    C.SQLDataSourcesA(henv, fDirection, szDSN, cbDSNMax, pcbDSN, szDescription, cbDescriptionMax, pcbDescription)
  end

  def sQLDriverConnectA(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt8*, cbConnStrIn : Int16, szConnStrOut : UInt8*, cbConnStrOutMax : Int16, pcbConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16
    C.SQLDriverConnectA(hdbc, hwnd, szConnStrIn, cbConnStrIn, szConnStrOut, cbConnStrOutMax, pcbConnStrOut, fDriverCompletion)
  end

  def sQLBrowseConnectA(hdbc : Void*, szConnStrIn : UInt8*, cbConnStrIn : Int16, szConnStrOut : UInt8*, cbConnStrOutMax : Int16, pcbConnStrOut : Int16*) : Int16
    C.SQLBrowseConnectA(hdbc, szConnStrIn, cbConnStrIn, szConnStrOut, cbConnStrOutMax, pcbConnStrOut)
  end

  def sQLColumnPrivilegesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16
    C.SQLColumnPrivilegesA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName, szColumnName, cbColumnName)
  end

  def sQLForeignKeysA(hstmt : Void*, szPkCatalogName : UInt8*, cbPkCatalogName : Int16, szPkSchemaName : UInt8*, cbPkSchemaName : Int16, szPkTableName : UInt8*, cbPkTableName : Int16, szFkCatalogName : UInt8*, cbFkCatalogName : Int16, szFkSchemaName : UInt8*, cbFkSchemaName : Int16, szFkTableName : UInt8*, cbFkTableName : Int16) : Int16
    C.SQLForeignKeysA(hstmt, szPkCatalogName, cbPkCatalogName, szPkSchemaName, cbPkSchemaName, szPkTableName, cbPkTableName, szFkCatalogName, cbFkCatalogName, szFkSchemaName, cbFkSchemaName, szFkTableName, cbFkTableName)
  end

  def sQLNativeSqlA(hdbc : Void*, szSqlStrIn : UInt8*, cbSqlStrIn : Int32, szSqlStr : UInt8*, cbSqlStrMax : Int32, pcbSqlStr : Int32*) : Int16
    C.SQLNativeSqlA(hdbc, szSqlStrIn, cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr)
  end

  def sQLPrimaryKeysA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16) : Int16
    C.SQLPrimaryKeysA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName)
  end

  def sQLProcedureColumnsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szProcName : UInt8*, cbProcName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16
    C.SQLProcedureColumnsA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szProcName, cbProcName, szColumnName, cbColumnName)
  end

  def sQLProceduresA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szProcName : UInt8*, cbProcName : Int16) : Int16
    C.SQLProceduresA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szProcName, cbProcName)
  end

  def sQLTablePrivilegesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16) : Int16
    C.SQLTablePrivilegesA(hstmt, szCatalogName, cbCatalogName, szSchemaName, cbSchemaName, szTableName, cbTableName)
  end

  def sQLDriversA(henv : Void*, fDirection : UInt16, szDriverDesc : UInt8*, cbDriverDescMax : Int16, pcbDriverDesc : Int16*, szDriverAttributes : UInt8*, cbDrvrAttrMax : Int16, pcbDrvrAttr : Int16*) : Int16
    C.SQLDriversA(henv, fDirection, szDriverDesc, cbDriverDescMax, pcbDriverDesc, szDriverAttributes, cbDrvrAttrMax, pcbDrvrAttr)
  end

{% if flag?(:i386) %}
  def sQLBindCol(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int32, str_len_or_ind : Int32*) : Int16
    C.SQLBindCol(statement_handle, column_number, target_type, target_value, buffer_length, str_len_or_ind)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLBindParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt32, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int32*) : Int16
    C.SQLBindParam(statement_handle, parameter_number, value_type, parameter_type, length_precision, parameter_scale, parameter_value, str_len_or_ind)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttribute(statement_handle : Void*, column_number : UInt16, field_identifier : UInt16, character_attribute : Void*, buffer_length : Int16, string_length : Int16*, numeric_attribute : Void*) : Int16
    C.SQLColAttribute(statement_handle, column_number, field_identifier, character_attribute, buffer_length, string_length, numeric_attribute)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLDescribeCol(statement_handle : Void*, column_number : UInt16, column_name : UInt8*, buffer_length : Int16, name_length : Int16*, data_type : Int16*, column_size : UInt32*, decimal_digits : Int16*, nullable : Int16*) : Int16
    C.SQLDescribeCol(statement_handle, column_number, column_name, buffer_length, name_length, data_type, column_size, decimal_digits, nullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLFetchScroll(statement_handle : Void*, fetch_orientation : Int16, fetch_offset : Int32) : Int16
    C.SQLFetchScroll(statement_handle, fetch_orientation, fetch_offset)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLGetData(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int32, str_len_or_ind_ptr : Int32*) : Int16
    C.SQLGetData(statement_handle, column_number, target_type, target_value, buffer_length, str_len_or_ind_ptr)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLGetDescRec(descriptor_handle : Void*, rec_number : Int16, name : UInt8*, buffer_length : Int16, string_length_ptr : Int16*, type_ptr : Int16*, sub_type_ptr : Int16*, length_ptr : Int32*, precision_ptr : Int16*, scale_ptr : Int16*, nullable_ptr : Int16*) : Int16
    C.SQLGetDescRec(descriptor_handle, rec_number, name, buffer_length, string_length_ptr, type_ptr, sub_type_ptr, length_ptr, precision_ptr, scale_ptr, nullable_ptr)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLPutData(statement_handle : Void*, data : Void*, str_len_or_ind : Int32) : Int16
    C.SQLPutData(statement_handle, data, str_len_or_ind)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLRowCount(statement_handle : Void*, row_count : Int32*) : Int16
    C.SQLRowCount(statement_handle, row_count)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetConnectOption(connection_handle : Void*, option : UInt16, value : UInt32) : Int16
    C.SQLSetConnectOption(connection_handle, option, value)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetDescRec(descriptor_handle : Void*, rec_number : Int16, type__ : Int16, sub_type : Int16, length : Int32, precision : Int16, scale : Int16, data : Void*, string_length : Int32*, indicator : Int32*) : Int16
    C.SQLSetDescRec(descriptor_handle, rec_number, type__, sub_type, length, precision, scale, data, string_length, indicator)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt32, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int32*) : Int16
    C.SQLSetParam(statement_handle, parameter_number, value_type, parameter_type, length_precision, parameter_scale, parameter_value, str_len_or_ind)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetStmtOption(statement_handle : Void*, option : UInt16, value : UInt32) : Int16
    C.SQLSetStmtOption(statement_handle, option, value)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttributes(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    C.SQLColAttributes(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLDescribeParam(hstmt : Void*, ipar : UInt16, pfSqlType : Int16*, pcbParamDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeParam(hstmt, ipar, pfSqlType, pcbParamDef, pibScale, pfNullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLExtendedFetch(hstmt : Void*, fFetchType : UInt16, irow : Int32, pcrow : UInt32*, rgfRowStatus : UInt16*) : Int16
    C.SQLExtendedFetch(hstmt, fFetchType, irow, pcrow, rgfRowStatus)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLParamOptions(hstmt : Void*, crow : UInt32, pirow : UInt32*) : Int16
    C.SQLParamOptions(hstmt, crow, pirow)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetPos(hstmt : Void*, irow : UInt16, fOption : UInt16, fLock : UInt16) : Int16
    C.SQLSetPos(hstmt, irow, fOption, fLock)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLBindParameter(hstmt : Void*, ipar : UInt16, fParamType : Int16, fCType : Int16, fSqlType : Int16, cbColDef : UInt32, ibScale : Int16, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    C.SQLBindParameter(hstmt, ipar, fParamType, fCType, fSqlType, cbColDef, ibScale, rgbValue, cbValueMax, pcbValue)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetScrollOptions(hstmt : Void*, fConcurrency : UInt16, crowKeyset : Int32, crowRowset : UInt16) : Int16
    C.SQLSetScrollOptions(hstmt, fConcurrency, crowKeyset, crowRowset)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttributeW(hstmt : Void*, iCol : UInt16, iField : UInt16, pCharAttr : Void*, cbDescMax : Int16, pcbCharAttr : Int16*, pNumAttr : Void*) : Int16
    C.SQLColAttributeW(hstmt, iCol, iField, pCharAttr, cbDescMax, pcbCharAttr, pNumAttr)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttributesW(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    C.SQLColAttributesW(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLDescribeColW(hstmt : Void*, icol : UInt16, szColName : UInt16*, cchColNameMax : Int16, pcchColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeColW(hstmt, icol, szColName, cchColNameMax, pcchColName, pfSqlType, pcbColDef, pibScale, pfNullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLGetDescRecW(hdesc : Void*, iRecord : Int16, szName : UInt16*, cchNameMax : Int16, pcchName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int32*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    C.SQLGetDescRecW(hdesc, iRecord, szName, cchNameMax, pcchName, pfType, pfSubType, pLength, pPrecision, pScale, pNullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetConnectOptionW(hdbc : Void*, fOption : UInt16, vParam : UInt32) : Int16
    C.SQLSetConnectOptionW(hdbc, fOption, vParam)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttributeA(hstmt : Void*, iCol : Int16, iField : Int16, pCharAttr : Void*, cbCharAttrMax : Int16, pcbCharAttr : Int16*, pNumAttr : Void*) : Int16
    C.SQLColAttributeA(hstmt, iCol, iField, pCharAttr, cbCharAttrMax, pcbCharAttr, pNumAttr)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLColAttributesA(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    C.SQLColAttributesA(hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLDescribeColA(hstmt : Void*, icol : UInt16, szColName : UInt8*, cbColNameMax : Int16, pcbColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    C.SQLDescribeColA(hstmt, icol, szColName, cbColNameMax, pcbColName, pfSqlType, pcbColDef, pibScale, pfNullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLGetDescRecA(hdesc : Void*, iRecord : Int16, szName : UInt8*, cbNameMax : Int16, pcbName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int32*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    C.SQLGetDescRecA(hdesc, iRecord, szName, cbNameMax, pcbName, pfType, pfSubType, pLength, pPrecision, pScale, pNullable)
  end
{% end %}

{% if flag?(:i386) %}
  def sQLSetConnectOptionA(hdbc : Void*, fOption : UInt16, vParam : UInt32) : Int16
    C.SQLSetConnectOptionA(hdbc, fOption, vParam)
  end
{% end %}

  @[Link("odbc32")]
  @[Link("odbcbcp")]
  lib C
    # :nodoc:
    fun SQLAllocConnect(environment_handle : Void*, connection_handle : Void**) : Int16

    # :nodoc:
    fun SQLAllocEnv(environment_handle : Void**) : Int16

    # :nodoc:
    fun SQLAllocHandle(handle_type : Int16, input_handle : Void*, output_handle : Void**) : Int16

    # :nodoc:
    fun SQLAllocStmt(connection_handle : Void*, statement_handle : Void**) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLBindCol(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int64, str_len_or_ind : Int64*) : Int16
    {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLBindParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt64, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLCancel(statement_handle : Void*) : Int16

    # :nodoc:
    fun SQLCancelHandle(handle_type : Int16, input_handle : Void*) : Int16

    # :nodoc:
    fun SQLCloseCursor(statement_handle : Void*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttribute(statement_handle : Void*, column_number : UInt16, field_identifier : UInt16, character_attribute : Void*, buffer_length : Int16, string_length : Int16*, numeric_attribute : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLColumns(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, column_name : UInt8*, name_length4 : Int16) : Int16

    # :nodoc:
    fun SQLCompleteAsync(handle_type : Int16, handle : Void*, async_ret_code_ptr : Int16*) : Int16

    # :nodoc:
    fun SQLConnect(connection_handle : Void*, server_name : UInt8*, name_length1 : Int16, user_name : UInt8*, name_length2 : Int16, authentication : UInt8*, name_length3 : Int16) : Int16

    # :nodoc:
    fun SQLCopyDesc(source_desc_handle : Void*, target_desc_handle : Void*) : Int16

    # :nodoc:
    fun SQLDataSources(environment_handle : Void*, direction : UInt16, server_name : UInt8*, buffer_length1 : Int16, name_length1_ptr : Int16*, description : UInt8*, buffer_length2 : Int16, name_length2_ptr : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLDescribeCol(statement_handle : Void*, column_number : UInt16, column_name : UInt8*, buffer_length : Int16, name_length : Int16*, data_type : Int16*, column_size : UInt64*, decimal_digits : Int16*, nullable : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLDisconnect(connection_handle : Void*) : Int16

    # :nodoc:
    fun SQLEndTran(handle_type : Int16, handle : Void*, completion_type : Int16) : Int16

    # :nodoc:
    fun SQLError(environment_handle : Void*, connection_handle : Void*, statement_handle : Void*, sqlstate : UInt8*, native_error : Int32*, message_text : UInt8*, buffer_length : Int16, text_length : Int16*) : Int16

    # :nodoc:
    fun SQLExecDirect(statement_handle : Void*, statement_text : UInt8*, text_length : Int32) : Int16

    # :nodoc:
    fun SQLExecute(statement_handle : Void*) : Int16

    # :nodoc:
    fun SQLFetch(statement_handle : Void*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLFetchScroll(statement_handle : Void*, fetch_orientation : Int16, fetch_offset : Int64) : Int16
    {% end %}

    # :nodoc:
    fun SQLFreeConnect(connection_handle : Void*) : Int16

    # :nodoc:
    fun SQLFreeEnv(environment_handle : Void*) : Int16

    # :nodoc:
    fun SQLFreeHandle(handle_type : Int16, handle : Void*) : Int16

    # :nodoc:
    fun SQLFreeStmt(statement_handle : Void*, option : UInt16) : Int16

    # :nodoc:
    fun SQLGetConnectAttr(connection_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length_ptr : Int32*) : Int16

    # :nodoc:
    fun SQLGetConnectOption(connection_handle : Void*, option : UInt16, value : Void*) : Int16

    # :nodoc:
    fun SQLGetCursorName(statement_handle : Void*, cursor_name : UInt8*, buffer_length : Int16, name_length_ptr : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLGetData(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int64, str_len_or_ind_ptr : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLGetDescField(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLGetDescRec(descriptor_handle : Void*, rec_number : Int16, name : UInt8*, buffer_length : Int16, string_length_ptr : Int16*, type_ptr : Int16*, sub_type_ptr : Int16*, length_ptr : Int64*, precision_ptr : Int16*, scale_ptr : Int16*, nullable_ptr : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLGetDiagField(handle_type : Int16, handle : Void*, rec_number : Int16, diag_identifier : Int16, diag_info : Void*, buffer_length : Int16, string_length : Int16*) : Int16

    # :nodoc:
    fun SQLGetDiagRec(handle_type : Int16, handle : Void*, rec_number : Int16, sqlstate : UInt8*, native_error : Int32*, message_text : UInt8*, buffer_length : Int16, text_length : Int16*) : Int16

    # :nodoc:
    fun SQLGetEnvAttr(environment_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16

    # :nodoc:
    fun SQLGetFunctions(connection_handle : Void*, function_id : UInt16, supported : UInt16*) : Int16

    # :nodoc:
    fun SQLGetInfo(connection_handle : Void*, info_type : UInt16, info_value : Void*, buffer_length : Int16, string_length_ptr : Int16*) : Int16

    # :nodoc:
    fun SQLGetStmtAttr(statement_handle : Void*, attribute : Int32, value : Void*, buffer_length : Int32, string_length : Int32*) : Int16

    # :nodoc:
    fun SQLGetStmtOption(statement_handle : Void*, option : UInt16, value : Void*) : Int16

    # :nodoc:
    fun SQLGetTypeInfo(statement_handle : Void*, data_type : Int16) : Int16

    # :nodoc:
    fun SQLNumResultCols(statement_handle : Void*, column_count : Int16*) : Int16

    # :nodoc:
    fun SQLParamData(statement_handle : Void*, value : Void**) : Int16

    # :nodoc:
    fun SQLPrepare(statement_handle : Void*, statement_text : UInt8*, text_length : Int32) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLPutData(statement_handle : Void*, data : Void*, str_len_or_ind : Int64) : Int16
    {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLRowCount(statement_handle : Void*, row_count : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLSetConnectAttr(connection_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetConnectOption(connection_handle : Void*, option : UInt16, value : UInt64) : Int16
    {% end %}

    # :nodoc:
    fun SQLSetCursorName(statement_handle : Void*, cursor_name : UInt8*, name_length : Int16) : Int16

    # :nodoc:
    fun SQLSetDescField(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetDescRec(descriptor_handle : Void*, rec_number : Int16, type__ : Int16, sub_type : Int16, length : Int64, precision : Int16, scale : Int16, data : Void*, string_length : Int64*, indicator : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLSetEnvAttr(environment_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt64, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLSetStmtAttr(statement_handle : Void*, attribute : Int32, value : Void*, string_length : Int32) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetStmtOption(statement_handle : Void*, option : UInt16, value : UInt64) : Int16
    {% end %}

    # :nodoc:
    fun SQLSpecialColumns(statement_handle : Void*, identifier_type : UInt16, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, scope : UInt16, nullable : UInt16) : Int16

    # :nodoc:
    fun SQLStatistics(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, unique : UInt16, reserved : UInt16) : Int16

    # :nodoc:
    fun SQLTables(statement_handle : Void*, catalog_name : UInt8*, name_length1 : Int16, schema_name : UInt8*, name_length2 : Int16, table_name : UInt8*, name_length3 : Int16, table_type : UInt8*, name_length4 : Int16) : Int16

    # :nodoc:
    fun SQLTransact(environment_handle : Void*, connection_handle : Void*, completion_type : UInt16) : Int16

    # :nodoc:
    fun bcp_batch(param0 : Void*) : Int32

    # :nodoc:
    fun bcp_bind(param0 : Void*, param1 : UInt8*, param2 : Int32, param3 : Int32, param4 : UInt8*, param5 : Int32, param6 : Int32, param7 : Int32) : Int16

    # :nodoc:
    fun bcp_colfmt(param0 : Void*, param1 : Int32, param2 : UInt8, param3 : Int32, param4 : Int32, param5 : UInt8*, param6 : Int32, param7 : Int32) : Int16

    # :nodoc:
    fun bcp_collen(param0 : Void*, param1 : Int32, param2 : Int32) : Int16

    # :nodoc:
    fun bcp_colptr(param0 : Void*, param1 : UInt8*, param2 : Int32) : Int16

    # :nodoc:
    fun bcp_columns(param0 : Void*, param1 : Int32) : Int16

    # :nodoc:
    fun bcp_control(param0 : Void*, param1 : Int32, param2 : Void*) : Int16

    # :nodoc:
    fun bcp_done(param0 : Void*) : Int32

    # :nodoc:
    fun bcp_exec(param0 : Void*, param1 : Int32*) : Int16

    # :nodoc:
    fun bcp_getcolfmt(param0 : Void*, param1 : Int32, param2 : Int32, param3 : Void*, param4 : Int32, param5 : Int32*) : Int16

    # :nodoc:
    fun bcp_initA(param0 : Void*, param1 : Win32cr::Foundation::PSTR, param2 : Win32cr::Foundation::PSTR, param3 : Win32cr::Foundation::PSTR, param4 : Int32) : Int16

    # :nodoc:
    fun bcp_initW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR, param2 : Win32cr::Foundation::PWSTR, param3 : Win32cr::Foundation::PWSTR, param4 : Int32) : Int16

    # :nodoc:
    fun bcp_moretext(param0 : Void*, param1 : Int32, param2 : UInt8*) : Int16

    # :nodoc:
    fun bcp_readfmtA(param0 : Void*, param1 : Win32cr::Foundation::PSTR) : Int16

    # :nodoc:
    fun bcp_readfmtW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR) : Int16

    # :nodoc:
    fun bcp_sendrow(param0 : Void*) : Int16

    # :nodoc:
    fun bcp_setcolfmt(param0 : Void*, param1 : Int32, param2 : Int32, param3 : Void*, param4 : Int32) : Int16

    # :nodoc:
    fun bcp_writefmtA(param0 : Void*, param1 : Win32cr::Foundation::PSTR) : Int16

    # :nodoc:
    fun bcp_writefmtW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR) : Int16

    # :nodoc:
    fun dbprtypeA(param0 : Int32) : Win32cr::Foundation::PSTR

    # :nodoc:
    fun dbprtypeW(param0 : Int32) : Win32cr::Foundation::PWSTR

    # :nodoc:
    fun SQLLinkedServers(param0 : Void*) : Int16

    # :nodoc:
    fun SQLLinkedCatalogsA(param0 : Void*, param1 : Win32cr::Foundation::PSTR, param2 : Int16) : Int16

    # :nodoc:
    fun SQLLinkedCatalogsW(param0 : Void*, param1 : Win32cr::Foundation::PWSTR, param2 : Int16) : Int16

    # :nodoc:
    fun SQLInitEnumServers(pwchServerName : Win32cr::Foundation::PWSTR, pwchInstanceName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HANDLE

    # :nodoc:
    fun SQLGetNextEnumeration(hEnumHandle : Win32cr::Foundation::HANDLE, prgEnumData : UInt8*, piEnumLength : Int32*) : Int16

    # :nodoc:
    fun SQLCloseEnumServers(hEnumHandle : Win32cr::Foundation::HANDLE) : Int16

    # :nodoc:
    fun SQLDriverConnect(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt8*, cchConnStrIn : Int16, szConnStrOut : UInt8*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16

    # :nodoc:
    fun SQLBrowseConnect(hdbc : Void*, szConnStrIn : UInt8*, cchConnStrIn : Int16, szConnStrOut : UInt8*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*) : Int16

    # :nodoc:
    fun SQLBulkOperations(statement_handle : Void*, operation : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttributes(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLColumnPrivileges(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16, szColumnName : UInt8*, cchColumnName : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLDescribeParam(hstmt : Void*, ipar : UInt16, pfSqlType : Int16*, pcbParamDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLExtendedFetch(hstmt : Void*, fFetchType : UInt16, irow : Int64, pcrow : UInt64*, rgfRowStatus : UInt16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLForeignKeys(hstmt : Void*, szPkCatalogName : UInt8*, cchPkCatalogName : Int16, szPkSchemaName : UInt8*, cchPkSchemaName : Int16, szPkTableName : UInt8*, cchPkTableName : Int16, szFkCatalogName : UInt8*, cchFkCatalogName : Int16, szFkSchemaName : UInt8*, cchFkSchemaName : Int16, szFkTableName : UInt8*, cchFkTableName : Int16) : Int16

    # :nodoc:
    fun SQLMoreResults(hstmt : Void*) : Int16

    # :nodoc:
    fun SQLNativeSql(hdbc : Void*, szSqlStrIn : UInt8*, cchSqlStrIn : Int32, szSqlStr : UInt8*, cchSqlStrMax : Int32, pcbSqlStr : Int32*) : Int16

    # :nodoc:
    fun SQLNumParams(hstmt : Void*, pcpar : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLParamOptions(hstmt : Void*, crow : UInt64, pirow : UInt64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLPrimaryKeys(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16) : Int16

    # :nodoc:
    fun SQLProcedureColumns(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szProcName : UInt8*, cchProcName : Int16, szColumnName : UInt8*, cchColumnName : Int16) : Int16

    # :nodoc:
    fun SQLProcedures(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szProcName : UInt8*, cchProcName : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetPos(hstmt : Void*, irow : UInt64, fOption : UInt16, fLock : UInt16) : Int16
    {% end %}

    # :nodoc:
    fun SQLTablePrivileges(hstmt : Void*, szCatalogName : UInt8*, cchCatalogName : Int16, szSchemaName : UInt8*, cchSchemaName : Int16, szTableName : UInt8*, cchTableName : Int16) : Int16

    # :nodoc:
    fun SQLDrivers(henv : Void*, fDirection : UInt16, szDriverDesc : UInt8*, cchDriverDescMax : Int16, pcchDriverDesc : Int16*, szDriverAttributes : UInt8*, cchDrvrAttrMax : Int16, pcchDrvrAttr : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLBindParameter(hstmt : Void*, ipar : UInt16, fParamType : Int16, fCType : Int16, fSqlType : Int16, cbColDef : UInt64, ibScale : Int16, rgbValue : Void*, cbValueMax : Int64, pcbValue : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLAllocHandleStd(fHandleType : Int16, hInput : Void*, phOutput : Void**) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetScrollOptions(hstmt : Void*, fConcurrency : UInt16, crowKeyset : Int64, crowRowset : UInt16) : Int16
    {% end %}

    # :nodoc:
    fun ODBCSetTryWaitValue(dwValue : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun ODBCGetTryWaitValue : UInt32

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttributeW(hstmt : Void*, iCol : UInt16, iField : UInt16, pCharAttr : Void*, cbDescMax : Int16, pcbCharAttr : Int16*, pNumAttr : Int64*) : Int16
    {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttributesW(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLConnectW(hdbc : Void*, szDSN : UInt16*, cchDSN : Int16, szUID : UInt16*, cchUID : Int16, szAuthStr : UInt16*, cchAuthStr : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLDescribeColW(hstmt : Void*, icol : UInt16, szColName : UInt16*, cchColNameMax : Int16, pcchColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLErrorW(henv : Void*, hdbc : Void*, hstmt : Void*, wszSqlState : UInt16*, pfNativeError : Int32*, wszErrorMsg : UInt16*, cchErrorMsgMax : Int16, pcchErrorMsg : Int16*) : Int16

    # :nodoc:
    fun SQLExecDirectW(hstmt : Void*, szSqlStr : UInt16*, text_length : Int32) : Int16

    # :nodoc:
    fun SQLGetConnectAttrW(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16

    # :nodoc:
    fun SQLGetCursorNameW(hstmt : Void*, szCursor : UInt16*, cchCursorMax : Int16, pcchCursor : Int16*) : Int16

    # :nodoc:
    fun SQLSetDescFieldW(descriptor_handle : Void*, rec_number : Int16, field_identifier : Int16, value : Void*, buffer_length : Int32) : Int16

    # :nodoc:
    fun SQLGetDescFieldW(hdesc : Void*, iRecord : Int16, iField : Int16, rgbValue : Void*, cbBufferLength : Int32, string_length : Int32*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLGetDescRecW(hdesc : Void*, iRecord : Int16, szName : UInt16*, cchNameMax : Int16, pcchName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int64*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLGetDiagFieldW(fHandleType : Int16, handle : Void*, iRecord : Int16, fDiagField : Int16, rgbDiagInfo : Void*, cbBufferLength : Int16, pcbStringLength : Int16*) : Int16

    # :nodoc:
    fun SQLGetDiagRecW(fHandleType : Int16, handle : Void*, iRecord : Int16, szSqlState : UInt16*, pfNativeError : Int32*, szErrorMsg : UInt16*, cchErrorMsgMax : Int16, pcchErrorMsg : Int16*) : Int16

    # :nodoc:
    fun SQLPrepareW(hstmt : Void*, szSqlStr : UInt16*, cchSqlStr : Int32) : Int16

    # :nodoc:
    fun SQLSetConnectAttrW(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValue : Int32) : Int16

    # :nodoc:
    fun SQLSetCursorNameW(hstmt : Void*, szCursor : UInt16*, cchCursor : Int16) : Int16

    # :nodoc:
    fun SQLColumnsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16

    # :nodoc:
    fun SQLGetConnectOptionW(hdbc : Void*, fOption : UInt16, pvParam : Void*) : Int16

    # :nodoc:
    fun SQLGetInfoW(hdbc : Void*, fInfoType : UInt16, rgbInfoValue : Void*, cbInfoValueMax : Int16, pcbInfoValue : Int16*) : Int16

    # :nodoc:
    fun SQLGetTypeInfoW(statement_handle : Void*, data_type : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetConnectOptionW(hdbc : Void*, fOption : UInt16, vParam : UInt64) : Int16
    {% end %}

    # :nodoc:
    fun SQLSpecialColumnsW(hstmt : Void*, fColType : UInt16, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, fScope : UInt16, fNullable : UInt16) : Int16

    # :nodoc:
    fun SQLStatisticsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, fUnique : UInt16, fAccuracy : UInt16) : Int16

    # :nodoc:
    fun SQLTablesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szTableType : UInt16*, cchTableType : Int16) : Int16

    # :nodoc:
    fun SQLDataSourcesW(henv : Void*, fDirection : UInt16, szDSN : UInt16*, cchDSNMax : Int16, pcchDSN : Int16*, wszDescription : UInt16*, cchDescriptionMax : Int16, pcchDescription : Int16*) : Int16

    # :nodoc:
    fun SQLDriverConnectW(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt16*, cchConnStrIn : Int16, szConnStrOut : UInt16*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16

    # :nodoc:
    fun SQLBrowseConnectW(hdbc : Void*, szConnStrIn : UInt16*, cchConnStrIn : Int16, szConnStrOut : UInt16*, cchConnStrOutMax : Int16, pcchConnStrOut : Int16*) : Int16

    # :nodoc:
    fun SQLColumnPrivilegesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16

    # :nodoc:
    fun SQLGetStmtAttrW(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16

    # :nodoc:
    fun SQLSetStmtAttrW(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32) : Int16

    # :nodoc:
    fun SQLForeignKeysW(hstmt : Void*, szPkCatalogName : UInt16*, cchPkCatalogName : Int16, szPkSchemaName : UInt16*, cchPkSchemaName : Int16, szPkTableName : UInt16*, cchPkTableName : Int16, szFkCatalogName : UInt16*, cchFkCatalogName : Int16, szFkSchemaName : UInt16*, cchFkSchemaName : Int16, szFkTableName : UInt16*, cchFkTableName : Int16) : Int16

    # :nodoc:
    fun SQLNativeSqlW(hdbc : Void*, szSqlStrIn : UInt16*, cchSqlStrIn : Int32, szSqlStr : UInt16*, cchSqlStrMax : Int32, pcchSqlStr : Int32*) : Int16

    # :nodoc:
    fun SQLPrimaryKeysW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16) : Int16

    # :nodoc:
    fun SQLProcedureColumnsW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szProcName : UInt16*, cchProcName : Int16, szColumnName : UInt16*, cchColumnName : Int16) : Int16

    # :nodoc:
    fun SQLProceduresW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szProcName : UInt16*, cchProcName : Int16) : Int16

    # :nodoc:
    fun SQLTablePrivilegesW(hstmt : Void*, szCatalogName : UInt16*, cchCatalogName : Int16, szSchemaName : UInt16*, cchSchemaName : Int16, szTableName : UInt16*, cchTableName : Int16) : Int16

    # :nodoc:
    fun SQLDriversW(henv : Void*, fDirection : UInt16, szDriverDesc : UInt16*, cchDriverDescMax : Int16, pcchDriverDesc : Int16*, szDriverAttributes : UInt16*, cchDrvrAttrMax : Int16, pcchDrvrAttr : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttributeA(hstmt : Void*, iCol : Int16, iField : Int16, pCharAttr : Void*, cbCharAttrMax : Int16, pcbCharAttr : Int16*, pNumAttr : Int64*) : Int16
    {% end %}

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLColAttributesA(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int64*) : Int16
    {% end %}

    # :nodoc:
    fun SQLConnectA(hdbc : Void*, szDSN : UInt8*, cbDSN : Int16, szUID : UInt8*, cbUID : Int16, szAuthStr : UInt8*, cbAuthStr : Int16) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLDescribeColA(hstmt : Void*, icol : UInt16, szColName : UInt8*, cbColNameMax : Int16, pcbColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt64*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLErrorA(henv : Void*, hdbc : Void*, hstmt : Void*, szSqlState : UInt8*, pfNativeError : Int32*, szErrorMsg : UInt8*, cbErrorMsgMax : Int16, pcbErrorMsg : Int16*) : Int16

    # :nodoc:
    fun SQLExecDirectA(hstmt : Void*, szSqlStr : UInt8*, cbSqlStr : Int32) : Int16

    # :nodoc:
    fun SQLGetConnectAttrA(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16

    # :nodoc:
    fun SQLGetCursorNameA(hstmt : Void*, szCursor : UInt8*, cbCursorMax : Int16, pcbCursor : Int16*) : Int16

    # :nodoc:
    fun SQLGetDescFieldA(hdesc : Void*, iRecord : Int16, iField : Int16, rgbValue : Void*, cbBufferLength : Int32, string_length : Int32*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLGetDescRecA(hdesc : Void*, iRecord : Int16, szName : UInt8*, cbNameMax : Int16, pcbName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int64*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    {% end %}

    # :nodoc:
    fun SQLGetDiagFieldA(fHandleType : Int16, handle : Void*, iRecord : Int16, fDiagField : Int16, rgbDiagInfo : Void*, cbDiagInfoMax : Int16, pcbDiagInfo : Int16*) : Int16

    # :nodoc:
    fun SQLGetDiagRecA(fHandleType : Int16, handle : Void*, iRecord : Int16, szSqlState : UInt8*, pfNativeError : Int32*, szErrorMsg : UInt8*, cbErrorMsgMax : Int16, pcbErrorMsg : Int16*) : Int16

    # :nodoc:
    fun SQLGetStmtAttrA(hstmt : Void*, fAttribute : Int32, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16

    # :nodoc:
    fun SQLGetTypeInfoA(statement_handle : Void*, data_type : Int16) : Int16

    # :nodoc:
    fun SQLPrepareA(hstmt : Void*, szSqlStr : UInt8*, cbSqlStr : Int32) : Int16

    # :nodoc:
    fun SQLSetConnectAttrA(hdbc : Void*, fAttribute : Int32, rgbValue : Void*, cbValue : Int32) : Int16

    # :nodoc:
    fun SQLSetCursorNameA(hstmt : Void*, szCursor : UInt8*, cbCursor : Int16) : Int16

    # :nodoc:
    fun SQLColumnsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16

    # :nodoc:
    fun SQLGetConnectOptionA(hdbc : Void*, fOption : UInt16, pvParam : Void*) : Int16

    # :nodoc:
    fun SQLGetInfoA(hdbc : Void*, fInfoType : UInt16, rgbInfoValue : Void*, cbInfoValueMax : Int16, pcbInfoValue : Int16*) : Int16

    {% if flag?(:x86_64) || flag?(:arm) %}
    # :nodoc:
    fun SQLSetConnectOptionA(hdbc : Void*, fOption : UInt16, vParam : UInt64) : Int16
    {% end %}

    # :nodoc:
    fun SQLSpecialColumnsA(hstmt : Void*, fColType : UInt16, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, fScope : UInt16, fNullable : UInt16) : Int16

    # :nodoc:
    fun SQLStatisticsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, fUnique : UInt16, fAccuracy : UInt16) : Int16

    # :nodoc:
    fun SQLTablesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szTableType : UInt8*, cbTableType : Int16) : Int16

    # :nodoc:
    fun SQLDataSourcesA(henv : Void*, fDirection : UInt16, szDSN : UInt8*, cbDSNMax : Int16, pcbDSN : Int16*, szDescription : UInt8*, cbDescriptionMax : Int16, pcbDescription : Int16*) : Int16

    # :nodoc:
    fun SQLDriverConnectA(hdbc : Void*, hwnd : LibC::IntPtrT, szConnStrIn : UInt8*, cbConnStrIn : Int16, szConnStrOut : UInt8*, cbConnStrOutMax : Int16, pcbConnStrOut : Int16*, fDriverCompletion : UInt16) : Int16

    # :nodoc:
    fun SQLBrowseConnectA(hdbc : Void*, szConnStrIn : UInt8*, cbConnStrIn : Int16, szConnStrOut : UInt8*, cbConnStrOutMax : Int16, pcbConnStrOut : Int16*) : Int16

    # :nodoc:
    fun SQLColumnPrivilegesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16

    # :nodoc:
    fun SQLForeignKeysA(hstmt : Void*, szPkCatalogName : UInt8*, cbPkCatalogName : Int16, szPkSchemaName : UInt8*, cbPkSchemaName : Int16, szPkTableName : UInt8*, cbPkTableName : Int16, szFkCatalogName : UInt8*, cbFkCatalogName : Int16, szFkSchemaName : UInt8*, cbFkSchemaName : Int16, szFkTableName : UInt8*, cbFkTableName : Int16) : Int16

    # :nodoc:
    fun SQLNativeSqlA(hdbc : Void*, szSqlStrIn : UInt8*, cbSqlStrIn : Int32, szSqlStr : UInt8*, cbSqlStrMax : Int32, pcbSqlStr : Int32*) : Int16

    # :nodoc:
    fun SQLPrimaryKeysA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16) : Int16

    # :nodoc:
    fun SQLProcedureColumnsA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szProcName : UInt8*, cbProcName : Int16, szColumnName : UInt8*, cbColumnName : Int16) : Int16

    # :nodoc:
    fun SQLProceduresA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szProcName : UInt8*, cbProcName : Int16) : Int16

    # :nodoc:
    fun SQLTablePrivilegesA(hstmt : Void*, szCatalogName : UInt8*, cbCatalogName : Int16, szSchemaName : UInt8*, cbSchemaName : Int16, szTableName : UInt8*, cbTableName : Int16) : Int16

    # :nodoc:
    fun SQLDriversA(henv : Void*, fDirection : UInt16, szDriverDesc : UInt8*, cbDriverDescMax : Int16, pcbDriverDesc : Int16*, szDriverAttributes : UInt8*, cbDrvrAttrMax : Int16, pcbDrvrAttr : Int16*) : Int16

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLBindCol(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int32, str_len_or_ind : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLBindParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt32, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttribute(statement_handle : Void*, column_number : UInt16, field_identifier : UInt16, character_attribute : Void*, buffer_length : Int16, string_length : Int16*, numeric_attribute : Void*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLDescribeCol(statement_handle : Void*, column_number : UInt16, column_name : UInt8*, buffer_length : Int16, name_length : Int16*, data_type : Int16*, column_size : UInt32*, decimal_digits : Int16*, nullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLFetchScroll(statement_handle : Void*, fetch_orientation : Int16, fetch_offset : Int32) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLGetData(statement_handle : Void*, column_number : UInt16, target_type : Int16, target_value : Void*, buffer_length : Int32, str_len_or_ind_ptr : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLGetDescRec(descriptor_handle : Void*, rec_number : Int16, name : UInt8*, buffer_length : Int16, string_length_ptr : Int16*, type_ptr : Int16*, sub_type_ptr : Int16*, length_ptr : Int32*, precision_ptr : Int16*, scale_ptr : Int16*, nullable_ptr : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLPutData(statement_handle : Void*, data : Void*, str_len_or_ind : Int32) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLRowCount(statement_handle : Void*, row_count : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetConnectOption(connection_handle : Void*, option : UInt16, value : UInt32) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetDescRec(descriptor_handle : Void*, rec_number : Int16, type__ : Int16, sub_type : Int16, length : Int32, precision : Int16, scale : Int16, data : Void*, string_length : Int32*, indicator : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetParam(statement_handle : Void*, parameter_number : UInt16, value_type : Int16, parameter_type : Int16, length_precision : UInt32, parameter_scale : Int16, parameter_value : Void*, str_len_or_ind : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetStmtOption(statement_handle : Void*, option : UInt16, value : UInt32) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttributes(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLDescribeParam(hstmt : Void*, ipar : UInt16, pfSqlType : Int16*, pcbParamDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLExtendedFetch(hstmt : Void*, fFetchType : UInt16, irow : Int32, pcrow : UInt32*, rgfRowStatus : UInt16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLParamOptions(hstmt : Void*, crow : UInt32, pirow : UInt32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetPos(hstmt : Void*, irow : UInt16, fOption : UInt16, fLock : UInt16) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLBindParameter(hstmt : Void*, ipar : UInt16, fParamType : Int16, fCType : Int16, fSqlType : Int16, cbColDef : UInt32, ibScale : Int16, rgbValue : Void*, cbValueMax : Int32, pcbValue : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetScrollOptions(hstmt : Void*, fConcurrency : UInt16, crowKeyset : Int32, crowRowset : UInt16) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttributeW(hstmt : Void*, iCol : UInt16, iField : UInt16, pCharAttr : Void*, cbDescMax : Int16, pcbCharAttr : Int16*, pNumAttr : Void*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttributesW(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLDescribeColW(hstmt : Void*, icol : UInt16, szColName : UInt16*, cchColNameMax : Int16, pcchColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLGetDescRecW(hdesc : Void*, iRecord : Int16, szName : UInt16*, cchNameMax : Int16, pcchName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int32*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetConnectOptionW(hdbc : Void*, fOption : UInt16, vParam : UInt32) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttributeA(hstmt : Void*, iCol : Int16, iField : Int16, pCharAttr : Void*, cbCharAttrMax : Int16, pcbCharAttr : Int16*, pNumAttr : Void*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLColAttributesA(hstmt : Void*, icol : UInt16, fDescType : UInt16, rgbDesc : Void*, cbDescMax : Int16, pcbDesc : Int16*, pfDesc : Int32*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLDescribeColA(hstmt : Void*, icol : UInt16, szColName : UInt8*, cbColNameMax : Int16, pcbColName : Int16*, pfSqlType : Int16*, pcbColDef : UInt32*, pibScale : Int16*, pfNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLGetDescRecA(hdesc : Void*, iRecord : Int16, szName : UInt8*, cbNameMax : Int16, pcbName : Int16*, pfType : Int16*, pfSubType : Int16*, pLength : Int32*, pPrecision : Int16*, pScale : Int16*, pNullable : Int16*) : Int16
    {% end %}

    {% if flag?(:i386) %}
    # :nodoc:
    fun SQLSetConnectOptionA(hdbc : Void*, fOption : UInt16, vParam : UInt32) : Int16
    {% end %}

  end
end