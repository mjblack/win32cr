require "./../foundation.cr"
require "./com.cr"

module Win32cr::System::RemoteManagement
  alias WSMAN_SHELL_COMPLETION_FUNCTION = Proc(Void*, UInt32, Win32cr::System::RemoteManagement::WSMAN_ERROR*, Win32cr::System::RemoteManagement::WSMAN_SHELL*, Win32cr::System::RemoteManagement::WSMAN_COMMAND*, Win32cr::System::RemoteManagement::WSMAN_OPERATION*, Win32cr::System::RemoteManagement::WSMAN_RESPONSE_DATA*, Void)*

  alias WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT = Proc(Void*, Void)*

  alias WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT = Proc(Void*, Void*, Void)*

  alias WSMAN_PLUGIN_STARTUP = Proc(UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, UInt32)*

  alias WSMAN_PLUGIN_SHUTDOWN = Proc(Void*, UInt32, UInt32, UInt32)*

  alias WSMAN_PLUGIN_SHELL = Proc(Void*, Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Win32cr::System::RemoteManagement::WSMAN_SHELL_STARTUP_INFO_V11*, Win32cr::System::RemoteManagement::WSMAN_DATA*, Void)*

  alias WSMAN_PLUGIN_COMMAND = Proc(Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::RemoteManagement::WSMAN_COMMAND_ARG_SET*, Void)*

  alias WSMAN_PLUGIN_SEND = Proc(Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, Win32cr::Foundation::PWSTR, Win32cr::System::RemoteManagement::WSMAN_DATA*, Void)*

  alias WSMAN_PLUGIN_RECEIVE = Proc(Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, Win32cr::System::RemoteManagement::WSMAN_STREAM_ID_SET*, Void)*

  alias WSMAN_PLUGIN_SIGNAL = Proc(Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, Win32cr::Foundation::PWSTR, Void)*

  alias WSMAN_PLUGIN_CONNECT = Proc(Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, Win32cr::System::RemoteManagement::WSMAN_DATA*, Void)*

  alias WSMAN_PLUGIN_AUTHORIZE_USER = Proc(Void*, Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, UInt32, Void)*

  alias WSMAN_PLUGIN_AUTHORIZE_OPERATION = Proc(Void*, Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, UInt32, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void)*

  alias WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA = Proc(Void*, Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, UInt32, Void)*

  alias WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT = Proc(Void*, Void)*

  WSMAN_FLAG_REQUESTED_API_VERSION_1_0 = 0_u32
  WSMAN_FLAG_REQUESTED_API_VERSION_1_1 = 1_u32
  WSMAN_OPERATION_INFOV1 = 0_u32
  WSMAN_OPERATION_INFOV2 = 2864434397_u32
  WSMAN_DEFAULT_TIMEOUT_MS = 60000_u32
  WSMAN_STREAM_ID_STDIN = "stdin"
  WSMAN_STREAM_ID_STDOUT = "stdout"
  WSMAN_STREAM_ID_STDERR = "stderr"
  WSMAN_SHELL_NS = "http://schemas.microsoft.com/wbem/wsman/1/windows/shell"
  WSMAN_CMDSHELL_OPTION_CODEPAGE = "WINRS_CODEPAGE"
  WSMAN_SHELL_OPTION_NOPROFILE = "WINRS_NOPROFILE"
  WSMAN_CMDSHELL_OPTION_CONSOLEMODE_STDIN = "WINRS_CONSOLEMODE_STDIN"
  WSMAN_CMDSHELL_OPTION_SKIP_CMD_SHELL = "WINRS_SKIP_CMD_SHELL"
  WSMAN_FLAG_RECEIVE_RESULT_NO_MORE_DATA = 1_u32
  WSMAN_FLAG_RECEIVE_FLUSH = 2_u32
  WSMAN_FLAG_RECEIVE_RESULT_DATA_BOUNDARY = 4_u32
  WSMAN_PLUGIN_PARAMS_MAX_ENVELOPE_SIZE = 1_u32
  WSMAN_PLUGIN_PARAMS_TIMEOUT = 2_u32
  WSMAN_PLUGIN_PARAMS_REMAINING_RESULT_SIZE = 3_u32
  WSMAN_PLUGIN_PARAMS_LARGEST_RESULT_SIZE = 4_u32
  WSMAN_PLUGIN_PARAMS_GET_REQUESTED_LOCALE = 5_u32
  WSMAN_PLUGIN_PARAMS_GET_REQUESTED_DATA_LOCALE = 6_u32
  WSMAN_PLUGIN_PARAMS_SHAREDHOST = 1_u32
  WSMAN_PLUGIN_PARAMS_RUNAS_USER = 2_u32
  WSMAN_PLUGIN_PARAMS_AUTORESTART = 3_u32
  WSMAN_PLUGIN_PARAMS_HOSTIDLETIMEOUTSECONDS = 4_u32
  WSMAN_PLUGIN_PARAMS_NAME = 5_u32
  WSMAN_PLUGIN_STARTUP_REQUEST_RECEIVED = 0_u32
  WSMAN_PLUGIN_STARTUP_AUTORESTARTED_REBOOT = 1_u32
  WSMAN_PLUGIN_STARTUP_AUTORESTARTED_CRASH = 2_u32
  WSMAN_PLUGIN_SHUTDOWN_SYSTEM = 1_u32
  WSMAN_PLUGIN_SHUTDOWN_SERVICE = 2_u32
  WSMAN_PLUGIN_SHUTDOWN_IISHOST = 3_u32
  WSMAN_PLUGIN_SHUTDOWN_IDLETIMEOUT_ELAPSED = 4_u32
  WSMAN_FLAG_SEND_NO_MORE_DATA = 1_u32
  ERROR_WSMAN_RESOURCE_NOT_FOUND = 2150858752_u32
  ERROR_WSMAN_INVALID_ACTIONURI = 2150858753_u32
  ERROR_WSMAN_INVALID_URI = 2150858754_u32
  ERROR_WSMAN_PROVIDER_FAILURE = 2150858755_u32
  ERROR_WSMAN_BATCH_COMPLETE = 2150858756_u32
  ERROR_WSMAN_CONFIG_CORRUPTED = 2150858757_u32
  ERROR_WSMAN_PULL_IN_PROGRESS = 2150858758_u32
  ERROR_WSMAN_ENUMERATION_CLOSED = 2150858759_u32
  ERROR_WSMAN_SUBSCRIPTION_CLOSED = 2150858760_u32
  ERROR_WSMAN_SUBSCRIPTION_CLOSE_IN_PROGRESS = 2150858761_u32
  ERROR_WSMAN_SUBSCRIPTION_CLIENT_DID_NOT_CALL_WITHIN_HEARTBEAT = 2150858762_u32
  ERROR_WSMAN_SUBSCRIPTION_NO_HEARTBEAT = 2150858763_u32
  ERROR_WSMAN_UNSUPPORTED_TIMEOUT = 2150858764_u32
  ERROR_WSMAN_SOAP_VERSION_MISMATCH = 2150858765_u32
  ERROR_WSMAN_SOAP_DATA_ENCODING_UNKNOWN = 2150858766_u32
  ERROR_WSMAN_INVALID_MESSAGE_INFORMATION_HEADER = 2150858767_u32
  ERROR_WSMAN_SOAP_FAULT_MUST_UNDERSTAND = 2150858768_u32
  ERROR_WSMAN_MESSAGE_INFORMATION_HEADER_REQUIRED = 2150858769_u32
  ERROR_WSMAN_DESTINATION_UNREACHABLE = 2150858770_u32
  ERROR_WSMAN_ACTION_NOT_SUPPORTED = 2150858771_u32
  ERROR_WSMAN_ENDPOINT_UNAVAILABLE = 2150858772_u32
  ERROR_WSMAN_INVALID_REPRESENTATION = 2150858773_u32
  ERROR_WSMAN_ENUMERATE_INVALID_EXPIRATION_TIME = 2150858774_u32
  ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TIME = 2150858775_u32
  ERROR_WSMAN_ENUMERATE_FILTERING_NOT_SUPPORTED = 2150858776_u32
  ERROR_WSMAN_ENUMERATE_FILTER_DIALECT_REQUESTED_UNAVAILABLE = 2150858777_u32
  ERROR_WSMAN_ENUMERATE_CANNOT_PROCESS_FILTER = 2150858778_u32
  ERROR_WSMAN_ENUMERATE_INVALID_ENUMERATION_CONTEXT = 2150858779_u32
  ERROR_WSMAN_ENUMERATE_TIMED_OUT = 2150858780_u32
  ERROR_WSMAN_ENUMERATE_UNABLE_TO_RENEW = 2150858781_u32
  ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_UNAVAILABLE = 2150858782_u32
  ERROR_WSMAN_EVENTING_INVALID_EXPIRATION_TIME = 2150858783_u32
  ERROR_WSMAN_EVENTING_UNSUPPORTED_EXPIRATION_TYPE = 2150858784_u32
  ERROR_WSMAN_EVENTING_FILTERING_NOT_SUPPORTED = 2150858785_u32
  ERROR_WSMAN_EVENTING_FILTERING_REQUESTED_UNAVAILABLE = 2150858786_u32
  ERROR_WSMAN_EVENTING_SOURCE_UNABLE_TO_PROCESS = 2150858787_u32
  ERROR_WSMAN_EVENTING_UNABLE_TO_RENEW = 2150858788_u32
  ERROR_WSMAN_EVENTING_INVALID_MESSAGE = 2150858789_u32
  ERROR_WSMAN_ENVELOPE_TOO_LARGE = 2150858790_u32
  ERROR_WSMAN_INVALID_SOAP_BODY = 2150858791_u32
  ERROR_WSMAN_INVALID_RESUMPTION_CONTEXT = 2150858792_u32
  ERROR_WSMAN_OPERATION_TIMEDOUT = 2150858793_u32
  ERROR_WSMAN_RESUMPTION_NOT_SUPPORTED = 2150858794_u32
  ERROR_WSMAN_RESUMPTION_TYPE_NOT_SUPPORTED = 2150858795_u32
  ERROR_WSMAN_UNSUPPORTED_ENCODING = 2150858796_u32
  ERROR_WSMAN_URI_LIMIT = 2150858797_u32
  ERROR_WSMAN_INVALID_PROPOSED_ID = 2150858798_u32
  ERROR_WSMAN_INVALID_BATCH_PARAMETER = 2150858799_u32
  ERROR_WSMAN_NO_ACK = 2150858800_u32
  ERROR_WSMAN_ACTION_MISMATCH = 2150858801_u32
  ERROR_WSMAN_CONCURRENCY = 2150858802_u32
  ERROR_WSMAN_ALREADY_EXISTS = 2150858803_u32
  ERROR_WSMAN_DELIVERY_REFUSED = 2150858804_u32
  ERROR_WSMAN_ENCODING_LIMIT = 2150858805_u32
  ERROR_WSMAN_FAILED_AUTHENTICATION = 2150858806_u32
  ERROR_WSMAN_INCOMPATIBLE_EPR = 2150858807_u32
  ERROR_WSMAN_INVALID_BOOKMARK = 2150858808_u32
  ERROR_WSMAN_INVALID_OPTIONS = 2150858809_u32
  ERROR_WSMAN_INVALID_PARAMETER = 2150858810_u32
  ERROR_WSMAN_INVALID_RESOURCE_URI = 2150858811_u32
  ERROR_WSMAN_INVALID_SYSTEM = 2150858812_u32
  ERROR_WSMAN_INVALID_SELECTORS = 2150858813_u32
  ERROR_WSMAN_METADATA_REDIRECT = 2150858814_u32
  ERROR_WSMAN_QUOTA_LIMIT = 2150858815_u32
  ERROR_WSMAN_RENAME_FAILURE = 2150858816_u32
  ERROR_WSMAN_SCHEMA_VALIDATION_ERROR = 2150858817_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE = 2150858818_u32
  ERROR_WSMAN_INVALID_XML = 2150858819_u32
  ERROR_WSMAN_INVALID_KEY = 2150858820_u32
  ERROR_WSMAN_DELIVER_IN_PROGRESS = 2150858821_u32
  ERROR_WSMAN_SYSTEM_NOT_FOUND = 2150858822_u32
  ERROR_WSMAN_MAX_ENVELOPE_SIZE = 2150858823_u32
  ERROR_WSMAN_MAX_ENVELOPE_SIZE_EXCEEDED = 2150858824_u32
  ERROR_WSMAN_SERVER_ENVELOPE_LIMIT = 2150858825_u32
  ERROR_WSMAN_SELECTOR_LIMIT = 2150858826_u32
  ERROR_WSMAN_OPTION_LIMIT = 2150858827_u32
  ERROR_WSMAN_CHARACTER_SET = 2150858828_u32
  ERROR_WSMAN_UNREPORTABLE_SUCCESS = 2150858829_u32
  ERROR_WSMAN_WHITESPACE = 2150858830_u32
  ERROR_WSMAN_FILTERING_REQUIRED = 2150858831_u32
  ERROR_WSMAN_BOOKMARK_EXPIRED = 2150858832_u32
  ERROR_WSMAN_OPTIONS_NOT_SUPPORTED = 2150858833_u32
  ERROR_WSMAN_OPTIONS_INVALID_NAME = 2150858834_u32
  ERROR_WSMAN_OPTIONS_INVALID_VALUE = 2150858835_u32
  ERROR_WSMAN_PARAMETER_TYPE_MISMATCH = 2150858836_u32
  ERROR_WSMAN_INVALID_PARAMETER_NAME = 2150858837_u32
  ERROR_WSMAN_INVALID_XML_VALUES = 2150858838_u32
  ERROR_WSMAN_INVALID_XML_MISSING_VALUES = 2150858839_u32
  ERROR_WSMAN_INVALID_XML_NAMESPACE = 2150858840_u32
  ERROR_WSMAN_INVALID_XML_FRAGMENT = 2150858841_u32
  ERROR_WSMAN_INSUFFCIENT_SELECTORS = 2150858842_u32
  ERROR_WSMAN_UNEXPECTED_SELECTORS = 2150858843_u32
  ERROR_WSMAN_SELECTOR_TYPEMISMATCH = 2150858844_u32
  ERROR_WSMAN_INVALID_SELECTOR_VALUE = 2150858845_u32
  ERROR_WSMAN_AMBIGUOUS_SELECTORS = 2150858846_u32
  ERROR_WSMAN_DUPLICATE_SELECTORS = 2150858847_u32
  ERROR_WSMAN_INVALID_TARGET_SELECTORS = 2150858848_u32
  ERROR_WSMAN_INVALID_TARGET_RESOURCEURI = 2150858849_u32
  ERROR_WSMAN_INVALID_TARGET_SYSTEM = 2150858850_u32
  ERROR_WSMAN_TARGET_ALREADY_EXISTS = 2150858851_u32
  ERROR_WSMAN_AUTHORIZATION_MODE_NOT_SUPPORTED = 2150858852_u32
  ERROR_WSMAN_ACK_NOT_SUPPORTED = 2150858853_u32
  ERROR_WSMAN_OPERATION_TIMEOUT_NOT_SUPPORTED = 2150858854_u32
  ERROR_WSMAN_LOCALE_NOT_SUPPORTED = 2150858855_u32
  ERROR_WSMAN_EXPIRATION_TIME_NOT_SUPPORTED = 2150858856_u32
  ERROR_WSMAN_DELIVERY_RETRIES_NOT_SUPPORTED = 2150858857_u32
  ERROR_WSMAN_HEARTBEATS_NOT_SUPPORTED = 2150858858_u32
  ERROR_WSMAN_BOOKMARKS_NOT_SUPPORTED = 2150858859_u32
  ERROR_WSMAN_MAXITEMS_NOT_SUPPORTED = 2150858860_u32
  ERROR_WSMAN_MAXTIME_NOT_SUPPORTED = 2150858861_u32
  ERROR_WSMAN_MAXENVELOPE_SIZE_NOT_SUPPORTED = 2150858862_u32
  ERROR_WSMAN_MAXENVELOPE_POLICY_NOT_SUPPORTED = 2150858863_u32
  ERROR_WSMAN_FILTERING_REQUIRED_NOT_SUPPORTED = 2150858864_u32
  ERROR_WSMAN_INSECURE_ADDRESS_NOT_SUPPORTED = 2150858865_u32
  ERROR_WSMAN_FORMAT_MISMATCH_NOT_SUPPORTED = 2150858866_u32
  ERROR_WSMAN_FORMAT_SECURITY_TOKEN_NOT_SUPPORTED = 2150858867_u32
  ERROR_WSMAN_BAD_METHOD = 2150858868_u32
  ERROR_WSMAN_UNSUPPORTED_MEDIA = 2150858869_u32
  ERROR_WSMAN_UNSUPPORTED_ADDRESSING_MODE = 2150858870_u32
  ERROR_WSMAN_FRAGMENT_TRANSFER_NOT_SUPPORTED = 2150858871_u32
  ERROR_WSMAN_ENUMERATION_INITIALIZING = 2150858872_u32
  ERROR_WSMAN_CONNECTOR_GET = 2150858873_u32
  ERROR_WSMAN_URI_QUERY_STRING_SYNTAX_ERROR = 2150858874_u32
  ERROR_WSMAN_INEXISTENT_MAC_ADDRESS = 2150858875_u32
  ERROR_WSMAN_NO_UNICAST_ADDRESSES = 2150858876_u32
  ERROR_WSMAN_NO_DHCP_ADDRESSES = 2150858877_u32
  ERROR_WSMAN_MIN_ENVELOPE_SIZE = 2150858878_u32
  ERROR_WSMAN_EPR_NESTING_EXCEEDED = 2150858879_u32
  ERROR_WSMAN_REQUEST_INIT_ERROR = 2150858880_u32
  ERROR_WSMAN_INVALID_TIMEOUT_HEADER = 2150858881_u32
  ERROR_WSMAN_CERT_NOT_FOUND = 2150858882_u32
  ERROR_WSMAN_PLUGIN_FAILED = 2150858883_u32
  ERROR_WSMAN_ENUMERATION_INVALID = 2150858884_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_MUTUAL = 2150858885_u32
  ERROR_WSMAN_ENUMERATION_MODE_UNSUPPORTED = 2150858886_u32
  ERROR_WSMAN_MUSTUNDERSTAND_ON_LOCALE_UNSUPPORTED = 2150858887_u32
  ERROR_WSMAN_POLICY_CORRUPTED = 2150858888_u32
  ERROR_WSMAN_LISTENER_ADDRESS_INVALID = 2150858889_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_GPO_CONTROLLED_SETTING = 2150858890_u32
  ERROR_WSMAN_EVENTING_CONCURRENT_CLIENT_RECEIVE = 2150858891_u32
  ERROR_WSMAN_EVENTING_FAST_SENDER = 2150858892_u32
  ERROR_WSMAN_EVENTING_INSECURE_PUSHSUBSCRIPTION_CONNECTION = 2150858893_u32
  ERROR_WSMAN_EVENTING_INVALID_EVENTSOURCE = 2150858894_u32
  ERROR_WSMAN_EVENTING_NOMATCHING_LISTENER = 2150858895_u32
  ERROR_WSMAN_FRAGMENT_DIALECT_REQUESTED_UNAVAILABLE = 2150858896_u32
  ERROR_WSMAN_MISSING_FRAGMENT_PATH = 2150858897_u32
  ERROR_WSMAN_INVALID_FRAGMENT_DIALECT = 2150858898_u32
  ERROR_WSMAN_INVALID_FRAGMENT_PATH = 2150858899_u32
  ERROR_WSMAN_EVENTING_INCOMPATIBLE_BATCHPARAMS_AND_DELIVERYMODE = 2150858900_u32
  ERROR_WSMAN_EVENTING_LOOPBACK_TESTFAILED = 2150858901_u32
  ERROR_WSMAN_EVENTING_INVALID_ENDTO_ADDRESSS = 2150858902_u32
  ERROR_WSMAN_EVENTING_INVALID_INCOMING_EVENT_PACKET_HEADER = 2150858903_u32
  ERROR_WSMAN_SESSION_ALREADY_CLOSED = 2150858904_u32
  ERROR_WSMAN_SUBSCRIPTION_LISTENER_NOLONGERVALID = 2150858905_u32
  ERROR_WSMAN_PROVIDER_LOAD_FAILED = 2150858906_u32
  ERROR_WSMAN_EVENTING_SUBSCRIPTIONCLOSED_BYREMOTESERVICE = 2150858907_u32
  ERROR_WSMAN_EVENTING_DELIVERYFAILED_FROMSOURCE = 2150858908_u32
  ERROR_WSMAN_SECURITY_UNMAPPED = 2150858909_u32
  ERROR_WSMAN_EVENTING_SUBSCRIPTION_CANCELLED_BYSOURCE = 2150858910_u32
  ERROR_WSMAN_INVALID_HOSTNAME_PATTERN = 2150858911_u32
  ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO = 2150858912_u32
  ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO_ADDRESSS = 2150858913_u32
  ERROR_WSMAN_EVENTING_INVALID_NOTIFYTO_ADDRESSS = 2150858914_u32
  ERROR_WSMAN_EVENTING_INVALID_LOCALE_IN_DELIVERY = 2150858915_u32
  ERROR_WSMAN_EVENTING_INVALID_HEARTBEAT = 2150858916_u32
  ERROR_WSMAN_MACHINE_OPTION_REQUIRED = 2150858917_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE_OPTIONS = 2150858918_u32
  ERROR_WSMAN_BATCHSIZE_TOO_SMALL = 2150858919_u32
  ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_INVALID = 2150858920_u32
  ERROR_WSMAN_PROVSYS_NOT_SUPPORTED = 2150858921_u32
  ERROR_WSMAN_PUSH_SUBSCRIPTION_CONFIG_INVALID = 2150858922_u32
  ERROR_WSMAN_CREDS_PASSED_WITH_NO_AUTH_FLAG = 2150858923_u32
  ERROR_WSMAN_CLIENT_INVALID_FLAG = 2150858924_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_AUTH_FLAGS = 2150858925_u32
  ERROR_WSMAN_CLIENT_SPN_WRONG_AUTH = 2150858926_u32
  ERROR_WSMAN_CLIENT_CERT_UNNEEDED_CREDS = 2150858927_u32
  ERROR_WSMAN_CLIENT_USERNAME_PASSWORD_NEEDED = 2150858928_u32
  ERROR_WSMAN_CLIENT_CERT_UNNEEDED_USERNAME = 2150858929_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_NEEDED = 2150858930_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FLAG_NEEDED = 2150858931_u32
  ERROR_WSMAN_CLIENT_CERT_NEEDED = 2150858932_u32
  ERROR_WSMAN_CLIENT_CERT_UNKNOWN_TYPE = 2150858933_u32
  ERROR_WSMAN_CLIENT_CERT_UNKNOWN_LOCATION = 2150858934_u32
  ERROR_WSMAN_CLIENT_INVALID_CERT = 2150858935_u32
  ERROR_WSMAN_CLIENT_LOCAL_INVALID_CREDS = 2150858936_u32
  ERROR_WSMAN_CLIENT_LOCAL_INVALID_CONNECTION_OPTIONS = 2150858937_u32
  ERROR_WSMAN_CLIENT_CREATESESSION_NULL_PARAM = 2150858938_u32
  ERROR_WSMAN_CLIENT_ENUMERATE_NULL_PARAM = 2150858939_u32
  ERROR_WSMAN_CLIENT_SUBSCRIBE_NULL_PARAM = 2150858940_u32
  ERROR_WSMAN_CLIENT_NULL_RESULT_PARAM = 2150858941_u32
  ERROR_WSMAN_CLIENT_NO_HANDLE = 2150858942_u32
  ERROR_WSMAN_CLIENT_BLANK_URI = 2150858943_u32
  ERROR_WSMAN_CLIENT_INVALID_RESOURCE_LOCATOR = 2150858944_u32
  ERROR_WSMAN_CLIENT_BLANK_INPUT_XML = 2150858945_u32
  ERROR_WSMAN_CLIENT_BATCH_ITEMS_TOO_SMALL = 2150858946_u32
  ERROR_WSMAN_CLIENT_MAX_CHARS_TOO_SMALL = 2150858947_u32
  ERROR_WSMAN_CLIENT_BLANK_ACTION_URI = 2150858948_u32
  ERROR_WSMAN_CLIENT_ZERO_HEARTBEAT = 2150858949_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_DELIVERY_MODES = 2150858950_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_ENVELOPE_POLICIES = 2150858951_u32
  ERROR_WSMAN_CLIENT_UNKNOWN_EXPIRATION_TYPE = 2150858952_u32
  ERROR_WSMAN_CLIENT_MISSING_EXPIRATION = 2150858953_u32
  ERROR_WSMAN_CLIENT_PULL_INVALID_FLAGS = 2150858954_u32
  ERROR_WSMAN_CLIENT_PUSH_UNSUPPORTED_TRANSPORT = 2150858955_u32
  ERROR_WSMAN_CLIENT_PUSH_HOST_TOO_LONG = 2150858956_u32
  ERROR_WSMAN_CLIENT_COMPRESSION_INVALID_OPTION = 2150858957_u32
  ERROR_WSMAN_CLIENT_DELIVERENDSUBSCRIPTION_NULL_PARAM = 2150858958_u32
  ERROR_WSMAN_CLIENT_DELIVEREVENTS_NULL_PARAM = 2150858959_u32
  ERROR_WSMAN_CLIENT_GETBOOKMARK_NULL_PARAM = 2150858960_u32
  ERROR_WSMAN_CLIENT_DECODEOBJECT_NULL_PARAM = 2150858961_u32
  ERROR_WSMAN_CLIENT_ENCODEOBJECT_NULL_PARAM = 2150858962_u32
  ERROR_WSMAN_CLIENT_ENUMERATORADDOBJECT_NULL_PARAM = 2150858963_u32
  ERROR_WSMAN_CLIENT_ENUMERATORNEXTOBJECT_NULL_PARAM = 2150858964_u32
  ERROR_WSMAN_CLIENT_CONSTRUCTERROR_NULL_PARAM = 2150858965_u32
  ERROR_WSMAN_SERVER_NONPULLSUBSCRIBE_NULL_PARAM = 2150858966_u32
  ERROR_WSMAN_CLIENT_UNENCRYPTED_HTTP_ONLY = 2150858967_u32
  ERROR_WSMAN_CANNOT_USE_CERTIFICATES_FOR_HTTP = 2150858968_u32
  ERROR_WSMAN_CONNECTIONSTR_INVALID = 2150858969_u32
  ERROR_WSMAN_TRANSPORT_NOT_SUPPORTED = 2150858970_u32
  ERROR_WSMAN_PORT_INVALID = 2150858971_u32
  ERROR_WSMAN_CONFIG_PORT_INVALID = 2150858972_u32
  ERROR_WSMAN_SENDHEARBEAT_EMPTY_ENUMERATOR = 2150858973_u32
  ERROR_WSMAN_CLIENT_UNENCRYPTED_DISABLED = 2150858974_u32
  ERROR_WSMAN_CLIENT_BASIC_AUTHENTICATION_DISABLED = 2150858975_u32
  ERROR_WSMAN_CLIENT_DIGEST_AUTHENTICATION_DISABLED = 2150858976_u32
  ERROR_WSMAN_CLIENT_NEGOTIATE_AUTHENTICATION_DISABLED = 2150858977_u32
  ERROR_WSMAN_CLIENT_KERBEROS_AUTHENTICATION_DISABLED = 2150858978_u32
  ERROR_WSMAN_CLIENT_CERTIFICATES_AUTHENTICATION_DISABLED = 2150858979_u32
  ERROR_WSMAN_SERVER_NOT_TRUSTED = 2150858980_u32
  ERROR_WSMAN_EXPLICIT_CREDENTIALS_REQUIRED = 2150858981_u32
  ERROR_WSMAN_CERT_THUMBPRINT_NOT_BLANK = 2150858982_u32
  ERROR_WSMAN_CERT_THUMBPRINT_BLANK = 2150858983_u32
  ERROR_WSMAN_CONFIG_CANNOT_SHARE_SSL_CONFIG = 2150858984_u32
  ERROR_WSMAN_CONFIG_CERT_CN_DOES_NOT_MATCH_HOSTNAME = 2150858985_u32
  ERROR_WSMAN_CONFIG_HOSTNAME_CHANGE_WITHOUT_CERT = 2150858986_u32
  ERROR_WSMAN_CONFIG_THUMBPRINT_SHOULD_BE_EMPTY = 2150858987_u32
  ERROR_WSMAN_INVALID_IPFILTER = 2150858988_u32
  ERROR_WSMAN_CANNOT_CHANGE_KEYS = 2150858989_u32
  ERROR_WSMAN_CERT_INVALID_USAGE = 2150858990_u32
  ERROR_WSMAN_RESPONSE_NO_RESULTS = 2150858991_u32
  ERROR_WSMAN_CREATE_RESPONSE_NO_EPR = 2150858992_u32
  ERROR_WSMAN_RESPONSE_INVALID_ENUMERATION_CONTEXT = 2150858993_u32
  ERROR_WSMAN_RESPONSE_NO_XML_FRAGMENT_WRAPPER = 2150858994_u32
  ERROR_WSMAN_RESPONSE_INVALID_MESSAGE_INFORMATION_HEADER = 2150858995_u32
  ERROR_WSMAN_RESPONSE_NO_SOAP_HEADER_BODY = 2150858996_u32
  ERROR_WSMAN_HTTP_NO_RESPONSE_DATA = 2150858997_u32
  ERROR_WSMAN_RESPONSE_INVALID_SOAP_FAULT = 2150858998_u32
  ERROR_WSMAN_HTTP_INVALID_CONTENT_TYPE_IN_RESPONSE_DATA = 2150858999_u32
  ERROR_WSMAN_HTTP_CONTENT_TYPE_MISSMATCH_RESPONSE_DATA = 2150859000_u32
  ERROR_WSMAN_CANNOT_DECRYPT = 2150859001_u32
  ERROR_WSMAN_INVALID_URI_WMI_SINGLETON = 2150859002_u32
  ERROR_WSMAN_INVALID_URI_WMI_ENUM_WQL = 2150859003_u32
  ERROR_WSMAN_NO_IDENTIFY_FOR_LOCAL_SESSION = 2150859004_u32
  ERROR_WSMAN_NO_PUSH_SUBSCRIPTION_FOR_LOCAL_SESSION = 2150859005_u32
  ERROR_WSMAN_INVALID_SUBSCRIPTION_MANAGER = 2150859006_u32
  ERROR_WSMAN_NON_PULL_SUBSCRIPTION_NOT_SUPPORTED = 2150859007_u32
  ERROR_WSMAN_WMI_MAX_NESTED = 2150859008_u32
  ERROR_WSMAN_REMOTE_CIMPATH_NOT_SUPPORTED = 2150859009_u32
  ERROR_WSMAN_WMI_PROVIDER_NOT_CAPABLE = 2150859010_u32
  ERROR_WSMAN_WMI_INVALID_VALUE = 2150859011_u32
  ERROR_WSMAN_WMI_SVC_ACCESS_DENIED = 2150859012_u32
  ERROR_WSMAN_WMI_PROVIDER_ACCESS_DENIED = 2150859013_u32
  ERROR_WSMAN_WMI_CANNOT_CONNECT_ACCESS_DENIED = 2150859014_u32
  ERROR_WSMAN_INVALID_FILTER_XML = 2150859015_u32
  ERROR_WSMAN_ENUMERATE_WMI_INVALID_KEY = 2150859016_u32
  ERROR_WSMAN_INVALID_FRAGMENT_PATH_BLANK = 2150859017_u32
  ERROR_WSMAN_INVALID_CHARACTERS_IN_RESPONSE = 2150859018_u32
  ERROR_WSMAN_KERBEROS_IPADDRESS = 2150859019_u32
  ERROR_WSMAN_CLIENT_WORKGROUP_NO_KERBEROS = 2150859020_u32
  ERROR_WSMAN_INVALID_BATCH_SETTINGS_PARAMETER = 2150859021_u32
  ERROR_WSMAN_SERVER_DESTINATION_LOCALHOST = 2150859022_u32
  ERROR_WSMAN_UNKNOWN_HTTP_STATUS_RETURNED = 2150859023_u32
  ERROR_WSMAN_UNSUPPORTED_HTTP_STATUS_REDIRECT = 2150859024_u32
  ERROR_WSMAN_HTTP_REQUEST_TOO_LARGE_STATUS = 2150859025_u32
  ERROR_WSMAN_HTTP_SERVICE_UNAVAILABLE_STATUS = 2150859026_u32
  ERROR_WSMAN_HTTP_NOT_FOUND_STATUS = 2150859027_u32
  ERROR_WSMAN_EVENTING_MISSING_LOCALE_IN_DELIVERY = 2150859028_u32
  ERROR_WSMAN_QUICK_CONFIG_FAILED_CERT_REQUIRED = 2150859029_u32
  ERROR_WSMAN_QUICK_CONFIG_FIREWALL_EXCEPTIONS_DISALLOWED = 2150859030_u32
  ERROR_WSMAN_QUICK_CONFIG_LOCAL_POLICY_CHANGE_DISALLOWED = 2150859031_u32
  ERROR_WSMAN_INVALID_SELECTOR_NAME = 2150859032_u32
  ERROR_WSMAN_ENCODING_TYPE = 2150859033_u32
  ERROR_WSMAN_ENDPOINT_UNAVAILABLE_INVALID_VALUE = 2150859034_u32
  ERROR_WSMAN_INVALID_HEADER = 2150859035_u32
  ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TYPE = 2150859036_u32
  ERROR_WSMAN_MAX_ELEMENTS_NOT_SUPPORTED = 2150859037_u32
  ERROR_WSMAN_WMI_PROVIDER_INVALID_PARAMETER = 2150859038_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_ENUM_MODE_FLAGS = 2150859039_u32
  ERROR_WINRS_CLIENT_INVALID_FLAG = 2150859040_u32
  ERROR_WINRS_CLIENT_NULL_PARAM = 2150859041_u32
  ERROR_WSMAN_CANNOT_PROCESS_FILTER = 2150859042_u32
  ERROR_WSMAN_CLIENT_ENUMERATORADDEVENT_NULL_PARAM = 2150859043_u32
  ERROR_WSMAN_ADDOBJECT_MISSING_OBJECT = 2150859044_u32
  ERROR_WSMAN_ADDOBJECT_MISSING_EPR = 2150859045_u32
  ERROR_WSMAN_NETWORK_TIMEDOUT = 2150859046_u32
  ERROR_WINRS_RECEIVE_IN_PROGRESS = 2150859047_u32
  ERROR_WINRS_RECEIVE_NO_RESPONSE_DATA = 2150859048_u32
  ERROR_WINRS_CLIENT_CREATESHELL_NULL_PARAM = 2150859049_u32
  ERROR_WINRS_CLIENT_CLOSESHELL_NULL_PARAM = 2150859050_u32
  ERROR_WINRS_CLIENT_FREECREATESHELLRESULT_NULL_PARAM = 2150859051_u32
  ERROR_WINRS_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859052_u32
  ERROR_WINRS_CLIENT_FREERUNCOMMANDRESULT_NULL_PARAM = 2150859053_u32
  ERROR_WINRS_CLIENT_SIGNAL_NULL_PARAM = 2150859054_u32
  ERROR_WINRS_CLIENT_RECEIVE_NULL_PARAM = 2150859055_u32
  ERROR_WINRS_CLIENT_FREEPULLRESULT_NULL_PARAM = 2150859056_u32
  ERROR_WINRS_CLIENT_PULL_NULL_PARAM = 2150859057_u32
  ERROR_WINRS_CLIENT_CLOSERECEIVEHANDLE_NULL_PARAM = 2150859058_u32
  ERROR_WINRS_CLIENT_SEND_NULL_PARAM = 2150859059_u32
  ERROR_WINRS_CLIENT_PUSH_NULL_PARAM = 2150859060_u32
  ERROR_WINRS_CLIENT_CLOSESENDHANDLE_NULL_PARAM = 2150859061_u32
  ERROR_WINRS_CLIENT_GET_NULL_PARAM = 2150859062_u32
  ERROR_WSMAN_POLYMORPHISM_MODE_UNSUPPORTED = 2150859063_u32
  ERROR_WSMAN_REQUEST_NOT_SUPPORTED_AT_SERVICE = 2150859064_u32
  ERROR_WSMAN_URI_NON_DMTF_CLASS = 2150859065_u32
  ERROR_WSMAN_URI_WRONG_DMTF_VERSION = 2150859066_u32
  ERROR_WSMAN_DIFFERENT_CIM_SELECTOR = 2150859067_u32
  ERROR_WSMAN_PUSHSUBSCRIPTION_INVALIDUSERACCOUNT = 2150859068_u32
  ERROR_WSMAN_EVENTING_NONDOMAINJOINED_PUBLISHER = 2150859069_u32
  ERROR_WSMAN_EVENTING_NONDOMAINJOINED_COLLECTOR = 2150859070_u32
  ERROR_WSMAN_CONFIG_READONLY_PROPERTY = 2150859071_u32
  ERROR_WINRS_CODE_PAGE_NOT_SUPPORTED = 2150859072_u32
  ERROR_WSMAN_CLIENT_DISABLE_LOOPBACK_WITH_EXPLICIT_CREDENTIALS = 2150859073_u32
  ERROR_WSMAN_CLIENT_INVALID_DISABLE_LOOPBACK = 2150859074_u32
  ERROR_WSMAN_CLIENT_ENUM_RECEIVED_TOO_MANY_ITEMS = 2150859075_u32
  ERROR_WSMAN_MULTIPLE_CREDENTIALS = 2150859076_u32
  ERROR_WSMAN_AUTHENTICATION_INVALID_FLAG = 2150859077_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_DEFAULT_AUTHENTICATION = 2150859078_u32
  ERROR_WSMAN_CLIENT_USERNAME_AND_PASSWORD_NEEDED = 2150859079_u32
  ERROR_WSMAN_CLIENT_INVALID_CERT_DNS_OR_UPN = 2150859080_u32
  ERROR_WSMAN_CREATESHELL_NULL_ENVIRONMENT_VARIABLE_NAME = 2150859081_u32
  ERROR_WSMAN_SHELL_ALREADY_CLOSED = 2150859082_u32
  ERROR_WSMAN_CREATESHELL_NULL_STREAMID = 2150859083_u32
  ERROR_WSMAN_SHELL_INVALID_SHELL_HANDLE = 2150859084_u32
  ERROR_WSMAN_SHELL_INVALID_COMMAND_HANDLE = 2150859085_u32
  ERROR_WSMAN_RUNSHELLCOMMAND_NULL_ARGUMENT = 2150859086_u32
  ERROR_WSMAN_COMMAND_ALREADY_CLOSED = 2150859087_u32
  ERROR_WSMAN_SENDSHELLINPUT_INVALID_STREAMID_INDEX = 2150859088_u32
  ERROR_WSMAN_SHELL_SYNCHRONOUS_NOT_SUPPORTED = 2150859089_u32
  ERROR_WSMAN_NO_CERTMAPPING_OPERATION_FOR_LOCAL_SESSION = 2150859090_u32
  ERROR_WSMAN_CERTMAPPING_CONFIGLIMIT_EXCEEDED = 2150859091_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDUSERCREDENTIALS = 2150859092_u32
  ERROR_WSMAN_CERT_INVALID_USAGE_CLIENT = 2150859093_u32
  ERROR_WSMAN_CERT_MISSING_AUTH_FLAG = 2150859094_u32
  ERROR_WSMAN_CERT_MULTIPLE_CREDENTIALS_FLAG = 2150859095_u32
  ERROR_WSMAN_CONFIG_SHELL_URI_INVALID = 2150859096_u32
  ERROR_WSMAN_CONFIG_SHELL_URI_CMDSHELLURI_NOTPERMITTED = 2150859097_u32
  ERROR_WSMAN_CONFIG_SHELLURI_INVALID_PROCESSPATH = 2150859098_u32
  ERROR_WINRS_SHELL_URI_INVALID = 2150859099_u32
  ERROR_WSMAN_INVALID_SECURITY_DESCRIPTOR = 2150859100_u32
  ERROR_WSMAN_POLICY_TOO_COMPLEX = 2150859101_u32
  ERROR_WSMAN_POLICY_CANNOT_COMPLY = 2150859102_u32
  ERROR_WSMAN_INVALID_CONNECTIONRETRY = 2150859103_u32
  ERROR_WSMAN_URISECURITY_INVALIDURIKEY = 2150859104_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDSUBJECTKEY = 2150859105_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDISSUERKEY = 2150859106_u32
  ERROR_WSMAN_INVALID_PUBLISHERS_TYPE = 2150859107_u32
  ERROR_WSMAN_CLIENT_INVALID_DELIVERY_RETRY = 2150859108_u32
  ERROR_WSMAN_CLIENT_NULL_PUBLISHERS = 2150859109_u32
  ERROR_WSMAN_CLIENT_NULL_ISSUERS = 2150859110_u32
  ERROR_WSMAN_CLIENT_NO_SOURCES = 2150859111_u32
  ERROR_WSMAN_INVALID_SUBSCRIBE_OBJECT = 2150859112_u32
  ERROR_WSMAN_PUBLIC_FIREWALL_PROFILE_ACTIVE = 2150859113_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDTOOLONG = 2150859114_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDBLANK = 2150859115_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDUSERTUPLE = 2150859116_u32
  ERROR_WSMAN_INVALID_PROVIDER_RESPONSE = 2150859117_u32
  ERROR_WSMAN_SHELL_NOT_INITIALIZED = 2150859118_u32
  ERROR_WSMAN_CONFIG_SHELLURI_INVALID_OPERATION_ON_KEY = 2150859119_u32
  ERROR_WSMAN_HTTP_STATUS_SERVER_ERROR = 2150859120_u32
  ERROR_WSMAN_HTTP_STATUS_BAD_REQUEST = 2150859121_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_CERTMAPPING_KEYS = 2150859122_u32
  ERROR_WSMAN_HTML_ERROR = 2150859123_u32
  ERROR_WSMAN_CLIENT_INITIALIZE_NULL_PARAM = 2150859124_u32
  ERROR_WSMAN_CLIENT_INVALID_INIT_APPLICATION_FLAG = 2150859125_u32
  ERROR_WSMAN_CLIENT_INVALID_DEINIT_APPLICATION_FLAG = 2150859126_u32
  ERROR_WSMAN_CLIENT_SETSESSIONOPTION_NULL_PARAM = 2150859127_u32
  ERROR_WSMAN_CLIENT_SETSESSIONOPTION_INVALID_PARAM = 2150859128_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_INVALID_PARAM = 2150859129_u32
  ERROR_WSMAN_CLIENT_CREATESHELL_NULL_PARAM = 2150859130_u32
  ERROR_WSMAN_CLIENT_INVALID_CREATE_SHELL_FLAG = 2150859131_u32
  ERROR_WSMAN_CLIENT_INVALID_CLOSE_SHELL_FLAG = 2150859132_u32
  ERROR_WSMAN_CLIENT_INVALID_CLOSE_COMMAND_FLAG = 2150859133_u32
  ERROR_WSMAN_CLIENT_CLOSESHELL_NULL_PARAM = 2150859134_u32
  ERROR_WSMAN_CLIENT_CLOSECOMMAND_NULL_PARAM = 2150859135_u32
  ERROR_WSMAN_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859136_u32
  ERROR_WSMAN_CLIENT_INVALID_RUNCOMMAND_FLAG = 2150859137_u32
  ERROR_WSMAN_CLIENT_RUNCOMMAND_NOTCOMPLETED = 2150859138_u32
  ERROR_WSMAN_NO_COMMAND_RESPONSE = 2150859139_u32
  ERROR_WSMAN_INVALID_OPTIONSET = 2150859140_u32
  ERROR_WSMAN_NO_COMMANDID = 2150859141_u32
  ERROR_WSMAN_CLIENT_SIGNAL_NULL_PARAM = 2150859142_u32
  ERROR_WSMAN_CLIENT_INVALID_SIGNAL_SHELL_FLAG = 2150859143_u32
  ERROR_WSMAN_CLIENT_SEND_NULL_PARAM = 2150859144_u32
  ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_FLAG = 2150859145_u32
  ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_PARAMETER = 2150859146_u32
  ERROR_WSMAN_SHELL_INVALID_INPUT_STREAM = 2150859147_u32
  ERROR_WSMAN_CLIENT_RECEIVE_NULL_PARAM = 2150859148_u32
  ERROR_WSMAN_SHELL_INVALID_DESIRED_STREAMS = 2150859149_u32
  ERROR_WSMAN_CLIENT_INVALID_RECEIVE_SHELL_FLAG = 2150859150_u32
  ERROR_WSMAN_NO_RECEIVE_RESPONSE = 2150859151_u32
  ERROR_WSMAN_PLUGIN_CONFIGURATION_CORRUPTED = 2150859152_u32
  ERROR_WSMAN_INVALID_FILEPATH = 2150859153_u32
  ERROR_WSMAN_FILE_NOT_PRESENT = 2150859154_u32
  ERROR_WSMAN_IISCONFIGURATION_READ_FAILED = 2150859155_u32
  ERROR_WSMAN_CLIENT_INVALID_LOCALE = 2150859156_u32
  ERROR_WSMAN_CLIENT_INVALID_UI_LANGUAGE = 2150859157_u32
  ERROR_WSMAN_CLIENT_GETERRORMESSAGE_NULL_PARAM = 2150859158_u32
  ERROR_WSMAN_CLIENT_INVALID_LANGUAGE_CODE = 2150859159_u32
  ERROR_WSMAN_CLIENT_INVALID_GETERRORMESSAGE_FLAG = 2150859160_u32
  ERROR_WSMAN_REDIRECT_REQUESTED = 2150859161_u32
  ERROR_WSMAN_PROXY_AUTHENTICATION_INVALID_FLAG = 2150859162_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_PROXY_AUTHENTICATION = 2150859163_u32
  ERROR_WSMAN_PROXY_ACCESS_TYPE = 2150859164_u32
  ERROR_WSMAN_INVALID_OPTION_NO_PROXY_SERVER = 2150859165_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_NULL_PARAM = 2150859166_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_INVALID_PARAM = 2150859167_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_STRING_INVALID_PARAM = 2150859168_u32
  ERROR_WSMAN_CREDSSP_USERNAME_PASSWORD_NEEDED = 2150859169_u32
  ERROR_WSMAN_CLIENT_CREDSSP_AUTHENTICATION_DISABLED = 2150859170_u32
  ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS = 2150859171_u32
  ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS_NTLMONLY = 2150859172_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLS = 2150859173_u32
  ERROR_WSMAN_QUOTA_MAX_OPERATIONS = 2150859174_u32
  ERROR_WSMAN_QUOTA_USER = 2150859175_u32
  ERROR_WSMAN_QUOTA_SYSTEM = 2150859176_u32
  ERROR_WSMAN_DIFFERENT_AUTHZ_TOKEN = 2150859177_u32
  ERROR_WSMAN_REDIRECT_LOCATION_NOT_AVAILABLE = 2150859178_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLUSERS = 2150859179_u32
  ERROR_WSMAN_REMOTESHELLS_NOT_ALLOWED = 2150859180_u32
  ERROR_WSMAN_PULL_PARAMS_NOT_SAME_AS_ENUM = 2150859181_u32
  ERROR_WSMAN_DEPRECATED_CONFIG_SETTING = 2150859182_u32
  ERROR_WSMAN_URI_SECURITY_URI = 2150859183_u32
  ERROR_WSMAN_CANNOT_USE_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS_FOR_HTTP = 2150859184_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_HTTP = 2150859185_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_KERBEROS = 2150859186_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_CREDSSP = 2150859187_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_PROXY_AUTH_FLAGS = 2150859188_u32
  ERROR_WSMAN_INVALID_REDIRECT_ERROR = 2150859189_u32
  ERROR_REDIRECT_LOCATION_TOO_LONG = 2150859190_u32
  ERROR_REDIRECT_LOCATION_INVALID = 2150859191_u32
  ERROR_SERVICE_CBT_HARDENING_INVALID = 2150859192_u32
  ERROR_WSMAN_NAME_NOT_RESOLVED = 2150859193_u32
  ERROR_WSMAN_SSL_CONNECTION_ABORTED = 2150859194_u32
  ERROR_WSMAN_DEFAULTAUTH_IPADDRESS = 2150859195_u32
  ERROR_WSMAN_CUSTOMREMOTESHELL_DEPRECATED = 2150859196_u32
  ERROR_WSMAN_FEATURE_DEPRECATED = 2150859197_u32
  ERROR_WSMAN_INVALID_USESSL_PARAM = 2150859198_u32
  ERROR_WSMAN_INVALID_CONFIGSDDL_URL = 2150859199_u32
  ERROR_WSMAN_ENUMERATE_SHELLCOMAMNDS_FILTER_EXPECTED = 2150859200_u32
  ERROR_WSMAN_ENUMERATE_SHELLCOMMANDS_EPRS_NOTSUPPORTED = 2150859201_u32
  ERROR_WSMAN_CLIENT_CREATESHELL_NAME_INVALID = 2150859202_u32
  ERROR_WSMAN_RUNAS_INVALIDUSERCREDENTIALS = 2150859203_u32
  ERROR_WINRS_SHELL_DISCONNECTED = 2150859204_u32
  ERROR_WINRS_SHELL_DISCONNECT_NOT_SUPPORTED = 2150859205_u32
  ERROR_WINRS_SHELL_CLIENTSESSIONID_MISMATCH = 2150859206_u32
  ERROR_WSMAN_CLIENT_DISCONNECTSHELL_NULL_PARAM = 2150859207_u32
  ERROR_WSMAN_CLIENT_RECONNECTSHELL_NULL_PARAM = 2150859208_u32
  ERROR_WSMAN_CLIENT_CONNECTSHELL_NULL_PARAM = 2150859209_u32
  ERROR_WSMAN_CLIENT_CONNECTCOMMAND_NULL_PARAM = 2150859210_u32
  ERROR_WINRS_CONNECT_RESPONSE_BAD_BODY = 2150859211_u32
  ERROR_WSMAN_COMMAND_TERMINATED = 2150859212_u32
  ERROR_WINRS_SHELL_CONNECTED_TO_DIFFERENT_CLIENT = 2150859213_u32
  ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_GRACEFUL = 2150859214_u32
  ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_VALID = 2150859215_u32
  ERROR_WINRS_SHELL_RECONNECT_OPERATION_NOT_VALID = 2150859216_u32
  ERROR_WSMAN_CONFIG_GROUP_POLICY_CHANGE_NOTIFICATION_SUBSCRIPTION_FAILED = 2150859217_u32
  ERROR_WSMAN_CLIENT_RECONNECTSHELLCOMMAND_NULL_PARAM = 2150859218_u32
  ERROR_WINRS_SHELLCOMMAND_RECONNECT_OPERATION_NOT_VALID = 2150859219_u32
  ERROR_WINRS_SHELLCOMMAND_CLIENTID_NOT_VALID = 2150859220_u32
  ERROR_WINRS_SHELL_CLIENTID_NOT_VALID = 2150859221_u32
  ERROR_WINRS_SHELLCOMMAND_CLIENTID_RESOURCE_CONFLICT = 2150859222_u32
  ERROR_WINRS_SHELL_CLIENTID_RESOURCE_CONFLICT = 2150859223_u32
  ERROR_WINRS_SHELLCOMMAND_DISCONNECT_OPERATION_NOT_VALID = 2150859224_u32
  ERROR_WSMAN_SUBSCRIBE_WMI_INVALID_KEY = 2150859225_u32
  ERROR_WSMAN_CLIENT_INVALID_DISCONNECT_SHELL_FLAG = 2150859226_u32
  ERROR_WSMAN_CLIENT_INVALID_SHELL_COMMAND_PAIR = 2150859227_u32
  ERROR_WSMAN_SEMANTICCALLBACK_TIMEDOUT = 2150859228_u32
  ERROR_WSMAN_SERVICE_REMOTE_ACCESS_DISABLED = 2150859229_u32
  ERROR_WSMAN_SERVICE_STREAM_DISCONNECTED = 2150859230_u32
  ERROR_WSMAN_CREATESHELL_RUNAS_FAILED = 2150859231_u32
  ERROR_WSMAN_INVALID_XML_RUNAS_DISABLED = 2150859232_u32
  ERROR_WSMAN_WRONG_METADATA = 2150859233_u32
  ERROR_WSMAN_UNSUPPORTED_TYPE = 2150859234_u32
  ERROR_WSMAN_REMOTE_CONNECTION_NOT_ALLOWED = 2150859235_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLS_PPQ = 2150859236_u32
  ERROR_WSMAN_QUOTA_MAX_USERS_PPQ = 2150859237_u32
  ERROR_WSMAN_QUOTA_MAX_PLUGINSHELLS_PPQ = 2150859238_u32
  ERROR_WSMAN_QUOTA_MAX_PLUGINOPERATIONS_PPQ = 2150859239_u32
  ERROR_WSMAN_QUOTA_MAX_OPERATIONS_USER_PPQ = 2150859240_u32
  ERROR_WSMAN_QUOTA_MAX_COMMANDS_PER_SHELL_PPQ = 2150859241_u32
  ERROR_WSMAN_QUOTA_MIN_REQUIREMENT_NOT_AVAILABLE_PPQ = 2150859242_u32
  ERROR_WSMAN_NEW_DESERIALIZER = 2150859243_u32
  ERROR_WSMAN_DESERIALIZE_CLASS = 2150859244_u32
  ERROR_WSMAN_GETCLASS = 2150859245_u32
  ERROR_WSMAN_NEW_SESSION = 2150859246_u32
  ERROR_WSMAN_NULL_KEY = 2150859247_u32
  ERROR_WSMAN_MUTUAL_AUTH_FAILED = 2150859248_u32
  ERROR_WSMAN_UNSUPPORTED_OCTETTYPE = 2150859249_u32
  ERROR_WINRS_IDLETIMEOUT_OUTOFBOUNDS = 2150859250_u32
  ERROR_WSMAN_INSUFFICIENT_METADATA_FOR_BASIC = 2150859251_u32
  ERROR_WSMAN_INVALID_LITERAL_URI = 2150859252_u32
  ERROR_WSMAN_OBJECTONLY_INVALID = 2150859253_u32
  ERROR_WSMAN_MISSING_CLASSNAME = 2150859254_u32
  ERROR_WSMAN_EVENTING_INVALID_ENCODING_IN_DELIVERY = 2150859255_u32
  ERROR_WSMAN_DESTINATION_INVALID = 2150859256_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE_IDENTIFY = 2150859257_u32
  ERROR_WSMAN_CLIENT_SESSION_UNUSABLE = 2150859258_u32
  ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED = 2150859259_u32
  ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED_DOWNLEVEL = 2150859260_u32
  ERROR_WSMAN_RUNASUSER_MANAGEDACCOUNT_LOGON_FAILED = 2150859261_u32
  ERROR_WSMAN_CERTMAPPING_CREDENTIAL_MANAGEMENT_FAILIED = 2150859262_u32

  CLSID_WSMan = LibC::GUID.new(0xbced617b_u32, 0xec03_u16, 0x420b_u16, StaticArray[0x85_u8, 0x8_u8, 0x97_u8, 0x7d_u8, 0xc7_u8, 0xa6_u8, 0x86_u8, 0xbd_u8])

  CLSID_WSManInternal = LibC::GUID.new(0x7de087a5_u32, 0x5dcb_u16, 0x4df7_u16, StaticArray[0xbb_u8, 0x12_u8, 0x9_u8, 0x24_u8, 0xad_u8, 0x8f_u8, 0xbd_u8, 0x9a_u8])

  enum WSManDataType
    WSMAN_DATA_NONE = 0_i32
    WSMAN_DATA_TYPE_TEXT = 1_i32
    WSMAN_DATA_TYPE_BINARY = 2_i32
    WSMAN_DATA_TYPE_DWORD = 4_i32
  end
  enum WSManAuthenticationFlags
    WSMAN_FLAG_DEFAULT_AUTHENTICATION = 0_i32
    WSMAN_FLAG_NO_AUTHENTICATION = 1_i32
    WSMAN_FLAG_AUTH_DIGEST = 2_i32
    WSMAN_FLAG_AUTH_NEGOTIATE = 4_i32
    WSMAN_FLAG_AUTH_BASIC = 8_i32
    WSMAN_FLAG_AUTH_KERBEROS = 16_i32
    WSMAN_FLAG_AUTH_CREDSSP = 128_i32
    WSMAN_FLAG_AUTH_CLIENT_CERTIFICATE = 32_i32
  end
  enum WSManProxyAccessType
    WSMAN_OPTION_PROXY_IE_PROXY_CONFIG = 1_i32
    WSMAN_OPTION_PROXY_WINHTTP_PROXY_CONFIG = 2_i32
    WSMAN_OPTION_PROXY_AUTO_DETECT = 4_i32
    WSMAN_OPTION_PROXY_NO_PROXY_SERVER = 8_i32
  end
  enum WSManSessionOption
    WSMAN_OPTION_DEFAULT_OPERATION_TIMEOUTMS = 1_i32
    WSMAN_OPTION_MAX_RETRY_TIME = 11_i32
    WSMAN_OPTION_TIMEOUTMS_CREATE_SHELL = 12_i32
    WSMAN_OPTION_TIMEOUTMS_RUN_SHELL_COMMAND = 13_i32
    WSMAN_OPTION_TIMEOUTMS_RECEIVE_SHELL_OUTPUT = 14_i32
    WSMAN_OPTION_TIMEOUTMS_SEND_SHELL_INPUT = 15_i32
    WSMAN_OPTION_TIMEOUTMS_SIGNAL_SHELL = 16_i32
    WSMAN_OPTION_TIMEOUTMS_CLOSE_SHELL = 17_i32
    WSMAN_OPTION_SKIP_CA_CHECK = 18_i32
    WSMAN_OPTION_SKIP_CN_CHECK = 19_i32
    WSMAN_OPTION_UNENCRYPTED_MESSAGES = 20_i32
    WSMAN_OPTION_UTF16 = 21_i32
    WSMAN_OPTION_ENABLE_SPN_SERVER_PORT = 22_i32
    WSMAN_OPTION_MACHINE_ID = 23_i32
    WSMAN_OPTION_LOCALE = 25_i32
    WSMAN_OPTION_UI_LANGUAGE = 26_i32
    WSMAN_OPTION_MAX_ENVELOPE_SIZE_KB = 28_i32
    WSMAN_OPTION_SHELL_MAX_DATA_SIZE_PER_MESSAGE_KB = 29_i32
    WSMAN_OPTION_REDIRECT_LOCATION = 30_i32
    WSMAN_OPTION_SKIP_REVOCATION_CHECK = 31_i32
    WSMAN_OPTION_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS = 32_i32
    WSMAN_OPTION_USE_SSL = 33_i32
    WSMAN_OPTION_USE_INTEARACTIVE_TOKEN = 34_i32
  end
  enum WSManCallbackFlags
    WSMAN_FLAG_CALLBACK_END_OF_OPERATION = 1_i32
    WSMAN_FLAG_CALLBACK_END_OF_STREAM = 8_i32
    WSMAN_FLAG_CALLBACK_SHELL_SUPPORTS_DISCONNECT = 32_i32
    WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTED = 64_i32
    WSMAN_FLAG_CALLBACK_NETWORK_FAILURE_DETECTED = 256_i32
    WSMAN_FLAG_CALLBACK_RETRYING_AFTER_NETWORK_FAILURE = 512_i32
    WSMAN_FLAG_CALLBACK_RECONNECTED_AFTER_NETWORK_FAILURE = 1024_i32
    WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTING = 2048_i32
    WSMAN_FLAG_CALLBACK_RETRY_ABORTED_DUE_TO_INTERNAL_ERROR = 4096_i32
    WSMAN_FLAG_CALLBACK_RECEIVE_DELAY_STREAM_REQUEST_PROCESSED = 8192_i32
  end
  enum WSManShellFlag
    WSMAN_FLAG_NO_COMPRESSION = 1_i32
    WSMAN_FLAG_DELETE_SERVER_SESSION = 2_i32
    WSMAN_FLAG_SERVER_BUFFERING_MODE_DROP = 4_i32
    WSMAN_FLAG_SERVER_BUFFERING_MODE_BLOCK = 8_i32
    WSMAN_FLAG_RECEIVE_DELAY_OUTPUT_STREAM = 16_i32
  end
  enum WSManSessionFlags
    WSManFlagUTF8 = 1_i32
    WSManFlagCredUsernamePassword = 4096_i32
    WSManFlagSkipCACheck = 8192_i32
    WSManFlagSkipCNCheck = 16384_i32
    WSManFlagUseNoAuthentication = 32768_i32
    WSManFlagUseDigest = 65536_i32
    WSManFlagUseNegotiate = 131072_i32
    WSManFlagUseBasic = 262144_i32
    WSManFlagUseKerberos = 524288_i32
    WSManFlagNoEncryption = 1048576_i32
    WSManFlagUseClientCertificate = 2097152_i32
    WSManFlagEnableSPNServerPort = 4194304_i32
    WSManFlagUTF16 = 8388608_i32
    WSManFlagUseCredSsp = 16777216_i32
    WSManFlagSkipRevocationCheck = 33554432_i32
    WSManFlagAllowNegotiateImplicitCredentials = 67108864_i32
    WSManFlagUseSsl = 134217728_i32
  end
  enum WSManEnumFlags
    WSManFlagNonXmlText = 1_i32
    WSManFlagReturnObject = 0_i32
    WSManFlagReturnEPR = 2_i32
    WSManFlagReturnObjectAndEPR = 4_i32
    WSManFlagHierarchyDeep = 0_i32
    WSManFlagHierarchyShallow = 32_i32
    WSManFlagHierarchyDeepBasePropsOnly = 64_i32
    WSManFlagAssociatedInstance = 0_i32
    WSManFlagAssociationInstance = 128_i32
  end
  enum WSManProxyAccessTypeFlags
    WSManProxyIEConfig = 1_i32
    WSManProxyWinHttpConfig = 2_i32
    WSManProxyAutoDetect = 4_i32
    WSManProxyNoProxyServer = 8_i32
  end
  enum WSManProxyAuthenticationFlags
    WSManFlagProxyAuthenticationUseNegotiate = 1_i32
    WSManFlagProxyAuthenticationUseBasic = 2_i32
    WSManFlagProxyAuthenticationUseDigest = 4_i32
  end

  @[Extern]
  record WSMAN_DATA_TEXT,
    bufferLength : UInt32,
    buffer : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_DATA_BINARY,
    dataLength : UInt32,
    data : UInt8*

  @[Extern]
  record WSMAN_DATA,
    type__ : Win32cr::System::RemoteManagement::WSManDataType,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      text : Win32cr::System::RemoteManagement::WSMAN_DATA_TEXT,
      binaryData : Win32cr::System::RemoteManagement::WSMAN_DATA_BINARY,
      number : UInt32

  end

  @[Extern]
  record WSMAN_ERROR,
    code : UInt32,
    errorDetail : Win32cr::Foundation::PWSTR,
    language : Win32cr::Foundation::PWSTR,
    machineName : Win32cr::Foundation::PWSTR,
    pluginName : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_USERNAME_PASSWORD_CREDS,
    username : Win32cr::Foundation::PWSTR,
    password : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_AUTHENTICATION_CREDENTIALS,
    authenticationMechanism : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      userAccount : Win32cr::System::RemoteManagement::WSMAN_USERNAME_PASSWORD_CREDS,
      certificateThumbprint : Win32cr::Foundation::PWSTR

  end

  @[Extern]
  record WSMAN_OPTION,
    name : Win32cr::Foundation::PWSTR,
    value : Win32cr::Foundation::PWSTR,
    mustComply : Win32cr::Foundation::BOOL

  @[Extern]
  record WSMAN_OPTION_SET,
    optionsCount : UInt32,
    options : Win32cr::System::RemoteManagement::WSMAN_OPTION*,
    optionsMustUnderstand : Win32cr::Foundation::BOOL

  @[Extern]
  record WSMAN_OPTION_SETEX,
    optionsCount : UInt32,
    options : Win32cr::System::RemoteManagement::WSMAN_OPTION*,
    optionsMustUnderstand : Win32cr::Foundation::BOOL,
    optionTypes : Win32cr::Foundation::PWSTR*

  @[Extern]
  record WSMAN_KEY,
    key : Win32cr::Foundation::PWSTR,
    value : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_SELECTOR_SET,
    numberKeys : UInt32,
    keys : Win32cr::System::RemoteManagement::WSMAN_KEY*

  @[Extern]
  record WSMAN_FRAGMENT,
    path : Win32cr::Foundation::PWSTR,
    dialect : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_FILTER,
    filter : Win32cr::Foundation::PWSTR,
    dialect : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_OPERATION_INFO,
    fragment : Win32cr::System::RemoteManagement::WSMAN_FRAGMENT,
    filter : Win32cr::System::RemoteManagement::WSMAN_FILTER,
    selectorSet : Win32cr::System::RemoteManagement::WSMAN_SELECTOR_SET,
    optionSet : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET,
    reserved : Void*,
    version : UInt32

  @[Extern]
  record WSMAN_OPERATION_INFOEX,
    fragment : Win32cr::System::RemoteManagement::WSMAN_FRAGMENT,
    filter : Win32cr::System::RemoteManagement::WSMAN_FILTER,
    selectorSet : Win32cr::System::RemoteManagement::WSMAN_SELECTOR_SET,
    optionSet : Win32cr::System::RemoteManagement::WSMAN_OPTION_SETEX,
    version : UInt32,
    uiLocale : Win32cr::Foundation::PWSTR,
    dataLocale : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_API
  @[Extern]
  record WSMAN_PROXY_INFO,
    accessType : UInt32,
    authenticationCredentials : Win32cr::System::RemoteManagement::WSMAN_AUTHENTICATION_CREDENTIALS

  @[Extern]
  record WSMAN_SESSION
  @[Extern]
  record WSMAN_OPERATION
  @[Extern]
  record WSMAN_SHELL
  @[Extern]
  record WSMAN_COMMAND
  @[Extern]
  record WSMAN_STREAM_ID_SET,
    streamIDsCount : UInt32,
    streamIDs : Win32cr::Foundation::PWSTR*

  @[Extern]
  record WSMAN_ENVIRONMENT_VARIABLE,
    name : Win32cr::Foundation::PWSTR,
    value : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_ENVIRONMENT_VARIABLE_SET,
    varsCount : UInt32,
    vars : Win32cr::System::RemoteManagement::WSMAN_ENVIRONMENT_VARIABLE*

  @[Extern]
  record WSMAN_SHELL_STARTUP_INFO_V10,
    inputStreamSet : Win32cr::System::RemoteManagement::WSMAN_STREAM_ID_SET*,
    outputStreamSet : Win32cr::System::RemoteManagement::WSMAN_STREAM_ID_SET*,
    idleTimeoutMs : UInt32,
    workingDirectory : Win32cr::Foundation::PWSTR,
    variableSet : Win32cr::System::RemoteManagement::WSMAN_ENVIRONMENT_VARIABLE_SET*

  @[Extern]
  record WSMAN_SHELL_STARTUP_INFO_V11,
    __anonymous_base_wsman_l665_c48 : Win32cr::System::RemoteManagement::WSMAN_SHELL_STARTUP_INFO_V10,
    name : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_SHELL_DISCONNECT_INFO,
    idleTimeoutMs : UInt32

  @[Extern]
  record WSMAN_RECEIVE_DATA_RESULT,
    streamId : Win32cr::Foundation::PWSTR,
    streamData : Win32cr::System::RemoteManagement::WSMAN_DATA,
    commandState : Win32cr::Foundation::PWSTR,
    exitCode : UInt32

  @[Extern]
  record WSMAN_CONNECT_DATA,
    data : Win32cr::System::RemoteManagement::WSMAN_DATA

  @[Extern]
  record WSMAN_CREATE_SHELL_DATA,
    data : Win32cr::System::RemoteManagement::WSMAN_DATA

  @[Extern(union: true)]
  record WSMAN_RESPONSE_DATA,
    receiveData : Win32cr::System::RemoteManagement::WSMAN_RECEIVE_DATA_RESULT,
    connectData : Win32cr::System::RemoteManagement::WSMAN_CONNECT_DATA,
    createData : Win32cr::System::RemoteManagement::WSMAN_CREATE_SHELL_DATA

  @[Extern]
  record WSMAN_SHELL_ASYNC,
    operationContext : Void*,
    completionFunction : Win32cr::System::RemoteManagement::WSMAN_SHELL_COMPLETION_FUNCTION

  @[Extern]
  record WSMAN_COMMAND_ARG_SET,
    argsCount : UInt32,
    args : Win32cr::Foundation::PWSTR*

  @[Extern]
  record WSMAN_CERTIFICATE_DETAILS,
    subject : Win32cr::Foundation::PWSTR,
    issuerName : Win32cr::Foundation::PWSTR,
    issuerThumbprint : Win32cr::Foundation::PWSTR,
    subjectName : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_SENDER_DETAILS,
    senderName : Win32cr::Foundation::PWSTR,
    authenticationMechanism : Win32cr::Foundation::PWSTR,
    certificateDetails : Win32cr::System::RemoteManagement::WSMAN_CERTIFICATE_DETAILS*,
    clientToken : Win32cr::Foundation::HANDLE,
    httpURL : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_PLUGIN_REQUEST,
    senderDetails : Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*,
    locale : Win32cr::Foundation::PWSTR,
    resourceUri : Win32cr::Foundation::PWSTR,
    operationInfo : Win32cr::System::RemoteManagement::WSMAN_OPERATION_INFO*,
    shutdownNotification : Int32,
    shutdownNotificationHandle : Win32cr::Foundation::HANDLE,
    dataLocale : Win32cr::Foundation::PWSTR

  @[Extern]
  record WSMAN_AUTHZ_QUOTA,
    maxAllowedConcurrentShells : UInt32,
    maxAllowedConcurrentOperations : UInt32,
    timeslotSize : UInt32,
    maxAllowedOperationsPerTimeslot : UInt32

  @[Extern]
  record IWSManVtbl,
    query_interface : Proc(IWSMan*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSMan*, UInt32),
    release : Proc(IWSMan*, UInt32),
    get_type_info_count : Proc(IWSMan*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSMan*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSMan*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSMan*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_session : Proc(IWSMan*, Win32cr::Foundation::BSTR, Int32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_connection_options : Proc(IWSMan*, Void**, Win32cr::Foundation::HRESULT),
    get_CommandLine : Proc(IWSMan*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSMan*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("190d8637-5cd3-496d-ad24-69636bb5a3b5")]
  record IWSMan, lpVtbl : IWSManVtbl* do
    GUID = LibC::GUID.new(0x190d8637_u32, 0x5cd3_u16, 0x496d_u16, StaticArray[0xad_u8, 0x24_u8, 0x69_u8, 0x63_u8, 0x6b_u8, 0xb5_u8, 0xa3_u8, 0xb5_u8])
    def query_interface(this : IWSMan*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSMan*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSMan*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSMan*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSMan*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSMan*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSMan*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_session(this : IWSMan*, connection : Win32cr::Foundation::BSTR, flags : Int32, connectionOptions : Void*, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, connection, flags, connectionOptions, session)
    end
    def create_connection_options(this : IWSMan*, connectionOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_connection_options.call(this, connectionOptions)
    end
    def get_CommandLine(this : IWSMan*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CommandLine.call(this, value)
    end
    def get_Error(this : IWSMan*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end

  end

  @[Extern]
  record IWSManExVtbl,
    query_interface : Proc(IWSManEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManEx*, UInt32),
    release : Proc(IWSManEx*, UInt32),
    get_type_info_count : Proc(IWSManEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManEx*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManEx*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManEx*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_session : Proc(IWSManEx*, Win32cr::Foundation::BSTR, Int32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_connection_options : Proc(IWSManEx*, Void**, Win32cr::Foundation::HRESULT),
    get_CommandLine : Proc(IWSManEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_resource_locator : Proc(IWSManEx*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    session_flag_utf8 : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_cred_username_password : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_ca_check : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_cn_check : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_digest : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_negotiate : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_basic : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_kerberos : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_no_encryption : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_enable_spn_server_port : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_no_authentication : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_non_xml_text : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_epr : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object_and_epr : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    get_error_message : Proc(IWSManEx*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object : Proc(IWSManEx*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2d53bdaa-798e-49e6-a1aa-74d01256f411")]
  record IWSManEx, lpVtbl : IWSManExVtbl* do
    GUID = LibC::GUID.new(0x2d53bdaa_u32, 0x798e_u16, 0x49e6_u16, StaticArray[0xa1_u8, 0xaa_u8, 0x74_u8, 0xd0_u8, 0x12_u8, 0x56_u8, 0xf4_u8, 0x11_u8])
    def query_interface(this : IWSManEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManEx*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManEx*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManEx*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManEx*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_session(this : IWSManEx*, connection : Win32cr::Foundation::BSTR, flags : Int32, connectionOptions : Void*, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, connection, flags, connectionOptions, session)
    end
    def create_connection_options(this : IWSManEx*, connectionOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_connection_options.call(this, connectionOptions)
    end
    def get_CommandLine(this : IWSManEx*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CommandLine.call(this, value)
    end
    def get_Error(this : IWSManEx*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end
    def create_resource_locator(this : IWSManEx*, strResourceLocator : Win32cr::Foundation::BSTR, newResourceLocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_locator.call(this, strResourceLocator, newResourceLocator)
    end
    def session_flag_utf8(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_utf8.call(this, flags)
    end
    def session_flag_cred_username_password(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_cred_username_password.call(this, flags)
    end
    def session_flag_skip_ca_check(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_ca_check.call(this, flags)
    end
    def session_flag_skip_cn_check(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_cn_check.call(this, flags)
    end
    def session_flag_use_digest(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_digest.call(this, flags)
    end
    def session_flag_use_negotiate(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_negotiate.call(this, flags)
    end
    def session_flag_use_basic(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_basic.call(this, flags)
    end
    def session_flag_use_kerberos(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_kerberos.call(this, flags)
    end
    def session_flag_no_encryption(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_no_encryption.call(this, flags)
    end
    def session_flag_enable_spn_server_port(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_enable_spn_server_port.call(this, flags)
    end
    def session_flag_use_no_authentication(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_no_authentication.call(this, flags)
    end
    def enumeration_flag_non_xml_text(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_non_xml_text.call(this, flags)
    end
    def enumeration_flag_return_epr(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_epr.call(this, flags)
    end
    def enumeration_flag_return_object_and_epr(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object_and_epr.call(this, flags)
    end
    def get_error_message(this : IWSManEx*, errorNumber : UInt32, errorMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_message.call(this, errorNumber, errorMessage)
    end
    def enumeration_flag_hierarchy_deep(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep.call(this, flags)
    end
    def enumeration_flag_hierarchy_shallow(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_shallow.call(this, flags)
    end
    def enumeration_flag_hierarchy_deep_base_props_only(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep_base_props_only.call(this, flags)
    end
    def enumeration_flag_return_object(this : IWSManEx*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object.call(this, flags)
    end

  end

  @[Extern]
  record IWSManEx2Vtbl,
    query_interface : Proc(IWSManEx2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManEx2*, UInt32),
    release : Proc(IWSManEx2*, UInt32),
    get_type_info_count : Proc(IWSManEx2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManEx2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManEx2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManEx2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_session : Proc(IWSManEx2*, Win32cr::Foundation::BSTR, Int32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_connection_options : Proc(IWSManEx2*, Void**, Win32cr::Foundation::HRESULT),
    get_CommandLine : Proc(IWSManEx2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManEx2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_resource_locator : Proc(IWSManEx2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    session_flag_utf8 : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_cred_username_password : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_ca_check : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_cn_check : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_digest : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_negotiate : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_basic : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_kerberos : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_no_encryption : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_enable_spn_server_port : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_no_authentication : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_non_xml_text : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_epr : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object_and_epr : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    get_error_message : Proc(IWSManEx2*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_client_certificate : Proc(IWSManEx2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1d1b5ae0-42d9-4021-8261-3987619512e9")]
  record IWSManEx2, lpVtbl : IWSManEx2Vtbl* do
    GUID = LibC::GUID.new(0x1d1b5ae0_u32, 0x42d9_u16, 0x4021_u16, StaticArray[0x82_u8, 0x61_u8, 0x39_u8, 0x87_u8, 0x61_u8, 0x95_u8, 0x12_u8, 0xe9_u8])
    def query_interface(this : IWSManEx2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManEx2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManEx2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManEx2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManEx2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManEx2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManEx2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_session(this : IWSManEx2*, connection : Win32cr::Foundation::BSTR, flags : Int32, connectionOptions : Void*, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, connection, flags, connectionOptions, session)
    end
    def create_connection_options(this : IWSManEx2*, connectionOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_connection_options.call(this, connectionOptions)
    end
    def get_CommandLine(this : IWSManEx2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CommandLine.call(this, value)
    end
    def get_Error(this : IWSManEx2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end
    def create_resource_locator(this : IWSManEx2*, strResourceLocator : Win32cr::Foundation::BSTR, newResourceLocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_locator.call(this, strResourceLocator, newResourceLocator)
    end
    def session_flag_utf8(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_utf8.call(this, flags)
    end
    def session_flag_cred_username_password(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_cred_username_password.call(this, flags)
    end
    def session_flag_skip_ca_check(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_ca_check.call(this, flags)
    end
    def session_flag_skip_cn_check(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_cn_check.call(this, flags)
    end
    def session_flag_use_digest(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_digest.call(this, flags)
    end
    def session_flag_use_negotiate(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_negotiate.call(this, flags)
    end
    def session_flag_use_basic(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_basic.call(this, flags)
    end
    def session_flag_use_kerberos(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_kerberos.call(this, flags)
    end
    def session_flag_no_encryption(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_no_encryption.call(this, flags)
    end
    def session_flag_enable_spn_server_port(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_enable_spn_server_port.call(this, flags)
    end
    def session_flag_use_no_authentication(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_no_authentication.call(this, flags)
    end
    def enumeration_flag_non_xml_text(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_non_xml_text.call(this, flags)
    end
    def enumeration_flag_return_epr(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_epr.call(this, flags)
    end
    def enumeration_flag_return_object_and_epr(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object_and_epr.call(this, flags)
    end
    def get_error_message(this : IWSManEx2*, errorNumber : UInt32, errorMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_message.call(this, errorNumber, errorMessage)
    end
    def enumeration_flag_hierarchy_deep(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep.call(this, flags)
    end
    def enumeration_flag_hierarchy_shallow(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_shallow.call(this, flags)
    end
    def enumeration_flag_hierarchy_deep_base_props_only(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep_base_props_only.call(this, flags)
    end
    def enumeration_flag_return_object(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object.call(this, flags)
    end
    def session_flag_use_client_certificate(this : IWSManEx2*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_client_certificate.call(this, flags)
    end

  end

  @[Extern]
  record IWSManEx3Vtbl,
    query_interface : Proc(IWSManEx3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManEx3*, UInt32),
    release : Proc(IWSManEx3*, UInt32),
    get_type_info_count : Proc(IWSManEx3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManEx3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManEx3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManEx3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_session : Proc(IWSManEx3*, Win32cr::Foundation::BSTR, Int32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_connection_options : Proc(IWSManEx3*, Void**, Win32cr::Foundation::HRESULT),
    get_CommandLine : Proc(IWSManEx3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManEx3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_resource_locator : Proc(IWSManEx3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    session_flag_utf8 : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_cred_username_password : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_ca_check : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_cn_check : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_digest : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_negotiate : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_basic : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_kerberos : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_no_encryption : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_enable_spn_server_port : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_no_authentication : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_non_xml_text : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_epr : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object_and_epr : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    get_error_message : Proc(IWSManEx3*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_return_object : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_client_certificate : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_utf16 : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_cred_ssp : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_association_instance : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    enumeration_flag_associated_instance : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_skip_revocation_check : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_allow_negotiate_implicit_credentials : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT),
    session_flag_use_ssl : Proc(IWSManEx3*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6400e966-011d-4eac-8474-049e0848afad")]
  record IWSManEx3, lpVtbl : IWSManEx3Vtbl* do
    GUID = LibC::GUID.new(0x6400e966_u32, 0x11d_u16, 0x4eac_u16, StaticArray[0x84_u8, 0x74_u8, 0x4_u8, 0x9e_u8, 0x8_u8, 0x48_u8, 0xaf_u8, 0xad_u8])
    def query_interface(this : IWSManEx3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManEx3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManEx3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManEx3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManEx3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManEx3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManEx3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_session(this : IWSManEx3*, connection : Win32cr::Foundation::BSTR, flags : Int32, connectionOptions : Void*, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, connection, flags, connectionOptions, session)
    end
    def create_connection_options(this : IWSManEx3*, connectionOptions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_connection_options.call(this, connectionOptions)
    end
    def get_CommandLine(this : IWSManEx3*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CommandLine.call(this, value)
    end
    def get_Error(this : IWSManEx3*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end
    def create_resource_locator(this : IWSManEx3*, strResourceLocator : Win32cr::Foundation::BSTR, newResourceLocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_locator.call(this, strResourceLocator, newResourceLocator)
    end
    def session_flag_utf8(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_utf8.call(this, flags)
    end
    def session_flag_cred_username_password(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_cred_username_password.call(this, flags)
    end
    def session_flag_skip_ca_check(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_ca_check.call(this, flags)
    end
    def session_flag_skip_cn_check(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_cn_check.call(this, flags)
    end
    def session_flag_use_digest(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_digest.call(this, flags)
    end
    def session_flag_use_negotiate(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_negotiate.call(this, flags)
    end
    def session_flag_use_basic(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_basic.call(this, flags)
    end
    def session_flag_use_kerberos(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_kerberos.call(this, flags)
    end
    def session_flag_no_encryption(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_no_encryption.call(this, flags)
    end
    def session_flag_enable_spn_server_port(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_enable_spn_server_port.call(this, flags)
    end
    def session_flag_use_no_authentication(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_no_authentication.call(this, flags)
    end
    def enumeration_flag_non_xml_text(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_non_xml_text.call(this, flags)
    end
    def enumeration_flag_return_epr(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_epr.call(this, flags)
    end
    def enumeration_flag_return_object_and_epr(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object_and_epr.call(this, flags)
    end
    def get_error_message(this : IWSManEx3*, errorNumber : UInt32, errorMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_message.call(this, errorNumber, errorMessage)
    end
    def enumeration_flag_hierarchy_deep(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep.call(this, flags)
    end
    def enumeration_flag_hierarchy_shallow(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_shallow.call(this, flags)
    end
    def enumeration_flag_hierarchy_deep_base_props_only(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_hierarchy_deep_base_props_only.call(this, flags)
    end
    def enumeration_flag_return_object(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_return_object.call(this, flags)
    end
    def session_flag_use_client_certificate(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_client_certificate.call(this, flags)
    end
    def session_flag_utf16(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_utf16.call(this, flags)
    end
    def session_flag_use_cred_ssp(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_cred_ssp.call(this, flags)
    end
    def enumeration_flag_association_instance(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_association_instance.call(this, flags)
    end
    def enumeration_flag_associated_instance(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumeration_flag_associated_instance.call(this, flags)
    end
    def session_flag_skip_revocation_check(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_skip_revocation_check.call(this, flags)
    end
    def session_flag_allow_negotiate_implicit_credentials(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_allow_negotiate_implicit_credentials.call(this, flags)
    end
    def session_flag_use_ssl(this : IWSManEx3*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_flag_use_ssl.call(this, flags)
    end

  end

  @[Extern]
  record IWSManConnectionOptionsVtbl,
    query_interface : Proc(IWSManConnectionOptions*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManConnectionOptions*, UInt32),
    release : Proc(IWSManConnectionOptions*, UInt32),
    get_type_info_count : Proc(IWSManConnectionOptions*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManConnectionOptions*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManConnectionOptions*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManConnectionOptions*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UserName : Proc(IWSManConnectionOptions*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UserName : Proc(IWSManConnectionOptions*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Password : Proc(IWSManConnectionOptions*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f704e861-9e52-464f-b786-da5eb2320fdd")]
  record IWSManConnectionOptions, lpVtbl : IWSManConnectionOptionsVtbl* do
    GUID = LibC::GUID.new(0xf704e861_u32, 0x9e52_u16, 0x464f_u16, StaticArray[0xb7_u8, 0x86_u8, 0xda_u8, 0x5e_u8, 0xb2_u8, 0x32_u8, 0xf_u8, 0xdd_u8])
    def query_interface(this : IWSManConnectionOptions*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManConnectionOptions*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManConnectionOptions*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManConnectionOptions*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManConnectionOptions*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManConnectionOptions*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManConnectionOptions*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UserName(this : IWSManConnectionOptions*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserName.call(this, name)
    end
    def put_UserName(this : IWSManConnectionOptions*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UserName.call(this, name)
    end
    def put_Password(this : IWSManConnectionOptions*, password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Password.call(this, password)
    end

  end

  @[Extern]
  record IWSManConnectionOptionsExVtbl,
    query_interface : Proc(IWSManConnectionOptionsEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManConnectionOptionsEx*, UInt32),
    release : Proc(IWSManConnectionOptionsEx*, UInt32),
    get_type_info_count : Proc(IWSManConnectionOptionsEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManConnectionOptionsEx*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManConnectionOptionsEx*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManConnectionOptionsEx*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UserName : Proc(IWSManConnectionOptionsEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UserName : Proc(IWSManConnectionOptionsEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Password : Proc(IWSManConnectionOptionsEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CertificateThumbprint : Proc(IWSManConnectionOptionsEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateThumbprint : Proc(IWSManConnectionOptionsEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ef43edf7-2a48-4d93-9526-8bd6ab6d4a6b")]
  record IWSManConnectionOptionsEx, lpVtbl : IWSManConnectionOptionsExVtbl* do
    GUID = LibC::GUID.new(0xef43edf7_u32, 0x2a48_u16, 0x4d93_u16, StaticArray[0x95_u8, 0x26_u8, 0x8b_u8, 0xd6_u8, 0xab_u8, 0x6d_u8, 0x4a_u8, 0x6b_u8])
    def query_interface(this : IWSManConnectionOptionsEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManConnectionOptionsEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManConnectionOptionsEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManConnectionOptionsEx*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManConnectionOptionsEx*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManConnectionOptionsEx*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManConnectionOptionsEx*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UserName(this : IWSManConnectionOptionsEx*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserName.call(this, name)
    end
    def put_UserName(this : IWSManConnectionOptionsEx*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UserName.call(this, name)
    end
    def put_Password(this : IWSManConnectionOptionsEx*, password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Password.call(this, password)
    end
    def get_CertificateThumbprint(this : IWSManConnectionOptionsEx*, thumbprint : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateThumbprint.call(this, thumbprint)
    end
    def put_CertificateThumbprint(this : IWSManConnectionOptionsEx*, thumbprint : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateThumbprint.call(this, thumbprint)
    end

  end

  @[Extern]
  record IWSManConnectionOptionsEx2Vtbl,
    query_interface : Proc(IWSManConnectionOptionsEx2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManConnectionOptionsEx2*, UInt32),
    release : Proc(IWSManConnectionOptionsEx2*, UInt32),
    get_type_info_count : Proc(IWSManConnectionOptionsEx2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManConnectionOptionsEx2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManConnectionOptionsEx2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManConnectionOptionsEx2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UserName : Proc(IWSManConnectionOptionsEx2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UserName : Proc(IWSManConnectionOptionsEx2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Password : Proc(IWSManConnectionOptionsEx2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CertificateThumbprint : Proc(IWSManConnectionOptionsEx2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateThumbprint : Proc(IWSManConnectionOptionsEx2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_proxy : Proc(IWSManConnectionOptionsEx2*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    proxy_ie_config : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_win_http_config : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_auto_detect : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_no_proxy_server : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_authentication_use_negotiate : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_authentication_use_basic : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT),
    proxy_authentication_use_digest : Proc(IWSManConnectionOptionsEx2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f500c9ec-24ee-48ab-b38d-fc9a164c658e")]
  record IWSManConnectionOptionsEx2, lpVtbl : IWSManConnectionOptionsEx2Vtbl* do
    GUID = LibC::GUID.new(0xf500c9ec_u32, 0x24ee_u16, 0x48ab_u16, StaticArray[0xb3_u8, 0x8d_u8, 0xfc_u8, 0x9a_u8, 0x16_u8, 0x4c_u8, 0x65_u8, 0x8e_u8])
    def query_interface(this : IWSManConnectionOptionsEx2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManConnectionOptionsEx2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManConnectionOptionsEx2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManConnectionOptionsEx2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManConnectionOptionsEx2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManConnectionOptionsEx2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManConnectionOptionsEx2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UserName(this : IWSManConnectionOptionsEx2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserName.call(this, name)
    end
    def put_UserName(this : IWSManConnectionOptionsEx2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UserName.call(this, name)
    end
    def put_Password(this : IWSManConnectionOptionsEx2*, password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Password.call(this, password)
    end
    def get_CertificateThumbprint(this : IWSManConnectionOptionsEx2*, thumbprint : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateThumbprint.call(this, thumbprint)
    end
    def put_CertificateThumbprint(this : IWSManConnectionOptionsEx2*, thumbprint : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateThumbprint.call(this, thumbprint)
    end
    def set_proxy(this : IWSManConnectionOptionsEx2*, accessType : Int32, authenticationMechanism : Int32, userName : Win32cr::Foundation::BSTR, password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_proxy.call(this, accessType, authenticationMechanism, userName, password)
    end
    def proxy_ie_config(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_ie_config.call(this, value)
    end
    def proxy_win_http_config(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_win_http_config.call(this, value)
    end
    def proxy_auto_detect(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_auto_detect.call(this, value)
    end
    def proxy_no_proxy_server(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_no_proxy_server.call(this, value)
    end
    def proxy_authentication_use_negotiate(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_authentication_use_negotiate.call(this, value)
    end
    def proxy_authentication_use_basic(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_authentication_use_basic.call(this, value)
    end
    def proxy_authentication_use_digest(this : IWSManConnectionOptionsEx2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.proxy_authentication_use_digest.call(this, value)
    end

  end

  @[Extern]
  record IWSManSessionVtbl,
    query_interface : Proc(IWSManSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManSession*, UInt32),
    release : Proc(IWSManSession*, UInt32),
    get_type_info_count : Proc(IWSManSession*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManSession*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManSession*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManSession*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get : Proc(IWSManSession*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put : Proc(IWSManSession*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create : Proc(IWSManSession*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    delete : Proc(IWSManSession*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    invoke_2 : Proc(IWSManSession*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate : Proc(IWSManSession*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Void**, Win32cr::Foundation::HRESULT),
    identify : Proc(IWSManSession*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BatchItems : Proc(IWSManSession*, Int32*, Win32cr::Foundation::HRESULT),
    put_BatchItems : Proc(IWSManSession*, Int32, Win32cr::Foundation::HRESULT),
    get_Timeout : Proc(IWSManSession*, Int32*, Win32cr::Foundation::HRESULT),
    put_Timeout : Proc(IWSManSession*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc84fc58-1286-40c4-9da0-c8ef6ec241e0")]
  record IWSManSession, lpVtbl : IWSManSessionVtbl* do
    GUID = LibC::GUID.new(0xfc84fc58_u32, 0x1286_u16, 0x40c4_u16, StaticArray[0x9d_u8, 0xa0_u8, 0xc8_u8, 0xef_u8, 0x6e_u8, 0xc2_u8, 0x41_u8, 0xe0_u8])
    def query_interface(this : IWSManSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManSession*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManSession*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManSession*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManSession*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get(this : IWSManSession*, resourceUri : Win32cr::System::Com::VARIANT, flags : Int32, resource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, resourceUri, flags, resource)
    end
    def put(this : IWSManSession*, resourceUri : Win32cr::System::Com::VARIANT, resource : Win32cr::Foundation::BSTR, flags : Int32, resultResource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, resourceUri, resource, flags, resultResource)
    end
    def create(this : IWSManSession*, resourceUri : Win32cr::System::Com::VARIANT, resource : Win32cr::Foundation::BSTR, flags : Int32, newUri : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this, resourceUri, resource, flags, newUri)
    end
    def delete(this : IWSManSession*, resourceUri : Win32cr::System::Com::VARIANT, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, resourceUri, flags)
    end
    def invoke_2(this : IWSManSession*, actionUri : Win32cr::Foundation::BSTR, resourceUri : Win32cr::System::Com::VARIANT, parameters : Win32cr::Foundation::BSTR, flags : Int32, result : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_2.call(this, actionUri, resourceUri, parameters, flags, result)
    end
    def enumerate(this : IWSManSession*, resourceUri : Win32cr::System::Com::VARIANT, filter : Win32cr::Foundation::BSTR, dialect : Win32cr::Foundation::BSTR, flags : Int32, resultSet : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate.call(this, resourceUri, filter, dialect, flags, resultSet)
    end
    def identify(this : IWSManSession*, flags : Int32, result : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.identify.call(this, flags, result)
    end
    def get_Error(this : IWSManSession*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end
    def get_BatchItems(this : IWSManSession*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BatchItems.call(this, value)
    end
    def put_BatchItems(this : IWSManSession*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BatchItems.call(this, value)
    end
    def get_Timeout(this : IWSManSession*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Timeout.call(this, value)
    end
    def put_Timeout(this : IWSManSession*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Timeout.call(this, value)
    end

  end

  @[Extern]
  record IWSManEnumeratorVtbl,
    query_interface : Proc(IWSManEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManEnumerator*, UInt32),
    release : Proc(IWSManEnumerator*, UInt32),
    get_type_info_count : Proc(IWSManEnumerator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManEnumerator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManEnumerator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManEnumerator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    read_item : Proc(IWSManEnumerator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AtEndOfStream : Proc(IWSManEnumerator*, Int16*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManEnumerator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f3457ca9-abb9-4fa5-b850-90e8ca300e7f")]
  record IWSManEnumerator, lpVtbl : IWSManEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xf3457ca9_u32, 0xabb9_u16, 0x4fa5_u16, StaticArray[0xb8_u8, 0x50_u8, 0x90_u8, 0xe8_u8, 0xca_u8, 0x30_u8, 0xe_u8, 0x7f_u8])
    def query_interface(this : IWSManEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManEnumerator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManEnumerator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManEnumerator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManEnumerator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def read_item(this : IWSManEnumerator*, resource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_item.call(this, resource)
    end
    def get_AtEndOfStream(this : IWSManEnumerator*, eos : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AtEndOfStream.call(this, eos)
    end
    def get_Error(this : IWSManEnumerator*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end

  end

  @[Extern]
  record IWSManResourceLocatorVtbl,
    query_interface : Proc(IWSManResourceLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManResourceLocator*, UInt32),
    release : Proc(IWSManResourceLocator*, UInt32),
    get_type_info_count : Proc(IWSManResourceLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManResourceLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManResourceLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManResourceLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ResourceURI : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ResourceURI : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    add_selector : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    clear_selectors : Proc(IWSManResourceLocator*, Win32cr::Foundation::HRESULT),
    get_FragmentPath : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FragmentPath : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FragmentDialect : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FragmentDialect : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_option : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    put_MustUnderstandOptions : Proc(IWSManResourceLocator*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_MustUnderstandOptions : Proc(IWSManResourceLocator*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    clear_options : Proc(IWSManResourceLocator*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IWSManResourceLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a7a1ba28-de41-466a-ad0a-c4059ead7428")]
  record IWSManResourceLocator, lpVtbl : IWSManResourceLocatorVtbl* do
    GUID = LibC::GUID.new(0xa7a1ba28_u32, 0xde41_u16, 0x466a_u16, StaticArray[0xad_u8, 0xa_u8, 0xc4_u8, 0x5_u8, 0x9e_u8, 0xad_u8, 0x74_u8, 0x28_u8])
    def query_interface(this : IWSManResourceLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManResourceLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManResourceLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManResourceLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManResourceLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManResourceLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManResourceLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_ResourceURI(this : IWSManResourceLocator*, uri : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ResourceURI.call(this, uri)
    end
    def get_ResourceURI(this : IWSManResourceLocator*, uri : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ResourceURI.call(this, uri)
    end
    def add_selector(this : IWSManResourceLocator*, resourceSelName : Win32cr::Foundation::BSTR, selValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_selector.call(this, resourceSelName, selValue)
    end
    def clear_selectors(this : IWSManResourceLocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_selectors.call(this)
    end
    def get_FragmentPath(this : IWSManResourceLocator*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FragmentPath.call(this, text)
    end
    def put_FragmentPath(this : IWSManResourceLocator*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FragmentPath.call(this, text)
    end
    def get_FragmentDialect(this : IWSManResourceLocator*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FragmentDialect.call(this, text)
    end
    def put_FragmentDialect(this : IWSManResourceLocator*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FragmentDialect.call(this, text)
    end
    def add_option(this : IWSManResourceLocator*, option_name : Win32cr::Foundation::BSTR, option_value : Win32cr::System::Com::VARIANT, mustComply : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_option.call(this, option_name, option_value, mustComply)
    end
    def put_MustUnderstandOptions(this : IWSManResourceLocator*, mustUnderstand : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MustUnderstandOptions.call(this, mustUnderstand)
    end
    def get_MustUnderstandOptions(this : IWSManResourceLocator*, mustUnderstand : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MustUnderstandOptions.call(this, mustUnderstand)
    end
    def clear_options(this : IWSManResourceLocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_options.call(this)
    end
    def get_Error(this : IWSManResourceLocator*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, value)
    end

  end

  @[Extern]
  record IWSManResourceLocatorInternalVtbl,
    query_interface : Proc(IWSManResourceLocatorInternal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManResourceLocatorInternal*, UInt32),
    release : Proc(IWSManResourceLocatorInternal*, UInt32)


  @[Extern]
  #@[Com("effaead7-7ec8-4716-b9be-f2e7e9fb4adb")]
  record IWSManResourceLocatorInternal, lpVtbl : IWSManResourceLocatorInternalVtbl* do
    GUID = LibC::GUID.new(0xeffaead7_u32, 0x7ec8_u16, 0x4716_u16, StaticArray[0xb9_u8, 0xbe_u8, 0xf2_u8, 0xe7_u8, 0xe9_u8, 0xfb_u8, 0x4a_u8, 0xdb_u8])
    def query_interface(this : IWSManResourceLocatorInternal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManResourceLocatorInternal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManResourceLocatorInternal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end

  end

  @[Extern]
  record IWSManInternalVtbl,
    query_interface : Proc(IWSManInternal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWSManInternal*, UInt32),
    release : Proc(IWSManInternal*, UInt32),
    get_type_info_count : Proc(IWSManInternal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWSManInternal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWSManInternal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWSManInternal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    config_sddl : Proc(IWSManInternal*, Void*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("04ae2b1d-9954-4d99-94a9-a961e72c3a13")]
  record IWSManInternal, lpVtbl : IWSManInternalVtbl* do
    GUID = LibC::GUID.new(0x4ae2b1d_u32, 0x9954_u16, 0x4d99_u16, StaticArray[0x94_u8, 0xa9_u8, 0xa9_u8, 0x61_u8, 0xe7_u8, 0x2c_u8, 0x3a_u8, 0x13_u8])
    def query_interface(this : IWSManInternal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWSManInternal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWSManInternal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWSManInternal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWSManInternal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWSManInternal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWSManInternal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def config_sddl(this : IWSManInternal*, session : Void*, resourceUri : Win32cr::System::Com::VARIANT, flags : Int32, resource : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.config_sddl.call(this, session, resourceUri, flags, resource)
    end

  end

  @[Link("wsmsvc")]
  lib C
    fun WSManInitialize(flags : UInt32, apiHandle : Win32cr::System::RemoteManagement::WSMAN_API**) : UInt32

    fun WSManDeinitialize(apiHandle : Win32cr::System::RemoteManagement::WSMAN_API*, flags : UInt32) : UInt32

    fun WSManGetErrorMessage(apiHandle : Win32cr::System::RemoteManagement::WSMAN_API*, flags : UInt32, languageCode : Win32cr::Foundation::PWSTR, errorCode : UInt32, messageLength : UInt32, message : UInt16*, messageLengthUsed : UInt32*) : UInt32

    fun WSManCreateSession(apiHandle : Win32cr::System::RemoteManagement::WSMAN_API*, connection : Win32cr::Foundation::PWSTR, flags : UInt32, serverAuthenticationCredentials : Win32cr::System::RemoteManagement::WSMAN_AUTHENTICATION_CREDENTIALS*, proxyInfo : Win32cr::System::RemoteManagement::WSMAN_PROXY_INFO*, session : Win32cr::System::RemoteManagement::WSMAN_SESSION**) : UInt32

    fun WSManCloseSession(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, flags : UInt32) : UInt32

    fun WSManSetSessionOption(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, option : Win32cr::System::RemoteManagement::WSManSessionOption, data : Win32cr::System::RemoteManagement::WSMAN_DATA*) : UInt32

    fun WSManGetSessionOptionAsDword(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, option : Win32cr::System::RemoteManagement::WSManSessionOption, value : UInt32*) : UInt32

    fun WSManGetSessionOptionAsString(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, option : Win32cr::System::RemoteManagement::WSManSessionOption, stringLength : UInt32, string : UInt16*, stringLengthUsed : UInt32*) : UInt32

    fun WSManCloseOperation(operationHandle : Win32cr::System::RemoteManagement::WSMAN_OPERATION*, flags : UInt32) : UInt32

    fun WSManCreateShell(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, flags : UInt32, resourceUri : Win32cr::Foundation::PWSTR, startupInfo : Win32cr::System::RemoteManagement::WSMAN_SHELL_STARTUP_INFO_V11*, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, createXml : Win32cr::System::RemoteManagement::WSMAN_DATA*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, shell : Win32cr::System::RemoteManagement::WSMAN_SHELL**) : Void

    fun WSManRunShellCommand(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, commandLine : Win32cr::Foundation::PWSTR, args : Win32cr::System::RemoteManagement::WSMAN_COMMAND_ARG_SET*, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND**) : Void

    fun WSManSignalShell(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND*, flags : UInt32, code : Win32cr::Foundation::PWSTR, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, signalOperation : Win32cr::System::RemoteManagement::WSMAN_OPERATION**) : Void

    fun WSManReceiveShellOutput(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND*, flags : UInt32, desiredStreamSet : Win32cr::System::RemoteManagement::WSMAN_STREAM_ID_SET*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, receiveOperation : Win32cr::System::RemoteManagement::WSMAN_OPERATION**) : Void

    fun WSManSendShellInput(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND*, flags : UInt32, streamId : Win32cr::Foundation::PWSTR, streamData : Win32cr::System::RemoteManagement::WSMAN_DATA*, endOfStream : Win32cr::Foundation::BOOL, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, sendOperation : Win32cr::System::RemoteManagement::WSMAN_OPERATION**) : Void

    fun WSManCloseCommand(commandHandle : Win32cr::System::RemoteManagement::WSMAN_COMMAND*, flags : UInt32, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*) : Void

    fun WSManCloseShell(shellHandle : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*) : Void

    fun WSManCreateShellEx(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, flags : UInt32, resourceUri : Win32cr::Foundation::PWSTR, shellId : Win32cr::Foundation::PWSTR, startupInfo : Win32cr::System::RemoteManagement::WSMAN_SHELL_STARTUP_INFO_V11*, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, createXml : Win32cr::System::RemoteManagement::WSMAN_DATA*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, shell : Win32cr::System::RemoteManagement::WSMAN_SHELL**) : Void

    fun WSManRunShellCommandEx(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, commandId : Win32cr::Foundation::PWSTR, commandLine : Win32cr::Foundation::PWSTR, args : Win32cr::System::RemoteManagement::WSMAN_COMMAND_ARG_SET*, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND**) : Void

    fun WSManDisconnectShell(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, disconnectInfo : Win32cr::System::RemoteManagement::WSMAN_SHELL_DISCONNECT_INFO*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*) : Void

    fun WSManReconnectShell(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*) : Void

    fun WSManReconnectShellCommand(commandHandle : Win32cr::System::RemoteManagement::WSMAN_COMMAND*, flags : UInt32, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*) : Void

    fun WSManConnectShell(session : Win32cr::System::RemoteManagement::WSMAN_SESSION*, flags : UInt32, resourceUri : Win32cr::Foundation::PWSTR, shellID : Win32cr::Foundation::PWSTR, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, connectXml : Win32cr::System::RemoteManagement::WSMAN_DATA*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, shell : Win32cr::System::RemoteManagement::WSMAN_SHELL**) : Void

    fun WSManConnectShellCommand(shell : Win32cr::System::RemoteManagement::WSMAN_SHELL*, flags : UInt32, commandID : Win32cr::Foundation::PWSTR, options : Win32cr::System::RemoteManagement::WSMAN_OPTION_SET*, connectXml : Win32cr::System::RemoteManagement::WSMAN_DATA*, async : Win32cr::System::RemoteManagement::WSMAN_SHELL_ASYNC*, command : Win32cr::System::RemoteManagement::WSMAN_COMMAND**) : Void

    fun WSManPluginReportContext(requestDetails : Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, flags : UInt32, context : Void*) : UInt32

    fun WSManPluginReceiveResult(requestDetails : Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, flags : UInt32, stream : Win32cr::Foundation::PWSTR, streamResult : Win32cr::System::RemoteManagement::WSMAN_DATA*, commandState : Win32cr::Foundation::PWSTR, exitCode : UInt32) : UInt32

    fun WSManPluginOperationComplete(requestDetails : Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, flags : UInt32, errorCode : UInt32, extendedInformation : Win32cr::Foundation::PWSTR) : UInt32

    fun WSManPluginGetOperationParameters(requestDetails : Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*, flags : UInt32, data : Win32cr::System::RemoteManagement::WSMAN_DATA*) : UInt32

    fun WSManPluginGetConfiguration(pluginContext : Void*, flags : UInt32, data : Win32cr::System::RemoteManagement::WSMAN_DATA*) : UInt32

    fun WSManPluginReportCompletion(pluginContext : Void*, flags : UInt32) : UInt32

    fun WSManPluginFreeRequestDetails(requestDetails : Win32cr::System::RemoteManagement::WSMAN_PLUGIN_REQUEST*) : UInt32

    fun WSManPluginAuthzUserComplete(senderDetails : Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, flags : UInt32, userAuthorizationContext : Void*, impersonationToken : Win32cr::Foundation::HANDLE, userIsAdministrator : Win32cr::Foundation::BOOL, errorCode : UInt32, extendedErrorInformation : Win32cr::Foundation::PWSTR) : UInt32

    fun WSManPluginAuthzOperationComplete(senderDetails : Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, flags : UInt32, userAuthorizationContext : Void*, errorCode : UInt32, extendedErrorInformation : Win32cr::Foundation::PWSTR) : UInt32

    fun WSManPluginAuthzQueryQuotaComplete(senderDetails : Win32cr::System::RemoteManagement::WSMAN_SENDER_DETAILS*, flags : UInt32, quota : Win32cr::System::RemoteManagement::WSMAN_AUTHZ_QUOTA*, errorCode : UInt32, extendedErrorInformation : Win32cr::Foundation::PWSTR) : UInt32

  end
end