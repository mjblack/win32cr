require "../foundation.cr"
require "../system/com.cr"

@[Link("delayimp")]
@[Link("user32")]
@[Link(ldflags: "/IGNORE:4199")]
@[Link(ldflags: "/DELAYLOAD:wsmsvc.dll")]
lib LibWin32
  WSMAN_FLAG_REQUESTED_API_VERSION_1_0 = 0_u32
  WSMAN_FLAG_REQUESTED_API_VERSION_1_1 = 1_u32
  WSMAN_OPERATION_INFOV1 = 0_u32
  WSMAN_OPERATION_INFOV2 = 2864434397_u32
  WSMAN_DEFAULT_TIMEOUT_MS = 60000_u32
  WSMAN_FLAG_RECEIVE_RESULT_NO_MORE_DATA = 1_u32
  WSMAN_FLAG_RECEIVE_FLUSH = 2_u32
  WSMAN_FLAG_RECEIVE_RESULT_DATA_BOUNDARY = 4_u32
  WSMAN_PLUGIN_PARAMS_MAX_ENVELOPE_SIZE = 1_u32
  WSMAN_PLUGIN_PARAMS_TIMEOUT = 2_u32
  WSMAN_PLUGIN_PARAMS_REMAINING_RESULT_SIZE = 3_u32
  WSMAN_PLUGIN_PARAMS_LARGEST_RESULT_SIZE = 4_u32
  WSMAN_PLUGIN_PARAMS_GET_REQUESTED_LOCALE = 5_u32
  WSMAN_PLUGIN_PARAMS_GET_REQUESTED_DATA_LOCALE = 6_u32
  WSMAN_PLUGIN_PARAMS_SHAREDHOST = 1_u32
  WSMAN_PLUGIN_PARAMS_RUNAS_USER = 2_u32
  WSMAN_PLUGIN_PARAMS_AUTORESTART = 3_u32
  WSMAN_PLUGIN_PARAMS_HOSTIDLETIMEOUTSECONDS = 4_u32
  WSMAN_PLUGIN_PARAMS_NAME = 5_u32
  WSMAN_PLUGIN_STARTUP_REQUEST_RECEIVED = 0_u32
  WSMAN_PLUGIN_STARTUP_AUTORESTARTED_REBOOT = 1_u32
  WSMAN_PLUGIN_STARTUP_AUTORESTARTED_CRASH = 2_u32
  WSMAN_PLUGIN_SHUTDOWN_SYSTEM = 1_u32
  WSMAN_PLUGIN_SHUTDOWN_SERVICE = 2_u32
  WSMAN_PLUGIN_SHUTDOWN_IISHOST = 3_u32
  WSMAN_PLUGIN_SHUTDOWN_IDLETIMEOUT_ELAPSED = 4_u32
  WSMAN_FLAG_SEND_NO_MORE_DATA = 1_u32
  ERROR_WSMAN_RESOURCE_NOT_FOUND = 2150858752_u32
  ERROR_WSMAN_INVALID_ACTIONURI = 2150858753_u32
  ERROR_WSMAN_INVALID_URI = 2150858754_u32
  ERROR_WSMAN_PROVIDER_FAILURE = 2150858755_u32
  ERROR_WSMAN_BATCH_COMPLETE = 2150858756_u32
  ERROR_WSMAN_CONFIG_CORRUPTED = 2150858757_u32
  ERROR_WSMAN_PULL_IN_PROGRESS = 2150858758_u32
  ERROR_WSMAN_ENUMERATION_CLOSED = 2150858759_u32
  ERROR_WSMAN_SUBSCRIPTION_CLOSED = 2150858760_u32
  ERROR_WSMAN_SUBSCRIPTION_CLOSE_IN_PROGRESS = 2150858761_u32
  ERROR_WSMAN_SUBSCRIPTION_CLIENT_DID_NOT_CALL_WITHIN_HEARTBEAT = 2150858762_u32
  ERROR_WSMAN_SUBSCRIPTION_NO_HEARTBEAT = 2150858763_u32
  ERROR_WSMAN_UNSUPPORTED_TIMEOUT = 2150858764_u32
  ERROR_WSMAN_SOAP_VERSION_MISMATCH = 2150858765_u32
  ERROR_WSMAN_SOAP_DATA_ENCODING_UNKNOWN = 2150858766_u32
  ERROR_WSMAN_INVALID_MESSAGE_INFORMATION_HEADER = 2150858767_u32
  ERROR_WSMAN_SOAP_FAULT_MUST_UNDERSTAND = 2150858768_u32
  ERROR_WSMAN_MESSAGE_INFORMATION_HEADER_REQUIRED = 2150858769_u32
  ERROR_WSMAN_DESTINATION_UNREACHABLE = 2150858770_u32
  ERROR_WSMAN_ACTION_NOT_SUPPORTED = 2150858771_u32
  ERROR_WSMAN_ENDPOINT_UNAVAILABLE = 2150858772_u32
  ERROR_WSMAN_INVALID_REPRESENTATION = 2150858773_u32
  ERROR_WSMAN_ENUMERATE_INVALID_EXPIRATION_TIME = 2150858774_u32
  ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TIME = 2150858775_u32
  ERROR_WSMAN_ENUMERATE_FILTERING_NOT_SUPPORTED = 2150858776_u32
  ERROR_WSMAN_ENUMERATE_FILTER_DIALECT_REQUESTED_UNAVAILABLE = 2150858777_u32
  ERROR_WSMAN_ENUMERATE_CANNOT_PROCESS_FILTER = 2150858778_u32
  ERROR_WSMAN_ENUMERATE_INVALID_ENUMERATION_CONTEXT = 2150858779_u32
  ERROR_WSMAN_ENUMERATE_TIMED_OUT = 2150858780_u32
  ERROR_WSMAN_ENUMERATE_UNABLE_TO_RENEW = 2150858781_u32
  ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_UNAVAILABLE = 2150858782_u32
  ERROR_WSMAN_EVENTING_INVALID_EXPIRATION_TIME = 2150858783_u32
  ERROR_WSMAN_EVENTING_UNSUPPORTED_EXPIRATION_TYPE = 2150858784_u32
  ERROR_WSMAN_EVENTING_FILTERING_NOT_SUPPORTED = 2150858785_u32
  ERROR_WSMAN_EVENTING_FILTERING_REQUESTED_UNAVAILABLE = 2150858786_u32
  ERROR_WSMAN_EVENTING_SOURCE_UNABLE_TO_PROCESS = 2150858787_u32
  ERROR_WSMAN_EVENTING_UNABLE_TO_RENEW = 2150858788_u32
  ERROR_WSMAN_EVENTING_INVALID_MESSAGE = 2150858789_u32
  ERROR_WSMAN_ENVELOPE_TOO_LARGE = 2150858790_u32
  ERROR_WSMAN_INVALID_SOAP_BODY = 2150858791_u32
  ERROR_WSMAN_INVALID_RESUMPTION_CONTEXT = 2150858792_u32
  ERROR_WSMAN_OPERATION_TIMEDOUT = 2150858793_u32
  ERROR_WSMAN_RESUMPTION_NOT_SUPPORTED = 2150858794_u32
  ERROR_WSMAN_RESUMPTION_TYPE_NOT_SUPPORTED = 2150858795_u32
  ERROR_WSMAN_UNSUPPORTED_ENCODING = 2150858796_u32
  ERROR_WSMAN_URI_LIMIT = 2150858797_u32
  ERROR_WSMAN_INVALID_PROPOSED_ID = 2150858798_u32
  ERROR_WSMAN_INVALID_BATCH_PARAMETER = 2150858799_u32
  ERROR_WSMAN_NO_ACK = 2150858800_u32
  ERROR_WSMAN_ACTION_MISMATCH = 2150858801_u32
  ERROR_WSMAN_CONCURRENCY = 2150858802_u32
  ERROR_WSMAN_ALREADY_EXISTS = 2150858803_u32
  ERROR_WSMAN_DELIVERY_REFUSED = 2150858804_u32
  ERROR_WSMAN_ENCODING_LIMIT = 2150858805_u32
  ERROR_WSMAN_FAILED_AUTHENTICATION = 2150858806_u32
  ERROR_WSMAN_INCOMPATIBLE_EPR = 2150858807_u32
  ERROR_WSMAN_INVALID_BOOKMARK = 2150858808_u32
  ERROR_WSMAN_INVALID_OPTIONS = 2150858809_u32
  ERROR_WSMAN_INVALID_PARAMETER = 2150858810_u32
  ERROR_WSMAN_INVALID_RESOURCE_URI = 2150858811_u32
  ERROR_WSMAN_INVALID_SYSTEM = 2150858812_u32
  ERROR_WSMAN_INVALID_SELECTORS = 2150858813_u32
  ERROR_WSMAN_METADATA_REDIRECT = 2150858814_u32
  ERROR_WSMAN_QUOTA_LIMIT = 2150858815_u32
  ERROR_WSMAN_RENAME_FAILURE = 2150858816_u32
  ERROR_WSMAN_SCHEMA_VALIDATION_ERROR = 2150858817_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE = 2150858818_u32
  ERROR_WSMAN_INVALID_XML = 2150858819_u32
  ERROR_WSMAN_INVALID_KEY = 2150858820_u32
  ERROR_WSMAN_DELIVER_IN_PROGRESS = 2150858821_u32
  ERROR_WSMAN_SYSTEM_NOT_FOUND = 2150858822_u32
  ERROR_WSMAN_MAX_ENVELOPE_SIZE = 2150858823_u32
  ERROR_WSMAN_MAX_ENVELOPE_SIZE_EXCEEDED = 2150858824_u32
  ERROR_WSMAN_SERVER_ENVELOPE_LIMIT = 2150858825_u32
  ERROR_WSMAN_SELECTOR_LIMIT = 2150858826_u32
  ERROR_WSMAN_OPTION_LIMIT = 2150858827_u32
  ERROR_WSMAN_CHARACTER_SET = 2150858828_u32
  ERROR_WSMAN_UNREPORTABLE_SUCCESS = 2150858829_u32
  ERROR_WSMAN_WHITESPACE = 2150858830_u32
  ERROR_WSMAN_FILTERING_REQUIRED = 2150858831_u32
  ERROR_WSMAN_BOOKMARK_EXPIRED = 2150858832_u32
  ERROR_WSMAN_OPTIONS_NOT_SUPPORTED = 2150858833_u32
  ERROR_WSMAN_OPTIONS_INVALID_NAME = 2150858834_u32
  ERROR_WSMAN_OPTIONS_INVALID_VALUE = 2150858835_u32
  ERROR_WSMAN_PARAMETER_TYPE_MISMATCH = 2150858836_u32
  ERROR_WSMAN_INVALID_PARAMETER_NAME = 2150858837_u32
  ERROR_WSMAN_INVALID_XML_VALUES = 2150858838_u32
  ERROR_WSMAN_INVALID_XML_MISSING_VALUES = 2150858839_u32
  ERROR_WSMAN_INVALID_XML_NAMESPACE = 2150858840_u32
  ERROR_WSMAN_INVALID_XML_FRAGMENT = 2150858841_u32
  ERROR_WSMAN_INSUFFCIENT_SELECTORS = 2150858842_u32
  ERROR_WSMAN_UNEXPECTED_SELECTORS = 2150858843_u32
  ERROR_WSMAN_SELECTOR_TYPEMISMATCH = 2150858844_u32
  ERROR_WSMAN_INVALID_SELECTOR_VALUE = 2150858845_u32
  ERROR_WSMAN_AMBIGUOUS_SELECTORS = 2150858846_u32
  ERROR_WSMAN_DUPLICATE_SELECTORS = 2150858847_u32
  ERROR_WSMAN_INVALID_TARGET_SELECTORS = 2150858848_u32
  ERROR_WSMAN_INVALID_TARGET_RESOURCEURI = 2150858849_u32
  ERROR_WSMAN_INVALID_TARGET_SYSTEM = 2150858850_u32
  ERROR_WSMAN_TARGET_ALREADY_EXISTS = 2150858851_u32
  ERROR_WSMAN_AUTHORIZATION_MODE_NOT_SUPPORTED = 2150858852_u32
  ERROR_WSMAN_ACK_NOT_SUPPORTED = 2150858853_u32
  ERROR_WSMAN_OPERATION_TIMEOUT_NOT_SUPPORTED = 2150858854_u32
  ERROR_WSMAN_LOCALE_NOT_SUPPORTED = 2150858855_u32
  ERROR_WSMAN_EXPIRATION_TIME_NOT_SUPPORTED = 2150858856_u32
  ERROR_WSMAN_DELIVERY_RETRIES_NOT_SUPPORTED = 2150858857_u32
  ERROR_WSMAN_HEARTBEATS_NOT_SUPPORTED = 2150858858_u32
  ERROR_WSMAN_BOOKMARKS_NOT_SUPPORTED = 2150858859_u32
  ERROR_WSMAN_MAXITEMS_NOT_SUPPORTED = 2150858860_u32
  ERROR_WSMAN_MAXTIME_NOT_SUPPORTED = 2150858861_u32
  ERROR_WSMAN_MAXENVELOPE_SIZE_NOT_SUPPORTED = 2150858862_u32
  ERROR_WSMAN_MAXENVELOPE_POLICY_NOT_SUPPORTED = 2150858863_u32
  ERROR_WSMAN_FILTERING_REQUIRED_NOT_SUPPORTED = 2150858864_u32
  ERROR_WSMAN_INSECURE_ADDRESS_NOT_SUPPORTED = 2150858865_u32
  ERROR_WSMAN_FORMAT_MISMATCH_NOT_SUPPORTED = 2150858866_u32
  ERROR_WSMAN_FORMAT_SECURITY_TOKEN_NOT_SUPPORTED = 2150858867_u32
  ERROR_WSMAN_BAD_METHOD = 2150858868_u32
  ERROR_WSMAN_UNSUPPORTED_MEDIA = 2150858869_u32
  ERROR_WSMAN_UNSUPPORTED_ADDRESSING_MODE = 2150858870_u32
  ERROR_WSMAN_FRAGMENT_TRANSFER_NOT_SUPPORTED = 2150858871_u32
  ERROR_WSMAN_ENUMERATION_INITIALIZING = 2150858872_u32
  ERROR_WSMAN_CONNECTOR_GET = 2150858873_u32
  ERROR_WSMAN_URI_QUERY_STRING_SYNTAX_ERROR = 2150858874_u32
  ERROR_WSMAN_INEXISTENT_MAC_ADDRESS = 2150858875_u32
  ERROR_WSMAN_NO_UNICAST_ADDRESSES = 2150858876_u32
  ERROR_WSMAN_NO_DHCP_ADDRESSES = 2150858877_u32
  ERROR_WSMAN_MIN_ENVELOPE_SIZE = 2150858878_u32
  ERROR_WSMAN_EPR_NESTING_EXCEEDED = 2150858879_u32
  ERROR_WSMAN_REQUEST_INIT_ERROR = 2150858880_u32
  ERROR_WSMAN_INVALID_TIMEOUT_HEADER = 2150858881_u32
  ERROR_WSMAN_CERT_NOT_FOUND = 2150858882_u32
  ERROR_WSMAN_PLUGIN_FAILED = 2150858883_u32
  ERROR_WSMAN_ENUMERATION_INVALID = 2150858884_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_MUTUAL = 2150858885_u32
  ERROR_WSMAN_ENUMERATION_MODE_UNSUPPORTED = 2150858886_u32
  ERROR_WSMAN_MUSTUNDERSTAND_ON_LOCALE_UNSUPPORTED = 2150858887_u32
  ERROR_WSMAN_POLICY_CORRUPTED = 2150858888_u32
  ERROR_WSMAN_LISTENER_ADDRESS_INVALID = 2150858889_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_GPO_CONTROLLED_SETTING = 2150858890_u32
  ERROR_WSMAN_EVENTING_CONCURRENT_CLIENT_RECEIVE = 2150858891_u32
  ERROR_WSMAN_EVENTING_FAST_SENDER = 2150858892_u32
  ERROR_WSMAN_EVENTING_INSECURE_PUSHSUBSCRIPTION_CONNECTION = 2150858893_u32
  ERROR_WSMAN_EVENTING_INVALID_EVENTSOURCE = 2150858894_u32
  ERROR_WSMAN_EVENTING_NOMATCHING_LISTENER = 2150858895_u32
  ERROR_WSMAN_FRAGMENT_DIALECT_REQUESTED_UNAVAILABLE = 2150858896_u32
  ERROR_WSMAN_MISSING_FRAGMENT_PATH = 2150858897_u32
  ERROR_WSMAN_INVALID_FRAGMENT_DIALECT = 2150858898_u32
  ERROR_WSMAN_INVALID_FRAGMENT_PATH = 2150858899_u32
  ERROR_WSMAN_EVENTING_INCOMPATIBLE_BATCHPARAMS_AND_DELIVERYMODE = 2150858900_u32
  ERROR_WSMAN_EVENTING_LOOPBACK_TESTFAILED = 2150858901_u32
  ERROR_WSMAN_EVENTING_INVALID_ENDTO_ADDRESSS = 2150858902_u32
  ERROR_WSMAN_EVENTING_INVALID_INCOMING_EVENT_PACKET_HEADER = 2150858903_u32
  ERROR_WSMAN_SESSION_ALREADY_CLOSED = 2150858904_u32
  ERROR_WSMAN_SUBSCRIPTION_LISTENER_NOLONGERVALID = 2150858905_u32
  ERROR_WSMAN_PROVIDER_LOAD_FAILED = 2150858906_u32
  ERROR_WSMAN_EVENTING_SUBSCRIPTIONCLOSED_BYREMOTESERVICE = 2150858907_u32
  ERROR_WSMAN_EVENTING_DELIVERYFAILED_FROMSOURCE = 2150858908_u32
  ERROR_WSMAN_SECURITY_UNMAPPED = 2150858909_u32
  ERROR_WSMAN_EVENTING_SUBSCRIPTION_CANCELLED_BYSOURCE = 2150858910_u32
  ERROR_WSMAN_INVALID_HOSTNAME_PATTERN = 2150858911_u32
  ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO = 2150858912_u32
  ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO_ADDRESSS = 2150858913_u32
  ERROR_WSMAN_EVENTING_INVALID_NOTIFYTO_ADDRESSS = 2150858914_u32
  ERROR_WSMAN_EVENTING_INVALID_LOCALE_IN_DELIVERY = 2150858915_u32
  ERROR_WSMAN_EVENTING_INVALID_HEARTBEAT = 2150858916_u32
  ERROR_WSMAN_MACHINE_OPTION_REQUIRED = 2150858917_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE_OPTIONS = 2150858918_u32
  ERROR_WSMAN_BATCHSIZE_TOO_SMALL = 2150858919_u32
  ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_INVALID = 2150858920_u32
  ERROR_WSMAN_PROVSYS_NOT_SUPPORTED = 2150858921_u32
  ERROR_WSMAN_PUSH_SUBSCRIPTION_CONFIG_INVALID = 2150858922_u32
  ERROR_WSMAN_CREDS_PASSED_WITH_NO_AUTH_FLAG = 2150858923_u32
  ERROR_WSMAN_CLIENT_INVALID_FLAG = 2150858924_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_AUTH_FLAGS = 2150858925_u32
  ERROR_WSMAN_CLIENT_SPN_WRONG_AUTH = 2150858926_u32
  ERROR_WSMAN_CLIENT_CERT_UNNEEDED_CREDS = 2150858927_u32
  ERROR_WSMAN_CLIENT_USERNAME_PASSWORD_NEEDED = 2150858928_u32
  ERROR_WSMAN_CLIENT_CERT_UNNEEDED_USERNAME = 2150858929_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_NEEDED = 2150858930_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FLAG_NEEDED = 2150858931_u32
  ERROR_WSMAN_CLIENT_CERT_NEEDED = 2150858932_u32
  ERROR_WSMAN_CLIENT_CERT_UNKNOWN_TYPE = 2150858933_u32
  ERROR_WSMAN_CLIENT_CERT_UNKNOWN_LOCATION = 2150858934_u32
  ERROR_WSMAN_CLIENT_INVALID_CERT = 2150858935_u32
  ERROR_WSMAN_CLIENT_LOCAL_INVALID_CREDS = 2150858936_u32
  ERROR_WSMAN_CLIENT_LOCAL_INVALID_CONNECTION_OPTIONS = 2150858937_u32
  ERROR_WSMAN_CLIENT_CREATESESSION_NULL_PARAM = 2150858938_u32
  ERROR_WSMAN_CLIENT_ENUMERATE_NULL_PARAM = 2150858939_u32
  ERROR_WSMAN_CLIENT_SUBSCRIBE_NULL_PARAM = 2150858940_u32
  ERROR_WSMAN_CLIENT_NULL_RESULT_PARAM = 2150858941_u32
  ERROR_WSMAN_CLIENT_NO_HANDLE = 2150858942_u32
  ERROR_WSMAN_CLIENT_BLANK_URI = 2150858943_u32
  ERROR_WSMAN_CLIENT_INVALID_RESOURCE_LOCATOR = 2150858944_u32
  ERROR_WSMAN_CLIENT_BLANK_INPUT_XML = 2150858945_u32
  ERROR_WSMAN_CLIENT_BATCH_ITEMS_TOO_SMALL = 2150858946_u32
  ERROR_WSMAN_CLIENT_MAX_CHARS_TOO_SMALL = 2150858947_u32
  ERROR_WSMAN_CLIENT_BLANK_ACTION_URI = 2150858948_u32
  ERROR_WSMAN_CLIENT_ZERO_HEARTBEAT = 2150858949_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_DELIVERY_MODES = 2150858950_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_ENVELOPE_POLICIES = 2150858951_u32
  ERROR_WSMAN_CLIENT_UNKNOWN_EXPIRATION_TYPE = 2150858952_u32
  ERROR_WSMAN_CLIENT_MISSING_EXPIRATION = 2150858953_u32
  ERROR_WSMAN_CLIENT_PULL_INVALID_FLAGS = 2150858954_u32
  ERROR_WSMAN_CLIENT_PUSH_UNSUPPORTED_TRANSPORT = 2150858955_u32
  ERROR_WSMAN_CLIENT_PUSH_HOST_TOO_LONG = 2150858956_u32
  ERROR_WSMAN_CLIENT_COMPRESSION_INVALID_OPTION = 2150858957_u32
  ERROR_WSMAN_CLIENT_DELIVERENDSUBSCRIPTION_NULL_PARAM = 2150858958_u32
  ERROR_WSMAN_CLIENT_DELIVEREVENTS_NULL_PARAM = 2150858959_u32
  ERROR_WSMAN_CLIENT_GETBOOKMARK_NULL_PARAM = 2150858960_u32
  ERROR_WSMAN_CLIENT_DECODEOBJECT_NULL_PARAM = 2150858961_u32
  ERROR_WSMAN_CLIENT_ENCODEOBJECT_NULL_PARAM = 2150858962_u32
  ERROR_WSMAN_CLIENT_ENUMERATORADDOBJECT_NULL_PARAM = 2150858963_u32
  ERROR_WSMAN_CLIENT_ENUMERATORNEXTOBJECT_NULL_PARAM = 2150858964_u32
  ERROR_WSMAN_CLIENT_CONSTRUCTERROR_NULL_PARAM = 2150858965_u32
  ERROR_WSMAN_SERVER_NONPULLSUBSCRIBE_NULL_PARAM = 2150858966_u32
  ERROR_WSMAN_CLIENT_UNENCRYPTED_HTTP_ONLY = 2150858967_u32
  ERROR_WSMAN_CANNOT_USE_CERTIFICATES_FOR_HTTP = 2150858968_u32
  ERROR_WSMAN_CONNECTIONSTR_INVALID = 2150858969_u32
  ERROR_WSMAN_TRANSPORT_NOT_SUPPORTED = 2150858970_u32
  ERROR_WSMAN_PORT_INVALID = 2150858971_u32
  ERROR_WSMAN_CONFIG_PORT_INVALID = 2150858972_u32
  ERROR_WSMAN_SENDHEARBEAT_EMPTY_ENUMERATOR = 2150858973_u32
  ERROR_WSMAN_CLIENT_UNENCRYPTED_DISABLED = 2150858974_u32
  ERROR_WSMAN_CLIENT_BASIC_AUTHENTICATION_DISABLED = 2150858975_u32
  ERROR_WSMAN_CLIENT_DIGEST_AUTHENTICATION_DISABLED = 2150858976_u32
  ERROR_WSMAN_CLIENT_NEGOTIATE_AUTHENTICATION_DISABLED = 2150858977_u32
  ERROR_WSMAN_CLIENT_KERBEROS_AUTHENTICATION_DISABLED = 2150858978_u32
  ERROR_WSMAN_CLIENT_CERTIFICATES_AUTHENTICATION_DISABLED = 2150858979_u32
  ERROR_WSMAN_SERVER_NOT_TRUSTED = 2150858980_u32
  ERROR_WSMAN_EXPLICIT_CREDENTIALS_REQUIRED = 2150858981_u32
  ERROR_WSMAN_CERT_THUMBPRINT_NOT_BLANK = 2150858982_u32
  ERROR_WSMAN_CERT_THUMBPRINT_BLANK = 2150858983_u32
  ERROR_WSMAN_CONFIG_CANNOT_SHARE_SSL_CONFIG = 2150858984_u32
  ERROR_WSMAN_CONFIG_CERT_CN_DOES_NOT_MATCH_HOSTNAME = 2150858985_u32
  ERROR_WSMAN_CONFIG_HOSTNAME_CHANGE_WITHOUT_CERT = 2150858986_u32
  ERROR_WSMAN_CONFIG_THUMBPRINT_SHOULD_BE_EMPTY = 2150858987_u32
  ERROR_WSMAN_INVALID_IPFILTER = 2150858988_u32
  ERROR_WSMAN_CANNOT_CHANGE_KEYS = 2150858989_u32
  ERROR_WSMAN_CERT_INVALID_USAGE = 2150858990_u32
  ERROR_WSMAN_RESPONSE_NO_RESULTS = 2150858991_u32
  ERROR_WSMAN_CREATE_RESPONSE_NO_EPR = 2150858992_u32
  ERROR_WSMAN_RESPONSE_INVALID_ENUMERATION_CONTEXT = 2150858993_u32
  ERROR_WSMAN_RESPONSE_NO_XML_FRAGMENT_WRAPPER = 2150858994_u32
  ERROR_WSMAN_RESPONSE_INVALID_MESSAGE_INFORMATION_HEADER = 2150858995_u32
  ERROR_WSMAN_RESPONSE_NO_SOAP_HEADER_BODY = 2150858996_u32
  ERROR_WSMAN_HTTP_NO_RESPONSE_DATA = 2150858997_u32
  ERROR_WSMAN_RESPONSE_INVALID_SOAP_FAULT = 2150858998_u32
  ERROR_WSMAN_HTTP_INVALID_CONTENT_TYPE_IN_RESPONSE_DATA = 2150858999_u32
  ERROR_WSMAN_HTTP_CONTENT_TYPE_MISSMATCH_RESPONSE_DATA = 2150859000_u32
  ERROR_WSMAN_CANNOT_DECRYPT = 2150859001_u32
  ERROR_WSMAN_INVALID_URI_WMI_SINGLETON = 2150859002_u32
  ERROR_WSMAN_INVALID_URI_WMI_ENUM_WQL = 2150859003_u32
  ERROR_WSMAN_NO_IDENTIFY_FOR_LOCAL_SESSION = 2150859004_u32
  ERROR_WSMAN_NO_PUSH_SUBSCRIPTION_FOR_LOCAL_SESSION = 2150859005_u32
  ERROR_WSMAN_INVALID_SUBSCRIPTION_MANAGER = 2150859006_u32
  ERROR_WSMAN_NON_PULL_SUBSCRIPTION_NOT_SUPPORTED = 2150859007_u32
  ERROR_WSMAN_WMI_MAX_NESTED = 2150859008_u32
  ERROR_WSMAN_REMOTE_CIMPATH_NOT_SUPPORTED = 2150859009_u32
  ERROR_WSMAN_WMI_PROVIDER_NOT_CAPABLE = 2150859010_u32
  ERROR_WSMAN_WMI_INVALID_VALUE = 2150859011_u32
  ERROR_WSMAN_WMI_SVC_ACCESS_DENIED = 2150859012_u32
  ERROR_WSMAN_WMI_PROVIDER_ACCESS_DENIED = 2150859013_u32
  ERROR_WSMAN_WMI_CANNOT_CONNECT_ACCESS_DENIED = 2150859014_u32
  ERROR_WSMAN_INVALID_FILTER_XML = 2150859015_u32
  ERROR_WSMAN_ENUMERATE_WMI_INVALID_KEY = 2150859016_u32
  ERROR_WSMAN_INVALID_FRAGMENT_PATH_BLANK = 2150859017_u32
  ERROR_WSMAN_INVALID_CHARACTERS_IN_RESPONSE = 2150859018_u32
  ERROR_WSMAN_KERBEROS_IPADDRESS = 2150859019_u32
  ERROR_WSMAN_CLIENT_WORKGROUP_NO_KERBEROS = 2150859020_u32
  ERROR_WSMAN_INVALID_BATCH_SETTINGS_PARAMETER = 2150859021_u32
  ERROR_WSMAN_SERVER_DESTINATION_LOCALHOST = 2150859022_u32
  ERROR_WSMAN_UNKNOWN_HTTP_STATUS_RETURNED = 2150859023_u32
  ERROR_WSMAN_UNSUPPORTED_HTTP_STATUS_REDIRECT = 2150859024_u32
  ERROR_WSMAN_HTTP_REQUEST_TOO_LARGE_STATUS = 2150859025_u32
  ERROR_WSMAN_HTTP_SERVICE_UNAVAILABLE_STATUS = 2150859026_u32
  ERROR_WSMAN_HTTP_NOT_FOUND_STATUS = 2150859027_u32
  ERROR_WSMAN_EVENTING_MISSING_LOCALE_IN_DELIVERY = 2150859028_u32
  ERROR_WSMAN_QUICK_CONFIG_FAILED_CERT_REQUIRED = 2150859029_u32
  ERROR_WSMAN_QUICK_CONFIG_FIREWALL_EXCEPTIONS_DISALLOWED = 2150859030_u32
  ERROR_WSMAN_QUICK_CONFIG_LOCAL_POLICY_CHANGE_DISALLOWED = 2150859031_u32
  ERROR_WSMAN_INVALID_SELECTOR_NAME = 2150859032_u32
  ERROR_WSMAN_ENCODING_TYPE = 2150859033_u32
  ERROR_WSMAN_ENDPOINT_UNAVAILABLE_INVALID_VALUE = 2150859034_u32
  ERROR_WSMAN_INVALID_HEADER = 2150859035_u32
  ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TYPE = 2150859036_u32
  ERROR_WSMAN_MAX_ELEMENTS_NOT_SUPPORTED = 2150859037_u32
  ERROR_WSMAN_WMI_PROVIDER_INVALID_PARAMETER = 2150859038_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_ENUM_MODE_FLAGS = 2150859039_u32
  ERROR_WINRS_CLIENT_INVALID_FLAG = 2150859040_u32
  ERROR_WINRS_CLIENT_NULL_PARAM = 2150859041_u32
  ERROR_WSMAN_CANNOT_PROCESS_FILTER = 2150859042_u32
  ERROR_WSMAN_CLIENT_ENUMERATORADDEVENT_NULL_PARAM = 2150859043_u32
  ERROR_WSMAN_ADDOBJECT_MISSING_OBJECT = 2150859044_u32
  ERROR_WSMAN_ADDOBJECT_MISSING_EPR = 2150859045_u32
  ERROR_WSMAN_NETWORK_TIMEDOUT = 2150859046_u32
  ERROR_WINRS_RECEIVE_IN_PROGRESS = 2150859047_u32
  ERROR_WINRS_RECEIVE_NO_RESPONSE_DATA = 2150859048_u32
  ERROR_WINRS_CLIENT_CREATESHELL_NULL_PARAM = 2150859049_u32
  ERROR_WINRS_CLIENT_CLOSESHELL_NULL_PARAM = 2150859050_u32
  ERROR_WINRS_CLIENT_FREECREATESHELLRESULT_NULL_PARAM = 2150859051_u32
  ERROR_WINRS_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859052_u32
  ERROR_WINRS_CLIENT_FREERUNCOMMANDRESULT_NULL_PARAM = 2150859053_u32
  ERROR_WINRS_CLIENT_SIGNAL_NULL_PARAM = 2150859054_u32
  ERROR_WINRS_CLIENT_RECEIVE_NULL_PARAM = 2150859055_u32
  ERROR_WINRS_CLIENT_FREEPULLRESULT_NULL_PARAM = 2150859056_u32
  ERROR_WINRS_CLIENT_PULL_NULL_PARAM = 2150859057_u32
  ERROR_WINRS_CLIENT_CLOSERECEIVEHANDLE_NULL_PARAM = 2150859058_u32
  ERROR_WINRS_CLIENT_SEND_NULL_PARAM = 2150859059_u32
  ERROR_WINRS_CLIENT_PUSH_NULL_PARAM = 2150859060_u32
  ERROR_WINRS_CLIENT_CLOSESENDHANDLE_NULL_PARAM = 2150859061_u32
  ERROR_WINRS_CLIENT_GET_NULL_PARAM = 2150859062_u32
  ERROR_WSMAN_POLYMORPHISM_MODE_UNSUPPORTED = 2150859063_u32
  ERROR_WSMAN_REQUEST_NOT_SUPPORTED_AT_SERVICE = 2150859064_u32
  ERROR_WSMAN_URI_NON_DMTF_CLASS = 2150859065_u32
  ERROR_WSMAN_URI_WRONG_DMTF_VERSION = 2150859066_u32
  ERROR_WSMAN_DIFFERENT_CIM_SELECTOR = 2150859067_u32
  ERROR_WSMAN_PUSHSUBSCRIPTION_INVALIDUSERACCOUNT = 2150859068_u32
  ERROR_WSMAN_EVENTING_NONDOMAINJOINED_PUBLISHER = 2150859069_u32
  ERROR_WSMAN_EVENTING_NONDOMAINJOINED_COLLECTOR = 2150859070_u32
  ERROR_WSMAN_CONFIG_READONLY_PROPERTY = 2150859071_u32
  ERROR_WINRS_CODE_PAGE_NOT_SUPPORTED = 2150859072_u32
  ERROR_WSMAN_CLIENT_DISABLE_LOOPBACK_WITH_EXPLICIT_CREDENTIALS = 2150859073_u32
  ERROR_WSMAN_CLIENT_INVALID_DISABLE_LOOPBACK = 2150859074_u32
  ERROR_WSMAN_CLIENT_ENUM_RECEIVED_TOO_MANY_ITEMS = 2150859075_u32
  ERROR_WSMAN_MULTIPLE_CREDENTIALS = 2150859076_u32
  ERROR_WSMAN_AUTHENTICATION_INVALID_FLAG = 2150859077_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_DEFAULT_AUTHENTICATION = 2150859078_u32
  ERROR_WSMAN_CLIENT_USERNAME_AND_PASSWORD_NEEDED = 2150859079_u32
  ERROR_WSMAN_CLIENT_INVALID_CERT_DNS_OR_UPN = 2150859080_u32
  ERROR_WSMAN_CREATESHELL_NULL_ENVIRONMENT_VARIABLE_NAME = 2150859081_u32
  ERROR_WSMAN_SHELL_ALREADY_CLOSED = 2150859082_u32
  ERROR_WSMAN_CREATESHELL_NULL_STREAMID = 2150859083_u32
  ERROR_WSMAN_SHELL_INVALID_SHELL_HANDLE = 2150859084_u32
  ERROR_WSMAN_SHELL_INVALID_COMMAND_HANDLE = 2150859085_u32
  ERROR_WSMAN_RUNSHELLCOMMAND_NULL_ARGUMENT = 2150859086_u32
  ERROR_WSMAN_COMMAND_ALREADY_CLOSED = 2150859087_u32
  ERROR_WSMAN_SENDSHELLINPUT_INVALID_STREAMID_INDEX = 2150859088_u32
  ERROR_WSMAN_SHELL_SYNCHRONOUS_NOT_SUPPORTED = 2150859089_u32
  ERROR_WSMAN_NO_CERTMAPPING_OPERATION_FOR_LOCAL_SESSION = 2150859090_u32
  ERROR_WSMAN_CERTMAPPING_CONFIGLIMIT_EXCEEDED = 2150859091_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDUSERCREDENTIALS = 2150859092_u32
  ERROR_WSMAN_CERT_INVALID_USAGE_CLIENT = 2150859093_u32
  ERROR_WSMAN_CERT_MISSING_AUTH_FLAG = 2150859094_u32
  ERROR_WSMAN_CERT_MULTIPLE_CREDENTIALS_FLAG = 2150859095_u32
  ERROR_WSMAN_CONFIG_SHELL_URI_INVALID = 2150859096_u32
  ERROR_WSMAN_CONFIG_SHELL_URI_CMDSHELLURI_NOTPERMITTED = 2150859097_u32
  ERROR_WSMAN_CONFIG_SHELLURI_INVALID_PROCESSPATH = 2150859098_u32
  ERROR_WINRS_SHELL_URI_INVALID = 2150859099_u32
  ERROR_WSMAN_INVALID_SECURITY_DESCRIPTOR = 2150859100_u32
  ERROR_WSMAN_POLICY_TOO_COMPLEX = 2150859101_u32
  ERROR_WSMAN_POLICY_CANNOT_COMPLY = 2150859102_u32
  ERROR_WSMAN_INVALID_CONNECTIONRETRY = 2150859103_u32
  ERROR_WSMAN_URISECURITY_INVALIDURIKEY = 2150859104_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDSUBJECTKEY = 2150859105_u32
  ERROR_WSMAN_CERTMAPPING_INVALIDISSUERKEY = 2150859106_u32
  ERROR_WSMAN_INVALID_PUBLISHERS_TYPE = 2150859107_u32
  ERROR_WSMAN_CLIENT_INVALID_DELIVERY_RETRY = 2150859108_u32
  ERROR_WSMAN_CLIENT_NULL_PUBLISHERS = 2150859109_u32
  ERROR_WSMAN_CLIENT_NULL_ISSUERS = 2150859110_u32
  ERROR_WSMAN_CLIENT_NO_SOURCES = 2150859111_u32
  ERROR_WSMAN_INVALID_SUBSCRIBE_OBJECT = 2150859112_u32
  ERROR_WSMAN_PUBLIC_FIREWALL_PROFILE_ACTIVE = 2150859113_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDTOOLONG = 2150859114_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDBLANK = 2150859115_u32
  ERROR_WSMAN_CERTMAPPING_PASSWORDUSERTUPLE = 2150859116_u32
  ERROR_WSMAN_INVALID_PROVIDER_RESPONSE = 2150859117_u32
  ERROR_WSMAN_SHELL_NOT_INITIALIZED = 2150859118_u32
  ERROR_WSMAN_CONFIG_SHELLURI_INVALID_OPERATION_ON_KEY = 2150859119_u32
  ERROR_WSMAN_HTTP_STATUS_SERVER_ERROR = 2150859120_u32
  ERROR_WSMAN_HTTP_STATUS_BAD_REQUEST = 2150859121_u32
  ERROR_WSMAN_CONFIG_CANNOT_CHANGE_CERTMAPPING_KEYS = 2150859122_u32
  ERROR_WSMAN_HTML_ERROR = 2150859123_u32
  ERROR_WSMAN_CLIENT_INITIALIZE_NULL_PARAM = 2150859124_u32
  ERROR_WSMAN_CLIENT_INVALID_INIT_APPLICATION_FLAG = 2150859125_u32
  ERROR_WSMAN_CLIENT_INVALID_DEINIT_APPLICATION_FLAG = 2150859126_u32
  ERROR_WSMAN_CLIENT_SETSESSIONOPTION_NULL_PARAM = 2150859127_u32
  ERROR_WSMAN_CLIENT_SETSESSIONOPTION_INVALID_PARAM = 2150859128_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_INVALID_PARAM = 2150859129_u32
  ERROR_WSMAN_CLIENT_CREATESHELL_NULL_PARAM = 2150859130_u32
  ERROR_WSMAN_CLIENT_INVALID_CREATE_SHELL_FLAG = 2150859131_u32
  ERROR_WSMAN_CLIENT_INVALID_CLOSE_SHELL_FLAG = 2150859132_u32
  ERROR_WSMAN_CLIENT_INVALID_CLOSE_COMMAND_FLAG = 2150859133_u32
  ERROR_WSMAN_CLIENT_CLOSESHELL_NULL_PARAM = 2150859134_u32
  ERROR_WSMAN_CLIENT_CLOSECOMMAND_NULL_PARAM = 2150859135_u32
  ERROR_WSMAN_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859136_u32
  ERROR_WSMAN_CLIENT_INVALID_RUNCOMMAND_FLAG = 2150859137_u32
  ERROR_WSMAN_CLIENT_RUNCOMMAND_NOTCOMPLETED = 2150859138_u32
  ERROR_WSMAN_NO_COMMAND_RESPONSE = 2150859139_u32
  ERROR_WSMAN_INVALID_OPTIONSET = 2150859140_u32
  ERROR_WSMAN_NO_COMMANDID = 2150859141_u32
  ERROR_WSMAN_CLIENT_SIGNAL_NULL_PARAM = 2150859142_u32
  ERROR_WSMAN_CLIENT_INVALID_SIGNAL_SHELL_FLAG = 2150859143_u32
  ERROR_WSMAN_CLIENT_SEND_NULL_PARAM = 2150859144_u32
  ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_FLAG = 2150859145_u32
  ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_PARAMETER = 2150859146_u32
  ERROR_WSMAN_SHELL_INVALID_INPUT_STREAM = 2150859147_u32
  ERROR_WSMAN_CLIENT_RECEIVE_NULL_PARAM = 2150859148_u32
  ERROR_WSMAN_SHELL_INVALID_DESIRED_STREAMS = 2150859149_u32
  ERROR_WSMAN_CLIENT_INVALID_RECEIVE_SHELL_FLAG = 2150859150_u32
  ERROR_WSMAN_NO_RECEIVE_RESPONSE = 2150859151_u32
  ERROR_WSMAN_PLUGIN_CONFIGURATION_CORRUPTED = 2150859152_u32
  ERROR_WSMAN_INVALID_FILEPATH = 2150859153_u32
  ERROR_WSMAN_FILE_NOT_PRESENT = 2150859154_u32
  ERROR_WSMAN_IISCONFIGURATION_READ_FAILED = 2150859155_u32
  ERROR_WSMAN_CLIENT_INVALID_LOCALE = 2150859156_u32
  ERROR_WSMAN_CLIENT_INVALID_UI_LANGUAGE = 2150859157_u32
  ERROR_WSMAN_CLIENT_GETERRORMESSAGE_NULL_PARAM = 2150859158_u32
  ERROR_WSMAN_CLIENT_INVALID_LANGUAGE_CODE = 2150859159_u32
  ERROR_WSMAN_CLIENT_INVALID_GETERRORMESSAGE_FLAG = 2150859160_u32
  ERROR_WSMAN_REDIRECT_REQUESTED = 2150859161_u32
  ERROR_WSMAN_PROXY_AUTHENTICATION_INVALID_FLAG = 2150859162_u32
  ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_PROXY_AUTHENTICATION = 2150859163_u32
  ERROR_WSMAN_PROXY_ACCESS_TYPE = 2150859164_u32
  ERROR_WSMAN_INVALID_OPTION_NO_PROXY_SERVER = 2150859165_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_NULL_PARAM = 2150859166_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_INVALID_PARAM = 2150859167_u32
  ERROR_WSMAN_CLIENT_GETSESSIONOPTION_STRING_INVALID_PARAM = 2150859168_u32
  ERROR_WSMAN_CREDSSP_USERNAME_PASSWORD_NEEDED = 2150859169_u32
  ERROR_WSMAN_CLIENT_CREDSSP_AUTHENTICATION_DISABLED = 2150859170_u32
  ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS = 2150859171_u32
  ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS_NTLMONLY = 2150859172_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLS = 2150859173_u32
  ERROR_WSMAN_QUOTA_MAX_OPERATIONS = 2150859174_u32
  ERROR_WSMAN_QUOTA_USER = 2150859175_u32
  ERROR_WSMAN_QUOTA_SYSTEM = 2150859176_u32
  ERROR_WSMAN_DIFFERENT_AUTHZ_TOKEN = 2150859177_u32
  ERROR_WSMAN_REDIRECT_LOCATION_NOT_AVAILABLE = 2150859178_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLUSERS = 2150859179_u32
  ERROR_WSMAN_REMOTESHELLS_NOT_ALLOWED = 2150859180_u32
  ERROR_WSMAN_PULL_PARAMS_NOT_SAME_AS_ENUM = 2150859181_u32
  ERROR_WSMAN_DEPRECATED_CONFIG_SETTING = 2150859182_u32
  ERROR_WSMAN_URI_SECURITY_URI = 2150859183_u32
  ERROR_WSMAN_CANNOT_USE_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS_FOR_HTTP = 2150859184_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_HTTP = 2150859185_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_KERBEROS = 2150859186_u32
  ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_CREDSSP = 2150859187_u32
  ERROR_WSMAN_CLIENT_MULTIPLE_PROXY_AUTH_FLAGS = 2150859188_u32
  ERROR_WSMAN_INVALID_REDIRECT_ERROR = 2150859189_u32
  ERROR_REDIRECT_LOCATION_TOO_LONG = 2150859190_u32
  ERROR_REDIRECT_LOCATION_INVALID = 2150859191_u32
  ERROR_SERVICE_CBT_HARDENING_INVALID = 2150859192_u32
  ERROR_WSMAN_NAME_NOT_RESOLVED = 2150859193_u32
  ERROR_WSMAN_SSL_CONNECTION_ABORTED = 2150859194_u32
  ERROR_WSMAN_DEFAULTAUTH_IPADDRESS = 2150859195_u32
  ERROR_WSMAN_CUSTOMREMOTESHELL_DEPRECATED = 2150859196_u32
  ERROR_WSMAN_FEATURE_DEPRECATED = 2150859197_u32
  ERROR_WSMAN_INVALID_USESSL_PARAM = 2150859198_u32
  ERROR_WSMAN_INVALID_CONFIGSDDL_URL = 2150859199_u32
  ERROR_WSMAN_ENUMERATE_SHELLCOMAMNDS_FILTER_EXPECTED = 2150859200_u32
  ERROR_WSMAN_ENUMERATE_SHELLCOMMANDS_EPRS_NOTSUPPORTED = 2150859201_u32
  ERROR_WSMAN_CLIENT_CREATESHELL_NAME_INVALID = 2150859202_u32
  ERROR_WSMAN_RUNAS_INVALIDUSERCREDENTIALS = 2150859203_u32
  ERROR_WINRS_SHELL_DISCONNECTED = 2150859204_u32
  ERROR_WINRS_SHELL_DISCONNECT_NOT_SUPPORTED = 2150859205_u32
  ERROR_WINRS_SHELL_CLIENTSESSIONID_MISMATCH = 2150859206_u32
  ERROR_WSMAN_CLIENT_DISCONNECTSHELL_NULL_PARAM = 2150859207_u32
  ERROR_WSMAN_CLIENT_RECONNECTSHELL_NULL_PARAM = 2150859208_u32
  ERROR_WSMAN_CLIENT_CONNECTSHELL_NULL_PARAM = 2150859209_u32
  ERROR_WSMAN_CLIENT_CONNECTCOMMAND_NULL_PARAM = 2150859210_u32
  ERROR_WINRS_CONNECT_RESPONSE_BAD_BODY = 2150859211_u32
  ERROR_WSMAN_COMMAND_TERMINATED = 2150859212_u32
  ERROR_WINRS_SHELL_CONNECTED_TO_DIFFERENT_CLIENT = 2150859213_u32
  ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_GRACEFUL = 2150859214_u32
  ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_VALID = 2150859215_u32
  ERROR_WINRS_SHELL_RECONNECT_OPERATION_NOT_VALID = 2150859216_u32
  ERROR_WSMAN_CONFIG_GROUP_POLICY_CHANGE_NOTIFICATION_SUBSCRIPTION_FAILED = 2150859217_u32
  ERROR_WSMAN_CLIENT_RECONNECTSHELLCOMMAND_NULL_PARAM = 2150859218_u32
  ERROR_WINRS_SHELLCOMMAND_RECONNECT_OPERATION_NOT_VALID = 2150859219_u32
  ERROR_WINRS_SHELLCOMMAND_CLIENTID_NOT_VALID = 2150859220_u32
  ERROR_WINRS_SHELL_CLIENTID_NOT_VALID = 2150859221_u32
  ERROR_WINRS_SHELLCOMMAND_CLIENTID_RESOURCE_CONFLICT = 2150859222_u32
  ERROR_WINRS_SHELL_CLIENTID_RESOURCE_CONFLICT = 2150859223_u32
  ERROR_WINRS_SHELLCOMMAND_DISCONNECT_OPERATION_NOT_VALID = 2150859224_u32
  ERROR_WSMAN_SUBSCRIBE_WMI_INVALID_KEY = 2150859225_u32
  ERROR_WSMAN_CLIENT_INVALID_DISCONNECT_SHELL_FLAG = 2150859226_u32
  ERROR_WSMAN_CLIENT_INVALID_SHELL_COMMAND_PAIR = 2150859227_u32
  ERROR_WSMAN_SEMANTICCALLBACK_TIMEDOUT = 2150859228_u32
  ERROR_WSMAN_SERVICE_REMOTE_ACCESS_DISABLED = 2150859229_u32
  ERROR_WSMAN_SERVICE_STREAM_DISCONNECTED = 2150859230_u32
  ERROR_WSMAN_CREATESHELL_RUNAS_FAILED = 2150859231_u32
  ERROR_WSMAN_INVALID_XML_RUNAS_DISABLED = 2150859232_u32
  ERROR_WSMAN_WRONG_METADATA = 2150859233_u32
  ERROR_WSMAN_UNSUPPORTED_TYPE = 2150859234_u32
  ERROR_WSMAN_REMOTE_CONNECTION_NOT_ALLOWED = 2150859235_u32
  ERROR_WSMAN_QUOTA_MAX_SHELLS_PPQ = 2150859236_u32
  ERROR_WSMAN_QUOTA_MAX_USERS_PPQ = 2150859237_u32
  ERROR_WSMAN_QUOTA_MAX_PLUGINSHELLS_PPQ = 2150859238_u32
  ERROR_WSMAN_QUOTA_MAX_PLUGINOPERATIONS_PPQ = 2150859239_u32
  ERROR_WSMAN_QUOTA_MAX_OPERATIONS_USER_PPQ = 2150859240_u32
  ERROR_WSMAN_QUOTA_MAX_COMMANDS_PER_SHELL_PPQ = 2150859241_u32
  ERROR_WSMAN_QUOTA_MIN_REQUIREMENT_NOT_AVAILABLE_PPQ = 2150859242_u32
  ERROR_WSMAN_NEW_DESERIALIZER = 2150859243_u32
  ERROR_WSMAN_DESERIALIZE_CLASS = 2150859244_u32
  ERROR_WSMAN_GETCLASS = 2150859245_u32
  ERROR_WSMAN_NEW_SESSION = 2150859246_u32
  ERROR_WSMAN_NULL_KEY = 2150859247_u32
  ERROR_WSMAN_MUTUAL_AUTH_FAILED = 2150859248_u32
  ERROR_WSMAN_UNSUPPORTED_OCTETTYPE = 2150859249_u32
  ERROR_WINRS_IDLETIMEOUT_OUTOFBOUNDS = 2150859250_u32
  ERROR_WSMAN_INSUFFICIENT_METADATA_FOR_BASIC = 2150859251_u32
  ERROR_WSMAN_INVALID_LITERAL_URI = 2150859252_u32
  ERROR_WSMAN_OBJECTONLY_INVALID = 2150859253_u32
  ERROR_WSMAN_MISSING_CLASSNAME = 2150859254_u32
  ERROR_WSMAN_EVENTING_INVALID_ENCODING_IN_DELIVERY = 2150859255_u32
  ERROR_WSMAN_DESTINATION_INVALID = 2150859256_u32
  ERROR_WSMAN_UNSUPPORTED_FEATURE_IDENTIFY = 2150859257_u32
  ERROR_WSMAN_CLIENT_SESSION_UNUSABLE = 2150859258_u32
  ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED = 2150859259_u32
  ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED_DOWNLEVEL = 2150859260_u32
  ERROR_WSMAN_RUNASUSER_MANAGEDACCOUNT_LOGON_FAILED = 2150859261_u32
  ERROR_WSMAN_CERTMAPPING_CREDENTIAL_MANAGEMENT_FAILIED = 2150859262_u32
  WSMan = LibC::GUID.new(0xbced617b_u32, 0xec03_u16, 0x420b_u16, StaticArray[0x85_u8, 0x8_u8, 0x97_u8, 0x7d_u8, 0xc7_u8, 0xa6_u8, 0x86_u8, 0xbd_u8])
  WSManInternal = LibC::GUID.new(0x7de087a5_u32, 0x5dcb_u16, 0x4df7_u16, StaticArray[0xbb_u8, 0x12_u8, 0x9_u8, 0x24_u8, 0xad_u8, 0x8f_u8, 0xbd_u8, 0x9a_u8])

  type WSMAN_API = Void
  type WSMAN_SESSION = Void
  type WSMAN_OPERATION = Void
  type WSMAN_SHELL = Void
  type WSMAN_COMMAND = Void

  alias WSMAN_SHELL_COMPLETION_FUNCTION = Proc(Void*, UInt32, WSMAN_ERROR*, WSMAN_SHELL*, WSMAN_COMMAND*, WSMAN_OPERATION*, WSMAN_RESPONSE_DATA*, Void)
  alias WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT = Proc(Void*, Void)
  alias WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT = Proc(Void*, Void*, Void)
  alias WSMAN_PLUGIN_STARTUP = Proc(UInt32, LibC::LPWSTR, LibC::LPWSTR, Void**, UInt32)
  alias WSMAN_PLUGIN_SHUTDOWN = Proc(Void*, UInt32, UInt32, UInt32)
  alias WSMAN_PLUGIN_SHELL = Proc(Void*, WSMAN_PLUGIN_REQUEST*, UInt32, WSMAN_SHELL_STARTUP_INFO_V11*, WSMAN_DATA*, Void)
  alias WSMAN_PLUGIN_COMMAND = Proc(WSMAN_PLUGIN_REQUEST*, UInt32, Void*, LibC::LPWSTR, WSMAN_COMMAND_ARG_SET*, Void)
  alias WSMAN_PLUGIN_SEND = Proc(WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, LibC::LPWSTR, WSMAN_DATA*, Void)
  alias WSMAN_PLUGIN_RECEIVE = Proc(WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, WSMAN_STREAM_ID_SET*, Void)
  alias WSMAN_PLUGIN_SIGNAL = Proc(WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, LibC::LPWSTR, Void)
  alias WSMAN_PLUGIN_CONNECT = Proc(WSMAN_PLUGIN_REQUEST*, UInt32, Void*, Void*, WSMAN_DATA*, Void)
  alias WSMAN_PLUGIN_AUTHORIZE_USER = Proc(Void*, WSMAN_SENDER_DETAILS*, UInt32, Void)
  alias WSMAN_PLUGIN_AUTHORIZE_OPERATION = Proc(Void*, WSMAN_SENDER_DETAILS*, UInt32, UInt32, LibC::LPWSTR, LibC::LPWSTR, Void)
  alias WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA = Proc(Void*, WSMAN_SENDER_DETAILS*, UInt32, Void)
  alias WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT = Proc(Void*, Void)


  enum WSManDataType : Int32
    WSMAN_DATA_NONE = 0
    WSMAN_DATA_TYPE_TEXT = 1
    WSMAN_DATA_TYPE_BINARY = 2
    WSMAN_DATA_TYPE_DWORD = 4
  end

  enum WSManAuthenticationFlags : Int32
    WSMAN_FLAG_DEFAULT_AUTHENTICATION = 0
    WSMAN_FLAG_NO_AUTHENTICATION = 1
    WSMAN_FLAG_AUTH_DIGEST = 2
    WSMAN_FLAG_AUTH_NEGOTIATE = 4
    WSMAN_FLAG_AUTH_BASIC = 8
    WSMAN_FLAG_AUTH_KERBEROS = 16
    WSMAN_FLAG_AUTH_CREDSSP = 128
    WSMAN_FLAG_AUTH_CLIENT_CERTIFICATE = 32
  end

  enum WSManProxyAccessType : Int32
    WSMAN_OPTION_PROXY_IE_PROXY_CONFIG = 1
    WSMAN_OPTION_PROXY_WINHTTP_PROXY_CONFIG = 2
    WSMAN_OPTION_PROXY_AUTO_DETECT = 4
    WSMAN_OPTION_PROXY_NO_PROXY_SERVER = 8
  end

  enum WSManSessionOption : Int32
    WSMAN_OPTION_DEFAULT_OPERATION_TIMEOUTMS = 1
    WSMAN_OPTION_MAX_RETRY_TIME = 11
    WSMAN_OPTION_TIMEOUTMS_CREATE_SHELL = 12
    WSMAN_OPTION_TIMEOUTMS_RUN_SHELL_COMMAND = 13
    WSMAN_OPTION_TIMEOUTMS_RECEIVE_SHELL_OUTPUT = 14
    WSMAN_OPTION_TIMEOUTMS_SEND_SHELL_INPUT = 15
    WSMAN_OPTION_TIMEOUTMS_SIGNAL_SHELL = 16
    WSMAN_OPTION_TIMEOUTMS_CLOSE_SHELL = 17
    WSMAN_OPTION_SKIP_CA_CHECK = 18
    WSMAN_OPTION_SKIP_CN_CHECK = 19
    WSMAN_OPTION_UNENCRYPTED_MESSAGES = 20
    WSMAN_OPTION_UTF16 = 21
    WSMAN_OPTION_ENABLE_SPN_SERVER_PORT = 22
    WSMAN_OPTION_MACHINE_ID = 23
    WSMAN_OPTION_LOCALE = 25
    WSMAN_OPTION_UI_LANGUAGE = 26
    WSMAN_OPTION_MAX_ENVELOPE_SIZE_KB = 28
    WSMAN_OPTION_SHELL_MAX_DATA_SIZE_PER_MESSAGE_KB = 29
    WSMAN_OPTION_REDIRECT_LOCATION = 30
    WSMAN_OPTION_SKIP_REVOCATION_CHECK = 31
    WSMAN_OPTION_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS = 32
    WSMAN_OPTION_USE_SSL = 33
    WSMAN_OPTION_USE_INTEARACTIVE_TOKEN = 34
  end

  enum WSManCallbackFlags : Int32
    WSMAN_FLAG_CALLBACK_END_OF_OPERATION = 1
    WSMAN_FLAG_CALLBACK_END_OF_STREAM = 8
    WSMAN_FLAG_CALLBACK_SHELL_SUPPORTS_DISCONNECT = 32
    WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTED = 64
    WSMAN_FLAG_CALLBACK_NETWORK_FAILURE_DETECTED = 256
    WSMAN_FLAG_CALLBACK_RETRYING_AFTER_NETWORK_FAILURE = 512
    WSMAN_FLAG_CALLBACK_RECONNECTED_AFTER_NETWORK_FAILURE = 1024
    WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTING = 2048
    WSMAN_FLAG_CALLBACK_RETRY_ABORTED_DUE_TO_INTERNAL_ERROR = 4096
    WSMAN_FLAG_CALLBACK_RECEIVE_DELAY_STREAM_REQUEST_PROCESSED = 8192
  end

  enum WSManShellFlag : Int32
    WSMAN_FLAG_NO_COMPRESSION = 1
    WSMAN_FLAG_DELETE_SERVER_SESSION = 2
    WSMAN_FLAG_SERVER_BUFFERING_MODE_DROP = 4
    WSMAN_FLAG_SERVER_BUFFERING_MODE_BLOCK = 8
    WSMAN_FLAG_RECEIVE_DELAY_OUTPUT_STREAM = 16
  end

  enum WSManSessionFlags : Int32
    WSManFlagUTF8 = 1
    WSManFlagCredUsernamePassword = 4096
    WSManFlagSkipCACheck = 8192
    WSManFlagSkipCNCheck = 16384
    WSManFlagUseNoAuthentication = 32768
    WSManFlagUseDigest = 65536
    WSManFlagUseNegotiate = 131072
    WSManFlagUseBasic = 262144
    WSManFlagUseKerberos = 524288
    WSManFlagNoEncryption = 1048576
    WSManFlagUseClientCertificate = 2097152
    WSManFlagEnableSPNServerPort = 4194304
    WSManFlagUTF16 = 8388608
    WSManFlagUseCredSsp = 16777216
    WSManFlagSkipRevocationCheck = 33554432
    WSManFlagAllowNegotiateImplicitCredentials = 67108864
    WSManFlagUseSsl = 134217728
  end

  enum WSManEnumFlags : Int32
    WSManFlagNonXmlText = 1
    WSManFlagReturnObject = 0
    WSManFlagReturnEPR = 2
    WSManFlagReturnObjectAndEPR = 4
    WSManFlagHierarchyDeep = 0
    WSManFlagHierarchyShallow = 32
    WSManFlagHierarchyDeepBasePropsOnly = 64
    WSManFlagAssociatedInstance = 0
    WSManFlagAssociationInstance = 128
  end

  enum WSManProxyAccessTypeFlags : Int32
    WSManProxyIEConfig = 1
    WSManProxyWinHttpConfig = 2
    WSManProxyAutoDetect = 4
    WSManProxyNoProxyServer = 8
  end

  enum WSManProxyAuthenticationFlags : Int32
    WSManFlagProxyAuthenticationUseNegotiate = 1
    WSManFlagProxyAuthenticationUseBasic = 2
    WSManFlagProxyAuthenticationUseDigest = 4
  end

  union WSMAN_DATA_Anonymous_e__Union
    text : WSMAN_DATA_TEXT
    binary_data : WSMAN_DATA_BINARY
    number : UInt32
  end
  union WSMAN_AUTHENTICATION_CREDENTIALS_Anonymous_e__Union
    user_account : WSMAN_USERNAME_PASSWORD_CREDS
    certificate_thumbprint : LibC::LPWSTR
  end
  union WSMAN_RESPONSE_DATA
    receive_data : WSMAN_RECEIVE_DATA_RESULT
    connect_data : WSMAN_CONNECT_DATA
    create_data : WSMAN_CREATE_SHELL_DATA
  end

  struct WSMAN_DATA_TEXT
    buffer_length : UInt32
    buffer : LibC::LPWSTR
  end
  struct WSMAN_DATA_BINARY
    data_length : UInt32
    data : UInt8*
  end
  struct WSMAN_DATA
    type : WSManDataType
    anonymous : WSMAN_DATA_Anonymous_e__Union
  end
  struct WSMAN_ERROR
    code : UInt32
    error_detail : LibC::LPWSTR
    language : LibC::LPWSTR
    machine_name : LibC::LPWSTR
    plugin_name : LibC::LPWSTR
  end
  struct WSMAN_USERNAME_PASSWORD_CREDS
    username : LibC::LPWSTR
    password : LibC::LPWSTR
  end
  struct WSMAN_AUTHENTICATION_CREDENTIALS
    authentication_mechanism : UInt32
    anonymous : WSMAN_AUTHENTICATION_CREDENTIALS_Anonymous_e__Union
  end
  struct WSMAN_OPTION
    name : LibC::LPWSTR
    value : LibC::LPWSTR
    must_comply : LibC::BOOL
  end
  struct WSMAN_OPTION_SET
    options_count : UInt32
    options : WSMAN_OPTION*
    options_must_understand : LibC::BOOL
  end
  struct WSMAN_OPTION_SETEX
    options_count : UInt32
    options : WSMAN_OPTION*
    options_must_understand : LibC::BOOL
    option_types : LibC::LPWSTR*
  end
  struct WSMAN_KEY
    key : LibC::LPWSTR
    value : LibC::LPWSTR
  end
  struct WSMAN_SELECTOR_SET
    number_keys : UInt32
    keys : WSMAN_KEY*
  end
  struct WSMAN_FRAGMENT
    path : LibC::LPWSTR
    dialect : LibC::LPWSTR
  end
  struct WSMAN_FILTER
    filter : LibC::LPWSTR
    dialect : LibC::LPWSTR
  end
  struct WSMAN_OPERATION_INFO
    fragment : WSMAN_FRAGMENT
    filter : WSMAN_FILTER
    selector_set : WSMAN_SELECTOR_SET
    option_set : WSMAN_OPTION_SET
    reserved : Void*
    version : UInt32
  end
  struct WSMAN_OPERATION_INFOEX
    fragment : WSMAN_FRAGMENT
    filter : WSMAN_FILTER
    selector_set : WSMAN_SELECTOR_SET
    option_set : WSMAN_OPTION_SETEX
    version : UInt32
    ui_locale : LibC::LPWSTR
    data_locale : LibC::LPWSTR
  end
  struct WSMAN_PROXY_INFO
    access_type : UInt32
    authentication_credentials : WSMAN_AUTHENTICATION_CREDENTIALS
  end
  struct WSMAN_STREAM_ID_SET
    stream_i_ds_count : UInt32
    stream_i_ds : LibC::LPWSTR*
  end
  struct WSMAN_ENVIRONMENT_VARIABLE
    name : LibC::LPWSTR
    value : LibC::LPWSTR
  end
  struct WSMAN_ENVIRONMENT_VARIABLE_SET
    vars_count : UInt32
    vars : WSMAN_ENVIRONMENT_VARIABLE*
  end
  struct WSMAN_SHELL_STARTUP_INFO_V10
    input_stream_set : WSMAN_STREAM_ID_SET*
    output_stream_set : WSMAN_STREAM_ID_SET*
    idle_timeout_ms : UInt32
    working_directory : LibC::LPWSTR
    variable_set : WSMAN_ENVIRONMENT_VARIABLE_SET*
  end
  struct WSMAN_SHELL_STARTUP_INFO_V11
    __anonymous_base_wsman_l665_c48 : WSMAN_SHELL_STARTUP_INFO_V10
    name : LibC::LPWSTR
  end
  struct WSMAN_SHELL_DISCONNECT_INFO
    idle_timeout_ms : UInt32
  end
  struct WSMAN_RECEIVE_DATA_RESULT
    stream_id : LibC::LPWSTR
    stream_data : WSMAN_DATA
    command_state : LibC::LPWSTR
    exit_code : UInt32
  end
  struct WSMAN_CONNECT_DATA
    data : WSMAN_DATA
  end
  struct WSMAN_CREATE_SHELL_DATA
    data : WSMAN_DATA
  end
  struct WSMAN_SHELL_ASYNC
    operation_context : Void*
    completion_function : WSMAN_SHELL_COMPLETION_FUNCTION
  end
  struct WSMAN_COMMAND_ARG_SET
    args_count : UInt32
    args : LibC::LPWSTR*
  end
  struct WSMAN_CERTIFICATE_DETAILS
    subject : LibC::LPWSTR
    issuer_name : LibC::LPWSTR
    issuer_thumbprint : LibC::LPWSTR
    subject_name : LibC::LPWSTR
  end
  struct WSMAN_SENDER_DETAILS
    sender_name : LibC::LPWSTR
    authentication_mechanism : LibC::LPWSTR
    certificate_details : WSMAN_CERTIFICATE_DETAILS*
    client_token : LibC::HANDLE
    http_url : LibC::LPWSTR
  end
  struct WSMAN_PLUGIN_REQUEST
    sender_details : WSMAN_SENDER_DETAILS*
    locale : LibC::LPWSTR
    resource_uri : LibC::LPWSTR
    operation_info : WSMAN_OPERATION_INFO*
    shutdown_notification : Int32
    shutdown_notification_handle : LibC::HANDLE
    data_locale : LibC::LPWSTR
  end
  struct WSMAN_AUTHZ_QUOTA
    max_allowed_concurrent_shells : UInt32
    max_allowed_concurrent_operations : UInt32
    timeslot_size : UInt32
    max_allowed_operations_per_timeslot : UInt32
  end


  struct IWSManVTbl
    query_interface : Proc(IWSMan*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSMan*, UInt32)
    release : Proc(IWSMan*, UInt32)
    get_type_info_count : Proc(IWSMan*, UInt32*, HRESULT)
    get_type_info : Proc(IWSMan*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSMan*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSMan*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_session : Proc(IWSMan*, UInt8*, Int32, IDispatch, IDispatch*, HRESULT)
    create_connection_options : Proc(IWSMan*, IDispatch*, HRESULT)
    get_command_line : Proc(IWSMan*, UInt8**, HRESULT)
    get_error : Proc(IWSMan*, UInt8**, HRESULT)
  end

  struct IWSMan
    lpVtbl : IWSManVTbl*
  end

  struct IWSManExVTbl
    query_interface : Proc(IWSManEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManEx*, UInt32)
    release : Proc(IWSManEx*, UInt32)
    get_type_info_count : Proc(IWSManEx*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_session : Proc(IWSManEx*, UInt8*, Int32, IDispatch, IDispatch*, HRESULT)
    create_connection_options : Proc(IWSManEx*, IDispatch*, HRESULT)
    get_command_line : Proc(IWSManEx*, UInt8**, HRESULT)
    get_error : Proc(IWSManEx*, UInt8**, HRESULT)
    create_resource_locator : Proc(IWSManEx*, UInt8*, IDispatch*, HRESULT)
    session_flag_utf8 : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_cred_username_password : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_skip_ca_check : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_skip_cn_check : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_use_digest : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_use_negotiate : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_use_basic : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_use_kerberos : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_no_encryption : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_enable_spn_server_port : Proc(IWSManEx*, Int32*, HRESULT)
    session_flag_use_no_authentication : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_non_xml_text : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_return_epr : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_return_object_and_epr : Proc(IWSManEx*, Int32*, HRESULT)
    get_error_message : Proc(IWSManEx*, UInt32, UInt8**, HRESULT)
    enumeration_flag_hierarchy_deep : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx*, Int32*, HRESULT)
    enumeration_flag_return_object : Proc(IWSManEx*, Int32*, HRESULT)
  end

  struct IWSManEx
    lpVtbl : IWSManExVTbl*
  end

  struct IWSManEx2VTbl
    query_interface : Proc(IWSManEx2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManEx2*, UInt32)
    release : Proc(IWSManEx2*, UInt32)
    get_type_info_count : Proc(IWSManEx2*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManEx2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManEx2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManEx2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_session : Proc(IWSManEx2*, UInt8*, Int32, IDispatch, IDispatch*, HRESULT)
    create_connection_options : Proc(IWSManEx2*, IDispatch*, HRESULT)
    get_command_line : Proc(IWSManEx2*, UInt8**, HRESULT)
    get_error : Proc(IWSManEx2*, UInt8**, HRESULT)
    create_resource_locator : Proc(IWSManEx2*, UInt8*, IDispatch*, HRESULT)
    session_flag_utf8 : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_cred_username_password : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_skip_ca_check : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_skip_cn_check : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_digest : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_negotiate : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_basic : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_kerberos : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_no_encryption : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_enable_spn_server_port : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_no_authentication : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_non_xml_text : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_return_epr : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_return_object_and_epr : Proc(IWSManEx2*, Int32*, HRESULT)
    get_error_message : Proc(IWSManEx2*, UInt32, UInt8**, HRESULT)
    enumeration_flag_hierarchy_deep : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx2*, Int32*, HRESULT)
    enumeration_flag_return_object : Proc(IWSManEx2*, Int32*, HRESULT)
    session_flag_use_client_certificate : Proc(IWSManEx2*, Int32*, HRESULT)
  end

  struct IWSManEx2
    lpVtbl : IWSManEx2VTbl*
  end

  struct IWSManEx3VTbl
    query_interface : Proc(IWSManEx3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManEx3*, UInt32)
    release : Proc(IWSManEx3*, UInt32)
    get_type_info_count : Proc(IWSManEx3*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManEx3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManEx3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManEx3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_session : Proc(IWSManEx3*, UInt8*, Int32, IDispatch, IDispatch*, HRESULT)
    create_connection_options : Proc(IWSManEx3*, IDispatch*, HRESULT)
    get_command_line : Proc(IWSManEx3*, UInt8**, HRESULT)
    get_error : Proc(IWSManEx3*, UInt8**, HRESULT)
    create_resource_locator : Proc(IWSManEx3*, UInt8*, IDispatch*, HRESULT)
    session_flag_utf8 : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_cred_username_password : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_skip_ca_check : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_skip_cn_check : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_digest : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_negotiate : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_basic : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_kerberos : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_no_encryption : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_enable_spn_server_port : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_no_authentication : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_non_xml_text : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_return_epr : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_return_object_and_epr : Proc(IWSManEx3*, Int32*, HRESULT)
    get_error_message : Proc(IWSManEx3*, UInt32, UInt8**, HRESULT)
    enumeration_flag_hierarchy_deep : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_hierarchy_shallow : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_hierarchy_deep_base_props_only : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_return_object : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_client_certificate : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_utf16 : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_cred_ssp : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_association_instance : Proc(IWSManEx3*, Int32*, HRESULT)
    enumeration_flag_associated_instance : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_skip_revocation_check : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_allow_negotiate_implicit_credentials : Proc(IWSManEx3*, Int32*, HRESULT)
    session_flag_use_ssl : Proc(IWSManEx3*, Int32*, HRESULT)
  end

  struct IWSManEx3
    lpVtbl : IWSManEx3VTbl*
  end

  struct IWSManConnectionOptionsVTbl
    query_interface : Proc(IWSManConnectionOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManConnectionOptions*, UInt32)
    release : Proc(IWSManConnectionOptions*, UInt32)
    get_type_info_count : Proc(IWSManConnectionOptions*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManConnectionOptions*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManConnectionOptions*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManConnectionOptions*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_name : Proc(IWSManConnectionOptions*, UInt8**, HRESULT)
    put_user_name : Proc(IWSManConnectionOptions*, UInt8*, HRESULT)
    put_password : Proc(IWSManConnectionOptions*, UInt8*, HRESULT)
  end

  struct IWSManConnectionOptions
    lpVtbl : IWSManConnectionOptionsVTbl*
  end

  struct IWSManConnectionOptionsExVTbl
    query_interface : Proc(IWSManConnectionOptionsEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManConnectionOptionsEx*, UInt32)
    release : Proc(IWSManConnectionOptionsEx*, UInt32)
    get_type_info_count : Proc(IWSManConnectionOptionsEx*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManConnectionOptionsEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManConnectionOptionsEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManConnectionOptionsEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_name : Proc(IWSManConnectionOptionsEx*, UInt8**, HRESULT)
    put_user_name : Proc(IWSManConnectionOptionsEx*, UInt8*, HRESULT)
    put_password : Proc(IWSManConnectionOptionsEx*, UInt8*, HRESULT)
    get_certificate_thumbprint : Proc(IWSManConnectionOptionsEx*, UInt8**, HRESULT)
    put_certificate_thumbprint : Proc(IWSManConnectionOptionsEx*, UInt8*, HRESULT)
  end

  struct IWSManConnectionOptionsEx
    lpVtbl : IWSManConnectionOptionsExVTbl*
  end

  struct IWSManConnectionOptionsEx2VTbl
    query_interface : Proc(IWSManConnectionOptionsEx2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManConnectionOptionsEx2*, UInt32)
    release : Proc(IWSManConnectionOptionsEx2*, UInt32)
    get_type_info_count : Proc(IWSManConnectionOptionsEx2*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManConnectionOptionsEx2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManConnectionOptionsEx2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManConnectionOptionsEx2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_name : Proc(IWSManConnectionOptionsEx2*, UInt8**, HRESULT)
    put_user_name : Proc(IWSManConnectionOptionsEx2*, UInt8*, HRESULT)
    put_password : Proc(IWSManConnectionOptionsEx2*, UInt8*, HRESULT)
    get_certificate_thumbprint : Proc(IWSManConnectionOptionsEx2*, UInt8**, HRESULT)
    put_certificate_thumbprint : Proc(IWSManConnectionOptionsEx2*, UInt8*, HRESULT)
    set_proxy : Proc(IWSManConnectionOptionsEx2*, Int32, Int32, UInt8*, UInt8*, HRESULT)
    proxy_ie_config : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_win_http_config : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_auto_detect : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_no_proxy_server : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_authentication_use_negotiate : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_authentication_use_basic : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
    proxy_authentication_use_digest : Proc(IWSManConnectionOptionsEx2*, Int32*, HRESULT)
  end

  struct IWSManConnectionOptionsEx2
    lpVtbl : IWSManConnectionOptionsEx2VTbl*
  end

  struct IWSManSessionVTbl
    query_interface : Proc(IWSManSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManSession*, UInt32)
    release : Proc(IWSManSession*, UInt32)
    get_type_info_count : Proc(IWSManSession*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManSession*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManSession*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManSession*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get : Proc(IWSManSession*, VARIANT, Int32, UInt8**, HRESULT)
    put : Proc(IWSManSession*, VARIANT, UInt8*, Int32, UInt8**, HRESULT)
    create : Proc(IWSManSession*, VARIANT, UInt8*, Int32, UInt8**, HRESULT)
    delete : Proc(IWSManSession*, VARIANT, Int32, HRESULT)
    invoke2 : Proc(IWSManSession*, UInt8*, VARIANT, UInt8*, Int32, UInt8**, HRESULT)
    enumerate : Proc(IWSManSession*, VARIANT, UInt8*, UInt8*, Int32, IDispatch*, HRESULT)
    identify : Proc(IWSManSession*, Int32, UInt8**, HRESULT)
    get_error : Proc(IWSManSession*, UInt8**, HRESULT)
    get_batch_items : Proc(IWSManSession*, Int32*, HRESULT)
    put_batch_items : Proc(IWSManSession*, Int32, HRESULT)
    get_timeout : Proc(IWSManSession*, Int32*, HRESULT)
    put_timeout : Proc(IWSManSession*, Int32, HRESULT)
  end

  struct IWSManSession
    lpVtbl : IWSManSessionVTbl*
  end

  struct IWSManEnumeratorVTbl
    query_interface : Proc(IWSManEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManEnumerator*, UInt32)
    release : Proc(IWSManEnumerator*, UInt32)
    get_type_info_count : Proc(IWSManEnumerator*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManEnumerator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManEnumerator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManEnumerator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    read_item : Proc(IWSManEnumerator*, UInt8**, HRESULT)
    get_at_end_of_stream : Proc(IWSManEnumerator*, Int16*, HRESULT)
    get_error : Proc(IWSManEnumerator*, UInt8**, HRESULT)
  end

  struct IWSManEnumerator
    lpVtbl : IWSManEnumeratorVTbl*
  end

  struct IWSManResourceLocatorVTbl
    query_interface : Proc(IWSManResourceLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManResourceLocator*, UInt32)
    release : Proc(IWSManResourceLocator*, UInt32)
    get_type_info_count : Proc(IWSManResourceLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManResourceLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManResourceLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManResourceLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_resource_uri : Proc(IWSManResourceLocator*, UInt8*, HRESULT)
    get_resource_uri : Proc(IWSManResourceLocator*, UInt8**, HRESULT)
    add_selector : Proc(IWSManResourceLocator*, UInt8*, VARIANT, HRESULT)
    clear_selectors : Proc(IWSManResourceLocator*, HRESULT)
    get_fragment_path : Proc(IWSManResourceLocator*, UInt8**, HRESULT)
    put_fragment_path : Proc(IWSManResourceLocator*, UInt8*, HRESULT)
    get_fragment_dialect : Proc(IWSManResourceLocator*, UInt8**, HRESULT)
    put_fragment_dialect : Proc(IWSManResourceLocator*, UInt8*, HRESULT)
    add_option : Proc(IWSManResourceLocator*, UInt8*, VARIANT, LibC::BOOL, HRESULT)
    put_must_understand_options : Proc(IWSManResourceLocator*, LibC::BOOL, HRESULT)
    get_must_understand_options : Proc(IWSManResourceLocator*, LibC::BOOL*, HRESULT)
    clear_options : Proc(IWSManResourceLocator*, HRESULT)
    get_error : Proc(IWSManResourceLocator*, UInt8**, HRESULT)
  end

  struct IWSManResourceLocator
    lpVtbl : IWSManResourceLocatorVTbl*
  end

  struct IWSManResourceLocatorInternalVTbl
    query_interface : Proc(IWSManResourceLocatorInternal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManResourceLocatorInternal*, UInt32)
    release : Proc(IWSManResourceLocatorInternal*, UInt32)
  end

  struct IWSManResourceLocatorInternal
    lpVtbl : IWSManResourceLocatorInternalVTbl*
  end

  struct IWSManInternalVTbl
    query_interface : Proc(IWSManInternal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWSManInternal*, UInt32)
    release : Proc(IWSManInternal*, UInt32)
    get_type_info_count : Proc(IWSManInternal*, UInt32*, HRESULT)
    get_type_info : Proc(IWSManInternal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWSManInternal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWSManInternal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    config_sddl : Proc(IWSManInternal*, IDispatch, VARIANT, Int32, UInt8**, HRESULT)
  end

  struct IWSManInternal
    lpVtbl : IWSManInternalVTbl*
  end


  # Params # flags : UInt32 [In],apihandle : WSMAN_API** [In]
  fun WSManInitialize(flags : UInt32, apihandle : WSMAN_API**) : UInt32

  # Params # apihandle : WSMAN_API* [In],flags : UInt32 [In]
  fun WSManDeinitialize(apihandle : WSMAN_API*, flags : UInt32) : UInt32

  # Params # apihandle : WSMAN_API* [In],flags : UInt32 [In],languagecode : LibC::LPWSTR [In],errorcode : UInt32 [In],messagelength : UInt32 [In],message : Char* [In],messagelengthused : UInt32* [In]
  fun WSManGetErrorMessage(apihandle : WSMAN_API*, flags : UInt32, languagecode : LibC::LPWSTR, errorcode : UInt32, messagelength : UInt32, message : Char*, messagelengthused : UInt32*) : UInt32

  # Params # apihandle : WSMAN_API* [In],connection : LibC::LPWSTR [In],flags : UInt32 [In],serverauthenticationcredentials : WSMAN_AUTHENTICATION_CREDENTIALS* [In],proxyinfo : WSMAN_PROXY_INFO* [In],session : WSMAN_SESSION** [In]
  fun WSManCreateSession(apihandle : WSMAN_API*, connection : LibC::LPWSTR, flags : UInt32, serverauthenticationcredentials : WSMAN_AUTHENTICATION_CREDENTIALS*, proxyinfo : WSMAN_PROXY_INFO*, session : WSMAN_SESSION**) : UInt32

  # Params # session : WSMAN_SESSION* [In],flags : UInt32 [In]
  fun WSManCloseSession(session : WSMAN_SESSION*, flags : UInt32) : UInt32

  # Params # session : WSMAN_SESSION* [In],option : WSManSessionOption [In],data : WSMAN_DATA* [In]
  fun WSManSetSessionOption(session : WSMAN_SESSION*, option : WSManSessionOption, data : WSMAN_DATA*) : UInt32

  # Params # session : WSMAN_SESSION* [In],option : WSManSessionOption [In],value : UInt32* [In]
  fun WSManGetSessionOptionAsDword(session : WSMAN_SESSION*, option : WSManSessionOption, value : UInt32*) : UInt32

  # Params # session : WSMAN_SESSION* [In],option : WSManSessionOption [In],stringlength : UInt32 [In],string : Char* [In],stringlengthused : UInt32* [In]
  fun WSManGetSessionOptionAsString(session : WSMAN_SESSION*, option : WSManSessionOption, stringlength : UInt32, string : Char*, stringlengthused : UInt32*) : UInt32

  # Params # operationhandle : WSMAN_OPERATION* [In],flags : UInt32 [In]
  fun WSManCloseOperation(operationhandle : WSMAN_OPERATION*, flags : UInt32) : UInt32

  # Params # session : WSMAN_SESSION* [In],flags : UInt32 [In],resourceuri : LibC::LPWSTR [In],startupinfo : WSMAN_SHELL_STARTUP_INFO_V11* [In],options : WSMAN_OPTION_SET* [In],createxml : WSMAN_DATA* [In],async : WSMAN_SHELL_ASYNC* [In],shell : WSMAN_SHELL** [In]
  fun WSManCreateShell(session : WSMAN_SESSION*, flags : UInt32, resourceuri : LibC::LPWSTR, startupinfo : WSMAN_SHELL_STARTUP_INFO_V11*, options : WSMAN_OPTION_SET*, createxml : WSMAN_DATA*, async : WSMAN_SHELL_ASYNC*, shell : WSMAN_SHELL**)

  # Params # shell : WSMAN_SHELL* [In],flags : UInt32 [In],commandline : LibC::LPWSTR [In],args : WSMAN_COMMAND_ARG_SET* [In],options : WSMAN_OPTION_SET* [In],async : WSMAN_SHELL_ASYNC* [In],command : WSMAN_COMMAND** [In]
  fun WSManRunShellCommand(shell : WSMAN_SHELL*, flags : UInt32, commandline : LibC::LPWSTR, args : WSMAN_COMMAND_ARG_SET*, options : WSMAN_OPTION_SET*, async : WSMAN_SHELL_ASYNC*, command : WSMAN_COMMAND**)

  # Params # shell : WSMAN_SHELL* [In],command : WSMAN_COMMAND* [In],flags : UInt32 [In],code : LibC::LPWSTR [In],async : WSMAN_SHELL_ASYNC* [In],signaloperation : WSMAN_OPERATION** [In]
  fun WSManSignalShell(shell : WSMAN_SHELL*, command : WSMAN_COMMAND*, flags : UInt32, code : LibC::LPWSTR, async : WSMAN_SHELL_ASYNC*, signaloperation : WSMAN_OPERATION**)

  # Params # shell : WSMAN_SHELL* [In],command : WSMAN_COMMAND* [In],flags : UInt32 [In],desiredstreamset : WSMAN_STREAM_ID_SET* [In],async : WSMAN_SHELL_ASYNC* [In],receiveoperation : WSMAN_OPERATION** [In]
  fun WSManReceiveShellOutput(shell : WSMAN_SHELL*, command : WSMAN_COMMAND*, flags : UInt32, desiredstreamset : WSMAN_STREAM_ID_SET*, async : WSMAN_SHELL_ASYNC*, receiveoperation : WSMAN_OPERATION**)

  # Params # shell : WSMAN_SHELL* [In],command : WSMAN_COMMAND* [In],flags : UInt32 [In],streamid : LibC::LPWSTR [In],streamdata : WSMAN_DATA* [In],endofstream : LibC::BOOL [In],async : WSMAN_SHELL_ASYNC* [In],sendoperation : WSMAN_OPERATION** [In]
  fun WSManSendShellInput(shell : WSMAN_SHELL*, command : WSMAN_COMMAND*, flags : UInt32, streamid : LibC::LPWSTR, streamdata : WSMAN_DATA*, endofstream : LibC::BOOL, async : WSMAN_SHELL_ASYNC*, sendoperation : WSMAN_OPERATION**)

  # Params # commandhandle : WSMAN_COMMAND* [In],flags : UInt32 [In],async : WSMAN_SHELL_ASYNC* [In]
  fun WSManCloseCommand(commandhandle : WSMAN_COMMAND*, flags : UInt32, async : WSMAN_SHELL_ASYNC*)

  # Params # shellhandle : WSMAN_SHELL* [In],flags : UInt32 [In],async : WSMAN_SHELL_ASYNC* [In]
  fun WSManCloseShell(shellhandle : WSMAN_SHELL*, flags : UInt32, async : WSMAN_SHELL_ASYNC*)

  # Params # session : WSMAN_SESSION* [In],flags : UInt32 [In],resourceuri : LibC::LPWSTR [In],shellid : LibC::LPWSTR [In],startupinfo : WSMAN_SHELL_STARTUP_INFO_V11* [In],options : WSMAN_OPTION_SET* [In],createxml : WSMAN_DATA* [In],async : WSMAN_SHELL_ASYNC* [In],shell : WSMAN_SHELL** [In]
  fun WSManCreateShellEx(session : WSMAN_SESSION*, flags : UInt32, resourceuri : LibC::LPWSTR, shellid : LibC::LPWSTR, startupinfo : WSMAN_SHELL_STARTUP_INFO_V11*, options : WSMAN_OPTION_SET*, createxml : WSMAN_DATA*, async : WSMAN_SHELL_ASYNC*, shell : WSMAN_SHELL**)

  # Params # shell : WSMAN_SHELL* [In],flags : UInt32 [In],commandid : LibC::LPWSTR [In],commandline : LibC::LPWSTR [In],args : WSMAN_COMMAND_ARG_SET* [In],options : WSMAN_OPTION_SET* [In],async : WSMAN_SHELL_ASYNC* [In],command : WSMAN_COMMAND** [In]
  fun WSManRunShellCommandEx(shell : WSMAN_SHELL*, flags : UInt32, commandid : LibC::LPWSTR, commandline : LibC::LPWSTR, args : WSMAN_COMMAND_ARG_SET*, options : WSMAN_OPTION_SET*, async : WSMAN_SHELL_ASYNC*, command : WSMAN_COMMAND**)

  # Params # shell : WSMAN_SHELL* [In],flags : UInt32 [In],disconnectinfo : WSMAN_SHELL_DISCONNECT_INFO* [In],async : WSMAN_SHELL_ASYNC* [In]
  fun WSManDisconnectShell(shell : WSMAN_SHELL*, flags : UInt32, disconnectinfo : WSMAN_SHELL_DISCONNECT_INFO*, async : WSMAN_SHELL_ASYNC*)

  # Params # shell : WSMAN_SHELL* [In],flags : UInt32 [In],async : WSMAN_SHELL_ASYNC* [In]
  fun WSManReconnectShell(shell : WSMAN_SHELL*, flags : UInt32, async : WSMAN_SHELL_ASYNC*)

  # Params # commandhandle : WSMAN_COMMAND* [In],flags : UInt32 [In],async : WSMAN_SHELL_ASYNC* [In]
  fun WSManReconnectShellCommand(commandhandle : WSMAN_COMMAND*, flags : UInt32, async : WSMAN_SHELL_ASYNC*)

  # Params # session : WSMAN_SESSION* [In],flags : UInt32 [In],resourceuri : LibC::LPWSTR [In],shellid : LibC::LPWSTR [In],options : WSMAN_OPTION_SET* [In],connectxml : WSMAN_DATA* [In],async : WSMAN_SHELL_ASYNC* [In],shell : WSMAN_SHELL** [In]
  fun WSManConnectShell(session : WSMAN_SESSION*, flags : UInt32, resourceuri : LibC::LPWSTR, shellid : LibC::LPWSTR, options : WSMAN_OPTION_SET*, connectxml : WSMAN_DATA*, async : WSMAN_SHELL_ASYNC*, shell : WSMAN_SHELL**)

  # Params # shell : WSMAN_SHELL* [In],flags : UInt32 [In],commandid : LibC::LPWSTR [In],options : WSMAN_OPTION_SET* [In],connectxml : WSMAN_DATA* [In],async : WSMAN_SHELL_ASYNC* [In],command : WSMAN_COMMAND** [In]
  fun WSManConnectShellCommand(shell : WSMAN_SHELL*, flags : UInt32, commandid : LibC::LPWSTR, options : WSMAN_OPTION_SET*, connectxml : WSMAN_DATA*, async : WSMAN_SHELL_ASYNC*, command : WSMAN_COMMAND**)

  # Params # requestdetails : WSMAN_PLUGIN_REQUEST* [In],flags : UInt32 [In],context : Void* [In]
  fun WSManPluginReportContext(requestdetails : WSMAN_PLUGIN_REQUEST*, flags : UInt32, context : Void*) : UInt32

  # Params # requestdetails : WSMAN_PLUGIN_REQUEST* [In],flags : UInt32 [In],stream : LibC::LPWSTR [In],streamresult : WSMAN_DATA* [In],commandstate : LibC::LPWSTR [In],exitcode : UInt32 [In]
  fun WSManPluginReceiveResult(requestdetails : WSMAN_PLUGIN_REQUEST*, flags : UInt32, stream : LibC::LPWSTR, streamresult : WSMAN_DATA*, commandstate : LibC::LPWSTR, exitcode : UInt32) : UInt32

  # Params # requestdetails : WSMAN_PLUGIN_REQUEST* [In],flags : UInt32 [In],errorcode : UInt32 [In],extendedinformation : LibC::LPWSTR [In]
  fun WSManPluginOperationComplete(requestdetails : WSMAN_PLUGIN_REQUEST*, flags : UInt32, errorcode : UInt32, extendedinformation : LibC::LPWSTR) : UInt32

  # Params # requestdetails : WSMAN_PLUGIN_REQUEST* [In],flags : UInt32 [In],data : WSMAN_DATA* [In]
  fun WSManPluginGetOperationParameters(requestdetails : WSMAN_PLUGIN_REQUEST*, flags : UInt32, data : WSMAN_DATA*) : UInt32

  # Params # plugincontext : Void* [In],flags : UInt32 [In],data : WSMAN_DATA* [In]
  fun WSManPluginGetConfiguration(plugincontext : Void*, flags : UInt32, data : WSMAN_DATA*) : UInt32

  # Params # plugincontext : Void* [In],flags : UInt32 [In]
  fun WSManPluginReportCompletion(plugincontext : Void*, flags : UInt32) : UInt32

  # Params # requestdetails : WSMAN_PLUGIN_REQUEST* [In]
  fun WSManPluginFreeRequestDetails(requestdetails : WSMAN_PLUGIN_REQUEST*) : UInt32

  # Params # senderdetails : WSMAN_SENDER_DETAILS* [In],flags : UInt32 [In],userauthorizationcontext : Void* [In],impersonationtoken : LibC::HANDLE [In],userisadministrator : LibC::BOOL [In],errorcode : UInt32 [In],extendederrorinformation : LibC::LPWSTR [In]
  fun WSManPluginAuthzUserComplete(senderdetails : WSMAN_SENDER_DETAILS*, flags : UInt32, userauthorizationcontext : Void*, impersonationtoken : LibC::HANDLE, userisadministrator : LibC::BOOL, errorcode : UInt32, extendederrorinformation : LibC::LPWSTR) : UInt32

  # Params # senderdetails : WSMAN_SENDER_DETAILS* [In],flags : UInt32 [In],userauthorizationcontext : Void* [In],errorcode : UInt32 [In],extendederrorinformation : LibC::LPWSTR [In]
  fun WSManPluginAuthzOperationComplete(senderdetails : WSMAN_SENDER_DETAILS*, flags : UInt32, userauthorizationcontext : Void*, errorcode : UInt32, extendederrorinformation : LibC::LPWSTR) : UInt32

  # Params # senderdetails : WSMAN_SENDER_DETAILS* [In],flags : UInt32 [In],quota : WSMAN_AUTHZ_QUOTA* [In],errorcode : UInt32 [In],extendederrorinformation : LibC::LPWSTR [In]
  fun WSManPluginAuthzQueryQuotaComplete(senderdetails : WSMAN_SENDER_DETAILS*, flags : UInt32, quota : WSMAN_AUTHZ_QUOTA*, errorcode : UInt32, extendederrorinformation : LibC::LPWSTR) : UInt32
end
