require "./../../foundation.cr"
require "./../../system/com.cr"

module Win32cr::Data::Xml::MsXml
  E_XML_NOTWF = -1072897501_i32
  E_XML_NODTD = -1072897500_i32
  E_XML_INVALID = -1072897499_i32
  E_XML_BUFFERTOOSMALL = -1072897498_i32
  XHR_PROP_ONDATA_ALWAYS = 0_u32
  XHR_PROP_ONDATA_NEVER = 18446744073709551615_u64
  DISPID_XOBJ_MIN = 65536_u32
  DISPID_XOBJ_MAX = 131071_u32
  DISPID_XOBJ_BASE = 65536_u32
  DISPID_XMLELEMENTCOLLECTION = 65536_u32
  DISPID_XMLELEMENTCOLLECTION_LENGTH = 65537_u32
  DISPID_XMLELEMENTCOLLECTION_NEWENUM = -4_i32
  DISPID_XMLELEMENTCOLLECTION_ITEM = 65539_u32
  DISPID_XMLDOCUMENT = 65636_u32
  DISPID_XMLDOCUMENT_ROOT = 65637_u32
  DISPID_XMLDOCUMENT_FILESIZE = 65638_u32
  DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 65639_u32
  DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 65640_u32
  DISPID_XMLDOCUMENT_URL = 65641_u32
  DISPID_XMLDOCUMENT_MIMETYPE = 65642_u32
  DISPID_XMLDOCUMENT_READYSTATE = 65643_u32
  DISPID_XMLDOCUMENT_CREATEELEMENT = 65644_u32
  DISPID_XMLDOCUMENT_CHARSET = 65645_u32
  DISPID_XMLDOCUMENT_VERSION = 65646_u32
  DISPID_XMLDOCUMENT_DOCTYPE = 65647_u32
  DISPID_XMLDOCUMENT_DTDURL = 65648_u32
  DISPID_XMLDOCUMENT_ASYNC = 65649_u32
  DISPID_XMLDOCUMENT_CASEINSENSITIVE = 65650_u32
  DISPID_XMLDOCUMENT_BASEURL = 65651_u32
  DISPID_XMLDOCUMENT_XML = 65652_u32
  DISPID_XMLDOCUMENT_LASTERROR = 65653_u32
  DISPID_XMLDOCUMENT_TRIMWHITESPACE = 65654_u32
  DISPID_XMLDOCUMENT_COMMIT = 65655_u32
  DISPID_XMLELEMENT = 65736_u32
  DISPID_XMLELEMENT_TAGNAME = 65737_u32
  DISPID_XMLELEMENT_PARENT = 65738_u32
  DISPID_XMLELEMENT_SETATTRIBUTE = 65739_u32
  DISPID_XMLELEMENT_GETATTRIBUTE = 65740_u32
  DISPID_XMLELEMENT_REMOVEATTRIBUTE = 65741_u32
  DISPID_XMLELEMENT_CHILDREN = 65742_u32
  DISPID_XMLELEMENT_TYPE = 65743_u32
  DISPID_XMLELEMENT_TEXT = 65744_u32
  DISPID_XMLELEMENT_ADDCHILD = 65745_u32
  DISPID_XMLELEMENT_REMOVECHILD = 65746_u32
  DISPID_XMLELEMENT_ATTRIBUTES = 65747_u32
  DISPID_XMLNOTIFSINK = 65836_u32
  DISPID_XMLNOTIFSINK_CHILDADDED = 65837_u32
  DISPID_XMLATTRIBUTE = 65936_u32
  DISPID_XMLATTRIBUTE_NAME = 65937_u32
  DISPID_XMLATTRIBUTE_VALUE = 65938_u32
  DISPID_XMLERROR = 65936_u32
  DISPID_XMLERROR_REASON = 65937_u32
  DISPID_XMLERROR_LINE = 65938_u32
  DISPID_XMLERROR_POS = 65939_u32
  DISPID_NODE = 66036_u32
  DISPID_NODE_NAME = 66037_u32
  DISPID_NODE_PARENT = 66038_u32
  DISPID_NODE_TYPE = 66039_u32
  DISPID_NODE_VALUE = 66040_u32
  DISPID_NODE_SETATTRIBUTE = 66041_u32
  DISPID_NODE_GETATTRIBUTE = 66042_u32
  DISPID_NODE_REMOVEATTRIBUTE = 66043_u32
  DISPID_NODE_ATTRIBUTES = 66044_u32
  DISPID_NODE_ADD = 66045_u32
  DISPID_NODE_REMOVE = 66046_u32
  DISPID_NODE_CHILDREN = 66047_u32
  DISPID_NODELIST = 66136_u32
  DISPID_NODELIST_NEWENUM = 66137_u32
  DISPID_NODELIST_NEXT = 66138_u32
  DISPID_NODELIST_CURRENT = 66139_u32
  DISPID_NODELIST_MOVE = 66140_u32
  DISPID_NODELIST_MOVETONODE = 66141_u32
  DISPID_NODELIST_LENGTH = 66142_u32
  DISPID_NODELIST_ITEM = 66143_u32
  DISPID_DOM_BASE = 1_u32
  DISPID_DOM_COLLECTION_BASE = 1000000_u32
  DISPID_DOM_COLLECTION_MAX = 2999999_u32
  DISPID_DOM_NODE = 1_u32
  DISPID_DOM_NODE_NODENAME = 2_u32
  DISPID_DOM_NODE_NODEVALUE = 3_u32
  DISPID_DOM_NODE_NODETYPE = 4_u32
  DISPID_DOM_NODE_NODETYPEENUM = 5_u32
  DISPID_DOM_NODE_PARENTNODE = 6_u32
  DISPID_DOM_NODE_CHILDNODES = 7_u32
  DISPID_DOM_NODE_FIRSTCHILD = 8_u32
  DISPID_DOM_NODE_LASTCHILD = 9_u32
  DISPID_DOM_NODE_PREVIOUSSIBLING = 10_u32
  DISPID_DOM_NODE_NEXTSIBLING = 11_u32
  DISPID_DOM_NODE_ATTRIBUTES = 12_u32
  DISPID_DOM_NODE_INSERTBEFORE = 13_u32
  DISPID_DOM_NODE_REPLACECHILD = 14_u32
  DISPID_DOM_NODE_REMOVECHILD = 15_u32
  DISPID_DOM_NODE_APPENDCHILD = 16_u32
  DISPID_DOM_NODE_HASCHILDNODES = 17_u32
  DISPID_DOM_NODE_OWNERDOC = 18_u32
  DISPID_DOM_NODE_CLONENODE = 19_u32
  DISPID_XMLDOM_NODE = 20_u32
  DISPID_XMLDOM_NODE_STRINGTYPE = 21_u32
  DISPID_XMLDOM_NODE_SPECIFIED = 22_u32
  DISPID_XMLDOM_NODE_DEFINITION = 23_u32
  DISPID_XMLDOM_NODE_TEXT = 24_u32
  DISPID_XMLDOM_NODE_NODETYPEDVALUE = 25_u32
  DISPID_XMLDOM_NODE_DATATYPE = 26_u32
  DISPID_XMLDOM_NODE_XML = 27_u32
  DISPID_XMLDOM_NODE_TRANSFORMNODE = 28_u32
  DISPID_XMLDOM_NODE_SELECTNODES = 29_u32
  DISPID_XMLDOM_NODE_SELECTSINGLENODE = 30_u32
  DISPID_XMLDOM_NODE_PARSED = 31_u32
  DISPID_XMLDOM_NODE_NAMESPACE = 32_u32
  DISPID_XMLDOM_NODE_PREFIX = 33_u32
  DISPID_XMLDOM_NODE_BASENAME = 34_u32
  DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = 35_u32
  DISPID_XMLDOM_NODE__TOP = 36_u32
  DISPID_DOM_DOCUMENT = 37_u32
  DISPID_DOM_DOCUMENT_DOCTYPE = 38_u32
  DISPID_DOM_DOCUMENT_IMPLEMENTATION = 39_u32
  DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = 40_u32
  DISPID_DOM_DOCUMENT_CREATEELEMENT = 41_u32
  DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = 42_u32
  DISPID_DOM_DOCUMENT_CREATETEXTNODE = 43_u32
  DISPID_DOM_DOCUMENT_CREATECOMMENT = 44_u32
  DISPID_DOM_DOCUMENT_CREATECDATASECTION = 45_u32
  DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = 46_u32
  DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = 47_u32
  DISPID_DOM_DOCUMENT_CREATEENTITY = 48_u32
  DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = 49_u32
  DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = 50_u32
  DISPID_DOM_DOCUMENT_TOP = 51_u32
  DISPID_XMLDOM_DOCUMENT = 52_u32
  DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = 53_u32
  DISPID_XMLDOM_DOCUMENT_CREATENODE = 54_u32
  DISPID_XMLDOM_DOCUMENT_CREATENODEEX = 55_u32
  DISPID_XMLDOM_DOCUMENT_NODEFROMID = 56_u32
  DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = 57_u32
  DISPID_XMLDOM_DOCUMENT_LOAD = 58_u32
  DISPID_XMLDOM_DOCUMENT_PARSEERROR = 59_u32
  DISPID_XMLDOM_DOCUMENT_URL = 60_u32
  DISPID_XMLDOM_DOCUMENT_ASYNC = 61_u32
  DISPID_XMLDOM_DOCUMENT_ABORT = 62_u32
  DISPID_XMLDOM_DOCUMENT_LOADXML = 63_u32
  DISPID_XMLDOM_DOCUMENT_SAVE = 64_u32
  DISPID_XMLDOM_DOCUMENT_VALIDATE = 65_u32
  DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = 66_u32
  DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = 67_u32
  DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = 68_u32
  DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = 69_u32
  DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = 70_u32
  DISPID_XMLDOM_DOCUMENT__TOP = 71_u32
  DISPID_DOM_NODELIST = 72_u32
  DISPID_DOM_NODELIST_ITEM = 73_u32
  DISPID_DOM_NODELIST_LENGTH = 74_u32
  DISPID_XMLDOM_NODELIST = 75_u32
  DISPID_XMLDOM_NODELIST_NEXTNODE = 76_u32
  DISPID_XMLDOM_NODELIST_RESET = 77_u32
  DISPID_XMLDOM_NODELIST_NEWENUM = 78_u32
  DISPID_XMLDOM_NODELIST__TOP = 79_u32
  DISPID_DOM_NAMEDNODEMAP = 80_u32
  DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = 83_u32
  DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = 84_u32
  DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = 85_u32
  DISPID_XMLDOM_NAMEDNODEMAP = 86_u32
  DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = 87_u32
  DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = 88_u32
  DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = 89_u32
  DISPID_XMLDOM_NAMEDNODEMAP_RESET = 90_u32
  DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = 91_u32
  DISPID_XMLDOM_NAMEDNODEMAP__TOP = 92_u32
  DISPID_DOM_W3CWRAPPERS = 93_u32
  DISPID_DOM_DOCUMENTFRAGMENT = 94_u32
  DISPID_DOM_DOCUMENTFRAGMENT__TOP = 95_u32
  DISPID_DOM_ELEMENT = 96_u32
  DISPID_DOM_ELEMENT_GETTAGNAME = 97_u32
  DISPID_DOM_ELEMENT_GETATTRIBUTES = 98_u32
  DISPID_DOM_ELEMENT_GETATTRIBUTE = 99_u32
  DISPID_DOM_ELEMENT_SETATTRIBUTE = 100_u32
  DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = 101_u32
  DISPID_DOM_ELEMENT_GETATTRIBUTENODE = 102_u32
  DISPID_DOM_ELEMENT_SETATTRIBUTENODE = 103_u32
  DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = 104_u32
  DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = 105_u32
  DISPID_DOM_ELEMENT_NORMALIZE = 106_u32
  DISPID_DOM_ELEMENT__TOP = 107_u32
  DISPID_DOM_DATA = 108_u32
  DISPID_DOM_DATA_DATA = 109_u32
  DISPID_DOM_DATA_LENGTH = 110_u32
  DISPID_DOM_DATA_SUBSTRING = 111_u32
  DISPID_DOM_DATA_APPEND = 112_u32
  DISPID_DOM_DATA_INSERT = 113_u32
  DISPID_DOM_DATA_DELETE = 114_u32
  DISPID_DOM_DATA_REPLACE = 115_u32
  DISPID_DOM_DATA__TOP = 116_u32
  DISPID_DOM_ATTRIBUTE = 117_u32
  DISPID_DOM_ATTRIBUTE_GETNAME = 118_u32
  DISPID_DOM_ATTRIBUTE_SPECIFIED = 119_u32
  DISPID_DOM_ATTRIBUTE_VALUE = 120_u32
  DISPID_DOM_ATTRIBUTE__TOP = 121_u32
  DISPID_DOM_TEXT = 122_u32
  DISPID_DOM_TEXT_SPLITTEXT = 123_u32
  DISPID_DOM_TEXT_JOINTEXT = 124_u32
  DISPID_DOM_TEXT__TOP = 125_u32
  DISPID_DOM_PI = 126_u32
  DISPID_DOM_PI_TARGET = 127_u32
  DISPID_DOM_PI_DATA = 128_u32
  DISPID_DOM_PI__TOP = 129_u32
  DISPID_DOM_DOCUMENTTYPE = 130_u32
  DISPID_DOM_DOCUMENTTYPE_NAME = 131_u32
  DISPID_DOM_DOCUMENTTYPE_ENTITIES = 132_u32
  DISPID_DOM_DOCUMENTTYPE_NOTATIONS = 133_u32
  DISPID_DOM_DOCUMENTTYPE__TOP = 134_u32
  DISPID_DOM_NOTATION = 135_u32
  DISPID_DOM_NOTATION_PUBLICID = 136_u32
  DISPID_DOM_NOTATION_SYSTEMID = 137_u32
  DISPID_DOM_NOTATION__TOP = 138_u32
  DISPID_DOM_ENTITY = 139_u32
  DISPID_DOM_ENTITY_PUBLICID = 140_u32
  DISPID_DOM_ENTITY_SYSTEMID = 141_u32
  DISPID_DOM_ENTITY_NOTATIONNAME = 142_u32
  DISPID_DOM_ENTITY__TOP = 143_u32
  DISPID_DOM_W3CWRAPPERS_TOP = 143_u32
  DISPID_DOM_IMPLEMENTATION = 144_u32
  DISPID_DOM_IMPLEMENTATION_HASFEATURE = 145_u32
  DISPID_DOM_IMPLEMENTATION__TOP = 146_u32
  DISPID_DOM__TOP = 176_u32
  DISPID_DOM_ERROR = 177_u32
  DISPID_DOM_ERROR_ERRORCODE = 178_u32
  DISPID_DOM_ERROR_URL = 179_u32
  DISPID_DOM_ERROR_REASON = 180_u32
  DISPID_DOM_ERROR_SRCTEXT = 181_u32
  DISPID_DOM_ERROR_LINE = 182_u32
  DISPID_DOM_ERROR_LINEPOS = 183_u32
  DISPID_DOM_ERROR_FILEPOS = 184_u32
  DISPID_DOM_ERROR__TOP = 185_u32
  DISPID_DOM_ERROR2 = 186_u32
  DISPID_DOM_ERROR2_ALLERRORS = 187_u32
  DISPID_DOM_ERROR2_ERRORPARAMETERS = 188_u32
  DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT = 189_u32
  DISPID_DOM_ERROR2_ERRORXPATH = 190_u32
  DISPID_DOM_ERROR2__TOP = 191_u32
  DISPID_DOM_ERRORCOLLECTION = 192_u32
  DISPID_DOM_ERRORCOLLECTION_LENGTH = 193_u32
  DISPID_DOM_ERRORCOLLECTION_NEXT = 194_u32
  DISPID_DOM_ERRORCOLLECTION_RESET = 195_u32
  DISPID_DOM_ERRORCOLLECTION__TOP = 196_u32
  DISPID_XTLRUNTIME = 186_u32
  DISPID_XTLRUNTIME_UNIQUEID = 187_u32
  DISPID_XTLRUNTIME_DEPTH = 188_u32
  DISPID_XTLRUNTIME_CHILDNUMBER = 189_u32
  DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = 190_u32
  DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = 191_u32
  DISPID_XTLRUNTIME_FORMATINDEX = 192_u32
  DISPID_XTLRUNTIME_FORMATNUMBER = 193_u32
  DISPID_XTLRUNTIME_FORMATDATE = 194_u32
  DISPID_XTLRUNTIME_FORMATTIME = 195_u32
  DISPID_XTLRUNTIME__TOP = 196_u32
  DISPID_XMLDOMEVENT = 197_u32
  DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = -609_i32
  DISPID_XMLDOMEVENT_ONDATAAVAILABLE = 198_u32
  DISPID_XMLDOMEVENT__TOP = 199_u32
  DISPID_XMLDOM_DOCUMENT2 = 200_u32
  DISPID_XMLDOM_DOCUMENT2_NAMESPACES = 201_u32
  DISPID_XMLDOM_DOCUMENT2_SCHEMAS = 202_u32
  DISPID_XMLDOM_DOCUMENT2_VALIDATE = 203_u32
  DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = 204_u32
  DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = 205_u32
  DISPID_XMLDOM_DOCUMENT2__TOP = 206_u32
  DISPID_XMLDOM_DOCUMENT3 = 207_u32
  DISPID_XMLDOM_DOCUMENT3_VALIDATENODE = 208_u32
  DISPID_XMLDOM_DOCUMENT3_IMPORTNODE = 209_u32
  DISPID_XMLDOM_DOCUMENT3__TOP = 210_u32
  DISPID_XMLDOM_SCHEMACOLLECTION = 2_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_ADD = 3_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_GET = 4_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = 5_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = 6_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = 7_u32
  DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = 8_u32
  DISPID_XMLDOM_SCHEMACOLLECTION__TOP = 9_u32
  DISPID_XMLDOM_SELECTION = 80_u32
  DISPID_XMLDOM_SELECTION_EXPR = 81_u32
  DISPID_XMLDOM_SELECTION_CONTEXT = 82_u32
  DISPID_XMLDOM_SELECTION_PEEKNODE = 83_u32
  DISPID_XMLDOM_SELECTION_MATCHES = 84_u32
  DISPID_XMLDOM_SELECTION_REMOVENEXT = 85_u32
  DISPID_XMLDOM_SELECTION_REMOVEALL = 86_u32
  DISPID_XMLDOM_SELECTION_CLONE = 87_u32
  DISPID_XMLDOM_SELECTION_GETPROPERTY = 88_u32
  DISPID_XMLDOM_SELECTION_SETPROPERTY = 89_u32
  DISPID_XMLDOM_SELECTION__TOP = 90_u32
  DISPID_XMLDOM_TEMPLATE = 1_u32
  DISPID_XMLDOM_TEMPLATE_STYLESHEET = 2_u32
  DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = 3_u32
  DISPID_XMLDOM_TEMPLATE__TOP = 4_u32
  DISPID_XMLDOM_PROCESSOR = 1_u32
  DISPID_XMLDOM_PROCESSOR_INPUT = 2_u32
  DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = 3_u32
  DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = 4_u32
  DISPID_XMLDOM_PROCESSOR_STARTMODE = 5_u32
  DISPID_XMLDOM_PROCESSOR_STARTMODEURI = 6_u32
  DISPID_XMLDOM_PROCESSOR_OUTPUT = 7_u32
  DISPID_XMLDOM_PROCESSOR_TRANSFORM = 8_u32
  DISPID_XMLDOM_PROCESSOR_RESET = 9_u32
  DISPID_XMLDOM_PROCESSOR_READYSTATE = 10_u32
  DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = 11_u32
  DISPID_XMLDOM_PROCESSOR_ADDOBJECT = 12_u32
  DISPID_XMLDOM_PROCESSOR_STYLESHEET = 13_u32
  DISPID_XMLDOM_PROCESSOR__TOP = 14_u32
  DISPID_XMLDSO = 65536_u32
  DISPID_XMLDSO_DOCUMENT = 65537_u32
  DISPID_XMLDSO_JAVADSOCOMPATIBLE = 65538_u32
  DISPID_SAX_XMLREADER__MIN = 1281_u32
  DISPID_SAX_XMLREADER__MAX = 65536_u32
  DISPID_SAX_XMLREADER__BASE = 1281_u32
  DISPID_SAX_XMLREADER = 1281_u32
  DISPID_SAX_XMLREADER_GETFEATURE = 1282_u32
  DISPID_SAX_XMLREADER_PUTFEATURE = 1283_u32
  DISPID_SAX_XMLREADER_GETPROPERTY = 1284_u32
  DISPID_SAX_XMLREADER_PUTPROPERTY = 1285_u32
  DISPID_SAX_XMLREADER_ENTITYRESOLVER = 1286_u32
  DISPID_SAX_XMLREADER_CONTENTHANDLER = 1287_u32
  DISPID_SAX_XMLREADER_DTDHANDLER = 1288_u32
  DISPID_SAX_XMLREADER_ERRORHANDLER = 1289_u32
  DISPID_SAX_XMLREADER_BASEURL = 1290_u32
  DISPID_SAX_XMLREADER_SECUREBASEURL = 1291_u32
  DISPID_SAX_XMLREADER_PARSE = 1292_u32
  DISPID_SAX_XMLREADER_PARSEURL = 1293_u32
  DISPID_SAX_XMLREADER_PARENT = 1294_u32
  DISPID_SAX_XMLREADER__TOP = 1295_u32
  DISPID_SAX_XMLFILTER__BASE = 1296_u32
  DISPID_SAX_XMLFILTER = 1296_u32
  DISPID_SAX_XMLFILTER_GETFEATURE = 1297_u32
  DISPID_SAX_XMLFILTER_PUTFEATURE = 1298_u32
  DISPID_SAX_XMLFILTER_GETPROPERTY = 1299_u32
  DISPID_SAX_XMLFILTER_PUTPROPERTY = 1300_u32
  DISPID_SAX_XMLFILTER_ENTITYRESOLVER = 1301_u32
  DISPID_SAX_XMLFILTER_CONTENTHANDLER = 1302_u32
  DISPID_SAX_XMLFILTER_DTDHANDLER = 1303_u32
  DISPID_SAX_XMLFILTER_ERRORHANDLER = 1304_u32
  DISPID_SAX_XMLFILTER_BASEURL = 1305_u32
  DISPID_SAX_XMLFILTER_SECUREBASEURL = 1306_u32
  DISPID_SAX_XMLFILTER_PARSE = 1307_u32
  DISPID_SAX_XMLFILTER_PARSEURL = 1308_u32
  DISPID_SAX_XMLFILTER_PARENT = 1309_u32
  DISPID_SAX_XMLFILTER__TOP = 1311_u32
  DISPID_SAX_LOCATOR__BASE = 1312_u32
  DISPID_SAX_LOCATOR = 1312_u32
  DISPID_SAX_LOCATOR_COLUMNNUMBER = 1313_u32
  DISPID_SAX_LOCATOR_LINENUMBER = 1314_u32
  DISPID_SAX_LOCATOR_PUBLICID = 1315_u32
  DISPID_SAX_LOCATOR_SYSTEMID = 1316_u32
  DISPID_SAX_LOCATOR__TOP = 1317_u32
  DISPID_SAX_ENTITYRESOLVER__BASE = 1318_u32
  DISPID_SAX_ENTITYRESOLVER = 1318_u32
  DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = 1319_u32
  DISPID_SAX_ENTITYRESOLVER__TOP = 1320_u32
  DISPID_SAX_CONTENTHANDLER__BASE = 1321_u32
  DISPID_SAX_CONTENTHANDLER = 1321_u32
  DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = 1322_u32
  DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = 1323_u32
  DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = 1324_u32
  DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = 1325_u32
  DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = 1326_u32
  DISPID_SAX_CONTENTHANDLER_STARTELEMENT = 1327_u32
  DISPID_SAX_CONTENTHANDLER_ENDELEMENT = 1328_u32
  DISPID_SAX_CONTENTHANDLER_CHARACTERS = 1329_u32
  DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = 1330_u32
  DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = 1331_u32
  DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = 1332_u32
  DISPID_SAX_CONTENTHANDLER__TOP = 1333_u32
  DISPID_SAX_DTDHANDLER__BASE = 1334_u32
  DISPID_SAX_DTDHANDLER = 1334_u32
  DISPID_SAX_DTDHANDLER_NOTATIONDECL = 1335_u32
  DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = 1336_u32
  DISPID_SAX_DTDHANDLER__TOP = 1337_u32
  DISPID_SAX_ERRORHANDLER__BASE = 1338_u32
  DISPID_SAX_ERRORHANDLER = 1338_u32
  DISPID_SAX_ERRORHANDLER_ERROR = 1339_u32
  DISPID_SAX_ERRORHANDLER_FATALERROR = 1340_u32
  DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = 1341_u32
  DISPID_SAX_ERRORHANDLER__TOP = 1342_u32
  DISPID_SAX_ATTRIBUTES__BASE = 1343_u32
  DISPID_SAX_ATTRIBUTES = 1343_u32
  DISPID_SAX_ATTRIBUTES_LENGTH = 1344_u32
  DISPID_SAX_ATTRIBUTES_GETURI = 1345_u32
  DISPID_SAX_ATTRIBUTES_GETLOCALNAME = 1346_u32
  DISPID_SAX_ATTRIBUTES_GETQNAME = 1347_u32
  DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = 1348_u32
  DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = 1349_u32
  DISPID_SAX_ATTRIBUTES_GETTYPE = 1350_u32
  DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = 1351_u32
  DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = 1352_u32
  DISPID_SAX_ATTRIBUTES_GETVALUE = 1353_u32
  DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = 1354_u32
  DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = 1355_u32
  DISPID_SAX_ATTRIBUTES__TOP = 1356_u32
  DISPID_SAX_LEXICALHANDLER__BASE = 1357_u32
  DISPID_SAX_LEXICALHANDLER = 1357_u32
  DISPID_SAX_LEXICALHANDLER_STARTDTD = 1358_u32
  DISPID_SAX_LEXICALHANDLER_ENDDTD = 1359_u32
  DISPID_SAX_LEXICALHANDLER_STARTENTITY = 1360_u32
  DISPID_SAX_LEXICALHANDLER_ENDENTITY = 1361_u32
  DISPID_SAX_LEXICALHANDLER_STARTCDATA = 1362_u32
  DISPID_SAX_LEXICALHANDLER_ENDCDATA = 1363_u32
  DISPID_SAX_LEXICALHANDLER_COMMENT = 1364_u32
  DISPID_SAX_LEXICALHANDLER__TOP = 1365_u32
  DISPID_SAX_DECLHANDLER__BASE = 1366_u32
  DISPID_SAX_DECLHANDLER = 1366_u32
  DISPID_SAX_DECLHANDLER_ELEMENTDECL = 1367_u32
  DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = 1368_u32
  DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = 1369_u32
  DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = 1370_u32
  DISPID_SAX_DECLHANDLER__TOP = 1371_u32
  DISPID_MX_ATTRIBUTES__BASE = 1372_u32
  DISPID_MX_ATTRIBUTES = 1372_u32
  DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = 1373_u32
  DISPID_MX_ATTRIBUTES_CLEAR = 1374_u32
  DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = 1375_u32
  DISPID_MX_ATTRIBUTES_SETATTRIBUTE = 1376_u32
  DISPID_MX_ATTRIBUTES_SETATTRIBUTES = 1377_u32
  DISPID_MX_ATTRIBUTES_SETLOCALNAME = 1378_u32
  DISPID_MX_ATTRIBUTES_SETQNAME = 1379_u32
  DISPID_MX_ATTRIBUTES_SETTYPE = 1380_u32
  DISPID_MX_ATTRIBUTES_SETURI = 1381_u32
  DISPID_MX_ATTRIBUTES_SETVALUE = 1382_u32
  DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = 1383_u32
  DISPID_MX_ATTRIBUTES__TOP = 1383_u32
  DISPID_MX_WRITER__BASE = 1384_u32
  DISPID_MX_WRITER = 1384_u32
  DISPID_MX_WRITER_OUTPUT = 1385_u32
  DISPID_MX_WRITER_DESTINATION = 1386_u32
  DISPID_MX_WRITER_ENCODING = 1387_u32
  DISPID_MX_WRITER_BYTEORDERMARK = 1388_u32
  DISPID_MX_WRITER_INDENT = 1389_u32
  DISPID_MX_WRITER_STANDALONE = 1390_u32
  DISPID_MX_WRITER_OMITXMLDECLARATION = 1391_u32
  DISPID_MX_WRITER_VERSION = 1392_u32
  DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = 1393_u32
  DISPID_MX_WRITER_FLUSH = 1394_u32
  DISPID_MX_WRITER_RESET = 1395_u32
  DISPID_MX_WRITER__TOP = 1396_u32
  DISPID_MX_READER_CONTROL__BASE = 1397_u32
  DISPID_MX_READER_CONTROL = 1397_u32
  DISPID_MX_READER_CONTROL_ABORT = 1398_u32
  DISPID_MX_READER_CONTROL_RESUME = 1399_u32
  DISPID_MX_READER_CONTROL_SUSPEND = 1400_u32
  DISPID_MX_READER_CONTROL__TOP = 1401_u32
  DISPID_MX_SCHEMADECLHANDLER__BASE = 1402_u32
  DISPID_MX_SCHEMADECLHANDLER = 1402_u32
  DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL = 1403_u32
  DISPID_MX_SCHEMADECLHANDLER__TOP = 1404_u32
  DISPID_MX_NSMGR__BASE = 1405_u32
  DISPID_MX_NSMGR = 1405_u32
  DISPID_MX_NSMGR_ALLOWOVERRIDE = 1406_u32
  DISPID_MX_NSMGR_RESET = 1407_u32
  DISPID_MX_NSMGR_PUSHCONTEXT = 1408_u32
  DISPID_MX_NSMGR_PUSHNODECONTEXT = 1409_u32
  DISPID_MX_NSMGR_POPCONTEXT = 1410_u32
  DISPID_MX_NSMGR_DECLAREPREFIX = 1411_u32
  DISPID_MX_NSMGR_GETDECLAREDPREFIXES = 1412_u32
  DISPID_MX_NSMGR_GETPREFIXES = 1413_u32
  DISPID_MX_NSMGR_GETURI = 1414_u32
  DISPID_MX_NSMGR_GETURIFROMNODE = 1415_u32
  DISPID_MX_NSMGR_LENGTH = 1416_u32
  DISPID_MX_NSMGR__TOP = 1417_u32
  DISPID_MXXML_FILTER__BASE = 1418_u32
  DISPID_MXXML_FILTER = 1418_u32
  DISPID_MXXML_FILTER_CONTENTHANDLER = 1419_u32
  DISPID_MXXML_FILTER_DTDHANDLER = 1420_u32
  DISPID_MXXML_FILTER_ENTITYRESOLVER = 1421_u32
  DISPID_MXXML_FILTER_ERRORHANDLER = 1422_u32
  DISPID_MXXML_FILTER_GETFEATURE = 1423_u32
  DISPID_MXXML_FILTER_GETPROPERTY = 1424_u32
  DISPID_MXXML_FILTER_PUTFEATURE = 1425_u32
  DISPID_MXXML_FILTER_PUTPROPERTY = 1426_u32
  DISPID_MXXML_FILTER__TOP = 1427_u32
  DISPID_SOM = 1418_u32
  DISPID_SOM_VALIDATE = 1419_u32
  DISPID_SOM_VALIDATEONLOAD = 1420_u32
  DISPID_SOM_GETSCHEMA = 1421_u32
  DISPID_SOM_GETDECLARATION = 1422_u32
  DISPID_SOM_ITEMBYNAME = 1423_u32
  DISPID_SOM_ITEMBYQNAME = 1424_u32
  DISPID_SOM_ANYATTRIBUTE = 1425_u32
  DISPID_SOM_ATTRIBUTEGROUPS = 1426_u32
  DISPID_SOM_ATTRIBUTES = 1427_u32
  DISPID_SOM_BASETYPES = 1428_u32
  DISPID_SOM_CONTENTMODEL = 1429_u32
  DISPID_SOM_CONTENTTYPE = 1430_u32
  DISPID_SOM_DEFAULTVALUE = 1431_u32
  DISPID_SOM_DERIVEDBY = 1432_u32
  DISPID_SOM_DISALLOWED = 1433_u32
  DISPID_SOM_ELEMENTS = 1434_u32
  DISPID_SOM_ENUMERATION = 1435_u32
  DISPID_SOM_FIELDS = 1436_u32
  DISPID_SOM_FINAL = 1437_u32
  DISPID_SOM_FIXEDVALUE = 1438_u32
  DISPID_SOM_FRACTIONDIGITS = 1439_u32
  DISPID_SOM_ID = 1440_u32
  DISPID_SOM_IDCONSTRAINTS = 1441_u32
  DISPID_SOM_ISABSTRACT = 1442_u32
  DISPID_SOM_ISNILLABLE = 1443_u32
  DISPID_SOM_ISREFERENCE = 1444_u32
  DISPID_SOM_ISVALID = 1445_u32
  DISPID_SOM_ITEMTYPE = 1446_u32
  DISPID_SOM_LENGTH = 1447_u32
  DISPID_SOM_MAXEXCLUSIVE = 1448_u32
  DISPID_SOM_MAXINCLUSIVE = 1449_u32
  DISPID_SOM_MAXLENGTH = 1450_u32
  DISPID_SOM_MAXOCCURS = 1451_u32
  DISPID_SOM_MINEXCLUSIVE = 1452_u32
  DISPID_SOM_MININCLUSIVE = 1453_u32
  DISPID_SOM_MINLENGTH = 1454_u32
  DISPID_SOM_MINOCCURS = 1455_u32
  DISPID_SOM_MODELGROUPS = 1456_u32
  DISPID_SOM_NAME = 1457_u32
  DISPID_SOM_NAMESPACES = 1458_u32
  DISPID_SOM_NAMESPACEURI = 1459_u32
  DISPID_SOM_NOTATIONS = 1460_u32
  DISPID_SOM_PARTICLES = 1461_u32
  DISPID_SOM_PATTERNS = 1462_u32
  DISPID_SOM_PROCESSCONTENTS = 1463_u32
  DISPID_SOM_PROHIBITED = 1464_u32
  DISPID_SOM_PUBLICIDENTIFIER = 1465_u32
  DISPID_SOM_REFERENCEDKEY = 1466_u32
  DISPID_SOM_SCHEMA = 1467_u32
  DISPID_SOM_SCHEMALOCATIONS = 1468_u32
  DISPID_SOM_SCOPE = 1469_u32
  DISPID_SOM_SELECTOR = 1470_u32
  DISPID_SOM_SUBSTITUTIONGROUP = 1471_u32
  DISPID_SOM_EXCLUSIONS = 1472_u32
  DISPID_SOM_SYSTEMIDENTIFIER = 1473_u32
  DISPID_SOM_TARGETNAMESPACE = 1474_u32
  DISPID_SOM_TOTALDIGITS = 1475_u32
  DISPID_SOM_TYPE = 1476_u32
  DISPID_SOM_TYPES = 1477_u32
  DISPID_SOM_UNHANDLEDATTRS = 1478_u32
  DISPID_SOM_USE = 1479_u32
  DISPID_SOM_VARIETY = 1480_u32
  DISPID_SOM_VERSION = 1481_u32
  DISPID_SOM_WHITESPACE = 1482_u32
  DISPID_SOM_WRITEANNOTATION = 1483_u32
  DISPID_SOM_TOP = 1484_u32
  DISPID_XMLDSIG = 1_u32
  DISPID_XMLDSIG_CREATEKEYFROMCSP = 1_u32
  DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET = 2_u32
  DISPID_XMLDSIG_CREATEKEYFROMNODE = 3_u32
  DISPID_XMLDSIG_CREATESAXPROXY = 4_u32
  DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE = 5_u32
  DISPID_XMLDSIG_SETREFERENCEDATA = 6_u32
  DISPID_XMLDSIG_SIGN = 7_u32
  DISPID_XMLDSIG_SIGNATURE = 8_u32
  DISPID_XMLDSIG_STORE = 9_u32
  DISPID_XMLDSIG_VERIFY = 10_u32

  CLSID_DOMDocument = LibC::GUID.new(0x2933bf90_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])

  CLSID_DOMFreeThreadedDocument = LibC::GUID.new(0x2933bf91_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])

  CLSID_XMLHTTPRequest = LibC::GUID.new(0xed8c108e_u32, 0x4349_u16, 0x11d2_u16, StaticArray[0x91_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x69_u8, 0xe8_u8])

  CLSID_XMLDSOControl = LibC::GUID.new(0x550dda30_u32, 0x541_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa9_u8, 0x0_u8, 0x60_u8, 0xb0_u8, 0xec_u8, 0x3d_u8, 0x39_u8])

  CLSID_XMLDocument = LibC::GUID.new(0xcfc399af_u32, 0xd876_u16, 0x11d0_u16, StaticArray[0x9c_u8, 0x10_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0x9c_u8, 0x8e_u8])

  CLSID_DOMDocument60 = LibC::GUID.new(0x88d96a05_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_FreeThreadedDOMDocument60 = LibC::GUID.new(0x88d96a06_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_XMLSchemaCache60 = LibC::GUID.new(0x88d96a07_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_XSLTemplate60 = LibC::GUID.new(0x88d96a08_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_XMLHTTP60 = LibC::GUID.new(0x88d96a0a_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_FreeThreadedXMLHTTP60 = LibC::GUID.new(0x88d96a09_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_ServerXMLHTTP60 = LibC::GUID.new(0x88d96a0b_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_SAXXMLReader60 = LibC::GUID.new(0x88d96a0c_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_MXXMLWriter60 = LibC::GUID.new(0x88d96a0f_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_MXHTMLWriter60 = LibC::GUID.new(0x88d96a10_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_SAXAttributes60 = LibC::GUID.new(0x88d96a0e_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  CLSID_MXNamespaceManager60 = LibC::GUID.new(0x88d96a11_u32, 0xf192_u16, 0x11d4_u16, StaticArray[0xa6_u8, 0x5f_u8, 0x0_u8, 0x40_u8, 0x96_u8, 0x32_u8, 0x51_u8, 0xe5_u8])

  enum DOMNodeType
    NODE_INVALID = 0_i32
    NODE_ELEMENT = 1_i32
    NODE_ATTRIBUTE = 2_i32
    NODE_TEXT = 3_i32
    NODE_CDATA_SECTION = 4_i32
    NODE_ENTITY_REFERENCE = 5_i32
    NODE_ENTITY = 6_i32
    NODE_PROCESSING_INSTRUCTION = 7_i32
    NODE_COMMENT = 8_i32
    NODE_DOCUMENT = 9_i32
    NODE_DOCUMENT_TYPE = 10_i32
    NODE_DOCUMENT_FRAGMENT = 11_i32
    NODE_NOTATION = 12_i32
  end
  enum XMLEMEM_TYPE
    XMLELEMTYPE_ELEMENT = 0_i32
    XMLELEMTYPE_TEXT = 1_i32
    XMLELEMTYPE_COMMENT = 2_i32
    XMLELEMTYPE_DOCUMENT = 3_i32
    XMLELEMTYPE_DTD = 4_i32
    XMLELEMTYPE_PI = 5_i32
    XMLELEMTYPE_OTHER = 6_i32
  end
  enum SERVERXMLHTTP_OPTION
    SXH_OPTION_URL = -1_i32
    SXH_OPTION_URL_CODEPAGE = 0_i32
    SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1_i32
    SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2_i32
    SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3_i32
  end
  enum SXH_SERVER_CERT_OPTION
    SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256_i32
    SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512_i32
    SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096_i32
    SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192_i32
    SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056_i32
  end
  enum SXH_PROXY_SETTING
    SXH_PROXY_SET_DEFAULT = 0_i32
    SXH_PROXY_SET_PRECONFIG = 0_i32
    SXH_PROXY_SET_DIRECT = 1_i32
    SXH_PROXY_SET_PROXY = 2_i32
  end
  enum SOMITEMTYPE
    SOMITEM_SCHEMA = 4096_i32
    SOMITEM_ATTRIBUTE = 4097_i32
    SOMITEM_ATTRIBUTEGROUP = 4098_i32
    SOMITEM_NOTATION = 4099_i32
    SOMITEM_ANNOTATION = 4100_i32
    SOMITEM_IDENTITYCONSTRAINT = 4352_i32
    SOMITEM_KEY = 4353_i32
    SOMITEM_KEYREF = 4354_i32
    SOMITEM_UNIQUE = 4355_i32
    SOMITEM_ANYTYPE = 8192_i32
    SOMITEM_DATATYPE = 8448_i32
    SOMITEM_DATATYPE_ANYTYPE = 8449_i32
    SOMITEM_DATATYPE_ANYURI = 8450_i32
    SOMITEM_DATATYPE_BASE64BINARY = 8451_i32
    SOMITEM_DATATYPE_BOOLEAN = 8452_i32
    SOMITEM_DATATYPE_BYTE = 8453_i32
    SOMITEM_DATATYPE_DATE = 8454_i32
    SOMITEM_DATATYPE_DATETIME = 8455_i32
    SOMITEM_DATATYPE_DAY = 8456_i32
    SOMITEM_DATATYPE_DECIMAL = 8457_i32
    SOMITEM_DATATYPE_DOUBLE = 8458_i32
    SOMITEM_DATATYPE_DURATION = 8459_i32
    SOMITEM_DATATYPE_ENTITIES = 8460_i32
    SOMITEM_DATATYPE_ENTITY = 8461_i32
    SOMITEM_DATATYPE_FLOAT = 8462_i32
    SOMITEM_DATATYPE_HEXBINARY = 8463_i32
    SOMITEM_DATATYPE_ID = 8464_i32
    SOMITEM_DATATYPE_IDREF = 8465_i32
    SOMITEM_DATATYPE_IDREFS = 8466_i32
    SOMITEM_DATATYPE_INT = 8467_i32
    SOMITEM_DATATYPE_INTEGER = 8468_i32
    SOMITEM_DATATYPE_LANGUAGE = 8469_i32
    SOMITEM_DATATYPE_LONG = 8470_i32
    SOMITEM_DATATYPE_MONTH = 8471_i32
    SOMITEM_DATATYPE_MONTHDAY = 8472_i32
    SOMITEM_DATATYPE_NAME = 8473_i32
    SOMITEM_DATATYPE_NCNAME = 8474_i32
    SOMITEM_DATATYPE_NEGATIVEINTEGER = 8475_i32
    SOMITEM_DATATYPE_NMTOKEN = 8476_i32
    SOMITEM_DATATYPE_NMTOKENS = 8477_i32
    SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 8478_i32
    SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 8479_i32
    SOMITEM_DATATYPE_NORMALIZEDSTRING = 8480_i32
    SOMITEM_DATATYPE_NOTATION = 8481_i32
    SOMITEM_DATATYPE_POSITIVEINTEGER = 8482_i32
    SOMITEM_DATATYPE_QNAME = 8483_i32
    SOMITEM_DATATYPE_SHORT = 8484_i32
    SOMITEM_DATATYPE_STRING = 8485_i32
    SOMITEM_DATATYPE_TIME = 8486_i32
    SOMITEM_DATATYPE_TOKEN = 8487_i32
    SOMITEM_DATATYPE_UNSIGNEDBYTE = 8488_i32
    SOMITEM_DATATYPE_UNSIGNEDINT = 8489_i32
    SOMITEM_DATATYPE_UNSIGNEDLONG = 8490_i32
    SOMITEM_DATATYPE_UNSIGNEDSHORT = 8491_i32
    SOMITEM_DATATYPE_YEAR = 8492_i32
    SOMITEM_DATATYPE_YEARMONTH = 8493_i32
    SOMITEM_DATATYPE_ANYSIMPLETYPE = 8703_i32
    SOMITEM_SIMPLETYPE = 8704_i32
    SOMITEM_COMPLEXTYPE = 9216_i32
    SOMITEM_PARTICLE = 16384_i32
    SOMITEM_ANY = 16385_i32
    SOMITEM_ANYATTRIBUTE = 16386_i32
    SOMITEM_ELEMENT = 16387_i32
    SOMITEM_GROUP = 16640_i32
    SOMITEM_ALL = 16641_i32
    SOMITEM_CHOICE = 16642_i32
    SOMITEM_SEQUENCE = 16643_i32
    SOMITEM_EMPTYPARTICLE = 16644_i32
    SOMITEM_NULL = 2048_i32
    SOMITEM_NULL_TYPE = 10240_i32
    SOMITEM_NULL_ANY = 18433_i32
    SOMITEM_NULL_ANYATTRIBUTE = 18434_i32
    SOMITEM_NULL_ELEMENT = 18435_i32
  end
  enum SCHEMAUSE
    SCHEMAUSE_OPTIONAL = 0_i32
    SCHEMAUSE_PROHIBITED = 1_i32
    SCHEMAUSE_REQUIRED = 2_i32
  end
  enum SCHEMADERIVATIONMETHOD
    SCHEMADERIVATIONMETHOD_EMPTY = 0_i32
    SCHEMADERIVATIONMETHOD_SUBSTITUTION = 1_i32
    SCHEMADERIVATIONMETHOD_EXTENSION = 2_i32
    SCHEMADERIVATIONMETHOD_RESTRICTION = 4_i32
    SCHEMADERIVATIONMETHOD_LIST = 8_i32
    SCHEMADERIVATIONMETHOD_UNION = 16_i32
    SCHEMADERIVATIONMETHOD_ALL = 255_i32
    SCHEMADERIVATIONMETHOD_NONE = 256_i32
  end
  enum SCHEMACONTENTTYPE
    SCHEMACONTENTTYPE_EMPTY = 0_i32
    SCHEMACONTENTTYPE_TEXTONLY = 1_i32
    SCHEMACONTENTTYPE_ELEMENTONLY = 2_i32
    SCHEMACONTENTTYPE_MIXED = 3_i32
  end
  enum SCHEMAPROCESSCONTENTS
    SCHEMAPROCESSCONTENTS_NONE = 0_i32
    SCHEMAPROCESSCONTENTS_SKIP = 1_i32
    SCHEMAPROCESSCONTENTS_LAX = 2_i32
    SCHEMAPROCESSCONTENTS_STRICT = 3_i32
  end
  enum SCHEMAWHITESPACE
    SCHEMAWHITESPACE_NONE = -1_i32
    SCHEMAWHITESPACE_PRESERVE = 0_i32
    SCHEMAWHITESPACE_REPLACE = 1_i32
    SCHEMAWHITESPACE_COLLAPSE = 2_i32
  end
  enum SCHEMATYPEVARIETY
    SCHEMATYPEVARIETY_NONE = -1_i32
    SCHEMATYPEVARIETY_ATOMIC = 0_i32
    SCHEMATYPEVARIETY_LIST = 1_i32
    SCHEMATYPEVARIETY_UNION = 2_i32
  end
  enum XHR_COOKIE_STATE
    XHR_COOKIE_STATE_UNKNOWN = 0_i32
    XHR_COOKIE_STATE_ACCEPT = 1_i32
    XHR_COOKIE_STATE_PROMPT = 2_i32
    XHR_COOKIE_STATE_LEASH = 3_i32
    XHR_COOKIE_STATE_DOWNGRADE = 4_i32
    XHR_COOKIE_STATE_REJECT = 5_i32
  end
  enum XHR_COOKIE_FLAG
    XHR_COOKIE_IS_SECURE = 1_i32
    XHR_COOKIE_IS_SESSION = 2_i32
    XHR_COOKIE_THIRD_PARTY = 16_i32
    XHR_COOKIE_PROMPT_REQUIRED = 32_i32
    XHR_COOKIE_EVALUATE_P3P = 64_i32
    XHR_COOKIE_APPLY_P3P = 128_i32
    XHR_COOKIE_P3P_ENABLED = 256_i32
    XHR_COOKIE_IS_RESTRICTED = 512_i32
    XHR_COOKIE_IE6 = 1024_i32
    XHR_COOKIE_IS_LEGACY = 2048_i32
    XHR_COOKIE_NON_SCRIPT = 4096_i32
    XHR_COOKIE_HTTPONLY = 8192_i32
  end
  enum XHR_CRED_PROMPT
    XHR_CRED_PROMPT_ALL = 0_i32
    XHR_CRED_PROMPT_NONE = 1_i32
    XHR_CRED_PROMPT_PROXY = 2_i32
  end
  enum XHR_AUTH
    XHR_AUTH_ALL = 0_i32
    XHR_AUTH_NONE = 1_i32
    XHR_AUTH_PROXY = 2_i32
  end
  enum XHR_PROPERTY
    XHR_PROP_NO_CRED_PROMPT = 0_i32
    XHR_PROP_NO_AUTH = 1_i32
    XHR_PROP_TIMEOUT = 2_i32
    XHR_PROP_NO_DEFAULT_HEADERS = 3_i32
    XHR_PROP_REPORT_REDIRECT_STATUS = 4_i32
    XHR_PROP_NO_CACHE = 5_i32
    XHR_PROP_EXTENDED_ERROR = 6_i32
    XHR_PROP_QUERY_STRING_UTF8 = 7_i32
    XHR_PROP_IGNORE_CERT_ERRORS = 8_i32
    XHR_PROP_ONDATA_THRESHOLD = 9_i32
    XHR_PROP_SET_ENTERPRISEID = 10_i32
    XHR_PROP_MAX_CONNECTIONS = 11_i32
  end
  enum XHR_CERT_IGNORE_FLAG : UInt32
    XHR_CERT_IGNORE_REVOCATION_FAILED = 128_u32
    XHR_CERT_IGNORE_UNKNOWN_CA = 256_u32
    XHR_CERT_IGNORE_CERT_CN_INVALID = 4096_u32
    XHR_CERT_IGNORE_CERT_DATE_INVALID = 8192_u32
    XHR_CERT_IGNORE_ALL_SERVER_ERRORS = 12672_u32
  end
  enum XHR_CERT_ERROR_FLAG : UInt32
    XHR_CERT_ERROR_REVOCATION_FAILED = 8388608_u32
    XHR_CERT_ERROR_UNKNOWN_CA = 16777216_u32
    XHR_CERT_ERROR_CERT_CN_INVALID = 33554432_u32
    XHR_CERT_ERROR_CERT_DATE_INVALID = 67108864_u32
    XHR_CERT_ERROR_ALL_SERVER_ERRORS = 125829120_u32
  end

  @[Extern]
  record XML_ERROR,
    _n_line : UInt32,
    _pch_buf : Win32cr::Foundation::BSTR,
    _cch_buf : UInt32,
    _ich : UInt32,
    _psz_found : Win32cr::Foundation::BSTR,
    _psz_expected : Win32cr::Foundation::BSTR,
    _reserved1 : UInt32,
    _reserved2 : UInt32

  @[Extern]
  record Msxml6_referenceremainingtypes____,
    __tag_dom_node_type__ : Win32cr::Data::Xml::MsXml::DOMNodeType,
    __dom_node_type__ : Win32cr::Data::Xml::MsXml::DOMNodeType,
    __server_xml_http_option_enum__ : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION,
    __server_xml_http_option__ : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION,
    __server_cert_option_enum__ : Win32cr::Data::Xml::MsXml::SXH_SERVER_CERT_OPTION,
    __server_cert_option__ : Win32cr::Data::Xml::MsXml::SXH_SERVER_CERT_OPTION,
    __proxy_setting_enum__ : Win32cr::Data::Xml::MsXml::SXH_PROXY_SETTING,
    __proxy_setting__ : Win32cr::Data::Xml::MsXml::SXH_PROXY_SETTING,
    __som_item_type_enum__ : Win32cr::Data::Xml::MsXml::SOMITEMTYPE,
    __som_item_type__ : Win32cr::Data::Xml::MsXml::SOMITEMTYPE,
    __schema_use_enum__ : Win32cr::Data::Xml::MsXml::SCHEMAUSE,
    __schema_use__ : Win32cr::Data::Xml::MsXml::SCHEMAUSE,
    __schema_derivation_method_enum__ : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD,
    __schema_derivation_method__ : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD,
    __schema_content_type_enum__ : Win32cr::Data::Xml::MsXml::SCHEMACONTENTTYPE,
    __schema_content_type__ : Win32cr::Data::Xml::MsXml::SCHEMACONTENTTYPE,
    __schema_process_contents_enum__ : Win32cr::Data::Xml::MsXml::SCHEMAPROCESSCONTENTS,
    __schema_process_contents__ : Win32cr::Data::Xml::MsXml::SCHEMAPROCESSCONTENTS,
    __schema_whitespace_enum__ : Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE,
    __schema_whitespace__ : Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE,
    __schema_type_variety_enum__ : Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY,
    __schema_type_variety__ : Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY

  @[Extern]
  record XHR_COOKIE,
    pwszUrl : Win32cr::Foundation::PWSTR,
    pwszName : Win32cr::Foundation::PWSTR,
    pwszValue : Win32cr::Foundation::PWSTR,
    pwszP3PPolicy : Win32cr::Foundation::PWSTR,
    ftExpires : Win32cr::Foundation::FILETIME,
    dwFlags : UInt32

  @[Extern]
  record XHR_CERT,
    cbCert : UInt32,
    pbCert : UInt8*

  @[Extern]
  record IXMLDOMImplementationVtbl,
    query_interface : Proc(IXMLDOMImplementation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMImplementation*, UInt32),
    release : Proc(IXMLDOMImplementation*, UInt32),
    get_type_info_count : Proc(IXMLDOMImplementation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMImplementation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMImplementation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMImplementation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    hasFeature : Proc(IXMLDOMImplementation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8f-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMImplementation, lpVtbl : IXMLDOMImplementationVtbl* do
    GUID = LibC::GUID.new(0x2933bf8f_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMImplementation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMImplementation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMImplementation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMImplementation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMImplementation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMImplementation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMImplementation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def hasFeature(this : IXMLDOMImplementation*, feature : Win32cr::Foundation::BSTR, version : Win32cr::Foundation::BSTR, hasFeature : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasFeature.call(this, feature, version, hasFeature)
    end

  end

  @[Extern]
  record IXMLDOMNodeVtbl,
    query_interface : Proc(IXMLDOMNode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMNode*, UInt32),
    release : Proc(IXMLDOMNode*, UInt32),
    get_type_info_count : Proc(IXMLDOMNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMNode*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMNode*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMNode*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMNode*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMNode*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMNode*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMNode*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMNode*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMNode*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMNode*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMNode*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMNode*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMNode*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMNode*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMNode*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMNode*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMNode*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMNode*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMNode*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMNode*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMNode*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf80-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMNode, lpVtbl : IXMLDOMNodeVtbl* do
    GUID = LibC::GUID.new(0x2933bf80_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMNode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMNode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMNode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMNode*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMNode*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMNode*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMNode*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMNode*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMNode*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMNode*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMNode*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMNode*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMNode*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMNode*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMNode*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMNode*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMNode*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMNode*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMNode*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMNode*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMNode*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMNode*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMNode*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMNode*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMNode*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMNode*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMNode*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMNode*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMNode*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMNode*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMNode*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMNode*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMNode*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMNode*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMNode*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMNode*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMNode*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMNode*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMNode*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMNode*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMNode*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMNode*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMNode*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end

  end

  @[Extern]
  record IXMLDOMDocumentFragmentVtbl,
    query_interface : Proc(IXMLDOMDocumentFragment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMDocumentFragment*, UInt32),
    release : Proc(IXMLDOMDocumentFragment*, UInt32),
    get_type_info_count : Proc(IXMLDOMDocumentFragment*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMDocumentFragment*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMDocumentFragment*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMDocumentFragment*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMDocumentFragment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMDocumentFragment*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMDocumentFragment*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMDocumentFragment*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMDocumentFragment*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMDocumentFragment*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMDocumentFragment*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMDocumentFragment*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMDocumentFragment*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMDocumentFragment*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMDocumentFragment*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMDocumentFragment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMDocumentFragment*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMDocumentFragment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMDocumentFragment*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMDocumentFragment*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMDocumentFragment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMDocumentFragment*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa413-272f-11d2-836f-0000f87a7782")]
  record IXMLDOMDocumentFragment, lpVtbl : IXMLDOMDocumentFragmentVtbl* do
    GUID = LibC::GUID.new(0x3efaa413_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : IXMLDOMDocumentFragment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMDocumentFragment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMDocumentFragment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMDocumentFragment*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMDocumentFragment*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMDocumentFragment*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMDocumentFragment*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMDocumentFragment*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMDocumentFragment*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMDocumentFragment*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMDocumentFragment*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMDocumentFragment*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMDocumentFragment*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMDocumentFragment*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMDocumentFragment*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMDocumentFragment*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMDocumentFragment*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMDocumentFragment*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMDocumentFragment*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMDocumentFragment*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMDocumentFragment*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMDocumentFragment*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMDocumentFragment*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMDocumentFragment*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMDocumentFragment*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMDocumentFragment*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMDocumentFragment*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMDocumentFragment*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMDocumentFragment*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMDocumentFragment*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMDocumentFragment*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMDocumentFragment*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMDocumentFragment*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMDocumentFragment*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMDocumentFragment*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMDocumentFragment*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMDocumentFragment*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMDocumentFragment*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMDocumentFragment*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMDocumentFragment*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMDocumentFragment*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMDocumentFragment*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMDocumentFragment*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end

  end

  @[Extern]
  record IXMLDOMDocumentVtbl,
    query_interface : Proc(IXMLDOMDocument*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMDocument*, UInt32),
    release : Proc(IXMLDOMDocument*, UInt32),
    get_type_info_count : Proc(IXMLDOMDocument*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMDocument*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMDocument*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMDocument*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMDocument*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMDocument*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMDocument*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMDocument*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMDocument*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMDocument*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMDocument*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMDocument*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_doctype : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_implementation : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_documentElement : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    putref_documentElement : Proc(IXMLDOMDocument*, Void*, Win32cr::Foundation::HRESULT),
    createElement : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createDocumentFragment : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    createTextNode : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createComment : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createCDATASection : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createProcessingInstruction : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createAttribute : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createEntityReference : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getElementsByTagName : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createNode : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    nodeFromID : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Int16*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDOMDocument*, Int32*, Win32cr::Foundation::HRESULT),
    get_parseError : Proc(IXMLDOMDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_url : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_async : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    put_async : Proc(IXMLDOMDocument*, Int16, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLDOMDocument*, Win32cr::Foundation::HRESULT),
    loadXML : Proc(IXMLDOMDocument*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    save : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_validateOnParse : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    put_validateOnParse : Proc(IXMLDOMDocument*, Int16, Win32cr::Foundation::HRESULT),
    get_resolveExternals : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    put_resolveExternals : Proc(IXMLDOMDocument*, Int16, Win32cr::Foundation::HRESULT),
    get_preserveWhiteSpace : Proc(IXMLDOMDocument*, Int16*, Win32cr::Foundation::HRESULT),
    put_preserveWhiteSpace : Proc(IXMLDOMDocument*, Int16, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ondataavailable : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ontransformnode : Proc(IXMLDOMDocument*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf81-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMDocument, lpVtbl : IXMLDOMDocumentVtbl* do
    GUID = LibC::GUID.new(0x2933bf81_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMDocument*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMDocument*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMDocument*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMDocument*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMDocument*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMDocument*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMDocument*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMDocument*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMDocument*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMDocument*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMDocument*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMDocument*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMDocument*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMDocument*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMDocument*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMDocument*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMDocument*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMDocument*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMDocument*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMDocument*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMDocument*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMDocument*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMDocument*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMDocument*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMDocument*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMDocument*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMDocument*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMDocument*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMDocument*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMDocument*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMDocument*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMDocument*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMDocument*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMDocument*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMDocument*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMDocument*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMDocument*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMDocument*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMDocument*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMDocument*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMDocument*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMDocument*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMDocument*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_doctype(this : IXMLDOMDocument*, documentType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doctype.call(this, documentType)
    end
    def get_implementation(this : IXMLDOMDocument*, impl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implementation.call(this, impl)
    end
    def get_documentElement(this : IXMLDOMDocument*, dom_element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_documentElement.call(this, dom_element)
    end
    def putref_documentElement(this : IXMLDOMDocument*, dom_element : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_documentElement.call(this, dom_element)
    end
    def createElement(this : IXMLDOMDocument*, tagName : Win32cr::Foundation::BSTR, element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createElement.call(this, tagName, element)
    end
    def createDocumentFragment(this : IXMLDOMDocument*, docFrag : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createDocumentFragment.call(this, docFrag)
    end
    def createTextNode(this : IXMLDOMDocument*, data : Win32cr::Foundation::BSTR, text : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createTextNode.call(this, data, text)
    end
    def createComment(this : IXMLDOMDocument*, data : Win32cr::Foundation::BSTR, comment : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createComment.call(this, data, comment)
    end
    def createCDATASection(this : IXMLDOMDocument*, data : Win32cr::Foundation::BSTR, cdata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createCDATASection.call(this, data, cdata)
    end
    def createProcessingInstruction(this : IXMLDOMDocument*, target : Win32cr::Foundation::BSTR, data : Win32cr::Foundation::BSTR, pi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createProcessingInstruction.call(this, target, data, pi)
    end
    def createAttribute(this : IXMLDOMDocument*, name : Win32cr::Foundation::BSTR, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createAttribute.call(this, name, attribute)
    end
    def createEntityReference(this : IXMLDOMDocument*, name : Win32cr::Foundation::BSTR, entityRef : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createEntityReference.call(this, name, entityRef)
    end
    def getElementsByTagName(this : IXMLDOMDocument*, tagName : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getElementsByTagName.call(this, tagName, resultList)
    end
    def createNode(this : IXMLDOMDocument*, type__ : Win32cr::System::Com::VARIANT, name : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createNode.call(this, type__, name, namespaceURI, node)
    end
    def nodeFromID(this : IXMLDOMDocument*, idString : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nodeFromID.call(this, idString, node)
    end
    def load(this : IXMLDOMDocument*, xmlSource : Win32cr::System::Com::VARIANT, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, xmlSource, isSuccessful)
    end
    def get_readyState(this : IXMLDOMDocument*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, value)
    end
    def get_parseError(this : IXMLDOMDocument*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parseError.call(this, errorObj)
    end
    def get_url(this : IXMLDOMDocument*, urlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, urlString)
    end
    def get_async(this : IXMLDOMDocument*, isAsync : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_async.call(this, isAsync)
    end
    def put_async(this : IXMLDOMDocument*, isAsync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_async.call(this, isAsync)
    end
    def abort(this : IXMLDOMDocument*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def loadXML(this : IXMLDOMDocument*, bstrXML : Win32cr::Foundation::BSTR, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.loadXML.call(this, bstrXML, isSuccessful)
    end
    def save(this : IXMLDOMDocument*, destination : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, destination)
    end
    def get_validateOnParse(this : IXMLDOMDocument*, isValidating : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_validateOnParse.call(this, isValidating)
    end
    def put_validateOnParse(this : IXMLDOMDocument*, isValidating : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_validateOnParse.call(this, isValidating)
    end
    def get_resolveExternals(this : IXMLDOMDocument*, isResolving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resolveExternals.call(this, isResolving)
    end
    def put_resolveExternals(this : IXMLDOMDocument*, isResolving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_resolveExternals.call(this, isResolving)
    end
    def get_preserveWhiteSpace(this : IXMLDOMDocument*, isPreserving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_preserveWhiteSpace(this : IXMLDOMDocument*, isPreserving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_onreadystatechange(this : IXMLDOMDocument*, readystatechangeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, readystatechangeSink)
    end
    def put_ondataavailable(this : IXMLDOMDocument*, ondataavailableSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ondataavailable.call(this, ondataavailableSink)
    end
    def put_ontransformnode(this : IXMLDOMDocument*, ontransformnodeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ontransformnode.call(this, ontransformnodeSink)
    end

  end

  @[Extern]
  record IXMLDOMNodeListVtbl,
    query_interface : Proc(IXMLDOMNodeList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMNodeList*, UInt32),
    release : Proc(IXMLDOMNodeList*, UInt32),
    get_type_info_count : Proc(IXMLDOMNodeList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMNodeList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMNodeList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMNodeList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXMLDOMNodeList*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMNodeList*, Int32*, Win32cr::Foundation::HRESULT),
    nextNode : Proc(IXMLDOMNodeList*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(IXMLDOMNodeList*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMNodeList*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf82-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMNodeList, lpVtbl : IXMLDOMNodeListVtbl* do
    GUID = LibC::GUID.new(0x2933bf82_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMNodeList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMNodeList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMNodeList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMNodeList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMNodeList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMNodeList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMNodeList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : IXMLDOMNodeList*, index : Int32, listItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, listItem)
    end
    def get_length(this : IXMLDOMNodeList*, listLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, listLength)
    end
    def nextNode(this : IXMLDOMNodeList*, nextItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nextNode.call(this, nextItem)
    end
    def reset(this : IXMLDOMNodeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get__newEnum(this : IXMLDOMNodeList*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end

  end

  @[Extern]
  record IXMLDOMNamedNodeMapVtbl,
    query_interface : Proc(IXMLDOMNamedNodeMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMNamedNodeMap*, UInt32),
    release : Proc(IXMLDOMNamedNodeMap*, UInt32),
    get_type_info_count : Proc(IXMLDOMNamedNodeMap*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMNamedNodeMap*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMNamedNodeMap*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMNamedNodeMap*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    getNamedItem : Proc(IXMLDOMNamedNodeMap*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    setNamedItem : Proc(IXMLDOMNamedNodeMap*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeNamedItem : Proc(IXMLDOMNamedNodeMap*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXMLDOMNamedNodeMap*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMNamedNodeMap*, Int32*, Win32cr::Foundation::HRESULT),
    getQualifiedItem : Proc(IXMLDOMNamedNodeMap*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    removeQualifiedItem : Proc(IXMLDOMNamedNodeMap*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    nextNode : Proc(IXMLDOMNamedNodeMap*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(IXMLDOMNamedNodeMap*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMNamedNodeMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf83-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMNamedNodeMap, lpVtbl : IXMLDOMNamedNodeMapVtbl* do
    GUID = LibC::GUID.new(0x2933bf83_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMNamedNodeMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMNamedNodeMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMNamedNodeMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMNamedNodeMap*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMNamedNodeMap*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMNamedNodeMap*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMNamedNodeMap*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def getNamedItem(this : IXMLDOMNamedNodeMap*, name : Win32cr::Foundation::BSTR, namedItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getNamedItem.call(this, name, namedItem)
    end
    def setNamedItem(this : IXMLDOMNamedNodeMap*, newItem : Void*, nameItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setNamedItem.call(this, newItem, nameItem)
    end
    def removeNamedItem(this : IXMLDOMNamedNodeMap*, name : Win32cr::Foundation::BSTR, namedItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeNamedItem.call(this, name, namedItem)
    end
    def get_item(this : IXMLDOMNamedNodeMap*, index : Int32, listItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, listItem)
    end
    def get_length(this : IXMLDOMNamedNodeMap*, listLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, listLength)
    end
    def getQualifiedItem(this : IXMLDOMNamedNodeMap*, baseName : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, qualifiedItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getQualifiedItem.call(this, baseName, namespaceURI, qualifiedItem)
    end
    def removeQualifiedItem(this : IXMLDOMNamedNodeMap*, baseName : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, qualifiedItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeQualifiedItem.call(this, baseName, namespaceURI, qualifiedItem)
    end
    def nextNode(this : IXMLDOMNamedNodeMap*, nextItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nextNode.call(this, nextItem)
    end
    def reset(this : IXMLDOMNamedNodeMap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get__newEnum(this : IXMLDOMNamedNodeMap*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end

  end

  @[Extern]
  record IXMLDOMCharacterDataVtbl,
    query_interface : Proc(IXMLDOMCharacterData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMCharacterData*, UInt32),
    release : Proc(IXMLDOMCharacterData*, UInt32),
    get_type_info_count : Proc(IXMLDOMCharacterData*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMCharacterData*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMCharacterData*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMCharacterData*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMCharacterData*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMCharacterData*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMCharacterData*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMCharacterData*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMCharacterData*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMCharacterData*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMCharacterData*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMCharacterData*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMCharacterData*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMCharacterData*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMCharacterData*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMCharacterData*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMCharacterData*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMCharacterData*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMCharacterData*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMCharacterData*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMCharacterData*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_data : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_data : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMCharacterData*, Int32*, Win32cr::Foundation::HRESULT),
    substringData : Proc(IXMLDOMCharacterData*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    appendData : Proc(IXMLDOMCharacterData*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    insertData : Proc(IXMLDOMCharacterData*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    deleteData : Proc(IXMLDOMCharacterData*, Int32, Int32, Win32cr::Foundation::HRESULT),
    replaceData : Proc(IXMLDOMCharacterData*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf84-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMCharacterData, lpVtbl : IXMLDOMCharacterDataVtbl* do
    GUID = LibC::GUID.new(0x2933bf84_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMCharacterData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMCharacterData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMCharacterData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMCharacterData*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMCharacterData*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMCharacterData*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMCharacterData*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMCharacterData*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMCharacterData*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMCharacterData*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMCharacterData*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMCharacterData*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMCharacterData*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMCharacterData*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMCharacterData*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMCharacterData*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMCharacterData*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMCharacterData*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMCharacterData*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMCharacterData*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMCharacterData*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMCharacterData*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMCharacterData*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMCharacterData*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMCharacterData*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMCharacterData*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMCharacterData*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMCharacterData*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMCharacterData*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMCharacterData*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMCharacterData*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMCharacterData*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMCharacterData*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMCharacterData*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMCharacterData*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMCharacterData*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMCharacterData*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMCharacterData*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMCharacterData*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMCharacterData*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMCharacterData*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMCharacterData*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMCharacterData*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_data(this : IXMLDOMCharacterData*, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data)
    end
    def put_data(this : IXMLDOMCharacterData*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_data.call(this, data)
    end
    def get_length(this : IXMLDOMCharacterData*, dataLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, dataLength)
    end
    def substringData(this : IXMLDOMCharacterData*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.substringData.call(this, offset, count, data)
    end
    def appendData(this : IXMLDOMCharacterData*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendData.call(this, data)
    end
    def insertData(this : IXMLDOMCharacterData*, offset : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertData.call(this, offset, data)
    end
    def deleteData(this : IXMLDOMCharacterData*, offset : Int32, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deleteData.call(this, offset, count)
    end
    def replaceData(this : IXMLDOMCharacterData*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceData.call(this, offset, count, data)
    end

  end

  @[Extern]
  record IXMLDOMAttributeVtbl,
    query_interface : Proc(IXMLDOMAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMAttribute*, UInt32),
    release : Proc(IXMLDOMAttribute*, UInt32),
    get_type_info_count : Proc(IXMLDOMAttribute*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMAttribute*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMAttribute*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMAttribute*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMAttribute*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMAttribute*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMAttribute*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMAttribute*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMAttribute*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMAttribute*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMAttribute*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMAttribute*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMAttribute*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMAttribute*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMAttribute*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_name : Proc(IXMLDOMAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_value : Proc(IXMLDOMAttribute*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf85-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMAttribute, lpVtbl : IXMLDOMAttributeVtbl* do
    GUID = LibC::GUID.new(0x2933bf85_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMAttribute*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMAttribute*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMAttribute*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMAttribute*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMAttribute*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMAttribute*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMAttribute*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMAttribute*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMAttribute*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMAttribute*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMAttribute*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMAttribute*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMAttribute*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMAttribute*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMAttribute*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMAttribute*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMAttribute*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMAttribute*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMAttribute*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMAttribute*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMAttribute*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMAttribute*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMAttribute*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMAttribute*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMAttribute*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMAttribute*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMAttribute*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMAttribute*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMAttribute*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMAttribute*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMAttribute*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMAttribute*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMAttribute*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMAttribute*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMAttribute*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMAttribute*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMAttribute*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMAttribute*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMAttribute*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMAttribute*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_name(this : IXMLDOMAttribute*, attributeName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, attributeName)
    end
    def get_value(this : IXMLDOMAttribute*, attributeValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, attributeValue)
    end
    def put_value(this : IXMLDOMAttribute*, attributeValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_value.call(this, attributeValue)
    end

  end

  @[Extern]
  record IXMLDOMElementVtbl,
    query_interface : Proc(IXMLDOMElement*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMElement*, UInt32),
    release : Proc(IXMLDOMElement*, UInt32),
    get_type_info_count : Proc(IXMLDOMElement*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMElement*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMElement*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMElement*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMElement*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMElement*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMElement*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMElement*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMElement*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMElement*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMElement*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMElement*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMElement*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMElement*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMElement*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMElement*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMElement*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMElement*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMElement*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_tagName : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAttribute : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    setAttribute : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    removeAttribute : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getAttributeNode : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    setAttributeNode : Proc(IXMLDOMElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeAttributeNode : Proc(IXMLDOMElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    getElementsByTagName : Proc(IXMLDOMElement*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    normalize : Proc(IXMLDOMElement*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf86-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMElement, lpVtbl : IXMLDOMElementVtbl* do
    GUID = LibC::GUID.new(0x2933bf86_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMElement*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMElement*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMElement*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMElement*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMElement*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMElement*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMElement*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMElement*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMElement*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMElement*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMElement*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMElement*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMElement*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMElement*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMElement*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMElement*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMElement*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMElement*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMElement*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMElement*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMElement*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMElement*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMElement*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMElement*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMElement*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMElement*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMElement*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMElement*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMElement*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMElement*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMElement*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMElement*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMElement*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMElement*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMElement*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMElement*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMElement*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMElement*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMElement*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMElement*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMElement*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMElement*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMElement*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_tagName(this : IXMLDOMElement*, tagName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tagName.call(this, tagName)
    end
    def getAttribute(this : IXMLDOMElement*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttribute.call(this, name, value)
    end
    def setAttribute(this : IXMLDOMElement*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttribute.call(this, name, value)
    end
    def removeAttribute(this : IXMLDOMElement*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAttribute.call(this, name)
    end
    def getAttributeNode(this : IXMLDOMElement*, name : Win32cr::Foundation::BSTR, attributeNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeNode.call(this, name, attributeNode)
    end
    def setAttributeNode(this : IXMLDOMElement*, dom_attribute : Void*, attributeNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttributeNode.call(this, dom_attribute, attributeNode)
    end
    def removeAttributeNode(this : IXMLDOMElement*, dom_attribute : Void*, attributeNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAttributeNode.call(this, dom_attribute, attributeNode)
    end
    def getElementsByTagName(this : IXMLDOMElement*, tagName : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getElementsByTagName.call(this, tagName, resultList)
    end
    def normalize(this : IXMLDOMElement*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.normalize.call(this)
    end

  end

  @[Extern]
  record IXMLDOMTextVtbl,
    query_interface : Proc(IXMLDOMText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMText*, UInt32),
    release : Proc(IXMLDOMText*, UInt32),
    get_type_info_count : Proc(IXMLDOMText*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMText*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMText*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMText*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMText*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMText*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMText*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMText*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMText*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMText*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMText*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMText*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMText*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMText*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMText*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMText*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMText*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMText*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMText*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMText*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMText*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_data : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_data : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMText*, Int32*, Win32cr::Foundation::HRESULT),
    substringData : Proc(IXMLDOMText*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    appendData : Proc(IXMLDOMText*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    insertData : Proc(IXMLDOMText*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    deleteData : Proc(IXMLDOMText*, Int32, Int32, Win32cr::Foundation::HRESULT),
    replaceData : Proc(IXMLDOMText*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    splitText : Proc(IXMLDOMText*, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf87-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMText, lpVtbl : IXMLDOMTextVtbl* do
    GUID = LibC::GUID.new(0x2933bf87_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMText*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMText*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMText*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMText*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMText*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMText*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMText*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMText*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMText*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMText*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMText*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMText*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMText*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMText*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMText*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMText*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMText*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMText*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMText*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMText*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMText*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMText*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMText*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMText*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMText*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMText*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMText*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMText*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMText*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMText*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMText*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMText*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMText*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMText*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMText*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMText*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMText*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMText*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMText*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMText*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_data(this : IXMLDOMText*, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data)
    end
    def put_data(this : IXMLDOMText*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_data.call(this, data)
    end
    def get_length(this : IXMLDOMText*, dataLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, dataLength)
    end
    def substringData(this : IXMLDOMText*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.substringData.call(this, offset, count, data)
    end
    def appendData(this : IXMLDOMText*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendData.call(this, data)
    end
    def insertData(this : IXMLDOMText*, offset : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertData.call(this, offset, data)
    end
    def deleteData(this : IXMLDOMText*, offset : Int32, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deleteData.call(this, offset, count)
    end
    def replaceData(this : IXMLDOMText*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceData.call(this, offset, count, data)
    end
    def splitText(this : IXMLDOMText*, offset : Int32, rightHandTextNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.splitText.call(this, offset, rightHandTextNode)
    end

  end

  @[Extern]
  record IXMLDOMCommentVtbl,
    query_interface : Proc(IXMLDOMComment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMComment*, UInt32),
    release : Proc(IXMLDOMComment*, UInt32),
    get_type_info_count : Proc(IXMLDOMComment*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMComment*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMComment*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMComment*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMComment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMComment*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMComment*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMComment*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMComment*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMComment*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMComment*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMComment*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMComment*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMComment*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMComment*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMComment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMComment*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMComment*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMComment*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMComment*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMComment*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_data : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_data : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMComment*, Int32*, Win32cr::Foundation::HRESULT),
    substringData : Proc(IXMLDOMComment*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    appendData : Proc(IXMLDOMComment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    insertData : Proc(IXMLDOMComment*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    deleteData : Proc(IXMLDOMComment*, Int32, Int32, Win32cr::Foundation::HRESULT),
    replaceData : Proc(IXMLDOMComment*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf88-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMComment, lpVtbl : IXMLDOMCommentVtbl* do
    GUID = LibC::GUID.new(0x2933bf88_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMComment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMComment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMComment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMComment*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMComment*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMComment*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMComment*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMComment*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMComment*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMComment*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMComment*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMComment*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMComment*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMComment*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMComment*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMComment*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMComment*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMComment*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMComment*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMComment*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMComment*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMComment*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMComment*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMComment*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMComment*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMComment*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMComment*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMComment*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMComment*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMComment*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMComment*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMComment*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMComment*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMComment*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMComment*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMComment*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMComment*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMComment*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMComment*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMComment*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMComment*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMComment*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMComment*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_data(this : IXMLDOMComment*, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data)
    end
    def put_data(this : IXMLDOMComment*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_data.call(this, data)
    end
    def get_length(this : IXMLDOMComment*, dataLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, dataLength)
    end
    def substringData(this : IXMLDOMComment*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.substringData.call(this, offset, count, data)
    end
    def appendData(this : IXMLDOMComment*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendData.call(this, data)
    end
    def insertData(this : IXMLDOMComment*, offset : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertData.call(this, offset, data)
    end
    def deleteData(this : IXMLDOMComment*, offset : Int32, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deleteData.call(this, offset, count)
    end
    def replaceData(this : IXMLDOMComment*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceData.call(this, offset, count, data)
    end

  end

  @[Extern]
  record IXMLDOMProcessingInstructionVtbl,
    query_interface : Proc(IXMLDOMProcessingInstruction*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMProcessingInstruction*, UInt32),
    release : Proc(IXMLDOMProcessingInstruction*, UInt32),
    get_type_info_count : Proc(IXMLDOMProcessingInstruction*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMProcessingInstruction*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMProcessingInstruction*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMProcessingInstruction*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMProcessingInstruction*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMProcessingInstruction*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMProcessingInstruction*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMProcessingInstruction*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMProcessingInstruction*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMProcessingInstruction*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMProcessingInstruction*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMProcessingInstruction*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMProcessingInstruction*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMProcessingInstruction*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMProcessingInstruction*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMProcessingInstruction*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMProcessingInstruction*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMProcessingInstruction*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMProcessingInstruction*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMProcessingInstruction*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMProcessingInstruction*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_target : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_data : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_data : Proc(IXMLDOMProcessingInstruction*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf89-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMProcessingInstruction, lpVtbl : IXMLDOMProcessingInstructionVtbl* do
    GUID = LibC::GUID.new(0x2933bf89_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMProcessingInstruction*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMProcessingInstruction*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMProcessingInstruction*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMProcessingInstruction*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMProcessingInstruction*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMProcessingInstruction*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMProcessingInstruction*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMProcessingInstruction*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMProcessingInstruction*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMProcessingInstruction*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMProcessingInstruction*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMProcessingInstruction*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMProcessingInstruction*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMProcessingInstruction*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMProcessingInstruction*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMProcessingInstruction*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMProcessingInstruction*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMProcessingInstruction*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMProcessingInstruction*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMProcessingInstruction*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMProcessingInstruction*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMProcessingInstruction*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMProcessingInstruction*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMProcessingInstruction*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMProcessingInstruction*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMProcessingInstruction*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMProcessingInstruction*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMProcessingInstruction*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMProcessingInstruction*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMProcessingInstruction*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMProcessingInstruction*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMProcessingInstruction*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMProcessingInstruction*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMProcessingInstruction*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMProcessingInstruction*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMProcessingInstruction*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMProcessingInstruction*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMProcessingInstruction*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMProcessingInstruction*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMProcessingInstruction*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMProcessingInstruction*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMProcessingInstruction*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMProcessingInstruction*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_target(this : IXMLDOMProcessingInstruction*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_target.call(this, name)
    end
    def get_data(this : IXMLDOMProcessingInstruction*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, value)
    end
    def put_data(this : IXMLDOMProcessingInstruction*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_data.call(this, value)
    end

  end

  @[Extern]
  record IXMLDOMCDATASectionVtbl,
    query_interface : Proc(IXMLDOMCDATASection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMCDATASection*, UInt32),
    release : Proc(IXMLDOMCDATASection*, UInt32),
    get_type_info_count : Proc(IXMLDOMCDATASection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMCDATASection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMCDATASection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMCDATASection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMCDATASection*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMCDATASection*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMCDATASection*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMCDATASection*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMCDATASection*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMCDATASection*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMCDATASection*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMCDATASection*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMCDATASection*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMCDATASection*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMCDATASection*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMCDATASection*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMCDATASection*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMCDATASection*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMCDATASection*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMCDATASection*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMCDATASection*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_data : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_data : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMCDATASection*, Int32*, Win32cr::Foundation::HRESULT),
    substringData : Proc(IXMLDOMCDATASection*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    appendData : Proc(IXMLDOMCDATASection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    insertData : Proc(IXMLDOMCDATASection*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    deleteData : Proc(IXMLDOMCDATASection*, Int32, Int32, Win32cr::Foundation::HRESULT),
    replaceData : Proc(IXMLDOMCDATASection*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    splitText : Proc(IXMLDOMCDATASection*, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8a-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMCDATASection, lpVtbl : IXMLDOMCDATASectionVtbl* do
    GUID = LibC::GUID.new(0x2933bf8a_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMCDATASection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMCDATASection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMCDATASection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMCDATASection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMCDATASection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMCDATASection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMCDATASection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMCDATASection*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMCDATASection*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMCDATASection*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMCDATASection*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMCDATASection*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMCDATASection*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMCDATASection*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMCDATASection*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMCDATASection*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMCDATASection*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMCDATASection*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMCDATASection*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMCDATASection*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMCDATASection*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMCDATASection*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMCDATASection*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMCDATASection*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMCDATASection*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMCDATASection*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMCDATASection*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMCDATASection*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMCDATASection*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMCDATASection*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMCDATASection*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMCDATASection*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMCDATASection*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMCDATASection*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMCDATASection*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMCDATASection*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMCDATASection*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMCDATASection*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMCDATASection*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMCDATASection*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMCDATASection*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMCDATASection*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMCDATASection*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_data(this : IXMLDOMCDATASection*, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data)
    end
    def put_data(this : IXMLDOMCDATASection*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_data.call(this, data)
    end
    def get_length(this : IXMLDOMCDATASection*, dataLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, dataLength)
    end
    def substringData(this : IXMLDOMCDATASection*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.substringData.call(this, offset, count, data)
    end
    def appendData(this : IXMLDOMCDATASection*, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendData.call(this, data)
    end
    def insertData(this : IXMLDOMCDATASection*, offset : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertData.call(this, offset, data)
    end
    def deleteData(this : IXMLDOMCDATASection*, offset : Int32, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deleteData.call(this, offset, count)
    end
    def replaceData(this : IXMLDOMCDATASection*, offset : Int32, count : Int32, data : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceData.call(this, offset, count, data)
    end
    def splitText(this : IXMLDOMCDATASection*, offset : Int32, rightHandTextNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.splitText.call(this, offset, rightHandTextNode)
    end

  end

  @[Extern]
  record IXMLDOMDocumentTypeVtbl,
    query_interface : Proc(IXMLDOMDocumentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMDocumentType*, UInt32),
    release : Proc(IXMLDOMDocumentType*, UInt32),
    get_type_info_count : Proc(IXMLDOMDocumentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMDocumentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMDocumentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMDocumentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMDocumentType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMDocumentType*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMDocumentType*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMDocumentType*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMDocumentType*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMDocumentType*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMDocumentType*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMDocumentType*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMDocumentType*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMDocumentType*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMDocumentType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMDocumentType*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMDocumentType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMDocumentType*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMDocumentType*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMDocumentType*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_name : Proc(IXMLDOMDocumentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_entities : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT),
    get_notations : Proc(IXMLDOMDocumentType*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8b-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMDocumentType, lpVtbl : IXMLDOMDocumentTypeVtbl* do
    GUID = LibC::GUID.new(0x2933bf8b_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMDocumentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMDocumentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMDocumentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMDocumentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMDocumentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMDocumentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMDocumentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMDocumentType*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMDocumentType*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMDocumentType*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMDocumentType*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMDocumentType*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMDocumentType*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMDocumentType*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMDocumentType*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMDocumentType*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMDocumentType*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMDocumentType*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMDocumentType*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMDocumentType*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMDocumentType*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMDocumentType*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMDocumentType*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMDocumentType*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMDocumentType*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMDocumentType*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMDocumentType*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMDocumentType*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMDocumentType*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMDocumentType*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMDocumentType*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMDocumentType*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMDocumentType*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMDocumentType*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMDocumentType*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMDocumentType*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMDocumentType*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMDocumentType*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMDocumentType*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMDocumentType*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMDocumentType*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMDocumentType*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMDocumentType*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_name(this : IXMLDOMDocumentType*, rootName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, rootName)
    end
    def get_entities(this : IXMLDOMDocumentType*, entityMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entities.call(this, entityMap)
    end
    def get_notations(this : IXMLDOMDocumentType*, notationMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notations.call(this, notationMap)
    end

  end

  @[Extern]
  record IXMLDOMNotationVtbl,
    query_interface : Proc(IXMLDOMNotation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMNotation*, UInt32),
    release : Proc(IXMLDOMNotation*, UInt32),
    get_type_info_count : Proc(IXMLDOMNotation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMNotation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMNotation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMNotation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMNotation*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMNotation*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMNotation*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMNotation*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMNotation*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMNotation*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMNotation*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMNotation*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMNotation*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMNotation*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMNotation*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_publicId : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_systemId : Proc(IXMLDOMNotation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8c-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMNotation, lpVtbl : IXMLDOMNotationVtbl* do
    GUID = LibC::GUID.new(0x2933bf8c_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMNotation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMNotation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMNotation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMNotation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMNotation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMNotation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMNotation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMNotation*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMNotation*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMNotation*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMNotation*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMNotation*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMNotation*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMNotation*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMNotation*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMNotation*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMNotation*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMNotation*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMNotation*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMNotation*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMNotation*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMNotation*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMNotation*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMNotation*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMNotation*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMNotation*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMNotation*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMNotation*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMNotation*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMNotation*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMNotation*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMNotation*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMNotation*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMNotation*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMNotation*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMNotation*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMNotation*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMNotation*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMNotation*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMNotation*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMNotation*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMNotation*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMNotation*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_publicId(this : IXMLDOMNotation*, publicID : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_publicId.call(this, publicID)
    end
    def get_systemId(this : IXMLDOMNotation*, systemID : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_systemId.call(this, systemID)
    end

  end

  @[Extern]
  record IXMLDOMEntityVtbl,
    query_interface : Proc(IXMLDOMEntity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMEntity*, UInt32),
    release : Proc(IXMLDOMEntity*, UInt32),
    get_type_info_count : Proc(IXMLDOMEntity*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMEntity*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMEntity*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMEntity*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMEntity*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMEntity*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMEntity*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMEntity*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMEntity*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMEntity*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMEntity*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMEntity*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMEntity*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMEntity*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMEntity*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMEntity*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_publicId : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_systemId : Proc(IXMLDOMEntity*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_notationName : Proc(IXMLDOMEntity*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8d-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMEntity, lpVtbl : IXMLDOMEntityVtbl* do
    GUID = LibC::GUID.new(0x2933bf8d_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMEntity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMEntity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMEntity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMEntity*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMEntity*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMEntity*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMEntity*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMEntity*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMEntity*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMEntity*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMEntity*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMEntity*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMEntity*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMEntity*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMEntity*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMEntity*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMEntity*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMEntity*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMEntity*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMEntity*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMEntity*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMEntity*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMEntity*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMEntity*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMEntity*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMEntity*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMEntity*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMEntity*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMEntity*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMEntity*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMEntity*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMEntity*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMEntity*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMEntity*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMEntity*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMEntity*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMEntity*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMEntity*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMEntity*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMEntity*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMEntity*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMEntity*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMEntity*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_publicId(this : IXMLDOMEntity*, publicID : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_publicId.call(this, publicID)
    end
    def get_systemId(this : IXMLDOMEntity*, systemID : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_systemId.call(this, systemID)
    end
    def get_notationName(this : IXMLDOMEntity*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notationName.call(this, name)
    end

  end

  @[Extern]
  record IXMLDOMEntityReferenceVtbl,
    query_interface : Proc(IXMLDOMEntityReference*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMEntityReference*, UInt32),
    release : Proc(IXMLDOMEntityReference*, UInt32),
    get_type_info_count : Proc(IXMLDOMEntityReference*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMEntityReference*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMEntityReference*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMEntityReference*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMEntityReference*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMEntityReference*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMEntityReference*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMEntityReference*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMEntityReference*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMEntityReference*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMEntityReference*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMEntityReference*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMEntityReference*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMEntityReference*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMEntityReference*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMEntityReference*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMEntityReference*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMEntityReference*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMEntityReference*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMEntityReference*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMEntityReference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMEntityReference*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf8e-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMEntityReference, lpVtbl : IXMLDOMEntityReferenceVtbl* do
    GUID = LibC::GUID.new(0x2933bf8e_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMEntityReference*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMEntityReference*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMEntityReference*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMEntityReference*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMEntityReference*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMEntityReference*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMEntityReference*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMEntityReference*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMEntityReference*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMEntityReference*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMEntityReference*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMEntityReference*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMEntityReference*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMEntityReference*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMEntityReference*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMEntityReference*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMEntityReference*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMEntityReference*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMEntityReference*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMEntityReference*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMEntityReference*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMEntityReference*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMEntityReference*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMEntityReference*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMEntityReference*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMEntityReference*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMEntityReference*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMEntityReference*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMEntityReference*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMEntityReference*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMEntityReference*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMEntityReference*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMEntityReference*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMEntityReference*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMEntityReference*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMEntityReference*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMEntityReference*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMEntityReference*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMEntityReference*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMEntityReference*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMEntityReference*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMEntityReference*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMEntityReference*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end

  end

  @[Extern]
  record IXMLDOMParseErrorVtbl,
    query_interface : Proc(IXMLDOMParseError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMParseError*, UInt32),
    release : Proc(IXMLDOMParseError*, UInt32),
    get_type_info_count : Proc(IXMLDOMParseError*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMParseError*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMParseError*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMParseError*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_errorCode : Proc(IXMLDOMParseError*, Int32*, Win32cr::Foundation::HRESULT),
    get_url : Proc(IXMLDOMParseError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_reason : Proc(IXMLDOMParseError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_srcText : Proc(IXMLDOMParseError*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_line : Proc(IXMLDOMParseError*, Int32*, Win32cr::Foundation::HRESULT),
    get_linepos : Proc(IXMLDOMParseError*, Int32*, Win32cr::Foundation::HRESULT),
    get_filepos : Proc(IXMLDOMParseError*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa426-272f-11d2-836f-0000f87a7782")]
  record IXMLDOMParseError, lpVtbl : IXMLDOMParseErrorVtbl* do
    GUID = LibC::GUID.new(0x3efaa426_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : IXMLDOMParseError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMParseError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMParseError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMParseError*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMParseError*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMParseError*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMParseError*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_errorCode(this : IXMLDOMParseError*, errorCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorCode.call(this, errorCode)
    end
    def get_url(this : IXMLDOMParseError*, urlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, urlString)
    end
    def get_reason(this : IXMLDOMParseError*, reasonString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reason.call(this, reasonString)
    end
    def get_srcText(this : IXMLDOMParseError*, sourceString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_srcText.call(this, sourceString)
    end
    def get_line(this : IXMLDOMParseError*, lineNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line.call(this, lineNumber)
    end
    def get_linepos(this : IXMLDOMParseError*, linePosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_linepos.call(this, linePosition)
    end
    def get_filepos(this : IXMLDOMParseError*, filePosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filepos.call(this, filePosition)
    end

  end

  @[Extern]
  record IXTLRuntimeVtbl,
    query_interface : Proc(IXTLRuntime*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXTLRuntime*, UInt32),
    release : Proc(IXTLRuntime*, UInt32),
    get_type_info_count : Proc(IXTLRuntime*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXTLRuntime*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXTLRuntime*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXTLRuntime*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXTLRuntime*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXTLRuntime*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXTLRuntime*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXTLRuntime*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXTLRuntime*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXTLRuntime*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXTLRuntime*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXTLRuntime*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXTLRuntime*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXTLRuntime*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXTLRuntime*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXTLRuntime*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    uniqueID : Proc(IXTLRuntime*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    depth : Proc(IXTLRuntime*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    childNumber : Proc(IXTLRuntime*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    ancestorChildNumber : Proc(IXTLRuntime*, Win32cr::Foundation::BSTR, Void*, Int32*, Win32cr::Foundation::HRESULT),
    absoluteChildNumber : Proc(IXTLRuntime*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    formatIndex : Proc(IXTLRuntime*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    formatNumber : Proc(IXTLRuntime*, Float64, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    formatDate : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    formatTime : Proc(IXTLRuntime*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa425-272f-11d2-836f-0000f87a7782")]
  record IXTLRuntime, lpVtbl : IXTLRuntimeVtbl* do
    GUID = LibC::GUID.new(0x3efaa425_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : IXTLRuntime*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXTLRuntime*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXTLRuntime*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXTLRuntime*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXTLRuntime*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXTLRuntime*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXTLRuntime*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXTLRuntime*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXTLRuntime*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXTLRuntime*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXTLRuntime*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXTLRuntime*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXTLRuntime*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXTLRuntime*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXTLRuntime*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXTLRuntime*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXTLRuntime*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXTLRuntime*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXTLRuntime*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXTLRuntime*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXTLRuntime*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXTLRuntime*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXTLRuntime*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXTLRuntime*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXTLRuntime*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXTLRuntime*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXTLRuntime*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXTLRuntime*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXTLRuntime*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXTLRuntime*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXTLRuntime*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXTLRuntime*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXTLRuntime*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXTLRuntime*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXTLRuntime*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXTLRuntime*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXTLRuntime*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXTLRuntime*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXTLRuntime*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXTLRuntime*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXTLRuntime*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXTLRuntime*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXTLRuntime*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def uniqueID(this : IXTLRuntime*, pNode : Void*, pID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uniqueID.call(this, pNode, pID)
    end
    def depth(this : IXTLRuntime*, pNode : Void*, pDepth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.depth.call(this, pNode, pDepth)
    end
    def childNumber(this : IXTLRuntime*, pNode : Void*, pNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.childNumber.call(this, pNode, pNumber)
    end
    def ancestorChildNumber(this : IXTLRuntime*, bstrNodeName : Win32cr::Foundation::BSTR, pNode : Void*, pNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ancestorChildNumber.call(this, bstrNodeName, pNode, pNumber)
    end
    def absoluteChildNumber(this : IXTLRuntime*, pNode : Void*, pNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.absoluteChildNumber.call(this, pNode, pNumber)
    end
    def formatIndex(this : IXTLRuntime*, lIndex : Int32, bstrFormat : Win32cr::Foundation::BSTR, pbstrFormattedString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.formatIndex.call(this, lIndex, bstrFormat, pbstrFormattedString)
    end
    def formatNumber(this : IXTLRuntime*, dblNumber : Float64, bstrFormat : Win32cr::Foundation::BSTR, pbstrFormattedString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.formatNumber.call(this, dblNumber, bstrFormat, pbstrFormattedString)
    end
    def formatDate(this : IXTLRuntime*, varDate : Win32cr::System::Com::VARIANT, bstrFormat : Win32cr::Foundation::BSTR, varDestLocale : Win32cr::System::Com::VARIANT, pbstrFormattedString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.formatDate.call(this, varDate, bstrFormat, varDestLocale, pbstrFormattedString)
    end
    def formatTime(this : IXTLRuntime*, varTime : Win32cr::System::Com::VARIANT, bstrFormat : Win32cr::Foundation::BSTR, varDestLocale : Win32cr::System::Com::VARIANT, pbstrFormattedString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.formatTime.call(this, varTime, bstrFormat, varDestLocale, pbstrFormattedString)
    end

  end

  @[Extern]
  record XMLDOMDocumentEventsVtbl,
    query_interface : Proc(XMLDOMDocumentEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(XMLDOMDocumentEvents*, UInt32),
    release : Proc(XMLDOMDocumentEvents*, UInt32),
    get_type_info_count : Proc(XMLDOMDocumentEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(XMLDOMDocumentEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(XMLDOMDocumentEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(XMLDOMDocumentEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa427-272f-11d2-836f-0000f87a7782")]
  record XMLDOMDocumentEvents, lpVtbl : XMLDOMDocumentEventsVtbl* do
    GUID = LibC::GUID.new(0x3efaa427_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : XMLDOMDocumentEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : XMLDOMDocumentEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : XMLDOMDocumentEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : XMLDOMDocumentEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : XMLDOMDocumentEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : XMLDOMDocumentEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : XMLDOMDocumentEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IXMLHttpRequestVtbl,
    query_interface : Proc(IXMLHttpRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHttpRequest*, UInt32),
    release : Proc(IXMLHttpRequest*, UInt32),
    get_type_info_count : Proc(IXMLHttpRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLHttpRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLHttpRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLHttpRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setRequestHeader : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getResponseHeader : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAllResponseHeaders : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    send : Proc(IXMLHttpRequest*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLHttpRequest*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IXMLHttpRequest*, Int32*, Win32cr::Foundation::HRESULT),
    get_statusText : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseXML : Proc(IXMLHttpRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_responseText : Proc(IXMLHttpRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseBody : Proc(IXMLHttpRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_responseStream : Proc(IXMLHttpRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLHttpRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IXMLHttpRequest*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ed8c108d-4349-11d2-91a4-00c04f7969e8")]
  record IXMLHttpRequest, lpVtbl : IXMLHttpRequestVtbl* do
    GUID = LibC::GUID.new(0xed8c108d_u32, 0x4349_u16, 0x11d2_u16, StaticArray[0x91_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x69_u8, 0xe8_u8])
    def query_interface(this : IXMLHttpRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHttpRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHttpRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLHttpRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLHttpRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLHttpRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLHttpRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IXMLHttpRequest*, bstrMethod : Win32cr::Foundation::BSTR, bstrUrl : Win32cr::Foundation::BSTR, varAsync : Win32cr::System::Com::VARIANT, bstrUser : Win32cr::System::Com::VARIANT, bstrPassword : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword)
    end
    def setRequestHeader(this : IXMLHttpRequest*, bstrHeader : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setRequestHeader.call(this, bstrHeader, bstrValue)
    end
    def getResponseHeader(this : IXMLHttpRequest*, bstrHeader : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getResponseHeader.call(this, bstrHeader, pbstrValue)
    end
    def getAllResponseHeaders(this : IXMLHttpRequest*, pbstrHeaders : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAllResponseHeaders.call(this, pbstrHeaders)
    end
    def send(this : IXMLHttpRequest*, varBody : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, varBody)
    end
    def abort(this : IXMLHttpRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def get_status(this : IXMLHttpRequest*, plStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plStatus)
    end
    def get_statusText(this : IXMLHttpRequest*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statusText.call(this, pbstrStatus)
    end
    def get_responseXML(this : IXMLHttpRequest*, ppBody : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseXML.call(this, ppBody)
    end
    def get_responseText(this : IXMLHttpRequest*, pbstrBody : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseText.call(this, pbstrBody)
    end
    def get_responseBody(this : IXMLHttpRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseBody.call(this, pvarBody)
    end
    def get_responseStream(this : IXMLHttpRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseStream.call(this, pvarBody)
    end
    def get_readyState(this : IXMLHttpRequest*, plState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, plState)
    end
    def put_onreadystatechange(this : IXMLHttpRequest*, pReadyStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, pReadyStateSink)
    end

  end

  @[Extern]
  record IXMLDSOControlVtbl,
    query_interface : Proc(IXMLDSOControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDSOControl*, UInt32),
    release : Proc(IXMLDSOControl*, UInt32),
    get_type_info_count : Proc(IXMLDSOControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDSOControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDSOControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDSOControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_XMLDocument : Proc(IXMLDSOControl*, Void**, Win32cr::Foundation::HRESULT),
    put_XMLDocument : Proc(IXMLDSOControl*, Void*, Win32cr::Foundation::HRESULT),
    get_JavaDSOCompatible : Proc(IXMLDSOControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_JavaDSOCompatible : Proc(IXMLDSOControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDSOControl*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("310afa62-0575-11d2-9ca9-0060b0ec3d39")]
  record IXMLDSOControl, lpVtbl : IXMLDSOControlVtbl* do
    GUID = LibC::GUID.new(0x310afa62_u32, 0x575_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa9_u8, 0x0_u8, 0x60_u8, 0xb0_u8, 0xec_u8, 0x3d_u8, 0x39_u8])
    def query_interface(this : IXMLDSOControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDSOControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDSOControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDSOControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDSOControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDSOControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDSOControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_XMLDocument(this : IXMLDSOControl*, ppDoc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_XMLDocument.call(this, ppDoc)
    end
    def put_XMLDocument(this : IXMLDSOControl*, ppDoc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_XMLDocument.call(this, ppDoc)
    end
    def get_JavaDSOCompatible(this : IXMLDSOControl*, fJavaDSOCompatible : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_JavaDSOCompatible.call(this, fJavaDSOCompatible)
    end
    def put_JavaDSOCompatible(this : IXMLDSOControl*, fJavaDSOCompatible : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_JavaDSOCompatible.call(this, fJavaDSOCompatible)
    end
    def get_readyState(this : IXMLDSOControl*, state : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, state)
    end

  end

  @[Extern]
  record IXMLElementCollectionVtbl,
    query_interface : Proc(IXMLElementCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLElementCollection*, UInt32),
    release : Proc(IXMLElementCollection*, UInt32),
    get_type_info_count : Proc(IXMLElementCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLElementCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLElementCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLElementCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_length : Proc(IXMLElementCollection*, Int32, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLElementCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLElementCollection*, Void**, Win32cr::Foundation::HRESULT),
    item : Proc(IXMLElementCollection*, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("65725580-9b5d-11d0-9bfe-00c04fc99c8e")]
  record IXMLElementCollection, lpVtbl : IXMLElementCollectionVtbl* do
    GUID = LibC::GUID.new(0x65725580_u32, 0x9b5d_u16, 0x11d0_u16, StaticArray[0x9b_u8, 0xfe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0x9c_u8, 0x8e_u8])
    def query_interface(this : IXMLElementCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLElementCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLElementCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLElementCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLElementCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLElementCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLElementCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_length(this : IXMLElementCollection*, v : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_length.call(this, v)
    end
    def get_length(this : IXMLElementCollection*, p : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, p)
    end
    def get__newEnum(this : IXMLElementCollection*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end
    def item(this : IXMLElementCollection*, var1 : Win32cr::System::Com::VARIANT, var2 : Win32cr::System::Com::VARIANT, ppDisp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, var1, var2, ppDisp)
    end

  end

  @[Extern]
  record IXMLDocumentVtbl,
    query_interface : Proc(IXMLDocument*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDocument*, UInt32),
    release : Proc(IXMLDocument*, UInt32),
    get_type_info_count : Proc(IXMLDocument*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDocument*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDocument*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDocument*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_root : Proc(IXMLDocument*, Void**, Win32cr::Foundation::HRESULT),
    get_fileSize : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fileModifiedDate : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fileUpdatedDate : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IXMLDocument*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_mimeType : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDocument*, Int32*, Win32cr::Foundation::HRESULT),
    get_charset : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_charset : Proc(IXMLDocument*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_version : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_doctype : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dtdURL : Proc(IXMLDocument*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createElement : Proc(IXMLDocument*, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f52e2b61-18a1-11d1-b105-00805f49916b")]
  record IXMLDocument, lpVtbl : IXMLDocumentVtbl* do
    GUID = LibC::GUID.new(0xf52e2b61_u32, 0x18a1_u16, 0x11d1_u16, StaticArray[0xb1_u8, 0x5_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x49_u8, 0x91_u8, 0x6b_u8])
    def query_interface(this : IXMLDocument*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDocument*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDocument*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDocument*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDocument*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDocument*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDocument*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_root(this : IXMLDocument*, p : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root.call(this, p)
    end
    def get_fileSize(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileSize.call(this, p)
    end
    def get_fileModifiedDate(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileModifiedDate.call(this, p)
    end
    def get_fileUpdatedDate(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileUpdatedDate.call(this, p)
    end
    def get_URL(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, p)
    end
    def put_URL(this : IXMLDocument*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, p)
    end
    def get_mimeType(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mimeType.call(this, p)
    end
    def get_readyState(this : IXMLDocument*, pl : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, pl)
    end
    def get_charset(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_charset.call(this, p)
    end
    def put_charset(this : IXMLDocument*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_charset.call(this, p)
    end
    def get_version(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, p)
    end
    def get_doctype(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doctype.call(this, p)
    end
    def get_dtdURL(this : IXMLDocument*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dtdURL.call(this, p)
    end
    def createElement(this : IXMLDocument*, vType : Win32cr::System::Com::VARIANT, var1 : Win32cr::System::Com::VARIANT, ppElem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createElement.call(this, vType, var1, ppElem)
    end

  end

  @[Extern]
  record IXMLDocument2Vtbl,
    query_interface : Proc(IXMLDocument2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDocument2*, UInt32),
    release : Proc(IXMLDocument2*, UInt32),
    get_type_info_count : Proc(IXMLDocument2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDocument2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDocument2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDocument2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_root : Proc(IXMLDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_fileSize : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fileModifiedDate : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fileUpdatedDate : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_mimeType : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDocument2*, Int32*, Win32cr::Foundation::HRESULT),
    get_charset : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_charset : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_version : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_doctype : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dtdURL : Proc(IXMLDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createElement : Proc(IXMLDocument2*, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    get_async : Proc(IXMLDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    put_async : Proc(IXMLDocument2*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9")]
  record IXMLDocument2, lpVtbl : IXMLDocument2Vtbl* do
    GUID = LibC::GUID.new(0x2b8de2fe_u32, 0x8d2d_u16, 0x11d1_u16, StaticArray[0xb2_u8, 0xfc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x15_u8, 0xa9_u8])
    def query_interface(this : IXMLDocument2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDocument2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDocument2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDocument2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDocument2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDocument2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDocument2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_root(this : IXMLDocument2*, p : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root.call(this, p)
    end
    def get_fileSize(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileSize.call(this, p)
    end
    def get_fileModifiedDate(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileModifiedDate.call(this, p)
    end
    def get_fileUpdatedDate(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fileUpdatedDate.call(this, p)
    end
    def get_URL(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, p)
    end
    def put_URL(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, p)
    end
    def get_mimeType(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mimeType.call(this, p)
    end
    def get_readyState(this : IXMLDocument2*, pl : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, pl)
    end
    def get_charset(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_charset.call(this, p)
    end
    def put_charset(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_charset.call(this, p)
    end
    def get_version(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, p)
    end
    def get_doctype(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doctype.call(this, p)
    end
    def get_dtdURL(this : IXMLDocument2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dtdURL.call(this, p)
    end
    def createElement(this : IXMLDocument2*, vType : Win32cr::System::Com::VARIANT, var1 : Win32cr::System::Com::VARIANT, ppElem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createElement.call(this, vType, var1, ppElem)
    end
    def get_async(this : IXMLDocument2*, pf : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_async.call(this, pf)
    end
    def put_async(this : IXMLDocument2*, f : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_async.call(this, f)
    end

  end

  @[Extern]
  record IXMLElementVtbl,
    query_interface : Proc(IXMLElement*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLElement*, UInt32),
    release : Proc(IXMLElement*, UInt32),
    get_type_info_count : Proc(IXMLElement*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLElement*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLElement*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLElement*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_tagName : Proc(IXMLElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_tagName : Proc(IXMLElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IXMLElement*, Void**, Win32cr::Foundation::HRESULT),
    setAttribute : Proc(IXMLElement*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getAttribute : Proc(IXMLElement*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    removeAttribute : Proc(IXMLElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_children : Proc(IXMLElement*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(IXMLElement*, Int32*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLElement*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addChild : Proc(IXMLElement*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLElement*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e")]
  record IXMLElement, lpVtbl : IXMLElementVtbl* do
    GUID = LibC::GUID.new(0x3f7f31ac_u32, 0xe15f_u16, 0x11d0_u16, StaticArray[0x9c_u8, 0x25_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0x9c_u8, 0x8e_u8])
    def query_interface(this : IXMLElement*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLElement*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLElement*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLElement*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLElement*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLElement*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLElement*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_tagName(this : IXMLElement*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tagName.call(this, p)
    end
    def put_tagName(this : IXMLElement*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_tagName.call(this, p)
    end
    def get_parent(this : IXMLElement*, ppParent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppParent)
    end
    def setAttribute(this : IXMLElement*, strPropertyName : Win32cr::Foundation::BSTR, property_value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttribute.call(this, strPropertyName, property_value)
    end
    def getAttribute(this : IXMLElement*, strPropertyName : Win32cr::Foundation::BSTR, property_value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttribute.call(this, strPropertyName, property_value)
    end
    def removeAttribute(this : IXMLElement*, strPropertyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAttribute.call(this, strPropertyName)
    end
    def get_children(this : IXMLElement*, pp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_children.call(this, pp)
    end
    def get_type(this : IXMLElement*, plType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, plType)
    end
    def get_text(this : IXMLElement*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, p)
    end
    def put_text(this : IXMLElement*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, p)
    end
    def addChild(this : IXMLElement*, pChildElem : Void*, lIndex : Int32, lReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addChild.call(this, pChildElem, lIndex, lReserved)
    end
    def removeChild(this : IXMLElement*, pChildElem : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, pChildElem)
    end

  end

  @[Extern]
  record IXMLElement2Vtbl,
    query_interface : Proc(IXMLElement2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLElement2*, UInt32),
    release : Proc(IXMLElement2*, UInt32),
    get_type_info_count : Proc(IXMLElement2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLElement2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLElement2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLElement2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_tagName : Proc(IXMLElement2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_tagName : Proc(IXMLElement2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IXMLElement2*, Void**, Win32cr::Foundation::HRESULT),
    setAttribute : Proc(IXMLElement2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getAttribute : Proc(IXMLElement2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    removeAttribute : Proc(IXMLElement2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_children : Proc(IXMLElement2*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(IXMLElement2*, Int32*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLElement2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLElement2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addChild : Proc(IXMLElement2*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLElement2*, Void*, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLElement2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9")]
  record IXMLElement2, lpVtbl : IXMLElement2Vtbl* do
    GUID = LibC::GUID.new(0x2b8de2ff_u32, 0x8d2d_u16, 0x11d1_u16, StaticArray[0xb2_u8, 0xfc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x15_u8, 0xa9_u8])
    def query_interface(this : IXMLElement2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLElement2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLElement2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLElement2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLElement2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLElement2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLElement2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_tagName(this : IXMLElement2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tagName.call(this, p)
    end
    def put_tagName(this : IXMLElement2*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_tagName.call(this, p)
    end
    def get_parent(this : IXMLElement2*, ppParent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, ppParent)
    end
    def setAttribute(this : IXMLElement2*, strPropertyName : Win32cr::Foundation::BSTR, property_value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttribute.call(this, strPropertyName, property_value)
    end
    def getAttribute(this : IXMLElement2*, strPropertyName : Win32cr::Foundation::BSTR, property_value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttribute.call(this, strPropertyName, property_value)
    end
    def removeAttribute(this : IXMLElement2*, strPropertyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAttribute.call(this, strPropertyName)
    end
    def get_children(this : IXMLElement2*, pp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_children.call(this, pp)
    end
    def get_type(this : IXMLElement2*, plType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, plType)
    end
    def get_text(this : IXMLElement2*, p : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, p)
    end
    def put_text(this : IXMLElement2*, p : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, p)
    end
    def addChild(this : IXMLElement2*, pChildElem : Void*, lIndex : Int32, lReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addChild.call(this, pChildElem, lIndex, lReserved)
    end
    def removeChild(this : IXMLElement2*, pChildElem : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, pChildElem)
    end
    def get_attributes(this : IXMLElement2*, pp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, pp)
    end

  end

  @[Extern]
  record IXMLAttributeVtbl,
    query_interface : Proc(IXMLAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLAttribute*, UInt32),
    release : Proc(IXMLAttribute*, UInt32),
    get_type_info_count : Proc(IXMLAttribute*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLAttribute*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLAttribute*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLAttribute*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IXMLAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IXMLAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596")]
  record IXMLAttribute, lpVtbl : IXMLAttributeVtbl* do
    GUID = LibC::GUID.new(0xd4d4a0fc_u32, 0x3b73_u16, 0x11d1_u16, StaticArray[0xb2_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x25_u8, 0x96_u8])
    def query_interface(this : IXMLAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLAttribute*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLAttribute*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLAttribute*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLAttribute*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : IXMLAttribute*, n : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, n)
    end
    def get_value(this : IXMLAttribute*, v : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, v)
    end

  end

  @[Extern]
  record IXMLErrorVtbl,
    query_interface : Proc(IXMLError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLError*, UInt32),
    release : Proc(IXMLError*, UInt32),
    get_error_info : Proc(IXMLError*, Win32cr::Data::Xml::MsXml::XML_ERROR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e")]
  record IXMLError, lpVtbl : IXMLErrorVtbl* do
    GUID = LibC::GUID.new(0x948c5ad3_u32, 0xc58d_u16, 0x11d0_u16, StaticArray[0x9c_u8, 0xb_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0x9c_u8, 0x8e_u8])
    def query_interface(this : IXMLError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error_info(this : IXMLError*, pErrorReturn : Win32cr::Data::Xml::MsXml::XML_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_info.call(this, pErrorReturn)
    end

  end

  @[Extern]
  record IXMLDOMDocument2Vtbl,
    query_interface : Proc(IXMLDOMDocument2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMDocument2*, UInt32),
    release : Proc(IXMLDOMDocument2*, UInt32),
    get_type_info_count : Proc(IXMLDOMDocument2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMDocument2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMDocument2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMDocument2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMDocument2*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMDocument2*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMDocument2*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMDocument2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMDocument2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMDocument2*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMDocument2*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMDocument2*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_doctype : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_implementation : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_documentElement : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    putref_documentElement : Proc(IXMLDOMDocument2*, Void*, Win32cr::Foundation::HRESULT),
    createElement : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createDocumentFragment : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    createTextNode : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createComment : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createCDATASection : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createProcessingInstruction : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createAttribute : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createEntityReference : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getElementsByTagName : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createNode : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    nodeFromID : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Int16*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDOMDocument2*, Int32*, Win32cr::Foundation::HRESULT),
    get_parseError : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_url : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_async : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    put_async : Proc(IXMLDOMDocument2*, Int16, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLDOMDocument2*, Win32cr::Foundation::HRESULT),
    loadXML : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    save : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_validateOnParse : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    put_validateOnParse : Proc(IXMLDOMDocument2*, Int16, Win32cr::Foundation::HRESULT),
    get_resolveExternals : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    put_resolveExternals : Proc(IXMLDOMDocument2*, Int16, Win32cr::Foundation::HRESULT),
    get_preserveWhiteSpace : Proc(IXMLDOMDocument2*, Int16*, Win32cr::Foundation::HRESULT),
    put_preserveWhiteSpace : Proc(IXMLDOMDocument2*, Int16, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ondataavailable : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ontransformnode : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_namespaces : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    get_schemas : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putref_schemas : Proc(IXMLDOMDocument2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    validate : Proc(IXMLDOMDocument2*, Void**, Win32cr::Foundation::HRESULT),
    setProperty : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getProperty : Proc(IXMLDOMDocument2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf95-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMDocument2, lpVtbl : IXMLDOMDocument2Vtbl* do
    GUID = LibC::GUID.new(0x2933bf95_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMDocument2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMDocument2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMDocument2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMDocument2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMDocument2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMDocument2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMDocument2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMDocument2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMDocument2*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMDocument2*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMDocument2*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMDocument2*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMDocument2*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMDocument2*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMDocument2*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMDocument2*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMDocument2*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMDocument2*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMDocument2*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMDocument2*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMDocument2*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMDocument2*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMDocument2*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMDocument2*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMDocument2*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMDocument2*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMDocument2*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMDocument2*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMDocument2*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMDocument2*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMDocument2*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMDocument2*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMDocument2*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMDocument2*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMDocument2*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMDocument2*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMDocument2*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMDocument2*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMDocument2*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMDocument2*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMDocument2*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMDocument2*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMDocument2*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_doctype(this : IXMLDOMDocument2*, documentType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doctype.call(this, documentType)
    end
    def get_implementation(this : IXMLDOMDocument2*, impl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implementation.call(this, impl)
    end
    def get_documentElement(this : IXMLDOMDocument2*, dom_element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_documentElement.call(this, dom_element)
    end
    def putref_documentElement(this : IXMLDOMDocument2*, dom_element : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_documentElement.call(this, dom_element)
    end
    def createElement(this : IXMLDOMDocument2*, tagName : Win32cr::Foundation::BSTR, element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createElement.call(this, tagName, element)
    end
    def createDocumentFragment(this : IXMLDOMDocument2*, docFrag : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createDocumentFragment.call(this, docFrag)
    end
    def createTextNode(this : IXMLDOMDocument2*, data : Win32cr::Foundation::BSTR, text : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createTextNode.call(this, data, text)
    end
    def createComment(this : IXMLDOMDocument2*, data : Win32cr::Foundation::BSTR, comment : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createComment.call(this, data, comment)
    end
    def createCDATASection(this : IXMLDOMDocument2*, data : Win32cr::Foundation::BSTR, cdata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createCDATASection.call(this, data, cdata)
    end
    def createProcessingInstruction(this : IXMLDOMDocument2*, target : Win32cr::Foundation::BSTR, data : Win32cr::Foundation::BSTR, pi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createProcessingInstruction.call(this, target, data, pi)
    end
    def createAttribute(this : IXMLDOMDocument2*, name : Win32cr::Foundation::BSTR, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createAttribute.call(this, name, attribute)
    end
    def createEntityReference(this : IXMLDOMDocument2*, name : Win32cr::Foundation::BSTR, entityRef : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createEntityReference.call(this, name, entityRef)
    end
    def getElementsByTagName(this : IXMLDOMDocument2*, tagName : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getElementsByTagName.call(this, tagName, resultList)
    end
    def createNode(this : IXMLDOMDocument2*, type__ : Win32cr::System::Com::VARIANT, name : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createNode.call(this, type__, name, namespaceURI, node)
    end
    def nodeFromID(this : IXMLDOMDocument2*, idString : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nodeFromID.call(this, idString, node)
    end
    def load(this : IXMLDOMDocument2*, xmlSource : Win32cr::System::Com::VARIANT, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, xmlSource, isSuccessful)
    end
    def get_readyState(this : IXMLDOMDocument2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, value)
    end
    def get_parseError(this : IXMLDOMDocument2*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parseError.call(this, errorObj)
    end
    def get_url(this : IXMLDOMDocument2*, urlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, urlString)
    end
    def get_async(this : IXMLDOMDocument2*, isAsync : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_async.call(this, isAsync)
    end
    def put_async(this : IXMLDOMDocument2*, isAsync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_async.call(this, isAsync)
    end
    def abort(this : IXMLDOMDocument2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def loadXML(this : IXMLDOMDocument2*, bstrXML : Win32cr::Foundation::BSTR, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.loadXML.call(this, bstrXML, isSuccessful)
    end
    def save(this : IXMLDOMDocument2*, destination : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, destination)
    end
    def get_validateOnParse(this : IXMLDOMDocument2*, isValidating : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_validateOnParse.call(this, isValidating)
    end
    def put_validateOnParse(this : IXMLDOMDocument2*, isValidating : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_validateOnParse.call(this, isValidating)
    end
    def get_resolveExternals(this : IXMLDOMDocument2*, isResolving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resolveExternals.call(this, isResolving)
    end
    def put_resolveExternals(this : IXMLDOMDocument2*, isResolving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_resolveExternals.call(this, isResolving)
    end
    def get_preserveWhiteSpace(this : IXMLDOMDocument2*, isPreserving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_preserveWhiteSpace(this : IXMLDOMDocument2*, isPreserving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_onreadystatechange(this : IXMLDOMDocument2*, readystatechangeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, readystatechangeSink)
    end
    def put_ondataavailable(this : IXMLDOMDocument2*, ondataavailableSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ondataavailable.call(this, ondataavailableSink)
    end
    def put_ontransformnode(this : IXMLDOMDocument2*, ontransformnodeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ontransformnode.call(this, ontransformnodeSink)
    end
    def get_namespaces(this : IXMLDOMDocument2*, namespaceCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaces.call(this, namespaceCollection)
    end
    def get_schemas(this : IXMLDOMDocument2*, otherCollection : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schemas.call(this, otherCollection)
    end
    def putref_schemas(this : IXMLDOMDocument2*, otherCollection : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_schemas.call(this, otherCollection)
    end
    def validate(this : IXMLDOMDocument2*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, errorObj)
    end
    def setProperty(this : IXMLDOMDocument2*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProperty.call(this, name, value)
    end
    def getProperty(this : IXMLDOMDocument2*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, name, value)
    end

  end

  @[Extern]
  record IXMLDOMDocument3Vtbl,
    query_interface : Proc(IXMLDOMDocument3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMDocument3*, UInt32),
    release : Proc(IXMLDOMDocument3*, UInt32),
    get_type_info_count : Proc(IXMLDOMDocument3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMDocument3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMDocument3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMDocument3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_nodeName : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_nodeValue : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeValue : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_nodeType : Proc(IXMLDOMDocument3*, Win32cr::Data::Xml::MsXml::DOMNodeType*, Win32cr::Foundation::HRESULT),
    get_parentNode : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_childNodes : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_firstChild : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_lastChild : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_previousSibling : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_nextSibling : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    insertBefore : Proc(IXMLDOMDocument3*, Void*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    replaceChild : Proc(IXMLDOMDocument3*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeChild : Proc(IXMLDOMDocument3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    appendChild : Proc(IXMLDOMDocument3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    hasChildNodes : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    get_ownerDocument : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    cloneNode : Proc(IXMLDOMDocument3*, Int16, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypeString : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_text : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_specified : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    get_definition : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_nodeTypedValue : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_nodeTypedValue : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_dataType : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_dataType : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_xml : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNode : Proc(IXMLDOMDocument3*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    selectNodes : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    selectSingleNode : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_parsed : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_prefix : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_baseName : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    transformNodeToObject : Proc(IXMLDOMDocument3*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_doctype : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_implementation : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_documentElement : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    putref_documentElement : Proc(IXMLDOMDocument3*, Void*, Win32cr::Foundation::HRESULT),
    createElement : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createDocumentFragment : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    createTextNode : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createComment : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createCDATASection : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createProcessingInstruction : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createAttribute : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createEntityReference : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getElementsByTagName : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    createNode : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    nodeFromID : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Int16*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLDOMDocument3*, Int32*, Win32cr::Foundation::HRESULT),
    get_parseError : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_url : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_async : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    put_async : Proc(IXMLDOMDocument3*, Int16, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLDOMDocument3*, Win32cr::Foundation::HRESULT),
    loadXML : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    save : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_validateOnParse : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    put_validateOnParse : Proc(IXMLDOMDocument3*, Int16, Win32cr::Foundation::HRESULT),
    get_resolveExternals : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    put_resolveExternals : Proc(IXMLDOMDocument3*, Int16, Win32cr::Foundation::HRESULT),
    get_preserveWhiteSpace : Proc(IXMLDOMDocument3*, Int16*, Win32cr::Foundation::HRESULT),
    put_preserveWhiteSpace : Proc(IXMLDOMDocument3*, Int16, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ondataavailable : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    put_ontransformnode : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_namespaces : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    get_schemas : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putref_schemas : Proc(IXMLDOMDocument3*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    validate : Proc(IXMLDOMDocument3*, Void**, Win32cr::Foundation::HRESULT),
    setProperty : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getProperty : Proc(IXMLDOMDocument3*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    validateNode : Proc(IXMLDOMDocument3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    importNode : Proc(IXMLDOMDocument3*, Void*, Int16, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf96-7b36-11d2-b20e-00c04f983e60")]
  record IXMLDOMDocument3, lpVtbl : IXMLDOMDocument3Vtbl* do
    GUID = LibC::GUID.new(0x2933bf96_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXMLDOMDocument3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMDocument3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMDocument3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMDocument3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMDocument3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMDocument3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMDocument3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_nodeName(this : IXMLDOMDocument3*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeName.call(this, name)
    end
    def get_nodeValue(this : IXMLDOMDocument3*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeValue.call(this, value)
    end
    def put_nodeValue(this : IXMLDOMDocument3*, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeValue.call(this, value)
    end
    def get_nodeType(this : IXMLDOMDocument3*, type__ : Win32cr::Data::Xml::MsXml::DOMNodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeType.call(this, type__)
    end
    def get_parentNode(this : IXMLDOMDocument3*, parent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parentNode.call(this, parent)
    end
    def get_childNodes(this : IXMLDOMDocument3*, childList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_childNodes.call(this, childList)
    end
    def get_firstChild(this : IXMLDOMDocument3*, firstChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_firstChild.call(this, firstChild)
    end
    def get_lastChild(this : IXMLDOMDocument3*, lastChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lastChild.call(this, lastChild)
    end
    def get_previousSibling(this : IXMLDOMDocument3*, previousSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previousSibling.call(this, previousSibling)
    end
    def get_nextSibling(this : IXMLDOMDocument3*, nextSibling : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nextSibling.call(this, nextSibling)
    end
    def get_attributes(this : IXMLDOMDocument3*, attributeMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributeMap)
    end
    def insertBefore(this : IXMLDOMDocument3*, newChild : Void*, refChild : Win32cr::System::Com::VARIANT, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertBefore.call(this, newChild, refChild, outNewChild)
    end
    def replaceChild(this : IXMLDOMDocument3*, newChild : Void*, oldChild : Void*, outOldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replaceChild.call(this, newChild, oldChild, outOldChild)
    end
    def removeChild(this : IXMLDOMDocument3*, childNode : Void*, oldChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeChild.call(this, childNode, oldChild)
    end
    def appendChild(this : IXMLDOMDocument3*, newChild : Void*, outNewChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendChild.call(this, newChild, outNewChild)
    end
    def hasChildNodes(this : IXMLDOMDocument3*, hasChild : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hasChildNodes.call(this, hasChild)
    end
    def get_ownerDocument(this : IXMLDOMDocument3*, xmldom_document : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerDocument.call(this, xmldom_document)
    end
    def cloneNode(this : IXMLDOMDocument3*, deep : Int16, cloneRoot : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cloneNode.call(this, deep, cloneRoot)
    end
    def get_nodeTypeString(this : IXMLDOMDocument3*, nodeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypeString.call(this, nodeType)
    end
    def get_text(this : IXMLDOMDocument3*, text : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def put_text(this : IXMLDOMDocument3*, text : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_text.call(this, text)
    end
    def get_specified(this : IXMLDOMDocument3*, isSpecified : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified.call(this, isSpecified)
    end
    def get_definition(this : IXMLDOMDocument3*, definitionNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_definition.call(this, definitionNode)
    end
    def get_nodeTypedValue(this : IXMLDOMDocument3*, typedValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nodeTypedValue.call(this, typedValue)
    end
    def put_nodeTypedValue(this : IXMLDOMDocument3*, typedValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_nodeTypedValue.call(this, typedValue)
    end
    def get_dataType(this : IXMLDOMDocument3*, dataTypeName : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dataType.call(this, dataTypeName)
    end
    def put_dataType(this : IXMLDOMDocument3*, dataTypeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_dataType.call(this, dataTypeName)
    end
    def get_xml(this : IXMLDOMDocument3*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xml.call(this, xmlString)
    end
    def transformNode(this : IXMLDOMDocument3*, stylesheet : Void*, xmlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNode.call(this, stylesheet, xmlString)
    end
    def selectNodes(this : IXMLDOMDocument3*, queryString : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectNodes.call(this, queryString, resultList)
    end
    def selectSingleNode(this : IXMLDOMDocument3*, queryString : Win32cr::Foundation::BSTR, resultNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selectSingleNode.call(this, queryString, resultNode)
    end
    def get_parsed(this : IXMLDOMDocument3*, isParsed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parsed.call(this, isParsed)
    end
    def get_namespaceURI(this : IXMLDOMDocument3*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_prefix(this : IXMLDOMDocument3*, prefixString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prefix.call(this, prefixString)
    end
    def get_baseName(this : IXMLDOMDocument3*, nameString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseName.call(this, nameString)
    end
    def transformNodeToObject(this : IXMLDOMDocument3*, stylesheet : Void*, outputObject : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transformNodeToObject.call(this, stylesheet, outputObject)
    end
    def get_doctype(this : IXMLDOMDocument3*, documentType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_doctype.call(this, documentType)
    end
    def get_implementation(this : IXMLDOMDocument3*, impl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_implementation.call(this, impl)
    end
    def get_documentElement(this : IXMLDOMDocument3*, dom_element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_documentElement.call(this, dom_element)
    end
    def putref_documentElement(this : IXMLDOMDocument3*, dom_element : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_documentElement.call(this, dom_element)
    end
    def createElement(this : IXMLDOMDocument3*, tagName : Win32cr::Foundation::BSTR, element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createElement.call(this, tagName, element)
    end
    def createDocumentFragment(this : IXMLDOMDocument3*, docFrag : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createDocumentFragment.call(this, docFrag)
    end
    def createTextNode(this : IXMLDOMDocument3*, data : Win32cr::Foundation::BSTR, text : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createTextNode.call(this, data, text)
    end
    def createComment(this : IXMLDOMDocument3*, data : Win32cr::Foundation::BSTR, comment : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createComment.call(this, data, comment)
    end
    def createCDATASection(this : IXMLDOMDocument3*, data : Win32cr::Foundation::BSTR, cdata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createCDATASection.call(this, data, cdata)
    end
    def createProcessingInstruction(this : IXMLDOMDocument3*, target : Win32cr::Foundation::BSTR, data : Win32cr::Foundation::BSTR, pi : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createProcessingInstruction.call(this, target, data, pi)
    end
    def createAttribute(this : IXMLDOMDocument3*, name : Win32cr::Foundation::BSTR, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createAttribute.call(this, name, attribute)
    end
    def createEntityReference(this : IXMLDOMDocument3*, name : Win32cr::Foundation::BSTR, entityRef : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createEntityReference.call(this, name, entityRef)
    end
    def getElementsByTagName(this : IXMLDOMDocument3*, tagName : Win32cr::Foundation::BSTR, resultList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getElementsByTagName.call(this, tagName, resultList)
    end
    def createNode(this : IXMLDOMDocument3*, type__ : Win32cr::System::Com::VARIANT, name : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createNode.call(this, type__, name, namespaceURI, node)
    end
    def nodeFromID(this : IXMLDOMDocument3*, idString : Win32cr::Foundation::BSTR, node : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nodeFromID.call(this, idString, node)
    end
    def load(this : IXMLDOMDocument3*, xmlSource : Win32cr::System::Com::VARIANT, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, xmlSource, isSuccessful)
    end
    def get_readyState(this : IXMLDOMDocument3*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, value)
    end
    def get_parseError(this : IXMLDOMDocument3*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parseError.call(this, errorObj)
    end
    def get_url(this : IXMLDOMDocument3*, urlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, urlString)
    end
    def get_async(this : IXMLDOMDocument3*, isAsync : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_async.call(this, isAsync)
    end
    def put_async(this : IXMLDOMDocument3*, isAsync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_async.call(this, isAsync)
    end
    def abort(this : IXMLDOMDocument3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def loadXML(this : IXMLDOMDocument3*, bstrXML : Win32cr::Foundation::BSTR, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.loadXML.call(this, bstrXML, isSuccessful)
    end
    def save(this : IXMLDOMDocument3*, destination : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, destination)
    end
    def get_validateOnParse(this : IXMLDOMDocument3*, isValidating : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_validateOnParse.call(this, isValidating)
    end
    def put_validateOnParse(this : IXMLDOMDocument3*, isValidating : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_validateOnParse.call(this, isValidating)
    end
    def get_resolveExternals(this : IXMLDOMDocument3*, isResolving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resolveExternals.call(this, isResolving)
    end
    def put_resolveExternals(this : IXMLDOMDocument3*, isResolving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_resolveExternals.call(this, isResolving)
    end
    def get_preserveWhiteSpace(this : IXMLDOMDocument3*, isPreserving : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_preserveWhiteSpace(this : IXMLDOMDocument3*, isPreserving : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_preserveWhiteSpace.call(this, isPreserving)
    end
    def put_onreadystatechange(this : IXMLDOMDocument3*, readystatechangeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, readystatechangeSink)
    end
    def put_ondataavailable(this : IXMLDOMDocument3*, ondataavailableSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ondataavailable.call(this, ondataavailableSink)
    end
    def put_ontransformnode(this : IXMLDOMDocument3*, ontransformnodeSink : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ontransformnode.call(this, ontransformnodeSink)
    end
    def get_namespaces(this : IXMLDOMDocument3*, namespaceCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaces.call(this, namespaceCollection)
    end
    def get_schemas(this : IXMLDOMDocument3*, otherCollection : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schemas.call(this, otherCollection)
    end
    def putref_schemas(this : IXMLDOMDocument3*, otherCollection : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_schemas.call(this, otherCollection)
    end
    def validate(this : IXMLDOMDocument3*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, errorObj)
    end
    def setProperty(this : IXMLDOMDocument3*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProperty.call(this, name, value)
    end
    def getProperty(this : IXMLDOMDocument3*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, name, value)
    end
    def validateNode(this : IXMLDOMDocument3*, node : Void*, errorObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validateNode.call(this, node, errorObj)
    end
    def importNode(this : IXMLDOMDocument3*, node : Void*, deep : Int16, clone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.importNode.call(this, node, deep, clone)
    end

  end

  @[Extern]
  record IXMLDOMSchemaCollectionVtbl,
    query_interface : Proc(IXMLDOMSchemaCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMSchemaCollection*, UInt32),
    release : Proc(IXMLDOMSchemaCollection*, UInt32),
    get_type_info_count : Proc(IXMLDOMSchemaCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMSchemaCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMSchemaCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMSchemaCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    add : Proc(IXMLDOMSchemaCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get : Proc(IXMLDOMSchemaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(IXMLDOMSchemaCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMSchemaCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMSchemaCollection*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    addCollection : Proc(IXMLDOMSchemaCollection*, Void*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMSchemaCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("373984c8-b845-449b-91e7-45ac83036ade")]
  record IXMLDOMSchemaCollection, lpVtbl : IXMLDOMSchemaCollectionVtbl* do
    GUID = LibC::GUID.new(0x373984c8_u32, 0xb845_u16, 0x449b_u16, StaticArray[0x91_u8, 0xe7_u8, 0x45_u8, 0xac_u8, 0x83_u8, 0x3_u8, 0x6a_u8, 0xde_u8])
    def query_interface(this : IXMLDOMSchemaCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMSchemaCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMSchemaCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMSchemaCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMSchemaCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMSchemaCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMSchemaCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def add(this : IXMLDOMSchemaCollection*, namespaceURI : Win32cr::Foundation::BSTR, var : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, namespaceURI, var)
    end
    def get(this : IXMLDOMSchemaCollection*, namespaceURI : Win32cr::Foundation::BSTR, schemaNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, namespaceURI, schemaNode)
    end
    def remove(this : IXMLDOMSchemaCollection*, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, namespaceURI)
    end
    def get_length(this : IXMLDOMSchemaCollection*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get_namespaceURI(this : IXMLDOMSchemaCollection*, index : Int32, length : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, index, length)
    end
    def addCollection(this : IXMLDOMSchemaCollection*, otherCollection : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCollection.call(this, otherCollection)
    end
    def get__newEnum(this : IXMLDOMSchemaCollection*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end

  end

  @[Extern]
  record IXMLDOMSelectionVtbl,
    query_interface : Proc(IXMLDOMSelection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMSelection*, UInt32),
    release : Proc(IXMLDOMSelection*, UInt32),
    get_type_info_count : Proc(IXMLDOMSelection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMSelection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMSelection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMSelection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXMLDOMSelection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMSelection*, Int32*, Win32cr::Foundation::HRESULT),
    nextNode : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(IXMLDOMSelection*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    get_expr : Proc(IXMLDOMSelection*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_expr : Proc(IXMLDOMSelection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_context : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    putref_context : Proc(IXMLDOMSelection*, Void*, Win32cr::Foundation::HRESULT),
    peekNode : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    matches : Proc(IXMLDOMSelection*, Void*, Void**, Win32cr::Foundation::HRESULT),
    removeNext : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    removeAll : Proc(IXMLDOMSelection*, Win32cr::Foundation::HRESULT),
    clone : Proc(IXMLDOMSelection*, Void**, Win32cr::Foundation::HRESULT),
    getProperty : Proc(IXMLDOMSelection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    setProperty : Proc(IXMLDOMSelection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aa634fc7-5888-44a7-a257-3a47150d3a0e")]
  record IXMLDOMSelection, lpVtbl : IXMLDOMSelectionVtbl* do
    GUID = LibC::GUID.new(0xaa634fc7_u32, 0x5888_u16, 0x44a7_u16, StaticArray[0xa2_u8, 0x57_u8, 0x3a_u8, 0x47_u8, 0x15_u8, 0xd_u8, 0x3a_u8, 0xe_u8])
    def query_interface(this : IXMLDOMSelection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMSelection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMSelection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMSelection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMSelection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMSelection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMSelection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : IXMLDOMSelection*, index : Int32, listItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, listItem)
    end
    def get_length(this : IXMLDOMSelection*, listLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, listLength)
    end
    def nextNode(this : IXMLDOMSelection*, nextItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.nextNode.call(this, nextItem)
    end
    def reset(this : IXMLDOMSelection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get__newEnum(this : IXMLDOMSelection*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end
    def get_expr(this : IXMLDOMSelection*, expression : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expr.call(this, expression)
    end
    def put_expr(this : IXMLDOMSelection*, expression : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_expr.call(this, expression)
    end
    def get_context(this : IXMLDOMSelection*, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, ppNode)
    end
    def putref_context(this : IXMLDOMSelection*, pNode : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_context.call(this, pNode)
    end
    def peekNode(this : IXMLDOMSelection*, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.peekNode.call(this, ppNode)
    end
    def matches(this : IXMLDOMSelection*, pNode : Void*, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.matches.call(this, pNode, ppNode)
    end
    def removeNext(this : IXMLDOMSelection*, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeNext.call(this, ppNode)
    end
    def removeAll(this : IXMLDOMSelection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAll.call(this)
    end
    def clone(this : IXMLDOMSelection*, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppNode)
    end
    def getProperty(this : IXMLDOMSelection*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, name, value)
    end
    def setProperty(this : IXMLDOMSelection*, name : Win32cr::Foundation::BSTR, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProperty.call(this, name, value)
    end

  end

  @[Extern]
  record IXMLDOMParseError2Vtbl,
    query_interface : Proc(IXMLDOMParseError2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMParseError2*, UInt32),
    release : Proc(IXMLDOMParseError2*, UInt32),
    get_type_info_count : Proc(IXMLDOMParseError2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMParseError2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMParseError2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMParseError2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_errorCode : Proc(IXMLDOMParseError2*, Int32*, Win32cr::Foundation::HRESULT),
    get_url : Proc(IXMLDOMParseError2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_reason : Proc(IXMLDOMParseError2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_srcText : Proc(IXMLDOMParseError2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_line : Proc(IXMLDOMParseError2*, Int32*, Win32cr::Foundation::HRESULT),
    get_linepos : Proc(IXMLDOMParseError2*, Int32*, Win32cr::Foundation::HRESULT),
    get_filepos : Proc(IXMLDOMParseError2*, Int32*, Win32cr::Foundation::HRESULT),
    get_errorXPath : Proc(IXMLDOMParseError2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_allErrors : Proc(IXMLDOMParseError2*, Void**, Win32cr::Foundation::HRESULT),
    errorParameters : Proc(IXMLDOMParseError2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_errorParametersCount : Proc(IXMLDOMParseError2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa428-272f-11d2-836f-0000f87a7782")]
  record IXMLDOMParseError2, lpVtbl : IXMLDOMParseError2Vtbl* do
    GUID = LibC::GUID.new(0x3efaa428_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : IXMLDOMParseError2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMParseError2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMParseError2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMParseError2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMParseError2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMParseError2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMParseError2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_errorCode(this : IXMLDOMParseError2*, errorCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorCode.call(this, errorCode)
    end
    def get_url(this : IXMLDOMParseError2*, urlString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, urlString)
    end
    def get_reason(this : IXMLDOMParseError2*, reasonString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reason.call(this, reasonString)
    end
    def get_srcText(this : IXMLDOMParseError2*, sourceString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_srcText.call(this, sourceString)
    end
    def get_line(this : IXMLDOMParseError2*, lineNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line.call(this, lineNumber)
    end
    def get_linepos(this : IXMLDOMParseError2*, linePosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_linepos.call(this, linePosition)
    end
    def get_filepos(this : IXMLDOMParseError2*, filePosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filepos.call(this, filePosition)
    end
    def get_errorXPath(this : IXMLDOMParseError2*, xpathexpr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorXPath.call(this, xpathexpr)
    end
    def get_allErrors(this : IXMLDOMParseError2*, allErrors : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allErrors.call(this, allErrors)
    end
    def errorParameters(this : IXMLDOMParseError2*, index : Int32, param1 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.errorParameters.call(this, index, param1)
    end
    def get_errorParametersCount(this : IXMLDOMParseError2*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorParametersCount.call(this, count)
    end

  end

  @[Extern]
  record IXMLDOMParseErrorCollectionVtbl,
    query_interface : Proc(IXMLDOMParseErrorCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMParseErrorCollection*, UInt32),
    release : Proc(IXMLDOMParseErrorCollection*, UInt32),
    get_type_info_count : Proc(IXMLDOMParseErrorCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMParseErrorCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMParseErrorCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMParseErrorCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXMLDOMParseErrorCollection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMParseErrorCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_next : Proc(IXMLDOMParseErrorCollection*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(IXMLDOMParseErrorCollection*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMParseErrorCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3efaa429-272f-11d2-836f-0000f87a7782")]
  record IXMLDOMParseErrorCollection, lpVtbl : IXMLDOMParseErrorCollectionVtbl* do
    GUID = LibC::GUID.new(0x3efaa429_u32, 0x272f_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x6f_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x77_u8, 0x82_u8])
    def query_interface(this : IXMLDOMParseErrorCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMParseErrorCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMParseErrorCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMParseErrorCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMParseErrorCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMParseErrorCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMParseErrorCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : IXMLDOMParseErrorCollection*, index : Int32, error : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, error)
    end
    def get_length(this : IXMLDOMParseErrorCollection*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get_next(this : IXMLDOMParseErrorCollection*, error : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next.call(this, error)
    end
    def reset(this : IXMLDOMParseErrorCollection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get__newEnum(this : IXMLDOMParseErrorCollection*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppunk)
    end

  end

  @[Extern]
  record IXSLProcessorVtbl,
    query_interface : Proc(IXSLProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXSLProcessor*, UInt32),
    release : Proc(IXSLProcessor*, UInt32),
    get_type_info_count : Proc(IXSLProcessor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXSLProcessor*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXSLProcessor*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXSLProcessor*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_input : Proc(IXSLProcessor*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_input : Proc(IXSLProcessor*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_ownerTemplate : Proc(IXSLProcessor*, Void**, Win32cr::Foundation::HRESULT),
    setStartMode : Proc(IXSLProcessor*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_startMode : Proc(IXSLProcessor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_startModeURI : Proc(IXSLProcessor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_output : Proc(IXSLProcessor*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_output : Proc(IXSLProcessor*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    transform : Proc(IXSLProcessor*, Int16*, Win32cr::Foundation::HRESULT),
    reset : Proc(IXSLProcessor*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXSLProcessor*, Int32*, Win32cr::Foundation::HRESULT),
    addParameter : Proc(IXSLProcessor*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addObject : Proc(IXSLProcessor*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_stylesheet : Proc(IXSLProcessor*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf92-7b36-11d2-b20e-00c04f983e60")]
  record IXSLProcessor, lpVtbl : IXSLProcessorVtbl* do
    GUID = LibC::GUID.new(0x2933bf92_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXSLProcessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXSLProcessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXSLProcessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXSLProcessor*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXSLProcessor*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXSLProcessor*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXSLProcessor*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_input(this : IXSLProcessor*, var : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_input.call(this, var)
    end
    def get_input(this : IXSLProcessor*, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input.call(this, pVar)
    end
    def get_ownerTemplate(this : IXSLProcessor*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ownerTemplate.call(this, ppTemplate)
    end
    def setStartMode(this : IXSLProcessor*, mode : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setStartMode.call(this, mode, namespaceURI)
    end
    def get_startMode(this : IXSLProcessor*, mode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_startMode.call(this, mode)
    end
    def get_startModeURI(this : IXSLProcessor*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_startModeURI.call(this, namespaceURI)
    end
    def put_output(this : IXSLProcessor*, output : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_output.call(this, output)
    end
    def get_output(this : IXSLProcessor*, pOutput : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output.call(this, pOutput)
    end
    def transform(this : IXSLProcessor*, pDone : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transform.call(this, pDone)
    end
    def reset(this : IXSLProcessor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_readyState(this : IXSLProcessor*, pReadyState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, pReadyState)
    end
    def addParameter(this : IXSLProcessor*, baseName : Win32cr::Foundation::BSTR, parameter : Win32cr::System::Com::VARIANT, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addParameter.call(this, baseName, parameter, namespaceURI)
    end
    def addObject(this : IXSLProcessor*, obj : Void*, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addObject.call(this, obj, namespaceURI)
    end
    def get_stylesheet(this : IXSLProcessor*, stylesheet : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stylesheet.call(this, stylesheet)
    end

  end

  @[Extern]
  record IXSLTemplateVtbl,
    query_interface : Proc(IXSLTemplate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXSLTemplate*, UInt32),
    release : Proc(IXSLTemplate*, UInt32),
    get_type_info_count : Proc(IXSLTemplate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXSLTemplate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXSLTemplate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXSLTemplate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    putref_stylesheet : Proc(IXSLTemplate*, Void*, Win32cr::Foundation::HRESULT),
    get_stylesheet : Proc(IXSLTemplate*, Void**, Win32cr::Foundation::HRESULT),
    createProcessor : Proc(IXSLTemplate*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2933bf93-7b36-11d2-b20e-00c04f983e60")]
  record IXSLTemplate, lpVtbl : IXSLTemplateVtbl* do
    GUID = LibC::GUID.new(0x2933bf93_u32, 0x7b36_u16, 0x11d2_u16, StaticArray[0xb2_u8, 0xe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x98_u8, 0x3e_u8, 0x60_u8])
    def query_interface(this : IXSLTemplate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXSLTemplate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXSLTemplate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXSLTemplate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXSLTemplate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXSLTemplate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXSLTemplate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def putref_stylesheet(this : IXSLTemplate*, stylesheet : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_stylesheet.call(this, stylesheet)
    end
    def get_stylesheet(this : IXSLTemplate*, stylesheet : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stylesheet.call(this, stylesheet)
    end
    def createProcessor(this : IXSLTemplate*, ppProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createProcessor.call(this, ppProcessor)
    end

  end

  @[Extern]
  record IXMLHTTPRequestVtbl,
    query_interface : Proc(IXMLHTTPRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHTTPRequest*, UInt32),
    release : Proc(IXMLHTTPRequest*, UInt32),
    get_type_info_count : Proc(IXMLHTTPRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLHTTPRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLHTTPRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLHTTPRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setRequestHeader : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getResponseHeader : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAllResponseHeaders : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    send : Proc(IXMLHTTPRequest*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLHTTPRequest*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IXMLHTTPRequest*, Int32*, Win32cr::Foundation::HRESULT),
    get_statusText : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseXML : Proc(IXMLHTTPRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_responseText : Proc(IXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseBody : Proc(IXMLHTTPRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_responseStream : Proc(IXMLHTTPRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IXMLHTTPRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IXMLHTTPRequest*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ed8c108d-4349-11d2-91a4-00c04f7969e8")]
  record IXMLHTTPRequest, lpVtbl : IXMLHTTPRequestVtbl* do
    GUID = LibC::GUID.new(0xed8c108d_u32, 0x4349_u16, 0x11d2_u16, StaticArray[0x91_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x69_u8, 0xe8_u8])
    def query_interface(this : IXMLHTTPRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHTTPRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHTTPRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLHTTPRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLHTTPRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLHTTPRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLHTTPRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IXMLHTTPRequest*, bstrMethod : Win32cr::Foundation::BSTR, bstrUrl : Win32cr::Foundation::BSTR, varAsync : Win32cr::System::Com::VARIANT, bstrUser : Win32cr::System::Com::VARIANT, bstrPassword : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword)
    end
    def setRequestHeader(this : IXMLHTTPRequest*, bstrHeader : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setRequestHeader.call(this, bstrHeader, bstrValue)
    end
    def getResponseHeader(this : IXMLHTTPRequest*, bstrHeader : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getResponseHeader.call(this, bstrHeader, pbstrValue)
    end
    def getAllResponseHeaders(this : IXMLHTTPRequest*, pbstrHeaders : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAllResponseHeaders.call(this, pbstrHeaders)
    end
    def send(this : IXMLHTTPRequest*, varBody : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, varBody)
    end
    def abort(this : IXMLHTTPRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def get_status(this : IXMLHTTPRequest*, plStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plStatus)
    end
    def get_statusText(this : IXMLHTTPRequest*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statusText.call(this, pbstrStatus)
    end
    def get_responseXML(this : IXMLHTTPRequest*, ppBody : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseXML.call(this, ppBody)
    end
    def get_responseText(this : IXMLHTTPRequest*, pbstrBody : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseText.call(this, pbstrBody)
    end
    def get_responseBody(this : IXMLHTTPRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseBody.call(this, pvarBody)
    end
    def get_responseStream(this : IXMLHTTPRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseStream.call(this, pvarBody)
    end
    def get_readyState(this : IXMLHTTPRequest*, plState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, plState)
    end
    def put_onreadystatechange(this : IXMLHTTPRequest*, pReadyStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, pReadyStateSink)
    end

  end

  @[Extern]
  record IServerXMLHTTPRequestVtbl,
    query_interface : Proc(IServerXMLHTTPRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IServerXMLHTTPRequest*, UInt32),
    release : Proc(IServerXMLHTTPRequest*, UInt32),
    get_type_info_count : Proc(IServerXMLHTTPRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IServerXMLHTTPRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IServerXMLHTTPRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IServerXMLHTTPRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setRequestHeader : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getResponseHeader : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAllResponseHeaders : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    send : Proc(IServerXMLHTTPRequest*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    abort : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IServerXMLHTTPRequest*, Int32*, Win32cr::Foundation::HRESULT),
    get_statusText : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseXML : Proc(IServerXMLHTTPRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_responseText : Proc(IServerXMLHTTPRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseBody : Proc(IServerXMLHTTPRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_responseStream : Proc(IServerXMLHTTPRequest*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IServerXMLHTTPRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IServerXMLHTTPRequest*, Void*, Win32cr::Foundation::HRESULT),
    setTimeouts : Proc(IServerXMLHTTPRequest*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    waitForResponse : Proc(IServerXMLHTTPRequest*, Win32cr::System::Com::VARIANT, Int16*, Win32cr::Foundation::HRESULT),
    getOption : Proc(IServerXMLHTTPRequest*, Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    setOption : Proc(IServerXMLHTTPRequest*, Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2e9196bf-13ba-4dd4-91ca-6c571f281495")]
  record IServerXMLHTTPRequest, lpVtbl : IServerXMLHTTPRequestVtbl* do
    GUID = LibC::GUID.new(0x2e9196bf_u32, 0x13ba_u16, 0x4dd4_u16, StaticArray[0x91_u8, 0xca_u8, 0x6c_u8, 0x57_u8, 0x1f_u8, 0x28_u8, 0x14_u8, 0x95_u8])
    def query_interface(this : IServerXMLHTTPRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IServerXMLHTTPRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IServerXMLHTTPRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IServerXMLHTTPRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IServerXMLHTTPRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IServerXMLHTTPRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IServerXMLHTTPRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IServerXMLHTTPRequest*, bstrMethod : Win32cr::Foundation::BSTR, bstrUrl : Win32cr::Foundation::BSTR, varAsync : Win32cr::System::Com::VARIANT, bstrUser : Win32cr::System::Com::VARIANT, bstrPassword : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword)
    end
    def setRequestHeader(this : IServerXMLHTTPRequest*, bstrHeader : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setRequestHeader.call(this, bstrHeader, bstrValue)
    end
    def getResponseHeader(this : IServerXMLHTTPRequest*, bstrHeader : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getResponseHeader.call(this, bstrHeader, pbstrValue)
    end
    def getAllResponseHeaders(this : IServerXMLHTTPRequest*, pbstrHeaders : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAllResponseHeaders.call(this, pbstrHeaders)
    end
    def send(this : IServerXMLHTTPRequest*, varBody : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, varBody)
    end
    def abort(this : IServerXMLHTTPRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def get_status(this : IServerXMLHTTPRequest*, plStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plStatus)
    end
    def get_statusText(this : IServerXMLHTTPRequest*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statusText.call(this, pbstrStatus)
    end
    def get_responseXML(this : IServerXMLHTTPRequest*, ppBody : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseXML.call(this, ppBody)
    end
    def get_responseText(this : IServerXMLHTTPRequest*, pbstrBody : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseText.call(this, pbstrBody)
    end
    def get_responseBody(this : IServerXMLHTTPRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseBody.call(this, pvarBody)
    end
    def get_responseStream(this : IServerXMLHTTPRequest*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseStream.call(this, pvarBody)
    end
    def get_readyState(this : IServerXMLHTTPRequest*, plState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, plState)
    end
    def put_onreadystatechange(this : IServerXMLHTTPRequest*, pReadyStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, pReadyStateSink)
    end
    def setTimeouts(this : IServerXMLHTTPRequest*, resolveTimeout : Int32, connectTimeout : Int32, sendTimeout : Int32, receiveTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTimeouts.call(this, resolveTimeout, connectTimeout, sendTimeout, receiveTimeout)
    end
    def waitForResponse(this : IServerXMLHTTPRequest*, timeoutInSeconds : Win32cr::System::Com::VARIANT, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.waitForResponse.call(this, timeoutInSeconds, isSuccessful)
    end
    def getOption(this : IServerXMLHTTPRequest*, option : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getOption.call(this, option, value)
    end
    def setOption(this : IServerXMLHTTPRequest*, option : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setOption.call(this, option, value)
    end

  end

  @[Extern]
  record IServerXMLHTTPRequest2Vtbl,
    query_interface : Proc(IServerXMLHTTPRequest2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IServerXMLHTTPRequest2*, UInt32),
    release : Proc(IServerXMLHTTPRequest2*, UInt32),
    get_type_info_count : Proc(IServerXMLHTTPRequest2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IServerXMLHTTPRequest2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IServerXMLHTTPRequest2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IServerXMLHTTPRequest2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setRequestHeader : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getResponseHeader : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAllResponseHeaders : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    send : Proc(IServerXMLHTTPRequest2*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    abort : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IServerXMLHTTPRequest2*, Int32*, Win32cr::Foundation::HRESULT),
    get_statusText : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseXML : Proc(IServerXMLHTTPRequest2*, Void**, Win32cr::Foundation::HRESULT),
    get_responseText : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_responseBody : Proc(IServerXMLHTTPRequest2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_responseStream : Proc(IServerXMLHTTPRequest2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_readyState : Proc(IServerXMLHTTPRequest2*, Int32*, Win32cr::Foundation::HRESULT),
    put_onreadystatechange : Proc(IServerXMLHTTPRequest2*, Void*, Win32cr::Foundation::HRESULT),
    setTimeouts : Proc(IServerXMLHTTPRequest2*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    waitForResponse : Proc(IServerXMLHTTPRequest2*, Win32cr::System::Com::VARIANT, Int16*, Win32cr::Foundation::HRESULT),
    getOption : Proc(IServerXMLHTTPRequest2*, Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    setOption : Proc(IServerXMLHTTPRequest2*, Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setProxy : Proc(IServerXMLHTTPRequest2*, Win32cr::Data::Xml::MsXml::SXH_PROXY_SETTING, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setProxyCredentials : Proc(IServerXMLHTTPRequest2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2e01311b-c322-4b0a-bd77-b90cfdc8dce7")]
  record IServerXMLHTTPRequest2, lpVtbl : IServerXMLHTTPRequest2Vtbl* do
    GUID = LibC::GUID.new(0x2e01311b_u32, 0xc322_u16, 0x4b0a_u16, StaticArray[0xbd_u8, 0x77_u8, 0xb9_u8, 0xc_u8, 0xfd_u8, 0xc8_u8, 0xdc_u8, 0xe7_u8])
    def query_interface(this : IServerXMLHTTPRequest2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IServerXMLHTTPRequest2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IServerXMLHTTPRequest2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IServerXMLHTTPRequest2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IServerXMLHTTPRequest2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IServerXMLHTTPRequest2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IServerXMLHTTPRequest2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IServerXMLHTTPRequest2*, bstrMethod : Win32cr::Foundation::BSTR, bstrUrl : Win32cr::Foundation::BSTR, varAsync : Win32cr::System::Com::VARIANT, bstrUser : Win32cr::System::Com::VARIANT, bstrPassword : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword)
    end
    def setRequestHeader(this : IServerXMLHTTPRequest2*, bstrHeader : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setRequestHeader.call(this, bstrHeader, bstrValue)
    end
    def getResponseHeader(this : IServerXMLHTTPRequest2*, bstrHeader : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getResponseHeader.call(this, bstrHeader, pbstrValue)
    end
    def getAllResponseHeaders(this : IServerXMLHTTPRequest2*, pbstrHeaders : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAllResponseHeaders.call(this, pbstrHeaders)
    end
    def send(this : IServerXMLHTTPRequest2*, varBody : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, varBody)
    end
    def abort(this : IServerXMLHTTPRequest2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def get_status(this : IServerXMLHTTPRequest2*, plStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plStatus)
    end
    def get_statusText(this : IServerXMLHTTPRequest2*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statusText.call(this, pbstrStatus)
    end
    def get_responseXML(this : IServerXMLHTTPRequest2*, ppBody : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseXML.call(this, ppBody)
    end
    def get_responseText(this : IServerXMLHTTPRequest2*, pbstrBody : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseText.call(this, pbstrBody)
    end
    def get_responseBody(this : IServerXMLHTTPRequest2*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseBody.call(this, pvarBody)
    end
    def get_responseStream(this : IServerXMLHTTPRequest2*, pvarBody : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_responseStream.call(this, pvarBody)
    end
    def get_readyState(this : IServerXMLHTTPRequest2*, plState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_readyState.call(this, plState)
    end
    def put_onreadystatechange(this : IServerXMLHTTPRequest2*, pReadyStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_onreadystatechange.call(this, pReadyStateSink)
    end
    def setTimeouts(this : IServerXMLHTTPRequest2*, resolveTimeout : Int32, connectTimeout : Int32, sendTimeout : Int32, receiveTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTimeouts.call(this, resolveTimeout, connectTimeout, sendTimeout, receiveTimeout)
    end
    def waitForResponse(this : IServerXMLHTTPRequest2*, timeoutInSeconds : Win32cr::System::Com::VARIANT, isSuccessful : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.waitForResponse.call(this, timeoutInSeconds, isSuccessful)
    end
    def getOption(this : IServerXMLHTTPRequest2*, option : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getOption.call(this, option, value)
    end
    def setOption(this : IServerXMLHTTPRequest2*, option : Win32cr::Data::Xml::MsXml::SERVERXMLHTTP_OPTION, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setOption.call(this, option, value)
    end
    def setProxy(this : IServerXMLHTTPRequest2*, proxySetting : Win32cr::Data::Xml::MsXml::SXH_PROXY_SETTING, varProxyServer : Win32cr::System::Com::VARIANT, varBypassList : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxy.call(this, proxySetting, varProxyServer, varBypassList)
    end
    def setProxyCredentials(this : IServerXMLHTTPRequest2*, bstrUserName : Win32cr::Foundation::BSTR, bstrPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxyCredentials.call(this, bstrUserName, bstrPassword)
    end

  end

  @[Extern]
  record ISAXXMLReaderVtbl,
    query_interface : Proc(ISAXXMLReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXXMLReader*, UInt32),
    release : Proc(ISAXXMLReader*, UInt32),
    getFeature : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Int16*, Win32cr::Foundation::HRESULT),
    putFeature : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Int16, Win32cr::Foundation::HRESULT),
    getProperty : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putProperty : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getEntityResolver : Proc(ISAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putEntityResolver : Proc(ISAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    getContentHandler : Proc(ISAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putContentHandler : Proc(ISAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    getDTDHandler : Proc(ISAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putDTDHandler : Proc(ISAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    getErrorHandler : Proc(ISAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putErrorHandler : Proc(ISAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    getBaseURL : Proc(ISAXXMLReader*, UInt16**, Win32cr::Foundation::HRESULT),
    putBaseURL : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    getSecureBaseURL : Proc(ISAXXMLReader*, UInt16**, Win32cr::Foundation::HRESULT),
    putSecureBaseURL : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    parse : Proc(ISAXXMLReader*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    parseURL : Proc(ISAXXMLReader*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a4f96ed0-f829-476e-81c0-cdc7bd2a0802")]
  record ISAXXMLReader, lpVtbl : ISAXXMLReaderVtbl* do
    GUID = LibC::GUID.new(0xa4f96ed0_u32, 0xf829_u16, 0x476e_u16, StaticArray[0x81_u8, 0xc0_u8, 0xcd_u8, 0xc7_u8, 0xbd_u8, 0x2a_u8, 0x8_u8, 0x2_u8])
    def query_interface(this : ISAXXMLReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXXMLReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXXMLReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getFeature(this : ISAXXMLReader*, pwchName : Win32cr::Foundation::PWSTR, pvfValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getFeature.call(this, pwchName, pvfValue)
    end
    def putFeature(this : ISAXXMLReader*, pwchName : Win32cr::Foundation::PWSTR, vfValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putFeature.call(this, pwchName, vfValue)
    end
    def getProperty(this : ISAXXMLReader*, pwchName : Win32cr::Foundation::PWSTR, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, pwchName, pvarValue)
    end
    def putProperty(this : ISAXXMLReader*, pwchName : Win32cr::Foundation::PWSTR, varValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putProperty.call(this, pwchName, varValue)
    end
    def getEntityResolver(this : ISAXXMLReader*, ppResolver : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getEntityResolver.call(this, ppResolver)
    end
    def putEntityResolver(this : ISAXXMLReader*, pResolver : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putEntityResolver.call(this, pResolver)
    end
    def getContentHandler(this : ISAXXMLReader*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getContentHandler.call(this, ppHandler)
    end
    def putContentHandler(this : ISAXXMLReader*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putContentHandler.call(this, pHandler)
    end
    def getDTDHandler(this : ISAXXMLReader*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDTDHandler.call(this, ppHandler)
    end
    def putDTDHandler(this : ISAXXMLReader*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putDTDHandler.call(this, pHandler)
    end
    def getErrorHandler(this : ISAXXMLReader*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getErrorHandler.call(this, ppHandler)
    end
    def putErrorHandler(this : ISAXXMLReader*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putErrorHandler.call(this, pHandler)
    end
    def getBaseURL(this : ISAXXMLReader*, ppwchBaseUrl : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getBaseURL.call(this, ppwchBaseUrl)
    end
    def putBaseURL(this : ISAXXMLReader*, pwchBaseUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putBaseURL.call(this, pwchBaseUrl)
    end
    def getSecureBaseURL(this : ISAXXMLReader*, ppwchSecureBaseUrl : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSecureBaseURL.call(this, ppwchSecureBaseUrl)
    end
    def putSecureBaseURL(this : ISAXXMLReader*, pwchSecureBaseUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putSecureBaseURL.call(this, pwchSecureBaseUrl)
    end
    def parse(this : ISAXXMLReader*, varInput : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse.call(this, varInput)
    end
    def parseURL(this : ISAXXMLReader*, pwchUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parseURL.call(this, pwchUrl)
    end

  end

  @[Extern]
  record ISAXXMLFilterVtbl,
    query_interface : Proc(ISAXXMLFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXXMLFilter*, UInt32),
    release : Proc(ISAXXMLFilter*, UInt32),
    getFeature : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Int16*, Win32cr::Foundation::HRESULT),
    putFeature : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Int16, Win32cr::Foundation::HRESULT),
    getProperty : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putProperty : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    getEntityResolver : Proc(ISAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putEntityResolver : Proc(ISAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    getContentHandler : Proc(ISAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putContentHandler : Proc(ISAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    getDTDHandler : Proc(ISAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putDTDHandler : Proc(ISAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    getErrorHandler : Proc(ISAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putErrorHandler : Proc(ISAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    getBaseURL : Proc(ISAXXMLFilter*, UInt16**, Win32cr::Foundation::HRESULT),
    putBaseURL : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    getSecureBaseURL : Proc(ISAXXMLFilter*, UInt16**, Win32cr::Foundation::HRESULT),
    putSecureBaseURL : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    parse : Proc(ISAXXMLFilter*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    parseURL : Proc(ISAXXMLFilter*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    getParent : Proc(ISAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putParent : Proc(ISAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("70409222-ca09-4475-acb8-40312fe8d145")]
  record ISAXXMLFilter, lpVtbl : ISAXXMLFilterVtbl* do
    GUID = LibC::GUID.new(0x70409222_u32, 0xca09_u16, 0x4475_u16, StaticArray[0xac_u8, 0xb8_u8, 0x40_u8, 0x31_u8, 0x2f_u8, 0xe8_u8, 0xd1_u8, 0x45_u8])
    def query_interface(this : ISAXXMLFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXXMLFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXXMLFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getFeature(this : ISAXXMLFilter*, pwchName : Win32cr::Foundation::PWSTR, pvfValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getFeature.call(this, pwchName, pvfValue)
    end
    def putFeature(this : ISAXXMLFilter*, pwchName : Win32cr::Foundation::PWSTR, vfValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putFeature.call(this, pwchName, vfValue)
    end
    def getProperty(this : ISAXXMLFilter*, pwchName : Win32cr::Foundation::PWSTR, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, pwchName, pvarValue)
    end
    def putProperty(this : ISAXXMLFilter*, pwchName : Win32cr::Foundation::PWSTR, varValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putProperty.call(this, pwchName, varValue)
    end
    def getEntityResolver(this : ISAXXMLFilter*, ppResolver : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getEntityResolver.call(this, ppResolver)
    end
    def putEntityResolver(this : ISAXXMLFilter*, pResolver : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putEntityResolver.call(this, pResolver)
    end
    def getContentHandler(this : ISAXXMLFilter*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getContentHandler.call(this, ppHandler)
    end
    def putContentHandler(this : ISAXXMLFilter*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putContentHandler.call(this, pHandler)
    end
    def getDTDHandler(this : ISAXXMLFilter*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDTDHandler.call(this, ppHandler)
    end
    def putDTDHandler(this : ISAXXMLFilter*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putDTDHandler.call(this, pHandler)
    end
    def getErrorHandler(this : ISAXXMLFilter*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getErrorHandler.call(this, ppHandler)
    end
    def putErrorHandler(this : ISAXXMLFilter*, pHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putErrorHandler.call(this, pHandler)
    end
    def getBaseURL(this : ISAXXMLFilter*, ppwchBaseUrl : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getBaseURL.call(this, ppwchBaseUrl)
    end
    def putBaseURL(this : ISAXXMLFilter*, pwchBaseUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putBaseURL.call(this, pwchBaseUrl)
    end
    def getSecureBaseURL(this : ISAXXMLFilter*, ppwchSecureBaseUrl : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSecureBaseURL.call(this, ppwchSecureBaseUrl)
    end
    def putSecureBaseURL(this : ISAXXMLFilter*, pwchSecureBaseUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putSecureBaseURL.call(this, pwchSecureBaseUrl)
    end
    def parse(this : ISAXXMLFilter*, varInput : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse.call(this, varInput)
    end
    def parseURL(this : ISAXXMLFilter*, pwchUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parseURL.call(this, pwchUrl)
    end
    def getParent(this : ISAXXMLFilter*, ppReader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getParent.call(this, ppReader)
    end
    def putParent(this : ISAXXMLFilter*, pReader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putParent.call(this, pReader)
    end

  end

  @[Extern]
  record ISAXLocatorVtbl,
    query_interface : Proc(ISAXLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXLocator*, UInt32),
    release : Proc(ISAXLocator*, UInt32),
    getColumnNumber : Proc(ISAXLocator*, Int32*, Win32cr::Foundation::HRESULT),
    getLineNumber : Proc(ISAXLocator*, Int32*, Win32cr::Foundation::HRESULT),
    getPublicId : Proc(ISAXLocator*, UInt16**, Win32cr::Foundation::HRESULT),
    getSystemId : Proc(ISAXLocator*, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b7e472a-0de4-4640-bff3-84d38a051c31")]
  record ISAXLocator, lpVtbl : ISAXLocatorVtbl* do
    GUID = LibC::GUID.new(0x9b7e472a_u32, 0xde4_u16, 0x4640_u16, StaticArray[0xbf_u8, 0xf3_u8, 0x84_u8, 0xd3_u8, 0x8a_u8, 0x5_u8, 0x1c_u8, 0x31_u8])
    def query_interface(this : ISAXLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getColumnNumber(this : ISAXLocator*, pnColumn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getColumnNumber.call(this, pnColumn)
    end
    def getLineNumber(this : ISAXLocator*, pnLine : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLineNumber.call(this, pnLine)
    end
    def getPublicId(this : ISAXLocator*, ppwchPublicId : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getPublicId.call(this, ppwchPublicId)
    end
    def getSystemId(this : ISAXLocator*, ppwchSystemId : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSystemId.call(this, ppwchSystemId)
    end

  end

  @[Extern]
  record ISAXEntityResolverVtbl,
    query_interface : Proc(ISAXEntityResolver*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXEntityResolver*, UInt32),
    release : Proc(ISAXEntityResolver*, UInt32),
    resolveEntity : Proc(ISAXEntityResolver*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07")]
  record ISAXEntityResolver, lpVtbl : ISAXEntityResolverVtbl* do
    GUID = LibC::GUID.new(0x99bca7bd_u32, 0xe8c4_u16, 0x4d5f_u16, StaticArray[0xa0_u8, 0xcf_u8, 0x6d_u8, 0x90_u8, 0x79_u8, 0x1_u8, 0xff_u8, 0x7_u8])
    def query_interface(this : ISAXEntityResolver*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXEntityResolver*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXEntityResolver*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def resolveEntity(this : ISAXEntityResolver*, pwchPublicId : Win32cr::Foundation::PWSTR, pwchSystemId : Win32cr::Foundation::PWSTR, pvarInput : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolveEntity.call(this, pwchPublicId, pwchSystemId, pvarInput)
    end

  end

  @[Extern]
  record ISAXContentHandlerVtbl,
    query_interface : Proc(ISAXContentHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXContentHandler*, UInt32),
    release : Proc(ISAXContentHandler*, UInt32),
    putDocumentLocator : Proc(ISAXContentHandler*, Void*, Win32cr::Foundation::HRESULT),
    startDocument : Proc(ISAXContentHandler*, Win32cr::Foundation::HRESULT),
    endDocument : Proc(ISAXContentHandler*, Win32cr::Foundation::HRESULT),
    startPrefixMapping : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    endPrefixMapping : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    startElement : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Void*, Win32cr::Foundation::HRESULT),
    endElement : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    characters : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    ignorableWhitespace : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    processingInstruction : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    skippedEntity : Proc(ISAXContentHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44")]
  record ISAXContentHandler, lpVtbl : ISAXContentHandlerVtbl* do
    GUID = LibC::GUID.new(0x1545cdfa_u32, 0x9e4e_u16, 0x4497_u16, StaticArray[0xa8_u8, 0xa4_u8, 0x2b_u8, 0xf7_u8, 0xd0_u8, 0x11_u8, 0x2c_u8, 0x44_u8])
    def query_interface(this : ISAXContentHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXContentHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXContentHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def putDocumentLocator(this : ISAXContentHandler*, pLocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putDocumentLocator.call(this, pLocator)
    end
    def startDocument(this : ISAXContentHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startDocument.call(this)
    end
    def endDocument(this : ISAXContentHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endDocument.call(this)
    end
    def startPrefixMapping(this : ISAXContentHandler*, pwchPrefix : Win32cr::Foundation::PWSTR, cchPrefix : Int32, pwchUri : Win32cr::Foundation::PWSTR, cchUri : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startPrefixMapping.call(this, pwchPrefix, cchPrefix, pwchUri, cchUri)
    end
    def endPrefixMapping(this : ISAXContentHandler*, pwchPrefix : Win32cr::Foundation::PWSTR, cchPrefix : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endPrefixMapping.call(this, pwchPrefix, cchPrefix)
    end
    def startElement(this : ISAXContentHandler*, pwchNamespaceUri : Win32cr::Foundation::PWSTR, cchNamespaceUri : Int32, pwchLocalName : Win32cr::Foundation::PWSTR, cchLocalName : Int32, pwchQName : Win32cr::Foundation::PWSTR, cchQName : Int32, pAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startElement.call(this, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName, pAttributes)
    end
    def endElement(this : ISAXContentHandler*, pwchNamespaceUri : Win32cr::Foundation::PWSTR, cchNamespaceUri : Int32, pwchLocalName : Win32cr::Foundation::PWSTR, cchLocalName : Int32, pwchQName : Win32cr::Foundation::PWSTR, cchQName : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endElement.call(this, pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName)
    end
    def characters(this : ISAXContentHandler*, pwchChars : Win32cr::Foundation::PWSTR, cchChars : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.characters.call(this, pwchChars, cchChars)
    end
    def ignorableWhitespace(this : ISAXContentHandler*, pwchChars : Win32cr::Foundation::PWSTR, cchChars : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignorableWhitespace.call(this, pwchChars, cchChars)
    end
    def processingInstruction(this : ISAXContentHandler*, pwchTarget : Win32cr::Foundation::PWSTR, cchTarget : Int32, pwchData : Win32cr::Foundation::PWSTR, cchData : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.processingInstruction.call(this, pwchTarget, cchTarget, pwchData, cchData)
    end
    def skippedEntity(this : ISAXContentHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skippedEntity.call(this, pwchName, cchName)
    end

  end

  @[Extern]
  record ISAXDTDHandlerVtbl,
    query_interface : Proc(ISAXDTDHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXDTDHandler*, UInt32),
    release : Proc(ISAXDTDHandler*, UInt32),
    notationDecl : Proc(ISAXDTDHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    unparsedEntityDecl : Proc(ISAXDTDHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e15c1baf-afb3-4d60-8c36-19a8c45defed")]
  record ISAXDTDHandler, lpVtbl : ISAXDTDHandlerVtbl* do
    GUID = LibC::GUID.new(0xe15c1baf_u32, 0xafb3_u16, 0x4d60_u16, StaticArray[0x8c_u8, 0x36_u8, 0x19_u8, 0xa8_u8, 0xc4_u8, 0x5d_u8, 0xef_u8, 0xed_u8])
    def query_interface(this : ISAXDTDHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXDTDHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXDTDHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notationDecl(this : ISAXDTDHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchPublicId : Win32cr::Foundation::PWSTR, cchPublicId : Int32, pwchSystemId : Win32cr::Foundation::PWSTR, cchSystemId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notationDecl.call(this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId)
    end
    def unparsedEntityDecl(this : ISAXDTDHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchPublicId : Win32cr::Foundation::PWSTR, cchPublicId : Int32, pwchSystemId : Win32cr::Foundation::PWSTR, cchSystemId : Int32, pwchNotationName : Win32cr::Foundation::PWSTR, cchNotationName : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unparsedEntityDecl.call(this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId, pwchNotationName, cchNotationName)
    end

  end

  @[Extern]
  record ISAXErrorHandlerVtbl,
    query_interface : Proc(ISAXErrorHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXErrorHandler*, UInt32),
    release : Proc(ISAXErrorHandler*, UInt32),
    error : Proc(ISAXErrorHandler*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    fatalError : Proc(ISAXErrorHandler*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    ignorableWarning : Proc(ISAXErrorHandler*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a60511c4-ccf5-479e-98a3-dc8dc545b7d0")]
  record ISAXErrorHandler, lpVtbl : ISAXErrorHandlerVtbl* do
    GUID = LibC::GUID.new(0xa60511c4_u32, 0xccf5_u16, 0x479e_u16, StaticArray[0x98_u8, 0xa3_u8, 0xdc_u8, 0x8d_u8, 0xc5_u8, 0x45_u8, 0xb7_u8, 0xd0_u8])
    def query_interface(this : ISAXErrorHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXErrorHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXErrorHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def error(this : ISAXErrorHandler*, pLocator : Void*, pwchErrorMessage : Win32cr::Foundation::PWSTR, hrErrorCode : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this, pLocator, pwchErrorMessage, hrErrorCode)
    end
    def fatalError(this : ISAXErrorHandler*, pLocator : Void*, pwchErrorMessage : Win32cr::Foundation::PWSTR, hrErrorCode : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fatalError.call(this, pLocator, pwchErrorMessage, hrErrorCode)
    end
    def ignorableWarning(this : ISAXErrorHandler*, pLocator : Void*, pwchErrorMessage : Win32cr::Foundation::PWSTR, hrErrorCode : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignorableWarning.call(this, pLocator, pwchErrorMessage, hrErrorCode)
    end

  end

  @[Extern]
  record ISAXLexicalHandlerVtbl,
    query_interface : Proc(ISAXLexicalHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXLexicalHandler*, UInt32),
    release : Proc(ISAXLexicalHandler*, UInt32),
    startDTD : Proc(ISAXLexicalHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    endDTD : Proc(ISAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    startEntity : Proc(ISAXLexicalHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    endEntity : Proc(ISAXLexicalHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    startCDATA : Proc(ISAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    endCDATA : Proc(ISAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    comment : Proc(ISAXLexicalHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7f85d5f5-47a8-4497-bda5-84ba04819ea6")]
  record ISAXLexicalHandler, lpVtbl : ISAXLexicalHandlerVtbl* do
    GUID = LibC::GUID.new(0x7f85d5f5_u32, 0x47a8_u16, 0x4497_u16, StaticArray[0xbd_u8, 0xa5_u8, 0x84_u8, 0xba_u8, 0x4_u8, 0x81_u8, 0x9e_u8, 0xa6_u8])
    def query_interface(this : ISAXLexicalHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXLexicalHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXLexicalHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def startDTD(this : ISAXLexicalHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchPublicId : Win32cr::Foundation::PWSTR, cchPublicId : Int32, pwchSystemId : Win32cr::Foundation::PWSTR, cchSystemId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startDTD.call(this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId)
    end
    def endDTD(this : ISAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endDTD.call(this)
    end
    def startEntity(this : ISAXLexicalHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startEntity.call(this, pwchName, cchName)
    end
    def endEntity(this : ISAXLexicalHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endEntity.call(this, pwchName, cchName)
    end
    def startCDATA(this : ISAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startCDATA.call(this)
    end
    def endCDATA(this : ISAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endCDATA.call(this)
    end
    def comment(this : ISAXLexicalHandler*, pwchChars : Win32cr::Foundation::PWSTR, cchChars : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comment.call(this, pwchChars, cchChars)
    end

  end

  @[Extern]
  record ISAXDeclHandlerVtbl,
    query_interface : Proc(ISAXDeclHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXDeclHandler*, UInt32),
    release : Proc(ISAXDeclHandler*, UInt32),
    elementDecl : Proc(ISAXDeclHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    attributeDecl : Proc(ISAXDeclHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    internalEntityDecl : Proc(ISAXDeclHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    externalEntityDecl : Proc(ISAXDeclHandler*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("862629ac-771a-47b2-8337-4e6843c1be90")]
  record ISAXDeclHandler, lpVtbl : ISAXDeclHandlerVtbl* do
    GUID = LibC::GUID.new(0x862629ac_u32, 0x771a_u16, 0x47b2_u16, StaticArray[0x83_u8, 0x37_u8, 0x4e_u8, 0x68_u8, 0x43_u8, 0xc1_u8, 0xbe_u8, 0x90_u8])
    def query_interface(this : ISAXDeclHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXDeclHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXDeclHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def elementDecl(this : ISAXDeclHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchModel : Win32cr::Foundation::PWSTR, cchModel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.elementDecl.call(this, pwchName, cchName, pwchModel, cchModel)
    end
    def attributeDecl(this : ISAXDeclHandler*, pwchElementName : Win32cr::Foundation::PWSTR, cchElementName : Int32, pwchAttributeName : Win32cr::Foundation::PWSTR, cchAttributeName : Int32, pwchType : Win32cr::Foundation::PWSTR, cchType : Int32, pwchValueDefault : Win32cr::Foundation::PWSTR, cchValueDefault : Int32, pwchValue : Win32cr::Foundation::PWSTR, cchValue : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attributeDecl.call(this, pwchElementName, cchElementName, pwchAttributeName, cchAttributeName, pwchType, cchType, pwchValueDefault, cchValueDefault, pwchValue, cchValue)
    end
    def internalEntityDecl(this : ISAXDeclHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchValue : Win32cr::Foundation::PWSTR, cchValue : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.internalEntityDecl.call(this, pwchName, cchName, pwchValue, cchValue)
    end
    def externalEntityDecl(this : ISAXDeclHandler*, pwchName : Win32cr::Foundation::PWSTR, cchName : Int32, pwchPublicId : Win32cr::Foundation::PWSTR, cchPublicId : Int32, pwchSystemId : Win32cr::Foundation::PWSTR, cchSystemId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.externalEntityDecl.call(this, pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId)
    end

  end

  @[Extern]
  record ISAXAttributesVtbl,
    query_interface : Proc(ISAXAttributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISAXAttributes*, UInt32),
    release : Proc(ISAXAttributes*, UInt32),
    getLength : Proc(ISAXAttributes*, Int32*, Win32cr::Foundation::HRESULT),
    getURI : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getLocalName : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getQName : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getName : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, UInt16**, Int32*, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getIndexFromName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    getIndexFromQName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    getType : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getTypeFromName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getTypeFromQName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getValue : Proc(ISAXAttributes*, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getValueFromName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::PWSTR, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    getValueFromQName : Proc(ISAXAttributes*, Win32cr::Foundation::PWSTR, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f078abe1-45d2-4832-91ea-4466ce2f25c9")]
  record ISAXAttributes, lpVtbl : ISAXAttributesVtbl* do
    GUID = LibC::GUID.new(0xf078abe1_u32, 0x45d2_u16, 0x4832_u16, StaticArray[0x91_u8, 0xea_u8, 0x44_u8, 0x66_u8, 0xce_u8, 0x2f_u8, 0x25_u8, 0xc9_u8])
    def query_interface(this : ISAXAttributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISAXAttributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISAXAttributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getLength(this : ISAXAttributes*, pnLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLength.call(this, pnLength)
    end
    def getURI(this : ISAXAttributes*, nIndex : Int32, ppwchUri : UInt16**, pcchUri : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getURI.call(this, nIndex, ppwchUri, pcchUri)
    end
    def getLocalName(this : ISAXAttributes*, nIndex : Int32, ppwchLocalName : UInt16**, pcchLocalName : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLocalName.call(this, nIndex, ppwchLocalName, pcchLocalName)
    end
    def getQName(this : ISAXAttributes*, nIndex : Int32, ppwchQName : UInt16**, pcchQName : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getQName.call(this, nIndex, ppwchQName, pcchQName)
    end
    def getName(this : ISAXAttributes*, nIndex : Int32, ppwchUri : UInt16**, pcchUri : Int32*, ppwchLocalName : UInt16**, pcchLocalName : Int32*, ppwchQName : UInt16**, pcchQName : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getName.call(this, nIndex, ppwchUri, pcchUri, ppwchLocalName, pcchLocalName, ppwchQName, pcchQName)
    end
    def getIndexFromName(this : ISAXAttributes*, pwchUri : Win32cr::Foundation::PWSTR, cchUri : Int32, pwchLocalName : Win32cr::Foundation::PWSTR, cchLocalName : Int32, pnIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getIndexFromName.call(this, pwchUri, cchUri, pwchLocalName, cchLocalName, pnIndex)
    end
    def getIndexFromQName(this : ISAXAttributes*, pwchQName : Win32cr::Foundation::PWSTR, cchQName : Int32, pnIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getIndexFromQName.call(this, pwchQName, cchQName, pnIndex)
    end
    def getType(this : ISAXAttributes*, nIndex : Int32, ppwchType : UInt16**, pcchType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getType.call(this, nIndex, ppwchType, pcchType)
    end
    def getTypeFromName(this : ISAXAttributes*, pwchUri : Win32cr::Foundation::PWSTR, cchUri : Int32, pwchLocalName : Win32cr::Foundation::PWSTR, cchLocalName : Int32, ppwchType : UInt16**, pcchType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getTypeFromName.call(this, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchType, pcchType)
    end
    def getTypeFromQName(this : ISAXAttributes*, pwchQName : Win32cr::Foundation::PWSTR, cchQName : Int32, ppwchType : UInt16**, pcchType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getTypeFromQName.call(this, pwchQName, cchQName, ppwchType, pcchType)
    end
    def getValue(this : ISAXAttributes*, nIndex : Int32, ppwchValue : UInt16**, pcchValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValue.call(this, nIndex, ppwchValue, pcchValue)
    end
    def getValueFromName(this : ISAXAttributes*, pwchUri : Win32cr::Foundation::PWSTR, cchUri : Int32, pwchLocalName : Win32cr::Foundation::PWSTR, cchLocalName : Int32, ppwchValue : UInt16**, pcchValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValueFromName.call(this, pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchValue, pcchValue)
    end
    def getValueFromQName(this : ISAXAttributes*, pwchQName : Win32cr::Foundation::PWSTR, cchQName : Int32, ppwchValue : UInt16**, pcchValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValueFromQName.call(this, pwchQName, cchQName, ppwchValue, pcchValue)
    end

  end

  @[Extern]
  record IVBSAXXMLReaderVtbl,
    query_interface : Proc(IVBSAXXMLReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXXMLReader*, UInt32),
    release : Proc(IVBSAXXMLReader*, UInt32),
    get_type_info_count : Proc(IVBSAXXMLReader*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXXMLReader*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXXMLReader*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXXMLReader*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    getFeature : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    putFeature : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    getProperty : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putProperty : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_entityResolver : Proc(IVBSAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putref_entityResolver : Proc(IVBSAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    get_contentHandler : Proc(IVBSAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putref_contentHandler : Proc(IVBSAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    get_dtdHandler : Proc(IVBSAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putref_dtdHandler : Proc(IVBSAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    get_errorHandler : Proc(IVBSAXXMLReader*, Void**, Win32cr::Foundation::HRESULT),
    putref_errorHandler : Proc(IVBSAXXMLReader*, Void*, Win32cr::Foundation::HRESULT),
    get_baseURL : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_baseURL : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_secureBaseURL : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_secureBaseURL : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    parse : Proc(IVBSAXXMLReader*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    parseURL : Proc(IVBSAXXMLReader*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8c033caa-6cd6-4f73-b728-4531af74945f")]
  record IVBSAXXMLReader, lpVtbl : IVBSAXXMLReaderVtbl* do
    GUID = LibC::GUID.new(0x8c033caa_u32, 0x6cd6_u16, 0x4f73_u16, StaticArray[0xb7_u8, 0x28_u8, 0x45_u8, 0x31_u8, 0xaf_u8, 0x74_u8, 0x94_u8, 0x5f_u8])
    def query_interface(this : IVBSAXXMLReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXXMLReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXXMLReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXXMLReader*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXXMLReader*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXXMLReader*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXXMLReader*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def getFeature(this : IVBSAXXMLReader*, strName : Win32cr::Foundation::BSTR, fValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getFeature.call(this, strName, fValue)
    end
    def putFeature(this : IVBSAXXMLReader*, strName : Win32cr::Foundation::BSTR, fValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putFeature.call(this, strName, fValue)
    end
    def getProperty(this : IVBSAXXMLReader*, strName : Win32cr::Foundation::BSTR, varValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, strName, varValue)
    end
    def putProperty(this : IVBSAXXMLReader*, strName : Win32cr::Foundation::BSTR, varValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putProperty.call(this, strName, varValue)
    end
    def get_entityResolver(this : IVBSAXXMLReader*, oResolver : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entityResolver.call(this, oResolver)
    end
    def putref_entityResolver(this : IVBSAXXMLReader*, oResolver : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_entityResolver.call(this, oResolver)
    end
    def get_contentHandler(this : IVBSAXXMLReader*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contentHandler.call(this, oHandler)
    end
    def putref_contentHandler(this : IVBSAXXMLReader*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_contentHandler.call(this, oHandler)
    end
    def get_dtdHandler(this : IVBSAXXMLReader*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dtdHandler.call(this, oHandler)
    end
    def putref_dtdHandler(this : IVBSAXXMLReader*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_dtdHandler.call(this, oHandler)
    end
    def get_errorHandler(this : IVBSAXXMLReader*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorHandler.call(this, oHandler)
    end
    def putref_errorHandler(this : IVBSAXXMLReader*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_errorHandler.call(this, oHandler)
    end
    def get_baseURL(this : IVBSAXXMLReader*, strBaseURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseURL.call(this, strBaseURL)
    end
    def put_baseURL(this : IVBSAXXMLReader*, strBaseURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_baseURL.call(this, strBaseURL)
    end
    def get_secureBaseURL(this : IVBSAXXMLReader*, strSecureBaseURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_secureBaseURL.call(this, strSecureBaseURL)
    end
    def put_secureBaseURL(this : IVBSAXXMLReader*, strSecureBaseURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_secureBaseURL.call(this, strSecureBaseURL)
    end
    def parse(this : IVBSAXXMLReader*, varInput : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse.call(this, varInput)
    end
    def parseURL(this : IVBSAXXMLReader*, strURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parseURL.call(this, strURL)
    end

  end

  @[Extern]
  record IVBSAXXMLFilterVtbl,
    query_interface : Proc(IVBSAXXMLFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXXMLFilter*, UInt32),
    release : Proc(IVBSAXXMLFilter*, UInt32),
    get_type_info_count : Proc(IVBSAXXMLFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXXMLFilter*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXXMLFilter*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXXMLFilter*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_parent : Proc(IVBSAXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putref_parent : Proc(IVBSAXXMLFilter*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1299eb1b-5b88-433e-82de-82ca75ad4e04")]
  record IVBSAXXMLFilter, lpVtbl : IVBSAXXMLFilterVtbl* do
    GUID = LibC::GUID.new(0x1299eb1b_u32, 0x5b88_u16, 0x433e_u16, StaticArray[0x82_u8, 0xde_u8, 0x82_u8, 0xca_u8, 0x75_u8, 0xad_u8, 0x4e_u8, 0x4_u8])
    def query_interface(this : IVBSAXXMLFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXXMLFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXXMLFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXXMLFilter*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXXMLFilter*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXXMLFilter*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXXMLFilter*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_parent(this : IVBSAXXMLFilter*, oReader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parent.call(this, oReader)
    end
    def putref_parent(this : IVBSAXXMLFilter*, oReader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_parent.call(this, oReader)
    end

  end

  @[Extern]
  record IVBSAXLocatorVtbl,
    query_interface : Proc(IVBSAXLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXLocator*, UInt32),
    release : Proc(IVBSAXLocator*, UInt32),
    get_type_info_count : Proc(IVBSAXLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_columnNumber : Proc(IVBSAXLocator*, Int32*, Win32cr::Foundation::HRESULT),
    get_lineNumber : Proc(IVBSAXLocator*, Int32*, Win32cr::Foundation::HRESULT),
    get_publicId : Proc(IVBSAXLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_systemId : Proc(IVBSAXLocator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("796e7ac5-5aa2-4eff-acad-3faaf01a3288")]
  record IVBSAXLocator, lpVtbl : IVBSAXLocatorVtbl* do
    GUID = LibC::GUID.new(0x796e7ac5_u32, 0x5aa2_u16, 0x4eff_u16, StaticArray[0xac_u8, 0xad_u8, 0x3f_u8, 0xaa_u8, 0xf0_u8, 0x1a_u8, 0x32_u8, 0x88_u8])
    def query_interface(this : IVBSAXLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_columnNumber(this : IVBSAXLocator*, nColumn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_columnNumber.call(this, nColumn)
    end
    def get_lineNumber(this : IVBSAXLocator*, nLine : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lineNumber.call(this, nLine)
    end
    def get_publicId(this : IVBSAXLocator*, strPublicId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_publicId.call(this, strPublicId)
    end
    def get_systemId(this : IVBSAXLocator*, strSystemId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_systemId.call(this, strSystemId)
    end

  end

  @[Extern]
  record IVBSAXEntityResolverVtbl,
    query_interface : Proc(IVBSAXEntityResolver*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXEntityResolver*, UInt32),
    release : Proc(IVBSAXEntityResolver*, UInt32),
    get_type_info_count : Proc(IVBSAXEntityResolver*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXEntityResolver*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXEntityResolver*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXEntityResolver*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    resolveEntity : Proc(IVBSAXEntityResolver*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c05d096-f45b-4aca-ad1a-aa0bc25518dc")]
  record IVBSAXEntityResolver, lpVtbl : IVBSAXEntityResolverVtbl* do
    GUID = LibC::GUID.new(0xc05d096_u32, 0xf45b_u16, 0x4aca_u16, StaticArray[0xad_u8, 0x1a_u8, 0xaa_u8, 0xb_u8, 0xc2_u8, 0x55_u8, 0x18_u8, 0xdc_u8])
    def query_interface(this : IVBSAXEntityResolver*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXEntityResolver*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXEntityResolver*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXEntityResolver*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXEntityResolver*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXEntityResolver*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXEntityResolver*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def resolveEntity(this : IVBSAXEntityResolver*, strPublicId : Win32cr::Foundation::BSTR*, strSystemId : Win32cr::Foundation::BSTR*, varInput : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resolveEntity.call(this, strPublicId, strSystemId, varInput)
    end

  end

  @[Extern]
  record IVBSAXContentHandlerVtbl,
    query_interface : Proc(IVBSAXContentHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXContentHandler*, UInt32),
    release : Proc(IVBSAXContentHandler*, UInt32),
    get_type_info_count : Proc(IVBSAXContentHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXContentHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXContentHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXContentHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    putref_documentLocator : Proc(IVBSAXContentHandler*, Void*, Win32cr::Foundation::HRESULT),
    startDocument : Proc(IVBSAXContentHandler*, Win32cr::Foundation::HRESULT),
    endDocument : Proc(IVBSAXContentHandler*, Win32cr::Foundation::HRESULT),
    startPrefixMapping : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    endPrefixMapping : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    startElement : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Void*, Win32cr::Foundation::HRESULT),
    endElement : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    characters : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    ignorableWhitespace : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    processingInstruction : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    skippedEntity : Proc(IVBSAXContentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2ed7290a-4dd5-4b46-bb26-4e4155e77faa")]
  record IVBSAXContentHandler, lpVtbl : IVBSAXContentHandlerVtbl* do
    GUID = LibC::GUID.new(0x2ed7290a_u32, 0x4dd5_u16, 0x4b46_u16, StaticArray[0xbb_u8, 0x26_u8, 0x4e_u8, 0x41_u8, 0x55_u8, 0xe7_u8, 0x7f_u8, 0xaa_u8])
    def query_interface(this : IVBSAXContentHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXContentHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXContentHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXContentHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXContentHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXContentHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXContentHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def putref_documentLocator(this : IVBSAXContentHandler*, oLocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_documentLocator.call(this, oLocator)
    end
    def startDocument(this : IVBSAXContentHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startDocument.call(this)
    end
    def endDocument(this : IVBSAXContentHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endDocument.call(this)
    end
    def startPrefixMapping(this : IVBSAXContentHandler*, strPrefix : Win32cr::Foundation::BSTR*, strURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startPrefixMapping.call(this, strPrefix, strURI)
    end
    def endPrefixMapping(this : IVBSAXContentHandler*, strPrefix : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endPrefixMapping.call(this, strPrefix)
    end
    def startElement(this : IVBSAXContentHandler*, strNamespaceURI : Win32cr::Foundation::BSTR*, strLocalName : Win32cr::Foundation::BSTR*, strQName : Win32cr::Foundation::BSTR*, oAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startElement.call(this, strNamespaceURI, strLocalName, strQName, oAttributes)
    end
    def endElement(this : IVBSAXContentHandler*, strNamespaceURI : Win32cr::Foundation::BSTR*, strLocalName : Win32cr::Foundation::BSTR*, strQName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endElement.call(this, strNamespaceURI, strLocalName, strQName)
    end
    def characters(this : IVBSAXContentHandler*, strChars : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.characters.call(this, strChars)
    end
    def ignorableWhitespace(this : IVBSAXContentHandler*, strChars : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignorableWhitespace.call(this, strChars)
    end
    def processingInstruction(this : IVBSAXContentHandler*, strTarget : Win32cr::Foundation::BSTR*, strData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.processingInstruction.call(this, strTarget, strData)
    end
    def skippedEntity(this : IVBSAXContentHandler*, strName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skippedEntity.call(this, strName)
    end

  end

  @[Extern]
  record IVBSAXDTDHandlerVtbl,
    query_interface : Proc(IVBSAXDTDHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXDTDHandler*, UInt32),
    release : Proc(IVBSAXDTDHandler*, UInt32),
    get_type_info_count : Proc(IVBSAXDTDHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXDTDHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXDTDHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXDTDHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    notationDecl : Proc(IVBSAXDTDHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    unparsedEntityDecl : Proc(IVBSAXDTDHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("24fb3297-302d-4620-ba39-3a732d850558")]
  record IVBSAXDTDHandler, lpVtbl : IVBSAXDTDHandlerVtbl* do
    GUID = LibC::GUID.new(0x24fb3297_u32, 0x302d_u16, 0x4620_u16, StaticArray[0xba_u8, 0x39_u8, 0x3a_u8, 0x73_u8, 0x2d_u8, 0x85_u8, 0x5_u8, 0x58_u8])
    def query_interface(this : IVBSAXDTDHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXDTDHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXDTDHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXDTDHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXDTDHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXDTDHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXDTDHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def notationDecl(this : IVBSAXDTDHandler*, strName : Win32cr::Foundation::BSTR*, strPublicId : Win32cr::Foundation::BSTR*, strSystemId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notationDecl.call(this, strName, strPublicId, strSystemId)
    end
    def unparsedEntityDecl(this : IVBSAXDTDHandler*, strName : Win32cr::Foundation::BSTR*, strPublicId : Win32cr::Foundation::BSTR*, strSystemId : Win32cr::Foundation::BSTR*, strNotationName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unparsedEntityDecl.call(this, strName, strPublicId, strSystemId, strNotationName)
    end

  end

  @[Extern]
  record IVBSAXErrorHandlerVtbl,
    query_interface : Proc(IVBSAXErrorHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXErrorHandler*, UInt32),
    release : Proc(IVBSAXErrorHandler*, UInt32),
    get_type_info_count : Proc(IVBSAXErrorHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXErrorHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXErrorHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXErrorHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    error : Proc(IVBSAXErrorHandler*, Void*, Win32cr::Foundation::BSTR*, Int32, Win32cr::Foundation::HRESULT),
    fatalError : Proc(IVBSAXErrorHandler*, Void*, Win32cr::Foundation::BSTR*, Int32, Win32cr::Foundation::HRESULT),
    ignorableWarning : Proc(IVBSAXErrorHandler*, Void*, Win32cr::Foundation::BSTR*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d963d3fe-173c-4862-9095-b92f66995f52")]
  record IVBSAXErrorHandler, lpVtbl : IVBSAXErrorHandlerVtbl* do
    GUID = LibC::GUID.new(0xd963d3fe_u32, 0x173c_u16, 0x4862_u16, StaticArray[0x90_u8, 0x95_u8, 0xb9_u8, 0x2f_u8, 0x66_u8, 0x99_u8, 0x5f_u8, 0x52_u8])
    def query_interface(this : IVBSAXErrorHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXErrorHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXErrorHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXErrorHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXErrorHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXErrorHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXErrorHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def error(this : IVBSAXErrorHandler*, oLocator : Void*, strErrorMessage : Win32cr::Foundation::BSTR*, nErrorCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this, oLocator, strErrorMessage, nErrorCode)
    end
    def fatalError(this : IVBSAXErrorHandler*, oLocator : Void*, strErrorMessage : Win32cr::Foundation::BSTR*, nErrorCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fatalError.call(this, oLocator, strErrorMessage, nErrorCode)
    end
    def ignorableWarning(this : IVBSAXErrorHandler*, oLocator : Void*, strErrorMessage : Win32cr::Foundation::BSTR*, nErrorCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignorableWarning.call(this, oLocator, strErrorMessage, nErrorCode)
    end

  end

  @[Extern]
  record IVBSAXLexicalHandlerVtbl,
    query_interface : Proc(IVBSAXLexicalHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXLexicalHandler*, UInt32),
    release : Proc(IVBSAXLexicalHandler*, UInt32),
    get_type_info_count : Proc(IVBSAXLexicalHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXLexicalHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXLexicalHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXLexicalHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    startDTD : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    endDTD : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    startEntity : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    endEntity : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    startCDATA : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    endCDATA : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::HRESULT),
    comment : Proc(IVBSAXLexicalHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("032aac35-8c0e-4d9d-979f-e3b702935576")]
  record IVBSAXLexicalHandler, lpVtbl : IVBSAXLexicalHandlerVtbl* do
    GUID = LibC::GUID.new(0x32aac35_u32, 0x8c0e_u16, 0x4d9d_u16, StaticArray[0x97_u8, 0x9f_u8, 0xe3_u8, 0xb7_u8, 0x2_u8, 0x93_u8, 0x55_u8, 0x76_u8])
    def query_interface(this : IVBSAXLexicalHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXLexicalHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXLexicalHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXLexicalHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXLexicalHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXLexicalHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXLexicalHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def startDTD(this : IVBSAXLexicalHandler*, strName : Win32cr::Foundation::BSTR*, strPublicId : Win32cr::Foundation::BSTR*, strSystemId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startDTD.call(this, strName, strPublicId, strSystemId)
    end
    def endDTD(this : IVBSAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endDTD.call(this)
    end
    def startEntity(this : IVBSAXLexicalHandler*, strName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startEntity.call(this, strName)
    end
    def endEntity(this : IVBSAXLexicalHandler*, strName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endEntity.call(this, strName)
    end
    def startCDATA(this : IVBSAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startCDATA.call(this)
    end
    def endCDATA(this : IVBSAXLexicalHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.endCDATA.call(this)
    end
    def comment(this : IVBSAXLexicalHandler*, strChars : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comment.call(this, strChars)
    end

  end

  @[Extern]
  record IVBSAXDeclHandlerVtbl,
    query_interface : Proc(IVBSAXDeclHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXDeclHandler*, UInt32),
    release : Proc(IVBSAXDeclHandler*, UInt32),
    get_type_info_count : Proc(IVBSAXDeclHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXDeclHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXDeclHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXDeclHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    elementDecl : Proc(IVBSAXDeclHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    attributeDecl : Proc(IVBSAXDeclHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    internalEntityDecl : Proc(IVBSAXDeclHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    externalEntityDecl : Proc(IVBSAXDeclHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e8917260-7579-4be1-b5dd-7afbfa6f077b")]
  record IVBSAXDeclHandler, lpVtbl : IVBSAXDeclHandlerVtbl* do
    GUID = LibC::GUID.new(0xe8917260_u32, 0x7579_u16, 0x4be1_u16, StaticArray[0xb5_u8, 0xdd_u8, 0x7a_u8, 0xfb_u8, 0xfa_u8, 0x6f_u8, 0x7_u8, 0x7b_u8])
    def query_interface(this : IVBSAXDeclHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXDeclHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXDeclHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXDeclHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXDeclHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXDeclHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXDeclHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def elementDecl(this : IVBSAXDeclHandler*, strName : Win32cr::Foundation::BSTR*, strModel : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.elementDecl.call(this, strName, strModel)
    end
    def attributeDecl(this : IVBSAXDeclHandler*, strElementName : Win32cr::Foundation::BSTR*, strAttributeName : Win32cr::Foundation::BSTR*, strType : Win32cr::Foundation::BSTR*, strValueDefault : Win32cr::Foundation::BSTR*, strValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attributeDecl.call(this, strElementName, strAttributeName, strType, strValueDefault, strValue)
    end
    def internalEntityDecl(this : IVBSAXDeclHandler*, strName : Win32cr::Foundation::BSTR*, strValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.internalEntityDecl.call(this, strName, strValue)
    end
    def externalEntityDecl(this : IVBSAXDeclHandler*, strName : Win32cr::Foundation::BSTR*, strPublicId : Win32cr::Foundation::BSTR*, strSystemId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.externalEntityDecl.call(this, strName, strPublicId, strSystemId)
    end

  end

  @[Extern]
  record IVBSAXAttributesVtbl,
    query_interface : Proc(IVBSAXAttributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBSAXAttributes*, UInt32),
    release : Proc(IVBSAXAttributes*, UInt32),
    get_type_info_count : Proc(IVBSAXAttributes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBSAXAttributes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBSAXAttributes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBSAXAttributes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IVBSAXAttributes*, Int32*, Win32cr::Foundation::HRESULT),
    getURI : Proc(IVBSAXAttributes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getLocalName : Proc(IVBSAXAttributes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getQName : Proc(IVBSAXAttributes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getIndexFromName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    getIndexFromQName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    getType : Proc(IVBSAXAttributes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getTypeFromName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getTypeFromQName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getValue : Proc(IVBSAXAttributes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getValueFromName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getValueFromQName : Proc(IVBSAXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("10dc0586-132b-4cac-8bb3-db00ac8b7ee0")]
  record IVBSAXAttributes, lpVtbl : IVBSAXAttributesVtbl* do
    GUID = LibC::GUID.new(0x10dc0586_u32, 0x132b_u16, 0x4cac_u16, StaticArray[0x8b_u8, 0xb3_u8, 0xdb_u8, 0x0_u8, 0xac_u8, 0x8b_u8, 0x7e_u8, 0xe0_u8])
    def query_interface(this : IVBSAXAttributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBSAXAttributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBSAXAttributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBSAXAttributes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBSAXAttributes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBSAXAttributes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBSAXAttributes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_length(this : IVBSAXAttributes*, nLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, nLength)
    end
    def getURI(this : IVBSAXAttributes*, nIndex : Int32, strURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getURI.call(this, nIndex, strURI)
    end
    def getLocalName(this : IVBSAXAttributes*, nIndex : Int32, strLocalName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLocalName.call(this, nIndex, strLocalName)
    end
    def getQName(this : IVBSAXAttributes*, nIndex : Int32, strQName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getQName.call(this, nIndex, strQName)
    end
    def getIndexFromName(this : IVBSAXAttributes*, strURI : Win32cr::Foundation::BSTR, strLocalName : Win32cr::Foundation::BSTR, nIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getIndexFromName.call(this, strURI, strLocalName, nIndex)
    end
    def getIndexFromQName(this : IVBSAXAttributes*, strQName : Win32cr::Foundation::BSTR, nIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getIndexFromQName.call(this, strQName, nIndex)
    end
    def getType(this : IVBSAXAttributes*, nIndex : Int32, strType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getType.call(this, nIndex, strType)
    end
    def getTypeFromName(this : IVBSAXAttributes*, strURI : Win32cr::Foundation::BSTR, strLocalName : Win32cr::Foundation::BSTR, strType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getTypeFromName.call(this, strURI, strLocalName, strType)
    end
    def getTypeFromQName(this : IVBSAXAttributes*, strQName : Win32cr::Foundation::BSTR, strType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getTypeFromQName.call(this, strQName, strType)
    end
    def getValue(this : IVBSAXAttributes*, nIndex : Int32, strValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValue.call(this, nIndex, strValue)
    end
    def getValueFromName(this : IVBSAXAttributes*, strURI : Win32cr::Foundation::BSTR, strLocalName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValueFromName.call(this, strURI, strLocalName, strValue)
    end
    def getValueFromQName(this : IVBSAXAttributes*, strQName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getValueFromQName.call(this, strQName, strValue)
    end

  end

  @[Extern]
  record IMXWriterVtbl,
    query_interface : Proc(IMXWriter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXWriter*, UInt32),
    release : Proc(IMXWriter*, UInt32),
    get_type_info_count : Proc(IMXWriter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXWriter*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXWriter*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXWriter*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_output : Proc(IMXWriter*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_output : Proc(IMXWriter*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_encoding : Proc(IMXWriter*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_encoding : Proc(IMXWriter*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_byteOrderMark : Proc(IMXWriter*, Int16, Win32cr::Foundation::HRESULT),
    get_byteOrderMark : Proc(IMXWriter*, Int16*, Win32cr::Foundation::HRESULT),
    put_indent : Proc(IMXWriter*, Int16, Win32cr::Foundation::HRESULT),
    get_indent : Proc(IMXWriter*, Int16*, Win32cr::Foundation::HRESULT),
    put_standalone : Proc(IMXWriter*, Int16, Win32cr::Foundation::HRESULT),
    get_standalone : Proc(IMXWriter*, Int16*, Win32cr::Foundation::HRESULT),
    put_omitXMLDeclaration : Proc(IMXWriter*, Int16, Win32cr::Foundation::HRESULT),
    get_omitXMLDeclaration : Proc(IMXWriter*, Int16*, Win32cr::Foundation::HRESULT),
    put_version : Proc(IMXWriter*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_version : Proc(IMXWriter*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_disableOutputEscaping : Proc(IMXWriter*, Int16, Win32cr::Foundation::HRESULT),
    get_disableOutputEscaping : Proc(IMXWriter*, Int16*, Win32cr::Foundation::HRESULT),
    flush : Proc(IMXWriter*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d")]
  record IMXWriter, lpVtbl : IMXWriterVtbl* do
    GUID = LibC::GUID.new(0x4d7ff4ba_u32, 0x1565_u16, 0x4ea8_u16, StaticArray[0x94_u8, 0xe1_u8, 0x6e_u8, 0x72_u8, 0x4a_u8, 0x46_u8, 0xf9_u8, 0x8d_u8])
    def query_interface(this : IMXWriter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXWriter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXWriter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXWriter*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXWriter*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXWriter*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXWriter*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_output(this : IMXWriter*, varDestination : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_output.call(this, varDestination)
    end
    def get_output(this : IMXWriter*, varDestination : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output.call(this, varDestination)
    end
    def put_encoding(this : IMXWriter*, strEncoding : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_encoding.call(this, strEncoding)
    end
    def get_encoding(this : IMXWriter*, strEncoding : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encoding.call(this, strEncoding)
    end
    def put_byteOrderMark(this : IMXWriter*, fWriteByteOrderMark : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_byteOrderMark.call(this, fWriteByteOrderMark)
    end
    def get_byteOrderMark(this : IMXWriter*, fWriteByteOrderMark : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_byteOrderMark.call(this, fWriteByteOrderMark)
    end
    def put_indent(this : IMXWriter*, fIndentMode : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_indent.call(this, fIndentMode)
    end
    def get_indent(this : IMXWriter*, fIndentMode : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indent.call(this, fIndentMode)
    end
    def put_standalone(this : IMXWriter*, fValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_standalone.call(this, fValue)
    end
    def get_standalone(this : IMXWriter*, fValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_standalone.call(this, fValue)
    end
    def put_omitXMLDeclaration(this : IMXWriter*, fValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_omitXMLDeclaration.call(this, fValue)
    end
    def get_omitXMLDeclaration(this : IMXWriter*, fValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_omitXMLDeclaration.call(this, fValue)
    end
    def put_version(this : IMXWriter*, strVersion : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_version.call(this, strVersion)
    end
    def get_version(this : IMXWriter*, strVersion : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, strVersion)
    end
    def put_disableOutputEscaping(this : IMXWriter*, fValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_disableOutputEscaping.call(this, fValue)
    end
    def get_disableOutputEscaping(this : IMXWriter*, fValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disableOutputEscaping.call(this, fValue)
    end
    def flush(this : IMXWriter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end

  end

  @[Extern]
  record IMXAttributesVtbl,
    query_interface : Proc(IMXAttributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXAttributes*, UInt32),
    release : Proc(IMXAttributes*, UInt32),
    get_type_info_count : Proc(IMXAttributes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXAttributes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXAttributes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXAttributes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    addAttribute : Proc(IMXAttributes*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addAttributeFromIndex : Proc(IMXAttributes*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IMXAttributes*, Win32cr::Foundation::HRESULT),
    removeAttribute : Proc(IMXAttributes*, Int32, Win32cr::Foundation::HRESULT),
    setAttribute : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setAttributes : Proc(IMXAttributes*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    setLocalName : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setQName : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setType : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setURI : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setValue : Proc(IMXAttributes*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262")]
  record IMXAttributes, lpVtbl : IMXAttributesVtbl* do
    GUID = LibC::GUID.new(0xf10d27cc_u32, 0x3ec0_u16, 0x415c_u16, StaticArray[0x8e_u8, 0xd8_u8, 0x77_u8, 0xab_u8, 0x1c_u8, 0x5e_u8, 0x72_u8, 0x62_u8])
    def query_interface(this : IMXAttributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXAttributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXAttributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXAttributes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXAttributes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXAttributes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXAttributes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def addAttribute(this : IMXAttributes*, strURI : Win32cr::Foundation::BSTR, strLocalName : Win32cr::Foundation::BSTR, strQName : Win32cr::Foundation::BSTR, strType : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addAttribute.call(this, strURI, strLocalName, strQName, strType, strValue)
    end
    def addAttributeFromIndex(this : IMXAttributes*, varAtts : Win32cr::System::Com::VARIANT, nIndex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addAttributeFromIndex.call(this, varAtts, nIndex)
    end
    def clear(this : IMXAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def removeAttribute(this : IMXAttributes*, nIndex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeAttribute.call(this, nIndex)
    end
    def setAttribute(this : IMXAttributes*, nIndex : Int32, strURI : Win32cr::Foundation::BSTR, strLocalName : Win32cr::Foundation::BSTR, strQName : Win32cr::Foundation::BSTR, strType : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttribute.call(this, nIndex, strURI, strLocalName, strQName, strType, strValue)
    end
    def setAttributes(this : IMXAttributes*, varAtts : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setAttributes.call(this, varAtts)
    end
    def setLocalName(this : IMXAttributes*, nIndex : Int32, strLocalName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setLocalName.call(this, nIndex, strLocalName)
    end
    def setQName(this : IMXAttributes*, nIndex : Int32, strQName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setQName.call(this, nIndex, strQName)
    end
    def setType(this : IMXAttributes*, nIndex : Int32, strType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setType.call(this, nIndex, strType)
    end
    def setURI(this : IMXAttributes*, nIndex : Int32, strURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setURI.call(this, nIndex, strURI)
    end
    def setValue(this : IMXAttributes*, nIndex : Int32, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setValue.call(this, nIndex, strValue)
    end

  end

  @[Extern]
  record IMXReaderControlVtbl,
    query_interface : Proc(IMXReaderControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXReaderControl*, UInt32),
    release : Proc(IMXReaderControl*, UInt32),
    get_type_info_count : Proc(IMXReaderControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXReaderControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXReaderControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXReaderControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    abort : Proc(IMXReaderControl*, Win32cr::Foundation::HRESULT),
    resume : Proc(IMXReaderControl*, Win32cr::Foundation::HRESULT),
    suspend : Proc(IMXReaderControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("808f4e35-8d5a-4fbe-8466-33a41279ed30")]
  record IMXReaderControl, lpVtbl : IMXReaderControlVtbl* do
    GUID = LibC::GUID.new(0x808f4e35_u32, 0x8d5a_u16, 0x4fbe_u16, StaticArray[0x84_u8, 0x66_u8, 0x33_u8, 0xa4_u8, 0x12_u8, 0x79_u8, 0xed_u8, 0x30_u8])
    def query_interface(this : IMXReaderControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXReaderControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXReaderControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXReaderControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXReaderControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXReaderControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXReaderControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def abort(this : IMXReaderControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def resume(this : IMXReaderControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def suspend(this : IMXReaderControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suspend.call(this)
    end

  end

  @[Extern]
  record IMXSchemaDeclHandlerVtbl,
    query_interface : Proc(IMXSchemaDeclHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXSchemaDeclHandler*, UInt32),
    release : Proc(IMXSchemaDeclHandler*, UInt32),
    get_type_info_count : Proc(IMXSchemaDeclHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXSchemaDeclHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXSchemaDeclHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXSchemaDeclHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    schemaElementDecl : Proc(IMXSchemaDeclHandler*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa4bb38c-faf9-4cca-9302-d1dd0fe520db")]
  record IMXSchemaDeclHandler, lpVtbl : IMXSchemaDeclHandlerVtbl* do
    GUID = LibC::GUID.new(0xfa4bb38c_u32, 0xfaf9_u16, 0x4cca_u16, StaticArray[0x93_u8, 0x2_u8, 0xd1_u8, 0xdd_u8, 0xf_u8, 0xe5_u8, 0x20_u8, 0xdb_u8])
    def query_interface(this : IMXSchemaDeclHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXSchemaDeclHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXSchemaDeclHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXSchemaDeclHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXSchemaDeclHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXSchemaDeclHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXSchemaDeclHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def schemaElementDecl(this : IMXSchemaDeclHandler*, oSchemaElement : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.schemaElementDecl.call(this, oSchemaElement)
    end

  end

  @[Extern]
  record IMXNamespacePrefixesVtbl,
    query_interface : Proc(IMXNamespacePrefixes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXNamespacePrefixes*, UInt32),
    release : Proc(IMXNamespacePrefixes*, UInt32),
    get_type_info_count : Proc(IMXNamespacePrefixes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXNamespacePrefixes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXNamespacePrefixes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXNamespacePrefixes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IMXNamespacePrefixes*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IMXNamespacePrefixes*, Int32*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IMXNamespacePrefixes*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c90352f4-643c-4fbc-bb23-e996eb2d51fd")]
  record IMXNamespacePrefixes, lpVtbl : IMXNamespacePrefixesVtbl* do
    GUID = LibC::GUID.new(0xc90352f4_u32, 0x643c_u16, 0x4fbc_u16, StaticArray[0xbb_u8, 0x23_u8, 0xe9_u8, 0x96_u8, 0xeb_u8, 0x2d_u8, 0x51_u8, 0xfd_u8])
    def query_interface(this : IMXNamespacePrefixes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXNamespacePrefixes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXNamespacePrefixes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXNamespacePrefixes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXNamespacePrefixes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXNamespacePrefixes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXNamespacePrefixes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : IMXNamespacePrefixes*, index : Int32, prefix : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, prefix)
    end
    def get_length(this : IMXNamespacePrefixes*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get__newEnum(this : IMXNamespacePrefixes*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end

  end

  @[Extern]
  record IVBMXNamespaceManagerVtbl,
    query_interface : Proc(IVBMXNamespaceManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVBMXNamespaceManager*, UInt32),
    release : Proc(IVBMXNamespaceManager*, UInt32),
    get_type_info_count : Proc(IVBMXNamespaceManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVBMXNamespaceManager*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVBMXNamespaceManager*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVBMXNamespaceManager*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_allowOverride : Proc(IVBMXNamespaceManager*, Int16, Win32cr::Foundation::HRESULT),
    get_allowOverride : Proc(IVBMXNamespaceManager*, Int16*, Win32cr::Foundation::HRESULT),
    reset : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    pushContext : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    pushNodeContext : Proc(IVBMXNamespaceManager*, Void*, Int16, Win32cr::Foundation::HRESULT),
    popContext : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    declarePrefix : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getDeclaredPrefixes : Proc(IVBMXNamespaceManager*, Void**, Win32cr::Foundation::HRESULT),
    getPrefixes : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getURI : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    getURIFromNode : Proc(IVBMXNamespaceManager*, Win32cr::Foundation::BSTR, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c90352f5-643c-4fbc-bb23-e996eb2d51fd")]
  record IVBMXNamespaceManager, lpVtbl : IVBMXNamespaceManagerVtbl* do
    GUID = LibC::GUID.new(0xc90352f5_u32, 0x643c_u16, 0x4fbc_u16, StaticArray[0xbb_u8, 0x23_u8, 0xe9_u8, 0x96_u8, 0xeb_u8, 0x2d_u8, 0x51_u8, 0xfd_u8])
    def query_interface(this : IVBMXNamespaceManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVBMXNamespaceManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVBMXNamespaceManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVBMXNamespaceManager*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVBMXNamespaceManager*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVBMXNamespaceManager*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVBMXNamespaceManager*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_allowOverride(this : IVBMXNamespaceManager*, fOverride : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_allowOverride.call(this, fOverride)
    end
    def get_allowOverride(this : IVBMXNamespaceManager*, fOverride : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allowOverride.call(this, fOverride)
    end
    def reset(this : IVBMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def pushContext(this : IVBMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pushContext.call(this)
    end
    def pushNodeContext(this : IVBMXNamespaceManager*, contextNode : Void*, fDeep : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pushNodeContext.call(this, contextNode, fDeep)
    end
    def popContext(this : IVBMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.popContext.call(this)
    end
    def declarePrefix(this : IVBMXNamespaceManager*, prefix : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.declarePrefix.call(this, prefix, namespaceURI)
    end
    def getDeclaredPrefixes(this : IVBMXNamespaceManager*, prefixes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDeclaredPrefixes.call(this, prefixes)
    end
    def getPrefixes(this : IVBMXNamespaceManager*, namespaceURI : Win32cr::Foundation::BSTR, prefixes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getPrefixes.call(this, namespaceURI, prefixes)
    end
    def getURI(this : IVBMXNamespaceManager*, prefix : Win32cr::Foundation::BSTR, uri : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getURI.call(this, prefix, uri)
    end
    def getURIFromNode(this : IVBMXNamespaceManager*, strPrefix : Win32cr::Foundation::BSTR, contextNode : Void*, uri : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getURIFromNode.call(this, strPrefix, contextNode, uri)
    end

  end

  @[Extern]
  record IMXNamespaceManagerVtbl,
    query_interface : Proc(IMXNamespaceManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXNamespaceManager*, UInt32),
    release : Proc(IMXNamespaceManager*, UInt32),
    putAllowOverride : Proc(IMXNamespaceManager*, Int16, Win32cr::Foundation::HRESULT),
    getAllowOverride : Proc(IMXNamespaceManager*, Int16*, Win32cr::Foundation::HRESULT),
    reset : Proc(IMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    pushContext : Proc(IMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    pushNodeContext : Proc(IMXNamespaceManager*, Void*, Int16, Win32cr::Foundation::HRESULT),
    popContext : Proc(IMXNamespaceManager*, Win32cr::Foundation::HRESULT),
    declarePrefix : Proc(IMXNamespaceManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    getDeclaredPrefix : Proc(IMXNamespaceManager*, Int32, UInt16*, Int32*, Win32cr::Foundation::HRESULT),
    getPrefix : Proc(IMXNamespaceManager*, Win32cr::Foundation::PWSTR, Int32, UInt16*, Int32*, Win32cr::Foundation::HRESULT),
    getURI : Proc(IMXNamespaceManager*, Win32cr::Foundation::PWSTR, Void*, UInt16*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c90352f6-643c-4fbc-bb23-e996eb2d51fd")]
  record IMXNamespaceManager, lpVtbl : IMXNamespaceManagerVtbl* do
    GUID = LibC::GUID.new(0xc90352f6_u32, 0x643c_u16, 0x4fbc_u16, StaticArray[0xbb_u8, 0x23_u8, 0xe9_u8, 0x96_u8, 0xeb_u8, 0x2d_u8, 0x51_u8, 0xfd_u8])
    def query_interface(this : IMXNamespaceManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXNamespaceManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXNamespaceManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def putAllowOverride(this : IMXNamespaceManager*, fOverride : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putAllowOverride.call(this, fOverride)
    end
    def getAllowOverride(this : IMXNamespaceManager*, fOverride : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAllowOverride.call(this, fOverride)
    end
    def reset(this : IMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def pushContext(this : IMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pushContext.call(this)
    end
    def pushNodeContext(this : IMXNamespaceManager*, contextNode : Void*, fDeep : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pushNodeContext.call(this, contextNode, fDeep)
    end
    def popContext(this : IMXNamespaceManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.popContext.call(this)
    end
    def declarePrefix(this : IMXNamespaceManager*, prefix : Win32cr::Foundation::PWSTR, namespaceURI : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.declarePrefix.call(this, prefix, namespaceURI)
    end
    def getDeclaredPrefix(this : IMXNamespaceManager*, nIndex : Int32, pwchPrefix : UInt16*, pcchPrefix : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDeclaredPrefix.call(this, nIndex, pwchPrefix, pcchPrefix)
    end
    def getPrefix(this : IMXNamespaceManager*, pwszNamespaceURI : Win32cr::Foundation::PWSTR, nIndex : Int32, pwchPrefix : UInt16*, pcchPrefix : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getPrefix.call(this, pwszNamespaceURI, nIndex, pwchPrefix, pcchPrefix)
    end
    def getURI(this : IMXNamespaceManager*, pwchPrefix : Win32cr::Foundation::PWSTR, pContextNode : Void*, pwchUri : UInt16*, pcchUri : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getURI.call(this, pwchPrefix, pContextNode, pwchUri, pcchUri)
    end

  end

  @[Extern]
  record IMXXMLFilterVtbl,
    query_interface : Proc(IMXXMLFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMXXMLFilter*, UInt32),
    release : Proc(IMXXMLFilter*, UInt32),
    get_type_info_count : Proc(IMXXMLFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMXXMLFilter*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMXXMLFilter*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMXXMLFilter*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    getFeature : Proc(IMXXMLFilter*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    putFeature : Proc(IMXXMLFilter*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    getProperty : Proc(IMXXMLFilter*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    putProperty : Proc(IMXXMLFilter*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_entityResolver : Proc(IMXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putref_entityResolver : Proc(IMXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_contentHandler : Proc(IMXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putref_contentHandler : Proc(IMXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_dtdHandler : Proc(IMXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putref_dtdHandler : Proc(IMXXMLFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_errorHandler : Proc(IMXXMLFilter*, Void**, Win32cr::Foundation::HRESULT),
    putref_errorHandler : Proc(IMXXMLFilter*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c90352f7-643c-4fbc-bb23-e996eb2d51fd")]
  record IMXXMLFilter, lpVtbl : IMXXMLFilterVtbl* do
    GUID = LibC::GUID.new(0xc90352f7_u32, 0x643c_u16, 0x4fbc_u16, StaticArray[0xbb_u8, 0x23_u8, 0xe9_u8, 0x96_u8, 0xeb_u8, 0x2d_u8, 0x51_u8, 0xfd_u8])
    def query_interface(this : IMXXMLFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMXXMLFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMXXMLFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMXXMLFilter*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMXXMLFilter*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMXXMLFilter*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMXXMLFilter*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def getFeature(this : IMXXMLFilter*, strName : Win32cr::Foundation::BSTR, fValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getFeature.call(this, strName, fValue)
    end
    def putFeature(this : IMXXMLFilter*, strName : Win32cr::Foundation::BSTR, fValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putFeature.call(this, strName, fValue)
    end
    def getProperty(this : IMXXMLFilter*, strName : Win32cr::Foundation::BSTR, varValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProperty.call(this, strName, varValue)
    end
    def putProperty(this : IMXXMLFilter*, strName : Win32cr::Foundation::BSTR, varValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putProperty.call(this, strName, varValue)
    end
    def get_entityResolver(this : IMXXMLFilter*, oResolver : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entityResolver.call(this, oResolver)
    end
    def putref_entityResolver(this : IMXXMLFilter*, oResolver : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_entityResolver.call(this, oResolver)
    end
    def get_contentHandler(this : IMXXMLFilter*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contentHandler.call(this, oHandler)
    end
    def putref_contentHandler(this : IMXXMLFilter*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_contentHandler.call(this, oHandler)
    end
    def get_dtdHandler(this : IMXXMLFilter*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dtdHandler.call(this, oHandler)
    end
    def putref_dtdHandler(this : IMXXMLFilter*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_dtdHandler.call(this, oHandler)
    end
    def get_errorHandler(this : IMXXMLFilter*, oHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorHandler.call(this, oHandler)
    end
    def putref_errorHandler(this : IMXXMLFilter*, oHandler : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.putref_errorHandler.call(this, oHandler)
    end

  end

  @[Extern]
  record IXMLDOMSchemaCollection2Vtbl,
    query_interface : Proc(IXMLDOMSchemaCollection2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLDOMSchemaCollection2*, UInt32),
    release : Proc(IXMLDOMSchemaCollection2*, UInt32),
    get_type_info_count : Proc(IXMLDOMSchemaCollection2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXMLDOMSchemaCollection2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXMLDOMSchemaCollection2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXMLDOMSchemaCollection2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    add : Proc(IXMLDOMSchemaCollection2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get : Proc(IXMLDOMSchemaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(IXMLDOMSchemaCollection2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IXMLDOMSchemaCollection2*, Int32*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(IXMLDOMSchemaCollection2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    addCollection : Proc(IXMLDOMSchemaCollection2*, Void*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(IXMLDOMSchemaCollection2*, Void**, Win32cr::Foundation::HRESULT),
    validate : Proc(IXMLDOMSchemaCollection2*, Win32cr::Foundation::HRESULT),
    put_validateOnLoad : Proc(IXMLDOMSchemaCollection2*, Int16, Win32cr::Foundation::HRESULT),
    get_validateOnLoad : Proc(IXMLDOMSchemaCollection2*, Int16*, Win32cr::Foundation::HRESULT),
    getSchema : Proc(IXMLDOMSchemaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getDeclaration : Proc(IXMLDOMSchemaCollection2*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b0-dd1b-4664-9a50-c2f40f4bd79a")]
  record IXMLDOMSchemaCollection2, lpVtbl : IXMLDOMSchemaCollection2Vtbl* do
    GUID = LibC::GUID.new(0x50ea08b0_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : IXMLDOMSchemaCollection2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLDOMSchemaCollection2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLDOMSchemaCollection2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXMLDOMSchemaCollection2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXMLDOMSchemaCollection2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXMLDOMSchemaCollection2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXMLDOMSchemaCollection2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def add(this : IXMLDOMSchemaCollection2*, namespaceURI : Win32cr::Foundation::BSTR, var : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, namespaceURI, var)
    end
    def get(this : IXMLDOMSchemaCollection2*, namespaceURI : Win32cr::Foundation::BSTR, schemaNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, namespaceURI, schemaNode)
    end
    def remove(this : IXMLDOMSchemaCollection2*, namespaceURI : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, namespaceURI)
    end
    def get_length(this : IXMLDOMSchemaCollection2*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get_namespaceURI(this : IXMLDOMSchemaCollection2*, index : Int32, length : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, index, length)
    end
    def addCollection(this : IXMLDOMSchemaCollection2*, otherCollection : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCollection.call(this, otherCollection)
    end
    def get__newEnum(this : IXMLDOMSchemaCollection2*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppUnk)
    end
    def validate(this : IXMLDOMSchemaCollection2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this)
    end
    def put_validateOnLoad(this : IXMLDOMSchemaCollection2*, validateOnLoad : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_validateOnLoad.call(this, validateOnLoad)
    end
    def get_validateOnLoad(this : IXMLDOMSchemaCollection2*, validateOnLoad : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_validateOnLoad.call(this, validateOnLoad)
    end
    def getSchema(this : IXMLDOMSchemaCollection2*, namespaceURI : Win32cr::Foundation::BSTR, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSchema.call(this, namespaceURI, schema)
    end
    def getDeclaration(this : IXMLDOMSchemaCollection2*, node : Void*, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDeclaration.call(this, node, item)
    end

  end

  @[Extern]
  record ISchemaStringCollectionVtbl,
    query_interface : Proc(ISchemaStringCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaStringCollection*, UInt32),
    release : Proc(ISchemaStringCollection*, UInt32),
    get_type_info_count : Proc(ISchemaStringCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaStringCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaStringCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaStringCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(ISchemaStringCollection*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_length : Proc(ISchemaStringCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(ISchemaStringCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b1-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaStringCollection, lpVtbl : ISchemaStringCollectionVtbl* do
    GUID = LibC::GUID.new(0x50ea08b1_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaStringCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaStringCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaStringCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaStringCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaStringCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaStringCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaStringCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : ISchemaStringCollection*, index : Int32, bstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, bstr)
    end
    def get_length(this : ISchemaStringCollection*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get__newEnum(this : ISchemaStringCollection*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppunk)
    end

  end

  @[Extern]
  record ISchemaItemCollectionVtbl,
    query_interface : Proc(ISchemaItemCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaItemCollection*, UInt32),
    release : Proc(ISchemaItemCollection*, UInt32),
    get_type_info_count : Proc(ISchemaItemCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaItemCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaItemCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaItemCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(ISchemaItemCollection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    itemByName : Proc(ISchemaItemCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    itemByQName : Proc(ISchemaItemCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_length : Proc(ISchemaItemCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get__newEnum : Proc(ISchemaItemCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b2-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaItemCollection, lpVtbl : ISchemaItemCollectionVtbl* do
    GUID = LibC::GUID.new(0x50ea08b2_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaItemCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaItemCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaItemCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaItemCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaItemCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaItemCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaItemCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_item(this : ISchemaItemCollection*, index : Int32, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, index, item)
    end
    def itemByName(this : ISchemaItemCollection*, name : Win32cr::Foundation::BSTR, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.itemByName.call(this, name, item)
    end
    def itemByQName(this : ISchemaItemCollection*, name : Win32cr::Foundation::BSTR, namespaceURI : Win32cr::Foundation::BSTR, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.itemByQName.call(this, name, namespaceURI, item)
    end
    def get_length(this : ISchemaItemCollection*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get__newEnum(this : ISchemaItemCollection*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__newEnum.call(this, ppunk)
    end

  end

  @[Extern]
  record ISchemaItemVtbl,
    query_interface : Proc(ISchemaItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaItem*, UInt32),
    release : Proc(ISchemaItem*, UInt32),
    get_type_info_count : Proc(ISchemaItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaItem*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaItem*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaItem*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaItem*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b3-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaItem, lpVtbl : ISchemaItemVtbl* do
    GUID = LibC::GUID.new(0x50ea08b3_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaItem*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaItem*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaItem*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaItem*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaItem*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaItem*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaItem*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end

  end

  @[Extern]
  record ISchemaVtbl,
    query_interface : Proc(ISchema*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchema*, UInt32),
    release : Proc(ISchema*, UInt32),
    get_type_info_count : Proc(ISchema*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchema*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchema*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchema*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchema*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchema*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchema*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchema*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchema*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_targetNamespace : Proc(ISchema*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_version : Proc(ISchema*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_types : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_elements : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_attributeGroups : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_modelGroups : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_notations : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT),
    get_schemaLocations : Proc(ISchema*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b4-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchema, lpVtbl : ISchemaVtbl* do
    GUID = LibC::GUID.new(0x50ea08b4_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchema*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchema*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchema*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchema*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchema*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchema*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchema*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchema*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchema*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchema*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchema*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchema*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchema*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchema*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_targetNamespace(this : ISchema*, targetNamespace : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_targetNamespace.call(this, targetNamespace)
    end
    def get_version(this : ISchema*, version : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version.call(this, version)
    end
    def get_types(this : ISchema*, types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_types.call(this, types)
    end
    def get_elements(this : ISchema*, elements : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_elements.call(this, elements)
    end
    def get_attributes(this : ISchema*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributes)
    end
    def get_attributeGroups(this : ISchema*, attributeGroups : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeGroups.call(this, attributeGroups)
    end
    def get_modelGroups(this : ISchema*, modelGroups : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_modelGroups.call(this, modelGroups)
    end
    def get_notations(this : ISchema*, notations : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notations.call(this, notations)
    end
    def get_schemaLocations(this : ISchema*, schemaLocations : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schemaLocations.call(this, schemaLocations)
    end

  end

  @[Extern]
  record ISchemaParticleVtbl,
    query_interface : Proc(ISchemaParticle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaParticle*, UInt32),
    release : Proc(ISchemaParticle*, UInt32),
    get_type_info_count : Proc(ISchemaParticle*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaParticle*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaParticle*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaParticle*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaParticle*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaParticle*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaParticle*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaParticle*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaParticle*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaParticle*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaParticle*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_minOccurs : Proc(ISchemaParticle*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxOccurs : Proc(ISchemaParticle*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b5-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaParticle, lpVtbl : ISchemaParticleVtbl* do
    GUID = LibC::GUID.new(0x50ea08b5_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaParticle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaParticle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaParticle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaParticle*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaParticle*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaParticle*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaParticle*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaParticle*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaParticle*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaParticle*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaParticle*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaParticle*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaParticle*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaParticle*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_minOccurs(this : ISchemaParticle*, minOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minOccurs.call(this, minOccurs)
    end
    def get_maxOccurs(this : ISchemaParticle*, maxOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxOccurs.call(this, maxOccurs)
    end

  end

  @[Extern]
  record ISchemaAttributeVtbl,
    query_interface : Proc(ISchemaAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaAttribute*, UInt32),
    release : Proc(ISchemaAttribute*, UInt32),
    get_type_info_count : Proc(ISchemaAttribute*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaAttribute*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaAttribute*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaAttribute*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaAttribute*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaAttribute*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaAttribute*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ISchemaAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_scope : Proc(ISchemaAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_defaultValue : Proc(ISchemaAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fixedValue : Proc(ISchemaAttribute*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_use : Proc(ISchemaAttribute*, Win32cr::Data::Xml::MsXml::SCHEMAUSE*, Win32cr::Foundation::HRESULT),
    get_isReference : Proc(ISchemaAttribute*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b6-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaAttribute, lpVtbl : ISchemaAttributeVtbl* do
    GUID = LibC::GUID.new(0x50ea08b6_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaAttribute*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaAttribute*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaAttribute*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaAttribute*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaAttribute*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaAttribute*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaAttribute*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaAttribute*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaAttribute*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaAttribute*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaAttribute*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_type(this : ISchemaAttribute*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_scope(this : ISchemaAttribute*, scope : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, scope)
    end
    def get_defaultValue(this : ISchemaAttribute*, defaultValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_defaultValue.call(this, defaultValue)
    end
    def get_fixedValue(this : ISchemaAttribute*, fixedValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fixedValue.call(this, fixedValue)
    end
    def get_use(this : ISchemaAttribute*, use : Win32cr::Data::Xml::MsXml::SCHEMAUSE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_use.call(this, use)
    end
    def get_isReference(this : ISchemaAttribute*, reference : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isReference.call(this, reference)
    end

  end

  @[Extern]
  record ISchemaElementVtbl,
    query_interface : Proc(ISchemaElement*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaElement*, UInt32),
    release : Proc(ISchemaElement*, UInt32),
    get_type_info_count : Proc(ISchemaElement*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaElement*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaElement*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaElement*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaElement*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaElement*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_minOccurs : Proc(ISchemaElement*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxOccurs : Proc(ISchemaElement*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    get_scope : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    get_defaultValue : Proc(ISchemaElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fixedValue : Proc(ISchemaElement*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_isNillable : Proc(ISchemaElement*, Int16*, Win32cr::Foundation::HRESULT),
    get_identityConstraints : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    get_substitutionGroup : Proc(ISchemaElement*, Void**, Win32cr::Foundation::HRESULT),
    get_substitutionGroupExclusions : Proc(ISchemaElement*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    get_disallowedSubstitutions : Proc(ISchemaElement*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    get_isAbstract : Proc(ISchemaElement*, Int16*, Win32cr::Foundation::HRESULT),
    get_isReference : Proc(ISchemaElement*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b7-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaElement, lpVtbl : ISchemaElementVtbl* do
    GUID = LibC::GUID.new(0x50ea08b7_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaElement*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaElement*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaElement*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaElement*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaElement*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaElement*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaElement*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaElement*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaElement*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaElement*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaElement*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaElement*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaElement*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaElement*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_minOccurs(this : ISchemaElement*, minOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minOccurs.call(this, minOccurs)
    end
    def get_maxOccurs(this : ISchemaElement*, maxOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxOccurs.call(this, maxOccurs)
    end
    def get_type(this : ISchemaElement*, type__ : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, type__)
    end
    def get_scope(this : ISchemaElement*, scope : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scope.call(this, scope)
    end
    def get_defaultValue(this : ISchemaElement*, defaultValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_defaultValue.call(this, defaultValue)
    end
    def get_fixedValue(this : ISchemaElement*, fixedValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fixedValue.call(this, fixedValue)
    end
    def get_isNillable(this : ISchemaElement*, nillable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isNillable.call(this, nillable)
    end
    def get_identityConstraints(this : ISchemaElement*, constraints : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identityConstraints.call(this, constraints)
    end
    def get_substitutionGroup(this : ISchemaElement*, element : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_substitutionGroup.call(this, element)
    end
    def get_substitutionGroupExclusions(this : ISchemaElement*, exclusions : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_substitutionGroupExclusions.call(this, exclusions)
    end
    def get_disallowedSubstitutions(this : ISchemaElement*, disallowed : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disallowedSubstitutions.call(this, disallowed)
    end
    def get_isAbstract(this : ISchemaElement*, abstract__ : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAbstract.call(this, abstract__)
    end
    def get_isReference(this : ISchemaElement*, reference : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isReference.call(this, reference)
    end

  end

  @[Extern]
  record ISchemaTypeVtbl,
    query_interface : Proc(ISchemaType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaType*, UInt32),
    release : Proc(ISchemaType*, UInt32),
    get_type_info_count : Proc(ISchemaType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaType*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaType*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaType*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaType*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_baseTypes : Proc(ISchemaType*, Void**, Win32cr::Foundation::HRESULT),
    get_final : Proc(ISchemaType*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    get_variety : Proc(ISchemaType*, Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY*, Win32cr::Foundation::HRESULT),
    get_derivedBy : Proc(ISchemaType*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    isValid : Proc(ISchemaType*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_minExclusive : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_minInclusive : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_maxExclusive : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_maxInclusive : Proc(ISchemaType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_totalDigits : Proc(ISchemaType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_fractionDigits : Proc(ISchemaType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_length : Proc(ISchemaType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_minLength : Proc(ISchemaType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxLength : Proc(ISchemaType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_enumeration : Proc(ISchemaType*, Void**, Win32cr::Foundation::HRESULT),
    get_whitespace : Proc(ISchemaType*, Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE*, Win32cr::Foundation::HRESULT),
    get_patterns : Proc(ISchemaType*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b8-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaType, lpVtbl : ISchemaTypeVtbl* do
    GUID = LibC::GUID.new(0x50ea08b8_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaType*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaType*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaType*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaType*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaType*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaType*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaType*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_baseTypes(this : ISchemaType*, baseTypes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseTypes.call(this, baseTypes)
    end
    def get_final(this : ISchemaType*, final : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_final.call(this, final)
    end
    def get_variety(this : ISchemaType*, variety : Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_variety.call(this, variety)
    end
    def get_derivedBy(this : ISchemaType*, derivedBy : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_derivedBy.call(this, derivedBy)
    end
    def isValid(this : ISchemaType*, data : Win32cr::Foundation::BSTR, valid : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isValid.call(this, data, valid)
    end
    def get_minExclusive(this : ISchemaType*, minExclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minExclusive.call(this, minExclusive)
    end
    def get_minInclusive(this : ISchemaType*, minInclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minInclusive.call(this, minInclusive)
    end
    def get_maxExclusive(this : ISchemaType*, maxExclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxExclusive.call(this, maxExclusive)
    end
    def get_maxInclusive(this : ISchemaType*, maxInclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxInclusive.call(this, maxInclusive)
    end
    def get_totalDigits(this : ISchemaType*, totalDigits : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_totalDigits.call(this, totalDigits)
    end
    def get_fractionDigits(this : ISchemaType*, fractionDigits : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fractionDigits.call(this, fractionDigits)
    end
    def get_length(this : ISchemaType*, length : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get_minLength(this : ISchemaType*, minLength : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minLength.call(this, minLength)
    end
    def get_maxLength(this : ISchemaType*, maxLength : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxLength.call(this, maxLength)
    end
    def get_enumeration(this : ISchemaType*, enumeration : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enumeration.call(this, enumeration)
    end
    def get_whitespace(this : ISchemaType*, whitespace : Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_whitespace.call(this, whitespace)
    end
    def get_patterns(this : ISchemaType*, patterns : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_patterns.call(this, patterns)
    end

  end

  @[Extern]
  record ISchemaComplexTypeVtbl,
    query_interface : Proc(ISchemaComplexType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaComplexType*, UInt32),
    release : Proc(ISchemaComplexType*, UInt32),
    get_type_info_count : Proc(ISchemaComplexType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaComplexType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaComplexType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaComplexType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaComplexType*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_baseTypes : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_final : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    get_variety : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY*, Win32cr::Foundation::HRESULT),
    get_derivedBy : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT),
    isValid : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_minExclusive : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_minInclusive : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_maxExclusive : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_maxInclusive : Proc(ISchemaComplexType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_totalDigits : Proc(ISchemaComplexType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_fractionDigits : Proc(ISchemaComplexType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_length : Proc(ISchemaComplexType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_minLength : Proc(ISchemaComplexType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxLength : Proc(ISchemaComplexType*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_enumeration : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_whitespace : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE*, Win32cr::Foundation::HRESULT),
    get_patterns : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_isAbstract : Proc(ISchemaComplexType*, Int16*, Win32cr::Foundation::HRESULT),
    get_anyAttribute : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_contentType : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMACONTENTTYPE*, Win32cr::Foundation::HRESULT),
    get_contentModel : Proc(ISchemaComplexType*, Void**, Win32cr::Foundation::HRESULT),
    get_prohibitedSubstitutions : Proc(ISchemaComplexType*, Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08b9-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaComplexType, lpVtbl : ISchemaComplexTypeVtbl* do
    GUID = LibC::GUID.new(0x50ea08b9_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaComplexType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaComplexType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaComplexType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaComplexType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaComplexType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaComplexType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaComplexType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaComplexType*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaComplexType*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaComplexType*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaComplexType*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaComplexType*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaComplexType*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaComplexType*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_baseTypes(this : ISchemaComplexType*, baseTypes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseTypes.call(this, baseTypes)
    end
    def get_final(this : ISchemaComplexType*, final : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_final.call(this, final)
    end
    def get_variety(this : ISchemaComplexType*, variety : Win32cr::Data::Xml::MsXml::SCHEMATYPEVARIETY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_variety.call(this, variety)
    end
    def get_derivedBy(this : ISchemaComplexType*, derivedBy : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_derivedBy.call(this, derivedBy)
    end
    def isValid(this : ISchemaComplexType*, data : Win32cr::Foundation::BSTR, valid : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isValid.call(this, data, valid)
    end
    def get_minExclusive(this : ISchemaComplexType*, minExclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minExclusive.call(this, minExclusive)
    end
    def get_minInclusive(this : ISchemaComplexType*, minInclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minInclusive.call(this, minInclusive)
    end
    def get_maxExclusive(this : ISchemaComplexType*, maxExclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxExclusive.call(this, maxExclusive)
    end
    def get_maxInclusive(this : ISchemaComplexType*, maxInclusive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxInclusive.call(this, maxInclusive)
    end
    def get_totalDigits(this : ISchemaComplexType*, totalDigits : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_totalDigits.call(this, totalDigits)
    end
    def get_fractionDigits(this : ISchemaComplexType*, fractionDigits : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fractionDigits.call(this, fractionDigits)
    end
    def get_length(this : ISchemaComplexType*, length : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, length)
    end
    def get_minLength(this : ISchemaComplexType*, minLength : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minLength.call(this, minLength)
    end
    def get_maxLength(this : ISchemaComplexType*, maxLength : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxLength.call(this, maxLength)
    end
    def get_enumeration(this : ISchemaComplexType*, enumeration : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enumeration.call(this, enumeration)
    end
    def get_whitespace(this : ISchemaComplexType*, whitespace : Win32cr::Data::Xml::MsXml::SCHEMAWHITESPACE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_whitespace.call(this, whitespace)
    end
    def get_patterns(this : ISchemaComplexType*, patterns : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_patterns.call(this, patterns)
    end
    def get_isAbstract(this : ISchemaComplexType*, abstract__ : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAbstract.call(this, abstract__)
    end
    def get_anyAttribute(this : ISchemaComplexType*, anyAttribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_anyAttribute.call(this, anyAttribute)
    end
    def get_attributes(this : ISchemaComplexType*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributes)
    end
    def get_contentType(this : ISchemaComplexType*, contentType : Win32cr::Data::Xml::MsXml::SCHEMACONTENTTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contentType.call(this, contentType)
    end
    def get_contentModel(this : ISchemaComplexType*, contentModel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contentModel.call(this, contentModel)
    end
    def get_prohibitedSubstitutions(this : ISchemaComplexType*, prohibited : Win32cr::Data::Xml::MsXml::SCHEMADERIVATIONMETHOD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_prohibitedSubstitutions.call(this, prohibited)
    end

  end

  @[Extern]
  record ISchemaAttributeGroupVtbl,
    query_interface : Proc(ISchemaAttributeGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaAttributeGroup*, UInt32),
    release : Proc(ISchemaAttributeGroup*, UInt32),
    get_type_info_count : Proc(ISchemaAttributeGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaAttributeGroup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaAttributeGroup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaAttributeGroup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaAttributeGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaAttributeGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaAttributeGroup*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaAttributeGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaAttributeGroup*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaAttributeGroup*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaAttributeGroup*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_anyAttribute : Proc(ISchemaAttributeGroup*, Void**, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(ISchemaAttributeGroup*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08ba-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaAttributeGroup, lpVtbl : ISchemaAttributeGroupVtbl* do
    GUID = LibC::GUID.new(0x50ea08ba_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaAttributeGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaAttributeGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaAttributeGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaAttributeGroup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaAttributeGroup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaAttributeGroup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaAttributeGroup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaAttributeGroup*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaAttributeGroup*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaAttributeGroup*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaAttributeGroup*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaAttributeGroup*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaAttributeGroup*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaAttributeGroup*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_anyAttribute(this : ISchemaAttributeGroup*, anyAttribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_anyAttribute.call(this, anyAttribute)
    end
    def get_attributes(this : ISchemaAttributeGroup*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, attributes)
    end

  end

  @[Extern]
  record ISchemaModelGroupVtbl,
    query_interface : Proc(ISchemaModelGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaModelGroup*, UInt32),
    release : Proc(ISchemaModelGroup*, UInt32),
    get_type_info_count : Proc(ISchemaModelGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaModelGroup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaModelGroup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaModelGroup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaModelGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaModelGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaModelGroup*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaModelGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaModelGroup*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaModelGroup*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaModelGroup*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_minOccurs : Proc(ISchemaModelGroup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxOccurs : Proc(ISchemaModelGroup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_particles : Proc(ISchemaModelGroup*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08bb-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaModelGroup, lpVtbl : ISchemaModelGroupVtbl* do
    GUID = LibC::GUID.new(0x50ea08bb_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaModelGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaModelGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaModelGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaModelGroup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaModelGroup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaModelGroup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaModelGroup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaModelGroup*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaModelGroup*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaModelGroup*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaModelGroup*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaModelGroup*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaModelGroup*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaModelGroup*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_minOccurs(this : ISchemaModelGroup*, minOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minOccurs.call(this, minOccurs)
    end
    def get_maxOccurs(this : ISchemaModelGroup*, maxOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxOccurs.call(this, maxOccurs)
    end
    def get_particles(this : ISchemaModelGroup*, particles : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_particles.call(this, particles)
    end

  end

  @[Extern]
  record ISchemaAnyVtbl,
    query_interface : Proc(ISchemaAny*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaAny*, UInt32),
    release : Proc(ISchemaAny*, UInt32),
    get_type_info_count : Proc(ISchemaAny*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaAny*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaAny*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaAny*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaAny*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaAny*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaAny*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaAny*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaAny*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaAny*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaAny*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_minOccurs : Proc(ISchemaAny*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_maxOccurs : Proc(ISchemaAny*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_namespaces : Proc(ISchemaAny*, Void**, Win32cr::Foundation::HRESULT),
    get_processContents : Proc(ISchemaAny*, Win32cr::Data::Xml::MsXml::SCHEMAPROCESSCONTENTS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08bc-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaAny, lpVtbl : ISchemaAnyVtbl* do
    GUID = LibC::GUID.new(0x50ea08bc_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaAny*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaAny*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaAny*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaAny*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaAny*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaAny*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaAny*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaAny*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaAny*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaAny*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaAny*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaAny*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaAny*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaAny*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_minOccurs(this : ISchemaAny*, minOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minOccurs.call(this, minOccurs)
    end
    def get_maxOccurs(this : ISchemaAny*, maxOccurs : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxOccurs.call(this, maxOccurs)
    end
    def get_namespaces(this : ISchemaAny*, namespaces : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaces.call(this, namespaces)
    end
    def get_processContents(this : ISchemaAny*, processContents : Win32cr::Data::Xml::MsXml::SCHEMAPROCESSCONTENTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processContents.call(this, processContents)
    end

  end

  @[Extern]
  record ISchemaIdentityConstraintVtbl,
    query_interface : Proc(ISchemaIdentityConstraint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaIdentityConstraint*, UInt32),
    release : Proc(ISchemaIdentityConstraint*, UInt32),
    get_type_info_count : Proc(ISchemaIdentityConstraint*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaIdentityConstraint*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaIdentityConstraint*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaIdentityConstraint*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaIdentityConstraint*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaIdentityConstraint*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaIdentityConstraint*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaIdentityConstraint*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaIdentityConstraint*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaIdentityConstraint*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaIdentityConstraint*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_selector : Proc(ISchemaIdentityConstraint*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_fields : Proc(ISchemaIdentityConstraint*, Void**, Win32cr::Foundation::HRESULT),
    get_referencedKey : Proc(ISchemaIdentityConstraint*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08bd-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaIdentityConstraint, lpVtbl : ISchemaIdentityConstraintVtbl* do
    GUID = LibC::GUID.new(0x50ea08bd_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaIdentityConstraint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaIdentityConstraint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaIdentityConstraint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaIdentityConstraint*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaIdentityConstraint*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaIdentityConstraint*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaIdentityConstraint*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaIdentityConstraint*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaIdentityConstraint*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaIdentityConstraint*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaIdentityConstraint*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaIdentityConstraint*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaIdentityConstraint*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaIdentityConstraint*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_selector(this : ISchemaIdentityConstraint*, selector : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selector.call(this, selector)
    end
    def get_fields(this : ISchemaIdentityConstraint*, fields : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fields.call(this, fields)
    end
    def get_referencedKey(this : ISchemaIdentityConstraint*, key : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_referencedKey.call(this, key)
    end

  end

  @[Extern]
  record ISchemaNotationVtbl,
    query_interface : Proc(ISchemaNotation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISchemaNotation*, UInt32),
    release : Proc(ISchemaNotation*, UInt32),
    get_type_info_count : Proc(ISchemaNotation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISchemaNotation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISchemaNotation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISchemaNotation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ISchemaNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_namespaceURI : Proc(ISchemaNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_schema : Proc(ISchemaNotation*, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(ISchemaNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_itemType : Proc(ISchemaNotation*, Win32cr::Data::Xml::MsXml::SOMITEMTYPE*, Win32cr::Foundation::HRESULT),
    get_unhandledAttributes : Proc(ISchemaNotation*, Void**, Win32cr::Foundation::HRESULT),
    writeAnnotation : Proc(ISchemaNotation*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_systemIdentifier : Proc(ISchemaNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_publicIdentifier : Proc(ISchemaNotation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ea08be-dd1b-4664-9a50-c2f40f4bd79a")]
  record ISchemaNotation, lpVtbl : ISchemaNotationVtbl* do
    GUID = LibC::GUID.new(0x50ea08be_u32, 0xdd1b_u16, 0x4664_u16, StaticArray[0x9a_u8, 0x50_u8, 0xc2_u8, 0xf4_u8, 0xf_u8, 0x4b_u8, 0xd7_u8, 0x9a_u8])
    def query_interface(this : ISchemaNotation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISchemaNotation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISchemaNotation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISchemaNotation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISchemaNotation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISchemaNotation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISchemaNotation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_name(this : ISchemaNotation*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_namespaceURI(this : ISchemaNotation*, namespaceURI : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespaceURI.call(this, namespaceURI)
    end
    def get_schema(this : ISchemaNotation*, schema : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema.call(this, schema)
    end
    def get_id(this : ISchemaNotation*, id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id)
    end
    def get_itemType(this : ISchemaNotation*, itemType : Win32cr::Data::Xml::MsXml::SOMITEMTYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_itemType.call(this, itemType)
    end
    def get_unhandledAttributes(this : ISchemaNotation*, attributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unhandledAttributes.call(this, attributes)
    end
    def writeAnnotation(this : ISchemaNotation*, annotationSink : Void*, isWritten : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.writeAnnotation.call(this, annotationSink, isWritten)
    end
    def get_systemIdentifier(this : ISchemaNotation*, uri : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_systemIdentifier.call(this, uri)
    end
    def get_publicIdentifier(this : ISchemaNotation*, uri : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_publicIdentifier.call(this, uri)
    end

  end

  @[Extern]
  record IXMLHTTPRequest2CallbackVtbl,
    query_interface : Proc(IXMLHTTPRequest2Callback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHTTPRequest2Callback*, UInt32),
    release : Proc(IXMLHTTPRequest2Callback*, UInt32),
    on_redirect : Proc(IXMLHTTPRequest2Callback*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_headers_available : Proc(IXMLHTTPRequest2Callback*, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_data_available : Proc(IXMLHTTPRequest2Callback*, Void*, Void*, Win32cr::Foundation::HRESULT),
    on_response_received : Proc(IXMLHTTPRequest2Callback*, Void*, Void*, Win32cr::Foundation::HRESULT),
    on_error : Proc(IXMLHTTPRequest2Callback*, Void*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a44a9299-e321-40de-8866-341b41669162")]
  record IXMLHTTPRequest2Callback, lpVtbl : IXMLHTTPRequest2CallbackVtbl* do
    GUID = LibC::GUID.new(0xa44a9299_u32, 0xe321_u16, 0x40de_u16, StaticArray[0x88_u8, 0x66_u8, 0x34_u8, 0x1b_u8, 0x41_u8, 0x66_u8, 0x91_u8, 0x62_u8])
    def query_interface(this : IXMLHTTPRequest2Callback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHTTPRequest2Callback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHTTPRequest2Callback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_redirect(this : IXMLHTTPRequest2Callback*, pXHR : Void*, pwszRedirectUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_redirect.call(this, pXHR, pwszRedirectUrl)
    end
    def on_headers_available(this : IXMLHTTPRequest2Callback*, pXHR : Void*, dwStatus : UInt32, pwszStatus : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_headers_available.call(this, pXHR, dwStatus, pwszStatus)
    end
    def on_data_available(this : IXMLHTTPRequest2Callback*, pXHR : Void*, pResponseStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_data_available.call(this, pXHR, pResponseStream)
    end
    def on_response_received(this : IXMLHTTPRequest2Callback*, pXHR : Void*, pResponseStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_response_received.call(this, pXHR, pResponseStream)
    end
    def on_error(this : IXMLHTTPRequest2Callback*, pXHR : Void*, hrError : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_error.call(this, pXHR, hrError)
    end

  end

  @[Extern]
  record IXMLHTTPRequest2Vtbl,
    query_interface : Proc(IXMLHTTPRequest2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHTTPRequest2*, UInt32),
    release : Proc(IXMLHTTPRequest2*, UInt32),
    open : Proc(IXMLHTTPRequest2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    send : Proc(IXMLHTTPRequest2*, Void*, UInt64, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLHTTPRequest2*, Win32cr::Foundation::HRESULT),
    set_cookie : Proc(IXMLHTTPRequest2*, Win32cr::Data::Xml::MsXml::XHR_COOKIE*, UInt32*, Win32cr::Foundation::HRESULT),
    set_custom_response_stream : Proc(IXMLHTTPRequest2*, Void*, Win32cr::Foundation::HRESULT),
    set_property : Proc(IXMLHTTPRequest2*, Win32cr::Data::Xml::MsXml::XHR_PROPERTY, UInt64, Win32cr::Foundation::HRESULT),
    set_request_header : Proc(IXMLHTTPRequest2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_all_response_headers : Proc(IXMLHTTPRequest2*, UInt16**, Win32cr::Foundation::HRESULT),
    get_cookie : Proc(IXMLHTTPRequest2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Data::Xml::MsXml::XHR_COOKIE**, Win32cr::Foundation::HRESULT),
    get_response_header : Proc(IXMLHTTPRequest2*, Win32cr::Foundation::PWSTR, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e5d37dc0-552a-4d52-9cc0-a14d546fbd04")]
  record IXMLHTTPRequest2, lpVtbl : IXMLHTTPRequest2Vtbl* do
    GUID = LibC::GUID.new(0xe5d37dc0_u32, 0x552a_u16, 0x4d52_u16, StaticArray[0x9c_u8, 0xc0_u8, 0xa1_u8, 0x4d_u8, 0x54_u8, 0x6f_u8, 0xbd_u8, 0x4_u8])
    def query_interface(this : IXMLHTTPRequest2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHTTPRequest2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHTTPRequest2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : IXMLHTTPRequest2*, pwszMethod : Win32cr::Foundation::PWSTR, pwszUrl : Win32cr::Foundation::PWSTR, pStatusCallback : Void*, pwszUserName : Win32cr::Foundation::PWSTR, pwszPassword : Win32cr::Foundation::PWSTR, pwszProxyUserName : Win32cr::Foundation::PWSTR, pwszProxyPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, pwszMethod, pwszUrl, pStatusCallback, pwszUserName, pwszPassword, pwszProxyUserName, pwszProxyPassword)
    end
    def send(this : IXMLHTTPRequest2*, pBody : Void*, cbBody : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, pBody, cbBody)
    end
    def abort(this : IXMLHTTPRequest2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def set_cookie(this : IXMLHTTPRequest2*, pCookie : Win32cr::Data::Xml::MsXml::XHR_COOKIE*, pdwCookieState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cookie.call(this, pCookie, pdwCookieState)
    end
    def set_custom_response_stream(this : IXMLHTTPRequest2*, pSequentialStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_custom_response_stream.call(this, pSequentialStream)
    end
    def set_property(this : IXMLHTTPRequest2*, eProperty : Win32cr::Data::Xml::MsXml::XHR_PROPERTY, ullValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, eProperty, ullValue)
    end
    def set_request_header(this : IXMLHTTPRequest2*, pwszHeader : Win32cr::Foundation::PWSTR, pwszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_request_header.call(this, pwszHeader, pwszValue)
    end
    def get_all_response_headers(this : IXMLHTTPRequest2*, ppwszHeaders : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_response_headers.call(this, ppwszHeaders)
    end
    def get_cookie(this : IXMLHTTPRequest2*, pwszUrl : Win32cr::Foundation::PWSTR, pwszName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pcCookies : UInt32*, ppCookies : Win32cr::Data::Xml::MsXml::XHR_COOKIE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pwszUrl, pwszName, dwFlags, pcCookies, ppCookies)
    end
    def get_response_header(this : IXMLHTTPRequest2*, pwszHeader : Win32cr::Foundation::PWSTR, ppwszValue : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_response_header.call(this, pwszHeader, ppwszValue)
    end

  end

  @[Extern]
  record IXMLHTTPRequest3CallbackVtbl,
    query_interface : Proc(IXMLHTTPRequest3Callback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHTTPRequest3Callback*, UInt32),
    release : Proc(IXMLHTTPRequest3Callback*, UInt32),
    on_redirect : Proc(IXMLHTTPRequest3Callback*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_headers_available : Proc(IXMLHTTPRequest3Callback*, Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_data_available : Proc(IXMLHTTPRequest3Callback*, Void*, Void*, Win32cr::Foundation::HRESULT),
    on_response_received : Proc(IXMLHTTPRequest3Callback*, Void*, Void*, Win32cr::Foundation::HRESULT),
    on_error : Proc(IXMLHTTPRequest3Callback*, Void*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    on_server_certificate_received : Proc(IXMLHTTPRequest3Callback*, Void*, UInt32, UInt32, Win32cr::Data::Xml::MsXml::XHR_CERT*, Win32cr::Foundation::HRESULT),
    on_client_certificate_requested : Proc(IXMLHTTPRequest3Callback*, Void*, UInt32, UInt16**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b9e57830-8c6c-4a6f-9c13-47772bb047bb")]
  record IXMLHTTPRequest3Callback, lpVtbl : IXMLHTTPRequest3CallbackVtbl* do
    GUID = LibC::GUID.new(0xb9e57830_u32, 0x8c6c_u16, 0x4a6f_u16, StaticArray[0x9c_u8, 0x13_u8, 0x47_u8, 0x77_u8, 0x2b_u8, 0xb0_u8, 0x47_u8, 0xbb_u8])
    def query_interface(this : IXMLHTTPRequest3Callback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHTTPRequest3Callback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHTTPRequest3Callback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_redirect(this : IXMLHTTPRequest3Callback*, pXHR : Void*, pwszRedirectUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_redirect.call(this, pXHR, pwszRedirectUrl)
    end
    def on_headers_available(this : IXMLHTTPRequest3Callback*, pXHR : Void*, dwStatus : UInt32, pwszStatus : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_headers_available.call(this, pXHR, dwStatus, pwszStatus)
    end
    def on_data_available(this : IXMLHTTPRequest3Callback*, pXHR : Void*, pResponseStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_data_available.call(this, pXHR, pResponseStream)
    end
    def on_response_received(this : IXMLHTTPRequest3Callback*, pXHR : Void*, pResponseStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_response_received.call(this, pXHR, pResponseStream)
    end
    def on_error(this : IXMLHTTPRequest3Callback*, pXHR : Void*, hrError : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_error.call(this, pXHR, hrError)
    end
    def on_server_certificate_received(this : IXMLHTTPRequest3Callback*, pXHR : Void*, dwCertificateErrors : UInt32, cServerCertificateChain : UInt32, rgServerCertificateChain : Win32cr::Data::Xml::MsXml::XHR_CERT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_server_certificate_received.call(this, pXHR, dwCertificateErrors, cServerCertificateChain, rgServerCertificateChain)
    end
    def on_client_certificate_requested(this : IXMLHTTPRequest3Callback*, pXHR : Void*, cIssuerList : UInt32, rgpwszIssuerList : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_client_certificate_requested.call(this, pXHR, cIssuerList, rgpwszIssuerList)
    end

  end

  @[Extern]
  record IXMLHTTPRequest3Vtbl,
    query_interface : Proc(IXMLHTTPRequest3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXMLHTTPRequest3*, UInt32),
    release : Proc(IXMLHTTPRequest3*, UInt32),
    open : Proc(IXMLHTTPRequest3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    send : Proc(IXMLHTTPRequest3*, Void*, UInt64, Win32cr::Foundation::HRESULT),
    abort : Proc(IXMLHTTPRequest3*, Win32cr::Foundation::HRESULT),
    set_cookie : Proc(IXMLHTTPRequest3*, Win32cr::Data::Xml::MsXml::XHR_COOKIE*, UInt32*, Win32cr::Foundation::HRESULT),
    set_custom_response_stream : Proc(IXMLHTTPRequest3*, Void*, Win32cr::Foundation::HRESULT),
    set_property : Proc(IXMLHTTPRequest3*, Win32cr::Data::Xml::MsXml::XHR_PROPERTY, UInt64, Win32cr::Foundation::HRESULT),
    set_request_header : Proc(IXMLHTTPRequest3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_all_response_headers : Proc(IXMLHTTPRequest3*, UInt16**, Win32cr::Foundation::HRESULT),
    get_cookie : Proc(IXMLHTTPRequest3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Data::Xml::MsXml::XHR_COOKIE**, Win32cr::Foundation::HRESULT),
    get_response_header : Proc(IXMLHTTPRequest3*, Win32cr::Foundation::PWSTR, UInt16**, Win32cr::Foundation::HRESULT),
    set_client_certificate : Proc(IXMLHTTPRequest3*, UInt32, UInt8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a1c9feee-0617-4f23-9d58-8961ea43567c")]
  record IXMLHTTPRequest3, lpVtbl : IXMLHTTPRequest3Vtbl* do
    GUID = LibC::GUID.new(0xa1c9feee_u32, 0x617_u16, 0x4f23_u16, StaticArray[0x9d_u8, 0x58_u8, 0x89_u8, 0x61_u8, 0xea_u8, 0x43_u8, 0x56_u8, 0x7c_u8])
    def query_interface(this : IXMLHTTPRequest3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXMLHTTPRequest3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXMLHTTPRequest3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : IXMLHTTPRequest3*, pwszMethod : Win32cr::Foundation::PWSTR, pwszUrl : Win32cr::Foundation::PWSTR, pStatusCallback : Void*, pwszUserName : Win32cr::Foundation::PWSTR, pwszPassword : Win32cr::Foundation::PWSTR, pwszProxyUserName : Win32cr::Foundation::PWSTR, pwszProxyPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, pwszMethod, pwszUrl, pStatusCallback, pwszUserName, pwszPassword, pwszProxyUserName, pwszProxyPassword)
    end
    def send(this : IXMLHTTPRequest3*, pBody : Void*, cbBody : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send.call(this, pBody, cbBody)
    end
    def abort(this : IXMLHTTPRequest3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def set_cookie(this : IXMLHTTPRequest3*, pCookie : Win32cr::Data::Xml::MsXml::XHR_COOKIE*, pdwCookieState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cookie.call(this, pCookie, pdwCookieState)
    end
    def set_custom_response_stream(this : IXMLHTTPRequest3*, pSequentialStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_custom_response_stream.call(this, pSequentialStream)
    end
    def set_property(this : IXMLHTTPRequest3*, eProperty : Win32cr::Data::Xml::MsXml::XHR_PROPERTY, ullValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, eProperty, ullValue)
    end
    def set_request_header(this : IXMLHTTPRequest3*, pwszHeader : Win32cr::Foundation::PWSTR, pwszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_request_header.call(this, pwszHeader, pwszValue)
    end
    def get_all_response_headers(this : IXMLHTTPRequest3*, ppwszHeaders : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_response_headers.call(this, ppwszHeaders)
    end
    def get_cookie(this : IXMLHTTPRequest3*, pwszUrl : Win32cr::Foundation::PWSTR, pwszName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pcCookies : UInt32*, ppCookies : Win32cr::Data::Xml::MsXml::XHR_COOKIE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cookie.call(this, pwszUrl, pwszName, dwFlags, pcCookies, ppCookies)
    end
    def get_response_header(this : IXMLHTTPRequest3*, pwszHeader : Win32cr::Foundation::PWSTR, ppwszValue : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_response_header.call(this, pwszHeader, ppwszValue)
    end
    def set_client_certificate(this : IXMLHTTPRequest3*, cbClientCertificateHash : UInt32, pbClientCertificateHash : UInt8*, pwszPin : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_certificate.call(this, cbClientCertificateHash, pbClientCertificateHash, pwszPin)
    end

  end

end