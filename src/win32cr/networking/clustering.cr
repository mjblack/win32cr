require "../foundation.cr"
require "../system/registry.cr"
require "../system/systemservices.cr"
require "../security.cr"
require "../system/com.cr"
require "../graphics/gdi.cr"
require "../ui/windowsandmessaging.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:clusapi.dll")]
@[Link(ldflags: "/DELAYLOAD:resutils.dll")]
@[Link(ldflags: "/DELAYLOAD:ntlanman.dll")]
{% else %}
@[Link("clusapi")]
@[Link("resutils")]
@[Link("ntlanman")]
{% end %}
lib LibWin32
  CLUSTER_VERSION_FLAG_MIXED_MODE = 1_u32
  CLUSTER_VERSION_UNKNOWN = 4294967295_u32
  NT4_MAJOR_VERSION = 1_u32
  NT4SP4_MAJOR_VERSION = 2_u32
  NT5_MAJOR_VERSION = 3_u32
  NT51_MAJOR_VERSION = 4_u32
  NT6_MAJOR_VERSION = 5_u32
  NT7_MAJOR_VERSION = 6_u32
  NT8_MAJOR_VERSION = 7_u32
  NT9_MAJOR_VERSION = 8_u32
  NT10_MAJOR_VERSION = 9_u32
  NT11_MAJOR_VERSION = 10_u32
  NT12_MAJOR_VERSION = 11_u32
  NT13_MAJOR_VERSION = 12_u32
  WS2016_TP4_UPGRADE_VERSION = 6_u32
  WS2016_TP5_UPGRADE_VERSION = 7_u32
  WS2016_RTM_UPGRADE_VERSION = 8_u32
  RS3_UPGRADE_VERSION = 1_u32
  RS4_UPGRADE_VERSION = 2_u32
  RS5_UPGRADE_VERSION = 3_u32
  NINETEEN_H1_UPGRADE_VERSION = 1_u32
  NINETEEN_H2_UPGRADE_VERSION = 2_u32
  MN_UPGRADE_VERSION = 3_u32
  FE_UPGRADE_VERSION = 4_u32
  CA_UPGRADE_VERSION = 1_u32
  HCI_UPGRADE_BIT = 32768_u32
  CLUSAPI_VERSION_SERVER2008 = 1536_u32
  CLUSAPI_VERSION_SERVER2008R2 = 1792_u32
  CLUSAPI_VERSION_WINDOWS8 = 1793_u32
  CLUSAPI_VERSION_WINDOWSBLUE = 1794_u32
  CLUSAPI_VERSION_WINTHRESHOLD = 1795_u32
  CLUSAPI_VERSION_RS3 = 2560_u32
  CLUSAPI_VERSION = 2560_u32
  CREATE_CLUSTER_VERSION = 1536_u32
  CREATE_CLUSTER_MAJOR_VERSION_MASK = 4294967040_u32
  MAX_CLUSTERNAME_LENGTH = 63_u32
  CLUSTER_INSTALLED = 1_u32
  CLUSTER_CONFIGURED = 2_u32
  CLUSTER_RUNNING = 16_u32
  CLUS_HYBRID_QUORUM = 1024_u32
  CLUS_NODE_MAJORITY_QUORUM = 0_u32
  CLUSCTL_RESOURCE_STATE_CHANGE_REASON_VERSION_1 = 1_u32
  CLUSREG_DATABASE_SYNC_WRITE_TO_ALL_NODES = 1_u32
  CLUSREG_DATABASE_ISOLATE_READ = 2_u32
  CLUSTER_ENUM_ITEM_VERSION_1 = 1_u32
  CLUSTER_ENUM_ITEM_VERSION = 1_u32
  CLUSTER_CREATE_GROUP_INFO_VERSION_1 = 1_u32
  CLUSTER_CREATE_GROUP_INFO_VERSION = 1_u32
  GROUPSET_READY_SETTING_DELAY = 1_u32
  GROUPSET_READY_SETTING_ONLINE = 2_u32
  GROUPSET_READY_SETTING_OS_HEARTBEAT = 3_u32
  GROUPSET_READY_SETTING_APPLICATION_READY = 4_u32
  CLUS_GRP_MOVE_ALLOWED = 0_u32
  CLUS_GRP_MOVE_LOCKED = 1_u32
  CLUSAPI_READ_ACCESS = 1_i32
  CLUSAPI_CHANGE_ACCESS = 2_i32
  CLUSAPI_NO_ACCESS = 4_i32
  CLUSTER_SET_ACCESS_TYPE_ALLOWED = 0_u32
  CLUSTER_SET_ACCESS_TYPE_DENIED = 1_u32
  CLUSTER_DELETE_ACCESS_CONTROL_ENTRY = 2_u32
  CLUSGROUPSET_STATUS_GROUPS_PENDING = 1_u64
  CLUSGROUPSET_STATUS_GROUPS_ONLINE = 2_u64
  CLUSGROUPSET_STATUS_OS_HEARTBEAT = 4_u64
  CLUSGROUPSET_STATUS_APPLICATION_READY = 8_u64
  CLUSTER_AVAILABILITY_SET_CONFIG_V1 = 1_u32
  CLUSTER_GROUP_ENUM_ITEM_VERSION_1 = 1_u32
  CLUSTER_GROUP_ENUM_ITEM_VERSION = 1_u32
  CLUSTER_RESOURCE_ENUM_ITEM_VERSION_1 = 1_u32
  CLUSTER_RESOURCE_ENUM_ITEM_VERSION = 1_u32
  CLUSAPI_NODE_PAUSE_REMAIN_ON_PAUSED_NODE_ON_MOVE_ERROR = 1_u32
  CLUSAPI_NODE_AVOID_PLACEMENT = 2_u32
  CLUSAPI_NODE_PAUSE_RETRY_DRAIN_ON_FAILURE = 4_u32
  CLUSGRP_STATUS_LOCKED_MODE = 1_u64
  CLUSGRP_STATUS_PREEMPTED = 2_u64
  CLUSGRP_STATUS_WAITING_IN_QUEUE_FOR_MOVE = 4_u64
  CLUSGRP_STATUS_PHYSICAL_RESOURCES_LACKING = 8_u64
  CLUSGRP_STATUS_WAITING_TO_START = 16_u64
  CLUSGRP_STATUS_EMBEDDED_FAILURE = 32_u64
  CLUSGRP_STATUS_OFFLINE_DUE_TO_ANTIAFFINITY_CONFLICT = 64_u64
  CLUSGRP_STATUS_NETWORK_FAILURE = 128_u64
  CLUSGRP_STATUS_UNMONITORED = 256_u64
  CLUSGRP_STATUS_OS_HEARTBEAT = 512_u64
  CLUSGRP_STATUS_APPLICATION_READY = 1024_u64
  CLUSGRP_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER = 2048_u64
  CLUSGRP_STATUS_WAITING_FOR_DEPENDENCIES = 4096_u64
  CLUSRES_STATUS_LOCKED_MODE = 1_u64
  CLUSRES_STATUS_EMBEDDED_FAILURE = 2_u64
  CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_CPU = 4_u64
  CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_MEMORY = 8_u64
  CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_GENERIC_RESOURCES = 16_u64
  CLUSRES_STATUS_NETWORK_FAILURE = 32_u64
  CLUSRES_STATUS_UNMONITORED = 64_u64
  CLUSRES_STATUS_OS_HEARTBEAT = 128_u64
  CLUSRES_STATUS_APPLICATION_READY = 256_u64
  CLUSRES_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER = 512_u64
  CLUSAPI_GROUP_ONLINE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUSAPI_GROUP_ONLINE_SYNCHRONOUS = 2_u32
  CLUSAPI_GROUP_ONLINE_BEST_POSSIBLE_NODE = 4_u32
  CLUSAPI_GROUP_ONLINE_IGNORE_AFFINITY_RULE = 8_u32
  CLUSAPI_GROUP_OFFLINE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUSAPI_RESOURCE_ONLINE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUSAPI_RESOURCE_ONLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 2_u32
  CLUSAPI_RESOURCE_ONLINE_NECESSARY_FOR_QUORUM = 4_u32
  CLUSAPI_RESOURCE_ONLINE_BEST_POSSIBLE_NODE = 8_u32
  CLUSAPI_RESOURCE_ONLINE_IGNORE_AFFINITY_RULE = 32_u32
  CLUSAPI_RESOURCE_OFFLINE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUSAPI_RESOURCE_OFFLINE_FORCE_WITH_TERMINATION = 2_u32
  CLUSAPI_RESOURCE_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 4_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_NONE = 0_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_UNKNOWN = 1_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_MOVING = 2_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_USER_REQUESTED = 4_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_DELETED = 8_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_RESTARTED = 16_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_PREEMPTED = 32_u32
  CLUSAPI_RESOURCE_OFFLINE_REASON_SHUTTING_DOWN = 64_u32
  CLUSAPI_GROUP_MOVE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUSAPI_GROUP_MOVE_RETURN_TO_SOURCE_NODE_ON_ERROR = 2_u32
  CLUSAPI_GROUP_MOVE_QUEUE_ENABLED = 4_u32
  CLUSAPI_GROUP_MOVE_HIGH_PRIORITY_START = 8_u32
  CLUSAPI_GROUP_MOVE_FAILBACK = 16_u32
  CLUSAPI_GROUP_MOVE_IGNORE_AFFINITY_RULE = 32_u32
  CLUSAPI_CHANGE_RESOURCE_GROUP_FORCE_MOVE_TO_CSV = 1_u64
  CLUSAPI_VALID_CHANGE_RESOURCE_GROUP_FLAGS = 1_u64
  GROUP_FAILURE_INFO_VERSION_1 = 1_u32
  RESOURCE_FAILURE_INFO_VERSION_1 = 1_u32
  CLUS_ACCESS_ANY = 0_u32
  CLUS_ACCESS_READ = 1_u32
  CLUS_ACCESS_WRITE = 2_u32
  CLUS_NO_MODIFY = 0_u32
  CLUS_MODIFY = 1_u32
  CLUS_NOT_GLOBAL = 0_u32
  CLUS_GLOBAL = 1_u32
  CLUSCTL_ACCESS_SHIFT = 0_u32
  CLUSCTL_FUNCTION_SHIFT = 2_u32
  CLCTL_INTERNAL_SHIFT = 20_u32
  CLCTL_USER_SHIFT = 21_u32
  CLCTL_MODIFY_SHIFT = 22_u32
  CLCTL_GLOBAL_SHIFT = 23_u32
  CLUSCTL_OBJECT_SHIFT = 24_u32
  CLUSCTL_CONTROL_CODE_MASK = 4194303_u32
  CLUSCTL_OBJECT_MASK = 255_u32
  CLUSCTL_ACCESS_MODE_MASK = 3_u32
  CLCTL_CLUSTER_BASE = 0_u32
  BitLockerEnabled = 1_i32
  BitLockerDecrypted = 4_i32
  BitlockerEncrypted = 8_i32
  BitLockerDecrypting = 16_i32
  BitlockerEncrypting = 32_i32
  BitLockerPaused = 64_i32
  BitLockerStopped = 128_i32
  RedirectedIOReasonUserRequest = 1_u64
  RedirectedIOReasonUnsafeFileSystemFilter = 2_u64
  RedirectedIOReasonUnsafeVolumeFilter = 4_u64
  RedirectedIOReasonFileSystemTiering = 8_u64
  RedirectedIOReasonBitLockerInitializing = 16_u64
  RedirectedIOReasonReFs = 32_u64
  RedirectedIOReasonMax = 9223372036854775808_u64
  VolumeRedirectedIOReasonNoDiskConnectivity = 1_u64
  VolumeRedirectedIOReasonStorageSpaceNotAttached = 2_u64
  VolumeRedirectedIOReasonVolumeReplicationEnabled = 4_u64
  VolumeRedirectedIOReasonMax = 9223372036854775808_u64
  MAX_OBJECTID = 64_u32
  MAX_CO_PASSWORD_LENGTH = 16_u32
  GUID_PRESENT = 1_u32
  CREATEDC_PRESENT = 2_u32
  MAX_CO_PASSWORD_LENGTHEX = 127_u32
  MAX_CO_PASSWORD_STORAGEEX = 128_u32
  MAX_CREATINGDC_LENGTH = 256_u32
  DNS_LENGTH = 64_u32
  MAINTENANCE_MODE_V2_SIG = 2881155087_u32
  NNLEN = 80_u32
  SR_REPLICATED_PARTITION_DISALLOW_MULTINODE_IO = 1_u32
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_ADD_VOLUME_INFO = 1_u32
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_FILTER_BY_POOL = 2_u32
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_INCLUDE_NON_SHARED_DISKS = 4_u32
  CLRES_VERSION_V1_00 = 256_u32
  CLRES_VERSION_V2_00 = 512_u32
  CLRES_VERSION_V3_00 = 768_u32
  CLRES_VERSION_V4_00 = 1024_u32
  CLUSCTL_GET_OPERATION_CONTEXT_PARAMS_VERSION_1 = 1_u32
  CLUSRESDLL_STATUS_OFFLINE_BUSY = 1_u32
  CLUSRESDLL_STATUS_OFFLINE_SOURCE_THROTTLED = 2_u32
  CLUSRESDLL_STATUS_OFFLINE_DESTINATION_THROTTLED = 4_u32
  CLUSRESDLL_STATUS_OFFLINE_DESTINATION_REJECTED = 8_u32
  CLUSRESDLL_STATUS_INSUFFICIENT_MEMORY = 16_u32
  CLUSRESDLL_STATUS_INSUFFICIENT_PROCESSOR = 32_u32
  CLUSRESDLL_STATUS_INSUFFICIENT_OTHER_RESOURCES = 64_u32
  CLUSRESDLL_STATUS_INVALID_PARAMETERS = 128_u32
  CLUSRESDLL_STATUS_NETWORK_NOT_AVAILABLE = 256_u32
  CLUSRESDLL_STATUS_DO_NOT_COLLECT_WER_REPORT = 1073741824_u32
  CLUSRESDLL_STATUS_DUMP_NOW = 2147483648_u32
  CLUS_RESDLL_OPEN_RECOVER_MONITOR_STATE = 1_u32
  CLUS_RESDLL_ONLINE_RECOVER_MONITOR_STATE = 1_u32
  CLUS_RESDLL_ONLINE_IGNORE_RESOURCE_STATUS = 2_u32
  CLUS_RESDLL_ONLINE_RETURN_TO_SOURCE_NODE_ON_ERROR = 4_u32
  CLUS_RESDLL_ONLINE_RESTORE_ONLINE_STATE = 8_u32
  CLUS_RESDLL_ONLINE_IGNORE_NETWORK_CONNECTIVITY = 16_u32
  CLUS_RESDLL_OFFLINE_IGNORE_RESOURCE_STATUS = 1_u32
  CLUS_RESDLL_OFFLINE_RETURN_TO_SOURCE_NODE_ON_ERROR = 2_u32
  CLUS_RESDLL_OFFLINE_QUEUE_ENABLED = 4_u32
  CLUS_RESDLL_OFFLINE_RETURNING_TO_SOURCE_NODE_BECAUSE_OF_ERROR = 8_u32
  CLUS_RESDLL_OFFLINE_DUE_TO_EMBEDDED_FAILURE = 16_u32
  CLUS_RESDLL_OFFLINE_IGNORE_NETWORK_CONNECTIVITY = 32_u32
  CLUS_RESDLL_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 64_u32
  CLUS_RESDLL_OPEN_DONT_DELETE_TEMP_DISK = 2_u32
  RESTYPE_MONITOR_SHUTTING_DOWN_NODE_STOP = 1_u32
  RESTYPE_MONITOR_SHUTTING_DOWN_CLUSSVC_CRASH = 2_u32
  RESUTIL_PROPITEM_READ_ONLY = 1_u32
  RESUTIL_PROPITEM_REQUIRED = 2_u32
  RESUTIL_PROPITEM_SIGNED = 4_u32
  RESUTIL_PROPITEM_IN_MEMORY = 8_u32
  LOCKED_MODE_FLAGS_DONT_REMOVE_FROM_MOVE_QUEUE = 1_u32
  CLUSTER_HEALTH_FAULT_ARGS = 7_u32
  CLUSTER_HEALTH_FAULT_ID = 0_u32
  CLUSTER_HEALTH_FAULT_ERRORTYPE = 1_u32
  CLUSTER_HEALTH_FAULT_ERRORCODE = 2_u32
  CLUSTER_HEALTH_FAULT_DESCRIPTION = 3_u32
  CLUSTER_HEALTH_FAULT_PROVIDER = 4_u32
  CLUSTER_HEALTH_FAULT_FLAGS = 5_u32
  CLUSTER_HEALTH_FAULT_RESERVED = 6_u32
  CLUS_CREATE_CRYPT_CONTAINER_NOT_FOUND = 1_u32
  SET_APPINSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1_u32
  ClusApplication = LibC::GUID.new(0xf2e606e5_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  Cluster = LibC::GUID.new(0xf2e606e3_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusVersion = LibC::GUID.new(0xf2e60715_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResType = LibC::GUID.new(0xf2e6070f_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusProperty = LibC::GUID.new(0xf2e606fd_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusProperties = LibC::GUID.new(0xf2e606ff_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  DomainNames = LibC::GUID.new(0xf2e606e1_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNetwork = LibC::GUID.new(0xf2e606f1_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNetInterface = LibC::GUID.new(0xf2e606ed_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNetInterfaces = LibC::GUID.new(0xf2e606ef_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResDependencies = LibC::GUID.new(0xf2e60703_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResGroupResources = LibC::GUID.new(0xf2e606e9_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResTypeResources = LibC::GUID.new(0xf2e60713_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResGroupPreferredOwnerNodes = LibC::GUID.new(0xf2e606e7_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResPossibleOwnerNodes = LibC::GUID.new(0xf2e6070d_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNetworks = LibC::GUID.new(0xf2e606f3_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNetworkNetInterfaces = LibC::GUID.new(0xf2e606f5_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNodeNetInterfaces = LibC::GUID.new(0xf2e606fb_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusRefObject = LibC::GUID.new(0xf2e60701_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusterNames = LibC::GUID.new(0xf2e606eb_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNode = LibC::GUID.new(0xf2e606f7_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusNodes = LibC::GUID.new(0xf2e606f9_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResGroup = LibC::GUID.new(0xf2e60705_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResGroups = LibC::GUID.new(0xf2e60707_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResource = LibC::GUID.new(0xf2e60709_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResources = LibC::GUID.new(0xf2e6070b_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResTypes = LibC::GUID.new(0xf2e60711_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResTypePossibleOwnerNodes = LibC::GUID.new(0xf2e60717_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusPropertyValue = LibC::GUID.new(0xf2e60719_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusPropertyValues = LibC::GUID.new(0xf2e6071b_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusPropertyValueData = LibC::GUID.new(0xf2e6071d_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusPartition = LibC::GUID.new(0xf2e6071f_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusPartitionEx = LibC::GUID.new(0x53d51d26_u32, 0xb51b_u16, 0x4a79_u16, StaticArray[0xb2_u8, 0xc3_u8, 0x50_u8, 0x48_u8, 0xd9_u8, 0x3a_u8, 0x98_u8, 0xfc_u8])
  ClusPartitions = LibC::GUID.new(0xf2e60721_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusDisk = LibC::GUID.new(0xf2e60723_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusDisks = LibC::GUID.new(0xf2e60725_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusScsiAddress = LibC::GUID.new(0xf2e60727_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusRegistryKeys = LibC::GUID.new(0xf2e60729_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusCryptoKeys = LibC::GUID.new(0xf2e6072b_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])
  ClusResDependents = LibC::GUID.new(0xf2e6072d_u32, 0x2631_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xf1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0x6_u8, 0x1e_u8])

  type HCLUSTER = Void
  type HNODE = Void
  type HRESOURCE = Void
  type HGROUP = Void
  type HNETWORK = Void
  type HNETINTERFACE = Void
  type HCHANGE = Void
  type HCLUSENUM = Void
  type HGROUPENUM = Void
  type HRESENUM = Void
  type HNETWORKENUM = Void
  type HNODEENUM = Void
  type HNETINTERFACEENUM = Void
  type HRESTYPEENUM = Void
  type HREGBATCH = Void
  type HREGBATCHPORT = Void
  type HREGBATCHNOTIFICATION = Void
  type HREGREADBATCH = Void
  type HREGREADBATCHREPLY = Void
  type HNODEENUMEX = Void
  type HCLUSENUMEX = Void
  type HGROUPENUMEX = Void
  type HRESENUMEX = Void
  type HGROUPSET = Void
  type HGROUPSETENUM = Void
  type HCLUSCRYPTPROVIDER = Void

  alias PCLUSAPI_GET_NODE_CLUSTER_STATE = Proc(LibC::LPWSTR, UInt32*, UInt32)
  alias PCLUSAPI_OPEN_CLUSTER = Proc(LibC::LPWSTR, HCLUSTER*)
  alias PCLUSAPI_OPEN_CLUSTER_EX = Proc(LibC::LPWSTR, UInt32, UInt32*, HCLUSTER*)
  alias PCLUSAPI_CLOSE_CLUSTER = Proc(HCLUSTER*, LibC::BOOL)
  alias PCLUSAPI_SetClusterName = Proc(HCLUSTER*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_GET_CLUSTER_INFORMATION = Proc(HCLUSTER*, Char*, UInt32*, CLUSTERVERSIONINFO*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_QUORUM_RESOURCE = Proc(HCLUSTER*, Char*, UInt32*, Char*, UInt32*, UInt32*, UInt32)
  alias PCLUSAPI_SET_CLUSTER_QUORUM_RESOURCE = Proc(HRESOURCE*, LibC::LPWSTR, UInt32, UInt32)
  alias PCLUSAPI_BACKUP_CLUSTER_DATABASE = Proc(HCLUSTER*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_RESTORE_CLUSTER_DATABASE = Proc(LibC::LPWSTR, LibC::BOOL, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_SET_CLUSTER_NETWORK_PRIORITY_ORDER = Proc(HCLUSTER*, UInt32, HNETWORK**, UInt32)
  alias PCLUSAPI_SET_CLUSTER_SERVICE_ACCOUNT_PASSWORD = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, CLUSTER_SET_PASSWORD_STATUS*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_CONTROL = Proc(HCLUSTER*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSTER_UPGRADE_PROGRESS_CALLBACK = Proc(Void*, CLUSTER_UPGRADE_PHASE, LibC::BOOL)
  alias PCLUSAPI_CLUSTER_UPGRADE = Proc(HCLUSTER*, LibC::BOOL, PCLUSTER_UPGRADE_PROGRESS_CALLBACK, Void*, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT_V2 = Proc(HCHANGE*, HCLUSTER*, NOTIFY_FILTER_AND_TYPE*, UInt32, LibC::UINT_PTR, HCHANGE*)
  alias PCLUSAPI_REGISTER_CLUSTER_NOTIFY_V2 = Proc(HCHANGE*, NOTIFY_FILTER_AND_TYPE, LibC::HANDLE, LibC::UINT_PTR, UInt32)
  alias PCLUSAPI_GET_NOTIFY_EVENT_HANDLE_V2 = Proc(HCHANGE*, LibC::HANDLE*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_NOTIFY_V2 = Proc(HCHANGE*, LibC::UINT_PTR*, NOTIFY_FILTER_AND_TYPE*, UInt8*, UInt32*, LibC::LPWSTR, UInt32*, LibC::LPWSTR, UInt32*, LibC::LPWSTR, UInt32*, LibC::LPWSTR, UInt32*, UInt32, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT = Proc(HCHANGE*, HCLUSTER*, UInt32, LibC::UINT_PTR, HCHANGE*)
  alias PCLUSAPI_REGISTER_CLUSTER_NOTIFY = Proc(HCHANGE*, UInt32, LibC::HANDLE, LibC::UINT_PTR, UInt32)
  alias PCLUSAPI_GET_CLUSTER_NOTIFY = Proc(HCHANGE*, LibC::UINT_PTR*, UInt32*, Char*, UInt32*, UInt32, UInt32)
  alias PCLUSAPI_CLOSE_CLUSTER_NOTIFY_PORT = Proc(HCHANGE*, LibC::BOOL)
  alias PCLUSAPI_CLUSTER_OPEN_ENUM = Proc(HCLUSTER*, UInt32, HCLUSENUM*)
  alias PCLUSAPI_CLUSTER_GET_ENUM_COUNT = Proc(HCLUSENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_ENUM = Proc(HCLUSENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_CLOSE_ENUM = Proc(HCLUSENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_OPEN_ENUM_EX = Proc(HCLUSTER*, UInt32, Void*, HCLUSENUMEX*)
  alias PCLUSAPI_CLUSTER_GET_ENUM_COUNT_EX = Proc(HCLUSENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_ENUM_EX = Proc(HCLUSENUMEX*, UInt32, CLUSTER_ENUM_ITEM*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_CLOSE_ENUM_EX = Proc(HCLUSENUMEX*, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_GROUP_GROUPSET = Proc(HCLUSTER*, LibC::LPWSTR, HGROUPSET*)
  alias PCLUSAPI_OPEN_CLUSTER_GROUP_GROUPSET = Proc(HCLUSTER*, LibC::LPWSTR, HGROUPSET*)
  alias PCLUSAPI_CLOSE_CLUSTER_GROUP_GROUPSET = Proc(HGROUPSET*, LibC::BOOL)
  alias PCLUSAPI_DELETE_CLUSTER_GROUP_GROUPSET = Proc(HGROUPSET*, UInt32)
  alias PCLUSAPI_CLUSTER_ADD_GROUP_TO_GROUP_GROUPSET = Proc(HGROUPSET*, HGROUP*, UInt32)
  alias PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_GROUP_GROUPSET = Proc(HGROUPSET*, HGROUP*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_GROUPSET_CONTROL = Proc(HGROUPSET*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_GROUP_DEPENDENCY = Proc(HGROUP*, HGROUP*, UInt32)
  alias PCLUSAPI_SET_GROUP_DEPENDENCY_EXPRESSION = Proc(HGROUP*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_GROUP_DEPENDENCY = Proc(HGROUP*, HGROUP*, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_GROUP_GROUPSET_DEPENDENCY = Proc(HGROUPSET*, HGROUPSET*, UInt32)
  alias PCLUSAPI_SET_CLUSTER_GROUP_GROUPSET_DEPENDENCY_EXPRESSION = Proc(HGROUPSET*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_GROUP_GROUPSET_DEPENDENCY = Proc(HGROUPSET*, HGROUPSET*, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = Proc(HGROUP*, HGROUPSET*, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = Proc(HGROUP*, HGROUPSET*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_FROM_GROUP_GROUPSET = Proc(HGROUPSET*, HCLUSTER*)
  alias PCLUSAPI_ADD_CROSS_CLUSTER_GROUPSET_DEPENDENCY = Proc(HGROUPSET*, LibC::LPWSTR, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_REMOVE_CROSS_CLUSTER_GROUPSET_DEPENDENCY = Proc(HGROUPSET*, LibC::LPWSTR, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_AVAILABILITY_SET = Proc(HCLUSTER*, LibC::LPWSTR, CLUSTER_AVAILABILITY_SET_CONFIG*, HGROUPSET*)
  alias PCLUSAPI_CLUSTER_CREATE_AFFINITY_RULE = Proc(HCLUSTER*, LibC::LPWSTR, CLUS_AFFINITY_RULE_TYPE, UInt32)
  alias PCLUSAPI_CLUSTER_REMOVE_AFFINITY_RULE = Proc(HCLUSTER*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_CLUSTER_ADD_GROUP_TO_AFFINITY_RULE = Proc(HCLUSTER*, LibC::LPWSTR, HGROUP*, UInt32)
  alias PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_AFFINITY_RULE = Proc(HCLUSTER*, LibC::LPWSTR, HGROUP*, UInt32)
  alias PCLUSAPI_CLUSTER_AFFINITY_RULE_CONTROL = Proc(HCLUSTER*, LibC::LPWSTR, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_OPEN_CLUSTER_NODE = Proc(HCLUSTER*, LibC::LPWSTR, HNODE*)
  alias PCLUSAPI_OPEN_CLUSTER_NODE_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32*, HNODE*)
  alias PCLUSAPI_OPEN_NODE_BY_ID = Proc(HCLUSTER*, UInt32, HNODE*)
  alias PCLUSAPI_CLOSE_CLUSTER_NODE = Proc(HNODE*, LibC::BOOL)
  alias PCLUSAPI_GET_CLUSTER_NODE_STATE = Proc(HNODE*, CLUSTER_NODE_STATE)
  alias PCLUSAPI_GET_CLUSTER_NODE_ID = Proc(HNODE*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_FROM_NODE = Proc(HNODE*, HCLUSTER*)
  alias PCLUSAPI_PAUSE_CLUSTER_NODE = Proc(HNODE*, UInt32)
  alias PCLUSAPI_RESUME_CLUSTER_NODE = Proc(HNODE*, UInt32)
  alias PCLUSAPI_EVICT_CLUSTER_NODE = Proc(HNODE*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_OPEN_ENUM = Proc(HNODE*, UInt32, HNODEENUM*)
  alias PCLUSAPI_CLUSTER_NODE_OPEN_ENUM_EX = Proc(HNODE*, UInt32, Void*, HNODEENUMEX*)
  alias PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT_EX = Proc(HNODEENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_ENUM_EX = Proc(HNODEENUMEX*, UInt32, CLUSTER_ENUM_ITEM*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM_EX = Proc(HNODEENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT = Proc(HNODEENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM = Proc(HNODEENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_ENUM = Proc(HNODEENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_EVICT_CLUSTER_NODE_EX = Proc(HNODE*, UInt32, HRESULT*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_RESOURCE_TYPE_KEY = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, HKEY)
  alias PCLUSAPI_CREATE_CLUSTER_GROUP = Proc(HCLUSTER*, LibC::LPWSTR, HGROUP*)
  alias PCLUSAPI_OPEN_CLUSTER_GROUP = Proc(HCLUSTER*, LibC::LPWSTR, HGROUP*)
  alias PCLUSAPI_OPEN_CLUSTER_GROUP_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32*, HGROUP*)
  alias PCLUSAPI_PAUSE_CLUSTER_NODE_EX = Proc(HNODE*, LibC::BOOL, UInt32, HNODE*, UInt32)
  alias PCLUSAPI_RESUME_CLUSTER_NODE_EX = Proc(HNODE*, CLUSTER_NODE_RESUME_FAILBACK_TYPE, UInt32, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_GROUPEX = Proc(HCLUSTER*, LibC::LPWSTR, CLUSTER_CREATE_GROUP_INFO*, HGROUP*)
  alias PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32, HGROUPENUMEX*)
  alias PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT_EX = Proc(HGROUPENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_ENUM_EX = Proc(HGROUPENUMEX*, UInt32, CLUSTER_GROUP_ENUM_ITEM*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM_EX = Proc(HGROUPENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32, HRESENUMEX*)
  alias PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT_EX = Proc(HRESENUMEX*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_ENUM_EX = Proc(HRESENUMEX*, UInt32, CLUSTER_RESOURCE_ENUM_ITEM*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM_EX = Proc(HRESENUMEX*, UInt32)
  alias PCLUSAPI_RESTART_CLUSTER_RESOURCE = Proc(HRESOURCE*, UInt32, UInt32)
  alias PCLUSAPI_CLOSE_CLUSTER_GROUP = Proc(HGROUP*, LibC::BOOL)
  alias PCLUSAPI_GET_CLUSTER_FROM_GROUP = Proc(HGROUP*, HCLUSTER*)
  alias PCLUSAPI_GET_CLUSTER_GROUP_STATE = Proc(HGROUP*, Char*, UInt32*, CLUSTER_GROUP_STATE)
  alias PCLUSAPI_SET_CLUSTER_GROUP_NAME = Proc(HGROUP*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_SET_CLUSTER_GROUP_NODE_LIST = Proc(HGROUP*, UInt32, HNODE**, UInt32)
  alias PCLUSAPI_ONLINE_CLUSTER_GROUP = Proc(HGROUP*, HNODE*, UInt32)
  alias PCLUSAPI_MOVE_CLUSTER_GROUP = Proc(HGROUP*, HNODE*, UInt32)
  alias PCLUSAPI_OFFLINE_CLUSTER_GROUP = Proc(HGROUP*, UInt32)
  alias PCLUSAPI_DELETE_CLUSTER_GROUP = Proc(HGROUP*, UInt32)
  alias PCLUSAPI_DESTROY_CLUSTER_GROUP = Proc(HGROUP*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM = Proc(HGROUP*, UInt32, HGROUPENUM*)
  alias PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT = Proc(HGROUPENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_ENUM = Proc(HGROUPENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM = Proc(HGROUPENUM*, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_RESOURCE = Proc(HGROUP*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESOURCE*)
  alias PCLUSAPI_OPEN_CLUSTER_RESOURCE = Proc(HCLUSTER*, LibC::LPWSTR, HRESOURCE*)
  alias PCLUSAPI_OPEN_CLUSTER_RESOURCE_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32*, HRESOURCE*)
  alias PCLUSAPI_CLOSE_CLUSTER_RESOURCE = Proc(HRESOURCE*, LibC::BOOL)
  alias PCLUSAPI_GET_CLUSTER_FROM_RESOURCE = Proc(HRESOURCE*, HCLUSTER*)
  alias PCLUSAPI_DELETE_CLUSTER_RESOURCE = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_RESOURCE_STATE = Proc(HRESOURCE*, Char*, UInt32*, Char*, UInt32*, CLUSTER_RESOURCE_STATE)
  alias PCLUSAPI_SET_CLUSTER_RESOURCE_NAME = Proc(HRESOURCE*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_FAIL_CLUSTER_RESOURCE = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_ONLINE_CLUSTER_RESOURCE = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_OFFLINE_CLUSTER_RESOURCE = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP = Proc(HRESOURCE*, HGROUP*, UInt32)
  alias PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP_EX = Proc(HRESOURCE*, HGROUP*, UInt64, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_RESOURCE_NODE = Proc(HRESOURCE*, HNODE*, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_RESOURCE_NODE = Proc(HRESOURCE*, HNODE*, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_RESOURCE_DEPENDENCY = Proc(HRESOURCE*, HRESOURCE*, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_RESOURCE_DEPENDENCY = Proc(HRESOURCE*, HRESOURCE*, UInt32)
  alias PCLUSAPI_SET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = Proc(HRESOURCE*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_GET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = Proc(HRESOURCE*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_ADD_RESOURCE_TO_CLUSTER_SHARED_VOLUMES = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_REMOVE_RESOURCE_FROM_CLUSTER_SHARED_VOLUMES = Proc(HRESOURCE*, UInt32)
  alias PCLUSAPI_IS_FILE_ON_CLUSTER_SHARED_VOLUME = Proc(LibC::LPWSTR, LibC::BOOL*, UInt32)
  alias PCLUSAPI_SHARED_VOLUME_SET_SNAPSHOT_STATE = Proc(Guid, LibC::LPWSTR, CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE, UInt32)
  alias PCLUSAPI_CAN_RESOURCE_BE_DEPENDENT = Proc(HRESOURCE*, HRESOURCE*, LibC::BOOL)
  alias PCLUSAPI_CLUSTER_RESOURCE_CONTROL = Proc(HRESOURCE*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_TYPE_CONTROL = Proc(HCLUSTER*, LibC::LPWSTR, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_GROUP_CONTROL = Proc(HGROUP*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_NODE_CONTROL = Proc(HNODE*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_RESOURCE_NETWORK_NAME = Proc(HRESOURCE*, Char*, UInt32*, LibC::BOOL)
  alias PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM = Proc(HRESOURCE*, UInt32, HRESENUM*)
  alias PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT = Proc(HRESENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_ENUM = Proc(HRESENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM = Proc(HRESENUM*, UInt32)
  alias PCLUSAPI_CREATE_CLUSTER_RESOURCE_TYPE = Proc(HCLUSTER*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, UInt32)
  alias PCLUSAPI_DELETE_CLUSTER_RESOURCE_TYPE = Proc(HCLUSTER*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_TYPE_OPEN_ENUM = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, HRESTYPEENUM*)
  alias PCLUSAPI_CLUSTER_RESOURCE_TYPE_GET_ENUM_COUNT = Proc(HRESTYPEENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_TYPE_ENUM = Proc(HRESTYPEENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_RESOURCE_TYPE_CLOSE_ENUM = Proc(HRESTYPEENUM*, UInt32)
  alias PCLUSAPI_OPEN_CLUSTER_NETWORK = Proc(HCLUSTER*, LibC::LPWSTR, HNETWORK*)
  alias PCLUSAPI_OPEN_CLUSTER_NETWORK_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32*, HNETWORK*)
  alias PCLUSAPI_CLOSE_CLUSTER_NETWORK = Proc(HNETWORK*, LibC::BOOL)
  alias PCLUSAPI_GET_CLUSTER_FROM_NETWORK = Proc(HNETWORK*, HCLUSTER*)
  alias PCLUSAPI_CLUSTER_NETWORK_OPEN_ENUM = Proc(HNETWORK*, UInt32, HNETWORKENUM*)
  alias PCLUSAPI_CLUSTER_NETWORK_GET_ENUM_COUNT = Proc(HNETWORKENUM*, UInt32)
  alias PCLUSAPI_CLUSTER_NETWORK_ENUM = Proc(HNETWORKENUM*, UInt32, UInt32*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_NETWORK_CLOSE_ENUM = Proc(HNETWORKENUM*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_NETWORK_STATE = Proc(HNETWORK*, CLUSTER_NETWORK_STATE)
  alias PCLUSAPI_SET_CLUSTER_NETWORK_NAME = Proc(HNETWORK*, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_GET_CLUSTER_NETWORK_ID = Proc(HNETWORK*, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_NETWORK_CONTROL = Proc(HNETWORK*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_OPEN_CLUSTER_NET_INTERFACE = Proc(HCLUSTER*, LibC::LPWSTR, HNETINTERFACE*)
  alias PCLUSAPI_OPEN_CLUSTER_NETINTERFACE_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32*, HNETINTERFACE*)
  alias PCLUSAPI_GET_CLUSTER_NET_INTERFACE = Proc(HCLUSTER*, LibC::LPWSTR, LibC::LPWSTR, Char*, UInt32*, UInt32)
  alias PCLUSAPI_CLOSE_CLUSTER_NET_INTERFACE = Proc(HNETINTERFACE*, LibC::BOOL)
  alias PCLUSAPI_GET_CLUSTER_FROM_NET_INTERFACE = Proc(HNETINTERFACE*, HCLUSTER*)
  alias PCLUSAPI_GET_CLUSTER_NET_INTERFACE_STATE = Proc(HNETINTERFACE*, CLUSTER_NETINTERFACE_STATE)
  alias PCLUSAPI_CLUSTER_NET_INTERFACE_CONTROL = Proc(HNETINTERFACE*, HNODE*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PCLUSAPI_GET_CLUSTER_KEY = Proc(HCLUSTER*, UInt32, HKEY)
  alias PCLUSAPI_GET_CLUSTER_GROUP_KEY = Proc(HGROUP*, UInt32, HKEY)
  alias PCLUSAPI_GET_CLUSTER_RESOURCE_KEY = Proc(HRESOURCE*, UInt32, HKEY)
  alias PCLUSAPI_GET_CLUSTER_NODE_KEY = Proc(HNODE*, UInt32, HKEY)
  alias PCLUSAPI_GET_CLUSTER_NETWORK_KEY = Proc(HNETWORK*, UInt32, HKEY)
  alias PCLUSAPI_GET_CLUSTER_NET_INTERFACE_KEY = Proc(HNETINTERFACE*, UInt32, HKEY)
  alias PCLUSAPI_CLUSTER_REG_CREATE_KEY = Proc(HKEY, LibC::LPWSTR, UInt32, UInt32, SECURITY_ATTRIBUTES*, HKEY*, UInt32*, Int32)
  alias PCLUSAPI_CLUSTER_REG_OPEN_KEY = Proc(HKEY, LibC::LPWSTR, UInt32, HKEY*, Int32)
  alias PCLUSAPI_CLUSTER_REG_DELETE_KEY = Proc(HKEY, LibC::LPWSTR, Int32)
  alias PCLUSAPI_CLUSTER_REG_CLOSE_KEY = Proc(HKEY, Int32)
  alias PCLUSAPI_CLUSTER_REG_ENUM_KEY = Proc(HKEY, UInt32, Char*, UInt32*, FILETIME*, Int32)
  alias PCLUSAPI_CLUSTER_REG_SET_VALUE = Proc(HKEY, LibC::LPWSTR, UInt32, UInt8*, UInt32, UInt32)
  alias PCLUSAPI_CLUSTER_REG_DELETE_VALUE = Proc(HKEY, LibC::LPWSTR, UInt32)
  alias PCLUSAPI_CLUSTER_REG_QUERY_VALUE = Proc(HKEY, LibC::LPWSTR, UInt32*, UInt8*, UInt32*, Int32)
  alias PCLUSAPI_CLUSTER_REG_ENUM_VALUE = Proc(HKEY, UInt32, Char*, UInt32*, UInt32*, UInt8*, UInt32*, UInt32)
  alias PCLUSAPI_CLUSTER_REG_QUERY_INFO_KEY = Proc(HKEY, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, FILETIME*, Int32)
  alias PCLUSAPI_CLUSTER_REG_GET_KEY_SECURITY = Proc(HKEY, UInt32, SECURITY_DESCRIPTOR*, UInt32*, Int32)
  alias PCLUSAPI_CLUSTER_REG_SET_KEY_SECURITY = Proc(HKEY, UInt32, SECURITY_DESCRIPTOR*, Int32)
  alias PCLUSAPI_CLUSTER_REG_SYNC_DATABASE = Proc(HCLUSTER*, UInt32, Int32)
  alias PCLUSAPI_CLUSTER_REG_CREATE_BATCH = Proc(HKEY, HREGBATCH**, Int32)
  alias PCLUSTER_REG_BATCH_ADD_COMMAND = Proc(HREGBATCH*, CLUSTER_REG_COMMAND, LibC::LPWSTR, UInt32, Void*, UInt32, Int32)
  alias PCLUSTER_REG_CLOSE_BATCH = Proc(HREGBATCH*, LibC::BOOL, Int32*, Int32)
  alias PCLUSTER_REG_BATCH_READ_COMMAND = Proc(HREGBATCHNOTIFICATION*, CLUSTER_BATCH_COMMAND*, Int32)
  alias PCLUSTER_REG_BATCH_CLOSE_NOTIFICATION = Proc(HREGBATCHNOTIFICATION*, Int32)
  alias PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT = Proc(HKEY, HREGBATCHPORT**, Int32)
  alias PCLUSTER_REG_CLOSE_BATCH_NOTIFY_PORT = Proc(HREGBATCHPORT*, Int32)
  alias PCLUSTER_REG_GET_BATCH_NOTIFICATION = Proc(HREGBATCHPORT*, HREGBATCHNOTIFICATION**, Int32)
  alias PCLUSTER_REG_CREATE_READ_BATCH = Proc(HKEY, HREGREADBATCH**, Int32)
  alias PCLUSTER_REG_READ_BATCH_ADD_COMMAND = Proc(HREGREADBATCH*, LibC::LPWSTR, LibC::LPWSTR, Int32)
  alias PCLUSTER_REG_CLOSE_READ_BATCH = Proc(HREGREADBATCH*, HREGREADBATCHREPLY**, Int32)
  alias PCLUSTER_REG_CLOSE_READ_BATCH_EX = Proc(HREGREADBATCH*, UInt32, HREGREADBATCHREPLY**, Int32)
  alias PCLUSTER_REG_READ_BATCH_REPLY_NEXT_COMMAND = Proc(HREGREADBATCHREPLY*, CLUSTER_READ_BATCH_COMMAND*, Int32)
  alias PCLUSTER_REG_CLOSE_READ_BATCH_REPLY = Proc(HREGREADBATCHREPLY*, Int32)
  alias PCLUSTER_SET_ACCOUNT_ACCESS = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, UInt32, UInt32)
  alias PCLUSTER_SETUP_PROGRESS_CALLBACK = Proc(Void*, CLUSTER_SETUP_PHASE, CLUSTER_SETUP_PHASE_TYPE, CLUSTER_SETUP_PHASE_SEVERITY, UInt32, LibC::LPWSTR, UInt32, LibC::BOOL)
  alias PCLUSAPI_CREATE_CLUSTER = Proc(CREATE_CLUSTER_CONFIG*, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, HCLUSTER*)
  alias PCLUSAPI_CREATE_CLUSTER_CNOLESS = Proc(CREATE_CLUSTER_CONFIG*, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, HCLUSTER*)
  alias PCLUSAPI_CREATE_CLUSTER_NAME_ACCOUNT = Proc(HCLUSTER*, CREATE_CLUSTER_NAME_ACCOUNT*, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, UInt32)
  alias PCLUSAPI_REMOVE_CLUSTER_NAME_ACCOUNT = Proc(HCLUSTER*, UInt32)
  alias PCLUSAPI_ADD_CLUSTER_NODE = Proc(HCLUSTER*, LibC::LPWSTR, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, HNODE*)
  alias PCLUSAPI_ADD_CLUSTER_NODE_EX = Proc(HCLUSTER*, LibC::LPWSTR, UInt32, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, HNODE*)
  alias PCLUSAPI_DESTROY_CLUSTER = Proc(HCLUSTER*, PCLUSTER_SETUP_PROGRESS_CALLBACK, Void*, LibC::BOOL, UInt32)
  alias PSET_RESOURCE_STATUS_ROUTINE_EX = Proc(LibC::IntPtrT, RESOURCE_STATUS_EX*, UInt32)
  alias PSET_RESOURCE_STATUS_ROUTINE = Proc(LibC::IntPtrT, RESOURCE_STATUS*, UInt32)
  alias PQUORUM_RESOURCE_LOST = Proc(LibC::IntPtrT, Void)
  alias PLOG_EVENT_ROUTINE = Proc(LibC::IntPtrT, LOG_LEVEL, LibC::LPWSTR, Void)
  alias POPEN_ROUTINE = Proc(LibC::LPWSTR, HKEY, LibC::IntPtrT, Void*)
  alias PCLOSE_ROUTINE = Proc(Void*, Void)
  alias PONLINE_ROUTINE = Proc(Void*, LibC::HANDLE*, UInt32)
  alias POFFLINE_ROUTINE = Proc(Void*, UInt32)
  alias PTERMINATE_ROUTINE = Proc(Void*, Void)
  alias PIS_ALIVE_ROUTINE = Proc(Void*, LibC::BOOL)
  alias PLOOKS_ALIVE_ROUTINE = Proc(Void*, LibC::BOOL)
  alias PARBITRATE_ROUTINE = Proc(Void*, PQUORUM_RESOURCE_LOST, UInt32)
  alias PRELEASE_ROUTINE = Proc(Void*, UInt32)
  alias PRESOURCE_CONTROL_ROUTINE = Proc(Void*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PRESOURCE_TYPE_CONTROL_ROUTINE = Proc(LibC::LPWSTR, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, UInt32)
  alias POPEN_V2_ROUTINE = Proc(LibC::LPWSTR, HKEY, LibC::IntPtrT, UInt32, Void*)
  alias PONLINE_V2_ROUTINE = Proc(Void*, LibC::HANDLE*, UInt32, UInt8*, UInt32, UInt32, UInt32)
  alias POFFLINE_V2_ROUTINE = Proc(Void*, LibC::LPWSTR, UInt32, UInt8*, UInt32, UInt32, UInt32)
  alias PCANCEL_ROUTINE = Proc(Void*, UInt32, UInt32)
  alias PBEGIN_RESCALL_ROUTINE = Proc(Void*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Int64, LibC::BOOL*, UInt32)
  alias PBEGIN_RESTYPECALL_ROUTINE = Proc(LibC::LPWSTR, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Int64, LibC::BOOL*, UInt32)
  alias PBEGIN_RESCALL_AS_USER_ROUTINE = Proc(Void*, LibC::HANDLE, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Int64, LibC::BOOL*, UInt32)
  alias PBEGIN_RESTYPECALL_AS_USER_ROUTINE = Proc(LibC::LPWSTR, LibC::HANDLE, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Int64, LibC::BOOL*, UInt32)
  alias PSTARTUP_ROUTINE = Proc(LibC::LPWSTR, UInt32, UInt32, PSET_RESOURCE_STATUS_ROUTINE, PLOG_EVENT_ROUTINE, CLRES_FUNCTION_TABLE**, UInt32)
  alias PSET_RESOURCE_LOCKED_MODE_ROUTINE = Proc(LibC::IntPtrT, LibC::BOOL, UInt32, UInt32)
  alias PSIGNAL_FAILURE_ROUTINE = Proc(LibC::IntPtrT, FAILURE_TYPE, UInt32, UInt32)
  alias PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE = Proc(LibC::IntPtrT, UInt8*, UInt32, UInt32)
  alias PEND_CONTROL_CALL = Proc(Int64, UInt32, UInt32)
  alias PEND_TYPE_CONTROL_CALL = Proc(Int64, UInt32, UInt32)
  alias PEXTEND_RES_CONTROL_CALL = Proc(Int64, UInt32, UInt32)
  alias PEXTEND_RES_TYPE_CONTROL_CALL = Proc(Int64, UInt32, UInt32)
  alias PRAISE_RES_TYPE_NOTIFICATION = Proc(LibC::LPWSTR, UInt8*, UInt32, UInt32)
  alias PCHANGE_RESOURCE_PROCESS_FOR_DUMPS = Proc(LibC::IntPtrT, LibC::LPWSTR, UInt32, LibC::BOOL, UInt32)
  alias PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL, UInt32)
  alias PSET_INTERNAL_STATE = Proc(LibC::IntPtrT, CLUSTER_RESOURCE_APPLICATION_STATE, LibC::BOOL, UInt32)
  alias PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE = Proc(LibC::IntPtrT, LibC::BOOL, UInt32, UInt32, UInt32)
  alias PREQUEST_DUMP_ROUTINE = Proc(LibC::IntPtrT, LibC::BOOL, UInt32, UInt32)
  alias PSTARTUP_EX_ROUTINE = Proc(LibC::LPWSTR, UInt32, UInt32, CLRES_CALLBACK_FUNCTION_TABLE*, CLRES_FUNCTION_TABLE**, UInt32)
  alias PRESUTIL_START_RESOURCE_SERVICE = Proc(LibC::LPWSTR, LibC::IntPtrT*, UInt32)
  alias PRESUTIL_VERIFY_RESOURCE_SERVICE = Proc(LibC::LPWSTR, UInt32)
  alias PRESUTIL_STOP_RESOURCE_SERVICE = Proc(LibC::LPWSTR, UInt32)
  alias PRESUTIL_VERIFY_SERVICE = Proc(SC_HANDLE, UInt32)
  alias PRESUTIL_STOP_SERVICE = Proc(SC_HANDLE, UInt32)
  alias PRESUTIL_CREATE_DIRECTORY_TREE = Proc(LibC::LPWSTR, UInt32)
  alias PRESUTIL_IS_PATH_VALID = Proc(LibC::LPWSTR, LibC::BOOL)
  alias PRESUTIL_ENUM_PROPERTIES = Proc(RESUTIL_PROPERTY_ITEM*, LibC::LPWSTR, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_ENUM_PRIVATE_PROPERTIES = Proc(HKEY, LibC::LPWSTR, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_PROPERTIES = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_ALL_PROPERTIES = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_PRIVATE_PROPERTIES = Proc(HKEY, Void*, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_PROPERTY_SIZE = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_PROPERTY = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void**, UInt32*, UInt32)
  alias PRESUTIL_VERIFY_PROPERTY_TABLE = Proc(RESUTIL_PROPERTY_ITEM*, Void*, LibC::BOOL, Void*, UInt32, UInt8*, UInt32)
  alias PRESUTIL_SET_PROPERTY_TABLE = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, LibC::BOOL, Void*, UInt32, UInt8*, UInt32)
  alias PRESUTIL_SET_PROPERTY_TABLE_EX = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, LibC::BOOL, Void*, UInt32, LibC::BOOL, UInt8*, UInt32)
  alias PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt8*, Void*, UInt32, UInt8*, UInt32)
  alias PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt8*, Void*, UInt32, LibC::BOOL, UInt8*, UInt32)
  alias PRESUTIL_SET_UNKNOWN_PROPERTIES = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt32, UInt32)
  alias PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, UInt8*, LibC::BOOL, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK = Proc(RESUTIL_PROPERTY_ITEM*, Void*, UInt32*, UInt8*, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_DUP_PARAMETER_BLOCK = Proc(UInt8*, UInt8*, RESUTIL_PROPERTY_ITEM*, UInt32)
  alias PRESUTIL_FREE_PARAMETER_BLOCK = Proc(UInt8*, UInt8*, RESUTIL_PROPERTY_ITEM*, Void)
  alias PRESUTIL_ADD_UNKNOWN_PROPERTIES = Proc(HKEY, RESUTIL_PROPERTY_ITEM*, Void*, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_SET_PRIVATE_PROPERTY_LIST = Proc(HKEY, Void*, UInt32, UInt32)
  alias PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST = Proc(Void*, UInt32, UInt32)
  alias PRESUTIL_DUP_STRING = Proc(LibC::LPWSTR, LibC::LPWSTR)
  alias PRESUTIL_GET_BINARY_VALUE = Proc(HKEY, LibC::LPWSTR, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_SZ_VALUE = Proc(HKEY, LibC::LPWSTR, LibC::LPWSTR)
  alias PRESUTIL_GET_EXPAND_SZ_VALUE = Proc(HKEY, LibC::LPWSTR, LibC::BOOL, LibC::LPWSTR)
  alias PRESUTIL_GET_DWORD_VALUE = Proc(HKEY, LibC::LPWSTR, UInt32*, UInt32, UInt32)
  alias PRESUTIL_GET_QWORD_VALUE = Proc(HKEY, LibC::LPWSTR, UInt64*, UInt64, UInt32)
  alias PRESUTIL_SET_BINARY_VALUE = Proc(HKEY, LibC::LPWSTR, UInt8*, UInt32, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_SET_SZ_VALUE = Proc(HKEY, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_SET_EXPAND_SZ_VALUE = Proc(HKEY, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_SET_MULTI_SZ_VALUE = Proc(HKEY, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::LPWSTR*, UInt32*, UInt32)
  alias PRESUTIL_SET_DWORD_VALUE = Proc(HKEY, LibC::LPWSTR, UInt32, UInt32*, UInt32)
  alias PRESUTIL_SET_QWORD_VALUE = Proc(HKEY, LibC::LPWSTR, UInt64, UInt64*, UInt32)
  alias PRESUTIL_GET_BINARY_PROPERTY = Proc(UInt8**, UInt32*, CLUSPROP_BINARY*, UInt8*, UInt32, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_SZ_PROPERTY = Proc(LibC::LPWSTR*, CLUSPROP_SZ*, LibC::LPWSTR, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_MULTI_SZ_PROPERTY = Proc(LibC::LPWSTR*, UInt32*, CLUSPROP_SZ*, LibC::LPWSTR, UInt32, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_DWORD_PROPERTY = Proc(UInt32*, CLUSPROP_DWORD*, UInt32, UInt32, UInt32, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_LONG_PROPERTY = Proc(Int32*, CLUSPROP_LONG*, Int32, Int32, Int32, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_FILETIME_PROPERTY = Proc(FILETIME*, CLUSPROP_FILETIME*, FILETIME, FILETIME, FILETIME, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME = Proc(HRESOURCE*, Void*)
  alias PRESUTIL_FREE_ENVIRONMENT = Proc(Void*, UInt32)
  alias PRESUTIL_EXPAND_ENVIRONMENT_STRINGS = Proc(LibC::LPWSTR, LibC::LPWSTR)
  alias PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT = Proc(LibC::LPWSTR, HRESOURCE*, PLOG_EVENT_ROUTINE, LibC::IntPtrT, UInt32)
  alias PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT = Proc(LibC::LPWSTR, PLOG_EVENT_ROUTINE, LibC::IntPtrT, UInt32)
  alias PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS = Proc(LibC::LPWSTR, SC_HANDLE, LibC::IntPtrT*, PLOG_EVENT_ROUTINE, LibC::IntPtrT, UInt32)
  alias PRESUTIL_FIND_SZ_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_FIND_EXPAND_SZ_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_FIND_EXPANDED_SZ_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, UInt32)
  alias PRESUTIL_FIND_DWORD_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, UInt32*, UInt32)
  alias PRESUTIL_FIND_BINARY_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, UInt8**, UInt32*, UInt32)
  alias PRESUTIL_FIND_MULTI_SZ_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, UInt32*, UInt32)
  alias PRESUTIL_FIND_LONG_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, Int32*, UInt32)
  alias PRESUTIL_FIND_ULARGEINTEGER_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, UInt64*, UInt32)
  alias PRESUTIL_FIND_FILETIME_PROPERTY = Proc(Void*, UInt32, LibC::LPWSTR, FILETIME*, UInt32)
  alias PWORKER_START_ROUTINE = Proc(CLUS_WORKER*, Void*, UInt32)
  alias PCLUSAPI_CLUS_WORKER_CREATE = Proc(CLUS_WORKER*, PWORKER_START_ROUTINE, Void*, UInt32)
  alias PCLUSAPIClusWorkerCheckTerminate = Proc(CLUS_WORKER*, LibC::BOOL)
  alias PCLUSAPI_CLUS_WORKER_TERMINATE = Proc(CLUS_WORKER*, Void)
  alias LPRESOURCE_CALLBACK = Proc(HRESOURCE*, HRESOURCE*, Void*, UInt32)
  alias LPRESOURCE_CALLBACK_EX = Proc(HCLUSTER*, HRESOURCE*, HRESOURCE*, Void*, UInt32)
  alias LPGROUP_CALLBACK_EX = Proc(HCLUSTER*, HGROUP*, HGROUP*, Void*, UInt32)
  alias LPNODE_CALLBACK = Proc(HCLUSTER*, HNODE*, CLUSTER_NODE_STATE, Void*, UInt32)
  alias PRESUTIL_RESOURCES_EQUAL = Proc(HRESOURCE*, HRESOURCE*, LibC::BOOL)
  alias PRESUTIL_RESOURCE_TYPES_EQUAL = Proc(LibC::LPWSTR, HRESOURCE*, LibC::BOOL)
  alias PRESUTIL_IS_RESOURCE_CLASS_EQUAL = Proc(CLUS_RESOURCE_CLASS_INFO*, HRESOURCE*, LibC::BOOL)
  alias PRESUTIL_ENUM_RESOURCES = Proc(HRESOURCE*, LibC::LPWSTR, LPRESOURCE_CALLBACK, Void*, UInt32)
  alias PRESUTIL_ENUM_RESOURCES_EX = Proc(HCLUSTER*, HRESOURCE*, LibC::LPWSTR, LPRESOURCE_CALLBACK_EX, Void*, UInt32)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY = Proc(LibC::HANDLE, LibC::LPWSTR, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME = Proc(HCLUSTER*, LibC::HANDLE, LibC::LPWSTR, LibC::BOOL, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS = Proc(HCLUSTER*, LibC::HANDLE, CLUS_RESOURCE_CLASS_INFO*, LibC::BOOL, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY = Proc(LibC::LPWSTR, LibC::LPWSTR, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS = Proc(HRESOURCE*, Char*, UInt32*, Char*, UInt32*, Char*, UInt32*, UInt32)
  alias PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER = Proc(HCLUSTER*, HRESOURCE*, Char*, UInt32*, UInt32)
  alias PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL = Proc(UInt32, LibC::BOOL, UInt32*, PLOG_EVENT_ROUTINE, LibC::IntPtrT, UInt32)
  alias PRESUTIL_GET_PROPERTY_FORMATS = Proc(RESUTIL_PROPERTY_ITEM*, Void*, UInt32, UInt32*, UInt32*, UInt32)
  alias PRESUTIL_GET_CORE_CLUSTER_RESOURCES = Proc(HCLUSTER*, HRESOURCE**, HRESOURCE**, HRESOURCE**, UInt32)
  alias PRESUTIL_GET_RESOURCE_NAME = Proc(HRESOURCE*, Char*, UInt32*, UInt32)
  alias PCLUSTER_IS_PATH_ON_SHARED_VOLUME = Proc(LibC::LPWSTR, LibC::BOOL)
  alias PCLUSTER_GET_VOLUME_PATH_NAME = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL)
  alias PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL)
  alias PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32*, LibC::LPWSTR, UInt32*, UInt32)
  alias PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME = Proc(LibC::LPWSTR, UInt32)
  alias PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX = Proc(LibC::LPWSTR, SC_HANDLE, LibC::IntPtrT*, UInt32, PLOG_EVENT_ROUTINE, LibC::IntPtrT, UInt32)
  alias PRESUTIL_ENUM_RESOURCES_EX2 = Proc(HCLUSTER*, HRESOURCE*, LibC::LPWSTR, LPRESOURCE_CALLBACK_EX, Void*, UInt32, UInt32)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY_EX = Proc(LibC::HANDLE, LibC::LPWSTR, UInt32, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX = Proc(HCLUSTER*, LibC::HANDLE, LibC::LPWSTR, LibC::BOOL, UInt32, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX = Proc(HCLUSTER*, LibC::HANDLE, CLUS_RESOURCE_CLASS_INFO*, LibC::BOOL, UInt32, HRESOURCE*)
  alias PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX = Proc(LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESOURCE*)
  alias PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX = Proc(HCLUSTER*, HRESOURCE**, HRESOURCE**, HRESOURCE**, UInt32, UInt32)
  alias POPEN_CLUSTER_CRYPT_PROVIDER = Proc(LibC::LPWSTR, Int8*, UInt32, UInt32, HCLUSCRYPTPROVIDER*)
  alias POPEN_CLUSTER_CRYPT_PROVIDEREX = Proc(LibC::LPWSTR, LibC::LPWSTR, Int8*, UInt32, UInt32, HCLUSCRYPTPROVIDER*)
  alias PCLOSE_CLUSTER_CRYPT_PROVIDER = Proc(HCLUSCRYPTPROVIDER*, UInt32)
  alias PCLUSTER_ENCRYPT = Proc(HCLUSCRYPTPROVIDER*, UInt8*, UInt32, UInt8**, UInt32*, UInt32)
  alias PCLUSTER_DECRYPT = Proc(HCLUSCRYPTPROVIDER*, UInt8*, UInt32, UInt8**, UInt32*, UInt32)
  alias PFREE_CLUSTER_CRYPT = Proc(Void*, UInt32)
  alias PRES_UTIL_VERIFY_SHUTDOWN_SAFE = Proc(UInt32, UInt32, UInt32*, UInt32)
  alias PREGISTER_APPINSTANCE = Proc(LibC::HANDLE, Guid*, LibC::BOOL, UInt32)
  alias PREGISTER_APPINSTANCE_VERSION = Proc(Guid*, UInt64, UInt64, UInt32)
  alias PQUERY_APPINSTANCE_VERSION = Proc(Guid*, UInt64*, UInt64*, NTSTATUS*, UInt32)
  alias PRESET_ALL_APPINSTANCE_VERSIONS = Proc(UInt32)
  alias SET_APP_INSTANCE_CSV_FLAGS = Proc(LibC::HANDLE, UInt32, UInt32, UInt32)


  enum CLUSTER_QUORUM_TYPE : Int32
    OperationalQuorum = 0
    ModifyQuorum = 1
  end

  enum NODE_CLUSTER_STATE : Int32
    ClusterStateNotInstalled = 0
    ClusterStateNotConfigured = 1
    ClusterStateNotRunning = 3
    ClusterStateRunning = 19
  end

  enum CLUSTER_RESOURCE_STATE_CHANGE_REASON : Int32
    Eresourcestatechangereasonunknown = 0
    Eresourcestatechangereasonmove = 1
    Eresourcestatechangereasonfailover = 2
    Eresourcestatechangereasonfailedmove = 3
    Eresourcestatechangereasonshutdown = 4
    Eresourcestatechangereasonrundown = 5
  end

  enum CLUSTER_REG_COMMAND : Int32
    CLUSREG_COMMAND_NONE = 0
    CLUSREG_SET_VALUE = 1
    CLUSREG_CREATE_KEY = 2
    CLUSREG_DELETE_KEY = 3
    CLUSREG_DELETE_VALUE = 4
    CLUSREG_SET_KEY_SECURITY = 5
    CLUSREG_VALUE_DELETED = 6
    CLUSREG_READ_KEY = 7
    CLUSREG_READ_VALUE = 8
    CLUSREG_READ_ERROR = 9
    CLUSREG_CONTROL_COMMAND = 10
    CLUSREG_CONDITION_EXISTS = 11
    CLUSREG_CONDITION_NOT_EXISTS = 12
    CLUSREG_CONDITION_IS_EQUAL = 13
    CLUSREG_CONDITION_IS_NOT_EQUAL = 14
    CLUSREG_CONDITION_IS_GREATER_THAN = 15
    CLUSREG_CONDITION_IS_LESS_THAN = 16
    CLUSREG_CONDITION_KEY_EXISTS = 17
    CLUSREG_CONDITION_KEY_NOT_EXISTS = 18
    CLUSREG_LAST_COMMAND = 19
  end

  enum CLUSGROUP_TYPE : Int32
    ClusGroupTypeCoreCluster = 1
    ClusGroupTypeAvailableStorage = 2
    ClusGroupTypeTemporary = 3
    ClusGroupTypeSharedVolume = 4
    ClusGroupTypeStoragePool = 5
    ClusGroupTypeFileServer = 100
    ClusGroupTypePrintServer = 101
    ClusGroupTypeDhcpServer = 102
    ClusGroupTypeDtc = 103
    ClusGroupTypeMsmq = 104
    ClusGroupTypeWins = 105
    ClusGroupTypeStandAloneDfs = 106
    ClusGroupTypeGenericApplication = 107
    ClusGroupTypeGenericService = 108
    ClusGroupTypeGenericScript = 109
    ClusGroupTypeIScsiNameService = 110
    ClusGroupTypeVirtualMachine = 111
    ClusGroupTypeTsSessionBroker = 112
    ClusGroupTypeIScsiTarget = 113
    ClusGroupTypeScaleoutFileServer = 114
    ClusGroupTypeVMReplicaBroker = 115
    ClusGroupTypeTaskScheduler = 116
    ClusGroupTypeClusterUpdateAgent = 117
    ClusGroupTypeScaleoutCluster = 118
    ClusGroupTypeStorageReplica = 119
    ClusGroupTypeVMReplicaCoordinator = 120
    ClusGroupTypeCrossClusterOrchestrator = 121
    ClusGroupTypeInfrastructureFileServer = 122
    ClusGroupTypeCoreSddc = 123
    ClusGroupTypeUnknown = 9999
  end

  enum CLUSTER_MGMT_POINT_TYPE : Int32
    CLUSTER_MGMT_POINT_TYPE_NONE = 0
    CLUSTER_MGMT_POINT_TYPE_CNO = 1
    CLUSTER_MGMT_POINT_TYPE_DNS_ONLY = 2
    CLUSTER_MGMT_POINT_TYPE_CNO_ONLY = 3
  end

  enum CLUSTER_MGMT_POINT_RESTYPE : Int32
    CLUSTER_MGMT_POINT_RESTYPE_AUTO = 0
    CLUSTER_MGMT_POINT_RESTYPE_SNN = 1
    CLUSTER_MGMT_POINT_RESTYPE_DNN = 2
  end

  enum CLUSTER_CLOUD_TYPE : Int32
    CLUSTER_CLOUD_TYPE_NONE = 0
    CLUSTER_CLOUD_TYPE_AZURE = 1
    CLUSTER_CLOUD_TYPE_MIXED = 128
    CLUSTER_CLOUD_TYPE_UNKNOWN = -1
  end

  enum CLUS_GROUP_START_SETTING : Int32
    CLUS_GROUP_START_ALWAYS = 0
    CLUS_GROUP_DO_NOT_START = 1
    CLUS_GROUP_START_ALLOWED = 2
  end

  enum CLUS_AFFINITY_RULE_TYPE : Int32
    CLUS_AFFINITY_RULE_NONE = 0
    CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN = 1
    CLUS_AFFINITY_RULE_SAME_NODE = 2
    CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN = 3
    CLUS_AFFINITY_RULE_DIFFERENT_NODE = 4
    CLUS_AFFINITY_RULE_MIN = 0
    CLUS_AFFINITY_RULE_MAX = 4
  end

  enum CLUSTER_QUORUM_VALUE : Int32
    CLUSTER_QUORUM_MAINTAINED = 0
    CLUSTER_QUORUM_LOST = 1
  end

  enum CLUSTER_UPGRADE_PHASE : Int32
    ClusterUpgradePhaseInitialize = 1
    ClusterUpgradePhaseValidatingUpgrade = 2
    ClusterUpgradePhaseUpgradingComponents = 3
    ClusterUpgradePhaseInstallingNewComponents = 4
    ClusterUpgradePhaseUpgradeComplete = 5
  end

  enum CLUSTER_CHANGE : Int32
    CLUSTER_CHANGE_NODE_STATE = 1
    CLUSTER_CHANGE_NODE_DELETED = 2
    CLUSTER_CHANGE_NODE_ADDED = 4
    CLUSTER_CHANGE_NODE_PROPERTY = 8
    CLUSTER_CHANGE_REGISTRY_NAME = 16
    CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = 32
    CLUSTER_CHANGE_REGISTRY_VALUE = 64
    CLUSTER_CHANGE_REGISTRY_SUBTREE = 128
    CLUSTER_CHANGE_RESOURCE_STATE = 256
    CLUSTER_CHANGE_RESOURCE_DELETED = 512
    CLUSTER_CHANGE_RESOURCE_ADDED = 1024
    CLUSTER_CHANGE_RESOURCE_PROPERTY = 2048
    CLUSTER_CHANGE_GROUP_STATE = 4096
    CLUSTER_CHANGE_GROUP_DELETED = 8192
    CLUSTER_CHANGE_GROUP_ADDED = 16384
    CLUSTER_CHANGE_GROUP_PROPERTY = 32768
    CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = 65536
    CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = 131072
    CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY = 262144
    CLUSTER_CHANGE_CLUSTER_RECONNECT = 524288
    CLUSTER_CHANGE_NETWORK_STATE = 1048576
    CLUSTER_CHANGE_NETWORK_DELETED = 2097152
    CLUSTER_CHANGE_NETWORK_ADDED = 4194304
    CLUSTER_CHANGE_NETWORK_PROPERTY = 8388608
    CLUSTER_CHANGE_NETINTERFACE_STATE = 16777216
    CLUSTER_CHANGE_NETINTERFACE_DELETED = 33554432
    CLUSTER_CHANGE_NETINTERFACE_ADDED = 67108864
    CLUSTER_CHANGE_NETINTERFACE_PROPERTY = 134217728
    CLUSTER_CHANGE_QUORUM_STATE = 268435456
    CLUSTER_CHANGE_CLUSTER_STATE = 536870912
    CLUSTER_CHANGE_CLUSTER_PROPERTY = 1073741824
    CLUSTER_CHANGE_HANDLE_CLOSE = -2147483648
    CLUSTER_CHANGE_ALL = -1
  end

  enum CLUSTER_NOTIFICATIONS_VERSION : Int32
    CLUSTER_NOTIFICATIONS_V1 = 1
    CLUSTER_NOTIFICATIONS_V2 = 2
  end

  enum CLUSTER_CHANGE_CLUSTER_V2 : Int32
    CLUSTER_CHANGE_CLUSTER_RECONNECT_V2 = 1
    CLUSTER_CHANGE_CLUSTER_STATE_V2 = 2
    CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2 = 4
    CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2 = 8
    CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2 = 16
    CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2 = 32
    CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2 = 64
    CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2 = 128
    CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2 = 256
    CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2 = 512
    CLUSTER_CHANGE_CLUSTER_RENAME_V2 = 1024
    CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2 = 2048
    CLUSTER_CHANGE_CLUSTER_UPGRADED_V2 = 4096
    CLUSTER_CHANGE_CLUSTER_ALL_V2 = 8191
  end

  enum CLUSTER_CHANGE_GROUP_V2 : Int32
    CLUSTER_CHANGE_GROUP_DELETED_V2 = 1
    CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2 = 2
    CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2 = 4
    CLUSTER_CHANGE_GROUP_STATE_V2 = 8
    CLUSTER_CHANGE_GROUP_OWNER_NODE_V2 = 16
    CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2 = 32
    CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2 = 64
    CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2 = 128
    CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2 = 256
    CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2 = 512
    CLUSTER_CHANGE_GROUP_ALL_V2 = 1023
  end

  enum CLUSTER_CHANGE_GROUPSET_V2 : Int32
    CLUSTER_CHANGE_GROUPSET_DELETED_v2 = 1
    CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2 = 2
    CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2 = 4
    CLUSTER_CHANGE_GROUPSET_STATE_V2 = 8
    CLUSTER_CHANGE_GROUPSET_GROUP_ADDED = 16
    CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED = 32
    CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2 = 64
    CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2 = 128
    CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2 = 256
    CLUSTER_CHANGE_GROUPSET_ALL_V2 = 511
  end

  enum CLUSTER_CHANGE_RESOURCE_V2 : Int32
    CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2 = 1
    CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2 = 2
    CLUSTER_CHANGE_RESOURCE_STATE_V2 = 4
    CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2 = 8
    CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2 = 16
    CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2 = 32
    CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2 = 64
    CLUSTER_CHANGE_RESOURCE_DELETED_V2 = 128
    CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2 = 256
    CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2 = 512
    CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2 = 1024
    CLUSTER_CHANGE_RESOURCE_ALL_V2 = 2047
  end

  enum CLUSTER_CHANGE_RESOURCE_TYPE_V2 : Int32
    CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2 = 1
    CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2 = 2
    CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2 = 4
    CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2 = 8
    CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2 = 16
    CLUSTER_RESOURCE_TYPE_SPECIFIC_V2 = 32
    CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2 = 63
  end

  enum CLUSTER_CHANGE_NETINTERFACE_V2 : Int32
    CLUSTER_CHANGE_NETINTERFACE_DELETED_V2 = 1
    CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2 = 2
    CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2 = 4
    CLUSTER_CHANGE_NETINTERFACE_STATE_V2 = 8
    CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2 = 16
    CLUSTER_CHANGE_NETINTERFACE_ALL_V2 = 31
  end

  enum CLUSTER_CHANGE_NETWORK_V2 : Int32
    CLUSTER_CHANGE_NETWORK_DELETED_V2 = 1
    CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2 = 2
    CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2 = 4
    CLUSTER_CHANGE_NETWORK_STATE_V2 = 8
    CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2 = 16
    CLUSTER_CHANGE_NETWORK_ALL_V2 = 31
  end

  enum CLUSTER_CHANGE_NODE_V2 : Int32
    CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2 = 1
    CLUSTER_CHANGE_NODE_DELETED_V2 = 2
    CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2 = 4
    CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2 = 8
    CLUSTER_CHANGE_NODE_STATE_V2 = 16
    CLUSTER_CHANGE_NODE_GROUP_GAINED_V2 = 32
    CLUSTER_CHANGE_NODE_GROUP_LOST_V2 = 64
    CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2 = 128
    CLUSTER_CHANGE_NODE_ALL_V2 = 255
  end

  enum CLUSTER_CHANGE_REGISTRY_V2 : Int32
    CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2 = 1
    CLUSTER_CHANGE_REGISTRY_NAME_V2 = 2
    CLUSTER_CHANGE_REGISTRY_SUBTREE_V2 = 4
    CLUSTER_CHANGE_REGISTRY_VALUE_V2 = 8
    CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2 = 16
    CLUSTER_CHANGE_REGISTRY_ALL_V2 = 31
  end

  enum CLUSTER_CHANGE_QUORUM_V2 : Int32
    CLUSTER_CHANGE_QUORUM_STATE_V2 = 1
    CLUSTER_CHANGE_QUORUM_ALL_V2 = 1
  end

  enum CLUSTER_CHANGE_SHARED_VOLUME_V2 : Int32
    CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2 = 1
    CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2 = 2
    CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2 = 4
    CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2 = 7
  end

  enum CLUSTER_CHANGE_SPACEPORT_V2 : Int32
    CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2 = 1
  end

  enum CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 : Int32
    CLUSTER_CHANGE_UPGRADE_NODE_PREPARE = 1
    CLUSTER_CHANGE_UPGRADE_NODE_COMMIT = 2
    CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT = 4
    CLUSTER_CHANGE_UPGRADE_ALL = 7
  end

  enum CLUSTER_OBJECT_TYPE : Int32
    CLUSTER_OBJECT_TYPE_NONE = 0
    CLUSTER_OBJECT_TYPE_CLUSTER = 1
    CLUSTER_OBJECT_TYPE_GROUP = 2
    CLUSTER_OBJECT_TYPE_RESOURCE = 3
    CLUSTER_OBJECT_TYPE_RESOURCE_TYPE = 4
    CLUSTER_OBJECT_TYPE_NETWORK_INTERFACE = 5
    CLUSTER_OBJECT_TYPE_NETWORK = 6
    CLUSTER_OBJECT_TYPE_NODE = 7
    CLUSTER_OBJECT_TYPE_REGISTRY = 8
    CLUSTER_OBJECT_TYPE_QUORUM = 9
    CLUSTER_OBJECT_TYPE_SHARED_VOLUME = 10
    CLUSTER_OBJECT_TYPE_GROUPSET = 13
    CLUSTER_OBJECT_TYPE_AFFINITYRULE = 16
  end

  enum CLUSTERSET_OBJECT_TYPE : Int32
    CLUSTERSET_OBJECT_TYPE_NONE = 0
    CLUSTERSET_OBJECT_TYPE_MEMBER = 1
    CLUSTERSET_OBJECT_TYPE_WORKLOAD = 2
    CLUSTERSET_OBJECT_TYPE_DATABASE = 3
  end

  enum CLUSTER_ENUM : Int32
    CLUSTER_ENUM_NODE = 1
    CLUSTER_ENUM_RESTYPE = 2
    CLUSTER_ENUM_RESOURCE = 4
    CLUSTER_ENUM_GROUP = 8
    CLUSTER_ENUM_NETWORK = 16
    CLUSTER_ENUM_NETINTERFACE = 32
    CLUSTER_ENUM_SHARED_VOLUME_GROUP = 536870912
    CLUSTER_ENUM_SHARED_VOLUME_RESOURCE = 1073741824
    CLUSTER_ENUM_INTERNAL_NETWORK = -2147483648
    CLUSTER_ENUM_ALL = 63
  end

  enum CLUSTER_NODE_ENUM : Int32
    CLUSTER_NODE_ENUM_NETINTERFACES = 1
    CLUSTER_NODE_ENUM_GROUPS = 2
    CLUSTER_NODE_ENUM_PREFERRED_GROUPS = 4
    CLUSTER_NODE_ENUM_ALL = 3
  end

  enum CLUSTER_NODE_STATE : Int32
    ClusterNodeStateUnknown = -1
    ClusterNodeUp = 0
    ClusterNodeDown = 1
    ClusterNodePaused = 2
    ClusterNodeJoining = 3
  end

  enum CLUSTER_STORAGENODE_STATE : Int32
    ClusterStorageNodeStateUnknown = 0
    ClusterStorageNodeUp = 1
    ClusterStorageNodeDown = 2
    ClusterStorageNodePaused = 3
    ClusterStorageNodeStarting = 4
    ClusterStorageNodeStopping = 5
  end

  enum CLUSTER_NODE_DRAIN_STATUS : Int32
    NodeDrainStatusNotInitiated = 0
    NodeDrainStatusInProgress = 1
    NodeDrainStatusCompleted = 2
    NodeDrainStatusFailed = 3
    ClusterNodeDrainStatusCount = 4
  end

  enum CLUSTER_NODE_STATUS : Int32
    NodeStatusNormal = 0
    NodeStatusIsolated = 1
    NodeStatusQuarantined = 2
    NodeStatusDrainInProgress = 4
    NodeStatusDrainCompleted = 8
    NodeStatusDrainFailed = 16
    NodeStatusAvoidPlacement = 32
    NodeStatusMax = 51
  end

  enum CLUSTER_GROUP_ENUM : Int32
    CLUSTER_GROUP_ENUM_CONTAINS = 1
    CLUSTER_GROUP_ENUM_NODES = 2
    CLUSTER_GROUP_ENUM_ALL = 3
  end

  enum CLUSTER_GROUP_STATE : Int32
    ClusterGroupStateUnknown = -1
    ClusterGroupOnline = 0
    ClusterGroupOffline = 1
    ClusterGroupFailed = 2
    ClusterGroupPartialOnline = 3
    ClusterGroupPending = 4
  end

  enum CLUSTER_GROUP_PRIORITY : Int32
    PriorityDisabled = 0
    PriorityLow = 1000
    PriorityMedium = 2000
    PriorityHigh = 3000
  end

  enum CLUSTER_GROUP_AUTOFAILBACK_TYPE : Int32
    ClusterGroupPreventFailback = 0
    ClusterGroupAllowFailback = 1
    ClusterGroupFailbackTypeCount = 2
  end

  enum CLUSTER_NODE_RESUME_FAILBACK_TYPE : Int32
    DoNotFailbackGroups = 0
    FailbackGroupsImmediately = 1
    FailbackGroupsPerPolicy = 2
    ClusterNodeResumeFailbackTypeCount = 3
  end

  enum CLUSTER_RESOURCE_STATE : Int32
    ClusterResourceStateUnknown = -1
    ClusterResourceInherited = 0
    ClusterResourceInitializing = 1
    ClusterResourceOnline = 2
    ClusterResourceOffline = 3
    ClusterResourceFailed = 4
    ClusterResourcePending = 128
    ClusterResourceOnlinePending = 129
    ClusterResourceOfflinePending = 130
  end

  enum CLUSTER_RESOURCE_RESTART_ACTION : Int32
    ClusterResourceDontRestart = 0
    ClusterResourceRestartNoNotify = 1
    ClusterResourceRestartNotify = 2
    ClusterResourceRestartActionCount = 3
  end

  enum CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION : Int32
    ClusterResourceEmbeddedFailureActionNone = 0
    ClusterResourceEmbeddedFailureActionLogOnly = 1
    ClusterResourceEmbeddedFailureActionRecover = 2
  end

  enum CLUSTER_RESOURCE_CREATE_FLAGS : Int32
    CLUSTER_RESOURCE_DEFAULT_MONITOR = 0
    CLUSTER_RESOURCE_SEPARATE_MONITOR = 1
    CLUSTER_RESOURCE_VALID_FLAGS = 1
  end

  enum CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE : Int32
    ClusterSharedVolumeSnapshotStateUnknown = 0
    ClusterSharedVolumePrepareForHWSnapshot = 1
    ClusterSharedVolumeHWSnapshotCompleted = 2
    ClusterSharedVolumePrepareForFreeze = 3
  end

  enum CLUSTER_PROPERTY_TYPE : Int32
    CLUSPROP_TYPE_UNKNOWN = -1
    CLUSPROP_TYPE_ENDMARK = 0
    CLUSPROP_TYPE_LIST_VALUE = 1
    CLUSPROP_TYPE_RESCLASS = 2
    CLUSPROP_TYPE_RESERVED1 = 3
    CLUSPROP_TYPE_NAME = 4
    CLUSPROP_TYPE_SIGNATURE = 5
    CLUSPROP_TYPE_SCSI_ADDRESS = 6
    CLUSPROP_TYPE_DISK_NUMBER = 7
    CLUSPROP_TYPE_PARTITION_INFO = 8
    CLUSPROP_TYPE_FTSET_INFO = 9
    CLUSPROP_TYPE_DISK_SERIALNUMBER = 10
    CLUSPROP_TYPE_DISK_GUID = 11
    CLUSPROP_TYPE_DISK_SIZE = 12
    CLUSPROP_TYPE_PARTITION_INFO_EX = 13
    CLUSPROP_TYPE_PARTITION_INFO_EX2 = 14
    CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR = 15
    CLUSPROP_TYPE_USER = 32768
  end

  enum CLUSTER_PROPERTY_FORMAT : Int32
    CLUSPROP_FORMAT_UNKNOWN = 0
    CLUSPROP_FORMAT_BINARY = 1
    CLUSPROP_FORMAT_DWORD = 2
    CLUSPROP_FORMAT_SZ = 3
    CLUSPROP_FORMAT_EXPAND_SZ = 4
    CLUSPROP_FORMAT_MULTI_SZ = 5
    CLUSPROP_FORMAT_ULARGE_INTEGER = 6
    CLUSPROP_FORMAT_LONG = 7
    CLUSPROP_FORMAT_EXPANDED_SZ = 8
    CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = 9
    CLUSPROP_FORMAT_LARGE_INTEGER = 10
    CLUSPROP_FORMAT_WORD = 11
    CLUSPROP_FORMAT_FILETIME = 12
    CLUSPROP_FORMAT_VALUE_LIST = 13
    CLUSPROP_FORMAT_PROPERTY_LIST = 14
    CLUSPROP_FORMAT_USER = 32768
  end

  enum CLUSTER_PROPERTY_SYNTAX : UInt32
    CLUSPROP_SYNTAX_ENDMARK = 0
    CLUSPROP_SYNTAX_NAME = 262147
    CLUSPROP_SYNTAX_RESCLASS = 131074
    CLUSPROP_SYNTAX_LIST_VALUE_SZ = 65539
    CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 65540
    CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 65538
    CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 65537
    CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 65541
    CLUSPROP_SYNTAX_LIST_VALUE_LONG = 65543
    CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = 65544
    CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = 65545
    CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = 65546
    CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = 65542
    CLUSPROP_SYNTAX_LIST_VALUE_WORD = 65547
    CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST = 65550
    CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = 65548
    CLUSPROP_SYNTAX_DISK_SIGNATURE = 327682
    CLUSPROP_SYNTAX_SCSI_ADDRESS = 393218
    CLUSPROP_SYNTAX_DISK_NUMBER = 458754
    CLUSPROP_SYNTAX_PARTITION_INFO = 524289
    CLUSPROP_SYNTAX_FTSET_INFO = 589825
    CLUSPROP_SYNTAX_DISK_SERIALNUMBER = 655363
    CLUSPROP_SYNTAX_DISK_GUID = 720899
    CLUSPROP_SYNTAX_DISK_SIZE = 786438
    CLUSPROP_SYNTAX_PARTITION_INFO_EX = 851969
    CLUSPROP_SYNTAX_PARTITION_INFO_EX2 = 917505
    CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR = 983041
  end

  enum CLUSTER_CONTROL_OBJECT : Int32
    CLUS_OBJECT_INVALID = 0
    CLUS_OBJECT_RESOURCE = 1
    CLUS_OBJECT_RESOURCE_TYPE = 2
    CLUS_OBJECT_GROUP = 3
    CLUS_OBJECT_NODE = 4
    CLUS_OBJECT_NETWORK = 5
    CLUS_OBJECT_NETINTERFACE = 6
    CLUS_OBJECT_CLUSTER = 7
    CLUS_OBJECT_GROUPSET = 8
    CLUS_OBJECT_AFFINITYRULE = 9
    CLUS_OBJECT_USER = 128
  end

  enum CLCTL_CODES : Int32
    CLCTL_UNKNOWN = 0
    CLCTL_GET_CHARACTERISTICS = 5
    CLCTL_GET_FLAGS = 9
    CLCTL_GET_CLASS_INFO = 13
    CLCTL_GET_REQUIRED_DEPENDENCIES = 17
    CLCTL_GET_ARB_TIMEOUT = 21
    CLCTL_GET_FAILURE_INFO = 25
    CLCTL_GET_NAME = 41
    CLCTL_GET_RESOURCE_TYPE = 45
    CLCTL_GET_NODE = 49
    CLCTL_GET_NETWORK = 53
    CLCTL_GET_ID = 57
    CLCTL_GET_FQDN = 61
    CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 65
    CLCTL_CHECK_VOTER_EVICT = 69
    CLCTL_CHECK_VOTER_DOWN = 73
    CLCTL_SHUTDOWN = 77
    CLCTL_ENUM_COMMON_PROPERTIES = 81
    CLCTL_GET_RO_COMMON_PROPERTIES = 85
    CLCTL_GET_COMMON_PROPERTIES = 89
    CLCTL_SET_COMMON_PROPERTIES = 4194398
    CLCTL_VALIDATE_COMMON_PROPERTIES = 97
    CLCTL_GET_COMMON_PROPERTY_FMTS = 101
    CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = 105
    CLCTL_ENUM_PRIVATE_PROPERTIES = 121
    CLCTL_GET_RO_PRIVATE_PROPERTIES = 125
    CLCTL_GET_PRIVATE_PROPERTIES = 129
    CLCTL_SET_PRIVATE_PROPERTIES = 4194438
    CLCTL_VALIDATE_PRIVATE_PROPERTIES = 137
    CLCTL_GET_PRIVATE_PROPERTY_FMTS = 141
    CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 145
    CLCTL_ADD_REGISTRY_CHECKPOINT = 4194466
    CLCTL_DELETE_REGISTRY_CHECKPOINT = 4194470
    CLCTL_GET_REGISTRY_CHECKPOINTS = 169
    CLCTL_ADD_CRYPTO_CHECKPOINT = 4194478
    CLCTL_DELETE_CRYPTO_CHECKPOINT = 4194482
    CLCTL_GET_CRYPTO_CHECKPOINTS = 181
    CLCTL_RESOURCE_UPGRADE_DLL = 4194490
    CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = 4194494
    CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = 4194498
    CLCTL_GET_LOADBAL_PROCESS_LIST = 201
    CLCTL_SET_ACCOUNT_ACCESS = 4194546
    CLCTL_GET_NETWORK_NAME = 361
    CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 365
    CLCTL_NETNAME_REGISTER_DNS_RECORDS = 370
    CLCTL_GET_DNS_NAME = 373
    CLCTL_NETNAME_SET_PWD_INFO = 378
    CLCTL_NETNAME_DELETE_CO = 382
    CLCTL_NETNAME_VALIDATE_VCO = 385
    CLCTL_NETNAME_RESET_VCO = 389
    CLCTL_NETNAME_REPAIR_VCO = 397
    CLCTL_STORAGE_GET_DISK_INFO = 401
    CLCTL_STORAGE_GET_AVAILABLE_DISKS = 405
    CLCTL_STORAGE_IS_PATH_VALID = 409
    CLCTL_STORAGE_SYNC_CLUSDISK_DB = 4194718
    CLCTL_STORAGE_GET_DISK_NUMBER_INFO = 417
    CLCTL_QUERY_DELETE = 441
    CLCTL_IPADDRESS_RENEW_LEASE = 4194750
    CLCTL_IPADDRESS_RELEASE_LEASE = 4194754
    CLCTL_QUERY_MAINTENANCE_MODE = 481
    CLCTL_SET_MAINTENANCE_MODE = 4194790
    CLCTL_STORAGE_SET_DRIVELETTER = 4194794
    CLCTL_STORAGE_GET_DRIVELETTERS = 493
    CLCTL_STORAGE_GET_DISK_INFO_EX = 497
    CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = 501
    CLCTL_STORAGE_GET_DISK_INFO_EX2 = 505
    CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT = 509
    CLCTL_STORAGE_REMAP_DRIVELETTER = 513
    CLCTL_STORAGE_GET_DISKID = 517
    CLCTL_STORAGE_IS_CLUSTERABLE = 521
    CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = 4194830
    CLCTL_STORAGE_GET_MOUNTPOINTS = 529
    CLCTL_STORAGE_GET_DIRTY = 537
    CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = 549
    CLCTL_STORAGE_IS_CSV_FILE = 553
    CLCTL_STORAGE_GET_RESOURCEID = 557
    CLCTL_VALIDATE_PATH = 561
    CLCTL_VALIDATE_NETNAME = 565
    CLCTL_VALIDATE_DIRECTORY = 569
    CLCTL_BATCH_BLOCK_KEY = 574
    CLCTL_BATCH_UNBLOCK_KEY = 577
    CLCTL_FILESERVER_SHARE_ADD = 4194886
    CLCTL_FILESERVER_SHARE_DEL = 4194890
    CLCTL_FILESERVER_SHARE_MODIFY = 4194894
    CLCTL_FILESERVER_SHARE_REPORT = 593
    CLCTL_NETNAME_GET_OU_FOR_VCO = 4194926
    CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = 4194954
    CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = 4194958
    CLCTL_GET_SHARED_VOLUME_ID = 657
    CLCTL_SET_CSV_MAINTENANCE_MODE = 4194966
    CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = 4194970
    CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 669
    CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = 4194978
    CLCTL_STORAGE_IS_SHARED_VOLUME = 677
    CLCTL_GET_CLUSDB_TIMESTAMP = 681
    CLCTL_RW_MODIFY_NOOP = 4194990
    CLCTL_IS_QUORUM_BLOCKED = 689
    CLCTL_POOL_GET_DRIVE_INFO = 693
    CLCTL_GET_GUM_LOCK_OWNER = 697
    CLCTL_GET_STUCK_NODES = 701
    CLCTL_INJECT_GEM_FAULT = 705
    CLCTL_INTRODUCE_GEM_REPAIR_DELAY = 709
    CLCTL_SEND_DUMMY_GEM_MESSAGES = 713
    CLCTL_BLOCK_GEM_SEND_RECV = 717
    CLCTL_GET_GEMID_VECTOR = 721
    CLCTL_ADD_CRYPTO_CHECKPOINT_EX = 4195030
    CLCTL_GROUP_GET_LAST_MOVE_TIME = 729
    CLCTL_SET_STORAGE_CONFIGURATION = 4195042
    CLCTL_GET_STORAGE_CONFIGURATION = 741
    CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES = 745
    CLCTL_REMOVE_NODE = 4195054
    CLCTL_IS_FEATURE_INSTALLED = 753
    CLCTL_IS_S2D_FEATURE_SUPPORTED = 757
    CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO = 761
    CLCTL_STORAGE_GET_CLUSBFLT_PATHS = 765
    CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO = 769
    CLCTL_CLEAR_NODE_CONNECTION_INFO = 4195078
    CLCTL_SET_DNS_DOMAIN = 4195082
    CTCTL_GET_ROUTESTATUS_BASIC = 781
    CTCTL_GET_ROUTESTATUS_EXTENDED = 785
    CTCTL_GET_FAULT_DOMAIN_STATE = 789
    CLCTL_NETNAME_SET_PWD_INFOEX = 794
    CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 8161
    CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 8417
    CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 4202726
    CLCTL_RESOURCE_PREPARE_UPGRADE = 4202730
    CLCTL_RESOURCE_UPGRADE_COMPLETED = 4202734
    CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 8433
    CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 4202742
    CLCTL_REPLICATION_ADD_REPLICATION_GROUP = 8514
    CLCTL_REPLICATION_GET_LOG_INFO = 8517
    CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS = 8521
    CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 8525
    CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 8529
    CLCTL_REPLICATION_GET_REPLICATED_DISKS = 8533
    CLCTL_REPLICATION_GET_REPLICA_VOLUMES = 8537
    CLCTL_REPLICATION_GET_LOG_VOLUME = 8541
    CLCTL_REPLICATION_GET_RESOURCE_GROUP = 8545
    CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO = 8549
    CLCTL_GET_STATE_CHANGE_TIME = 11613
    CLCTL_SET_CLUSTER_S2D_ENABLED = 4205922
    CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 4205934
    CLCTL_GROUPSET_GET_GROUPS = 11633
    CLCTL_GROUPSET_GET_PROVIDER_GROUPS = 11637
    CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 11641
    CLCTL_GROUP_GET_PROVIDER_GROUPS = 11645
    CLCTL_GROUP_GET_PROVIDER_GROUPSETS = 11649
    CLCTL_GROUP_SET_CCF_FROM_MASTER = 4205958
    CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER = 11657
    CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER = 4205966
    CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED = 4205970
    CLCTL_SCALEOUT_COMMAND = 4205974
    CLCTL_SCALEOUT_CONTROL = 4205978
    CLCTL_SCALEOUT_GET_CLUSTERS = 4205981
    CLCTL_RELOAD_AUTOLOGGER_CONFIG = 11730
    CLCTL_STORAGE_RENAME_SHARED_VOLUME = 11734
    CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID = 11738
    CLCTL_ENUM_AFFINITY_RULE_NAMES = 11741
    CLCTL_GET_NODES_IN_FD = 11745
    CLCTL_FORCE_DB_FLUSH = 4206054
    CLCTL_DELETE = 5242886
    CLCTL_INSTALL_NODE = 5242890
    CLCTL_EVICT_NODE = 5242894
    CLCTL_ADD_DEPENDENCY = 5242898
    CLCTL_REMOVE_DEPENDENCY = 5242902
    CLCTL_ADD_OWNER = 5242906
    CLCTL_REMOVE_OWNER = 5242910
    CLCTL_SET_NAME = 5242918
    CLCTL_CLUSTER_NAME_CHANGED = 5242922
    CLCTL_CLUSTER_VERSION_CHANGED = 5242926
    CLCTL_FIXUP_ON_UPGRADE = 5242930
    CLCTL_STARTING_PHASE1 = 5242934
    CLCTL_STARTING_PHASE2 = 5242938
    CLCTL_HOLD_IO = 5242942
    CLCTL_RESUME_IO = 5242946
    CLCTL_FORCE_QUORUM = 5242950
    CLCTL_INITIALIZE = 5242954
    CLCTL_STATE_CHANGE_REASON = 5242958
    CLCTL_PROVIDER_STATE_CHANGE = 5242962
    CLCTL_LEAVING_GROUP = 5242966
    CLCTL_JOINING_GROUP = 5242970
    CLCTL_FSWITNESS_GET_EPOCH_INFO = 1048669
    CLCTL_FSWITNESS_SET_EPOCH_INFO = 5242978
    CLCTL_FSWITNESS_RELEASE_LOCK = 5242982
    CLCTL_NETNAME_CREDS_NOTIFYCAM = 5242986
    CLCTL_NOTIFY_QUORUM_STATUS = 5243006
    CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN = 1048705
    CLCTL_UNDELETE = 5243014
    CLCTL_GET_OPERATION_CONTEXT = 1057001
    CLCTL_NOTIFY_OWNER_CHANGE = 5251362
    CLCTL_VALIDATE_CHANGE_GROUP = 1057061
    CLCTL_CHECK_DRAIN_VETO = 1057069
    CLCTL_NOTIFY_DRAIN_COMPLETE = 1057073
  end

  enum CLUSCTL_RESOURCE_CODES : Int32
    CLUSCTL_RESOURCE_UNKNOWN = 16777216
    CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 16777221
    CLUSCTL_RESOURCE_GET_FLAGS = 16777225
    CLUSCTL_RESOURCE_GET_CLASS_INFO = 16777229
    CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 16777233
    CLUSCTL_RESOURCE_GET_NAME = 16777257
    CLUSCTL_RESOURCE_GET_ID = 16777273
    CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 16777261
    CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 16777297
    CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 16777301
    CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 16777305
    CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 20971614
    CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 16777313
    CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = 16777317
    CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 16777337
    CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 16777341
    CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 16777345
    CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 20971654
    CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 16777353
    CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = 16777357
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 20971682
    CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 20971686
    CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 16777385
    CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = 20971694
    CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = 20971698
    CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX = 20972246
    CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = 16777397
    CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 16777417
    CLUSCTL_RESOURCE_GET_NETWORK_NAME = 16777577
    CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 16777581
    CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = 16777594
    CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX = 16778010
    CLUSCTL_RESOURCE_NETNAME_DELETE_CO = 16777598
    CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = 16777601
    CLUSCTL_RESOURCE_NETNAME_RESET_VCO = 16777605
    CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO = 16777613
    CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = 16777586
    CLUSCTL_RESOURCE_GET_DNS_NAME = 16777589
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 16777617
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO = 16777633
    CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 16777625
    CLUSCTL_RESOURCE_QUERY_DELETE = 16777657
    CLUSCTL_RESOURCE_UPGRADE_DLL = 20971706
    CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = 20971966
    CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = 20971970
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = 20971710
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = 20971714
    CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = 16777697
    CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = 20972006
    CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = 20972010
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = 16777713
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2 = 16777721
    CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = 16777745
    CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = 16777753
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = 16777765
    CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = 20972182
    CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = 20972170
    CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = 20972174
    CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = 20972186
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 16777885
    CLUSCTL_RESOURCE_GET_FAILURE_INFO = 16777241
    CLUSCTL_RESOURCE_STORAGE_GET_DISKID = 16777733
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = 20972194
    CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = 16777893
    CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED = 16777905
    CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO = 16777909
    CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN = 16777581
    CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO = 16777594
    CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX = 16778010
    CLUSCTL_RESOURCE_DELETE = 22020102
    CLUSCTL_RESOURCE_UNDELETE = 22020230
    CLUSCTL_RESOURCE_INSTALL_NODE = 22020106
    CLUSCTL_RESOURCE_EVICT_NODE = 22020110
    CLUSCTL_RESOURCE_ADD_DEPENDENCY = 22020114
    CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 22020118
    CLUSCTL_RESOURCE_ADD_OWNER = 22020122
    CLUSCTL_RESOURCE_REMOVE_OWNER = 22020126
    CLUSCTL_RESOURCE_SET_NAME = 22020134
    CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 22020138
    CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = 22020142
    CLUSCTL_RESOURCE_FORCE_QUORUM = 22020166
    CLUSCTL_RESOURCE_INITIALIZE = 22020170
    CLUSCTL_RESOURCE_STATE_CHANGE_REASON = 22020174
    CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = 22020178
    CLUSCTL_RESOURCE_LEAVING_GROUP = 22020182
    CLUSCTL_RESOURCE_JOINING_GROUP = 22020186
    CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = 17825885
    CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = 22020194
    CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = 22020198
    CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = 22020202
    CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = 17834217
    CLUSCTL_RESOURCE_RW_MODIFY_NOOP = 20972206
    CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS = 22020222
    CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE = 22028578
    CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP = 17834277
    CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME = 16788950
    CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID = 16788954
    CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 20979942
    CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 20979958
    CLUSCTL_RESOURCE_PREPARE_UPGRADE = 20979946
    CLUSCTL_RESOURCE_UPGRADE_COMPLETED = 20979950
    CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME = 16788829
    CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER = 16788873
    CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER = 20983182
    CLUSCTL_RESOURCE_SCALEOUT_COMMAND = 20983190
    CLUSCTL_RESOURCE_SCALEOUT_CONTROL = 20983194
    CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS = 20983197
    CLUSCTL_RESOURCE_CHECK_DRAIN_VETO = 17834285
    CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE = 17834289
    CLUSCTL_RESOURCE_GET_NODES_IN_FD = 16788961
  end

  enum CLUSCTL_RESOURCE_TYPE_CODES : Int32
    CLUSCTL_RESOURCE_TYPE_UNKNOWN = 33554432
    CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 33554437
    CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 33554441
    CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 33554445
    CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 33554449
    CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = 33554453
    CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 33554513
    CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 33554517
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 33554521
    CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 33554529
    CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 37748830
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = 33554533
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = 33554537
    CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 33554553
    CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 33554557
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 33554561
    CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 37748870
    CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 33554569
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = 33554573
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 33554577
    CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 33554601
    CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = 33554613
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 33554837
    CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = 37749150
    CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = 33554997
    CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO = 37749358
    CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = 33554993
    CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = 33555001
    CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = 33554993
    CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = 33554873
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = 33554925
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = 33554933
    CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = 33554945
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = 33554949
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = 33554989
    CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = 33554953
    CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = 37749262
    CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = 16777769
    CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = 33554993
    CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 38797322
    CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 38797326
    CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = 38797358
    CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = 38797362
    CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = 38797366
    CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = 38797370
    CLUSCTL_RESOURCE_TYPE_HOLD_IO = 38797374
    CLUSCTL_RESOURCE_TYPE_RESUME_IO = 38797378
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 33562593
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS = 33562953
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 33562957
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 33562961
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS = 33562965
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES = 33562969
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME = 33562973
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP = 33562977
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO = 33562981
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO = 33562949
    CLUSCTL_RESOURCE_TYPE_REPLICATION_ADD_REPLICATION_GROUP = 33562946
    CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 33562849
    CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 33562865
    CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE = 37757162
    CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED = 37757166
    CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN = 34603137
    CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO = 34611501
    CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE = 34611505
  end

  enum CLUSCTL_GROUP_CODES : Int32
    CLUSCTL_GROUP_UNKNOWN = 50331648
    CLUSCTL_GROUP_GET_CHARACTERISTICS = 50331653
    CLUSCTL_GROUP_GET_FLAGS = 50331657
    CLUSCTL_GROUP_GET_NAME = 50331689
    CLUSCTL_GROUP_GET_ID = 50331705
    CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 50331729
    CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 50331733
    CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 50331737
    CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 54526046
    CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 50331745
    CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 50331769
    CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 50331773
    CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 50331777
    CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 54526086
    CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 50331785
    CLUSCTL_GROUP_QUERY_DELETE = 50332089
    CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = 50331749
    CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = 50331789
    CLUSCTL_GROUP_GET_FAILURE_INFO = 50331673
    CLUSCTL_GROUP_GET_LAST_MOVE_TIME = 50332377
    CLUSCTL_GROUP_SET_CCF_FROM_MASTER = 54537606
  end

  enum CLUSCTL_NODE_CODES : Int32
    CLUSCTL_NODE_UNKNOWN = 67108864
    CLUSCTL_NODE_GET_CHARACTERISTICS = 67108869
    CLUSCTL_NODE_GET_FLAGS = 67108873
    CLUSCTL_NODE_GET_NAME = 67108905
    CLUSCTL_NODE_GET_ID = 67108921
    CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 67108945
    CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 67108949
    CLUSCTL_NODE_GET_COMMON_PROPERTIES = 67108953
    CLUSCTL_NODE_SET_COMMON_PROPERTIES = 71303262
    CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 67108961
    CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 67108985
    CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 67108989
    CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 67108993
    CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 71303302
    CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 67109001
    CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = 67108965
    CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = 67109005
    CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 67108929
    CLUSCTL_NODE_GET_STUCK_NODES = 67109565
    CLUSCTL_NODE_INJECT_GEM_FAULT = 67109569
    CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY = 67109573
    CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES = 67109577
    CLUSCTL_NODE_BLOCK_GEM_SEND_RECV = 67109581
    CLUSCTL_NODE_GET_GEMID_VECTOR = 67109585
  end

  enum CLUSCTL_NETWORK_CODES : Int32
    CLUSCTL_NETWORK_UNKNOWN = 83886080
    CLUSCTL_NETWORK_GET_CHARACTERISTICS = 83886085
    CLUSCTL_NETWORK_GET_FLAGS = 83886089
    CLUSCTL_NETWORK_GET_NAME = 83886121
    CLUSCTL_NETWORK_GET_ID = 83886137
    CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 83886161
    CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 83886165
    CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 83886169
    CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 88080478
    CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 83886177
    CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 83886201
    CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 83886205
    CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 83886209
    CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 88080518
    CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 83886217
    CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = 83886181
    CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = 83886221
  end

  enum CLUSCTL_NETINTERFACE_CODES : Int32
    CLUSCTL_NETINTERFACE_UNKNOWN = 100663296
    CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 100663301
    CLUSCTL_NETINTERFACE_GET_FLAGS = 100663305
    CLUSCTL_NETINTERFACE_GET_NAME = 100663337
    CLUSCTL_NETINTERFACE_GET_ID = 100663353
    CLUSCTL_NETINTERFACE_GET_NODE = 100663345
    CLUSCTL_NETINTERFACE_GET_NETWORK = 100663349
    CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 100663377
    CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 100663381
    CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 100663385
    CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 104857694
    CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 100663393
    CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 100663417
    CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 100663421
    CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 100663425
    CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 104857734
    CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 100663433
    CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = 100663397
    CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = 100663437
  end

  enum CLUSCTL_CLUSTER_CODES : Int32
    CLUSCTL_CLUSTER_UNKNOWN = 117440512
    CLUSCTL_CLUSTER_GET_FQDN = 117440573
    CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION = 121635554
    CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION = 117441253
    CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES = 117441257
    CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = 117440593
    CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = 117440597
    CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = 117440601
    CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = 121634910
    CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = 117440609
    CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = 117440633
    CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = 117440637
    CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = 117440641
    CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = 121634950
    CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = 117440649
    CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = 117440613
    CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = 117440653
    CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = 117440581
    CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = 117440585
    CLUSCTL_CLUSTER_SHUTDOWN = 117440589
    CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = 117441086
    CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = 117441089
    CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = 117441169
    CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = 117441193
    CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER = 117441209
    CLUSCTL_CLUSTER_REMOVE_NODE = 121635566
    CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS = 121635058
    CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO = 121635590
    CLUSCTL_CLUSTER_SET_DNS_DOMAIN = 121635594
    CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED = 121646434
    CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 121646446
    CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME = 117452246
    CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID = 117452250
    CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG = 117452242
    CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES = 117452253
    CLUSCTL_CLUSTER_GET_NODES_IN_FD = 117452257
    CLUSCTL_CLUSTER_FORCE_FLUSH_DB = 121646566
    CLUSCTL_CLUSTER_GET_CLMUSR_TOKEN = 117440877
  end

  enum CLUSCTL_GROUPSET_CODES : Int32
    CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES = 134217817
    CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES = 134217813
    CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES = 138412126
    CLUSCTL_GROUPSET_GET_GROUPS = 134229361
    CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS = 134229365
    CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 134229369
    CLUSCTL_GROUP_GET_PROVIDER_GROUPS = 134229373
    CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS = 134229377
    CLUSCTL_GROUPSET_GET_ID = 134217785
  end

  enum CLUSCTL_AFFINITYRULE_CODES : Int32
    CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES = 150995033
    CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES = 150995029
    CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES = 155189342
    CLUSCTL_AFFINITYRULE_GET_ID = 150995001
    CLUSCTL_AFFINITYRULE_GET_GROUPNAMES = 151006577
  end

  enum CLUSTER_RESOURCE_CLASS : Int32
    CLUS_RESCLASS_UNKNOWN = 0
    CLUS_RESCLASS_STORAGE = 1
    CLUS_RESCLASS_NETWORK = 2
    CLUS_RESCLASS_USER = 32768
  end

  enum CLUS_RESSUBCLASS : Int32
    CLUS_RESSUBCLASS_SHARED = -2147483648
  end

  enum CLUS_RESSUBCLASS_STORAGE : Int32
    CLUS_RESSUBCLASS_STORAGE_SHARED_BUS = -2147483648
    CLUS_RESSUBCLASS_STORAGE_DISK = 1073741824
    CLUS_RESSUBCLASS_STORAGE_REPLICATION = 268435456
  end

  enum CLUS_RESSUBCLASS_NETWORK : Int32
    CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL = -2147483648
  end

  enum CLUS_CHARACTERISTICS : Int32
    CLUS_CHAR_UNKNOWN = 0
    CLUS_CHAR_QUORUM = 1
    CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 2
    CLUS_CHAR_LOCAL_QUORUM = 4
    CLUS_CHAR_LOCAL_QUORUM_DEBUG = 8
    CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = 16
    CLUS_CHAR_BROADCAST_DELETE = 32
    CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = 64
    CLUS_CHAR_SINGLE_GROUP_INSTANCE = 128
    CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = 256
    CLUS_CHAR_PLACEMENT_DATA = 512
    CLUS_CHAR_MONITOR_DETACH = 1024
    CLUS_CHAR_MONITOR_REATTACH = 2048
    CLUS_CHAR_OPERATION_CONTEXT = 4096
    CLUS_CHAR_CLONES = 8192
    CLUS_CHAR_NOT_PREEMPTABLE = 16384
    CLUS_CHAR_NOTIFY_NEW_OWNER = 32768
    CLUS_CHAR_SUPPORTS_UNMONITORED_STATE = 65536
    CLUS_CHAR_INFRASTRUCTURE = 131072
    CLUS_CHAR_VETO_DRAIN = 262144
    CLUS_CHAR_DRAIN_LOCAL_OFFLINE = 524288
  end

  enum CLUS_FLAGS : Int32
    CLUS_FLAG_CORE = 1
  end

  enum CLUSPROP_PIFLAGS : Int32
    CLUSPROP_PIFLAG_STICKY = 1
    CLUSPROP_PIFLAG_REMOVABLE = 2
    CLUSPROP_PIFLAG_USABLE = 4
    CLUSPROP_PIFLAG_DEFAULT_QUORUM = 8
    CLUSPROP_PIFLAG_USABLE_FOR_CSV = 16
    CLUSPROP_PIFLAG_ENCRYPTION_ENABLED = 32
    CLUSPROP_PIFLAG_RAW = 64
    CLUSPROP_PIFLAG_UNKNOWN = -2147483648
  end

  enum CLUSTER_CSV_VOLUME_FAULT_STATE : Int32
    VolumeStateNoFaults = 0
    VolumeStateNoDirectIO = 1
    VolumeStateNoAccess = 2
    VolumeStateInMaintenance = 4
    VolumeStateDismounted = 8
  end

  enum CLUSTER_SHARED_VOLUME_BACKUP_STATE : Int32
    VolumeBackupNone = 0
    VolumeBackupInProgress = 1
  end

  enum CLUSTER_SHARED_VOLUME_STATE : Int32
    SharedVolumeStateUnavailable = 0
    SharedVolumeStatePaused = 1
    SharedVolumeStateActive = 2
    SharedVolumeStateActiveRedirected = 3
    SharedVolumeStateActiveVolumeRedirected = 4
  end

  enum CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE : Int32
    ClusterSharedVolumeRenameInputTypeNone = 0
    ClusterSharedVolumeRenameInputTypeVolumeOffset = 1
    ClusterSharedVolumeRenameInputTypeVolumeId = 2
    ClusterSharedVolumeRenameInputTypeVolumeName = 3
    ClusterSharedVolumeRenameInputTypeVolumeGuid = 4
  end

  enum MAINTENANCE_MODE_TYPE_ENUM : Int32
    MaintenanceModeTypeDisableIsAliveCheck = 1
    MaintenanceModeTypeOfflineResource = 2
    MaintenanceModeTypeUnclusterResource = 3
  end

  enum CLUSPROP_IPADDR_ENABLENETBIOS : Int32
    CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED = 0
    CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED = 1
    CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC = 2
  end

  enum FILESHARE_CHANGE_ENUM : Int32
    FILESHARE_CHANGE_NONE = 0
    FILESHARE_CHANGE_ADD = 1
    FILESHARE_CHANGE_DEL = 2
    FILESHARE_CHANGE_MODIFY = 3
  end

  enum CLUSTER_RESOURCE_ENUM : Int32
    CLUSTER_RESOURCE_ENUM_DEPENDS = 1
    CLUSTER_RESOURCE_ENUM_PROVIDES = 2
    CLUSTER_RESOURCE_ENUM_NODES = 4
    CLUSTER_RESOURCE_ENUM_ALL = 7
  end

  enum CLUSTER_RESOURCE_TYPE_ENUM : Int32
    CLUSTER_RESOURCE_TYPE_ENUM_NODES = 1
    CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES = 2
    CLUSTER_RESOURCE_TYPE_ENUM_ALL = 3
  end

  enum CLUSTER_NETWORK_ENUM : Int32
    CLUSTER_NETWORK_ENUM_NETINTERFACES = 1
    CLUSTER_NETWORK_ENUM_ALL = 1
  end

  enum CLUSTER_NETWORK_STATE : Int32
    ClusterNetworkStateUnknown = -1
    ClusterNetworkUnavailable = 0
    ClusterNetworkDown = 1
    ClusterNetworkPartitioned = 2
    ClusterNetworkUp = 3
  end

  enum CLUSTER_NETWORK_ROLE : Int32
    ClusterNetworkRoleNone = 0
    ClusterNetworkRoleInternalUse = 1
    ClusterNetworkRoleClientAccess = 2
    ClusterNetworkRoleInternalAndClient = 3
  end

  enum CLUSTER_NETINTERFACE_STATE : Int32
    ClusterNetInterfaceStateUnknown = -1
    ClusterNetInterfaceUnavailable = 0
    ClusterNetInterfaceFailed = 1
    ClusterNetInterfaceUnreachable = 2
    ClusterNetInterfaceUp = 3
  end

  enum CLUSTER_SETUP_PHASE : Int32
    ClusterSetupPhaseInitialize = 1
    ClusterSetupPhaseValidateNodeState = 100
    ClusterSetupPhaseValidateNetft = 102
    ClusterSetupPhaseValidateClusDisk = 103
    ClusterSetupPhaseConfigureClusSvc = 104
    ClusterSetupPhaseStartingClusSvc = 105
    ClusterSetupPhaseQueryClusterNameAccount = 106
    ClusterSetupPhaseValidateClusterNameAccount = 107
    ClusterSetupPhaseCreateClusterAccount = 108
    ClusterSetupPhaseConfigureClusterAccount = 109
    ClusterSetupPhaseFormingCluster = 200
    ClusterSetupPhaseAddClusterProperties = 201
    ClusterSetupPhaseCreateResourceTypes = 202
    ClusterSetupPhaseCreateGroups = 203
    ClusterSetupPhaseCreateIPAddressResources = 204
    ClusterSetupPhaseCreateNetworkName = 205
    ClusterSetupPhaseClusterGroupOnline = 206
    ClusterSetupPhaseGettingCurrentMembership = 300
    ClusterSetupPhaseAddNodeToCluster = 301
    ClusterSetupPhaseNodeUp = 302
    ClusterSetupPhaseMoveGroup = 400
    ClusterSetupPhaseDeleteGroup = 401
    ClusterSetupPhaseCleanupCOs = 402
    ClusterSetupPhaseOfflineGroup = 403
    ClusterSetupPhaseEvictNode = 404
    ClusterSetupPhaseCleanupNode = 405
    ClusterSetupPhaseCoreGroupCleanup = 406
    ClusterSetupPhaseFailureCleanup = 999
  end

  enum CLUSTER_SETUP_PHASE_TYPE : Int32
    ClusterSetupPhaseStart = 1
    ClusterSetupPhaseContinue = 2
    ClusterSetupPhaseEnd = 3
    ClusterSetupPhaseReport = 4
  end

  enum CLUSTER_SETUP_PHASE_SEVERITY : Int32
    ClusterSetupPhaseInformational = 1
    ClusterSetupPhaseWarning = 2
    ClusterSetupPhaseFatal = 3
  end

  enum PLACEMENT_OPTIONS : Int32
    PLACEMENT_OPTIONS_MIN_VALUE = 0
    PLACEMENT_OPTIONS_DEFAULT_PLACEMENT_OPTIONS = 0
    PLACEMENT_OPTIONS_DISABLE_CSV_VM_DEPENDENCY = 1
    PLACEMENT_OPTIONS_CONSIDER_OFFLINE_VMS = 2
    PLACEMENT_OPTIONS_DONT_USE_MEMORY = 4
    PLACEMENT_OPTIONS_DONT_USE_CPU = 8
    PLACEMENT_OPTIONS_DONT_USE_LOCAL_TEMP_DISK = 16
    PLACEMENT_OPTIONS_DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK = 32
    PLACEMENT_OPTIONS_SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 64
    PLACEMENT_OPTIONS_DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK = 128
    PLACEMENT_OPTIONS_SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 256
    PLACEMENT_OPTIONS_AVAILABILITY_SET_DOMAIN_AFFINITY = 512
    PLACEMENT_OPTIONS_ALL = 1023
  end

  enum GRP_PLACEMENT_OPTIONS : Int32
    GRP_PLACEMENT_OPTIONS_MIN_VALUE = 0
    GRP_PLACEMENT_OPTIONS_DEFAULT = 0
    GRP_PLACEMENT_OPTIONS_DISABLE_AUTOBALANCING = 1
    GRP_PLACEMENT_OPTIONS_ALL = 1
  end

  enum SR_REPLICATED_DISK_TYPE : Int32
    SrReplicatedDiskTypeNone = 0
    SrReplicatedDiskTypeSource = 1
    SrReplicatedDiskTypeLogSource = 2
    SrReplicatedDiskTypeDestination = 3
    SrReplicatedDiskTypeLogDestination = 4
    SrReplicatedDiskTypeNotInParthership = 5
    SrReplicatedDiskTypeLogNotInParthership = 6
    SrReplicatedDiskTypeOther = 7
  end

  enum SR_DISK_REPLICATION_ELIGIBLE : Int32
    SrDiskReplicationEligibleNone = 0
    SrDiskReplicationEligibleYes = 1
    SrDiskReplicationEligibleOffline = 2
    SrDiskReplicationEligibleNotGpt = 3
    SrDiskReplicationEligiblePartitionLayoutMismatch = 4
    SrDiskReplicationEligibleInsufficientFreeSpace = 5
    SrDiskReplicationEligibleNotInSameSite = 6
    SrDiskReplicationEligibleInSameSite = 7
    SrDiskReplicationEligibleFileSystemNotSupported = 8
    SrDiskReplicationEligibleAlreadyInReplication = 9
    SrDiskReplicationEligibleSameAsSpecifiedDisk = 10
    SrDiskReplicationEligibleOther = 9999
  end

  enum VM_RESDLL_CONTEXT : Int32
    VmResdllContextTurnOff = 0
    VmResdllContextSave = 1
    VmResdllContextShutdown = 2
    VmResdllContextShutdownForce = 3
    VmResdllContextLiveMigration = 4
  end

  enum RESDLL_CONTEXT_OPERATION_TYPE : Int32
    ResdllContextOperationTypeFailback = 0
    ResdllContextOperationTypeDrain = 1
    ResdllContextOperationTypeDrainFailure = 2
    ResdllContextOperationTypeEmbeddedFailure = 3
    ResdllContextOperationTypePreemption = 4
    ResdllContextOperationTypeNetworkDisconnect = 5
    ResdllContextOperationTypeNetworkDisconnectMoveRetry = 6
  end

  enum LOG_LEVEL : Int32
    LOG_INFORMATION = 0
    LOG_WARNING = 1
    LOG_ERROR = 2
    LOG_SEVERE = 3
  end

  enum RESOURCE_EXIT_STATE : Int32
    ResourceExitStateContinue = 0
    ResourceExitStateTerminate = 1
    ResourceExitStateMax = 2
  end

  enum FAILURE_TYPE : Int32
    FAILURE_TYPE_GENERAL = 0
    FAILURE_TYPE_EMBEDDED = 1
    FAILURE_TYPE_NETWORK_LOSS = 2
  end

  enum CLUSTER_RESOURCE_APPLICATION_STATE : Int32
    ClusterResourceApplicationStateUnknown = 1
    ClusterResourceApplicationOSHeartBeat = 2
    ClusterResourceApplicationReady = 3
  end

  enum RESOURCE_MONITOR_STATE : Int32
    RmonInitializing = 0
    RmonIdle = 1
    RmonStartingResource = 2
    RmonInitializingResource = 3
    RmonOnlineResource = 4
    RmonOfflineResource = 5
    RmonShutdownResource = 6
    RmonDeletingResource = 7
    RmonIsAlivePoll = 8
    RmonLooksAlivePoll = 9
    RmonArbitrateResource = 10
    RmonReleaseResource = 11
    RmonResourceControl = 12
    RmonResourceTypeControl = 13
    RmonTerminateResource = 14
    RmonDeadlocked = 15
  end

  enum CLUSTER_ROLE : Int32
    ClusterRoleDHCP = 0
    ClusterRoleDTC = 1
    ClusterRoleFileServer = 2
    ClusterRoleGenericApplication = 3
    ClusterRoleGenericScript = 4
    ClusterRoleGenericService = 5
    ClusterRoleISCSINameServer = 6
    ClusterRoleMSMQ = 7
    ClusterRoleNFS = 8
    ClusterRolePrintServer = 9
    ClusterRoleStandAloneNamespaceServer = 10
    ClusterRoleVolumeShadowCopyServiceTask = 11
    ClusterRoleWINS = 12
    ClusterRoleTaskScheduler = 13
    ClusterRoleNetworkFileSystem = 14
    ClusterRoleDFSReplicatedFolder = 15
    ClusterRoleDistributedFileSystem = 16
    ClusterRoleDistributedNetworkName = 17
    ClusterRoleFileShare = 18
    ClusterRoleFileShareWitness = 19
    ClusterRoleHardDisk = 20
    ClusterRoleIPAddress = 21
    ClusterRoleIPV6Address = 22
    ClusterRoleIPV6TunnelAddress = 23
    ClusterRoleISCSITargetServer = 24
    ClusterRoleNetworkName = 25
    ClusterRolePhysicalDisk = 26
    ClusterRoleSODAFileServer = 27
    ClusterRoleStoragePool = 28
    ClusterRoleVirtualMachine = 29
    ClusterRoleVirtualMachineConfiguration = 30
    ClusterRoleVirtualMachineReplicaBroker = 31
  end

  enum CLUSTER_ROLE_STATE : Int32
    ClusterRoleUnknown = -1
    ClusterRoleClustered = 0
    ClusterRoleUnclustered = 1
  end

  enum CLUADMEX_OBJECT_TYPE : Int32
    CLUADMEX_OT_NONE = 0
    CLUADMEX_OT_CLUSTER = 1
    CLUADMEX_OT_NODE = 2
    CLUADMEX_OT_GROUP = 3
    CLUADMEX_OT_RESOURCE = 4
    CLUADMEX_OT_RESOURCETYPE = 5
    CLUADMEX_OT_NETWORK = 6
    CLUADMEX_OT_NETINTERFACE = 7
  end

  union CLUSPROP_SYNTAX
    dw : UInt32
    anonymous : CLUSPROP_SYNTAX_Anonymous_e__Struct
  end
  union CLUSPROP_SECURITY_DESCRIPTOR_Anonymous_e__Union
    sd : SECURITY_DESCRIPTOR_RELATIVE
    rgb_security_descriptor : UInt8[0]*
  end
  union CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union
    anonymous : CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union_Anonymous_e__Struct
    li : ULARGE_INTEGER
  end
  union CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union_Anonymous_e__Struct_Anonymous_e__Union
    dw : UInt32
    rc : CLUSTER_RESOURCE_CLASS
  end
  union CLUSPROP_REQUIRED_DEPENDENCY
    value : CLUSPROP_VALUE
    res_class : CLUSPROP_RESOURCE_CLASS
    res_type_name : CLUSPROP_SZ
  end
  union CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_Anonymous_e__Union
    volume_offset : UInt64
    volume_id : Char[260]*
    volume_name : Char[260]*
    volume_guid : Char[50]*
  end
  union CLUS_SCSI_ADDRESS_Anonymous_e__Union
    anonymous : CLUS_SCSI_ADDRESS_Anonymous_e__Union_Anonymous_e__Struct
    dw : UInt32
  end
  union CLUSPROP_BUFFER_HELPER
    pb : UInt8*
    pw : UInt16*
    pdw : UInt32*
    pl : Int32*
    psz : LibC::LPWSTR
    p_list : CLUSPROP_LIST*
    p_syntax : CLUSPROP_SYNTAX*
    p_name : CLUSPROP_SZ*
    p_value : CLUSPROP_VALUE*
    p_binary_value : CLUSPROP_BINARY*
    p_word_value : CLUSPROP_WORD*
    p_dword_value : CLUSPROP_DWORD*
    p_long_value : CLUSPROP_LONG*
    p_u_large_integer_value : CLUSPROP_ULARGE_INTEGER*
    p_large_integer_value : CLUSPROP_LARGE_INTEGER*
    p_string_value : CLUSPROP_SZ*
    p_multi_sz_value : CLUSPROP_SZ*
    p_security_descriptor : CLUSPROP_SECURITY_DESCRIPTOR*
    p_resource_class_value : CLUSPROP_RESOURCE_CLASS*
    p_resource_class_info_value : CLUSPROP_RESOURCE_CLASS_INFO*
    p_disk_signature_value : CLUSPROP_DWORD*
    p_scsi_address_value : CLUSPROP_SCSI_ADDRESS*
    p_disk_number_value : CLUSPROP_DWORD*
    p_partition_info_value : CLUSPROP_PARTITION_INFO*
    p_required_dependency_value : CLUSPROP_REQUIRED_DEPENDENCY*
    p_partition_info_value_ex : CLUSPROP_PARTITION_INFO_EX*
    p_partition_info_value_ex2 : CLUSPROP_PARTITION_INFO_EX2*
    p_file_time_value : CLUSPROP_FILETIME*
  end
  union CLRES_FUNCTION_TABLE_Anonymous_e__Union
    v1_functions : CLRES_V1_FUNCTIONS
    v2_functions : CLRES_V2_FUNCTIONS
    v3_functions : CLRES_V3_FUNCTIONS
    v4_functions : CLRES_V4_FUNCTIONS
  end
  union RESUTIL_PROPERTY_ITEM_Anonymous_e__Union
    default_ptr : LibC::UINT_PTR
    default : UInt32
    lp_default : Void*
    large_int_data : RESUTIL_LARGEINT_DATA*
    u_large_int_data : RESUTIL_ULARGEINT_DATA*
    file_time_data : RESUTIL_FILETIME_DATA*
  end

  struct CLUSTERVERSIONINFO_NT4
    dw_version_info_size : UInt32
    major_version : UInt16
    minor_version : UInt16
    build_number : UInt16
    sz_vendor_id : Char[64]*
    sz_csd_version : Char[64]*
  end
  struct CLUSTERVERSIONINFO
    dw_version_info_size : UInt32
    major_version : UInt16
    minor_version : UInt16
    build_number : UInt16
    sz_vendor_id : Char[64]*
    sz_csd_version : Char[64]*
    dw_cluster_highest_version : UInt32
    dw_cluster_lowest_version : UInt32
    dw_flags : UInt32
    dw_reserved : UInt32
  end
  struct CLUS_STARTING_PARAMS
    dw_size : UInt32
    b_form : LibC::BOOL
    b_first : LibC::BOOL
  end
  struct CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT
    dw_size : UInt32
    dw_version : UInt32
    e_reason : CLUSTER_RESOURCE_STATE_CHANGE_REASON
  end
  struct CLUSTER_BATCH_COMMAND
    command : CLUSTER_REG_COMMAND
    dw_options : UInt32
    wz_name : LibC::LPWSTR
    lp_data : UInt8*
    cb_data : UInt32
  end
  struct CLUSTER_READ_BATCH_COMMAND
    command : CLUSTER_REG_COMMAND
    dw_options : UInt32
    wz_subkey_name : LibC::LPWSTR
    wz_value_name : LibC::LPWSTR
    lp_data : UInt8*
    cb_data : UInt32
  end
  struct CLUSTER_ENUM_ITEM
    dw_version : UInt32
    dw_type : UInt32
    cb_id : UInt32
    lpsz_id : LibC::LPWSTR
    cb_name : UInt32
    lpsz_name : LibC::LPWSTR
  end
  struct CLUSTER_CREATE_GROUP_INFO
    dw_version : UInt32
    group_type : CLUSGROUP_TYPE
  end
  struct CLUSTER_VALIDATE_PATH
    sz_path : Char[0]*
  end
  struct CLUSTER_VALIDATE_DIRECTORY
    sz_path : Char[0]*
  end
  struct CLUSTER_VALIDATE_NETNAME
    sz_network_name : Char[0]*
  end
  struct CLUSTER_VALIDATE_CSV_FILENAME
    sz_file_name : Char[0]*
  end
  struct CLUSTER_SET_PASSWORD_STATUS
    node_id : UInt32
    set_attempted : BOOLEAN
    return_status : UInt32
  end
  struct CLUSTER_IP_ENTRY
    lpsz_ip_address : LibC::LPWSTR
    dw_prefix_length : UInt32
  end
  struct CREATE_CLUSTER_CONFIG
    dw_version : UInt32
    lpsz_cluster_name : LibC::LPWSTR
    c_nodes : UInt32
    ppsz_node_names : LibC::LPWSTR*
    c_ip_entries : UInt32
    p_ip_entries : CLUSTER_IP_ENTRY*
    f_empty_cluster : BOOLEAN
    management_point_type : CLUSTER_MGMT_POINT_TYPE
    management_point_res_type : CLUSTER_MGMT_POINT_RESTYPE
  end
  struct CREATE_CLUSTER_NAME_ACCOUNT
    dw_version : UInt32
    lpsz_cluster_name : LibC::LPWSTR
    dw_flags : UInt32
    psz_user_name : LibC::LPWSTR
    psz_password : LibC::LPWSTR
    psz_domain : LibC::LPWSTR
    management_point_type : CLUSTER_MGMT_POINT_TYPE
    management_point_res_type : CLUSTER_MGMT_POINT_RESTYPE
    b_upgrade_vc_os : BOOLEAN
  end
  struct NOTIFY_FILTER_AND_TYPE
    dw_object_type : UInt32
    filter_flags : Int64
  end
  struct CLUSTER_MEMBERSHIP_INFO
    has_quorum : LibC::BOOL
    upnodes_size : UInt32
    upnodes : UInt8[0]*
  end
  struct CLUSTER_AVAILABILITY_SET_CONFIG
    dw_version : UInt32
    dw_update_domains : UInt32
    dw_fault_domains : UInt32
    b_reserve_spare_node : LibC::BOOL
  end
  struct CLUSTER_GROUP_ENUM_ITEM
    dw_version : UInt32
    cb_id : UInt32
    lpsz_id : LibC::LPWSTR
    cb_name : UInt32
    lpsz_name : LibC::LPWSTR
    state : CLUSTER_GROUP_STATE
    cb_owner_node : UInt32
    lpsz_owner_node : LibC::LPWSTR
    dw_flags : UInt32
    cb_properties : UInt32
    p_properties : Void*
    cb_ro_properties : UInt32
    p_ro_properties : Void*
  end
  struct CLUSTER_RESOURCE_ENUM_ITEM
    dw_version : UInt32
    cb_id : UInt32
    lpsz_id : LibC::LPWSTR
    cb_name : UInt32
    lpsz_name : LibC::LPWSTR
    cb_owner_group_name : UInt32
    lpsz_owner_group_name : LibC::LPWSTR
    cb_owner_group_id : UInt32
    lpsz_owner_group_id : LibC::LPWSTR
    cb_properties : UInt32
    p_properties : Void*
    cb_ro_properties : UInt32
    p_ro_properties : Void*
  end
  struct GROUP_FAILURE_INFO
    dw_failover_attempts_remaining : UInt32
    dw_failover_period_remaining : UInt32
  end
  struct GROUP_FAILURE_INFO_BUFFER
    dw_version : UInt32
    info : GROUP_FAILURE_INFO
  end
  struct RESOURCE_FAILURE_INFO
    dw_restart_attempts_remaining : UInt32
    dw_restart_period_remaining : UInt32
  end
  struct RESOURCE_FAILURE_INFO_BUFFER
    dw_version : UInt32
    info : RESOURCE_FAILURE_INFO
  end
  struct RESOURCE_TERMINAL_FAILURE_INFO_BUFFER
    is_terminal_failure : LibC::BOOL
    restart_period_remaining : UInt32
  end
  struct CLUSPROP_SYNTAX_Anonymous_e__Struct
    w_format : UInt16
    w_type : UInt16
  end
  struct CLUSPROP_VALUE
    syntax : CLUSPROP_SYNTAX
    cb_length : UInt32
  end
  struct CLUSPROP_BINARY
    __anonymous_base_clusapi_l5129_c41 : CLUSPROP_VALUE
    rgb : UInt8[0]*
  end
  struct CLUSPROP_WORD
    __anonymous_base_clusapi_l5139_c39 : CLUSPROP_VALUE
    w : UInt16
  end
  struct CLUSPROP_DWORD
    __anonymous_base_clusapi_l5149_c40 : CLUSPROP_VALUE
    dw : UInt32
  end
  struct CLUSPROP_LONG
    __anonymous_base_clusapi_l5159_c39 : CLUSPROP_VALUE
    l : Int32
  end
  struct CLUSPROP_SZ
    __anonymous_base_clusapi_l5169_c37 : CLUSPROP_VALUE
    sz : Char[0]*
  end
  struct CLUSPROP_ULARGE_INTEGER
    __anonymous_base_clusapi_l5186_c14 : CLUSPROP_VALUE
    li : ULARGE_INTEGER
  end
  struct CLUSPROP_LARGE_INTEGER
    __anonymous_base_clusapi_l5199_c14 : CLUSPROP_VALUE
    li : LARGE_INTEGER
  end
  struct CLUSPROP_SECURITY_DESCRIPTOR
    __anonymous_base_clusapi_l5211_c54 : CLUSPROP_VALUE
    anonymous : CLUSPROP_SECURITY_DESCRIPTOR_Anonymous_e__Union
  end
  struct CLUSPROP_FILETIME
    __anonymous_base_clusapi_l5225_c14 : CLUSPROP_VALUE
    ft : FILETIME
  end
  struct CLUS_RESOURCE_CLASS_INFO
    anonymous : CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union
  end
  struct CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union_Anonymous_e__Struct
    anonymous : CLUS_RESOURCE_CLASS_INFO_Anonymous_e__Union_Anonymous_e__Struct_Anonymous_e__Union
    sub_class : UInt32
  end
  struct CLUSPROP_RESOURCE_CLASS
    __anonymous_base_clusapi_l5250_c14 : CLUSPROP_VALUE
    rc : CLUSTER_RESOURCE_CLASS
  end
  struct CLUSPROP_RESOURCE_CLASS_INFO
    __anonymous_base_clusapi_l5261_c14 : CLUSPROP_VALUE
    __anonymous_base_clusapi_l5262_c14 : CLUS_RESOURCE_CLASS_INFO
  end
  struct CLUS_FORCE_QUORUM_INFO
    dw_size : UInt32
    dw_node_bit_mask : UInt32
    dw_max_numberof_nodes : UInt32
    multisz_node_list : Char[0]*
  end
  struct CLUS_PARTITION_INFO
    dw_flags : UInt32
    sz_device_name : Char[260]*
    sz_volume_label : Char[260]*
    dw_serial_number : UInt32
    rgdw_maximum_component_length : UInt32
    dw_file_system_flags : UInt32
    sz_file_system : Char[32]*
  end
  struct CLUS_PARTITION_INFO_EX
    dw_flags : UInt32
    sz_device_name : Char[260]*
    sz_volume_label : Char[260]*
    dw_serial_number : UInt32
    rgdw_maximum_component_length : UInt32
    dw_file_system_flags : UInt32
    sz_file_system : Char[32]*
    total_size_in_bytes : ULARGE_INTEGER
    free_size_in_bytes : ULARGE_INTEGER
    device_number : UInt32
    partition_number : UInt32
    volume_guid : Guid
  end
  struct CLUS_PARTITION_INFO_EX2
    gpt_partition_id : Guid
    sz_partition_name : Char[260]*
    encryption_flags : UInt32
  end
  struct CLUS_CSV_VOLUME_INFO
    volume_offset : ULARGE_INTEGER
    partition_number : UInt32
    fault_state : CLUSTER_CSV_VOLUME_FAULT_STATE
    backup_state : CLUSTER_SHARED_VOLUME_BACKUP_STATE
    sz_volume_friendly_name : Char[260]*
    sz_volume_name : Char[50]*
  end
  struct CLUS_CSV_VOLUME_NAME
    volume_offset : LARGE_INTEGER
    sz_volume_name : Char[260]*
    sz_root_path : Char[263]*
  end
  struct CLUSTER_SHARED_VOLUME_STATE_INFO
    sz_volume_name : Char[260]*
    sz_node_name : Char[260]*
    volume_state : CLUSTER_SHARED_VOLUME_STATE
  end
  struct CLUSTER_SHARED_VOLUME_STATE_INFO_EX
    sz_volume_name : Char[260]*
    sz_node_name : Char[260]*
    volume_state : CLUSTER_SHARED_VOLUME_STATE
    sz_volume_friendly_name : Char[260]*
    redirected_io_reason : UInt64
    volume_redirected_io_reason : UInt64
  end
  struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME
    input_type : CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE
    anonymous : CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME_Anonymous_e__Union
  end
  struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME
    new_volume_name : Char[260]*
  end
  struct CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME
    new_volume_name : Char[260]*
    new_volume_guid : Char[50]*
  end
  struct CLUSTER_SHARED_VOLUME_RENAME_INPUT
    __anonymous_base_clusapi_l5464_c14 : CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME
    __anonymous_base_clusapi_l5465_c14 : CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME
  end
  struct CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT
    __anonymous_base_clusapi_l5475_c14 : CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME
    __anonymous_base_clusapi_l5476_c14 : CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME
  end
  struct CLUS_CHKDSK_INFO
    partition_number : UInt32
    chkdsk_state : UInt32
    file_id_count : UInt32
    file_id_list : UInt64[0]*
  end
  struct CLUS_DISK_NUMBER_INFO
    disk_number : UInt32
    bytes_per_sector : UInt32
  end
  struct CLUS_SHARED_VOLUME_BACKUP_MODE
    backup_state : CLUSTER_SHARED_VOLUME_BACKUP_STATE
    delay_timer_in_secs : UInt32
    volume_name : Char[260]*
  end
  struct CLUSPROP_PARTITION_INFO
    __anonymous_base_clusapi_l5507_c14 : CLUSPROP_VALUE
    __anonymous_base_clusapi_l5508_c14 : CLUS_PARTITION_INFO
  end
  struct CLUSPROP_PARTITION_INFO_EX
    __anonymous_base_clusapi_l5519_c14 : CLUSPROP_VALUE
    __anonymous_base_clusapi_l5520_c14 : CLUS_PARTITION_INFO_EX
  end
  struct CLUSPROP_PARTITION_INFO_EX2
    __anonymous_base_clusapi_l5533_c14 : CLUSPROP_PARTITION_INFO_EX
    __anonymous_base_clusapi_l5534_c14 : CLUS_PARTITION_INFO_EX2
  end
  struct CLUS_FTSET_INFO
    dw_root_signature : UInt32
    dw_ft_type : UInt32
  end
  struct CLUSPROP_FTSET_INFO
    __anonymous_base_clusapi_l5555_c14 : CLUSPROP_VALUE
    __anonymous_base_clusapi_l5556_c14 : CLUS_FTSET_INFO
  end
  struct CLUS_SCSI_ADDRESS
    anonymous : CLUS_SCSI_ADDRESS_Anonymous_e__Union
  end
  struct CLUS_SCSI_ADDRESS_Anonymous_e__Union_Anonymous_e__Struct
    port_number : UInt8
    path_id : UInt8
    target_id : UInt8
    lun : UInt8
  end
  struct CLUSPROP_SCSI_ADDRESS
    __anonymous_base_clusapi_l5583_c14 : CLUSPROP_VALUE
    __anonymous_base_clusapi_l5584_c14 : CLUS_SCSI_ADDRESS
  end
  struct CLUS_NETNAME_VS_TOKEN_INFO
    process_id : UInt32
    desired_access : UInt32
    inherit_handle : LibC::BOOL
  end
  struct CLUS_NETNAME_PWD_INFO
    flags : UInt32
    password : Char[16]*
    creating_dc : Char[258]*
    object_guid : Char[64]*
  end
  struct CLUS_NETNAME_PWD_INFOEX
    flags : UInt32
    password : Char[128]*
    creating_dc : Char[258]*
    object_guid : Char[64]*
  end
  struct CLUS_DNN_LEADER_STATUS
    is_online : LibC::BOOL
    is_file_server_present : LibC::BOOL
  end
  struct CLUS_DNN_SODAFS_CLONE_STATUS
    node_id : UInt32
    status : CLUSTER_RESOURCE_STATE
  end
  struct CLUS_NETNAME_IP_INFO_ENTRY
    node_id : UInt32
    address_size : UInt32
    address : UInt8[0]*
  end
  struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL
    sz_name : Char[64]*
    num_entries : UInt32
    ip_info : CLUS_NETNAME_IP_INFO_ENTRY[0]*
  end
  struct CLUS_MAINTENANCE_MODE_INFO
    in_maintenance : LibC::BOOL
  end
  struct CLUS_CSV_MAINTENANCE_MODE_INFO
    in_maintenance : LibC::BOOL
    volume_name : Char[260]*
  end
  struct CLUS_MAINTENANCE_MODE_INFOEX
    in_maintenance : LibC::BOOL
    maintainence_mode_type : MAINTENANCE_MODE_TYPE_ENUM
    internal_state : CLUSTER_RESOURCE_STATE
    signature : UInt32
  end
  struct CLUS_SET_MAINTENANCE_MODE_INPUT
    in_maintenance : LibC::BOOL
    extra_parameter_size : UInt32
    extra_parameter : UInt8[0]*
  end
  struct CLUS_STORAGE_SET_DRIVELETTER
    partition_number : UInt32
    drive_letter_mask : UInt32
  end
  struct CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS
    avail_driveletters_mask : UInt32
  end
  struct CLUS_STORAGE_REMAP_DRIVELETTER
    current_drive_letter_mask : UInt32
    target_drive_letter_mask : UInt32
  end
  struct CLUS_PROVIDER_STATE_CHANGE_INFO
    dw_size : UInt32
    resource_state : CLUSTER_RESOURCE_STATE
    sz_provider_id : Char[0]*
  end
  struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT
    file_server_name : Char[16]*
  end
  struct CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT
    file_server_name : Char[260]*
  end
  struct CLUSPROP_LIST
    n_property_count : UInt32
    property_name : CLUSPROP_SZ
  end
  struct FILESHARE_CHANGE
    change : FILESHARE_CHANGE_ENUM
    share_name : Char[84]*
  end
  struct FILESHARE_CHANGE_LIST
    num_entries : UInt32
    change_entry : FILESHARE_CHANGE[0]*
  end
  struct CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT
    get_tick_count64 : UInt64
    get_system_time : SYSTEMTIME
    node_id : UInt32
  end
  struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO
    partition_offset : UInt64
    capabilities : UInt32
  end
  struct SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY
    count : UInt32
    partition_array : SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO[0]*
  end
  struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS
    data_disk_guid : Guid
    include_offline_disks : BOOLEAN
  end
  struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS
    source_data_disk_guid : Guid
    target_replication_group_guid : Guid
    skip_connectivity_check : BOOLEAN
    include_offline_disks : BOOLEAN
  end
  struct SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS
    data_disk_guid : Guid
    include_available_stoarge_disks : BOOLEAN
  end
  struct SR_RESOURCE_TYPE_DISK_INFO
    reason : SR_DISK_REPLICATION_ELIGIBLE
    disk_guid : Guid
  end
  struct SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT
    count : UInt16
    disk_info : SR_RESOURCE_TYPE_DISK_INFO[0]*
  end
  struct SR_RESOURCE_TYPE_REPLICATED_DISK
    type : SR_REPLICATED_DISK_TYPE
    cluster_disk_resource_guid : Guid
    replication_group_id : Guid
    replication_group_name : Char[260]*
  end
  struct SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT
    count : UInt16
    replicated_disks : SR_RESOURCE_TYPE_REPLICATED_DISK[0]*
  end
  struct SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP
    replication_group_name : Char[260]*
    description : Char[260]*
    log_path : Char[260]*
    max_log_size_in_bytes : UInt64
    log_type : UInt16
    replication_mode : UInt32
    minimum_partners_in_sync : UInt32
    enable_write_consistency : BOOLEAN
    enable_encryption : BOOLEAN
    certificate_thumbprint : Char[260]*
    volume_name_count : UInt32
    volume_names : Char[260]*
  end
  struct SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT
    result : UInt32
    error_string : Char[260]*
  end
  struct CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT
    dw_flags : UInt32
    guid_pool_filter : Guid
  end
  struct RESOURCE_STATUS
    resource_state : CLUSTER_RESOURCE_STATE
    check_point : UInt32
    wait_hint : UInt32
    event_handle : LibC::HANDLE
  end
  struct NodeUtilizationInfoElement
    id : UInt64
    available_memory : UInt64
    available_memory_after_reclamation : UInt64
  end
  struct ResourceUtilizationInfoElement
    physical_numa_id : UInt64
    current_memory : UInt64
  end
  struct GET_OPERATION_CONTEXT_PARAMS
    size : UInt32
    version : UInt32
    type : RESDLL_CONTEXT_OPERATION_TYPE
    priority : UInt32
  end
  struct RESOURCE_STATUS_EX
    resource_state : CLUSTER_RESOURCE_STATE
    check_point : UInt32
    event_handle : LibC::HANDLE
    application_specific_error_code : UInt32
    flags : UInt32
    wait_hint : UInt32
  end
  struct CLRES_V1_FUNCTIONS
    open : POPEN_ROUTINE
    close : PCLOSE_ROUTINE
    online : PONLINE_ROUTINE
    offline : POFFLINE_ROUTINE
    terminate : PTERMINATE_ROUTINE
    looks_alive : PLOOKS_ALIVE_ROUTINE
    is_alive : PIS_ALIVE_ROUTINE
    arbitrate : PARBITRATE_ROUTINE
    release : PRELEASE_ROUTINE
    resource_control : PRESOURCE_CONTROL_ROUTINE
    resource_type_control : PRESOURCE_TYPE_CONTROL_ROUTINE
  end
  struct CLRES_V2_FUNCTIONS
    open : POPEN_V2_ROUTINE
    close : PCLOSE_ROUTINE
    online : PONLINE_V2_ROUTINE
    offline : POFFLINE_V2_ROUTINE
    terminate : PTERMINATE_ROUTINE
    looks_alive : PLOOKS_ALIVE_ROUTINE
    is_alive : PIS_ALIVE_ROUTINE
    arbitrate : PARBITRATE_ROUTINE
    release : PRELEASE_ROUTINE
    resource_control : PRESOURCE_CONTROL_ROUTINE
    resource_type_control : PRESOURCE_TYPE_CONTROL_ROUTINE
    cancel : PCANCEL_ROUTINE
  end
  struct CLRES_V3_FUNCTIONS
    open : POPEN_V2_ROUTINE
    close : PCLOSE_ROUTINE
    online : PONLINE_V2_ROUTINE
    offline : POFFLINE_V2_ROUTINE
    terminate : PTERMINATE_ROUTINE
    looks_alive : PLOOKS_ALIVE_ROUTINE
    is_alive : PIS_ALIVE_ROUTINE
    arbitrate : PARBITRATE_ROUTINE
    release : PRELEASE_ROUTINE
    begin_resource_control : PBEGIN_RESCALL_ROUTINE
    begin_resource_type_control : PBEGIN_RESTYPECALL_ROUTINE
    cancel : PCANCEL_ROUTINE
  end
  struct CLRES_V4_FUNCTIONS
    open : POPEN_V2_ROUTINE
    close : PCLOSE_ROUTINE
    online : PONLINE_V2_ROUTINE
    offline : POFFLINE_V2_ROUTINE
    terminate : PTERMINATE_ROUTINE
    looks_alive : PLOOKS_ALIVE_ROUTINE
    is_alive : PIS_ALIVE_ROUTINE
    arbitrate : PARBITRATE_ROUTINE
    release : PRELEASE_ROUTINE
    begin_resource_control : PBEGIN_RESCALL_ROUTINE
    begin_resource_type_control : PBEGIN_RESTYPECALL_ROUTINE
    cancel : PCANCEL_ROUTINE
    begin_resource_control_as_user : PBEGIN_RESCALL_AS_USER_ROUTINE
    begin_resource_type_control_as_user : PBEGIN_RESTYPECALL_AS_USER_ROUTINE
  end
  struct CLRES_FUNCTION_TABLE
    table_size : UInt32
    version : UInt32
    anonymous : CLRES_FUNCTION_TABLE_Anonymous_e__Union
  end
  struct RESUTIL_LARGEINT_DATA
    default : LARGE_INTEGER
    minimum : LARGE_INTEGER
    maximum : LARGE_INTEGER
  end
  struct RESUTIL_ULARGEINT_DATA
    default : ULARGE_INTEGER
    minimum : ULARGE_INTEGER
    maximum : ULARGE_INTEGER
  end
  struct RESUTIL_FILETIME_DATA
    default : FILETIME
    minimum : FILETIME
    maximum : FILETIME
  end
  struct RESUTIL_PROPERTY_ITEM
    name : LibC::LPWSTR
    key_name : LibC::LPWSTR
    format : UInt32
    anonymous : RESUTIL_PROPERTY_ITEM_Anonymous_e__Union
    minimum : UInt32
    maximum : UInt32
    flags : UInt32
    offset : UInt32
  end
  struct CLRES_CALLBACK_FUNCTION_TABLE
    log_event : PLOG_EVENT_ROUTINE
    set_resource_status_ex : PSET_RESOURCE_STATUS_ROUTINE_EX
    set_resource_locked_mode : PSET_RESOURCE_LOCKED_MODE_ROUTINE
    signal_failure : PSIGNAL_FAILURE_ROUTINE
    set_resource_in_memory_node_local_properties : PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE
    end_control_call : PEND_CONTROL_CALL
    end_type_control_call : PEND_TYPE_CONTROL_CALL
    extend_control_call : PEXTEND_RES_CONTROL_CALL
    extend_type_control_call : PEXTEND_RES_TYPE_CONTROL_CALL
    raise_res_type_notification : PRAISE_RES_TYPE_NOTIFICATION
    change_resource_process_for_dumps : PCHANGE_RESOURCE_PROCESS_FOR_DUMPS
    change_res_type_process_for_dumps : PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS
    set_internal_state : PSET_INTERNAL_STATE
    set_resource_locked_mode_ex : PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE
    request_dump : PREQUEST_DUMP_ROUTINE
  end
  struct MONITOR_STATE
    last_update : LARGE_INTEGER
    state : RESOURCE_MONITOR_STATE
    active_resource : LibC::HANDLE
    resmon_stop : LibC::BOOL
  end
  struct POST_UPGRADE_VERSION_INFO
    new_major_version : UInt32
    new_upgrade_version : UInt32
    old_major_version : UInt32
    old_upgrade_version : UInt32
    reserved : UInt32
  end
  struct CLUSTER_HEALTH_FAULT
    id : LibC::LPWSTR
    error_type : UInt32
    error_code : UInt32
    description : LibC::LPWSTR
    provider : LibC::LPWSTR
    flags : UInt32
    reserved : UInt32
  end
  struct CLUSTER_HEALTH_FAULT_ARRAY
    num_faults : UInt32
    faults : CLUSTER_HEALTH_FAULT*
  end
  struct CLUS_WORKER
    h_thread : LibC::HANDLE
    terminate : LibC::BOOL
  end
  struct PaxosTagCStruct
    __padding__paxos_tag_vtable : UInt64
    __padding__next_epoch_vtable : UInt64
    __padding__next_epoch_date_time_vtable : UInt64
    next_epoch_date_time_ticks : UInt64
    next_epoch_value : Int32
    __padding__boundry_next_epoch : UInt32
    __padding__epoch_vtable : UInt64
    __padding__epoch_date_time_vtable : UInt64
    epoch_date_time_ticks : UInt64
    epoch_value : Int32
    __padding__boundry_epoch : UInt32
    sequence : Int32
    __padding__boundry_sequence : UInt32
  end
  struct WitnessTagUpdateHelper
    version : Int32
    paxos_to_set : PaxosTagCStruct
    paxos_to_validate : PaxosTagCStruct
  end
  struct WitnessTagHelper
    version : Int32
    paxos_to_validate : PaxosTagCStruct
  end


  struct IGetClusterUIInfoVTbl
    query_interface : Proc(IGetClusterUIInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterUIInfo*, UInt32)
    release : Proc(IGetClusterUIInfo*, UInt32)
    get_cluster_name : Proc(IGetClusterUIInfo*, UInt8*, Int32*, HRESULT)
    get_locale : Proc(IGetClusterUIInfo*, UInt32)
    get_font : Proc(IGetClusterUIInfo*, HFONT)
    get_icon : Proc(IGetClusterUIInfo*, HANDLE)
  end

  IGetClusterUIInfo_GUID = LibC::GUID.new("97dede50-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterUIInfo = "97dede50-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterUIInfo
    lpVtbl : IGetClusterUIInfoVTbl*
  end

  struct IGetClusterDataInfoVTbl
    query_interface : Proc(IGetClusterDataInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterDataInfo*, UInt32)
    release : Proc(IGetClusterDataInfo*, UInt32)
    get_cluster_name : Proc(IGetClusterDataInfo*, UInt8*, Int32*, HRESULT)
    get_cluster_handle : Proc(IGetClusterDataInfo*, HCLUSTER**)
    get_object_count : Proc(IGetClusterDataInfo*, Int32)
  end

  IGetClusterDataInfo_GUID = LibC::GUID.new("97dede51-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterDataInfo = "97dede51-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterDataInfo
    lpVtbl : IGetClusterDataInfoVTbl*
  end

  struct IGetClusterObjectInfoVTbl
    query_interface : Proc(IGetClusterObjectInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterObjectInfo*, UInt32)
    release : Proc(IGetClusterObjectInfo*, UInt32)
    get_object_name : Proc(IGetClusterObjectInfo*, Int32, UInt8*, Int32*, HRESULT)
    get_object_type : Proc(IGetClusterObjectInfo*, Int32, CLUADMEX_OBJECT_TYPE)
  end

  IGetClusterObjectInfo_GUID = LibC::GUID.new("97dede52-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterObjectInfo = "97dede52-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterObjectInfo
    lpVtbl : IGetClusterObjectInfoVTbl*
  end

  struct IGetClusterNodeInfoVTbl
    query_interface : Proc(IGetClusterNodeInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterNodeInfo*, UInt32)
    release : Proc(IGetClusterNodeInfo*, UInt32)
    get_node_handle : Proc(IGetClusterNodeInfo*, Int32, HNODE**)
  end

  IGetClusterNodeInfo_GUID = LibC::GUID.new("97dede53-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterNodeInfo = "97dede53-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterNodeInfo
    lpVtbl : IGetClusterNodeInfoVTbl*
  end

  struct IGetClusterGroupInfoVTbl
    query_interface : Proc(IGetClusterGroupInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterGroupInfo*, UInt32)
    release : Proc(IGetClusterGroupInfo*, UInt32)
    get_group_handle : Proc(IGetClusterGroupInfo*, Int32, HGROUP**)
  end

  IGetClusterGroupInfo_GUID = LibC::GUID.new("97dede54-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterGroupInfo = "97dede54-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterGroupInfo
    lpVtbl : IGetClusterGroupInfoVTbl*
  end

  struct IGetClusterResourceInfoVTbl
    query_interface : Proc(IGetClusterResourceInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterResourceInfo*, UInt32)
    release : Proc(IGetClusterResourceInfo*, UInt32)
    get_resource_handle : Proc(IGetClusterResourceInfo*, Int32, HRESOURCE**)
    get_resource_type_name : Proc(IGetClusterResourceInfo*, Int32, UInt8*, Int32*, HRESULT)
    get_resource_network_name : Proc(IGetClusterResourceInfo*, Int32, UInt8*, UInt32*, LibC::BOOL)
  end

  IGetClusterResourceInfo_GUID = LibC::GUID.new("97dede55-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterResourceInfo = "97dede55-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterResourceInfo
    lpVtbl : IGetClusterResourceInfoVTbl*
  end

  struct IGetClusterNetworkInfoVTbl
    query_interface : Proc(IGetClusterNetworkInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterNetworkInfo*, UInt32)
    release : Proc(IGetClusterNetworkInfo*, UInt32)
    get_network_handle : Proc(IGetClusterNetworkInfo*, Int32, HNETWORK**)
  end

  IGetClusterNetworkInfo_GUID = LibC::GUID.new("97dede56-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterNetworkInfo = "97dede56-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterNetworkInfo
    lpVtbl : IGetClusterNetworkInfoVTbl*
  end

  struct IGetClusterNetInterfaceInfoVTbl
    query_interface : Proc(IGetClusterNetInterfaceInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetClusterNetInterfaceInfo*, UInt32)
    release : Proc(IGetClusterNetInterfaceInfo*, UInt32)
    get_net_interface_handle : Proc(IGetClusterNetInterfaceInfo*, Int32, HNETINTERFACE**)
  end

  IGetClusterNetInterfaceInfo_GUID = LibC::GUID.new("97dede57-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IGetClusterNetInterfaceInfo = "97dede57-fc6b-11cf-b5f5-00a0c90ab505"
  struct IGetClusterNetInterfaceInfo
    lpVtbl : IGetClusterNetInterfaceInfoVTbl*
  end

  struct IWCPropertySheetCallbackVTbl
    query_interface : Proc(IWCPropertySheetCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWCPropertySheetCallback*, UInt32)
    release : Proc(IWCPropertySheetCallback*, UInt32)
    add_property_sheet_page : Proc(IWCPropertySheetCallback*, Int32*, HRESULT)
  end

  IWCPropertySheetCallback_GUID = LibC::GUID.new("97dede60-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWCPropertySheetCallback = "97dede60-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWCPropertySheetCallback
    lpVtbl : IWCPropertySheetCallbackVTbl*
  end

  struct IWEExtendPropertySheetVTbl
    query_interface : Proc(IWEExtendPropertySheet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWEExtendPropertySheet*, UInt32)
    release : Proc(IWEExtendPropertySheet*, UInt32)
    create_property_sheet_pages : Proc(IWEExtendPropertySheet*, IUnknown, IWCPropertySheetCallback, HRESULT)
  end

  IWEExtendPropertySheet_GUID = LibC::GUID.new("97dede61-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWEExtendPropertySheet = "97dede61-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWEExtendPropertySheet
    lpVtbl : IWEExtendPropertySheetVTbl*
  end

  struct IWCWizardCallbackVTbl
    query_interface : Proc(IWCWizardCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWCWizardCallback*, UInt32)
    release : Proc(IWCWizardCallback*, UInt32)
    add_wizard_page : Proc(IWCWizardCallback*, Int32*, HRESULT)
    enable_next : Proc(IWCWizardCallback*, Int32*, LibC::BOOL, HRESULT)
  end

  IWCWizardCallback_GUID = LibC::GUID.new("97dede62-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWCWizardCallback = "97dede62-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWCWizardCallback
    lpVtbl : IWCWizardCallbackVTbl*
  end

  struct IWEExtendWizardVTbl
    query_interface : Proc(IWEExtendWizard*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWEExtendWizard*, UInt32)
    release : Proc(IWEExtendWizard*, UInt32)
    create_wizard_pages : Proc(IWEExtendWizard*, IUnknown, IWCWizardCallback, HRESULT)
  end

  IWEExtendWizard_GUID = LibC::GUID.new("97dede63-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWEExtendWizard = "97dede63-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWEExtendWizard
    lpVtbl : IWEExtendWizardVTbl*
  end

  struct IWCContextMenuCallbackVTbl
    query_interface : Proc(IWCContextMenuCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWCContextMenuCallback*, UInt32)
    release : Proc(IWCContextMenuCallback*, UInt32)
    add_extension_menu_item : Proc(IWCContextMenuCallback*, UInt8*, UInt8*, UInt32, UInt32, UInt32, HRESULT)
  end

  IWCContextMenuCallback_GUID = LibC::GUID.new("97dede64-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWCContextMenuCallback = "97dede64-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWCContextMenuCallback
    lpVtbl : IWCContextMenuCallbackVTbl*
  end

  struct IWEExtendContextMenuVTbl
    query_interface : Proc(IWEExtendContextMenu*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWEExtendContextMenu*, UInt32)
    release : Proc(IWEExtendContextMenu*, UInt32)
    add_context_menu_items : Proc(IWEExtendContextMenu*, IUnknown, IWCContextMenuCallback, HRESULT)
  end

  IWEExtendContextMenu_GUID = LibC::GUID.new("97dede65-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWEExtendContextMenu = "97dede65-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWEExtendContextMenu
    lpVtbl : IWEExtendContextMenuVTbl*
  end

  struct IWEInvokeCommandVTbl
    query_interface : Proc(IWEInvokeCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWEInvokeCommand*, UInt32)
    release : Proc(IWEInvokeCommand*, UInt32)
    invoke_command : Proc(IWEInvokeCommand*, UInt32, IUnknown, HRESULT)
  end

  IWEInvokeCommand_GUID = LibC::GUID.new("97dede66-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWEInvokeCommand = "97dede66-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWEInvokeCommand
    lpVtbl : IWEInvokeCommandVTbl*
  end

  struct IWCWizard97CallbackVTbl
    query_interface : Proc(IWCWizard97Callback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWCWizard97Callback*, UInt32)
    release : Proc(IWCWizard97Callback*, UInt32)
    add_wizard97_page : Proc(IWCWizard97Callback*, Int32*, HRESULT)
    enable_next : Proc(IWCWizard97Callback*, Int32*, LibC::BOOL, HRESULT)
  end

  IWCWizard97Callback_GUID = LibC::GUID.new("97dede67-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWCWizard97Callback = "97dede67-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWCWizard97Callback
    lpVtbl : IWCWizard97CallbackVTbl*
  end

  struct IWEExtendWizard97VTbl
    query_interface : Proc(IWEExtendWizard97*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWEExtendWizard97*, UInt32)
    release : Proc(IWEExtendWizard97*, UInt32)
    create_wizard97_pages : Proc(IWEExtendWizard97*, IUnknown, IWCWizard97Callback, HRESULT)
  end

  IWEExtendWizard97_GUID = LibC::GUID.new("97dede68-fc6b-11cf-b5f5-00a0c90ab505")
  CLSID_IWEExtendWizard97 = "97dede68-fc6b-11cf-b5f5-00a0c90ab505"
  struct IWEExtendWizard97
    lpVtbl : IWEExtendWizard97VTbl*
  end

  struct ISClusApplicationVTbl
    query_interface : Proc(ISClusApplication*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusApplication*, UInt32)
    release : Proc(ISClusApplication*, UInt32)
    get_type_info_count : Proc(ISClusApplication*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusApplication*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusApplication*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusApplication*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_domain_names : Proc(ISClusApplication*, ISDomainNames*, HRESULT)
    get_cluster_names : Proc(ISClusApplication*, UInt8*, ISClusterNames*, HRESULT)
    open_cluster : Proc(ISClusApplication*, UInt8*, ISCluster*, HRESULT)
  end

  ISClusApplication_GUID = LibC::GUID.new("f2e606e6-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusApplication = "f2e606e6-2631-11d1-89f1-00a0c90d061e"
  struct ISClusApplication
    lpVtbl : ISClusApplicationVTbl*
  end

  struct ISDomainNamesVTbl
    query_interface : Proc(ISDomainNames*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISDomainNames*, UInt32)
    release : Proc(ISDomainNames*, UInt32)
    get_type_info_count : Proc(ISDomainNames*, UInt32*, HRESULT)
    get_type_info : Proc(ISDomainNames*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISDomainNames*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISDomainNames*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISDomainNames*, Int32*, HRESULT)
    get__new_enum : Proc(ISDomainNames*, IUnknown*, HRESULT)
    refresh : Proc(ISDomainNames*, HRESULT)
    get_item : Proc(ISDomainNames*, VARIANT, UInt8**, HRESULT)
  end

  ISDomainNames_GUID = LibC::GUID.new("f2e606e2-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISDomainNames = "f2e606e2-2631-11d1-89f1-00a0c90d061e"
  struct ISDomainNames
    lpVtbl : ISDomainNamesVTbl*
  end

  struct ISClusterNamesVTbl
    query_interface : Proc(ISClusterNames*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusterNames*, UInt32)
    release : Proc(ISClusterNames*, UInt32)
    get_type_info_count : Proc(ISClusterNames*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusterNames*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusterNames*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusterNames*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusterNames*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusterNames*, IUnknown*, HRESULT)
    refresh : Proc(ISClusterNames*, HRESULT)
    get_item : Proc(ISClusterNames*, VARIANT, UInt8**, HRESULT)
    get_domain_name : Proc(ISClusterNames*, UInt8**, HRESULT)
  end

  ISClusterNames_GUID = LibC::GUID.new("f2e606ec-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusterNames = "f2e606ec-2631-11d1-89f1-00a0c90d061e"
  struct ISClusterNames
    lpVtbl : ISClusterNamesVTbl*
  end

  struct ISClusRefObjectVTbl
    query_interface : Proc(ISClusRefObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusRefObject*, UInt32)
    release : Proc(ISClusRefObject*, UInt32)
    get_type_info_count : Proc(ISClusRefObject*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusRefObject*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusRefObject*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusRefObject*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_handle : Proc(ISClusRefObject*, LibC::UINT_PTR*, HRESULT)
  end

  ISClusRefObject_GUID = LibC::GUID.new("f2e60702-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusRefObject = "f2e60702-2631-11d1-89f1-00a0c90d061e"
  struct ISClusRefObject
    lpVtbl : ISClusRefObjectVTbl*
  end

  struct ISClusVersionVTbl
    query_interface : Proc(ISClusVersion*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusVersion*, UInt32)
    release : Proc(ISClusVersion*, UInt32)
    get_type_info_count : Proc(ISClusVersion*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusVersion*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusVersion*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusVersion*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ISClusVersion*, UInt8**, HRESULT)
    get_major_version : Proc(ISClusVersion*, Int32*, HRESULT)
    get_minor_version : Proc(ISClusVersion*, Int32*, HRESULT)
    get_build_number : Proc(ISClusVersion*, Int16*, HRESULT)
    get_vendor_id : Proc(ISClusVersion*, UInt8**, HRESULT)
    get_csd_version : Proc(ISClusVersion*, UInt8**, HRESULT)
    get_cluster_highest_version : Proc(ISClusVersion*, Int32*, HRESULT)
    get_cluster_lowest_version : Proc(ISClusVersion*, Int32*, HRESULT)
    get_flags : Proc(ISClusVersion*, Int32*, HRESULT)
    get_mixed_version : Proc(ISClusVersion*, VARIANT*, HRESULT)
  end

  ISClusVersion_GUID = LibC::GUID.new("f2e60716-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusVersion = "f2e60716-2631-11d1-89f1-00a0c90d061e"
  struct ISClusVersion
    lpVtbl : ISClusVersionVTbl*
  end

  struct ISClusterVTbl
    query_interface : Proc(ISCluster*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISCluster*, UInt32)
    release : Proc(ISCluster*, UInt32)
    get_type_info_count : Proc(ISCluster*, UInt32*, HRESULT)
    get_type_info : Proc(ISCluster*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISCluster*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISCluster*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISCluster*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISCluster*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISCluster*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISCluster*, ISClusProperties*, HRESULT)
    get_handle : Proc(ISCluster*, LibC::UINT_PTR*, HRESULT)
    open : Proc(ISCluster*, UInt8*, HRESULT)
    get_name : Proc(ISCluster*, UInt8**, HRESULT)
    put_name : Proc(ISCluster*, UInt8*, HRESULT)
    get_version : Proc(ISCluster*, ISClusVersion*, HRESULT)
    put_quorum_resource : Proc(ISCluster*, ISClusResource, HRESULT)
    get_quorum_resource : Proc(ISCluster*, ISClusResource*, HRESULT)
    get_quorum_log_size : Proc(ISCluster*, Int32*, HRESULT)
    put_quorum_log_size : Proc(ISCluster*, Int32, HRESULT)
    get_quorum_path : Proc(ISCluster*, UInt8**, HRESULT)
    put_quorum_path : Proc(ISCluster*, UInt8*, HRESULT)
    get_nodes : Proc(ISCluster*, ISClusNodes*, HRESULT)
    get_resource_groups : Proc(ISCluster*, ISClusResGroups*, HRESULT)
    get_resources : Proc(ISCluster*, ISClusResources*, HRESULT)
    get_resource_types : Proc(ISCluster*, ISClusResTypes*, HRESULT)
    get_networks : Proc(ISCluster*, ISClusNetworks*, HRESULT)
    get_net_interfaces : Proc(ISCluster*, ISClusNetInterfaces*, HRESULT)
  end

  ISCluster_GUID = LibC::GUID.new("f2e606e4-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISCluster = "f2e606e4-2631-11d1-89f1-00a0c90d061e"
  struct ISCluster
    lpVtbl : ISClusterVTbl*
  end

  struct ISClusNodeVTbl
    query_interface : Proc(ISClusNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNode*, UInt32)
    release : Proc(ISClusNode*, UInt32)
    get_type_info_count : Proc(ISClusNode*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNode*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNode*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNode*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusNode*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusNode*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusNode*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusNode*, ISClusProperties*, HRESULT)
    get_name : Proc(ISClusNode*, UInt8**, HRESULT)
    get_handle : Proc(ISClusNode*, LibC::UINT_PTR*, HRESULT)
    get_node_id : Proc(ISClusNode*, UInt8**, HRESULT)
    get_state : Proc(ISClusNode*, CLUSTER_NODE_STATE*, HRESULT)
    pause : Proc(ISClusNode*, HRESULT)
    resume : Proc(ISClusNode*, HRESULT)
    evict : Proc(ISClusNode*, HRESULT)
    get_resource_groups : Proc(ISClusNode*, ISClusResGroups*, HRESULT)
    get_cluster : Proc(ISClusNode*, ISCluster*, HRESULT)
    get_net_interfaces : Proc(ISClusNode*, ISClusNodeNetInterfaces*, HRESULT)
  end

  ISClusNode_GUID = LibC::GUID.new("f2e606f8-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNode = "f2e606f8-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNode
    lpVtbl : ISClusNodeVTbl*
  end

  struct ISClusNodesVTbl
    query_interface : Proc(ISClusNodes*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNodes*, UInt32)
    release : Proc(ISClusNodes*, UInt32)
    get_type_info_count : Proc(ISClusNodes*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNodes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNodes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNodes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusNodes*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusNodes*, IUnknown*, HRESULT)
    refresh : Proc(ISClusNodes*, HRESULT)
    get_item : Proc(ISClusNodes*, VARIANT, ISClusNode*, HRESULT)
  end

  ISClusNodes_GUID = LibC::GUID.new("f2e606fa-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNodes = "f2e606fa-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNodes
    lpVtbl : ISClusNodesVTbl*
  end

  struct ISClusNetworkVTbl
    query_interface : Proc(ISClusNetwork*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNetwork*, UInt32)
    release : Proc(ISClusNetwork*, UInt32)
    get_type_info_count : Proc(ISClusNetwork*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNetwork*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNetwork*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNetwork*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusNetwork*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusNetwork*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusNetwork*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusNetwork*, ISClusProperties*, HRESULT)
    get_handle : Proc(ISClusNetwork*, LibC::UINT_PTR*, HRESULT)
    get_name : Proc(ISClusNetwork*, UInt8**, HRESULT)
    put_name : Proc(ISClusNetwork*, UInt8*, HRESULT)
    get_network_id : Proc(ISClusNetwork*, UInt8**, HRESULT)
    get_state : Proc(ISClusNetwork*, CLUSTER_NETWORK_STATE*, HRESULT)
    get_net_interfaces : Proc(ISClusNetwork*, ISClusNetworkNetInterfaces*, HRESULT)
    get_cluster : Proc(ISClusNetwork*, ISCluster*, HRESULT)
  end

  ISClusNetwork_GUID = LibC::GUID.new("f2e606f2-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNetwork = "f2e606f2-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNetwork
    lpVtbl : ISClusNetworkVTbl*
  end

  struct ISClusNetworksVTbl
    query_interface : Proc(ISClusNetworks*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNetworks*, UInt32)
    release : Proc(ISClusNetworks*, UInt32)
    get_type_info_count : Proc(ISClusNetworks*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNetworks*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNetworks*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNetworks*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusNetworks*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusNetworks*, IUnknown*, HRESULT)
    refresh : Proc(ISClusNetworks*, HRESULT)
    get_item : Proc(ISClusNetworks*, VARIANT, ISClusNetwork*, HRESULT)
  end

  ISClusNetworks_GUID = LibC::GUID.new("f2e606f4-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNetworks = "f2e606f4-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNetworks
    lpVtbl : ISClusNetworksVTbl*
  end

  struct ISClusNetInterfaceVTbl
    query_interface : Proc(ISClusNetInterface*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNetInterface*, UInt32)
    release : Proc(ISClusNetInterface*, UInt32)
    get_type_info_count : Proc(ISClusNetInterface*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNetInterface*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNetInterface*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNetInterface*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusNetInterface*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusNetInterface*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusNetInterface*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusNetInterface*, ISClusProperties*, HRESULT)
    get_name : Proc(ISClusNetInterface*, UInt8**, HRESULT)
    get_handle : Proc(ISClusNetInterface*, LibC::UINT_PTR*, HRESULT)
    get_state : Proc(ISClusNetInterface*, CLUSTER_NETINTERFACE_STATE*, HRESULT)
    get_cluster : Proc(ISClusNetInterface*, ISCluster*, HRESULT)
  end

  ISClusNetInterface_GUID = LibC::GUID.new("f2e606ee-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNetInterface = "f2e606ee-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNetInterface
    lpVtbl : ISClusNetInterfaceVTbl*
  end

  struct ISClusNetInterfacesVTbl
    query_interface : Proc(ISClusNetInterfaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNetInterfaces*, UInt32)
    release : Proc(ISClusNetInterfaces*, UInt32)
    get_type_info_count : Proc(ISClusNetInterfaces*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNetInterfaces*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNetInterfaces*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNetInterfaces*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusNetInterfaces*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusNetInterfaces*, IUnknown*, HRESULT)
    refresh : Proc(ISClusNetInterfaces*, HRESULT)
    get_item : Proc(ISClusNetInterfaces*, VARIANT, ISClusNetInterface*, HRESULT)
  end

  ISClusNetInterfaces_GUID = LibC::GUID.new("f2e606f0-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNetInterfaces = "f2e606f0-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNetInterfaces
    lpVtbl : ISClusNetInterfacesVTbl*
  end

  struct ISClusNodeNetInterfacesVTbl
    query_interface : Proc(ISClusNodeNetInterfaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNodeNetInterfaces*, UInt32)
    release : Proc(ISClusNodeNetInterfaces*, UInt32)
    get_type_info_count : Proc(ISClusNodeNetInterfaces*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNodeNetInterfaces*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNodeNetInterfaces*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNodeNetInterfaces*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusNodeNetInterfaces*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusNodeNetInterfaces*, IUnknown*, HRESULT)
    refresh : Proc(ISClusNodeNetInterfaces*, HRESULT)
    get_item : Proc(ISClusNodeNetInterfaces*, VARIANT, ISClusNetInterface*, HRESULT)
  end

  ISClusNodeNetInterfaces_GUID = LibC::GUID.new("f2e606fc-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNodeNetInterfaces = "f2e606fc-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNodeNetInterfaces
    lpVtbl : ISClusNodeNetInterfacesVTbl*
  end

  struct ISClusNetworkNetInterfacesVTbl
    query_interface : Proc(ISClusNetworkNetInterfaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusNetworkNetInterfaces*, UInt32)
    release : Proc(ISClusNetworkNetInterfaces*, UInt32)
    get_type_info_count : Proc(ISClusNetworkNetInterfaces*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusNetworkNetInterfaces*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusNetworkNetInterfaces*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusNetworkNetInterfaces*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusNetworkNetInterfaces*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusNetworkNetInterfaces*, IUnknown*, HRESULT)
    refresh : Proc(ISClusNetworkNetInterfaces*, HRESULT)
    get_item : Proc(ISClusNetworkNetInterfaces*, VARIANT, ISClusNetInterface*, HRESULT)
  end

  ISClusNetworkNetInterfaces_GUID = LibC::GUID.new("f2e606f6-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusNetworkNetInterfaces = "f2e606f6-2631-11d1-89f1-00a0c90d061e"
  struct ISClusNetworkNetInterfaces
    lpVtbl : ISClusNetworkNetInterfacesVTbl*
  end

  struct ISClusResGroupVTbl
    query_interface : Proc(ISClusResGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResGroup*, UInt32)
    release : Proc(ISClusResGroup*, UInt32)
    get_type_info_count : Proc(ISClusResGroup*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResGroup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResGroup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResGroup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusResGroup*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusResGroup*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusResGroup*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusResGroup*, ISClusProperties*, HRESULT)
    get_handle : Proc(ISClusResGroup*, LibC::UINT_PTR*, HRESULT)
    get_name : Proc(ISClusResGroup*, UInt8**, HRESULT)
    put_name : Proc(ISClusResGroup*, UInt8*, HRESULT)
    get_state : Proc(ISClusResGroup*, CLUSTER_GROUP_STATE*, HRESULT)
    get_owner_node : Proc(ISClusResGroup*, ISClusNode*, HRESULT)
    get_resources : Proc(ISClusResGroup*, ISClusResGroupResources*, HRESULT)
    get_preferred_owner_nodes : Proc(ISClusResGroup*, ISClusResGroupPreferredOwnerNodes*, HRESULT)
    delete : Proc(ISClusResGroup*, HRESULT)
    online : Proc(ISClusResGroup*, VARIANT, VARIANT, VARIANT*, HRESULT)
    move : Proc(ISClusResGroup*, VARIANT, VARIANT, VARIANT*, HRESULT)
    offline : Proc(ISClusResGroup*, VARIANT, VARIANT*, HRESULT)
    get_cluster : Proc(ISClusResGroup*, ISCluster*, HRESULT)
  end

  ISClusResGroup_GUID = LibC::GUID.new("f2e60706-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResGroup = "f2e60706-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResGroup
    lpVtbl : ISClusResGroupVTbl*
  end

  struct ISClusResGroupsVTbl
    query_interface : Proc(ISClusResGroups*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResGroups*, UInt32)
    release : Proc(ISClusResGroups*, UInt32)
    get_type_info_count : Proc(ISClusResGroups*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResGroups*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResGroups*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResGroups*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResGroups*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResGroups*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResGroups*, HRESULT)
    get_item : Proc(ISClusResGroups*, VARIANT, ISClusResGroup*, HRESULT)
    create_item : Proc(ISClusResGroups*, UInt8*, ISClusResGroup*, HRESULT)
    delete_item : Proc(ISClusResGroups*, VARIANT, HRESULT)
  end

  ISClusResGroups_GUID = LibC::GUID.new("f2e60708-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResGroups = "f2e60708-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResGroups
    lpVtbl : ISClusResGroupsVTbl*
  end

  struct ISClusResourceVTbl
    query_interface : Proc(ISClusResource*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResource*, UInt32)
    release : Proc(ISClusResource*, UInt32)
    get_type_info_count : Proc(ISClusResource*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResource*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResource*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResource*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusResource*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusResource*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusResource*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusResource*, ISClusProperties*, HRESULT)
    get_handle : Proc(ISClusResource*, LibC::UINT_PTR*, HRESULT)
    get_name : Proc(ISClusResource*, UInt8**, HRESULT)
    put_name : Proc(ISClusResource*, UInt8*, HRESULT)
    get_state : Proc(ISClusResource*, CLUSTER_RESOURCE_STATE*, HRESULT)
    get_core_flag : Proc(ISClusResource*, CLUS_FLAGS*, HRESULT)
    become_quorum_resource : Proc(ISClusResource*, UInt8*, Int32, HRESULT)
    delete : Proc(ISClusResource*, HRESULT)
    fail : Proc(ISClusResource*, HRESULT)
    online : Proc(ISClusResource*, Int32, VARIANT*, HRESULT)
    offline : Proc(ISClusResource*, Int32, VARIANT*, HRESULT)
    change_resource_group : Proc(ISClusResource*, ISClusResGroup, HRESULT)
    add_resource_node : Proc(ISClusResource*, ISClusNode, HRESULT)
    remove_resource_node : Proc(ISClusResource*, ISClusNode, HRESULT)
    can_resource_be_dependent : Proc(ISClusResource*, ISClusResource, VARIANT*, HRESULT)
    get_possible_owner_nodes : Proc(ISClusResource*, ISClusResPossibleOwnerNodes*, HRESULT)
    get_dependencies : Proc(ISClusResource*, ISClusResDependencies*, HRESULT)
    get_dependents : Proc(ISClusResource*, ISClusResDependents*, HRESULT)
    get_group : Proc(ISClusResource*, ISClusResGroup*, HRESULT)
    get_owner_node : Proc(ISClusResource*, ISClusNode*, HRESULT)
    get_cluster : Proc(ISClusResource*, ISCluster*, HRESULT)
    get_class_info : Proc(ISClusResource*, CLUSTER_RESOURCE_CLASS*, HRESULT)
    get_disk : Proc(ISClusResource*, ISClusDisk*, HRESULT)
    get_registry_keys : Proc(ISClusResource*, ISClusRegistryKeys*, HRESULT)
    get_crypto_keys : Proc(ISClusResource*, ISClusCryptoKeys*, HRESULT)
    get_type_name : Proc(ISClusResource*, UInt8**, HRESULT)
    get_type : Proc(ISClusResource*, ISClusResType*, HRESULT)
    get_maintenance_mode : Proc(ISClusResource*, LibC::BOOL*, HRESULT)
    put_maintenance_mode : Proc(ISClusResource*, LibC::BOOL, HRESULT)
  end

  ISClusResource_GUID = LibC::GUID.new("f2e6070a-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResource = "f2e6070a-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResource
    lpVtbl : ISClusResourceVTbl*
  end

  struct ISClusResDependenciesVTbl
    query_interface : Proc(ISClusResDependencies*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResDependencies*, UInt32)
    release : Proc(ISClusResDependencies*, UInt32)
    get_type_info_count : Proc(ISClusResDependencies*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResDependencies*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResDependencies*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResDependencies*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResDependencies*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResDependencies*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResDependencies*, HRESULT)
    get_item : Proc(ISClusResDependencies*, VARIANT, ISClusResource*, HRESULT)
    create_item : Proc(ISClusResDependencies*, UInt8*, UInt8*, CLUSTER_RESOURCE_CREATE_FLAGS, ISClusResource*, HRESULT)
    delete_item : Proc(ISClusResDependencies*, VARIANT, HRESULT)
    add_item : Proc(ISClusResDependencies*, ISClusResource, HRESULT)
    remove_item : Proc(ISClusResDependencies*, VARIANT, HRESULT)
  end

  ISClusResDependencies_GUID = LibC::GUID.new("f2e60704-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResDependencies = "f2e60704-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResDependencies
    lpVtbl : ISClusResDependenciesVTbl*
  end

  struct ISClusResGroupResourcesVTbl
    query_interface : Proc(ISClusResGroupResources*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResGroupResources*, UInt32)
    release : Proc(ISClusResGroupResources*, UInt32)
    get_type_info_count : Proc(ISClusResGroupResources*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResGroupResources*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResGroupResources*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResGroupResources*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResGroupResources*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResGroupResources*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResGroupResources*, HRESULT)
    get_item : Proc(ISClusResGroupResources*, VARIANT, ISClusResource*, HRESULT)
    create_item : Proc(ISClusResGroupResources*, UInt8*, UInt8*, CLUSTER_RESOURCE_CREATE_FLAGS, ISClusResource*, HRESULT)
    delete_item : Proc(ISClusResGroupResources*, VARIANT, HRESULT)
  end

  ISClusResGroupResources_GUID = LibC::GUID.new("f2e606ea-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResGroupResources = "f2e606ea-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResGroupResources
    lpVtbl : ISClusResGroupResourcesVTbl*
  end

  struct ISClusResTypeResourcesVTbl
    query_interface : Proc(ISClusResTypeResources*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResTypeResources*, UInt32)
    release : Proc(ISClusResTypeResources*, UInt32)
    get_type_info_count : Proc(ISClusResTypeResources*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResTypeResources*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResTypeResources*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResTypeResources*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResTypeResources*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResTypeResources*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResTypeResources*, HRESULT)
    get_item : Proc(ISClusResTypeResources*, VARIANT, ISClusResource*, HRESULT)
    create_item : Proc(ISClusResTypeResources*, UInt8*, UInt8*, CLUSTER_RESOURCE_CREATE_FLAGS, ISClusResource*, HRESULT)
    delete_item : Proc(ISClusResTypeResources*, VARIANT, HRESULT)
  end

  ISClusResTypeResources_GUID = LibC::GUID.new("f2e60714-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResTypeResources = "f2e60714-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResTypeResources
    lpVtbl : ISClusResTypeResourcesVTbl*
  end

  struct ISClusResourcesVTbl
    query_interface : Proc(ISClusResources*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResources*, UInt32)
    release : Proc(ISClusResources*, UInt32)
    get_type_info_count : Proc(ISClusResources*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResources*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResources*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResources*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResources*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResources*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResources*, HRESULT)
    get_item : Proc(ISClusResources*, VARIANT, ISClusResource*, HRESULT)
    create_item : Proc(ISClusResources*, UInt8*, UInt8*, UInt8*, CLUSTER_RESOURCE_CREATE_FLAGS, ISClusResource*, HRESULT)
    delete_item : Proc(ISClusResources*, VARIANT, HRESULT)
  end

  ISClusResources_GUID = LibC::GUID.new("f2e6070c-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResources = "f2e6070c-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResources
    lpVtbl : ISClusResourcesVTbl*
  end

  struct ISClusResGroupPreferredOwnerNodesVTbl
    query_interface : Proc(ISClusResGroupPreferredOwnerNodes*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResGroupPreferredOwnerNodes*, UInt32)
    release : Proc(ISClusResGroupPreferredOwnerNodes*, UInt32)
    get_type_info_count : Proc(ISClusResGroupPreferredOwnerNodes*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResGroupPreferredOwnerNodes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResGroupPreferredOwnerNodes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResGroupPreferredOwnerNodes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResGroupPreferredOwnerNodes*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResGroupPreferredOwnerNodes*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResGroupPreferredOwnerNodes*, HRESULT)
    get_item : Proc(ISClusResGroupPreferredOwnerNodes*, VARIANT, ISClusNode*, HRESULT)
    insert_item : Proc(ISClusResGroupPreferredOwnerNodes*, ISClusNode, Int32, HRESULT)
    remove_item : Proc(ISClusResGroupPreferredOwnerNodes*, VARIANT, HRESULT)
    get_modified : Proc(ISClusResGroupPreferredOwnerNodes*, VARIANT*, HRESULT)
    save_changes : Proc(ISClusResGroupPreferredOwnerNodes*, HRESULT)
    add_item : Proc(ISClusResGroupPreferredOwnerNodes*, ISClusNode, HRESULT)
  end

  ISClusResGroupPreferredOwnerNodes_GUID = LibC::GUID.new("f2e606e8-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResGroupPreferredOwnerNodes = "f2e606e8-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResGroupPreferredOwnerNodes
    lpVtbl : ISClusResGroupPreferredOwnerNodesVTbl*
  end

  struct ISClusResPossibleOwnerNodesVTbl
    query_interface : Proc(ISClusResPossibleOwnerNodes*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResPossibleOwnerNodes*, UInt32)
    release : Proc(ISClusResPossibleOwnerNodes*, UInt32)
    get_type_info_count : Proc(ISClusResPossibleOwnerNodes*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResPossibleOwnerNodes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResPossibleOwnerNodes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResPossibleOwnerNodes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResPossibleOwnerNodes*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResPossibleOwnerNodes*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResPossibleOwnerNodes*, HRESULT)
    get_item : Proc(ISClusResPossibleOwnerNodes*, VARIANT, ISClusNode*, HRESULT)
    add_item : Proc(ISClusResPossibleOwnerNodes*, ISClusNode, HRESULT)
    remove_item : Proc(ISClusResPossibleOwnerNodes*, VARIANT, HRESULT)
    get_modified : Proc(ISClusResPossibleOwnerNodes*, VARIANT*, HRESULT)
  end

  ISClusResPossibleOwnerNodes_GUID = LibC::GUID.new("f2e6070e-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResPossibleOwnerNodes = "f2e6070e-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResPossibleOwnerNodes
    lpVtbl : ISClusResPossibleOwnerNodesVTbl*
  end

  struct ISClusResTypePossibleOwnerNodesVTbl
    query_interface : Proc(ISClusResTypePossibleOwnerNodes*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResTypePossibleOwnerNodes*, UInt32)
    release : Proc(ISClusResTypePossibleOwnerNodes*, UInt32)
    get_type_info_count : Proc(ISClusResTypePossibleOwnerNodes*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResTypePossibleOwnerNodes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResTypePossibleOwnerNodes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResTypePossibleOwnerNodes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResTypePossibleOwnerNodes*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResTypePossibleOwnerNodes*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResTypePossibleOwnerNodes*, HRESULT)
    get_item : Proc(ISClusResTypePossibleOwnerNodes*, VARIANT, ISClusNode*, HRESULT)
  end

  ISClusResTypePossibleOwnerNodes_GUID = LibC::GUID.new("f2e60718-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResTypePossibleOwnerNodes = "f2e60718-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResTypePossibleOwnerNodes
    lpVtbl : ISClusResTypePossibleOwnerNodesVTbl*
  end

  struct ISClusResTypeVTbl
    query_interface : Proc(ISClusResType*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResType*, UInt32)
    release : Proc(ISClusResType*, UInt32)
    get_type_info_count : Proc(ISClusResType*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_common_properties : Proc(ISClusResType*, ISClusProperties*, HRESULT)
    get_private_properties : Proc(ISClusResType*, ISClusProperties*, HRESULT)
    get_common_ro_properties : Proc(ISClusResType*, ISClusProperties*, HRESULT)
    get_private_ro_properties : Proc(ISClusResType*, ISClusProperties*, HRESULT)
    get_name : Proc(ISClusResType*, UInt8**, HRESULT)
    delete : Proc(ISClusResType*, HRESULT)
    get_cluster : Proc(ISClusResType*, ISCluster*, HRESULT)
    get_resources : Proc(ISClusResType*, ISClusResTypeResources*, HRESULT)
    get_possible_owner_nodes : Proc(ISClusResType*, ISClusResTypePossibleOwnerNodes*, HRESULT)
    get_available_disks : Proc(ISClusResType*, ISClusDisks*, HRESULT)
  end

  ISClusResType_GUID = LibC::GUID.new("f2e60710-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResType = "f2e60710-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResType
    lpVtbl : ISClusResTypeVTbl*
  end

  struct ISClusResTypesVTbl
    query_interface : Proc(ISClusResTypes*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResTypes*, UInt32)
    release : Proc(ISClusResTypes*, UInt32)
    get_type_info_count : Proc(ISClusResTypes*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResTypes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResTypes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResTypes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResTypes*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResTypes*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResTypes*, HRESULT)
    get_item : Proc(ISClusResTypes*, VARIANT, ISClusResType*, HRESULT)
    create_item : Proc(ISClusResTypes*, UInt8*, UInt8*, UInt8*, Int32, Int32, ISClusResType*, HRESULT)
    delete_item : Proc(ISClusResTypes*, VARIANT, HRESULT)
  end

  ISClusResTypes_GUID = LibC::GUID.new("f2e60712-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResTypes = "f2e60712-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResTypes
    lpVtbl : ISClusResTypesVTbl*
  end

  struct ISClusPropertyVTbl
    query_interface : Proc(ISClusProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusProperty*, UInt32)
    release : Proc(ISClusProperty*, UInt32)
    get_type_info_count : Proc(ISClusProperty*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusProperty*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusProperty*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusProperty*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ISClusProperty*, UInt8**, HRESULT)
    get_length : Proc(ISClusProperty*, Int32*, HRESULT)
    get_value_count : Proc(ISClusProperty*, Int32*, HRESULT)
    get_values : Proc(ISClusProperty*, ISClusPropertyValues*, HRESULT)
    get_value : Proc(ISClusProperty*, VARIANT*, HRESULT)
    put_value : Proc(ISClusProperty*, VARIANT, HRESULT)
    get_type : Proc(ISClusProperty*, CLUSTER_PROPERTY_TYPE*, HRESULT)
    put_type : Proc(ISClusProperty*, CLUSTER_PROPERTY_TYPE, HRESULT)
    get_format : Proc(ISClusProperty*, CLUSTER_PROPERTY_FORMAT*, HRESULT)
    put_format : Proc(ISClusProperty*, CLUSTER_PROPERTY_FORMAT, HRESULT)
    get_read_only : Proc(ISClusProperty*, VARIANT*, HRESULT)
    get_private : Proc(ISClusProperty*, VARIANT*, HRESULT)
    get_common : Proc(ISClusProperty*, VARIANT*, HRESULT)
    get_modified : Proc(ISClusProperty*, VARIANT*, HRESULT)
    use_default_value : Proc(ISClusProperty*, HRESULT)
  end

  ISClusProperty_GUID = LibC::GUID.new("f2e606fe-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusProperty = "f2e606fe-2631-11d1-89f1-00a0c90d061e"
  struct ISClusProperty
    lpVtbl : ISClusPropertyVTbl*
  end

  struct ISClusPropertyValueVTbl
    query_interface : Proc(ISClusPropertyValue*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPropertyValue*, UInt32)
    release : Proc(ISClusPropertyValue*, UInt32)
    get_type_info_count : Proc(ISClusPropertyValue*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPropertyValue*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPropertyValue*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPropertyValue*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_value : Proc(ISClusPropertyValue*, VARIANT*, HRESULT)
    put_value : Proc(ISClusPropertyValue*, VARIANT, HRESULT)
    get_type : Proc(ISClusPropertyValue*, CLUSTER_PROPERTY_TYPE*, HRESULT)
    put_type : Proc(ISClusPropertyValue*, CLUSTER_PROPERTY_TYPE, HRESULT)
    get_format : Proc(ISClusPropertyValue*, CLUSTER_PROPERTY_FORMAT*, HRESULT)
    put_format : Proc(ISClusPropertyValue*, CLUSTER_PROPERTY_FORMAT, HRESULT)
    get_length : Proc(ISClusPropertyValue*, Int32*, HRESULT)
    get_data_count : Proc(ISClusPropertyValue*, Int32*, HRESULT)
    get_data : Proc(ISClusPropertyValue*, ISClusPropertyValueData*, HRESULT)
  end

  ISClusPropertyValue_GUID = LibC::GUID.new("f2e6071a-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusPropertyValue = "f2e6071a-2631-11d1-89f1-00a0c90d061e"
  struct ISClusPropertyValue
    lpVtbl : ISClusPropertyValueVTbl*
  end

  struct ISClusPropertyValuesVTbl
    query_interface : Proc(ISClusPropertyValues*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPropertyValues*, UInt32)
    release : Proc(ISClusPropertyValues*, UInt32)
    get_type_info_count : Proc(ISClusPropertyValues*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPropertyValues*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPropertyValues*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPropertyValues*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusPropertyValues*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusPropertyValues*, IUnknown*, HRESULT)
    get_item : Proc(ISClusPropertyValues*, VARIANT, ISClusPropertyValue*, HRESULT)
    create_item : Proc(ISClusPropertyValues*, UInt8*, VARIANT, ISClusPropertyValue*, HRESULT)
    remove_item : Proc(ISClusPropertyValues*, VARIANT, HRESULT)
  end

  ISClusPropertyValues_GUID = LibC::GUID.new("f2e6071c-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusPropertyValues = "f2e6071c-2631-11d1-89f1-00a0c90d061e"
  struct ISClusPropertyValues
    lpVtbl : ISClusPropertyValuesVTbl*
  end

  struct ISClusPropertiesVTbl
    query_interface : Proc(ISClusProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusProperties*, UInt32)
    release : Proc(ISClusProperties*, UInt32)
    get_type_info_count : Proc(ISClusProperties*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusProperties*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusProperties*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusProperties*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusProperties*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusProperties*, IUnknown*, HRESULT)
    refresh : Proc(ISClusProperties*, HRESULT)
    get_item : Proc(ISClusProperties*, VARIANT, ISClusProperty*, HRESULT)
    create_item : Proc(ISClusProperties*, UInt8*, VARIANT, ISClusProperty*, HRESULT)
    use_default_value : Proc(ISClusProperties*, VARIANT, HRESULT)
    save_changes : Proc(ISClusProperties*, VARIANT*, HRESULT)
    get_read_only : Proc(ISClusProperties*, VARIANT*, HRESULT)
    get_private : Proc(ISClusProperties*, VARIANT*, HRESULT)
    get_common : Proc(ISClusProperties*, VARIANT*, HRESULT)
    get_modified : Proc(ISClusProperties*, VARIANT*, HRESULT)
  end

  ISClusProperties_GUID = LibC::GUID.new("f2e60700-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusProperties = "f2e60700-2631-11d1-89f1-00a0c90d061e"
  struct ISClusProperties
    lpVtbl : ISClusPropertiesVTbl*
  end

  struct ISClusPropertyValueDataVTbl
    query_interface : Proc(ISClusPropertyValueData*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPropertyValueData*, UInt32)
    release : Proc(ISClusPropertyValueData*, UInt32)
    get_type_info_count : Proc(ISClusPropertyValueData*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPropertyValueData*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPropertyValueData*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPropertyValueData*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusPropertyValueData*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusPropertyValueData*, IUnknown*, HRESULT)
    get_item : Proc(ISClusPropertyValueData*, VARIANT, VARIANT*, HRESULT)
    create_item : Proc(ISClusPropertyValueData*, VARIANT, VARIANT*, HRESULT)
    remove_item : Proc(ISClusPropertyValueData*, VARIANT, HRESULT)
  end

  ISClusPropertyValueData_GUID = LibC::GUID.new("f2e6071e-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusPropertyValueData = "f2e6071e-2631-11d1-89f1-00a0c90d061e"
  struct ISClusPropertyValueData
    lpVtbl : ISClusPropertyValueDataVTbl*
  end

  struct ISClusPartitionVTbl
    query_interface : Proc(ISClusPartition*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPartition*, UInt32)
    release : Proc(ISClusPartition*, UInt32)
    get_type_info_count : Proc(ISClusPartition*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPartition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPartition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPartition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_flags : Proc(ISClusPartition*, Int32*, HRESULT)
    get_device_name : Proc(ISClusPartition*, UInt8**, HRESULT)
    get_volume_label : Proc(ISClusPartition*, UInt8**, HRESULT)
    get_serial_number : Proc(ISClusPartition*, Int32*, HRESULT)
    get_maximum_component_length : Proc(ISClusPartition*, Int32*, HRESULT)
    get_file_system_flags : Proc(ISClusPartition*, Int32*, HRESULT)
    get_file_system : Proc(ISClusPartition*, UInt8**, HRESULT)
  end

  ISClusPartition_GUID = LibC::GUID.new("f2e60720-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusPartition = "f2e60720-2631-11d1-89f1-00a0c90d061e"
  struct ISClusPartition
    lpVtbl : ISClusPartitionVTbl*
  end

  struct ISClusPartitionExVTbl
    query_interface : Proc(ISClusPartitionEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPartitionEx*, UInt32)
    release : Proc(ISClusPartitionEx*, UInt32)
    get_type_info_count : Proc(ISClusPartitionEx*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPartitionEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPartitionEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPartitionEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_flags : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_device_name : Proc(ISClusPartitionEx*, UInt8**, HRESULT)
    get_volume_label : Proc(ISClusPartitionEx*, UInt8**, HRESULT)
    get_serial_number : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_maximum_component_length : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_file_system_flags : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_file_system : Proc(ISClusPartitionEx*, UInt8**, HRESULT)
    get_total_size : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_free_space : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_device_number : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_partition_number : Proc(ISClusPartitionEx*, Int32*, HRESULT)
    get_volume_guid : Proc(ISClusPartitionEx*, UInt8**, HRESULT)
  end

  ISClusPartitionEx_GUID = LibC::GUID.new("8802d4fe-b32e-4ad1-9dbd-64f18e1166ce")
  CLSID_ISClusPartitionEx = "8802d4fe-b32e-4ad1-9dbd-64f18e1166ce"
  struct ISClusPartitionEx
    lpVtbl : ISClusPartitionExVTbl*
  end

  struct ISClusPartitionsVTbl
    query_interface : Proc(ISClusPartitions*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusPartitions*, UInt32)
    release : Proc(ISClusPartitions*, UInt32)
    get_type_info_count : Proc(ISClusPartitions*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusPartitions*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusPartitions*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusPartitions*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusPartitions*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusPartitions*, IUnknown*, HRESULT)
    get_item : Proc(ISClusPartitions*, VARIANT, ISClusPartition*, HRESULT)
  end

  ISClusPartitions_GUID = LibC::GUID.new("f2e60722-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusPartitions = "f2e60722-2631-11d1-89f1-00a0c90d061e"
  struct ISClusPartitions
    lpVtbl : ISClusPartitionsVTbl*
  end

  struct ISClusDiskVTbl
    query_interface : Proc(ISClusDisk*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusDisk*, UInt32)
    release : Proc(ISClusDisk*, UInt32)
    get_type_info_count : Proc(ISClusDisk*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusDisk*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusDisk*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusDisk*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_signature : Proc(ISClusDisk*, Int32*, HRESULT)
    get_scsi_address : Proc(ISClusDisk*, ISClusScsiAddress*, HRESULT)
    get_disk_number : Proc(ISClusDisk*, Int32*, HRESULT)
    get_partitions : Proc(ISClusDisk*, ISClusPartitions*, HRESULT)
  end

  ISClusDisk_GUID = LibC::GUID.new("f2e60724-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusDisk = "f2e60724-2631-11d1-89f1-00a0c90d061e"
  struct ISClusDisk
    lpVtbl : ISClusDiskVTbl*
  end

  struct ISClusDisksVTbl
    query_interface : Proc(ISClusDisks*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusDisks*, UInt32)
    release : Proc(ISClusDisks*, UInt32)
    get_type_info_count : Proc(ISClusDisks*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusDisks*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusDisks*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusDisks*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusDisks*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusDisks*, IUnknown*, HRESULT)
    get_item : Proc(ISClusDisks*, VARIANT, ISClusDisk*, HRESULT)
  end

  ISClusDisks_GUID = LibC::GUID.new("f2e60726-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusDisks = "f2e60726-2631-11d1-89f1-00a0c90d061e"
  struct ISClusDisks
    lpVtbl : ISClusDisksVTbl*
  end

  struct ISClusScsiAddressVTbl
    query_interface : Proc(ISClusScsiAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusScsiAddress*, UInt32)
    release : Proc(ISClusScsiAddress*, UInt32)
    get_type_info_count : Proc(ISClusScsiAddress*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusScsiAddress*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusScsiAddress*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusScsiAddress*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_port_number : Proc(ISClusScsiAddress*, VARIANT*, HRESULT)
    get_path_id : Proc(ISClusScsiAddress*, VARIANT*, HRESULT)
    get_target_id : Proc(ISClusScsiAddress*, VARIANT*, HRESULT)
    get_lun : Proc(ISClusScsiAddress*, VARIANT*, HRESULT)
  end

  ISClusScsiAddress_GUID = LibC::GUID.new("f2e60728-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusScsiAddress = "f2e60728-2631-11d1-89f1-00a0c90d061e"
  struct ISClusScsiAddress
    lpVtbl : ISClusScsiAddressVTbl*
  end

  struct ISClusRegistryKeysVTbl
    query_interface : Proc(ISClusRegistryKeys*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusRegistryKeys*, UInt32)
    release : Proc(ISClusRegistryKeys*, UInt32)
    get_type_info_count : Proc(ISClusRegistryKeys*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusRegistryKeys*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusRegistryKeys*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusRegistryKeys*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusRegistryKeys*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusRegistryKeys*, IUnknown*, HRESULT)
    refresh : Proc(ISClusRegistryKeys*, HRESULT)
    get_item : Proc(ISClusRegistryKeys*, VARIANT, UInt8**, HRESULT)
    add_item : Proc(ISClusRegistryKeys*, UInt8*, HRESULT)
    remove_item : Proc(ISClusRegistryKeys*, VARIANT, HRESULT)
  end

  ISClusRegistryKeys_GUID = LibC::GUID.new("f2e6072a-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusRegistryKeys = "f2e6072a-2631-11d1-89f1-00a0c90d061e"
  struct ISClusRegistryKeys
    lpVtbl : ISClusRegistryKeysVTbl*
  end

  struct ISClusCryptoKeysVTbl
    query_interface : Proc(ISClusCryptoKeys*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusCryptoKeys*, UInt32)
    release : Proc(ISClusCryptoKeys*, UInt32)
    get_type_info_count : Proc(ISClusCryptoKeys*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusCryptoKeys*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusCryptoKeys*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusCryptoKeys*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusCryptoKeys*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusCryptoKeys*, IUnknown*, HRESULT)
    refresh : Proc(ISClusCryptoKeys*, HRESULT)
    get_item : Proc(ISClusCryptoKeys*, VARIANT, UInt8**, HRESULT)
    add_item : Proc(ISClusCryptoKeys*, UInt8*, HRESULT)
    remove_item : Proc(ISClusCryptoKeys*, VARIANT, HRESULT)
  end

  ISClusCryptoKeys_GUID = LibC::GUID.new("f2e6072c-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusCryptoKeys = "f2e6072c-2631-11d1-89f1-00a0c90d061e"
  struct ISClusCryptoKeys
    lpVtbl : ISClusCryptoKeysVTbl*
  end

  struct ISClusResDependentsVTbl
    query_interface : Proc(ISClusResDependents*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISClusResDependents*, UInt32)
    release : Proc(ISClusResDependents*, UInt32)
    get_type_info_count : Proc(ISClusResDependents*, UInt32*, HRESULT)
    get_type_info : Proc(ISClusResDependents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISClusResDependents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISClusResDependents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ISClusResDependents*, Int32*, HRESULT)
    get__new_enum : Proc(ISClusResDependents*, IUnknown*, HRESULT)
    refresh : Proc(ISClusResDependents*, HRESULT)
    get_item : Proc(ISClusResDependents*, VARIANT, ISClusResource*, HRESULT)
    create_item : Proc(ISClusResDependents*, UInt8*, UInt8*, CLUSTER_RESOURCE_CREATE_FLAGS, ISClusResource*, HRESULT)
    delete_item : Proc(ISClusResDependents*, VARIANT, HRESULT)
    add_item : Proc(ISClusResDependents*, ISClusResource, HRESULT)
    remove_item : Proc(ISClusResDependents*, VARIANT, HRESULT)
  end

  ISClusResDependents_GUID = LibC::GUID.new("f2e6072e-2631-11d1-89f1-00a0c90d061e")
  CLSID_ISClusResDependents = "f2e6072e-2631-11d1-89f1-00a0c90d061e"
  struct ISClusResDependents
    lpVtbl : ISClusResDependentsVTbl*
  end


  # Params # lpsznodename : LibC::LPWSTR [In],pdwclusterstate : UInt32* [In]
  fun GetNodeClusterState(lpsznodename : LibC::LPWSTR, pdwclusterstate : UInt32*) : UInt32

  # Params # lpszclustername : LibC::LPWSTR [In]
  fun OpenCluster(lpszclustername : LibC::LPWSTR) : HCLUSTER*

  # Params # lpszclustername : LibC::LPWSTR [In],desiredaccess : UInt32 [In],grantedaccess : UInt32* [In]
  fun OpenClusterEx(lpszclustername : LibC::LPWSTR, desiredaccess : UInt32, grantedaccess : UInt32*) : HCLUSTER*

  # Params # hcluster : HCLUSTER* [In]
  fun CloseCluster(hcluster : HCLUSTER*) : LibC::BOOL

  # Params # hcluster : HCLUSTER* [In],lpsznewclustername : LibC::LPWSTR [In]
  fun SetClusterName(hcluster : HCLUSTER*, lpsznewclustername : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszclustername : Char* [In],lpcchclustername : UInt32* [In],lpclusterinfo : CLUSTERVERSIONINFO* [In]
  fun GetClusterInformation(hcluster : HCLUSTER*, lpszclustername : Char*, lpcchclustername : UInt32*, lpclusterinfo : CLUSTERVERSIONINFO*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcename : Char* [In],lpcchresourcename : UInt32* [In],lpszdevicename : Char* [In],lpcchdevicename : UInt32* [In],lpdwmaxquorumlogsize : UInt32* [In]
  fun GetClusterQuorumResource(hcluster : HCLUSTER*, lpszresourcename : Char*, lpcchresourcename : UInt32*, lpszdevicename : Char*, lpcchdevicename : UInt32*, lpdwmaxquorumlogsize : UInt32*) : UInt32

  # Params # hresource : HRESOURCE* [In],lpszdevicename : LibC::LPWSTR [In],dwmaxquologsize : UInt32 [In]
  fun SetClusterQuorumResource(hresource : HRESOURCE*, lpszdevicename : LibC::LPWSTR, dwmaxquologsize : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszpathname : LibC::LPWSTR [In]
  fun BackupClusterDatabase(hcluster : HCLUSTER*, lpszpathname : LibC::LPWSTR) : UInt32

  # Params # lpszpathname : LibC::LPWSTR [In],bforce : LibC::BOOL [In],lpszquorumdriveletter : LibC::LPWSTR [In]
  fun RestoreClusterDatabase(lpszpathname : LibC::LPWSTR, bforce : LibC::BOOL, lpszquorumdriveletter : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],networkcount : UInt32 [In],networklist : HNETWORK** [In]
  fun SetClusterNetworkPriorityOrder(hcluster : HCLUSTER*, networkcount : UInt32, networklist : HNETWORK**) : UInt32

  # Params # lpszclustername : LibC::LPWSTR [In],lpsznewpassword : LibC::LPWSTR [In],dwflags : UInt32 [In],lpreturnstatusbuffer : CLUSTER_SET_PASSWORD_STATUS* [In],lpcbreturnstatusbuffersize : UInt32* [In]
  fun SetClusterServiceAccountPassword(lpszclustername : LibC::LPWSTR, lpsznewpassword : LibC::LPWSTR, dwflags : UInt32, lpreturnstatusbuffer : CLUSTER_SET_PASSWORD_STATUS*, lpcbreturnstatusbuffersize : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterControl(hcluster : HCLUSTER*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],perform : LibC::BOOL [In],pfnprogresscallback : PCLUSTER_UPGRADE_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In]
  fun ClusterUpgradeFunctionalLevel(hcluster : HCLUSTER*, perform : LibC::BOOL, pfnprogresscallback : PCLUSTER_UPGRADE_PROGRESS_CALLBACK, pvcallbackarg : Void*) : UInt32

  # Params # hchange : HCHANGE* [In],hcluster : HCLUSTER* [In],filters : NOTIFY_FILTER_AND_TYPE* [In],dwfiltercount : UInt32 [In],dwnotifykey : LibC::UINT_PTR [In]
  fun CreateClusterNotifyPortV2(hchange : HCHANGE*, hcluster : HCLUSTER*, filters : NOTIFY_FILTER_AND_TYPE*, dwfiltercount : UInt32, dwnotifykey : LibC::UINT_PTR) : HCHANGE*

  # Params # hchange : HCHANGE* [In],filter : NOTIFY_FILTER_AND_TYPE [In],hobject : LibC::HANDLE [In],dwnotifykey : LibC::UINT_PTR [In]
  fun RegisterClusterNotifyV2(hchange : HCHANGE*, filter : NOTIFY_FILTER_AND_TYPE, hobject : LibC::HANDLE, dwnotifykey : LibC::UINT_PTR) : UInt32

  # Params # hchange : HCHANGE* [In],lphtargetevent : LibC::HANDLE* [In]
  fun GetNotifyEventHandle(hchange : HCHANGE*, lphtargetevent : LibC::HANDLE*) : UInt32

  # Params # hchange : HCHANGE* [In],lpdwnotifykey : LibC::UINT_PTR* [In],pfilterandtype : NOTIFY_FILTER_AND_TYPE* [In],buffer : UInt8* [In],lpbbuffersize : UInt32* [In],lpszobjectid : Char* [In],lpcchobjectid : UInt32* [In],lpszparentid : Char* [In],lpcchparentid : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In],lpsztype : Char* [In],lpcchtype : UInt32* [In],dwmilliseconds : UInt32 [In]
  fun GetClusterNotifyV2(hchange : HCHANGE*, lpdwnotifykey : LibC::UINT_PTR*, pfilterandtype : NOTIFY_FILTER_AND_TYPE*, buffer : UInt8*, lpbbuffersize : UInt32*, lpszobjectid : Char*, lpcchobjectid : UInt32*, lpszparentid : Char*, lpcchparentid : UInt32*, lpszname : Char*, lpcchname : UInt32*, lpsztype : Char*, lpcchtype : UInt32*, dwmilliseconds : UInt32) : UInt32

  # Params # hchange : HCHANGE* [In],hcluster : HCLUSTER* [In],dwfilter : UInt32 [In],dwnotifykey : LibC::UINT_PTR [In]
  fun CreateClusterNotifyPort(hchange : HCHANGE*, hcluster : HCLUSTER*, dwfilter : UInt32, dwnotifykey : LibC::UINT_PTR) : HCHANGE*

  # Params # hchange : HCHANGE* [In],dwfiltertype : UInt32 [In],hobject : LibC::HANDLE [In],dwnotifykey : LibC::UINT_PTR [In]
  fun RegisterClusterNotify(hchange : HCHANGE*, dwfiltertype : UInt32, hobject : LibC::HANDLE, dwnotifykey : LibC::UINT_PTR) : UInt32

  # Params # hchange : HCHANGE* [In],lpdwnotifykey : LibC::UINT_PTR* [In],lpdwfiltertype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In],dwmilliseconds : UInt32 [In]
  fun GetClusterNotify(hchange : HCHANGE*, lpdwnotifykey : LibC::UINT_PTR*, lpdwfiltertype : UInt32*, lpszname : Char*, lpcchname : UInt32*, dwmilliseconds : UInt32) : UInt32

  # Params # hchange : HCHANGE* [In]
  fun CloseClusterNotifyPort(hchange : HCHANGE*) : LibC::BOOL

  # Params # hcluster : HCLUSTER* [In],dwtype : UInt32 [In]
  fun ClusterOpenEnum(hcluster : HCLUSTER*, dwtype : UInt32) : HCLUSENUM*

  # Params # henum : HCLUSENUM* [In]
  fun ClusterGetEnumCount(henum : HCLUSENUM*) : UInt32

  # Params # henum : HCLUSENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterEnum(henum : HCLUSENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # henum : HCLUSENUM* [In]
  fun ClusterCloseEnum(henum : HCLUSENUM*) : UInt32

  # Params # hcluster : HCLUSTER* [In],dwtype : UInt32 [In],poptions : Void* [In]
  fun ClusterOpenEnumEx(hcluster : HCLUSTER*, dwtype : UInt32, poptions : Void*) : HCLUSENUMEX*

  # Params # hclusterenum : HCLUSENUMEX* [In]
  fun ClusterGetEnumCountEx(hclusterenum : HCLUSENUMEX*) : UInt32

  # Params # hclusterenum : HCLUSENUMEX* [In],dwindex : UInt32 [In],pitem : CLUSTER_ENUM_ITEM* [In],cbitem : UInt32* [In]
  fun ClusterEnumEx(hclusterenum : HCLUSENUMEX*, dwindex : UInt32, pitem : CLUSTER_ENUM_ITEM*, cbitem : UInt32*) : UInt32

  # Params # hclusterenum : HCLUSENUMEX* [In]
  fun ClusterCloseEnumEx(hclusterenum : HCLUSENUMEX*) : UInt32

  # Params # hcluster : HCLUSTER* [In],groupsetname : LibC::LPWSTR [In]
  fun CreateClusterGroupSet(hcluster : HCLUSTER*, groupsetname : LibC::LPWSTR) : HGROUPSET*

  # Params # hcluster : HCLUSTER* [In],lpszgroupsetname : LibC::LPWSTR [In]
  fun OpenClusterGroupSet(hcluster : HCLUSTER*, lpszgroupsetname : LibC::LPWSTR) : HGROUPSET*

  # Params # hgroupset : HGROUPSET* [In]
  fun CloseClusterGroupSet(hgroupset : HGROUPSET*) : LibC::BOOL

  # Params # hgroupset : HGROUPSET* [In]
  fun DeleteClusterGroupSet(hgroupset : HGROUPSET*) : UInt32

  # Params # hgroupset : HGROUPSET* [In],hgroup : HGROUP* [In]
  fun ClusterAddGroupToGroupSet(hgroupset : HGROUPSET*, hgroup : HGROUP*) : UInt32

  # Params # hgroupset : HGROUPSET* [In],hgroup : HGROUP* [In],faultdomain : UInt32 [In],updatedomain : UInt32 [In]
  fun ClusterAddGroupToGroupSetWithDomains(hgroupset : HGROUPSET*, hgroup : HGROUP*, faultdomain : UInt32, updatedomain : UInt32) : UInt32

  # Params # hgroup : HGROUP* [In]
  fun ClusterRemoveGroupFromGroupSet(hgroup : HGROUP*) : UInt32

  # Params # hgroupset : HGROUPSET* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],cbinbuffersize : UInt32 [In],lpoutbuffer : Void* [In],cboutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterGroupSetControl(hgroupset : HGROUPSET*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, cbinbuffersize : UInt32, lpoutbuffer : Void*, cboutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hdependentgroup : HGROUP* [In],hprovidergroup : HGROUP* [In]
  fun AddClusterGroupDependency(hdependentgroup : HGROUP*, hprovidergroup : HGROUP*) : UInt32

  # Params # hgroup : HGROUP* [In],lpszdependencyexpression : LibC::LPWSTR [In]
  fun SetGroupDependencyExpression(hgroup : HGROUP*, lpszdependencyexpression : LibC::LPWSTR) : UInt32

  # Params # hgroup : HGROUP* [In],hdependson : HGROUP* [In]
  fun RemoveClusterGroupDependency(hgroup : HGROUP*, hdependson : HGROUP*) : UInt32

  # Params # hdependentgroupset : HGROUPSET* [In],hprovidergroupset : HGROUPSET* [In]
  fun AddClusterGroupSetDependency(hdependentgroupset : HGROUPSET*, hprovidergroupset : HGROUPSET*) : UInt32

  # Params # hgroupset : HGROUPSET* [In],lpszdependencyexprssion : LibC::LPWSTR [In]
  fun SetClusterGroupSetDependencyExpression(hgroupset : HGROUPSET*, lpszdependencyexprssion : LibC::LPWSTR) : UInt32

  # Params # hgroupset : HGROUPSET* [In],hdependson : HGROUPSET* [In]
  fun RemoveClusterGroupSetDependency(hgroupset : HGROUPSET*, hdependson : HGROUPSET*) : UInt32

  # Params # hdependentgroup : HGROUP* [In],hprovidergroupset : HGROUPSET* [In]
  fun AddClusterGroupToGroupSetDependency(hdependentgroup : HGROUP*, hprovidergroupset : HGROUPSET*) : UInt32

  # Params # hgroup : HGROUP* [In],hdependson : HGROUPSET* [In]
  fun RemoveClusterGroupToGroupSetDependency(hgroup : HGROUP*, hdependson : HGROUPSET*) : UInt32

  # Params # hcluster : HCLUSTER* [In]
  fun ClusterGroupSetOpenEnum(hcluster : HCLUSTER*) : HGROUPSETENUM*

  # Params # hgroupsetenum : HGROUPSETENUM* [In]
  fun ClusterGroupSetGetEnumCount(hgroupsetenum : HGROUPSETENUM*) : UInt32

  # Params # hgroupsetenum : HGROUPSETENUM* [In],dwindex : UInt32 [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterGroupSetEnum(hgroupsetenum : HGROUPSETENUM*, dwindex : UInt32, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hgroupsetenum : HGROUPSETENUM* [In]
  fun ClusterGroupSetCloseEnum(hgroupsetenum : HGROUPSETENUM*) : UInt32

  # Params # hdependentgroupset : HGROUPSET* [In],lpremoteclustername : LibC::LPWSTR [In],lpremotegroupsetname : LibC::LPWSTR [In]
  fun AddCrossClusterGroupSetDependency(hdependentgroupset : HGROUPSET*, lpremoteclustername : LibC::LPWSTR, lpremotegroupsetname : LibC::LPWSTR) : UInt32

  # Params # hdependentgroupset : HGROUPSET* [In],lpremoteclustername : LibC::LPWSTR [In],lpremotegroupsetname : LibC::LPWSTR [In]
  fun RemoveCrossClusterGroupSetDependency(hdependentgroupset : HGROUPSET*, lpremoteclustername : LibC::LPWSTR, lpremotegroupsetname : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpavailabilitysetname : LibC::LPWSTR [In],pavailabilitysetconfig : CLUSTER_AVAILABILITY_SET_CONFIG* [In]
  fun CreateClusterAvailabilitySet(hcluster : HCLUSTER*, lpavailabilitysetname : LibC::LPWSTR, pavailabilitysetconfig : CLUSTER_AVAILABILITY_SET_CONFIG*) : HGROUPSET*

  # Params # hcluster : HCLUSTER* [In],lpsznodenamecurrent : LibC::LPWSTR [In],lpsznodenamenew : LibC::LPWSTR [In]
  fun ClusterNodeReplacement(hcluster : HCLUSTER*, lpsznodenamecurrent : LibC::LPWSTR, lpsznodenamenew : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],rulename : LibC::LPWSTR [In],ruletype : CLUS_AFFINITY_RULE_TYPE [In]
  fun ClusterCreateAffinityRule(hcluster : HCLUSTER*, rulename : LibC::LPWSTR, ruletype : CLUS_AFFINITY_RULE_TYPE) : UInt32

  # Params # hcluster : HCLUSTER* [In],rulename : LibC::LPWSTR [In]
  fun ClusterRemoveAffinityRule(hcluster : HCLUSTER*, rulename : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],rulename : LibC::LPWSTR [In],hgroup : HGROUP* [In]
  fun ClusterAddGroupToAffinityRule(hcluster : HCLUSTER*, rulename : LibC::LPWSTR, hgroup : HGROUP*) : UInt32

  # Params # hcluster : HCLUSTER* [In],rulename : LibC::LPWSTR [In],hgroup : HGROUP* [In]
  fun ClusterRemoveGroupFromAffinityRule(hcluster : HCLUSTER*, rulename : LibC::LPWSTR, hgroup : HGROUP*) : UInt32

  # Params # hcluster : HCLUSTER* [In],affinityrulename : LibC::LPWSTR [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],cbinbuffersize : UInt32 [In],lpoutbuffer : Void* [In],cboutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterAffinityRuleControl(hcluster : HCLUSTER*, affinityrulename : LibC::LPWSTR, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, cbinbuffersize : UInt32, lpoutbuffer : Void*, cboutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In]
  fun OpenClusterNode(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR) : HNODE*

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In],lpdwgrantedaccess : UInt32* [In]
  fun OpenClusterNodeEx(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, dwdesiredaccess : UInt32, lpdwgrantedaccess : UInt32*) : HNODE*

  # Params # hcluster : HCLUSTER* [In],nodeid : UInt32 [In]
  fun OpenClusterNodeById(hcluster : HCLUSTER*, nodeid : UInt32) : HNODE*

  # Params # hnode : HNODE* [In]
  fun CloseClusterNode(hnode : HNODE*) : LibC::BOOL

  # Params # hnode : HNODE* [In]
  fun GetClusterNodeState(hnode : HNODE*) : CLUSTER_NODE_STATE

  # Params # hnode : HNODE* [In],lpsznodeid : Char* [In],lpcchname : UInt32* [In]
  fun GetClusterNodeId(hnode : HNODE*, lpsznodeid : Char*, lpcchname : UInt32*) : UInt32

  # Params # hnode : HNODE* [In]
  fun GetClusterFromNode(hnode : HNODE*) : HCLUSTER*

  # Params # hnode : HNODE* [In]
  fun PauseClusterNode(hnode : HNODE*) : UInt32

  # Params # hnode : HNODE* [In]
  fun ResumeClusterNode(hnode : HNODE*) : UInt32

  # Params # hnode : HNODE* [In]
  fun EvictClusterNode(hnode : HNODE*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],lpsznetworkname : LibC::LPWSTR [In]
  fun ClusterNetInterfaceOpenEnum(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, lpsznetworkname : LibC::LPWSTR) : HNETINTERFACEENUM*

  # Params # hnetinterfaceenum : HNETINTERFACEENUM* [In],dwindex : UInt32 [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterNetInterfaceEnum(hnetinterfaceenum : HNETINTERFACEENUM*, dwindex : UInt32, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hnetinterfaceenum : HNETINTERFACEENUM* [In]
  fun ClusterNetInterfaceCloseEnum(hnetinterfaceenum : HNETINTERFACEENUM*) : UInt32

  # Params # hnode : HNODE* [In],dwtype : UInt32 [In]
  fun ClusterNodeOpenEnum(hnode : HNODE*, dwtype : UInt32) : HNODEENUM*

  # Params # hnode : HNODE* [In],dwtype : UInt32 [In],poptions : Void* [In]
  fun ClusterNodeOpenEnumEx(hnode : HNODE*, dwtype : UInt32, poptions : Void*) : HNODEENUMEX*

  # Params # hnodeenum : HNODEENUMEX* [In]
  fun ClusterNodeGetEnumCountEx(hnodeenum : HNODEENUMEX*) : UInt32

  # Params # hnodeenum : HNODEENUMEX* [In],dwindex : UInt32 [In],pitem : CLUSTER_ENUM_ITEM* [In],cbitem : UInt32* [In]
  fun ClusterNodeEnumEx(hnodeenum : HNODEENUMEX*, dwindex : UInt32, pitem : CLUSTER_ENUM_ITEM*, cbitem : UInt32*) : UInt32

  # Params # hnodeenum : HNODEENUMEX* [In]
  fun ClusterNodeCloseEnumEx(hnodeenum : HNODEENUMEX*) : UInt32

  # Params # hnodeenum : HNODEENUM* [In]
  fun ClusterNodeGetEnumCount(hnodeenum : HNODEENUM*) : UInt32

  # Params # hnodeenum : HNODEENUM* [In]
  fun ClusterNodeCloseEnum(hnodeenum : HNODEENUM*) : UInt32

  # Params # hnodeenum : HNODEENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterNodeEnum(hnodeenum : HNODEENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hnode : HNODE* [In],dwtimeout : UInt32 [In],phrcleanupstatus : HRESULT* [In]
  fun EvictClusterNodeEx(hnode : HNODE*, dwtimeout : UInt32, phrcleanupstatus : HRESULT*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsztypename : LibC::LPWSTR [In],samdesired : UInt32 [In]
  fun GetClusterResourceTypeKey(hcluster : HCLUSTER*, lpsztypename : LibC::LPWSTR, samdesired : UInt32) : HKEY

  # Params # hcluster : HCLUSTER* [In],lpszgroupname : LibC::LPWSTR [In]
  fun CreateClusterGroup(hcluster : HCLUSTER*, lpszgroupname : LibC::LPWSTR) : HGROUP*

  # Params # hcluster : HCLUSTER* [In],lpszgroupname : LibC::LPWSTR [In]
  fun OpenClusterGroup(hcluster : HCLUSTER*, lpszgroupname : LibC::LPWSTR) : HGROUP*

  # Params # hcluster : HCLUSTER* [In],lpszgroupname : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In],lpdwgrantedaccess : UInt32* [In]
  fun OpenClusterGroupEx(hcluster : HCLUSTER*, lpszgroupname : LibC::LPWSTR, dwdesiredaccess : UInt32, lpdwgrantedaccess : UInt32*) : HGROUP*

  # Params # hnode : HNODE* [In],bdrainnode : LibC::BOOL [In],dwpauseflags : UInt32 [In],hnodedraintarget : HNODE* [In]
  fun PauseClusterNodeEx(hnode : HNODE*, bdrainnode : LibC::BOOL, dwpauseflags : UInt32, hnodedraintarget : HNODE*) : UInt32

  # Params # hnode : HNODE* [In],eresumefailbacktype : CLUSTER_NODE_RESUME_FAILBACK_TYPE [In],dwresumeflagsreserved : UInt32 [In]
  fun ResumeClusterNodeEx(hnode : HNODE*, eresumefailbacktype : CLUSTER_NODE_RESUME_FAILBACK_TYPE, dwresumeflagsreserved : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszgroupname : LibC::LPWSTR [In],pgroupinfo : CLUSTER_CREATE_GROUP_INFO* [In]
  fun CreateClusterGroupEx(hcluster : HCLUSTER*, lpszgroupname : LibC::LPWSTR, pgroupinfo : CLUSTER_CREATE_GROUP_INFO*) : HGROUP*

  # Params # hcluster : HCLUSTER* [In],lpszproperties : LibC::LPWSTR [In],cbproperties : UInt32 [In],lpszroproperties : LibC::LPWSTR [In],cbroproperties : UInt32 [In],dwflags : UInt32 [In]
  fun ClusterGroupOpenEnumEx(hcluster : HCLUSTER*, lpszproperties : LibC::LPWSTR, cbproperties : UInt32, lpszroproperties : LibC::LPWSTR, cbroproperties : UInt32, dwflags : UInt32) : HGROUPENUMEX*

  # Params # hgroupenumex : HGROUPENUMEX* [In]
  fun ClusterGroupGetEnumCountEx(hgroupenumex : HGROUPENUMEX*) : UInt32

  # Params # hgroupenumex : HGROUPENUMEX* [In],dwindex : UInt32 [In],pitem : CLUSTER_GROUP_ENUM_ITEM* [In],cbitem : UInt32* [In]
  fun ClusterGroupEnumEx(hgroupenumex : HGROUPENUMEX*, dwindex : UInt32, pitem : CLUSTER_GROUP_ENUM_ITEM*, cbitem : UInt32*) : UInt32

  # Params # hgroupenumex : HGROUPENUMEX* [In]
  fun ClusterGroupCloseEnumEx(hgroupenumex : HGROUPENUMEX*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszproperties : LibC::LPWSTR [In],cbproperties : UInt32 [In],lpszroproperties : LibC::LPWSTR [In],cbroproperties : UInt32 [In],dwflags : UInt32 [In]
  fun ClusterResourceOpenEnumEx(hcluster : HCLUSTER*, lpszproperties : LibC::LPWSTR, cbproperties : UInt32, lpszroproperties : LibC::LPWSTR, cbroproperties : UInt32, dwflags : UInt32) : HRESENUMEX*

  # Params # hresourceenumex : HRESENUMEX* [In]
  fun ClusterResourceGetEnumCountEx(hresourceenumex : HRESENUMEX*) : UInt32

  # Params # hresourceenumex : HRESENUMEX* [In],dwindex : UInt32 [In],pitem : CLUSTER_RESOURCE_ENUM_ITEM* [In],cbitem : UInt32* [In]
  fun ClusterResourceEnumEx(hresourceenumex : HRESENUMEX*, dwindex : UInt32, pitem : CLUSTER_RESOURCE_ENUM_ITEM*, cbitem : UInt32*) : UInt32

  # Params # hresourceenumex : HRESENUMEX* [In]
  fun ClusterResourceCloseEnumEx(hresourceenumex : HRESENUMEX*) : UInt32

  # Params # hgroup : HGROUP* [In],hdestinationnode : HNODE* [In],dwonlineflags : UInt32 [In],lpinbuffer : UInt8* [In],cbinbuffersize : UInt32 [In]
  fun OnlineClusterGroupEx(hgroup : HGROUP*, hdestinationnode : HNODE*, dwonlineflags : UInt32, lpinbuffer : UInt8*, cbinbuffersize : UInt32) : UInt32

  # Params # hgroup : HGROUP* [In],dwofflineflags : UInt32 [In],lpinbuffer : UInt8* [In],cbinbuffersize : UInt32 [In]
  fun OfflineClusterGroupEx(hgroup : HGROUP*, dwofflineflags : UInt32, lpinbuffer : UInt8*, cbinbuffersize : UInt32) : UInt32

  # Params # hresource : HRESOURCE* [In],dwonlineflags : UInt32 [In],lpinbuffer : UInt8* [In],cbinbuffersize : UInt32 [In]
  fun OnlineClusterResourceEx(hresource : HRESOURCE*, dwonlineflags : UInt32, lpinbuffer : UInt8*, cbinbuffersize : UInt32) : UInt32

  # Params # hresource : HRESOURCE* [In],dwofflineflags : UInt32 [In],lpinbuffer : UInt8* [In],cbinbuffersize : UInt32 [In]
  fun OfflineClusterResourceEx(hresource : HRESOURCE*, dwofflineflags : UInt32, lpinbuffer : UInt8*, cbinbuffersize : UInt32) : UInt32

  # Params # hgroup : HGROUP* [In],hdestinationnode : HNODE* [In],dwmoveflags : UInt32 [In],lpinbuffer : UInt8* [In],cbinbuffersize : UInt32 [In]
  fun MoveClusterGroupEx(hgroup : HGROUP*, hdestinationnode : HNODE*, dwmoveflags : UInt32, lpinbuffer : UInt8*, cbinbuffersize : UInt32) : UInt32

  # Params # hgroup : HGROUP* [In],dwcancelflags_reserved : UInt32 [In]
  fun CancelClusterGroupOperation(hgroup : HGROUP*, dwcancelflags_reserved : UInt32) : UInt32

  # Params # hresource : HRESOURCE* [In],dwflags : UInt32 [In]
  fun RestartClusterResource(hresource : HRESOURCE*, dwflags : UInt32) : UInt32

  # Params # hgroup : HGROUP* [In]
  fun CloseClusterGroup(hgroup : HGROUP*) : LibC::BOOL

  # Params # hgroup : HGROUP* [In]
  fun GetClusterFromGroup(hgroup : HGROUP*) : HCLUSTER*

  # Params # hgroup : HGROUP* [In],lpsznodename : Char* [In],lpcchnodename : UInt32* [In]
  fun GetClusterGroupState(hgroup : HGROUP*, lpsznodename : Char*, lpcchnodename : UInt32*) : CLUSTER_GROUP_STATE

  # Params # hgroup : HGROUP* [In],lpszgroupname : LibC::LPWSTR [In]
  fun SetClusterGroupName(hgroup : HGROUP*, lpszgroupname : LibC::LPWSTR) : UInt32

  # Params # hgroup : HGROUP* [In],nodecount : UInt32 [In],nodelist : HNODE** [In]
  fun SetClusterGroupNodeList(hgroup : HGROUP*, nodecount : UInt32, nodelist : HNODE**) : UInt32

  # Params # hgroup : HGROUP* [In],hdestinationnode : HNODE* [In]
  fun OnlineClusterGroup(hgroup : HGROUP*, hdestinationnode : HNODE*) : UInt32

  # Params # hgroup : HGROUP* [In],hdestinationnode : HNODE* [In]
  fun MoveClusterGroup(hgroup : HGROUP*, hdestinationnode : HNODE*) : UInt32

  # Params # hgroup : HGROUP* [In]
  fun OfflineClusterGroup(hgroup : HGROUP*) : UInt32

  # Params # hgroup : HGROUP* [In]
  fun DeleteClusterGroup(hgroup : HGROUP*) : UInt32

  # Params # hgroup : HGROUP* [In]
  fun DestroyClusterGroup(hgroup : HGROUP*) : UInt32

  # Params # hgroup : HGROUP* [In],dwtype : UInt32 [In]
  fun ClusterGroupOpenEnum(hgroup : HGROUP*, dwtype : UInt32) : HGROUPENUM*

  # Params # hgroupenum : HGROUPENUM* [In]
  fun ClusterGroupGetEnumCount(hgroupenum : HGROUPENUM*) : UInt32

  # Params # hgroupenum : HGROUPENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszresourcename : Char* [In],lpcchname : UInt32* [In]
  fun ClusterGroupEnum(hgroupenum : HGROUPENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszresourcename : Char*, lpcchname : UInt32*) : UInt32

  # Params # hgroupenum : HGROUPENUM* [In]
  fun ClusterGroupCloseEnum(hgroupenum : HGROUPENUM*) : UInt32

  # Params # hgroup : HGROUP* [In],lpszresourcename : LibC::LPWSTR [In],lpszresourcetype : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun CreateClusterResource(hgroup : HGROUP*, lpszresourcename : LibC::LPWSTR, lpszresourcetype : LibC::LPWSTR, dwflags : UInt32) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],lpszresourcename : LibC::LPWSTR [In]
  fun OpenClusterResource(hcluster : HCLUSTER*, lpszresourcename : LibC::LPWSTR) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],lpszresourcename : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In],lpdwgrantedaccess : UInt32* [In]
  fun OpenClusterResourceEx(hcluster : HCLUSTER*, lpszresourcename : LibC::LPWSTR, dwdesiredaccess : UInt32, lpdwgrantedaccess : UInt32*) : HRESOURCE*

  # Params # hresource : HRESOURCE* [In]
  fun CloseClusterResource(hresource : HRESOURCE*) : LibC::BOOL

  # Params # hresource : HRESOURCE* [In]
  fun GetClusterFromResource(hresource : HRESOURCE*) : HCLUSTER*

  # Params # hresource : HRESOURCE* [In]
  fun DeleteClusterResource(hresource : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In],lpsznodename : Char* [In],lpcchnodename : UInt32* [In],lpszgroupname : Char* [In],lpcchgroupname : UInt32* [In]
  fun GetClusterResourceState(hresource : HRESOURCE*, lpsznodename : Char*, lpcchnodename : UInt32*, lpszgroupname : Char*, lpcchgroupname : UInt32*) : CLUSTER_RESOURCE_STATE

  # Params # hresource : HRESOURCE* [In],lpszresourcename : LibC::LPWSTR [In]
  fun SetClusterResourceName(hresource : HRESOURCE*, lpszresourcename : LibC::LPWSTR) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun FailClusterResource(hresource : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun OnlineClusterResource(hresource : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun OfflineClusterResource(hresource : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In],hgroup : HGROUP* [In]
  fun ChangeClusterResourceGroup(hresource : HRESOURCE*, hgroup : HGROUP*) : UInt32

  # Params # hresource : HRESOURCE* [In],hgroup : HGROUP* [In],flags : UInt64 [In]
  fun ChangeClusterResourceGroupEx(hresource : HRESOURCE*, hgroup : HGROUP*, flags : UInt64) : UInt32

  # Params # hresource : HRESOURCE* [In],hnode : HNODE* [In]
  fun AddClusterResourceNode(hresource : HRESOURCE*, hnode : HNODE*) : UInt32

  # Params # hresource : HRESOURCE* [In],hnode : HNODE* [In]
  fun RemoveClusterResourceNode(hresource : HRESOURCE*, hnode : HNODE*) : UInt32

  # Params # hresource : HRESOURCE* [In],hdependson : HRESOURCE* [In]
  fun AddClusterResourceDependency(hresource : HRESOURCE*, hdependson : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In],hdependson : HRESOURCE* [In]
  fun RemoveClusterResourceDependency(hresource : HRESOURCE*, hdependson : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In],lpszdependencyexpression : LibC::LPWSTR [In]
  fun SetClusterResourceDependencyExpression(hresource : HRESOURCE*, lpszdependencyexpression : LibC::LPWSTR) : UInt32

  # Params # hresource : HRESOURCE* [In],lpszdependencyexpression : Char* [In],lpcchdependencyexpression : UInt32* [In]
  fun GetClusterResourceDependencyExpression(hresource : HRESOURCE*, lpszdependencyexpression : Char*, lpcchdependencyexpression : UInt32*) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun AddResourceToClusterSharedVolumes(hresource : HRESOURCE*) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun RemoveResourceFromClusterSharedVolumes(hresource : HRESOURCE*) : UInt32

  # Params # lpszpathname : LibC::LPWSTR [In],pbfileisonsharedvolume : LibC::BOOL* [In]
  fun IsFileOnClusterSharedVolume(lpszpathname : LibC::LPWSTR, pbfileisonsharedvolume : LibC::BOOL*) : UInt32

  # Params # guidsnapshotset : Guid [In],lpszvolumename : LibC::LPWSTR [In],state : CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE [In]
  fun ClusterSharedVolumeSetSnapshotState(guidsnapshotset : Guid, lpszvolumename : LibC::LPWSTR, state : CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE) : UInt32

  # Params # hresource : HRESOURCE* [In],hresourcedependent : HRESOURCE* [In]
  fun CanResourceBeDependent(hresource : HRESOURCE*, hresourcedependent : HRESOURCE*) : LibC::BOOL

  # Params # hresource : HRESOURCE* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],cbinbuffersize : UInt32 [In],lpoutbuffer : Void* [In],cboutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterResourceControl(hresource : HRESOURCE*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, cbinbuffersize : UInt32, lpoutbuffer : Void*, cboutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hresource : HRESOURCE* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],cbinbuffersize : UInt32 [In],lpoutbuffer : Void* [In],cboutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterResourceControlAsUser(hresource : HRESOURCE*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, cbinbuffersize : UInt32, lpoutbuffer : Void*, cboutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcetypename : LibC::LPWSTR [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterResourceTypeControl(hcluster : HCLUSTER*, lpszresourcetypename : LibC::LPWSTR, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcetypename : LibC::LPWSTR [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterResourceTypeControlAsUser(hcluster : HCLUSTER*, lpszresourcetypename : LibC::LPWSTR, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hgroup : HGROUP* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterGroupControl(hgroup : HGROUP*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hnode : HNODE* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterNodeControl(hnode : HNODE*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hresource : HRESOURCE* [In],lpbuffer : Char* [In],nsize : UInt32* [In]
  fun GetClusterResourceNetworkName(hresource : HRESOURCE*, lpbuffer : Char*, nsize : UInt32*) : LibC::BOOL

  # Params # hresource : HRESOURCE* [In],dwtype : UInt32 [In]
  fun ClusterResourceOpenEnum(hresource : HRESOURCE*, dwtype : UInt32) : HRESENUM*

  # Params # hresenum : HRESENUM* [In]
  fun ClusterResourceGetEnumCount(hresenum : HRESENUM*) : UInt32

  # Params # hresenum : HRESENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterResourceEnum(hresenum : HRESENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hresenum : HRESENUM* [In]
  fun ClusterResourceCloseEnum(hresenum : HRESENUM*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcetypename : LibC::LPWSTR [In],lpszdisplayname : LibC::LPWSTR [In],lpszresourcetypedll : LibC::LPWSTR [In],dwlooksalivepollinterval : UInt32 [In],dwisalivepollinterval : UInt32 [In]
  fun CreateClusterResourceType(hcluster : HCLUSTER*, lpszresourcetypename : LibC::LPWSTR, lpszdisplayname : LibC::LPWSTR, lpszresourcetypedll : LibC::LPWSTR, dwlooksalivepollinterval : UInt32, dwisalivepollinterval : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcetypename : LibC::LPWSTR [In]
  fun DeleteClusterResourceType(hcluster : HCLUSTER*, lpszresourcetypename : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszresourcetypename : LibC::LPWSTR [In],dwtype : UInt32 [In]
  fun ClusterResourceTypeOpenEnum(hcluster : HCLUSTER*, lpszresourcetypename : LibC::LPWSTR, dwtype : UInt32) : HRESTYPEENUM*

  # Params # hrestypeenum : HRESTYPEENUM* [In]
  fun ClusterResourceTypeGetEnumCount(hrestypeenum : HRESTYPEENUM*) : UInt32

  # Params # hrestypeenum : HRESTYPEENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterResourceTypeEnum(hrestypeenum : HRESTYPEENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hrestypeenum : HRESTYPEENUM* [In]
  fun ClusterResourceTypeCloseEnum(hrestypeenum : HRESTYPEENUM*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsznetworkname : LibC::LPWSTR [In]
  fun OpenClusterNetwork(hcluster : HCLUSTER*, lpsznetworkname : LibC::LPWSTR) : HNETWORK*

  # Params # hcluster : HCLUSTER* [In],lpsznetworkname : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In],lpdwgrantedaccess : UInt32* [In]
  fun OpenClusterNetworkEx(hcluster : HCLUSTER*, lpsznetworkname : LibC::LPWSTR, dwdesiredaccess : UInt32, lpdwgrantedaccess : UInt32*) : HNETWORK*

  # Params # hnetwork : HNETWORK* [In]
  fun CloseClusterNetwork(hnetwork : HNETWORK*) : LibC::BOOL

  # Params # hnetwork : HNETWORK* [In]
  fun GetClusterFromNetwork(hnetwork : HNETWORK*) : HCLUSTER*

  # Params # hnetwork : HNETWORK* [In],dwtype : UInt32 [In]
  fun ClusterNetworkOpenEnum(hnetwork : HNETWORK*, dwtype : UInt32) : HNETWORKENUM*

  # Params # hnetworkenum : HNETWORKENUM* [In]
  fun ClusterNetworkGetEnumCount(hnetworkenum : HNETWORKENUM*) : UInt32

  # Params # hnetworkenum : HNETWORKENUM* [In],dwindex : UInt32 [In],lpdwtype : UInt32* [In],lpszname : Char* [In],lpcchname : UInt32* [In]
  fun ClusterNetworkEnum(hnetworkenum : HNETWORKENUM*, dwindex : UInt32, lpdwtype : UInt32*, lpszname : Char*, lpcchname : UInt32*) : UInt32

  # Params # hnetworkenum : HNETWORKENUM* [In]
  fun ClusterNetworkCloseEnum(hnetworkenum : HNETWORKENUM*) : UInt32

  # Params # hnetwork : HNETWORK* [In]
  fun GetClusterNetworkState(hnetwork : HNETWORK*) : CLUSTER_NETWORK_STATE

  # Params # hnetwork : HNETWORK* [In],lpszname : LibC::LPWSTR [In]
  fun SetClusterNetworkName(hnetwork : HNETWORK*, lpszname : LibC::LPWSTR) : UInt32

  # Params # hnetwork : HNETWORK* [In],lpsznetworkid : Char* [In],lpcchname : UInt32* [In]
  fun GetClusterNetworkId(hnetwork : HNETWORK*, lpsznetworkid : Char*, lpcchname : UInt32*) : UInt32

  # Params # hnetwork : HNETWORK* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterNetworkControl(hnetwork : HNETWORK*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpszinterfacename : LibC::LPWSTR [In]
  fun OpenClusterNetInterface(hcluster : HCLUSTER*, lpszinterfacename : LibC::LPWSTR) : HNETINTERFACE*

  # Params # hcluster : HCLUSTER* [In],lpszinterfacename : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In],lpdwgrantedaccess : UInt32* [In]
  fun OpenClusterNetInterfaceEx(hcluster : HCLUSTER*, lpszinterfacename : LibC::LPWSTR, dwdesiredaccess : UInt32, lpdwgrantedaccess : UInt32*) : HNETINTERFACE*

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],lpsznetworkname : LibC::LPWSTR [In],lpszinterfacename : Char* [In],lpcchinterfacename : UInt32* [In]
  fun GetClusterNetInterface(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, lpsznetworkname : LibC::LPWSTR, lpszinterfacename : Char*, lpcchinterfacename : UInt32*) : UInt32

  # Params # hnetinterface : HNETINTERFACE* [In]
  fun CloseClusterNetInterface(hnetinterface : HNETINTERFACE*) : LibC::BOOL

  # Params # hnetinterface : HNETINTERFACE* [In]
  fun GetClusterFromNetInterface(hnetinterface : HNETINTERFACE*) : HCLUSTER*

  # Params # hnetinterface : HNETINTERFACE* [In]
  fun GetClusterNetInterfaceState(hnetinterface : HNETINTERFACE*) : CLUSTER_NETINTERFACE_STATE

  # Params # hnetinterface : HNETINTERFACE* [In],hhostnode : HNODE* [In],dwcontrolcode : UInt32 [In],lpinbuffer : Void* [In],ninbuffersize : UInt32 [In],lpoutbuffer : Void* [In],noutbuffersize : UInt32 [In],lpbytesreturned : UInt32* [In]
  fun ClusterNetInterfaceControl(hnetinterface : HNETINTERFACE*, hhostnode : HNODE*, dwcontrolcode : UInt32, lpinbuffer : Void*, ninbuffersize : UInt32, lpoutbuffer : Void*, noutbuffersize : UInt32, lpbytesreturned : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],samdesired : UInt32 [In]
  fun GetClusterKey(hcluster : HCLUSTER*, samdesired : UInt32) : HKEY

  # Params # hgroup : HGROUP* [In],samdesired : UInt32 [In]
  fun GetClusterGroupKey(hgroup : HGROUP*, samdesired : UInt32) : HKEY

  # Params # hresource : HRESOURCE* [In],samdesired : UInt32 [In]
  fun GetClusterResourceKey(hresource : HRESOURCE*, samdesired : UInt32) : HKEY

  # Params # hnode : HNODE* [In],samdesired : UInt32 [In]
  fun GetClusterNodeKey(hnode : HNODE*, samdesired : UInt32) : HKEY

  # Params # hnetwork : HNETWORK* [In],samdesired : UInt32 [In]
  fun GetClusterNetworkKey(hnetwork : HNETWORK*, samdesired : UInt32) : HKEY

  # Params # hnetinterface : HNETINTERFACE* [In],samdesired : UInt32 [In]
  fun GetClusterNetInterfaceKey(hnetinterface : HNETINTERFACE*, samdesired : UInt32) : HKEY

  # Params # hkey : HKEY [In],lpszsubkey : LibC::LPWSTR [In],dwoptions : UInt32 [In],samdesired : UInt32 [In],lpsecurityattributes : SECURITY_ATTRIBUTES* [In],phkresult : HKEY* [In],lpdwdisposition : UInt32* [In]
  fun ClusterRegCreateKey(hkey : HKEY, lpszsubkey : LibC::LPWSTR, dwoptions : UInt32, samdesired : UInt32, lpsecurityattributes : SECURITY_ATTRIBUTES*, phkresult : HKEY*, lpdwdisposition : UInt32*) : Int32

  # Params # hkey : HKEY [In],lpszsubkey : LibC::LPWSTR [In],samdesired : UInt32 [In],phkresult : HKEY* [In]
  fun ClusterRegOpenKey(hkey : HKEY, lpszsubkey : LibC::LPWSTR, samdesired : UInt32, phkresult : HKEY*) : Int32

  # Params # hkey : HKEY [In],lpszsubkey : LibC::LPWSTR [In]
  fun ClusterRegDeleteKey(hkey : HKEY, lpszsubkey : LibC::LPWSTR) : Int32

  # Params # hkey : HKEY [In]
  fun ClusterRegCloseKey(hkey : HKEY) : Int32

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],lpszname : Char* [In],lpcchname : UInt32* [In],lpftlastwritetime : FILETIME* [In]
  fun ClusterRegEnumKey(hkey : HKEY, dwindex : UInt32, lpszname : Char*, lpcchname : UInt32*, lpftlastwritetime : FILETIME*) : Int32

  # Params # hkey : HKEY [In],lpszvaluename : LibC::LPWSTR [In],dwtype : UInt32 [In],lpdata : UInt8* [In],cbdata : UInt32 [In]
  fun ClusterRegSetValue(hkey : HKEY, lpszvaluename : LibC::LPWSTR, dwtype : UInt32, lpdata : UInt8*, cbdata : UInt32) : UInt32

  # Params # hkey : HKEY [In],lpszvaluename : LibC::LPWSTR [In]
  fun ClusterRegDeleteValue(hkey : HKEY, lpszvaluename : LibC::LPWSTR) : UInt32

  # Params # hkey : HKEY [In],lpszvaluename : LibC::LPWSTR [In],lpdwvaluetype : UInt32* [In],lpdata : UInt8* [In],lpcbdata : UInt32* [In]
  fun ClusterRegQueryValue(hkey : HKEY, lpszvaluename : LibC::LPWSTR, lpdwvaluetype : UInt32*, lpdata : UInt8*, lpcbdata : UInt32*) : Int32

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],lpszvaluename : Char* [In],lpcchvaluename : UInt32* [In],lpdwtype : UInt32* [In],lpdata : UInt8* [In],lpcbdata : UInt32* [In]
  fun ClusterRegEnumValue(hkey : HKEY, dwindex : UInt32, lpszvaluename : Char*, lpcchvaluename : UInt32*, lpdwtype : UInt32*, lpdata : UInt8*, lpcbdata : UInt32*) : UInt32

  # Params # hkey : HKEY [In],lpcsubkeys : UInt32* [In],lpcchmaxsubkeylen : UInt32* [In],lpcvalues : UInt32* [In],lpcchmaxvaluenamelen : UInt32* [In],lpcbmaxvaluelen : UInt32* [In],lpcbsecuritydescriptor : UInt32* [In],lpftlastwritetime : FILETIME* [In]
  fun ClusterRegQueryInfoKey(hkey : HKEY, lpcsubkeys : UInt32*, lpcchmaxsubkeylen : UInt32*, lpcvalues : UInt32*, lpcchmaxvaluenamelen : UInt32*, lpcbmaxvaluelen : UInt32*, lpcbsecuritydescriptor : UInt32*, lpftlastwritetime : FILETIME*) : Int32

  # Params # hkey : HKEY [In],requestedinformation : UInt32 [In],psecuritydescriptor : SECURITY_DESCRIPTOR* [In],lpcbsecuritydescriptor : UInt32* [In]
  fun ClusterRegGetKeySecurity(hkey : HKEY, requestedinformation : UInt32, psecuritydescriptor : SECURITY_DESCRIPTOR*, lpcbsecuritydescriptor : UInt32*) : Int32

  # Params # hkey : HKEY [In],securityinformation : UInt32 [In],psecuritydescriptor : SECURITY_DESCRIPTOR* [In]
  fun ClusterRegSetKeySecurity(hkey : HKEY, securityinformation : UInt32, psecuritydescriptor : SECURITY_DESCRIPTOR*) : Int32

  # Params # hcluster : HCLUSTER* [In],flags : UInt32 [In]
  fun ClusterRegSyncDatabase(hcluster : HCLUSTER*, flags : UInt32) : Int32

  # Params # hkey : HKEY [In],phregbatch : HREGBATCH** [In]
  fun ClusterRegCreateBatch(hkey : HKEY, phregbatch : HREGBATCH**) : Int32

  # Params # hregbatch : HREGBATCH* [In],dwcommand : CLUSTER_REG_COMMAND [In],wzname : LibC::LPWSTR [In],dwoptions : UInt32 [In],lpdata : Void* [In],cbdata : UInt32 [In]
  fun ClusterRegBatchAddCommand(hregbatch : HREGBATCH*, dwcommand : CLUSTER_REG_COMMAND, wzname : LibC::LPWSTR, dwoptions : UInt32, lpdata : Void*, cbdata : UInt32) : Int32

  # Params # hregbatch : HREGBATCH* [In],bcommit : LibC::BOOL [In],failedcommandnumber : Int32* [In]
  fun ClusterRegCloseBatch(hregbatch : HREGBATCH*, bcommit : LibC::BOOL, failedcommandnumber : Int32*) : Int32

  # Params # hregbatch : HREGBATCH* [In],flags : UInt32 [In],failedcommandnumber : Int32* [In]
  fun ClusterRegCloseBatchEx(hregbatch : HREGBATCH*, flags : UInt32, failedcommandnumber : Int32*) : Int32

  # Params # hbatchnotification : HREGBATCHNOTIFICATION* [In],pbatchcommand : CLUSTER_BATCH_COMMAND* [In]
  fun ClusterRegBatchReadCommand(hbatchnotification : HREGBATCHNOTIFICATION*, pbatchcommand : CLUSTER_BATCH_COMMAND*) : Int32

  # Params # hbatchnotification : HREGBATCHNOTIFICATION* [In]
  fun ClusterRegBatchCloseNotification(hbatchnotification : HREGBATCHNOTIFICATION*) : Int32

  # Params # hkey : HKEY [In],phbatchnotifyport : HREGBATCHPORT** [In]
  fun ClusterRegCreateBatchNotifyPort(hkey : HKEY, phbatchnotifyport : HREGBATCHPORT**) : Int32

  # Params # hbatchnotifyport : HREGBATCHPORT* [In]
  fun ClusterRegCloseBatchNotifyPort(hbatchnotifyport : HREGBATCHPORT*) : Int32

  # Params # hbatchnotify : HREGBATCHPORT* [In],phbatchnotification : HREGBATCHNOTIFICATION** [In]
  fun ClusterRegGetBatchNotification(hbatchnotify : HREGBATCHPORT*, phbatchnotification : HREGBATCHNOTIFICATION**) : Int32

  # Params # hkey : HKEY [In],phregreadbatch : HREGREADBATCH** [In]
  fun ClusterRegCreateReadBatch(hkey : HKEY, phregreadbatch : HREGREADBATCH**) : Int32

  # Params # hregreadbatch : HREGREADBATCH* [In],wzsubkeyname : LibC::LPWSTR [In],wzvaluename : LibC::LPWSTR [In]
  fun ClusterRegReadBatchAddCommand(hregreadbatch : HREGREADBATCH*, wzsubkeyname : LibC::LPWSTR, wzvaluename : LibC::LPWSTR) : Int32

  # Params # hregreadbatch : HREGREADBATCH* [In],phregreadbatchreply : HREGREADBATCHREPLY** [In]
  fun ClusterRegCloseReadBatch(hregreadbatch : HREGREADBATCH*, phregreadbatchreply : HREGREADBATCHREPLY**) : Int32

  # Params # hregreadbatch : HREGREADBATCH* [In],flags : UInt32 [In],phregreadbatchreply : HREGREADBATCHREPLY** [In]
  fun ClusterRegCloseReadBatchEx(hregreadbatch : HREGREADBATCH*, flags : UInt32, phregreadbatchreply : HREGREADBATCHREPLY**) : Int32

  # Params # hregreadbatchreply : HREGREADBATCHREPLY* [In],pbatchcommand : CLUSTER_READ_BATCH_COMMAND* [In]
  fun ClusterRegReadBatchReplyNextCommand(hregreadbatchreply : HREGREADBATCHREPLY*, pbatchcommand : CLUSTER_READ_BATCH_COMMAND*) : Int32

  # Params # hregreadbatchreply : HREGREADBATCHREPLY* [In]
  fun ClusterRegCloseReadBatchReply(hregreadbatchreply : HREGREADBATCHREPLY*) : Int32

  # Params # hcluster : HCLUSTER* [In],szaccountsid : LibC::LPWSTR [In],dwaccess : UInt32 [In],dwcontroltype : UInt32 [In]
  fun ClusterSetAccountAccess(hcluster : HCLUSTER*, szaccountsid : LibC::LPWSTR, dwaccess : UInt32, dwcontroltype : UInt32) : UInt32

  # Params # pconfig : CREATE_CLUSTER_CONFIG* [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In]
  fun CreateCluster(pconfig : CREATE_CLUSTER_CONFIG*, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*) : HCLUSTER*

  # Params # hcluster : HCLUSTER* [In],pconfig : CREATE_CLUSTER_NAME_ACCOUNT* [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In]
  fun CreateClusterNameAccount(hcluster : HCLUSTER*, pconfig : CREATE_CLUSTER_NAME_ACCOUNT*, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*) : UInt32

  # Params # hcluster : HCLUSTER* [In],bdeletecomputerobjects : LibC::BOOL [In]
  fun RemoveClusterNameAccount(hcluster : HCLUSTER*, bdeletecomputerobjects : LibC::BOOL) : UInt32

  # Params # cnodes : UInt32 [In],ppsznodenames : LibC::LPWSTR* [In],pcnorestype : CLUSTER_MGMT_POINT_RESTYPE* [In]
  fun DetermineCNOResTypeFromNodelist(cnodes : UInt32, ppsznodenames : LibC::LPWSTR*, pcnorestype : CLUSTER_MGMT_POINT_RESTYPE*) : UInt32

  # Params # hcluster : HCLUSTER* [In],pcnorestype : CLUSTER_MGMT_POINT_RESTYPE* [In]
  fun DetermineCNOResTypeFromCluster(hcluster : HCLUSTER*, pcnorestype : CLUSTER_MGMT_POINT_RESTYPE*) : UInt32

  # Params # cnodes : UInt32 [In],ppsznodenames : LibC::LPWSTR* [In],pcloudtype : CLUSTER_CLOUD_TYPE* [In]
  fun DetermineClusterCloudTypeFromNodelist(cnodes : UInt32, ppsznodenames : LibC::LPWSTR*, pcloudtype : CLUSTER_CLOUD_TYPE*) : UInt32

  # Params # hcluster : HCLUSTER* [In],pcloudtype : CLUSTER_CLOUD_TYPE* [In]
  fun DetermineClusterCloudTypeFromCluster(hcluster : HCLUSTER*, pcloudtype : CLUSTER_CLOUD_TYPE*) : UInt32

  # Params # ppsznodename : LibC::LPWSTR [In],nodecloudtype : UInt32* [In]
  fun GetNodeCloudTypeDW(ppsznodename : LibC::LPWSTR, nodecloudtype : UInt32*) : UInt32

  # Params # hchange : HCHANGE* [In],hcluster : HCLUSTER* [In],flags : Int64 [In],restypename : LibC::LPWSTR [In],dwnotifykey : LibC::UINT_PTR [In]
  fun RegisterClusterResourceTypeNotifyV2(hchange : HCHANGE*, hcluster : HCLUSTER*, flags : Int64, restypename : LibC::LPWSTR, dwnotifykey : LibC::UINT_PTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In]
  fun AddClusterNode(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*) : HNODE*

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In],lpszclusterstoragenodedescription : LibC::LPWSTR [In],lpszclusterstoragenodelocation : LibC::LPWSTR [In]
  fun AddClusterStorageNode(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*, lpszclusterstoragenodedescription : LibC::LPWSTR, lpszclusterstoragenodelocation : LibC::LPWSTR) : UInt32

  # Params # hcluster : HCLUSTER* [In],lpsznodename : LibC::LPWSTR [In],dwflags : UInt32 [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In]
  fun AddClusterNodeEx(hcluster : HCLUSTER*, lpsznodename : LibC::LPWSTR, dwflags : UInt32, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*) : HNODE*

  # Params # hcluster : HCLUSTER* [In],lpszclusterstorageenclosurename : LibC::LPWSTR [In],dwtimeout : UInt32 [In],dwflags : UInt32 [In]
  fun RemoveClusterStorageNode(hcluster : HCLUSTER*, lpszclusterstorageenclosurename : LibC::LPWSTR, dwtimeout : UInt32, dwflags : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK [In],pvcallbackarg : Void* [In],fdeletevirtualcomputerobjects : LibC::BOOL [In]
  fun DestroyCluster(hcluster : HCLUSTER*, pfnprogresscallback : PCLUSTER_SETUP_PROGRESS_CALLBACK, pvcallbackarg : Void*, fdeletevirtualcomputerobjects : LibC::BOOL) : UInt32

  # Params # clusterhealthfault : CLUSTER_HEALTH_FAULT* [In]
  fun InitializeClusterHealthFault(clusterhealthfault : CLUSTER_HEALTH_FAULT*) : UInt32

  # Params # clusterhealthfaultarray : CLUSTER_HEALTH_FAULT_ARRAY* [In]
  fun InitializeClusterHealthFaultArray(clusterhealthfaultarray : CLUSTER_HEALTH_FAULT_ARRAY*) : UInt32

  # Params # clusterhealthfault : CLUSTER_HEALTH_FAULT* [In]
  fun FreeClusterHealthFault(clusterhealthfault : CLUSTER_HEALTH_FAULT*) : UInt32

  # Params # clusterhealthfaultarray : CLUSTER_HEALTH_FAULT_ARRAY* [In]
  fun FreeClusterHealthFaultArray(clusterhealthfaultarray : CLUSTER_HEALTH_FAULT_ARRAY*) : UInt32

  # Params # hcluster : HCLUSTER* [In],objects : CLUSTER_HEALTH_FAULT_ARRAY* [In],flags : UInt32 [In]
  fun ClusGetClusterHealthFaults(hcluster : HCLUSTER*, objects : CLUSTER_HEALTH_FAULT_ARRAY*, flags : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],id : LibC::LPWSTR [In],flags : UInt32 [In]
  fun ClusRemoveClusterHealthFault(hcluster : HCLUSTER*, id : LibC::LPWSTR, flags : UInt32) : UInt32

  # Params # hcluster : HCLUSTER* [In],failure : CLUSTER_HEALTH_FAULT* [In],param2 : UInt32 [In]
  fun ClusAddClusterHealthFault(hcluster : HCLUSTER*, failure : CLUSTER_HEALTH_FAULT*, param2 : UInt32) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In],phservicehandle : LibC::IntPtrT* [In]
  fun ResUtilStartResourceService(pszservicename : LibC::LPWSTR, phservicehandle : LibC::IntPtrT*) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In]
  fun ResUtilVerifyResourceService(pszservicename : LibC::LPWSTR) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In]
  fun ResUtilStopResourceService(pszservicename : LibC::LPWSTR) : UInt32

  # Params # hservicehandle : SC_HANDLE [In]
  fun ResUtilVerifyService(hservicehandle : SC_HANDLE) : UInt32

  # Params # hservicehandle : SC_HANDLE [In]
  fun ResUtilStopService(hservicehandle : SC_HANDLE) : UInt32

  # Params # pszpath : LibC::LPWSTR [In]
  fun ResUtilCreateDirectoryTree(pszpath : LibC::LPWSTR) : UInt32

  # Params # pszpath : LibC::LPWSTR [In]
  fun ResUtilIsPathValid(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # ppropertytable : RESUTIL_PROPERTY_ITEM* [In],pszoutproperties : LibC::LPWSTR [In],cboutpropertiessize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilEnumProperties(ppropertytable : RESUTIL_PROPERTY_ITEM*, pszoutproperties : LibC::LPWSTR, cboutpropertiessize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszoutproperties : LibC::LPWSTR [In],cboutpropertiessize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilEnumPrivateProperties(hkeyclusterkey : HKEY, pszoutproperties : LibC::LPWSTR, cboutpropertiessize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutpropertylist : Void* [In],cboutpropertylistsize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilGetProperties(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, poutpropertylist : Void*, cboutpropertylistsize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutpropertylist : Void* [In],cboutpropertylistsize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilGetAllProperties(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, poutpropertylist : Void*, cboutpropertylistsize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],poutpropertylist : Void* [In],cboutpropertylistsize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilGetPrivateProperties(hkeyclusterkey : HKEY, poutpropertylist : Void*, cboutpropertylistsize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytableitem : RESUTIL_PROPERTY_ITEM* [In],pcboutpropertylistsize : UInt32* [In],pnpropertycount : UInt32* [In]
  fun ResUtilGetPropertySize(hkeyclusterkey : HKEY, ppropertytableitem : RESUTIL_PROPERTY_ITEM*, pcboutpropertylistsize : UInt32*, pnpropertycount : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytableitem : RESUTIL_PROPERTY_ITEM* [In],poutpropertyitem : Void** [In],pcboutpropertyitemsize : UInt32* [In]
  fun ResUtilGetProperty(hkeyclusterkey : HKEY, ppropertytableitem : RESUTIL_PROPERTY_ITEM*, poutpropertyitem : Void**, pcboutpropertyitemsize : UInt32*) : UInt32

  # Params # ppropertytable : RESUTIL_PROPERTY_ITEM* [In],reserved : Void* [In],ballowunknownproperties : LibC::BOOL [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In],poutparams : UInt8* [In]
  fun ResUtilVerifyPropertyTable(ppropertytable : RESUTIL_PROPERTY_ITEM*, reserved : Void*, ballowunknownproperties : LibC::BOOL, pinpropertylist : Void*, cbinpropertylistsize : UInt32, poutparams : UInt8*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],reserved : Void* [In],ballowunknownproperties : LibC::BOOL [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In],poutparams : UInt8* [In]
  fun ResUtilSetPropertyTable(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, reserved : Void*, ballowunknownproperties : LibC::BOOL, pinpropertylist : Void*, cbinpropertylistsize : UInt32, poutparams : UInt8*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],reserved : Void* [In],ballowunknownproperties : LibC::BOOL [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In],bforcewrite : LibC::BOOL [In],poutparams : UInt8* [In]
  fun ResUtilSetPropertyTableEx(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, reserved : Void*, ballowunknownproperties : LibC::BOOL, pinpropertylist : Void*, cbinpropertylistsize : UInt32, bforcewrite : LibC::BOOL, poutparams : UInt8*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],reserved : Void* [In],pinparams : UInt8* [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In],poutparams : UInt8* [In]
  fun ResUtilSetPropertyParameterBlock(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, reserved : Void*, pinparams : UInt8*, pinpropertylist : Void*, cbinpropertylistsize : UInt32, poutparams : UInt8*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],reserved : Void* [In],pinparams : UInt8* [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In],bforcewrite : LibC::BOOL [In],poutparams : UInt8* [In]
  fun ResUtilSetPropertyParameterBlockEx(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, reserved : Void*, pinparams : UInt8*, pinpropertylist : Void*, cbinpropertylistsize : UInt32, bforcewrite : LibC::BOOL, poutparams : UInt8*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In]
  fun ResUtilSetUnknownProperties(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, pinpropertylist : Void*, cbinpropertylistsize : UInt32) : UInt32

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutparams : UInt8* [In],bcheckforrequiredproperties : LibC::BOOL [In],psznameofpropinerror : LibC::LPWSTR* [In]
  fun ResUtilGetPropertiesToParameterBlock(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, poutparams : UInt8*, bcheckforrequiredproperties : LibC::BOOL, psznameofpropinerror : LibC::LPWSTR*) : UInt32

  # Params # ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutpropertylist : Void* [In],pcboutpropertylistsize : UInt32* [In],pinparams : UInt8* [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilPropertyListFromParameterBlock(ppropertytable : RESUTIL_PROPERTY_ITEM*, poutpropertylist : Void*, pcboutpropertylistsize : UInt32*, pinparams : UInt8*, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # poutparams : UInt8* [In],pinparams : UInt8* [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In]
  fun ResUtilDupParameterBlock(poutparams : UInt8*, pinparams : UInt8*, ppropertytable : RESUTIL_PROPERTY_ITEM*) : UInt32

  # Params # poutparams : UInt8* [In],pinparams : UInt8* [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In]
  fun ResUtilFreeParameterBlock(poutparams : UInt8*, pinparams : UInt8*, ppropertytable : RESUTIL_PROPERTY_ITEM*)

  # Params # hkeyclusterkey : HKEY [In],ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutpropertylist : Void* [In],pcboutpropertylistsize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilAddUnknownProperties(hkeyclusterkey : HKEY, ppropertytable : RESUTIL_PROPERTY_ITEM*, poutpropertylist : Void*, pcboutpropertylistsize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In]
  fun ResUtilSetPrivatePropertyList(hkeyclusterkey : HKEY, pinpropertylist : Void*, cbinpropertylistsize : UInt32) : UInt32

  # Params # pinpropertylist : Void* [In],cbinpropertylistsize : UInt32 [In]
  fun ResUtilVerifyPrivatePropertyList(pinpropertylist : Void*, cbinpropertylistsize : UInt32) : UInt32

  # Params # pszinstring : LibC::LPWSTR [In]
  fun ResUtilDupString(pszinstring : LibC::LPWSTR) : LibC::LPWSTR

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],ppboutvalue : UInt8** [In],pcboutvaluesize : UInt32* [In]
  fun ResUtilGetBinaryValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, ppboutvalue : UInt8**, pcboutvaluesize : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In]
  fun ResUtilGetSzValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR) : LibC::LPWSTR

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],pdwoutvalue : UInt32* [In],dwdefaultvalue : UInt32 [In]
  fun ResUtilGetDwordValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, pdwoutvalue : UInt32*, dwdefaultvalue : UInt32) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],pqwoutvalue : UInt64* [In],qwdefaultvalue : UInt64 [In]
  fun ResUtilGetQwordValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, pqwoutvalue : UInt64*, qwdefaultvalue : UInt64) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],pbnewvalue : UInt8* [In],cbnewvaluesize : UInt32 [In],ppboutvalue : UInt8** [In],pcboutvaluesize : UInt32* [In]
  fun ResUtilSetBinaryValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, pbnewvalue : UInt8*, cbnewvaluesize : UInt32, ppboutvalue : UInt8**, pcboutvaluesize : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],psznewvalue : LibC::LPWSTR [In],ppszoutstring : LibC::LPWSTR* [In]
  fun ResUtilSetSzValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, psznewvalue : LibC::LPWSTR, ppszoutstring : LibC::LPWSTR*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],psznewvalue : LibC::LPWSTR [In],ppszoutstring : LibC::LPWSTR* [In]
  fun ResUtilSetExpandSzValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, psznewvalue : LibC::LPWSTR, ppszoutstring : LibC::LPWSTR*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],psznewvalue : LibC::LPWSTR [In],cbnewvaluesize : UInt32 [In],ppszoutvalue : LibC::LPWSTR* [In],pcboutvaluesize : UInt32* [In]
  fun ResUtilSetMultiSzValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, psznewvalue : LibC::LPWSTR, cbnewvaluesize : UInt32, ppszoutvalue : LibC::LPWSTR*, pcboutvaluesize : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],dwnewvalue : UInt32 [In],pdwoutvalue : UInt32* [In]
  fun ResUtilSetDwordValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, dwnewvalue : UInt32, pdwoutvalue : UInt32*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],pszvaluename : LibC::LPWSTR [In],qwnewvalue : UInt64 [In],pqwoutvalue : UInt64* [In]
  fun ResUtilSetQwordValue(hkeyclusterkey : HKEY, pszvaluename : LibC::LPWSTR, qwnewvalue : UInt64, pqwoutvalue : UInt64*) : UInt32

  # Params # hkeyclusterkey : HKEY [In],valuename : LibC::LPWSTR [In],valuetype : UInt32 [In],valuedata : UInt8* [In],valuesize : UInt32 [In],flags : UInt32 [In]
  fun ResUtilSetValueEx(hkeyclusterkey : HKEY, valuename : LibC::LPWSTR, valuetype : UInt32, valuedata : UInt8*, valuesize : UInt32, flags : UInt32) : UInt32

  # Params # ppboutvalue : UInt8** [In],pcboutvaluesize : UInt32* [In],pvaluestruct : CLUSPROP_BINARY* [In],pboldvalue : UInt8* [In],cboldvaluesize : UInt32 [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetBinaryProperty(ppboutvalue : UInt8**, pcboutvaluesize : UInt32*, pvaluestruct : CLUSPROP_BINARY*, pboldvalue : UInt8*, cboldvaluesize : UInt32, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # ppszoutvalue : LibC::LPWSTR* [In],pvaluestruct : CLUSPROP_SZ* [In],pszoldvalue : LibC::LPWSTR [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetSzProperty(ppszoutvalue : LibC::LPWSTR*, pvaluestruct : CLUSPROP_SZ*, pszoldvalue : LibC::LPWSTR, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # ppszoutvalue : LibC::LPWSTR* [In],pcboutvaluesize : UInt32* [In],pvaluestruct : CLUSPROP_SZ* [In],pszoldvalue : LibC::LPWSTR [In],cboldvaluesize : UInt32 [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetMultiSzProperty(ppszoutvalue : LibC::LPWSTR*, pcboutvaluesize : UInt32*, pvaluestruct : CLUSPROP_SZ*, pszoldvalue : LibC::LPWSTR, cboldvaluesize : UInt32, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # pdwoutvalue : UInt32* [In],pvaluestruct : CLUSPROP_DWORD* [In],dwoldvalue : UInt32 [In],dwminimum : UInt32 [In],dwmaximum : UInt32 [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetDwordProperty(pdwoutvalue : UInt32*, pvaluestruct : CLUSPROP_DWORD*, dwoldvalue : UInt32, dwminimum : UInt32, dwmaximum : UInt32, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # ploutvalue : Int32* [In],pvaluestruct : CLUSPROP_LONG* [In],loldvalue : Int32 [In],lminimum : Int32 [In],lmaximum : Int32 [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetLongProperty(ploutvalue : Int32*, pvaluestruct : CLUSPROP_LONG*, loldvalue : Int32, lminimum : Int32, lmaximum : Int32, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # pftoutvalue : FILETIME* [In],pvaluestruct : CLUSPROP_FILETIME* [In],ftoldvalue : FILETIME [In],ftminimum : FILETIME [In],ftmaximum : FILETIME [In],pppropertylist : UInt8** [In],pcbpropertylistsize : UInt32* [In]
  fun ResUtilGetFileTimeProperty(pftoutvalue : FILETIME*, pvaluestruct : CLUSPROP_FILETIME*, ftoldvalue : FILETIME, ftminimum : FILETIME, ftmaximum : FILETIME, pppropertylist : UInt8**, pcbpropertylistsize : UInt32*) : UInt32

  # Params # hresource : HRESOURCE* [In]
  fun ResUtilGetEnvironmentWithNetName(hresource : HRESOURCE*) : Void*

  # Params # lpenvironment : Void* [In]
  fun ResUtilFreeEnvironment(lpenvironment : Void*) : UInt32

  # Params # pszsrc : LibC::LPWSTR [In]
  fun ResUtilExpandEnvironmentStrings(pszsrc : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszservicename : LibC::LPWSTR [In],hresource : HRESOURCE* [In],pfnlogevent : PLOG_EVENT_ROUTINE [In],hresourcehandle : LibC::IntPtrT [In]
  fun ResUtilSetResourceServiceEnvironment(pszservicename : LibC::LPWSTR, hresource : HRESOURCE*, pfnlogevent : PLOG_EVENT_ROUTINE, hresourcehandle : LibC::IntPtrT) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In],pfnlogevent : PLOG_EVENT_ROUTINE [In],hresourcehandle : LibC::IntPtrT [In]
  fun ResUtilRemoveResourceServiceEnvironment(pszservicename : LibC::LPWSTR, pfnlogevent : PLOG_EVENT_ROUTINE, hresourcehandle : LibC::IntPtrT) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In],schscmhandle : SC_HANDLE [In],phservice : LibC::IntPtrT* [In],pfnlogevent : PLOG_EVENT_ROUTINE [In],hresourcehandle : LibC::IntPtrT [In]
  fun ResUtilSetResourceServiceStartParameters(pszservicename : LibC::LPWSTR, schscmhandle : SC_HANDLE, phservice : LibC::IntPtrT*, pfnlogevent : PLOG_EVENT_ROUTINE, hresourcehandle : LibC::IntPtrT) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pszpropertyvalue : LibC::LPWSTR* [In]
  fun ResUtilFindSzProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pszpropertyvalue : LibC::LPWSTR*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pszpropertyvalue : LibC::LPWSTR* [In]
  fun ResUtilFindExpandSzProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pszpropertyvalue : LibC::LPWSTR*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pszpropertyvalue : LibC::LPWSTR* [In]
  fun ResUtilFindExpandedSzProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pszpropertyvalue : LibC::LPWSTR*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pdwpropertyvalue : UInt32* [In]
  fun ResUtilFindDwordProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pdwpropertyvalue : UInt32*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pbpropertyvalue : UInt8** [In],pcbpropertyvaluesize : UInt32* [In]
  fun ResUtilFindBinaryProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pbpropertyvalue : UInt8**, pcbpropertyvaluesize : UInt32*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pszpropertyvalue : LibC::LPWSTR* [In],pcbpropertyvaluesize : UInt32* [In]
  fun ResUtilFindMultiSzProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pszpropertyvalue : LibC::LPWSTR*, pcbpropertyvaluesize : UInt32*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],plpropertyvalue : Int32* [In]
  fun ResUtilFindLongProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, plpropertyvalue : Int32*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],plpropertyvalue : UInt64* [In]
  fun ResUtilFindULargeIntegerProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, plpropertyvalue : UInt64*) : UInt32

  # Params # ppropertylist : Void* [In],cbpropertylistsize : UInt32 [In],pszpropertyname : LibC::LPWSTR [In],pftpropertyvalue : FILETIME* [In]
  fun ResUtilFindFileTimeProperty(ppropertylist : Void*, cbpropertylistsize : UInt32, pszpropertyname : LibC::LPWSTR, pftpropertyvalue : FILETIME*) : UInt32

  # Params # lpworker : CLUS_WORKER* [In],lpstartaddress : PWORKER_START_ROUTINE [In],lpparameter : Void* [In]
  fun ClusWorkerCreate(lpworker : CLUS_WORKER*, lpstartaddress : PWORKER_START_ROUTINE, lpparameter : Void*) : UInt32

  # Params # lpworker : CLUS_WORKER* [In]
  fun ClusWorkerCheckTerminate(lpworker : CLUS_WORKER*) : LibC::BOOL

  # Params # lpworker : CLUS_WORKER* [In]
  fun ClusWorkerTerminate(lpworker : CLUS_WORKER*)

  # Params # clusworker : CLUS_WORKER* [In],timeoutinmilliseconds : UInt32 [In],waitonly : LibC::BOOL [In]
  fun ClusWorkerTerminateEx(clusworker : CLUS_WORKER*, timeoutinmilliseconds : UInt32, waitonly : LibC::BOOL) : UInt32

  # Params # clusworkers : CLUS_WORKER** [In],clusworkerscount : LibC::UINT_PTR [In],timeoutinmilliseconds : UInt32 [In],waitonly : LibC::BOOL [In]
  fun ClusWorkersTerminate(clusworkers : CLUS_WORKER**, clusworkerscount : LibC::UINT_PTR, timeoutinmilliseconds : UInt32, waitonly : LibC::BOOL) : UInt32

  # Params # hself : HRESOURCE* [In],hresource : HRESOURCE* [In]
  fun ResUtilResourcesEqual(hself : HRESOURCE*, hresource : HRESOURCE*) : LibC::BOOL

  # Params # lpszresourcetypename : LibC::LPWSTR [In],hresource : HRESOURCE* [In]
  fun ResUtilResourceTypesEqual(lpszresourcetypename : LibC::LPWSTR, hresource : HRESOURCE*) : LibC::BOOL

  # Params # prci : CLUS_RESOURCE_CLASS_INFO* [In],hresource : HRESOURCE* [In]
  fun ResUtilIsResourceClassEqual(prci : CLUS_RESOURCE_CLASS_INFO*, hresource : HRESOURCE*) : LibC::BOOL

  # Params # hself : HRESOURCE* [In],lpszrestypename : LibC::LPWSTR [In],prescallback : LPRESOURCE_CALLBACK [In],pparameter : Void* [In]
  fun ResUtilEnumResources(hself : HRESOURCE*, lpszrestypename : LibC::LPWSTR, prescallback : LPRESOURCE_CALLBACK, pparameter : Void*) : UInt32

  # Params # hcluster : HCLUSTER* [In],hself : HRESOURCE* [In],lpszrestypename : LibC::LPWSTR [In],prescallback : LPRESOURCE_CALLBACK_EX [In],pparameter : Void* [In]
  fun ResUtilEnumResourcesEx(hcluster : HCLUSTER*, hself : HRESOURCE*, lpszrestypename : LibC::LPWSTR, prescallback : LPRESOURCE_CALLBACK_EX, pparameter : Void*) : UInt32

  # Params # hself : LibC::HANDLE [In],lpszresourcetype : LibC::LPWSTR [In]
  fun ResUtilGetResourceDependency(hself : LibC::HANDLE, lpszresourcetype : LibC::LPWSTR) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],hself : LibC::HANDLE [In],lpszresourcetype : LibC::LPWSTR [In],brecurse : LibC::BOOL [In]
  fun ResUtilGetResourceDependencyByName(hcluster : HCLUSTER*, hself : LibC::HANDLE, lpszresourcetype : LibC::LPWSTR, brecurse : LibC::BOOL) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],hself : LibC::HANDLE [In],prci : CLUS_RESOURCE_CLASS_INFO* [In],brecurse : LibC::BOOL [In]
  fun ResUtilGetResourceDependencyByClass(hcluster : HCLUSTER*, hself : LibC::HANDLE, prci : CLUS_RESOURCE_CLASS_INFO*, brecurse : LibC::BOOL) : HRESOURCE*

  # Params # lpszresourcename : LibC::LPWSTR [In],lpszresourcetype : LibC::LPWSTR [In]
  fun ResUtilGetResourceNameDependency(lpszresourcename : LibC::LPWSTR, lpszresourcetype : LibC::LPWSTR) : HRESOURCE*

  # Params # hresource : HRESOURCE* [In],pszaddress : Char* [In],pcchaddress : UInt32* [In],pszsubnetmask : Char* [In],pcchsubnetmask : UInt32* [In],psznetwork : Char* [In],pcchnetwork : UInt32* [In]
  fun ResUtilGetResourceDependentIPAddressProps(hresource : HRESOURCE*, pszaddress : Char*, pcchaddress : UInt32*, pszsubnetmask : Char*, pcchsubnetmask : UInt32*, psznetwork : Char*, pcchnetwork : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],hresource : HRESOURCE* [In],pszdriveletter : Char* [In],pcchdriveletter : UInt32* [In]
  fun ResUtilFindDependentDiskResourceDriveLetter(hcluster : HCLUSTER*, hresource : HRESOURCE*, pszdriveletter : Char*, pcchdriveletter : UInt32*) : UInt32

  # Params # dwservicepid : UInt32 [In],boffline : LibC::BOOL [In],pdwresourcestate : UInt32* [In],pfnlogevent : PLOG_EVENT_ROUTINE [In],hresourcehandle : LibC::IntPtrT [In]
  fun ResUtilTerminateServiceProcessFromResDll(dwservicepid : UInt32, boffline : LibC::BOOL, pdwresourcestate : UInt32*, pfnlogevent : PLOG_EVENT_ROUTINE, hresourcehandle : LibC::IntPtrT) : UInt32

  # Params # ppropertytable : RESUTIL_PROPERTY_ITEM* [In],poutpropertyformatlist : Void* [In],cbpropertyformatlistsize : UInt32 [In],pcbbytesreturned : UInt32* [In],pcbrequired : UInt32* [In]
  fun ResUtilGetPropertyFormats(ppropertytable : RESUTIL_PROPERTY_ITEM*, poutpropertyformatlist : Void*, cbpropertyformatlistsize : UInt32, pcbbytesreturned : UInt32*, pcbrequired : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],phclusternameresource : HRESOURCE** [In],phclusteripaddressresource : HRESOURCE** [In],phclusterquorumresource : HRESOURCE** [In]
  fun ResUtilGetCoreClusterResources(hcluster : HCLUSTER*, phclusternameresource : HRESOURCE**, phclusteripaddressresource : HRESOURCE**, phclusterquorumresource : HRESOURCE**) : UInt32

  # Params # hresource : HRESOURCE* [In],pszresourcename : Char* [In],pcchresourcenameinout : UInt32* [In]
  fun ResUtilGetResourceName(hresource : HRESOURCE*, pszresourcename : Char*, pcchresourcenameinout : UInt32*) : UInt32

  # Params # hcluster : HCLUSTER* [In],eclusterrole : CLUSTER_ROLE [In]
  fun ResUtilGetClusterRoleState(hcluster : HCLUSTER*, eclusterrole : CLUSTER_ROLE) : CLUSTER_ROLE_STATE

  # Params # lpszpathname : LibC::LPWSTR [In]
  fun ClusterIsPathOnSharedVolume(lpszpathname : LibC::LPWSTR) : LibC::BOOL

  # Params # lpszfilename : LibC::LPWSTR [In],lpszvolumepathname : LibC::LPWSTR [In],cchbufferlength : UInt32 [In]
  fun ClusterGetVolumePathName(lpszfilename : LibC::LPWSTR, lpszvolumepathname : LibC::LPWSTR, cchbufferlength : UInt32) : LibC::BOOL

  # Params # lpszvolumemountpoint : LibC::LPWSTR [In],lpszvolumename : LibC::LPWSTR [In],cchbufferlength : UInt32 [In]
  fun ClusterGetVolumeNameForVolumeMountPoint(lpszvolumemountpoint : LibC::LPWSTR, lpszvolumename : LibC::LPWSTR, cchbufferlength : UInt32) : LibC::BOOL

  # Params # lpszfilename : LibC::LPWSTR [In],lpszvolumepathname : LibC::LPWSTR [In],lpcchvolumepathname : UInt32* [In],lpszvolumename : LibC::LPWSTR [In],lpcchvolumename : UInt32* [In]
  fun ClusterPrepareSharedVolumeForBackup(lpszfilename : LibC::LPWSTR, lpszvolumepathname : LibC::LPWSTR, lpcchvolumepathname : UInt32*, lpszvolumename : LibC::LPWSTR, lpcchvolumename : UInt32*) : UInt32

  # Params # lpszvolumepathname : LibC::LPWSTR [In]
  fun ClusterClearBackupStateForSharedVolume(lpszvolumepathname : LibC::LPWSTR) : UInt32

  # Params # pszservicename : LibC::LPWSTR [In],schscmhandle : SC_HANDLE [In],phservice : LibC::IntPtrT* [In],dwdesiredaccess : UInt32 [In],pfnlogevent : PLOG_EVENT_ROUTINE [In],hresourcehandle : LibC::IntPtrT [In]
  fun ResUtilSetResourceServiceStartParametersEx(pszservicename : LibC::LPWSTR, schscmhandle : SC_HANDLE, phservice : LibC::IntPtrT*, dwdesiredaccess : UInt32, pfnlogevent : PLOG_EVENT_ROUTINE, hresourcehandle : LibC::IntPtrT) : UInt32

  # Params # hcluster : HCLUSTER* [In],hself : HRESOURCE* [In],lpszrestypename : LibC::LPWSTR [In],prescallback : LPRESOURCE_CALLBACK_EX [In],pparameter : Void* [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilEnumResourcesEx2(hcluster : HCLUSTER*, hself : HRESOURCE*, lpszrestypename : LibC::LPWSTR, prescallback : LPRESOURCE_CALLBACK_EX, pparameter : Void*, dwdesiredaccess : UInt32) : UInt32

  # Params # hself : LibC::HANDLE [In],lpszresourcetype : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilGetResourceDependencyEx(hself : LibC::HANDLE, lpszresourcetype : LibC::LPWSTR, dwdesiredaccess : UInt32) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],hself : LibC::HANDLE [In],lpszresourcetype : LibC::LPWSTR [In],brecurse : LibC::BOOL [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilGetResourceDependencyByNameEx(hcluster : HCLUSTER*, hself : LibC::HANDLE, lpszresourcetype : LibC::LPWSTR, brecurse : LibC::BOOL, dwdesiredaccess : UInt32) : HRESOURCE*

  # Params # hcluster : HCLUSTER* [In],hself : LibC::HANDLE [In],prci : CLUS_RESOURCE_CLASS_INFO* [In],brecurse : LibC::BOOL [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilGetResourceDependencyByClassEx(hcluster : HCLUSTER*, hself : LibC::HANDLE, prci : CLUS_RESOURCE_CLASS_INFO*, brecurse : LibC::BOOL, dwdesiredaccess : UInt32) : HRESOURCE*

  # Params # lpszresourcename : LibC::LPWSTR [In],lpszresourcetype : LibC::LPWSTR [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilGetResourceNameDependencyEx(lpszresourcename : LibC::LPWSTR, lpszresourcetype : LibC::LPWSTR, dwdesiredaccess : UInt32) : HRESOURCE*

  # Params # hclusterin : HCLUSTER* [In],phclusternameresourceout : HRESOURCE** [In],phclusterquorumresourceout : HRESOURCE** [In],dwdesiredaccess : UInt32 [In]
  fun ResUtilGetCoreClusterResourcesEx(hclusterin : HCLUSTER*, phclusternameresourceout : HRESOURCE**, phclusterquorumresourceout : HRESOURCE**, dwdesiredaccess : UInt32) : UInt32

  # Params # lpszresource : LibC::LPWSTR [In],lpszprovider : Int8* [In],dwtype : UInt32 [In],dwflags : UInt32 [In]
  fun OpenClusterCryptProvider(lpszresource : LibC::LPWSTR, lpszprovider : Int8*, dwtype : UInt32, dwflags : UInt32) : HCLUSCRYPTPROVIDER*

  # Params # lpszresource : LibC::LPWSTR [In],lpszkeyname : LibC::LPWSTR [In],lpszprovider : Int8* [In],dwtype : UInt32 [In],dwflags : UInt32 [In]
  fun OpenClusterCryptProviderEx(lpszresource : LibC::LPWSTR, lpszkeyname : LibC::LPWSTR, lpszprovider : Int8*, dwtype : UInt32, dwflags : UInt32) : HCLUSCRYPTPROVIDER*

  # Params # hcluscryptprovider : HCLUSCRYPTPROVIDER* [In]
  fun CloseClusterCryptProvider(hcluscryptprovider : HCLUSCRYPTPROVIDER*) : UInt32

  # Params # hcluscryptprovider : HCLUSCRYPTPROVIDER* [In],pdata : UInt8* [In],cbdata : UInt32 [In],ppdata : UInt8** [In],pcbdata : UInt32* [In]
  fun ClusterEncrypt(hcluscryptprovider : HCLUSCRYPTPROVIDER*, pdata : UInt8*, cbdata : UInt32, ppdata : UInt8**, pcbdata : UInt32*) : UInt32

  # Params # hcluscryptprovider : HCLUSCRYPTPROVIDER* [In],pcryptinput : UInt8* [In],cbcryptinput : UInt32 [In],ppcryptoutput : UInt8** [In],pcbcryptoutput : UInt32* [In]
  fun ClusterDecrypt(hcluscryptprovider : HCLUSCRYPTPROVIDER*, pcryptinput : UInt8*, cbcryptinput : UInt32, ppcryptoutput : UInt8**, pcbcryptoutput : UInt32*) : UInt32

  # Params # pcryptinfo : Void* [In]
  fun FreeClusterCrypt(pcryptinfo : Void*) : UInt32

  # Params # flags : UInt32 [In],reason : UInt32 [In],presult : UInt32* [In]
  fun ResUtilVerifyShutdownSafe(flags : UInt32, reason : UInt32, presult : UInt32*) : UInt32

  # Params # left : PaxosTagCStruct* [In],right : PaxosTagCStruct* [In]
  fun ResUtilPaxosComparer(left : PaxosTagCStruct*, right : PaxosTagCStruct*) : LibC::BOOL

  # Params # left : PaxosTagCStruct* [In],right : PaxosTagCStruct* [In]
  fun ResUtilLeftPaxosIsLessThanRight(left : PaxosTagCStruct*, right : PaxosTagCStruct*) : LibC::BOOL

  # Params # key : HKEY [In],keyname : LibC::LPWSTR [In],treatnokeyaserror : LibC::BOOL [In]
  fun ResUtilsDeleteKeyTree(key : HKEY, keyname : LibC::LPWSTR, treatnokeyaserror : LibC::BOOL) : UInt32

  # Params # hself : HGROUP* [In],hgroup : HGROUP* [In],pequal : LibC::BOOL* [In]
  fun ResUtilGroupsEqual(hself : HGROUP*, hgroup : HGROUP*, pequal : LibC::BOOL*) : UInt32

  # Params # hcluster : HCLUSTER* [In],hself : HGROUP* [In],prescallback : LPGROUP_CALLBACK_EX [In],pparameter : Void* [In]
  fun ResUtilEnumGroups(hcluster : HCLUSTER*, hself : HGROUP*, prescallback : LPGROUP_CALLBACK_EX, pparameter : Void*) : UInt32

  # Params # hcluster : HCLUSTER* [In],hself : HGROUP* [In],grouptype : CLUSGROUP_TYPE [In],prescallback : LPGROUP_CALLBACK_EX [In],pparameter : Void* [In]
  fun ResUtilEnumGroupsEx(hcluster : HCLUSTER*, hself : HGROUP*, grouptype : CLUSGROUP_TYPE, prescallback : LPGROUP_CALLBACK_EX, pparameter : Void*) : UInt32

  # Params # group : HGROUP* [In],copy : HGROUP** [In]
  fun ResUtilDupGroup(group : HGROUP*, copy : HGROUP**) : UInt32

  # Params # hgroup : HGROUP* [In],grouptype : CLUSGROUP_TYPE* [In]
  fun ResUtilGetClusterGroupType(hgroup : HGROUP*, grouptype : CLUSGROUP_TYPE*) : UInt32

  # Params # hcluster : HCLUSTER* [In]
  fun ResUtilGetCoreGroup(hcluster : HCLUSTER*) : HGROUP*

  # Params # hself : HRESOURCE* [In],enumtype : UInt32 [In],prescallback : LPRESOURCE_CALLBACK_EX [In],pparameter : Void* [In]
  fun ResUtilResourceDepEnum(hself : HRESOURCE*, enumtype : UInt32, prescallback : LPRESOURCE_CALLBACK_EX, pparameter : Void*) : UInt32

  # Params # group : HRESOURCE* [In],copy : HRESOURCE** [In]
  fun ResUtilDupResource(group : HRESOURCE*, copy : HRESOURCE**) : UInt32

  # Params # hcluster : HCLUSTER* [In],guid : Guid* [In]
  fun ResUtilGetClusterId(hcluster : HCLUSTER*, guid : Guid*) : UInt32

  # Params # hcluster : HCLUSTER* [In],pnodecallback : LPNODE_CALLBACK [In],pparameter : Void* [In]
  fun ResUtilNodeEnum(hcluster : HCLUSTER*, pnodecallback : LPNODE_CALLBACK, pparameter : Void*) : UInt32

  # Params # processhandle : LibC::HANDLE [In],appinstanceid : Guid* [In],childreninheritappinstance : LibC::BOOL [In]
  fun RegisterAppInstance(processhandle : LibC::HANDLE, appinstanceid : Guid*, childreninheritappinstance : LibC::BOOL) : UInt32

  # Params # appinstanceid : Guid* [In],instanceversionhigh : UInt64 [In],instanceversionlow : UInt64 [In]
  fun RegisterAppInstanceVersion(appinstanceid : Guid*, instanceversionhigh : UInt64, instanceversionlow : UInt64) : UInt32

  # Params # appinstanceid : Guid* [In],instanceversionhigh : UInt64* [In],instanceversionlow : UInt64* [In],versionstatus : NTSTATUS* [In]
  fun QueryAppInstanceVersion(appinstanceid : Guid*, instanceversionhigh : UInt64*, instanceversionlow : UInt64*, versionstatus : NTSTATUS*) : UInt32

  # Params # 
  fun ResetAllAppInstanceVersions : UInt32

  # Params # processhandle : LibC::HANDLE [In],mask : UInt32 [In],flags : UInt32 [In]
  fun SetAppInstanceCsvFlags(processhandle : LibC::HANDLE, mask : UInt32, flags : UInt32) : UInt32
end
