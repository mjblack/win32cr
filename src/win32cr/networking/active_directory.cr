require "./../ui/windows_and_messaging.cr"
require "./../foundation.cr"
require "./../system/com.cr"
require "./../system/registry.cr"
require "./../system/com/structured_storage.cr"
require "./../ui/shell.cr"
require "./../ui/controls.cr"
require "./../system/ole.cr"
require "./../security.cr"
require "./win_sock.cr"
require "./../security/authentication/identity.cr"

module Win32cr::Networking::ActiveDirectory
  alias GetDcContextHandle = LibC::IntPtrT
  alias ADS_SEARCH_HANDLE = LibC::IntPtrT
  alias LPCQADDFORMSPROC = Proc(Win32cr::Foundation::LPARAM, Win32cr::Networking::ActiveDirectory::CQFORM*, Win32cr::Foundation::HRESULT)*

  alias LPCQADDPAGESPROC = Proc(Win32cr::Foundation::LPARAM, LibC::GUID*, Win32cr::Networking::ActiveDirectory::CQPAGE*, Win32cr::Foundation::HRESULT)*

  alias LPCQPAGEPROC = Proc(Win32cr::Networking::ActiveDirectory::CQPAGE*, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::HRESULT)*

  alias LPDSENUMATTRIBUTES = Proc(Win32cr::Foundation::LPARAM, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT)*

  WM_ADSPROP_NOTIFY_PAGEINIT = 2125_u32
  WM_ADSPROP_NOTIFY_PAGEHWND = 2126_u32
  WM_ADSPROP_NOTIFY_CHANGE = 2127_u32
  WM_ADSPROP_NOTIFY_APPLY = 2128_u32
  WM_ADSPROP_NOTIFY_SETFOCUS = 2129_u32
  WM_ADSPROP_NOTIFY_FOREGROUND = 2130_u32
  WM_ADSPROP_NOTIFY_EXIT = 2131_u32
  WM_ADSPROP_NOTIFY_ERROR = 2134_u32
  CLSID_CommonQuery = "83bc5ec0-6f2a-11d0-a1c4-00aa00c16e65"
  QUERYFORM_CHANGESFORMLIST = 1_u64
  QUERYFORM_CHANGESOPTFORMLIST = 2_u64
  CQFF_NOGLOBALPAGES = 1_u32
  CQFF_ISOPTIONAL = 2_u32
  CQPM_INITIALIZE = 1_u32
  CQPM_RELEASE = 2_u32
  CQPM_ENABLE = 3_u32
  CQPM_GETPARAMETERS = 5_u32
  CQPM_CLEARFORM = 6_u32
  CQPM_PERSIST = 7_u32
  CQPM_HELP = 8_u32
  CQPM_SETDEFAULTPARAMETERS = 9_u32
  CQPM_HANDLERSPECIFIC = 268435456_u32
  OQWF_OKCANCEL = 1_u32
  OQWF_DEFAULTFORM = 2_u32
  OQWF_SINGLESELECT = 4_u32
  OQWF_LOADQUERY = 8_u32
  OQWF_REMOVESCOPES = 16_u32
  OQWF_REMOVEFORMS = 32_u32
  OQWF_ISSUEONOPEN = 64_u32
  OQWF_SHOWOPTIONAL = 128_u32
  OQWF_SAVEQUERYONOK = 512_u32
  OQWF_HIDEMENUS = 1024_u32
  OQWF_HIDESEARCHUI = 2048_u32
  OQWF_PARAMISPROPERTYBAG = 2147483648_u32
  CLSID_DsAdminCreateObj = "e301a009-f901-11d2-82b9-00c04f68928b"
  DSA_NEWOBJ_CTX_PRECOMMIT = 1_u32
  DSA_NEWOBJ_CTX_COMMIT = 2_u32
  DSA_NEWOBJ_CTX_POSTCOMMIT = 3_u32
  DSA_NEWOBJ_CTX_CLEANUP = 4_u32
  DSA_NOTIFY_DEL = 1_u32
  DSA_NOTIFY_REN = 2_u32
  DSA_NOTIFY_MOV = 4_u32
  DSA_NOTIFY_PROP = 8_u32
  DSA_NOTIFY_FLAG_ADDITIONAL_DATA = 2_u32
  DSA_NOTIFY_FLAG_FORCE_ADDITIONAL_DATA = 1_u32
  CLSID_MicrosoftDS = "fe1290f0-cfbd-11cf-a330-00aa00c16e65"
  CLSID_DsPropertyPages = "0d45d530-764b-11d0-a1ca-00aa00c16e65"
  CLSID_DsDomainTreeBrowser = "1698790a-e2b4-11d0-b0b1-00c04fd8dca6"
  CLSID_DsDisplaySpecifier = "1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86"
  CLSID_DsFolderProperties = "9e51e0d0-6e0f-11d2-9601-00c04fa31a86"
  DSOBJECT_ISCONTAINER = 1_u32
  DSOBJECT_READONLYPAGES = 2147483648_u32
  DSPROVIDER_UNUSED_0 = 1_u32
  DSPROVIDER_UNUSED_1 = 2_u32
  DSPROVIDER_UNUSED_2 = 4_u32
  DSPROVIDER_UNUSED_3 = 8_u32
  DSPROVIDER_ADVANCED = 16_u32
  DSPROVIDER_AD_LDS = 32_u32
  CFSTR_DSOBJECTNAMES = "DsObjectNames"
  CFSTR_DS_DISPLAY_SPEC_OPTIONS = "DsDisplaySpecOptions"
  CFSTR_DSDISPLAYSPECOPTIONS = "DsDisplaySpecOptions"
  DS_PROP_SHELL_PREFIX = "shell"
  DS_PROP_ADMIN_PREFIX = "admin"
  DSDSOF_HASUSERANDSERVERINFO = 1_u32
  DSDSOF_SIMPLEAUTHENTICATE = 2_u32
  DSDSOF_DONTSIGNSEAL = 4_u32
  DSDSOF_DSAVAILABLE = 1073741824_u32
  CFSTR_DSPROPERTYPAGEINFO = "DsPropPageInfo"
  DSPROP_ATTRCHANGED_MSG = "DsPropAttrChanged"
  DBDTF_RETURNFQDN = 1_u32
  DBDTF_RETURNMIXEDDOMAINS = 2_u32
  DBDTF_RETURNEXTERNAL = 4_u32
  DBDTF_RETURNINBOUND = 8_u32
  DBDTF_RETURNINOUTBOUND = 16_u32
  DSSSF_SIMPLEAUTHENTICATE = 1_u32
  DSSSF_DONTSIGNSEAL = 2_u32
  DSSSF_DSAVAILABLE = 2147483648_u32
  DSGIF_ISNORMAL = 0_u32
  DSGIF_ISOPEN = 1_u32
  DSGIF_ISDISABLED = 2_u32
  DSGIF_ISMASK = 15_u32
  DSGIF_GETDEFAULTICON = 16_u32
  DSGIF_DEFAULTISCONTAINER = 32_u32
  DSICCF_IGNORETREATASLEAF = 1_u32
  DSECAF_NOTLISTED = 1_u32
  DSCCIF_HASWIZARDDIALOG = 1_u32
  DSCCIF_HASWIZARDPRIMARYPAGE = 2_u32
  DSBI_NOBUTTONS = 1_u32
  DSBI_NOLINES = 2_u32
  DSBI_NOLINESATROOT = 4_u32
  DSBI_CHECKBOXES = 256_u32
  DSBI_NOROOT = 65536_u32
  DSBI_INCLUDEHIDDEN = 131072_u32
  DSBI_EXPANDONOPEN = 262144_u32
  DSBI_ENTIREDIRECTORY = 589824_u32
  DSBI_RETURN_FORMAT = 1048576_u32
  DSBI_HASCREDENTIALS = 2097152_u32
  DSBI_IGNORETREATASLEAF = 4194304_u32
  DSBI_SIMPLEAUTHENTICATE = 8388608_u32
  DSBI_RETURNOBJECTCLASS = 16777216_u32
  DSBI_DONTSIGNSEAL = 33554432_u32
  DSB_MAX_DISPLAYNAME_CHARS = 64_u32
  DSBF_STATE = 1_u32
  DSBF_ICONLOCATION = 2_u32
  DSBF_DISPLAYNAME = 4_u32
  DSBS_CHECKED = 1_u32
  DSBS_HIDDEN = 2_u32
  DSBS_ROOT = 4_u32
  DSBM_QUERYINSERTW = 100_u32
  DSBM_QUERYINSERTA = 101_u32
  DSBM_QUERYINSERT = 100_u32
  DSBM_CHANGEIMAGESTATE = 102_u32
  DSBM_HELP = 103_u32
  DSBM_CONTEXTMENU = 104_u32
  DSBID_BANNER = 256_u32
  DSBID_CONTAINERLIST = 257_u32
  DS_FORCE_REDISCOVERY = 1_u32
  DS_DIRECTORY_SERVICE_REQUIRED = 16_u32
  DS_DIRECTORY_SERVICE_PREFERRED = 32_u32
  DS_GC_SERVER_REQUIRED = 64_u32
  DS_PDC_REQUIRED = 128_u32
  DS_BACKGROUND_ONLY = 256_u32
  DS_IP_REQUIRED = 512_u32
  DS_KDC_REQUIRED = 1024_u32
  DS_TIMESERV_REQUIRED = 2048_u32
  DS_WRITABLE_REQUIRED = 4096_u32
  DS_GOOD_TIMESERV_PREFERRED = 8192_u32
  DS_AVOID_SELF = 16384_u32
  DS_ONLY_LDAP_NEEDED = 32768_u32
  DS_IS_FLAT_NAME = 65536_u32
  DS_IS_DNS_NAME = 131072_u32
  DS_TRY_NEXTCLOSEST_SITE = 262144_u32
  DS_DIRECTORY_SERVICE_6_REQUIRED = 524288_u32
  DS_WEB_SERVICE_REQUIRED = 1048576_u32
  DS_DIRECTORY_SERVICE_8_REQUIRED = 2097152_u32
  DS_DIRECTORY_SERVICE_9_REQUIRED = 4194304_u32
  DS_DIRECTORY_SERVICE_10_REQUIRED = 8388608_u32
  DS_KEY_LIST_SUPPORT_REQUIRED = 16777216_u32
  DS_RETURN_DNS_NAME = 1073741824_u32
  DS_RETURN_FLAT_NAME = 2147483648_u32
  DS_PDC_FLAG = 1_u32
  DS_GC_FLAG = 4_u32
  DS_LDAP_FLAG = 8_u32
  DS_DS_FLAG = 16_u32
  DS_KDC_FLAG = 32_u32
  DS_TIMESERV_FLAG = 64_u32
  DS_CLOSEST_FLAG = 128_u32
  DS_WRITABLE_FLAG = 256_u32
  DS_GOOD_TIMESERV_FLAG = 512_u32
  DS_NDNC_FLAG = 1024_u32
  DS_SELECT_SECRET_DOMAIN_6_FLAG = 2048_u32
  DS_FULL_SECRET_DOMAIN_6_FLAG = 4096_u32
  DS_WS_FLAG = 8192_u32
  DS_DS_8_FLAG = 16384_u32
  DS_DS_9_FLAG = 32768_u32
  DS_DS_10_FLAG = 65536_u32
  DS_KEY_LIST_FLAG = 131072_u32
  DS_PING_FLAGS = 1048575_u32
  DS_DNS_CONTROLLER_FLAG = 536870912_u32
  DS_DNS_DOMAIN_FLAG = 1073741824_u32
  DS_DNS_FOREST_FLAG = 2147483648_u32
  DS_DOMAIN_IN_FOREST = 1_u32
  DS_DOMAIN_DIRECT_OUTBOUND = 2_u32
  DS_DOMAIN_TREE_ROOT = 4_u32
  DS_DOMAIN_PRIMARY = 8_u32
  DS_DOMAIN_NATIVE_MODE = 16_u32
  DS_DOMAIN_DIRECT_INBOUND = 32_u32
  DS_GFTI_UPDATE_TDO = 1_u32
  DS_GFTI_VALID_FLAGS = 1_u32
  DS_ONLY_DO_SITE_NAME = 1_u32
  DS_NOTIFY_AFTER_SITE_RECORDS = 2_u32
  CLSID_DsQuery = "8a23e65e-31c2-11d0-891c-00a024ab2dbb"
  CLSID_DsFindObjects = "83ee3fe1-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindPeople = "83ee3fe2-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindPrinter = "b577f070-7ee2-11d0-913f-00aa00c16e65"
  CLSID_DsFindComputer = "16006700-87ad-11d0-9140-00aa00c16e65"
  CLSID_DsFindVolume = "c1b3cbf1-886a-11d0-9140-00aa00c16e65"
  CLSID_DsFindContainer = "c1b3cbf2-886a-11d0-9140-00aa00c16e65"
  CLSID_DsFindAdvanced = "83ee3fe3-57d9-11d0-b932-00a024ab2dbb"
  CLSID_DsFindDomainController = "538c7b7e-d25e-11d0-9742-00a0c906af45"
  CLSID_DsFindWriteableDomainController = "7cbef079-aa84-444b-bc70-68e41283eabc"
  CLSID_DsFindFrsMembers = "94ce4b18-b3d3-11d1-b9b4-00c04fd8d5b0"
  DSQPF_NOSAVE = 1_u32
  DSQPF_SAVELOCATION = 2_u32
  DSQPF_SHOWHIDDENOBJECTS = 4_u32
  DSQPF_ENABLEADMINFEATURES = 8_u32
  DSQPF_ENABLEADVANCEDFEATURES = 16_u32
  DSQPF_HASCREDENTIALS = 32_u32
  DSQPF_NOCHOOSECOLUMNS = 64_u32
  CFSTR_DSQUERYPARAMS = "DsQueryParameters"
  CFSTR_DSQUERYSCOPE = "DsQueryScope"
  DSQPM_GETCLASSLIST = 268435456_u32
  DSQPM_HELPTOPICS = 268435457_u32
  DSROLE_PRIMARY_DS_RUNNING = 1_u32
  DSROLE_PRIMARY_DS_MIXED_MODE = 2_u32
  DSROLE_UPGRADE_IN_PROGRESS = 4_u32
  DSROLE_PRIMARY_DS_READONLY = 8_u32
  DSROLE_PRIMARY_DOMAIN_GUID_PRESENT = 16777216_u32
  ADS_ATTR_CLEAR = 1_u32
  ADS_ATTR_UPDATE = 2_u32
  ADS_ATTR_APPEND = 3_u32
  ADS_ATTR_DELETE = 4_u32
  ADS_EXT_MINEXTDISPID = 1_u32
  ADS_EXT_MAXEXTDISPID = 16777215_u32
  ADS_EXT_INITCREDENTIALS = 1_u32
  ADS_EXT_INITIALIZE_COMPLETE = 2_u32
  DS_BEHAVIOR_WIN2000 = 0_u32
  DS_BEHAVIOR_WIN2003_WITH_MIXED_DOMAINS = 1_u32
  DS_BEHAVIOR_WIN2003 = 2_u32
  DS_BEHAVIOR_WIN2008 = 3_u32
  DS_BEHAVIOR_WIN2008R2 = 4_u32
  DS_BEHAVIOR_WIN2012 = 5_u32
  DS_BEHAVIOR_WIN2012R2 = 6_u32
  DS_BEHAVIOR_WIN2016 = 7_u32
  DS_BEHAVIOR_LONGHORN = 3_u32
  DS_BEHAVIOR_WIN7 = 4_u32
  DS_BEHAVIOR_WIN8 = 5_u32
  DS_BEHAVIOR_WINBLUE = 6_u32
  DS_BEHAVIOR_WINTHRESHOLD = 7_u32
  DS_SYNCED_EVENT_NAME = "NTDSInitialSyncsCompleted"
  DS_SYNCED_EVENT_NAME_W = "NTDSInitialSyncsCompleted"
  ACTRL_DS_OPEN = 0_u32
  ACTRL_DS_CREATE_CHILD = 1_u32
  ACTRL_DS_DELETE_CHILD = 2_u32
  ACTRL_DS_LIST = 4_u32
  ACTRL_DS_SELF = 8_u32
  ACTRL_DS_READ_PROP = 16_u32
  ACTRL_DS_WRITE_PROP = 32_u32
  ACTRL_DS_DELETE_TREE = 64_u32
  ACTRL_DS_LIST_OBJECT = 128_u32
  ACTRL_DS_CONTROL_ACCESS = 256_u32
  NTDSAPI_BIND_ALLOW_DELEGATION = 1_u32
  NTDSAPI_BIND_FIND_BINDING = 2_u32
  NTDSAPI_BIND_FORCE_KERBEROS = 4_u32
  DS_REPSYNC_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPSYNC_WRITEABLE = 2_u32
  DS_REPSYNC_PERIODIC = 4_u32
  DS_REPSYNC_INTERSITE_MESSAGING = 8_u32
  DS_REPSYNC_FULL = 32_u32
  DS_REPSYNC_URGENT = 64_u32
  DS_REPSYNC_NO_DISCARD = 128_u32
  DS_REPSYNC_FORCE = 256_u32
  DS_REPSYNC_ADD_REFERENCE = 512_u32
  DS_REPSYNC_NEVER_COMPLETED = 1024_u32
  DS_REPSYNC_TWO_WAY = 2048_u32
  DS_REPSYNC_NEVER_NOTIFY = 4096_u32
  DS_REPSYNC_INITIAL = 8192_u32
  DS_REPSYNC_USE_COMPRESSION = 16384_u32
  DS_REPSYNC_ABANDONED = 32768_u32
  DS_REPSYNC_SELECT_SECRETS = 32768_u32
  DS_REPSYNC_INITIAL_IN_PROGRESS = 65536_u32
  DS_REPSYNC_PARTIAL_ATTRIBUTE_SET = 131072_u32
  DS_REPSYNC_REQUEUE = 262144_u32
  DS_REPSYNC_NOTIFICATION = 524288_u32
  DS_REPSYNC_ASYNCHRONOUS_REPLICA = 1048576_u32
  DS_REPSYNC_CRITICAL = 2097152_u32
  DS_REPSYNC_FULL_IN_PROGRESS = 4194304_u32
  DS_REPSYNC_PREEMPTED = 8388608_u32
  DS_REPSYNC_NONGC_RO_REPLICA = 16777216_u32
  DS_REPADD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPADD_WRITEABLE = 2_u32
  DS_REPADD_INITIAL = 4_u32
  DS_REPADD_PERIODIC = 8_u32
  DS_REPADD_INTERSITE_MESSAGING = 16_u32
  DS_REPADD_ASYNCHRONOUS_REPLICA = 32_u32
  DS_REPADD_DISABLE_NOTIFICATION = 64_u32
  DS_REPADD_DISABLE_PERIODIC = 128_u32
  DS_REPADD_USE_COMPRESSION = 256_u32
  DS_REPADD_NEVER_NOTIFY = 512_u32
  DS_REPADD_TWO_WAY = 1024_u32
  DS_REPADD_CRITICAL = 2048_u32
  DS_REPADD_SELECT_SECRETS = 4096_u32
  DS_REPADD_NONGC_RO_REPLICA = 16777216_u32
  DS_REPDEL_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPDEL_WRITEABLE = 2_u32
  DS_REPDEL_INTERSITE_MESSAGING = 4_u32
  DS_REPDEL_IGNORE_ERRORS = 8_u32
  DS_REPDEL_LOCAL_ONLY = 16_u32
  DS_REPDEL_NO_SOURCE = 32_u32
  DS_REPDEL_REF_OK = 64_u32
  DS_REPMOD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPMOD_WRITEABLE = 2_u32
  DS_REPMOD_UPDATE_FLAGS = 1_u32
  DS_REPMOD_UPDATE_INSTANCE = 2_u32
  DS_REPMOD_UPDATE_ADDRESS = 2_u32
  DS_REPMOD_UPDATE_SCHEDULE = 4_u32
  DS_REPMOD_UPDATE_RESULT = 8_u32
  DS_REPMOD_UPDATE_TRANSPORT = 16_u32
  DS_REPUPD_ASYNCHRONOUS_OPERATION = 1_u32
  DS_REPUPD_WRITEABLE = 2_u32
  DS_REPUPD_ADD_REFERENCE = 4_u32
  DS_REPUPD_DELETE_REFERENCE = 8_u32
  DS_REPUPD_REFERENCE_GCSPN = 16_u32
  DS_INSTANCETYPE_IS_NC_HEAD = 1_u32
  DS_INSTANCETYPE_NC_IS_WRITEABLE = 4_u32
  DS_INSTANCETYPE_NC_COMING = 16_u32
  DS_INSTANCETYPE_NC_GOING = 32_u32
  NTDSDSA_OPT_IS_GC = 1_u32
  NTDSDSA_OPT_DISABLE_INBOUND_REPL = 2_u32
  NTDSDSA_OPT_DISABLE_OUTBOUND_REPL = 4_u32
  NTDSDSA_OPT_DISABLE_NTDSCONN_XLATE = 8_u32
  NTDSDSA_OPT_DISABLE_SPN_REGISTRATION = 16_u32
  NTDSDSA_OPT_GENERATE_OWN_TOPO = 32_u32
  NTDSDSA_OPT_BLOCK_RPC = 64_u32
  NTDSCONN_OPT_IS_GENERATED = 1_u32
  NTDSCONN_OPT_TWOWAY_SYNC = 2_u32
  NTDSCONN_OPT_OVERRIDE_NOTIFY_DEFAULT = 4_u32
  NTDSCONN_OPT_USE_NOTIFY = 8_u32
  NTDSCONN_OPT_DISABLE_INTERSITE_COMPRESSION = 16_u32
  NTDSCONN_OPT_USER_OWNED_SCHEDULE = 32_u32
  NTDSCONN_OPT_RODC_TOPOLOGY = 64_u32
  NTDSCONN_KCC_NO_REASON = 0_u32
  NTDSCONN_KCC_GC_TOPOLOGY = 1_u32
  NTDSCONN_KCC_RING_TOPOLOGY = 2_u32
  NTDSCONN_KCC_MINIMIZE_HOPS_TOPOLOGY = 4_u32
  NTDSCONN_KCC_STALE_SERVERS_TOPOLOGY = 8_u32
  NTDSCONN_KCC_OSCILLATING_CONNECTION_TOPOLOGY = 16_u32
  NTDSCONN_KCC_INTERSITE_GC_TOPOLOGY = 32_u32
  NTDSCONN_KCC_INTERSITE_TOPOLOGY = 64_u32
  NTDSCONN_KCC_SERVER_FAILOVER_TOPOLOGY = 128_u32
  NTDSCONN_KCC_SITE_FAILOVER_TOPOLOGY = 256_u32
  NTDSCONN_KCC_REDUNDANT_SERVER_TOPOLOGY = 512_u32
  FRSCONN_PRIORITY_MASK = 1879048192_u32
  FRSCONN_MAX_PRIORITY = 8_u32
  NTDSCONN_OPT_IGNORE_SCHEDULE_MASK = 2147483648_u32
  NTDSSETTINGS_OPT_IS_AUTO_TOPOLOGY_DISABLED = 1_u32
  NTDSSETTINGS_OPT_IS_TOPL_CLEANUP_DISABLED = 2_u32
  NTDSSETTINGS_OPT_IS_TOPL_MIN_HOPS_DISABLED = 4_u32
  NTDSSETTINGS_OPT_IS_TOPL_DETECT_STALE_DISABLED = 8_u32
  NTDSSETTINGS_OPT_IS_INTER_SITE_AUTO_TOPOLOGY_DISABLED = 16_u32
  NTDSSETTINGS_OPT_IS_GROUP_CACHING_ENABLED = 32_u32
  NTDSSETTINGS_OPT_FORCE_KCC_WHISTLER_BEHAVIOR = 64_u32
  NTDSSETTINGS_OPT_FORCE_KCC_W2K_ELECTION = 128_u32
  NTDSSETTINGS_OPT_IS_RAND_BH_SELECTION_DISABLED = 256_u32
  NTDSSETTINGS_OPT_IS_SCHEDULE_HASHING_ENABLED = 512_u32
  NTDSSETTINGS_OPT_IS_REDUNDANT_SERVER_TOPOLOGY_ENABLED = 1024_u32
  NTDSSETTINGS_OPT_W2K3_IGNORE_SCHEDULES = 2048_u32
  NTDSSETTINGS_OPT_W2K3_BRIDGES_REQUIRED = 4096_u32
  NTDSSETTINGS_DEFAULT_SERVER_REDUNDANCY = 2_u32
  NTDSTRANSPORT_OPT_IGNORE_SCHEDULES = 1_u32
  NTDSTRANSPORT_OPT_BRIDGES_REQUIRED = 2_u32
  NTDSSITECONN_OPT_USE_NOTIFY = 1_u32
  NTDSSITECONN_OPT_TWOWAY_SYNC = 2_u32
  NTDSSITECONN_OPT_DISABLE_COMPRESSION = 4_u32
  NTDSSITELINK_OPT_USE_NOTIFY = 1_u32
  NTDSSITELINK_OPT_TWOWAY_SYNC = 2_u32
  NTDSSITELINK_OPT_DISABLE_COMPRESSION = 4_u32
  GUID_USERS_CONTAINER_A = "a9d1ca15768811d1aded00c04fd8d5cd"
  GUID_COMPUTRS_CONTAINER_A = "aa312825768811d1aded00c04fd8d5cd"
  GUID_SYSTEMS_CONTAINER_A = "ab1d30f3768811d1aded00c04fd8d5cd"
  GUID_DOMAIN_CONTROLLERS_CONTAINER_A = "a361b2ffffd211d1aa4b00c04fd7d83a"
  GUID_INFRASTRUCTURE_CONTAINER_A = "2fbac1870ade11d297c400c04fd8d5cd"
  GUID_DELETED_OBJECTS_CONTAINER_A = "18e2ea80684f11d2b9aa00c04f79f805"
  GUID_LOSTANDFOUND_CONTAINER_A = "ab8153b7768811d1aded00c04fd8d5cd"
  GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_A = "22b70c67d56e4efb91e9300fca3dc1aa"
  GUID_PROGRAM_DATA_CONTAINER_A = "09460c08ae1e4a4ea0f64aee7daa1e5a"
  GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_A = "f4be92a4c777485e878e9421d53087db"
  GUID_NTDS_QUOTAS_CONTAINER_A = "6227f0af1fc2410d8e3bb10615bb5b0f"
  GUID_USERS_CONTAINER_W = "a9d1ca15768811d1aded00c04fd8d5cd"
  GUID_COMPUTRS_CONTAINER_W = "aa312825768811d1aded00c04fd8d5cd"
  GUID_SYSTEMS_CONTAINER_W = "ab1d30f3768811d1aded00c04fd8d5cd"
  GUID_DOMAIN_CONTROLLERS_CONTAINER_W = "a361b2ffffd211d1aa4b00c04fd7d83a"
  GUID_INFRASTRUCTURE_CONTAINER_W = "2fbac1870ade11d297c400c04fd8d5cd"
  GUID_DELETED_OBJECTS_CONTAINER_W = "18e2ea80684f11d2b9aa00c04f79f805"
  GUID_LOSTANDFOUND_CONTAINER_W = "ab8153b7768811d1aded00c04fd8d5cd"
  GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_W = "22b70c67d56e4efb91e9300fca3dc1aa"
  GUID_PROGRAM_DATA_CONTAINER_W = "09460c08ae1e4a4ea0f64aee7daa1e5a"
  GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_W = "f4be92a4c777485e878e9421d53087db"
  GUID_NTDS_QUOTAS_CONTAINER_W = "6227f0af1fc2410d8e3bb10615bb5b0f"
  GUID_MANAGED_SERVICE_ACCOUNTS_CONTAINER_W = "1EB93889E40C45DF9F0C64D23BBB6237"
  GUID_KEYS_CONTAINER_W = "683A24E2E8164BD3AF86AC3C2CF3F981"
  DS_REPSYNCALL_NO_OPTIONS = 0_u32
  DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE = 1_u32
  DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY = 2_u32
  DS_REPSYNCALL_ID_SERVERS_BY_DN = 4_u32
  DS_REPSYNCALL_DO_NOT_SYNC = 8_u32
  DS_REPSYNCALL_SKIP_INITIAL_CHECK = 16_u32
  DS_REPSYNCALL_PUSH_CHANGES_OUTWARD = 32_u32
  DS_REPSYNCALL_CROSS_SITE_BOUNDARIES = 64_u32
  DS_LIST_DSA_OBJECT_FOR_SERVER = 0_u32
  DS_LIST_DNS_HOST_NAME_FOR_SERVER = 1_u32
  DS_LIST_ACCOUNT_OBJECT_FOR_SERVER = 2_u32
  DS_ROLE_SCHEMA_OWNER = 0_u32
  DS_ROLE_DOMAIN_OWNER = 1_u32
  DS_ROLE_PDC_OWNER = 2_u32
  DS_ROLE_RID_OWNER = 3_u32
  DS_ROLE_INFRASTRUCTURE_OWNER = 4_u32
  DS_SCHEMA_GUID_NOT_FOUND = 0_u32
  DS_SCHEMA_GUID_ATTR = 1_u32
  DS_SCHEMA_GUID_ATTR_SET = 2_u32
  DS_SCHEMA_GUID_CLASS = 3_u32
  DS_SCHEMA_GUID_CONTROL_RIGHT = 4_u32
  DS_KCC_FLAG_ASYNC_OP = 1_u32
  DS_KCC_FLAG_DAMPED = 2_u32
  DS_EXIST_ADVISORY_MODE = 1_u32
  DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS = 1_u32
  DS_REPL_NBR_WRITEABLE = 16_u32
  DS_REPL_NBR_SYNC_ON_STARTUP = 32_u32
  DS_REPL_NBR_DO_SCHEDULED_SYNCS = 64_u32
  DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT = 128_u32
  DS_REPL_NBR_TWO_WAY_SYNC = 512_u32
  DS_REPL_NBR_NONGC_RO_REPLICA = 1024_u32
  DS_REPL_NBR_RETURN_OBJECT_PARENTS = 2048_u32
  DS_REPL_NBR_SELECT_SECRETS = 4096_u32
  DS_REPL_NBR_FULL_SYNC_IN_PROGRESS = 65536_u32
  DS_REPL_NBR_FULL_SYNC_NEXT_PACKET = 131072_u32
  DS_REPL_NBR_GCSPN = 1048576_u32
  DS_REPL_NBR_NEVER_SYNCED = 2097152_u32
  DS_REPL_NBR_PREEMPTED = 16777216_u32
  DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS = 67108864_u32
  DS_REPL_NBR_DISABLE_SCHEDULED_SYNC = 134217728_u32
  DS_REPL_NBR_COMPRESS_CHANGES = 268435456_u32
  DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS = 536870912_u32
  DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET = 1073741824_u32
  ADAM_SCP_SITE_NAME_STRING = "site:"
  ADAM_SCP_SITE_NAME_STRING_W = "site:"
  ADAM_SCP_PARTITION_STRING = "partition:"
  ADAM_SCP_PARTITION_STRING_W = "partition:"
  ADAM_SCP_INSTANCE_NAME_STRING = "instance:"
  ADAM_SCP_INSTANCE_NAME_STRING_W = "instance:"
  ADAM_SCP_FSMO_STRING = "fsmo:"
  ADAM_SCP_FSMO_STRING_W = "fsmo:"
  ADAM_SCP_FSMO_NAMING_STRING = "naming"
  ADAM_SCP_FSMO_NAMING_STRING_W = "naming"
  ADAM_SCP_FSMO_SCHEMA_STRING = "schema"
  ADAM_SCP_FSMO_SCHEMA_STRING_W = "schema"
  ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE_PASS_THROUGH = 0_u32
  ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE = 1_u32
  ADAM_REPL_AUTHENTICATION_MODE_MUTUAL_AUTH_REQUIRED = 2_u32
  FLAG_FOREST_OPTIONAL_FEATURE = 1_u32
  FLAG_DOMAIN_OPTIONAL_FEATURE = 2_u32
  FLAG_DISABLABLE_OPTIONAL_FEATURE = 4_u32
  FLAG_SERVER_OPTIONAL_FEATURE = 8_u32
  GUID_RECYCLE_BIN_OPTIONAL_FEATURE_A = "d8dc6d76d0ac5e44f3b9a7f9b6744f2a"
  GUID_RECYCLE_BIN_OPTIONAL_FEATURE_W = "d8dc6d76d0ac5e44f3b9a7f9b6744f2a"
  GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_A = "73e843ece8cc4046b4ab07ffe4ab5bcd"
  GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_W = "73e843ece8cc4046b4ab07ffe4ab5bcd"
  CFSTR_DSOP_DS_SELECTION_LIST = "CFSTR_DSOP_DS_SELECTION_LIST"
  DSOP_SCOPE_TYPE_TARGET_COMPUTER = 1_u32
  DSOP_SCOPE_TYPE_UPLEVEL_JOINED_DOMAIN = 2_u32
  DSOP_SCOPE_TYPE_DOWNLEVEL_JOINED_DOMAIN = 4_u32
  DSOP_SCOPE_TYPE_ENTERPRISE_DOMAIN = 8_u32
  DSOP_SCOPE_TYPE_GLOBAL_CATALOG = 16_u32
  DSOP_SCOPE_TYPE_EXTERNAL_UPLEVEL_DOMAIN = 32_u32
  DSOP_SCOPE_TYPE_EXTERNAL_DOWNLEVEL_DOMAIN = 64_u32
  DSOP_SCOPE_TYPE_WORKGROUP = 128_u32
  DSOP_SCOPE_TYPE_USER_ENTERED_UPLEVEL_SCOPE = 256_u32
  DSOP_SCOPE_TYPE_USER_ENTERED_DOWNLEVEL_SCOPE = 512_u32
  DSOP_SCOPE_FLAG_STARTING_SCOPE = 1_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_WINNT = 2_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_LDAP = 4_u32
  DSOP_SCOPE_FLAG_WANT_PROVIDER_GC = 8_u32
  DSOP_SCOPE_FLAG_WANT_SID_PATH = 16_u32
  DSOP_SCOPE_FLAG_WANT_DOWNLEVEL_BUILTIN_PATH = 32_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_USERS = 64_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_GROUPS = 128_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_COMPUTERS = 256_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_CONTACTS = 512_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_SERVICE_ACCOUNTS = 1024_u32
  DSOP_SCOPE_FLAG_DEFAULT_FILTER_PASSWORDSETTINGS_OBJECTS = 2048_u32
  DSOP_FILTER_INCLUDE_ADVANCED_VIEW = 1_u32
  DSOP_FILTER_USERS = 2_u32
  DSOP_FILTER_BUILTIN_GROUPS = 4_u32
  DSOP_FILTER_WELL_KNOWN_PRINCIPALS = 8_u32
  DSOP_FILTER_UNIVERSAL_GROUPS_DL = 16_u32
  DSOP_FILTER_UNIVERSAL_GROUPS_SE = 32_u32
  DSOP_FILTER_GLOBAL_GROUPS_DL = 64_u32
  DSOP_FILTER_GLOBAL_GROUPS_SE = 128_u32
  DSOP_FILTER_DOMAIN_LOCAL_GROUPS_DL = 256_u32
  DSOP_FILTER_DOMAIN_LOCAL_GROUPS_SE = 512_u32
  DSOP_FILTER_CONTACTS = 1024_u32
  DSOP_FILTER_COMPUTERS = 2048_u32
  DSOP_FILTER_SERVICE_ACCOUNTS = 4096_u32
  DSOP_FILTER_PASSWORDSETTINGS_OBJECTS = 8192_u32
  DSOP_DOWNLEVEL_FILTER_USERS = 2147483649_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_GROUPS = 2147483650_u32
  DSOP_DOWNLEVEL_FILTER_GLOBAL_GROUPS = 2147483652_u32
  DSOP_DOWNLEVEL_FILTER_COMPUTERS = 2147483656_u32
  DSOP_DOWNLEVEL_FILTER_WORLD = 2147483664_u32
  DSOP_DOWNLEVEL_FILTER_AUTHENTICATED_USER = 2147483680_u32
  DSOP_DOWNLEVEL_FILTER_ANONYMOUS = 2147483712_u32
  DSOP_DOWNLEVEL_FILTER_BATCH = 2147483776_u32
  DSOP_DOWNLEVEL_FILTER_CREATOR_OWNER = 2147483904_u32
  DSOP_DOWNLEVEL_FILTER_CREATOR_GROUP = 2147484160_u32
  DSOP_DOWNLEVEL_FILTER_DIALUP = 2147484672_u32
  DSOP_DOWNLEVEL_FILTER_INTERACTIVE = 2147485696_u32
  DSOP_DOWNLEVEL_FILTER_NETWORK = 2147487744_u32
  DSOP_DOWNLEVEL_FILTER_SERVICE = 2147491840_u32
  DSOP_DOWNLEVEL_FILTER_SYSTEM = 2147500032_u32
  DSOP_DOWNLEVEL_FILTER_EXCLUDE_BUILTIN_GROUPS = 2147516416_u32
  DSOP_DOWNLEVEL_FILTER_TERMINAL_SERVER = 2147549184_u32
  DSOP_DOWNLEVEL_FILTER_ALL_WELLKNOWN_SIDS = 2147614720_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_SERVICE = 2147745792_u32
  DSOP_DOWNLEVEL_FILTER_NETWORK_SERVICE = 2148007936_u32
  DSOP_DOWNLEVEL_FILTER_REMOTE_LOGON = 2148532224_u32
  DSOP_DOWNLEVEL_FILTER_INTERNET_USER = 2149580800_u32
  DSOP_DOWNLEVEL_FILTER_OWNER_RIGHTS = 2151677952_u32
  DSOP_DOWNLEVEL_FILTER_SERVICES = 2155872256_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_LOGON = 2164260864_u32
  DSOP_DOWNLEVEL_FILTER_THIS_ORG_CERT = 2181038080_u32
  DSOP_DOWNLEVEL_FILTER_IIS_APP_POOL = 2214592512_u32
  DSOP_DOWNLEVEL_FILTER_ALL_APP_PACKAGES = 2281701376_u32
  DSOP_DOWNLEVEL_FILTER_LOCAL_ACCOUNTS = 2415919104_u32
  DSOP_FLAG_MULTISELECT = 1_u32
  DSOP_FLAG_SKIP_TARGET_COMPUTER_DC_CHECK = 2_u32
  SCHEDULE_INTERVAL = 0_u32
  SCHEDULE_BANDWIDTH = 1_u32
  SCHEDULE_PRIORITY = 2_u32
  FACILITY_NTDSB = 2048_u32
  FACILITY_BACKUP = 2047_u32
  FACILITY_SYSTEM = 0_u32
  STATUS_SEVERITY_SUCCESS = 0_u32
  STATUS_SEVERITY_INFORMATIONAL = 1_u32
  STATUS_SEVERITY_WARNING = 2_u32
  STATUS_SEVERITY_ERROR = 3_u32
  Hrnone = 0_i32
  Hrnyi = -1073741823_i32
  Hrinvalidparam = -939589631_i32
  Hrerror = -939589630_i32
  Hrinvalidhandle = -939589629_i32
  Hrrestoreinprogress = -939589628_i32
  Hralreadyopen = -939589627_i32
  Hrinvalidrecips = -939589626_i32
  Hrcouldnotconnect = -939589625_i32
  Hrrestoremapexists = -939589624_i32
  Hrincrementalbackupdisabled = -939589623_i32
  Hrlogfilenotfound = -939589622_i32
  Hrcircularlogging = -939589621_i32
  Hrnofullrestore = -939589620_i32
  Hrcommunicationerror = -939589619_i32
  Hrfullbackupnottaken = -939589618_i32
  Hrmissingexpirytoken = -939589617_i32
  Hrunknownexpirytokenformat = -939589616_i32
  Hrcontentsexpired = -939589615_i32
  Hrfileclose = -939523994_i32
  Hroutofthreads = -939523993_i32
  Hrtoomanyio = -939523991_i32
  Hrbfnotsynchronous = -2013265720_i32
  Hrbfpagenotfound = -2013265719_i32
  Hrbfinuse = -939523894_i32
  Hrpmrecdeleted = -939523794_i32
  Hrremainingversions = -2013265599_i32
  Hrfldkeytoobig = -2013265520_i32
  Hrfldtoomanysegments = -939523695_i32
  Hrfldnullkey = -2013265518_i32
  Hrlogfilecorrupt = -939523595_i32
  Hrnobackupdirectory = -939523593_i32
  Hrbackupdirectorynotempty = -939523592_i32
  Hrbackupinprogress = -939523591_i32
  Hrmissingpreviouslogfile = -939523587_i32
  Hrlogwritefail = -939523586_i32
  Hrbadlogversion = -939523582_i32
  Hrinvalidlogsequence = -939523581_i32
  Hrloggingdisabled = -939523580_i32
  Hrlogbuffertoosmall = -939523579_i32
  Hrlogsequenceend = -939523577_i32
  Hrnobackup = -939523576_i32
  Hrinvalidbackupsequence = -939523575_i32
  Hrbackupnotallowedyet = -939523573_i32
  Hrdeletebackupfilefail = -939523572_i32
  Hrmakebackupdirectoryfail = -939523571_i32
  Hrinvalidbackup = -939523570_i32
  Hrrecoveredwitherrors = -939523569_i32
  Hrmissinglogfile = -939523568_i32
  Hrlogdiskfull = -939523567_i32
  Hrbadlogsignature = -939523566_i32
  Hrbaddbsignature = -939523565_i32
  Hrbadcheckpointsignature = -939523564_i32
  Hrcheckpointcorrupt = -939523563_i32
  Hrdatabaseinconsistent = -939523546_i32
  Hrconsistenttimemismatch = -939523545_i32
  Hrpatchfilemismatch = -939523544_i32
  Hrrestorelogtoolow = -939523543_i32
  Hrrestorelogtoohigh = -939523542_i32
  Hrgivenlogfilehasbadsignature = -939523541_i32
  Hrgivenlogfileisnotcontiguous = -939523540_i32
  Hrmissingrestorelogfiles = -939523539_i32
  Hrexistinglogfilehasbadsignature = -2013265362_i32
  Hrexistinglogfileisnotcontiguous = -2013265361_i32
  Hrmissingfullbackup = -939523536_i32
  Hrbadbackupdatabasesize = -939523535_i32
  Hrterminprogress = -939523096_i32
  Hrfeaturenotavailable = -939523095_i32
  Hrinvalidname = -939523094_i32
  Hrinvalidparameter = -939523093_i32
  Hrcolumnnull = -2013264916_i32
  Hrbuffertruncated = -2013264914_i32
  Hrdatabaseattached = -2013264913_i32
  Hrinvaliddatabaseid = -939523086_i32
  Hroutofmemory = -939523085_i32
  Hroutofdatabasespace = -939523084_i32
  Hroutofcursors = -939523083_i32
  Hroutofbuffers = -939523082_i32
  Hrtoomanyindexes = -939523081_i32
  Hrtoomanykeys = -939523080_i32
  Hrrecorddeleted = -939523079_i32
  Hrreadverifyfailure = -939523078_i32
  Hroutoffilehandles = -939523076_i32
  Hrdiskio = -939523074_i32
  Hrinvalidpath = -939523073_i32
  Hrrecordtoobig = -939523070_i32
  Hrtoomanyopendatabases = -939523069_i32
  Hrinvaliddatabase = -939523068_i32
  Hrnotinitialized = -939523067_i32
  Hralreadyinitialized = -939523066_i32
  Hrfileaccessdenied = -939523064_i32
  Hrbuffertoosmall = -939523058_i32
  Hrseeknotequal = -2013264881_i32
  Hrtoomanycolumns = -939523056_i32
  Hrcontainernotempty = -939523053_i32
  Hrinvalidfilename = -939523052_i32
  Hrinvalidbookmark = -939523051_i32
  Hrcolumninuse = -939523050_i32
  Hrinvalidbuffersize = -939523049_i32
  Hrcolumnnotupdatable = -939523048_i32
  Hrindexinuse = -939523045_i32
  Hrnullkeydisallowed = -939523043_i32
  Hrnotintransaction = -939523042_i32
  Hrnoidleactivity = -2013264862_i32
  Hrtoomanyactiveusers = -939523037_i32
  Hrinvalidcountry = -939523035_i32
  Hrinvalidlanguageid = -939523034_i32
  Hrinvalidcodepage = -939523033_i32
  Hrnowritelock = -2013264853_i32
  Hrcolumnsetnull = -2013264852_i32
  Hrversionstoreoutofmemory = -939523027_i32
  Hrcurrencystackoutofmemory = -939523026_i32
  Hroutofsessions = -939522995_i32
  Hrwriteconflict = -939522994_i32
  Hrtranstoodeep = -939522993_i32
  Hrinvalidsesid = -939522992_i32
  Hrsessionwriteconflict = -939522989_i32
  Hrintransaction = -939522988_i32
  Hrdatabaseduplicate = -939522895_i32
  Hrdatabaseinuse = -939522894_i32
  Hrdatabasenotfound = -939522893_i32
  Hrdatabaseinvalidname = -939522892_i32
  Hrdatabaseinvalidpages = -939522891_i32
  Hrdatabasecorrupted = -939522890_i32
  Hrdatabaselocked = -939522889_i32
  Hrtableempty = -2013264619_i32
  Hrtablelocked = -939522794_i32
  Hrtableduplicate = -939522793_i32
  Hrtableinuse = -939522792_i32
  Hrobjectnotfound = -939522791_i32
  Hrcannotrename = -939522790_i32
  Hrdensityinvalid = -939522789_i32
  Hrtablenotempty = -939522788_i32
  Hrinvalidtableid = -939522786_i32
  Hrtoomanyopentables = -939522785_i32
  Hrillegaloperation = -939522784_i32
  Hrobjectduplicate = -939522782_i32
  Hrinvalidobject = -939522780_i32
  Hrindexcantbuild = -939522695_i32
  Hrindexhasprimary = -939522694_i32
  Hrindexduplicate = -939522693_i32
  Hrindexnotfound = -939522692_i32
  Hrindexmuststay = -939522691_i32
  Hrindexinvaliddef = -939522690_i32
  Hrindexhasclustered = -939522688_i32
  Hrcreateindexfailed = -2013264511_i32
  Hrtoomanyopenindexes = -939522686_i32
  Hrcolumnlong = -939522595_i32
  Hrcolumndoesnotfit = -939522593_i32
  Hrnullinvalid = -939522592_i32
  Hrcolumnindexed = -939522591_i32
  Hrcolumntoobig = -939522590_i32
  Hrcolumnnotfound = -939522589_i32
  Hrcolumnduplicate = -939522588_i32
  Hrcolumn2ndsysmaint = -939522586_i32
  Hrinvalidcolumntype = -939522585_i32
  Hrcolumnmaxtruncated = -2013264408_i32
  Hrcolumncannotindex = -939522583_i32
  Hrtaggednotnull = -939522582_i32
  Hrnocurrentindex = -939522581_i32
  Hrkeyismade = -939522580_i32
  Hrbadcolumnid = -939522579_i32
  Hrbaditagsequence = -939522578_i32
  Hrcannotbetagged = -939522575_i32
  Hrrecordnotfound = -939522495_i32
  Hrnocurrentrecord = -939522493_i32
  Hrrecordclusteredchanged = -939522492_i32
  Hrkeyduplicate = -939522491_i32
  Hralreadyprepared = -939522489_i32
  Hrkeynotmade = -939522488_i32
  Hrupdatenotprepared = -939522487_i32
  Hrwrndatahaschanged = -2013264310_i32
  Hrerrdatahaschanged = -939522485_i32
  Hrkeychanged = -2013264302_i32
  Hrtoomanysorts = -939522395_i32
  Hrinvalidonsort = -939522394_i32
  Hrtempfileopenerror = -939522293_i32
  Hrtoomanyattacheddatabases = -939522291_i32
  Hrdiskfull = -939522288_i32
  Hrpermissiondenied = -939522287_i32
  Hrfilenotfound = -939522285_i32
  Hrfileopenreadonly = -2013264107_i32
  Hrafterinitialization = -939522246_i32
  Hrlogcorrupted = -939522244_i32
  Hrinvalidoperation = -939522190_i32
  Hraccessdenied = -939522189_i32
  CLSID_DsObjectPicker = "17d6ccd8-3b7b-11d2-b9e0-00c04fd8dbf7"

  CLSID_PropertyEntry = LibC::GUID.new(0x72d3edc2_u32, 0xa4c4_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x33_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_PropertyValue = LibC::GUID.new(0x7b9e38b0_u32, 0xa97c_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_AccessControlEntry = LibC::GUID.new(0xb75ac000_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_AccessControlList = LibC::GUID.new(0xb85ea052_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_SecurityDescriptor = LibC::GUID.new(0xb958f73c_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_LargeInteger = LibC::GUID.new(0x927971f5_u32, 0x939_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0xe1_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])

  CLSID_NameTranslate = LibC::GUID.new(0x274fae1f_u32, 0x3626_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_CaseIgnoreList = LibC::GUID.new(0x15f88a55_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_FaxNumber = LibC::GUID.new(0xa5062215_u32, 0x4681_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_NetAddress = LibC::GUID.new(0xb0b71247_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_OctetList = LibC::GUID.new(0x1241400f_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_Email = LibC::GUID.new(0x8f92a857_u32, 0x478e_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_Path = LibC::GUID.new(0xb2538919_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_ReplicaPointer = LibC::GUID.new(0xf5d1badf_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_Timestamp = LibC::GUID.new(0xb2bed2eb_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_PostalAddress = LibC::GUID.new(0xa75afcd_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_BackLink = LibC::GUID.new(0xfcbf906f_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_TypedName = LibC::GUID.new(0xb33143cb_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_Hold = LibC::GUID.new(0xb3ad3e13_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_Pathname = LibC::GUID.new(0x80d0d78_u32, 0xf421_u16, 0x11d0_u16, StaticArray[0xa3_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])

  CLSID_ADSystemInfo = LibC::GUID.new(0x50b6327f_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])

  CLSID_WinNTSystemInfo = LibC::GUID.new(0x66182ec4_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])

  CLSID_DNWithBinary = LibC::GUID.new(0x7e99c0a3_u32, 0xf935_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])

  CLSID_DNWithString = LibC::GUID.new(0x334857cc_u32, 0xf934_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])

  CLSID_ADsSecurityUtility = LibC::GUID.new(0xf270c64a_u32, 0xffb8_u16, 0x4ae4_u16, StaticArray[0x85_u8, 0xfe_u8, 0x3a_u8, 0x75_u8, 0xe5_u8, 0x34_u8, 0x79_u8, 0x66_u8])

  enum ADSTYPEENUM
    ADSTYPE_INVALID = 0_i32
    ADSTYPE_DN_STRING = 1_i32
    ADSTYPE_CASE_EXACT_STRING = 2_i32
    ADSTYPE_CASE_IGNORE_STRING = 3_i32
    ADSTYPE_PRINTABLE_STRING = 4_i32
    ADSTYPE_NUMERIC_STRING = 5_i32
    ADSTYPE_BOOLEAN = 6_i32
    ADSTYPE_INTEGER = 7_i32
    ADSTYPE_OCTET_STRING = 8_i32
    ADSTYPE_UTC_TIME = 9_i32
    ADSTYPE_LARGE_INTEGER = 10_i32
    ADSTYPE_PROV_SPECIFIC = 11_i32
    ADSTYPE_OBJECT_CLASS = 12_i32
    ADSTYPE_CASEIGNORE_LIST = 13_i32
    ADSTYPE_OCTET_LIST = 14_i32
    ADSTYPE_PATH = 15_i32
    ADSTYPE_POSTALADDRESS = 16_i32
    ADSTYPE_TIMESTAMP = 17_i32
    ADSTYPE_BACKLINK = 18_i32
    ADSTYPE_TYPEDNAME = 19_i32
    ADSTYPE_HOLD = 20_i32
    ADSTYPE_NETADDRESS = 21_i32
    ADSTYPE_REPLICAPOINTER = 22_i32
    ADSTYPE_FAXNUMBER = 23_i32
    ADSTYPE_EMAIL = 24_i32
    ADSTYPE_NT_SECURITY_DESCRIPTOR = 25_i32
    ADSTYPE_UNKNOWN = 26_i32
    ADSTYPE_DN_WITH_BINARY = 27_i32
    ADSTYPE_DN_WITH_STRING = 28_i32
  end
  enum ADS_AUTHENTICATION_ENUM : UInt32
    ADS_SECURE_AUTHENTICATION = 1_u32
    ADS_USE_ENCRYPTION = 2_u32
    ADS_USE_SSL = 2_u32
    ADS_READONLY_SERVER = 4_u32
    ADS_PROMPT_CREDENTIALS = 8_u32
    ADS_NO_AUTHENTICATION = 16_u32
    ADS_FAST_BIND = 32_u32
    ADS_USE_SIGNING = 64_u32
    ADS_USE_SEALING = 128_u32
    ADS_USE_DELEGATION = 256_u32
    ADS_SERVER_BIND = 512_u32
    ADS_NO_REFERRAL_CHASING = 1024_u32
    ADS_AUTH_RESERVED = 2147483648_u32
  end
  enum ADS_STATUSENUM
    ADS_STATUS_S_OK = 0_i32
    ADS_STATUS_INVALID_SEARCHPREF = 1_i32
    ADS_STATUS_INVALID_SEARCHPREFVALUE = 2_i32
  end
  enum ADS_DEREFENUM
    ADS_DEREF_NEVER = 0_i32
    ADS_DEREF_SEARCHING = 1_i32
    ADS_DEREF_FINDING = 2_i32
    ADS_DEREF_ALWAYS = 3_i32
  end
  enum ADS_SCOPEENUM
    ADS_SCOPE_BASE = 0_i32
    ADS_SCOPE_ONELEVEL = 1_i32
    ADS_SCOPE_SUBTREE = 2_i32
  end
  enum ADS_PREFERENCES_ENUM
    ADSIPROP_ASYNCHRONOUS = 0_i32
    ADSIPROP_DEREF_ALIASES = 1_i32
    ADSIPROP_SIZE_LIMIT = 2_i32
    ADSIPROP_TIME_LIMIT = 3_i32
    ADSIPROP_ATTRIBTYPES_ONLY = 4_i32
    ADSIPROP_SEARCH_SCOPE = 5_i32
    ADSIPROP_TIMEOUT = 6_i32
    ADSIPROP_PAGESIZE = 7_i32
    ADSIPROP_PAGED_TIME_LIMIT = 8_i32
    ADSIPROP_CHASE_REFERRALS = 9_i32
    ADSIPROP_SORT_ON = 10_i32
    ADSIPROP_CACHE_RESULTS = 11_i32
    ADSIPROP_ADSIFLAG = 12_i32
  end
  enum ADSI_DIALECT_ENUM
    ADSI_DIALECT_LDAP = 0_i32
    ADSI_DIALECT_SQL = 1_i32
  end
  enum ADS_CHASE_REFERRALS_ENUM
    ADS_CHASE_REFERRALS_NEVER = 0_i32
    ADS_CHASE_REFERRALS_SUBORDINATE = 32_i32
    ADS_CHASE_REFERRALS_EXTERNAL = 64_i32
    ADS_CHASE_REFERRALS_ALWAYS = 96_i32
  end
  enum ADS_SEARCHPREF_ENUM
    ADS_SEARCHPREF_ASYNCHRONOUS = 0_i32
    ADS_SEARCHPREF_DEREF_ALIASES = 1_i32
    ADS_SEARCHPREF_SIZE_LIMIT = 2_i32
    ADS_SEARCHPREF_TIME_LIMIT = 3_i32
    ADS_SEARCHPREF_ATTRIBTYPES_ONLY = 4_i32
    ADS_SEARCHPREF_SEARCH_SCOPE = 5_i32
    ADS_SEARCHPREF_TIMEOUT = 6_i32
    ADS_SEARCHPREF_PAGESIZE = 7_i32
    ADS_SEARCHPREF_PAGED_TIME_LIMIT = 8_i32
    ADS_SEARCHPREF_CHASE_REFERRALS = 9_i32
    ADS_SEARCHPREF_SORT_ON = 10_i32
    ADS_SEARCHPREF_CACHE_RESULTS = 11_i32
    ADS_SEARCHPREF_DIRSYNC = 12_i32
    ADS_SEARCHPREF_TOMBSTONE = 13_i32
    ADS_SEARCHPREF_VLV = 14_i32
    ADS_SEARCHPREF_ATTRIBUTE_QUERY = 15_i32
    ADS_SEARCHPREF_SECURITY_MASK = 16_i32
    ADS_SEARCHPREF_DIRSYNC_FLAG = 17_i32
    ADS_SEARCHPREF_EXTENDED_DN = 18_i32
  end
  enum ADS_PASSWORD_ENCODING_ENUM
    ADS_PASSWORD_ENCODE_REQUIRE_SSL = 0_i32
    ADS_PASSWORD_ENCODE_CLEAR = 1_i32
  end
  enum ADS_PROPERTY_OPERATION_ENUM
    ADS_PROPERTY_CLEAR = 1_i32
    ADS_PROPERTY_UPDATE = 2_i32
    ADS_PROPERTY_APPEND = 3_i32
    ADS_PROPERTY_DELETE = 4_i32
  end
  enum ADS_SYSTEMFLAG_ENUM
    ADS_SYSTEMFLAG_DISALLOW_DELETE = -2147483648_i32
    ADS_SYSTEMFLAG_CONFIG_ALLOW_RENAME = 1073741824_i32
    ADS_SYSTEMFLAG_CONFIG_ALLOW_MOVE = 536870912_i32
    ADS_SYSTEMFLAG_CONFIG_ALLOW_LIMITED_MOVE = 268435456_i32
    ADS_SYSTEMFLAG_DOMAIN_DISALLOW_RENAME = 134217728_i32
    ADS_SYSTEMFLAG_DOMAIN_DISALLOW_MOVE = 67108864_i32
    ADS_SYSTEMFLAG_CR_NTDS_NC = 1_i32
    ADS_SYSTEMFLAG_CR_NTDS_DOMAIN = 2_i32
    ADS_SYSTEMFLAG_ATTR_NOT_REPLICATED = 1_i32
    ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED = 4_i32
  end
  enum ADS_GROUP_TYPE_ENUM
    ADS_GROUP_TYPE_GLOBAL_GROUP = 2_i32
    ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP = 4_i32
    ADS_GROUP_TYPE_LOCAL_GROUP = 4_i32
    ADS_GROUP_TYPE_UNIVERSAL_GROUP = 8_i32
    ADS_GROUP_TYPE_SECURITY_ENABLED = -2147483648_i32
  end
  enum ADS_USER_FLAG_ENUM
    ADS_UF_SCRIPT = 1_i32
    ADS_UF_ACCOUNTDISABLE = 2_i32
    ADS_UF_HOMEDIR_REQUIRED = 8_i32
    ADS_UF_LOCKOUT = 16_i32
    ADS_UF_PASSWD_NOTREQD = 32_i32
    ADS_UF_PASSWD_CANT_CHANGE = 64_i32
    ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128_i32
    ADS_UF_TEMP_DUPLICATE_ACCOUNT = 256_i32
    ADS_UF_NORMAL_ACCOUNT = 512_i32
    ADS_UF_INTERDOMAIN_TRUST_ACCOUNT = 2048_i32
    ADS_UF_WORKSTATION_TRUST_ACCOUNT = 4096_i32
    ADS_UF_SERVER_TRUST_ACCOUNT = 8192_i32
    ADS_UF_DONT_EXPIRE_PASSWD = 65536_i32
    ADS_UF_MNS_LOGON_ACCOUNT = 131072_i32
    ADS_UF_SMARTCARD_REQUIRED = 262144_i32
    ADS_UF_TRUSTED_FOR_DELEGATION = 524288_i32
    ADS_UF_NOT_DELEGATED = 1048576_i32
    ADS_UF_USE_DES_KEY_ONLY = 2097152_i32
    ADS_UF_DONT_REQUIRE_PREAUTH = 4194304_i32
    ADS_UF_PASSWORD_EXPIRED = 8388608_i32
    ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216_i32
  end
  enum ADS_RIGHTS_ENUM
    ADS_RIGHT_DELETE = 65536_i32
    ADS_RIGHT_READ_CONTROL = 131072_i32
    ADS_RIGHT_WRITE_DAC = 262144_i32
    ADS_RIGHT_WRITE_OWNER = 524288_i32
    ADS_RIGHT_SYNCHRONIZE = 1048576_i32
    ADS_RIGHT_ACCESS_SYSTEM_SECURITY = 16777216_i32
    ADS_RIGHT_GENERIC_READ = -2147483648_i32
    ADS_RIGHT_GENERIC_WRITE = 1073741824_i32
    ADS_RIGHT_GENERIC_EXECUTE = 536870912_i32
    ADS_RIGHT_GENERIC_ALL = 268435456_i32
    ADS_RIGHT_DS_CREATE_CHILD = 1_i32
    ADS_RIGHT_DS_DELETE_CHILD = 2_i32
    ADS_RIGHT_ACTRL_DS_LIST = 4_i32
    ADS_RIGHT_DS_SELF = 8_i32
    ADS_RIGHT_DS_READ_PROP = 16_i32
    ADS_RIGHT_DS_WRITE_PROP = 32_i32
    ADS_RIGHT_DS_DELETE_TREE = 64_i32
    ADS_RIGHT_DS_LIST_OBJECT = 128_i32
    ADS_RIGHT_DS_CONTROL_ACCESS = 256_i32
  end
  enum ADS_ACETYPE_ENUM
    ADS_ACETYPE_ACCESS_ALLOWED = 0_i32
    ADS_ACETYPE_ACCESS_DENIED = 1_i32
    ADS_ACETYPE_SYSTEM_AUDIT = 2_i32
    ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = 5_i32
    ADS_ACETYPE_ACCESS_DENIED_OBJECT = 6_i32
    ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = 7_i32
    ADS_ACETYPE_SYSTEM_ALARM_OBJECT = 8_i32
    ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK = 9_i32
    ADS_ACETYPE_ACCESS_DENIED_CALLBACK = 10_i32
    ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK_OBJECT = 11_i32
    ADS_ACETYPE_ACCESS_DENIED_CALLBACK_OBJECT = 12_i32
    ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK = 13_i32
    ADS_ACETYPE_SYSTEM_ALARM_CALLBACK = 14_i32
    ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK_OBJECT = 15_i32
    ADS_ACETYPE_SYSTEM_ALARM_CALLBACK_OBJECT = 16_i32
  end
  enum ADS_ACEFLAG_ENUM
    ADS_ACEFLAG_INHERIT_ACE = 2_i32
    ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = 4_i32
    ADS_ACEFLAG_INHERIT_ONLY_ACE = 8_i32
    ADS_ACEFLAG_INHERITED_ACE = 16_i32
    ADS_ACEFLAG_VALID_INHERIT_FLAGS = 31_i32
    ADS_ACEFLAG_SUCCESSFUL_ACCESS = 64_i32
    ADS_ACEFLAG_FAILED_ACCESS = 128_i32
  end
  enum ADS_FLAGTYPE_ENUM
    ADS_FLAG_OBJECT_TYPE_PRESENT = 1_i32
    ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = 2_i32
  end
  enum ADS_SD_CONTROL_ENUM
    ADS_SD_CONTROL_SE_OWNER_DEFAULTED = 1_i32
    ADS_SD_CONTROL_SE_GROUP_DEFAULTED = 2_i32
    ADS_SD_CONTROL_SE_DACL_PRESENT = 4_i32
    ADS_SD_CONTROL_SE_DACL_DEFAULTED = 8_i32
    ADS_SD_CONTROL_SE_SACL_PRESENT = 16_i32
    ADS_SD_CONTROL_SE_SACL_DEFAULTED = 32_i32
    ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = 256_i32
    ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = 512_i32
    ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED = 1024_i32
    ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED = 2048_i32
    ADS_SD_CONTROL_SE_DACL_PROTECTED = 4096_i32
    ADS_SD_CONTROL_SE_SACL_PROTECTED = 8192_i32
    ADS_SD_CONTROL_SE_SELF_RELATIVE = 32768_i32
  end
  enum ADS_SD_REVISION_ENUM
    ADS_SD_REVISION_DS = 4_i32
  end
  enum ADS_NAME_TYPE_ENUM
    ADS_NAME_TYPE_1779 = 1_i32
    ADS_NAME_TYPE_CANONICAL = 2_i32
    ADS_NAME_TYPE_NT4 = 3_i32
    ADS_NAME_TYPE_DISPLAY = 4_i32
    ADS_NAME_TYPE_DOMAIN_SIMPLE = 5_i32
    ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6_i32
    ADS_NAME_TYPE_GUID = 7_i32
    ADS_NAME_TYPE_UNKNOWN = 8_i32
    ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9_i32
    ADS_NAME_TYPE_CANONICAL_EX = 10_i32
    ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11_i32
    ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12_i32
  end
  enum ADS_NAME_INITTYPE_ENUM
    ADS_NAME_INITTYPE_DOMAIN = 1_i32
    ADS_NAME_INITTYPE_SERVER = 2_i32
    ADS_NAME_INITTYPE_GC = 3_i32
  end
  enum ADS_OPTION_ENUM
    ADS_OPTION_SERVERNAME = 0_i32
    ADS_OPTION_REFERRALS = 1_i32
    ADS_OPTION_PAGE_SIZE = 2_i32
    ADS_OPTION_SECURITY_MASK = 3_i32
    ADS_OPTION_MUTUAL_AUTH_STATUS = 4_i32
    ADS_OPTION_QUOTA = 5_i32
    ADS_OPTION_PASSWORD_PORTNUMBER = 6_i32
    ADS_OPTION_PASSWORD_METHOD = 7_i32
    ADS_OPTION_ACCUMULATIVE_MODIFICATION = 8_i32
    ADS_OPTION_SKIP_SID_LOOKUP = 9_i32
  end
  enum ADS_SECURITY_INFO_ENUM
    ADS_SECURITY_INFO_OWNER = 1_i32
    ADS_SECURITY_INFO_GROUP = 2_i32
    ADS_SECURITY_INFO_DACL = 4_i32
    ADS_SECURITY_INFO_SACL = 8_i32
  end
  enum ADS_SETTYPE_ENUM
    ADS_SETTYPE_FULL = 1_i32
    ADS_SETTYPE_PROVIDER = 2_i32
    ADS_SETTYPE_SERVER = 3_i32
    ADS_SETTYPE_DN = 4_i32
  end
  enum ADS_FORMAT_ENUM
    ADS_FORMAT_WINDOWS = 1_i32
    ADS_FORMAT_WINDOWS_NO_SERVER = 2_i32
    ADS_FORMAT_WINDOWS_DN = 3_i32
    ADS_FORMAT_WINDOWS_PARENT = 4_i32
    ADS_FORMAT_X500 = 5_i32
    ADS_FORMAT_X500_NO_SERVER = 6_i32
    ADS_FORMAT_X500_DN = 7_i32
    ADS_FORMAT_X500_PARENT = 8_i32
    ADS_FORMAT_SERVER = 9_i32
    ADS_FORMAT_PROVIDER = 10_i32
    ADS_FORMAT_LEAF = 11_i32
  end
  enum ADS_DISPLAY_ENUM
    ADS_DISPLAY_FULL = 1_i32
    ADS_DISPLAY_VALUE_ONLY = 2_i32
  end
  enum ADS_ESCAPE_MODE_ENUM
    ADS_ESCAPEDMODE_DEFAULT = 1_i32
    ADS_ESCAPEDMODE_ON = 2_i32
    ADS_ESCAPEDMODE_OFF = 3_i32
    ADS_ESCAPEDMODE_OFF_EX = 4_i32
  end
  enum ADS_PATHTYPE_ENUM
    ADS_PATH_FILE = 1_i32
    ADS_PATH_FILESHARE = 2_i32
    ADS_PATH_REGISTRY = 3_i32
  end
  enum ADS_SD_FORMAT_ENUM
    ADS_SD_FORMAT_IID = 1_i32
    ADS_SD_FORMAT_RAW = 2_i32
    ADS_SD_FORMAT_HEXSTRING = 3_i32
  end
  enum DS_MANGLE_FOR
    DS_MANGLE_UNKNOWN = 0_i32
    DS_MANGLE_OBJECT_RDN_FOR_DELETION = 1_i32
    DS_MANGLE_OBJECT_RDN_FOR_NAME_CONFLICT = 2_i32
  end
  enum DS_NAME_FORMAT
    DS_UNKNOWN_NAME = 0_i32
    DS_FQDN_1779_NAME = 1_i32
    DS_NT4_ACCOUNT_NAME = 2_i32
    DS_DISPLAY_NAME = 3_i32
    DS_UNIQUE_ID_NAME = 6_i32
    DS_CANONICAL_NAME = 7_i32
    DS_USER_PRINCIPAL_NAME = 8_i32
    DS_CANONICAL_NAME_EX = 9_i32
    DS_SERVICE_PRINCIPAL_NAME = 10_i32
    DS_SID_OR_SID_HISTORY_NAME = 11_i32
    DS_DNS_DOMAIN_NAME = 12_i32
  end
  enum DS_NAME_FLAGS
    DS_NAME_NO_FLAGS = 0_i32
    DS_NAME_FLAG_SYNTACTICAL_ONLY = 1_i32
    DS_NAME_FLAG_EVAL_AT_DC = 2_i32
    DS_NAME_FLAG_GCVERIFY = 4_i32
    DS_NAME_FLAG_TRUST_REFERRAL = 8_i32
  end
  enum DS_NAME_ERROR
    DS_NAME_NO_ERROR = 0_i32
    DS_NAME_ERROR_RESOLVING = 1_i32
    DS_NAME_ERROR_NOT_FOUND = 2_i32
    DS_NAME_ERROR_NOT_UNIQUE = 3_i32
    DS_NAME_ERROR_NO_MAPPING = 4_i32
    DS_NAME_ERROR_DOMAIN_ONLY = 5_i32
    DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 6_i32
    DS_NAME_ERROR_TRUST_REFERRAL = 7_i32
  end
  enum DS_SPN_NAME_TYPE
    DS_SPN_DNS_HOST = 0_i32
    DS_SPN_DN_HOST = 1_i32
    DS_SPN_NB_HOST = 2_i32
    DS_SPN_DOMAIN = 3_i32
    DS_SPN_NB_DOMAIN = 4_i32
    DS_SPN_SERVICE = 5_i32
  end
  enum DS_SPN_WRITE_OP
    DS_SPN_ADD_SPN_OP = 0_i32
    DS_SPN_REPLACE_SPN_OP = 1_i32
    DS_SPN_DELETE_SPN_OP = 2_i32
  end
  enum DS_REPSYNCALL_ERROR
    DS_REPSYNCALL_WIN32_ERROR_CONTACTING_SERVER = 0_i32
    DS_REPSYNCALL_WIN32_ERROR_REPLICATING = 1_i32
    DS_REPSYNCALL_SERVER_UNREACHABLE = 2_i32
  end
  enum DS_REPSYNCALL_EVENT
    DS_REPSYNCALL_EVENT_ERROR = 0_i32
    DS_REPSYNCALL_EVENT_SYNC_STARTED = 1_i32
    DS_REPSYNCALL_EVENT_SYNC_COMPLETED = 2_i32
    DS_REPSYNCALL_EVENT_FINISHED = 3_i32
  end
  enum DS_KCC_TASKID
    DS_KCC_TASKID_UPDATE_TOPOLOGY = 0_i32
  end
  enum DS_REPL_INFO_TYPE
    DS_REPL_INFO_NEIGHBORS = 0_i32
    DS_REPL_INFO_CURSORS_FOR_NC = 1_i32
    DS_REPL_INFO_METADATA_FOR_OBJ = 2_i32
    DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES = 3_i32
    DS_REPL_INFO_KCC_DSA_LINK_FAILURES = 4_i32
    DS_REPL_INFO_PENDING_OPS = 5_i32
    DS_REPL_INFO_METADATA_FOR_ATTR_VALUE = 6_i32
    DS_REPL_INFO_CURSORS_2_FOR_NC = 7_i32
    DS_REPL_INFO_CURSORS_3_FOR_NC = 8_i32
    DS_REPL_INFO_METADATA_2_FOR_OBJ = 9_i32
    DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE = 10_i32
    DS_REPL_INFO_METADATA_EXT_FOR_ATTR_VALUE = 11_i32
    DS_REPL_INFO_TYPE_MAX = 12_i32
  end
  enum DS_REPL_OP_TYPE
    DS_REPL_OP_TYPE_SYNC = 0_i32
    DS_REPL_OP_TYPE_ADD = 1_i32
    DS_REPL_OP_TYPE_DELETE = 2_i32
    DS_REPL_OP_TYPE_MODIFY = 3_i32
    DS_REPL_OP_TYPE_UPDATE_REFS = 4_i32
  end
  enum DSROLE_MACHINE_ROLE
    DsRole_RoleStandaloneWorkstation = 0_i32
    DsRole_RoleMemberWorkstation = 1_i32
    DsRole_RoleStandaloneServer = 2_i32
    DsRole_RoleMemberServer = 3_i32
    DsRole_RoleBackupDomainController = 4_i32
    DsRole_RolePrimaryDomainController = 5_i32
  end
  enum DSROLE_SERVER_STATE
    DsRoleServerUnknown = 0_i32
    DsRoleServerPrimary = 1_i32
    DsRoleServerBackup = 2_i32
  end
  enum DSROLE_PRIMARY_DOMAIN_INFO_LEVEL
    DsRolePrimaryDomainInfoBasic = 1_i32
    DsRoleUpgradeStatus = 2_i32
    DsRoleOperationState = 3_i32
  end
  enum DSROLE_OPERATION_STATE
    DsRoleOperationIdle = 0_i32
    DsRoleOperationActive = 1_i32
    DsRoleOperationNeedReboot = 2_i32
  end

  @[Extern]
  record CQFORM,
    cbStruct : UInt32,
    dwFlags : UInt32,
    clsid : LibC::GUID,
    hIcon : Win32cr::UI::WindowsAndMessaging::HICON,
    pszTitle : Win32cr::Foundation::PWSTR

  @[Extern]
  record CQPAGE,
    cbStruct : UInt32,
    dwFlags : UInt32,
    pPageProc : Win32cr::Networking::ActiveDirectory::LPCQPAGEPROC,
    hInstance : Win32cr::Foundation::HINSTANCE,
    idPageName : Int32,
    idPageTemplate : Int32,
    pDlgProc : Win32cr::UI::WindowsAndMessaging::DLGPROC,
    lParam : Win32cr::Foundation::LPARAM

  @[Extern]
  record OPENQUERYWINDOW,
    cbStruct : UInt32,
    dwFlags : UInt32,
    clsidHandler : LibC::GUID,
    pHandlerParameters : Void*,
    clsidDefaultForm : LibC::GUID,
    pPersistQuery : Void*,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pFormParameters : Void*,
      ppbFormParameters : Void*

  end

  @[Extern]
  record ADS_OCTET_STRING,
    dwLength : UInt32,
    lpValue : UInt8*

  @[Extern]
  record ADS_NT_SECURITY_DESCRIPTOR,
    dwLength : UInt32,
    lpValue : UInt8*

  @[Extern]
  record ADS_PROV_SPECIFIC,
    dwLength : UInt32,
    lpValue : UInt8*

  @[Extern]
  record ADS_CASEIGNORE_LIST,
    next__ : Win32cr::Networking::ActiveDirectory::ADS_CASEIGNORE_LIST*,
    string : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADS_OCTET_LIST,
    next__ : Win32cr::Networking::ActiveDirectory::ADS_OCTET_LIST*,
    length : UInt32,
    data : UInt8*

  @[Extern]
  record ADS_PATH,
    type__ : UInt32,
    volume_name : Win32cr::Foundation::PWSTR,
    path : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADS_POSTALADDRESS,
    postal_address : Win32cr::Foundation::PWSTR[6]

  @[Extern]
  record ADS_TIMESTAMP,
    whole_seconds : UInt32,
    event_id : UInt32

  @[Extern]
  record ADS_BACKLINK,
    remote_id : UInt32,
    object_name : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADS_TYPEDNAME,
    object_name : Win32cr::Foundation::PWSTR,
    level : UInt32,
    interval : UInt32

  @[Extern]
  record ADS_HOLD,
    object_name : Win32cr::Foundation::PWSTR,
    amount : UInt32

  @[Extern]
  record ADS_NETADDRESS,
    address_type : UInt32,
    address_length : UInt32,
    address : UInt8*

  @[Extern]
  record ADS_REPLICAPOINTER,
    server_name : Win32cr::Foundation::PWSTR,
    replica_type : UInt32,
    replica_number : UInt32,
    count : UInt32,
    replica_address_hints : Win32cr::Networking::ActiveDirectory::ADS_NETADDRESS*

  @[Extern]
  record ADS_FAXNUMBER,
    telephone_number : Win32cr::Foundation::PWSTR,
    number_of_bits : UInt32,
    parameters : UInt8*

  @[Extern]
  record ADS_EMAIL,
    address : Win32cr::Foundation::PWSTR,
    type__ : UInt32

  @[Extern]
  record ADS_DN_WITH_BINARY,
    dwLength : UInt32,
    lpBinaryValue : UInt8*,
    pszDNString : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADS_DN_WITH_STRING,
    pszStringValue : Win32cr::Foundation::PWSTR,
    pszDNString : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADSVALUE,
    dwType : Win32cr::Networking::ActiveDirectory::ADSTYPEENUM,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      dn_string : UInt16*,
      case_exact_string : UInt16*,
      case_ignore_string : UInt16*,
      printable_string : UInt16*,
      numeric_string : UInt16*,
      boolean : UInt32,
      integer : UInt32,
      octet_string : Win32cr::Networking::ActiveDirectory::ADS_OCTET_STRING,
      utc_time : Win32cr::Foundation::SYSTEMTIME,
      large_integer : Win32cr::Foundation::LARGE_INTEGER,
      class_name : UInt16*,
      provider_specific : Win32cr::Networking::ActiveDirectory::ADS_PROV_SPECIFIC,
      pCaseIgnoreList : Win32cr::Networking::ActiveDirectory::ADS_CASEIGNORE_LIST*,
      pOctetList : Win32cr::Networking::ActiveDirectory::ADS_OCTET_LIST*,
      pPath : Win32cr::Networking::ActiveDirectory::ADS_PATH*,
      pPostalAddress : Win32cr::Networking::ActiveDirectory::ADS_POSTALADDRESS*,
      timestamp : Win32cr::Networking::ActiveDirectory::ADS_TIMESTAMP,
      back_link : Win32cr::Networking::ActiveDirectory::ADS_BACKLINK,
      pTypedName : Win32cr::Networking::ActiveDirectory::ADS_TYPEDNAME*,
      hold : Win32cr::Networking::ActiveDirectory::ADS_HOLD,
      pNetAddress : Win32cr::Networking::ActiveDirectory::ADS_NETADDRESS*,
      pReplicaPointer : Win32cr::Networking::ActiveDirectory::ADS_REPLICAPOINTER*,
      pFaxNumber : Win32cr::Networking::ActiveDirectory::ADS_FAXNUMBER*,
      email : Win32cr::Networking::ActiveDirectory::ADS_EMAIL,
      security_descriptor : Win32cr::Networking::ActiveDirectory::ADS_NT_SECURITY_DESCRIPTOR,
      pDNWithBinary : Win32cr::Networking::ActiveDirectory::ADS_DN_WITH_BINARY*,
      pDNWithString : Win32cr::Networking::ActiveDirectory::ADS_DN_WITH_STRING*

  end

  @[Extern]
  record ADS_ATTR_INFO,
    pszAttrName : Win32cr::Foundation::PWSTR,
    dwControlCode : UInt32,
    dwADsType : Win32cr::Networking::ActiveDirectory::ADSTYPEENUM,
    pADsValues : Win32cr::Networking::ActiveDirectory::ADSVALUE*,
    dwNumValues : UInt32

  @[Extern]
  record ADS_OBJECT_INFO,
    pszRDN : Win32cr::Foundation::PWSTR,
    pszObjectDN : Win32cr::Foundation::PWSTR,
    pszParentDN : Win32cr::Foundation::PWSTR,
    pszSchemaDN : Win32cr::Foundation::PWSTR,
    pszClassName : Win32cr::Foundation::PWSTR

  @[Extern]
  record Ads_searchpref_info,
    dwSearchPref : Win32cr::Networking::ActiveDirectory::ADS_SEARCHPREF_ENUM,
    vValue : Win32cr::Networking::ActiveDirectory::ADSVALUE,
    dwStatus : Win32cr::Networking::ActiveDirectory::ADS_STATUSENUM

  @[Extern]
  record Ads_search_column,
    pszAttrName : Win32cr::Foundation::PWSTR,
    dwADsType : Win32cr::Networking::ActiveDirectory::ADSTYPEENUM,
    pADsValues : Win32cr::Networking::ActiveDirectory::ADSVALUE*,
    dwNumValues : UInt32,
    hReserved : Win32cr::Foundation::HANDLE

  @[Extern]
  record ADS_ATTR_DEF,
    pszAttrName : Win32cr::Foundation::PWSTR,
    dwADsType : Win32cr::Networking::ActiveDirectory::ADSTYPEENUM,
    dwMinRange : UInt32,
    dwMaxRange : UInt32,
    fMultiValued : Win32cr::Foundation::BOOL

  @[Extern]
  record ADS_CLASS_DEF,
    pszClassName : Win32cr::Foundation::PWSTR,
    dwMandatoryAttrs : UInt32,
    ppszMandatoryAttrs : Win32cr::Foundation::PWSTR*,
    optionalAttrs : UInt32,
    ppszOptionalAttrs : Win32cr::Foundation::PWSTR**,
    dwNamingAttrs : UInt32,
    ppszNamingAttrs : Win32cr::Foundation::PWSTR**,
    dwSuperClasses : UInt32,
    ppszSuperClasses : Win32cr::Foundation::PWSTR**,
    fIsContainer : Win32cr::Foundation::BOOL

  @[Extern]
  record ADS_SORTKEY,
    pszAttrType : Win32cr::Foundation::PWSTR,
    pszReserved : Win32cr::Foundation::PWSTR,
    fReverseorder : Win32cr::Foundation::BOOLEAN

  @[Extern]
  record ADS_VLV,
    dwBeforeCount : UInt32,
    dwAfterCount : UInt32,
    dwOffset : UInt32,
    dwContentCount : UInt32,
    pszTarget : Win32cr::Foundation::PWSTR,
    dwContextIDLength : UInt32,
    lpContextID : UInt8*

  @[Extern]
  record DSOBJECT,
    dwFlags : UInt32,
    dwProviderFlags : UInt32,
    offsetName : UInt32,
    offsetClass : UInt32

  @[Extern]
  record DSOBJECTNAMES,
    clsidNamespace : LibC::GUID,
    cItems : UInt32,
    aObjects : Win32cr::Networking::ActiveDirectory::DSOBJECT*

  @[Extern]
  record DSDISPLAYSPECOPTIONS,
    dwSize : UInt32,
    dwFlags : UInt32,
    offsetAttribPrefix : UInt32,
    offsetUserName : UInt32,
    offsetPassword : UInt32,
    offsetServer : UInt32,
    offsetServerConfigPath : UInt32

  @[Extern]
  record DSPROPERTYPAGEINFO,
    offsetString : UInt32

  @[Extern]
  record DOMAINDESC,
    pszName : Win32cr::Foundation::PWSTR,
    pszPath : Win32cr::Foundation::PWSTR,
    pszNCName : Win32cr::Foundation::PWSTR,
    pszTrustParent : Win32cr::Foundation::PWSTR,
    pszObjectClass : Win32cr::Foundation::PWSTR,
    ulFlags : UInt32,
    fDownLevel : Win32cr::Foundation::BOOL,
    pdChildList : Win32cr::Networking::ActiveDirectory::DOMAINDESC*,
    pdNextSibling : Win32cr::Networking::ActiveDirectory::DOMAINDESC*

  @[Extern]
  record DOMAIN_TREE,
    dsSize : UInt32,
    dwCount : UInt32,
    aDomains : Win32cr::Networking::ActiveDirectory::DOMAINDESC*

  @[Extern]
  record DSCLASSCREATIONINFO,
    dwFlags : UInt32,
    clsidWizardDialog : LibC::GUID,
    clsidWizardPrimaryPage : LibC::GUID,
    cWizardExtensions : UInt32,
    aWizardExtensions : LibC::GUID*

  @[Extern]
  record DSBROWSEINFOW,
    cbStruct : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pszCaption : Win32cr::Foundation::PWSTR,
    pszTitle : Win32cr::Foundation::PWSTR,
    pszRoot : Win32cr::Foundation::PWSTR,
    pszPath : Win32cr::Foundation::PWSTR,
    cchPath : UInt32,
    dwFlags : UInt32,
    pfnCallback : Win32cr::UI::Shell::BFFCALLBACK,
    lParam : Win32cr::Foundation::LPARAM,
    dwReturnFormat : UInt32,
    pUserName : Win32cr::Foundation::PWSTR,
    pPassword : Win32cr::Foundation::PWSTR,
    pszObjectClass : Win32cr::Foundation::PWSTR,
    cchObjectClass : UInt32

  @[Extern]
  record DSBROWSEINFOA,
    cbStruct : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pszCaption : Win32cr::Foundation::PSTR,
    pszTitle : Win32cr::Foundation::PSTR,
    pszRoot : Win32cr::Foundation::PWSTR,
    pszPath : Win32cr::Foundation::PWSTR,
    cchPath : UInt32,
    dwFlags : UInt32,
    pfnCallback : Win32cr::UI::Shell::BFFCALLBACK,
    lParam : Win32cr::Foundation::LPARAM,
    dwReturnFormat : UInt32,
    pUserName : Win32cr::Foundation::PWSTR,
    pPassword : Win32cr::Foundation::PWSTR,
    pszObjectClass : Win32cr::Foundation::PWSTR,
    cchObjectClass : UInt32

  @[Extern]
  record DSBITEMW,
    cbStruct : UInt32,
    pszADsPath : Win32cr::Foundation::PWSTR,
    pszClass : Win32cr::Foundation::PWSTR,
    dwMask : UInt32,
    dwState : UInt32,
    dwStateMask : UInt32,
    szDisplayName : UInt16[64],
    szIconLocation : UInt16[260],
    iIconResID : Int32

  @[Extern]
  record DSBITEMA,
    cbStruct : UInt32,
    pszADsPath : Win32cr::Foundation::PWSTR,
    pszClass : Win32cr::Foundation::PWSTR,
    dwMask : UInt32,
    dwState : UInt32,
    dwStateMask : UInt32,
    szDisplayName : Win32cr::Foundation::CHAR[64],
    szIconLocation : Win32cr::Foundation::CHAR[260],
    iIconResID : Int32

  @[Extern]
  record DSOP_UPLEVEL_FILTER_FLAGS,
    flBothModes : UInt32,
    flMixedModeOnly : UInt32,
    flNativeModeOnly : UInt32

  @[Extern]
  record DSOP_FILTER_FLAGS,
    uplevel : Win32cr::Networking::ActiveDirectory::DSOP_UPLEVEL_FILTER_FLAGS,
    flDownlevel : UInt32

  @[Extern]
  record DSOP_SCOPE_INIT_INFO,
    cbSize : UInt32,
    flType : UInt32,
    flScope : UInt32,
    filter_flags : Win32cr::Networking::ActiveDirectory::DSOP_FILTER_FLAGS,
    pwzDcName : Win32cr::Foundation::PWSTR,
    pwzADsPath : Win32cr::Foundation::PWSTR,
    hr : Win32cr::Foundation::HRESULT

  @[Extern]
  record DSOP_INIT_INFO,
    cbSize : UInt32,
    pwzTargetComputer : Win32cr::Foundation::PWSTR,
    cDsScopeInfos : UInt32,
    aDsScopeInfos : Win32cr::Networking::ActiveDirectory::DSOP_SCOPE_INIT_INFO*,
    flOptions : UInt32,
    cAttributesToFetch : UInt32,
    apwzAttributeNames : Win32cr::Foundation::PWSTR*

  @[Extern]
  record DS_SELECTION,
    pwzName : Win32cr::Foundation::PWSTR,
    pwzADsPath : Win32cr::Foundation::PWSTR,
    pwzClass : Win32cr::Foundation::PWSTR,
    pwzUPN : Win32cr::Foundation::PWSTR,
    pvarFetchedAttributes : Win32cr::System::Com::VARIANT*,
    flScopeType : UInt32

  @[Extern]
  record DS_SELECTION_LIST,
    cItems : UInt32,
    cFetchedAttributes : UInt32,
    aDsSelection : Win32cr::Networking::ActiveDirectory::DS_SELECTION*

  @[Extern]
  record DSQUERYINITPARAMS,
    cbStruct : UInt32,
    dwFlags : UInt32,
    pDefaultScope : Win32cr::Foundation::PWSTR,
    pDefaultSaveLocation : Win32cr::Foundation::PWSTR,
    pUserName : Win32cr::Foundation::PWSTR,
    pPassword : Win32cr::Foundation::PWSTR,
    pServer : Win32cr::Foundation::PWSTR

  @[Extern]
  record DSCOLUMN,
    dwFlags : UInt32,
    fmt : Int32,
    cx : Int32,
    idsName : Int32,
    offsetProperty : Int32,
    dwReserved : UInt32

  @[Extern]
  record DSQUERYPARAMS,
    cbStruct : UInt32,
    dwFlags : UInt32,
    hInstance : Win32cr::Foundation::HINSTANCE,
    offsetQuery : Int32,
    iColumns : Int32,
    dwReserved : UInt32,
    aColumns : Win32cr::Networking::ActiveDirectory::DSCOLUMN*

  @[Extern]
  record DSQUERYCLASSLIST,
    cbStruct : UInt32,
    cClasses : Int32,
    offsetClass : UInt32*

  @[Extern]
  record DSA_NEWOBJ_DISPINFO,
    dwSize : UInt32,
    hObjClassIcon : Win32cr::UI::WindowsAndMessaging::HICON,
    lpszWizTitle : Win32cr::Foundation::PWSTR,
    lpszContDisplayName : Win32cr::Foundation::PWSTR

  @[Extern]
  record ADSPROPINITPARAMS,
    dwSize : UInt32,
    dwFlags : UInt32,
    hr : Win32cr::Foundation::HRESULT,
    pDsObj : Void*,
    pwzCN : Win32cr::Foundation::PWSTR,
    pWritableAttrs : Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*

  @[Extern]
  record ADSPROPERROR,
    hwndPage : Win32cr::Foundation::HWND,
    pszPageTitle : Win32cr::Foundation::PWSTR,
    pszObjPath : Win32cr::Foundation::PWSTR,
    pszObjClass : Win32cr::Foundation::PWSTR,
    hr : Win32cr::Foundation::HRESULT,
    pszError : Win32cr::Foundation::PWSTR

  @[Extern]
  record SCHEDULE_HEADER,
    type__ : UInt32,
    offset : UInt32

  @[Extern]
  record SCHEDULE,
    size : UInt32,
    bandwidth : UInt32,
    number_of_schedules : UInt32,
    schedules : Win32cr::Networking::ActiveDirectory::SCHEDULE_HEADER*

  @[Extern]
  record DS_NAME_RESULT_ITEMA,
    status : UInt32,
    pDomain : Win32cr::Foundation::PSTR,
    pName : Win32cr::Foundation::PSTR

  @[Extern]
  record DS_NAME_RESULTA,
    cItems : UInt32,
    rItems : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULT_ITEMA*

  @[Extern]
  record DS_NAME_RESULT_ITEMW,
    status : UInt32,
    pDomain : Win32cr::Foundation::PWSTR,
    pName : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_NAME_RESULTW,
    cItems : UInt32,
    rItems : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULT_ITEMW*

  @[Extern]
  record DS_REPSYNCALL_SYNCA,
    pszSrcId : Win32cr::Foundation::PSTR,
    pszDstId : Win32cr::Foundation::PSTR,
    pszNC : Win32cr::Foundation::PSTR,
    pguidSrc : LibC::GUID*,
    pguidDst : LibC::GUID*

  @[Extern]
  record DS_REPSYNCALL_SYNCW,
    pszSrcId : Win32cr::Foundation::PWSTR,
    pszDstId : Win32cr::Foundation::PWSTR,
    pszNC : Win32cr::Foundation::PWSTR,
    pguidSrc : LibC::GUID*,
    pguidDst : LibC::GUID*

  @[Extern]
  record DS_REPSYNCALL_ERRINFOA,
    pszSvrId : Win32cr::Foundation::PSTR,
    error : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERROR,
    dwWin32Err : UInt32,
    pszSrcId : Win32cr::Foundation::PSTR

  @[Extern]
  record DS_REPSYNCALL_ERRINFOW,
    pszSvrId : Win32cr::Foundation::PWSTR,
    error : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERROR,
    dwWin32Err : UInt32,
    pszSrcId : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_REPSYNCALL_UPDATEA,
    event : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_EVENT,
    pErrInfo : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOA*,
    pSync : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_SYNCA*

  @[Extern]
  record DS_REPSYNCALL_UPDATEW,
    event : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_EVENT,
    pErrInfo : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOW*,
    pSync : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_SYNCW*

  @[Extern]
  record DS_SITE_COST_INFO,
    errorCode : UInt32,
    cost : UInt32

  @[Extern]
  record DS_SCHEMA_GUID_MAPA,
    guid : LibC::GUID,
    guidType : UInt32,
    pName : Win32cr::Foundation::PSTR

  @[Extern]
  record DS_SCHEMA_GUID_MAPW,
    guid : LibC::GUID,
    guidType : UInt32,
    pName : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_1A,
    netbios_name : Win32cr::Foundation::PSTR,
    dns_host_name : Win32cr::Foundation::PSTR,
    site_name : Win32cr::Foundation::PSTR,
    computer_object_name : Win32cr::Foundation::PSTR,
    server_object_name : Win32cr::Foundation::PSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_1W,
    netbios_name : Win32cr::Foundation::PWSTR,
    dns_host_name : Win32cr::Foundation::PWSTR,
    site_name : Win32cr::Foundation::PWSTR,
    computer_object_name : Win32cr::Foundation::PWSTR,
    server_object_name : Win32cr::Foundation::PWSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_2A,
    netbios_name : Win32cr::Foundation::PSTR,
    dns_host_name : Win32cr::Foundation::PSTR,
    site_name : Win32cr::Foundation::PSTR,
    site_object_name : Win32cr::Foundation::PSTR,
    computer_object_name : Win32cr::Foundation::PSTR,
    server_object_name : Win32cr::Foundation::PSTR,
    ntds_dsa_object_name : Win32cr::Foundation::PSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL,
    fIsGc : Win32cr::Foundation::BOOL,
    site_object_guid : LibC::GUID,
    computer_object_guid : LibC::GUID,
    server_object_guid : LibC::GUID,
    ntds_dsa_object_guid : LibC::GUID

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_2W,
    netbios_name : Win32cr::Foundation::PWSTR,
    dns_host_name : Win32cr::Foundation::PWSTR,
    site_name : Win32cr::Foundation::PWSTR,
    site_object_name : Win32cr::Foundation::PWSTR,
    computer_object_name : Win32cr::Foundation::PWSTR,
    server_object_name : Win32cr::Foundation::PWSTR,
    ntds_dsa_object_name : Win32cr::Foundation::PWSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL,
    fIsGc : Win32cr::Foundation::BOOL,
    site_object_guid : LibC::GUID,
    computer_object_guid : LibC::GUID,
    server_object_guid : LibC::GUID,
    ntds_dsa_object_guid : LibC::GUID

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_3A,
    netbios_name : Win32cr::Foundation::PSTR,
    dns_host_name : Win32cr::Foundation::PSTR,
    site_name : Win32cr::Foundation::PSTR,
    site_object_name : Win32cr::Foundation::PSTR,
    computer_object_name : Win32cr::Foundation::PSTR,
    server_object_name : Win32cr::Foundation::PSTR,
    ntds_dsa_object_name : Win32cr::Foundation::PSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL,
    fIsGc : Win32cr::Foundation::BOOL,
    fIsRodc : Win32cr::Foundation::BOOL,
    site_object_guid : LibC::GUID,
    computer_object_guid : LibC::GUID,
    server_object_guid : LibC::GUID,
    ntds_dsa_object_guid : LibC::GUID

  @[Extern]
  record DS_DOMAIN_CONTROLLER_INFO_3W,
    netbios_name : Win32cr::Foundation::PWSTR,
    dns_host_name : Win32cr::Foundation::PWSTR,
    site_name : Win32cr::Foundation::PWSTR,
    site_object_name : Win32cr::Foundation::PWSTR,
    computer_object_name : Win32cr::Foundation::PWSTR,
    server_object_name : Win32cr::Foundation::PWSTR,
    ntds_dsa_object_name : Win32cr::Foundation::PWSTR,
    fIsPdc : Win32cr::Foundation::BOOL,
    fDsEnabled : Win32cr::Foundation::BOOL,
    fIsGc : Win32cr::Foundation::BOOL,
    fIsRodc : Win32cr::Foundation::BOOL,
    site_object_guid : LibC::GUID,
    computer_object_guid : LibC::GUID,
    server_object_guid : LibC::GUID,
    ntds_dsa_object_guid : LibC::GUID

  @[Extern]
  record DS_REPL_NEIGHBORW,
    pszNamingContext : Win32cr::Foundation::PWSTR,
    pszSourceDsaDN : Win32cr::Foundation::PWSTR,
    pszSourceDsaAddress : Win32cr::Foundation::PWSTR,
    pszAsyncIntersiteTransportDN : Win32cr::Foundation::PWSTR,
    dwReplicaFlags : UInt32,
    dwReserved : UInt32,
    uuidNamingContextObjGuid : LibC::GUID,
    uuidSourceDsaObjGuid : LibC::GUID,
    uuidSourceDsaInvocationID : LibC::GUID,
    uuidAsyncIntersiteTransportObjGuid : LibC::GUID,
    usnLastObjChangeSynced : Int64,
    usnAttributeFilter : Int64,
    ftimeLastSyncSuccess : Win32cr::Foundation::FILETIME,
    ftimeLastSyncAttempt : Win32cr::Foundation::FILETIME,
    dwLastSyncResult : UInt32,
    cNumConsecutiveSyncFailures : UInt32

  @[Extern]
  record DS_REPL_NEIGHBORW_BLOB,
    oszNamingContext : UInt32,
    oszSourceDsaDN : UInt32,
    oszSourceDsaAddress : UInt32,
    oszAsyncIntersiteTransportDN : UInt32,
    dwReplicaFlags : UInt32,
    dwReserved : UInt32,
    uuidNamingContextObjGuid : LibC::GUID,
    uuidSourceDsaObjGuid : LibC::GUID,
    uuidSourceDsaInvocationID : LibC::GUID,
    uuidAsyncIntersiteTransportObjGuid : LibC::GUID,
    usnLastObjChangeSynced : Int64,
    usnAttributeFilter : Int64,
    ftimeLastSyncSuccess : Win32cr::Foundation::FILETIME,
    ftimeLastSyncAttempt : Win32cr::Foundation::FILETIME,
    dwLastSyncResult : UInt32,
    cNumConsecutiveSyncFailures : UInt32

  @[Extern]
  record DS_REPL_NEIGHBORSW,
    cNumNeighbors : UInt32,
    dwReserved : UInt32,
    rgNeighbor : Win32cr::Networking::ActiveDirectory::DS_REPL_NEIGHBORW*

  @[Extern]
  record DS_REPL_CURSOR,
    uuidSourceDsaInvocationID : LibC::GUID,
    usnAttributeFilter : Int64

  @[Extern]
  record DS_REPL_CURSOR_2,
    uuidSourceDsaInvocationID : LibC::GUID,
    usnAttributeFilter : Int64,
    ftimeLastSyncSuccess : Win32cr::Foundation::FILETIME

  @[Extern]
  record DS_REPL_CURSOR_3W,
    uuidSourceDsaInvocationID : LibC::GUID,
    usnAttributeFilter : Int64,
    ftimeLastSyncSuccess : Win32cr::Foundation::FILETIME,
    pszSourceDsaDN : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_REPL_CURSOR_BLOB,
    uuidSourceDsaInvocationID : LibC::GUID,
    usnAttributeFilter : Int64,
    ftimeLastSyncSuccess : Win32cr::Foundation::FILETIME,
    oszSourceDsaDN : UInt32

  @[Extern]
  record DS_REPL_CURSORS,
    cNumCursors : UInt32,
    dwReserved : UInt32,
    rgCursor : Win32cr::Networking::ActiveDirectory::DS_REPL_CURSOR*

  @[Extern]
  record DS_REPL_CURSORS_2,
    cNumCursors : UInt32,
    dwEnumerationContext : UInt32,
    rgCursor : Win32cr::Networking::ActiveDirectory::DS_REPL_CURSOR_2*

  @[Extern]
  record DS_REPL_CURSORS_3W,
    cNumCursors : UInt32,
    dwEnumerationContext : UInt32,
    rgCursor : Win32cr::Networking::ActiveDirectory::DS_REPL_CURSOR_3W*

  @[Extern]
  record DS_REPL_ATTR_META_DATA,
    pszAttributeName : Win32cr::Foundation::PWSTR,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64

  @[Extern]
  record DS_REPL_ATTR_META_DATA_2,
    pszAttributeName : Win32cr::Foundation::PWSTR,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    pszLastOriginatingDsaDN : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_REPL_ATTR_META_DATA_BLOB,
    oszAttributeName : UInt32,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    oszLastOriginatingDsaDN : UInt32

  @[Extern]
  record DS_REPL_OBJ_META_DATA,
    cNumEntries : UInt32,
    dwReserved : UInt32,
    rgMetaData : Win32cr::Networking::ActiveDirectory::DS_REPL_ATTR_META_DATA*

  @[Extern]
  record DS_REPL_OBJ_META_DATA_2,
    cNumEntries : UInt32,
    dwReserved : UInt32,
    rgMetaData : Win32cr::Networking::ActiveDirectory::DS_REPL_ATTR_META_DATA_2*

  @[Extern]
  record DS_REPL_KCC_DSA_FAILUREW,
    pszDsaDN : Win32cr::Foundation::PWSTR,
    uuidDsaObjGuid : LibC::GUID,
    ftimeFirstFailure : Win32cr::Foundation::FILETIME,
    cNumFailures : UInt32,
    dwLastResult : UInt32

  @[Extern]
  record DS_REPL_KCC_DSA_FAILUREW_BLOB,
    oszDsaDN : UInt32,
    uuidDsaObjGuid : LibC::GUID,
    ftimeFirstFailure : Win32cr::Foundation::FILETIME,
    cNumFailures : UInt32,
    dwLastResult : UInt32

  @[Extern]
  record DS_REPL_KCC_DSA_FAILURESW,
    cNumEntries : UInt32,
    dwReserved : UInt32,
    rgDsaFailure : Win32cr::Networking::ActiveDirectory::DS_REPL_KCC_DSA_FAILUREW*

  @[Extern]
  record DS_REPL_OPW,
    ftimeEnqueued : Win32cr::Foundation::FILETIME,
    ulSerialNumber : UInt32,
    ulPriority : UInt32,
    op_type : Win32cr::Networking::ActiveDirectory::DS_REPL_OP_TYPE,
    ulOptions : UInt32,
    pszNamingContext : Win32cr::Foundation::PWSTR,
    pszDsaDN : Win32cr::Foundation::PWSTR,
    pszDsaAddress : Win32cr::Foundation::PWSTR,
    uuidNamingContextObjGuid : LibC::GUID,
    uuidDsaObjGuid : LibC::GUID

  @[Extern]
  record DS_REPL_OPW_BLOB,
    ftimeEnqueued : Win32cr::Foundation::FILETIME,
    ulSerialNumber : UInt32,
    ulPriority : UInt32,
    op_type : Win32cr::Networking::ActiveDirectory::DS_REPL_OP_TYPE,
    ulOptions : UInt32,
    oszNamingContext : UInt32,
    oszDsaDN : UInt32,
    oszDsaAddress : UInt32,
    uuidNamingContextObjGuid : LibC::GUID,
    uuidDsaObjGuid : LibC::GUID

  @[Extern]
  record DS_REPL_PENDING_OPSW,
    ftimeCurrentOpStarted : Win32cr::Foundation::FILETIME,
    cNumPendingOps : UInt32,
    rgPendingOp : Win32cr::Networking::ActiveDirectory::DS_REPL_OPW*

  @[Extern]
  record DS_REPL_VALUE_META_DATA,
    pszAttributeName : Win32cr::Foundation::PWSTR,
    pszObjectDn : Win32cr::Foundation::PWSTR,
    cbData : UInt32,
    pbData : UInt8*,
    ftimeDeleted : Win32cr::Foundation::FILETIME,
    ftimeCreated : Win32cr::Foundation::FILETIME,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64

  @[Extern]
  record DS_REPL_VALUE_META_DATA_2,
    pszAttributeName : Win32cr::Foundation::PWSTR,
    pszObjectDn : Win32cr::Foundation::PWSTR,
    cbData : UInt32,
    pbData : UInt8*,
    ftimeDeleted : Win32cr::Foundation::FILETIME,
    ftimeCreated : Win32cr::Foundation::FILETIME,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    pszLastOriginatingDsaDN : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_REPL_VALUE_META_DATA_EXT,
    pszAttributeName : Win32cr::Foundation::PWSTR,
    pszObjectDn : Win32cr::Foundation::PWSTR,
    cbData : UInt32,
    pbData : UInt8*,
    ftimeDeleted : Win32cr::Foundation::FILETIME,
    ftimeCreated : Win32cr::Foundation::FILETIME,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    pszLastOriginatingDsaDN : Win32cr::Foundation::PWSTR,
    dwUserIdentifier : UInt32,
    dwPriorLinkState : UInt32,
    dwCurrentLinkState : UInt32

  @[Extern]
  record DS_REPL_VALUE_META_DATA_BLOB,
    oszAttributeName : UInt32,
    oszObjectDn : UInt32,
    cbData : UInt32,
    obData : UInt32,
    ftimeDeleted : Win32cr::Foundation::FILETIME,
    ftimeCreated : Win32cr::Foundation::FILETIME,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    oszLastOriginatingDsaDN : UInt32

  @[Extern]
  record DS_REPL_VALUE_META_DATA_BLOB_EXT,
    oszAttributeName : UInt32,
    oszObjectDn : UInt32,
    cbData : UInt32,
    obData : UInt32,
    ftimeDeleted : Win32cr::Foundation::FILETIME,
    ftimeCreated : Win32cr::Foundation::FILETIME,
    dwVersion : UInt32,
    ftimeLastOriginatingChange : Win32cr::Foundation::FILETIME,
    uuidLastOriginatingDsaInvocationID : LibC::GUID,
    usnOriginatingChange : Int64,
    usnLocalChange : Int64,
    oszLastOriginatingDsaDN : UInt32,
    dwUserIdentifier : UInt32,
    dwPriorLinkState : UInt32,
    dwCurrentLinkState : UInt32

  @[Extern]
  record DS_REPL_ATTR_VALUE_META_DATA,
    cNumEntries : UInt32,
    dwEnumerationContext : UInt32,
    rgMetaData : Win32cr::Networking::ActiveDirectory::DS_REPL_VALUE_META_DATA*

  @[Extern]
  record DS_REPL_ATTR_VALUE_META_DATA_2,
    cNumEntries : UInt32,
    dwEnumerationContext : UInt32,
    rgMetaData : Win32cr::Networking::ActiveDirectory::DS_REPL_VALUE_META_DATA_2*

  @[Extern]
  record DS_REPL_ATTR_VALUE_META_DATA_EXT,
    cNumEntries : UInt32,
    dwEnumerationContext : UInt32,
    rgMetaData : Win32cr::Networking::ActiveDirectory::DS_REPL_VALUE_META_DATA_EXT*

  @[Extern]
  record DS_REPL_QUEUE_STATISTICSW,
    ftimeCurrentOpStarted : Win32cr::Foundation::FILETIME,
    cNumPendingOps : UInt32,
    ftimeOldestSync : Win32cr::Foundation::FILETIME,
    ftimeOldestAdd : Win32cr::Foundation::FILETIME,
    ftimeOldestMod : Win32cr::Foundation::FILETIME,
    ftimeOldestDel : Win32cr::Foundation::FILETIME,
    ftimeOldestUpdRefs : Win32cr::Foundation::FILETIME

  @[Extern]
  record DSROLE_PRIMARY_DOMAIN_INFO_BASIC,
    machine_role : Win32cr::Networking::ActiveDirectory::DSROLE_MACHINE_ROLE,
    flags : UInt32,
    domain_name_flat : Win32cr::Foundation::PWSTR,
    domain_name_dns : Win32cr::Foundation::PWSTR,
    domain_forest_name : Win32cr::Foundation::PWSTR,
    domain_guid : LibC::GUID

  @[Extern]
  record DSROLE_UPGRADE_STATUS_INFO,
    operation_state : UInt32,
    previous_server_state : Win32cr::Networking::ActiveDirectory::DSROLE_SERVER_STATE

  @[Extern]
  record DSROLE_OPERATION_STATE_INFO,
    operation_state : Win32cr::Networking::ActiveDirectory::DSROLE_OPERATION_STATE

  @[Extern]
  record DOMAIN_CONTROLLER_INFOA,
    domain_controller_name : Win32cr::Foundation::PSTR,
    domain_controller_address : Win32cr::Foundation::PSTR,
    domain_controller_address_type : UInt32,
    domain_guid : LibC::GUID,
    domain_name : Win32cr::Foundation::PSTR,
    dns_forest_name : Win32cr::Foundation::PSTR,
    flags : UInt32,
    dc_site_name : Win32cr::Foundation::PSTR,
    client_site_name : Win32cr::Foundation::PSTR

  @[Extern]
  record DOMAIN_CONTROLLER_INFOW,
    domain_controller_name : Win32cr::Foundation::PWSTR,
    domain_controller_address : Win32cr::Foundation::PWSTR,
    domain_controller_address_type : UInt32,
    domain_guid : LibC::GUID,
    domain_name : Win32cr::Foundation::PWSTR,
    dns_forest_name : Win32cr::Foundation::PWSTR,
    flags : UInt32,
    dc_site_name : Win32cr::Foundation::PWSTR,
    client_site_name : Win32cr::Foundation::PWSTR

  @[Extern]
  record DS_DOMAIN_TRUSTSW,
    netbios_domain_name : Win32cr::Foundation::PWSTR,
    dns_domain_name : Win32cr::Foundation::PWSTR,
    flags : UInt32,
    parent_index : UInt32,
    trust_type : UInt32,
    trust_attributes : UInt32,
    domain_sid : Win32cr::Foundation::PSID,
    domain_guid : LibC::GUID

  @[Extern]
  record DS_DOMAIN_TRUSTSA,
    netbios_domain_name : Win32cr::Foundation::PSTR,
    dns_domain_name : Win32cr::Foundation::PSTR,
    flags : UInt32,
    parent_index : UInt32,
    trust_type : UInt32,
    trust_attributes : UInt32,
    domain_sid : Win32cr::Foundation::PSID,
    domain_guid : LibC::GUID

  @[Extern]
  record IQueryFormVtbl,
    query_interface : Proc(IQueryForm*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQueryForm*, UInt32),
    release : Proc(IQueryForm*, UInt32),
    initialize__ : Proc(IQueryForm*, Win32cr::System::Registry::HKEY, Win32cr::Foundation::HRESULT),
    add_forms : Proc(IQueryForm*, Win32cr::Networking::ActiveDirectory::LPCQADDFORMSPROC, Win32cr::Foundation::LPARAM, Win32cr::Foundation::HRESULT),
    add_pages : Proc(IQueryForm*, Win32cr::Networking::ActiveDirectory::LPCQADDPAGESPROC, Win32cr::Foundation::LPARAM, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8cfcee30-39bd-11d0-b8d1-00a024ab2dbb")]
  record IQueryForm, lpVtbl : IQueryFormVtbl* do
    GUID = LibC::GUID.new(0x8cfcee30_u32, 0x39bd_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0xd1_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0xab_u8, 0x2d_u8, 0xbb_u8])
    def query_interface(this : IQueryForm*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQueryForm*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQueryForm*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IQueryForm*, hkForm : Win32cr::System::Registry::HKEY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, hkForm)
    end
    def add_forms(this : IQueryForm*, pAddFormsProc : Win32cr::Networking::ActiveDirectory::LPCQADDFORMSPROC, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_forms.call(this, pAddFormsProc, lParam)
    end
    def add_pages(this : IQueryForm*, pAddPagesProc : Win32cr::Networking::ActiveDirectory::LPCQADDPAGESPROC, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_pages.call(this, pAddPagesProc, lParam)
    end

  end

  @[Extern]
  record IPersistQueryVtbl,
    query_interface : Proc(IPersistQuery*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistQuery*, UInt32),
    release : Proc(IPersistQuery*, UInt32),
    get_class_id : Proc(IPersistQuery*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    write_string : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    read_string : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    write_int : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    read_int : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::HRESULT),
    write_struct : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::HRESULT),
    read_struct : Proc(IPersistQuery*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void*, UInt32, Win32cr::Foundation::HRESULT),
    clear : Proc(IPersistQuery*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1a3114b8-a62e-11d0-a6c5-00a0c906af45")]
  record IPersistQuery, lpVtbl : IPersistQueryVtbl* do
    GUID = LibC::GUID.new(0x1a3114b8_u32, 0xa62e_u16, 0x11d0_u16, StaticArray[0xa6_u8, 0xc5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x6_u8, 0xaf_u8, 0x45_u8])
    def query_interface(this : IPersistQuery*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistQuery*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistQuery*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IPersistQuery*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def write_string(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, pValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_string.call(this, pSection, pValueName, pValue)
    end
    def read_string(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, pBuffer : Win32cr::Foundation::PWSTR, cchBuffer : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_string.call(this, pSection, pValueName, pBuffer, cchBuffer)
    end
    def write_int(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_int.call(this, pSection, pValueName, value)
    end
    def read_int(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_int.call(this, pSection, pValueName, pValue)
    end
    def write_struct(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, pStruct : Void*, cbStruct : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_struct.call(this, pSection, pValueName, pStruct, cbStruct)
    end
    def read_struct(this : IPersistQuery*, pSection : Win32cr::Foundation::PWSTR, pValueName : Win32cr::Foundation::PWSTR, pStruct : Void*, cbStruct : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_struct.call(this, pSection, pValueName, pStruct, cbStruct)
    end
    def clear(this : IPersistQuery*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record ICommonQueryVtbl,
    query_interface : Proc(ICommonQuery*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICommonQuery*, UInt32),
    release : Proc(ICommonQuery*, UInt32),
    open_query_window : Proc(ICommonQuery*, Win32cr::Foundation::HWND, Win32cr::Networking::ActiveDirectory::OPENQUERYWINDOW*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab50dec0-6f1d-11d0-a1c4-00aa00c16e65")]
  record ICommonQuery, lpVtbl : ICommonQueryVtbl* do
    GUID = LibC::GUID.new(0xab50dec0_u32, 0x6f1d_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0xc4_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xc1_u8, 0x6e_u8, 0x65_u8])
    def query_interface(this : ICommonQuery*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICommonQuery*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICommonQuery*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_query_window(this : ICommonQuery*, hwndParent : Win32cr::Foundation::HWND, pQueryWnd : Win32cr::Networking::ActiveDirectory::OPENQUERYWINDOW*, ppDataObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_query_window.call(this, hwndParent, pQueryWnd, ppDataObject)
    end

  end

  @[Extern]
  record IADsVtbl,
    query_interface : Proc(IADs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADs*, UInt32),
    release : Proc(IADs*, UInt32),
    get_type_info_count : Proc(IADs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADs*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADs*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADs*, Win32cr::Foundation::HRESULT),
    get : Proc(IADs*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADs*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADs*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADs*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADs*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fd8256d0-fd15-11ce-abc4-02608c9e7553")]
  record IADs, lpVtbl : IADsVtbl* do
    GUID = LibC::GUID.new(0xfd8256d0_u32, 0xfd15_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADs*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADs*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADs*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADs*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADs*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADs*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADs*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADs*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end

  end

  @[Extern]
  record IADsContainerVtbl,
    query_interface : Proc(IADsContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsContainer*, UInt32),
    release : Proc(IADsContainer*, UInt32),
    get_type_info_count : Proc(IADsContainer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsContainer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsContainer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsContainer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IADsContainer*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IADsContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Filter : Proc(IADsContainer*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Filter : Proc(IADsContainer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Hints : Proc(IADsContainer*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Hints : Proc(IADsContainer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_object : Proc(IADsContainer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create : Proc(IADsContainer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IADsContainer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    copy_here : Proc(IADsContainer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    move_here : Proc(IADsContainer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("001677d0-fd16-11ce-abc4-02608c9e7553")]
  record IADsContainer, lpVtbl : IADsContainerVtbl* do
    GUID = LibC::GUID.new(0x1677d0_u32, 0xfd16_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsContainer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsContainer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsContainer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsContainer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IADsContainer*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, retval)
    end
    def get__NewEnum(this : IADsContainer*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, retval)
    end
    def get_Filter(this : IADsContainer*, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Filter.call(this, pVar)
    end
    def put_Filter(this : IADsContainer*, var : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Filter.call(this, var)
    end
    def get_Hints(this : IADsContainer*, pvFilter : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Hints.call(this, pvFilter)
    end
    def put_Hints(this : IADsContainer*, vHints : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Hints.call(this, vHints)
    end
    def get_object(this : IADsContainer*, class_name : Win32cr::Foundation::BSTR, relative_name : Win32cr::Foundation::BSTR, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, class_name, relative_name, ppObject)
    end
    def create(this : IADsContainer*, class_name : Win32cr::Foundation::BSTR, relative_name : Win32cr::Foundation::BSTR, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this, class_name, relative_name, ppObject)
    end
    def delete(this : IADsContainer*, bstrClassName : Win32cr::Foundation::BSTR, bstrRelativeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, bstrClassName, bstrRelativeName)
    end
    def copy_here(this : IADsContainer*, source_name : Win32cr::Foundation::BSTR, new_name : Win32cr::Foundation::BSTR, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_here.call(this, source_name, new_name, ppObject)
    end
    def move_here(this : IADsContainer*, source_name : Win32cr::Foundation::BSTR, new_name : Win32cr::Foundation::BSTR, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move_here.call(this, source_name, new_name, ppObject)
    end

  end

  @[Extern]
  record IADsCollectionVtbl,
    query_interface : Proc(IADsCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsCollection*, UInt32),
    release : Proc(IADsCollection*, UInt32),
    get_type_info_count : Proc(IADsCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IADsCollection*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IADsCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    remove : Proc(IADsCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_object : Proc(IADsCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("72b945e0-253b-11cf-a988-00aa006bc149")]
  record IADsCollection, lpVtbl : IADsCollectionVtbl* do
    GUID = LibC::GUID.new(0x72b945e0_u32, 0x253b_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IADsCollection*, ppEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppEnumerator)
    end
    def add(this : IADsCollection*, bstrName : Win32cr::Foundation::BSTR, vItem : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, bstrName, vItem)
    end
    def remove(this : IADsCollection*, bstrItemToBeRemoved : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, bstrItemToBeRemoved)
    end
    def get_object(this : IADsCollection*, bstrName : Win32cr::Foundation::BSTR, pvItem : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, bstrName, pvItem)
    end

  end

  @[Extern]
  record IADsMembersVtbl,
    query_interface : Proc(IADsMembers*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsMembers*, UInt32),
    release : Proc(IADsMembers*, UInt32),
    get_type_info_count : Proc(IADsMembers*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsMembers*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsMembers*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsMembers*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IADsMembers*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IADsMembers*, Void**, Win32cr::Foundation::HRESULT),
    get_Filter : Proc(IADsMembers*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Filter : Proc(IADsMembers*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("451a0030-72ec-11cf-b03b-00aa006e0975")]
  record IADsMembers, lpVtbl : IADsMembersVtbl* do
    GUID = LibC::GUID.new(0x451a0030_u32, 0x72ec_u16, 0x11cf_u16, StaticArray[0xb0_u8, 0x3b_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0x9_u8, 0x75_u8])
    def query_interface(this : IADsMembers*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsMembers*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsMembers*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsMembers*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsMembers*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsMembers*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsMembers*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IADsMembers*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, plCount)
    end
    def get__NewEnum(this : IADsMembers*, ppEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppEnumerator)
    end
    def get_Filter(this : IADsMembers*, pvFilter : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Filter.call(this, pvFilter)
    end
    def put_Filter(this : IADsMembers*, pvFilter : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Filter.call(this, pvFilter)
    end

  end

  @[Extern]
  record IADsPropertyListVtbl,
    query_interface : Proc(IADsPropertyList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPropertyList*, UInt32),
    release : Proc(IADsPropertyList*, UInt32),
    get_type_info_count : Proc(IADsPropertyList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPropertyList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPropertyList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPropertyList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PropertyCount : Proc(IADsPropertyList*, Int32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IADsPropertyList*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    skip : Proc(IADsPropertyList*, Int32, Win32cr::Foundation::HRESULT),
    reset : Proc(IADsPropertyList*, Win32cr::Foundation::HRESULT),
    item : Proc(IADsPropertyList*, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_property_item : Proc(IADsPropertyList*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_property_item : Proc(IADsPropertyList*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    reset_property_item : Proc(IADsPropertyList*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    purge_property_list : Proc(IADsPropertyList*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6f602b6-8f69-11d0-8528-00c04fd8d503")]
  record IADsPropertyList, lpVtbl : IADsPropertyListVtbl* do
    GUID = LibC::GUID.new(0xc6f602b6_u32, 0x8f69_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x28_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsPropertyList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPropertyList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPropertyList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPropertyList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPropertyList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPropertyList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPropertyList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_PropertyCount(this : IADsPropertyList*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyCount.call(this, plCount)
    end
    def next__(this : IADsPropertyList*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pVariant)
    end
    def skip(this : IADsPropertyList*, cElements : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cElements)
    end
    def reset(this : IADsPropertyList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def item(this : IADsPropertyList*, varIndex : Win32cr::System::Com::VARIANT, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, varIndex, pVariant)
    end
    def get_property_item(this : IADsPropertyList*, bstrName : Win32cr::Foundation::BSTR, lnADsType : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_item.call(this, bstrName, lnADsType, pVariant)
    end
    def put_property_item(this : IADsPropertyList*, varData : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_property_item.call(this, varData)
    end
    def reset_property_item(this : IADsPropertyList*, varEntry : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_property_item.call(this, varEntry)
    end
    def purge_property_list(this : IADsPropertyList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.purge_property_list.call(this)
    end

  end

  @[Extern]
  record IADsPropertyEntryVtbl,
    query_interface : Proc(IADsPropertyEntry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPropertyEntry*, UInt32),
    release : Proc(IADsPropertyEntry*, UInt32),
    get_type_info_count : Proc(IADsPropertyEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPropertyEntry*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPropertyEntry*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPropertyEntry*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    clear : Proc(IADsPropertyEntry*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsPropertyEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Name : Proc(IADsPropertyEntry*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ADsType : Proc(IADsPropertyEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_ADsType : Proc(IADsPropertyEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_ControlCode : Proc(IADsPropertyEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_ControlCode : Proc(IADsPropertyEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_Values : Proc(IADsPropertyEntry*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Values : Proc(IADsPropertyEntry*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("05792c8e-941f-11d0-8529-00c04fd8d503")]
  record IADsPropertyEntry, lpVtbl : IADsPropertyEntryVtbl* do
    GUID = LibC::GUID.new(0x5792c8e_u32, 0x941f_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x29_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsPropertyEntry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPropertyEntry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPropertyEntry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPropertyEntry*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPropertyEntry*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPropertyEntry*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPropertyEntry*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def clear(this : IADsPropertyEntry*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_Name(this : IADsPropertyEntry*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def put_Name(this : IADsPropertyEntry*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Name.call(this, bstrName)
    end
    def get_ADsType(this : IADsPropertyEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsType.call(this, retval)
    end
    def put_ADsType(this : IADsPropertyEntry*, lnADsType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ADsType.call(this, lnADsType)
    end
    def get_ControlCode(this : IADsPropertyEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ControlCode.call(this, retval)
    end
    def put_ControlCode(this : IADsPropertyEntry*, lnControlCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ControlCode.call(this, lnControlCode)
    end
    def get_Values(this : IADsPropertyEntry*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Values.call(this, retval)
    end
    def put_Values(this : IADsPropertyEntry*, vValues : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Values.call(this, vValues)
    end

  end

  @[Extern]
  record IADsPropertyValueVtbl,
    query_interface : Proc(IADsPropertyValue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPropertyValue*, UInt32),
    release : Proc(IADsPropertyValue*, UInt32),
    get_type_info_count : Proc(IADsPropertyValue*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPropertyValue*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPropertyValue*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPropertyValue*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    clear : Proc(IADsPropertyValue*, Win32cr::Foundation::HRESULT),
    get_ADsType : Proc(IADsPropertyValue*, Int32*, Win32cr::Foundation::HRESULT),
    put_ADsType : Proc(IADsPropertyValue*, Int32, Win32cr::Foundation::HRESULT),
    get_DNString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DNString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CaseExactString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CaseExactString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CaseIgnoreString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CaseIgnoreString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PrintableString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PrintableString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NumericString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NumericString : Proc(IADsPropertyValue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Boolean : Proc(IADsPropertyValue*, Int32*, Win32cr::Foundation::HRESULT),
    put_Boolean : Proc(IADsPropertyValue*, Int32, Win32cr::Foundation::HRESULT),
    get_Integer : Proc(IADsPropertyValue*, Int32*, Win32cr::Foundation::HRESULT),
    put_Integer : Proc(IADsPropertyValue*, Int32, Win32cr::Foundation::HRESULT),
    get_OctetString : Proc(IADsPropertyValue*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_OctetString : Proc(IADsPropertyValue*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_SecurityDescriptor : Proc(IADsPropertyValue*, Void**, Win32cr::Foundation::HRESULT),
    put_SecurityDescriptor : Proc(IADsPropertyValue*, Void*, Win32cr::Foundation::HRESULT),
    get_LargeInteger : Proc(IADsPropertyValue*, Void**, Win32cr::Foundation::HRESULT),
    put_LargeInteger : Proc(IADsPropertyValue*, Void*, Win32cr::Foundation::HRESULT),
    get_UTCTime : Proc(IADsPropertyValue*, Float64*, Win32cr::Foundation::HRESULT),
    put_UTCTime : Proc(IADsPropertyValue*, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("79fa9ad0-a97c-11d0-8534-00c04fd8d503")]
  record IADsPropertyValue, lpVtbl : IADsPropertyValueVtbl* do
    GUID = LibC::GUID.new(0x79fa9ad0_u32, 0xa97c_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsPropertyValue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPropertyValue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPropertyValue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPropertyValue*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPropertyValue*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPropertyValue*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPropertyValue*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def clear(this : IADsPropertyValue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_ADsType(this : IADsPropertyValue*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsType.call(this, retval)
    end
    def put_ADsType(this : IADsPropertyValue*, lnADsType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ADsType.call(this, lnADsType)
    end
    def get_DNString(this : IADsPropertyValue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DNString.call(this, retval)
    end
    def put_DNString(this : IADsPropertyValue*, bstrDNString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DNString.call(this, bstrDNString)
    end
    def get_CaseExactString(this : IADsPropertyValue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CaseExactString.call(this, retval)
    end
    def put_CaseExactString(this : IADsPropertyValue*, bstrCaseExactString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CaseExactString.call(this, bstrCaseExactString)
    end
    def get_CaseIgnoreString(this : IADsPropertyValue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CaseIgnoreString.call(this, retval)
    end
    def put_CaseIgnoreString(this : IADsPropertyValue*, bstrCaseIgnoreString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CaseIgnoreString.call(this, bstrCaseIgnoreString)
    end
    def get_PrintableString(this : IADsPropertyValue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrintableString.call(this, retval)
    end
    def put_PrintableString(this : IADsPropertyValue*, bstrPrintableString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrintableString.call(this, bstrPrintableString)
    end
    def get_NumericString(this : IADsPropertyValue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumericString.call(this, retval)
    end
    def put_NumericString(this : IADsPropertyValue*, bstrNumericString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NumericString.call(this, bstrNumericString)
    end
    def get_Boolean(this : IADsPropertyValue*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Boolean.call(this, retval)
    end
    def put_Boolean(this : IADsPropertyValue*, lnBoolean : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Boolean.call(this, lnBoolean)
    end
    def get_Integer(this : IADsPropertyValue*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Integer.call(this, retval)
    end
    def put_Integer(this : IADsPropertyValue*, lnInteger : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Integer.call(this, lnInteger)
    end
    def get_OctetString(this : IADsPropertyValue*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OctetString.call(this, retval)
    end
    def put_OctetString(this : IADsPropertyValue*, vOctetString : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OctetString.call(this, vOctetString)
    end
    def get_SecurityDescriptor(this : IADsPropertyValue*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SecurityDescriptor.call(this, retval)
    end
    def put_SecurityDescriptor(this : IADsPropertyValue*, pSecurityDescriptor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SecurityDescriptor.call(this, pSecurityDescriptor)
    end
    def get_LargeInteger(this : IADsPropertyValue*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LargeInteger.call(this, retval)
    end
    def put_LargeInteger(this : IADsPropertyValue*, pLargeInteger : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LargeInteger.call(this, pLargeInteger)
    end
    def get_UTCTime(this : IADsPropertyValue*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UTCTime.call(this, retval)
    end
    def put_UTCTime(this : IADsPropertyValue*, daUTCTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UTCTime.call(this, daUTCTime)
    end

  end

  @[Extern]
  record IADsPropertyValue2Vtbl,
    query_interface : Proc(IADsPropertyValue2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPropertyValue2*, UInt32),
    release : Proc(IADsPropertyValue2*, UInt32),
    get_type_info_count : Proc(IADsPropertyValue2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPropertyValue2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPropertyValue2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPropertyValue2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_object_property : Proc(IADsPropertyValue2*, Int32*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_object_property : Proc(IADsPropertyValue2*, Int32, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("306e831c-5bc7-11d1-a3b8-00c04fb950dc")]
  record IADsPropertyValue2, lpVtbl : IADsPropertyValue2Vtbl* do
    GUID = LibC::GUID.new(0x306e831c_u32, 0x5bc7_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsPropertyValue2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPropertyValue2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPropertyValue2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPropertyValue2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPropertyValue2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPropertyValue2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPropertyValue2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_object_property(this : IADsPropertyValue2*, lnADsType : Int32*, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_property.call(this, lnADsType, pvProp)
    end
    def put_object_property(this : IADsPropertyValue2*, lnADsType : Int32, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_object_property.call(this, lnADsType, vProp)
    end

  end

  @[Extern]
  record IPrivateDispatchVtbl,
    query_interface : Proc(IPrivateDispatch*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPrivateDispatch*, UInt32),
    release : Proc(IPrivateDispatch*, UInt32),
    adsi_initialize_dispatch_manager : Proc(IPrivateDispatch*, Int32, Win32cr::Foundation::HRESULT),
    adsi_get_type_info_count : Proc(IPrivateDispatch*, UInt32*, Win32cr::Foundation::HRESULT),
    adsi_get_type_info : Proc(IPrivateDispatch*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    adsi_get_i_ds_of_names : Proc(IPrivateDispatch*, LibC::GUID*, UInt16**, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    adsi_invoke : Proc(IPrivateDispatch*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("86ab4bbe-65f6-11d1-8c13-00c04fd8d503")]
  record IPrivateDispatch, lpVtbl : IPrivateDispatchVtbl* do
    GUID = LibC::GUID.new(0x86ab4bbe_u32, 0x65f6_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x13_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IPrivateDispatch*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPrivateDispatch*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPrivateDispatch*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def adsi_initialize_dispatch_manager(this : IPrivateDispatch*, dwExtensionId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_initialize_dispatch_manager.call(this, dwExtensionId)
    end
    def adsi_get_type_info_count(this : IPrivateDispatch*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_get_type_info_count.call(this, pctinfo)
    end
    def adsi_get_type_info(this : IPrivateDispatch*, itinfo : UInt32, lcid : UInt32, pptinfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_get_type_info.call(this, itinfo, lcid, pptinfo)
    end
    def adsi_get_i_ds_of_names(this : IPrivateDispatch*, riid : LibC::GUID*, rgszNames : UInt16**, cNames : UInt32, lcid : UInt32, rgdispid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgdispid)
    end
    def adsi_invoke(this : IPrivateDispatch*, dispidMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pdispparams : Win32cr::System::Com::DISPPARAMS*, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_invoke.call(this, dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr)
    end

  end

  @[Extern]
  record IPrivateUnknownVtbl,
    query_interface : Proc(IPrivateUnknown*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPrivateUnknown*, UInt32),
    release : Proc(IPrivateUnknown*, UInt32),
    adsi_initialize_object : Proc(IPrivateUnknown*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    adsi_release_object : Proc(IPrivateUnknown*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("89126bab-6ead-11d1-8c18-00c04fd8d503")]
  record IPrivateUnknown, lpVtbl : IPrivateUnknownVtbl* do
    GUID = LibC::GUID.new(0x89126bab_u32, 0x6ead_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x18_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IPrivateUnknown*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPrivateUnknown*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPrivateUnknown*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def adsi_initialize_object(this : IPrivateUnknown*, lpszUserName : Win32cr::Foundation::BSTR, lpszPassword : Win32cr::Foundation::BSTR, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_initialize_object.call(this, lpszUserName, lpszPassword, lnReserved)
    end
    def adsi_release_object(this : IPrivateUnknown*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.adsi_release_object.call(this)
    end

  end

  @[Extern]
  record IADsExtensionVtbl,
    query_interface : Proc(IADsExtension*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsExtension*, UInt32),
    release : Proc(IADsExtension*, UInt32),
    operate : Proc(IADsExtension*, UInt32, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    private_get_i_ds_of_names : Proc(IADsExtension*, LibC::GUID*, UInt16**, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    private_invoke : Proc(IADsExtension*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3d35553c-d2b0-11d1-b17b-0000f87593a0")]
  record IADsExtension, lpVtbl : IADsExtensionVtbl* do
    GUID = LibC::GUID.new(0x3d35553c_u32, 0xd2b0_u16, 0x11d1_u16, StaticArray[0xb1_u8, 0x7b_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x75_u8, 0x93_u8, 0xa0_u8])
    def query_interface(this : IADsExtension*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsExtension*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsExtension*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def operate(this : IADsExtension*, dwCode : UInt32, varData1 : Win32cr::System::Com::VARIANT, varData2 : Win32cr::System::Com::VARIANT, varData3 : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.operate.call(this, dwCode, varData1, varData2, varData3)
    end
    def private_get_i_ds_of_names(this : IADsExtension*, riid : LibC::GUID*, rgszNames : UInt16**, cNames : UInt32, lcid : UInt32, rgDispid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.private_get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispid)
    end
    def private_invoke(this : IADsExtension*, dispidMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pdispparams : Win32cr::System::Com::DISPPARAMS*, pvarResult : Win32cr::System::Com::VARIANT*, pexcepinfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.private_invoke.call(this, dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr)
    end

  end

  @[Extern]
  record IADsDeleteOpsVtbl,
    query_interface : Proc(IADsDeleteOps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsDeleteOps*, UInt32),
    release : Proc(IADsDeleteOps*, UInt32),
    get_type_info_count : Proc(IADsDeleteOps*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsDeleteOps*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsDeleteOps*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsDeleteOps*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    delete_object : Proc(IADsDeleteOps*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b2bd0902-8878-11d1-8c21-00c04fd8d503")]
  record IADsDeleteOps, lpVtbl : IADsDeleteOpsVtbl* do
    GUID = LibC::GUID.new(0xb2bd0902_u32, 0x8878_u16, 0x11d1_u16, StaticArray[0x8c_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsDeleteOps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsDeleteOps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsDeleteOps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsDeleteOps*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsDeleteOps*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsDeleteOps*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsDeleteOps*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def delete_object(this : IADsDeleteOps*, lnFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_object.call(this, lnFlags)
    end

  end

  @[Extern]
  record IADsNamespacesVtbl,
    query_interface : Proc(IADsNamespaces*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsNamespaces*, UInt32),
    release : Proc(IADsNamespaces*, UInt32),
    get_type_info_count : Proc(IADsNamespaces*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsNamespaces*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsNamespaces*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsNamespaces*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsNamespaces*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsNamespaces*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsNamespaces*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsNamespaces*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_DefaultContainer : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DefaultContainer : Proc(IADsNamespaces*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("28b96ba0-b330-11cf-a9ad-00aa006bc149")]
  record IADsNamespaces, lpVtbl : IADsNamespacesVtbl* do
    GUID = LibC::GUID.new(0x28b96ba0_u32, 0xb330_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0xad_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsNamespaces*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsNamespaces*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsNamespaces*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsNamespaces*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsNamespaces*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsNamespaces*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsNamespaces*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsNamespaces*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsNamespaces*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsNamespaces*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsNamespaces*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsNamespaces*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsNamespaces*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsNamespaces*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_DefaultContainer(this : IADsNamespaces*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultContainer.call(this, retval)
    end
    def put_DefaultContainer(this : IADsNamespaces*, bstrDefaultContainer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultContainer.call(this, bstrDefaultContainer)
    end

  end

  @[Extern]
  record IADsClassVtbl,
    query_interface : Proc(IADsClass*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsClass*, UInt32),
    release : Proc(IADsClass*, UInt32),
    get_type_info_count : Proc(IADsClass*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsClass*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsClass*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsClass*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsClass*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsClass*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsClass*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_PrimaryInterface : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CLSID : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OID : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_OID : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Abstract : Proc(IADsClass*, Int16*, Win32cr::Foundation::HRESULT),
    put_Abstract : Proc(IADsClass*, Int16, Win32cr::Foundation::HRESULT),
    get_Auxiliary : Proc(IADsClass*, Int16*, Win32cr::Foundation::HRESULT),
    put_Auxiliary : Proc(IADsClass*, Int16, Win32cr::Foundation::HRESULT),
    get_MandatoryProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_MandatoryProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_OptionalProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_OptionalProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_NamingProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_NamingProperties : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_DerivedFrom : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_DerivedFrom : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_AuxDerivedFrom : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_AuxDerivedFrom : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_PossibleSuperiors : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_PossibleSuperiors : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Containment : Proc(IADsClass*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Containment : Proc(IADsClass*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Container : Proc(IADsClass*, Int16*, Win32cr::Foundation::HRESULT),
    put_Container : Proc(IADsClass*, Int16, Win32cr::Foundation::HRESULT),
    get_HelpFileName : Proc(IADsClass*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HelpFileName : Proc(IADsClass*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HelpFileContext : Proc(IADsClass*, Int32*, Win32cr::Foundation::HRESULT),
    put_HelpFileContext : Proc(IADsClass*, Int32, Win32cr::Foundation::HRESULT),
    qualifiers : Proc(IADsClass*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8f93dd0-4ae0-11cf-9e73-00aa004a5691")]
  record IADsClass, lpVtbl : IADsClassVtbl* do
    GUID = LibC::GUID.new(0xc8f93dd0_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
    def query_interface(this : IADsClass*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsClass*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsClass*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsClass*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsClass*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsClass*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsClass*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsClass*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsClass*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsClass*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsClass*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsClass*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsClass*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsClass*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_PrimaryInterface(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrimaryInterface.call(this, retval)
    end
    def get_CLSID(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, retval)
    end
    def put_CLSID(this : IADsClass*, bstrCLSID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CLSID.call(this, bstrCLSID)
    end
    def get_OID(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OID.call(this, retval)
    end
    def put_OID(this : IADsClass*, bstrOID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OID.call(this, bstrOID)
    end
    def get_Abstract(this : IADsClass*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Abstract.call(this, retval)
    end
    def put_Abstract(this : IADsClass*, fAbstract : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Abstract.call(this, fAbstract)
    end
    def get_Auxiliary(this : IADsClass*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Auxiliary.call(this, retval)
    end
    def put_Auxiliary(this : IADsClass*, fAuxiliary : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Auxiliary.call(this, fAuxiliary)
    end
    def get_MandatoryProperties(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MandatoryProperties.call(this, retval)
    end
    def put_MandatoryProperties(this : IADsClass*, vMandatoryProperties : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MandatoryProperties.call(this, vMandatoryProperties)
    end
    def get_OptionalProperties(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OptionalProperties.call(this, retval)
    end
    def put_OptionalProperties(this : IADsClass*, vOptionalProperties : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OptionalProperties.call(this, vOptionalProperties)
    end
    def get_NamingProperties(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NamingProperties.call(this, retval)
    end
    def put_NamingProperties(this : IADsClass*, vNamingProperties : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NamingProperties.call(this, vNamingProperties)
    end
    def get_DerivedFrom(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DerivedFrom.call(this, retval)
    end
    def put_DerivedFrom(this : IADsClass*, vDerivedFrom : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DerivedFrom.call(this, vDerivedFrom)
    end
    def get_AuxDerivedFrom(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuxDerivedFrom.call(this, retval)
    end
    def put_AuxDerivedFrom(this : IADsClass*, vAuxDerivedFrom : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AuxDerivedFrom.call(this, vAuxDerivedFrom)
    end
    def get_PossibleSuperiors(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PossibleSuperiors.call(this, retval)
    end
    def put_PossibleSuperiors(this : IADsClass*, vPossibleSuperiors : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PossibleSuperiors.call(this, vPossibleSuperiors)
    end
    def get_Containment(this : IADsClass*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Containment.call(this, retval)
    end
    def put_Containment(this : IADsClass*, vContainment : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Containment.call(this, vContainment)
    end
    def get_Container(this : IADsClass*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Container.call(this, retval)
    end
    def put_Container(this : IADsClass*, fContainer : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Container.call(this, fContainer)
    end
    def get_HelpFileName(this : IADsClass*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HelpFileName.call(this, retval)
    end
    def put_HelpFileName(this : IADsClass*, bstrHelpFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HelpFileName.call(this, bstrHelpFileName)
    end
    def get_HelpFileContext(this : IADsClass*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HelpFileContext.call(this, retval)
    end
    def put_HelpFileContext(this : IADsClass*, lnHelpFileContext : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HelpFileContext.call(this, lnHelpFileContext)
    end
    def qualifiers(this : IADsClass*, ppQualifiers : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.qualifiers.call(this, ppQualifiers)
    end

  end

  @[Extern]
  record IADsPropertyVtbl,
    query_interface : Proc(IADsProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsProperty*, UInt32),
    release : Proc(IADsProperty*, UInt32),
    get_type_info_count : Proc(IADsProperty*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsProperty*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsProperty*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsProperty*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsProperty*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsProperty*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsProperty*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsProperty*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsProperty*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsProperty*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsProperty*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_OID : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_OID : Proc(IADsProperty*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Syntax : Proc(IADsProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Syntax : Proc(IADsProperty*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MaxRange : Proc(IADsProperty*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxRange : Proc(IADsProperty*, Int32, Win32cr::Foundation::HRESULT),
    get_MinRange : Proc(IADsProperty*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinRange : Proc(IADsProperty*, Int32, Win32cr::Foundation::HRESULT),
    get_MultiValued : Proc(IADsProperty*, Int16*, Win32cr::Foundation::HRESULT),
    put_MultiValued : Proc(IADsProperty*, Int16, Win32cr::Foundation::HRESULT),
    qualifiers : Proc(IADsProperty*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8f93dd3-4ae0-11cf-9e73-00aa004a5691")]
  record IADsProperty, lpVtbl : IADsPropertyVtbl* do
    GUID = LibC::GUID.new(0xc8f93dd3_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
    def query_interface(this : IADsProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsProperty*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsProperty*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsProperty*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsProperty*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsProperty*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsProperty*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsProperty*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsProperty*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsProperty*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsProperty*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsProperty*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_OID(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OID.call(this, retval)
    end
    def put_OID(this : IADsProperty*, bstrOID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OID.call(this, bstrOID)
    end
    def get_Syntax(this : IADsProperty*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Syntax.call(this, retval)
    end
    def put_Syntax(this : IADsProperty*, bstrSyntax : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Syntax.call(this, bstrSyntax)
    end
    def get_MaxRange(this : IADsProperty*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxRange.call(this, retval)
    end
    def put_MaxRange(this : IADsProperty*, lnMaxRange : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxRange.call(this, lnMaxRange)
    end
    def get_MinRange(this : IADsProperty*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinRange.call(this, retval)
    end
    def put_MinRange(this : IADsProperty*, lnMinRange : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinRange.call(this, lnMinRange)
    end
    def get_MultiValued(this : IADsProperty*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MultiValued.call(this, retval)
    end
    def put_MultiValued(this : IADsProperty*, fMultiValued : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MultiValued.call(this, fMultiValued)
    end
    def qualifiers(this : IADsProperty*, ppQualifiers : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.qualifiers.call(this, ppQualifiers)
    end

  end

  @[Extern]
  record IADsSyntaxVtbl,
    query_interface : Proc(IADsSyntax*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsSyntax*, UInt32),
    release : Proc(IADsSyntax*, UInt32),
    get_type_info_count : Proc(IADsSyntax*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsSyntax*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsSyntax*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsSyntax*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsSyntax*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsSyntax*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsSyntax*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsSyntax*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsSyntax*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsSyntax*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsSyntax*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsSyntax*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_OleAutoDataType : Proc(IADsSyntax*, Int32*, Win32cr::Foundation::HRESULT),
    put_OleAutoDataType : Proc(IADsSyntax*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8f93dd2-4ae0-11cf-9e73-00aa004a5691")]
  record IADsSyntax, lpVtbl : IADsSyntaxVtbl* do
    GUID = LibC::GUID.new(0xc8f93dd2_u32, 0x4ae0_u16, 0x11cf_u16, StaticArray[0x9e_u8, 0x73_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0x56_u8, 0x91_u8])
    def query_interface(this : IADsSyntax*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsSyntax*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsSyntax*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsSyntax*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsSyntax*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsSyntax*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsSyntax*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsSyntax*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsSyntax*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsSyntax*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsSyntax*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsSyntax*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsSyntax*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsSyntax*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsSyntax*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_OleAutoDataType(this : IADsSyntax*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OleAutoDataType.call(this, retval)
    end
    def put_OleAutoDataType(this : IADsSyntax*, lnOleAutoDataType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OleAutoDataType.call(this, lnOleAutoDataType)
    end

  end

  @[Extern]
  record IADsLocalityVtbl,
    query_interface : Proc(IADsLocality*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsLocality*, UInt32),
    release : Proc(IADsLocality*, UInt32),
    get_type_info_count : Proc(IADsLocality*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsLocality*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsLocality*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsLocality*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsLocality*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsLocality*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsLocality*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsLocality*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LocalityName : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LocalityName : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PostalAddress : Proc(IADsLocality*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PostalAddress : Proc(IADsLocality*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SeeAlso : Proc(IADsLocality*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_SeeAlso : Proc(IADsLocality*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a05e03a2-effe-11cf-8abc-00c04fd8d503")]
  record IADsLocality, lpVtbl : IADsLocalityVtbl* do
    GUID = LibC::GUID.new(0xa05e03a2_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsLocality*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsLocality*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsLocality*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsLocality*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsLocality*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsLocality*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsLocality*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsLocality*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsLocality*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsLocality*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsLocality*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsLocality*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsLocality*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsLocality*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Description(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsLocality*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_LocalityName(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalityName.call(this, retval)
    end
    def put_LocalityName(this : IADsLocality*, bstrLocalityName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalityName.call(this, bstrLocalityName)
    end
    def get_PostalAddress(this : IADsLocality*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalAddress.call(this, retval)
    end
    def put_PostalAddress(this : IADsLocality*, bstrPostalAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalAddress.call(this, bstrPostalAddress)
    end
    def get_SeeAlso(this : IADsLocality*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SeeAlso.call(this, retval)
    end
    def put_SeeAlso(this : IADsLocality*, vSeeAlso : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SeeAlso.call(this, vSeeAlso)
    end

  end

  @[Extern]
  record IADsOVtbl,
    query_interface : Proc(IADsO*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsO*, UInt32),
    release : Proc(IADsO*, UInt32),
    get_type_info_count : Proc(IADsO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsO*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsO*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsO*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsO*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsO*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsO*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsO*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LocalityName : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LocalityName : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PostalAddress : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PostalAddress : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TelephoneNumber : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_TelephoneNumber : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FaxNumber : Proc(IADsO*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FaxNumber : Proc(IADsO*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SeeAlso : Proc(IADsO*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_SeeAlso : Proc(IADsO*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a1cd2dc6-effe-11cf-8abc-00c04fd8d503")]
  record IADsO, lpVtbl : IADsOVtbl* do
    GUID = LibC::GUID.new(0xa1cd2dc6_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsO*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsO*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsO*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsO*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsO*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsO*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsO*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsO*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsO*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsO*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsO*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsO*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Description(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsO*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_LocalityName(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalityName.call(this, retval)
    end
    def put_LocalityName(this : IADsO*, bstrLocalityName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalityName.call(this, bstrLocalityName)
    end
    def get_PostalAddress(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalAddress.call(this, retval)
    end
    def put_PostalAddress(this : IADsO*, bstrPostalAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalAddress.call(this, bstrPostalAddress)
    end
    def get_TelephoneNumber(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneNumber.call(this, retval)
    end
    def put_TelephoneNumber(this : IADsO*, bstrTelephoneNumber : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneNumber.call(this, bstrTelephoneNumber)
    end
    def get_FaxNumber(this : IADsO*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FaxNumber.call(this, retval)
    end
    def put_FaxNumber(this : IADsO*, bstrFaxNumber : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FaxNumber.call(this, bstrFaxNumber)
    end
    def get_SeeAlso(this : IADsO*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SeeAlso.call(this, retval)
    end
    def put_SeeAlso(this : IADsO*, vSeeAlso : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SeeAlso.call(this, vSeeAlso)
    end

  end

  @[Extern]
  record IADsOUVtbl,
    query_interface : Proc(IADsOU*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsOU*, UInt32),
    release : Proc(IADsOU*, UInt32),
    get_type_info_count : Proc(IADsOU*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsOU*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsOU*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsOU*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsOU*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsOU*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsOU*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsOU*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LocalityName : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LocalityName : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PostalAddress : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PostalAddress : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TelephoneNumber : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_TelephoneNumber : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FaxNumber : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FaxNumber : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SeeAlso : Proc(IADsOU*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_SeeAlso : Proc(IADsOU*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_BusinessCategory : Proc(IADsOU*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_BusinessCategory : Proc(IADsOU*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a2f733b8-effe-11cf-8abc-00c04fd8d503")]
  record IADsOU, lpVtbl : IADsOUVtbl* do
    GUID = LibC::GUID.new(0xa2f733b8_u32, 0xeffe_u16, 0x11cf_u16, StaticArray[0x8a_u8, 0xbc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsOU*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsOU*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsOU*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsOU*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsOU*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsOU*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsOU*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsOU*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsOU*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsOU*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsOU*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsOU*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsOU*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsOU*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Description(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsOU*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_LocalityName(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalityName.call(this, retval)
    end
    def put_LocalityName(this : IADsOU*, bstrLocalityName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalityName.call(this, bstrLocalityName)
    end
    def get_PostalAddress(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalAddress.call(this, retval)
    end
    def put_PostalAddress(this : IADsOU*, bstrPostalAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalAddress.call(this, bstrPostalAddress)
    end
    def get_TelephoneNumber(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneNumber.call(this, retval)
    end
    def put_TelephoneNumber(this : IADsOU*, bstrTelephoneNumber : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneNumber.call(this, bstrTelephoneNumber)
    end
    def get_FaxNumber(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FaxNumber.call(this, retval)
    end
    def put_FaxNumber(this : IADsOU*, bstrFaxNumber : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FaxNumber.call(this, bstrFaxNumber)
    end
    def get_SeeAlso(this : IADsOU*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SeeAlso.call(this, retval)
    end
    def put_SeeAlso(this : IADsOU*, vSeeAlso : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SeeAlso.call(this, vSeeAlso)
    end
    def get_BusinessCategory(this : IADsOU*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BusinessCategory.call(this, retval)
    end
    def put_BusinessCategory(this : IADsOU*, bstrBusinessCategory : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BusinessCategory.call(this, bstrBusinessCategory)
    end

  end

  @[Extern]
  record IADsDomainVtbl,
    query_interface : Proc(IADsDomain*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsDomain*, UInt32),
    release : Proc(IADsDomain*, UInt32),
    get_type_info_count : Proc(IADsDomain*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsDomain*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsDomain*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsDomain*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsDomain*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsDomain*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsDomain*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsDomain*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsDomain*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsDomain*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsDomain*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsDomain*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_IsWorkgroup : Proc(IADsDomain*, Int16*, Win32cr::Foundation::HRESULT),
    get_MinPasswordLength : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinPasswordLength : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_MinPasswordAge : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinPasswordAge : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxPasswordAge : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxPasswordAge : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxBadPasswordsAllowed : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxBadPasswordsAllowed : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_PasswordHistoryLength : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_PasswordHistoryLength : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_PasswordAttributes : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_PasswordAttributes : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoUnlockInterval : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoUnlockInterval : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT),
    get_LockoutObservationInterval : Proc(IADsDomain*, Int32*, Win32cr::Foundation::HRESULT),
    put_LockoutObservationInterval : Proc(IADsDomain*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("00e4c220-fd16-11ce-abc4-02608c9e7553")]
  record IADsDomain, lpVtbl : IADsDomainVtbl* do
    GUID = LibC::GUID.new(0xe4c220_u32, 0xfd16_u16, 0x11ce_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsDomain*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsDomain*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsDomain*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsDomain*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsDomain*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsDomain*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsDomain*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsDomain*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsDomain*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsDomain*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsDomain*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsDomain*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsDomain*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsDomain*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsDomain*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_IsWorkgroup(this : IADsDomain*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsWorkgroup.call(this, retval)
    end
    def get_MinPasswordLength(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinPasswordLength.call(this, retval)
    end
    def put_MinPasswordLength(this : IADsDomain*, lnMinPasswordLength : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinPasswordLength.call(this, lnMinPasswordLength)
    end
    def get_MinPasswordAge(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinPasswordAge.call(this, retval)
    end
    def put_MinPasswordAge(this : IADsDomain*, lnMinPasswordAge : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinPasswordAge.call(this, lnMinPasswordAge)
    end
    def get_MaxPasswordAge(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxPasswordAge.call(this, retval)
    end
    def put_MaxPasswordAge(this : IADsDomain*, lnMaxPasswordAge : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxPasswordAge.call(this, lnMaxPasswordAge)
    end
    def get_MaxBadPasswordsAllowed(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxBadPasswordsAllowed.call(this, retval)
    end
    def put_MaxBadPasswordsAllowed(this : IADsDomain*, lnMaxBadPasswordsAllowed : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxBadPasswordsAllowed.call(this, lnMaxBadPasswordsAllowed)
    end
    def get_PasswordHistoryLength(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordHistoryLength.call(this, retval)
    end
    def put_PasswordHistoryLength(this : IADsDomain*, lnPasswordHistoryLength : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PasswordHistoryLength.call(this, lnPasswordHistoryLength)
    end
    def get_PasswordAttributes(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordAttributes.call(this, retval)
    end
    def put_PasswordAttributes(this : IADsDomain*, lnPasswordAttributes : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PasswordAttributes.call(this, lnPasswordAttributes)
    end
    def get_AutoUnlockInterval(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoUnlockInterval.call(this, retval)
    end
    def put_AutoUnlockInterval(this : IADsDomain*, lnAutoUnlockInterval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoUnlockInterval.call(this, lnAutoUnlockInterval)
    end
    def get_LockoutObservationInterval(this : IADsDomain*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LockoutObservationInterval.call(this, retval)
    end
    def put_LockoutObservationInterval(this : IADsDomain*, lnLockoutObservationInterval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LockoutObservationInterval.call(this, lnLockoutObservationInterval)
    end

  end

  @[Extern]
  record IADsComputerVtbl,
    query_interface : Proc(IADsComputer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsComputer*, UInt32),
    release : Proc(IADsComputer*, UInt32),
    get_type_info_count : Proc(IADsComputer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsComputer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsComputer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsComputer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsComputer*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsComputer*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsComputer*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsComputer*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_ComputerID : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Site : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Location : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Location : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PrimaryUser : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PrimaryUser : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Owner : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Owner : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Division : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Division : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Department : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Department : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Role : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Role : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OperatingSystem : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_OperatingSystem : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OperatingSystemVersion : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_OperatingSystemVersion : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Model : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Model : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Processor : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Processor : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProcessorCount : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProcessorCount : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MemorySize : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MemorySize : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_StorageCapacity : Proc(IADsComputer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_StorageCapacity : Proc(IADsComputer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NetAddresses : Proc(IADsComputer*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_NetAddresses : Proc(IADsComputer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("efe3cc70-1d9f-11cf-b1f3-02608c9e7553")]
  record IADsComputer, lpVtbl : IADsComputerVtbl* do
    GUID = LibC::GUID.new(0xefe3cc70_u32, 0x1d9f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xf3_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsComputer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsComputer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsComputer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsComputer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsComputer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsComputer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsComputer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsComputer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsComputer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsComputer*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsComputer*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsComputer*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsComputer*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsComputer*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_ComputerID(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ComputerID.call(this, retval)
    end
    def get_Site(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Site.call(this, retval)
    end
    def get_Description(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsComputer*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_Location(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Location.call(this, retval)
    end
    def put_Location(this : IADsComputer*, bstrLocation : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Location.call(this, bstrLocation)
    end
    def get_PrimaryUser(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrimaryUser.call(this, retval)
    end
    def put_PrimaryUser(this : IADsComputer*, bstrPrimaryUser : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrimaryUser.call(this, bstrPrimaryUser)
    end
    def get_Owner(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Owner.call(this, retval)
    end
    def put_Owner(this : IADsComputer*, bstrOwner : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Owner.call(this, bstrOwner)
    end
    def get_Division(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Division.call(this, retval)
    end
    def put_Division(this : IADsComputer*, bstrDivision : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Division.call(this, bstrDivision)
    end
    def get_Department(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Department.call(this, retval)
    end
    def put_Department(this : IADsComputer*, bstrDepartment : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Department.call(this, bstrDepartment)
    end
    def get_Role(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Role.call(this, retval)
    end
    def put_Role(this : IADsComputer*, bstrRole : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Role.call(this, bstrRole)
    end
    def get_OperatingSystem(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OperatingSystem.call(this, retval)
    end
    def put_OperatingSystem(this : IADsComputer*, bstrOperatingSystem : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OperatingSystem.call(this, bstrOperatingSystem)
    end
    def get_OperatingSystemVersion(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OperatingSystemVersion.call(this, retval)
    end
    def put_OperatingSystemVersion(this : IADsComputer*, bstrOperatingSystemVersion : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OperatingSystemVersion.call(this, bstrOperatingSystemVersion)
    end
    def get_Model(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Model.call(this, retval)
    end
    def put_Model(this : IADsComputer*, bstrModel : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Model.call(this, bstrModel)
    end
    def get_Processor(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Processor.call(this, retval)
    end
    def put_Processor(this : IADsComputer*, bstrProcessor : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Processor.call(this, bstrProcessor)
    end
    def get_ProcessorCount(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProcessorCount.call(this, retval)
    end
    def put_ProcessorCount(this : IADsComputer*, bstrProcessorCount : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProcessorCount.call(this, bstrProcessorCount)
    end
    def get_MemorySize(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MemorySize.call(this, retval)
    end
    def put_MemorySize(this : IADsComputer*, bstrMemorySize : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MemorySize.call(this, bstrMemorySize)
    end
    def get_StorageCapacity(this : IADsComputer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StorageCapacity.call(this, retval)
    end
    def put_StorageCapacity(this : IADsComputer*, bstrStorageCapacity : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StorageCapacity.call(this, bstrStorageCapacity)
    end
    def get_NetAddresses(this : IADsComputer*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetAddresses.call(this, retval)
    end
    def put_NetAddresses(this : IADsComputer*, vNetAddresses : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetAddresses.call(this, vNetAddresses)
    end

  end

  @[Extern]
  record IADsComputerOperationsVtbl,
    query_interface : Proc(IADsComputerOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsComputerOperations*, UInt32),
    release : Proc(IADsComputerOperations*, UInt32),
    get_type_info_count : Proc(IADsComputerOperations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsComputerOperations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsComputerOperations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsComputerOperations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsComputerOperations*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsComputerOperations*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsComputerOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsComputerOperations*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsComputerOperations*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    status : Proc(IADsComputerOperations*, Void**, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IADsComputerOperations*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ef497680-1d9f-11cf-b1f3-02608c9e7553")]
  record IADsComputerOperations, lpVtbl : IADsComputerOperationsVtbl* do
    GUID = LibC::GUID.new(0xef497680_u32, 0x1d9f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xf3_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsComputerOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsComputerOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsComputerOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsComputerOperations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsComputerOperations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsComputerOperations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsComputerOperations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsComputerOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsComputerOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsComputerOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsComputerOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsComputerOperations*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsComputerOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsComputerOperations*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsComputerOperations*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def status(this : IADsComputerOperations*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.status.call(this, ppObject)
    end
    def shutdown(this : IADsComputerOperations*, bReboot : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this, bReboot)
    end

  end

  @[Extern]
  record IADsGroupVtbl,
    query_interface : Proc(IADsGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsGroup*, UInt32),
    release : Proc(IADsGroup*, UInt32),
    get_type_info_count : Proc(IADsGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsGroup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsGroup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsGroup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsGroup*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsGroup*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsGroup*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsGroup*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    members : Proc(IADsGroup*, Void**, Win32cr::Foundation::HRESULT),
    is_member : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    add : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove : Proc(IADsGroup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("27636b00-410f-11cf-b1ff-02608c9e7553")]
  record IADsGroup, lpVtbl : IADsGroupVtbl* do
    GUID = LibC::GUID.new(0x27636b00_u32, 0x410f_u16, 0x11cf_u16, StaticArray[0xb1_u8, 0xff_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsGroup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsGroup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsGroup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsGroup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsGroup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsGroup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsGroup*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsGroup*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsGroup*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsGroup*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsGroup*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Description(this : IADsGroup*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsGroup*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def members(this : IADsGroup*, ppMembers : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.members.call(this, ppMembers)
    end
    def is_member(this : IADsGroup*, bstrMember : Win32cr::Foundation::BSTR, bMember : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_member.call(this, bstrMember, bMember)
    end
    def add(this : IADsGroup*, bstrNewItem : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, bstrNewItem)
    end
    def remove(this : IADsGroup*, bstrItemToBeRemoved : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, bstrItemToBeRemoved)
    end

  end

  @[Extern]
  record IADsUserVtbl,
    query_interface : Proc(IADsUser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsUser*, UInt32),
    release : Proc(IADsUser*, UInt32),
    get_type_info_count : Proc(IADsUser*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsUser*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsUser*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsUser*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsUser*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsUser*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsUser*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_BadLoginAddress : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BadLoginCount : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastLogin : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    get_LastLogoff : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    get_LastFailedLogin : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    get_PasswordLastChanged : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Division : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Division : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Department : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Department : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EmployeeID : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_EmployeeID : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FullName : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FullName : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FirstName : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FirstName : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LastName : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LastName : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OtherName : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_OtherName : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NamePrefix : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NamePrefix : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NameSuffix : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NameSuffix : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Title : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Manager : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Manager : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TelephoneHome : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_TelephoneHome : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_TelephoneMobile : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_TelephoneMobile : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_TelephoneNumber : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_TelephoneNumber : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_TelephonePager : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_TelephonePager : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_FaxNumber : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_FaxNumber : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_OfficeLocations : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_OfficeLocations : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_PostalAddresses : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_PostalAddresses : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_PostalCodes : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_PostalCodes : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_SeeAlso : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_SeeAlso : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_AccountDisabled : Proc(IADsUser*, Int16*, Win32cr::Foundation::HRESULT),
    put_AccountDisabled : Proc(IADsUser*, Int16, Win32cr::Foundation::HRESULT),
    get_AccountExpirationDate : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    put_AccountExpirationDate : Proc(IADsUser*, Float64, Win32cr::Foundation::HRESULT),
    get_GraceLoginsAllowed : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    put_GraceLoginsAllowed : Proc(IADsUser*, Int32, Win32cr::Foundation::HRESULT),
    get_GraceLoginsRemaining : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    put_GraceLoginsRemaining : Proc(IADsUser*, Int32, Win32cr::Foundation::HRESULT),
    get_IsAccountLocked : Proc(IADsUser*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsAccountLocked : Proc(IADsUser*, Int16, Win32cr::Foundation::HRESULT),
    get_LoginHours : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_LoginHours : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_LoginWorkstations : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_LoginWorkstations : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_MaxLogins : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxLogins : Proc(IADsUser*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxStorage : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxStorage : Proc(IADsUser*, Int32, Win32cr::Foundation::HRESULT),
    get_PasswordExpirationDate : Proc(IADsUser*, Float64*, Win32cr::Foundation::HRESULT),
    put_PasswordExpirationDate : Proc(IADsUser*, Float64, Win32cr::Foundation::HRESULT),
    get_PasswordMinimumLength : Proc(IADsUser*, Int32*, Win32cr::Foundation::HRESULT),
    put_PasswordMinimumLength : Proc(IADsUser*, Int32, Win32cr::Foundation::HRESULT),
    get_PasswordRequired : Proc(IADsUser*, Int16*, Win32cr::Foundation::HRESULT),
    put_PasswordRequired : Proc(IADsUser*, Int16, Win32cr::Foundation::HRESULT),
    get_RequireUniquePassword : Proc(IADsUser*, Int16*, Win32cr::Foundation::HRESULT),
    put_RequireUniquePassword : Proc(IADsUser*, Int16, Win32cr::Foundation::HRESULT),
    get_EmailAddress : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_EmailAddress : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HomeDirectory : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HomeDirectory : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Languages : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Languages : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Profile : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Profile : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LoginScript : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LoginScript : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Picture : Proc(IADsUser*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Picture : Proc(IADsUser*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_HomePage : Proc(IADsUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HomePage : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    groups : Proc(IADsUser*, Void**, Win32cr::Foundation::HRESULT),
    set_password : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    change_password : Proc(IADsUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3e37e320-17e2-11cf-abc4-02608c9e7553")]
  record IADsUser, lpVtbl : IADsUserVtbl* do
    GUID = LibC::GUID.new(0x3e37e320_u32, 0x17e2_u16, 0x11cf_u16, StaticArray[0xab_u8, 0xc4_u8, 0x2_u8, 0x60_u8, 0x8c_u8, 0x9e_u8, 0x75_u8, 0x53_u8])
    def query_interface(this : IADsUser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsUser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsUser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsUser*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsUser*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsUser*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsUser*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsUser*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsUser*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsUser*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsUser*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsUser*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsUser*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsUser*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_BadLoginAddress(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BadLoginAddress.call(this, retval)
    end
    def get_BadLoginCount(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BadLoginCount.call(this, retval)
    end
    def get_LastLogin(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastLogin.call(this, retval)
    end
    def get_LastLogoff(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastLogoff.call(this, retval)
    end
    def get_LastFailedLogin(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastFailedLogin.call(this, retval)
    end
    def get_PasswordLastChanged(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordLastChanged.call(this, retval)
    end
    def get_Description(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsUser*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_Division(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Division.call(this, retval)
    end
    def put_Division(this : IADsUser*, bstrDivision : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Division.call(this, bstrDivision)
    end
    def get_Department(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Department.call(this, retval)
    end
    def put_Department(this : IADsUser*, bstrDepartment : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Department.call(this, bstrDepartment)
    end
    def get_EmployeeID(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EmployeeID.call(this, retval)
    end
    def put_EmployeeID(this : IADsUser*, bstrEmployeeID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EmployeeID.call(this, bstrEmployeeID)
    end
    def get_FullName(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullName.call(this, retval)
    end
    def put_FullName(this : IADsUser*, bstrFullName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FullName.call(this, bstrFullName)
    end
    def get_FirstName(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FirstName.call(this, retval)
    end
    def put_FirstName(this : IADsUser*, bstrFirstName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FirstName.call(this, bstrFirstName)
    end
    def get_LastName(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastName.call(this, retval)
    end
    def put_LastName(this : IADsUser*, bstrLastName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastName.call(this, bstrLastName)
    end
    def get_OtherName(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OtherName.call(this, retval)
    end
    def put_OtherName(this : IADsUser*, bstrOtherName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OtherName.call(this, bstrOtherName)
    end
    def get_NamePrefix(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NamePrefix.call(this, retval)
    end
    def put_NamePrefix(this : IADsUser*, bstrNamePrefix : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NamePrefix.call(this, bstrNamePrefix)
    end
    def get_NameSuffix(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameSuffix.call(this, retval)
    end
    def put_NameSuffix(this : IADsUser*, bstrNameSuffix : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NameSuffix.call(this, bstrNameSuffix)
    end
    def get_Title(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, retval)
    end
    def put_Title(this : IADsUser*, bstrTitle : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Title.call(this, bstrTitle)
    end
    def get_Manager(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Manager.call(this, retval)
    end
    def put_Manager(this : IADsUser*, bstrManager : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Manager.call(this, bstrManager)
    end
    def get_TelephoneHome(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneHome.call(this, retval)
    end
    def put_TelephoneHome(this : IADsUser*, vTelephoneHome : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneHome.call(this, vTelephoneHome)
    end
    def get_TelephoneMobile(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneMobile.call(this, retval)
    end
    def put_TelephoneMobile(this : IADsUser*, vTelephoneMobile : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneMobile.call(this, vTelephoneMobile)
    end
    def get_TelephoneNumber(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneNumber.call(this, retval)
    end
    def put_TelephoneNumber(this : IADsUser*, vTelephoneNumber : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneNumber.call(this, vTelephoneNumber)
    end
    def get_TelephonePager(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephonePager.call(this, retval)
    end
    def put_TelephonePager(this : IADsUser*, vTelephonePager : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephonePager.call(this, vTelephonePager)
    end
    def get_FaxNumber(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FaxNumber.call(this, retval)
    end
    def put_FaxNumber(this : IADsUser*, vFaxNumber : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FaxNumber.call(this, vFaxNumber)
    end
    def get_OfficeLocations(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OfficeLocations.call(this, retval)
    end
    def put_OfficeLocations(this : IADsUser*, vOfficeLocations : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OfficeLocations.call(this, vOfficeLocations)
    end
    def get_PostalAddresses(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalAddresses.call(this, retval)
    end
    def put_PostalAddresses(this : IADsUser*, vPostalAddresses : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalAddresses.call(this, vPostalAddresses)
    end
    def get_PostalCodes(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalCodes.call(this, retval)
    end
    def put_PostalCodes(this : IADsUser*, vPostalCodes : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalCodes.call(this, vPostalCodes)
    end
    def get_SeeAlso(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SeeAlso.call(this, retval)
    end
    def put_SeeAlso(this : IADsUser*, vSeeAlso : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SeeAlso.call(this, vSeeAlso)
    end
    def get_AccountDisabled(this : IADsUser*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AccountDisabled.call(this, retval)
    end
    def put_AccountDisabled(this : IADsUser*, fAccountDisabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AccountDisabled.call(this, fAccountDisabled)
    end
    def get_AccountExpirationDate(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AccountExpirationDate.call(this, retval)
    end
    def put_AccountExpirationDate(this : IADsUser*, daAccountExpirationDate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AccountExpirationDate.call(this, daAccountExpirationDate)
    end
    def get_GraceLoginsAllowed(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GraceLoginsAllowed.call(this, retval)
    end
    def put_GraceLoginsAllowed(this : IADsUser*, lnGraceLoginsAllowed : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GraceLoginsAllowed.call(this, lnGraceLoginsAllowed)
    end
    def get_GraceLoginsRemaining(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GraceLoginsRemaining.call(this, retval)
    end
    def put_GraceLoginsRemaining(this : IADsUser*, lnGraceLoginsRemaining : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GraceLoginsRemaining.call(this, lnGraceLoginsRemaining)
    end
    def get_IsAccountLocked(this : IADsUser*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsAccountLocked.call(this, retval)
    end
    def put_IsAccountLocked(this : IADsUser*, fIsAccountLocked : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsAccountLocked.call(this, fIsAccountLocked)
    end
    def get_LoginHours(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LoginHours.call(this, retval)
    end
    def put_LoginHours(this : IADsUser*, vLoginHours : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LoginHours.call(this, vLoginHours)
    end
    def get_LoginWorkstations(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LoginWorkstations.call(this, retval)
    end
    def put_LoginWorkstations(this : IADsUser*, vLoginWorkstations : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LoginWorkstations.call(this, vLoginWorkstations)
    end
    def get_MaxLogins(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxLogins.call(this, retval)
    end
    def put_MaxLogins(this : IADsUser*, lnMaxLogins : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxLogins.call(this, lnMaxLogins)
    end
    def get_MaxStorage(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxStorage.call(this, retval)
    end
    def put_MaxStorage(this : IADsUser*, lnMaxStorage : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxStorage.call(this, lnMaxStorage)
    end
    def get_PasswordExpirationDate(this : IADsUser*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordExpirationDate.call(this, retval)
    end
    def put_PasswordExpirationDate(this : IADsUser*, daPasswordExpirationDate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PasswordExpirationDate.call(this, daPasswordExpirationDate)
    end
    def get_PasswordMinimumLength(this : IADsUser*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordMinimumLength.call(this, retval)
    end
    def put_PasswordMinimumLength(this : IADsUser*, lnPasswordMinimumLength : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PasswordMinimumLength.call(this, lnPasswordMinimumLength)
    end
    def get_PasswordRequired(this : IADsUser*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PasswordRequired.call(this, retval)
    end
    def put_PasswordRequired(this : IADsUser*, fPasswordRequired : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PasswordRequired.call(this, fPasswordRequired)
    end
    def get_RequireUniquePassword(this : IADsUser*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequireUniquePassword.call(this, retval)
    end
    def put_RequireUniquePassword(this : IADsUser*, fRequireUniquePassword : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequireUniquePassword.call(this, fRequireUniquePassword)
    end
    def get_EmailAddress(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EmailAddress.call(this, retval)
    end
    def put_EmailAddress(this : IADsUser*, bstrEmailAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EmailAddress.call(this, bstrEmailAddress)
    end
    def get_HomeDirectory(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HomeDirectory.call(this, retval)
    end
    def put_HomeDirectory(this : IADsUser*, bstrHomeDirectory : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HomeDirectory.call(this, bstrHomeDirectory)
    end
    def get_Languages(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Languages.call(this, retval)
    end
    def put_Languages(this : IADsUser*, vLanguages : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Languages.call(this, vLanguages)
    end
    def get_Profile(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Profile.call(this, retval)
    end
    def put_Profile(this : IADsUser*, bstrProfile : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Profile.call(this, bstrProfile)
    end
    def get_LoginScript(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LoginScript.call(this, retval)
    end
    def put_LoginScript(this : IADsUser*, bstrLoginScript : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LoginScript.call(this, bstrLoginScript)
    end
    def get_Picture(this : IADsUser*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Picture.call(this, retval)
    end
    def put_Picture(this : IADsUser*, vPicture : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Picture.call(this, vPicture)
    end
    def get_HomePage(this : IADsUser*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HomePage.call(this, retval)
    end
    def put_HomePage(this : IADsUser*, bstrHomePage : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HomePage.call(this, bstrHomePage)
    end
    def groups(this : IADsUser*, ppGroups : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.groups.call(this, ppGroups)
    end
    def set_password(this : IADsUser*, new_password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_password.call(this, new_password)
    end
    def change_password(this : IADsUser*, bstrOldPassword : Win32cr::Foundation::BSTR, bstrNewPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_password.call(this, bstrOldPassword, bstrNewPassword)
    end

  end

  @[Extern]
  record IADsPrintQueueVtbl,
    query_interface : Proc(IADsPrintQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPrintQueue*, UInt32),
    release : Proc(IADsPrintQueue*, UInt32),
    get_type_info_count : Proc(IADsPrintQueue*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPrintQueue*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPrintQueue*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPrintQueue*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsPrintQueue*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsPrintQueue*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsPrintQueue*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsPrintQueue*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_PrinterPath : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PrinterPath : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Model : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Model : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Datatype : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Datatype : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PrintProcessor : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PrintProcessor : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Location : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Location : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_StartTime : Proc(IADsPrintQueue*, Float64*, Win32cr::Foundation::HRESULT),
    put_StartTime : Proc(IADsPrintQueue*, Float64, Win32cr::Foundation::HRESULT),
    get_UntilTime : Proc(IADsPrintQueue*, Float64*, Win32cr::Foundation::HRESULT),
    put_UntilTime : Proc(IADsPrintQueue*, Float64, Win32cr::Foundation::HRESULT),
    get_DefaultJobPriority : Proc(IADsPrintQueue*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultJobPriority : Proc(IADsPrintQueue*, Int32, Win32cr::Foundation::HRESULT),
    get_Priority : Proc(IADsPrintQueue*, Int32*, Win32cr::Foundation::HRESULT),
    put_Priority : Proc(IADsPrintQueue*, Int32, Win32cr::Foundation::HRESULT),
    get_BannerPage : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_BannerPage : Proc(IADsPrintQueue*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PrintDevices : Proc(IADsPrintQueue*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_PrintDevices : Proc(IADsPrintQueue*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_NetAddresses : Proc(IADsPrintQueue*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_NetAddresses : Proc(IADsPrintQueue*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b15160d0-1226-11cf-a985-00aa006bc149")]
  record IADsPrintQueue, lpVtbl : IADsPrintQueueVtbl* do
    GUID = LibC::GUID.new(0xb15160d0_u32, 0x1226_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x85_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsPrintQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPrintQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPrintQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPrintQueue*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPrintQueue*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPrintQueue*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPrintQueue*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsPrintQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsPrintQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsPrintQueue*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsPrintQueue*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsPrintQueue*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsPrintQueue*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsPrintQueue*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_PrinterPath(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrinterPath.call(this, retval)
    end
    def put_PrinterPath(this : IADsPrintQueue*, bstrPrinterPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrinterPath.call(this, bstrPrinterPath)
    end
    def get_Model(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Model.call(this, retval)
    end
    def put_Model(this : IADsPrintQueue*, bstrModel : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Model.call(this, bstrModel)
    end
    def get_Datatype(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Datatype.call(this, retval)
    end
    def put_Datatype(this : IADsPrintQueue*, bstrDatatype : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Datatype.call(this, bstrDatatype)
    end
    def get_PrintProcessor(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrintProcessor.call(this, retval)
    end
    def put_PrintProcessor(this : IADsPrintQueue*, bstrPrintProcessor : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrintProcessor.call(this, bstrPrintProcessor)
    end
    def get_Description(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsPrintQueue*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_Location(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Location.call(this, retval)
    end
    def put_Location(this : IADsPrintQueue*, bstrLocation : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Location.call(this, bstrLocation)
    end
    def get_StartTime(this : IADsPrintQueue*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTime.call(this, retval)
    end
    def put_StartTime(this : IADsPrintQueue*, daStartTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartTime.call(this, daStartTime)
    end
    def get_UntilTime(this : IADsPrintQueue*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UntilTime.call(this, retval)
    end
    def put_UntilTime(this : IADsPrintQueue*, daUntilTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UntilTime.call(this, daUntilTime)
    end
    def get_DefaultJobPriority(this : IADsPrintQueue*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultJobPriority.call(this, retval)
    end
    def put_DefaultJobPriority(this : IADsPrintQueue*, lnDefaultJobPriority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultJobPriority.call(this, lnDefaultJobPriority)
    end
    def get_Priority(this : IADsPrintQueue*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Priority.call(this, retval)
    end
    def put_Priority(this : IADsPrintQueue*, lnPriority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Priority.call(this, lnPriority)
    end
    def get_BannerPage(this : IADsPrintQueue*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BannerPage.call(this, retval)
    end
    def put_BannerPage(this : IADsPrintQueue*, bstrBannerPage : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BannerPage.call(this, bstrBannerPage)
    end
    def get_PrintDevices(this : IADsPrintQueue*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrintDevices.call(this, retval)
    end
    def put_PrintDevices(this : IADsPrintQueue*, vPrintDevices : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrintDevices.call(this, vPrintDevices)
    end
    def get_NetAddresses(this : IADsPrintQueue*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetAddresses.call(this, retval)
    end
    def put_NetAddresses(this : IADsPrintQueue*, vNetAddresses : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetAddresses.call(this, vNetAddresses)
    end

  end

  @[Extern]
  record IADsPrintQueueOperationsVtbl,
    query_interface : Proc(IADsPrintQueueOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPrintQueueOperations*, UInt32),
    release : Proc(IADsPrintQueueOperations*, UInt32),
    get_type_info_count : Proc(IADsPrintQueueOperations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPrintQueueOperations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPrintQueueOperations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPrintQueueOperations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsPrintQueueOperations*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsPrintQueueOperations*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IADsPrintQueueOperations*, Int32*, Win32cr::Foundation::HRESULT),
    print_jobs : Proc(IADsPrintQueueOperations*, Void**, Win32cr::Foundation::HRESULT),
    pause : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::HRESULT),
    resume : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::HRESULT),
    purge : Proc(IADsPrintQueueOperations*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("124be5c0-156e-11cf-a986-00aa006bc149")]
  record IADsPrintQueueOperations, lpVtbl : IADsPrintQueueOperationsVtbl* do
    GUID = LibC::GUID.new(0x124be5c0_u32, 0x156e_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x86_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsPrintQueueOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPrintQueueOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPrintQueueOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPrintQueueOperations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPrintQueueOperations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPrintQueueOperations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPrintQueueOperations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsPrintQueueOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsPrintQueueOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsPrintQueueOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsPrintQueueOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsPrintQueueOperations*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsPrintQueueOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsPrintQueueOperations*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsPrintQueueOperations*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Status(this : IADsPrintQueueOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, retval)
    end
    def print_jobs(this : IADsPrintQueueOperations*, pObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.print_jobs.call(this, pObject)
    end
    def pause(this : IADsPrintQueueOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def resume(this : IADsPrintQueueOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def purge(this : IADsPrintQueueOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.purge.call(this)
    end

  end

  @[Extern]
  record IADsPrintJobVtbl,
    query_interface : Proc(IADsPrintJob*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPrintJob*, UInt32),
    release : Proc(IADsPrintJob*, UInt32),
    get_type_info_count : Proc(IADsPrintJob*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPrintJob*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPrintJob*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPrintJob*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsPrintJob*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsPrintJob*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsPrintJob*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsPrintJob*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_HostPrintQueue : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_User : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_UserPath : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TimeSubmitted : Proc(IADsPrintJob*, Float64*, Win32cr::Foundation::HRESULT),
    get_TotalPages : Proc(IADsPrintJob*, Int32*, Win32cr::Foundation::HRESULT),
    get_Size : Proc(IADsPrintJob*, Int32*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Priority : Proc(IADsPrintJob*, Int32*, Win32cr::Foundation::HRESULT),
    put_Priority : Proc(IADsPrintJob*, Int32, Win32cr::Foundation::HRESULT),
    get_StartTime : Proc(IADsPrintJob*, Float64*, Win32cr::Foundation::HRESULT),
    put_StartTime : Proc(IADsPrintJob*, Float64, Win32cr::Foundation::HRESULT),
    get_UntilTime : Proc(IADsPrintJob*, Float64*, Win32cr::Foundation::HRESULT),
    put_UntilTime : Proc(IADsPrintJob*, Float64, Win32cr::Foundation::HRESULT),
    get_Notify : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Notify : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NotifyPath : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NotifyPath : Proc(IADsPrintJob*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("32fb6780-1ed0-11cf-a988-00aa006bc149")]
  record IADsPrintJob, lpVtbl : IADsPrintJobVtbl* do
    GUID = LibC::GUID.new(0x32fb6780_u32, 0x1ed0_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsPrintJob*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPrintJob*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPrintJob*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPrintJob*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPrintJob*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPrintJob*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPrintJob*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsPrintJob*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsPrintJob*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsPrintJob*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsPrintJob*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsPrintJob*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsPrintJob*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsPrintJob*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_HostPrintQueue(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HostPrintQueue.call(this, retval)
    end
    def get_User(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_User.call(this, retval)
    end
    def get_UserPath(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserPath.call(this, retval)
    end
    def get_TimeSubmitted(this : IADsPrintJob*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TimeSubmitted.call(this, retval)
    end
    def get_TotalPages(this : IADsPrintJob*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalPages.call(this, retval)
    end
    def get_Size(this : IADsPrintJob*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Size.call(this, retval)
    end
    def get_Description(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsPrintJob*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_Priority(this : IADsPrintJob*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Priority.call(this, retval)
    end
    def put_Priority(this : IADsPrintJob*, lnPriority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Priority.call(this, lnPriority)
    end
    def get_StartTime(this : IADsPrintJob*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTime.call(this, retval)
    end
    def put_StartTime(this : IADsPrintJob*, daStartTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartTime.call(this, daStartTime)
    end
    def get_UntilTime(this : IADsPrintJob*, retval : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UntilTime.call(this, retval)
    end
    def put_UntilTime(this : IADsPrintJob*, daUntilTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UntilTime.call(this, daUntilTime)
    end
    def get_Notify(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Notify.call(this, retval)
    end
    def put_Notify(this : IADsPrintJob*, bstrNotify : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Notify.call(this, bstrNotify)
    end
    def get_NotifyPath(this : IADsPrintJob*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotifyPath.call(this, retval)
    end
    def put_NotifyPath(this : IADsPrintJob*, bstrNotifyPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NotifyPath.call(this, bstrNotifyPath)
    end

  end

  @[Extern]
  record IADsPrintJobOperationsVtbl,
    query_interface : Proc(IADsPrintJobOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPrintJobOperations*, UInt32),
    release : Proc(IADsPrintJobOperations*, UInt32),
    get_type_info_count : Proc(IADsPrintJobOperations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPrintJobOperations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPrintJobOperations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPrintJobOperations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsPrintJobOperations*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsPrintJobOperations*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsPrintJobOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsPrintJobOperations*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsPrintJobOperations*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IADsPrintJobOperations*, Int32*, Win32cr::Foundation::HRESULT),
    get_TimeElapsed : Proc(IADsPrintJobOperations*, Int32*, Win32cr::Foundation::HRESULT),
    get_PagesPrinted : Proc(IADsPrintJobOperations*, Int32*, Win32cr::Foundation::HRESULT),
    get_Position : Proc(IADsPrintJobOperations*, Int32*, Win32cr::Foundation::HRESULT),
    put_Position : Proc(IADsPrintJobOperations*, Int32, Win32cr::Foundation::HRESULT),
    pause : Proc(IADsPrintJobOperations*, Win32cr::Foundation::HRESULT),
    resume : Proc(IADsPrintJobOperations*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9a52db30-1ecf-11cf-a988-00aa006bc149")]
  record IADsPrintJobOperations, lpVtbl : IADsPrintJobOperationsVtbl* do
    GUID = LibC::GUID.new(0x9a52db30_u32, 0x1ecf_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsPrintJobOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPrintJobOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPrintJobOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPrintJobOperations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPrintJobOperations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPrintJobOperations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPrintJobOperations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsPrintJobOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsPrintJobOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsPrintJobOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsPrintJobOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsPrintJobOperations*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsPrintJobOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsPrintJobOperations*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsPrintJobOperations*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Status(this : IADsPrintJobOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, retval)
    end
    def get_TimeElapsed(this : IADsPrintJobOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TimeElapsed.call(this, retval)
    end
    def get_PagesPrinted(this : IADsPrintJobOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PagesPrinted.call(this, retval)
    end
    def get_Position(this : IADsPrintJobOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Position.call(this, retval)
    end
    def put_Position(this : IADsPrintJobOperations*, lnPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Position.call(this, lnPosition)
    end
    def pause(this : IADsPrintJobOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def resume(this : IADsPrintJobOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end

  end

  @[Extern]
  record IADsServiceVtbl,
    query_interface : Proc(IADsService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsService*, UInt32),
    release : Proc(IADsService*, UInt32),
    get_type_info_count : Proc(IADsService*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsService*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsService*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsService*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsService*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsService*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsService*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsService*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_HostComputer : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HostComputer : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DisplayName : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DisplayName : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Version : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Version : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceType : Proc(IADsService*, Int32*, Win32cr::Foundation::HRESULT),
    put_ServiceType : Proc(IADsService*, Int32, Win32cr::Foundation::HRESULT),
    get_StartType : Proc(IADsService*, Int32*, Win32cr::Foundation::HRESULT),
    put_StartType : Proc(IADsService*, Int32, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Path : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_StartupParameters : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_StartupParameters : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ErrorControl : Proc(IADsService*, Int32*, Win32cr::Foundation::HRESULT),
    put_ErrorControl : Proc(IADsService*, Int32, Win32cr::Foundation::HRESULT),
    get_LoadOrderGroup : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LoadOrderGroup : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceAccountName : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ServiceAccountName : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceAccountPath : Proc(IADsService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ServiceAccountPath : Proc(IADsService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Dependencies : Proc(IADsService*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Dependencies : Proc(IADsService*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("68af66e0-31ca-11cf-a98a-00aa006bc149")]
  record IADsService, lpVtbl : IADsServiceVtbl* do
    GUID = LibC::GUID.new(0x68af66e0_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsService*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsService*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsService*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsService*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsService*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsService*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsService*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsService*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsService*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_HostComputer(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HostComputer.call(this, retval)
    end
    def put_HostComputer(this : IADsService*, bstrHostComputer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HostComputer.call(this, bstrHostComputer)
    end
    def get_DisplayName(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayName.call(this, retval)
    end
    def put_DisplayName(this : IADsService*, bstrDisplayName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DisplayName.call(this, bstrDisplayName)
    end
    def get_Version(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, retval)
    end
    def put_Version(this : IADsService*, bstrVersion : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Version.call(this, bstrVersion)
    end
    def get_ServiceType(this : IADsService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceType.call(this, retval)
    end
    def put_ServiceType(this : IADsService*, lnServiceType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceType.call(this, lnServiceType)
    end
    def get_StartType(this : IADsService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartType.call(this, retval)
    end
    def put_StartType(this : IADsService*, lnStartType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartType.call(this, lnStartType)
    end
    def get_Path(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, retval)
    end
    def put_Path(this : IADsService*, bstrPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Path.call(this, bstrPath)
    end
    def get_StartupParameters(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartupParameters.call(this, retval)
    end
    def put_StartupParameters(this : IADsService*, bstrStartupParameters : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartupParameters.call(this, bstrStartupParameters)
    end
    def get_ErrorControl(this : IADsService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorControl.call(this, retval)
    end
    def put_ErrorControl(this : IADsService*, lnErrorControl : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ErrorControl.call(this, lnErrorControl)
    end
    def get_LoadOrderGroup(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LoadOrderGroup.call(this, retval)
    end
    def put_LoadOrderGroup(this : IADsService*, bstrLoadOrderGroup : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LoadOrderGroup.call(this, bstrLoadOrderGroup)
    end
    def get_ServiceAccountName(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceAccountName.call(this, retval)
    end
    def put_ServiceAccountName(this : IADsService*, bstrServiceAccountName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceAccountName.call(this, bstrServiceAccountName)
    end
    def get_ServiceAccountPath(this : IADsService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceAccountPath.call(this, retval)
    end
    def put_ServiceAccountPath(this : IADsService*, bstrServiceAccountPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceAccountPath.call(this, bstrServiceAccountPath)
    end
    def get_Dependencies(this : IADsService*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Dependencies.call(this, retval)
    end
    def put_Dependencies(this : IADsService*, vDependencies : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Dependencies.call(this, vDependencies)
    end

  end

  @[Extern]
  record IADsServiceOperationsVtbl,
    query_interface : Proc(IADsServiceOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsServiceOperations*, UInt32),
    release : Proc(IADsServiceOperations*, UInt32),
    get_type_info_count : Proc(IADsServiceOperations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsServiceOperations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsServiceOperations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsServiceOperations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsServiceOperations*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsServiceOperations*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IADsServiceOperations*, Int32*, Win32cr::Foundation::HRESULT),
    start : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    stop : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    pause : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    continue : Proc(IADsServiceOperations*, Win32cr::Foundation::HRESULT),
    set_password : Proc(IADsServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5d7b33f0-31ca-11cf-a98a-00aa006bc149")]
  record IADsServiceOperations, lpVtbl : IADsServiceOperationsVtbl* do
    GUID = LibC::GUID.new(0x5d7b33f0_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsServiceOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsServiceOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsServiceOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsServiceOperations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsServiceOperations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsServiceOperations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsServiceOperations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsServiceOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsServiceOperations*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsServiceOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsServiceOperations*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsServiceOperations*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Status(this : IADsServiceOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, retval)
    end
    def start(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def continue(this : IADsServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.continue.call(this)
    end
    def set_password(this : IADsServiceOperations*, bstrNewPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_password.call(this, bstrNewPassword)
    end

  end

  @[Extern]
  record IADsFileServiceVtbl,
    query_interface : Proc(IADsFileService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsFileService*, UInt32),
    release : Proc(IADsFileService*, UInt32),
    get_type_info_count : Proc(IADsFileService*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsFileService*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsFileService*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsFileService*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsFileService*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsFileService*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsFileService*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsFileService*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_HostComputer : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HostComputer : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DisplayName : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DisplayName : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Version : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Version : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceType : Proc(IADsFileService*, Int32*, Win32cr::Foundation::HRESULT),
    put_ServiceType : Proc(IADsFileService*, Int32, Win32cr::Foundation::HRESULT),
    get_StartType : Proc(IADsFileService*, Int32*, Win32cr::Foundation::HRESULT),
    put_StartType : Proc(IADsFileService*, Int32, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Path : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_StartupParameters : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_StartupParameters : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ErrorControl : Proc(IADsFileService*, Int32*, Win32cr::Foundation::HRESULT),
    put_ErrorControl : Proc(IADsFileService*, Int32, Win32cr::Foundation::HRESULT),
    get_LoadOrderGroup : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_LoadOrderGroup : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceAccountName : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ServiceAccountName : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ServiceAccountPath : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ServiceAccountPath : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Dependencies : Proc(IADsFileService*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Dependencies : Proc(IADsFileService*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsFileService*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsFileService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MaxUserCount : Proc(IADsFileService*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxUserCount : Proc(IADsFileService*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a89d1900-31ca-11cf-a98a-00aa006bc149")]
  record IADsFileService, lpVtbl : IADsFileServiceVtbl* do
    GUID = LibC::GUID.new(0xa89d1900_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsFileService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsFileService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsFileService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsFileService*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsFileService*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsFileService*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsFileService*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsFileService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsFileService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsFileService*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsFileService*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsFileService*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsFileService*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsFileService*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_HostComputer(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HostComputer.call(this, retval)
    end
    def put_HostComputer(this : IADsFileService*, bstrHostComputer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HostComputer.call(this, bstrHostComputer)
    end
    def get_DisplayName(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayName.call(this, retval)
    end
    def put_DisplayName(this : IADsFileService*, bstrDisplayName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DisplayName.call(this, bstrDisplayName)
    end
    def get_Version(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, retval)
    end
    def put_Version(this : IADsFileService*, bstrVersion : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Version.call(this, bstrVersion)
    end
    def get_ServiceType(this : IADsFileService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceType.call(this, retval)
    end
    def put_ServiceType(this : IADsFileService*, lnServiceType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceType.call(this, lnServiceType)
    end
    def get_StartType(this : IADsFileService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartType.call(this, retval)
    end
    def put_StartType(this : IADsFileService*, lnStartType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartType.call(this, lnStartType)
    end
    def get_Path(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, retval)
    end
    def put_Path(this : IADsFileService*, bstrPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Path.call(this, bstrPath)
    end
    def get_StartupParameters(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartupParameters.call(this, retval)
    end
    def put_StartupParameters(this : IADsFileService*, bstrStartupParameters : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartupParameters.call(this, bstrStartupParameters)
    end
    def get_ErrorControl(this : IADsFileService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorControl.call(this, retval)
    end
    def put_ErrorControl(this : IADsFileService*, lnErrorControl : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ErrorControl.call(this, lnErrorControl)
    end
    def get_LoadOrderGroup(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LoadOrderGroup.call(this, retval)
    end
    def put_LoadOrderGroup(this : IADsFileService*, bstrLoadOrderGroup : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LoadOrderGroup.call(this, bstrLoadOrderGroup)
    end
    def get_ServiceAccountName(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceAccountName.call(this, retval)
    end
    def put_ServiceAccountName(this : IADsFileService*, bstrServiceAccountName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceAccountName.call(this, bstrServiceAccountName)
    end
    def get_ServiceAccountPath(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceAccountPath.call(this, retval)
    end
    def put_ServiceAccountPath(this : IADsFileService*, bstrServiceAccountPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServiceAccountPath.call(this, bstrServiceAccountPath)
    end
    def get_Dependencies(this : IADsFileService*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Dependencies.call(this, retval)
    end
    def put_Dependencies(this : IADsFileService*, vDependencies : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Dependencies.call(this, vDependencies)
    end
    def get_Description(this : IADsFileService*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsFileService*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_MaxUserCount(this : IADsFileService*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxUserCount.call(this, retval)
    end
    def put_MaxUserCount(this : IADsFileService*, lnMaxUserCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxUserCount.call(this, lnMaxUserCount)
    end

  end

  @[Extern]
  record IADsFileServiceOperationsVtbl,
    query_interface : Proc(IADsFileServiceOperations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsFileServiceOperations*, UInt32),
    release : Proc(IADsFileServiceOperations*, UInt32),
    get_type_info_count : Proc(IADsFileServiceOperations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsFileServiceOperations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsFileServiceOperations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsFileServiceOperations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsFileServiceOperations*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsFileServiceOperations*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IADsFileServiceOperations*, Int32*, Win32cr::Foundation::HRESULT),
    start : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    stop : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    pause : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    continue : Proc(IADsFileServiceOperations*, Win32cr::Foundation::HRESULT),
    set_password : Proc(IADsFileServiceOperations*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    sessions : Proc(IADsFileServiceOperations*, Void**, Win32cr::Foundation::HRESULT),
    resources : Proc(IADsFileServiceOperations*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a02ded10-31ca-11cf-a98a-00aa006bc149")]
  record IADsFileServiceOperations, lpVtbl : IADsFileServiceOperationsVtbl* do
    GUID = LibC::GUID.new(0xa02ded10_u32, 0x31ca_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsFileServiceOperations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsFileServiceOperations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsFileServiceOperations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsFileServiceOperations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsFileServiceOperations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsFileServiceOperations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsFileServiceOperations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsFileServiceOperations*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsFileServiceOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsFileServiceOperations*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsFileServiceOperations*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsFileServiceOperations*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsFileServiceOperations*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_Status(this : IADsFileServiceOperations*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, retval)
    end
    def start(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def continue(this : IADsFileServiceOperations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.continue.call(this)
    end
    def set_password(this : IADsFileServiceOperations*, bstrNewPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_password.call(this, bstrNewPassword)
    end
    def sessions(this : IADsFileServiceOperations*, ppSessions : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sessions.call(this, ppSessions)
    end
    def resources(this : IADsFileServiceOperations*, ppResources : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resources.call(this, ppResources)
    end

  end

  @[Extern]
  record IADsFileShareVtbl,
    query_interface : Proc(IADsFileShare*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsFileShare*, UInt32),
    release : Proc(IADsFileShare*, UInt32),
    get_type_info_count : Proc(IADsFileShare*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsFileShare*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsFileShare*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsFileShare*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsFileShare*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsFileShare*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsFileShare*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsFileShare*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentUserCount : Proc(IADsFileShare*, Int32*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HostComputer : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HostComputer : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IADsFileShare*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Path : Proc(IADsFileShare*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MaxUserCount : Proc(IADsFileShare*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxUserCount : Proc(IADsFileShare*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eb6dcaf0-4b83-11cf-a995-00aa006bc149")]
  record IADsFileShare, lpVtbl : IADsFileShareVtbl* do
    GUID = LibC::GUID.new(0xeb6dcaf0_u32, 0x4b83_u16, 0x11cf_u16, StaticArray[0xa9_u8, 0x95_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc1_u8, 0x49_u8])
    def query_interface(this : IADsFileShare*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsFileShare*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsFileShare*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsFileShare*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsFileShare*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsFileShare*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsFileShare*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsFileShare*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsFileShare*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsFileShare*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsFileShare*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsFileShare*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsFileShare*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsFileShare*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_CurrentUserCount(this : IADsFileShare*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentUserCount.call(this, retval)
    end
    def get_Description(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, retval)
    end
    def put_Description(this : IADsFileShare*, bstrDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, bstrDescription)
    end
    def get_HostComputer(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HostComputer.call(this, retval)
    end
    def put_HostComputer(this : IADsFileShare*, bstrHostComputer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HostComputer.call(this, bstrHostComputer)
    end
    def get_Path(this : IADsFileShare*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, retval)
    end
    def put_Path(this : IADsFileShare*, bstrPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Path.call(this, bstrPath)
    end
    def get_MaxUserCount(this : IADsFileShare*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxUserCount.call(this, retval)
    end
    def put_MaxUserCount(this : IADsFileShare*, lnMaxUserCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxUserCount.call(this, lnMaxUserCount)
    end

  end

  @[Extern]
  record IADsSessionVtbl,
    query_interface : Proc(IADsSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsSession*, UInt32),
    release : Proc(IADsSession*, UInt32),
    get_type_info_count : Proc(IADsSession*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsSession*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsSession*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsSession*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsSession*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsSession*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsSession*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsSession*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsSession*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsSession*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsSession*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_User : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_UserPath : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Computer : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ComputerPath : Proc(IADsSession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ConnectTime : Proc(IADsSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_IdleTime : Proc(IADsSession*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("398b7da0-4aab-11cf-ae2c-00aa006ebfb9")]
  record IADsSession, lpVtbl : IADsSessionVtbl* do
    GUID = LibC::GUID.new(0x398b7da0_u32, 0x4aab_u16, 0x11cf_u16, StaticArray[0xae_u8, 0x2c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0xbf_u8, 0xb9_u8])
    def query_interface(this : IADsSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsSession*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsSession*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsSession*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsSession*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsSession*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsSession*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsSession*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsSession*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsSession*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_User(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_User.call(this, retval)
    end
    def get_UserPath(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserPath.call(this, retval)
    end
    def get_Computer(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Computer.call(this, retval)
    end
    def get_ComputerPath(this : IADsSession*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ComputerPath.call(this, retval)
    end
    def get_ConnectTime(this : IADsSession*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectTime.call(this, retval)
    end
    def get_IdleTime(this : IADsSession*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IdleTime.call(this, retval)
    end

  end

  @[Extern]
  record IADsResourceVtbl,
    query_interface : Proc(IADsResource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsResource*, UInt32),
    release : Proc(IADsResource*, UInt32),
    get_type_info_count : Proc(IADsResource*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsResource*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsResource*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsResource*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Class : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GUID : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ADsPath : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Schema : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IADsResource*, Win32cr::Foundation::HRESULT),
    set_info : Proc(IADsResource*, Win32cr::Foundation::HRESULT),
    get : Proc(IADsResource*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put : Proc(IADsResource*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsResource*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ex : Proc(IADsResource*, Int32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_info_ex : Proc(IADsResource*, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    get_User : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_UserPath : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IADsResource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LockCount : Proc(IADsResource*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34a05b20-4aab-11cf-ae2c-00aa006ebfb9")]
  record IADsResource, lpVtbl : IADsResourceVtbl* do
    GUID = LibC::GUID.new(0x34a05b20_u32, 0x4aab_u16, 0x11cf_u16, StaticArray[0xae_u8, 0x2c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6e_u8, 0xbf_u8, 0xb9_u8])
    def query_interface(this : IADsResource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsResource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsResource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsResource*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsResource*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsResource*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsResource*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, retval)
    end
    def get_Class(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Class.call(this, retval)
    end
    def get_GUID(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GUID.call(this, retval)
    end
    def get_ADsPath(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ADsPath.call(this, retval)
    end
    def get_Parent(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, retval)
    end
    def get_Schema(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Schema.call(this, retval)
    end
    def get_info(this : IADsResource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this)
    end
    def set_info(this : IADsResource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_info.call(this)
    end
    def get(this : IADsResource*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, bstrName, pvProp)
    end
    def put(this : IADsResource*, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put.call(this, bstrName, vProp)
    end
    def get_ex(this : IADsResource*, bstrName : Win32cr::Foundation::BSTR, pvProp : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, bstrName, pvProp)
    end
    def put_ex(this : IADsResource*, lnControlCode : Int32, bstrName : Win32cr::Foundation::BSTR, vProp : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ex.call(this, lnControlCode, bstrName, vProp)
    end
    def get_info_ex(this : IADsResource*, vProperties : Win32cr::System::Com::VARIANT, lnReserved : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info_ex.call(this, vProperties, lnReserved)
    end
    def get_User(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_User.call(this, retval)
    end
    def get_UserPath(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserPath.call(this, retval)
    end
    def get_Path(this : IADsResource*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, retval)
    end
    def get_LockCount(this : IADsResource*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LockCount.call(this, retval)
    end

  end

  @[Extern]
  record IADsOpenDSObjectVtbl,
    query_interface : Proc(IADsOpenDSObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsOpenDSObject*, UInt32),
    release : Proc(IADsOpenDSObject*, UInt32),
    get_type_info_count : Proc(IADsOpenDSObject*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsOpenDSObject*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsOpenDSObject*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsOpenDSObject*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open_ds_object : Proc(IADsOpenDSObject*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ddf2891e-0f9c-11d0-8ad4-00c04fd8d503")]
  record IADsOpenDSObject, lpVtbl : IADsOpenDSObjectVtbl* do
    GUID = LibC::GUID.new(0xddf2891e_u32, 0xf9c_u16, 0x11d0_u16, StaticArray[0x8a_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsOpenDSObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsOpenDSObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsOpenDSObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsOpenDSObject*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsOpenDSObject*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsOpenDSObject*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsOpenDSObject*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open_ds_object(this : IADsOpenDSObject*, lpszDNName : Win32cr::Foundation::BSTR, lpszUserName : Win32cr::Foundation::BSTR, lpszPassword : Win32cr::Foundation::BSTR, lnReserved : Int32, ppOleDsObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_ds_object.call(this, lpszDNName, lpszUserName, lpszPassword, lnReserved, ppOleDsObj)
    end

  end

  @[Extern]
  record IDirectoryObjectVtbl,
    query_interface : Proc(IDirectoryObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectoryObject*, UInt32),
    release : Proc(IDirectoryObject*, UInt32),
    get_object_information : Proc(IDirectoryObject*, Win32cr::Networking::ActiveDirectory::ADS_OBJECT_INFO**, Win32cr::Foundation::HRESULT),
    get_object_attributes : Proc(IDirectoryObject*, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO**, UInt32*, Win32cr::Foundation::HRESULT),
    set_object_attributes : Proc(IDirectoryObject*, Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_ds_object : Proc(IDirectoryObject*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    delete_ds_object : Proc(IDirectoryObject*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e798de2c-22e4-11d0-84fe-00c04fd8d503")]
  record IDirectoryObject, lpVtbl : IDirectoryObjectVtbl* do
    GUID = LibC::GUID.new(0xe798de2c_u32, 0x22e4_u16, 0x11d0_u16, StaticArray[0x84_u8, 0xfe_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IDirectoryObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectoryObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectoryObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object_information(this : IDirectoryObject*, ppObjInfo : Win32cr::Networking::ActiveDirectory::ADS_OBJECT_INFO**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_information.call(this, ppObjInfo)
    end
    def get_object_attributes(this : IDirectoryObject*, pAttributeNames : Win32cr::Foundation::PWSTR*, dwNumberAttributes : UInt32, ppAttributeEntries : Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO**, pdwNumAttributesReturned : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_attributes.call(this, pAttributeNames, dwNumberAttributes, ppAttributeEntries, pdwNumAttributesReturned)
    end
    def set_object_attributes(this : IDirectoryObject*, pAttributeEntries : Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*, dwNumAttributes : UInt32, pdwNumAttributesModified : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object_attributes.call(this, pAttributeEntries, dwNumAttributes, pdwNumAttributesModified)
    end
    def create_ds_object(this : IDirectoryObject*, pszRDNName : Win32cr::Foundation::PWSTR, pAttributeEntries : Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*, dwNumAttributes : UInt32, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ds_object.call(this, pszRDNName, pAttributeEntries, dwNumAttributes, ppObject)
    end
    def delete_ds_object(this : IDirectoryObject*, pszRDNName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_ds_object.call(this, pszRDNName)
    end

  end

  @[Extern]
  record IDirectorySearchVtbl,
    query_interface : Proc(IDirectorySearch*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectorySearch*, UInt32),
    release : Proc(IDirectorySearch*, UInt32),
    set_search_preference : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::Ads_searchpref_info*, UInt32, Win32cr::Foundation::HRESULT),
    execute_search : Proc(IDirectorySearch*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE*, Win32cr::Foundation::HRESULT),
    abandon_search : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::HRESULT),
    get_first_row : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::HRESULT),
    get_next_row : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::HRESULT),
    get_previous_row : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::HRESULT),
    get_next_column_name : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_column : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::Ads_search_column*, Win32cr::Foundation::HRESULT),
    free_column : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::Ads_search_column*, Win32cr::Foundation::HRESULT),
    close_search_handle : Proc(IDirectorySearch*, Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("109ba8ec-92f0-11d0-a790-00c04fd8d5a8")]
  record IDirectorySearch, lpVtbl : IDirectorySearchVtbl* do
    GUID = LibC::GUID.new(0x109ba8ec_u32, 0x92f0_u16, 0x11d0_u16, StaticArray[0xa7_u8, 0x90_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
    def query_interface(this : IDirectorySearch*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectorySearch*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectorySearch*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_search_preference(this : IDirectorySearch*, pSearchPrefs : Win32cr::Networking::ActiveDirectory::Ads_searchpref_info*, dwNumPrefs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_search_preference.call(this, pSearchPrefs, dwNumPrefs)
    end
    def execute_search(this : IDirectorySearch*, pszSearchFilter : Win32cr::Foundation::PWSTR, pAttributeNames : Win32cr::Foundation::PWSTR*, dwNumberAttributes : UInt32, phSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_search.call(this, pszSearchFilter, pAttributeNames, dwNumberAttributes, phSearchResult)
    end
    def abandon_search(this : IDirectorySearch*, phSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abandon_search.call(this, phSearchResult)
    end
    def get_first_row(this : IDirectorySearch*, hSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_first_row.call(this, hSearchResult)
    end
    def get_next_row(this : IDirectorySearch*, hSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_row.call(this, hSearchResult)
    end
    def get_previous_row(this : IDirectorySearch*, hSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_row.call(this, hSearchResult)
    end
    def get_next_column_name(this : IDirectorySearch*, hSearchHandle : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, ppszColumnName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_column_name.call(this, hSearchHandle, ppszColumnName)
    end
    def get_column(this : IDirectorySearch*, hSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE, szColumnName : Win32cr::Foundation::PWSTR, pSearchColumn : Win32cr::Networking::ActiveDirectory::Ads_search_column*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column.call(this, hSearchResult, szColumnName, pSearchColumn)
    end
    def free_column(this : IDirectorySearch*, pSearchColumn : Win32cr::Networking::ActiveDirectory::Ads_search_column*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_column.call(this, pSearchColumn)
    end
    def close_search_handle(this : IDirectorySearch*, hSearchResult : Win32cr::Networking::ActiveDirectory::ADS_SEARCH_HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_search_handle.call(this, hSearchResult)
    end

  end

  @[Extern]
  record IDirectorySchemaMgmtVtbl,
    query_interface : Proc(IDirectorySchemaMgmt*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectorySchemaMgmt*, UInt32),
    release : Proc(IDirectorySchemaMgmt*, UInt32),
    enum_attributes : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF**, UInt32*, Win32cr::Foundation::HRESULT),
    create_attribute_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF*, Win32cr::Foundation::HRESULT),
    write_attribute_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF*, Win32cr::Foundation::HRESULT),
    delete_attribute_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enum_classes : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF**, UInt32*, Win32cr::Foundation::HRESULT),
    write_class_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF*, Win32cr::Foundation::HRESULT),
    create_class_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF*, Win32cr::Foundation::HRESULT),
    delete_class_definition : Proc(IDirectorySchemaMgmt*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("75db3b9c-a4d8-11d0-a79c-00c04fd8d5a8")]
  record IDirectorySchemaMgmt, lpVtbl : IDirectorySchemaMgmtVtbl* do
    GUID = LibC::GUID.new(0x75db3b9c_u32, 0xa4d8_u16, 0x11d0_u16, StaticArray[0xa7_u8, 0x9c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
    def query_interface(this : IDirectorySchemaMgmt*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectorySchemaMgmt*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectorySchemaMgmt*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_attributes(this : IDirectorySchemaMgmt*, ppszAttrNames : Win32cr::Foundation::PWSTR*, dwNumAttributes : UInt32, ppAttrDefinition : Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF**, pdwNumAttributes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_attributes.call(this, ppszAttrNames, dwNumAttributes, ppAttrDefinition, pdwNumAttributes)
    end
    def create_attribute_definition(this : IDirectorySchemaMgmt*, pszAttributeName : Win32cr::Foundation::PWSTR, pAttributeDefinition : Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_attribute_definition.call(this, pszAttributeName, pAttributeDefinition)
    end
    def write_attribute_definition(this : IDirectorySchemaMgmt*, pszAttributeName : Win32cr::Foundation::PWSTR, pAttributeDefinition : Win32cr::Networking::ActiveDirectory::ADS_ATTR_DEF*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_attribute_definition.call(this, pszAttributeName, pAttributeDefinition)
    end
    def delete_attribute_definition(this : IDirectorySchemaMgmt*, pszAttributeName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_attribute_definition.call(this, pszAttributeName)
    end
    def enum_classes(this : IDirectorySchemaMgmt*, ppszClassNames : Win32cr::Foundation::PWSTR*, dwNumClasses : UInt32, ppClassDefinition : Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF**, pdwNumClasses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_classes.call(this, ppszClassNames, dwNumClasses, ppClassDefinition, pdwNumClasses)
    end
    def write_class_definition(this : IDirectorySchemaMgmt*, pszClassName : Win32cr::Foundation::PWSTR, pClassDefinition : Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_class_definition.call(this, pszClassName, pClassDefinition)
    end
    def create_class_definition(this : IDirectorySchemaMgmt*, pszClassName : Win32cr::Foundation::PWSTR, pClassDefinition : Win32cr::Networking::ActiveDirectory::ADS_CLASS_DEF*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_class_definition.call(this, pszClassName, pClassDefinition)
    end
    def delete_class_definition(this : IDirectorySchemaMgmt*, pszClassName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_class_definition.call(this, pszClassName)
    end

  end

  @[Extern]
  record IADsAggregateeVtbl,
    query_interface : Proc(IADsAggregatee*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsAggregatee*, UInt32),
    release : Proc(IADsAggregatee*, UInt32),
    connect_as_aggregatee : Proc(IADsAggregatee*, Void*, Win32cr::Foundation::HRESULT),
    disconnect_as_aggregatee : Proc(IADsAggregatee*, Win32cr::Foundation::HRESULT),
    relinquish_interface : Proc(IADsAggregatee*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    restore_interface : Proc(IADsAggregatee*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1346ce8c-9039-11d0-8528-00c04fd8d503")]
  record IADsAggregatee, lpVtbl : IADsAggregateeVtbl* do
    GUID = LibC::GUID.new(0x1346ce8c_u32, 0x9039_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x28_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsAggregatee*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsAggregatee*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsAggregatee*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def connect_as_aggregatee(this : IADsAggregatee*, pOuterUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_as_aggregatee.call(this, pOuterUnknown)
    end
    def disconnect_as_aggregatee(this : IADsAggregatee*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_as_aggregatee.call(this)
    end
    def relinquish_interface(this : IADsAggregatee*, riid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.relinquish_interface.call(this, riid)
    end
    def restore_interface(this : IADsAggregatee*, riid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_interface.call(this, riid)
    end

  end

  @[Extern]
  record IADsAggregatorVtbl,
    query_interface : Proc(IADsAggregator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsAggregator*, UInt32),
    release : Proc(IADsAggregator*, UInt32),
    connect_as_aggregator : Proc(IADsAggregator*, Void*, Win32cr::Foundation::HRESULT),
    disconnect_as_aggregator : Proc(IADsAggregator*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("52db5fb0-941f-11d0-8529-00c04fd8d503")]
  record IADsAggregator, lpVtbl : IADsAggregatorVtbl* do
    GUID = LibC::GUID.new(0x52db5fb0_u32, 0x941f_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x29_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsAggregator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsAggregator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsAggregator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def connect_as_aggregator(this : IADsAggregator*, pAggregatee : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_as_aggregator.call(this, pAggregatee)
    end
    def disconnect_as_aggregator(this : IADsAggregator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_as_aggregator.call(this)
    end

  end

  @[Extern]
  record IADsAccessControlEntryVtbl,
    query_interface : Proc(IADsAccessControlEntry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsAccessControlEntry*, UInt32),
    release : Proc(IADsAccessControlEntry*, UInt32),
    get_type_info_count : Proc(IADsAccessControlEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsAccessControlEntry*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsAccessControlEntry*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsAccessControlEntry*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AccessMask : Proc(IADsAccessControlEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_AccessMask : Proc(IADsAccessControlEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_AceType : Proc(IADsAccessControlEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_AceType : Proc(IADsAccessControlEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_AceFlags : Proc(IADsAccessControlEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_AceFlags : Proc(IADsAccessControlEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_Flags : Proc(IADsAccessControlEntry*, Int32*, Win32cr::Foundation::HRESULT),
    put_Flags : Proc(IADsAccessControlEntry*, Int32, Win32cr::Foundation::HRESULT),
    get_ObjectType : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ObjectType : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_InheritedObjectType : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_InheritedObjectType : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Trustee : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Trustee : Proc(IADsAccessControlEntry*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b4f3a14c-9bdd-11d0-852c-00c04fd8d503")]
  record IADsAccessControlEntry, lpVtbl : IADsAccessControlEntryVtbl* do
    GUID = LibC::GUID.new(0xb4f3a14c_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsAccessControlEntry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsAccessControlEntry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsAccessControlEntry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsAccessControlEntry*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsAccessControlEntry*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsAccessControlEntry*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsAccessControlEntry*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AccessMask(this : IADsAccessControlEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AccessMask.call(this, retval)
    end
    def put_AccessMask(this : IADsAccessControlEntry*, lnAccessMask : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AccessMask.call(this, lnAccessMask)
    end
    def get_AceType(this : IADsAccessControlEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AceType.call(this, retval)
    end
    def put_AceType(this : IADsAccessControlEntry*, lnAceType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AceType.call(this, lnAceType)
    end
    def get_AceFlags(this : IADsAccessControlEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AceFlags.call(this, retval)
    end
    def put_AceFlags(this : IADsAccessControlEntry*, lnAceFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AceFlags.call(this, lnAceFlags)
    end
    def get_Flags(this : IADsAccessControlEntry*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Flags.call(this, retval)
    end
    def put_Flags(this : IADsAccessControlEntry*, lnFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Flags.call(this, lnFlags)
    end
    def get_ObjectType(this : IADsAccessControlEntry*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectType.call(this, retval)
    end
    def put_ObjectType(this : IADsAccessControlEntry*, bstrObjectType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ObjectType.call(this, bstrObjectType)
    end
    def get_InheritedObjectType(this : IADsAccessControlEntry*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InheritedObjectType.call(this, retval)
    end
    def put_InheritedObjectType(this : IADsAccessControlEntry*, bstrInheritedObjectType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InheritedObjectType.call(this, bstrInheritedObjectType)
    end
    def get_Trustee(this : IADsAccessControlEntry*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Trustee.call(this, retval)
    end
    def put_Trustee(this : IADsAccessControlEntry*, bstrTrustee : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Trustee.call(this, bstrTrustee)
    end

  end

  @[Extern]
  record IADsAccessControlListVtbl,
    query_interface : Proc(IADsAccessControlList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsAccessControlList*, UInt32),
    release : Proc(IADsAccessControlList*, UInt32),
    get_type_info_count : Proc(IADsAccessControlList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsAccessControlList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsAccessControlList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsAccessControlList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AclRevision : Proc(IADsAccessControlList*, Int32*, Win32cr::Foundation::HRESULT),
    put_AclRevision : Proc(IADsAccessControlList*, Int32, Win32cr::Foundation::HRESULT),
    get_AceCount : Proc(IADsAccessControlList*, Int32*, Win32cr::Foundation::HRESULT),
    put_AceCount : Proc(IADsAccessControlList*, Int32, Win32cr::Foundation::HRESULT),
    add_ace : Proc(IADsAccessControlList*, Void*, Win32cr::Foundation::HRESULT),
    remove_ace : Proc(IADsAccessControlList*, Void*, Win32cr::Foundation::HRESULT),
    copy_access_list : Proc(IADsAccessControlList*, Void**, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IADsAccessControlList*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b7ee91cc-9bdd-11d0-852c-00c04fd8d503")]
  record IADsAccessControlList, lpVtbl : IADsAccessControlListVtbl* do
    GUID = LibC::GUID.new(0xb7ee91cc_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsAccessControlList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsAccessControlList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsAccessControlList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsAccessControlList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsAccessControlList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsAccessControlList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsAccessControlList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AclRevision(this : IADsAccessControlList*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AclRevision.call(this, retval)
    end
    def put_AclRevision(this : IADsAccessControlList*, lnAclRevision : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AclRevision.call(this, lnAclRevision)
    end
    def get_AceCount(this : IADsAccessControlList*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AceCount.call(this, retval)
    end
    def put_AceCount(this : IADsAccessControlList*, lnAceCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AceCount.call(this, lnAceCount)
    end
    def add_ace(this : IADsAccessControlList*, pAccessControlEntry : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_ace.call(this, pAccessControlEntry)
    end
    def remove_ace(this : IADsAccessControlList*, pAccessControlEntry : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_ace.call(this, pAccessControlEntry)
    end
    def copy_access_list(this : IADsAccessControlList*, ppAccessControlList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_access_list.call(this, ppAccessControlList)
    end
    def get__NewEnum(this : IADsAccessControlList*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, retval)
    end

  end

  @[Extern]
  record IADsSecurityDescriptorVtbl,
    query_interface : Proc(IADsSecurityDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsSecurityDescriptor*, UInt32),
    release : Proc(IADsSecurityDescriptor*, UInt32),
    get_type_info_count : Proc(IADsSecurityDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsSecurityDescriptor*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsSecurityDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsSecurityDescriptor*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Revision : Proc(IADsSecurityDescriptor*, Int32*, Win32cr::Foundation::HRESULT),
    put_Revision : Proc(IADsSecurityDescriptor*, Int32, Win32cr::Foundation::HRESULT),
    get_Control : Proc(IADsSecurityDescriptor*, Int32*, Win32cr::Foundation::HRESULT),
    put_Control : Proc(IADsSecurityDescriptor*, Int32, Win32cr::Foundation::HRESULT),
    get_Owner : Proc(IADsSecurityDescriptor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Owner : Proc(IADsSecurityDescriptor*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OwnerDefaulted : Proc(IADsSecurityDescriptor*, Int16*, Win32cr::Foundation::HRESULT),
    put_OwnerDefaulted : Proc(IADsSecurityDescriptor*, Int16, Win32cr::Foundation::HRESULT),
    get_Group : Proc(IADsSecurityDescriptor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Group : Proc(IADsSecurityDescriptor*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_GroupDefaulted : Proc(IADsSecurityDescriptor*, Int16*, Win32cr::Foundation::HRESULT),
    put_GroupDefaulted : Proc(IADsSecurityDescriptor*, Int16, Win32cr::Foundation::HRESULT),
    get_DiscretionaryAcl : Proc(IADsSecurityDescriptor*, Void**, Win32cr::Foundation::HRESULT),
    put_DiscretionaryAcl : Proc(IADsSecurityDescriptor*, Void*, Win32cr::Foundation::HRESULT),
    get_DaclDefaulted : Proc(IADsSecurityDescriptor*, Int16*, Win32cr::Foundation::HRESULT),
    put_DaclDefaulted : Proc(IADsSecurityDescriptor*, Int16, Win32cr::Foundation::HRESULT),
    get_SystemAcl : Proc(IADsSecurityDescriptor*, Void**, Win32cr::Foundation::HRESULT),
    put_SystemAcl : Proc(IADsSecurityDescriptor*, Void*, Win32cr::Foundation::HRESULT),
    get_SaclDefaulted : Proc(IADsSecurityDescriptor*, Int16*, Win32cr::Foundation::HRESULT),
    put_SaclDefaulted : Proc(IADsSecurityDescriptor*, Int16, Win32cr::Foundation::HRESULT),
    copy_security_descriptor : Proc(IADsSecurityDescriptor*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b8c787ca-9bdd-11d0-852c-00c04fd8d503")]
  record IADsSecurityDescriptor, lpVtbl : IADsSecurityDescriptorVtbl* do
    GUID = LibC::GUID.new(0xb8c787ca_u32, 0x9bdd_u16, 0x11d0_u16, StaticArray[0x85_u8, 0x2c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsSecurityDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsSecurityDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsSecurityDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsSecurityDescriptor*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsSecurityDescriptor*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsSecurityDescriptor*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsSecurityDescriptor*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Revision(this : IADsSecurityDescriptor*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Revision.call(this, retval)
    end
    def put_Revision(this : IADsSecurityDescriptor*, lnRevision : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Revision.call(this, lnRevision)
    end
    def get_Control(this : IADsSecurityDescriptor*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Control.call(this, retval)
    end
    def put_Control(this : IADsSecurityDescriptor*, lnControl : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Control.call(this, lnControl)
    end
    def get_Owner(this : IADsSecurityDescriptor*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Owner.call(this, retval)
    end
    def put_Owner(this : IADsSecurityDescriptor*, bstrOwner : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Owner.call(this, bstrOwner)
    end
    def get_OwnerDefaulted(this : IADsSecurityDescriptor*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OwnerDefaulted.call(this, retval)
    end
    def put_OwnerDefaulted(this : IADsSecurityDescriptor*, fOwnerDefaulted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OwnerDefaulted.call(this, fOwnerDefaulted)
    end
    def get_Group(this : IADsSecurityDescriptor*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Group.call(this, retval)
    end
    def put_Group(this : IADsSecurityDescriptor*, bstrGroup : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Group.call(this, bstrGroup)
    end
    def get_GroupDefaulted(this : IADsSecurityDescriptor*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GroupDefaulted.call(this, retval)
    end
    def put_GroupDefaulted(this : IADsSecurityDescriptor*, fGroupDefaulted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GroupDefaulted.call(this, fGroupDefaulted)
    end
    def get_DiscretionaryAcl(this : IADsSecurityDescriptor*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiscretionaryAcl.call(this, retval)
    end
    def put_DiscretionaryAcl(this : IADsSecurityDescriptor*, pDiscretionaryAcl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiscretionaryAcl.call(this, pDiscretionaryAcl)
    end
    def get_DaclDefaulted(this : IADsSecurityDescriptor*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DaclDefaulted.call(this, retval)
    end
    def put_DaclDefaulted(this : IADsSecurityDescriptor*, fDaclDefaulted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DaclDefaulted.call(this, fDaclDefaulted)
    end
    def get_SystemAcl(this : IADsSecurityDescriptor*, retval : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SystemAcl.call(this, retval)
    end
    def put_SystemAcl(this : IADsSecurityDescriptor*, pSystemAcl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SystemAcl.call(this, pSystemAcl)
    end
    def get_SaclDefaulted(this : IADsSecurityDescriptor*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SaclDefaulted.call(this, retval)
    end
    def put_SaclDefaulted(this : IADsSecurityDescriptor*, fSaclDefaulted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SaclDefaulted.call(this, fSaclDefaulted)
    end
    def copy_security_descriptor(this : IADsSecurityDescriptor*, ppSecurityDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_security_descriptor.call(this, ppSecurityDescriptor)
    end

  end

  @[Extern]
  record IADsLargeIntegerVtbl,
    query_interface : Proc(IADsLargeInteger*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsLargeInteger*, UInt32),
    release : Proc(IADsLargeInteger*, UInt32),
    get_type_info_count : Proc(IADsLargeInteger*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsLargeInteger*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsLargeInteger*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsLargeInteger*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_HighPart : Proc(IADsLargeInteger*, Int32*, Win32cr::Foundation::HRESULT),
    put_HighPart : Proc(IADsLargeInteger*, Int32, Win32cr::Foundation::HRESULT),
    get_LowPart : Proc(IADsLargeInteger*, Int32*, Win32cr::Foundation::HRESULT),
    put_LowPart : Proc(IADsLargeInteger*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9068270b-0939-11d1-8be1-00c04fd8d503")]
  record IADsLargeInteger, lpVtbl : IADsLargeIntegerVtbl* do
    GUID = LibC::GUID.new(0x9068270b_u32, 0x939_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0xe1_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0x3_u8])
    def query_interface(this : IADsLargeInteger*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsLargeInteger*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsLargeInteger*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsLargeInteger*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsLargeInteger*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsLargeInteger*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsLargeInteger*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_HighPart(this : IADsLargeInteger*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HighPart.call(this, retval)
    end
    def put_HighPart(this : IADsLargeInteger*, lnHighPart : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HighPart.call(this, lnHighPart)
    end
    def get_LowPart(this : IADsLargeInteger*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LowPart.call(this, retval)
    end
    def put_LowPart(this : IADsLargeInteger*, lnLowPart : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LowPart.call(this, lnLowPart)
    end

  end

  @[Extern]
  record IADsNameTranslateVtbl,
    query_interface : Proc(IADsNameTranslate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsNameTranslate*, UInt32),
    release : Proc(IADsNameTranslate*, UInt32),
    get_type_info_count : Proc(IADsNameTranslate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsNameTranslate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsNameTranslate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsNameTranslate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ChaseReferral : Proc(IADsNameTranslate*, Int32, Win32cr::Foundation::HRESULT),
    init : Proc(IADsNameTranslate*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    init_ex : Proc(IADsNameTranslate*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set : Proc(IADsNameTranslate*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get : Proc(IADsNameTranslate*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_ex : Proc(IADsNameTranslate*, Int32, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ex : Proc(IADsNameTranslate*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1b272a3-3625-11d1-a3a4-00c04fb950dc")]
  record IADsNameTranslate, lpVtbl : IADsNameTranslateVtbl* do
    GUID = LibC::GUID.new(0xb1b272a3_u32, 0x3625_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsNameTranslate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsNameTranslate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsNameTranslate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsNameTranslate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsNameTranslate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsNameTranslate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsNameTranslate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_ChaseReferral(this : IADsNameTranslate*, lnChaseReferral : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ChaseReferral.call(this, lnChaseReferral)
    end
    def init(this : IADsNameTranslate*, lnSetType : Int32, bstrADsPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, lnSetType, bstrADsPath)
    end
    def init_ex(this : IADsNameTranslate*, lnSetType : Int32, bstrADsPath : Win32cr::Foundation::BSTR, bstrUserID : Win32cr::Foundation::BSTR, bstrDomain : Win32cr::Foundation::BSTR, bstrPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_ex.call(this, lnSetType, bstrADsPath, bstrUserID, bstrDomain, bstrPassword)
    end
    def set(this : IADsNameTranslate*, lnSetType : Int32, bstrADsPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set.call(this, lnSetType, bstrADsPath)
    end
    def get(this : IADsNameTranslate*, lnFormatType : Int32, pbstrADsPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, lnFormatType, pbstrADsPath)
    end
    def set_ex(this : IADsNameTranslate*, lnFormatType : Int32, pvar : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ex.call(this, lnFormatType, pvar)
    end
    def get_ex(this : IADsNameTranslate*, lnFormatType : Int32, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ex.call(this, lnFormatType, pvar)
    end

  end

  @[Extern]
  record IADsCaseIgnoreListVtbl,
    query_interface : Proc(IADsCaseIgnoreList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsCaseIgnoreList*, UInt32),
    release : Proc(IADsCaseIgnoreList*, UInt32),
    get_type_info_count : Proc(IADsCaseIgnoreList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsCaseIgnoreList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsCaseIgnoreList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsCaseIgnoreList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CaseIgnoreList : Proc(IADsCaseIgnoreList*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_CaseIgnoreList : Proc(IADsCaseIgnoreList*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7b66b533-4680-11d1-a3b4-00c04fb950dc")]
  record IADsCaseIgnoreList, lpVtbl : IADsCaseIgnoreListVtbl* do
    GUID = LibC::GUID.new(0x7b66b533_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsCaseIgnoreList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsCaseIgnoreList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsCaseIgnoreList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsCaseIgnoreList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsCaseIgnoreList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsCaseIgnoreList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsCaseIgnoreList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CaseIgnoreList(this : IADsCaseIgnoreList*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CaseIgnoreList.call(this, retval)
    end
    def put_CaseIgnoreList(this : IADsCaseIgnoreList*, vCaseIgnoreList : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CaseIgnoreList.call(this, vCaseIgnoreList)
    end

  end

  @[Extern]
  record IADsFaxNumberVtbl,
    query_interface : Proc(IADsFaxNumber*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsFaxNumber*, UInt32),
    release : Proc(IADsFaxNumber*, UInt32),
    get_type_info_count : Proc(IADsFaxNumber*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsFaxNumber*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsFaxNumber*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsFaxNumber*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TelephoneNumber : Proc(IADsFaxNumber*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_TelephoneNumber : Proc(IADsFaxNumber*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Parameters : Proc(IADsFaxNumber*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Parameters : Proc(IADsFaxNumber*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a910dea9-4680-11d1-a3b4-00c04fb950dc")]
  record IADsFaxNumber, lpVtbl : IADsFaxNumberVtbl* do
    GUID = LibC::GUID.new(0xa910dea9_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsFaxNumber*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsFaxNumber*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsFaxNumber*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsFaxNumber*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsFaxNumber*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsFaxNumber*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsFaxNumber*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TelephoneNumber(this : IADsFaxNumber*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TelephoneNumber.call(this, retval)
    end
    def put_TelephoneNumber(this : IADsFaxNumber*, bstrTelephoneNumber : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TelephoneNumber.call(this, bstrTelephoneNumber)
    end
    def get_Parameters(this : IADsFaxNumber*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parameters.call(this, retval)
    end
    def put_Parameters(this : IADsFaxNumber*, vParameters : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Parameters.call(this, vParameters)
    end

  end

  @[Extern]
  record IADsNetAddressVtbl,
    query_interface : Proc(IADsNetAddress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsNetAddress*, UInt32),
    release : Proc(IADsNetAddress*, UInt32),
    get_type_info_count : Proc(IADsNetAddress*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsNetAddress*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsNetAddress*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsNetAddress*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AddressType : Proc(IADsNetAddress*, Int32*, Win32cr::Foundation::HRESULT),
    put_AddressType : Proc(IADsNetAddress*, Int32, Win32cr::Foundation::HRESULT),
    get_Address : Proc(IADsNetAddress*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Address : Proc(IADsNetAddress*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b21a50a9-4080-11d1-a3ac-00c04fb950dc")]
  record IADsNetAddress, lpVtbl : IADsNetAddressVtbl* do
    GUID = LibC::GUID.new(0xb21a50a9_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsNetAddress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsNetAddress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsNetAddress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsNetAddress*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsNetAddress*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsNetAddress*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsNetAddress*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AddressType(this : IADsNetAddress*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressType.call(this, retval)
    end
    def put_AddressType(this : IADsNetAddress*, lnAddressType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AddressType.call(this, lnAddressType)
    end
    def get_Address(this : IADsNetAddress*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, retval)
    end
    def put_Address(this : IADsNetAddress*, vAddress : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Address.call(this, vAddress)
    end

  end

  @[Extern]
  record IADsOctetListVtbl,
    query_interface : Proc(IADsOctetList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsOctetList*, UInt32),
    release : Proc(IADsOctetList*, UInt32),
    get_type_info_count : Proc(IADsOctetList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsOctetList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsOctetList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsOctetList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_OctetList : Proc(IADsOctetList*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_OctetList : Proc(IADsOctetList*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7b28b80f-4680-11d1-a3b4-00c04fb950dc")]
  record IADsOctetList, lpVtbl : IADsOctetListVtbl* do
    GUID = LibC::GUID.new(0x7b28b80f_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsOctetList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsOctetList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsOctetList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsOctetList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsOctetList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsOctetList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsOctetList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_OctetList(this : IADsOctetList*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OctetList.call(this, retval)
    end
    def put_OctetList(this : IADsOctetList*, vOctetList : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OctetList.call(this, vOctetList)
    end

  end

  @[Extern]
  record IADsEmailVtbl,
    query_interface : Proc(IADsEmail*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsEmail*, UInt32),
    release : Proc(IADsEmail*, UInt32),
    get_type_info_count : Proc(IADsEmail*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsEmail*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsEmail*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsEmail*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IADsEmail*, Int32*, Win32cr::Foundation::HRESULT),
    put_Type : Proc(IADsEmail*, Int32, Win32cr::Foundation::HRESULT),
    get_Address : Proc(IADsEmail*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Address : Proc(IADsEmail*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("97af011a-478e-11d1-a3b4-00c04fb950dc")]
  record IADsEmail, lpVtbl : IADsEmailVtbl* do
    GUID = LibC::GUID.new(0x97af011a_u32, 0x478e_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsEmail*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsEmail*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsEmail*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsEmail*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsEmail*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsEmail*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsEmail*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IADsEmail*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, retval)
    end
    def put_Type(this : IADsEmail*, lnType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Type.call(this, lnType)
    end
    def get_Address(this : IADsEmail*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, retval)
    end
    def put_Address(this : IADsEmail*, bstrAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Address.call(this, bstrAddress)
    end

  end

  @[Extern]
  record IADsPathVtbl,
    query_interface : Proc(IADsPath*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPath*, UInt32),
    release : Proc(IADsPath*, UInt32),
    get_type_info_count : Proc(IADsPath*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPath*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPath*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPath*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IADsPath*, Int32*, Win32cr::Foundation::HRESULT),
    put_Type : Proc(IADsPath*, Int32, Win32cr::Foundation::HRESULT),
    get_VolumeName : Proc(IADsPath*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_VolumeName : Proc(IADsPath*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IADsPath*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Path : Proc(IADsPath*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b287fcd5-4080-11d1-a3ac-00c04fb950dc")]
  record IADsPath, lpVtbl : IADsPathVtbl* do
    GUID = LibC::GUID.new(0xb287fcd5_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsPath*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPath*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPath*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPath*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPath*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPath*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPath*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IADsPath*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, retval)
    end
    def put_Type(this : IADsPath*, lnType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Type.call(this, lnType)
    end
    def get_VolumeName(this : IADsPath*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeName.call(this, retval)
    end
    def put_VolumeName(this : IADsPath*, bstrVolumeName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VolumeName.call(this, bstrVolumeName)
    end
    def get_Path(this : IADsPath*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, retval)
    end
    def put_Path(this : IADsPath*, bstrPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Path.call(this, bstrPath)
    end

  end

  @[Extern]
  record IADsReplicaPointerVtbl,
    query_interface : Proc(IADsReplicaPointer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsReplicaPointer*, UInt32),
    release : Proc(IADsReplicaPointer*, UInt32),
    get_type_info_count : Proc(IADsReplicaPointer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsReplicaPointer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsReplicaPointer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsReplicaPointer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ServerName : Proc(IADsReplicaPointer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ServerName : Proc(IADsReplicaPointer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ReplicaType : Proc(IADsReplicaPointer*, Int32*, Win32cr::Foundation::HRESULT),
    put_ReplicaType : Proc(IADsReplicaPointer*, Int32, Win32cr::Foundation::HRESULT),
    get_ReplicaNumber : Proc(IADsReplicaPointer*, Int32*, Win32cr::Foundation::HRESULT),
    put_ReplicaNumber : Proc(IADsReplicaPointer*, Int32, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IADsReplicaPointer*, Int32*, Win32cr::Foundation::HRESULT),
    put_Count : Proc(IADsReplicaPointer*, Int32, Win32cr::Foundation::HRESULT),
    get_ReplicaAddressHints : Proc(IADsReplicaPointer*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ReplicaAddressHints : Proc(IADsReplicaPointer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f60fb803-4080-11d1-a3ac-00c04fb950dc")]
  record IADsReplicaPointer, lpVtbl : IADsReplicaPointerVtbl* do
    GUID = LibC::GUID.new(0xf60fb803_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsReplicaPointer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsReplicaPointer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsReplicaPointer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsReplicaPointer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsReplicaPointer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsReplicaPointer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsReplicaPointer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ServerName(this : IADsReplicaPointer*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServerName.call(this, retval)
    end
    def put_ServerName(this : IADsReplicaPointer*, bstrServerName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServerName.call(this, bstrServerName)
    end
    def get_ReplicaType(this : IADsReplicaPointer*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReplicaType.call(this, retval)
    end
    def put_ReplicaType(this : IADsReplicaPointer*, lnReplicaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReplicaType.call(this, lnReplicaType)
    end
    def get_ReplicaNumber(this : IADsReplicaPointer*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReplicaNumber.call(this, retval)
    end
    def put_ReplicaNumber(this : IADsReplicaPointer*, lnReplicaNumber : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReplicaNumber.call(this, lnReplicaNumber)
    end
    def get_Count(this : IADsReplicaPointer*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, retval)
    end
    def put_Count(this : IADsReplicaPointer*, lnCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Count.call(this, lnCount)
    end
    def get_ReplicaAddressHints(this : IADsReplicaPointer*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReplicaAddressHints.call(this, retval)
    end
    def put_ReplicaAddressHints(this : IADsReplicaPointer*, vReplicaAddressHints : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReplicaAddressHints.call(this, vReplicaAddressHints)
    end

  end

  @[Extern]
  record IADsAclVtbl,
    query_interface : Proc(IADsAcl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsAcl*, UInt32),
    release : Proc(IADsAcl*, UInt32),
    get_type_info_count : Proc(IADsAcl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsAcl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsAcl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsAcl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ProtectedAttrName : Proc(IADsAcl*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProtectedAttrName : Proc(IADsAcl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SubjectName : Proc(IADsAcl*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SubjectName : Proc(IADsAcl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Privileges : Proc(IADsAcl*, Int32*, Win32cr::Foundation::HRESULT),
    put_Privileges : Proc(IADsAcl*, Int32, Win32cr::Foundation::HRESULT),
    copy_acl : Proc(IADsAcl*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8452d3ab-0869-11d1-a377-00c04fb950dc")]
  record IADsAcl, lpVtbl : IADsAclVtbl* do
    GUID = LibC::GUID.new(0x8452d3ab_u32, 0x869_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0x77_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsAcl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsAcl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsAcl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsAcl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsAcl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsAcl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsAcl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ProtectedAttrName(this : IADsAcl*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProtectedAttrName.call(this, retval)
    end
    def put_ProtectedAttrName(this : IADsAcl*, bstrProtectedAttrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProtectedAttrName.call(this, bstrProtectedAttrName)
    end
    def get_SubjectName(this : IADsAcl*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubjectName.call(this, retval)
    end
    def put_SubjectName(this : IADsAcl*, bstrSubjectName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SubjectName.call(this, bstrSubjectName)
    end
    def get_Privileges(this : IADsAcl*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Privileges.call(this, retval)
    end
    def put_Privileges(this : IADsAcl*, lnPrivileges : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Privileges.call(this, lnPrivileges)
    end
    def copy_acl(this : IADsAcl*, ppAcl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_acl.call(this, ppAcl)
    end

  end

  @[Extern]
  record IADsTimestampVtbl,
    query_interface : Proc(IADsTimestamp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsTimestamp*, UInt32),
    release : Proc(IADsTimestamp*, UInt32),
    get_type_info_count : Proc(IADsTimestamp*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsTimestamp*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsTimestamp*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsTimestamp*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_WholeSeconds : Proc(IADsTimestamp*, Int32*, Win32cr::Foundation::HRESULT),
    put_WholeSeconds : Proc(IADsTimestamp*, Int32, Win32cr::Foundation::HRESULT),
    get_EventID : Proc(IADsTimestamp*, Int32*, Win32cr::Foundation::HRESULT),
    put_EventID : Proc(IADsTimestamp*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b2f5a901-4080-11d1-a3ac-00c04fb950dc")]
  record IADsTimestamp, lpVtbl : IADsTimestampVtbl* do
    GUID = LibC::GUID.new(0xb2f5a901_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsTimestamp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsTimestamp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsTimestamp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsTimestamp*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsTimestamp*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsTimestamp*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsTimestamp*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_WholeSeconds(this : IADsTimestamp*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WholeSeconds.call(this, retval)
    end
    def put_WholeSeconds(this : IADsTimestamp*, lnWholeSeconds : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WholeSeconds.call(this, lnWholeSeconds)
    end
    def get_EventID(this : IADsTimestamp*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventID.call(this, retval)
    end
    def put_EventID(this : IADsTimestamp*, lnEventID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EventID.call(this, lnEventID)
    end

  end

  @[Extern]
  record IADsPostalAddressVtbl,
    query_interface : Proc(IADsPostalAddress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPostalAddress*, UInt32),
    release : Proc(IADsPostalAddress*, UInt32),
    get_type_info_count : Proc(IADsPostalAddress*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPostalAddress*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPostalAddress*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPostalAddress*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PostalAddress : Proc(IADsPostalAddress*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_PostalAddress : Proc(IADsPostalAddress*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7adecf29-4680-11d1-a3b4-00c04fb950dc")]
  record IADsPostalAddress, lpVtbl : IADsPostalAddressVtbl* do
    GUID = LibC::GUID.new(0x7adecf29_u32, 0x4680_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xb4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsPostalAddress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPostalAddress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPostalAddress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPostalAddress*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPostalAddress*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPostalAddress*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPostalAddress*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_PostalAddress(this : IADsPostalAddress*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostalAddress.call(this, retval)
    end
    def put_PostalAddress(this : IADsPostalAddress*, vPostalAddress : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostalAddress.call(this, vPostalAddress)
    end

  end

  @[Extern]
  record IADsBackLinkVtbl,
    query_interface : Proc(IADsBackLink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsBackLink*, UInt32),
    release : Proc(IADsBackLink*, UInt32),
    get_type_info_count : Proc(IADsBackLink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsBackLink*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsBackLink*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsBackLink*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_RemoteID : Proc(IADsBackLink*, Int32*, Win32cr::Foundation::HRESULT),
    put_RemoteID : Proc(IADsBackLink*, Int32, Win32cr::Foundation::HRESULT),
    get_ObjectName : Proc(IADsBackLink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ObjectName : Proc(IADsBackLink*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fd1302bd-4080-11d1-a3ac-00c04fb950dc")]
  record IADsBackLink, lpVtbl : IADsBackLinkVtbl* do
    GUID = LibC::GUID.new(0xfd1302bd_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsBackLink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsBackLink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsBackLink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsBackLink*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsBackLink*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsBackLink*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsBackLink*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_RemoteID(this : IADsBackLink*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RemoteID.call(this, retval)
    end
    def put_RemoteID(this : IADsBackLink*, lnRemoteID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RemoteID.call(this, lnRemoteID)
    end
    def get_ObjectName(this : IADsBackLink*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectName.call(this, retval)
    end
    def put_ObjectName(this : IADsBackLink*, bstrObjectName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ObjectName.call(this, bstrObjectName)
    end

  end

  @[Extern]
  record IADsTypedNameVtbl,
    query_interface : Proc(IADsTypedName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsTypedName*, UInt32),
    release : Proc(IADsTypedName*, UInt32),
    get_type_info_count : Proc(IADsTypedName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsTypedName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsTypedName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsTypedName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ObjectName : Proc(IADsTypedName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ObjectName : Proc(IADsTypedName*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Level : Proc(IADsTypedName*, Int32*, Win32cr::Foundation::HRESULT),
    put_Level : Proc(IADsTypedName*, Int32, Win32cr::Foundation::HRESULT),
    get_Interval : Proc(IADsTypedName*, Int32*, Win32cr::Foundation::HRESULT),
    put_Interval : Proc(IADsTypedName*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b371a349-4080-11d1-a3ac-00c04fb950dc")]
  record IADsTypedName, lpVtbl : IADsTypedNameVtbl* do
    GUID = LibC::GUID.new(0xb371a349_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsTypedName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsTypedName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsTypedName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsTypedName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsTypedName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsTypedName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsTypedName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ObjectName(this : IADsTypedName*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectName.call(this, retval)
    end
    def put_ObjectName(this : IADsTypedName*, bstrObjectName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ObjectName.call(this, bstrObjectName)
    end
    def get_Level(this : IADsTypedName*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Level.call(this, retval)
    end
    def put_Level(this : IADsTypedName*, lnLevel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Level.call(this, lnLevel)
    end
    def get_Interval(this : IADsTypedName*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Interval.call(this, retval)
    end
    def put_Interval(this : IADsTypedName*, lnInterval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Interval.call(this, lnInterval)
    end

  end

  @[Extern]
  record IADsHoldVtbl,
    query_interface : Proc(IADsHold*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsHold*, UInt32),
    release : Proc(IADsHold*, UInt32),
    get_type_info_count : Proc(IADsHold*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsHold*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsHold*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsHold*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ObjectName : Proc(IADsHold*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ObjectName : Proc(IADsHold*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Amount : Proc(IADsHold*, Int32*, Win32cr::Foundation::HRESULT),
    put_Amount : Proc(IADsHold*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b3eb3b37-4080-11d1-a3ac-00c04fb950dc")]
  record IADsHold, lpVtbl : IADsHoldVtbl* do
    GUID = LibC::GUID.new(0xb3eb3b37_u32, 0x4080_u16, 0x11d1_u16, StaticArray[0xa3_u8, 0xac_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsHold*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsHold*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsHold*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsHold*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsHold*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsHold*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsHold*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ObjectName(this : IADsHold*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectName.call(this, retval)
    end
    def put_ObjectName(this : IADsHold*, bstrObjectName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ObjectName.call(this, bstrObjectName)
    end
    def get_Amount(this : IADsHold*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Amount.call(this, retval)
    end
    def put_Amount(this : IADsHold*, lnAmount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Amount.call(this, lnAmount)
    end

  end

  @[Extern]
  record IADsObjectOptionsVtbl,
    query_interface : Proc(IADsObjectOptions*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsObjectOptions*, UInt32),
    release : Proc(IADsObjectOptions*, UInt32),
    get_type_info_count : Proc(IADsObjectOptions*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsObjectOptions*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsObjectOptions*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsObjectOptions*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_option : Proc(IADsObjectOptions*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_option : Proc(IADsObjectOptions*, Int32, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("46f14fda-232b-11d1-a808-00c04fd8d5a8")]
  record IADsObjectOptions, lpVtbl : IADsObjectOptionsVtbl* do
    GUID = LibC::GUID.new(0x46f14fda_u32, 0x232b_u16, 0x11d1_u16, StaticArray[0xa8_u8, 0x8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xd5_u8, 0xa8_u8])
    def query_interface(this : IADsObjectOptions*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsObjectOptions*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsObjectOptions*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsObjectOptions*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsObjectOptions*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsObjectOptions*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsObjectOptions*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_option(this : IADsObjectOptions*, lnOption : Int32, pvValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option.call(this, lnOption, pvValue)
    end
    def set_option(this : IADsObjectOptions*, lnOption : Int32, vValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_option.call(this, lnOption, vValue)
    end

  end

  @[Extern]
  record IADsPathnameVtbl,
    query_interface : Proc(IADsPathname*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsPathname*, UInt32),
    release : Proc(IADsPathname*, UInt32),
    get_type_info_count : Proc(IADsPathname*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsPathname*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsPathname*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsPathname*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    set : Proc(IADsPathname*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    set_display_type : Proc(IADsPathname*, Int32, Win32cr::Foundation::HRESULT),
    retrieve : Proc(IADsPathname*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_num_elements : Proc(IADsPathname*, Int32*, Win32cr::Foundation::HRESULT),
    get_element : Proc(IADsPathname*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    add_leaf_element : Proc(IADsPathname*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_leaf_element : Proc(IADsPathname*, Win32cr::Foundation::HRESULT),
    copy_path : Proc(IADsPathname*, Void**, Win32cr::Foundation::HRESULT),
    get_escaped_element : Proc(IADsPathname*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_EscapedMode : Proc(IADsPathname*, Int32*, Win32cr::Foundation::HRESULT),
    put_EscapedMode : Proc(IADsPathname*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d592aed4-f420-11d0-a36e-00c04fb950dc")]
  record IADsPathname, lpVtbl : IADsPathnameVtbl* do
    GUID = LibC::GUID.new(0xd592aed4_u32, 0xf420_u16, 0x11d0_u16, StaticArray[0xa3_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb9_u8, 0x50_u8, 0xdc_u8])
    def query_interface(this : IADsPathname*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsPathname*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsPathname*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsPathname*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsPathname*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsPathname*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsPathname*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def set(this : IADsPathname*, bstrADsPath : Win32cr::Foundation::BSTR, lnSetType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set.call(this, bstrADsPath, lnSetType)
    end
    def set_display_type(this : IADsPathname*, lnDisplayType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display_type.call(this, lnDisplayType)
    end
    def retrieve(this : IADsPathname*, lnFormatType : Int32, pbstrADsPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.retrieve.call(this, lnFormatType, pbstrADsPath)
    end
    def get_num_elements(this : IADsPathname*, plnNumPathElements : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_num_elements.call(this, plnNumPathElements)
    end
    def get_element(this : IADsPathname*, lnElementIndex : Int32, pbstrElement : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element.call(this, lnElementIndex, pbstrElement)
    end
    def add_leaf_element(this : IADsPathname*, bstrLeafElement : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_leaf_element.call(this, bstrLeafElement)
    end
    def remove_leaf_element(this : IADsPathname*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_leaf_element.call(this)
    end
    def copy_path(this : IADsPathname*, ppAdsPath : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_path.call(this, ppAdsPath)
    end
    def get_escaped_element(this : IADsPathname*, lnReserved : Int32, bstrInStr : Win32cr::Foundation::BSTR, pbstrOutStr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_escaped_element.call(this, lnReserved, bstrInStr, pbstrOutStr)
    end
    def get_EscapedMode(this : IADsPathname*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EscapedMode.call(this, retval)
    end
    def put_EscapedMode(this : IADsPathname*, lnEscapedMode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EscapedMode.call(this, lnEscapedMode)
    end

  end

  @[Extern]
  record IADsADSystemInfoVtbl,
    query_interface : Proc(IADsADSystemInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsADSystemInfo*, UInt32),
    release : Proc(IADsADSystemInfo*, UInt32),
    get_type_info_count : Proc(IADsADSystemInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsADSystemInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsADSystemInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsADSystemInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UserName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ComputerName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SiteName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DomainShortName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DomainDNSName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ForestDNSName : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PDCRoleOwner : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SchemaRoleOwner : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsNativeMode : Proc(IADsADSystemInfo*, Int16*, Win32cr::Foundation::HRESULT),
    get_any_dc_name : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dc_site_name : Proc(IADsADSystemInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    refresh_schema_cache : Proc(IADsADSystemInfo*, Win32cr::Foundation::HRESULT),
    get_trees : Proc(IADsADSystemInfo*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5bb11929-afd1-11d2-9cb9-0000f87a369e")]
  record IADsADSystemInfo, lpVtbl : IADsADSystemInfoVtbl* do
    GUID = LibC::GUID.new(0x5bb11929_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
    def query_interface(this : IADsADSystemInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsADSystemInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsADSystemInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsADSystemInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsADSystemInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsADSystemInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsADSystemInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UserName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserName.call(this, retval)
    end
    def get_ComputerName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ComputerName.call(this, retval)
    end
    def get_SiteName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SiteName.call(this, retval)
    end
    def get_DomainShortName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DomainShortName.call(this, retval)
    end
    def get_DomainDNSName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DomainDNSName.call(this, retval)
    end
    def get_ForestDNSName(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForestDNSName.call(this, retval)
    end
    def get_PDCRoleOwner(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PDCRoleOwner.call(this, retval)
    end
    def get_SchemaRoleOwner(this : IADsADSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SchemaRoleOwner.call(this, retval)
    end
    def get_IsNativeMode(this : IADsADSystemInfo*, retval : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsNativeMode.call(this, retval)
    end
    def get_any_dc_name(this : IADsADSystemInfo*, pszDCName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_any_dc_name.call(this, pszDCName)
    end
    def get_dc_site_name(this : IADsADSystemInfo*, szServer : Win32cr::Foundation::BSTR, pszSiteName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dc_site_name.call(this, szServer, pszSiteName)
    end
    def refresh_schema_cache(this : IADsADSystemInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh_schema_cache.call(this)
    end
    def get_trees(this : IADsADSystemInfo*, pvTrees : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_trees.call(this, pvTrees)
    end

  end

  @[Extern]
  record IADsWinNTSystemInfoVtbl,
    query_interface : Proc(IADsWinNTSystemInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsWinNTSystemInfo*, UInt32),
    release : Proc(IADsWinNTSystemInfo*, UInt32),
    get_type_info_count : Proc(IADsWinNTSystemInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsWinNTSystemInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsWinNTSystemInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsWinNTSystemInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UserName : Proc(IADsWinNTSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ComputerName : Proc(IADsWinNTSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DomainName : Proc(IADsWinNTSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PDC : Proc(IADsWinNTSystemInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6c6d65dc-afd1-11d2-9cb9-0000f87a369e")]
  record IADsWinNTSystemInfo, lpVtbl : IADsWinNTSystemInfoVtbl* do
    GUID = LibC::GUID.new(0x6c6d65dc_u32, 0xafd1_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xb9_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x7a_u8, 0x36_u8, 0x9e_u8])
    def query_interface(this : IADsWinNTSystemInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsWinNTSystemInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsWinNTSystemInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsWinNTSystemInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsWinNTSystemInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsWinNTSystemInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsWinNTSystemInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UserName(this : IADsWinNTSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserName.call(this, retval)
    end
    def get_ComputerName(this : IADsWinNTSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ComputerName.call(this, retval)
    end
    def get_DomainName(this : IADsWinNTSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DomainName.call(this, retval)
    end
    def get_PDC(this : IADsWinNTSystemInfo*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PDC.call(this, retval)
    end

  end

  @[Extern]
  record IADsDNWithBinaryVtbl,
    query_interface : Proc(IADsDNWithBinary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsDNWithBinary*, UInt32),
    release : Proc(IADsDNWithBinary*, UInt32),
    get_type_info_count : Proc(IADsDNWithBinary*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsDNWithBinary*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsDNWithBinary*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsDNWithBinary*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BinaryValue : Proc(IADsDNWithBinary*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_BinaryValue : Proc(IADsDNWithBinary*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_DNString : Proc(IADsDNWithBinary*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DNString : Proc(IADsDNWithBinary*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7e99c0a2-f935-11d2-ba96-00c04fb6d0d1")]
  record IADsDNWithBinary, lpVtbl : IADsDNWithBinaryVtbl* do
    GUID = LibC::GUID.new(0x7e99c0a2_u32, 0xf935_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
    def query_interface(this : IADsDNWithBinary*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsDNWithBinary*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsDNWithBinary*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsDNWithBinary*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsDNWithBinary*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsDNWithBinary*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsDNWithBinary*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_BinaryValue(this : IADsDNWithBinary*, retval : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BinaryValue.call(this, retval)
    end
    def put_BinaryValue(this : IADsDNWithBinary*, vBinaryValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BinaryValue.call(this, vBinaryValue)
    end
    def get_DNString(this : IADsDNWithBinary*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DNString.call(this, retval)
    end
    def put_DNString(this : IADsDNWithBinary*, bstrDNString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DNString.call(this, bstrDNString)
    end

  end

  @[Extern]
  record IADsDNWithStringVtbl,
    query_interface : Proc(IADsDNWithString*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsDNWithString*, UInt32),
    release : Proc(IADsDNWithString*, UInt32),
    get_type_info_count : Proc(IADsDNWithString*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsDNWithString*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsDNWithString*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsDNWithString*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StringValue : Proc(IADsDNWithString*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_StringValue : Proc(IADsDNWithString*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DNString : Proc(IADsDNWithString*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DNString : Proc(IADsDNWithString*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("370df02e-f934-11d2-ba96-00c04fb6d0d1")]
  record IADsDNWithString, lpVtbl : IADsDNWithStringVtbl* do
    GUID = LibC::GUID.new(0x370df02e_u32, 0xf934_u16, 0x11d2_u16, StaticArray[0xba_u8, 0x96_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xd0_u8, 0xd1_u8])
    def query_interface(this : IADsDNWithString*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsDNWithString*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsDNWithString*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsDNWithString*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsDNWithString*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsDNWithString*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsDNWithString*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StringValue(this : IADsDNWithString*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StringValue.call(this, retval)
    end
    def put_StringValue(this : IADsDNWithString*, bstrStringValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StringValue.call(this, bstrStringValue)
    end
    def get_DNString(this : IADsDNWithString*, retval : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DNString.call(this, retval)
    end
    def put_DNString(this : IADsDNWithString*, bstrDNString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DNString.call(this, bstrDNString)
    end

  end

  @[Extern]
  record IADsSecurityUtilityVtbl,
    query_interface : Proc(IADsSecurityUtility*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IADsSecurityUtility*, UInt32),
    release : Proc(IADsSecurityUtility*, UInt32),
    get_type_info_count : Proc(IADsSecurityUtility*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IADsSecurityUtility*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IADsSecurityUtility*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IADsSecurityUtility*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_security_descriptor : Proc(IADsSecurityUtility*, Win32cr::System::Com::VARIANT, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_security_descriptor : Proc(IADsSecurityUtility*, Win32cr::System::Com::VARIANT, Int32, Win32cr::System::Com::VARIANT, Int32, Win32cr::Foundation::HRESULT),
    convert_security_descriptor : Proc(IADsSecurityUtility*, Win32cr::System::Com::VARIANT, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_SecurityMask : Proc(IADsSecurityUtility*, Int32*, Win32cr::Foundation::HRESULT),
    put_SecurityMask : Proc(IADsSecurityUtility*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a63251b2-5f21-474b-ab52-4a8efad10895")]
  record IADsSecurityUtility, lpVtbl : IADsSecurityUtilityVtbl* do
    GUID = LibC::GUID.new(0xa63251b2_u32, 0x5f21_u16, 0x474b_u16, StaticArray[0xab_u8, 0x52_u8, 0x4a_u8, 0x8e_u8, 0xfa_u8, 0xd1_u8, 0x8_u8, 0x95_u8])
    def query_interface(this : IADsSecurityUtility*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IADsSecurityUtility*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IADsSecurityUtility*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IADsSecurityUtility*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IADsSecurityUtility*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IADsSecurityUtility*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IADsSecurityUtility*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_security_descriptor(this : IADsSecurityUtility*, varPath : Win32cr::System::Com::VARIANT, lPathFormat : Int32, lFormat : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security_descriptor.call(this, varPath, lPathFormat, lFormat, pVariant)
    end
    def set_security_descriptor(this : IADsSecurityUtility*, varPath : Win32cr::System::Com::VARIANT, lPathFormat : Int32, varData : Win32cr::System::Com::VARIANT, lDataFormat : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_security_descriptor.call(this, varPath, lPathFormat, varData, lDataFormat)
    end
    def convert_security_descriptor(this : IADsSecurityUtility*, varSD : Win32cr::System::Com::VARIANT, lDataFormat : Int32, lOutFormat : Int32, pResult : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_security_descriptor.call(this, varSD, lDataFormat, lOutFormat, pResult)
    end
    def get_SecurityMask(this : IADsSecurityUtility*, retval : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SecurityMask.call(this, retval)
    end
    def put_SecurityMask(this : IADsSecurityUtility*, lnSecurityMask : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SecurityMask.call(this, lnSecurityMask)
    end

  end

  @[Extern]
  record IDsBrowseDomainTreeVtbl,
    query_interface : Proc(IDsBrowseDomainTree*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsBrowseDomainTree*, UInt32),
    release : Proc(IDsBrowseDomainTree*, UInt32),
    browse_to : Proc(IDsBrowseDomainTree*, Win32cr::Foundation::HWND, Win32cr::Foundation::PWSTR*, UInt32, Win32cr::Foundation::HRESULT),
    get_domains : Proc(IDsBrowseDomainTree*, Win32cr::Networking::ActiveDirectory::DOMAIN_TREE**, UInt32, Win32cr::Foundation::HRESULT),
    free_domains : Proc(IDsBrowseDomainTree*, Win32cr::Networking::ActiveDirectory::DOMAIN_TREE**, Win32cr::Foundation::HRESULT),
    flush_cached_domains : Proc(IDsBrowseDomainTree*, Win32cr::Foundation::HRESULT),
    set_computer : Proc(IDsBrowseDomainTree*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7cabcf1e-78f5-11d2-960c-00c04fa31a86")]
  record IDsBrowseDomainTree, lpVtbl : IDsBrowseDomainTreeVtbl* do
    GUID = LibC::GUID.new(0x7cabcf1e_u32, 0x78f5_u16, 0x11d2_u16, StaticArray[0x96_u8, 0xc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x1a_u8, 0x86_u8])
    def query_interface(this : IDsBrowseDomainTree*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsBrowseDomainTree*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsBrowseDomainTree*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def browse_to(this : IDsBrowseDomainTree*, hwndParent : Win32cr::Foundation::HWND, ppszTargetPath : Win32cr::Foundation::PWSTR*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.browse_to.call(this, hwndParent, ppszTargetPath, dwFlags)
    end
    def get_domains(this : IDsBrowseDomainTree*, ppDomainTree : Win32cr::Networking::ActiveDirectory::DOMAIN_TREE**, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_domains.call(this, ppDomainTree, dwFlags)
    end
    def free_domains(this : IDsBrowseDomainTree*, ppDomainTree : Win32cr::Networking::ActiveDirectory::DOMAIN_TREE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_domains.call(this, ppDomainTree)
    end
    def flush_cached_domains(this : IDsBrowseDomainTree*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_cached_domains.call(this)
    end
    def set_computer(this : IDsBrowseDomainTree*, pszComputerName : Win32cr::Foundation::PWSTR, pszUserName : Win32cr::Foundation::PWSTR, pszPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_computer.call(this, pszComputerName, pszUserName, pszPassword)
    end

  end

  @[Extern]
  record IDsDisplaySpecifierVtbl,
    query_interface : Proc(IDsDisplaySpecifier*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsDisplaySpecifier*, UInt32),
    release : Proc(IDsDisplaySpecifier*, UInt32),
    set_server : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    set_language_id : Proc(IDsDisplaySpecifier*, UInt16, Win32cr::Foundation::HRESULT),
    get_display_specifier : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_icon_location : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, UInt32, UInt16*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_icon : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, UInt32, Int32, Int32, Win32cr::UI::WindowsAndMessaging::HICON),
    get_friendly_class_name : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, UInt16*, Int32, Win32cr::Foundation::HRESULT),
    get_friendly_attribute_name : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    is_class_container : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::BOOL),
    get_class_creation_info : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::DSCLASSCREATIONINFO**, Win32cr::Foundation::HRESULT),
    enum_class_attributes : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::LPDSENUMATTRIBUTES, Win32cr::Foundation::LPARAM, Win32cr::Foundation::HRESULT),
    get_attribute_a_ds_type : Proc(IDsDisplaySpecifier*, Win32cr::Foundation::PWSTR, Win32cr::Networking::ActiveDirectory::ADSTYPEENUM)


  @[Extern]
  #@[Com("1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86")]
  record IDsDisplaySpecifier, lpVtbl : IDsDisplaySpecifierVtbl* do
    GUID = LibC::GUID.new(0x1ab4a8c0_u32, 0x6a0b_u16, 0x11d2_u16, StaticArray[0xad_u8, 0x49_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x1a_u8, 0x86_u8])
    def query_interface(this : IDsDisplaySpecifier*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsDisplaySpecifier*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsDisplaySpecifier*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_server(this : IDsDisplaySpecifier*, pszServer : Win32cr::Foundation::PWSTR, pszUserName : Win32cr::Foundation::PWSTR, pszPassword : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_server.call(this, pszServer, pszUserName, pszPassword, dwFlags)
    end
    def set_language_id(this : IDsDisplaySpecifier*, langid : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_language_id.call(this, langid)
    end
    def get_display_specifier(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_specifier.call(this, pszObjectClass, riid, ppv)
    end
    def get_icon_location(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pszBuffer : UInt16*, cchBuffer : Int32, presid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_icon_location.call(this, pszObjectClass, dwFlags, pszBuffer, cchBuffer, presid)
    end
    def get_icon(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, dwFlags : UInt32, cxIcon : Int32, cyIcon : Int32) : Win32cr::UI::WindowsAndMessaging::HICON
      @lpVtbl.try &.value.get_icon.call(this, pszObjectClass, dwFlags, cxIcon, cyIcon)
    end
    def get_friendly_class_name(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, pszBuffer : UInt16*, cchBuffer : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendly_class_name.call(this, pszObjectClass, pszBuffer, cchBuffer)
    end
    def get_friendly_attribute_name(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, pszAttributeName : Win32cr::Foundation::PWSTR, pszBuffer : UInt16*, cchBuffer : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendly_attribute_name.call(this, pszObjectClass, pszAttributeName, pszBuffer, cchBuffer)
    end
    def is_class_container(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, pszADsPath : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_class_container.call(this, pszObjectClass, pszADsPath, dwFlags)
    end
    def get_class_creation_info(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, ppdscci : Win32cr::Networking::ActiveDirectory::DSCLASSCREATIONINFO**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_creation_info.call(this, pszObjectClass, ppdscci)
    end
    def enum_class_attributes(this : IDsDisplaySpecifier*, pszObjectClass : Win32cr::Foundation::PWSTR, pcbEnum : Win32cr::Networking::ActiveDirectory::LPDSENUMATTRIBUTES, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_class_attributes.call(this, pszObjectClass, pcbEnum, lParam)
    end
    def get_attribute_a_ds_type(this : IDsDisplaySpecifier*, pszAttributeName : Win32cr::Foundation::PWSTR) : Win32cr::Networking::ActiveDirectory::ADSTYPEENUM
      @lpVtbl.try &.value.get_attribute_a_ds_type.call(this, pszAttributeName)
    end

  end

  @[Extern]
  record IDsObjectPickerVtbl,
    query_interface : Proc(IDsObjectPicker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsObjectPicker*, UInt32),
    release : Proc(IDsObjectPicker*, UInt32),
    initialize__ : Proc(IDsObjectPicker*, Win32cr::Networking::ActiveDirectory::DSOP_INIT_INFO*, Win32cr::Foundation::HRESULT),
    invoke_dialog : Proc(IDsObjectPicker*, Win32cr::Foundation::HWND, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c87e64e-3b7a-11d2-b9e0-00c04fd8dbf7")]
  record IDsObjectPicker, lpVtbl : IDsObjectPickerVtbl* do
    GUID = LibC::GUID.new(0xc87e64e_u32, 0x3b7a_u16, 0x11d2_u16, StaticArray[0xb9_u8, 0xe0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd8_u8, 0xdb_u8, 0xf7_u8])
    def query_interface(this : IDsObjectPicker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsObjectPicker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsObjectPicker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDsObjectPicker*, pInitInfo : Win32cr::Networking::ActiveDirectory::DSOP_INIT_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pInitInfo)
    end
    def invoke_dialog(this : IDsObjectPicker*, hwndParent : Win32cr::Foundation::HWND, ppdoSelections : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_dialog.call(this, hwndParent, ppdoSelections)
    end

  end

  @[Extern]
  record IDsObjectPickerCredentialsVtbl,
    query_interface : Proc(IDsObjectPickerCredentials*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsObjectPickerCredentials*, UInt32),
    release : Proc(IDsObjectPickerCredentials*, UInt32),
    initialize__ : Proc(IDsObjectPickerCredentials*, Win32cr::Networking::ActiveDirectory::DSOP_INIT_INFO*, Win32cr::Foundation::HRESULT),
    invoke_dialog : Proc(IDsObjectPickerCredentials*, Win32cr::Foundation::HWND, Void**, Win32cr::Foundation::HRESULT),
    set_credentials : Proc(IDsObjectPickerCredentials*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e2d3ec9b-d041-445a-8f16-4748de8fb1cf")]
  record IDsObjectPickerCredentials, lpVtbl : IDsObjectPickerCredentialsVtbl* do
    GUID = LibC::GUID.new(0xe2d3ec9b_u32, 0xd041_u16, 0x445a_u16, StaticArray[0x8f_u8, 0x16_u8, 0x47_u8, 0x48_u8, 0xde_u8, 0x8f_u8, 0xb1_u8, 0xcf_u8])
    def query_interface(this : IDsObjectPickerCredentials*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsObjectPickerCredentials*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsObjectPickerCredentials*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDsObjectPickerCredentials*, pInitInfo : Win32cr::Networking::ActiveDirectory::DSOP_INIT_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pInitInfo)
    end
    def invoke_dialog(this : IDsObjectPickerCredentials*, hwndParent : Win32cr::Foundation::HWND, ppdoSelections : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_dialog.call(this, hwndParent, ppdoSelections)
    end
    def set_credentials(this : IDsObjectPickerCredentials*, szUserName : Win32cr::Foundation::PWSTR, szPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_credentials.call(this, szUserName, szPassword)
    end

  end

  @[Extern]
  record IDsAdminCreateObjVtbl,
    query_interface : Proc(IDsAdminCreateObj*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsAdminCreateObj*, UInt32),
    release : Proc(IDsAdminCreateObj*, UInt32),
    initialize__ : Proc(IDsAdminCreateObj*, Void*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_modal : Proc(IDsAdminCreateObj*, Win32cr::Foundation::HWND, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("53554a38-f902-11d2-82b9-00c04f68928b")]
  record IDsAdminCreateObj, lpVtbl : IDsAdminCreateObjVtbl* do
    GUID = LibC::GUID.new(0x53554a38_u32, 0xf902_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
    def query_interface(this : IDsAdminCreateObj*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsAdminCreateObj*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsAdminCreateObj*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDsAdminCreateObj*, pADsContainerObj : Void*, pADsCopySource : Void*, lpszClassName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pADsContainerObj, pADsCopySource, lpszClassName)
    end
    def create_modal(this : IDsAdminCreateObj*, hwndParent : Win32cr::Foundation::HWND, ppADsObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_modal.call(this, hwndParent, ppADsObj)
    end

  end

  @[Extern]
  record IDsAdminNewObjVtbl,
    query_interface : Proc(IDsAdminNewObj*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsAdminNewObj*, UInt32),
    release : Proc(IDsAdminNewObj*, UInt32),
    set_buttons : Proc(IDsAdminNewObj*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_page_counts : Proc(IDsAdminNewObj*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f2573587-e6fc-11d2-82af-00c04f68928b")]
  record IDsAdminNewObj, lpVtbl : IDsAdminNewObjVtbl* do
    GUID = LibC::GUID.new(0xf2573587_u32, 0xe6fc_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xaf_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
    def query_interface(this : IDsAdminNewObj*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsAdminNewObj*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsAdminNewObj*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_buttons(this : IDsAdminNewObj*, nCurrIndex : UInt32, bValid : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buttons.call(this, nCurrIndex, bValid)
    end
    def get_page_counts(this : IDsAdminNewObj*, pnTotal : Int32*, pnStartIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_counts.call(this, pnTotal, pnStartIndex)
    end

  end

  @[Extern]
  record IDsAdminNewObjPrimarySiteVtbl,
    query_interface : Proc(IDsAdminNewObjPrimarySite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsAdminNewObjPrimarySite*, UInt32),
    release : Proc(IDsAdminNewObjPrimarySite*, UInt32),
    create_new : Proc(IDsAdminNewObjPrimarySite*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    commit : Proc(IDsAdminNewObjPrimarySite*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("be2b487e-f904-11d2-82b9-00c04f68928b")]
  record IDsAdminNewObjPrimarySite, lpVtbl : IDsAdminNewObjPrimarySiteVtbl* do
    GUID = LibC::GUID.new(0xbe2b487e_u32, 0xf904_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xb9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
    def query_interface(this : IDsAdminNewObjPrimarySite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsAdminNewObjPrimarySite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsAdminNewObjPrimarySite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_new(this : IDsAdminNewObjPrimarySite*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_new.call(this, pszName)
    end
    def commit(this : IDsAdminNewObjPrimarySite*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this)
    end

  end

  @[Extern]
  record IDsAdminNewObjExtVtbl,
    query_interface : Proc(IDsAdminNewObjExt*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsAdminNewObjExt*, UInt32),
    release : Proc(IDsAdminNewObjExt*, UInt32),
    initialize__ : Proc(IDsAdminNewObjExt*, Void*, Void*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Networking::ActiveDirectory::DSA_NEWOBJ_DISPINFO*, Win32cr::Foundation::HRESULT),
    add_pages : Proc(IDsAdminNewObjExt*, Win32cr::UI::Controls::LPFNSVADDPROPSHEETPAGE, Win32cr::Foundation::LPARAM, Win32cr::Foundation::HRESULT),
    set_object : Proc(IDsAdminNewObjExt*, Void*, Win32cr::Foundation::HRESULT),
    write_data : Proc(IDsAdminNewObjExt*, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::HRESULT),
    on_error : Proc(IDsAdminNewObjExt*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT, UInt32, Win32cr::Foundation::HRESULT),
    get_summary_info : Proc(IDsAdminNewObjExt*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6088eae2-e7bf-11d2-82af-00c04f68928b")]
  record IDsAdminNewObjExt, lpVtbl : IDsAdminNewObjExtVtbl* do
    GUID = LibC::GUID.new(0x6088eae2_u32, 0xe7bf_u16, 0x11d2_u16, StaticArray[0x82_u8, 0xaf_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x92_u8, 0x8b_u8])
    def query_interface(this : IDsAdminNewObjExt*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsAdminNewObjExt*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsAdminNewObjExt*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDsAdminNewObjExt*, pADsContainerObj : Void*, pADsCopySource : Void*, lpszClassName : Win32cr::Foundation::PWSTR, pDsAdminNewObj : Void*, pDispInfo : Win32cr::Networking::ActiveDirectory::DSA_NEWOBJ_DISPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pADsContainerObj, pADsCopySource, lpszClassName, pDsAdminNewObj, pDispInfo)
    end
    def add_pages(this : IDsAdminNewObjExt*, lpfnAddPage : Win32cr::UI::Controls::LPFNSVADDPROPSHEETPAGE, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_pages.call(this, lpfnAddPage, lParam)
    end
    def set_object(this : IDsAdminNewObjExt*, pADsObj : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object.call(this, pADsObj)
    end
    def write_data(this : IDsAdminNewObjExt*, hWnd : Win32cr::Foundation::HWND, uContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_data.call(this, hWnd, uContext)
    end
    def on_error(this : IDsAdminNewObjExt*, hWnd : Win32cr::Foundation::HWND, hr : Win32cr::Foundation::HRESULT, uContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_error.call(this, hWnd, hr, uContext)
    end
    def get_summary_info(this : IDsAdminNewObjExt*, pBstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_summary_info.call(this, pBstrText)
    end

  end

  @[Extern]
  record IDsAdminNotifyHandlerVtbl,
    query_interface : Proc(IDsAdminNotifyHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDsAdminNotifyHandler*, UInt32),
    release : Proc(IDsAdminNotifyHandler*, UInt32),
    initialize__ : Proc(IDsAdminNotifyHandler*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    begin__ : Proc(IDsAdminNotifyHandler*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    notify : Proc(IDsAdminNotifyHandler*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    end__ : Proc(IDsAdminNotifyHandler*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e4a2b8b3-5a18-11d2-97c1-00a0c9a06d2d")]
  record IDsAdminNotifyHandler, lpVtbl : IDsAdminNotifyHandlerVtbl* do
    GUID = LibC::GUID.new(0xe4a2b8b3_u32, 0x5a18_u16, 0x11d2_u16, StaticArray[0x97_u8, 0xc1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa0_u8, 0x6d_u8, 0x2d_u8])
    def query_interface(this : IDsAdminNotifyHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDsAdminNotifyHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDsAdminNotifyHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDsAdminNotifyHandler*, pExtraInfo : Void*, puEventFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pExtraInfo, puEventFlags)
    end
    def begin__(this : IDsAdminNotifyHandler*, uEvent : UInt32, pArg1 : Void*, pArg2 : Void*, puFlags : UInt32*, pBstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin__.call(this, uEvent, pArg1, pArg2, puFlags, pBstr)
    end
    def notify(this : IDsAdminNotifyHandler*, nItem : UInt32, uFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, nItem, uFlags)
    end
    def end__(this : IDsAdminNotifyHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end__.call(this)
    end

  end

  @[Link("activeds")]
  @[Link("dsuiext")]
  @[Link("dsprop")]
  @[Link("dsparse")]
  @[Link("ntdsapi")]
  @[Link("netapi32")]
  lib C
    fun ADsGetObject(lpszPathName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppObject : Void**) : Win32cr::Foundation::HRESULT

    fun ADsBuildEnumerator(pADsContainer : Void*, ppEnumVariant : Void**) : Win32cr::Foundation::HRESULT

    fun ADsFreeEnumerator(pEnumVariant : Void*) : Win32cr::Foundation::HRESULT

    fun ADsEnumerateNext(pEnumVariant : Void*, cElements : UInt32, pvar : Win32cr::System::Com::VARIANT*, pcElementsFetched : UInt32*) : Win32cr::Foundation::HRESULT

    fun ADsBuildVarArrayStr(lppPathNames : Win32cr::Foundation::PWSTR*, dwPathNames : UInt32, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    fun ADsBuildVarArrayInt(lpdwObjectTypes : UInt32*, dwObjectTypes : UInt32, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    fun ADsOpenObject(lpszPathName : Win32cr::Foundation::PWSTR, lpszUserName : Win32cr::Foundation::PWSTR, lpszPassword : Win32cr::Foundation::PWSTR, dwReserved : Win32cr::Networking::ActiveDirectory::ADS_AUTHENTICATION_ENUM, riid : LibC::GUID*, ppObject : Void**) : Win32cr::Foundation::HRESULT

    fun ADsGetLastError(lpError : UInt32*, lpErrorBuf : UInt16*, dwErrorBufLen : UInt32, lpNameBuf : UInt16*, dwNameBufLen : UInt32) : Win32cr::Foundation::HRESULT

    fun ADsSetLastError(dwErr : UInt32, pszError : Win32cr::Foundation::PWSTR, pszProvider : Win32cr::Foundation::PWSTR) : Void

    fun AllocADsMem(cb : UInt32) : Void*

    fun FreeADsMem(pMem : Void*) : Win32cr::Foundation::BOOL

    fun ReallocADsMem(pOldMem : Void*, cbOld : UInt32, cbNew : UInt32) : Void*

    fun AllocADsStr(pStr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun FreeADsStr(pStr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun ReallocADsStr(ppStr : Win32cr::Foundation::PWSTR*, pStr : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun ADsEncodeBinaryData(pbSrcData : UInt8*, dwSrcLen : UInt32, ppszDestData : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT

    fun ADsDecodeBinaryData(szSrcData : Win32cr::Foundation::PWSTR, ppbDestData : UInt8**, pdwDestLen : UInt32*) : Win32cr::Foundation::HRESULT

    fun PropVariantToAdsType(pVariant : Win32cr::System::Com::VARIANT*, dwNumVariant : UInt32, ppAdsValues : Win32cr::Networking::ActiveDirectory::ADSVALUE**, pdwNumValues : UInt32*) : Win32cr::Foundation::HRESULT

    fun AdsTypeToPropVariant(pAdsValues : Win32cr::Networking::ActiveDirectory::ADSVALUE*, dwNumValues : UInt32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT

    fun AdsFreeAdsValues(pAdsValues : Win32cr::Networking::ActiveDirectory::ADSVALUE*, dwNumValues : UInt32) : Void

    fun BinarySDToSecurityDescriptor(pSecurityDescriptor : Win32cr::Security::PSECURITY_DESCRIPTOR, pVarsec : Win32cr::System::Com::VARIANT*, pszServerName : Win32cr::Foundation::PWSTR, userName : Win32cr::Foundation::PWSTR, passWord : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun SecurityDescriptorToBinarySD(vVarSecDes : Win32cr::System::Com::VARIANT, ppSecurityDescriptor : Win32cr::Security::PSECURITY_DESCRIPTOR*, pdwSDLength : UInt32*, pszServerName : Win32cr::Foundation::PWSTR, userName : Win32cr::Foundation::PWSTR, passWord : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun DsBrowseForContainerW(pInfo : Win32cr::Networking::ActiveDirectory::DSBROWSEINFOW*) : Int32

    fun DsBrowseForContainerA(pInfo : Win32cr::Networking::ActiveDirectory::DSBROWSEINFOA*) : Int32

    fun DsGetIcon(dwFlags : UInt32, pszObjectClass : Win32cr::Foundation::PWSTR, cxImage : Int32, cyImage : Int32) : Win32cr::UI::WindowsAndMessaging::HICON

    fun DsGetFriendlyClassName(pszObjectClass : Win32cr::Foundation::PWSTR, pszBuffer : UInt16*, cchBuffer : UInt32) : Win32cr::Foundation::HRESULT

    fun ADsPropCreateNotifyObj(pAppThdDataObj : Void*, pwzADsObjName : Win32cr::Foundation::PWSTR, phNotifyObj : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT

    fun ADsPropGetInitInfo(hNotifyObj : Win32cr::Foundation::HWND, pInitParams : Win32cr::Networking::ActiveDirectory::ADSPROPINITPARAMS*) : Win32cr::Foundation::BOOL

    fun ADsPropSetHwndWithTitle(hNotifyObj : Win32cr::Foundation::HWND, hPage : Win32cr::Foundation::HWND, ptzTitle : Int8*) : Win32cr::Foundation::BOOL

    fun ADsPropSetHwnd(hNotifyObj : Win32cr::Foundation::HWND, hPage : Win32cr::Foundation::HWND) : Win32cr::Foundation::BOOL

    fun ADsPropCheckIfWritable(pwzAttr : Win32cr::Foundation::PWSTR, pWritableAttrs : Win32cr::Networking::ActiveDirectory::ADS_ATTR_INFO*) : Win32cr::Foundation::BOOL

    fun ADsPropSendErrorMessage(hNotifyObj : Win32cr::Foundation::HWND, pError : Win32cr::Networking::ActiveDirectory::ADSPROPERROR*) : Win32cr::Foundation::BOOL

    fun ADsPropShowErrorDialog(hNotifyObj : Win32cr::Foundation::HWND, hPage : Win32cr::Foundation::HWND) : Win32cr::Foundation::BOOL

    fun DsMakeSpnW(service_class : Win32cr::Foundation::PWSTR, service_name : Win32cr::Foundation::PWSTR, instance_name : Win32cr::Foundation::PWSTR, instance_port : UInt16, referrer : Win32cr::Foundation::PWSTR, pcSpnLength : UInt32*, pszSpn : UInt16*) : UInt32

    fun DsMakeSpnA(service_class : Win32cr::Foundation::PSTR, service_name : Win32cr::Foundation::PSTR, instance_name : Win32cr::Foundation::PSTR, instance_port : UInt16, referrer : Win32cr::Foundation::PSTR, pcSpnLength : UInt32*, pszSpn : UInt8*) : UInt32

    fun DsCrackSpnA(pszSpn : Win32cr::Foundation::PSTR, pcServiceClass : UInt32*, service_class : UInt8*, pcServiceName : UInt32*, service_name : UInt8*, pcInstanceName : UInt32*, instance_name : UInt8*, pInstancePort : UInt16*) : UInt32

    fun DsCrackSpnW(pszSpn : Win32cr::Foundation::PWSTR, pcServiceClass : UInt32*, service_class : UInt16*, pcServiceName : UInt32*, service_name : UInt16*, pcInstanceName : UInt32*, instance_name : UInt16*, pInstancePort : UInt16*) : UInt32

    fun DsQuoteRdnValueW(cUnquotedRdnValueLength : UInt32, psUnquotedRdnValue : UInt16*, pcQuotedRdnValueLength : UInt32*, psQuotedRdnValue : UInt16*) : UInt32

    fun DsQuoteRdnValueA(cUnquotedRdnValueLength : UInt32, psUnquotedRdnValue : UInt8*, pcQuotedRdnValueLength : UInt32*, psQuotedRdnValue : UInt8*) : UInt32

    fun DsUnquoteRdnValueW(cQuotedRdnValueLength : UInt32, psQuotedRdnValue : UInt16*, pcUnquotedRdnValueLength : UInt32*, psUnquotedRdnValue : UInt16*) : UInt32

    fun DsUnquoteRdnValueA(cQuotedRdnValueLength : UInt32, psQuotedRdnValue : UInt8*, pcUnquotedRdnValueLength : UInt32*, psUnquotedRdnValue : UInt8*) : UInt32

    fun DsGetRdnW(ppDN : Win32cr::Foundation::PWSTR*, pcDN : UInt32*, ppKey : Win32cr::Foundation::PWSTR*, pcKey : UInt32*, ppVal : Win32cr::Foundation::PWSTR*, pcVal : UInt32*) : UInt32

    fun DsCrackUnquotedMangledRdnW(pszRDN : UInt16*, cchRDN : UInt32, pGuid : LibC::GUID*, peDsMangleFor : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR*) : Win32cr::Foundation::BOOL

    fun DsCrackUnquotedMangledRdnA(pszRDN : UInt8*, cchRDN : UInt32, pGuid : LibC::GUID*, peDsMangleFor : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR*) : Win32cr::Foundation::BOOL

    fun DsIsMangledRdnValueW(pszRdn : UInt16*, cRdn : UInt32, eDsMangleForDesired : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR) : Win32cr::Foundation::BOOL

    fun DsIsMangledRdnValueA(pszRdn : UInt8*, cRdn : UInt32, eDsMangleForDesired : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR) : Win32cr::Foundation::BOOL

    fun DsIsMangledDnA(pszDn : Win32cr::Foundation::PSTR, eDsMangleFor : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR) : Win32cr::Foundation::BOOL

    fun DsIsMangledDnW(pszDn : Win32cr::Foundation::PWSTR, eDsMangleFor : Win32cr::Networking::ActiveDirectory::DS_MANGLE_FOR) : Win32cr::Foundation::BOOL

    fun DsCrackSpn2A(pszSpn : UInt8*, cSpn : UInt32, pcServiceClass : UInt32*, service_class : UInt8*, pcServiceName : UInt32*, service_name : UInt8*, pcInstanceName : UInt32*, instance_name : UInt8*, pInstancePort : UInt16*) : UInt32

    fun DsCrackSpn2W(pszSpn : UInt16*, cSpn : UInt32, pcServiceClass : UInt32*, service_class : UInt16*, pcServiceName : UInt32*, service_name : UInt16*, pcInstanceName : UInt32*, instance_name : UInt16*, pInstancePort : UInt16*) : UInt32

    fun DsCrackSpn3W(pszSpn : Win32cr::Foundation::PWSTR, cSpn : UInt32, pcHostName : UInt32*, host_name : UInt16*, pcInstanceName : UInt32*, instance_name : UInt16*, pPortNumber : UInt16*, pcDomainName : UInt32*, domain_name : UInt16*, pcRealmName : UInt32*, realm_name : UInt16*) : UInt32

    fun DsCrackSpn4W(pszSpn : Win32cr::Foundation::PWSTR, cSpn : UInt32, pcHostName : UInt32*, host_name : UInt16*, pcInstanceName : UInt32*, instance_name : UInt16*, pcPortName : UInt32*, port_name : UInt16*, pcDomainName : UInt32*, domain_name : UInt16*, pcRealmName : UInt32*, realm_name : UInt16*) : UInt32

    fun DsBindW(domain_controller_name : Win32cr::Foundation::PWSTR, dns_domain_name : Win32cr::Foundation::PWSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindA(domain_controller_name : Win32cr::Foundation::PSTR, dns_domain_name : Win32cr::Foundation::PSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithCredW(domain_controller_name : Win32cr::Foundation::PWSTR, dns_domain_name : Win32cr::Foundation::PWSTR, auth_identity : Void*, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithCredA(domain_controller_name : Win32cr::Foundation::PSTR, dns_domain_name : Win32cr::Foundation::PSTR, auth_identity : Void*, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithSpnW(domain_controller_name : Win32cr::Foundation::PWSTR, dns_domain_name : Win32cr::Foundation::PWSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PWSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithSpnA(domain_controller_name : Win32cr::Foundation::PSTR, dns_domain_name : Win32cr::Foundation::PSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithSpnExW(domain_controller_name : Win32cr::Foundation::PWSTR, dns_domain_name : Win32cr::Foundation::PWSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PWSTR, bind_flags : UInt32, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindWithSpnExA(domain_controller_name : Win32cr::Foundation::PSTR, dns_domain_name : Win32cr::Foundation::PSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PSTR, bind_flags : UInt32, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindByInstanceW(server_name : Win32cr::Foundation::PWSTR, annotation__ : Win32cr::Foundation::PWSTR, instance_guid : LibC::GUID*, dns_domain_name : Win32cr::Foundation::PWSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PWSTR, bind_flags : UInt32, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindByInstanceA(server_name : Win32cr::Foundation::PSTR, annotation__ : Win32cr::Foundation::PSTR, instance_guid : LibC::GUID*, dns_domain_name : Win32cr::Foundation::PSTR, auth_identity : Void*, service_principal_name : Win32cr::Foundation::PSTR, bind_flags : UInt32, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindToISTGW(site_name : Win32cr::Foundation::PWSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindToISTGA(site_name : Win32cr::Foundation::PSTR, phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsBindingSetTimeout(hDS : Win32cr::Foundation::HANDLE, cTimeoutSecs : UInt32) : UInt32

    fun DsUnBindW(phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsUnBindA(phDS : Win32cr::Foundation::HANDLE*) : UInt32

    fun DsMakePasswordCredentialsW(user : Win32cr::Foundation::PWSTR, domain : Win32cr::Foundation::PWSTR, password : Win32cr::Foundation::PWSTR, pAuthIdentity : Void**) : UInt32

    fun DsMakePasswordCredentialsA(user : Win32cr::Foundation::PSTR, domain : Win32cr::Foundation::PSTR, password : Win32cr::Foundation::PSTR, pAuthIdentity : Void**) : UInt32

    fun DsFreePasswordCredentials(auth_identity : Void*) : Void

    fun DsCrackNamesW(hDS : Win32cr::Foundation::HANDLE, flags : Win32cr::Networking::ActiveDirectory::DS_NAME_FLAGS, formatOffered : Win32cr::Networking::ActiveDirectory::DS_NAME_FORMAT, formatDesired : Win32cr::Networking::ActiveDirectory::DS_NAME_FORMAT, cNames : UInt32, rpNames : Win32cr::Foundation::PWSTR*, ppResult : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsCrackNamesA(hDS : Win32cr::Foundation::HANDLE, flags : Win32cr::Networking::ActiveDirectory::DS_NAME_FLAGS, formatOffered : Win32cr::Networking::ActiveDirectory::DS_NAME_FORMAT, formatDesired : Win32cr::Networking::ActiveDirectory::DS_NAME_FORMAT, cNames : UInt32, rpNames : Win32cr::Foundation::PSTR*, ppResult : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsFreeNameResultW(pResult : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW*) : Void

    fun DsFreeNameResultA(pResult : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA*) : Void

    fun DsGetSpnA(service_type : Win32cr::Networking::ActiveDirectory::DS_SPN_NAME_TYPE, service_class : Win32cr::Foundation::PSTR, service_name : Win32cr::Foundation::PSTR, instance_port : UInt16, cInstanceNames : UInt16, pInstanceNames : Win32cr::Foundation::PSTR*, pInstancePorts : UInt16*, pcSpn : UInt32*, prpszSpn : Win32cr::Foundation::PSTR**) : UInt32

    fun DsGetSpnW(service_type : Win32cr::Networking::ActiveDirectory::DS_SPN_NAME_TYPE, service_class : Win32cr::Foundation::PWSTR, service_name : Win32cr::Foundation::PWSTR, instance_port : UInt16, cInstanceNames : UInt16, pInstanceNames : Win32cr::Foundation::PWSTR*, pInstancePorts : UInt16*, pcSpn : UInt32*, prpszSpn : Win32cr::Foundation::PWSTR**) : UInt32

    fun DsFreeSpnArrayA(cSpn : UInt32, rpszSpn : Win32cr::Foundation::PSTR*) : Void

    fun DsFreeSpnArrayW(cSpn : UInt32, rpszSpn : Win32cr::Foundation::PWSTR*) : Void

    fun DsWriteAccountSpnA(hDS : Win32cr::Foundation::HANDLE, operation : Win32cr::Networking::ActiveDirectory::DS_SPN_WRITE_OP, pszAccount : Win32cr::Foundation::PSTR, cSpn : UInt32, rpszSpn : Win32cr::Foundation::PSTR*) : UInt32

    fun DsWriteAccountSpnW(hDS : Win32cr::Foundation::HANDLE, operation : Win32cr::Networking::ActiveDirectory::DS_SPN_WRITE_OP, pszAccount : Win32cr::Foundation::PWSTR, cSpn : UInt32, rpszSpn : Win32cr::Foundation::PWSTR*) : UInt32

    fun DsClientMakeSpnForTargetServerW(service_class : Win32cr::Foundation::PWSTR, service_name : Win32cr::Foundation::PWSTR, pcSpnLength : UInt32*, pszSpn : UInt16*) : UInt32

    fun DsClientMakeSpnForTargetServerA(service_class : Win32cr::Foundation::PSTR, service_name : Win32cr::Foundation::PSTR, pcSpnLength : UInt32*, pszSpn : UInt8*) : UInt32

    fun DsServerRegisterSpnA(operation : Win32cr::Networking::ActiveDirectory::DS_SPN_WRITE_OP, service_class : Win32cr::Foundation::PSTR, user_object_dn : Win32cr::Foundation::PSTR) : UInt32

    fun DsServerRegisterSpnW(operation : Win32cr::Networking::ActiveDirectory::DS_SPN_WRITE_OP, service_class : Win32cr::Foundation::PWSTR, user_object_dn : Win32cr::Foundation::PWSTR) : UInt32

    fun DsReplicaSyncA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, pUuidDsaSrc : LibC::GUID*, options : UInt32) : UInt32

    fun DsReplicaSyncW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, pUuidDsaSrc : LibC::GUID*, options : UInt32) : UInt32

    fun DsReplicaAddA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, source_dsa_dn : Win32cr::Foundation::PSTR, transport_dn : Win32cr::Foundation::PSTR, source_dsa_address : Win32cr::Foundation::PSTR, pSchedule : Win32cr::Networking::ActiveDirectory::SCHEDULE*, options : UInt32) : UInt32

    fun DsReplicaAddW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, source_dsa_dn : Win32cr::Foundation::PWSTR, transport_dn : Win32cr::Foundation::PWSTR, source_dsa_address : Win32cr::Foundation::PWSTR, pSchedule : Win32cr::Networking::ActiveDirectory::SCHEDULE*, options : UInt32) : UInt32

    fun DsReplicaDelA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, dsa_src : Win32cr::Foundation::PSTR, options : UInt32) : UInt32

    fun DsReplicaDelW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, dsa_src : Win32cr::Foundation::PWSTR, options : UInt32) : UInt32

    fun DsReplicaModifyA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, pUuidSourceDsa : LibC::GUID*, transport_dn : Win32cr::Foundation::PSTR, source_dsa_address : Win32cr::Foundation::PSTR, pSchedule : Win32cr::Networking::ActiveDirectory::SCHEDULE*, replica_flags : UInt32, modify_fields : UInt32, options : UInt32) : UInt32

    fun DsReplicaModifyW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, pUuidSourceDsa : LibC::GUID*, transport_dn : Win32cr::Foundation::PWSTR, source_dsa_address : Win32cr::Foundation::PWSTR, pSchedule : Win32cr::Networking::ActiveDirectory::SCHEDULE*, replica_flags : UInt32, modify_fields : UInt32, options : UInt32) : UInt32

    fun DsReplicaUpdateRefsA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, dsa_dest : Win32cr::Foundation::PSTR, pUuidDsaDest : LibC::GUID*, options : UInt32) : UInt32

    fun DsReplicaUpdateRefsW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, dsa_dest : Win32cr::Foundation::PWSTR, pUuidDsaDest : LibC::GUID*, options : UInt32) : UInt32

    fun DsReplicaSyncAllA(hDS : Win32cr::Foundation::HANDLE, pszNameContext : Win32cr::Foundation::PSTR, ulFlags : UInt32, pFnCallBack : LibC::IntPtrT, pCallbackData : Void*, pErrors : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOA***) : UInt32

    fun DsReplicaSyncAllW(hDS : Win32cr::Foundation::HANDLE, pszNameContext : Win32cr::Foundation::PWSTR, ulFlags : UInt32, pFnCallBack : LibC::IntPtrT, pCallbackData : Void*, pErrors : Win32cr::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOW***) : UInt32

    fun DsRemoveDsServerW(hDs : Win32cr::Foundation::HANDLE, server_dn : Win32cr::Foundation::PWSTR, domain_dn : Win32cr::Foundation::PWSTR, fLastDcInDomain : Win32cr::Foundation::BOOL*, fCommit : Win32cr::Foundation::BOOL) : UInt32

    fun DsRemoveDsServerA(hDs : Win32cr::Foundation::HANDLE, server_dn : Win32cr::Foundation::PSTR, domain_dn : Win32cr::Foundation::PSTR, fLastDcInDomain : Win32cr::Foundation::BOOL*, fCommit : Win32cr::Foundation::BOOL) : UInt32

    fun DsRemoveDsDomainW(hDs : Win32cr::Foundation::HANDLE, domain_dn : Win32cr::Foundation::PWSTR) : UInt32

    fun DsRemoveDsDomainA(hDs : Win32cr::Foundation::HANDLE, domain_dn : Win32cr::Foundation::PSTR) : UInt32

    fun DsListSitesA(hDs : Win32cr::Foundation::HANDLE, ppSites : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListSitesW(hDs : Win32cr::Foundation::HANDLE, ppSites : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsListServersInSiteA(hDs : Win32cr::Foundation::HANDLE, site : Win32cr::Foundation::PSTR, ppServers : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListServersInSiteW(hDs : Win32cr::Foundation::HANDLE, site : Win32cr::Foundation::PWSTR, ppServers : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsListDomainsInSiteA(hDs : Win32cr::Foundation::HANDLE, site : Win32cr::Foundation::PSTR, ppDomains : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListDomainsInSiteW(hDs : Win32cr::Foundation::HANDLE, site : Win32cr::Foundation::PWSTR, ppDomains : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsListServersForDomainInSiteA(hDs : Win32cr::Foundation::HANDLE, domain : Win32cr::Foundation::PSTR, site : Win32cr::Foundation::PSTR, ppServers : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListServersForDomainInSiteW(hDs : Win32cr::Foundation::HANDLE, domain : Win32cr::Foundation::PWSTR, site : Win32cr::Foundation::PWSTR, ppServers : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsListInfoForServerA(hDs : Win32cr::Foundation::HANDLE, server : Win32cr::Foundation::PSTR, ppInfo : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListInfoForServerW(hDs : Win32cr::Foundation::HANDLE, server : Win32cr::Foundation::PWSTR, ppInfo : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsListRolesA(hDs : Win32cr::Foundation::HANDLE, ppRoles : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTA**) : UInt32

    fun DsListRolesW(hDs : Win32cr::Foundation::HANDLE, ppRoles : Win32cr::Networking::ActiveDirectory::DS_NAME_RESULTW**) : UInt32

    fun DsQuerySitesByCostW(hDS : Win32cr::Foundation::HANDLE, pwszFromSite : Win32cr::Foundation::PWSTR, rgwszToSites : Win32cr::Foundation::PWSTR*, cToSites : UInt32, dwFlags : UInt32, prgSiteInfo : Win32cr::Networking::ActiveDirectory::DS_SITE_COST_INFO**) : UInt32

    fun DsQuerySitesByCostA(hDS : Win32cr::Foundation::HANDLE, pszFromSite : Win32cr::Foundation::PSTR, rgszToSites : Win32cr::Foundation::PSTR*, cToSites : UInt32, dwFlags : UInt32, prgSiteInfo : Win32cr::Networking::ActiveDirectory::DS_SITE_COST_INFO**) : UInt32

    fun DsQuerySitesFree(rgSiteInfo : Win32cr::Networking::ActiveDirectory::DS_SITE_COST_INFO*) : Void

    fun DsMapSchemaGuidsA(hDs : Win32cr::Foundation::HANDLE, cGuids : UInt32, rGuids : LibC::GUID*, ppGuidMap : Win32cr::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPA**) : UInt32

    fun DsFreeSchemaGuidMapA(pGuidMap : Win32cr::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPA*) : Void

    fun DsMapSchemaGuidsW(hDs : Win32cr::Foundation::HANDLE, cGuids : UInt32, rGuids : LibC::GUID*, ppGuidMap : Win32cr::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPW**) : UInt32

    fun DsFreeSchemaGuidMapW(pGuidMap : Win32cr::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPW*) : Void

    fun DsGetDomainControllerInfoA(hDs : Win32cr::Foundation::HANDLE, domain_name : Win32cr::Foundation::PSTR, info_level : UInt32, pcOut : UInt32*, ppInfo : Void**) : UInt32

    fun DsGetDomainControllerInfoW(hDs : Win32cr::Foundation::HANDLE, domain_name : Win32cr::Foundation::PWSTR, info_level : UInt32, pcOut : UInt32*, ppInfo : Void**) : UInt32

    fun DsFreeDomainControllerInfoA(info_level : UInt32, cInfo : UInt32, pInfo : Void*) : Void

    fun DsFreeDomainControllerInfoW(info_level : UInt32, cInfo : UInt32, pInfo : Void*) : Void

    fun DsReplicaConsistencyCheck(hDS : Win32cr::Foundation::HANDLE, task_id : Win32cr::Networking::ActiveDirectory::DS_KCC_TASKID, dwFlags : UInt32) : UInt32

    fun DsReplicaVerifyObjectsW(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PWSTR, pUuidDsaSrc : LibC::GUID*, ulOptions : UInt32) : UInt32

    fun DsReplicaVerifyObjectsA(hDS : Win32cr::Foundation::HANDLE, name_context : Win32cr::Foundation::PSTR, pUuidDsaSrc : LibC::GUID*, ulOptions : UInt32) : UInt32

    fun DsReplicaGetInfoW(hDS : Win32cr::Foundation::HANDLE, info_type : Win32cr::Networking::ActiveDirectory::DS_REPL_INFO_TYPE, pszObject : Win32cr::Foundation::PWSTR, puuidForSourceDsaObjGuid : LibC::GUID*, ppInfo : Void**) : UInt32

    fun DsReplicaGetInfo2W(hDS : Win32cr::Foundation::HANDLE, info_type : Win32cr::Networking::ActiveDirectory::DS_REPL_INFO_TYPE, pszObject : Win32cr::Foundation::PWSTR, puuidForSourceDsaObjGuid : LibC::GUID*, pszAttributeName : Win32cr::Foundation::PWSTR, pszValue : Win32cr::Foundation::PWSTR, dwFlags : UInt32, dwEnumerationContext : UInt32, ppInfo : Void**) : UInt32

    fun DsReplicaFreeInfo(info_type : Win32cr::Networking::ActiveDirectory::DS_REPL_INFO_TYPE, pInfo : Void*) : Void

    fun DsAddSidHistoryW(hDS : Win32cr::Foundation::HANDLE, flags : UInt32, src_domain : Win32cr::Foundation::PWSTR, src_principal : Win32cr::Foundation::PWSTR, src_domain_controller : Win32cr::Foundation::PWSTR, src_domain_creds : Void*, dst_domain : Win32cr::Foundation::PWSTR, dst_principal : Win32cr::Foundation::PWSTR) : UInt32

    fun DsAddSidHistoryA(hDS : Win32cr::Foundation::HANDLE, flags : UInt32, src_domain : Win32cr::Foundation::PSTR, src_principal : Win32cr::Foundation::PSTR, src_domain_controller : Win32cr::Foundation::PSTR, src_domain_creds : Void*, dst_domain : Win32cr::Foundation::PSTR, dst_principal : Win32cr::Foundation::PSTR) : UInt32

    fun DsInheritSecurityIdentityW(hDS : Win32cr::Foundation::HANDLE, flags : UInt32, src_principal : Win32cr::Foundation::PWSTR, dst_principal : Win32cr::Foundation::PWSTR) : UInt32

    fun DsInheritSecurityIdentityA(hDS : Win32cr::Foundation::HANDLE, flags : UInt32, src_principal : Win32cr::Foundation::PSTR, dst_principal : Win32cr::Foundation::PSTR) : UInt32

    fun DsRoleGetPrimaryDomainInformation(lpServer : Win32cr::Foundation::PWSTR, info_level : Win32cr::Networking::ActiveDirectory::DSROLE_PRIMARY_DOMAIN_INFO_LEVEL, buffer : UInt8**) : UInt32

    fun DsRoleFreeMemory(buffer : Void*) : Void

    fun DsGetDcNameA(computer_name : Win32cr::Foundation::PSTR, domain_name : Win32cr::Foundation::PSTR, domain_guid : LibC::GUID*, site_name : Win32cr::Foundation::PSTR, flags : UInt32, domain_controller_info : Win32cr::Networking::ActiveDirectory::DOMAIN_CONTROLLER_INFOA**) : UInt32

    fun DsGetDcNameW(computer_name : Win32cr::Foundation::PWSTR, domain_name : Win32cr::Foundation::PWSTR, domain_guid : LibC::GUID*, site_name : Win32cr::Foundation::PWSTR, flags : UInt32, domain_controller_info : Win32cr::Networking::ActiveDirectory::DOMAIN_CONTROLLER_INFOW**) : UInt32

    fun DsGetSiteNameA(computer_name : Win32cr::Foundation::PSTR, site_name : Win32cr::Foundation::PSTR*) : UInt32

    fun DsGetSiteNameW(computer_name : Win32cr::Foundation::PWSTR, site_name : Win32cr::Foundation::PWSTR*) : UInt32

    fun DsValidateSubnetNameW(subnet_name : Win32cr::Foundation::PWSTR) : UInt32

    fun DsValidateSubnetNameA(subnet_name : Win32cr::Foundation::PSTR) : UInt32

    fun DsAddressToSiteNamesW(computer_name : Win32cr::Foundation::PWSTR, entry_count : UInt32, socket_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS*, site_names : Win32cr::Foundation::PWSTR**) : UInt32

    fun DsAddressToSiteNamesA(computer_name : Win32cr::Foundation::PSTR, entry_count : UInt32, socket_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS*, site_names : Win32cr::Foundation::PSTR**) : UInt32

    fun DsAddressToSiteNamesExW(computer_name : Win32cr::Foundation::PWSTR, entry_count : UInt32, socket_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS*, site_names : Win32cr::Foundation::PWSTR**, subnet_names : Win32cr::Foundation::PWSTR**) : UInt32

    fun DsAddressToSiteNamesExA(computer_name : Win32cr::Foundation::PSTR, entry_count : UInt32, socket_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS*, site_names : Win32cr::Foundation::PSTR**, subnet_names : Win32cr::Foundation::PSTR**) : UInt32

    fun DsEnumerateDomainTrustsW(server_name : Win32cr::Foundation::PWSTR, flags : UInt32, domains : Win32cr::Networking::ActiveDirectory::DS_DOMAIN_TRUSTSW**, domain_count : UInt32*) : UInt32

    fun DsEnumerateDomainTrustsA(server_name : Win32cr::Foundation::PSTR, flags : UInt32, domains : Win32cr::Networking::ActiveDirectory::DS_DOMAIN_TRUSTSA**, domain_count : UInt32*) : UInt32

    fun DsGetForestTrustInformationW(server_name : Win32cr::Foundation::PWSTR, trusted_domain_name : Win32cr::Foundation::PWSTR, flags : UInt32, forest_trust_info : Win32cr::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION**) : UInt32

    fun DsMergeForestTrustInformationW(domain_name : Win32cr::Foundation::PWSTR, new_forest_trust_info : Win32cr::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION*, old_forest_trust_info : Win32cr::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION*, merged_forest_trust_info : Win32cr::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION**) : UInt32

    fun DsGetDcSiteCoverageW(server_name : Win32cr::Foundation::PWSTR, entry_count : UInt32*, site_names : Win32cr::Foundation::PWSTR**) : UInt32

    fun DsGetDcSiteCoverageA(server_name : Win32cr::Foundation::PSTR, entry_count : UInt32*, site_names : Win32cr::Foundation::PSTR**) : UInt32

    fun DsDeregisterDnsHostRecordsW(server_name : Win32cr::Foundation::PWSTR, dns_domain_name : Win32cr::Foundation::PWSTR, domain_guid : LibC::GUID*, dsa_guid : LibC::GUID*, dns_host_name : Win32cr::Foundation::PWSTR) : UInt32

    fun DsDeregisterDnsHostRecordsA(server_name : Win32cr::Foundation::PSTR, dns_domain_name : Win32cr::Foundation::PSTR, domain_guid : LibC::GUID*, dsa_guid : LibC::GUID*, dns_host_name : Win32cr::Foundation::PSTR) : UInt32

    fun DsGetDcOpenW(dns_name : Win32cr::Foundation::PWSTR, option_flags : UInt32, site_name : Win32cr::Foundation::PWSTR, domain_guid : LibC::GUID*, dns_forest_name : Win32cr::Foundation::PWSTR, dc_flags : UInt32, ret_get_dc_context : Win32cr::Networking::ActiveDirectory::GetDcContextHandle*) : UInt32

    fun DsGetDcOpenA(dns_name : Win32cr::Foundation::PSTR, option_flags : UInt32, site_name : Win32cr::Foundation::PSTR, domain_guid : LibC::GUID*, dns_forest_name : Win32cr::Foundation::PSTR, dc_flags : UInt32, ret_get_dc_context : Win32cr::Networking::ActiveDirectory::GetDcContextHandle*) : UInt32

    fun DsGetDcNextW(get_dc_context_handle : Win32cr::Foundation::HANDLE, sock_address_count : UInt32*, sock_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS**, dns_host_name : Win32cr::Foundation::PWSTR*) : UInt32

    fun DsGetDcNextA(get_dc_context_handle : Win32cr::Foundation::HANDLE, sock_address_count : UInt32*, sock_addresses : Win32cr::Networking::WinSock::SOCKET_ADDRESS**, dns_host_name : Win32cr::Foundation::PSTR*) : UInt32

    fun DsGetDcCloseW(get_dc_context_handle : Win32cr::Networking::ActiveDirectory::GetDcContextHandle) : Void

  end
end