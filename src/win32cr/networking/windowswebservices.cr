require "../foundation.cr"
require "../security/cryptography.cr"
require "../security/authentication/identity.cr"
require "../system/winrt.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:webservices.dll")]
@[Link(ldflags: "/DELAYLOAD:webauthn.dll")]
{% else %}
@[Link("webservices")]
@[Link("webauthn")]
{% end %}
lib LibWin32
  WEBAUTHN_API_VERSION_1 = 1_u32
  WEBAUTHN_API_VERSION_2 = 2_u32
  WEBAUTHN_API_VERSION_3 = 3_u32
  WEBAUTHN_API_CURRENT_VERSION = 3_u32
  WEBAUTHN_RP_ENTITY_INFORMATION_CURRENT_VERSION = 1_u32
  WEBAUTHN_MAX_USER_ID_LENGTH = 64_u32
  WEBAUTHN_USER_ENTITY_INFORMATION_CURRENT_VERSION = 1_u32
  WEBAUTHN_CLIENT_DATA_CURRENT_VERSION = 1_u32
  WEBAUTHN_COSE_ALGORITHM_ECDSA_P256_WITH_SHA256 = -7_i32
  WEBAUTHN_COSE_ALGORITHM_ECDSA_P384_WITH_SHA384 = -35_i32
  WEBAUTHN_COSE_ALGORITHM_ECDSA_P521_WITH_SHA512 = -36_i32
  WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA256 = -257_i32
  WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA384 = -258_i32
  WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA512 = -259_i32
  WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA256 = -37_i32
  WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA384 = -38_i32
  WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA512 = -39_i32
  WEBAUTHN_COSE_CREDENTIAL_PARAMETER_CURRENT_VERSION = 1_u32
  WEBAUTHN_CREDENTIAL_CURRENT_VERSION = 1_u32
  WEBAUTHN_CTAP_TRANSPORT_USB = 1_u32
  WEBAUTHN_CTAP_TRANSPORT_NFC = 2_u32
  WEBAUTHN_CTAP_TRANSPORT_BLE = 4_u32
  WEBAUTHN_CTAP_TRANSPORT_TEST = 8_u32
  WEBAUTHN_CTAP_TRANSPORT_INTERNAL = 16_u32
  WEBAUTHN_CTAP_TRANSPORT_FLAGS_MASK = 31_u32
  WEBAUTHN_CREDENTIAL_EX_CURRENT_VERSION = 1_u32
  WEBAUTHN_USER_VERIFICATION_ANY = 0_u32
  WEBAUTHN_USER_VERIFICATION_OPTIONAL = 1_u32
  WEBAUTHN_USER_VERIFICATION_OPTIONAL_WITH_CREDENTIAL_ID_LIST = 2_u32
  WEBAUTHN_USER_VERIFICATION_REQUIRED = 3_u32
  WEBAUTHN_AUTHENTICATOR_ATTACHMENT_ANY = 0_u32
  WEBAUTHN_AUTHENTICATOR_ATTACHMENT_PLATFORM = 1_u32
  WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM = 2_u32
  WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM_U2F_V2 = 3_u32
  WEBAUTHN_USER_VERIFICATION_REQUIREMENT_ANY = 0_u32
  WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED = 1_u32
  WEBAUTHN_USER_VERIFICATION_REQUIREMENT_PREFERRED = 2_u32
  WEBAUTHN_USER_VERIFICATION_REQUIREMENT_DISCOURAGED = 3_u32
  WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_ANY = 0_u32
  WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_NONE = 1_u32
  WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_INDIRECT = 2_u32
  WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_DIRECT = 3_u32
  WEBAUTHN_ENTERPRISE_ATTESTATION_NONE = 0_u32
  WEBAUTHN_ENTERPRISE_ATTESTATION_VENDOR_FACILITATED = 1_u32
  WEBAUTHN_ENTERPRISE_ATTESTATION_PLATFORM_MANAGED = 2_u32
  WEBAUTHN_LARGE_BLOB_SUPPORT_NONE = 0_u32
  WEBAUTHN_LARGE_BLOB_SUPPORT_REQUIRED = 1_u32
  WEBAUTHN_LARGE_BLOB_SUPPORT_PREFERRED = 2_u32
  WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_1 = 1_u32
  WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_2 = 2_u32
  WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_3 = 3_u32
  WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_4 = 4_u32
  WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_CURRENT_VERSION = 4_u32
  WEBAUTHN_CRED_LARGE_BLOB_OPERATION_NONE = 0_u32
  WEBAUTHN_CRED_LARGE_BLOB_OPERATION_GET = 1_u32
  WEBAUTHN_CRED_LARGE_BLOB_OPERATION_SET = 2_u32
  WEBAUTHN_CRED_LARGE_BLOB_OPERATION_DELETE = 3_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_1 = 1_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_2 = 2_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_3 = 3_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_4 = 4_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_5 = 5_u32
  WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_CURRENT_VERSION = 5_u32
  WEBAUTHN_ATTESTATION_DECODE_NONE = 0_u32
  WEBAUTHN_ATTESTATION_DECODE_COMMON = 1_u32
  WEBAUTHN_COMMON_ATTESTATION_CURRENT_VERSION = 1_u32
  WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_1 = 1_u32
  WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_2 = 2_u32
  WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_3 = 3_u32
  WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_4 = 4_u32
  WEBAUTHN_CREDENTIAL_ATTESTATION_CURRENT_VERSION = 4_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_NONE = 0_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_SUCCESS = 1_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_NOT_SUPPORTED = 2_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_INVALID_DATA = 3_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_INVALID_PARAMETER = 4_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_NOT_FOUND = 5_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_MULTIPLE_CREDENTIALS = 6_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_LACK_OF_SPACE = 7_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_PLATFORM_ERROR = 8_u32
  WEBAUTHN_CRED_LARGE_BLOB_STATUS_AUTHENTICATOR_ERROR = 9_u32
  WEBAUTHN_ASSERTION_VERSION_1 = 1_u32
  WEBAUTHN_ASSERTION_VERSION_2 = 2_u32
  WEBAUTHN_ASSERTION_CURRENT_VERSION = 2_u32
  WS_HTTP_HEADER_MAPPING_COMMA_SEPARATOR = 1_i32
  WS_HTTP_HEADER_MAPPING_SEMICOLON_SEPARATOR = 2_i32
  WS_HTTP_HEADER_MAPPING_QUOTED_VALUE = 4_i32
  WS_HTTP_RESPONSE_MAPPING_STATUS_CODE = 1_i32
  WS_HTTP_RESPONSE_MAPPING_STATUS_TEXT = 2_i32
  WS_HTTP_REQUEST_MAPPING_VERB = 2_i32
  WS_MATCH_URL_DNS_HOST = 1_i32
  WS_MATCH_URL_DNS_FULLY_QUALIFIED_HOST = 2_i32
  WS_MATCH_URL_NETBIOS_HOST = 4_i32
  WS_MATCH_URL_LOCAL_HOST = 8_i32
  WS_MATCH_URL_HOST_ADDRESSES = 16_i32
  WS_MATCH_URL_THIS_HOST = 31_i32
  WS_MATCH_URL_PORT = 32_i32
  WS_MATCH_URL_EXACT_PATH = 64_i32
  WS_MATCH_URL_PREFIX_PATH = 128_i32
  WS_MATCH_URL_NO_QUERY = 256_i32
  WS_MUST_UNDERSTAND_HEADER_ATTRIBUTE = 1_i32
  WS_RELAY_HEADER_ATTRIBUTE = 2_i32
  WS_HTTP_HEADER_AUTH_SCHEME_NONE = 1_i32
  WS_HTTP_HEADER_AUTH_SCHEME_BASIC = 2_i32
  WS_HTTP_HEADER_AUTH_SCHEME_DIGEST = 4_i32
  WS_HTTP_HEADER_AUTH_SCHEME_NTLM = 8_i32
  WS_HTTP_HEADER_AUTH_SCHEME_NEGOTIATE = 16_i32
  WS_HTTP_HEADER_AUTH_SCHEME_PASSPORT = 32_i32
  WS_CERT_FAILURE_CN_MISMATCH = 1_i32
  WS_CERT_FAILURE_INVALID_DATE = 2_i32
  WS_CERT_FAILURE_UNTRUSTED_ROOT = 4_i32
  WS_CERT_FAILURE_WRONG_USAGE = 8_i32
  WS_CERT_FAILURE_REVOCATION_OFFLINE = 16_i32
  WS_STRUCT_ABSTRACT = 1_i32
  WS_STRUCT_IGNORE_TRAILING_ELEMENT_CONTENT = 2_i32
  WS_STRUCT_IGNORE_UNHANDLED_ATTRIBUTES = 4_i32
  WS_FIELD_POINTER = 1_i32
  WS_FIELD_OPTIONAL = 2_i32
  WS_FIELD_NILLABLE = 4_i32
  WS_FIELD_NILLABLE_ITEM = 8_i32
  WS_FIELD_OTHER_NAMESPACE = 16_i32
  WS_SERVICE_OPERATION_MESSAGE_NILLABLE_ELEMENT = 1_i32
  WS_URL_FLAGS_ALLOW_HOST_WILDCARDS = 1_i32
  WS_URL_FLAGS_NO_PATH_COLLAPSE = 2_i32
  WS_URL_FLAGS_ZERO_TERMINATE = 4_i32

  type WS_XML_READER = Void
  type WS_XML_WRITER = Void
  type WS_XML_BUFFER = Void
  type WS_CHANNEL = Void
  type WS_OPERATION_CONTEXT = Void
  type WS_ERROR = Void
  type WS_HEAP = Void
  type WS_LISTENER = Void
  type WS_MESSAGE = Void
  type WS_SECURITY_TOKEN = Void
  type WS_SECURITY_CONTEXT = Void
  type WS_SERVICE_HOST = Void
  type WS_SERVICE_PROXY = Void
  type WS_METADATA = Void
  type WS_POLICY = Void

  alias WS_READ_CALLBACK = Proc(Void*, Void*, UInt32, UInt32*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_WRITE_CALLBACK = Proc(Void*, WS_BYTES*, UInt32, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_PUSH_BYTES_CALLBACK = Proc(Void*, WS_WRITE_CALLBACK, Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_PULL_BYTES_CALLBACK = Proc(Void*, Void*, UInt32, UInt32*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_DYNAMIC_STRING_CALLBACK = Proc(Void*, WS_XML_STRING*, LibC::BOOL*, UInt32*, WS_ERROR*, HRESULT)
  alias WS_ASYNC_CALLBACK = Proc(HRESULT, WS_CALLBACK_MODEL, Void*, Void)
  alias WS_ASYNC_FUNCTION = Proc(HRESULT, WS_CALLBACK_MODEL, Void*, WS_ASYNC_OPERATION*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_CREATE_CHANNEL_CALLBACK = Proc(WS_CHANNEL_TYPE, Void*, UInt32, Void**, WS_ERROR*, HRESULT)
  alias WS_FREE_CHANNEL_CALLBACK = Proc(Void*, Void)
  alias WS_RESET_CHANNEL_CALLBACK = Proc(Void*, WS_ERROR*, HRESULT)
  alias WS_ABORT_CHANNEL_CALLBACK = Proc(Void*, WS_ERROR*, HRESULT)
  alias WS_OPEN_CHANNEL_CALLBACK = Proc(Void*, WS_ENDPOINT_ADDRESS*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_CLOSE_CHANNEL_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_SET_CHANNEL_PROPERTY_CALLBACK = Proc(Void*, WS_CHANNEL_PROPERTY_ID, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_GET_CHANNEL_PROPERTY_CALLBACK = Proc(Void*, WS_CHANNEL_PROPERTY_ID, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_READ_MESSAGE_START_CALLBACK = Proc(Void*, WS_MESSAGE*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_READ_MESSAGE_END_CALLBACK = Proc(Void*, WS_MESSAGE*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_WRITE_MESSAGE_START_CALLBACK = Proc(Void*, WS_MESSAGE*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_WRITE_MESSAGE_END_CALLBACK = Proc(Void*, WS_MESSAGE*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_ABANDON_MESSAGE_CALLBACK = Proc(Void*, WS_MESSAGE*, WS_ERROR*, HRESULT)
  alias WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_CREATE_ENCODER_CALLBACK = Proc(Void*, WS_WRITE_CALLBACK, Void*, Void**, WS_ERROR*, HRESULT)
  alias WS_ENCODER_GET_CONTENT_TYPE_CALLBACK = Proc(Void*, WS_STRING*, WS_STRING*, WS_STRING*, WS_ERROR*, HRESULT)
  alias WS_ENCODER_START_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_ENCODER_ENCODE_CALLBACK = Proc(Void*, WS_BYTES*, UInt32, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_ENCODER_END_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_FREE_ENCODER_CALLBACK = Proc(Void*, Void)
  alias WS_CREATE_DECODER_CALLBACK = Proc(Void*, WS_READ_CALLBACK, Void*, Void**, WS_ERROR*, HRESULT)
  alias WS_DECODER_GET_CONTENT_TYPE_CALLBACK = Proc(Void*, WS_STRING*, WS_STRING*, WS_STRING*, WS_ERROR*, HRESULT)
  alias WS_DECODER_START_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_DECODER_DECODE_CALLBACK = Proc(Void*, Void*, UInt32, UInt32*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_DECODER_END_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_FREE_DECODER_CALLBACK = Proc(Void*, Void)
  alias WS_HTTP_REDIRECT_CALLBACK = Proc(Void*, WS_STRING*, WS_STRING*, HRESULT)
  alias WS_CREATE_LISTENER_CALLBACK = Proc(WS_CHANNEL_TYPE, Void*, UInt32, Void**, WS_ERROR*, HRESULT)
  alias WS_FREE_LISTENER_CALLBACK = Proc(Void*, Void)
  alias WS_RESET_LISTENER_CALLBACK = Proc(Void*, WS_ERROR*, HRESULT)
  alias WS_OPEN_LISTENER_CALLBACK = Proc(Void*, WS_STRING*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_CLOSE_LISTENER_CALLBACK = Proc(Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_GET_LISTENER_PROPERTY_CALLBACK = Proc(Void*, WS_LISTENER_PROPERTY_ID, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_SET_LISTENER_PROPERTY_CALLBACK = Proc(Void*, WS_LISTENER_PROPERTY_ID, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_ACCEPT_CHANNEL_CALLBACK = Proc(Void*, Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_ABORT_LISTENER_CALLBACK = Proc(Void*, WS_ERROR*, HRESULT)
  alias WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK = Proc(Void*, Void*, UInt32, Void**, WS_ERROR*, HRESULT)
  alias WS_MESSAGE_DONE_CALLBACK = Proc(Void*, Void)
  alias WS_CERTIFICATE_VALIDATION_CALLBACK = Proc(CERT_CONTEXT*, Void*, HRESULT)
  alias WS_GET_CERT_CALLBACK = Proc(Void*, WS_ENDPOINT_ADDRESS*, WS_STRING*, CERT_CONTEXT**, WS_ERROR*, HRESULT)
  alias WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK = Proc(Void*, SecPkgContext_IssuerListInfoEx*, WS_ERROR*, HRESULT)
  alias WS_VALIDATE_PASSWORD_CALLBACK = Proc(Void*, WS_STRING*, WS_STRING*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_VALIDATE_SAML_CALLBACK = Proc(Void*, WS_XML_BUFFER*, WS_ERROR*, HRESULT)
  alias WS_DURATION_COMPARISON_CALLBACK = Proc(WS_DURATION*, WS_DURATION*, Int32*, WS_ERROR*, HRESULT)
  alias WS_READ_TYPE_CALLBACK = Proc(WS_XML_READER*, WS_TYPE_MAPPING, Void*, WS_HEAP*, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_WRITE_TYPE_CALLBACK = Proc(WS_XML_WRITER*, WS_TYPE_MAPPING, Void*, Void*, UInt32, WS_ERROR*, HRESULT)
  alias WS_IS_DEFAULT_VALUE_CALLBACK = Proc(Void*, Void*, Void*, UInt32, LibC::BOOL*, WS_ERROR*, HRESULT)
  alias WS_SERVICE_MESSAGE_RECEIVE_CALLBACK = Proc(WS_OPERATION_CONTEXT*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_OPERATION_CANCEL_CALLBACK = Proc(WS_SERVICE_CANCEL_REASON, Void*, Void)
  alias WS_OPERATION_FREE_STATE_CALLBACK = Proc(Void*, Void)
  alias WS_SERVICE_STUB_CALLBACK = Proc(WS_OPERATION_CONTEXT*, Void*, Void*, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_SERVICE_ACCEPT_CHANNEL_CALLBACK = Proc(WS_OPERATION_CONTEXT*, Void**, WS_ASYNC_CONTEXT*, WS_ERROR*, HRESULT)
  alias WS_SERVICE_CLOSE_CHANNEL_CALLBACK = Proc(WS_OPERATION_CONTEXT*, WS_ASYNC_CONTEXT*, HRESULT)
  alias WS_SERVICE_SECURITY_CALLBACK = Proc(WS_OPERATION_CONTEXT*, LibC::BOOL*, WS_ERROR*, HRESULT)
  alias WS_PROXY_MESSAGE_CALLBACK = Proc(WS_MESSAGE*, WS_HEAP*, Void*, WS_ERROR*, HRESULT)


  enum WS_XML_READER_PROPERTY_ID : Int32
    WS_XML_READER_PROPERTY_MAX_DEPTH = 0
    WS_XML_READER_PROPERTY_ALLOW_FRAGMENT = 1
    WS_XML_READER_PROPERTY_MAX_ATTRIBUTES = 2
    WS_XML_READER_PROPERTY_READ_DECLARATION = 3
    WS_XML_READER_PROPERTY_CHARSET = 4
    WS_XML_READER_PROPERTY_ROW = 5
    WS_XML_READER_PROPERTY_COLUMN = 6
    WS_XML_READER_PROPERTY_UTF8_TRIM_SIZE = 7
    WS_XML_READER_PROPERTY_STREAM_BUFFER_SIZE = 8
    WS_XML_READER_PROPERTY_IN_ATTRIBUTE = 9
    WS_XML_READER_PROPERTY_STREAM_MAX_ROOT_MIME_PART_SIZE = 10
    WS_XML_READER_PROPERTY_STREAM_MAX_MIME_HEADERS_SIZE = 11
    WS_XML_READER_PROPERTY_MAX_MIME_PARTS = 12
    WS_XML_READER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13
    WS_XML_READER_PROPERTY_MAX_NAMESPACES = 14
  end

  enum WS_XML_CANONICALIZATION_ALGORITHM : Int32
    WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 0
    WS_EXCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 1
    WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 2
    WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 3
  end

  enum WS_XML_CANONICALIZATION_PROPERTY_ID : Int32
    WS_XML_CANONICALIZATION_PROPERTY_ALGORITHM = 0
    WS_XML_CANONICALIZATION_PROPERTY_INCLUSIVE_PREFIXES = 1
    WS_XML_CANONICALIZATION_PROPERTY_OMITTED_ELEMENT = 2
    WS_XML_CANONICALIZATION_PROPERTY_OUTPUT_BUFFER_SIZE = 3
  end

  enum WS_XML_WRITER_PROPERTY_ID : Int32
    WS_XML_WRITER_PROPERTY_MAX_DEPTH = 0
    WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT = 1
    WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES = 2
    WS_XML_WRITER_PROPERTY_WRITE_DECLARATION = 3
    WS_XML_WRITER_PROPERTY_INDENT = 4
    WS_XML_WRITER_PROPERTY_BUFFER_TRIM_SIZE = 5
    WS_XML_WRITER_PROPERTY_CHARSET = 6
    WS_XML_WRITER_PROPERTY_BUFFERS = 7
    WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE = 8
    WS_XML_WRITER_PROPERTY_BYTES = 9
    WS_XML_WRITER_PROPERTY_IN_ATTRIBUTE = 10
    WS_XML_WRITER_PROPERTY_MAX_MIME_PARTS_BUFFER_SIZE = 11
    WS_XML_WRITER_PROPERTY_INITIAL_BUFFER = 12
    WS_XML_WRITER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13
    WS_XML_WRITER_PROPERTY_MAX_NAMESPACES = 14
    WS_XML_WRITER_PROPERTY_BYTES_WRITTEN = 15
    WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE = 16
    WS_XML_WRITER_PROPERTY_COMPRESS_EMPTY_ELEMENTS = 17
    WS_XML_WRITER_PROPERTY_EMIT_UNCOMPRESSED_EMPTY_ELEMENTS = 18
  end

  enum WS_XML_BUFFER_PROPERTY_ID
  end

  enum WS_XML_TEXT_TYPE : Int32
    WS_XML_TEXT_TYPE_UTF8 = 1
    WS_XML_TEXT_TYPE_UTF16 = 2
    WS_XML_TEXT_TYPE_BASE64 = 3
    WS_XML_TEXT_TYPE_BOOL = 4
    WS_XML_TEXT_TYPE_INT32 = 5
    WS_XML_TEXT_TYPE_INT64 = 6
    WS_XML_TEXT_TYPE_UINT64 = 7
    WS_XML_TEXT_TYPE_FLOAT = 8
    WS_XML_TEXT_TYPE_DOUBLE = 9
    WS_XML_TEXT_TYPE_DECIMAL = 10
    WS_XML_TEXT_TYPE_GUID = 11
    WS_XML_TEXT_TYPE_UNIQUE_ID = 12
    WS_XML_TEXT_TYPE_DATETIME = 13
    WS_XML_TEXT_TYPE_TIMESPAN = 14
    WS_XML_TEXT_TYPE_QNAME = 15
    WS_XML_TEXT_TYPE_LIST = 16
  end

  enum WS_XML_NODE_TYPE : Int32
    WS_XML_NODE_TYPE_ELEMENT = 1
    WS_XML_NODE_TYPE_TEXT = 2
    WS_XML_NODE_TYPE_END_ELEMENT = 3
    WS_XML_NODE_TYPE_COMMENT = 4
    WS_XML_NODE_TYPE_CDATA = 6
    WS_XML_NODE_TYPE_END_CDATA = 7
    WS_XML_NODE_TYPE_EOF = 8
    WS_XML_NODE_TYPE_BOF = 9
  end

  enum WS_MOVE_TO : Int32
    WS_MOVE_TO_ROOT_ELEMENT = 0
    WS_MOVE_TO_NEXT_ELEMENT = 1
    WS_MOVE_TO_PREVIOUS_ELEMENT = 2
    WS_MOVE_TO_CHILD_ELEMENT = 3
    WS_MOVE_TO_END_ELEMENT = 4
    WS_MOVE_TO_PARENT_ELEMENT = 5
    WS_MOVE_TO_NEXT_NODE = 6
    WS_MOVE_TO_PREVIOUS_NODE = 7
    WS_MOVE_TO_FIRST_NODE = 8
    WS_MOVE_TO_BOF = 9
    WS_MOVE_TO_EOF = 10
    WS_MOVE_TO_CHILD_NODE = 11
  end

  enum WS_VALUE_TYPE : Int32
    WS_BOOL_VALUE_TYPE = 0
    WS_INT8_VALUE_TYPE = 1
    WS_INT16_VALUE_TYPE = 2
    WS_INT32_VALUE_TYPE = 3
    WS_INT64_VALUE_TYPE = 4
    WS_UINT8_VALUE_TYPE = 5
    WS_UINT16_VALUE_TYPE = 6
    WS_UINT32_VALUE_TYPE = 7
    WS_UINT64_VALUE_TYPE = 8
    WS_FLOAT_VALUE_TYPE = 9
    WS_DOUBLE_VALUE_TYPE = 10
    WS_DECIMAL_VALUE_TYPE = 11
    WS_DATETIME_VALUE_TYPE = 12
    WS_TIMESPAN_VALUE_TYPE = 13
    WS_GUID_VALUE_TYPE = 14
    WS_DURATION_VALUE_TYPE = 15
  end

  enum WS_XML_READER_INPUT_TYPE : Int32
    WS_XML_READER_INPUT_TYPE_BUFFER = 1
    WS_XML_READER_INPUT_TYPE_STREAM = 2
  end

  enum WS_XML_READER_ENCODING_TYPE : Int32
    WS_XML_READER_ENCODING_TYPE_TEXT = 1
    WS_XML_READER_ENCODING_TYPE_BINARY = 2
    WS_XML_READER_ENCODING_TYPE_MTOM = 3
    WS_XML_READER_ENCODING_TYPE_RAW = 4
  end

  enum WS_CHARSET : Int32
    WS_CHARSET_AUTO = 0
    WS_CHARSET_UTF8 = 1
    WS_CHARSET_UTF16LE = 2
    WS_CHARSET_UTF16BE = 3
  end

  enum WS_XML_WRITER_ENCODING_TYPE : Int32
    WS_XML_WRITER_ENCODING_TYPE_TEXT = 1
    WS_XML_WRITER_ENCODING_TYPE_BINARY = 2
    WS_XML_WRITER_ENCODING_TYPE_MTOM = 3
    WS_XML_WRITER_ENCODING_TYPE_RAW = 4
  end

  enum WS_XML_WRITER_OUTPUT_TYPE : Int32
    WS_XML_WRITER_OUTPUT_TYPE_BUFFER = 1
    WS_XML_WRITER_OUTPUT_TYPE_STREAM = 2
  end

  enum WS_CALLBACK_MODEL : Int32
    WS_SHORT_CALLBACK = 0
    WS_LONG_CALLBACK = 1
  end

  enum WS_ENCODING : Int32
    WS_ENCODING_XML_BINARY_1 = 0
    WS_ENCODING_XML_BINARY_SESSION_1 = 1
    WS_ENCODING_XML_MTOM_UTF8 = 2
    WS_ENCODING_XML_MTOM_UTF16BE = 3
    WS_ENCODING_XML_MTOM_UTF16LE = 4
    WS_ENCODING_XML_UTF8 = 5
    WS_ENCODING_XML_UTF16BE = 6
    WS_ENCODING_XML_UTF16LE = 7
    WS_ENCODING_RAW = 8
  end

  enum WS_CHANNEL_STATE : Int32
    WS_CHANNEL_STATE_CREATED = 0
    WS_CHANNEL_STATE_OPENING = 1
    WS_CHANNEL_STATE_ACCEPTING = 2
    WS_CHANNEL_STATE_OPEN = 3
    WS_CHANNEL_STATE_FAULTED = 4
    WS_CHANNEL_STATE_CLOSING = 5
    WS_CHANNEL_STATE_CLOSED = 6
  end

  enum WS_RECEIVE_OPTION : Int32
    WS_RECEIVE_REQUIRED_MESSAGE = 1
    WS_RECEIVE_OPTIONAL_MESSAGE = 2
  end

  enum WS_CHANNEL_BINDING : Int32
    WS_HTTP_CHANNEL_BINDING = 0
    WS_TCP_CHANNEL_BINDING = 1
    WS_UDP_CHANNEL_BINDING = 2
    WS_CUSTOM_CHANNEL_BINDING = 3
    WS_NAMEDPIPE_CHANNEL_BINDING = 4
  end

  enum WS_CHANNEL_TYPE : Int32
    WS_CHANNEL_TYPE_INPUT = 1
    WS_CHANNEL_TYPE_OUTPUT = 2
    WS_CHANNEL_TYPE_SESSION = 4
    WS_CHANNEL_TYPE_INPUT_SESSION = 5
    WS_CHANNEL_TYPE_OUTPUT_SESSION = 6
    WS_CHANNEL_TYPE_DUPLEX = 3
    WS_CHANNEL_TYPE_DUPLEX_SESSION = 7
    WS_CHANNEL_TYPE_REQUEST = 8
    WS_CHANNEL_TYPE_REPLY = 16
  end

  enum WS_TRANSFER_MODE : Int32
    WS_STREAMED_INPUT_TRANSFER_MODE = 1
    WS_STREAMED_OUTPUT_TRANSFER_MODE = 2
    WS_BUFFERED_TRANSFER_MODE = 0
    WS_STREAMED_TRANSFER_MODE = 3
  end

  enum WS_HTTP_PROXY_SETTING_MODE : Int32
    WS_HTTP_PROXY_SETTING_MODE_AUTO = 1
    WS_HTTP_PROXY_SETTING_MODE_NONE = 2
    WS_HTTP_PROXY_SETTING_MODE_CUSTOM = 3
  end

  enum WS_CHANNEL_PROPERTY_ID : Int32
    WS_CHANNEL_PROPERTY_MAX_BUFFERED_MESSAGE_SIZE = 0
    WS_CHANNEL_PROPERTY_MAX_STREAMED_MESSAGE_SIZE = 1
    WS_CHANNEL_PROPERTY_MAX_STREAMED_START_SIZE = 2
    WS_CHANNEL_PROPERTY_MAX_STREAMED_FLUSH_SIZE = 3
    WS_CHANNEL_PROPERTY_ENCODING = 4
    WS_CHANNEL_PROPERTY_ENVELOPE_VERSION = 5
    WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = 6
    WS_CHANNEL_PROPERTY_MAX_SESSION_DICTIONARY_SIZE = 7
    WS_CHANNEL_PROPERTY_STATE = 8
    WS_CHANNEL_PROPERTY_ASYNC_CALLBACK_MODEL = 9
    WS_CHANNEL_PROPERTY_IP_VERSION = 10
    WS_CHANNEL_PROPERTY_RESOLVE_TIMEOUT = 11
    WS_CHANNEL_PROPERTY_CONNECT_TIMEOUT = 12
    WS_CHANNEL_PROPERTY_SEND_TIMEOUT = 13
    WS_CHANNEL_PROPERTY_RECEIVE_RESPONSE_TIMEOUT = 14
    WS_CHANNEL_PROPERTY_RECEIVE_TIMEOUT = 15
    WS_CHANNEL_PROPERTY_CLOSE_TIMEOUT = 16
    WS_CHANNEL_PROPERTY_ENABLE_TIMEOUTS = 17
    WS_CHANNEL_PROPERTY_TRANSFER_MODE = 18
    WS_CHANNEL_PROPERTY_MULTICAST_INTERFACE = 19
    WS_CHANNEL_PROPERTY_MULTICAST_HOPS = 20
    WS_CHANNEL_PROPERTY_REMOTE_ADDRESS = 21
    WS_CHANNEL_PROPERTY_REMOTE_IP_ADDRESS = 22
    WS_CHANNEL_PROPERTY_HTTP_CONNECTION_ID = 23
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS = 24
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS = 25
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_INSTANCE = 26
    WS_CHANNEL_PROPERTY_TRANSPORT_URL = 27
    WS_CHANNEL_PROPERTY_NO_DELAY = 28
    WS_CHANNEL_PROPERTY_SEND_KEEP_ALIVES = 29
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_TIME = 30
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_INTERVAL = 31
    WS_CHANNEL_PROPERTY_MAX_HTTP_SERVER_CONNECTIONS = 32
    WS_CHANNEL_PROPERTY_IS_SESSION_SHUT_DOWN = 33
    WS_CHANNEL_PROPERTY_CHANNEL_TYPE = 34
    WS_CHANNEL_PROPERTY_TRIM_BUFFERED_MESSAGE_SIZE = 35
    WS_CHANNEL_PROPERTY_ENCODER = 36
    WS_CHANNEL_PROPERTY_DECODER = 37
    WS_CHANNEL_PROPERTY_PROTECTION_LEVEL = 38
    WS_CHANNEL_PROPERTY_COOKIE_MODE = 39
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SETTING_MODE = 40
    WS_CHANNEL_PROPERTY_CUSTOM_HTTP_PROXY = 41
    WS_CHANNEL_PROPERTY_HTTP_MESSAGE_MAPPING = 42
    WS_CHANNEL_PROPERTY_ENABLE_HTTP_REDIRECT = 43
    WS_CHANNEL_PROPERTY_HTTP_REDIRECT_CALLBACK_CONTEXT = 44
    WS_CHANNEL_PROPERTY_FAULTS_AS_ERRORS = 45
    WS_CHANNEL_PROPERTY_ALLOW_UNSECURED_FAULTS = 46
    WS_CHANNEL_PROPERTY_HTTP_SERVER_SPN = 47
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SPN = 48
    WS_CHANNEL_PROPERTY_MAX_HTTP_REQUEST_HEADERS_BUFFER_SIZE = 49
  end

  enum WS_COOKIE_MODE : Int32
    WS_MANUAL_COOKIE_MODE = 1
    WS_AUTO_COOKIE_MODE = 2
  end

  enum WS_OPERATION_CONTEXT_PROPERTY_ID : Int32
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL = 0
    WS_OPERATION_CONTEXT_PROPERTY_CONTRACT_DESCRIPTION = 1
    WS_OPERATION_CONTEXT_PROPERTY_HOST_USER_STATE = 2
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL_USER_STATE = 3
    WS_OPERATION_CONTEXT_PROPERTY_INPUT_MESSAGE = 4
    WS_OPERATION_CONTEXT_PROPERTY_OUTPUT_MESSAGE = 5
    WS_OPERATION_CONTEXT_PROPERTY_HEAP = 6
    WS_OPERATION_CONTEXT_PROPERTY_LISTENER = 7
    WS_OPERATION_CONTEXT_PROPERTY_ENDPOINT_ADDRESS = 8
  end

  enum WS_ENDPOINT_IDENTITY_TYPE : Int32
    WS_DNS_ENDPOINT_IDENTITY_TYPE = 1
    WS_UPN_ENDPOINT_IDENTITY_TYPE = 2
    WS_SPN_ENDPOINT_IDENTITY_TYPE = 3
    WS_RSA_ENDPOINT_IDENTITY_TYPE = 4
    WS_CERT_ENDPOINT_IDENTITY_TYPE = 5
    WS_UNKNOWN_ENDPOINT_IDENTITY_TYPE = 6
  end

  enum WS_ENDPOINT_ADDRESS_EXTENSION_TYPE : Int32
    WS_ENDPOINT_ADDRESS_EXTENSION_METADATA_ADDRESS = 1
  end

  enum WS_ERROR_PROPERTY_ID : Int32
    WS_ERROR_PROPERTY_STRING_COUNT = 0
    WS_ERROR_PROPERTY_ORIGINAL_ERROR_CODE = 1
    WS_ERROR_PROPERTY_LANGID = 2
  end

  enum WS_EXCEPTION_CODE : Int32
    WS_EXCEPTION_CODE_USAGE_FAILURE = -1069744128
    WS_EXCEPTION_CODE_INTERNAL_FAILURE = -1069744127
  end

  enum WS_FAULT_ERROR_PROPERTY_ID : Int32
    WS_FAULT_ERROR_PROPERTY_FAULT = 0
    WS_FAULT_ERROR_PROPERTY_ACTION = 1
    WS_FAULT_ERROR_PROPERTY_HEADER = 2
  end

  enum WS_FAULT_DISCLOSURE : Int32
    WS_MINIMAL_FAULT_DISCLOSURE = 0
    WS_FULL_FAULT_DISCLOSURE = 1
  end

  enum WS_HEAP_PROPERTY_ID : Int32
    WS_HEAP_PROPERTY_MAX_SIZE = 0
    WS_HEAP_PROPERTY_TRIM_SIZE = 1
    WS_HEAP_PROPERTY_REQUESTED_SIZE = 2
    WS_HEAP_PROPERTY_ACTUAL_SIZE = 3
  end

  enum WS_LISTENER_STATE : Int32
    WS_LISTENER_STATE_CREATED = 0
    WS_LISTENER_STATE_OPENING = 1
    WS_LISTENER_STATE_OPEN = 2
    WS_LISTENER_STATE_FAULTED = 3
    WS_LISTENER_STATE_CLOSING = 4
    WS_LISTENER_STATE_CLOSED = 5
  end

  enum WS_LISTENER_PROPERTY_ID : Int32
    WS_LISTENER_PROPERTY_LISTEN_BACKLOG = 0
    WS_LISTENER_PROPERTY_IP_VERSION = 1
    WS_LISTENER_PROPERTY_STATE = 2
    WS_LISTENER_PROPERTY_ASYNC_CALLBACK_MODEL = 3
    WS_LISTENER_PROPERTY_CHANNEL_TYPE = 4
    WS_LISTENER_PROPERTY_CHANNEL_BINDING = 5
    WS_LISTENER_PROPERTY_CONNECT_TIMEOUT = 6
    WS_LISTENER_PROPERTY_IS_MULTICAST = 7
    WS_LISTENER_PROPERTY_MULTICAST_INTERFACES = 8
    WS_LISTENER_PROPERTY_MULTICAST_LOOPBACK = 9
    WS_LISTENER_PROPERTY_CLOSE_TIMEOUT = 10
    WS_LISTENER_PROPERTY_TO_HEADER_MATCHING_OPTIONS = 11
    WS_LISTENER_PROPERTY_TRANSPORT_URL_MATCHING_OPTIONS = 12
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_CALLBACKS = 13
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS = 14
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_INSTANCE = 15
    WS_LISTENER_PROPERTY_DISALLOWED_USER_AGENT = 16
  end

  enum WS_IP_VERSION : Int32
    WS_IP_VERSION_4 = 1
    WS_IP_VERSION_6 = 2
    WS_IP_VERSION_AUTO = 3
  end

  enum WS_MESSAGE_STATE : Int32
    WS_MESSAGE_STATE_EMPTY = 1
    WS_MESSAGE_STATE_INITIALIZED = 2
    WS_MESSAGE_STATE_READING = 3
    WS_MESSAGE_STATE_WRITING = 4
    WS_MESSAGE_STATE_DONE = 5
  end

  enum WS_MESSAGE_INITIALIZATION : Int32
    WS_BLANK_MESSAGE = 0
    WS_DUPLICATE_MESSAGE = 1
    WS_REQUEST_MESSAGE = 2
    WS_REPLY_MESSAGE = 3
    WS_FAULT_MESSAGE = 4
  end

  enum WS_REPEATING_HEADER_OPTION : Int32
    WS_REPEATING_HEADER = 1
    WS_SINGLETON_HEADER = 2
  end

  enum WS_HEADER_TYPE : Int32
    WS_ACTION_HEADER = 1
    WS_TO_HEADER = 2
    WS_MESSAGE_ID_HEADER = 3
    WS_RELATES_TO_HEADER = 4
    WS_FROM_HEADER = 5
    WS_REPLY_TO_HEADER = 6
    WS_FAULT_TO_HEADER = 7
  end

  enum WS_ADDRESSING_VERSION : Int32
    WS_ADDRESSING_VERSION_0_9 = 1
    WS_ADDRESSING_VERSION_1_0 = 2
    WS_ADDRESSING_VERSION_TRANSPORT = 3
  end

  enum WS_ENVELOPE_VERSION : Int32
    WS_ENVELOPE_VERSION_SOAP_1_1 = 1
    WS_ENVELOPE_VERSION_SOAP_1_2 = 2
    WS_ENVELOPE_VERSION_NONE = 3
  end

  enum WS_MESSAGE_PROPERTY_ID : Int32
    WS_MESSAGE_PROPERTY_STATE = 0
    WS_MESSAGE_PROPERTY_HEAP = 1
    WS_MESSAGE_PROPERTY_ENVELOPE_VERSION = 2
    WS_MESSAGE_PROPERTY_ADDRESSING_VERSION = 3
    WS_MESSAGE_PROPERTY_HEADER_BUFFER = 4
    WS_MESSAGE_PROPERTY_HEADER_POSITION = 5
    WS_MESSAGE_PROPERTY_BODY_READER = 6
    WS_MESSAGE_PROPERTY_BODY_WRITER = 7
    WS_MESSAGE_PROPERTY_IS_ADDRESSED = 8
    WS_MESSAGE_PROPERTY_HEAP_PROPERTIES = 9
    WS_MESSAGE_PROPERTY_XML_READER_PROPERTIES = 10
    WS_MESSAGE_PROPERTY_XML_WRITER_PROPERTIES = 11
    WS_MESSAGE_PROPERTY_IS_FAULT = 12
    WS_MESSAGE_PROPERTY_MAX_PROCESSED_HEADERS = 13
    WS_MESSAGE_PROPERTY_USERNAME = 14
    WS_MESSAGE_PROPERTY_ENCODED_CERT = 15
    WS_MESSAGE_PROPERTY_TRANSPORT_SECURITY_WINDOWS_TOKEN = 16
    WS_MESSAGE_PROPERTY_HTTP_HEADER_AUTH_WINDOWS_TOKEN = 17
    WS_MESSAGE_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 18
    WS_MESSAGE_PROPERTY_SAML_ASSERTION = 19
    WS_MESSAGE_PROPERTY_SECURITY_CONTEXT = 20
    WS_MESSAGE_PROPERTY_PROTECTION_LEVEL = 21
  end

  enum WS_SECURITY_BINDING_TYPE : Int32
    WS_SSL_TRANSPORT_SECURITY_BINDING_TYPE = 1
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 2
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TYPE = 3
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TYPE = 4
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TYPE = 5
    WS_XML_TOKEN_MESSAGE_SECURITY_BINDING_TYPE = 6
    WS_SAML_MESSAGE_SECURITY_BINDING_TYPE = 7
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TYPE = 8
    WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 9
  end

  enum WS_HTTP_HEADER_AUTH_TARGET : Int32
    WS_HTTP_HEADER_AUTH_TARGET_SERVICE = 1
    WS_HTTP_HEADER_AUTH_TARGET_PROXY = 2
  end

  enum WS_WINDOWS_INTEGRATED_AUTH_PACKAGE : Int32
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_KERBEROS = 1
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_NTLM = 2
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_SPNEGO = 3
  end

  enum WS_SECURITY_HEADER_VERSION : Int32
    WS_SECURITY_HEADER_VERSION_1_0 = 1
    WS_SECURITY_HEADER_VERSION_1_1 = 2
  end

  enum WS_TRUST_VERSION : Int32
    WS_TRUST_VERSION_FEBRUARY_2005 = 1
    WS_TRUST_VERSION_1_3 = 2
  end

  enum WS_REQUEST_SECURITY_TOKEN_ACTION : Int32
    WS_REQUEST_SECURITY_TOKEN_ACTION_ISSUE = 1
    WS_REQUEST_SECURITY_TOKEN_ACTION_NEW_CONTEXT = 2
    WS_REQUEST_SECURITY_TOKEN_ACTION_RENEW_CONTEXT = 3
  end

  enum WS_SECURE_CONVERSATION_VERSION : Int32
    WS_SECURE_CONVERSATION_VERSION_FEBRUARY_2005 = 1
    WS_SECURE_CONVERSATION_VERSION_1_3 = 2
  end

  enum WS_SECURE_PROTOCOL : Int32
    WS_SECURE_PROTOCOL_SSL2 = 1
    WS_SECURE_PROTOCOL_SSL3 = 2
    WS_SECURE_PROTOCOL_TLS1_0 = 4
    WS_SECURE_PROTOCOL_TLS1_1 = 8
    WS_SECURE_PROTOCOL_TLS1_2 = 16
  end

  enum WS_SECURITY_TIMESTAMP_USAGE : Int32
    WS_SECURITY_TIMESTAMP_USAGE_ALWAYS = 1
    WS_SECURITY_TIMESTAMP_USAGE_NEVER = 2
    WS_SECURITY_TIMESTAMP_USAGE_REQUESTS_ONLY = 3
  end

  enum WS_SECURITY_HEADER_LAYOUT : Int32
    WS_SECURITY_HEADER_LAYOUT_STRICT = 1
    WS_SECURITY_HEADER_LAYOUT_LAX = 2
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_FIRST = 3
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_LAST = 4
  end

  enum WS_SECURITY_ALGORITHM_PROPERTY_ID
  end

  enum WS_SECURITY_ALGORITHM_ID : Int32
    WS_SECURITY_ALGORITHM_DEFAULT = 0
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE = 1
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE_WITH_COMMENTS = 2
    WS_SECURITY_ALGORITHM_DIGEST_SHA1 = 3
    WS_SECURITY_ALGORITHM_DIGEST_SHA_256 = 4
    WS_SECURITY_ALGORITHM_DIGEST_SHA_384 = 5
    WS_SECURITY_ALGORITHM_DIGEST_SHA_512 = 6
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA1 = 7
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_256 = 8
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_384 = 9
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_512 = 10
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA1 = 11
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_DSA_SHA1 = 12
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_256 = 13
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_384 = 14
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_512 = 15
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_1_5 = 16
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_OAEP = 17
    WS_SECURITY_ALGORITHM_KEY_DERIVATION_P_SHA1 = 18
  end

  enum WS_PROTECTION_LEVEL : Int32
    WS_PROTECTION_LEVEL_NONE = 1
    WS_PROTECTION_LEVEL_SIGN = 2
    WS_PROTECTION_LEVEL_SIGN_AND_ENCRYPT = 3
  end

  enum WS_SECURITY_PROPERTY_ID : Int32
    WS_SECURITY_PROPERTY_TRANSPORT_PROTECTION_LEVEL = 1
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE = 2
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE_NAME = 3
    WS_SECURITY_PROPERTY_MAX_ALLOWED_LATENCY = 4
    WS_SECURITY_PROPERTY_TIMESTAMP_VALIDITY_DURATION = 5
    WS_SECURITY_PROPERTY_MAX_ALLOWED_CLOCK_SKEW = 6
    WS_SECURITY_PROPERTY_TIMESTAMP_USAGE = 7
    WS_SECURITY_PROPERTY_SECURITY_HEADER_LAYOUT = 8
    WS_SECURITY_PROPERTY_SECURITY_HEADER_VERSION = 9
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_POLICY = 10
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_SCENARIO = 11
    WS_SECURITY_PROPERTY_SERVICE_IDENTITIES = 12
  end

  enum WS_SECURITY_KEY_TYPE : Int32
    WS_SECURITY_KEY_TYPE_NONE = 1
    WS_SECURITY_KEY_TYPE_SYMMETRIC = 2
    WS_SECURITY_KEY_TYPE_ASYMMETRIC = 3
  end

  enum WS_SECURITY_ALGORITHM_SUITE_NAME : Int32
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256 = 1
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192 = 2
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128 = 3
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_RSA15 = 4
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_RSA15 = 5
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_RSA15 = 6
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256 = 7
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256 = 8
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256 = 9
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256_RSA15 = 10
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256_RSA15 = 11
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256_RSA15 = 12
  end

  enum WS_SECURITY_TOKEN_REFERENCE_MODE : Int32
    WS_SECURITY_TOKEN_REFERENCE_MODE_LOCAL_ID = 1
    WS_SECURITY_TOKEN_REFERENCE_MODE_XML_BUFFER = 2
    WS_SECURITY_TOKEN_REFERENCE_MODE_CERT_THUMBPRINT = 3
    WS_SECURITY_TOKEN_REFERENCE_MODE_SECURITY_CONTEXT_ID = 4
    WS_SECURITY_TOKEN_REFERENCE_MODE_SAML_ASSERTION_ID = 5
  end

  enum WS_SECURITY_KEY_ENTROPY_MODE : Int32
    WS_SECURITY_KEY_ENTROPY_MODE_CLIENT_ONLY = 1
    WS_SECURITY_KEY_ENTROPY_MODE_SERVER_ONLY = 2
    WS_SECURITY_KEY_ENTROPY_MODE_COMBINED = 3
  end

  enum WS_EXTENDED_PROTECTION_POLICY : Int32
    WS_EXTENDED_PROTECTION_POLICY_NEVER = 1
    WS_EXTENDED_PROTECTION_POLICY_WHEN_SUPPORTED = 2
    WS_EXTENDED_PROTECTION_POLICY_ALWAYS = 3
  end

  enum WS_EXTENDED_PROTECTION_SCENARIO : Int32
    WS_EXTENDED_PROTECTION_SCENARIO_BOUND_SERVER = 1
    WS_EXTENDED_PROTECTION_SCENARIO_TERMINATED_SSL = 2
  end

  enum WS_SECURITY_BINDING_PROPERTY_ID : Int32
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SSL_CLIENT_CERT = 1
    WS_SECURITY_BINDING_PROPERTY_WINDOWS_INTEGRATED_AUTH_PACKAGE = 2
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SERVER_AUTH = 3
    WS_SECURITY_BINDING_PROPERTY_ALLOW_ANONYMOUS_CLIENTS = 4
    WS_SECURITY_BINDING_PROPERTY_ALLOWED_IMPERSONATION_LEVEL = 5
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_SCHEME = 6
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_TARGET = 7
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_BASIC_REALM = 8
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_REALM = 9
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_DOMAIN = 10
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_SIZE = 11
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_ENTROPY_MODE = 12
    WS_SECURITY_BINDING_PROPERTY_MESSAGE_PROPERTIES = 13
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_PENDING_CONTEXTS = 14
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_ACTIVE_CONTEXTS = 15
    WS_SECURITY_BINDING_PROPERTY_SECURE_CONVERSATION_VERSION = 16
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_SUPPORT_RENEW = 17
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_RENEWAL_INTERVAL = 18
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_ROLLOVER_INTERVAL = 19
    WS_SECURITY_BINDING_PROPERTY_CERT_FAILURES_TO_IGNORE = 20
    WS_SECURITY_BINDING_PROPERTY_DISABLE_CERT_REVOCATION_CHECK = 21
    WS_SECURITY_BINDING_PROPERTY_DISALLOWED_SECURE_PROTOCOLS = 22
    WS_SECURITY_BINDING_PROPERTY_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = 23
  end

  enum WS_CERT_CREDENTIAL_TYPE : Int32
    WS_SUBJECT_NAME_CERT_CREDENTIAL_TYPE = 1
    WS_THUMBPRINT_CERT_CREDENTIAL_TYPE = 2
    WS_CUSTOM_CERT_CREDENTIAL_TYPE = 3
  end

  enum WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE : Int32
    WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 1
    WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 2
    WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 3
  end

  enum WS_USERNAME_CREDENTIAL_TYPE : Int32
    WS_STRING_USERNAME_CREDENTIAL_TYPE = 1
  end

  enum WS_SECURITY_TOKEN_PROPERTY_ID : Int32
    WS_SECURITY_TOKEN_PROPERTY_KEY_TYPE = 1
    WS_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 2
    WS_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 3
    WS_SECURITY_TOKEN_PROPERTY_SERIALIZED_XML = 4
    WS_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE_XML = 5
    WS_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE_XML = 6
    WS_SECURITY_TOKEN_PROPERTY_SYMMETRIC_KEY = 7
  end

  enum WS_SECURITY_KEY_HANDLE_TYPE : Int32
    WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 1
    WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 2
    WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 3
  end

  enum WS_MESSAGE_SECURITY_USAGE : Int32
    WS_SUPPORTING_MESSAGE_SECURITY_USAGE = 1
  end

  enum WS_SECURITY_CONTEXT_PROPERTY_ID : Int32
    WS_SECURITY_CONTEXT_PROPERTY_IDENTIFIER = 1
    WS_SECURITY_CONTEXT_PROPERTY_USERNAME = 2
    WS_SECURITY_CONTEXT_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 3
    WS_SECURITY_CONTEXT_PROPERTY_SAML_ASSERTION = 4
  end

  enum WS_XML_SECURITY_TOKEN_PROPERTY_ID : Int32
    WS_XML_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE = 1
    WS_XML_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE = 2
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 3
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 4
  end

  enum WS_SAML_AUTHENTICATOR_TYPE : Int32
    WS_CERT_SIGNED_SAML_AUTHENTICATOR_TYPE = 1
  end

  enum WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID : Int32
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_APPLIES_TO = 1
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_TRUST_VERSION = 2
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SECURE_CONVERSATION_VERSION = 3
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_TYPE = 4
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_REQUEST_ACTION = 5
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_EXISTING_TOKEN = 6
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_TYPE = 7
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_SIZE = 8
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_ENTROPY = 9
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_LOCAL_REQUEST_PARAMETERS = 10
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SERVICE_REQUEST_PARAMETERS = 11
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_MESSAGE_PROPERTIES = 12
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_BEARER_KEY_TYPE_VERSION = 13
  end

  enum WS_SECURITY_BEARER_KEY_TYPE_VERSION : Int32
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SPECIFICATION = 1
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SCHEMA = 2
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ERRATA_01 = 3
  end

  enum WS_TYPE : Int32
    WS_BOOL_TYPE = 0
    WS_INT8_TYPE = 1
    WS_INT16_TYPE = 2
    WS_INT32_TYPE = 3
    WS_INT64_TYPE = 4
    WS_UINT8_TYPE = 5
    WS_UINT16_TYPE = 6
    WS_UINT32_TYPE = 7
    WS_UINT64_TYPE = 8
    WS_FLOAT_TYPE = 9
    WS_DOUBLE_TYPE = 10
    WS_DECIMAL_TYPE = 11
    WS_DATETIME_TYPE = 12
    WS_TIMESPAN_TYPE = 13
    WS_GUID_TYPE = 14
    WS_UNIQUE_ID_TYPE = 15
    WS_STRING_TYPE = 16
    WS_WSZ_TYPE = 17
    WS_BYTES_TYPE = 18
    WS_XML_STRING_TYPE = 19
    WS_XML_QNAME_TYPE = 20
    WS_XML_BUFFER_TYPE = 21
    WS_CHAR_ARRAY_TYPE = 22
    WS_UTF8_ARRAY_TYPE = 23
    WS_BYTE_ARRAY_TYPE = 24
    WS_DESCRIPTION_TYPE = 25
    WS_STRUCT_TYPE = 26
    WS_CUSTOM_TYPE = 27
    WS_ENDPOINT_ADDRESS_TYPE = 28
    WS_FAULT_TYPE = 29
    WS_VOID_TYPE = 30
    WS_ENUM_TYPE = 31
    WS_DURATION_TYPE = 32
    WS_UNION_TYPE = 33
    WS_ANY_ATTRIBUTES_TYPE = 34
  end

  enum WS_FIELD_MAPPING : Int32
    WS_TYPE_ATTRIBUTE_FIELD_MAPPING = 0
    WS_ATTRIBUTE_FIELD_MAPPING = 1
    WS_ELEMENT_FIELD_MAPPING = 2
    WS_REPEATING_ELEMENT_FIELD_MAPPING = 3
    WS_TEXT_FIELD_MAPPING = 4
    WS_NO_FIELD_MAPPING = 5
    WS_XML_ATTRIBUTE_FIELD_MAPPING = 6
    WS_ELEMENT_CHOICE_FIELD_MAPPING = 7
    WS_REPEATING_ELEMENT_CHOICE_FIELD_MAPPING = 8
    WS_ANY_ELEMENT_FIELD_MAPPING = 9
    WS_REPEATING_ANY_ELEMENT_FIELD_MAPPING = 10
    WS_ANY_CONTENT_FIELD_MAPPING = 11
    WS_ANY_ATTRIBUTES_FIELD_MAPPING = 12
  end

  enum WS_TYPE_MAPPING : Int32
    WS_ELEMENT_TYPE_MAPPING = 1
    WS_ATTRIBUTE_TYPE_MAPPING = 2
    WS_ELEMENT_CONTENT_TYPE_MAPPING = 3
    WS_ANY_ELEMENT_TYPE_MAPPING = 4
  end

  enum WS_READ_OPTION : Int32
    WS_READ_REQUIRED_VALUE = 1
    WS_READ_REQUIRED_POINTER = 2
    WS_READ_OPTIONAL_POINTER = 3
    WS_READ_NILLABLE_POINTER = 4
    WS_READ_NILLABLE_VALUE = 5
  end

  enum WS_WRITE_OPTION : Int32
    WS_WRITE_REQUIRED_VALUE = 1
    WS_WRITE_REQUIRED_POINTER = 2
    WS_WRITE_NILLABLE_VALUE = 3
    WS_WRITE_NILLABLE_POINTER = 4
  end

  enum WS_SERVICE_CANCEL_REASON : Int32
    WS_SERVICE_HOST_ABORT = 0
    WS_SERVICE_CHANNEL_FAULTED = 1
  end

  enum WS_OPERATION_STYLE : Int32
    WS_NON_RPC_LITERAL_OPERATION = 0
    WS_RPC_LITERAL_OPERATION = 1
  end

  enum WS_PARAMETER_TYPE : Int32
    WS_PARAMETER_TYPE_NORMAL = 0
    WS_PARAMETER_TYPE_ARRAY = 1
    WS_PARAMETER_TYPE_ARRAY_COUNT = 2
    WS_PARAMETER_TYPE_MESSAGES = 3
  end

  enum WS_SERVICE_ENDPOINT_PROPERTY_ID : Int32
    WS_SERVICE_ENDPOINT_PROPERTY_ACCEPT_CHANNEL_CALLBACK = 0
    WS_SERVICE_ENDPOINT_PROPERTY_CLOSE_CHANNEL_CALLBACK = 1
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_ACCEPTING_CHANNELS = 2
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CONCURRENCY = 3
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_MAX_SIZE = 4
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_TRIM_SIZE = 5
    WS_SERVICE_ENDPOINT_PROPERTY_MESSAGE_PROPERTIES = 6
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CALL_POOL_SIZE = 7
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNEL_POOL_SIZE = 8
    WS_SERVICE_ENDPOINT_PROPERTY_LISTENER_PROPERTIES = 9
    WS_SERVICE_ENDPOINT_PROPERTY_CHECK_MUST_UNDERSTAND = 10
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_TYPE = 11
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA = 12
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_URL_SUFFIX = 13
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNELS = 14
  end

  enum WS_METADATA_EXCHANGE_TYPE : Int32
    WS_METADATA_EXCHANGE_TYPE_NONE = 0
    WS_METADATA_EXCHANGE_TYPE_MEX = 1
    WS_METADATA_EXCHANGE_TYPE_HTTP_GET = 2
  end

  enum WS_SERVICE_PROPERTY_ID : Int32
    WS_SERVICE_PROPERTY_HOST_USER_STATE = 0
    WS_SERVICE_PROPERTY_FAULT_DISCLOSURE = 1
    WS_SERVICE_PROPERTY_FAULT_LANGID = 2
    WS_SERVICE_PROPERTY_HOST_STATE = 3
    WS_SERVICE_PROPERTY_METADATA = 4
    WS_SERVICE_PROPERTY_CLOSE_TIMEOUT = 5
  end

  enum WS_SERVICE_HOST_STATE : Int32
    WS_SERVICE_HOST_STATE_CREATED = 0
    WS_SERVICE_HOST_STATE_OPENING = 1
    WS_SERVICE_HOST_STATE_OPEN = 2
    WS_SERVICE_HOST_STATE_CLOSING = 3
    WS_SERVICE_HOST_STATE_CLOSED = 4
    WS_SERVICE_HOST_STATE_FAULTED = 5
  end

  enum WS_SERVICE_PROXY_STATE : Int32
    WS_SERVICE_PROXY_STATE_CREATED = 0
    WS_SERVICE_PROXY_STATE_OPENING = 1
    WS_SERVICE_PROXY_STATE_OPEN = 2
    WS_SERVICE_PROXY_STATE_CLOSING = 3
    WS_SERVICE_PROXY_STATE_CLOSED = 4
    WS_SERVICE_PROXY_STATE_FAULTED = 5
  end

  enum WS_PROXY_PROPERTY_ID : Int32
    WS_PROXY_PROPERTY_CALL_TIMEOUT = 0
    WS_PROXY_PROPERTY_MESSAGE_PROPERTIES = 1
    WS_PROXY_PROPERTY_MAX_CALL_POOL_SIZE = 2
    WS_PROXY_PROPERTY_STATE = 3
    WS_PROXY_PROPERTY_MAX_PENDING_CALLS = 4
    WS_PROXY_PROPERTY_MAX_CLOSE_TIMEOUT = 5
    WS_PROXY_FAULT_LANG_ID = 6
  end

  enum WS_CALL_PROPERTY_ID : Int32
    WS_CALL_PROPERTY_CHECK_MUST_UNDERSTAND = 0
    WS_CALL_PROPERTY_SEND_MESSAGE_CONTEXT = 1
    WS_CALL_PROPERTY_RECEIVE_MESSAGE_CONTEXT = 2
    WS_CALL_PROPERTY_CALL_ID = 3
  end

  enum WS_TRACE_API : Int32
    WS_TRACE_API_NONE = -1
    WS_TRACE_API_START_READER_CANONICALIZATION = 0
    WS_TRACE_API_END_READER_CANONICALIZATION = 1
    WS_TRACE_API_START_WRITER_CANONICALIZATION = 2
    WS_TRACE_API_END_WRITER_CANONICALIZATION = 3
    WS_TRACE_API_CREATE_XML_BUFFER = 4
    WS_TRACE_API_REMOVE_NODE = 5
    WS_TRACE_API_CREATE_READER = 6
    WS_TRACE_API_SET_INPUT = 7
    WS_TRACE_API_SET_INPUT_TO_BUFFER = 8
    WS_TRACE_API_FREE_XML_READER = 9
    WS_TRACE_API_GET_READER_PROPERTY = 10
    WS_TRACE_API_GET_READER_NODE = 11
    WS_TRACE_API_FILL_READER = 12
    WS_TRACE_API_READ_START_ELEMENT = 13
    WS_TRACE_API_READ_TO_START_ELEMENT = 14
    WS_TRACE_API_READ_START_ATTRIBUTE = 15
    WS_TRACE_API_READ_END_ATTRIBUTE = 16
    WS_TRACE_API_READ_NODE = 17
    WS_TRACE_API_SKIP_NODE = 18
    WS_TRACE_API_READ_END_ELEMENT = 19
    WS_TRACE_API_FIND_ATTRIBUTE = 20
    WS_TRACE_API_READ_ELEMENT_VALUE = 21
    WS_TRACE_API_READ_CHARS = 22
    WS_TRACE_API_READ_CHARS_UTF8 = 23
    WS_TRACE_API_READ_BYTES = 24
    WS_TRACE_API_READ_ARRAY = 25
    WS_TRACE_API_GET_READER_POSITION = 26
    WS_TRACE_API_SET_READER_POSITION = 27
    WS_TRACE_API_MOVE_READER = 28
    WS_TRACE_API_CREATE_WRITER = 29
    WS_TRACE_API_FREE_XML_WRITER = 30
    WS_TRACE_API_SET_OUTPUT = 31
    WS_TRACE_API_SET_OUTPUT_TO_BUFFER = 32
    WS_TRACE_API_GET_WRITER_PROPERTY = 33
    WS_TRACE_API_FLUSH_WRITER = 34
    WS_TRACE_API_WRITE_START_ELEMENT = 35
    WS_TRACE_API_WRITE_END_START_ELEMENT = 36
    WS_TRACE_API_WRITE_XMLNS_ATTRIBUTE = 37
    WS_TRACE_API_WRITE_START_ATTRIBUTE = 38
    WS_TRACE_API_WRITE_END_ATTRIBUTE = 39
    WS_TRACE_API_WRITE_VALUE = 40
    WS_TRACE_API_WRITE_XML_BUFFER = 41
    WS_TRACE_API_READ_XML_BUFFER = 42
    WS_TRACE_API_WRITE_XML_BUFFER_TO_BYTES = 43
    WS_TRACE_API_READ_XML_BUFFER_FROM_BYTES = 44
    WS_TRACE_API_WRITE_ARRAY = 45
    WS_TRACE_API_WRITE_QUALIFIED_NAME = 46
    WS_TRACE_API_WRITE_CHARS = 47
    WS_TRACE_API_WRITE_CHARS_UTF8 = 48
    WS_TRACE_API_WRITE_BYTES = 49
    WS_TRACE_API_PUSH_BYTES = 50
    WS_TRACE_API_PULL_BYTES = 51
    WS_TRACE_API_WRITE_END_ELEMENT = 52
    WS_TRACE_API_WRITE_TEXT = 53
    WS_TRACE_API_WRITE_START_CDATA = 54
    WS_TRACE_API_WRITE_END_CDATA = 55
    WS_TRACE_API_WRITE_NODE = 56
    WS_TRACE_API_PREFIX_FROM_NAMESPACE = 57
    WS_TRACE_API_GET_WRITER_POSITION = 58
    WS_TRACE_API_SET_WRITER_POSITION = 59
    WS_TRACE_API_MOVE_WRITER = 60
    WS_TRACE_API_TRIM_XML_WHITESPACE = 61
    WS_TRACE_API_VERIFY_XML_NCNAME = 62
    WS_TRACE_API_XML_STRING_EQUALS = 63
    WS_TRACE_API_NAMESPACE_FROM_PREFIX = 64
    WS_TRACE_API_READ_QUALIFIED_NAME = 65
    WS_TRACE_API_GET_XML_ATTRIBUTE = 66
    WS_TRACE_API_COPY_NODE = 67
    WS_TRACE_API_ASYNC_EXECUTE = 68
    WS_TRACE_API_CREATE_CHANNEL = 69
    WS_TRACE_API_OPEN_CHANNEL = 70
    WS_TRACE_API_SEND_MESSAGE = 71
    WS_TRACE_API_RECEIVE_MESSAGE = 72
    WS_TRACE_API_REQUEST_REPLY = 73
    WS_TRACE_API_SEND_REPLY_MESSAGE = 74
    WS_TRACE_API_SEND_FAULT_MESSAGE_FOR_ERROR = 75
    WS_TRACE_API_GET_CHANNEL_PROPERTY = 76
    WS_TRACE_API_SET_CHANNEL_PROPERTY = 77
    WS_TRACE_API_WRITE_MESSAGE_START = 78
    WS_TRACE_API_WRITE_MESSAGE_END = 79
    WS_TRACE_API_READ_MESSAGE_START = 80
    WS_TRACE_API_READ_MESSAGE_END = 81
    WS_TRACE_API_CLOSE_CHANNEL = 82
    WS_TRACE_API_ABORT_CHANNEL = 83
    WS_TRACE_API_FREE_CHANNEL = 84
    WS_TRACE_API_RESET_CHANNEL = 85
    WS_TRACE_API_ABANDON_MESSAGE = 86
    WS_TRACE_API_SHUTDOWN_SESSION_CHANNEL = 87
    WS_TRACE_API_GET_CONTEXT_PROPERTY = 88
    WS_TRACE_API_GET_DICTIONARY = 89
    WS_TRACE_API_READ_ENDPOINT_ADDRESS_EXTENSION = 90
    WS_TRACE_API_CREATE_ERROR = 91
    WS_TRACE_API_ADD_ERROR_STRING = 92
    WS_TRACE_API_GET_ERROR_STRING = 93
    WS_TRACE_API_COPY_ERROR = 94
    WS_TRACE_API_GET_ERROR_PROPERTY = 95
    WS_TRACE_API_SET_ERROR_PROPERTY = 96
    WS_TRACE_API_RESET_ERROR = 97
    WS_TRACE_API_FREE_ERROR = 98
    WS_TRACE_API_GET_FAULT_ERROR_PROPERTY = 99
    WS_TRACE_API_SET_FAULT_ERROR_PROPERTY = 100
    WS_TRACE_API_CREATE_FAULT_FROM_ERROR = 101
    WS_TRACE_API_SET_FAULT_ERROR_DETAIL = 102
    WS_TRACE_API_GET_FAULT_ERROR_DETAIL = 103
    WS_TRACE_API_CREATE_HEAP = 104
    WS_TRACE_API_ALLOC = 105
    WS_TRACE_API_GET_HEAP_PROPERTY = 106
    WS_TRACE_API_RESET_HEAP = 107
    WS_TRACE_API_FREE_HEAP = 108
    WS_TRACE_API_CREATE_LISTENER = 109
    WS_TRACE_API_OPEN_LISTENER = 110
    WS_TRACE_API_ACCEPT_CHANNEL = 111
    WS_TRACE_API_CLOSE_LISTENER = 112
    WS_TRACE_API_ABORT_LISTENER = 113
    WS_TRACE_API_RESET_LISTENER = 114
    WS_TRACE_API_FREE_LISTENER = 115
    WS_TRACE_API_GET_LISTENER_PROPERTY = 116
    WS_TRACE_API_SET_LISTENER_PROPERTY = 117
    WS_TRACE_API_CREATE_CHANNEL_FOR_LISTENER = 118
    WS_TRACE_API_CREATE_MESSAGE = 119
    WS_TRACE_API_CREATE_MESSAGE_FOR_CHANNEL = 120
    WS_TRACE_API_INITIALIZE_MESSAGE = 121
    WS_TRACE_API_RESET_MESSAGE = 122
    WS_TRACE_API_FREE_MESSAGE = 123
    WS_TRACE_API_GET_HEADER_ATTRIBUTES = 124
    WS_TRACE_API_GET_HEADER = 125
    WS_TRACE_API_GET_CUSTOM_HEADER = 126
    WS_TRACE_API_REMOVE_HEADER = 127
    WS_TRACE_API_SET_HEADER = 128
    WS_TRACE_API_REMOVE_CUSTOM_HEADER = 129
    WS_TRACE_API_ADD_CUSTOM_HEADER = 130
    WS_TRACE_API_ADD_MAPPED_HEADER = 131
    WS_TRACE_API_REMOVE_MAPPED_HEADER = 132
    WS_TRACE_API_GET_MAPPED_HEADER = 133
    WS_TRACE_API_WRITE_BODY = 134
    WS_TRACE_API_READ_BODY = 135
    WS_TRACE_API_WRITE_ENVELOPE_START = 136
    WS_TRACE_API_WRITE_ENVELOPE_END = 137
    WS_TRACE_API_READ_ENVELOPE_START = 138
    WS_TRACE_API_READ_ENVELOPE_END = 139
    WS_TRACE_API_GET_MESSAGE_PROPERTY = 140
    WS_TRACE_API_SET_MESSAGE_PROPERTY = 141
    WS_TRACE_API_ADDRESS_MESSAGE = 142
    WS_TRACE_API_CHECK_MUST_UNDERSTAND_HEADERS = 143
    WS_TRACE_API_MARK_HEADER_AS_UNDERSTOOD = 144
    WS_TRACE_API_FILL_BODY = 145
    WS_TRACE_API_FLUSH_BODY = 146
    WS_TRACE_API_REQUEST_SECURITY_TOKEN = 147
    WS_TRACE_API_GET_SECURITY_TOKEN_PROPERTY = 148
    WS_TRACE_API_CREATE_XML_SECURITY_TOKEN = 149
    WS_TRACE_API_FREE_SECURITY_TOKEN = 150
    WS_TRACE_API_REVOKE_SECURITY_CONTEXT = 151
    WS_TRACE_API_GET_SECURITY_CONTEXT_PROPERTY = 152
    WS_TRACE_API_READ_ELEMENT_TYPE = 153
    WS_TRACE_API_READ_ATTRIBUTE_TYPE = 154
    WS_TRACE_API_READ_TYPE = 155
    WS_TRACE_API_WRITE_ELEMENT_TYPE = 156
    WS_TRACE_API_WRITE_ATTRIBUTE_TYPE = 157
    WS_TRACE_API_WRITE_TYPE = 158
    WS_TRACE_API_SERVICE_REGISTER_FOR_CANCEL = 159
    WS_TRACE_API_GET_SERVICE_HOST_PROPERTY = 160
    WS_TRACE_API_CREATE_SERVICE_HOST = 161
    WS_TRACE_API_OPEN_SERVICE_HOST = 162
    WS_TRACE_API_CLOSE_SERVICE_HOST = 163
    WS_TRACE_API_ABORT_SERVICE_HOST = 164
    WS_TRACE_API_FREE_SERVICE_HOST = 165
    WS_TRACE_API_RESET_SERVICE_HOST = 166
    WS_TRACE_API_GET_SERVICE_PROXY_PROPERTY = 167
    WS_TRACE_API_CREATE_SERVICE_PROXY = 168
    WS_TRACE_API_OPEN_SERVICE_PROXY = 169
    WS_TRACE_API_CLOSE_SERVICE_PROXY = 170
    WS_TRACE_API_ABORT_SERVICE_PROXY = 171
    WS_TRACE_API_FREE_SERVICE_PROXY = 172
    WS_TRACE_API_RESET_SERVICE_PROXY = 173
    WS_TRACE_API_ABORT_CALL = 174
    WS_TRACE_API_CALL = 175
    WS_TRACE_API_DECODE_URL = 176
    WS_TRACE_API_ENCODE_URL = 177
    WS_TRACE_API_COMBINE_URL = 178
    WS_TRACE_API_DATETIME_TO_FILETIME = 179
    WS_TRACE_API_FILETIME_TO_DATETIME = 180
    WS_TRACE_API_DUMP_MEMORY = 181
    WS_TRACE_API_SET_AUTOFAIL = 182
    WS_TRACE_API_CREATE_METADATA = 183
    WS_TRACE_API_READ_METADATA = 184
    WS_TRACE_API_FREE_METADATA = 185
    WS_TRACE_API_RESET_METADATA = 186
    WS_TRACE_API_GET_METADATA_PROPERTY = 187
    WS_TRACE_API_GET_MISSING_METADATA_DOCUMENT_ADDRESS = 188
    WS_TRACE_API_GET_METADATA_ENDPOINTS = 189
    WS_TRACE_API_MATCH_POLICY_ALTERNATIVE = 190
    WS_TRACE_API_GET_POLICY_PROPERTY = 191
    WS_TRACE_API_GET_POLICY_ALTERNATIVE_COUNT = 192
    WS_TRACE_API_WS_CREATE_SERVICE_PROXY_FROM_TEMPLATE = 193
    WS_TRACE_API_WS_CREATE_SERVICE_HOST_FROM_TEMPLATE = 194
  end

  enum WS_URL_SCHEME_TYPE : Int32
    WS_URL_HTTP_SCHEME_TYPE = 0
    WS_URL_HTTPS_SCHEME_TYPE = 1
    WS_URL_NETTCP_SCHEME_TYPE = 2
    WS_URL_SOAPUDP_SCHEME_TYPE = 3
    WS_URL_NETPIPE_SCHEME_TYPE = 4
  end

  enum WS_DATETIME_FORMAT : Int32
    WS_DATETIME_FORMAT_UTC = 0
    WS_DATETIME_FORMAT_LOCAL = 1
    WS_DATETIME_FORMAT_NONE = 2
  end

  enum WS_METADATA_STATE : Int32
    WS_METADATA_STATE_CREATED = 1
    WS_METADATA_STATE_RESOLVED = 2
    WS_METADATA_STATE_FAULTED = 3
  end

  enum WS_METADATA_PROPERTY_ID : Int32
    WS_METADATA_PROPERTY_STATE = 1
    WS_METADATA_PROPERTY_HEAP_PROPERTIES = 2
    WS_METADATA_PROPERTY_POLICY_PROPERTIES = 3
    WS_METADATA_PROPERTY_HEAP_REQUESTED_SIZE = 4
    WS_METADATA_PROPERTY_MAX_DOCUMENTS = 5
    WS_METADATA_PROPERTY_HOST_NAMES = 6
    WS_METADATA_PROPERTY_VERIFY_HOST_NAMES = 7
  end

  enum WS_POLICY_STATE : Int32
    WS_POLICY_STATE_CREATED = 1
    WS_POLICY_STATE_FAULTED = 2
  end

  enum WS_POLICY_PROPERTY_ID : Int32
    WS_POLICY_PROPERTY_STATE = 1
    WS_POLICY_PROPERTY_MAX_ALTERNATIVES = 2
    WS_POLICY_PROPERTY_MAX_DEPTH = 3
    WS_POLICY_PROPERTY_MAX_EXTENSIONS = 4
  end

  enum WS_SECURITY_BINDING_CONSTRAINT_TYPE : Int32
    WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 1
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 2
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT_TYPE = 3
    WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 4
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 5
    WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 6
    WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 7
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 8
  end

  enum WS_POLICY_EXTENSION_TYPE : Int32
    WS_ENDPOINT_POLICY_EXTENSION_TYPE = 1
  end

  enum WS_BINDING_TEMPLATE_TYPE : Int32
    WS_HTTP_BINDING_TEMPLATE_TYPE = 0
    WS_HTTP_SSL_BINDING_TEMPLATE_TYPE = 1
    WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 2
    WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 3
    WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE_TYPE = 4
    WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 5
    WS_TCP_BINDING_TEMPLATE_TYPE = 6
    WS_TCP_SSPI_BINDING_TEMPLATE_TYPE = 7
    WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE_TYPE = 8
    WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 9
    WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 10
    WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 11
    WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 12
    WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 13
  end

  struct WS_XML_DICTIONARY
    guid : Guid
    strings : WS_XML_STRING*
    string_count : UInt32
    is_const : LibC::BOOL
  end
  struct WS_XML_STRING
    length : UInt32
    bytes : UInt8*
    dictionary : WS_XML_DICTIONARY*
    id : UInt32
  end
  struct WS_XML_QNAME
    local_name : WS_XML_STRING
    ns : WS_XML_STRING
  end
  struct WS_XML_NODE_POSITION
    buffer : WS_XML_BUFFER*
    node : Void*
  end
  struct WS_XML_READER_PROPERTY
    id : WS_XML_READER_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES
    prefix_count : UInt32
    prefixes : WS_XML_STRING*
  end
  struct WS_XML_CANONICALIZATION_PROPERTY
    id : WS_XML_CANONICALIZATION_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_WRITER_PROPERTY
    id : WS_XML_WRITER_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_BUFFER_PROPERTY
    id : WS_XML_BUFFER_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_TEXT
    text_type : WS_XML_TEXT_TYPE
  end
  struct WS_XML_UTF8_TEXT
    text : WS_XML_TEXT
    value : WS_XML_STRING
  end
  struct WS_XML_UTF16_TEXT
    text : WS_XML_TEXT
    bytes : UInt8*
    byte_count : UInt32
  end
  struct WS_XML_BASE64_TEXT
    text : WS_XML_TEXT
    bytes : UInt8*
    length : UInt32
  end
  struct WS_XML_BOOL_TEXT
    text : WS_XML_TEXT
    value : LibC::BOOL
  end
  struct WS_XML_INT32_TEXT
    text : WS_XML_TEXT
    value : Int32
  end
  struct WS_XML_INT64_TEXT
    text : WS_XML_TEXT
    value : Int64
  end
  struct WS_XML_UINT64_TEXT
    text : WS_XML_TEXT
    value : UInt64
  end
  struct WS_XML_FLOAT_TEXT
    text : WS_XML_TEXT
    value : Float32
  end
  struct WS_XML_DOUBLE_TEXT
    text : WS_XML_TEXT
    value : Float64
  end
  struct WS_XML_DECIMAL_TEXT
    text : WS_XML_TEXT
    value : DECIMAL
  end
  struct WS_XML_GUID_TEXT
    text : WS_XML_TEXT
    value : Guid
  end
  struct WS_XML_UNIQUE_ID_TEXT
    text : WS_XML_TEXT
    value : Guid
  end
  struct WS_DATETIME
    ticks : UInt64
    format : WS_DATETIME_FORMAT
  end
  struct WS_XML_DATETIME_TEXT
    text : WS_XML_TEXT
    value : WS_DATETIME
  end
  struct WS_TIMESPAN
    ticks : Int64
  end
  struct WS_XML_TIMESPAN_TEXT
    text : WS_XML_TEXT
    value : WS_TIMESPAN
  end
  struct WS_XML_QNAME_TEXT
    text : WS_XML_TEXT
    prefix : WS_XML_STRING*
    local_name : WS_XML_STRING*
    ns : WS_XML_STRING*
  end
  struct WS_XML_LIST_TEXT
    text : WS_XML_TEXT
    item_count : UInt32
    items : WS_XML_TEXT**
  end
  struct WS_XML_NODE
    node_type : WS_XML_NODE_TYPE
  end
  struct WS_XML_ATTRIBUTE
    single_quote : UInt8
    is_xml_ns : UInt8
    prefix : WS_XML_STRING*
    local_name : WS_XML_STRING*
    ns : WS_XML_STRING*
    value : WS_XML_TEXT*
  end
  struct WS_XML_ELEMENT_NODE
    node : WS_XML_NODE
    prefix : WS_XML_STRING*
    local_name : WS_XML_STRING*
    ns : WS_XML_STRING*
    attribute_count : UInt32
    attributes : WS_XML_ATTRIBUTE**
    is_empty : LibC::BOOL
  end
  struct WS_XML_TEXT_NODE
    node : WS_XML_NODE
    text : WS_XML_TEXT*
  end
  struct WS_XML_COMMENT_NODE
    node : WS_XML_NODE
    value : WS_XML_STRING
  end
  struct WS_XML_READER_INPUT
    input_type : WS_XML_READER_INPUT_TYPE
  end
  struct WS_XML_READER_BUFFER_INPUT
    input : WS_XML_READER_INPUT
    encoded_data : Void*
    encoded_data_size : UInt32
  end
  struct WS_XML_READER_STREAM_INPUT
    input : WS_XML_READER_INPUT
    read_callback : WS_READ_CALLBACK
    read_callback_state : Void*
  end
  struct WS_XML_READER_ENCODING
    encoding_type : WS_XML_READER_ENCODING_TYPE
  end
  struct WS_XML_READER_TEXT_ENCODING
    encoding : WS_XML_READER_ENCODING
    char_set : WS_CHARSET
  end
  struct WS_XML_READER_BINARY_ENCODING
    encoding : WS_XML_READER_ENCODING
    static_dictionary : WS_XML_DICTIONARY*
    dynamic_dictionary : WS_XML_DICTIONARY*
  end
  struct WS_STRING
    length : UInt32
    chars : LibC::LPWSTR
  end
  struct WS_XML_READER_MTOM_ENCODING
    encoding : WS_XML_READER_ENCODING
    text_encoding : WS_XML_READER_ENCODING*
    read_mime_header : LibC::BOOL
    start_info : WS_STRING
    boundary : WS_STRING
    start_uri : WS_STRING
  end
  struct WS_XML_READER_RAW_ENCODING
    encoding : WS_XML_READER_ENCODING
  end
  struct WS_XML_WRITER_ENCODING
    encoding_type : WS_XML_WRITER_ENCODING_TYPE
  end
  struct WS_XML_WRITER_TEXT_ENCODING
    encoding : WS_XML_WRITER_ENCODING
    char_set : WS_CHARSET
  end
  struct WS_XML_WRITER_BINARY_ENCODING
    encoding : WS_XML_WRITER_ENCODING
    static_dictionary : WS_XML_DICTIONARY*
    dynamic_string_callback : WS_DYNAMIC_STRING_CALLBACK
    dynamic_string_callback_state : Void*
  end
  struct WS_XML_WRITER_MTOM_ENCODING
    encoding : WS_XML_WRITER_ENCODING
    text_encoding : WS_XML_WRITER_ENCODING*
    write_mime_header : LibC::BOOL
    boundary : WS_STRING
    start_info : WS_STRING
    start_uri : WS_STRING
    max_inline_byte_count : UInt32
  end
  struct WS_XML_WRITER_RAW_ENCODING
    encoding : WS_XML_WRITER_ENCODING
  end
  struct WS_XML_WRITER_OUTPUT
    output_type : WS_XML_WRITER_OUTPUT_TYPE
  end
  struct WS_XML_WRITER_BUFFER_OUTPUT
    output : WS_XML_WRITER_OUTPUT
  end
  struct WS_XML_WRITER_STREAM_OUTPUT
    output : WS_XML_WRITER_OUTPUT
    write_callback : WS_WRITE_CALLBACK
    write_callback_state : Void*
  end
  struct WS_XML_WRITER_PROPERTIES
    properties : WS_XML_WRITER_PROPERTY*
    property_count : UInt32
  end
  struct WS_XML_READER_PROPERTIES
    properties : WS_XML_READER_PROPERTY*
    property_count : UInt32
  end
  struct WS_ASYNC_CONTEXT
    callback : WS_ASYNC_CALLBACK
    callback_state : Void*
  end
  struct WS_ASYNC_STATE
    internal0 : Void*
    internal1 : Void*
    internal2 : Void*
    internal3 : Void*
    internal4 : Void*
  end
  struct WS_ASYNC_OPERATION
    function : WS_ASYNC_FUNCTION
  end
  struct WS_CHANNEL_PROPERTY
    id : WS_CHANNEL_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_CUSTOM_HTTP_PROXY
    servers : WS_STRING
    bypass : WS_STRING
  end
  struct WS_CHANNEL_PROPERTIES
    properties : WS_CHANNEL_PROPERTY*
    property_count : UInt32
  end
  struct WS_CUSTOM_CHANNEL_CALLBACKS
    create_channel_callback : WS_CREATE_CHANNEL_CALLBACK
    free_channel_callback : WS_FREE_CHANNEL_CALLBACK
    reset_channel_callback : WS_RESET_CHANNEL_CALLBACK
    open_channel_callback : WS_OPEN_CHANNEL_CALLBACK
    close_channel_callback : WS_CLOSE_CHANNEL_CALLBACK
    abort_channel_callback : WS_ABORT_CHANNEL_CALLBACK
    get_channel_property_callback : WS_GET_CHANNEL_PROPERTY_CALLBACK
    set_channel_property_callback : WS_SET_CHANNEL_PROPERTY_CALLBACK
    write_message_start_callback : WS_WRITE_MESSAGE_START_CALLBACK
    write_message_end_callback : WS_WRITE_MESSAGE_END_CALLBACK
    read_message_start_callback : WS_READ_MESSAGE_START_CALLBACK
    read_message_end_callback : WS_READ_MESSAGE_END_CALLBACK
    abandon_message_callback : WS_ABANDON_MESSAGE_CALLBACK
    shutdown_session_channel_callback : WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK
  end
  struct WS_HTTP_HEADER_MAPPING
    header_name : WS_XML_STRING
    header_mapping_options : UInt32
  end
  struct WS_HTTP_MESSAGE_MAPPING
    request_mapping_options : UInt32
    response_mapping_options : UInt32
    request_header_mappings : WS_HTTP_HEADER_MAPPING**
    request_header_mapping_count : UInt32
    response_header_mappings : WS_HTTP_HEADER_MAPPING**
    response_header_mapping_count : UInt32
  end
  struct WS_ELEMENT_DESCRIPTION
    element_local_name : WS_XML_STRING*
    element_ns : WS_XML_STRING*
    type : WS_TYPE
    type_description : Void*
  end
  struct WS_MESSAGE_DESCRIPTION
    action : WS_XML_STRING*
    body_element_description : WS_ELEMENT_DESCRIPTION*
  end
  struct WS_CHANNEL_ENCODER
    create_context : Void*
    create_encoder_callback : WS_CREATE_ENCODER_CALLBACK
    encoder_get_content_type_callback : WS_ENCODER_GET_CONTENT_TYPE_CALLBACK
    encoder_start_callback : WS_ENCODER_START_CALLBACK
    encoder_encode_callback : WS_ENCODER_ENCODE_CALLBACK
    encoder_end_callback : WS_ENCODER_END_CALLBACK
    free_encoder_callback : WS_FREE_ENCODER_CALLBACK
  end
  struct WS_CHANNEL_DECODER
    create_context : Void*
    create_decoder_callback : WS_CREATE_DECODER_CALLBACK
    decoder_get_content_type_callback : WS_DECODER_GET_CONTENT_TYPE_CALLBACK
    decoder_start_callback : WS_DECODER_START_CALLBACK
    decoder_decode_callback : WS_DECODER_DECODE_CALLBACK
    decoder_end_callback : WS_DECODER_END_CALLBACK
    free_decoder_callback : WS_FREE_DECODER_CALLBACK
  end
  struct WS_HTTP_REDIRECT_CALLBACK_CONTEXT
    callback : WS_HTTP_REDIRECT_CALLBACK
    state : Void*
  end
  struct WS_ENDPOINT_IDENTITY
    identity_type : WS_ENDPOINT_IDENTITY_TYPE
  end
  struct WS_ENDPOINT_ADDRESS
    url : WS_STRING
    headers : WS_XML_BUFFER*
    extensions : WS_XML_BUFFER*
    identity : WS_ENDPOINT_IDENTITY*
  end
  struct WS_DNS_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    dns : WS_STRING
  end
  struct WS_UPN_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    upn : WS_STRING
  end
  struct WS_SPN_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    spn : WS_STRING
  end
  struct WS_BYTES
    length : UInt32
    bytes : UInt8*
  end
  struct WS_RSA_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    modulus : WS_BYTES
    exponent : WS_BYTES
  end
  struct WS_CERT_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    raw_certificate_data : WS_BYTES
  end
  struct WS_UNKNOWN_ENDPOINT_IDENTITY
    identity : WS_ENDPOINT_IDENTITY
    element : WS_XML_BUFFER*
  end
  struct WS_ERROR_PROPERTY
    id : WS_ERROR_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_FAULT_REASON
    text : WS_STRING
    lang : WS_STRING
  end
  struct WS_FAULT_CODE
    value : WS_XML_QNAME
    sub_code : WS_FAULT_CODE*
  end
  struct WS_FAULT
    code : WS_FAULT_CODE*
    reasons : WS_FAULT_REASON*
    reason_count : UInt32
    actor : WS_STRING
    node : WS_STRING
    detail : WS_XML_BUFFER*
  end
  struct WS_FAULT_DETAIL_DESCRIPTION
    action : WS_XML_STRING*
    detail_element_description : WS_ELEMENT_DESCRIPTION*
  end
  struct WS_HEAP_PROPERTY
    id : WS_HEAP_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_HEAP_PROPERTIES
    properties : WS_HEAP_PROPERTY*
    property_count : UInt32
  end
  struct WS_LISTENER_PROPERTY
    id : WS_LISTENER_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_DISALLOWED_USER_AGENT_SUBSTRINGS
    sub_string_count : UInt32
    sub_strings : WS_STRING**
  end
  struct WS_LISTENER_PROPERTIES
    properties : WS_LISTENER_PROPERTY*
    property_count : UInt32
  end
  struct WS_HOST_NAMES
    host_names : WS_STRING*
    host_name_count : UInt32
  end
  struct WS_CUSTOM_LISTENER_CALLBACKS
    create_listener_callback : WS_CREATE_LISTENER_CALLBACK
    free_listener_callback : WS_FREE_LISTENER_CALLBACK
    reset_listener_callback : WS_RESET_LISTENER_CALLBACK
    open_listener_callback : WS_OPEN_LISTENER_CALLBACK
    close_listener_callback : WS_CLOSE_LISTENER_CALLBACK
    abort_listener_callback : WS_ABORT_LISTENER_CALLBACK
    get_listener_property_callback : WS_GET_LISTENER_PROPERTY_CALLBACK
    set_listener_property_callback : WS_SET_LISTENER_PROPERTY_CALLBACK
    create_channel_for_listener_callback : WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK
    accept_channel_callback : WS_ACCEPT_CHANNEL_CALLBACK
  end
  struct WS_MESSAGE_PROPERTY
    id : WS_MESSAGE_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_MESSAGE_PROPERTIES
    properties : WS_MESSAGE_PROPERTY*
    property_count : UInt32
  end
  struct WS_SECURITY_ALGORITHM_PROPERTY
    id : WS_SECURITY_ALGORITHM_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_SECURITY_ALGORITHM_SUITE
    canonicalization_algorithm : WS_SECURITY_ALGORITHM_ID
    digest_algorithm : WS_SECURITY_ALGORITHM_ID
    symmetric_signature_algorithm : WS_SECURITY_ALGORITHM_ID
    asymmetric_signature_algorithm : WS_SECURITY_ALGORITHM_ID
    encryption_algorithm : WS_SECURITY_ALGORITHM_ID
    key_derivation_algorithm : WS_SECURITY_ALGORITHM_ID
    symmetric_key_wrap_algorithm : WS_SECURITY_ALGORITHM_ID
    asymmetric_key_wrap_algorithm : WS_SECURITY_ALGORITHM_ID
    min_symmetric_key_length : UInt32
    max_symmetric_key_length : UInt32
    min_asymmetric_key_length : UInt32
    max_asymmetric_key_length : UInt32
    properties : WS_SECURITY_ALGORITHM_PROPERTY*
    property_count : UInt32
  end
  struct WS_SECURITY_PROPERTY
    id : WS_SECURITY_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_SECURITY_PROPERTIES
    properties : WS_SECURITY_PROPERTY*
    property_count : UInt32
  end
  struct WS_SECURITY_BINDING_PROPERTY
    id : WS_SECURITY_BINDING_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_SECURITY_BINDING_PROPERTIES
    properties : WS_SECURITY_BINDING_PROPERTY*
    property_count : UInt32
  end
  struct WS_SERVICE_SECURITY_IDENTITIES
    service_identities : WS_STRING*
    service_identity_count : UInt32
  end
  struct WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT
    callback : WS_CERTIFICATE_VALIDATION_CALLBACK
    state : Void*
  end
  struct WS_CERT_CREDENTIAL
    credential_type : WS_CERT_CREDENTIAL_TYPE
  end
  struct WS_SUBJECT_NAME_CERT_CREDENTIAL
    credential : WS_CERT_CREDENTIAL
    store_location : UInt32
    store_name : WS_STRING
    subject_name : WS_STRING
  end
  struct WS_THUMBPRINT_CERT_CREDENTIAL
    credential : WS_CERT_CREDENTIAL
    store_location : UInt32
    store_name : WS_STRING
    thumbprint : WS_STRING
  end
  struct WS_CUSTOM_CERT_CREDENTIAL
    credential : WS_CERT_CREDENTIAL
    get_cert_callback : WS_GET_CERT_CALLBACK
    get_cert_callback_state : Void*
    cert_issuer_list_notification_callback : WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK
    cert_issuer_list_notification_callback_state : Void*
  end
  struct WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    credential_type : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE
  end
  struct WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    username : WS_STRING
    password : WS_STRING
    domain : WS_STRING
  end
  struct WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
  end
  struct WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
    opaque_auth_identity : Void*
  end
  struct WS_USERNAME_CREDENTIAL
    credential_type : WS_USERNAME_CREDENTIAL_TYPE
  end
  struct WS_STRING_USERNAME_CREDENTIAL
    credential : WS_USERNAME_CREDENTIAL
    username : WS_STRING
    password : WS_STRING
  end
  struct WS_SECURITY_KEY_HANDLE
    key_handle_type : WS_SECURITY_KEY_HANDLE_TYPE
  end
  struct WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE
    key_handle : WS_SECURITY_KEY_HANDLE
    raw_key_bytes : WS_BYTES
  end
  struct WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE
    key_handle : WS_SECURITY_KEY_HANDLE
    asymmetric_key : LibC::UINT_PTR
  end
  struct WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE
    key_handle : WS_SECURITY_KEY_HANDLE
    provider : LibC::UINT_PTR
    key_spec : UInt32
  end
  struct WS_SECURITY_BINDING
    binding_type : WS_SECURITY_BINDING_TYPE
    properties : WS_SECURITY_BINDING_PROPERTY*
    property_count : UInt32
  end
  struct WS_SSL_TRANSPORT_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    local_cert_credential : WS_CERT_CREDENTIAL*
  end
  struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_USERNAME_MESSAGE_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    client_credential : WS_USERNAME_CREDENTIAL*
    password_validator : WS_VALIDATE_PASSWORD_CALLBACK
    password_validator_callback_state : Void*
  end
  struct WS_SECURITY_DESCRIPTION
    security_bindings : WS_SECURITY_BINDING**
    security_binding_count : UInt32
    properties : WS_SECURITY_PROPERTY*
    property_count : UInt32
  end
  struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    bootstrap_security_description : WS_SECURITY_DESCRIPTION*
  end
  struct WS_SECURITY_CONTEXT_PROPERTY
    id : WS_SECURITY_CONTEXT_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_SECURITY_TOKEN_PROPERTY
    id : WS_XML_SECURITY_TOKEN_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_XML_TOKEN_MESSAGE_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    xml_token : WS_SECURITY_TOKEN*
  end
  struct WS_SAML_AUTHENTICATOR
    authenticator_type : WS_SAML_AUTHENTICATOR_TYPE
  end
  struct WS_CERT_SIGNED_SAML_AUTHENTICATOR
    authenticator : WS_SAML_AUTHENTICATOR
    trusted_issuer_certs : CERT_CONTEXT**
    trusted_issuer_cert_count : UInt32
    decryption_cert : CERT_CONTEXT*
    saml_validator : WS_VALIDATE_SAML_CALLBACK
    saml_validator_callback_state : Void*
  end
  struct WS_SAML_MESSAGE_SECURITY_BINDING
    binding : WS_SECURITY_BINDING
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    authenticator : WS_SAML_AUTHENTICATOR*
  end
  struct WS_REQUEST_SECURITY_TOKEN_PROPERTY
    id : WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_ANY_ATTRIBUTE
    local_name : WS_XML_STRING
    ns : WS_XML_STRING
    value : WS_XML_TEXT*
  end
  struct WS_ANY_ATTRIBUTES
    attributes : WS_ANY_ATTRIBUTE*
    attribute_count : UInt32
  end
  struct WS_BOOL_DESCRIPTION
    value : LibC::BOOL
  end
  struct WS_GUID_DESCRIPTION
    value : Guid
  end
  struct WS_DATETIME_DESCRIPTION
    min_value : WS_DATETIME
    max_value : WS_DATETIME
  end
  struct WS_DURATION
    negative : LibC::BOOL
    years : UInt32
    months : UInt32
    days : UInt32
    hours : UInt32
    minutes : UInt32
    seconds : UInt32
    milliseconds : UInt32
    ticks : UInt32
  end
  struct WS_DURATION_DESCRIPTION
    min_value : WS_DURATION
    max_value : WS_DURATION
    comparer : WS_DURATION_COMPARISON_CALLBACK
  end
  struct WS_TIMESPAN_DESCRIPTION
    min_value : WS_TIMESPAN
    max_value : WS_TIMESPAN
  end
  struct WS_UNIQUE_ID_DESCRIPTION
    min_char_count : UInt32
    max_char_count : UInt32
  end
  struct WS_STRING_DESCRIPTION
    min_char_count : UInt32
    max_char_count : UInt32
  end
  struct WS_XML_STRING_DESCRIPTION
    min_byte_count : UInt32
    max_byte_count : UInt32
  end
  struct WS_XML_QNAME_DESCRIPTION
    min_local_name_byte_count : UInt32
    max_local_name_byte_count : UInt32
    min_ns_byte_count : UInt32
    max_ns_byte_count : UInt32
  end
  struct WS_CHAR_ARRAY_DESCRIPTION
    min_char_count : UInt32
    max_char_count : UInt32
  end
  struct WS_BYTE_ARRAY_DESCRIPTION
    min_byte_count : UInt32
    max_byte_count : UInt32
  end
  struct WS_UTF8_ARRAY_DESCRIPTION
    min_byte_count : UInt32
    max_byte_count : UInt32
  end
  struct WS_WSZ_DESCRIPTION
    min_char_count : UInt32
    max_char_count : UInt32
  end
  struct WS_INT8_DESCRIPTION
    min_value : CHAR
    max_value : CHAR
  end
  struct WS_UINT8_DESCRIPTION
    min_value : UInt8
    max_value : UInt8
  end
  struct WS_INT16_DESCRIPTION
    min_value : Int16
    max_value : Int16
  end
  struct WS_UINT16_DESCRIPTION
    min_value : UInt16
    max_value : UInt16
  end
  struct WS_INT32_DESCRIPTION
    min_value : Int32
    max_value : Int32
  end
  struct WS_UINT32_DESCRIPTION
    min_value : UInt32
    max_value : UInt32
  end
  struct WS_INT64_DESCRIPTION
    min_value : Int64
    max_value : Int64
  end
  struct WS_UINT64_DESCRIPTION
    min_value : UInt64
    max_value : UInt64
  end
  struct WS_FLOAT_DESCRIPTION
    min_value : Float32
    max_value : Float32
  end
  struct WS_DOUBLE_DESCRIPTION
    min_value : Float64
    max_value : Float64
  end
  struct WS_DECIMAL_DESCRIPTION
    min_value : DECIMAL
    max_value : DECIMAL
  end
  struct WS_BYTES_DESCRIPTION
    min_byte_count : UInt32
    max_byte_count : UInt32
  end
  struct WS_ENUM_VALUE
    value : Int32
    name : WS_XML_STRING*
  end
  struct WS_ENUM_DESCRIPTION
    values : WS_ENUM_VALUE*
    value_count : UInt32
    max_byte_count : UInt32
    name_indices : UInt32*
  end
  struct WS_ITEM_RANGE
    min_item_count : UInt32
    max_item_count : UInt32
  end
  struct WS_DEFAULT_VALUE
    value : Void*
    value_size : UInt32
  end
  struct WS_FIELD_DESCRIPTION
    mapping : WS_FIELD_MAPPING
    local_name : WS_XML_STRING*
    ns : WS_XML_STRING*
    type : WS_TYPE
    type_description : Void*
    offset : UInt32
    options : UInt32
    default_value : WS_DEFAULT_VALUE*
    count_offset : UInt32
    item_local_name : WS_XML_STRING*
    item_ns : WS_XML_STRING*
    item_range : WS_ITEM_RANGE*
  end
  struct WS_UNION_FIELD_DESCRIPTION
    value : Int32
    field : WS_FIELD_DESCRIPTION
  end
  struct WS_STRUCT_DESCRIPTION
    size : UInt32
    alignment : UInt32
    fields : WS_FIELD_DESCRIPTION**
    field_count : UInt32
    type_local_name : WS_XML_STRING*
    type_ns : WS_XML_STRING*
    parent_type : WS_STRUCT_DESCRIPTION*
    sub_types : WS_STRUCT_DESCRIPTION**
    sub_type_count : UInt32
    struct_options : UInt32
  end
  struct WS_UNION_DESCRIPTION
    size : UInt32
    alignment : UInt32
    fields : WS_UNION_FIELD_DESCRIPTION**
    field_count : UInt32
    enum_offset : UInt32
    none_enum_value : Int32
    value_indices : UInt32*
  end
  struct WS_ENDPOINT_ADDRESS_DESCRIPTION
    addressing_version : WS_ADDRESSING_VERSION
  end
  struct WS_FAULT_DESCRIPTION
    envelope_version : WS_ENVELOPE_VERSION
  end
  struct WS_VOID_DESCRIPTION
    size : UInt32
  end
  struct WS_CUSTOM_TYPE_DESCRIPTION
    size : UInt32
    alignment : UInt32
    read_callback : WS_READ_TYPE_CALLBACK
    write_callback : WS_WRITE_TYPE_CALLBACK
    description_data : Void*
    is_default_value_callback : WS_IS_DEFAULT_VALUE_CALLBACK
  end
  struct WS_ATTRIBUTE_DESCRIPTION
    attribute_local_name : WS_XML_STRING*
    attribute_ns : WS_XML_STRING*
    type : WS_TYPE
    type_description : Void*
  end
  struct WS_PARAMETER_DESCRIPTION
    parameter_type : WS_PARAMETER_TYPE
    input_message_index : UInt16
    output_message_index : UInt16
  end
  struct WS_OPERATION_DESCRIPTION
    version_info : UInt32
    input_message_description : WS_MESSAGE_DESCRIPTION*
    output_message_description : WS_MESSAGE_DESCRIPTION*
    input_message_options : UInt32
    output_message_options : UInt32
    parameter_count : UInt16
    parameter_description : WS_PARAMETER_DESCRIPTION*
    stub_callback : WS_SERVICE_STUB_CALLBACK
    style : WS_OPERATION_STYLE
  end
  struct WS_CONTRACT_DESCRIPTION
    operation_count : UInt32
    operations : WS_OPERATION_DESCRIPTION**
  end
  struct WS_SERVICE_CONTRACT
    contract_description : WS_CONTRACT_DESCRIPTION*
    default_message_handler_callback : WS_SERVICE_MESSAGE_RECEIVE_CALLBACK
    method_table : Void*
  end
  struct WS_SERVICE_PROPERTY
    id : WS_SERVICE_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_SERVICE_ENDPOINT_PROPERTY
    id : WS_SERVICE_ENDPOINT_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_SERVICE_PROPERTY_ACCEPT_CALLBACK
    callback : WS_SERVICE_ACCEPT_CHANNEL_CALLBACK
  end
  struct WS_SERVICE_METADATA_DOCUMENT
    content : WS_XML_STRING*
    name : WS_STRING*
  end
  struct WS_SERVICE_METADATA
    document_count : UInt32
    documents : WS_SERVICE_METADATA_DOCUMENT**
    service_name : WS_XML_STRING*
    service_ns : WS_XML_STRING*
  end
  struct WS_SERVICE_PROPERTY_CLOSE_CALLBACK
    callback : WS_SERVICE_CLOSE_CHANNEL_CALLBACK
  end
  struct WS_SERVICE_ENDPOINT_METADATA
    port_name : WS_XML_STRING*
    binding_name : WS_XML_STRING*
    binding_ns : WS_XML_STRING*
  end
  struct WS_SERVICE_ENDPOINT
    address : WS_ENDPOINT_ADDRESS
    channel_binding : WS_CHANNEL_BINDING
    channel_type : WS_CHANNEL_TYPE
    security_description : WS_SECURITY_DESCRIPTION*
    contract : WS_SERVICE_CONTRACT*
    authorization_callback : WS_SERVICE_SECURITY_CALLBACK
    properties : WS_SERVICE_ENDPOINT_PROPERTY*
    property_count : UInt32
    channel_properties : WS_CHANNEL_PROPERTIES
  end
  struct WS_PROXY_PROPERTY
    id : WS_PROXY_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_PROXY_MESSAGE_CALLBACK_CONTEXT
    callback : WS_PROXY_MESSAGE_CALLBACK
    state : Void*
  end
  struct WS_CALL_PROPERTY
    id : WS_CALL_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_URL
    scheme : WS_URL_SCHEME_TYPE
  end
  struct WS_HTTP_URL
    url : WS_URL
    host : WS_STRING
    port : UInt16
    port_as_string : WS_STRING
    path : WS_STRING
    query : WS_STRING
    fragment : WS_STRING
  end
  struct WS_HTTPS_URL
    url : WS_URL
    host : WS_STRING
    port : UInt16
    port_as_string : WS_STRING
    path : WS_STRING
    query : WS_STRING
    fragment : WS_STRING
  end
  struct WS_NETTCP_URL
    url : WS_URL
    host : WS_STRING
    port : UInt16
    port_as_string : WS_STRING
    path : WS_STRING
    query : WS_STRING
    fragment : WS_STRING
  end
  struct WS_SOAPUDP_URL
    url : WS_URL
    host : WS_STRING
    port : UInt16
    port_as_string : WS_STRING
    path : WS_STRING
    query : WS_STRING
    fragment : WS_STRING
  end
  struct WS_NETPIPE_URL
    url : WS_URL
    host : WS_STRING
    port : UInt16
    port_as_string : WS_STRING
    path : WS_STRING
    query : WS_STRING
    fragment : WS_STRING
  end
  struct WS_UNIQUE_ID
    uri : WS_STRING
    guid : Guid
  end
  struct WS_BUFFERS
    buffer_count : UInt32
    buffers : WS_BYTES*
  end
  struct WS_METADATA_ENDPOINT
    endpoint_address : WS_ENDPOINT_ADDRESS
    endpoint_policy : WS_POLICY*
    port_name : WS_XML_STRING*
    service_name : WS_XML_STRING*
    service_ns : WS_XML_STRING*
    binding_name : WS_XML_STRING*
    binding_ns : WS_XML_STRING*
    port_type_name : WS_XML_STRING*
    port_type_ns : WS_XML_STRING*
  end
  struct WS_METADATA_ENDPOINTS
    endpoints : WS_METADATA_ENDPOINT*
    endpoint_count : UInt32
  end
  struct WS_METADATA_PROPERTY
    id : WS_METADATA_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_POLICY_PROPERTY
    id : WS_POLICY_PROPERTY_ID
    value : Void*
    value_size : UInt32
  end
  struct WS_POLICY_PROPERTIES
    properties : WS_POLICY_PROPERTY*
    property_count : UInt32
  end
  struct WS_SECURITY_BINDING_PROPERTY_CONSTRAINT
    id : WS_SECURITY_BINDING_PROPERTY_ID
    allowed_values : Void*
    allowed_values_size : UInt32
    out : WS_SECURITY_BINDING_PROPERTY_CONSTRAINT_out_e__Struct
  end
  struct WS_SECURITY_BINDING_PROPERTY_CONSTRAINT_out_e__Struct
    security_binding_property : WS_SECURITY_BINDING_PROPERTY
  end
  struct WS_SECURITY_BINDING_CONSTRAINT
    type : WS_SECURITY_BINDING_CONSTRAINT_TYPE
    property_constraints : WS_SECURITY_BINDING_PROPERTY_CONSTRAINT*
    property_constraint_count : UInt32
  end
  struct WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    out : WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_out_e__Struct
  end
  struct WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_out_e__Struct
    client_cert_credential_required : LibC::BOOL
  end
  struct WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
  end
  struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
  end
  struct WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT
    id : WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID
    allowed_values : Void*
    allowed_values_size : UInt32
    out : WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT_out_e__Struct
  end
  struct WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT_out_e__Struct
    request_security_token_property : WS_REQUEST_SECURITY_TOKEN_PROPERTY
  end
  struct WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    claim_constraints : WS_XML_STRING*
    claim_constraint_count : UInt32
    request_security_token_property_constraints : WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT*
    request_security_token_property_constraint_count : UInt32
    out : WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_out_e__Struct
  end
  struct WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_out_e__Struct
    issuer_address : WS_ENDPOINT_ADDRESS*
    request_security_token_template : WS_XML_BUFFER*
  end
  struct WS_SECURITY_PROPERTY_CONSTRAINT
    id : WS_SECURITY_PROPERTY_ID
    allowed_values : Void*
    allowed_values_size : UInt32
    out : WS_SECURITY_PROPERTY_CONSTRAINT_out_e__Struct
  end
  struct WS_SECURITY_PROPERTY_CONSTRAINT_out_e__Struct
    security_property : WS_SECURITY_PROPERTY
  end
  struct WS_SECURITY_CONSTRAINTS
    security_property_constraints : WS_SECURITY_PROPERTY_CONSTRAINT*
    security_property_constraint_count : UInt32
    security_binding_constraints : WS_SECURITY_BINDING_CONSTRAINT**
    security_binding_constraint_count : UInt32
  end
  struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT
    binding_constraint : WS_SECURITY_BINDING_CONSTRAINT
    binding_usage : WS_MESSAGE_SECURITY_USAGE
    bootstrap_security_constraint : WS_SECURITY_CONSTRAINTS*
  end
  struct WS_CHANNEL_PROPERTY_CONSTRAINT
    id : WS_CHANNEL_PROPERTY_ID
    allowed_values : Void*
    allowed_values_size : UInt32
    out : WS_CHANNEL_PROPERTY_CONSTRAINT_out_e__Struct
  end
  struct WS_CHANNEL_PROPERTY_CONSTRAINT_out_e__Struct
    channel_property : WS_CHANNEL_PROPERTY
  end
  struct WS_POLICY_EXTENSION
    type : WS_POLICY_EXTENSION_TYPE
  end
  struct WS_ENDPOINT_POLICY_EXTENSION
    policy_extension : WS_POLICY_EXTENSION
    assertion_name : WS_XML_STRING*
    assertion_ns : WS_XML_STRING*
    out : WS_ENDPOINT_POLICY_EXTENSION_out_e__Struct
  end
  struct WS_ENDPOINT_POLICY_EXTENSION_out_e__Struct
    assertion_value : WS_XML_BUFFER*
  end
  struct WS_POLICY_CONSTRAINTS
    channel_binding : WS_CHANNEL_BINDING
    channel_property_constraints : WS_CHANNEL_PROPERTY_CONSTRAINT*
    channel_property_constraint_count : UInt32
    security_constraints : WS_SECURITY_CONSTRAINTS*
    policy_extensions : WS_POLICY_EXTENSION**
    policy_extension_count : UInt32
  end
  struct WS_HTTP_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
  end
  struct WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
  end
  struct WS_HTTP_SSL_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
  end
  struct WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    http_header_auth_security_binding : WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    http_header_auth_security_binding : WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_TCP_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
  end
  struct WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
  end
  struct WS_TCP_SSPI_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    binding_usage : WS_MESSAGE_SECURITY_USAGE
  end
  struct WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
    security_context_message_security_binding : WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_properties : WS_SECURITY_PROPERTIES
  end
  struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
  end
  struct WS_HTTP_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
  end
  struct WS_TCP_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
  end
  struct WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    local_cert_credential : WS_CERT_CREDENTIAL*
  end
  struct WS_HTTP_SSL_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
  end
  struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    http_header_auth_security_binding : WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
  end
  struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_TCP_SSPI_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
  end
  struct WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    http_header_auth_security_binding : WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
  end
  struct WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    client_credential : WS_USERNAME_CREDENTIAL*
    password_validator : WS_VALIDATE_PASSWORD_CALLBACK
    password_validator_callback_state : Void*
  end
  struct WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
  end
  struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
    client_credential : WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL*
  end
  struct WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
  end
  struct WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
  end
  struct WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
  end
  struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_binding_properties : WS_SECURITY_BINDING_PROPERTIES
  end
  struct WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
    security_context_message_security_binding : WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_properties : WS_SECURITY_PROPERTIES
  end
  struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
  end
  struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    ssl_transport_security_binding : WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
  end
  struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    username_message_security_binding : WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
  end
  struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
    channel_properties : WS_CHANNEL_PROPERTIES
    security_properties : WS_SECURITY_PROPERTIES
    sspi_transport_security_binding : WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
    kerberos_apreq_message_security_binding : WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
    security_context_security_binding : WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
  end
  struct WEBAUTHN_RP_ENTITY_INFORMATION
    dw_version : UInt32
    pwsz_id : LibC::LPWSTR
    pwsz_name : LibC::LPWSTR
    pwsz_icon : LibC::LPWSTR
  end
  struct WEBAUTHN_USER_ENTITY_INFORMATION
    dw_version : UInt32
    cb_id : UInt32
    pb_id : UInt8*
    pwsz_name : LibC::LPWSTR
    pwsz_icon : LibC::LPWSTR
    pwsz_display_name : LibC::LPWSTR
  end
  struct WEBAUTHN_CLIENT_DATA
    dw_version : UInt32
    cb_client_data_json : UInt32
    pb_client_data_json : UInt8*
    pwsz_hash_alg_id : LibC::LPWSTR
  end
  struct WEBAUTHN_COSE_CREDENTIAL_PARAMETER
    dw_version : UInt32
    pwsz_credential_type : LibC::LPWSTR
    l_alg : Int32
  end
  struct WEBAUTHN_COSE_CREDENTIAL_PARAMETERS
    c_credential_parameters : UInt32
    p_credential_parameters : WEBAUTHN_COSE_CREDENTIAL_PARAMETER*
  end
  struct WEBAUTHN_CREDENTIAL
    dw_version : UInt32
    cb_id : UInt32
    pb_id : UInt8*
    pwsz_credential_type : LibC::LPWSTR
  end
  struct WEBAUTHN_CREDENTIALS
    c_credentials : UInt32
    p_credentials : WEBAUTHN_CREDENTIAL*
  end
  struct WEBAUTHN_CREDENTIAL_EX
    dw_version : UInt32
    cb_id : UInt32
    pb_id : UInt8*
    pwsz_credential_type : LibC::LPWSTR
    dw_transports : UInt32
  end
  struct WEBAUTHN_CREDENTIAL_LIST
    c_credentials : UInt32
    pp_credentials : WEBAUTHN_CREDENTIAL_EX**
  end
  struct WEBAUTHN_CRED_PROTECT_EXTENSION_IN
    dw_cred_protect : UInt32
    b_require_cred_protect : LibC::BOOL
  end
  struct WEBAUTHN_CRED_BLOB_EXTENSION
    cb_cred_blob : UInt32
    pb_cred_blob : UInt8*
  end
  struct WEBAUTHN_EXTENSION
    pwsz_extension_identifier : LibC::LPWSTR
    cb_extension : UInt32
    pv_extension : Void*
  end
  struct WEBAUTHN_EXTENSIONS
    c_extensions : UInt32
    p_extensions : WEBAUTHN_EXTENSION*
  end
  struct WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS
    dw_version : UInt32
    dw_timeout_milliseconds : UInt32
    credential_list : WEBAUTHN_CREDENTIALS
    extensions : WEBAUTHN_EXTENSIONS
    dw_authenticator_attachment : UInt32
    b_require_resident_key : LibC::BOOL
    dw_user_verification_requirement : UInt32
    dw_attestation_conveyance_preference : UInt32
    dw_flags : UInt32
    p_cancellation_id : Guid*
    p_exclude_credential_list : WEBAUTHN_CREDENTIAL_LIST*
    dw_enterprise_attestation : UInt32
    dw_large_blob_support : UInt32
    b_prefer_resident_key : LibC::BOOL
  end
  struct WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS
    dw_version : UInt32
    dw_timeout_milliseconds : UInt32
    credential_list : WEBAUTHN_CREDENTIALS
    extensions : WEBAUTHN_EXTENSIONS
    dw_authenticator_attachment : UInt32
    dw_user_verification_requirement : UInt32
    dw_flags : UInt32
    pwsz_u2f_app_id : LibC::LPWSTR
    pb_u2f_app_id : LibC::BOOL*
    p_cancellation_id : Guid*
    p_allow_credential_list : WEBAUTHN_CREDENTIAL_LIST*
    dw_cred_large_blob_operation : UInt32
    cb_cred_large_blob : UInt32
    pb_cred_large_blob : UInt8*
  end
  struct WEBAUTHN_X5C
    cb_data : UInt32
    pb_data : UInt8*
  end
  struct WEBAUTHN_COMMON_ATTESTATION
    dw_version : UInt32
    pwsz_alg : LibC::LPWSTR
    l_alg : Int32
    cb_signature : UInt32
    pb_signature : UInt8*
    c_x5c : UInt32
    p_x5c : WEBAUTHN_X5C*
    pwsz_ver : LibC::LPWSTR
    cb_cert_info : UInt32
    pb_cert_info : UInt8*
    cb_pub_area : UInt32
    pb_pub_area : UInt8*
  end
  struct WEBAUTHN_CREDENTIAL_ATTESTATION
    dw_version : UInt32
    pwsz_format_type : LibC::LPWSTR
    cb_authenticator_data : UInt32
    pb_authenticator_data : UInt8*
    cb_attestation : UInt32
    pb_attestation : UInt8*
    dw_attestation_decode_type : UInt32
    pv_attestation_decode : Void*
    cb_attestation_object : UInt32
    pb_attestation_object : UInt8*
    cb_credential_id : UInt32
    pb_credential_id : UInt8*
    extensions : WEBAUTHN_EXTENSIONS
    dw_used_transport : UInt32
    b_ep_att : LibC::BOOL
    b_large_blob_supported : LibC::BOOL
    b_resident_key : LibC::BOOL
  end
  struct WEBAUTHN_ASSERTION
    dw_version : UInt32
    cb_authenticator_data : UInt32
    pb_authenticator_data : UInt8*
    cb_signature : UInt32
    pb_signature : UInt8*
    credential : WEBAUTHN_CREDENTIAL
    cb_user_id : UInt32
    pb_user_id : UInt8*
    extensions : WEBAUTHN_EXTENSIONS
    cb_cred_large_blob : UInt32
    pb_cred_large_blob : UInt8*
    dw_cred_large_blob_status : UInt32
  end


  struct IContentPrefetcherTaskTriggerVTbl
    query_interface : Proc(IContentPrefetcherTaskTrigger*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContentPrefetcherTaskTrigger*, UInt32)
    release : Proc(IContentPrefetcherTaskTrigger*, UInt32)
    get_iids : Proc(IContentPrefetcherTaskTrigger*, UInt32*, Guid**, HRESULT)
    get_runtime_class_name : Proc(IContentPrefetcherTaskTrigger*, HSTRING*, HRESULT)
    get_trust_level : Proc(IContentPrefetcherTaskTrigger*, TrustLevel*, HRESULT)
    trigger_content_prefetcher_task : Proc(IContentPrefetcherTaskTrigger*, LibC::LPWSTR, HRESULT)
    is_registered_for_content_prefetch : Proc(IContentPrefetcherTaskTrigger*, LibC::LPWSTR, UInt8*, HRESULT)
  end

  IContentPrefetcherTaskTrigger_GUID = LibC::GUID.new("1b35a14a-6094-4799-a60e-e474e15d4dc9")
  CLSID_IContentPrefetcherTaskTrigger = "1b35a14a-6094-4799-a60e-e474e15d4dc9"
  struct IContentPrefetcherTaskTrigger
    lpVtbl : IContentPrefetcherTaskTriggerVTbl*
  end


  # Params # reader : WS_XML_READER* [In],writecallback : WS_WRITE_CALLBACK [In],writecallbackstate : Void* [In],properties : WS_XML_CANONICALIZATION_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsStartReaderCanonicalization(reader : WS_XML_READER*, writecallback : WS_WRITE_CALLBACK, writecallbackstate : Void*, properties : WS_XML_CANONICALIZATION_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsEndReaderCanonicalization(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],writecallback : WS_WRITE_CALLBACK [In],writecallbackstate : Void* [In],properties : WS_XML_CANONICALIZATION_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsStartWriterCanonicalization(writer : WS_XML_WRITER*, writecallback : WS_WRITE_CALLBACK, writecallbackstate : Void*, properties : WS_XML_CANONICALIZATION_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsEndWriterCanonicalization(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # heap : WS_HEAP* [In],properties : WS_XML_BUFFER_PROPERTY* [In],propertycount : UInt32 [In],buffer : WS_XML_BUFFER** [In],error : WS_ERROR* [In]
  fun WsCreateXmlBuffer(heap : WS_HEAP*, properties : WS_XML_BUFFER_PROPERTY*, propertycount : UInt32, buffer : WS_XML_BUFFER**, error : WS_ERROR*) : HRESULT

  # Params # nodeposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsRemoveNode(nodeposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # properties : WS_XML_READER_PROPERTY* [In],propertycount : UInt32 [In],reader : WS_XML_READER** [In],error : WS_ERROR* [In]
  fun WsCreateReader(properties : WS_XML_READER_PROPERTY*, propertycount : UInt32, reader : WS_XML_READER**, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],encoding : WS_XML_READER_ENCODING* [In],input : WS_XML_READER_INPUT* [In],properties : WS_XML_READER_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetInput(reader : WS_XML_READER*, encoding : WS_XML_READER_ENCODING*, input : WS_XML_READER_INPUT*, properties : WS_XML_READER_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],buffer : WS_XML_BUFFER* [In],properties : WS_XML_READER_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetInputToBuffer(reader : WS_XML_READER*, buffer : WS_XML_BUFFER*, properties : WS_XML_READER_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In]
  fun WsFreeReader(reader : WS_XML_READER*)

  # Params # reader : WS_XML_READER* [In],id : WS_XML_READER_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetReaderProperty(reader : WS_XML_READER*, id : WS_XML_READER_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # xmlreader : WS_XML_READER* [In],node : WS_XML_NODE** [In],error : WS_ERROR* [In]
  fun WsGetReaderNode(xmlreader : WS_XML_READER*, node : WS_XML_NODE**, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],minsize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsFillReader(reader : WS_XML_READER*, minsize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsReadStartElement(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],found : LibC::BOOL* [In],error : WS_ERROR* [In]
  fun WsReadToStartElement(reader : WS_XML_READER*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, found : LibC::BOOL*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],attributeindex : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadStartAttribute(reader : WS_XML_READER*, attributeindex : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsReadEndAttribute(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsReadNode(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsSkipNode(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsReadEndElement(reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],required : LibC::BOOL [In],attributeindex : UInt32* [In],error : WS_ERROR* [In]
  fun WsFindAttribute(reader : WS_XML_READER*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, required : LibC::BOOL, attributeindex : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],valuetype : WS_VALUE_TYPE [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadValue(reader : WS_XML_READER*, valuetype : WS_VALUE_TYPE, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],chars : Char* [In],maxcharcount : UInt32 [In],actualcharcount : UInt32* [In],error : WS_ERROR* [In]
  fun WsReadChars(reader : WS_XML_READER*, chars : Char*, maxcharcount : UInt32, actualcharcount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],bytes : UInt8* [In],maxbytecount : UInt32 [In],actualbytecount : UInt32* [In],error : WS_ERROR* [In]
  fun WsReadCharsUtf8(reader : WS_XML_READER*, bytes : UInt8*, maxbytecount : UInt32, actualbytecount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],bytes : Void* [In],maxbytecount : UInt32 [In],actualbytecount : UInt32* [In],error : WS_ERROR* [In]
  fun WsReadBytes(reader : WS_XML_READER*, bytes : Void*, maxbytecount : UInt32, actualbytecount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],valuetype : WS_VALUE_TYPE [In],array : Void* [In],arraysize : UInt32 [In],itemoffset : UInt32 [In],itemcount : UInt32 [In],actualitemcount : UInt32* [In],error : WS_ERROR* [In]
  fun WsReadArray(reader : WS_XML_READER*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, valuetype : WS_VALUE_TYPE, array : Void*, arraysize : UInt32, itemoffset : UInt32, itemcount : UInt32, actualitemcount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],nodeposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsGetReaderPosition(reader : WS_XML_READER*, nodeposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],nodeposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsSetReaderPosition(reader : WS_XML_READER*, nodeposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],moveto : WS_MOVE_TO [In],found : LibC::BOOL* [In],error : WS_ERROR* [In]
  fun WsMoveReader(reader : WS_XML_READER*, moveto : WS_MOVE_TO, found : LibC::BOOL*, error : WS_ERROR*) : HRESULT

  # Params # properties : WS_XML_WRITER_PROPERTY* [In],propertycount : UInt32 [In],writer : WS_XML_WRITER** [In],error : WS_ERROR* [In]
  fun WsCreateWriter(properties : WS_XML_WRITER_PROPERTY*, propertycount : UInt32, writer : WS_XML_WRITER**, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In]
  fun WsFreeWriter(writer : WS_XML_WRITER*)

  # Params # writer : WS_XML_WRITER* [In],encoding : WS_XML_WRITER_ENCODING* [In],output : WS_XML_WRITER_OUTPUT* [In],properties : WS_XML_WRITER_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetOutput(writer : WS_XML_WRITER*, encoding : WS_XML_WRITER_ENCODING*, output : WS_XML_WRITER_OUTPUT*, properties : WS_XML_WRITER_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],buffer : WS_XML_BUFFER* [In],properties : WS_XML_WRITER_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetOutputToBuffer(writer : WS_XML_WRITER*, buffer : WS_XML_BUFFER*, properties : WS_XML_WRITER_PROPERTY*, propertycount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],id : WS_XML_WRITER_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetWriterProperty(writer : WS_XML_WRITER*, id : WS_XML_WRITER_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],minsize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsFlushWriter(writer : WS_XML_WRITER*, minsize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],prefix : WS_XML_STRING* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsWriteStartElement(writer : WS_XML_WRITER*, prefix : WS_XML_STRING*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsWriteEndStartElement(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],prefix : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],singlequote : LibC::BOOL [In],error : WS_ERROR* [In]
  fun WsWriteXmlnsAttribute(writer : WS_XML_WRITER*, prefix : WS_XML_STRING*, ns : WS_XML_STRING*, singlequote : LibC::BOOL, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],prefix : WS_XML_STRING* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],singlequote : LibC::BOOL [In],error : WS_ERROR* [In]
  fun WsWriteStartAttribute(writer : WS_XML_WRITER*, prefix : WS_XML_STRING*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, singlequote : LibC::BOOL, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsWriteEndAttribute(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],valuetype : WS_VALUE_TYPE [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteValue(writer : WS_XML_WRITER*, valuetype : WS_VALUE_TYPE, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],xmlbuffer : WS_XML_BUFFER* [In],error : WS_ERROR* [In]
  fun WsWriteXmlBuffer(writer : WS_XML_WRITER*, xmlbuffer : WS_XML_BUFFER*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],heap : WS_HEAP* [In],xmlbuffer : WS_XML_BUFFER** [In],error : WS_ERROR* [In]
  fun WsReadXmlBuffer(reader : WS_XML_READER*, heap : WS_HEAP*, xmlbuffer : WS_XML_BUFFER**, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],xmlbuffer : WS_XML_BUFFER* [In],encoding : WS_XML_WRITER_ENCODING* [In],properties : WS_XML_WRITER_PROPERTY* [In],propertycount : UInt32 [In],heap : WS_HEAP* [In],bytes : Void** [In],bytecount : UInt32* [In],error : WS_ERROR* [In]
  fun WsWriteXmlBufferToBytes(writer : WS_XML_WRITER*, xmlbuffer : WS_XML_BUFFER*, encoding : WS_XML_WRITER_ENCODING*, properties : WS_XML_WRITER_PROPERTY*, propertycount : UInt32, heap : WS_HEAP*, bytes : Void**, bytecount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],encoding : WS_XML_READER_ENCODING* [In],properties : WS_XML_READER_PROPERTY* [In],propertycount : UInt32 [In],bytes : Void* [In],bytecount : UInt32 [In],heap : WS_HEAP* [In],xmlbuffer : WS_XML_BUFFER** [In],error : WS_ERROR* [In]
  fun WsReadXmlBufferFromBytes(reader : WS_XML_READER*, encoding : WS_XML_READER_ENCODING*, properties : WS_XML_READER_PROPERTY*, propertycount : UInt32, bytes : Void*, bytecount : UInt32, heap : WS_HEAP*, xmlbuffer : WS_XML_BUFFER**, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],valuetype : WS_VALUE_TYPE [In],array : Void* [In],arraysize : UInt32 [In],itemoffset : UInt32 [In],itemcount : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteArray(writer : WS_XML_WRITER*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, valuetype : WS_VALUE_TYPE, array : Void*, arraysize : UInt32, itemoffset : UInt32, itemcount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],prefix : WS_XML_STRING* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsWriteQualifiedName(writer : WS_XML_WRITER*, prefix : WS_XML_STRING*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],chars : Char* [In],charcount : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteChars(writer : WS_XML_WRITER*, chars : Char*, charcount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],bytes : UInt8* [In],bytecount : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteCharsUtf8(writer : WS_XML_WRITER*, bytes : UInt8*, bytecount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],bytes : Void* [In],bytecount : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteBytes(writer : WS_XML_WRITER*, bytes : Void*, bytecount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],callback : WS_PUSH_BYTES_CALLBACK [In],callbackstate : Void* [In],error : WS_ERROR* [In]
  fun WsPushBytes(writer : WS_XML_WRITER*, callback : WS_PUSH_BYTES_CALLBACK, callbackstate : Void*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],callback : WS_PULL_BYTES_CALLBACK [In],callbackstate : Void* [In],error : WS_ERROR* [In]
  fun WsPullBytes(writer : WS_XML_WRITER*, callback : WS_PULL_BYTES_CALLBACK, callbackstate : Void*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsWriteEndElement(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],text : WS_XML_TEXT* [In],error : WS_ERROR* [In]
  fun WsWriteText(writer : WS_XML_WRITER*, text : WS_XML_TEXT*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsWriteStartCData(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],error : WS_ERROR* [In]
  fun WsWriteEndCData(writer : WS_XML_WRITER*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],node : WS_XML_NODE* [In],error : WS_ERROR* [In]
  fun WsWriteNode(writer : WS_XML_WRITER*, node : WS_XML_NODE*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],ns : WS_XML_STRING* [In],required : LibC::BOOL [In],prefix : WS_XML_STRING** [In],error : WS_ERROR* [In]
  fun WsGetPrefixFromNamespace(writer : WS_XML_WRITER*, ns : WS_XML_STRING*, required : LibC::BOOL, prefix : WS_XML_STRING**, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],nodeposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsGetWriterPosition(writer : WS_XML_WRITER*, nodeposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],nodeposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsSetWriterPosition(writer : WS_XML_WRITER*, nodeposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],moveto : WS_MOVE_TO [In],found : LibC::BOOL* [In],error : WS_ERROR* [In]
  fun WsMoveWriter(writer : WS_XML_WRITER*, moveto : WS_MOVE_TO, found : LibC::BOOL*, error : WS_ERROR*) : HRESULT

  # Params # chars : Char* [In],charcount : UInt32 [In],trimmedchars : UInt16** [In],trimmedcount : UInt32* [In],error : WS_ERROR* [In]
  fun WsTrimXmlWhitespace(chars : Char*, charcount : UInt32, trimmedchars : UInt16**, trimmedcount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # ncnamechars : Char* [In],ncnamecharcount : UInt32 [In],error : WS_ERROR* [In]
  fun WsVerifyXmlNCName(ncnamechars : Char*, ncnamecharcount : UInt32, error : WS_ERROR*) : HRESULT

  # Params # string1 : WS_XML_STRING* [In],string2 : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsXmlStringEquals(string1 : WS_XML_STRING*, string2 : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],prefix : WS_XML_STRING* [In],required : LibC::BOOL [In],ns : WS_XML_STRING** [In],error : WS_ERROR* [In]
  fun WsGetNamespaceFromPrefix(reader : WS_XML_READER*, prefix : WS_XML_STRING*, required : LibC::BOOL, ns : WS_XML_STRING**, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],heap : WS_HEAP* [In],prefix : WS_XML_STRING* [In],localname : WS_XML_STRING* [In],ns : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsReadQualifiedName(reader : WS_XML_READER*, heap : WS_HEAP*, prefix : WS_XML_STRING*, localname : WS_XML_STRING*, ns : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],localname : WS_XML_STRING* [In],heap : WS_HEAP* [In],valuechars : UInt16** [In],valuecharcount : UInt32* [In],error : WS_ERROR* [In]
  fun WsGetXmlAttribute(reader : WS_XML_READER*, localname : WS_XML_STRING*, heap : WS_HEAP*, valuechars : UInt16**, valuecharcount : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],reader : WS_XML_READER* [In],error : WS_ERROR* [In]
  fun WsCopyNode(writer : WS_XML_WRITER*, reader : WS_XML_READER*, error : WS_ERROR*) : HRESULT

  # Params # asyncstate : WS_ASYNC_STATE* [In],operation : WS_ASYNC_FUNCTION [In],callbackmodel : WS_CALLBACK_MODEL [In],callbackstate : Void* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsAsyncExecute(asyncstate : WS_ASYNC_STATE*, operation : WS_ASYNC_FUNCTION, callbackmodel : WS_CALLBACK_MODEL, callbackstate : Void*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channeltype : WS_CHANNEL_TYPE [In],channelbinding : WS_CHANNEL_BINDING [In],properties : WS_CHANNEL_PROPERTY* [In],propertycount : UInt32 [In],securitydescription : WS_SECURITY_DESCRIPTION* [In],channel : WS_CHANNEL** [In],error : WS_ERROR* [In]
  fun WsCreateChannel(channeltype : WS_CHANNEL_TYPE, channelbinding : WS_CHANNEL_BINDING, properties : WS_CHANNEL_PROPERTY*, propertycount : UInt32, securitydescription : WS_SECURITY_DESCRIPTION*, channel : WS_CHANNEL**, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],endpointaddress : WS_ENDPOINT_ADDRESS* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsOpenChannel(channel : WS_CHANNEL*, endpointaddress : WS_ENDPOINT_ADDRESS*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],messagedescription : WS_MESSAGE_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],bodyvalue : Void* [In],bodyvaluesize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsSendMessage(channel : WS_CHANNEL*, message : WS_MESSAGE*, messagedescription : WS_MESSAGE_DESCRIPTION*, writeoption : WS_WRITE_OPTION, bodyvalue : Void*, bodyvaluesize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],messagedescriptions : WS_MESSAGE_DESCRIPTION** [In],messagedescriptioncount : UInt32 [In],receiveoption : WS_RECEIVE_OPTION [In],readbodyoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],index : UInt32* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsReceiveMessage(channel : WS_CHANNEL*, message : WS_MESSAGE*, messagedescriptions : WS_MESSAGE_DESCRIPTION**, messagedescriptioncount : UInt32, receiveoption : WS_RECEIVE_OPTION, readbodyoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, index : UInt32*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],requestmessage : WS_MESSAGE* [In],requestmessagedescription : WS_MESSAGE_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],requestbodyvalue : Void* [In],requestbodyvaluesize : UInt32 [In],replymessage : WS_MESSAGE* [In],replymessagedescription : WS_MESSAGE_DESCRIPTION* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsRequestReply(channel : WS_CHANNEL*, requestmessage : WS_MESSAGE*, requestmessagedescription : WS_MESSAGE_DESCRIPTION*, writeoption : WS_WRITE_OPTION, requestbodyvalue : Void*, requestbodyvaluesize : UInt32, replymessage : WS_MESSAGE*, replymessagedescription : WS_MESSAGE_DESCRIPTION*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],replymessage : WS_MESSAGE* [In],replymessagedescription : WS_MESSAGE_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],replybodyvalue : Void* [In],replybodyvaluesize : UInt32 [In],requestmessage : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsSendReplyMessage(channel : WS_CHANNEL*, replymessage : WS_MESSAGE*, replymessagedescription : WS_MESSAGE_DESCRIPTION*, writeoption : WS_WRITE_OPTION, replybodyvalue : Void*, replybodyvaluesize : UInt32, requestmessage : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],replymessage : WS_MESSAGE* [In],faulterror : WS_ERROR* [In],faulterrorcode : HRESULT [In],faultdisclosure : WS_FAULT_DISCLOSURE [In],requestmessage : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsSendFaultMessageForError(channel : WS_CHANNEL*, replymessage : WS_MESSAGE*, faulterror : WS_ERROR*, faulterrorcode : HRESULT, faultdisclosure : WS_FAULT_DISCLOSURE, requestmessage : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],id : WS_CHANNEL_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetChannelProperty(channel : WS_CHANNEL*, id : WS_CHANNEL_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],id : WS_CHANNEL_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetChannelProperty(channel : WS_CHANNEL*, id : WS_CHANNEL_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsWriteMessageStart(channel : WS_CHANNEL*, message : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsWriteMessageEnd(channel : WS_CHANNEL*, message : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsReadMessageStart(channel : WS_CHANNEL*, message : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsReadMessageEnd(channel : WS_CHANNEL*, message : WS_MESSAGE*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsCloseChannel(channel : WS_CHANNEL*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],error : WS_ERROR* [In]
  fun WsAbortChannel(channel : WS_CHANNEL*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In]
  fun WsFreeChannel(channel : WS_CHANNEL*)

  # Params # channel : WS_CHANNEL* [In],error : WS_ERROR* [In]
  fun WsResetChannel(channel : WS_CHANNEL*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],message : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsAbandonMessage(channel : WS_CHANNEL*, message : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsShutdownSessionChannel(channel : WS_CHANNEL*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # context : WS_OPERATION_CONTEXT* [In],id : WS_OPERATION_CONTEXT_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetOperationContextProperty(context : WS_OPERATION_CONTEXT*, id : WS_OPERATION_CONTEXT_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # encoding : WS_ENCODING [In],dictionary : WS_XML_DICTIONARY** [In],error : WS_ERROR* [In]
  fun WsGetDictionary(encoding : WS_ENCODING, dictionary : WS_XML_DICTIONARY**, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],endpointaddress : WS_ENDPOINT_ADDRESS* [In],extensiontype : WS_ENDPOINT_ADDRESS_EXTENSION_TYPE [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadEndpointAddressExtension(reader : WS_XML_READER*, endpointaddress : WS_ENDPOINT_ADDRESS*, extensiontype : WS_ENDPOINT_ADDRESS_EXTENSION_TYPE, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # properties : WS_ERROR_PROPERTY* [In],propertycount : UInt32 [In],error : WS_ERROR** [In]
  fun WsCreateError(properties : WS_ERROR_PROPERTY*, propertycount : UInt32, error : WS_ERROR**) : HRESULT

  # Params # error : WS_ERROR* [In],string : WS_STRING* [In]
  fun WsAddErrorString(error : WS_ERROR*, string : WS_STRING*) : HRESULT

  # Params # error : WS_ERROR* [In],index : UInt32 [In],string : WS_STRING* [In]
  fun WsGetErrorString(error : WS_ERROR*, index : UInt32, string : WS_STRING*) : HRESULT

  # Params # source : WS_ERROR* [In],destination : WS_ERROR* [In]
  fun WsCopyError(source : WS_ERROR*, destination : WS_ERROR*) : HRESULT

  # Params # error : WS_ERROR* [In],id : WS_ERROR_PROPERTY_ID [In],buffer : Void* [In],buffersize : UInt32 [In]
  fun WsGetErrorProperty(error : WS_ERROR*, id : WS_ERROR_PROPERTY_ID, buffer : Void*, buffersize : UInt32) : HRESULT

  # Params # error : WS_ERROR* [In],id : WS_ERROR_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In]
  fun WsSetErrorProperty(error : WS_ERROR*, id : WS_ERROR_PROPERTY_ID, value : Void*, valuesize : UInt32) : HRESULT

  # Params # error : WS_ERROR* [In]
  fun WsResetError(error : WS_ERROR*) : HRESULT

  # Params # error : WS_ERROR* [In]
  fun WsFreeError(error : WS_ERROR*)

  # Params # error : WS_ERROR* [In],id : WS_FAULT_ERROR_PROPERTY_ID [In],buffer : Void* [In],buffersize : UInt32 [In]
  fun WsGetFaultErrorProperty(error : WS_ERROR*, id : WS_FAULT_ERROR_PROPERTY_ID, buffer : Void*, buffersize : UInt32) : HRESULT

  # Params # error : WS_ERROR* [In],id : WS_FAULT_ERROR_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In]
  fun WsSetFaultErrorProperty(error : WS_ERROR*, id : WS_FAULT_ERROR_PROPERTY_ID, value : Void*, valuesize : UInt32) : HRESULT

  # Params # error : WS_ERROR* [In],faulterrorcode : HRESULT [In],faultdisclosure : WS_FAULT_DISCLOSURE [In],heap : WS_HEAP* [In],fault : WS_FAULT* [In]
  fun WsCreateFaultFromError(error : WS_ERROR*, faulterrorcode : HRESULT, faultdisclosure : WS_FAULT_DISCLOSURE, heap : WS_HEAP*, fault : WS_FAULT*) : HRESULT

  # Params # error : WS_ERROR* [In],faultdetaildescription : WS_FAULT_DETAIL_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In]
  fun WsSetFaultErrorDetail(error : WS_ERROR*, faultdetaildescription : WS_FAULT_DETAIL_DESCRIPTION*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32) : HRESULT

  # Params # error : WS_ERROR* [In],faultdetaildescription : WS_FAULT_DETAIL_DESCRIPTION* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In]
  fun WsGetFaultErrorDetail(error : WS_ERROR*, faultdetaildescription : WS_FAULT_DETAIL_DESCRIPTION*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32) : HRESULT

  # Params # maxsize : LibC::UINT_PTR [In],trimsize : LibC::UINT_PTR [In],properties : WS_HEAP_PROPERTY* [In],propertycount : UInt32 [In],heap : WS_HEAP** [In],error : WS_ERROR* [In]
  fun WsCreateHeap(maxsize : LibC::UINT_PTR, trimsize : LibC::UINT_PTR, properties : WS_HEAP_PROPERTY*, propertycount : UInt32, heap : WS_HEAP**, error : WS_ERROR*) : HRESULT

  # Params # heap : WS_HEAP* [In],size : LibC::UINT_PTR [In],ptr : Void** [In],error : WS_ERROR* [In]
  fun WsAlloc(heap : WS_HEAP*, size : LibC::UINT_PTR, ptr : Void**, error : WS_ERROR*) : HRESULT

  # Params # heap : WS_HEAP* [In],id : WS_HEAP_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetHeapProperty(heap : WS_HEAP*, id : WS_HEAP_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # heap : WS_HEAP* [In],error : WS_ERROR* [In]
  fun WsResetHeap(heap : WS_HEAP*, error : WS_ERROR*) : HRESULT

  # Params # heap : WS_HEAP* [In]
  fun WsFreeHeap(heap : WS_HEAP*)

  # Params # channeltype : WS_CHANNEL_TYPE [In],channelbinding : WS_CHANNEL_BINDING [In],properties : WS_LISTENER_PROPERTY* [In],propertycount : UInt32 [In],securitydescription : WS_SECURITY_DESCRIPTION* [In],listener : WS_LISTENER** [In],error : WS_ERROR* [In]
  fun WsCreateListener(channeltype : WS_CHANNEL_TYPE, channelbinding : WS_CHANNEL_BINDING, properties : WS_LISTENER_PROPERTY*, propertycount : UInt32, securitydescription : WS_SECURITY_DESCRIPTION*, listener : WS_LISTENER**, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],url : WS_STRING* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsOpenListener(listener : WS_LISTENER*, url : WS_STRING*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],channel : WS_CHANNEL* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsAcceptChannel(listener : WS_LISTENER*, channel : WS_CHANNEL*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsCloseListener(listener : WS_LISTENER*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],error : WS_ERROR* [In]
  fun WsAbortListener(listener : WS_LISTENER*, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],error : WS_ERROR* [In]
  fun WsResetListener(listener : WS_LISTENER*, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In]
  fun WsFreeListener(listener : WS_LISTENER*)

  # Params # listener : WS_LISTENER* [In],id : WS_LISTENER_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetListenerProperty(listener : WS_LISTENER*, id : WS_LISTENER_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],id : WS_LISTENER_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetListenerProperty(listener : WS_LISTENER*, id : WS_LISTENER_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # listener : WS_LISTENER* [In],properties : WS_CHANNEL_PROPERTY* [In],propertycount : UInt32 [In],channel : WS_CHANNEL** [In],error : WS_ERROR* [In]
  fun WsCreateChannelForListener(listener : WS_LISTENER*, properties : WS_CHANNEL_PROPERTY*, propertycount : UInt32, channel : WS_CHANNEL**, error : WS_ERROR*) : HRESULT

  # Params # envelopeversion : WS_ENVELOPE_VERSION [In],addressingversion : WS_ADDRESSING_VERSION [In],properties : WS_MESSAGE_PROPERTY* [In],propertycount : UInt32 [In],message : WS_MESSAGE** [In],error : WS_ERROR* [In]
  fun WsCreateMessage(envelopeversion : WS_ENVELOPE_VERSION, addressingversion : WS_ADDRESSING_VERSION, properties : WS_MESSAGE_PROPERTY*, propertycount : UInt32, message : WS_MESSAGE**, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],properties : WS_MESSAGE_PROPERTY* [In],propertycount : UInt32 [In],message : WS_MESSAGE** [In],error : WS_ERROR* [In]
  fun WsCreateMessageForChannel(channel : WS_CHANNEL*, properties : WS_MESSAGE_PROPERTY*, propertycount : UInt32, message : WS_MESSAGE**, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],initialization : WS_MESSAGE_INITIALIZATION [In],sourcemessage : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsInitializeMessage(message : WS_MESSAGE*, initialization : WS_MESSAGE_INITIALIZATION, sourcemessage : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsResetMessage(message : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In]
  fun WsFreeMessage(message : WS_MESSAGE*)

  # Params # message : WS_MESSAGE* [In],reader : WS_XML_READER* [In],headerattributes : UInt32* [In],error : WS_ERROR* [In]
  fun WsGetHeaderAttributes(message : WS_MESSAGE*, reader : WS_XML_READER*, headerattributes : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headertype : WS_HEADER_TYPE [In],valuetype : WS_TYPE [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetHeader(message : WS_MESSAGE*, headertype : WS_HEADER_TYPE, valuetype : WS_TYPE, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],customheaderdescription : WS_ELEMENT_DESCRIPTION* [In],repeatingoption : WS_REPEATING_HEADER_OPTION [In],headerindex : UInt32 [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],headerattributes : UInt32* [In],error : WS_ERROR* [In]
  fun WsGetCustomHeader(message : WS_MESSAGE*, customheaderdescription : WS_ELEMENT_DESCRIPTION*, repeatingoption : WS_REPEATING_HEADER_OPTION, headerindex : UInt32, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, headerattributes : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headertype : WS_HEADER_TYPE [In],error : WS_ERROR* [In]
  fun WsRemoveHeader(message : WS_MESSAGE*, headertype : WS_HEADER_TYPE, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headertype : WS_HEADER_TYPE [In],valuetype : WS_TYPE [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetHeader(message : WS_MESSAGE*, headertype : WS_HEADER_TYPE, valuetype : WS_TYPE, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headername : WS_XML_STRING* [In],headerns : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsRemoveCustomHeader(message : WS_MESSAGE*, headername : WS_XML_STRING*, headerns : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headerdescription : WS_ELEMENT_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],headerattributes : UInt32 [In],error : WS_ERROR* [In]
  fun WsAddCustomHeader(message : WS_MESSAGE*, headerdescription : WS_ELEMENT_DESCRIPTION*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, headerattributes : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headername : WS_XML_STRING* [In],valuetype : WS_TYPE [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsAddMappedHeader(message : WS_MESSAGE*, headername : WS_XML_STRING*, valuetype : WS_TYPE, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headername : WS_XML_STRING* [In],error : WS_ERROR* [In]
  fun WsRemoveMappedHeader(message : WS_MESSAGE*, headername : WS_XML_STRING*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headername : WS_XML_STRING* [In],repeatingoption : WS_REPEATING_HEADER_OPTION [In],headerindex : UInt32 [In],valuetype : WS_TYPE [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetMappedHeader(message : WS_MESSAGE*, headername : WS_XML_STRING*, repeatingoption : WS_REPEATING_HEADER_OPTION, headerindex : UInt32, valuetype : WS_TYPE, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],bodydescription : WS_ELEMENT_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteBody(message : WS_MESSAGE*, bodydescription : WS_ELEMENT_DESCRIPTION*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],bodydescription : WS_ELEMENT_DESCRIPTION* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadBody(message : WS_MESSAGE*, bodydescription : WS_ELEMENT_DESCRIPTION*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],writer : WS_XML_WRITER* [In],donecallback : WS_MESSAGE_DONE_CALLBACK [In],donecallbackstate : Void* [In],error : WS_ERROR* [In]
  fun WsWriteEnvelopeStart(message : WS_MESSAGE*, writer : WS_XML_WRITER*, donecallback : WS_MESSAGE_DONE_CALLBACK, donecallbackstate : Void*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsWriteEnvelopeEnd(message : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],reader : WS_XML_READER* [In],donecallback : WS_MESSAGE_DONE_CALLBACK [In],donecallbackstate : Void* [In],error : WS_ERROR* [In]
  fun WsReadEnvelopeStart(message : WS_MESSAGE*, reader : WS_XML_READER*, donecallback : WS_MESSAGE_DONE_CALLBACK, donecallbackstate : Void*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsReadEnvelopeEnd(message : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],id : WS_MESSAGE_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetMessageProperty(message : WS_MESSAGE*, id : WS_MESSAGE_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],id : WS_MESSAGE_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsSetMessageProperty(message : WS_MESSAGE*, id : WS_MESSAGE_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],address : WS_ENDPOINT_ADDRESS* [In],error : WS_ERROR* [In]
  fun WsAddressMessage(message : WS_MESSAGE*, address : WS_ENDPOINT_ADDRESS*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],error : WS_ERROR* [In]
  fun WsCheckMustUnderstandHeaders(message : WS_MESSAGE*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],headerposition : WS_XML_NODE_POSITION* [In],error : WS_ERROR* [In]
  fun WsMarkHeaderAsUnderstood(message : WS_MESSAGE*, headerposition : WS_XML_NODE_POSITION*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],minsize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsFillBody(message : WS_MESSAGE*, minsize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # message : WS_MESSAGE* [In],minsize : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsFlushBody(message : WS_MESSAGE*, minsize : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # channel : WS_CHANNEL* [In],properties : WS_REQUEST_SECURITY_TOKEN_PROPERTY* [In],propertycount : UInt32 [In],token : WS_SECURITY_TOKEN** [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsRequestSecurityToken(channel : WS_CHANNEL*, properties : WS_REQUEST_SECURITY_TOKEN_PROPERTY*, propertycount : UInt32, token : WS_SECURITY_TOKEN**, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # securitytoken : WS_SECURITY_TOKEN* [In],id : WS_SECURITY_TOKEN_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],heap : WS_HEAP* [In],error : WS_ERROR* [In]
  fun WsGetSecurityTokenProperty(securitytoken : WS_SECURITY_TOKEN*, id : WS_SECURITY_TOKEN_PROPERTY_ID, value : Void*, valuesize : UInt32, heap : WS_HEAP*, error : WS_ERROR*) : HRESULT

  # Params # tokenxml : WS_XML_BUFFER* [In],tokenkey : WS_SECURITY_KEY_HANDLE* [In],properties : WS_XML_SECURITY_TOKEN_PROPERTY* [In],propertycount : UInt32 [In],token : WS_SECURITY_TOKEN** [In],error : WS_ERROR* [In]
  fun WsCreateXmlSecurityToken(tokenxml : WS_XML_BUFFER*, tokenkey : WS_SECURITY_KEY_HANDLE*, properties : WS_XML_SECURITY_TOKEN_PROPERTY*, propertycount : UInt32, token : WS_SECURITY_TOKEN**, error : WS_ERROR*) : HRESULT

  # Params # token : WS_SECURITY_TOKEN* [In]
  fun WsFreeSecurityToken(token : WS_SECURITY_TOKEN*)

  # Params # securitycontext : WS_SECURITY_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsRevokeSecurityContext(securitycontext : WS_SECURITY_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # securitycontext : WS_SECURITY_CONTEXT* [In],id : WS_SECURITY_CONTEXT_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetSecurityContextProperty(securitycontext : WS_SECURITY_CONTEXT*, id : WS_SECURITY_CONTEXT_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],elementdescription : WS_ELEMENT_DESCRIPTION* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadElement(reader : WS_XML_READER*, elementdescription : WS_ELEMENT_DESCRIPTION*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],attributedescription : WS_ATTRIBUTE_DESCRIPTION* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadAttribute(reader : WS_XML_READER*, attributedescription : WS_ATTRIBUTE_DESCRIPTION*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # reader : WS_XML_READER* [In],typemapping : WS_TYPE_MAPPING [In],type : WS_TYPE [In],typedescription : Void* [In],readoption : WS_READ_OPTION [In],heap : WS_HEAP* [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsReadType(reader : WS_XML_READER*, typemapping : WS_TYPE_MAPPING, type : WS_TYPE, typedescription : Void*, readoption : WS_READ_OPTION, heap : WS_HEAP*, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],elementdescription : WS_ELEMENT_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteElement(writer : WS_XML_WRITER*, elementdescription : WS_ELEMENT_DESCRIPTION*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],attributedescription : WS_ATTRIBUTE_DESCRIPTION* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteAttribute(writer : WS_XML_WRITER*, attributedescription : WS_ATTRIBUTE_DESCRIPTION*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # writer : WS_XML_WRITER* [In],typemapping : WS_TYPE_MAPPING [In],type : WS_TYPE [In],typedescription : Void* [In],writeoption : WS_WRITE_OPTION [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsWriteType(writer : WS_XML_WRITER*, typemapping : WS_TYPE_MAPPING, type : WS_TYPE, typedescription : Void*, writeoption : WS_WRITE_OPTION, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # context : WS_OPERATION_CONTEXT* [In],cancelcallback : WS_OPERATION_CANCEL_CALLBACK [In],freestatecallback : WS_OPERATION_FREE_STATE_CALLBACK [In],userstate : Void* [In],error : WS_ERROR* [In]
  fun WsRegisterOperationForCancel(context : WS_OPERATION_CONTEXT*, cancelcallback : WS_OPERATION_CANCEL_CALLBACK, freestatecallback : WS_OPERATION_FREE_STATE_CALLBACK, userstate : Void*, error : WS_ERROR*) : HRESULT

  # Params # servicehost : WS_SERVICE_HOST* [In],id : WS_SERVICE_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetServiceHostProperty(servicehost : WS_SERVICE_HOST*, id : WS_SERVICE_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # endpoints : WS_SERVICE_ENDPOINT** [In],endpointcount : UInt16 [In],serviceproperties : WS_SERVICE_PROPERTY* [In],servicepropertycount : UInt32 [In],servicehost : WS_SERVICE_HOST** [In],error : WS_ERROR* [In]
  fun WsCreateServiceHost(endpoints : WS_SERVICE_ENDPOINT**, endpointcount : UInt16, serviceproperties : WS_SERVICE_PROPERTY*, servicepropertycount : UInt32, servicehost : WS_SERVICE_HOST**, error : WS_ERROR*) : HRESULT

  # Params # servicehost : WS_SERVICE_HOST* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsOpenServiceHost(servicehost : WS_SERVICE_HOST*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # servicehost : WS_SERVICE_HOST* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsCloseServiceHost(servicehost : WS_SERVICE_HOST*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # servicehost : WS_SERVICE_HOST* [In],error : WS_ERROR* [In]
  fun WsAbortServiceHost(servicehost : WS_SERVICE_HOST*, error : WS_ERROR*) : HRESULT

  # Params # servicehost : WS_SERVICE_HOST* [In]
  fun WsFreeServiceHost(servicehost : WS_SERVICE_HOST*)

  # Params # servicehost : WS_SERVICE_HOST* [In],error : WS_ERROR* [In]
  fun WsResetServiceHost(servicehost : WS_SERVICE_HOST*, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],id : WS_PROXY_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetServiceProxyProperty(serviceproxy : WS_SERVICE_PROXY*, id : WS_PROXY_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # channeltype : WS_CHANNEL_TYPE [In],channelbinding : WS_CHANNEL_BINDING [In],securitydescription : WS_SECURITY_DESCRIPTION* [In],properties : WS_PROXY_PROPERTY* [In],propertycount : UInt32 [In],channelproperties : WS_CHANNEL_PROPERTY* [In],channelpropertycount : UInt32 [In],serviceproxy : WS_SERVICE_PROXY** [In],error : WS_ERROR* [In]
  fun WsCreateServiceProxy(channeltype : WS_CHANNEL_TYPE, channelbinding : WS_CHANNEL_BINDING, securitydescription : WS_SECURITY_DESCRIPTION*, properties : WS_PROXY_PROPERTY*, propertycount : UInt32, channelproperties : WS_CHANNEL_PROPERTY*, channelpropertycount : UInt32, serviceproxy : WS_SERVICE_PROXY**, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],address : WS_ENDPOINT_ADDRESS* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsOpenServiceProxy(serviceproxy : WS_SERVICE_PROXY*, address : WS_ENDPOINT_ADDRESS*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsCloseServiceProxy(serviceproxy : WS_SERVICE_PROXY*, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],error : WS_ERROR* [In]
  fun WsAbortServiceProxy(serviceproxy : WS_SERVICE_PROXY*, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In]
  fun WsFreeServiceProxy(serviceproxy : WS_SERVICE_PROXY*)

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],error : WS_ERROR* [In]
  fun WsResetServiceProxy(serviceproxy : WS_SERVICE_PROXY*, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],callid : UInt32 [In],error : WS_ERROR* [In]
  fun WsAbandonCall(serviceproxy : WS_SERVICE_PROXY*, callid : UInt32, error : WS_ERROR*) : HRESULT

  # Params # serviceproxy : WS_SERVICE_PROXY* [In],operation : WS_OPERATION_DESCRIPTION* [In],arguments : Void** [In],heap : WS_HEAP* [In],callproperties : WS_CALL_PROPERTY* [In],callpropertycount : UInt32 [In],asynccontext : WS_ASYNC_CONTEXT* [In],error : WS_ERROR* [In]
  fun WsCall(serviceproxy : WS_SERVICE_PROXY*, operation : WS_OPERATION_DESCRIPTION*, arguments : Void**, heap : WS_HEAP*, callproperties : WS_CALL_PROPERTY*, callpropertycount : UInt32, asynccontext : WS_ASYNC_CONTEXT*, error : WS_ERROR*) : HRESULT

  # Params # url : WS_STRING* [In],flags : UInt32 [In],heap : WS_HEAP* [In],outurl : WS_URL** [In],error : WS_ERROR* [In]
  fun WsDecodeUrl(url : WS_STRING*, flags : UInt32, heap : WS_HEAP*, outurl : WS_URL**, error : WS_ERROR*) : HRESULT

  # Params # url : WS_URL* [In],flags : UInt32 [In],heap : WS_HEAP* [In],outurl : WS_STRING* [In],error : WS_ERROR* [In]
  fun WsEncodeUrl(url : WS_URL*, flags : UInt32, heap : WS_HEAP*, outurl : WS_STRING*, error : WS_ERROR*) : HRESULT

  # Params # baseurl : WS_STRING* [In],referenceurl : WS_STRING* [In],flags : UInt32 [In],heap : WS_HEAP* [In],resulturl : WS_STRING* [In],error : WS_ERROR* [In]
  fun WsCombineUrl(baseurl : WS_STRING*, referenceurl : WS_STRING*, flags : UInt32, heap : WS_HEAP*, resulturl : WS_STRING*, error : WS_ERROR*) : HRESULT

  # Params # datetime : WS_DATETIME* [In],filetime : FILETIME* [In],error : WS_ERROR* [In]
  fun WsDateTimeToFileTime(datetime : WS_DATETIME*, filetime : FILETIME*, error : WS_ERROR*) : HRESULT

  # Params # filetime : FILETIME* [In],datetime : WS_DATETIME* [In],error : WS_ERROR* [In]
  fun WsFileTimeToDateTime(filetime : FILETIME*, datetime : WS_DATETIME*, error : WS_ERROR*) : HRESULT

  # Params # properties : WS_METADATA_PROPERTY* [In],propertycount : UInt32 [In],metadata : WS_METADATA** [In],error : WS_ERROR* [In]
  fun WsCreateMetadata(properties : WS_METADATA_PROPERTY*, propertycount : UInt32, metadata : WS_METADATA**, error : WS_ERROR*) : HRESULT

  # Params # metadata : WS_METADATA* [In],reader : WS_XML_READER* [In],url : WS_STRING* [In],error : WS_ERROR* [In]
  fun WsReadMetadata(metadata : WS_METADATA*, reader : WS_XML_READER*, url : WS_STRING*, error : WS_ERROR*) : HRESULT

  # Params # metadata : WS_METADATA* [In]
  fun WsFreeMetadata(metadata : WS_METADATA*)

  # Params # metadata : WS_METADATA* [In],error : WS_ERROR* [In]
  fun WsResetMetadata(metadata : WS_METADATA*, error : WS_ERROR*) : HRESULT

  # Params # metadata : WS_METADATA* [In],id : WS_METADATA_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetMetadataProperty(metadata : WS_METADATA*, id : WS_METADATA_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # metadata : WS_METADATA* [In],address : WS_ENDPOINT_ADDRESS** [In],error : WS_ERROR* [In]
  fun WsGetMissingMetadataDocumentAddress(metadata : WS_METADATA*, address : WS_ENDPOINT_ADDRESS**, error : WS_ERROR*) : HRESULT

  # Params # metadata : WS_METADATA* [In],endpoints : WS_METADATA_ENDPOINTS* [In],error : WS_ERROR* [In]
  fun WsGetMetadataEndpoints(metadata : WS_METADATA*, endpoints : WS_METADATA_ENDPOINTS*, error : WS_ERROR*) : HRESULT

  # Params # policy : WS_POLICY* [In],alternativeindex : UInt32 [In],policyconstraints : WS_POLICY_CONSTRAINTS* [In],matchrequired : LibC::BOOL [In],heap : WS_HEAP* [In],error : WS_ERROR* [In]
  fun WsMatchPolicyAlternative(policy : WS_POLICY*, alternativeindex : UInt32, policyconstraints : WS_POLICY_CONSTRAINTS*, matchrequired : LibC::BOOL, heap : WS_HEAP*, error : WS_ERROR*) : HRESULT

  # Params # policy : WS_POLICY* [In],id : WS_POLICY_PROPERTY_ID [In],value : Void* [In],valuesize : UInt32 [In],error : WS_ERROR* [In]
  fun WsGetPolicyProperty(policy : WS_POLICY*, id : WS_POLICY_PROPERTY_ID, value : Void*, valuesize : UInt32, error : WS_ERROR*) : HRESULT

  # Params # policy : WS_POLICY* [In],count : UInt32* [In],error : WS_ERROR* [In]
  fun WsGetPolicyAlternativeCount(policy : WS_POLICY*, count : UInt32*, error : WS_ERROR*) : HRESULT

  # Params # channeltype : WS_CHANNEL_TYPE [In],properties : WS_PROXY_PROPERTY* [In],propertycount : UInt32 [In],templatetype : WS_BINDING_TEMPLATE_TYPE [In],templatevalue : Void* [In],templatesize : UInt32 [In],templatedescription : Void* [In],templatedescriptionsize : UInt32 [In],serviceproxy : WS_SERVICE_PROXY** [In],error : WS_ERROR* [In]
  fun WsCreateServiceProxyFromTemplate(channeltype : WS_CHANNEL_TYPE, properties : WS_PROXY_PROPERTY*, propertycount : UInt32, templatetype : WS_BINDING_TEMPLATE_TYPE, templatevalue : Void*, templatesize : UInt32, templatedescription : Void*, templatedescriptionsize : UInt32, serviceproxy : WS_SERVICE_PROXY**, error : WS_ERROR*) : HRESULT

  # Params # channeltype : WS_CHANNEL_TYPE [In],properties : WS_SERVICE_ENDPOINT_PROPERTY* [In],propertycount : UInt32 [In],addressurl : WS_STRING* [In],contract : WS_SERVICE_CONTRACT* [In],authorizationcallback : WS_SERVICE_SECURITY_CALLBACK [In],heap : WS_HEAP* [In],templatetype : WS_BINDING_TEMPLATE_TYPE [In],templatevalue : Void* [In],templatesize : UInt32 [In],templatedescription : Void* [In],templatedescriptionsize : UInt32 [In],serviceendpoint : WS_SERVICE_ENDPOINT** [In],error : WS_ERROR* [In]
  fun WsCreateServiceEndpointFromTemplate(channeltype : WS_CHANNEL_TYPE, properties : WS_SERVICE_ENDPOINT_PROPERTY*, propertycount : UInt32, addressurl : WS_STRING*, contract : WS_SERVICE_CONTRACT*, authorizationcallback : WS_SERVICE_SECURITY_CALLBACK, heap : WS_HEAP*, templatetype : WS_BINDING_TEMPLATE_TYPE, templatevalue : Void*, templatesize : UInt32, templatedescription : Void*, templatedescriptionsize : UInt32, serviceendpoint : WS_SERVICE_ENDPOINT**, error : WS_ERROR*) : HRESULT

  # Params # 
  fun WebAuthNGetApiVersionNumber : UInt32

  # Params # pbisuserverifyingplatformauthenticatoravailable : LibC::BOOL* [In]
  fun WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(pbisuserverifyingplatformauthenticatoravailable : LibC::BOOL*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],prpinformation : WEBAUTHN_RP_ENTITY_INFORMATION* [In],puserinformation : WEBAUTHN_USER_ENTITY_INFORMATION* [In],ppubkeycredparams : WEBAUTHN_COSE_CREDENTIAL_PARAMETERS* [In],pwebauthnclientdata : WEBAUTHN_CLIENT_DATA* [In],pwebauthnmakecredentialoptions : WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS* [In],ppwebauthncredentialattestation : WEBAUTHN_CREDENTIAL_ATTESTATION** [In]
  fun WebAuthNAuthenticatorMakeCredential(hwnd : LibC::HANDLE, prpinformation : WEBAUTHN_RP_ENTITY_INFORMATION*, puserinformation : WEBAUTHN_USER_ENTITY_INFORMATION*, ppubkeycredparams : WEBAUTHN_COSE_CREDENTIAL_PARAMETERS*, pwebauthnclientdata : WEBAUTHN_CLIENT_DATA*, pwebauthnmakecredentialoptions : WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS*, ppwebauthncredentialattestation : WEBAUTHN_CREDENTIAL_ATTESTATION**) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pwszrpid : LibC::LPWSTR [In],pwebauthnclientdata : WEBAUTHN_CLIENT_DATA* [In],pwebauthngetassertionoptions : WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS* [In],ppwebauthnassertion : WEBAUTHN_ASSERTION** [In]
  fun WebAuthNAuthenticatorGetAssertion(hwnd : LibC::HANDLE, pwszrpid : LibC::LPWSTR, pwebauthnclientdata : WEBAUTHN_CLIENT_DATA*, pwebauthngetassertionoptions : WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS*, ppwebauthnassertion : WEBAUTHN_ASSERTION**) : HRESULT

  # Params # pwebauthncredentialattestation : WEBAUTHN_CREDENTIAL_ATTESTATION* [In]
  fun WebAuthNFreeCredentialAttestation(pwebauthncredentialattestation : WEBAUTHN_CREDENTIAL_ATTESTATION*)

  # Params # pwebauthnassertion : WEBAUTHN_ASSERTION* [In]
  fun WebAuthNFreeAssertion(pwebauthnassertion : WEBAUTHN_ASSERTION*)

  # Params # pcancellationid : Guid* [In]
  fun WebAuthNGetCancellationId(pcancellationid : Guid*) : HRESULT

  # Params # pcancellationid : Guid* [In]
  fun WebAuthNCancelCurrentOperation(pcancellationid : Guid*) : HRESULT

  # Params # hr : HRESULT [In]
  fun WebAuthNGetErrorName(hr : HRESULT) : LibC::LPWSTR

  # Params # hr : HRESULT [In]
  fun WebAuthNGetW3CExceptionDOMError(hr : HRESULT) : HRESULT
end
