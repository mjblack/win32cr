require "../system/com.cr"
require "../foundation.cr"
require "../ui/windowsandmessaging.cr"
require "../ui/shell/common.cr"
require "../graphics/gdi.cr"
require "../ui/shell/propertiessystem.cr"
require "../system/ole.cr"
require "../ui/controls.cr"
require "../system/com/structuredstorage.cr"
require "../storage/filesystem.cr"
require "../system/registry.cr"
require "../system/search.cr"
require "../system/io.cr"
require "../data/xml/msxml.cr"
require "../system/console.cr"
require "../networkmanagement/wnet.cr"
require "../security.cr"
require "../system/threading.cr"
require "../graphics/directcomposition.cr"
require "../system/com/urlmon.cr"

@[Link("delayimp")]
@[Link("user32")]
@[Link(ldflags: "/IGNORE:4199")]
@[Link(ldflags: "/DELAYLOAD:userenv.dll")]
@[Link(ldflags: "/DELAYLOAD:comctl32.dll")]
@[Link(ldflags: "/DELAYLOAD:user32.dll")]
@[Link(ldflags: "/DELAYLOAD:shell32.dll")]
@[Link(ldflags: "/DELAYLOAD:ole32.dll")]
@[Link(ldflags: "/DELAYLOAD:shdocvw.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-shcore-scaling-l1-1-0.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-shcore-scaling-l1-1-1.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-shcore-scaling-l1-1-2.dll")]
@[Link(ldflags: "/DELAYLOAD:shlwapi.dll")]
@[Link(ldflags: "/DELAYLOAD:hlink.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-core-path-l1-1-0.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-core-psm-appnotify-l1-1-0.dll")]
@[Link(ldflags: "/DELAYLOAD:api-ms-win-core-psm-appnotify-l1-1-1.dll")]
lib LibWin32
  alias ShFindChangeNotificationHandle = LibC::IntPtrT
  alias HDROP = LibC::IntPtrT
  alias HPSXA = LibC::IntPtrT

  HLINK_E_FIRST = -2147221248_i32
  HLINK_S_FIRST = 262400_i32
  WM_CPL_LAUNCH = 2024_u32
  WM_CPL_LAUNCHED = 2025_u32
  CPL_DYNAMIC_RES = 0_u32
  CPL_INIT = 1_u32
  CPL_GETCOUNT = 2_u32
  CPL_INQUIRE = 3_u32
  CPL_SELECT = 4_u32
  CPL_DBLCLK = 5_u32
  CPL_STOP = 6_u32
  CPL_EXIT = 7_u32
  CPL_NEWINQUIRE = 8_u32
  CPL_STARTWPARMSA = 9_u32
  CPL_STARTWPARMSW = 10_u32
  CPL_STARTWPARMS = 10_u32
  CPL_SETUP = 200_u32
  HLINK_S_DONTHIDE = 262400_i32
  FOLDERID_NetworkFolder = "d20beec4-5ca8-4905-ae3b-bf251ea09b53"
  FOLDERID_ComputerFolder = "0ac0837c-bbf8-452a-850d-79d08e667ca7"
  FOLDERID_InternetFolder = "4d9f7874-4e0c-4904-967b-40b0d20c3e4b"
  FOLDERID_ControlPanelFolder = "82a74aeb-aeb4-465c-a014-d097ee346d63"
  FOLDERID_PrintersFolder = "76fc4e2d-d6ad-4519-a663-37bd56068185"
  FOLDERID_SyncManagerFolder = "43668bf8-c14e-49b2-97c9-747784d784b7"
  FOLDERID_SyncSetupFolder = "0f214138-b1d3-4a90-bba9-27cbc0c5389a"
  FOLDERID_ConflictFolder = "4bfefb45-347d-4006-a5be-ac0cb0567192"
  FOLDERID_SyncResultsFolder = "289a9a43-be44-4057-a41b-587a76d7e7f9"
  FOLDERID_RecycleBinFolder = "b7534046-3ecb-4c18-be4e-64cd4cb7d6ac"
  FOLDERID_ConnectionsFolder = "6f0cd92b-2e97-45d1-88ff-b0d186b8dedd"
  FOLDERID_Fonts = "fd228cb7-ae11-4ae3-864c-16f3910ab8fe"
  FOLDERID_Desktop = "b4bfcc3a-db2c-424c-b029-7fe99a87c641"
  FOLDERID_Startup = "b97d20bb-f46a-4c97-ba10-5e3608430854"
  FOLDERID_Programs = "a77f5d77-2e2b-44c3-a6a2-aba601054a51"
  FOLDERID_StartMenu = "625b53c3-ab48-4ec1-ba1f-a1ef4146fc19"
  FOLDERID_Recent = "ae50c081-ebd2-438a-8655-8a092e34987a"
  FOLDERID_SendTo = "8983036c-27c0-404b-8f08-102d10dcfd74"
  FOLDERID_Documents = "fdd39ad0-238f-46af-adb4-6c85480369c7"
  FOLDERID_Favorites = "1777f761-68ad-4d8a-87bd-30b759fa33dd"
  FOLDERID_NetHood = "c5abbf53-e17f-4121-8900-86626fc2c973"
  FOLDERID_PrintHood = "9274bd8d-cfd1-41c3-b35e-b13f55a758f4"
  FOLDERID_Templates = "a63293e8-664e-48db-a079-df759e0509f7"
  FOLDERID_CommonStartup = "82a5ea35-d9cd-47c5-9629-e15d2f714e6e"
  FOLDERID_CommonPrograms = "0139d44e-6afe-49f2-8690-3dafcae6ffb8"
  FOLDERID_CommonStartMenu = "a4115719-d62e-491d-aa7c-e74b8be3b067"
  FOLDERID_PublicDesktop = "c4aa340d-f20f-4863-afef-f87ef2e6ba25"
  FOLDERID_ProgramData = "62ab5d82-fdc1-4dc3-a9dd-070d1d495d97"
  FOLDERID_CommonTemplates = "b94237e7-57ac-4347-9151-b08c6c32d1f7"
  FOLDERID_PublicDocuments = "ed4824af-dce4-45a8-81e2-fc7965083634"
  FOLDERID_RoamingAppData = "3eb685db-65f9-4cf6-a03a-e3ef65729f3d"
  FOLDERID_LocalAppData = "f1b32785-6fba-4fcf-9d55-7b8e7f157091"
  FOLDERID_LocalAppDataLow = "a520a1a4-1780-4ff6-bd18-167343c5af16"
  FOLDERID_InternetCache = "352481e8-33be-4251-ba85-6007caedcf9d"
  FOLDERID_Cookies = "2b0f765d-c0e9-4171-908e-08a611b84ff6"
  FOLDERID_History = "d9dc8a3b-b784-432e-a781-5a1130a75963"
  FOLDERID_System = "1ac14e77-02e7-4e5d-b744-2eb1ae5198b7"
  FOLDERID_SystemX86 = "d65231b0-b2f1-4857-a4ce-a8e7c6ea7d27"
  FOLDERID_Windows = "f38bf404-1d43-42f2-9305-67de0b28fc23"
  FOLDERID_Profile = "5e6c858f-0e22-4760-9afe-ea3317b67173"
  FOLDERID_Pictures = "33e28130-4e1e-4676-835a-98395c3bc3bb"
  FOLDERID_ProgramFilesX86 = "7c5a40ef-a0fb-4bfc-874a-c0f2e0b9fa8e"
  FOLDERID_ProgramFilesCommonX86 = "de974d24-d9c6-4d3e-bf91-f4455120b917"
  FOLDERID_ProgramFilesX64 = "6d809377-6af0-444b-8957-a3773f02200e"
  FOLDERID_ProgramFilesCommonX64 = "6365d5a7-0f0d-45e5-87f6-0da56b6a4f7d"
  FOLDERID_ProgramFiles = "905e63b6-c1bf-494e-b29c-65b732d3d21a"
  FOLDERID_ProgramFilesCommon = "f7f1ed05-9f6d-47a2-aaae-29d317c6f066"
  FOLDERID_UserProgramFiles = "5cd7aee2-2219-4a67-b85d-6c9ce15660cb"
  FOLDERID_UserProgramFilesCommon = "bcbd3057-ca5c-4622-b42d-bc56db0ae516"
  FOLDERID_AdminTools = "724ef170-a42d-4fef-9f26-b60e846fba4f"
  FOLDERID_CommonAdminTools = "d0384e7d-bac3-4797-8f14-cba229b392b5"
  FOLDERID_Music = "4bd8d571-6d19-48d3-be97-422220080e43"
  FOLDERID_Videos = "18989b1d-99b5-455b-841c-ab7c74e4ddfc"
  FOLDERID_Ringtones = "c870044b-f49e-4126-a9c3-b52a1ff411e8"
  FOLDERID_PublicPictures = "b6ebfb86-6907-413c-9af7-4fc2abf07cc5"
  FOLDERID_PublicMusic = "3214fab5-9757-4298-bb61-92a9deaa44ff"
  FOLDERID_PublicVideos = "2400183a-6185-49fb-a2d8-4a392a602ba3"
  FOLDERID_PublicRingtones = "e555ab60-153b-4d17-9f04-a5fe99fc15ec"
  FOLDERID_ResourceDir = "8ad10c31-2adb-4296-a8f7-e4701232c972"
  FOLDERID_LocalizedResourcesDir = "2a00375e-224c-49de-b8d1-440df7ef3ddc"
  FOLDERID_CommonOEMLinks = "c1bae2d0-10df-4334-bedd-7aa20b227a9d"
  FOLDERID_CDBurning = "9e52ab10-f80d-49df-acb8-4330f5687855"
  FOLDERID_UserProfiles = "0762d272-c50a-4bb0-a382-697dcd729b80"
  FOLDERID_Playlists = "de92c1c7-837f-4f69-a3bb-86e631204a23"
  FOLDERID_SamplePlaylists = "15ca69b3-30ee-49c1-ace1-6b5ec372afb5"
  FOLDERID_SampleMusic = "b250c668-f57d-4ee1-a63c-290ee7d1aa1f"
  FOLDERID_SamplePictures = "c4900540-2379-4c75-844b-64e6faf8716b"
  FOLDERID_SampleVideos = "859ead94-2e85-48ad-a71a-0969cb56a6cd"
  FOLDERID_PhotoAlbums = "69d2cf90-fc33-4fb7-9a0c-ebb0f0fcb43c"
  FOLDERID_Public = "dfdf76a2-c82a-4d63-906a-5644ac457385"
  FOLDERID_ChangeRemovePrograms = "df7266ac-9274-4867-8d55-3bd661de872d"
  FOLDERID_AppUpdates = "a305ce99-f527-492b-8b1a-7e76fa98d6e4"
  FOLDERID_AddNewPrograms = "de61d971-5ebc-4f02-a3a9-6c82895e5c04"
  FOLDERID_Downloads = "374de290-123f-4565-9164-39c4925e467b"
  FOLDERID_PublicDownloads = "3d644c9b-1fb8-4f30-9b45-f670235f79c0"
  FOLDERID_SavedSearches = "7d1d3a04-debb-4115-95cf-2f29da2920da"
  FOLDERID_QuickLaunch = "52a4f021-7b75-48a9-9f6b-4b87a210bc8f"
  FOLDERID_Contacts = "56784854-c6cb-462b-8169-88e350acb882"
  FOLDERID_SidebarParts = "a75d362e-50fc-4fb7-ac2c-a8beaa314493"
  FOLDERID_SidebarDefaultParts = "7b396e54-9ec5-4300-be0a-2482ebae1a26"
  FOLDERID_PublicGameTasks = "debf2536-e1a8-4c59-b6a2-414586476aea"
  FOLDERID_GameTasks = "054fae61-4dd8-4787-80b6-090220c4b700"
  FOLDERID_SavedGames = "4c5c32ff-bb9d-43b0-b5b4-2d72e54eaaa4"
  FOLDERID_Games = "cac52c1a-b53d-4edc-92d7-6b2e8ac19434"
  FOLDERID_SEARCH_MAPI = "98ec0e18-2098-4d44-8644-66979315a281"
  FOLDERID_SEARCH_CSC = "ee32e446-31ca-4aba-814f-a5ebd2fd6d5e"
  FOLDERID_Links = "bfb9d5e0-c6a9-404c-b2b2-ae6db6af4968"
  FOLDERID_UsersFiles = "f3ce0f7c-4901-4acc-8648-d5d44b04ef8f"
  FOLDERID_UsersLibraries = "a302545d-deff-464b-abe8-61c8648d939b"
  FOLDERID_SearchHome = "190337d1-b8ca-4121-a639-6d472d16972a"
  FOLDERID_OriginalImages = "2c36c0aa-5812-4b87-bfd0-4cd0dfb19b39"
  FOLDERID_DocumentsLibrary = "7b0db17d-9cd2-4a93-9733-46cc89022e7c"
  FOLDERID_MusicLibrary = "2112ab0a-c86a-4ffe-a368-0de96e47012e"
  FOLDERID_PicturesLibrary = "a990ae9f-a03b-4e80-94bc-9912d7504104"
  FOLDERID_VideosLibrary = "491e922f-5643-4af4-a7eb-4e7a138d8174"
  FOLDERID_RecordedTVLibrary = "1a6fdba2-f42d-4358-a798-b74d745926c5"
  FOLDERID_HomeGroup = "52528a6b-b9e3-4add-b60d-588c2dba842d"
  FOLDERID_HomeGroupCurrentUser = "9b74b6a3-0dfd-4f11-9e78-5f7800f2e772"
  FOLDERID_DeviceMetadataStore = "5ce4a5e9-e4eb-479d-b89f-130c02886155"
  FOLDERID_Libraries = "1b3ea5dc-b587-4786-b4ef-bd1dc332aeae"
  FOLDERID_PublicLibraries = "48daf80b-e6cf-4f4e-b800-0e69d84ee384"
  FOLDERID_UserPinned = "9e3995ab-1f9c-4f13-b827-48b24b6c7174"
  FOLDERID_ImplicitAppShortcuts = "bcb5256f-79f6-4cee-b725-dc34e402fd46"
  FOLDERID_AccountPictures = "008ca0b1-55b4-4c56-b8a8-4de4b299d3be"
  FOLDERID_PublicUserTiles = "0482af6c-08f1-4c34-8c90-e17ec98b1e17"
  FOLDERID_AppsFolder = "1e87508d-89c2-42f0-8a7e-645a0f50ca58"
  FOLDERID_StartMenuAllPrograms = "f26305ef-6948-40b9-b255-81453d09c785"
  FOLDERID_CommonStartMenuPlaces = "a440879f-87a0-4f7d-b700-0207b966194a"
  FOLDERID_ApplicationShortcuts = "a3918781-e5f2-4890-b3d9-a7e54332328c"
  FOLDERID_RoamingTiles = "00bcfc5a-ed94-4e48-96a1-3f6217f21990"
  FOLDERID_RoamedTileImages = "aaa8d5a5-f1d6-4259-baa8-78e7ef60835e"
  FOLDERID_Screenshots = "b7bede81-df94-4682-a7d8-57a52620b86f"
  FOLDERID_CameraRoll = "ab5fb87b-7ce2-4f83-915d-550846c9537b"
  FOLDERID_SkyDrive = "a52bba46-e9e1-435f-b3d9-28daa648c0f6"
  FOLDERID_OneDrive = "a52bba46-e9e1-435f-b3d9-28daa648c0f6"
  FOLDERID_SkyDriveDocuments = "24d89e24-2f19-4534-9dde-6a6671fbb8fe"
  FOLDERID_SkyDrivePictures = "339719b5-8c47-4894-94c2-d8f77add44a6"
  FOLDERID_SkyDriveMusic = "c3f2459e-80d6-45dc-bfef-1f769f2be730"
  FOLDERID_SkyDriveCameraRoll = "767e6811-49cb-4273-87c2-20f355e1085b"
  FOLDERID_SearchHistory = "0d4c3db6-03a3-462f-a0e6-08924c41b5d4"
  FOLDERID_SearchTemplates = "7e636bfe-dfa9-4d5e-b456-d7b39851d8a9"
  FOLDERID_CameraRollLibrary = "2b20df75-1eda-4039-8097-38798227d5b7"
  FOLDERID_SavedPictures = "3b193882-d3ad-4eab-965a-69829d1fb59f"
  FOLDERID_SavedPicturesLibrary = "e25b5812-be88-4bd9-94b0-29233477b6c3"
  FOLDERID_RetailDemo = "12d4c69e-24ad-4923-be19-31321c43a767"
  FOLDERID_Device = "1c2ac1dc-4358-4b6c-9733-af21156576f0"
  FOLDERID_DevelopmentFiles = "dbe8e08e-3053-4bbc-b183-2a7b2b191e59"
  FOLDERID_Objects3D = "31c0dd25-9439-4f12-bf41-7ff4eda38722"
  FOLDERID_AppCaptures = "edc0fe71-98d8-4f4a-b920-c8dc133cb165"
  FOLDERID_LocalDocuments = "f42ee2d3-909f-4907-8871-4c22fc0bf756"
  FOLDERID_LocalPictures = "0ddd015d-b06c-45d5-8c4c-f59713854639"
  FOLDERID_LocalVideos = "35286a68-3c57-41a1-bbb1-0eae73d76c95"
  FOLDERID_LocalMusic = "a0c69a99-21c8-4671-8703-7934162fcf1d"
  FOLDERID_LocalDownloads = "7d83ee9b-2244-4e70-b1f5-5393042af1e4"
  FOLDERID_RecordedCalls = "2f8b40c2-83ed-48ee-b383-a1f157ec6f9a"
  FOLDERID_AllAppMods = "7ad67899-66af-43ba-9156-6aad42e6c596"
  FOLDERID_CurrentAppMods = "3db40b20-2a30-4dbe-917e-771dd21dd099"
  FOLDERID_AppDataDesktop = "b2c5e279-7add-439f-b28c-c41fe1bbf672"
  FOLDERID_AppDataDocuments = "7be16610-1f7f-44ac-bff0-83e15f2ffca1"
  FOLDERID_AppDataFavorites = "7cfbefbc-de1f-45aa-b843-a542ac536cc9"
  FOLDERID_AppDataProgramData = "559d40a3-a036-40fa-af61-84cb430a4d34"
  FOLDERID_LocalStorage = "b3eb08d3-a1f3-496b-865a-42b536cda0ec"
  CLSID_InternetShortcut = "fbf23b40-e3f0-101b-8488-00aa003e56f8"
  CLSID_NetworkDomain = "46e06680-4bf0-11d1-83ee-00a0c90dc849"
  CLSID_NetworkServer = "c0542a90-4bf0-11d1-83ee-00a0c90dc849"
  CLSID_NetworkShare = "54a754c0-4bf0-11d1-83ee-00a0c90dc849"
  CLSID_MyComputer = "20d04fe0-3aea-1069-a2d8-08002b30309d"
  CLSID_Internet = "871c5380-42a0-1069-a2ea-08002b30309d"
  CLSID_RecycleBin = "645ff040-5081-101b-9f08-00aa002f954e"
  CLSID_ControlPanel = "21ec2020-3aea-1069-a2dd-08002b30309d"
  CLSID_Printers = "2227a280-3aea-1069-a2de-08002b30309d"
  CLSID_MyDocuments = "450d8fba-ad25-11d0-98a8-0800361b1103"
  CATID_BrowsableShellExt = "00021490-0000-0000-c000-000000000046"
  CATID_BrowseInPlace = "00021491-0000-0000-c000-000000000046"
  CATID_DeskBand = "00021492-0000-0000-c000-000000000046"
  CATID_InfoBand = "00021493-0000-0000-c000-000000000046"
  CATID_CommBand = "00021494-0000-0000-c000-000000000046"
  FMTID_Intshcut = "000214a0-0000-0000-c000-000000000046"
  FMTID_InternetSite = "000214a1-0000-0000-c000-000000000046"
  CGID_Explorer = "000214d0-0000-0000-c000-000000000046"
  CGID_ShellDocView = "000214d1-0000-0000-c000-000000000046"
  CGID_ShellServiceObject = "000214d2-0000-0000-c000-000000000046"
  CGID_ExplorerBarDoc = "000214d3-0000-0000-c000-000000000046"
  CLSID_FolderShortcut = "0afaced1-e828-11d1-9187-b532f1e9575d"
  CLSID_CFSIconOverlayManager = "63b51f81-c868-11d0-999c-00c04fd655e1"
  CLSID_ShellThumbnailDiskCache = "1ebdcf80-a200-11d0-a3a4-00c04fd706ec"
  SID_DefView = "6d12fe80-7911-11cf-9534-0000c05bae0b"
  CGID_DefView = "4af07f10-d231-11d0-b942-00a0c90312e1"
  CLSID_MenuBand = "5b4dae26-b807-11d0-9815-00c04fd91972"
  VID_LargeIcons = "0057d0e0-3573-11cf-ae69-08002b2e1262"
  VID_SmallIcons = "089000c0-3573-11cf-ae69-08002b2e1262"
  VID_List = "0e1fa5e0-3573-11cf-ae69-08002b2e1262"
  VID_Details = "137e7700-3573-11cf-ae69-08002b2e1262"
  VID_Tile = "65f125e5-7be1-4810-ba9d-d271c8432ce3"
  VID_Content = "30c2c434-0889-4c8d-985d-a9f71830b0a9"
  VID_Thumbnails = "8bebb290-52d0-11d0-b7f4-00c04fd706ec"
  VID_ThumbStrip = "8eefa624-d1e9-445b-94b7-74fbce2ea11a"
  SID_SInPlaceBrowser = "1d2ae02b-3655-46cc-b63a-285988153bca"
  SID_SSearchBoxInfo = "142daa61-516b-4713-b49c-fb985ef82998"
  SID_CommandsPropertyBag = "6e043250-4416-485c-b143-e62a760d9fe5"
  CLSID_CUrlHistory = "3c374a40-bae4-11cf-bf7d-00aa006946ee"
  CLSID_CURLSearchHook = "cfbfae00-17a6-11d0-99cb-00c04fd64497"
  CLSID_AutoComplete = "00bb2763-6a77-11d0-a535-00c04fd7d062"
  CLSID_ACLHistory = "00bb2764-6a77-11d0-a535-00c04fd7d062"
  CLSID_ACListISF = "03c036f1-a186-11d0-824a-00aa005b4383"
  CLSID_ACLMRU = "6756a641-de71-11d0-831b-00aa005b4383"
  CLSID_ACLMulti = "00bb2765-6a77-11d0-a535-00c04fd7d062"
  CLSID_ACLCustomMRU = "6935db93-21e8-4ccc-beb9-9fe3c77a297a"
  CLSID_ProgressDialog = "f8383852-fcd3-11d1-a6b9-006097df5bd4"
  SID_STopLevelBrowser = "4c96be40-915c-11cf-99d3-00aa004ae837"
  CLSID_FileTypes = "b091e540-83e3-11cf-a713-0020afd79762"
  CLSID_ActiveDesktop = "75048700-ef1f-11d0-9888-006097deacf9"
  CLSID_QueryAssociations = "a07034fd-6caa-4954-ac3f-97a27216f98a"
  CLSID_LinkColumnProvider = "24f14f02-7b1c-11d1-838f-0000f80461cf"
  CGID_ShortCut = "93a68750-951a-11d1-946f-000000000000"
  CLSID_InternetButtons = "1e796980-9cc5-11d1-a83f-00c04fc99d61"
  CLSID_MSOButtons = "178f34b8-a282-11d2-86c5-00c04f8eea99"
  CLSID_ToolbarExtButtons = "2ce4b5d8-a28f-11d2-86c5-00c04f8eea99"
  CLSID_DarwinAppPublisher = "cfccc7a0-a282-11d1-9082-006008059382"
  CLSID_DocHostUIHandler = "7057e952-bd1b-11d1-8919-00c04fc2c836"
  FMTID_ShellDetails = "28636aa6-953d-11d2-b5d6-00c04fd918d0"
  PID_FINDDATA = 0_u32
  PID_NETRESOURCE = 1_u32
  PID_DESCRIPTIONID = 2_u32
  PID_WHICHFOLDER = 3_u32
  PID_NETWORKLOCATION = 4_u32
  PID_COMPUTERNAME = 5_u32
  FMTID_Storage = "b725f130-47ef-101a-a5f1-02608c9eebac"
  FMTID_ImageProperties = "14b81da1-0135-4d31-96d9-6cbfc9671a99"
  FMTID_CustomImageProperties = "7ecd8b0e-c136-4a9b-9411-4ebd6673ccc3"
  FMTID_LibraryProperties = "5d76b67f-9b3d-44bb-b6ae-25da4f638a67"
  FMTID_Displaced = "9b174b33-40ff-11d2-a27e-00c04fc30871"
  PID_DISPLACED_FROM = 2_u32
  PID_DISPLACED_DATE = 3_u32
  FMTID_Briefcase = "328d8b21-7729-4bfc-954c-902b329d56b0"
  PID_SYNC_COPY_IN = 2_u32
  FMTID_Misc = "9b174b34-40ff-11d2-a27e-00c04fc30871"
  PID_MISC_STATUS = 2_u32
  PID_MISC_ACCESSCOUNT = 3_u32
  PID_MISC_OWNER = 4_u32
  PID_HTMLINFOTIPFILE = 5_u32
  PID_MISC_PICS = 6_u32
  FMTID_WebView = "f2275480-f782-4291-bd94-f13693513aec"
  PID_DISPLAY_PROPERTIES = 0_u32
  PID_INTROTEXT = 1_u32
  FMTID_MUSIC = "56a3372e-ce9c-11d2-9f0e-006097c686f6"
  PIDSI_ARTIST = 2_u32
  PIDSI_SONGTITLE = 3_u32
  PIDSI_ALBUM = 4_u32
  PIDSI_YEAR = 5_u32
  PIDSI_COMMENT = 6_u32
  PIDSI_TRACK = 7_u32
  PIDSI_GENRE = 11_u32
  PIDSI_LYRICS = 12_u32
  FMTID_DRM = "aeac19e4-89ae-4508-b9b7-bb867abee2ed"
  PIDDRSI_PROTECTED = 2_u32
  PIDDRSI_DESCRIPTION = 3_u32
  PIDDRSI_PLAYCOUNT = 4_u32
  PIDDRSI_PLAYSTARTS = 5_u32
  PIDDRSI_PLAYEXPIRES = 6_u32
  PIDVSI_STREAM_NAME = 2_u32
  PIDVSI_FRAME_WIDTH = 3_u32
  PIDVSI_FRAME_HEIGHT = 4_u32
  PIDVSI_TIMELENGTH = 7_u32
  PIDVSI_FRAME_COUNT = 5_u32
  PIDVSI_FRAME_RATE = 6_u32
  PIDVSI_DATA_RATE = 8_u32
  PIDVSI_SAMPLE_SIZE = 9_u32
  PIDVSI_COMPRESSION = 10_u32
  PIDVSI_STREAM_NUMBER = 11_u32
  PIDASI_FORMAT = 2_u32
  PIDASI_TIMELENGTH = 3_u32
  PIDASI_AVG_DATA_RATE = 4_u32
  PIDASI_SAMPLE_RATE = 5_u32
  PIDASI_SAMPLE_SIZE = 6_u32
  PIDASI_CHANNEL_COUNT = 7_u32
  PIDASI_STREAM_NUMBER = 8_u32
  PIDASI_STREAM_NAME = 9_u32
  PIDASI_COMPRESSION = 10_u32
  PID_CONTROLPANEL_CATEGORY = 2_u32
  FMTID_Volume = "9b174b35-40ff-11d2-a27e-00c04fc30871"
  PID_VOLUME_FREE = 2_u32
  PID_VOLUME_CAPACITY = 3_u32
  PID_VOLUME_FILESYSTEM = 4_u32
  PID_SHARE_CSC_STATUS = 2_u32
  PID_LINK_TARGET = 2_u32
  PID_LINK_TARGET_TYPE = 3_u32
  FMTID_Query = "49691c90-7e17-101a-a91c-08002b2ecda9"
  PID_QUERY_RANK = 2_u32
  CLSID_HWShellExecute = "ffb8655f-81b9-4fce-b89c-9a6ba76d13e7"
  CLSID_DragDropHelper = "4657278a-411b-11d2-839a-00c04fd918d0"
  CLSID_CAnchorBrowsePropertyPage = "3050f3bb-98b5-11cf-bb82-00aa00bdce0b"
  CLSID_CImageBrowsePropertyPage = "3050f3b3-98b5-11cf-bb82-00aa00bdce0b"
  CLSID_CDocBrowsePropertyPage = "3050f3b4-98b5-11cf-bb82-00aa00bdce0b"
  SID_STopWindow = "49e1b500-4636-11d3-97f7-00c04f45d0b3"
  SID_SGetViewFromViewDual = "889a935d-971e-4b12-b90c-24dfc9e1e5e8"
  CLSID_FolderItemsMultiLevel = "53c74826-ab99-4d33-aca4-3117f51d3788"
  CLSID_NewMenu = "d969a300-e7ff-11d0-a93b-00a0c90f2719"
  BHID_SFObject = "3981e224-f559-11d3-8e3a-00c04f6837d5"
  BHID_SFUIObject = "3981e225-f559-11d3-8e3a-00c04f6837d5"
  BHID_SFViewObject = "3981e226-f559-11d3-8e3a-00c04f6837d5"
  BHID_Storage = "3981e227-f559-11d3-8e3a-00c04f6837d5"
  BHID_Stream = "1cebb3ab-7c10-499a-a417-92ca16c4cb83"
  BHID_RandomAccessStream = "f16fc93b-77ae-4cfe-bda7-a866eea6878d"
  BHID_LinkTargetItem = "3981e228-f559-11d3-8e3a-00c04f6837d5"
  BHID_StorageEnum = "4621a4e3-f0d6-4773-8a9c-46e77b174840"
  BHID_Transfer = "d5e346a1-f753-4932-b403-4574800e2498"
  BHID_PropertyStore = "0384e1a4-1523-439c-a4c8-ab911052f586"
  BHID_ThumbnailHandler = "7b2e650a-8e20-4f4a-b09e-6597afc72fb0"
  BHID_EnumItems = "94f60519-2850-4924-aa5a-d15e84868039"
  BHID_DataObject = "b8c0bd9f-ed24-455c-83e6-d5390c4fe8c4"
  BHID_AssociationArray = "bea9ef17-82f1-4f60-9284-4f8db75c3be9"
  BHID_Filter = "38d08778-f557-4690-9ebf-ba54706ad8f7"
  BHID_EnumAssocHandlers = "b8ab0b9c-c2ec-4f7a-918d-314900e6280a"
  BHID_StorageItem = "404e2109-77d2-4699-a5a0-4fdf10db9837"
  BHID_FilePlaceholder = "8677dceb-aae0-4005-8d3d-547fa852f825"
  CATID_FilePlaceholderMergeHandler = "3e9c9a51-d4aa-4870-b47c-7424b491f1cc"
  SID_CtxQueryAssociations = "faadfc40-b777-4b69-aa81-77035ef0e6e8"
  CLSID_QuickLinks = "0e5cbf21-d15f-11d0-8301-00aa005b4383"
  CLSID_ISFBand = "d82be2b0-5764-11d0-a96e-00c04fd705a2"
  CLSID_ShellFldSetExt = "6d5313c0-8c62-11d1-b2cd-006097df8c11"
  SID_SMenuBandChild = "ed9cc020-08b9-11d1-9823-00c04fd91972"
  SID_SMenuBandParent = "8c278eec-3eab-11d1-8cb0-00c04fd918d0"
  SID_SMenuPopup = "d1e7afeb-6a2e-11d0-8c78-00c04fd918b4"
  SID_SMenuBandBottomSelected = "165ebaf4-6d51-11d2-83ad-00c04fd918d0"
  SID_SMenuBandBottom = "743ca664-0deb-11d1-9825-00c04fd91972"
  SID_MenuShellFolder = "a6c17eb4-2d65-11d2-838f-00c04fd918d0"
  SID_SMenuBandContextMenuModifier = "39545874-7162-465e-b783-2aa1874fef81"
  SID_SMenuBandBKContextMenu = "164bbd86-1d0d-4de0-9a3b-d9729647c2b8"
  CGID_MENUDESKBAR = "5c9f0a12-959e-11d0-a3a4-00a0c9082636"
  SID_SMenuBandTop = "9493a810-ec38-11d0-bc46-00aa006ce2f5"
  CLSID_MenuToolbarBase = "40b96610-b522-11d1-b3b4-00aa006efde7"
  CLSID_MenuBandSite = "e13ef4e4-d2f2-11d0-9816-00c04fd91972"
  SID_SCommDlgBrowser = "80f30233-b7df-11d2-a33b-006097df5bd4"
  CPFG_LOGON_USERNAME = "da15bbe8-954d-4fd3-b0f4-1fb5b90b174b"
  CPFG_LOGON_PASSWORD = "60624cfa-a477-47b1-8a8e-3a4a19981827"
  CPFG_SMARTCARD_USERNAME = "3e1ecf69-568c-4d96-9d59-46444174e2d6"
  CPFG_SMARTCARD_PIN = "4fe5263b-9181-46c1-b0a4-9dedd4db7dea"
  CPFG_CREDENTIAL_PROVIDER_LOGO = "2d837775-f6cd-464e-a745-482fd0b47493"
  CPFG_CREDENTIAL_PROVIDER_LABEL = "286bbff3-bad4-438f-b007-79b7267c3d48"
  CPFG_STANDALONE_SUBMIT_BUTTON = "0b7b0ad8-cc36-4d59-802b-82f714fa7022"
  CPFG_STYLE_LINK_AS_BUTTON = "088fa508-94a6-4430-a4cb-6fc6e3c0b9e2"
  FOLDERTYPEID_Invalid = "57807898-8c4f-4462-bb63-71042380b109"
  FOLDERTYPEID_Generic = "5c4f28b5-f869-4e84-8e60-f11db97c5cc7"
  FOLDERTYPEID_GenericSearchResults = "7fde1a1e-8b31-49a5-93b8-6be14cfa4943"
  FOLDERTYPEID_GenericLibrary = "5f4eab9a-6833-4f61-899d-31cf46979d49"
  FOLDERTYPEID_Documents = "7d49d726-3c21-4f05-99aa-fdc2c9474656"
  FOLDERTYPEID_Pictures = "b3690e58-e961-423b-b687-386ebfd83239"
  FOLDERTYPEID_Music = "94d6ddcc-4a68-4175-a374-bd584a510b78"
  FOLDERTYPEID_Videos = "5fa96407-7e77-483c-ac93-691d05850de8"
  FOLDERTYPEID_Downloads = "885a186e-a440-4ada-812b-db871b942259"
  FOLDERTYPEID_UserFiles = "cd0fc69b-71e2-46e5-9690-5bcd9f57aab3"
  FOLDERTYPEID_UsersLibraries = "c4d98f09-6124-4fe0-9942-826416082da9"
  FOLDERTYPEID_OtherUsers = "b337fd00-9dd5-4635-a6d4-da33fd102b7a"
  FOLDERTYPEID_PublishedItems = "7f2f5b96-ff74-41da-afd8-1c78a5f3aea2"
  FOLDERTYPEID_Communications = "91475fe5-586b-4eba-8d75-d17434b8cdf6"
  FOLDERTYPEID_Contacts = "de2b70ec-9bf7-4a93-bd3d-243f7881d492"
  FOLDERTYPEID_StartMenu = "ef87b4cb-f2ce-4785-8658-4ca6c63e38c6"
  FOLDERTYPEID_RecordedTV = "5557a28f-5da6-4f83-8809-c2c98a11a6fa"
  FOLDERTYPEID_SavedGames = "d0363307-28cb-4106-9f23-2956e3e5e0e7"
  FOLDERTYPEID_OpenSearch = "8faf9629-1980-46ff-8023-9dceab9c3ee3"
  FOLDERTYPEID_SearchConnector = "982725ee-6f47-479e-b447-812bfa7d2e8f"
  FOLDERTYPEID_AccountPictures = "db2a5d8f-06e6-4007-aba6-af877d526ea6"
  FOLDERTYPEID_Games = "b689b0d0-76d3-4cbb-87f7-585d0e0ce070"
  FOLDERTYPEID_ControlPanelCategory = "de4f0660-fa10-4b8f-a494-068b20b22307"
  FOLDERTYPEID_ControlPanelClassic = "0c3794f3-b545-43aa-a329-c37430c58d2a"
  FOLDERTYPEID_Printers = "2c7bbec6-c844-4a0a-91fa-cef6f59cfda1"
  FOLDERTYPEID_RecycleBin = "d6d9e004-cd87-442b-9d57-5e0aeb4f6f72"
  FOLDERTYPEID_SoftwareExplorer = "d674391b-52d9-4e07-834e-67c98610f39d"
  FOLDERTYPEID_CompressedFolder = "80213e82-bcfd-4c4f-8817-bb27601267a9"
  FOLDERTYPEID_NetworkExplorer = "25cc242b-9a7c-4f51-80e0-7a2928febe42"
  FOLDERTYPEID_Searches = "0b0ba2e3-405f-415e-a6ee-cad625207853"
  FOLDERTYPEID_SearchHome = "834d8a44-0974-4ed6-866e-f203d80b3810"
  FOLDERTYPEID_StorageProviderGeneric = "4f01ebc5-2385-41f2-a28e-2c5c91fb56e0"
  FOLDERTYPEID_StorageProviderDocuments = "dd61bd66-70e8-48dd-9655-65c5e1aac2d1"
  FOLDERTYPEID_StorageProviderPictures = "71d642a9-f2b1-42cd-ad92-eb9300c7cc0a"
  FOLDERTYPEID_StorageProviderMusic = "672ecd7e-af04-4399-875c-0290845b6247"
  FOLDERTYPEID_StorageProviderVideos = "51294da1-d7b1-485b-9e9a-17cffe33e187"
  SYNCMGR_OBJECTID_Icon = "6dbc85c3-5d07-4c72-a777-7fec78072c06"
  SYNCMGR_OBJECTID_EventStore = "4bef34b9-a786-4075-ba88-0c2b9d89a98f"
  SYNCMGR_OBJECTID_ConflictStore = "d78181f4-2389-47e4-a960-60bcc2ed930b"
  SYNCMGR_OBJECTID_BrowseContent = "57cbb584-e9b4-47ae-a120-c4df3335dee2"
  SYNCMGR_OBJECTID_ShowSchedule = "edc6f3e3-8441-4109-adf3-6c1ca0b7de47"
  SYNCMGR_OBJECTID_QueryBeforeActivate = "d882d80b-e7aa-49ed-86b7-e6e1f714cdfe"
  SYNCMGR_OBJECTID_QueryBeforeDeactivate = "a0efc282-60e0-460e-9374-ea88513cfc80"
  SYNCMGR_OBJECTID_QueryBeforeEnable = "04cbf7f0-5beb-4de1-bc90-908345c480f6"
  SYNCMGR_OBJECTID_QueryBeforeDisable = "bb5f64aa-f004-4eb5-8e4d-26751966344c"
  SYNCMGR_OBJECTID_QueryBeforeDelete = "f76c3397-afb3-45d7-a59f-5a49e905437e"
  SYNCMGR_OBJECTID_EventLinkClick = "2203bdc1-1af1-4082-8c30-28399f41384c"
  EP_NavPane = "cb316b22-25f7-42b8-8a09-540d23a43c2f"
  EP_Commands = "d9745868-ca5f-4a76-91cd-f5a129fbb076"
  EP_Commands_Organize = "72e81700-e3ec-4660-bf24-3c3b7b648806"
  EP_Commands_View = "21f7c32d-eeaa-439b-bb51-37b96fd6a943"
  EP_DetailsPane = "43abf98b-89b8-472d-b9ce-e69b8229f019"
  EP_PreviewPane = "893c63d1-45c8-4d17-be19-223be71be365"
  EP_QueryPane = "65bcde4f-4f07-4f27-83a7-1afca4df7ddd"
  EP_AdvQueryPane = "b4e9db8b-34ba-4c39-b5cc-16a1bd2c411c"
  EP_StatusBar = "65fe56ce-5cfe-4bc4-ad8a-7ae3fe7e8f7c"
  EP_Ribbon = "d27524a8-c9f2-4834-a106-df8889fd4f37"
  CATID_LocationFactory = "965c4d51-8b76-4e57-80b7-564d2ea4b55e"
  CATID_LocationProvider = "1b3ca474-2614-414b-b813-1aceca3e3dd8"
  ItemCount_Property_GUID = "abbf5c45-5ccc-47b7-bb4e-87cb87bbd162"
  SelectedItemCount_Property_GUID = "8fe316d2-0e52-460a-9c1e-48f273d470a3"
  ItemIndex_Property_GUID = "92a053da-2969-4021-bf27-514cfc2e4a69"
  CATID_SearchableApplication = "366c292a-d9b3-4dbf-bb70-e62ec3d0bbbf"
  IDD_WIZEXTN_FIRST = 20480_u32
  IDD_WIZEXTN_LAST = 20736_u32
  SHPWHF_NORECOMPRESS = 1_u32
  SHPWHF_NONETPLACECREATE = 2_u32
  SHPWHF_NOFILESELECTOR = 4_u32
  SHPWHF_USEMRU = 8_u32
  SHPWHF_ANYLOCATION = 256_u32
  SHPWHF_VALIDATEVIAWEBFOLDERS = 65536_u32
  ACDD_VISIBLE = 1_u32
  SID_SCommandBarState = "b99eaa5c-3850-4400-bc33-2ce534048bf8"
  NSTCDHPOS_ONTOP = -1_i32
  FVSIF_RECT = 1_u32
  FVSIF_PINNED = 2_u32
  FVSIF_NEWFAILED = 134217728_u32
  FVSIF_NEWFILE = 2147483648_u32
  FVSIF_CANVIEWIT = 1073741824_u32
  FCIDM_TOOLBAR = 40960_u32
  FCIDM_STATUS = 40961_u32
  IDC_OFFLINE_HAND = 103_u32
  IDC_PANTOOL_HAND_OPEN = 104_u32
  IDC_PANTOOL_HAND_CLOSED = 105_u32
  PANE_NONE = 4294967295_u32
  PANE_ZONE = 1_u32
  PANE_OFFLINE = 2_u32
  PANE_PRINTER = 3_u32
  PANE_SSL = 4_u32
  PANE_NAVIGATION = 5_u32
  PANE_PROGRESS = 6_u32
  PANE_PRIVACY = 7_u32
  DWFRF_NORMAL = 0_u32
  DWFRF_DELETECONFIGDATA = 1_u32
  DWFAF_HIDDEN = 1_u32
  DWFAF_GROUP1 = 2_u32
  DWFAF_GROUP2 = 4_u32
  DWFAF_AUTOHIDE = 16_u32
  SHIMSTCAPFLAG_LOCKABLE = 1_u32
  SHIMSTCAPFLAG_PURGEABLE = 2_u32
  ISFB_MASK_STATE = 1_u32
  ISFB_MASK_BKCOLOR = 2_u32
  ISFB_MASK_VIEWMODE = 4_u32
  ISFB_MASK_SHELLFOLDER = 8_u32
  ISFB_MASK_IDLIST = 16_u32
  ISFB_MASK_COLORS = 32_u32
  ISFB_STATE_DEFAULT = 0_u32
  ISFB_STATE_DEBOSSED = 1_u32
  ISFB_STATE_ALLOWRENAME = 2_u32
  ISFB_STATE_NOSHOWTEXT = 4_u32
  ISFB_STATE_CHANNELBAR = 16_u32
  ISFB_STATE_QLINKSMODE = 32_u32
  ISFB_STATE_FULLOPEN = 64_u32
  ISFB_STATE_NONAMESORT = 128_u32
  ISFB_STATE_BTNMINSIZE = 256_u32
  ISFBVIEWMODE_SMALLICONS = 1_u32
  ISFBVIEWMODE_LARGEICONS = 2_u32
  ISFBVIEWMODE_LOGOS = 3_u32
  DBC_GS_IDEAL = 0_u32
  DBC_GS_SIZEDOWN = 1_u32
  DBC_HIDE = 0_u32
  DBC_SHOW = 1_u32
  DBC_SHOWOBSCURE = 2_u32
  SSM_CLEAR = 0_u32
  SSM_SET = 1_u32
  SSM_REFRESH = 2_u32
  SSM_UPDATE = 4_u32
  SCHEME_DISPLAY = 1_u32
  SCHEME_EDIT = 2_u32
  SCHEME_LOCAL = 4_u32
  SCHEME_GLOBAL = 8_u32
  SCHEME_REFRESH = 16_u32
  SCHEME_UPDATE = 32_u32
  SCHEME_DONOTUSE = 64_u32
  SCHEME_CREATE = 128_u32
  GADOF_DIRTY = 1_u32
  SHCDF_UPDATEITEM = 1_u32
  PPCF_ADDQUOTES = 1_u32
  PPCF_ADDARGUMENTS = 3_u32
  PPCF_NODIRECTORIES = 16_u32
  PPCF_FORCEQUALIFY = 64_u32
  PPCF_LONGESTPOSSIBLE = 128_u32
  OPENPROPS_NONE = 0_u32
  OPENPROPS_INHIBITPIF = 32768_u32
  GETPROPS_NONE = 0_u32
  SETPROPS_NONE = 0_u32
  CLOSEPROPS_NONE = 0_u32
  CLOSEPROPS_DISCARD = 1_u32
  TBIF_APPEND = 0_u32
  TBIF_PREPEND = 1_u32
  TBIF_REPLACE = 2_u32
  TBIF_DEFAULT = 0_u32
  TBIF_INTERNETBAR = 65536_u32
  TBIF_STANDARDTOOLBAR = 131072_u32
  TBIF_NOTOOLBAR = 196608_u32
  SFVM_REARRANGE = 1_u32
  SFVM_ADDOBJECT = 3_u32
  SFVM_REMOVEOBJECT = 6_u32
  SFVM_UPDATEOBJECT = 7_u32
  SFVM_GETSELECTEDOBJECTS = 9_u32
  SFVM_SETITEMPOS = 14_u32
  SFVM_SETCLIPBOARD = 16_u32
  SFVM_SETPOINTS = 23_u32
  GIL_OPENICON = 1_u32
  GIL_FORSHELL = 2_u32
  GIL_ASYNC = 32_u32
  GIL_DEFAULTICON = 64_u32
  GIL_FORSHORTCUT = 128_u32
  GIL_CHECKSHIELD = 512_u32
  GIL_SIMULATEDOC = 1_u32
  GIL_PERINSTANCE = 2_u32
  GIL_PERCLASS = 4_u32
  GIL_NOTFILENAME = 8_u32
  GIL_DONTCACHE = 16_u32
  GIL_SHIELD = 512_u32
  GIL_FORCENOSHIELD = 1024_u32
  SIOM_OVERLAYINDEX = 1_u32
  SIOM_ICONINDEX = 2_u32
  SIOM_RESERVED_SHARED = 0_u32
  SIOM_RESERVED_LINK = 1_u32
  SIOM_RESERVED_SLOWFILE = 2_u32
  SIOM_RESERVED_DEFAULT = 3_u32
  OI_DEFAULT = 0_u32
  OI_ASYNC = 4294962926_u32
  IDO_SHGIOI_SHARE = 268435455_u32
  IDO_SHGIOI_LINK = 268435454_u32
  IDO_SHGIOI_SLOWFILE = 4294967293_u64
  IDO_SHGIOI_DEFAULT = 4294967292_u64
  NT_CONSOLE_PROPS_SIG = 2684354562_u32
  NT_FE_CONSOLE_PROPS_SIG = 2684354564_u32
  EXP_DARWIN_ID_SIG = 2684354566_u32
  EXP_SPECIAL_FOLDER_SIG = 2684354565_u32
  EXP_SZ_LINK_SIG = 2684354561_u32
  EXP_SZ_ICON_SIG = 2684354567_u32
  EXP_PROPERTYSTORAGE_SIG = 2684354569_u32
  FCIDM_SHVIEWFIRST = 0_u32
  FCIDM_SHVIEWLAST = 32767_u32
  FCIDM_BROWSERFIRST = 40960_u32
  FCIDM_BROWSERLAST = 48896_u32
  FCIDM_GLOBALFIRST = 32768_u32
  FCIDM_GLOBALLAST = 40959_u32
  FCIDM_MENU_FILE = 32768_u32
  FCIDM_MENU_EDIT = 32832_u32
  FCIDM_MENU_VIEW = 32896_u32
  FCIDM_MENU_VIEW_SEP_OPTIONS = 32897_u32
  FCIDM_MENU_TOOLS = 32960_u32
  FCIDM_MENU_TOOLS_SEP_GOTO = 32961_u32
  FCIDM_MENU_HELP = 33024_u32
  FCIDM_MENU_FIND = 33088_u32
  FCIDM_MENU_EXPLORE = 33104_u32
  FCIDM_MENU_FAVORITES = 33136_u32
  OFASI_EDIT = 1_u32
  OFASI_OPENDESKTOP = 2_u32
  CSIDL_DESKTOP = 0_u32
  CSIDL_INTERNET = 1_u32
  CSIDL_PROGRAMS = 2_u32
  CSIDL_CONTROLS = 3_u32
  CSIDL_PRINTERS = 4_u32
  CSIDL_PERSONAL = 5_u32
  CSIDL_FAVORITES = 6_u32
  CSIDL_STARTUP = 7_u32
  CSIDL_RECENT = 8_u32
  CSIDL_SENDTO = 9_u32
  CSIDL_BITBUCKET = 10_u32
  CSIDL_STARTMENU = 11_u32
  CSIDL_MYDOCUMENTS = 5_u32
  CSIDL_MYMUSIC = 13_u32
  CSIDL_MYVIDEO = 14_u32
  CSIDL_DESKTOPDIRECTORY = 16_u32
  CSIDL_DRIVES = 17_u32
  CSIDL_NETWORK = 18_u32
  CSIDL_NETHOOD = 19_u32
  CSIDL_FONTS = 20_u32
  CSIDL_TEMPLATES = 21_u32
  CSIDL_COMMON_STARTMENU = 22_u32
  CSIDL_COMMON_PROGRAMS = 23_u32
  CSIDL_COMMON_STARTUP = 24_u32
  CSIDL_COMMON_DESKTOPDIRECTORY = 25_u32
  CSIDL_APPDATA = 26_u32
  CSIDL_PRINTHOOD = 27_u32
  CSIDL_LOCAL_APPDATA = 28_u32
  CSIDL_ALTSTARTUP = 29_u32
  CSIDL_COMMON_ALTSTARTUP = 30_u32
  CSIDL_COMMON_FAVORITES = 31_u32
  CSIDL_INTERNET_CACHE = 32_u32
  CSIDL_COOKIES = 33_u32
  CSIDL_HISTORY = 34_u32
  CSIDL_COMMON_APPDATA = 35_u32
  CSIDL_WINDOWS = 36_u32
  CSIDL_SYSTEM = 37_u32
  CSIDL_PROGRAM_FILES = 38_u32
  CSIDL_MYPICTURES = 39_u32
  CSIDL_PROFILE = 40_u32
  CSIDL_SYSTEMX86 = 41_u32
  CSIDL_PROGRAM_FILESX86 = 42_u32
  CSIDL_PROGRAM_FILES_COMMON = 43_u32
  CSIDL_PROGRAM_FILES_COMMONX86 = 44_u32
  CSIDL_COMMON_TEMPLATES = 45_u32
  CSIDL_COMMON_DOCUMENTS = 46_u32
  CSIDL_COMMON_ADMINTOOLS = 47_u32
  CSIDL_ADMINTOOLS = 48_u32
  CSIDL_CONNECTIONS = 49_u32
  CSIDL_COMMON_MUSIC = 53_u32
  CSIDL_COMMON_PICTURES = 54_u32
  CSIDL_COMMON_VIDEO = 55_u32
  CSIDL_RESOURCES = 56_u32
  CSIDL_RESOURCES_LOCALIZED = 57_u32
  CSIDL_COMMON_OEM_LINKS = 58_u32
  CSIDL_CDBURN_AREA = 59_u32
  CSIDL_COMPUTERSNEARME = 61_u32
  CSIDL_FLAG_CREATE = 32768_u32
  CSIDL_FLAG_DONT_VERIFY = 16384_u32
  CSIDL_FLAG_DONT_UNEXPAND = 8192_u32
  CSIDL_FLAG_NO_ALIAS = 4096_u32
  CSIDL_FLAG_PER_USER_INIT = 2048_u32
  CSIDL_FLAG_MASK = 65280_u32
  FCS_READ = 1_u32
  FCS_FORCEWRITE = 2_u32
  FCS_FLAG_DRAGDROP = 2_u32
  FCSM_VIEWID = 1_u32
  FCSM_WEBVIEWTEMPLATE = 2_u32
  FCSM_INFOTIP = 4_u32
  FCSM_CLSID = 8_u32
  FCSM_ICONFILE = 16_u32
  FCSM_LOGO = 32_u32
  FCSM_FLAGS = 64_u32
  BIF_RETURNONLYFSDIRS = 1_u32
  BIF_DONTGOBELOWDOMAIN = 2_u32
  BIF_STATUSTEXT = 4_u32
  BIF_RETURNFSANCESTORS = 8_u32
  BIF_EDITBOX = 16_u32
  BIF_VALIDATE = 32_u32
  BIF_NEWDIALOGSTYLE = 64_u32
  BIF_BROWSEINCLUDEURLS = 128_u32
  BIF_UAHINT = 256_u32
  BIF_NONEWFOLDERBUTTON = 512_u32
  BIF_NOTRANSLATETARGETS = 1024_u32
  BIF_BROWSEFORCOMPUTER = 4096_u32
  BIF_BROWSEFORPRINTER = 8192_u32
  BIF_BROWSEINCLUDEFILES = 16384_u32
  BIF_SHAREABLE = 32768_u32
  BIF_BROWSEFILEJUNCTIONS = 65536_u32
  BFFM_INITIALIZED = 1_u32
  BFFM_SELCHANGED = 2_u32
  BFFM_VALIDATEFAILEDA = 3_u32
  BFFM_VALIDATEFAILEDW = 4_u32
  BFFM_IUNKNOWN = 5_u32
  BFFM_SETSTATUSTEXTA = 1124_u32
  BFFM_ENABLEOK = 1125_u32
  BFFM_SETSELECTIONA = 1126_u32
  BFFM_SETSELECTIONW = 1127_u32
  BFFM_SETSTATUSTEXTW = 1128_u32
  BFFM_SETOKTEXT = 1129_u32
  BFFM_SETEXPANDED = 1130_u32
  BFFM_SETSTATUSTEXT = 1128_u32
  BFFM_SETSELECTION = 1127_u32
  BFFM_VALIDATEFAILED = 4_u32
  CMDID_INTSHORTCUTCREATE = 1_i32
  PROGDLG_NORMAL = 0_u32
  PROGDLG_MODAL = 1_u32
  PROGDLG_AUTOTIME = 2_u32
  PROGDLG_NOTIME = 4_u32
  PROGDLG_NOMINIMIZE = 8_u32
  PROGDLG_NOPROGRESSBAR = 16_u32
  PROGDLG_MARQUEEPROGRESS = 32_u32
  PROGDLG_NOCANCEL = 64_u32
  PDTIMER_RESET = 1_u32
  PDTIMER_PAUSE = 2_u32
  PDTIMER_RESUME = 3_u32
  COMPONENT_TOP = 1073741823_u32
  COMP_TYPE_HTMLDOC = 0_u32
  COMP_TYPE_PICTURE = 1_u32
  COMP_TYPE_WEBSITE = 2_u32
  COMP_TYPE_CONTROL = 3_u32
  COMP_TYPE_CFHTML = 4_u32
  COMP_TYPE_MAX = 4_u32
  IS_NORMAL = 1_u32
  IS_FULLSCREEN = 2_u32
  IS_SPLIT = 4_u32
  AD_APPLY_SAVE = 1_u32
  AD_APPLY_HTMLGEN = 2_u32
  AD_APPLY_REFRESH = 4_u32
  AD_APPLY_FORCE = 8_u32
  AD_APPLY_BUFFERED_REFRESH = 16_u32
  AD_APPLY_DYNAMICREFRESH = 32_u32
  AD_GETWP_BMP = 0_u32
  AD_GETWP_IMAGE = 1_u32
  AD_GETWP_LAST_APPLIED = 2_u32
  WPSTYLE_CENTER = 0_u32
  WPSTYLE_TILE = 1_u32
  WPSTYLE_STRETCH = 2_u32
  WPSTYLE_KEEPASPECT = 3_u32
  WPSTYLE_CROPTOFIT = 4_u32
  WPSTYLE_SPAN = 5_u32
  WPSTYLE_MAX = 6_u32
  COMP_ELEM_TYPE = 1_u32
  COMP_ELEM_CHECKED = 2_u32
  COMP_ELEM_DIRTY = 4_u32
  COMP_ELEM_NOSCROLL = 8_u32
  COMP_ELEM_POS_LEFT = 16_u32
  COMP_ELEM_POS_TOP = 32_u32
  COMP_ELEM_SIZE_WIDTH = 64_u32
  COMP_ELEM_SIZE_HEIGHT = 128_u32
  COMP_ELEM_POS_ZINDEX = 256_u32
  COMP_ELEM_SOURCE = 512_u32
  COMP_ELEM_FRIENDLYNAME = 1024_u32
  COMP_ELEM_SUBSCRIBEDURL = 2048_u32
  COMP_ELEM_ORIGINAL_CSI = 4096_u32
  COMP_ELEM_RESTORED_CSI = 8192_u32
  COMP_ELEM_CURITEMSTATE = 16384_u32
  ADDURL_SILENT = 1_u32
  COMPONENT_DEFAULT_LEFT = 65535_u32
  COMPONENT_DEFAULT_TOP = 65535_u32
  MAX_COLUMN_NAME_LEN = 80_u32
  MAX_COLUMN_DESC_LEN = 128_u32
  DVASPECT_SHORTNAME = 2_u32
  DVASPECT_COPY = 3_u32
  DVASPECT_LINK = 4_u32
  SHCNEE_ORDERCHANGED = 2_i32
  SHCNEE_MSI_CHANGE = 4_i32
  SHCNEE_MSI_UNINSTALL = 5_i32
  NUM_POINTS = 3_u32
  CABINETSTATE_VERSION = 2_u32
  PIFNAMESIZE = 30_u32
  PIFSTARTLOCSIZE = 63_u32
  PIFDEFPATHSIZE = 64_u32
  PIFPARAMSSIZE = 64_u32
  PIFSHPROGSIZE = 64_u32
  PIFSHDATASIZE = 64_u32
  PIFDEFFILESIZE = 80_u32
  PIFMAXFILEPATH = 260_u32
  QCMINFO_PLACE_BEFORE = 0_u32
  QCMINFO_PLACE_AFTER = 1_u32
  SFVSOC_INVALIDATE_ALL = 1_u32
  SFVSOC_NOSCROLL = 2_u32
  SHELLSTATEVERSION_IE4 = 9_u32
  SHELLSTATEVERSION_WIN2K = 10_u32
  SHPPFW_NONE = 0_u32
  SHPPFW_DIRCREATE = 1_u32
  SHPPFW_ASKDIRCREATE = 2_u32
  SHPPFW_IGNOREFILENAME = 4_u32
  SHPPFW_NOWRITECHECK = 8_u32
  SHPPFW_MEDIACHECKONLY = 16_u32
  CMF_NORMAL = 0_u32
  CMF_DEFAULTONLY = 1_u32
  CMF_VERBSONLY = 2_u32
  CMF_EXPLORE = 4_u32
  CMF_NOVERBS = 8_u32
  CMF_CANRENAME = 16_u32
  CMF_NODEFAULT = 32_u32
  CMF_INCLUDESTATIC = 64_u32
  CMF_ITEMMENU = 128_u32
  CMF_EXTENDEDVERBS = 256_u32
  CMF_DISABLEDVERBS = 512_u32
  CMF_ASYNCVERBSTATE = 1024_u32
  CMF_OPTIMIZEFORINVOKE = 2048_u32
  CMF_SYNCCASCADEMENU = 4096_u32
  CMF_DONOTPICKDEFAULT = 8192_u32
  CMF_RESERVED = 4294901760_u32
  GCS_VERBA = 0_u32
  GCS_HELPTEXTA = 1_u32
  GCS_VALIDATEA = 2_u32
  GCS_VERBW = 4_u32
  GCS_HELPTEXTW = 5_u32
  GCS_VALIDATEW = 6_u32
  GCS_VERBICONW = 20_u32
  GCS_UNICODE = 4_u32
  GCS_VERB = 4_u32
  GCS_HELPTEXT = 5_u32
  GCS_VALIDATE = 6_u32
  CMIC_MASK_SHIFT_DOWN = 268435456_u32
  CMIC_MASK_CONTROL_DOWN = 1073741824_u32
  CMIC_MASK_PTINVOKE = 536870912_u32
  IRTIR_TASK_NOT_RUNNING = 0_u32
  IRTIR_TASK_RUNNING = 1_u32
  IRTIR_TASK_SUSPENDED = 2_u32
  IRTIR_TASK_PENDING = 3_u32
  IRTIR_TASK_FINISHED = 4_u32
  ITSAT_DEFAULT_PRIORITY = 268435456_u32
  ITSAT_MAX_PRIORITY = 2147483647_u32
  ITSAT_MIN_PRIORITY = 0_u32
  ITSSFLAG_COMPLETE_ON_DESTROY = 0_u32
  ITSSFLAG_KILL_ON_DESTROY = 1_u32
  ITSSFLAG_FLAGS_MASK = 3_u32
  CSIDL_FLAG_PFTI_TRACKTARGET = 16384_u32
  SHCIDS_ALLFIELDS = -2147483648_i32
  SHCIDS_CANONICALONLY = 268435456_i32
  SHCIDS_BITMASK = -65536_i32
  SHCIDS_COLUMNMASK = 65535_i32
  SFGAO_CANCOPY = 1_u32
  SFGAO_CANMOVE = 2_u32
  SFGAO_CANLINK = 4_u32
  SFGAO_STORAGE = 8_i32
  SFGAO_CANRENAME = 16_i32
  SFGAO_CANDELETE = 32_i32
  SFGAO_HASPROPSHEET = 64_i32
  SFGAO_DROPTARGET = 256_i32
  SFGAO_CAPABILITYMASK = 375_i32
  SFGAO_PLACEHOLDER = 2048_i32
  SFGAO_SYSTEM = 4096_i32
  SFGAO_ENCRYPTED = 8192_i32
  SFGAO_ISSLOW = 16384_i32
  SFGAO_GHOSTED = 32768_i32
  SFGAO_LINK = 65536_i32
  SFGAO_SHARE = 131072_i32
  SFGAO_READONLY = 262144_i32
  SFGAO_HIDDEN = 524288_i32
  SFGAO_DISPLAYATTRMASK = 1032192_i32
  SFGAO_FILESYSANCESTOR = 268435456_i32
  SFGAO_FOLDER = 536870912_i32
  SFGAO_FILESYSTEM = 1073741824_i32
  SFGAO_HASSUBFOLDER = -2147483648_i32
  SFGAO_CONTENTSMASK = -2147483648_i32
  SFGAO_VALIDATE = 16777216_i32
  SFGAO_REMOVABLE = 33554432_i32
  SFGAO_COMPRESSED = 67108864_i32
  SFGAO_BROWSABLE = 134217728_i32
  SFGAO_NONENUMERATED = 1048576_i32
  SFGAO_NEWCONTENT = 2097152_i32
  SFGAO_CANMONIKER = 4194304_i32
  SFGAO_HASSTORAGE = 4194304_i32
  SFGAO_STREAM = 4194304_i32
  SFGAO_STORAGEANCESTOR = 8388608_i32
  SFGAO_STORAGECAPMASK = 1891958792_i32
  SFGAO_PKEYSFGAOMASK = -2130427904_i32
  BIND_INTERRUPTABLE = 4294967295_u32
  CDBOSC_SETFOCUS = 0_u32
  CDBOSC_KILLFOCUS = 1_u32
  CDBOSC_SELCHANGE = 2_u32
  CDBOSC_RENAME = 3_u32
  CDBOSC_STATECHANGE = 4_u32
  CDB2N_CONTEXTMENU_DONE = 1_u32
  CDB2N_CONTEXTMENU_START = 2_u32
  CDB2GVF_SHOWALLFILES = 1_u32
  CDB2GVF_ISFILESAVE = 2_u32
  CDB2GVF_ALLOWPREVIEWPANE = 4_u32
  CDB2GVF_NOSELECTVERB = 8_u32
  CDB2GVF_NOINCLUDEITEM = 16_u32
  CDB2GVF_ISFOLDERPICKER = 32_u32
  CDB2GVF_ADDSHIELD = 64_u32
  SBSP_DEFBROWSER = 0_u32
  SBSP_SAMEBROWSER = 1_u32
  SBSP_NEWBROWSER = 2_u32
  SBSP_DEFMODE = 0_u32
  SBSP_OPENMODE = 16_u32
  SBSP_EXPLOREMODE = 32_u32
  SBSP_HELPMODE = 64_u32
  SBSP_NOTRANSFERHIST = 128_u32
  SBSP_ABSOLUTE = 0_u32
  SBSP_RELATIVE = 4096_u32
  SBSP_PARENT = 8192_u32
  SBSP_NAVIGATEBACK = 16384_u32
  SBSP_NAVIGATEFORWARD = 32768_u32
  SBSP_ALLOW_AUTONAVIGATE = 65536_u32
  SBSP_KEEPSAMETEMPLATE = 131072_u32
  SBSP_KEEPWORDWHEELTEXT = 262144_u32
  SBSP_ACTIVATE_NOFOCUS = 524288_u32
  SBSP_CREATENOHISTORY = 1048576_u32
  SBSP_PLAYNOSOUND = 2097152_u32
  SBSP_CALLERUNTRUSTED = 8388608_u32
  SBSP_TRUSTFIRSTDOWNLOAD = 16777216_u32
  SBSP_UNTRUSTEDFORDOWNLOAD = 33554432_u32
  SBSP_NOAUTOSELECT = 67108864_u32
  SBSP_WRITENOHISTORY = 134217728_u32
  SBSP_TRUSTEDFORACTIVEX = 268435456_u32
  SBSP_FEEDNAVIGATION = 536870912_u32
  SBSP_REDIRECT = 1073741824_u32
  SBSP_INITIATEDBYHLINKFRAME = 2147483648_u32
  FCW_STATUS = 1_u32
  FCW_TOOLBAR = 2_u32
  FCW_TREE = 3_u32
  FCW_INTERNETBAR = 6_u32
  FCW_PROGRESS = 8_u32
  FCT_MERGE = 1_u32
  FCT_CONFIGABLE = 2_u32
  FCT_ADDTOEND = 4_u32
  ARCONTENT_AUTORUNINF = 2_u32
  ARCONTENT_AUDIOCD = 4_u32
  ARCONTENT_DVDMOVIE = 8_u32
  ARCONTENT_BLANKCD = 16_u32
  ARCONTENT_BLANKDVD = 32_u32
  ARCONTENT_UNKNOWNCONTENT = 64_u32
  ARCONTENT_AUTOPLAYPIX = 128_u32
  ARCONTENT_AUTOPLAYMUSIC = 256_u32
  ARCONTENT_AUTOPLAYVIDEO = 512_u32
  ARCONTENT_VCD = 1024_u32
  ARCONTENT_SVCD = 2048_u32
  ARCONTENT_DVDAUDIO = 4096_u32
  ARCONTENT_BLANKBD = 8192_u32
  ARCONTENT_BLURAY = 16384_u32
  ARCONTENT_CAMERASTORAGE = 32768_u32
  ARCONTENT_CUSTOMEVENT = 65536_u32
  ARCONTENT_NONE = 0_u32
  ARCONTENT_MASK = 131070_u32
  ARCONTENT_PHASE_UNKNOWN = 0_u32
  ARCONTENT_PHASE_PRESNIFF = 268435456_u32
  ARCONTENT_PHASE_SNIFFING = 536870912_u32
  ARCONTENT_PHASE_FINAL = 1073741824_u32
  ARCONTENT_PHASE_MASK = 1879048192_u32
  IEI_PRIORITY_MAX = 2147483647_u32
  IEI_PRIORITY_MIN = 0_u32
  IEIT_PRIORITY_NORMAL = 268435456_u32
  IEIFLAG_ASYNC = 1_u32
  IEIFLAG_CACHE = 2_u32
  IEIFLAG_ASPECT = 4_u32
  IEIFLAG_OFFLINE = 8_u32
  IEIFLAG_GLEAM = 16_u32
  IEIFLAG_SCREEN = 32_u32
  IEIFLAG_ORIGSIZE = 64_u32
  IEIFLAG_NOSTAMP = 128_u32
  IEIFLAG_NOBORDER = 256_u32
  IEIFLAG_QUALITY = 512_u32
  IEIFLAG_REFRESH = 1024_u32
  DBIM_MINSIZE = 1_u32
  DBIM_MAXSIZE = 2_u32
  DBIM_INTEGRAL = 4_u32
  DBIM_ACTUAL = 8_u32
  DBIM_TITLE = 16_u32
  DBIM_MODEFLAGS = 32_u32
  DBIM_BKCOLOR = 64_u32
  DBIMF_NORMAL = 0_u32
  DBIMF_FIXED = 1_u32
  DBIMF_FIXEDBMP = 4_u32
  DBIMF_VARIABLEHEIGHT = 8_u32
  DBIMF_UNDELETEABLE = 16_u32
  DBIMF_DEBOSSED = 32_u32
  DBIMF_BKCOLOR = 64_u32
  DBIMF_USECHEVRON = 128_u32
  DBIMF_BREAK = 256_u32
  DBIMF_ADDTOFRONT = 512_u32
  DBIMF_TOPALIGN = 1024_u32
  DBIMF_NOGRIPPER = 2048_u32
  DBIMF_ALWAYSGRIPPER = 4096_u32
  DBIMF_NOMARGINS = 8192_u32
  DBIF_VIEWMODE_NORMAL = 0_u32
  DBIF_VIEWMODE_VERTICAL = 1_u32
  DBIF_VIEWMODE_FLOATING = 2_u32
  DBIF_VIEWMODE_TRANSPARENT = 4_u32
  DBPC_SELECTFIRST = 4294967295_u32
  THBN_CLICKED = 6144_u32
  FOFX_NOSKIPJUNCTIONS = 65536_u32
  FOFX_PREFERHARDLINK = 131072_u32
  FOFX_SHOWELEVATIONPROMPT = 262144_u32
  FOFX_RECYCLEONDELETE = 524288_u32
  FOFX_EARLYFAILURE = 1048576_u32
  FOFX_PRESERVEFILEEXTENSIONS = 2097152_u32
  FOFX_KEEPNEWERFILE = 4194304_u32
  FOFX_NOCOPYHOOKS = 8388608_u32
  FOFX_NOMINIMIZEBOX = 16777216_u32
  FOFX_MOVEACLSACROSSVOLUMES = 33554432_u32
  FOFX_DONTDISPLAYSOURCEPATH = 67108864_u32
  FOFX_DONTDISPLAYDESTPATH = 134217728_u32
  FOFX_REQUIREELEVATION = 268435456_u32
  FOFX_ADDUNDORECORD = 536870912_u32
  FOFX_COPYASDOWNLOAD = 1073741824_u32
  FOFX_DONTDISPLAYLOCATIONS = 2147483648_u32
  BSIM_STATE = 1_u32
  BSIM_STYLE = 2_u32
  BSSF_VISIBLE = 1_u32
  BSSF_NOTITLE = 2_u32
  BSSF_UNDELETEABLE = 4096_u32
  BSIS_AUTOGRIPPER = 0_u32
  BSIS_NOGRIPPER = 1_u32
  BSIS_ALWAYSGRIPPER = 2_u32
  BSIS_LEFTALIGN = 4_u32
  BSIS_SINGLECLICK = 8_u32
  BSIS_NOCONTEXTMENU = 16_u32
  BSIS_NODROPTARGET = 32_u32
  BSIS_NOCAPTION = 64_u32
  BSIS_PREFERNOLINEBREAK = 128_u32
  BSIS_LOCKED = 256_u32
  BSIS_PRESERVEORDERDURINGLAYOUT = 512_u32
  BSIS_FIXEDORDER = 1024_u32
  OF_CAP_CANSWITCHTO = 1_u32
  OF_CAP_CANCLOSE = 2_u32
  SMDM_SHELLFOLDER = 1_u32
  SMDM_HMENU = 2_u32
  SMDM_TOOLBAR = 4_u32
  SMC_INITMENU = 1_u32
  SMC_CREATE = 2_u32
  SMC_EXITMENU = 3_u32
  SMC_GETINFO = 5_u32
  SMC_GETSFINFO = 6_u32
  SMC_GETOBJECT = 7_u32
  SMC_GETSFOBJECT = 8_u32
  SMC_SFEXEC = 9_u32
  SMC_SFSELECTITEM = 10_u32
  SMC_REFRESH = 16_u32
  SMC_DEMOTE = 17_u32
  SMC_PROMOTE = 18_u32
  SMC_DEFAULTICON = 22_u32
  SMC_NEWITEM = 23_u32
  SMC_CHEVRONEXPAND = 25_u32
  SMC_DISPLAYCHEVRONTIP = 42_u32
  SMC_SETSFOBJECT = 45_u32
  SMC_SHCHANGENOTIFY = 46_u32
  SMC_CHEVRONGETTIP = 47_u32
  SMC_SFDDRESTRICTED = 48_u32
  SMC_SFEXEC_MIDDLE = 49_u32
  SMC_GETAUTOEXPANDSTATE = 65_u32
  SMC_AUTOEXPANDCHANGE = 66_u32
  SMC_GETCONTEXTMENUMODIFIER = 67_u32
  SMC_GETBKCONTEXTMENU = 68_u32
  SMC_OPEN = 69_u32
  SMAE_EXPANDED = 1_u32
  SMAE_CONTRACTED = 2_u32
  SMAE_USER = 4_u32
  SMAE_VALID = 7_u32
  SMINIT_DEFAULT = 0_u32
  SMINIT_RESTRICT_DRAGDROP = 2_u32
  SMINIT_TOPLEVEL = 4_u32
  SMINIT_CACHED = 16_u32
  SMINIT_AUTOEXPAND = 256_u32
  SMINIT_AUTOTOOLTIP = 512_u32
  SMINIT_DROPONCONTAINER = 1024_u32
  SMINIT_VERTICAL = 268435456_u32
  SMINIT_HORIZONTAL = 536870912_u32
  SMSET_TOP = 268435456_u32
  SMSET_BOTTOM = 536870912_u32
  SMSET_DONTOWN = 1_u32
  SMINV_REFRESH = 1_u32
  SMINV_ID = 8_u32
  E_PREVIEWHANDLER_DRM_FAIL = -2042494975_i32
  E_PREVIEWHANDLER_NOAUTH = -2042494974_i32
  E_PREVIEWHANDLER_NOTFOUND = -2042494973_i32
  E_PREVIEWHANDLER_CORRUPT = -2042494972_i32
  SID_URLExecutionContext = "fb5f8ebc-bbb6-4d10-a461-777291a09030"
  SID_LaunchSourceViewSizePreference = "80605492-67d9-414f-af89-a1cdf1242bc1"
  SID_LaunchTargetViewSizePreference = "26db2472-b7b7-406b-9702-730a4e20d3bf"
  SID_LaunchSourceAppUserModelId = "2ce78010-74db-48bc-9c6a-10f372495723"
  SID_ShellExecuteNamedPropertyStore = "eb84ada2-00ff-4992-8324-ed5ce061cb29"
  ISIOI_ICONFILE = 1_u32
  ISIOI_ICONINDEX = 2_u32
  ABM_NEW = 0_u32
  ABM_REMOVE = 1_u32
  ABM_QUERYPOS = 2_u32
  ABM_SETPOS = 3_u32
  ABM_GETSTATE = 4_u32
  ABM_GETTASKBARPOS = 5_u32
  ABM_ACTIVATE = 6_u32
  ABM_GETAUTOHIDEBAR = 7_u32
  ABM_SETAUTOHIDEBAR = 8_u32
  ABM_WINDOWPOSCHANGED = 9_u32
  ABM_SETSTATE = 10_u32
  ABM_GETAUTOHIDEBAREX = 11_u32
  ABM_SETAUTOHIDEBAREX = 12_u32
  ABN_STATECHANGE = 0_u32
  ABN_POSCHANGED = 1_u32
  ABN_FULLSCREENAPP = 2_u32
  ABN_WINDOWARRANGE = 3_u32
  ABS_AUTOHIDE = 1_u32
  ABS_ALWAYSONTOP = 2_u32
  ABE_LEFT = 0_u32
  ABE_TOP = 1_u32
  ABE_RIGHT = 2_u32
  ABE_BOTTOM = 3_u32
  FO_MOVE = 1_u32
  FO_COPY = 2_u32
  FO_DELETE = 3_u32
  FO_RENAME = 4_u32
  FOF_MULTIDESTFILES = 1_u32
  FOF_CONFIRMMOUSE = 2_u32
  FOF_SILENT = 4_u32
  FOF_RENAMEONCOLLISION = 8_u32
  FOF_NOCONFIRMATION = 16_u32
  FOF_WANTMAPPINGHANDLE = 32_u32
  FOF_ALLOWUNDO = 64_u32
  FOF_FILESONLY = 128_u32
  FOF_SIMPLEPROGRESS = 256_u32
  FOF_NOCONFIRMMKDIR = 512_u32
  FOF_NOERRORUI = 1024_u32
  FOF_NOCOPYSECURITYATTRIBS = 2048_u32
  FOF_NORECURSION = 4096_u32
  FOF_NO_CONNECTED_ELEMENTS = 8192_u32
  FOF_WANTNUKEWARNING = 16384_u32
  FOF_NORECURSEREPARSE = 32768_u32
  PO_DELETE = 19_u32
  PO_RENAME = 20_u32
  PO_PORTCHANGE = 32_u32
  PO_REN_PORT = 52_u32
  SE_ERR_FNF = 2_u32
  SE_ERR_PNF = 3_u32
  SE_ERR_ACCESSDENIED = 5_u32
  SE_ERR_OOM = 8_u32
  SE_ERR_DLLNOTFOUND = 32_u32
  SE_ERR_SHARE = 26_u32
  SE_ERR_ASSOCINCOMPLETE = 27_u32
  SE_ERR_DDETIMEOUT = 28_u32
  SE_ERR_DDEFAIL = 29_u32
  SE_ERR_DDEBUSY = 30_u32
  SE_ERR_NOASSOC = 31_u32
  SEE_MASK_DEFAULT = 0_u32
  SEE_MASK_CLASSNAME = 1_u32
  SEE_MASK_CLASSKEY = 3_u32
  SEE_MASK_IDLIST = 4_u32
  SEE_MASK_INVOKEIDLIST = 12_u32
  SEE_MASK_ICON = 16_u32
  SEE_MASK_HOTKEY = 32_u32
  SEE_MASK_NOCLOSEPROCESS = 64_u32
  SEE_MASK_CONNECTNETDRV = 128_u32
  SEE_MASK_NOASYNC = 256_u32
  SEE_MASK_FLAG_DDEWAIT = 256_u32
  SEE_MASK_DOENVSUBST = 512_u32
  SEE_MASK_FLAG_NO_UI = 1024_u32
  SEE_MASK_UNICODE = 16384_u32
  SEE_MASK_NO_CONSOLE = 32768_u32
  SEE_MASK_ASYNCOK = 1048576_u32
  SEE_MASK_HMONITOR = 2097152_u32
  SEE_MASK_NOZONECHECKS = 8388608_u32
  SEE_MASK_NOQUERYCLASSSTORE = 16777216_u32
  SEE_MASK_WAITFORINPUTIDLE = 33554432_u32
  SEE_MASK_FLAG_LOG_USAGE = 67108864_u32
  SEE_MASK_FLAG_HINST_IS_SITE = 134217728_u32
  SHERB_NOCONFIRMATION = 1_u32
  SHERB_NOPROGRESSUI = 2_u32
  SHERB_NOSOUND = 4_u32
  NIN_SELECT = 1024_u32
  NINF_KEY = 1_u32
  NIN_BALLOONSHOW = 1026_u32
  NIN_BALLOONHIDE = 1027_u32
  NIN_BALLOONTIMEOUT = 1028_u32
  NIN_BALLOONUSERCLICK = 1029_u32
  NIN_POPUPOPEN = 1030_u32
  NIN_POPUPCLOSE = 1031_u32
  NOTIFYICON_VERSION = 3_u32
  NOTIFYICON_VERSION_4 = 4_u32
  NIS_HIDDEN = 1_u32
  NIS_SHAREDICON = 2_u32
  NIIF_NONE = 0_u32
  NIIF_INFO = 1_u32
  NIIF_WARNING = 2_u32
  NIIF_ERROR = 3_u32
  NIIF_USER = 4_u32
  NIIF_ICON_MASK = 15_u32
  NIIF_NOSOUND = 16_u32
  NIIF_LARGE_ICON = 32_u32
  NIIF_RESPECT_QUIET_TIME = 128_u32
  SHGSI_ICONLOCATION = 0_u32
  SHGNLI_PIDL = 1_u64
  SHGNLI_PREFIXNAME = 2_u64
  SHGNLI_NOUNIQUE = 4_u64
  SHGNLI_NOLNK = 8_u64
  SHGNLI_NOLOCNAME = 16_u64
  SHGNLI_USEURLEXT = 32_u64
  PRINTACTION_OPEN = 0_u32
  PRINTACTION_PROPERTIES = 1_u32
  PRINTACTION_NETINSTALL = 2_u32
  PRINTACTION_NETINSTALLLINK = 3_u32
  PRINTACTION_TESTPAGE = 4_u32
  PRINTACTION_OPENNETPRN = 5_u32
  PRINTACTION_DOCUMENTDEFAULTS = 6_u32
  PRINTACTION_SERVERPROPERTIES = 7_u32
  PRINT_PROP_FORCE_NAME = 1_u32
  OFFLINE_STATUS_LOCAL = 1_u32
  OFFLINE_STATUS_REMOTE = 2_u32
  OFFLINE_STATUS_INCOMPLETE = 4_u32
  SHIL_LARGE = 0_u32
  SHIL_SMALL = 1_u32
  SHIL_EXTRALARGE = 2_u32
  SHIL_SYSSMALL = 3_u32
  SHIL_JUMBO = 4_u32
  SHIL_LAST = 4_u32
  NCM_GETADDRESS = 1025_u32
  NCM_SETALLOWTYPE = 1026_u32
  NCM_GETALLOWTYPE = 1027_u32
  NCM_DISPLAYERRORTIP = 1028_u32
  CREDENTIAL_PROVIDER_NO_DEFAULT = 4294967295_u32
  Identity_LocalUserProvider = "a198529b-730f-4089-b646-a12557f5665e"
  MAX_SYNCMGR_ID = 64_u32
  MAX_SYNCMGR_PROGRESSTEXT = 260_u32
  MAX_SYNCMGR_NAME = 128_u32
  STIF_DEFAULT = 0_i32
  STIF_SUPPORT_HEX = 1_i32
  GCT_INVALID = 0_u32
  GCT_LFNCHAR = 1_u32
  GCT_SHORTCHAR = 2_u32
  GCT_WILD = 4_u32
  GCT_SEPARATOR = 8_u32
  PMSF_NORMAL = 0_u32
  PMSF_MULTIPLE = 1_u32
  PMSF_DONT_STRIP_SPACES = 65536_u32
  URL_UNESCAPE = 268435456_u32
  URL_ESCAPE_UNSAFE = 536870912_u32
  URL_PLUGGABLE_PROTOCOL = 1073741824_u32
  URL_WININET_COMPATIBILITY = 2147483648_u32
  URL_DONT_ESCAPE_EXTRA_INFO = 33554432_u32
  URL_DONT_UNESCAPE_EXTRA_INFO = 33554432_u32
  URL_BROWSER_MODE = 33554432_u32
  URL_ESCAPE_SPACES_ONLY = 67108864_u32
  URL_DONT_SIMPLIFY = 134217728_u32
  URL_NO_META = 134217728_u32
  URL_UNESCAPE_INPLACE = 1048576_u32
  URL_CONVERT_IF_DOSPATH = 2097152_u32
  URL_UNESCAPE_HIGH_ANSI_ONLY = 4194304_u32
  URL_INTERNAL_PATH = 8388608_u32
  URL_FILE_USE_PATHURL = 65536_u32
  URL_DONT_UNESCAPE = 131072_u32
  URL_ESCAPE_AS_UTF8 = 262144_u32
  URL_UNESCAPE_AS_UTF8 = 262144_u32
  URL_ESCAPE_ASCII_URI_COMPONENT = 524288_u32
  URL_UNESCAPE_URI_COMPONENT = 262144_u32
  URL_ESCAPE_PERCENT = 4096_u32
  URL_ESCAPE_SEGMENT_ONLY = 8192_u32
  URL_PARTFLAG_KEEPSCHEME = 1_u32
  URL_APPLY_DEFAULT = 1_u32
  URL_APPLY_GUESSSCHEME = 2_u32
  URL_APPLY_GUESSFILE = 4_u32
  URL_APPLY_FORCEAPPLY = 8_u32
  SRRF_RT_REG_NONE = 1_u32
  SRRF_RT_REG_SZ = 2_u32
  SRRF_RT_REG_EXPAND_SZ = 4_u32
  SRRF_RT_REG_BINARY = 8_u32
  SRRF_RT_REG_DWORD = 16_u32
  SRRF_RT_REG_MULTI_SZ = 32_u32
  SRRF_RT_REG_QWORD = 64_u32
  SRRF_RT_ANY = 65535_u32
  SRRF_RM_ANY = 0_u32
  SRRF_RM_NORMAL = 65536_u32
  SRRF_RM_SAFE = 131072_u32
  SRRF_RM_SAFENETWORK = 262144_u32
  SRRF_NOEXPAND = 268435456_u32
  SRRF_ZEROONFAILURE = 536870912_u32
  SRRF_NOVIRT = 1073741824_u32
  SHREGSET_HKCU = 1_u32
  SHREGSET_FORCE_HKCU = 2_u32
  SHREGSET_HKLM = 4_u32
  SHREGSET_FORCE_HKLM = 8_u32
  SPMODE_SHELL = 1_u32
  SPMODE_DEBUGOUT = 2_u32
  SPMODE_TEST = 4_u32
  SPMODE_BROWSER = 8_u32
  SPMODE_FLUSH = 16_u32
  SPMODE_EVENT = 32_u32
  SPMODE_MSVM = 64_u32
  SPMODE_FORMATTEXT = 128_u32
  SPMODE_PROFILE = 256_u32
  SPMODE_DEBUGBREAK = 512_u32
  SPMODE_MSGTRACE = 1024_u32
  SPMODE_PERFTAGS = 2048_u32
  SPMODE_MEMWATCH = 4096_u32
  SPMODE_DBMON = 8192_u32
  SPMODE_MULTISTOP = 16384_u32
  SPMODE_EVENTTRACE = 32768_u32
  SHGVSPB_PERUSER = 1_u32
  SHGVSPB_ALLUSERS = 2_u32
  SHGVSPB_PERFOLDER = 4_u32
  SHGVSPB_ALLFOLDERS = 8_u32
  SHGVSPB_INHERIT = 16_u32
  SHGVSPB_ROAM = 32_u32
  SHGVSPB_NOAUTODEFAULTS = 2147483648_u32
  FDTF_SHORTTIME = 1_u32
  FDTF_SHORTDATE = 2_u32
  FDTF_LONGDATE = 4_u32
  FDTF_LONGTIME = 8_u32
  FDTF_RELATIVE = 16_u32
  FDTF_LTRDATE = 256_u32
  FDTF_RTLDATE = 512_u32
  FDTF_NOAUTOREADINGORDER = 1024_u32
  PLATFORM_UNKNOWN = 0_u32
  PLATFORM_IE3 = 1_u32
  PLATFORM_BROWSERONLY = 1_u32
  PLATFORM_INTEGRATED = 2_u32
  ILMM_IE4 = 0_u32
  SHACF_DEFAULT = 0_u32
  SHACF_FILESYSTEM = 1_u32
  SHACF_URLHISTORY = 2_u32
  SHACF_URLMRU = 4_u32
  SHACF_USETAB = 8_u32
  SHACF_FILESYS_ONLY = 16_u32
  SHACF_FILESYS_DIRS = 32_u32
  SHACF_VIRTUAL_NAMESPACE = 64_u32
  SHACF_AUTOSUGGEST_FORCE_ON = 268435456_u32
  SHACF_AUTOSUGGEST_FORCE_OFF = 536870912_u32
  SHACF_AUTOAPPEND_FORCE_ON = 1073741824_u32
  SHACF_AUTOAPPEND_FORCE_OFF = 2147483648_u32
  DLLVER_PLATFORM_WINDOWS = 1_u32
  DLLVER_PLATFORM_NT = 2_u32
  DLLVER_MAJOR_MASK = 18446462598732840960_u64
  DLLVER_MINOR_MASK = 281470681743360_u64
  DLLVER_BUILD_MASK = 4294901760_u64
  DLLVER_QFE_MASK = 65535_u64
  WTS_E_FAILEDEXTRACTION = -2147175936_i32
  WTS_E_EXTRACTIONTIMEDOUT = -2147175935_i32
  WTS_E_SURROGATEUNAVAILABLE = -2147175934_i32
  WTS_E_FASTEXTRACTIONNOTSUPPORTED = -2147175933_i32
  WTS_E_DATAFILEUNAVAILABLE = -2147175932_i32
  WTS_E_EXTRACTIONPENDING = -2147175931_i32
  WTS_E_EXTRACTIONBLOCKED = -2147175930_i32
  WTS_E_NOSTORAGEPROVIDERTHUMBNAILHANDLER = -2147175929_i32
  SHIMGDEC_DEFAULT = 0_u32
  SHIMGDEC_THUMBNAIL = 1_u32
  SHIMGDEC_LOADFULL = 2_u32
  E_NOTVALIDFORANIMATEDIMAGE = -2147221503_i32
  S_SYNCMGR_MISSINGITEMS = 262657_i32
  S_SYNCMGR_RETRYSYNC = 262658_i32
  S_SYNCMGR_CANCELITEM = 262659_i32
  S_SYNCMGR_CANCELALL = 262660_i32
  S_SYNCMGR_ITEMDELETED = 262672_i32
  S_SYNCMGR_ENUMITEMS = 262673_i32
  SYNCMGRPROGRESSITEM_STATUSTEXT = 1_u32
  SYNCMGRPROGRESSITEM_STATUSTYPE = 2_u32
  SYNCMGRPROGRESSITEM_PROGVALUE = 4_u32
  SYNCMGRPROGRESSITEM_MAXVALUE = 8_u32
  SYNCMGRLOGERROR_ERRORFLAGS = 1_u32
  SYNCMGRLOGERROR_ERRORID = 2_u32
  SYNCMGRLOGERROR_ITEMID = 4_u32
  SYNCMGRITEM_ITEMFLAGMASK = 127_u32
  MAX_SYNCMGRITEMNAME = 128_u32
  SYNCMGRHANDLERFLAG_MASK = 15_u32
  MAX_SYNCMGRHANDLERNAME = 32_u32
  SYNCMGRREGISTERFLAGS_MASK = 7_u32
  TLOG_BACK = -1_i32
  TLOG_CURRENT = 0_u32
  TLOG_FORE = 1_u32
  TLMENUF_INCLUDECURRENT = 1_u32
  TLMENUF_BACK = 16_u32
  TLMENUF_FORE = 32_u32
  BSF_REGISTERASDROPTARGET = 1_u32
  BSF_THEATERMODE = 2_u32
  BSF_NOLOCALFILEWARNING = 16_u32
  BSF_UISETBYAUTOMATION = 256_u32
  BSF_RESIZABLE = 512_u32
  BSF_CANMAXIMIZE = 1024_u32
  BSF_TOPBROWSER = 2048_u32
  BSF_NAVNOHISTORY = 4096_u32
  BSF_HTMLNAVCANCELED = 8192_u32
  BSF_DONTSHOWNAVCANCELPAGE = 16384_u32
  BSF_SETNAVIGATABLECODEPAGE = 32768_u32
  BSF_DELEGATEDNAVIGATION = 65536_u32
  BSF_TRUSTEDFORACTIVEX = 131072_u32
  BSF_MERGEDMENUS = 262144_u32
  BSF_FEEDNAVIGATION = 524288_u32
  BSF_FEEDSUBSCRIBED = 1048576_u32
  HLNF_CALLERUNTRUSTED = 2097152_u32
  HLNF_TRUSTEDFORACTIVEX = 4194304_u32
  HLNF_DISABLEWINDOWRESTRICTIONS = 8388608_u32
  HLNF_TRUSTFIRSTDOWNLOAD = 16777216_u32
  HLNF_UNTRUSTEDFORDOWNLOAD = 33554432_u32
  SHHLNF_NOAUTOSELECT = 67108864_u32
  SHHLNF_WRITENOHISTORY = 134217728_u32
  HLNF_EXTERNALNAVIGATE = 268435456_u32
  HLNF_ALLOW_AUTONAVIGATE = 536870912_u32
  HLNF_NEWWINDOWSMANAGED = 2147483648_u32
  INTERNET_MAX_PATH_LENGTH = 2048_u32
  INTERNET_MAX_SCHEME_LENGTH = 32_u32
  VIEW_PRIORITY_RESTRICTED = 112_u32
  VIEW_PRIORITY_CACHEHIT = 80_u32
  VIEW_PRIORITY_STALECACHEHIT = 69_u32
  VIEW_PRIORITY_USEASDEFAULT = 67_u32
  VIEW_PRIORITY_SHELLEXT = 64_u32
  VIEW_PRIORITY_CACHEMISS = 48_u32
  VIEW_PRIORITY_INHERIT = 32_u32
  VIEW_PRIORITY_SHELLEXT_ASBACKUP = 21_u32
  VIEW_PRIORITY_DESPERATE = 16_u32
  VIEW_PRIORITY_NONE = 0_u32
  PATHCCH_MAX_CCH = 32768_u32
  IDS_DESCRIPTION = 1_u32
  ID_APP = 100_u32
  DLG_SCRNSAVECONFIGURE = 2003_u32
  MAXFILELEN = 13_u32
  TITLEBARNAMELEN = 40_u32
  APPNAMEBUFFERLEN = 40_u32
  BUFFLEN = 255_u32
  SCRM_VERIFYPW = 32768_u32
  E_FLAGS = -2147217408_i32
  IS_E_EXEC_FAILED = -2147213310_i32
  URL_E_INVALID_SYNTAX = -2147217407_i32
  URL_E_UNREGISTERED_PROTOCOL = -2147217406_i32
  CPLPAGE_MOUSE_BUTTONS = 1_u32
  CPLPAGE_MOUSE_PTRMOTION = 2_u32
  CPLPAGE_MOUSE_WHEEL = 3_u32
  CPLPAGE_KEYBOARD_SPEED = 1_u32
  CPLPAGE_DISPLAY_BACKGROUND = 1_u32
  DISPID_SELECTIONCHANGED = 200_u32
  DISPID_FILELISTENUMDONE = 201_u32
  DISPID_VERBINVOKED = 202_u32
  DISPID_DEFAULTVERBINVOKED = 203_u32
  DISPID_BEGINDRAG = 204_u32
  DISPID_VIEWMODECHANGED = 205_u32
  DISPID_NOITEMSTATE_CHANGED = 206_u32
  DISPID_CONTENTSCHANGED = 207_u32
  DISPID_FOCUSCHANGED = 208_u32
  DISPID_CHECKSTATECHANGED = 209_u32
  DISPID_ORDERCHANGED = 210_u32
  DISPID_VIEWPAINTDONE = 211_u32
  DISPID_COLUMNSCHANGED = 212_u32
  DISPID_CTRLMOUSEWHEEL = 213_u32
  DISPID_SORTDONE = 214_u32
  DISPID_ICONSIZECHANGED = 215_u32
  DISPID_FOLDERCHANGED = 217_u32
  DISPID_FILTERINVOKED = 218_u32
  DISPID_WORDWHEELEDITED = 219_u32
  DISPID_SELECTEDITEMCHANGED = 220_u32
  DISPID_EXPLORERWINDOWREADY = 221_u32
  DISPID_UPDATEIMAGE = 222_u32
  DISPID_INITIALENUMERATIONDONE = 223_u32
  DISPID_ENTERPRISEIDCHANGED = 224_u32
  DISPID_ENTERPRESSED = 200_u32
  DISPID_SEARCHCOMMAND_START = 1_u32
  DISPID_SEARCHCOMMAND_COMPLETE = 2_u32
  DISPID_SEARCHCOMMAND_ABORT = 3_u32
  DISPID_SEARCHCOMMAND_UPDATE = 4_u32
  DISPID_SEARCHCOMMAND_PROGRESSTEXT = 5_u32
  DISPID_SEARCHCOMMAND_ERROR = 6_u32
  DISPID_SEARCHCOMMAND_RESTORE = 7_u32
  DISPID_IADCCTL_DIRTY = 256_u32
  DISPID_IADCCTL_PUBCAT = 257_u32
  DISPID_IADCCTL_SORT = 258_u32
  DISPID_IADCCTL_FORCEX86 = 259_u32
  DISPID_IADCCTL_SHOWPOSTSETUP = 260_u32
  DISPID_IADCCTL_ONDOMAIN = 261_u32
  DISPID_IADCCTL_DEFAULTCAT = 262_u32
  COPYENGINE_S_YES = 2555905_i32
  COPYENGINE_S_NOT_HANDLED = 2555907_i32
  COPYENGINE_S_USER_RETRY = 2555908_i32
  COPYENGINE_S_USER_IGNORED = 2555909_i32
  COPYENGINE_S_MERGE = 2555910_i32
  COPYENGINE_S_DONT_PROCESS_CHILDREN = 2555912_i32
  COPYENGINE_S_ALREADY_DONE = 2555914_i32
  COPYENGINE_S_PENDING = 2555915_i32
  COPYENGINE_S_KEEP_BOTH = 2555916_i32
  COPYENGINE_S_CLOSE_PROGRAM = 2555917_i32
  COPYENGINE_S_COLLISIONRESOLVED = 2555918_i32
  COPYENGINE_S_PROGRESS_PAUSE = 2555919_i32
  COPYENGINE_E_USER_CANCELLED = -2144927744_i32
  COPYENGINE_E_CANCELLED = -2144927743_i32
  COPYENGINE_E_REQUIRES_ELEVATION = -2144927742_i32
  COPYENGINE_E_SAME_FILE = -2144927741_i32
  COPYENGINE_E_DIFF_DIR = -2144927740_i32
  COPYENGINE_E_MANY_SRC_1_DEST = -2144927739_i32
  COPYENGINE_E_DEST_SUBTREE = -2144927735_i32
  COPYENGINE_E_DEST_SAME_TREE = -2144927734_i32
  COPYENGINE_E_FLD_IS_FILE_DEST = -2144927733_i32
  COPYENGINE_E_FILE_IS_FLD_DEST = -2144927732_i32
  COPYENGINE_E_FILE_TOO_LARGE = -2144927731_i32
  COPYENGINE_E_REMOVABLE_FULL = -2144927730_i32
  COPYENGINE_E_DEST_IS_RO_CD = -2144927729_i32
  COPYENGINE_E_DEST_IS_RW_CD = -2144927728_i32
  COPYENGINE_E_DEST_IS_R_CD = -2144927727_i32
  COPYENGINE_E_DEST_IS_RO_DVD = -2144927726_i32
  COPYENGINE_E_DEST_IS_RW_DVD = -2144927725_i32
  COPYENGINE_E_DEST_IS_R_DVD = -2144927724_i32
  COPYENGINE_E_SRC_IS_RO_CD = -2144927723_i32
  COPYENGINE_E_SRC_IS_RW_CD = -2144927722_i32
  COPYENGINE_E_SRC_IS_R_CD = -2144927721_i32
  COPYENGINE_E_SRC_IS_RO_DVD = -2144927720_i32
  COPYENGINE_E_SRC_IS_RW_DVD = -2144927719_i32
  COPYENGINE_E_SRC_IS_R_DVD = -2144927718_i32
  COPYENGINE_E_INVALID_FILES_SRC = -2144927717_i32
  COPYENGINE_E_INVALID_FILES_DEST = -2144927716_i32
  COPYENGINE_E_PATH_TOO_DEEP_SRC = -2144927715_i32
  COPYENGINE_E_PATH_TOO_DEEP_DEST = -2144927714_i32
  COPYENGINE_E_ROOT_DIR_SRC = -2144927713_i32
  COPYENGINE_E_ROOT_DIR_DEST = -2144927712_i32
  COPYENGINE_E_ACCESS_DENIED_SRC = -2144927711_i32
  COPYENGINE_E_ACCESS_DENIED_DEST = -2144927710_i32
  COPYENGINE_E_PATH_NOT_FOUND_SRC = -2144927709_i32
  COPYENGINE_E_PATH_NOT_FOUND_DEST = -2144927708_i32
  COPYENGINE_E_NET_DISCONNECT_SRC = -2144927707_i32
  COPYENGINE_E_NET_DISCONNECT_DEST = -2144927706_i32
  COPYENGINE_E_SHARING_VIOLATION_SRC = -2144927705_i32
  COPYENGINE_E_SHARING_VIOLATION_DEST = -2144927704_i32
  COPYENGINE_E_ALREADY_EXISTS_NORMAL = -2144927703_i32
  COPYENGINE_E_ALREADY_EXISTS_READONLY = -2144927702_i32
  COPYENGINE_E_ALREADY_EXISTS_SYSTEM = -2144927701_i32
  COPYENGINE_E_ALREADY_EXISTS_FOLDER = -2144927700_i32
  COPYENGINE_E_STREAM_LOSS = -2144927699_i32
  COPYENGINE_E_EA_LOSS = -2144927698_i32
  COPYENGINE_E_PROPERTY_LOSS = -2144927697_i32
  COPYENGINE_E_PROPERTIES_LOSS = -2144927696_i32
  COPYENGINE_E_ENCRYPTION_LOSS = -2144927695_i32
  COPYENGINE_E_DISK_FULL = -2144927694_i32
  COPYENGINE_E_DISK_FULL_CLEAN = -2144927693_i32
  COPYENGINE_E_EA_NOT_SUPPORTED = -2144927692_i32
  COPYENGINE_E_CANT_REACH_SOURCE = -2144927691_i32
  COPYENGINE_E_RECYCLE_UNKNOWN_ERROR = -2144927691_i32
  COPYENGINE_E_RECYCLE_FORCE_NUKE = -2144927690_i32
  COPYENGINE_E_RECYCLE_SIZE_TOO_BIG = -2144927689_i32
  COPYENGINE_E_RECYCLE_PATH_TOO_LONG = -2144927688_i32
  COPYENGINE_E_RECYCLE_BIN_NOT_FOUND = -2144927686_i32
  COPYENGINE_E_NEWFILE_NAME_TOO_LONG = -2144927685_i32
  COPYENGINE_E_NEWFOLDER_NAME_TOO_LONG = -2144927684_i32
  COPYENGINE_E_DIR_NOT_EMPTY = -2144927683_i32
  COPYENGINE_E_FAT_MAX_IN_ROOT = -2144927682_i32
  COPYENGINE_E_ACCESSDENIED_READONLY = -2144927681_i32
  COPYENGINE_E_REDIRECTED_TO_WEBPAGE = -2144927680_i32
  COPYENGINE_E_SERVER_BAD_FILE_TYPE = -2144927679_i32
  COPYENGINE_E_INTERNET_ITEM_UNAVAILABLE = -2144927678_i32
  COPYENGINE_E_CANNOT_MOVE_FROM_RECYCLE_BIN = -2144927677_i32
  COPYENGINE_E_CANNOT_MOVE_SHARED_FOLDER = -2144927676_i32
  COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_ERROR = -2144927675_i32
  COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_PAUSED = -2144927674_i32
  COPYENGINE_E_REQUIRES_EDP_CONSENT = -2144927673_i32
  COPYENGINE_E_BLOCKED_BY_EDP_POLICY = -2144927672_i32
  COPYENGINE_E_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = -2144927671_i32
  COPYENGINE_E_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = -2144927670_i32
  COPYENGINE_E_RMS_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = -2144927669_i32
  COPYENGINE_E_RMS_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = -2144927668_i32
  COPYENGINE_E_WARNED_BY_DLP_POLICY = -2144927667_i32
  COPYENGINE_E_BLOCKED_BY_DLP_POLICY = -2144927666_i32
  COPYENGINE_E_SILENT_FAIL_BY_DLP_POLICY = -2144927665_i32
  NETCACHE_E_NEGATIVE_CACHE = -2144927488_i32
  EXECUTE_E_LAUNCH_APPLICATION = -2144927487_i32
  SHELL_E_WRONG_BITDEPTH = -2144927486_i32
  LINK_E_DELETE = -2144927485_i32
  STORE_E_NEWER_VERSION_AVAILABLE = -2144927484_i32
  E_FILE_PLACEHOLDER_NOT_INITIALIZED = -2144927472_i32
  E_FILE_PLACEHOLDER_VERSION_MISMATCH = -2144927471_i32
  E_FILE_PLACEHOLDER_SERVER_TIMED_OUT = -2144927470_i32
  E_FILE_PLACEHOLDER_STORAGEPROVIDER_NOT_FOUND = -2144927469_i32
  CAMERAROLL_E_NO_DOWNSAMPLING_REQUIRED = -2144927456_i32
  E_ACTIVATIONDENIED_USERCLOSE = -2144927440_i32
  E_ACTIVATIONDENIED_SHELLERROR = -2144927439_i32
  E_ACTIVATIONDENIED_SHELLRESTART = -2144927438_i32
  E_ACTIVATIONDENIED_UNEXPECTED = -2144927437_i32
  E_ACTIVATIONDENIED_SHELLNOTREADY = -2144927436_i32
  LIBRARY_E_NO_SAVE_LOCATION = -2144927232_i32
  LIBRARY_E_NO_ACCESSIBLE_LOCATION = -2144927231_i32
  E_USERTILE_UNSUPPORTEDFILETYPE = -2144927216_i32
  E_USERTILE_CHANGEDISABLED = -2144927215_i32
  E_USERTILE_LARGEORDYNAMIC = -2144927214_i32
  E_USERTILE_VIDEOFRAMESIZE = -2144927213_i32
  E_USERTILE_FILESIZE = -2144927212_i32
  IMM_ACC_DOCKING_E_INSUFFICIENTHEIGHT = -2144927184_i32
  IMM_ACC_DOCKING_E_DOCKOCCUPIED = -2144927183_i32
  IMSC_E_SHELL_COMPONENT_STARTUP_FAILURE = -2144927181_i32
  SHC_E_SHELL_COMPONENT_STARTUP_FAILURE = -2144927180_i32
  E_TILE_NOTIFICATIONS_PLATFORM_FAILURE = -2144927159_i32
  E_SHELL_EXTENSION_BLOCKED = -2144926975_i32
  E_IMAGEFEED_CHANGEDISABLED = -2144926960_i32
  GPFIDL_DEFAULT = 0_i32
  GPFIDL_ALTNAME = 1_i32
  GPFIDL_UNCPRINTER = 2_i32
  ISHCUTCMDID_DOWNLOADICON = 0_i32
  ISHCUTCMDID_INTSHORTCUTCREATE = 1_i32
  ISHCUTCMDID_COMMITHISTORY = 2_i32
  ISHCUTCMDID_SETUSERAWURL = 3_i32
  SFBID_PIDLCHANGED = 0_i32
  DBCID_EMPTY = 0_i32
  DBCID_ONDRAG = 1_i32
  DBCID_CLSIDOFBAR = 2_i32
  DBCID_RESIZE = 3_i32
  DBCID_GETBAR = 4_i32
  DBCID_UPDATESIZE = 5_i32
  BMICON_LARGE = 0_i32
  BMICON_SMALL = 1_i32
  ASSOCF_NONE = 0_i32
  ASSOCF_INIT_NOREMAPCLSID = 1_i32
  ASSOCF_INIT_BYEXENAME = 2_i32
  ASSOCF_OPEN_BYEXENAME = 2_i32
  ASSOCF_INIT_DEFAULTTOSTAR = 4_i32
  ASSOCF_INIT_DEFAULTTOFOLDER = 8_i32
  ASSOCF_NOUSERSETTINGS = 16_i32
  ASSOCF_NOTRUNCATE = 32_i32
  ASSOCF_VERIFY = 64_i32
  ASSOCF_REMAPRUNDLL = 128_i32
  ASSOCF_NOFIXUPS = 256_i32
  ASSOCF_IGNOREBASECLASS = 512_i32
  ASSOCF_INIT_IGNOREUNKNOWN = 1024_i32
  ASSOCF_INIT_FIXED_PROGID = 2048_i32
  ASSOCF_IS_PROTOCOL = 4096_i32
  ASSOCF_INIT_FOR_FILE = 8192_i32
  ASSOCF_IS_FULL_URI = 16384_i32
  ASSOCF_PER_MACHINE_ONLY = 32768_i32
  ASSOCF_APP_TO_APP = 65536_i32
  CTF_INSIST = 1_i32
  CTF_THREAD_REF = 2_i32
  CTF_PROCESS_REF = 4_i32
  CTF_COINIT_STA = 8_i32
  CTF_COINIT = 8_i32
  CTF_FREELIBANDEXIT = 16_i32
  CTF_REF_COUNTED = 32_i32
  CTF_WAIT_ALLOWCOM = 64_i32
  CTF_UNUSED = 128_i32
  CTF_INHERITWOW64 = 256_i32
  CTF_WAIT_NO_REENTRANCY = 512_i32
  CTF_KEYBOARD_LOCALE = 1024_i32
  CTF_OLEINITIALIZE = 2048_i32
  CTF_COINIT_MTA = 4096_i32
  CTF_NOADDREFLIB = 8192_i32
  QueryCancelAutoPlay = LibC::GUID.new(0x331f1768_u32, 0x5a9_u16, 0x4ddd_u16, StaticArray[0xb8_u8, 0x6e_u8, 0xda_u8, 0xe3_u8, 0x4d_u8, 0xdc_u8, 0x99_u8, 0x8a_u8])
  TimeCategorizer = LibC::GUID.new(0x3bb4118f_u32, 0xddfd_u16, 0x4d30_u16, StaticArray[0xa3_u8, 0x48_u8, 0x9f_u8, 0xb5_u8, 0xd6_u8, 0xbf_u8, 0x1a_u8, 0xfe_u8])
  AlphabeticalCategorizer = LibC::GUID.new(0x3c2654c6_u32, 0x7372_u16, 0x4f6b_u16, StaticArray[0xb3_u8, 0x10_u8, 0x55_u8, 0xd6_u8, 0x12_u8, 0x8f_u8, 0x49_u8, 0xd2_u8])
  MergedCategorizer = LibC::GUID.new(0x8e827c11_u32, 0x33e7_u16, 0x4bc1_u16, StaticArray[0xb2_u8, 0x42_u8, 0x8c_u8, 0xd9_u8, 0xa1_u8, 0xc2_u8, 0xb3_u8, 0x4_u8])
  ImageProperties = LibC::GUID.new(0x7ab770c7_u32, 0xe23_u16, 0x4d7a_u16, StaticArray[0x8a_u8, 0xa2_u8, 0x19_u8, 0xbf_u8, 0xad_u8, 0x47_u8, 0x98_u8, 0x29_u8])
  CDBurn = LibC::GUID.new(0xfbeb8a05_u32, 0xbeee_u16, 0x4442_u16, StaticArray[0x80_u8, 0x4e_u8, 0x40_u8, 0x9d_u8, 0x6c_u8, 0x45_u8, 0x15_u8, 0xe9_u8])
  StartMenuPin = LibC::GUID.new(0xa2a9545d_u32, 0xa0c2_u16, 0x42b4_u16, StaticArray[0x97_u8, 0x8_u8, 0xa0_u8, 0xb2_u8, 0xba_u8, 0xdd_u8, 0x77_u8, 0xc8_u8])
  WebWizardHost = LibC::GUID.new(0xc827f149_u32, 0x55c1_u16, 0x4d28_u16, StaticArray[0x93_u8, 0x5e_u8, 0x57_u8, 0xe4_u8, 0x7c_u8, 0xae_u8, 0xd9_u8, 0x73_u8])
  PublishDropTarget = LibC::GUID.new(0xcc6eeffb_u32, 0x43f6_u16, 0x46c5_u16, StaticArray[0x96_u8, 0x19_u8, 0x51_u8, 0xd5_u8, 0x71_u8, 0x96_u8, 0x7f_u8, 0x7d_u8])
  PublishingWizard = LibC::GUID.new(0x6b33163c_u32, 0x76a5_u16, 0x4b6c_u16, StaticArray[0xbf_u8, 0x21_u8, 0x45_u8, 0xde_u8, 0x9c_u8, 0xd5_u8, 0x3_u8, 0xa1_u8])
  InternetPrintOrdering = LibC::GUID.new(0xadd36aa8_u32, 0x751a_u16, 0x4579_u16, StaticArray[0xa2_u8, 0x66_u8, 0xd6_u8, 0x6f_u8, 0x52_u8, 0x2_u8, 0xcc_u8, 0xbb_u8])
  FolderViewHost = LibC::GUID.new(0x20b1cb23_u32, 0x6968_u16, 0x4eb9_u16, StaticArray[0xb7_u8, 0xd4_u8, 0xa6_u8, 0x6d_u8, 0x0_u8, 0xd0_u8, 0x7c_u8, 0xee_u8])
  ExplorerBrowser = LibC::GUID.new(0x71f96385_u32, 0xddd6_u16, 0x48d3_u16, StaticArray[0xa0_u8, 0xc1_u8, 0xae_u8, 0x6_u8, 0xe8_u8, 0xb0_u8, 0x55_u8, 0xfb_u8])
  ImageRecompress = LibC::GUID.new(0x6e33091c_u32, 0xd2f8_u16, 0x4740_u16, StaticArray[0xb5_u8, 0x5e_u8, 0x2e_u8, 0x11_u8, 0xd1_u8, 0x47_u8, 0x7a_u8, 0x2c_u8])
  TrayBandSiteService = LibC::GUID.new(0xf60ad0a0_u32, 0xe5e1_u16, 0x45cb_u16, StaticArray[0xb5_u8, 0x1a_u8, 0xe1_u8, 0x5b_u8, 0x9f_u8, 0x8b_u8, 0x29_u8, 0x34_u8])
  TrayDeskBand = LibC::GUID.new(0xe6442437_u32, 0x6c68_u16, 0x4f52_u16, StaticArray[0x94_u8, 0xdd_u8, 0x2c_u8, 0xfe_u8, 0xd2_u8, 0x67_u8, 0xef_u8, 0xb9_u8])
  AttachmentServices = LibC::GUID.new(0x4125dd96_u32, 0xe03a_u16, 0x4103_u16, StaticArray[0x8f_u8, 0x70_u8, 0xe0_u8, 0x59_u8, 0x7d_u8, 0x80_u8, 0x3b_u8, 0x9c_u8])
  DocPropShellExtension = LibC::GUID.new(0x883373c3_u32, 0xbf89_u16, 0x11d1_u16, StaticArray[0xbe_u8, 0x35_u8, 0x8_u8, 0x0_u8, 0x36_u8, 0xb1_u8, 0x1a_u8, 0x3_u8])
  FSCopyHandler = LibC::GUID.new(0xd197380a_u32, 0xa79_u16, 0x4dc8_u16, StaticArray[0xa0_u8, 0x33_u8, 0xed_u8, 0x88_u8, 0x2c_u8, 0x2f_u8, 0xa1_u8, 0x4b_u8])
  PreviousVersions = LibC::GUID.new(0x596ab062_u32, 0xb4d2_u16, 0x4215_u16, StaticArray[0x9f_u8, 0x74_u8, 0xe9_u8, 0x10_u8, 0x9b_u8, 0xa_u8, 0x81_u8, 0x53_u8])
  NamespaceTreeControl = LibC::GUID.new(0xae054212_u32, 0x3535_u16, 0x4430_u16, StaticArray[0x83_u8, 0xed_u8, 0xd5_u8, 0x1_u8, 0xaa_u8, 0x66_u8, 0x80_u8, 0xe6_u8])
  IENamespaceTreeControl = LibC::GUID.new(0xace52d03_u32, 0xe5cd_u16, 0x4b20_u16, StaticArray[0x82_u8, 0xff_u8, 0xe7_u8, 0x1b_u8, 0x11_u8, 0xbe_u8, 0xae_u8, 0x1d_u8])
  ApplicationAssociationRegistrationUI = LibC::GUID.new(0x1968106d_u32, 0xf3b5_u16, 0x44cf_u16, StaticArray[0x89_u8, 0xe_u8, 0x11_u8, 0x6f_u8, 0xcb_u8, 0x9e_u8, 0xce_u8, 0xf1_u8])
  DesktopGadget = LibC::GUID.new(0x924ccc1b_u32, 0x6562_u16, 0x4c85_u16, StaticArray[0x86_u8, 0x57_u8, 0xd1_u8, 0x77_u8, 0x92_u8, 0x52_u8, 0x22_u8, 0xb6_u8])
  AccessibilityDockingService = LibC::GUID.new(0x29ce1d46_u32, 0xb481_u16, 0x4aa0_u16, StaticArray[0xa0_u8, 0x8a_u8, 0xd3_u8, 0xeb_u8, 0xc8_u8, 0xac_u8, 0xa4_u8, 0x2_u8])
  ExecuteFolder = LibC::GUID.new(0x11dbb47c_u32, 0xa525_u16, 0x400b_u16, StaticArray[0x9e_u8, 0x80_u8, 0xa5_u8, 0x46_u8, 0x15_u8, 0xa0_u8, 0x90_u8, 0xc0_u8])
  VirtualDesktopManager = LibC::GUID.new(0xaa509086_u32, 0x5ca9_u16, 0x4c25_u16, StaticArray[0x8f_u8, 0x95_u8, 0x58_u8, 0x9d_u8, 0x3c_u8, 0x7_u8, 0xb4_u8, 0x8a_u8])
  StorageProviderBanners = LibC::GUID.new(0x7ccdf9f4_u32, 0xe576_u16, 0x455a_u16, StaticArray[0x8b_u8, 0xc7_u8, 0xf6_u8, 0xec_u8, 0x68_u8, 0xd6_u8, 0xf0_u8, 0x63_u8])
  DesktopWallpaper = LibC::GUID.new(0xc2cf3110_u32, 0x460e_u16, 0x4fc1_u16, StaticArray[0xb9_u8, 0xd0_u8, 0x8a_u8, 0x1c_u8, 0xc_u8, 0x9c_u8, 0xc4_u8, 0xbd_u8])
  ShellDesktop = LibC::GUID.new(0x21400_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
  ShellFSFolder = LibC::GUID.new(0xf3364ba0_u32, 0x65b9_u16, 0x11ce_u16, StaticArray[0xa9_u8, 0xba_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x4a_u8, 0xe8_u8, 0x37_u8])
  NetworkPlaces = LibC::GUID.new(0x208d2c60_u32, 0x3aea_u16, 0x1069_u16, StaticArray[0xa2_u8, 0xd7_u8, 0x8_u8, 0x0_u8, 0x2b_u8, 0x30_u8, 0x30_u8, 0x9d_u8])
  ShellLink = LibC::GUID.new(0x21401_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
  DriveSizeCategorizer = LibC::GUID.new(0x94357b53_u32, 0xca29_u16, 0x4b78_u16, StaticArray[0x83_u8, 0xae_u8, 0xe8_u8, 0xfe_u8, 0x74_u8, 0x9_u8, 0x13_u8, 0x4f_u8])
  DriveTypeCategorizer = LibC::GUID.new(0xb0a8f3cf_u32, 0x4333_u16, 0x4bab_u16, StaticArray[0x88_u8, 0x73_u8, 0x1c_u8, 0xcb_u8, 0x1c_u8, 0xad_u8, 0xa4_u8, 0x8b_u8])
  FreeSpaceCategorizer = LibC::GUID.new(0xb5607793_u32, 0x24ac_u16, 0x44c7_u16, StaticArray[0x82_u8, 0xe2_u8, 0x83_u8, 0x17_u8, 0x26_u8, 0xaa_u8, 0x6c_u8, 0xb7_u8])
  SizeCategorizer = LibC::GUID.new(0x55d7b852_u32, 0xf6d1_u16, 0x42f2_u16, StaticArray[0xaa_u8, 0x75_u8, 0x87_u8, 0x28_u8, 0xa1_u8, 0xb2_u8, 0xd2_u8, 0x64_u8])
  PropertiesUI = LibC::GUID.new(0xd912f8cf_u32, 0x396_u16, 0x4915_u16, StaticArray[0x88_u8, 0x4e_u8, 0xfb_u8, 0x42_u8, 0x5d_u8, 0x32_u8, 0x94_u8, 0x3b_u8])
  UserNotification = LibC::GUID.new(0x10890e_u32, 0x8789_u16, 0x413c_u16, StaticArray[0xad_u8, 0xbc_u8, 0x48_u8, 0xf5_u8, 0xb5_u8, 0x11_u8, 0xb3_u8, 0xaf_u8])
  TaskbarList = LibC::GUID.new(0x56fdf344_u32, 0xfd6d_u16, 0x11d0_u16, StaticArray[0x95_u8, 0x8a_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa0_u8, 0x90_u8])
  ShellItem = LibC::GUID.new(0x9ac9fbe1_u32, 0xe0a2_u16, 0x4ad6_u16, StaticArray[0xb4_u8, 0xee_u8, 0xe2_u8, 0x12_u8, 0x1_u8, 0x3e_u8, 0xa9_u8, 0x17_u8])
  NamespaceWalker = LibC::GUID.new(0x72eb61e0_u32, 0x8672_u16, 0x4303_u16, StaticArray[0x91_u8, 0x75_u8, 0xf2_u8, 0xe4_u8, 0xc6_u8, 0x8b_u8, 0x2e_u8, 0x7c_u8])
  FileOperation = LibC::GUID.new(0x3ad05575_u32, 0x8857_u16, 0x4850_u16, StaticArray[0x92_u8, 0x77_u8, 0x11_u8, 0xb8_u8, 0x5b_u8, 0xdb_u8, 0x8e_u8, 0x9_u8])
  FileOpenDialog = LibC::GUID.new(0xdc1c5a9c_u32, 0xe88a_u16, 0x4dde_u16, StaticArray[0xa5_u8, 0xa1_u8, 0x60_u8, 0xf8_u8, 0x2a_u8, 0x20_u8, 0xae_u8, 0xf7_u8])
  FileSaveDialog = LibC::GUID.new(0xc0b4e2f3_u32, 0xba21_u16, 0x4773_u16, StaticArray[0x8d_u8, 0xba_u8, 0x33_u8, 0x5e_u8, 0xc9_u8, 0x46_u8, 0xeb_u8, 0x8b_u8])
  KnownFolderManager = LibC::GUID.new(0x4df0c730_u32, 0xdf9d_u16, 0x4ae3_u16, StaticArray[0x91_u8, 0x53_u8, 0xaa_u8, 0x6b_u8, 0x82_u8, 0xe9_u8, 0x79_u8, 0x5a_u8])
  SharingConfigurationManager = LibC::GUID.new(0x49f371e1_u32, 0x8c5c_u16, 0x4d9c_u16, StaticArray[0x9a_u8, 0x3b_u8, 0x54_u8, 0xa6_u8, 0x82_u8, 0x7f_u8, 0x51_u8, 0x3c_u8])
  NetworkConnections = LibC::GUID.new(0x7007acc7_u32, 0x3202_u16, 0x11d1_u16, StaticArray[0xaa_u8, 0xd2_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x27_u8, 0xe_u8])
  ScheduledTasks = LibC::GUID.new(0xd6277990_u32, 0x4c6a_u16, 0x11cf_u16, StaticArray[0x8d_u8, 0x87_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0xf5_u8, 0xbf_u8])
  ApplicationAssociationRegistration = LibC::GUID.new(0x591209c7_u32, 0x767b_u16, 0x42b2_u16, StaticArray[0x9f_u8, 0xba_u8, 0x44_u8, 0xee_u8, 0x46_u8, 0x15_u8, 0xf2_u8, 0xc7_u8])
  SearchFolderItemFactory = LibC::GUID.new(0x14010e02_u32, 0xbbbd_u16, 0x41f0_u16, StaticArray[0x88_u8, 0xe3_u8, 0xed_u8, 0xa3_u8, 0x71_u8, 0x21_u8, 0x65_u8, 0x84_u8])
  OpenControlPanel = LibC::GUID.new(0x6622d85_u32, 0x6856_u16, 0x4460_u16, StaticArray[0x8d_u8, 0xe1_u8, 0xa8_u8, 0x19_u8, 0x21_u8, 0xb4_u8, 0x1c_u8, 0x4b_u8])
  MailRecipient = LibC::GUID.new(0x9e56be60_u32, 0xc50f_u16, 0x11cf_u16, StaticArray[0x9a_u8, 0x2c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa_u8, 0x90_u8, 0xce_u8])
  NetworkExplorerFolder = LibC::GUID.new(0xf02c1a0d_u32, 0xbe21_u16, 0x4350_u16, StaticArray[0x88_u8, 0xb0_u8, 0x73_u8, 0x67_u8, 0xfc_u8, 0x96_u8, 0xef_u8, 0x3c_u8])
  DestinationList = LibC::GUID.new(0x77f10cf0_u32, 0x3db5_u16, 0x4966_u16, StaticArray[0xb5_u8, 0x20_u8, 0xb7_u8, 0xc5_u8, 0x4f_u8, 0xd3_u8, 0x5e_u8, 0xd6_u8])
  ApplicationDestinations = LibC::GUID.new(0x86c14003_u32, 0x4d6b_u16, 0x4ef3_u16, StaticArray[0xa7_u8, 0xb4_u8, 0x5_u8, 0x6_u8, 0x66_u8, 0x3b_u8, 0x2e_u8, 0x68_u8])
  ApplicationDocumentLists = LibC::GUID.new(0x86bec222_u32, 0x30f2_u16, 0x47e0_u16, StaticArray[0x9f_u8, 0x25_u8, 0x60_u8, 0xd1_u8, 0x1c_u8, 0xd7_u8, 0x5c_u8, 0x28_u8])
  HomeGroup = LibC::GUID.new(0xde77ba04_u32, 0x3c92_u16, 0x4d11_u16, StaticArray[0xa1_u8, 0xa5_u8, 0x42_u8, 0x35_u8, 0x2a_u8, 0x53_u8, 0xe0_u8, 0xe3_u8])
  ShellLibrary = LibC::GUID.new(0xd9b3211d_u32, 0xe57f_u16, 0x4426_u16, StaticArray[0xaa_u8, 0xef_u8, 0x30_u8, 0xa8_u8, 0x6_u8, 0xad_u8, 0xd3_u8, 0x97_u8])
  AppStartupLink = LibC::GUID.new(0x273eb5e7_u32, 0x88b0_u16, 0x4843_u16, StaticArray[0xbf_u8, 0xef_u8, 0xe2_u8, 0xc8_u8, 0x1d_u8, 0x43_u8, 0xaa_u8, 0xe5_u8])
  EnumerableObjectCollection = LibC::GUID.new(0x2d3468c1_u32, 0x36a7_u16, 0x43b6_u16, StaticArray[0xac_u8, 0x24_u8, 0xd3_u8, 0xf0_u8, 0x2f_u8, 0xd9_u8, 0x60_u8, 0x7a_u8])
  FrameworkInputPane = LibC::GUID.new(0xd5120aa3_u32, 0x46ba_u16, 0x44c5_u16, StaticArray[0x82_u8, 0x2d_u8, 0xca_u8, 0x80_u8, 0x92_u8, 0xc1_u8, 0xfc_u8, 0x72_u8])
  DefFolderMenu = LibC::GUID.new(0xc63382be_u32, 0x7933_u16, 0x48d0_u16, StaticArray[0x9a_u8, 0xc8_u8, 0x85_u8, 0xfb_u8, 0x46_u8, 0xbe_u8, 0x2f_u8, 0xdd_u8])
  AppVisibility = LibC::GUID.new(0x7e5fe3d9_u32, 0x985f_u16, 0x4908_u16, StaticArray[0x91_u8, 0xf9_u8, 0xee_u8, 0x19_u8, 0xf9_u8, 0xfd_u8, 0x15_u8, 0x14_u8])
  AppShellVerbHandler = LibC::GUID.new(0x4ed3a719_u32, 0xcea8_u16, 0x4bd9_u16, StaticArray[0x91_u8, 0xd_u8, 0xe2_u8, 0x52_u8, 0xf9_u8, 0x97_u8, 0xaf_u8, 0xc2_u8])
  ExecuteUnknown = LibC::GUID.new(0xe44e9428_u32, 0xbdbc_u16, 0x4987_u16, StaticArray[0xa0_u8, 0x99_u8, 0x40_u8, 0xdc_u8, 0x8f_u8, 0xd2_u8, 0x55_u8, 0xe7_u8])
  PackageDebugSettings = LibC::GUID.new(0xb1aec16f_u32, 0x2383_u16, 0x4852_u16, StaticArray[0xb0_u8, 0xe9_u8, 0x8f_u8, 0xb_u8, 0x1d_u8, 0xc6_u8, 0x6b_u8, 0x4d_u8])
  SuspensionDependencyManager = LibC::GUID.new(0x6b273fc5_u32, 0x61fd_u16, 0x4918_u16, StaticArray[0x95_u8, 0xa2_u8, 0xc3_u8, 0xb5_u8, 0xe9_u8, 0xd7_u8, 0xf5_u8, 0x81_u8])
  ApplicationActivationManager = LibC::GUID.new(0x45ba127d_u32, 0x10a8_u16, 0x46ea_u16, StaticArray[0x8a_u8, 0xb7_u8, 0x56_u8, 0xea_u8, 0x90_u8, 0x78_u8, 0x94_u8, 0x3c_u8])
  ApplicationDesignModeSettings = LibC::GUID.new(0x958a6fb5_u32, 0xdcb2_u16, 0x4faf_u16, StaticArray[0xaa_u8, 0xfd_u8, 0x7f_u8, 0xb0_u8, 0x54_u8, 0xad_u8, 0x1a_u8, 0x3b_u8])
  WebBrowser_V1 = LibC::GUID.new(0xeab22ac3_u32, 0x30c1_u16, 0x11cf_u16, StaticArray[0xa7_u8, 0xeb_u8, 0x0_u8, 0x0_u8, 0xc0_u8, 0x5b_u8, 0xae_u8, 0xb_u8])
  WebBrowser = LibC::GUID.new(0x8856f961_u32, 0x340a_u16, 0x11d0_u16, StaticArray[0xa9_u8, 0x6b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0x5_u8, 0xa2_u8])
  InternetExplorer = LibC::GUID.new(0x2df01_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
  InternetExplorerMedium = LibC::GUID.new(0xd5e8041d_u32, 0x920f_u16, 0x45e9_u16, StaticArray[0xb8_u8, 0xfb_u8, 0xb1_u8, 0xde_u8, 0xb8_u8, 0x2c_u8, 0x6e_u8, 0x5e_u8])
  ShellBrowserWindow = LibC::GUID.new(0xc08afd90_u32, 0xf2a1_u16, 0x11d1_u16, StaticArray[0x84_u8, 0x55_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1f_u8, 0x38_u8, 0x80_u8])
  ShellWindows = LibC::GUID.new(0x9ba05972_u32, 0xf6a8_u16, 0x11cf_u16, StaticArray[0xa4_u8, 0x42_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa_u8, 0x8f_u8, 0x39_u8])
  ShellUIHelper = LibC::GUID.new(0x64ab4bb7_u32, 0x111e_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x79_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xfb_u8, 0xe1_u8])
  ShellNameSpace = LibC::GUID.new(0x55136805_u32, 0xb2de_u16, 0x11d1_u16, StaticArray[0xb9_u8, 0xf2_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x8b_u8, 0xc5_u8, 0x47_u8])
  CScriptErrorList = LibC::GUID.new(0xefd01300_u32, 0x160f_u16, 0x11d2_u16, StaticArray[0xbb_u8, 0x2e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xf7_u8, 0xef_u8, 0xca_u8])
  ShellFolderViewOC = LibC::GUID.new(0x9ba05971_u32, 0xf6a8_u16, 0x11cf_u16, StaticArray[0xa4_u8, 0x42_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa_u8, 0x8f_u8, 0x39_u8])
  ShellFolderItem = LibC::GUID.new(0x2fe352ea_u32, 0xfd1f_u16, 0x11d2_u16, StaticArray[0xb1_u8, 0xf4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xeb_u8, 0x3e_u8])
  ShellLinkObject = LibC::GUID.new(0x11219420_u32, 0x1768_u16, 0x11d1_u16, StaticArray[0x95_u8, 0xbe_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0x97_u8, 0xea_u8, 0x4f_u8])
  ShellFolderView = LibC::GUID.new(0x62112aa1_u32, 0xebe4_u16, 0x11cf_u16, StaticArray[0xa5_u8, 0xfb_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xe7_u8, 0x29_u8, 0x2d_u8])
  Shell = LibC::GUID.new(0x13709620_u32, 0xc279_u16, 0x11ce_u16, StaticArray[0xa4_u8, 0x9e_u8, 0x44_u8, 0x45_u8, 0x53_u8, 0x54_u8, 0x0_u8, 0x0_u8])
  ShellDispatchInproc = LibC::GUID.new(0xa89a860_u32, 0xd7b1_u16, 0x11ce_u16, StaticArray[0x83_u8, 0x50_u8, 0x44_u8, 0x45_u8, 0x53_u8, 0x54_u8, 0x0_u8, 0x0_u8])
  FileSearchBand = LibC::GUID.new(0xc4ee31f3_u32, 0x4768_u16, 0x11d2_u16, StaticArray[0xbe_u8, 0x5c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa8_u8, 0x3d_u8, 0xa1_u8])
  PasswordCredentialProvider = LibC::GUID.new(0x60b78e88_u32, 0xead8_u16, 0x445c_u16, StaticArray[0x9c_u8, 0xfd_u8, 0xb_u8, 0x87_u8, 0xf7_u8, 0x4e_u8, 0xa6_u8, 0xcd_u8])
  V1PasswordCredentialProvider = LibC::GUID.new(0x6f45dc1e_u32, 0x5384_u16, 0x457a_u16, StaticArray[0xbc_u8, 0x13_u8, 0x2c_u8, 0xd8_u8, 0x1b_u8, 0xd_u8, 0x28_u8, 0xed_u8])
  PINLogonCredentialProvider = LibC::GUID.new(0xcb82ea12_u32, 0x9f71_u16, 0x446d_u16, StaticArray[0x89_u8, 0xe1_u8, 0x8d_u8, 0x9_u8, 0x24_u8, 0xe1_u8, 0x25_u8, 0x6e_u8])
  NPCredentialProvider = LibC::GUID.new(0x3dd6bec0_u32, 0x8193_u16, 0x4ffe_u16, StaticArray[0xae_u8, 0x25_u8, 0xe0_u8, 0x8e_u8, 0x39_u8, 0xea_u8, 0x40_u8, 0x63_u8])
  SmartcardCredentialProvider = LibC::GUID.new(0x8fd7e19c_u32, 0x3bf7_u16, 0x489b_u16, StaticArray[0xa7_u8, 0x2c_u8, 0x84_u8, 0x6a_u8, 0xb3_u8, 0x67_u8, 0x8c_u8, 0x96_u8])
  V1SmartcardCredentialProvider = LibC::GUID.new(0x8bf9a910_u32, 0xa8ff_u16, 0x457f_u16, StaticArray[0x99_u8, 0x9f_u8, 0xa5_u8, 0xca_u8, 0x10_u8, 0xb4_u8, 0xa8_u8, 0x85_u8])
  SmartcardPinProvider = LibC::GUID.new(0x94596c7e_u32, 0x3744_u16, 0x41ce_u16, StaticArray[0x89_u8, 0x3e_u8, 0xbb_u8, 0xf0_u8, 0x91_u8, 0x22_u8, 0xf7_u8, 0x6a_u8])
  SmartcardReaderSelectionProvider = LibC::GUID.new(0x1b283861_u32, 0x754f_u16, 0x4022_u16, StaticArray[0xad_u8, 0x47_u8, 0xa5_u8, 0xea_u8, 0xaa_u8, 0x61_u8, 0x88_u8, 0x94_u8])
  SmartcardWinRTProvider = LibC::GUID.new(0x1ee7337f_u32, 0x85ac_u16, 0x45e2_u16, StaticArray[0xa2_u8, 0x3c_u8, 0x37_u8, 0xc7_u8, 0x53_u8, 0x20_u8, 0x97_u8, 0x69_u8])
  GenericCredentialProvider = LibC::GUID.new(0x25cbb996_u32, 0x92ed_u16, 0x457e_u16, StaticArray[0xb2_u8, 0x8c_u8, 0x47_u8, 0x74_u8, 0x8_u8, 0x4b_u8, 0xd5_u8, 0x62_u8])
  RASProvider = LibC::GUID.new(0x5537e283_u32, 0xb1e7_u16, 0x4ef8_u16, StaticArray[0x9c_u8, 0x6e_u8, 0x7a_u8, 0xb0_u8, 0xaf_u8, 0xe5_u8, 0x5_u8, 0x6d_u8])
  OnexCredentialProvider = LibC::GUID.new(0x7aa0886_u32, 0xcc8d_u16, 0x4e19_u16, StaticArray[0xa4_u8, 0x10_u8, 0x1c_u8, 0x75_u8, 0xaf_u8, 0x68_u8, 0x6e_u8, 0x62_u8])
  OnexPlapSmartcardCredentialProvider = LibC::GUID.new(0x33c86cd6_u32, 0x705f_u16, 0x4ba1_u16, StaticArray[0x9a_u8, 0xdb_u8, 0x67_u8, 0x7_u8, 0xb_u8, 0x83_u8, 0x77_u8, 0x75_u8])
  VaultProvider = LibC::GUID.new(0x503739d0_u32, 0x4c5e_u16, 0x4cfd_u16, StaticArray[0xb3_u8, 0xba_u8, 0xd8_u8, 0x81_u8, 0x33_u8, 0x4f_u8, 0xd_u8, 0xf2_u8])
  WinBioCredentialProvider = LibC::GUID.new(0xbec09223_u32, 0xb018_u16, 0x416d_u16, StaticArray[0xa0_u8, 0xac_u8, 0x52_u8, 0x39_u8, 0x71_u8, 0xb6_u8, 0x39_u8, 0xf5_u8])
  V1WinBioCredentialProvider = LibC::GUID.new(0xac3ac249_u32, 0xe820_u16, 0x4343_u16, StaticArray[0xa6_u8, 0x5b_u8, 0x37_u8, 0x7a_u8, 0xc6_u8, 0x34_u8, 0xdc_u8, 0x9_u8])
  SyncMgrClient = LibC::GUID.new(0x1202db60_u32, 0x1dac_u16, 0x42c5_u16, StaticArray[0xae_u8, 0xd5_u8, 0x1a_u8, 0xbd_u8, 0xd4_u8, 0x32_u8, 0x24_u8, 0x8e_u8])
  SyncMgrControl = LibC::GUID.new(0x1a1f4206_u32, 0x688_u16, 0x4e7f_u16, StaticArray[0xbe_u8, 0x3_u8, 0xd8_u8, 0x2e_u8, 0xc6_u8, 0x9d_u8, 0xf9_u8, 0xa5_u8])
  SyncMgrScheduleWizard = LibC::GUID.new(0x8d8b8e30_u32, 0xc451_u16, 0x421b_u16, StaticArray[0x85_u8, 0x53_u8, 0xd2_u8, 0x97_u8, 0x6a_u8, 0xfa_u8, 0x64_u8, 0x8c_u8])
  SyncMgrFolder = LibC::GUID.new(0x9c73f5e5_u32, 0x7ae7_u16, 0x4e32_u16, StaticArray[0xa8_u8, 0xe8_u8, 0x8d_u8, 0x23_u8, 0xb8_u8, 0x52_u8, 0x55_u8, 0xbf_u8])
  SyncSetupFolder = LibC::GUID.new(0x2e9e59c0_u32, 0xb437_u16, 0x4981_u16, StaticArray[0xa6_u8, 0x47_u8, 0x9c_u8, 0x34_u8, 0xb9_u8, 0xb9_u8, 0x8_u8, 0x91_u8])
  ConflictFolder = LibC::GUID.new(0x289978ac_u32, 0xa101_u16, 0x4341_u16, StaticArray[0xa8_u8, 0x17_u8, 0x21_u8, 0xeb_u8, 0xa7_u8, 0xfd_u8, 0x4_u8, 0x6d_u8])
  SyncResultsFolder = LibC::GUID.new(0x71d99464_u32, 0x3b6b_u16, 0x475c_u16, StaticArray[0xb2_u8, 0x41_u8, 0xe1_u8, 0x58_u8, 0x83_u8, 0x20_u8, 0x75_u8, 0x29_u8])
  SimpleConflictPresenter = LibC::GUID.new(0x7a0f6ab7_u32, 0xed84_u16, 0x46b6_u16, StaticArray[0xb4_u8, 0x7e_u8, 0x2_u8, 0xaa_u8, 0x15_u8, 0x9a_u8, 0x15_u8, 0x2b_u8])
  InputPanelConfiguration = LibC::GUID.new(0x2853add3_u32, 0xf096_u16, 0x4c63_u16, StaticArray[0xa7_u8, 0x8f_u8, 0x7f_u8, 0xa3_u8, 0xea_u8, 0x83_u8, 0x7f_u8, 0xb7_u8])
  LocalThumbnailCache = LibC::GUID.new(0x50ef4544_u32, 0xac9f_u16, 0x4a8e_u16, StaticArray[0xb2_u8, 0x1b_u8, 0x8a_u8, 0x26_u8, 0x18_u8, 0xd_u8, 0xb1_u8, 0x3f_u8])
  SharedBitmap = LibC::GUID.new(0x4db26476_u32, 0x6787_u16, 0x4046_u16, StaticArray[0xb8_u8, 0x36_u8, 0xe8_u8, 0x41_u8, 0x2a_u8, 0x9e_u8, 0x8a_u8, 0x27_u8])
  ShellImageDataFactory = LibC::GUID.new(0x66e4e4fb_u32, 0xf385_u16, 0x4dd0_u16, StaticArray[0x8d_u8, 0x74_u8, 0xa2_u8, 0xef_u8, 0xd1_u8, 0xbc_u8, 0x61_u8, 0x78_u8])
  SyncMgr = LibC::GUID.new(0x6295df27_u32, 0x35ee_u16, 0x11d1_u16, StaticArray[0x87_u8, 0x7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x33_u8, 0x27_u8])
  ThumbnailStreamCache = LibC::GUID.new(0xcbe0fed3_u32, 0x4b91_u16, 0x4e90_u16, StaticArray[0x83_u8, 0x54_u8, 0x8a_u8, 0x8c_u8, 0x84_u8, 0xec_u8, 0x68_u8, 0x72_u8])
  TrackShellMenu = LibC::GUID.new(0x8278f931_u32, 0x2a3e_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x8f_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0xd0_u8])
  ImageTranscode = LibC::GUID.new(0x17b75166_u32, 0x928f_u16, 0x417d_u16, StaticArray[0x96_u8, 0x85_u8, 0x64_u8, 0xaa_u8, 0x13_u8, 0x55_u8, 0x65_u8, 0xc1_u8])
  ShowInputPaneAnimationCoordinator = LibC::GUID.new(0x1f046abf_u32, 0x3202_u16, 0x4dc1_u16, StaticArray[0x8c_u8, 0xb5_u8, 0x3c_u8, 0x67_u8, 0x61_u8, 0x7c_u8, 0xe1_u8, 0xfa_u8])
  HideInputPaneAnimationCoordinator = LibC::GUID.new(0x384742b1_u32, 0x2a77_u16, 0x4cb3_u16, StaticArray[0x8c_u8, 0xf8_u8, 0x11_u8, 0x36_u8, 0xf5_u8, 0xe1_u8, 0x7e_u8, 0x59_u8])

  type APPSTATE_REGISTRATION = Void
  type APPCONSTRAIN_REGISTRATION = Void
  type NC_ADDRESS_NET_ADDRESS_INFO = Void

  alias SUBCLASSPROC = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, LibC::UINT_PTR, LibC::UINT_PTR, LRESULT)
  alias BFFCALLBACK = Proc(LibC::HANDLE, UInt32, LPARAM, LPARAM, Int32)
  alias LPFNDFMCALLBACK = Proc(IShellFolder, LibC::HANDLE, IDataObject, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  alias LPFNVIEWCALLBACK = Proc(IShellView, IShellFolder, LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  alias PFNCANSHAREFOLDERW = Proc(LibC::LPWSTR, HRESULT)
  alias PFNSHOWSHAREFOLDERUIW = Proc(LibC::HANDLE, LibC::LPWSTR, HRESULT)
  alias DLLGETVERSIONPROC = Proc(DLLVERSIONINFO*, HRESULT)
  alias APPLET_PROC = Proc(LibC::HANDLE, UInt32, LPARAM, LPARAM, Int32)
  alias PAPPSTATE_CHANGE_ROUTINE = Proc(BOOLEAN, Void*, Void)
  alias PAPPCONSTRAIN_CHANGE_ROUTINE = Proc(BOOLEAN, Void*, Void)


  enum SHGFI_FLAGS : Int32
    SHGFI_ADDOVERLAYS = 32
    SHGFI_ATTR_SPECIFIED = 131072
    SHGFI_ATTRIBUTES = 2048
    SHGFI_DISPLAYNAME = 512
    SHGFI_EXETYPE = 8192
    SHGFI_ICON = 256
    SHGFI_ICONLOCATION = 4096
    SHGFI_LARGEICON = 0
    SHGFI_LINKOVERLAY = 32768
    SHGFI_OPENICON = 2
    SHGFI_OVERLAYINDEX = 64
    SHGFI_PIDL = 8
    SHGFI_SELECTED = 65536
    SHGFI_SHELLICONSIZE = 4
    SHGFI_SMALLICON = 1
    SHGFI_SYSICONINDEX = 16384
    SHGFI_TYPENAME = 1024
    SHGFI_USEFILEATTRIBUTES = 16
  end

  enum SHCNE_ID : UInt32
    SHCNE_RENAMEITEM = 1
    SHCNE_CREATE = 2
    SHCNE_DELETE = 4
    SHCNE_MKDIR = 8
    SHCNE_RMDIR = 16
    SHCNE_MEDIAINSERTED = 32
    SHCNE_MEDIAREMOVED = 64
    SHCNE_DRIVEREMOVED = 128
    SHCNE_DRIVEADD = 256
    SHCNE_NETSHARE = 512
    SHCNE_NETUNSHARE = 1024
    SHCNE_ATTRIBUTES = 2048
    SHCNE_UPDATEDIR = 4096
    SHCNE_UPDATEITEM = 8192
    SHCNE_SERVERDISCONNECT = 16384
    SHCNE_UPDATEIMAGE = 32768
    SHCNE_DRIVEADDGUI = 65536
    SHCNE_RENAMEFOLDER = 131072
    SHCNE_FREESPACE = 262144
    SHCNE_EXTENDED_EVENT = 67108864
    SHCNE_ASSOCCHANGED = 134217728
    SHCNE_DISKEVENTS = 145439
    SHCNE_GLOBALEVENTS = 201687520
    SHCNE_ALLEVENTS = 2147483647
    SHCNE_INTERRUPT = 2147483648
  end

  enum SHCNRF_SOURCE : Int32
    SHCNRF_InterruptLevel = 1
    SHCNRF_ShellLevel = 2
    SHCNRF_RecursiveInterrupt = 4096
    SHCNRF_NewDelivery = 32768
  end

  enum SHCNF_FLAGS : UInt32
    SHCNF_IDLIST = 0
    SHCNF_PATHA = 1
    SHCNF_PRINTERA = 2
    SHCNF_DWORD = 3
    SHCNF_PATHW = 5
    SHCNF_PRINTERW = 6
    SHCNF_TYPE = 255
    SHCNF_FLUSH = 4096
    SHCNF_FLUSHNOWAIT = 12288
    SHCNF_NOTIFYRECURSIVE = 65536
    SHCNF_PATH = 5
    SHCNF_PRINTER = 6
  end

  enum QITIPF_FLAGS : Int32
    QITIPF_DEFAULT = 0
    QITIPF_USENAME = 1
    QITIPF_LINKNOTARGET = 2
    QITIPF_LINKUSETARGET = 4
    QITIPF_USESLOWTIP = 8
    QITIPF_SINGLELINE = 16
    QIF_CACHED = 1
    QIF_DONTEXPANDFOLDER = 2
  end

  enum SHDID_ID : Int32
    SHDID_ROOT_REGITEM = 1
    SHDID_FS_FILE = 2
    SHDID_FS_DIRECTORY = 3
    SHDID_FS_OTHER = 4
    SHDID_COMPUTER_DRIVE35 = 5
    SHDID_COMPUTER_DRIVE525 = 6
    SHDID_COMPUTER_REMOVABLE = 7
    SHDID_COMPUTER_FIXED = 8
    SHDID_COMPUTER_NETDRIVE = 9
    SHDID_COMPUTER_CDROM = 10
    SHDID_COMPUTER_RAMDISK = 11
    SHDID_COMPUTER_OTHER = 12
    SHDID_NET_DOMAIN = 13
    SHDID_NET_SERVER = 14
    SHDID_NET_SHARE = 15
    SHDID_NET_RESTOFNET = 16
    SHDID_NET_OTHER = 17
    SHDID_COMPUTER_IMAGING = 18
    SHDID_COMPUTER_AUDIO = 19
    SHDID_COMPUTER_SHAREDDOCS = 20
    SHDID_MOBILE_DEVICE = 21
    SHDID_REMOTE_DESKTOP_DRIVE = 22
  end

  enum SHGDFIL_FORMAT : Int32
    SHGDFIL_FINDDATA = 1
    SHGDFIL_NETRESOURCE = 2
    SHGDFIL_DESCRIPTIONID = 3
  end

  enum PRF_FLAGS : Int32
    PRF_VERIFYEXISTS = 1
    PRF_TRYPROGRAMEXTENSIONS = 3
    PRF_FIRSTDIRDEF = 4
    PRF_DONTFINDLNK = 8
    PRF_REQUIREABSOLUTE = 16
  end

  enum PCS_RET : UInt32
    PCS_FATAL = 2147483648
    PCS_REPLACEDCHAR = 1
    PCS_REMOVEDCHAR = 2
    PCS_TRUNCATED = 4
    PCS_PATHTOOLONG = 8
  end

  enum MM_FLAGS : UInt32
    MM_ADDSEPARATOR = 1
    MM_SUBMENUSHAVEIDS = 2
    MM_DONTREMOVESEPS = 4
  end

  enum SHOP_TYPE : Int32
    SHOP_PRINTERNAME = 1
    SHOP_FILEPATH = 2
    SHOP_VOLUMEGUID = 4
  end

  enum SHFMT_ID : UInt32
    SHFMT_ID_DEFAULT = 65535
  end

  enum SHFMT_OPT : Int32
    SHFMT_OPT_NONE = 0
    SHFMT_OPT_FULL = 1
    SHFMT_OPT_SYSONLY = 2
  end

  enum SHFMT_RET : UInt32
    SHFMT_ERROR = 4294967295
    SHFMT_CANCEL = 4294967294
    SHFMT_NOFORMAT = 4294967293
  end

  enum VALIDATEUNC_OPTION : Int32
    VALIDATEUNC_CONNECT = 1
    VALIDATEUNC_NOUI = 2
    VALIDATEUNC_PRINT = 4
    VALIDATEUNC_PERSIST = 8
    VALIDATEUNC_VALID = 15
  end

  enum SFVM_MESSAGE_ID : Int32
    SFVM_MERGEMENU = 1
    SFVM_INVOKECOMMAND = 2
    SFVM_GETHELPTEXT = 3
    SFVM_GETTOOLTIPTEXT = 4
    SFVM_GETBUTTONINFO = 5
    SFVM_GETBUTTONS = 6
    SFVM_INITMENUPOPUP = 7
    SFVM_FSNOTIFY = 14
    SFVM_WINDOWCREATED = 15
    SFVM_GETDETAILSOF = 23
    SFVM_COLUMNCLICK = 24
    SFVM_QUERYFSNOTIFY = 25
    SFVM_DEFITEMCOUNT = 26
    SFVM_DEFVIEWMODE = 27
    SFVM_UNMERGEMENU = 28
    SFVM_UPDATESTATUSBAR = 31
    SFVM_BACKGROUNDENUM = 32
    SFVM_DIDDRAGDROP = 36
    SFVM_SETISFV = 39
    SFVM_THISIDLIST = 41
    SFVM_ADDPROPERTYPAGES = 47
    SFVM_BACKGROUNDENUMDONE = 48
    SFVM_GETNOTIFY = 49
    SFVM_GETSORTDEFAULTS = 53
    SFVM_SIZE = 57
    SFVM_GETZONE = 58
    SFVM_GETPANE = 59
    SFVM_GETHELPTOPIC = 63
    SFVM_GETANIMATION = 68
  end

  enum SFVS_SELECT : Int32
    SFVS_SELECT_NONE = 0
    SFVS_SELECT_ALLITEMS = 1
    SFVS_SELECT_INVERT = 2
  end

  enum DFM_MESSAGE_ID : Int32
    DFM_MERGECONTEXTMENU = 1
    DFM_INVOKECOMMAND = 2
    DFM_GETHELPTEXT = 5
    DFM_WM_MEASUREITEM = 6
    DFM_WM_DRAWITEM = 7
    DFM_WM_INITMENUPOPUP = 8
    DFM_VALIDATECMD = 9
    DFM_MERGECONTEXTMENU_TOP = 10
    DFM_GETHELPTEXTW = 11
    DFM_INVOKECOMMANDEX = 12
    DFM_MAPCOMMANDNAME = 13
    DFM_GETDEFSTATICID = 14
    DFM_GETVERBW = 15
    DFM_GETVERBA = 16
    DFM_MERGECONTEXTMENU_BOTTOM = 17
    DFM_MODIFYQCMFLAGS = 18
  end

  enum DFM_CMD : Int32
    DFM_CMD_DELETE = -1
    DFM_CMD_MOVE = -2
    DFM_CMD_COPY = -3
    DFM_CMD_LINK = -4
    DFM_CMD_PROPERTIES = -5
    DFM_CMD_NEWFOLDER = -6
    DFM_CMD_PASTE = -7
    DFM_CMD_VIEWLIST = -8
    DFM_CMD_VIEWDETAILS = -9
    DFM_CMD_PASTELINK = -10
    DFM_CMD_PASTESPECIAL = -11
    DFM_CMD_MODALPROP = -12
    DFM_CMD_RENAME = -13
  end

  enum PID_IS : Int32
    PID_IS_URL = 2
    PID_IS_NAME = 4
    PID_IS_WORKINGDIR = 5
    PID_IS_HOTKEY = 6
    PID_IS_SHOWCMD = 7
    PID_IS_ICONINDEX = 8
    PID_IS_ICONFILE = 9
    PID_IS_WHATSNEW = 10
    PID_IS_AUTHOR = 11
    PID_IS_DESCRIPTION = 12
    PID_IS_COMMENT = 13
    PID_IS_ROAMED = 15
  end

  enum PID_INTSITE : Int32
    PID_INTSITE_WHATSNEW = 2
    PID_INTSITE_AUTHOR = 3
    PID_INTSITE_LASTVISIT = 4
    PID_INTSITE_LASTMOD = 5
    PID_INTSITE_VISITCOUNT = 6
    PID_INTSITE_DESCRIPTION = 7
    PID_INTSITE_COMMENT = 8
    PID_INTSITE_FLAGS = 9
    PID_INTSITE_CONTENTLEN = 10
    PID_INTSITE_CONTENTCODE = 11
    PID_INTSITE_RECURSE = 12
    PID_INTSITE_WATCH = 13
    PID_INTSITE_SUBSCRIPTION = 14
    PID_INTSITE_URL = 15
    PID_INTSITE_TITLE = 16
    PID_INTSITE_CODEPAGE = 18
    PID_INTSITE_TRACKING = 19
    PID_INTSITE_ICONINDEX = 20
    PID_INTSITE_ICONFILE = 21
    PID_INTSITE_ROAMED = 34
  end

  enum PIDISF_FLAGS : Int32
    PIDISF_RECENTLYCHANGED = 1
    PIDISF_CACHEDSTICKY = 2
    PIDISF_CACHEIMAGES = 16
    PIDISF_FOLLOWALLLINKS = 32
  end

  enum PIDISM_OPTIONS : Int32
    PIDISM_GLOBAL = 0
    PIDISM_WATCH = 1
    PIDISM_DONTWATCH = 2
  end

  enum PIDISR_INFO : Int32
    PIDISR_UP_TO_DATE = 0
    PIDISR_NEEDS_ADD = 1
    PIDISR_NEEDS_UPDATE = 2
    PIDISR_NEEDS_DELETE = 3
  end

  enum SSF_MASK : UInt32
    SSF_SHOWALLOBJECTS = 1
    SSF_SHOWEXTENSIONS = 2
    SSF_HIDDENFILEEXTS = 4
    SSF_SERVERADMINUI = 4
    SSF_SHOWCOMPCOLOR = 8
    SSF_SORTCOLUMNS = 16
    SSF_SHOWSYSFILES = 32
    SSF_DOUBLECLICKINWEBVIEW = 128
    SSF_SHOWATTRIBCOL = 256
    SSF_DESKTOPHTML = 512
    SSF_WIN95CLASSIC = 1024
    SSF_DONTPRETTYPATH = 2048
    SSF_SHOWINFOTIP = 8192
    SSF_MAPNETDRVBUTTON = 4096
    SSF_NOCONFIRMRECYCLE = 32768
    SSF_HIDEICONS = 16384
    SSF_FILTER = 65536
    SSF_WEBVIEW = 131072
    SSF_SHOWSUPERHIDDEN = 262144
    SSF_SEPPROCESS = 524288
    SSF_NONETCRAWLING = 1048576
    SSF_STARTPANELON = 2097152
    SSF_SHOWSTARTPAGE = 4194304
    SSF_AUTOCHECKSELECT = 8388608
    SSF_ICONSONLY = 16777216
    SSF_SHOWTYPEOVERLAY = 33554432
    SSF_SHOWSTATUSBAR = 67108864
  end

  enum NOTIFY_ICON_MESSAGE : UInt32
    NIM_ADD = 0
    NIM_MODIFY = 1
    NIM_DELETE = 2
    NIM_SETFOCUS = 3
    NIM_SETVERSION = 4
  end

  enum NOTIFY_ICON_DATA_FLAGS : UInt32
    NIF_MESSAGE = 1
    NIF_ICON = 2
    NIF_TIP = 4
    NIF_STATE = 8
    NIF_INFO = 16
    NIF_GUID = 32
    NIF_REALTIME = 64
    NIF_SHOWTIP = 128
  end

  enum OS : UInt32
    OS_WINDOWS = 0
    OS_NT = 1
    OS_WIN95ORGREATER = 2
    OS_NT4ORGREATER = 3
    OS_WIN98ORGREATER = 5
    OS_WIN98_GOLD = 6
    OS_WIN2000ORGREATER = 7
    OS_WIN2000PRO = 8
    OS_WIN2000SERVER = 9
    OS_WIN2000ADVSERVER = 10
    OS_WIN2000DATACENTER = 11
    OS_WIN2000TERMINAL = 12
    OS_EMBEDDED = 13
    OS_TERMINALCLIENT = 14
    OS_TERMINALREMOTEADMIN = 15
    OS_WIN95_GOLD = 16
    OS_MEORGREATER = 17
    OS_XPORGREATER = 18
    OS_HOME = 19
    OS_PROFESSIONAL = 20
    OS_DATACENTER = 21
    OS_ADVSERVER = 22
    OS_SERVER = 23
    OS_TERMINALSERVER = 24
    OS_PERSONALTERMINALSERVER = 25
    OS_FASTUSERSWITCHING = 26
    OS_WELCOMELOGONUI = 27
    OS_DOMAINMEMBER = 28
    OS_ANYSERVER = 29
    OS_WOW6432 = 30
    OS_WEBSERVER = 31
    OS_SMALLBUSINESSSERVER = 32
    OS_TABLETPC = 33
    OS_SERVERADMINUI = 34
    OS_MEDIACENTER = 35
    OS_APPLIANCE = 36
  end

  enum SHGDNF : Int32
    SHGDN_NORMAL = 0
    SHGDN_INFOLDER = 1
    SHGDN_FOREDITING = 4096
    SHGDN_FORADDRESSBAR = 16384
    SHGDN_FORPARSING = 32768
  end

  enum SHCONTF : Int32
    SHCONTF_CHECKING_FOR_CHILDREN = 16
    SHCONTF_FOLDERS = 32
    SHCONTF_NONFOLDERS = 64
    SHCONTF_INCLUDEHIDDEN = 128
    SHCONTF_INIT_ON_FIRST_NEXT = 256
    SHCONTF_NETPRINTERSRCH = 512
    SHCONTF_SHAREABLE = 1024
    SHCONTF_STORAGE = 2048
    SHCONTF_NAVIGATION_ENUM = 4096
    SHCONTF_FASTITEMS = 8192
    SHCONTF_FLATLIST = 16384
    SHCONTF_ENABLE_ASYNC = 32768
    SHCONTF_INCLUDESUPERHIDDEN = 65536
  end

  enum STORAGE_PROVIDER_FILE_FLAGS : Int32
    SPFF_NONE = 0
    SPFF_DOWNLOAD_BY_DEFAULT = 1
    SPFF_CREATED_ON_THIS_DEVICE = 2
  end

  enum MERGE_UPDATE_STATUS : Int32
    MUS_COMPLETE = 0
    MUS_USERINPUTNEEDED = 1
    MUS_FAILED = 2
  end

  enum FOLDER_ENUM_MODE : Int32
    FEM_VIEWRESULT = 0
    FEM_NAVIGATION = 1
  end

  enum FOLDERFLAGS : Int32
    FWF_NONE = 0
    FWF_AUTOARRANGE = 1
    FWF_ABBREVIATEDNAMES = 2
    FWF_SNAPTOGRID = 4
    FWF_OWNERDATA = 8
    FWF_BESTFITWINDOW = 16
    FWF_DESKTOP = 32
    FWF_SINGLESEL = 64
    FWF_NOSUBFOLDERS = 128
    FWF_TRANSPARENT = 256
    FWF_NOCLIENTEDGE = 512
    FWF_NOSCROLL = 1024
    FWF_ALIGNLEFT = 2048
    FWF_NOICONS = 4096
    FWF_SHOWSELALWAYS = 8192
    FWF_NOVISIBLE = 16384
    FWF_SINGLECLICKACTIVATE = 32768
    FWF_NOWEBVIEW = 65536
    FWF_HIDEFILENAMES = 131072
    FWF_CHECKSELECT = 262144
    FWF_NOENUMREFRESH = 524288
    FWF_NOGROUPING = 1048576
    FWF_FULLROWSELECT = 2097152
    FWF_NOFILTERS = 4194304
    FWF_NOCOLUMNHEADER = 8388608
    FWF_NOHEADERINALLVIEWS = 16777216
    FWF_EXTENDEDTILES = 33554432
    FWF_TRICHECKSELECT = 67108864
    FWF_AUTOCHECKSELECT = 134217728
    FWF_NOBROWSERVIEWSTATE = 268435456
    FWF_SUBSETGROUPS = 536870912
    FWF_USESEARCHFOLDER = 1073741824
    FWF_ALLOWRTLREADING = -2147483648
  end

  enum FOLDERVIEWMODE : Int32
    FVM_AUTO = -1
    FVM_FIRST = 1
    FVM_ICON = 1
    FVM_SMALLICON = 2
    FVM_LIST = 3
    FVM_DETAILS = 4
    FVM_THUMBNAIL = 5
    FVM_TILE = 6
    FVM_THUMBSTRIP = 7
    FVM_CONTENT = 8
    FVM_LAST = 8
  end

  enum FOLDERLOGICALVIEWMODE : Int32
    FLVM_UNSPECIFIED = -1
    FLVM_FIRST = 1
    FLVM_DETAILS = 1
    FLVM_TILES = 2
    FLVM_ICONS = 3
    FLVM_LIST = 4
    FLVM_CONTENT = 5
    FLVM_LAST = 5
  end

  enum SVSIF : Int32
    SVSI_DESELECT = 0
    SVSI_SELECT = 1
    SVSI_EDIT = 3
    SVSI_DESELECTOTHERS = 4
    SVSI_ENSUREVISIBLE = 8
    SVSI_FOCUSED = 16
    SVSI_TRANSLATEPT = 32
    SVSI_SELECTIONMARK = 64
    SVSI_POSITIONITEM = 128
    SVSI_CHECK = 256
    SVSI_CHECK2 = 512
    SVSI_KEYBOARDSELECT = 1025
    SVSI_NOTAKEFOCUS = 1073741824
  end

  enum SVGIO : Int32
    SVGIO_BACKGROUND = 0
    SVGIO_SELECTION = 1
    SVGIO_ALLVIEW = 2
    SVGIO_CHECKED = 3
    SVGIO_TYPE_MASK = 15
    SVGIO_FLAG_VIEWORDER = -2147483648
  end

  enum SVUIA_STATUS : Int32
    SVUIA_DEACTIVATE = 0
    SVUIA_ACTIVATE_NOFOCUS = 1
    SVUIA_ACTIVATE_FOCUS = 2
    SVUIA_INPLACEACTIVATE = 3
  end

  enum SORTDIRECTION : Int32
    SORT_DESCENDING = -1
    SORT_ASCENDING = 1
  end

  enum FVTEXTTYPE : Int32
    FVST_EMPTYTEXT = 0
  end

  enum CM_MASK : Int32
    CM_MASK_WIDTH = 1
    CM_MASK_DEFAULTWIDTH = 2
    CM_MASK_IDEALWIDTH = 4
    CM_MASK_NAME = 8
    CM_MASK_STATE = 16
  end

  enum CM_STATE : Int32
    CM_STATE_NONE = 0
    CM_STATE_VISIBLE = 1
    CM_STATE_FIXEDWIDTH = 2
    CM_STATE_NOSORTBYFOLDERNESS = 4
    CM_STATE_ALWAYSVISIBLE = 8
  end

  enum CM_ENUM_FLAGS : Int32
    CM_ENUM_ALL = 1
    CM_ENUM_VISIBLE = 2
  end

  enum CM_SET_WIDTH_VALUE : Int32
    CM_WIDTH_USEDEFAULT = -1
    CM_WIDTH_AUTOSIZE = -2
  end

  enum SIGDN : Int32
    SIGDN_NORMALDISPLAY = 0
    SIGDN_PARENTRELATIVEPARSING = -2147385343
    SIGDN_DESKTOPABSOLUTEPARSING = -2147319808
    SIGDN_PARENTRELATIVEEDITING = -2147282943
    SIGDN_DESKTOPABSOLUTEEDITING = -2147172352
    SIGDN_FILESYSPATH = -2147123200
    SIGDN_URL = -2147057664
    SIGDN_PARENTRELATIVEFORADDRESSBAR = -2146975743
    SIGDN_PARENTRELATIVE = -2146959359
    SIGDN_PARENTRELATIVEFORUI = -2146877439
  end

  enum SICHINTF : Int32
    SICHINT_DISPLAY = 0
    SICHINT_ALLFIELDS = -2147483648
    SICHINT_CANONICAL = 268435456
    SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = 536870912
  end

  enum DATAOBJ_GET_ITEM_FLAGS : Int32
    DOGIF_DEFAULT = 0
    DOGIF_TRAVERSE_LINK = 1
    DOGIF_NO_HDROP = 2
    DOGIF_NO_URL = 4
    DOGIF_ONLY_IF_ONE = 8
  end

  enum SIIGBF : Int32
    SIIGBF_RESIZETOFIT = 0
    SIIGBF_BIGGERSIZEOK = 1
    SIIGBF_MEMORYONLY = 2
    SIIGBF_ICONONLY = 4
    SIIGBF_THUMBNAILONLY = 8
    SIIGBF_INCACHEONLY = 16
    SIIGBF_CROPTOSQUARE = 32
    SIIGBF_WIDETHUMBNAILS = 64
    SIIGBF_ICONBACKGROUND = 128
    SIIGBF_SCALEUP = 256
  end

  enum STGOP : Int32
    STGOP_MOVE = 1
    STGOP_COPY = 2
    STGOP_SYNC = 3
    STGOP_REMOVE = 5
    STGOP_RENAME = 6
    STGOP_APPLYPROPERTIES = 8
    STGOP_NEW = 10
  end

  enum TRANSFER_SOURCE_FLAGS : Int32
    TSF_NORMAL = 0
    TSF_FAIL_EXIST = 0
    TSF_RENAME_EXIST = 1
    TSF_OVERWRITE_EXIST = 2
    TSF_ALLOW_DECRYPTION = 4
    TSF_NO_SECURITY = 8
    TSF_COPY_CREATION_TIME = 16
    TSF_COPY_WRITE_TIME = 32
    TSF_USE_FULL_ACCESS = 64
    TSF_DELETE_RECYCLE_IF_POSSIBLE = 128
    TSF_COPY_HARD_LINK = 256
    TSF_COPY_LOCALIZED_NAME = 512
    TSF_MOVE_AS_COPY_DELETE = 1024
    TSF_SUSPEND_SHELLEVENTS = 2048
  end

  enum TRANSFER_ADVISE_STATE : Int32
    TS_NONE = 0
    TS_PERFORMING = 1
    TS_PREPARING = 2
    TS_INDETERMINATE = 4
  end

  enum SIATTRIBFLAGS : Int32
    SIATTRIBFLAGS_AND = 1
    SIATTRIBFLAGS_OR = 2
    SIATTRIBFLAGS_APPCOMPAT = 3
    SIATTRIBFLAGS_MASK = 3
    SIATTRIBFLAGS_ALLITEMS = 16384
  end

  enum CATEGORYINFO_FLAGS : Int32
    CATINFO_NORMAL = 0
    CATINFO_COLLAPSED = 1
    CATINFO_HIDDEN = 2
    CATINFO_EXPANDED = 4
    CATINFO_NOHEADER = 8
    CATINFO_NOTCOLLAPSIBLE = 16
    CATINFO_NOHEADERCOUNT = 32
    CATINFO_SUBSETTED = 64
    CATINFO_SEPARATE_IMAGES = 128
    CATINFO_SHOWEMPTY = 256
  end

  enum CATSORT_FLAGS : Int32
    CATSORT_DEFAULT = 0
    CATSORT_NAME = 1
  end

  enum SLR_FLAGS : Int32
    SLR_NONE = 0
    SLR_NO_UI = 1
    SLR_ANY_MATCH = 2
    SLR_UPDATE = 4
    SLR_NOUPDATE = 8
    SLR_NOSEARCH = 16
    SLR_NOTRACK = 32
    SLR_NOLINKINFO = 64
    SLR_INVOKE_MSI = 128
    SLR_NO_UI_WITH_MSG_PUMP = 257
    SLR_OFFER_DELETE_WITHOUT_FILE = 512
    SLR_KNOWNFOLDER = 1024
    SLR_MACHINE_IN_LOCAL_TARGET = 2048
    SLR_UPDATE_MACHINE_AND_SID = 4096
    SLR_NO_OBJECT_ID = 8192
  end

  enum SLGP_FLAGS : Int32
    SLGP_SHORTPATH = 1
    SLGP_UNCPRIORITY = 2
    SLGP_RAWPATH = 4
    SLGP_RELATIVEPRIORITY = 8
  end

  enum SPINITF : Int32
    SPINITF_NORMAL = 0
    SPINITF_MODAL = 1
    SPINITF_NOMINIMIZE = 8
  end

  enum SPBEGINF : Int32
    SPBEGINF_NORMAL = 0
    SPBEGINF_AUTOTIME = 2
    SPBEGINF_NOPROGRESSBAR = 16
    SPBEGINF_MARQUEEPROGRESS = 32
    SPBEGINF_NOCANCELBUTTON = 64
  end

  enum SPACTION : Int32
    SPACTION_NONE = 0
    SPACTION_MOVING = 1
    SPACTION_COPYING = 2
    SPACTION_RECYCLING = 3
    SPACTION_APPLYINGATTRIBS = 4
    SPACTION_DOWNLOADING = 5
    SPACTION_SEARCHING_INTERNET = 6
    SPACTION_CALCULATING = 7
    SPACTION_UPLOADING = 8
    SPACTION_SEARCHING_FILES = 9
    SPACTION_DELETING = 10
    SPACTION_RENAMING = 11
    SPACTION_FORMATTING = 12
    SPACTION_COPY_MOVING = 13
  end

  enum SPTEXT : Int32
    SPTEXT_ACTIONDESCRIPTION = 1
    SPTEXT_ACTIONDETAIL = 2
  end

  enum EXPPS : Int32
    EXPPS_FILETYPES = 1
  end

  enum DESKBANDCID : Int32
    DBID_BANDINFOCHANGED = 0
    DBID_SHOWONLY = 1
    DBID_MAXIMIZEBAND = 2
    DBID_PUSHCHEVRON = 3
    DBID_DELAYINIT = 4
    DBID_FINISHINIT = 5
    DBID_SETWINDOWTHEME = 6
    DBID_PERMITAUTOHIDE = 7
  end

  enum THUMBBUTTONFLAGS : Int32
    THBF_ENABLED = 0
    THBF_DISABLED = 1
    THBF_DISMISSONCLICK = 2
    THBF_NOBACKGROUND = 4
    THBF_HIDDEN = 8
    THBF_NONINTERACTIVE = 16
  end

  enum THUMBBUTTONMASK : Int32
    THB_BITMAP = 1
    THB_ICON = 2
    THB_TOOLTIP = 4
    THB_FLAGS = 8
  end

  enum TBPFLAG : Int32
    TBPF_NOPROGRESS = 0
    TBPF_INDETERMINATE = 1
    TBPF_NORMAL = 2
    TBPF_ERROR = 4
    TBPF_PAUSED = 8
  end

  enum STPFLAG : Int32
    STPF_NONE = 0
    STPF_USEAPPTHUMBNAILALWAYS = 1
    STPF_USEAPPTHUMBNAILWHENACTIVE = 2
    STPF_USEAPPPEEKALWAYS = 4
    STPF_USEAPPPEEKWHENACTIVE = 8
  end

  enum EXPLORER_BROWSER_OPTIONS : Int32
    EBO_NONE = 0
    EBO_NAVIGATEONCE = 1
    EBO_SHOWFRAMES = 2
    EBO_ALWAYSNAVIGATE = 4
    EBO_NOTRAVELLOG = 8
    EBO_NOWRAPPERWINDOW = 16
    EBO_HTMLSHAREPOINTVIEW = 32
    EBO_NOBORDER = 64
    EBO_NOPERSISTVIEWSTATE = 128
  end

  enum EXPLORER_BROWSER_FILL_FLAGS : Int32
    EBF_NONE = 0
    EBF_SELECTFROMDATAOBJECT = 256
    EBF_NODROPTARGET = 512
  end

  enum OPPROGDLGF : Int32
    OPPROGDLG_DEFAULT = 0
    OPPROGDLG_ENABLEPAUSE = 128
    OPPROGDLG_ALLOWUNDO = 256
    OPPROGDLG_DONTDISPLAYSOURCEPATH = 512
    OPPROGDLG_DONTDISPLAYDESTPATH = 1024
    OPPROGDLG_NOMULTIDAYESTIMATES = 2048
    OPPROGDLG_DONTDISPLAYLOCATIONS = 4096
  end

  enum PDMODE : Int32
    PDM_DEFAULT = 0
    PDM_RUN = 1
    PDM_PREFLIGHT = 2
    PDM_UNDOING = 4
    PDM_ERRORSBLOCKING = 8
    PDM_INDETERMINATE = 16
  end

  enum FILE_OPERATION_FLAGS2 : Int32
    FOF2_NONE = 0
    FOF2_MERGEFOLDERSONCOLLISION = 1
  end

  enum NAMESPACEWALKFLAG : Int32
    NSWF_DEFAULT = 0
    NSWF_NONE_IMPLIES_ALL = 1
    NSWF_ONE_IMPLIES_ALL = 2
    NSWF_DONT_TRAVERSE_LINKS = 4
    NSWF_DONT_ACCUMULATE_RESULT = 8
    NSWF_TRAVERSE_STREAM_JUNCTIONS = 16
    NSWF_FILESYSTEM_ONLY = 32
    NSWF_SHOW_PROGRESS = 64
    NSWF_FLAG_VIEWORDER = 128
    NSWF_IGNORE_AUTOPLAY_HIDA = 256
    NSWF_ASYNC = 512
    NSWF_DONT_RESOLVE_LINKS = 1024
    NSWF_ACCUMULATE_FOLDERS = 2048
    NSWF_DONT_SORT = 4096
    NSWF_USE_TRANSFER_MEDIUM = 8192
    NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 16384
    NSWF_ANY_IMPLIES_ALL = 32768
  end

  enum BANDSITECID : Int32
    BSID_BANDADDED = 0
    BSID_BANDREMOVED = 1
  end

  enum MENUBANDHANDLERCID : Int32
    MBHANDCID_PIDLSELECT = 0
  end

  enum MENUPOPUPSELECT : Int32
    MPOS_EXECUTE = 0
    MPOS_FULLCANCEL = 1
    MPOS_CANCELLEVEL = 2
    MPOS_SELECTLEFT = 3
    MPOS_SELECTRIGHT = 4
    MPOS_CHILDTRACKING = 5
  end

  enum MENUPOPUPPOPUPFLAGS : Int32
    MPPF_SETFOCUS = 1
    MPPF_INITIALSELECT = 2
    MPPF_NOANIMATE = 4
    MPPF_KEYBOARD = 16
    MPPF_REPOSITION = 32
    MPPF_FORCEZORDER = 64
    MPPF_FINALSELECT = 128
    MPPF_TOP = 536870912
    MPPF_LEFT = 1073741824
    MPPF_RIGHT = 1610612736
    MPPF_BOTTOM = -2147483648
    MPPF_POS_MASK = -536870912
    MPPF_ALIGN_LEFT = 33554432
    MPPF_ALIGN_RIGHT = 67108864
  end

  enum FILE_USAGE_TYPE : Int32
    FUT_PLAYING = 0
    FUT_EDITING = 1
    FUT_GENERIC = 2
  end

  enum FDE_OVERWRITE_RESPONSE : Int32
    FDEOR_DEFAULT = 0
    FDEOR_ACCEPT = 1
    FDEOR_REFUSE = 2
  end

  enum FDE_SHAREVIOLATION_RESPONSE : Int32
    FDESVR_DEFAULT = 0
    FDESVR_ACCEPT = 1
    FDESVR_REFUSE = 2
  end

  enum FDAP : Int32
    FDAP_BOTTOM = 0
    FDAP_TOP = 1
  end

  enum FILEOPENDIALOGOPTIONS : Int32
    FOS_OVERWRITEPROMPT = 2
    FOS_STRICTFILETYPES = 4
    FOS_NOCHANGEDIR = 8
    FOS_PICKFOLDERS = 32
    FOS_FORCEFILESYSTEM = 64
    FOS_ALLNONSTORAGEITEMS = 128
    FOS_NOVALIDATE = 256
    FOS_ALLOWMULTISELECT = 512
    FOS_PATHMUSTEXIST = 2048
    FOS_FILEMUSTEXIST = 4096
    FOS_CREATEPROMPT = 8192
    FOS_SHAREAWARE = 16384
    FOS_NOREADONLYRETURN = 32768
    FOS_NOTESTFILECREATE = 65536
    FOS_HIDEMRUPLACES = 131072
    FOS_HIDEPINNEDPLACES = 262144
    FOS_NODEREFERENCELINKS = 1048576
    FOS_OKBUTTONNEEDSINTERACTION = 2097152
    FOS_DONTADDTORECENT = 33554432
    FOS_FORCESHOWHIDDEN = 268435456
    FOS_DEFAULTNOMINIMODE = 536870912
    FOS_FORCEPREVIEWPANEON = 1073741824
    FOS_SUPPORTSTREAMABLEITEMS = -2147483648
  end

  enum CDCONTROLSTATEF : Int32
    CDCS_INACTIVE = 0
    CDCS_ENABLED = 1
    CDCS_VISIBLE = 2
    CDCS_ENABLEDVISIBLE = 3
  end

  enum ASSOCIATIONLEVEL : Int32
    AL_MACHINE = 0
    AL_EFFECTIVE = 1
    AL_USER = 2
  end

  enum ASSOCIATIONTYPE : Int32
    AT_FILEEXTENSION = 0
    AT_URLPROTOCOL = 1
    AT_STARTMENUCLIENT = 2
    AT_MIMETYPE = 3
  end

  enum BROWSERFRAMEOPTIONS : Int32
    BFO_NONE = 0
    BFO_BROWSER_PERSIST_SETTINGS = 1
    BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 2
    BFO_BOTH_OPTIONS = 4
    BIF_PREFER_INTERNET_SHORTCUT = 8
    BFO_BROWSE_NO_IN_NEW_PROCESS = 16
    BFO_ENABLE_HYPERLINK_TRACKING = 32
    BFO_USE_IE_OFFLINE_SUPPORT = 64
    BFO_SUBSTITUE_INTERNET_START_PAGE = 128
    BFO_USE_IE_LOGOBANDING = 256
    BFO_ADD_IE_TOCAPTIONBAR = 512
    BFO_USE_DIALUP_REF = 1024
    BFO_USE_IE_TOOLBAR = 2048
    BFO_NO_PARENT_FOLDER_SUPPORT = 4096
    BFO_NO_REOPEN_NEXT_RESTART = 8192
    BFO_GO_HOME_PAGE = 16384
    BFO_PREFER_IEPROCESS = 32768
    BFO_SHOW_NAVIGATION_CANCELLED = 65536
    BFO_USE_IE_STATUSBAR = 131072
    BFO_QUERY_ALL = -1
  end

  enum NWMF : Int32
    NWMF_UNLOADING = 1
    NWMF_USERINITED = 2
    NWMF_FIRST = 4
    NWMF_OVERRIDEKEY = 8
    NWMF_SHOWHELP = 16
    NWMF_HTMLDIALOG = 32
    NWMF_FROMDIALOGCHILD = 64
    NWMF_USERREQUESTED = 128
    NWMF_USERALLOWED = 256
    NWMF_FORCEWINDOW = 65536
    NWMF_FORCETAB = 131072
    NWMF_SUGGESTWINDOW = 262144
    NWMF_SUGGESTTAB = 524288
    NWMF_INACTIVETAB = 1048576
  end

  enum ATTACHMENT_PROMPT : Int32
    ATTACHMENT_PROMPT_NONE = 0
    ATTACHMENT_PROMPT_SAVE = 1
    ATTACHMENT_PROMPT_EXEC = 2
    ATTACHMENT_PROMPT_EXEC_OR_SAVE = 3
  end

  enum ATTACHMENT_ACTION : Int32
    ATTACHMENT_ACTION_CANCEL = 0
    ATTACHMENT_ACTION_SAVE = 1
    ATTACHMENT_ACTION_EXEC = 2
  end

  enum SMINFOMASK : Int32
    SMIM_TYPE = 1
    SMIM_FLAGS = 2
    SMIM_ICON = 4
  end

  enum SMINFOTYPE : Int32
    SMIT_SEPARATOR = 1
    SMIT_STRING = 2
  end

  enum SMINFOFLAGS : Int32
    SMIF_ICON = 1
    SMIF_ACCELERATOR = 2
    SMIF_DROPTARGET = 4
    SMIF_SUBMENU = 8
    SMIF_CHECKED = 32
    SMIF_DROPCASCADE = 64
    SMIF_HIDDEN = 128
    SMIF_DISABLED = 256
    SMIF_TRACKPOPUP = 512
    SMIF_DEMOTED = 1024
    SMIF_ALTSTATE = 2048
    SMIF_DRAGNDROP = 4096
    SMIF_NEW = 8192
  end

  enum KF_CATEGORY : Int32
    KF_CATEGORY_VIRTUAL = 1
    KF_CATEGORY_FIXED = 2
    KF_CATEGORY_COMMON = 3
    KF_CATEGORY_PERUSER = 4
  end

  enum KF_DEFINITION_FLAGS : Int32
    KFDF_LOCAL_REDIRECT_ONLY = 2
    KFDF_ROAMABLE = 4
    KFDF_PRECREATE = 8
    KFDF_STREAM = 16
    KFDF_PUBLISHEXPANDEDPATH = 32
    KFDF_NO_REDIRECT_UI = 64
  end

  enum KF_REDIRECT_FLAGS : Int32
    KF_REDIRECT_USER_EXCLUSIVE = 1
    KF_REDIRECT_COPY_SOURCE_DACL = 2
    KF_REDIRECT_OWNER_USER = 4
    KF_REDIRECT_SET_OWNER_EXPLICIT = 8
    KF_REDIRECT_CHECK_ONLY = 16
    KF_REDIRECT_WITH_UI = 32
    KF_REDIRECT_UNPIN = 64
    KF_REDIRECT_PIN = 128
    KF_REDIRECT_COPY_CONTENTS = 512
    KF_REDIRECT_DEL_SOURCE_CONTENTS = 1024
    KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = 2048
  end

  enum KF_REDIRECTION_CAPABILITIES : Int32
    KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = 255
    KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = 1
    KF_REDIRECTION_CAPABILITIES_DENY_ALL = 1048320
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = 256
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY = 512
    KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = 1024
  end

  enum FFFP_MODE : Int32
    FFFP_EXACTMATCH = 0
    FFFP_NEARESTPARENTMATCH = 1
  end

  enum SHARE_ROLE : Int32
    SHARE_ROLE_INVALID = -1
    SHARE_ROLE_READER = 0
    SHARE_ROLE_CONTRIBUTOR = 1
    SHARE_ROLE_CO_OWNER = 2
    SHARE_ROLE_OWNER = 3
    SHARE_ROLE_CUSTOM = 4
    SHARE_ROLE_MIXED = 5
  end

  enum DEF_SHARE_ID : Int32
    DEFSHAREID_USERS = 1
    DEFSHAREID_PUBLIC = 2
  end

  enum NMCII_FLAGS : Int32
    NMCII_NONE = 0
    NMCII_ITEMS = 1
    NMCII_FOLDERS = 2
  end

  enum NMCSAEI_FLAGS : Int32
    NMCSAEI_SELECT = 0
    NMCSAEI_EDIT = 1
  end

  enum NSTCSTYLE : Int32
    NSTCS_HASEXPANDOS = 1
    NSTCS_HASLINES = 2
    NSTCS_SINGLECLICKEXPAND = 4
    NSTCS_FULLROWSELECT = 8
    NSTCS_SPRINGEXPAND = 16
    NSTCS_HORIZONTALSCROLL = 32
    NSTCS_ROOTHASEXPANDO = 64
    NSTCS_SHOWSELECTIONALWAYS = 128
    NSTCS_NOINFOTIP = 512
    NSTCS_EVENHEIGHT = 1024
    NSTCS_NOREPLACEOPEN = 2048
    NSTCS_DISABLEDRAGDROP = 4096
    NSTCS_NOORDERSTREAM = 8192
    NSTCS_RICHTOOLTIP = 16384
    NSTCS_BORDER = 32768
    NSTCS_NOEDITLABELS = 65536
    NSTCS_TABSTOP = 131072
    NSTCS_FAVORITESMODE = 524288
    NSTCS_AUTOHSCROLL = 1048576
    NSTCS_FADEINOUTEXPANDOS = 2097152
    NSTCS_EMPTYTEXT = 4194304
    NSTCS_CHECKBOXES = 8388608
    NSTCS_PARTIALCHECKBOXES = 16777216
    NSTCS_EXCLUSIONCHECKBOXES = 33554432
    NSTCS_DIMMEDCHECKBOXES = 67108864
    NSTCS_NOINDENTCHECKS = 134217728
    NSTCS_ALLOWJUNCTIONS = 268435456
    NSTCS_SHOWTABSBUTTON = 536870912
    NSTCS_SHOWDELETEBUTTON = 1073741824
    NSTCS_SHOWREFRESHBUTTON = -2147483648
  end

  enum NSTCROOTSTYLE : Int32
    NSTCRS_VISIBLE = 0
    NSTCRS_HIDDEN = 1
    NSTCRS_EXPANDED = 2
  end

  enum NSTCITEMSTATE : Int32
    NSTCIS_NONE = 0
    NSTCIS_SELECTED = 1
    NSTCIS_EXPANDED = 2
    NSTCIS_BOLD = 4
    NSTCIS_DISABLED = 8
    NSTCIS_SELECTEDNOEXPAND = 16
  end

  enum NSTCGNI : Int32
    NSTCGNI_NEXT = 0
    NSTCGNI_NEXTVISIBLE = 1
    NSTCGNI_PREV = 2
    NSTCGNI_PREVVISIBLE = 3
    NSTCGNI_PARENT = 4
    NSTCGNI_CHILD = 5
    NSTCGNI_FIRSTVISIBLE = 6
    NSTCGNI_LASTVISIBLE = 7
  end

  enum NSTCFOLDERCAPABILITIES : Int32
    NSTCFC_NONE = 0
    NSTCFC_PINNEDITEMFILTERING = 1
    NSTCFC_DELAY_REGISTER_NOTIFY = 2
  end

  enum EXPLORERPANESTATE : Int32
    EPS_DONTCARE = 0
    EPS_DEFAULT_ON = 1
    EPS_DEFAULT_OFF = 2
    EPS_STATEMASK = 65535
    EPS_INITIALSTATE = 65536
    EPS_FORCE = 131072
  end

  enum EXPCMDSTATE : Int32
    ECS_ENABLED = 0
    ECS_DISABLED = 1
    ECS_HIDDEN = 2
    ECS_CHECKBOX = 4
    ECS_CHECKED = 8
    ECS_RADIOCHECK = 16
  end

  enum EXPCMDFLAGS : Int32
    ECF_DEFAULT = 0
    ECF_HASSUBCOMMANDS = 1
    ECF_HASSPLITBUTTON = 2
    ECF_HIDELABEL = 4
    ECF_ISSEPARATOR = 8
    ECF_HASLUASHIELD = 16
    ECF_SEPARATORBEFORE = 32
    ECF_SEPARATORAFTER = 64
    ECF_ISDROPDOWN = 128
    ECF_TOGGLEABLE = 256
    ECF_AUTOMENUICONS = 512
  end

  enum CPVIEW : Int32
    CPVIEW_CLASSIC = 0
    CPVIEW_ALLITEMS = 0
    CPVIEW_CATEGORY = 1
    CPVIEW_HOME = 1
  end

  enum KNOWNDESTCATEGORY : Int32
    KDC_FREQUENT = 1
    KDC_RECENT = 2
  end

  enum APPDOCLISTTYPE : Int32
    ADLT_RECENT = 0
    ADLT_FREQUENT = 1
  end

  enum DESKTOP_SLIDESHOW_OPTIONS : Int32
    DSO_SHUFFLEIMAGES = 1
  end

  enum DESKTOP_SLIDESHOW_STATE : Int32
    DSS_ENABLED = 1
    DSS_SLIDESHOW = 2
    DSS_DISABLED_BY_REMOTE_SESSION = 4
  end

  enum DESKTOP_SLIDESHOW_DIRECTION : Int32
    DSD_FORWARD = 0
    DSD_BACKWARD = 1
  end

  enum DESKTOP_WALLPAPER_POSITION : Int32
    DWPOS_CENTER = 0
    DWPOS_TILE = 1
    DWPOS_STRETCH = 2
    DWPOS_FIT = 3
    DWPOS_FILL = 4
    DWPOS_SPAN = 5
  end

  enum HOMEGROUPSHARINGCHOICES : Int32
    HGSC_NONE = 0
    HGSC_MUSICLIBRARY = 1
    HGSC_PICTURESLIBRARY = 2
    HGSC_VIDEOSLIBRARY = 4
    HGSC_DOCUMENTSLIBRARY = 8
    HGSC_PRINTERS = 16
  end

  enum LIBRARYFOLDERFILTER : Int32
    LFF_FORCEFILESYSTEM = 1
    LFF_STORAGEITEMS = 2
    LFF_ALLITEMS = 3
  end

  enum LIBRARYOPTIONFLAGS : Int32
    LOF_DEFAULT = 0
    LOF_PINNEDTONAVPANE = 1
    LOF_MASK_ALL = 1
  end

  enum DEFAULTSAVEFOLDERTYPE : Int32
    DSFT_DETECT = 1
    DSFT_PRIVATE = 2
    DSFT_PUBLIC = 3
  end

  enum LIBRARYSAVEFLAGS : Int32
    LSF_FAILIFTHERE = 0
    LSF_OVERRIDEEXISTING = 1
    LSF_MAKEUNIQUENAME = 2
  end

  enum DEFAULT_FOLDER_MENU_RESTRICTIONS : Int32
    DFMR_DEFAULT = 0
    DFMR_NO_STATIC_VERBS = 8
    DFMR_STATIC_VERBS_ONLY = 16
    DFMR_NO_RESOURCE_VERBS = 32
    DFMR_OPTIN_HANDLERS_ONLY = 64
    DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = 128
    DFMR_USE_SPECIFIED_HANDLERS = 256
    DFMR_USE_SPECIFIED_VERBS = 512
    DFMR_NO_ASYNC_VERBS = 1024
    DFMR_NO_NATIVECPU_VERBS = 2048
    DFMR_NO_NONWOW_VERBS = 4096
  end

  enum ACTIVATEOPTIONS : Int32
    AO_NONE = 0
    AO_DESIGNMODE = 1
    AO_NOERRORUI = 2
    AO_NOSPLASHSCREEN = 4
    AO_PRELAUNCH = 33554432
  end

  enum LIBRARYMANAGEDIALOGOPTIONS : Int32
    LMD_DEFAULT = 0
    LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = 1
  end

  enum AHTYPE : Int32
    AHTYPE_UNDEFINED = 0
    AHTYPE_USER_APPLICATION = 8
    AHTYPE_ANY_APPLICATION = 16
    AHTYPE_MACHINEDEFAULT = 32
    AHTYPE_PROGID = 64
    AHTYPE_APPLICATION = 128
    AHTYPE_CLASS_APPLICATION = 256
    AHTYPE_ANY_PROGID = 512
  end

  enum ASSOC_FILTER : Int32
    ASSOC_FILTER_NONE = 0
    ASSOC_FILTER_RECOMMENDED = 1
  end

  enum MONITOR_APP_VISIBILITY : Int32
    MAV_UNKNOWN = 0
    MAV_NO_APP_VISIBLE = 1
    MAV_APP_VISIBLE = 2
  end

  enum PACKAGE_EXECUTION_STATE : Int32
    PES_UNKNOWN = 0
    PES_RUNNING = 1
    PES_SUSPENDING = 2
    PES_SUSPENDED = 3
    PES_TERMINATED = 4
  end

  enum AHE_TYPE : Int32
    AHE_DESKTOP = 0
    AHE_IMMERSIVE = 1
  end

  enum EC_HOST_UI_MODE : Int32
    ECHUIM_DESKTOP = 0
    ECHUIM_IMMERSIVE = 1
    ECHUIM_SYSTEM_LAUNCHER = 2
  end

  enum APPLICATION_VIEW_STATE : Int32
    AVS_FULLSCREEN_LANDSCAPE = 0
    AVS_FILLED = 1
    AVS_SNAPPED = 2
    AVS_FULLSCREEN_PORTRAIT = 3
  end

  enum EDGE_GESTURE_KIND : Int32
    EGK_TOUCH = 0
    EGK_KEYBOARD = 1
    EGK_MOUSE = 2
  end

  enum NATIVE_DISPLAY_ORIENTATION : Int32
    NDO_LANDSCAPE = 0
    NDO_PORTRAIT = 1
  end

  enum APPLICATION_VIEW_ORIENTATION : Int32
    AVO_LANDSCAPE = 0
    AVO_PORTRAIT = 1
  end

  enum ADJACENT_DISPLAY_EDGES : Int32
    ADE_NONE = 0
    ADE_LEFT = 1
    ADE_RIGHT = 2
  end

  enum APPLICATION_VIEW_MIN_WIDTH : Int32
    AVMW_DEFAULT = 0
    AVMW_320 = 1
    AVMW_500 = 2
  end

  enum APPLICATION_VIEW_SIZE_PREFERENCE : Int32
    AVSP_DEFAULT = 0
    AVSP_USE_LESS = 1
    AVSP_USE_HALF = 2
    AVSP_USE_MORE = 3
    AVSP_USE_MINIMUM = 4
    AVSP_USE_NONE = 5
    AVSP_CUSTOM = 6
  end

  enum FLYOUT_PLACEMENT : Int32
    FP_DEFAULT = 0
    FP_ABOVE = 1
    FP_BELOW = 2
    FP_LEFT = 3
    FP_RIGHT = 4
  end

  enum BANNER_NOTIFICATION_EVENT : Int32
    BNE_Rendered = 0
    BNE_Hovered = 1
    BNE_Closed = 2
    BNE_Dismissed = 3
    BNE_Button1Clicked = 4
    BNE_Button2Clicked = 5
  end

  enum SORT_ORDER_TYPE : Int32
    SOT_DEFAULT = 0
    SOT_IGNORE_FOLDERNESS = 1
  end

  enum FOLDERVIEWOPTIONS : Int32
    FVO_DEFAULT = 0
    FVO_VISTALAYOUT = 1
    FVO_CUSTOMPOSITION = 2
    FVO_CUSTOMORDERING = 4
    FVO_SUPPORTHYPERLINKS = 8
    FVO_NOANIMATIONS = 16
    FVO_NOSCROLLTIPS = 32
  end

  enum SV3CVW3_FLAGS : Int32
    SV3CVW3_DEFAULT = 0
    SV3CVW3_NONINTERACTIVE = 1
    SV3CVW3_FORCEVIEWMODE = 2
    SV3CVW3_FORCEFOLDERFLAGS = 4
  end

  enum VPWATERMARKFLAGS : Int32
    VPWF_DEFAULT = 0
    VPWF_ALPHABLEND = 1
  end

  enum VPCOLORFLAGS : Int32
    VPCF_TEXT = 1
    VPCF_BACKGROUND = 2
    VPCF_SORTCOLUMN = 3
    VPCF_SUBTEXT = 4
    VPCF_TEXTBACKGROUND = 5
  end

  enum DSH_FLAGS : Int32
    DSH_ALLOWDROPDESCRIPTIONTEXT = 1
  end

  enum CDBURNINGEXTENSIONRET : Int32
    CDBE_RET_DEFAULT = 0
    CDBE_RET_DONTRUNOTHEREXTS = 1
    CDBE_RET_STOPWIZARD = 2
  end

  enum CDBE_ACTIONS : Int32
    CDBE_TYPE_MUSIC = 1
    CDBE_TYPE_DATA = 2
    CDBE_TYPE_ALL = -1
  end

  enum NSTCSTYLE2 : Int32
    NSTCS2_DEFAULT = 0
    NSTCS2_INTERRUPTNOTIFICATIONS = 1
    NSTCS2_SHOWNULLSPACEMENU = 2
    NSTCS2_DISPLAYPADDING = 4
    NSTCS2_DISPLAYPINNEDONLY = 8
    NTSCS2_NOSINGLETONAUTOEXPAND = 16
    NTSCS2_NEVERINSERTNONENUMERATED = 32
  end

  enum NSTCEHITTEST : Int32
    NSTCEHT_NOWHERE = 1
    NSTCEHT_ONITEMICON = 2
    NSTCEHT_ONITEMLABEL = 4
    NSTCEHT_ONITEMINDENT = 8
    NSTCEHT_ONITEMBUTTON = 16
    NSTCEHT_ONITEMRIGHT = 32
    NSTCEHT_ONITEMSTATEICON = 64
    NSTCEHT_ONITEM = 70
    NSTCEHT_ONITEMTABBUTTON = 4096
  end

  enum NSTCECLICKTYPE : Int32
    NSTCECT_LBUTTON = 1
    NSTCECT_MBUTTON = 2
    NSTCECT_RBUTTON = 3
    NSTCECT_BUTTON = 3
    NSTCECT_DBLCLICK = 4
  end

  enum UNDOCK_REASON : Int32
    UR_RESOLUTION_CHANGE = 0
    UR_MONITOR_DISCONNECT = 1
  end

  enum CommandStateChangeConstants : Int32
    CSC_UPDATECOMMANDS = -1
    CSC_NAVIGATEFORWARD = 1
    CSC_NAVIGATEBACK = 2
  end

  enum SecureLockIconConstants : Int32
    Securelockiconunsecure = 0
    Securelockiconmixed = 1
    Securelockiconsecureunknownbits = 2
    Securelockiconsecure40bit = 3
    Securelockiconsecure56bit = 4
    Securelockiconsecurefortezza = 5
    Securelockiconsecure128bit = 6
  end

  enum NewProcessCauseConstants : Int32
    ProtectedModeRedirect = 1
  end

  enum ShellWindowTypeConstants : Int32
    SWC_EXPLORER = 0
    SWC_BROWSER = 1
    SWC_3RDPARTY = 2
    SWC_CALLBACK = 4
    SWC_DESKTOP = 8
  end

  enum ShellWindowFindWindowOptions : Int32
    SWFO_NEEDDISPATCH = 1
    SWFO_INCLUDEPENDING = 2
    SWFO_COOKIEPASSED = 4
  end

  enum BrowserNavConstants : Int32
    Navopeninnewwindow = 1
    Navnohistory = 2
    Navnoreadfromcache = 4
    Navnowritetocache = 8
    Navallowautosearch = 16
    Navbrowserbar = 32
    Navhyperlink = 64
    Navenforcerestricted = 128
    Navnewwindowsmanaged = 256
    Navuntrustedfordownload = 512
    Navtrustedforactivex = 1024
    Navopeninnewtab = 2048
    Navopeninbackgroundtab = 4096
    Navkeepwordwheeltext = 8192
    Navvirtualtab = 16384
    Navblockredirectsxdomain = 32768
    Navopennewforegroundtab = 65536
    Navtravellogscreenshot = 131072
    Navdeferunload = 262144
    Navspeculative = 524288
    Navsuggestnewwindow = 1048576
    Navsuggestnewtab = 2097152
    Navreserved1 = 4194304
    Navhomepagenavigate = 8388608
    Navrefresh = 16777216
    Navhostnavigation = 33554432
    Navreserved2 = 67108864
    Navreserved3 = 134217728
    Navreserved4 = 268435456
    Navreserved5 = 536870912
    Navreserved6 = 1073741824
    Navreserved7 = -2147483648
  end

  enum RefreshConstants : Int32
    REFRESH_NORMAL = 0
    REFRESH_IFEXPIRED = 1
    REFRESH_COMPLETELY = 3
  end

  enum OfflineFolderStatus : Int32
    OFS_INACTIVE = -1
    OFS_ONLINE = 0
    OFS_OFFLINE = 1
    OFS_SERVERBACK = 2
    OFS_DIRTYCACHE = 3
  end

  enum ShellFolderViewOptions : Int32
    SFVVO_SHOWALLOBJECTS = 1
    SFVVO_SHOWEXTENSIONS = 2
    SFVVO_SHOWCOMPCOLOR = 8
    SFVVO_SHOWSYSFILES = 32
    SFVVO_WIN95CLASSIC = 64
    SFVVO_DOUBLECLICKINWEBVIEW = 128
    SFVVO_DESKTOPHTML = 512
  end

  enum ShellSpecialFolderConstants : Int32
    Ssfdesktop = 0
    Ssfprograms = 2
    Ssfcontrols = 3
    Ssfprinters = 4
    Ssfpersonal = 5
    Ssffavorites = 6
    Ssfstartup = 7
    Ssfrecent = 8
    Ssfsendto = 9
    Ssfbitbucket = 10
    Ssfstartmenu = 11
    Ssfdesktopdirectory = 16
    Ssfdrives = 17
    Ssfnetwork = 18
    Ssfnethood = 19
    Ssffonts = 20
    Ssftemplates = 21
    Ssfcommonstartmenu = 22
    Ssfcommonprograms = 23
    Ssfcommonstartup = 24
    Ssfcommondesktopdir = 25
    Ssfappdata = 26
    Ssfprinthood = 27
    Ssflocalappdata = 28
    Ssfaltstartup = 29
    Ssfcommonaltstartup = 30
    Ssfcommonfavorites = 31
    Ssfinternetcache = 32
    Ssfcookies = 33
    Ssfhistory = 34
    Ssfcommonappdata = 35
    Ssfwindows = 36
    Ssfsystem = 37
    Ssfprogramfiles = 38
    Ssfmypictures = 39
    Ssfprofile = 40
    Ssfsystemx86 = 41
    Ssfprogramfilesx86 = 48
  end

  enum AUTOCOMPLETEOPTIONS : Int32
    ACO_NONE = 0
    ACO_AUTOSUGGEST = 1
    ACO_AUTOAPPEND = 2
    ACO_SEARCH = 4
    ACO_FILTERPREFIXES = 8
    ACO_USETAB = 16
    ACO_UPDOWNKEYDROPSLIST = 32
    ACO_RTLREADING = 64
    ACO_WORD_FILTER = 128
    ACO_NOPREFIXFILTERING = 256
  end

  enum ACENUMOPTION : Int32
    ACEO_NONE = 0
    ACEO_MOSTRECENTFIRST = 1
    ACEO_FIRSTUNUSED = 65536
  end

  enum SHELL_LINK_DATA_FLAGS : Int32
    SLDF_DEFAULT = 0
    SLDF_HAS_ID_LIST = 1
    SLDF_HAS_LINK_INFO = 2
    SLDF_HAS_NAME = 4
    SLDF_HAS_RELPATH = 8
    SLDF_HAS_WORKINGDIR = 16
    SLDF_HAS_ARGS = 32
    SLDF_HAS_ICONLOCATION = 64
    SLDF_UNICODE = 128
    SLDF_FORCE_NO_LINKINFO = 256
    SLDF_HAS_EXP_SZ = 512
    SLDF_RUN_IN_SEPARATE = 1024
    SLDF_HAS_DARWINID = 4096
    SLDF_RUNAS_USER = 8192
    SLDF_HAS_EXP_ICON_SZ = 16384
    SLDF_NO_PIDL_ALIAS = 32768
    SLDF_FORCE_UNCNAME = 65536
    SLDF_RUN_WITH_SHIMLAYER = 131072
    SLDF_FORCE_NO_LINKTRACK = 262144
    SLDF_ENABLE_TARGET_METADATA = 524288
    SLDF_DISABLE_LINK_PATH_TRACKING = 1048576
    SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 2097152
    SLDF_NO_KF_ALIAS = 4194304
    SLDF_ALLOW_LINK_TO_LINK = 8388608
    SLDF_UNALIAS_ON_SAVE = 16777216
    SLDF_PREFER_ENVIRONMENT_PATH = 33554432
    SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = 67108864
    SLDF_PERSIST_VOLUME_ID_RELATIVE = 134217728
    SLDF_VALID = 268433407
    SLDF_RESERVED = -2147483648
  end

  enum SHGFP_TYPE : Int32
    SHGFP_TYPE_CURRENT = 0
    SHGFP_TYPE_DEFAULT = 1
  end

  enum KNOWN_FOLDER_FLAG : Int32
    KF_FLAG_DEFAULT = 0
    KF_FLAG_FORCE_APP_DATA_REDIRECTION = 524288
    KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 262144
    KF_FLAG_FORCE_PACKAGE_REDIRECTION = 131072
    KF_FLAG_NO_PACKAGE_REDIRECTION = 65536
    KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = 131072
    KF_FLAG_NO_APPCONTAINER_REDIRECTION = 65536
    KF_FLAG_CREATE = 32768
    KF_FLAG_DONT_VERIFY = 16384
    KF_FLAG_DONT_UNEXPAND = 8192
    KF_FLAG_NO_ALIAS = 4096
    KF_FLAG_INIT = 2048
    KF_FLAG_DEFAULT_PATH = 1024
    KF_FLAG_NOT_PARENT_RELATIVE = 512
    KF_FLAG_SIMPLE_IDLIST = 256
    KF_FLAG_ALIAS_ONLY = -2147483648
  end

  enum AUTOCOMPLETELISTOPTIONS : Int32
    ACLO_NONE = 0
    ACLO_CURRENTDIR = 1
    ACLO_MYCOMPUTER = 2
    ACLO_DESKTOP = 4
    ACLO_FAVORITES = 8
    ACLO_FILESYSONLY = 16
    ACLO_FILESYSDIRS = 32
    ACLO_VIRTUALNAMESPACE = 64
  end

  enum FD_FLAGS : Int32
    FD_CLSID = 1
    FD_SIZEPOINT = 2
    FD_ATTRIBUTES = 4
    FD_CREATETIME = 8
    FD_ACCESSTIME = 16
    FD_WRITESTIME = 32
    FD_FILESIZE = 64
    FD_PROGRESSUI = 16384
    FD_LINKUI = 32768
    FD_UNICODE = -2147483648
  end

  enum DROPIMAGETYPE : Int32
    DROPIMAGE_INVALID = -1
    DROPIMAGE_NONE = 0
    DROPIMAGE_COPY = 1
    DROPIMAGE_MOVE = 2
    DROPIMAGE_LINK = 4
    DROPIMAGE_LABEL = 6
    DROPIMAGE_WARNING = 7
    DROPIMAGE_NOIMAGE = 8
  end

  enum SHARD : Int32
    SHARD_PIDL = 1
    SHARD_PATHA = 2
    SHARD_PATHW = 3
    SHARD_APPIDINFO = 4
    SHARD_APPIDINFOIDLIST = 5
    SHARD_LINK = 6
    SHARD_APPIDINFOLINK = 7
    SHARD_SHELLITEM = 8
  end

  enum SCNRT_STATUS : Int32
    SCNRT_ENABLE = 0
    SCNRT_DISABLE = 1
  end

  enum RESTRICTIONS : Int32
    REST_NONE = 0
    REST_NORUN = 1
    REST_NOCLOSE = 2
    REST_NOSAVESET = 4
    REST_NOFILEMENU = 8
    REST_NOSETFOLDERS = 16
    REST_NOSETTASKBAR = 32
    REST_NODESKTOP = 64
    REST_NOFIND = 128
    REST_NODRIVES = 256
    REST_NODRIVEAUTORUN = 512
    REST_NODRIVETYPEAUTORUN = 1024
    REST_NONETHOOD = 2048
    REST_STARTBANNER = 4096
    REST_RESTRICTRUN = 8192
    REST_NOPRINTERTABS = 16384
    REST_NOPRINTERDELETE = 32768
    REST_NOPRINTERADD = 65536
    REST_NOSTARTMENUSUBFOLDERS = 131072
    REST_MYDOCSONNET = 262144
    REST_NOEXITTODOS = 524288
    REST_ENFORCESHELLEXTSECURITY = 1048576
    REST_LINKRESOLVEIGNORELINKINFO = 2097152
    REST_NOCOMMONGROUPS = 4194304
    REST_SEPARATEDESKTOPPROCESS = 8388608
    REST_NOWEB = 16777216
    REST_NOTRAYCONTEXTMENU = 33554432
    REST_NOVIEWCONTEXTMENU = 67108864
    REST_NONETCONNECTDISCONNECT = 134217728
    REST_STARTMENULOGOFF = 268435456
    REST_NOSETTINGSASSIST = 536870912
    REST_NOINTERNETICON = 1073741825
    REST_NORECENTDOCSHISTORY = 1073741826
    REST_NORECENTDOCSMENU = 1073741827
    REST_NOACTIVEDESKTOP = 1073741828
    REST_NOACTIVEDESKTOPCHANGES = 1073741829
    REST_NOFAVORITESMENU = 1073741830
    REST_CLEARRECENTDOCSONEXIT = 1073741831
    REST_CLASSICSHELL = 1073741832
    REST_NOCUSTOMIZEWEBVIEW = 1073741833
    REST_NOHTMLWALLPAPER = 1073741840
    REST_NOCHANGINGWALLPAPER = 1073741841
    REST_NODESKCOMP = 1073741842
    REST_NOADDDESKCOMP = 1073741843
    REST_NODELDESKCOMP = 1073741844
    REST_NOCLOSEDESKCOMP = 1073741845
    REST_NOCLOSE_DRAGDROPBAND = 1073741846
    REST_NOMOVINGBAND = 1073741847
    REST_NOEDITDESKCOMP = 1073741848
    REST_NORESOLVESEARCH = 1073741849
    REST_NORESOLVETRACK = 1073741850
    REST_FORCECOPYACLWITHFILE = 1073741851
    REST_NOFORGETSOFTWAREUPDATE = 1073741853
    REST_NOSETACTIVEDESKTOP = 1073741854
    REST_NOUPDATEWINDOWS = 1073741855
    REST_NOCHANGESTARMENU = 1073741856
    REST_NOFOLDEROPTIONS = 1073741857
    REST_HASFINDCOMPUTERS = 1073741858
    REST_INTELLIMENUS = 1073741859
    REST_RUNDLGMEMCHECKBOX = 1073741860
    REST_ARP_ShowPostSetup = 1073741861
    REST_NOCSC = 1073741862
    REST_NOCONTROLPANEL = 1073741863
    REST_ENUMWORKGROUP = 1073741864
    REST_ARP_NOARP = 1073741865
    REST_ARP_NOREMOVEPAGE = 1073741866
    REST_ARP_NOADDPAGE = 1073741867
    REST_ARP_NOWINSETUPPAGE = 1073741868
    REST_GREYMSIADS = 1073741869
    REST_NOCHANGEMAPPEDDRIVELABEL = 1073741870
    REST_NOCHANGEMAPPEDDRIVECOMMENT = 1073741871
    REST_MaxRecentDocs = 1073741872
    REST_NONETWORKCONNECTIONS = 1073741873
    REST_FORCESTARTMENULOGOFF = 1073741874
    REST_NOWEBVIEW = 1073741875
    REST_NOCUSTOMIZETHISFOLDER = 1073741876
    REST_NOENCRYPTION = 1073741877
    REST_DONTSHOWSUPERHIDDEN = 1073741879
    REST_NOSHELLSEARCHBUTTON = 1073741880
    REST_NOHARDWARETAB = 1073741881
    REST_NORUNASINSTALLPROMPT = 1073741882
    REST_PROMPTRUNASINSTALLNETPATH = 1073741883
    REST_NOMANAGEMYCOMPUTERVERB = 1073741884
    REST_DISALLOWRUN = 1073741886
    REST_NOWELCOMESCREEN = 1073741887
    REST_RESTRICTCPL = 1073741888
    REST_DISALLOWCPL = 1073741889
    REST_NOSMBALLOONTIP = 1073741890
    REST_NOSMHELP = 1073741891
    REST_NOWINKEYS = 1073741892
    REST_NOENCRYPTONMOVE = 1073741893
    REST_NOLOCALMACHINERUN = 1073741894
    REST_NOCURRENTUSERRUN = 1073741895
    REST_NOLOCALMACHINERUNONCE = 1073741896
    REST_NOCURRENTUSERRUNONCE = 1073741897
    REST_FORCEACTIVEDESKTOPON = 1073741898
    REST_NOVIEWONDRIVE = 1073741900
    REST_NONETCRAWL = 1073741901
    REST_NOSHAREDDOCUMENTS = 1073741902
    REST_NOSMMYDOCS = 1073741903
    REST_NOSMMYPICS = 1073741904
    REST_ALLOWBITBUCKDRIVES = 1073741905
    REST_NONLEGACYSHELLMODE = 1073741906
    REST_NOCONTROLPANELBARRICADE = 1073741907
    REST_NOSTARTPAGE = 1073741908
    REST_NOAUTOTRAYNOTIFY = 1073741909
    REST_NOTASKGROUPING = 1073741910
    REST_NOCDBURNING = 1073741911
    REST_MYCOMPNOPROP = 1073741912
    REST_MYDOCSNOPROP = 1073741913
    REST_NOSTARTPANEL = 1073741914
    REST_NODISPLAYAPPEARANCEPAGE = 1073741915
    REST_NOTHEMESTAB = 1073741916
    REST_NOVISUALSTYLECHOICE = 1073741917
    REST_NOSIZECHOICE = 1073741918
    REST_NOCOLORCHOICE = 1073741919
    REST_SETVISUALSTYLE = 1073741920
    REST_STARTRUNNOHOMEPATH = 1073741921
    REST_NOUSERNAMEINSTARTPANEL = 1073741922
    REST_NOMYCOMPUTERICON = 1073741923
    REST_NOSMNETWORKPLACES = 1073741924
    REST_NOSMPINNEDLIST = 1073741925
    REST_NOSMMYMUSIC = 1073741926
    REST_NOSMEJECTPC = 1073741927
    REST_NOSMMOREPROGRAMS = 1073741928
    REST_NOSMMFUPROGRAMS = 1073741929
    REST_NOTRAYITEMSDISPLAY = 1073741930
    REST_NOTOOLBARSONTASKBAR = 1073741931
    REST_NOSMCONFIGUREPROGRAMS = 1073741935
    REST_HIDECLOCK = 1073741936
    REST_NOLOWDISKSPACECHECKS = 1073741937
    REST_NOENTIRENETWORK = 1073741938
    REST_NODESKTOPCLEANUP = 1073741939
    REST_BITBUCKNUKEONDELETE = 1073741940
    REST_BITBUCKCONFIRMDELETE = 1073741941
    REST_BITBUCKNOPROP = 1073741942
    REST_NODISPBACKGROUND = 1073741943
    REST_NODISPSCREENSAVEPG = 1073741944
    REST_NODISPSETTINGSPG = 1073741945
    REST_NODISPSCREENSAVEPREVIEW = 1073741946
    REST_NODISPLAYCPL = 1073741947
    REST_HIDERUNASVERB = 1073741948
    REST_NOTHUMBNAILCACHE = 1073741949
    REST_NOSTRCMPLOGICAL = 1073741950
    REST_NOPUBLISHWIZARD = 1073741951
    REST_NOONLINEPRINTSWIZARD = 1073741952
    REST_NOWEBSERVICES = 1073741953
    REST_ALLOWUNHASHEDWEBVIEW = 1073741954
    REST_ALLOWLEGACYWEBVIEW = 1073741955
    REST_REVERTWEBVIEWSECURITY = 1073741956
    REST_INHERITCONSOLEHANDLES = 1073741958
    REST_NOREMOTERECURSIVEEVENTS = 1073741961
    REST_NOREMOTECHANGENOTIFY = 1073741969
    REST_NOENUMENTIRENETWORK = 1073741971
    REST_NOINTERNETOPENWITH = 1073741973
    REST_DONTRETRYBADNETNAME = 1073741979
    REST_ALLOWFILECLSIDJUNCTIONS = 1073741980
    REST_NOUPNPINSTALL = 1073741981
    REST_ARP_DONTGROUPPATCHES = 1073741996
    REST_ARP_NOCHOOSEPROGRAMSPAGE = 1073741997
    REST_NODISCONNECT = 1090519041
    REST_NOSECURITY = 1090519042
    REST_NOFILEASSOCIATE = 1090519043
    REST_ALLOWCOMMENTTOGGLE = 1090519044
  end

  enum OPEN_AS_INFO_FLAGS : UInt32
    OAIF_ALLOW_REGISTRATION = 1
    OAIF_REGISTER_EXT = 2
    OAIF_EXEC = 4
    OAIF_FORCE_REGISTRATION = 8
    OAIF_HIDE_REGISTRATION = 32
    OAIF_URL_PROTOCOL = 64
    OAIF_FILE_IS_URI = 128
  end

  enum IESHORTCUTFLAGS : Int32
    IESHORTCUT_NEWBROWSER = 1
    IESHORTCUT_OPENNEWTAB = 2
    IESHORTCUT_FORCENAVIGATE = 4
    IESHORTCUT_BACKGROUNDTAB = 8
  end

  enum DISPLAY_DEVICE_TYPE : Int32
    DEVICE_PRIMARY = 0
    DEVICE_IMMERSIVE = 1
  end

  enum SCALE_CHANGE_FLAGS : UInt32
    SCF_VALUE_NONE = 0
    SCF_SCALE = 1
    SCF_PHYSICAL = 2
  end

  enum SHELL_UI_COMPONENT : Int32
    SHELL_UI_COMPONENT_TASKBARS = 0
    SHELL_UI_COMPONENT_NOTIFICATIONAREA = 1
    SHELL_UI_COMPONENT_DESKBAND = 2
  end

  enum ASSOCCLASS : Int32
    ASSOCCLASS_SHELL_KEY = 0
    ASSOCCLASS_PROGID_KEY = 1
    ASSOCCLASS_PROGID_STR = 2
    ASSOCCLASS_CLSID_KEY = 3
    ASSOCCLASS_CLSID_STR = 4
    ASSOCCLASS_APP_KEY = 5
    ASSOCCLASS_APP_STR = 6
    ASSOCCLASS_SYSTEM_STR = 7
    ASSOCCLASS_FOLDER = 8
    ASSOCCLASS_STAR = 9
    ASSOCCLASS_FIXED_PROGID_STR = 10
    ASSOCCLASS_PROTOCOL_STR = 11
  end

  enum QUERY_USER_NOTIFICATION_STATE : Int32
    QUNS_NOT_PRESENT = 1
    QUNS_BUSY = 2
    QUNS_RUNNING_D3D_FULL_SCREEN = 3
    QUNS_PRESENTATION_MODE = 4
    QUNS_ACCEPTS_NOTIFICATIONS = 5
    QUNS_QUIET_TIME = 6
    QUNS_APP = 7
  end

  enum SHSTOCKICONID : Int32
    SIID_DOCNOASSOC = 0
    SIID_DOCASSOC = 1
    SIID_APPLICATION = 2
    SIID_FOLDER = 3
    SIID_FOLDEROPEN = 4
    SIID_DRIVE525 = 5
    SIID_DRIVE35 = 6
    SIID_DRIVEREMOVE = 7
    SIID_DRIVEFIXED = 8
    SIID_DRIVENET = 9
    SIID_DRIVENETDISABLED = 10
    SIID_DRIVECD = 11
    SIID_DRIVERAM = 12
    SIID_WORLD = 13
    SIID_SERVER = 15
    SIID_PRINTER = 16
    SIID_MYNETWORK = 17
    SIID_FIND = 22
    SIID_HELP = 23
    SIID_SHARE = 28
    SIID_LINK = 29
    SIID_SLOWFILE = 30
    SIID_RECYCLER = 31
    SIID_RECYCLERFULL = 32
    SIID_MEDIACDAUDIO = 40
    SIID_LOCK = 47
    SIID_AUTOLIST = 49
    SIID_PRINTERNET = 50
    SIID_SERVERSHARE = 51
    SIID_PRINTERFAX = 52
    SIID_PRINTERFAXNET = 53
    SIID_PRINTERFILE = 54
    SIID_STACK = 55
    SIID_MEDIASVCD = 56
    SIID_STUFFEDFOLDER = 57
    SIID_DRIVEUNKNOWN = 58
    SIID_DRIVEDVD = 59
    SIID_MEDIADVD = 60
    SIID_MEDIADVDRAM = 61
    SIID_MEDIADVDRW = 62
    SIID_MEDIADVDR = 63
    SIID_MEDIADVDROM = 64
    SIID_MEDIACDAUDIOPLUS = 65
    SIID_MEDIACDRW = 66
    SIID_MEDIACDR = 67
    SIID_MEDIACDBURN = 68
    SIID_MEDIABLANKCD = 69
    SIID_MEDIACDROM = 70
    SIID_AUDIOFILES = 71
    SIID_IMAGEFILES = 72
    SIID_VIDEOFILES = 73
    SIID_MIXEDFILES = 74
    SIID_FOLDERBACK = 75
    SIID_FOLDERFRONT = 76
    SIID_SHIELD = 77
    SIID_WARNING = 78
    SIID_INFO = 79
    SIID_ERROR = 80
    SIID_KEY = 81
    SIID_SOFTWARE = 82
    SIID_RENAME = 83
    SIID_DELETE = 84
    SIID_MEDIAAUDIODVD = 85
    SIID_MEDIAMOVIEDVD = 86
    SIID_MEDIAENHANCEDCD = 87
    SIID_MEDIAENHANCEDDVD = 88
    SIID_MEDIAHDDVD = 89
    SIID_MEDIABLURAY = 90
    SIID_MEDIAVCD = 91
    SIID_MEDIADVDPLUSR = 92
    SIID_MEDIADVDPLUSRW = 93
    SIID_DESKTOPPC = 94
    SIID_MOBILEPC = 95
    SIID_USERS = 96
    SIID_MEDIASMARTMEDIA = 97
    SIID_MEDIACOMPACTFLASH = 98
    SIID_DEVICECELLPHONE = 99
    SIID_DEVICECAMERA = 100
    SIID_DEVICEVIDEOCAMERA = 101
    SIID_DEVICEAUDIOPLAYER = 102
    SIID_NETWORKCONNECT = 103
    SIID_INTERNET = 104
    SIID_ZIPFILE = 105
    SIID_SETTINGS = 106
    SIID_DRIVEHDDVD = 132
    SIID_DRIVEBD = 133
    SIID_MEDIAHDDVDROM = 134
    SIID_MEDIAHDDVDR = 135
    SIID_MEDIAHDDVDRAM = 136
    SIID_MEDIABDROM = 137
    SIID_MEDIABDR = 138
    SIID_MEDIABDRE = 139
    SIID_CLUSTEREDDRIVE = 140
    SIID_MAX_ICONS = 181
  end

  enum SFBS_FLAGS : Int32
    SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = 1
    SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 2
  end

  enum URL_SCHEME : Int32
    URL_SCHEME_INVALID = -1
    URL_SCHEME_UNKNOWN = 0
    URL_SCHEME_FTP = 1
    URL_SCHEME_HTTP = 2
    URL_SCHEME_GOPHER = 3
    URL_SCHEME_MAILTO = 4
    URL_SCHEME_NEWS = 5
    URL_SCHEME_NNTP = 6
    URL_SCHEME_TELNET = 7
    URL_SCHEME_WAIS = 8
    URL_SCHEME_FILE = 9
    URL_SCHEME_MK = 10
    URL_SCHEME_HTTPS = 11
    URL_SCHEME_SHELL = 12
    URL_SCHEME_SNEWS = 13
    URL_SCHEME_LOCAL = 14
    URL_SCHEME_JAVASCRIPT = 15
    URL_SCHEME_VBSCRIPT = 16
    URL_SCHEME_ABOUT = 17
    URL_SCHEME_RES = 18
    URL_SCHEME_MSSHELLROOTED = 19
    URL_SCHEME_MSSHELLIDLIST = 20
    URL_SCHEME_MSHELP = 21
    URL_SCHEME_MSSHELLDEVICE = 22
    URL_SCHEME_WILDCARD = 23
    URL_SCHEME_SEARCH_MS = 24
    URL_SCHEME_SEARCH = 25
    URL_SCHEME_KNOWNFOLDER = 26
    URL_SCHEME_MAXVALUE = 27
  end

  enum URL_PART : Int32
    URL_PART_NONE = 0
    URL_PART_SCHEME = 1
    URL_PART_HOSTNAME = 2
    URL_PART_USERNAME = 3
    URL_PART_PASSWORD = 4
    URL_PART_PORT = 5
    URL_PART_QUERY = 6
  end

  enum URLIS : Int32
    URLIS_URL = 0
    URLIS_OPAQUE = 1
    URLIS_NOHISTORY = 2
    URLIS_FILEURL = 3
    URLIS_APPLIABLE = 4
    URLIS_DIRECTORY = 5
    URLIS_HASQUERY = 6
  end

  enum SHREGDEL_FLAGS : Int32
    SHREGDEL_DEFAULT = 0
    SHREGDEL_HKCU = 1
    SHREGDEL_HKLM = 16
    SHREGDEL_BOTH = 17
  end

  enum SHREGENUM_FLAGS : Int32
    SHREGENUM_DEFAULT = 0
    SHREGENUM_HKCU = 1
    SHREGENUM_HKLM = 16
    SHREGENUM_BOTH = 17
  end

  enum ASSOCSTR : Int32
    ASSOCSTR_COMMAND = 1
    ASSOCSTR_EXECUTABLE = 2
    ASSOCSTR_FRIENDLYDOCNAME = 3
    ASSOCSTR_FRIENDLYAPPNAME = 4
    ASSOCSTR_NOOPEN = 5
    ASSOCSTR_SHELLNEWVALUE = 6
    ASSOCSTR_DDECOMMAND = 7
    ASSOCSTR_DDEIFEXEC = 8
    ASSOCSTR_DDEAPPLICATION = 9
    ASSOCSTR_DDETOPIC = 10
    ASSOCSTR_INFOTIP = 11
    ASSOCSTR_QUICKTIP = 12
    ASSOCSTR_TILEINFO = 13
    ASSOCSTR_CONTENTTYPE = 14
    ASSOCSTR_DEFAULTICON = 15
    ASSOCSTR_SHELLEXTENSION = 16
    ASSOCSTR_DROPTARGET = 17
    ASSOCSTR_DELEGATEEXECUTE = 18
    ASSOCSTR_SUPPORTED_URI_PROTOCOLS = 19
    ASSOCSTR_PROGID = 20
    ASSOCSTR_APPID = 21
    ASSOCSTR_APPPUBLISHER = 22
    ASSOCSTR_APPICONREFERENCE = 23
    ASSOCSTR_MAX = 24
  end

  enum ASSOCKEY : Int32
    ASSOCKEY_SHELLEXECCLASS = 1
    ASSOCKEY_APP = 2
    ASSOCKEY_CLASS = 3
    ASSOCKEY_BASECLASS = 4
    ASSOCKEY_MAX = 5
  end

  enum ASSOCDATA : Int32
    ASSOCDATA_MSIDESCRIPTOR = 1
    ASSOCDATA_NOACTIVATEHANDLER = 2
    ASSOCDATA_UNUSED1 = 3
    ASSOCDATA_HASPERUSERASSOC = 4
    ASSOCDATA_EDITFLAGS = 5
    ASSOCDATA_VALUE = 6
    ASSOCDATA_MAX = 7
  end

  enum ASSOCENUM : Int32
    ASSOCENUM_NONE = 0
  end

  enum FILETYPEATTRIBUTEFLAGS : Int32
    FTA_None = 0
    FTA_Exclude = 1
    FTA_Show = 2
    FTA_HasExtension = 4
    FTA_NoEdit = 8
    FTA_NoRemove = 16
    FTA_NoNewVerb = 32
    FTA_NoEditVerb = 64
    FTA_NoRemoveVerb = 128
    FTA_NoEditDesc = 256
    FTA_NoEditIcon = 512
    FTA_NoEditDflt = 1024
    FTA_NoEditVerbCmd = 2048
    FTA_NoEditVerbExe = 4096
    FTA_NoDDE = 8192
    FTA_NoEditMIME = 32768
    FTA_OpenIsSafe = 65536
    FTA_AlwaysUnsafe = 131072
    FTA_NoRecentDocs = 1048576
    FTA_SafeForElevation = 2097152
    FTA_AlwaysUseDirectInvoke = 4194304
  end

  enum SHGLOBALCOUNTER : Int32
    GLOBALCOUNTER_SEARCHMANAGER = 0
    GLOBALCOUNTER_SEARCHOPTIONS = 1
    GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2
    GLOBALCOUNTER_RATINGS = 3
    GLOBALCOUNTER_APPROVEDSITES = 4
    GLOBALCOUNTER_RESTRICTIONS = 5
    GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6
    GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7
    GLOBALCOUNTER_OVERLAYMANAGER = 8
    GLOBALCOUNTER_QUERYASSOCIATIONS = 9
    GLOBALCOUNTER_IESESSIONS = 10
    GLOBALCOUNTER_IEONLY_SESSIONS = 11
    GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12
    UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13
    GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41
    UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42
    UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43
    GLOBALCOUNTER_RECYCLEBINENUM = 44
    GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45
    GLOBALCOUNTER_RATINGS_STATECOUNTER = 46
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47
    GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48
    GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49
    GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51
    GLOBALCOUNTER_ASSOCCHANGED = 52
    GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53
    GLOBALCOUNTER_SETTINGSYNC_ENABLED = 54
    GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 55
    GLOBALCOUNTER_USERINFOCHANGED = 56
    GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 57
    GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 58
    GLOBALCOUNTER_MAXIMUMVALUE = 59
  end

  enum APPINFODATAFLAGS : Int32
    AIM_DISPLAYNAME = 1
    AIM_VERSION = 2
    AIM_PUBLISHER = 4
    AIM_PRODUCTID = 8
    AIM_REGISTEREDOWNER = 16
    AIM_REGISTEREDCOMPANY = 32
    AIM_LANGUAGE = 64
    AIM_SUPPORTURL = 128
    AIM_SUPPORTTELEPHONE = 256
    AIM_HELPLINK = 512
    AIM_INSTALLLOCATION = 1024
    AIM_INSTALLSOURCE = 2048
    AIM_INSTALLDATE = 4096
    AIM_CONTACT = 16384
    AIM_COMMENTS = 32768
    AIM_IMAGE = 131072
    AIM_READMEURL = 262144
    AIM_UPDATEINFOURL = 524288
  end

  enum APPACTIONFLAGS : Int32
    APPACTION_INSTALL = 1
    APPACTION_UNINSTALL = 2
    APPACTION_MODIFY = 4
    APPACTION_REPAIR = 8
    APPACTION_UPGRADE = 16
    APPACTION_CANGETSIZE = 32
    APPACTION_MODIFYREMOVE = 128
    APPACTION_ADDLATER = 256
    APPACTION_UNSCHEDULE = 512
  end

  enum PUBAPPINFOFLAGS : Int32
    PAI_SOURCE = 1
    PAI_ASSIGNEDTIME = 2
    PAI_PUBLISHEDTIME = 4
    PAI_SCHEDULEDTIME = 8
    PAI_EXPIRETIME = 16
  end

  enum CREDENTIAL_PROVIDER_USAGE_SCENARIO : Int32
    CPUS_INVALID = 0
    CPUS_LOGON = 1
    CPUS_UNLOCK_WORKSTATION = 2
    CPUS_CHANGE_PASSWORD = 3
    CPUS_CREDUI = 4
    CPUS_PLAP = 5
  end

  enum CREDENTIAL_PROVIDER_FIELD_TYPE : Int32
    CPFT_INVALID = 0
    CPFT_LARGE_TEXT = 1
    CPFT_SMALL_TEXT = 2
    CPFT_COMMAND_LINK = 3
    CPFT_EDIT_TEXT = 4
    CPFT_PASSWORD_TEXT = 5
    CPFT_TILE_IMAGE = 6
    CPFT_CHECKBOX = 7
    CPFT_COMBOBOX = 8
    CPFT_SUBMIT_BUTTON = 9
  end

  enum CREDENTIAL_PROVIDER_FIELD_STATE : Int32
    CPFS_HIDDEN = 0
    CPFS_DISPLAY_IN_SELECTED_TILE = 1
    CPFS_DISPLAY_IN_DESELECTED_TILE = 2
    CPFS_DISPLAY_IN_BOTH = 3
  end

  enum CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE : Int32
    CPFIS_NONE = 0
    CPFIS_READONLY = 1
    CPFIS_DISABLED = 2
    CPFIS_FOCUSED = 3
  end

  enum CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE : Int32
    CPGSR_NO_CREDENTIAL_NOT_FINISHED = 0
    CPGSR_NO_CREDENTIAL_FINISHED = 1
    CPGSR_RETURN_CREDENTIAL_FINISHED = 2
    CPGSR_RETURN_NO_CREDENTIAL_FINISHED = 3
  end

  enum CREDENTIAL_PROVIDER_STATUS_ICON : Int32
    CPSI_NONE = 0
    CPSI_ERROR = 1
    CPSI_WARNING = 2
    CPSI_SUCCESS = 3
  end

  enum CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS : Int32
    CPAO_NONE = 0
    CPAO_EMPTY_LOCAL = 1
    CPAO_EMPTY_CONNECTED = 2
  end

  enum CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS : Int32
    CPCFO_NONE = 0
    CPCFO_ENABLE_PASSWORD_REVEAL = 1
    CPCFO_IS_EMAIL_ADDRESS = 2
    CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 4
    CPCFO_NUMBERS_ONLY = 8
    CPCFO_SHOW_ENGLISH_KEYBOARD = 16
  end

  enum SYNCMGR_HANDLER_CAPABILITIES : Int32
    SYNCMGR_HCM_NONE = 0
    SYNCMGR_HCM_PROVIDES_ICON = 1
    SYNCMGR_HCM_EVENT_STORE = 2
    SYNCMGR_HCM_CONFLICT_STORE = 4
    SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = 16
    SYNCMGR_HCM_CAN_BROWSE_CONTENT = 65536
    SYNCMGR_HCM_CAN_SHOW_SCHEDULE = 131072
    SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = 1048576
    SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = 2097152
    SYNCMGR_HCM_QUERY_BEFORE_ENABLE = 4194304
    SYNCMGR_HCM_QUERY_BEFORE_DISABLE = 8388608
    SYNCMGR_HCM_VALID_MASK = 15925271
  end

  enum SYNCMGR_HANDLER_POLICIES : Int32
    SYNCMGR_HPM_NONE = 0
    SYNCMGR_HPM_PREVENT_ACTIVATE = 1
    SYNCMGR_HPM_PREVENT_DEACTIVATE = 2
    SYNCMGR_HPM_PREVENT_ENABLE = 4
    SYNCMGR_HPM_PREVENT_DISABLE = 8
    SYNCMGR_HPM_PREVENT_START_SYNC = 16
    SYNCMGR_HPM_PREVENT_STOP_SYNC = 32
    SYNCMGR_HPM_DISABLE_ENABLE = 256
    SYNCMGR_HPM_DISABLE_DISABLE = 512
    SYNCMGR_HPM_DISABLE_START_SYNC = 1024
    SYNCMGR_HPM_DISABLE_STOP_SYNC = 2048
    SYNCMGR_HPM_DISABLE_BROWSE = 4096
    SYNCMGR_HPM_DISABLE_SCHEDULE = 8192
    SYNCMGR_HPM_HIDDEN_BY_DEFAULT = 65536
    SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = 48
    SYNCMGR_HPM_VALID_MASK = 77631
  end

  enum SYNCMGR_HANDLER_TYPE : Int32
    SYNCMGR_HT_UNSPECIFIED = 0
    SYNCMGR_HT_APPLICATION = 1
    SYNCMGR_HT_DEVICE = 2
    SYNCMGR_HT_FOLDER = 3
    SYNCMGR_HT_SERVICE = 4
    SYNCMGR_HT_COMPUTER = 5
    SYNCMGR_HT_MIN = 0
    SYNCMGR_HT_MAX = 5
  end

  enum SYNCMGR_ITEM_CAPABILITIES : Int32
    SYNCMGR_ICM_NONE = 0
    SYNCMGR_ICM_PROVIDES_ICON = 1
    SYNCMGR_ICM_EVENT_STORE = 2
    SYNCMGR_ICM_CONFLICT_STORE = 4
    SYNCMGR_ICM_CAN_DELETE = 16
    SYNCMGR_ICM_CAN_BROWSE_CONTENT = 65536
    SYNCMGR_ICM_QUERY_BEFORE_ENABLE = 1048576
    SYNCMGR_ICM_QUERY_BEFORE_DISABLE = 2097152
    SYNCMGR_ICM_QUERY_BEFORE_DELETE = 4194304
    SYNCMGR_ICM_VALID_MASK = 7405591
  end

  enum SYNCMGR_ITEM_POLICIES : Int32
    SYNCMGR_IPM_NONE = 0
    SYNCMGR_IPM_PREVENT_ENABLE = 1
    SYNCMGR_IPM_PREVENT_DISABLE = 2
    SYNCMGR_IPM_PREVENT_START_SYNC = 4
    SYNCMGR_IPM_PREVENT_STOP_SYNC = 8
    SYNCMGR_IPM_DISABLE_ENABLE = 16
    SYNCMGR_IPM_DISABLE_DISABLE = 32
    SYNCMGR_IPM_DISABLE_START_SYNC = 64
    SYNCMGR_IPM_DISABLE_STOP_SYNC = 128
    SYNCMGR_IPM_DISABLE_BROWSE = 256
    SYNCMGR_IPM_DISABLE_DELETE = 512
    SYNCMGR_IPM_HIDDEN_BY_DEFAULT = 65536
    SYNCMGR_IPM_VALID_MASK = 66303
  end

  enum SYNCMGR_PROGRESS_STATUS : Int32
    SYNCMGR_PS_UPDATING = 1
    SYNCMGR_PS_UPDATING_INDETERMINATE = 2
    SYNCMGR_PS_SUCCEEDED = 3
    SYNCMGR_PS_FAILED = 4
    SYNCMGR_PS_CANCELED = 5
    SYNCMGR_PS_DISCONNECTED = 6
    SYNCMGR_PS_MAX = 6
  end

  enum SYNCMGR_CANCEL_REQUEST : Int32
    SYNCMGR_CR_NONE = 0
    SYNCMGR_CR_CANCEL_ITEM = 1
    SYNCMGR_CR_CANCEL_ALL = 2
    SYNCMGR_CR_MAX = 2
  end

  enum SYNCMGR_EVENT_LEVEL : Int32
    SYNCMGR_EL_INFORMATION = 1
    SYNCMGR_EL_WARNING = 2
    SYNCMGR_EL_ERROR = 3
    SYNCMGR_EL_MAX = 3
  end

  enum SYNCMGR_EVENT_FLAGS : Int32
    SYNCMGR_EF_NONE = 0
    SYNCMGR_EF_VALID = 0
  end

  enum SYNCMGR_CONTROL_FLAGS : Int32
    SYNCMGR_CF_NONE = 0
    SYNCMGR_CF_NOWAIT = 0
    SYNCMGR_CF_WAIT = 1
    SYNCMGR_CF_NOUI = 2
    SYNCMGR_CF_VALID = 3
  end

  enum SYNCMGR_SYNC_CONTROL_FLAGS : Int32
    SYNCMGR_SCF_NONE = 0
    SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = 1
    SYNCMGR_SCF_VALID = 1
  end

  enum SYNCMGR_UPDATE_REASON : Int32
    SYNCMGR_UR_ADDED = 0
    SYNCMGR_UR_CHANGED = 1
    SYNCMGR_UR_REMOVED = 2
    SYNCMGR_UR_MAX = 2
  end

  enum SYNCMGR_CONFLICT_ITEM_TYPE : Int32
    SYNCMGR_CIT_UPDATED = 1
    SYNCMGR_CIT_DELETED = 2
  end

  enum SYNCMGR_RESOLUTION_ABILITIES : Int32
    SYNCMGR_RA_KEEPOTHER = 1
    SYNCMGR_RA_KEEPRECENT = 2
    SYNCMGR_RA_REMOVEFROMSYNCSET = 4
    SYNCMGR_RA_KEEP_SINGLE = 8
    SYNCMGR_RA_KEEP_MULTIPLE = 16
    SYNCMGR_RA_VALID = 31
  end

  enum SYNCMGR_RESOLUTION_FEEDBACK : Int32
    SYNCMGR_RF_CONTINUE = 0
    SYNCMGR_RF_REFRESH = 1
    SYNCMGR_RF_CANCEL = 2
  end

  enum SYNCMGR_PRESENTER_NEXT_STEP : Int32
    SYNCMGR_PNS_CONTINUE = 0
    SYNCMGR_PNS_DEFAULT = 1
    SYNCMGR_PNS_CANCEL = 2
  end

  enum SYNCMGR_PRESENTER_CHOICE : Int32
    SYNCMGR_PC_NO_CHOICE = 0
    SYNCMGR_PC_KEEP_ONE = 1
    SYNCMGR_PC_KEEP_MULTIPLE = 2
    SYNCMGR_PC_KEEP_RECENT = 3
    SYNCMGR_PC_REMOVE_FROM_SYNC_SET = 4
    SYNCMGR_PC_SKIP = 5
  end

  enum WTS_FLAGS : Int32
    WTS_NONE = 0
    WTS_EXTRACT = 0
    WTS_INCACHEONLY = 1
    WTS_FASTEXTRACT = 2
    WTS_FORCEEXTRACTION = 4
    WTS_SLOWRECLAIM = 8
    WTS_EXTRACTDONOTCACHE = 32
    WTS_SCALETOREQUESTEDSIZE = 64
    WTS_SKIPFASTEXTRACT = 128
    WTS_EXTRACTINPROC = 256
    WTS_CROPTOSQUARE = 512
    WTS_INSTANCESURROGATE = 1024
    WTS_REQUIRESURROGATE = 2048
    WTS_APPSTYLE = 8192
    WTS_WIDETHUMBNAILS = 16384
    WTS_IDEALCACHESIZEONLY = 32768
    WTS_SCALEUP = 65536
  end

  enum WTS_CACHEFLAGS : Int32
    WTS_DEFAULT = 0
    WTS_LOWQUALITY = 1
    WTS_CACHED = 2
  end

  enum WTS_CONTEXTFLAGS : Int32
    WTSCF_DEFAULT = 0
    WTSCF_APPSTYLE = 1
    WTSCF_SQUARE = 2
    WTSCF_WIDE = 4
    WTSCF_FAST = 8
  end

  enum WTS_ALPHATYPE : Int32
    WTSAT_UNKNOWN = 0
    WTSAT_RGB = 1
    WTSAT_ARGB = 2
  end

  enum SYNCMGRSTATUS : Int32
    SYNCMGRSTATUS_STOPPED = 0
    SYNCMGRSTATUS_SKIPPED = 1
    SYNCMGRSTATUS_PENDING = 2
    SYNCMGRSTATUS_UPDATING = 3
    SYNCMGRSTATUS_SUCCEEDED = 4
    SYNCMGRSTATUS_FAILED = 5
    SYNCMGRSTATUS_PAUSED = 6
    SYNCMGRSTATUS_RESUMING = 7
    SYNCMGRSTATUS_UPDATING_INDETERMINATE = 8
    SYNCMGRSTATUS_DELETED = 256
  end

  enum SYNCMGRLOGLEVEL : Int32
    SYNCMGRLOGLEVEL_INFORMATION = 1
    SYNCMGRLOGLEVEL_WARNING = 2
    SYNCMGRLOGLEVEL_ERROR = 3
    SYNCMGRLOGLEVEL_LOGLEVELMAX = 3
  end

  enum SYNCMGRERRORFLAGS : Int32
    SYNCMGRERRORFLAG_ENABLEJUMPTEXT = 1
  end

  enum SYNCMGRITEMFLAGS : Int32
    SYNCMGRITEM_HASPROPERTIES = 1
    SYNCMGRITEM_TEMPORARY = 2
    SYNCMGRITEM_ROAMINGUSER = 4
    SYNCMGRITEM_LASTUPDATETIME = 8
    SYNCMGRITEM_MAYDELETEITEM = 16
    SYNCMGRITEM_HIDDEN = 32
  end

  enum SYNCMGRFLAG : Int32
    SYNCMGRFLAG_CONNECT = 1
    SYNCMGRFLAG_PENDINGDISCONNECT = 2
    SYNCMGRFLAG_MANUAL = 3
    SYNCMGRFLAG_IDLE = 4
    SYNCMGRFLAG_INVOKE = 5
    SYNCMGRFLAG_SCHEDULED = 6
    SYNCMGRFLAG_EVENTMASK = 255
    SYNCMGRFLAG_SETTINGS = 256
    SYNCMGRFLAG_MAYBOTHERUSER = 512
  end

  enum SYNCMGRHANDLERFLAGS : Int32
    SYNCMGRHANDLER_HASPROPERTIES = 1
    SYNCMGRHANDLER_MAYESTABLISHCONNECTION = 2
    SYNCMGRHANDLER_ALWAYSLISTHANDLER = 4
    SYNCMGRHANDLER_HIDDEN = 8
  end

  enum SYNCMGRITEMSTATE : Int32
    SYNCMGRITEMSTATE_UNCHECKED = 0
    SYNCMGRITEMSTATE_CHECKED = 1
  end

  enum SYNCMGRINVOKEFLAGS : Int32
    SYNCMGRINVOKE_STARTSYNC = 2
    SYNCMGRINVOKE_MINIMIZED = 4
  end

  enum SYNCMGRREGISTERFLAGS : Int32
    SYNCMGRREGISTERFLAG_CONNECT = 1
    SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = 2
    SYNCMGRREGISTERFLAG_IDLE = 4
  end

  enum ThumbnailStreamCacheOptions : Int32
    ExtractIfNotCached = 0
    ReturnOnlyIfCached = 1
    ResizeThumbnail = 2
    AllowSmallerSize = 4
  end

  enum TLENUMF : Int32
    TLEF_RELATIVE_INCLUDE_CURRENT = 1
    TLEF_RELATIVE_BACK = 16
    TLEF_RELATIVE_FORE = 32
    TLEF_INCLUDE_UNINVOKEABLE = 64
    TLEF_ABSOLUTE = 49
    TLEF_EXCLUDE_SUBFRAME_ENTRIES = 128
    TLEF_EXCLUDE_ABOUT_PAGES = 256
  end

  enum HLSR_NOREDEF10 : Int32
    HLSR_HOME = 0
    HLSR_SEARCHPAGE = 1
    HLSR_HISTORYFOLDER = 2
  end

  enum HLSHORTCUTF__NOREDEF10 : Int32
    HLSHORTCUTF_DEFAULT = 0
    HLSHORTCUTF_DONTACTUALLYCREATE = 1
    HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 2
    HLSHORTCUTF_USEUNIQUEFILENAME = 4
    HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = 8
  end

  enum HLTRANSLATEF_NOREDEF10 : Int32
    HLTRANSLATEF_DEFAULT = 0
    HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 1
  end

  enum HLNF : UInt32
    HLNF_INTERNALJUMP = 1
    HLNF_OPENINNEWWINDOW = 2
    HLNF_NAVIGATINGBACK = 4
    HLNF_NAVIGATINGFORWARD = 8
    HLNF_NAVIGATINGTOSTACKITEM = 16
    HLNF_CREATENOHISTORY = 32
  end

  enum HLINKGETREF : Int32
    HLINKGETREF_DEFAULT = 0
    HLINKGETREF_ABSOLUTE = 1
    HLINKGETREF_RELATIVE = 2
  end

  enum HLFNAMEF : UInt32
    HLFNAMEF_DEFAULT = 0
    HLFNAMEF_TRYCACHE = 1
    HLFNAMEF_TRYPRETTYTARGET = 2
    HLFNAMEF_TRYFULLTARGET = 4
    HLFNAMEF_TRYWIN95SHORTCUT = 8
  end

  enum HLINKMISC : Int32
    HLINKMISC_RELATIVE = 1
  end

  enum HLINKSETF : Int32
    HLINKSETF_TARGET = 1
    HLINKSETF_LOCATION = 2
  end

  enum HLINKWHICHMK : Int32
    HLINKWHICHMK_CONTAINER = 1
    HLINKWHICHMK_BASE = 2
  end

  enum HLTB_INFO : Int32
    HLTB_DOCKEDLEFT = 0
    HLTB_DOCKEDTOP = 1
    HLTB_DOCKEDRIGHT = 2
    HLTB_DOCKEDBOTTOM = 3
    HLTB_FLOATING = 4
  end

  enum HLBWIF_FLAGS : UInt32
    HLBWIF_HASFRAMEWNDINFO = 1
    HLBWIF_HASDOCWNDINFO = 2
    HLBWIF_FRAMEWNDMAXIMIZED = 4
    HLBWIF_DOCWNDMAXIMIZED = 8
    HLBWIF_HASWEBTOOLBARINFO = 16
    HLBWIF_WEBTOOLBARHIDDEN = 32
  end

  enum HLID_INFO : UInt32
    HLID_INVALID = 0
    HLID_PREVIOUS = 4294967295
    HLID_NEXT = 4294967294
    HLID_CURRENT = 4294967293
    HLID_STACKBOTTOM = 4294967292
    HLID_STACKTOP = 4294967291
  end

  enum HLQF_INFO : Int32
    HLQF_ISVALID = 1
    HLQF_ISCURRENT = 2
  end

  enum BNSTATE : Int32
    BNS_NORMAL = 0
    BNS_BEGIN_NAVIGATE = 1
    BNS_NAVIGATE = 2
  end

  enum SHELLBROWSERSHOWCONTROL : Int32
    SBSC_HIDE = 0
    SBSC_SHOW = 1
    SBSC_TOGGLE = 2
    SBSC_QUERY = 3
  end

  enum SECURELOCKCODE : Int32
    SECURELOCK_NOCHANGE = -1
    SECURELOCK_SET_UNSECURE = 0
    SECURELOCK_SET_MIXED = 1
    SECURELOCK_SET_SECUREUNKNOWNBIT = 2
    SECURELOCK_SET_SECURE40BIT = 3
    SECURELOCK_SET_SECURE56BIT = 4
    SECURELOCK_SET_FORTEZZA = 5
    SECURELOCK_SET_SECURE128BIT = 6
    SECURELOCK_FIRSTSUGGEST = 7
    SECURELOCK_SUGGEST_UNSECURE = 7
    SECURELOCK_SUGGEST_MIXED = 8
    SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 9
    SECURELOCK_SUGGEST_SECURE40BIT = 10
    SECURELOCK_SUGGEST_SECURE56BIT = 11
    SECURELOCK_SUGGEST_FORTEZZA = 12
    SECURELOCK_SUGGEST_SECURE128BIT = 13
  end

  enum IEPDNFLAGS : Int32
    IEPDN_BINDINGUI = 1
  end

  enum TI_FLAGS : Int32
    TI_BITMAP = 1
    TI_JPEG = 2
  end

  enum PATHCCH_OPTIONS : Int32
    PATHCCH_NONE = 0
    PATHCCH_ALLOW_LONG_PATHS = 1
    PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = 2
    PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = 4
    PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = 8
    PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = 16
    PATHCCH_ENSURE_TRAILING_SLASH = 32
    PATHCCH_CANONICALIZE_SLASHES = 64
  end

  enum Iurl_seturl_flags : Int32
    IURL_SETURL_FL_GUESS_PROTOCOL = 1
    IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 2
  end

  enum Iurl_invokecommand_flags : Int32
    IURL_INVOKECOMMAND_FL_ALLOW_UI = 1
    IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 2
    IURL_INVOKECOMMAND_FL_DDEWAIT = 4
    IURL_INVOKECOMMAND_FL_ASYNCOK = 8
    IURL_INVOKECOMMAND_FL_LOG_USAGE = 16
  end

  enum Translateurl_in_flags : Int32
    TRANSLATEURL_FL_GUESS_PROTOCOL = 1
    TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 2
  end

  enum Urlassociationdialog_in_flags : Int32
    URLASSOCDLG_FL_USE_DEFAULT_NAME = 1
    URLASSOCDLG_FL_REGISTER_ASSOC = 2
  end

  enum Mimeassociationdialog_in_flags : Int32
    MIMEASSOCDLG_FL_REGISTER_ASSOC = 1
  end

  union SHELLEXECUTEINFOA_Anonymous_e__Union
    h_icon : LibC::HANDLE
    h_monitor : LibC::HANDLE
  end
  union SHELLEXECUTEINFOW_Anonymous_e__Union
    h_icon : LibC::HANDLE
    h_monitor : LibC::HANDLE
  end
  union NOTIFYICONDATAA_Anonymous_e__Union
    u_timeout : UInt32
    u_version : UInt32
  end
  union NOTIFYICONDATAW_Anonymous_e__Union
    u_timeout : UInt32
    u_version : UInt32
  end

  struct APPCATEGORYINFO
    locale : UInt32
    psz_description : LibC::LPWSTR
    app_category_id : Guid
  end
  struct APPCATEGORYINFOLIST
    c_category : UInt32
    p_category_info : APPCATEGORYINFO*
  end
  struct HELPINFO
    cb_size : UInt32
    i_context_type : Int32
    i_ctrl_id : Int32
    h_item_handle : LibC::HANDLE
    dw_context_id : LibC::UINT_PTR
    mouse_pos : POINT
  end
  struct MULTIKEYHELPA
    mk_size : UInt32
    mk_keylist : CHAR
    sz_keyphrase : CHAR[0]*
  end
  struct MULTIKEYHELPW
    mk_size : UInt32
    mk_keylist : Char
    sz_keyphrase : Char[0]*
  end
  struct HELPWININFOA
    w_struct_size : Int32
    x : Int32
    y : Int32
    dx : Int32
    dy : Int32
    w_max : Int32
    rgch_member : CHAR[2]*
  end
  struct HELPWININFOW
    w_struct_size : Int32
    x : Int32
    y : Int32
    dx : Int32
    dy : Int32
    w_max : Int32
    rgch_member : Char[2]*
  end
  struct CMINVOKECOMMANDINFO
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    lp_verb : PSTR
    lp_parameters : PSTR
    lp_directory : PSTR
    n_show : Int32
    dw_hot_key : UInt32
    h_icon : LibC::HANDLE
  end
  struct CMINVOKECOMMANDINFOEX
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    lp_verb : PSTR
    lp_parameters : PSTR
    lp_directory : PSTR
    n_show : Int32
    dw_hot_key : UInt32
    h_icon : LibC::HANDLE
    lp_title : PSTR
    lp_verb_w : LibC::LPWSTR
    lp_parameters_w : LibC::LPWSTR
    lp_directory_w : LibC::LPWSTR
    lp_title_w : LibC::LPWSTR
    pt_invoke : POINT
  end
  struct CMINVOKECOMMANDINFOEX_REMOTE
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    lp_verb_string : PSTR
    lp_parameters : PSTR
    lp_directory : PSTR
    n_show : Int32
    dw_hot_key : UInt32
    lp_title : PSTR
    lp_verb_w_string : LibC::LPWSTR
    lp_parameters_w : LibC::LPWSTR
    lp_directory_w : LibC::LPWSTR
    lp_title_w : LibC::LPWSTR
    pt_invoke : POINT
    lp_verb_int : UInt32
    lp_verb_w_int : UInt32
  end
  struct PERSIST_FOLDER_TARGET_INFO
    pidl_target_folder : ITEMIDLIST*
    sz_target_parsing_name : Char[260]*
    sz_network_provider : Char[260]*
    dw_attributes : UInt32
    csidl : Int32
  end
  struct EXTRASEARCH
    guid_search : Guid
    wsz_friendly_name : Char[80]*
    wsz_url : Char[2084]*
  end
  struct FOLDERSETTINGS
    view_mode : UInt32
    f_flags : UInt32
  end
  struct SV2CVW2_PARAMS
    cb_size : UInt32
    psv_prev : IShellView
    pfs : FOLDERSETTINGS*
    psb_owner : IShellBrowser
    prc_view : RECT*
    pvid : Guid*
    hwnd_view : HANDLE
  end
  struct SORTCOLUMN
    propkey : PROPERTYKEY
    direction : SORTDIRECTION
  end
  struct CM_COLUMNINFO
    cb_size : UInt32
    dw_mask : UInt32
    dw_state : UInt32
    u_width : UInt32
    u_default_width : UInt32
    u_ideal_width : UInt32
    wsz_name : Char[80]*
  end
  struct SHELL_ITEM_RESOURCE
    guid_type : Guid
    sz_name : Char[260]*
  end
  struct CATEGORY_INFO
    cif : CATEGORYINFO_FLAGS
    wsz_name : Char[260]*
  end
  struct SHDRAGIMAGE
    size_drag_image : SIZE
    pt_offset : POINT
    hbmp_drag_image : HBITMAP
    cr_color_key : UInt32
  end
  struct DESKBANDINFO
    dw_mask : UInt32
    pt_min_size : POINTL
    pt_max_size : POINTL
    pt_integral : POINTL
    pt_actual : POINTL
    wsz_title : Char[256]*
    dw_mode_flags : UInt32
    cr_bkgnd : UInt32
  end
  struct THUMBBUTTON
    dw_mask : THUMBBUTTONMASK
    i_id : UInt32
    i_bitmap : UInt32
    h_icon : HANDLE
    sz_tip : Char[260]*
    dw_flags : THUMBBUTTONFLAGS
  end
  struct BANDSITEINFO
    dw_mask : UInt32
    dw_state : UInt32
    dw_style : UInt32
  end
  struct DELEGATEITEMID
    cb_size : UInt16
    w_outer : UInt16
    cb_inner : UInt16
    rgb : UInt8[0]*
  end
  struct SMDATA
    dw_mask : UInt32
    dw_flags : UInt32
    hmenu : HANDLE
    hwnd : HANDLE
    u_id : UInt32
    u_id_parent : UInt32
    u_id_ancestor : UInt32
    punk : IUnknown
    pidl_folder : ITEMIDLIST*
    pidl_item : ITEMIDLIST*
    psf : IShellFolder
    pv_user_data : Void*
  end
  struct SMINFO
    dw_mask : UInt32
    dw_type : UInt32
    dw_flags : UInt32
    i_icon : Int32
  end
  struct SMCSHCHANGENOTIFYSTRUCT
    l_event : Int32
    pidl1 : ITEMIDLIST*
    pidl2 : ITEMIDLIST*
  end
  struct KNOWNFOLDER_DEFINITION
    category : KF_CATEGORY
    psz_name : LibC::LPWSTR
    psz_description : LibC::LPWSTR
    fid_parent : Guid
    psz_relative_path : LibC::LPWSTR
    psz_parsing_name : LibC::LPWSTR
    psz_tooltip : LibC::LPWSTR
    psz_localized_name : LibC::LPWSTR
    psz_icon : LibC::LPWSTR
    psz_security : LibC::LPWSTR
    dw_attributes : UInt32
    kfd_flags : UInt32
    ftid_type : Guid
  end
  struct PREVIEWHANDLERFRAMEINFO
    haccel : HANDLE
    c_accel_entries : UInt32
  end
  struct BANNER_NOTIFICATION
    event : BANNER_NOTIFICATION_EVENT
    provider_identity : LibC::LPWSTR
    content_id : LibC::LPWSTR
  end
  struct NSTCCUSTOMDRAW
    psi : IShellItem
    u_item_state : UInt32
    nstcis : UInt32
    psz_text : LibC::LPWSTR
    i_image : Int32
    himl : HIMAGELIST
    i_level : Int32
    i_indent : Int32
  end
  struct DATABLOCK_HEADER
    cb_size : UInt32
    dw_signature : UInt32
  end
  struct NT_CONSOLE_PROPS
    dbh : DATABLOCK_HEADER
    w_fill_attribute : UInt16
    w_popup_fill_attribute : UInt16
    dw_screen_buffer_size : COORD
    dw_window_size : COORD
    dw_window_origin : COORD
    n_font : UInt32
    n_input_buffer_size : UInt32
    dw_font_size : COORD
    u_font_family : UInt32
    u_font_weight : UInt32
    face_name : Char[32]*
    u_cursor_size : UInt32
    b_full_screen : LibC::BOOL
    b_quick_edit : LibC::BOOL
    b_insert_mode : LibC::BOOL
    b_auto_position : LibC::BOOL
    u_history_buffer_size : UInt32
    u_number_of_history_buffers : UInt32
    b_history_no_dup : LibC::BOOL
    color_table : UInt32[16]*
  end
  struct NT_FE_CONSOLE_PROPS
    dbh : DATABLOCK_HEADER
    u_code_page : UInt32
  end
  struct EXP_DARWIN_LINK
    dbh : DATABLOCK_HEADER
    sz_darwin_id : CHAR[260]*
    szw_darwin_id : Char[260]*
  end
  struct EXP_SPECIAL_FOLDER
    cb_size : UInt32
    dw_signature : UInt32
    id_special_folder : UInt32
    cb_offset : UInt32
  end
  struct EXP_SZ_LINK
    cb_size : UInt32
    dw_signature : UInt32
    sz_target : CHAR[260]*
    swz_target : Char[260]*
  end
  struct EXP_PROPERTYSTORAGE
    cb_size : UInt32
    dw_signature : UInt32
    ab_property_storage : UInt8[0]*
  end
  struct SHFOLDERCUSTOMSETTINGS
    dw_size : UInt32
    dw_mask : UInt32
    pvid : Guid*
    psz_web_view_template : LibC::LPWSTR
    cch_web_view_template : UInt32
    psz_web_view_template_version : LibC::LPWSTR
    psz_info_tip : LibC::LPWSTR
    cch_info_tip : UInt32
    pclsid : Guid*
    dw_flags : UInt32
    psz_icon_file : LibC::LPWSTR
    cch_icon_file : UInt32
    i_icon_index : Int32
    psz_logo : LibC::LPWSTR
    cch_logo : UInt32
  end
  struct BROWSEINFOA
    hwnd_owner : HANDLE
    pidl_root : ITEMIDLIST*
    psz_display_name : PSTR
    lpsz_title : PSTR
    ul_flags : UInt32
    lpfn : BFFCALLBACK
    l_param : LPARAM
    i_image : Int32
  end
  struct BROWSEINFOW
    hwnd_owner : HANDLE
    pidl_root : ITEMIDLIST*
    psz_display_name : LibC::LPWSTR
    lpsz_title : LibC::LPWSTR
    ul_flags : UInt32
    lpfn : BFFCALLBACK
    l_param : LPARAM
    i_image : Int32
  end
  struct NRESARRAY
    c_items : UInt32
    nr : NETRESOURCEA[0]*
  end
  struct CIDA
    cidl : UInt32
    aoffset : UInt32[0]*
  end
  struct FILEDESCRIPTORA
    dw_flags : UInt32
    clsid : Guid
    sizel : SIZE
    pointl : POINTL
    dw_file_attributes : UInt32
    ft_creation_time : FILETIME
    ft_last_access_time : FILETIME
    ft_last_write_time : FILETIME
    n_file_size_high : UInt32
    n_file_size_low : UInt32
    c_file_name : CHAR[260]*
  end
  struct FILEDESCRIPTORW
    dw_flags : UInt32
    clsid : Guid
    sizel : SIZE
    pointl : POINTL
    dw_file_attributes : UInt32
    ft_creation_time : FILETIME
    ft_last_access_time : FILETIME
    ft_last_write_time : FILETIME
    n_file_size_high : UInt32
    n_file_size_low : UInt32
    c_file_name : Char[260]*
  end
  struct FILEGROUPDESCRIPTORA
    c_items : UInt32
    fgd : FILEDESCRIPTORA[0]*
  end
  struct FILEGROUPDESCRIPTORW
    c_items : UInt32
    fgd : FILEDESCRIPTORW[0]*
  end
  struct DROPFILES
    p_files : UInt32
    pt : POINT
    f_nc : LibC::BOOL
    f_wide : LibC::BOOL
  end
  struct FILE_ATTRIBUTES_ARRAY
    c_items : UInt32
    dw_sum_file_attributes : UInt32
    dw_product_file_attributes : UInt32
    rgdw_file_attributes : UInt32[0]*
  end
  struct DROPDESCRIPTION
    type : DROPIMAGETYPE
    sz_message : Char[260]*
    sz_insert : Char[260]*
  end
  struct SHChangeNotifyEntry
    pidl : ITEMIDLIST*
    f_recursive : LibC::BOOL
  end
  struct SHARDAPPIDINFO
    psi : IShellItem
    psz_app_id : LibC::LPWSTR
  end
  struct SHARDAPPIDINFOIDLIST
    pidl : ITEMIDLIST*
    psz_app_id : LibC::LPWSTR
  end
  struct SHARDAPPIDINFOLINK
    psl : IShellLinkA
    psz_app_id : LibC::LPWSTR
  end
  struct SHChangeDWORDAsIDList
    cb : UInt16
    dw_item1 : UInt32
    dw_item2 : UInt32
    cb_zero : UInt16
  end
  struct SHChangeUpdateImageIDList
    cb : UInt16
    i_icon_index : Int32
    i_cur_index : Int32
    u_flags : UInt32
    dw_process_id : UInt32
    sz_name : Char[260]*
    cb_zero : UInt16
  end
  struct SHDESCRIPTIONID
    dw_description_id : SHDID_ID
    clsid : Guid
  end
  struct AUTO_SCROLL_DATA
    i_next_sample : Int32
    dw_last_scroll : UInt32
    b_full : LibC::BOOL
    pts : POINT[3]*
    dw_times : UInt32[3]*
  end
  struct CABINETSTATE
    c_length : UInt16
    n_version : UInt16
    _bitfield : Int32
    f_menu_enum_filter : UInt32
  end
  struct OPENASINFO
    pcsz_file : LibC::LPWSTR
    pcsz_class : LibC::LPWSTR
    oaif_in_flags : OPEN_AS_INFO_FLAGS
  end
  struct QCMINFO_IDMAP_PLACEMENT
    id : UInt32
    f_flags : UInt32
  end
  struct QCMINFO_IDMAP
    n_max_ids : UInt32
    p_id_list : QCMINFO_IDMAP_PLACEMENT[0]*
  end
  struct QCMINFO
    hmenu : HANDLE
    index_menu : UInt32
    id_cmd_first : UInt32
    id_cmd_last : UInt32
    p_id_map : QCMINFO_IDMAP*
  end
  struct DETAILSINFO
    pidl : ITEMIDLIST*
    fmt : Int32
    cx_char : Int32
    str : STRRET
    i_image : Int32
  end
  struct SFVM_PROPPAGE_DATA
    dw_reserved : UInt32
    pfn : LPFNSVADDPROPSHEETPAGE
    l_param : LPARAM
  end
  struct SFVM_HELPTOPIC_DATA
    wsz_help_file : Char[260]*
    wsz_help_topic : Char[260]*
  end
  struct ITEMSPACING
    cx_small : Int32
    cy_small : Int32
    cx_large : Int32
    cy_large : Int32
  end
  struct SFV_CREATE
    cb_size : UInt32
    pshf : IShellFolder
    psv_outer : IShellView
    psfvcb : IShellFolderViewCB
  end
  struct DEFCONTEXTMENU
    hwnd : HANDLE
    pcmcb : IContextMenuCB
    pidl_folder : ITEMIDLIST*
    psf : IShellFolder
    cidl : UInt32
    apidl : ITEMIDLIST**
    punk_association_info : IUnknown
    c_keys : UInt32
    a_keys : HKEY*
  end
  struct DFMICS
    cb_size : UInt32
    f_mask : UInt32
    l_param : LPARAM
    id_cmd_first : UInt32
    id_def_max : UInt32
    pici : CMINVOKECOMMANDINFO*
    punk_site : IUnknown
  end
  struct CSFV
    cb_size : UInt32
    pshf : IShellFolder
    psv_outer : IShellView
    pidl : ITEMIDLIST*
    l_events : Int32
    pfn_callback : LPFNVIEWCALLBACK
    fvm : FOLDERVIEWMODE
  end
  struct SHELLSTATEA
    _bitfield1 : Int32
    dw_win95_unused : UInt32
    u_win95_unused : UInt32
    l_param_sort : Int32
    i_sort_direction : Int32
    version : UInt32
    u_not_used : UInt32
    _bitfield2 : Int32
  end
  struct SHELLSTATEW
    _bitfield1 : Int32
    dw_win95_unused : UInt32
    u_win95_unused : UInt32
    l_param_sort : Int32
    i_sort_direction : Int32
    version : UInt32
    u_not_used : UInt32
    _bitfield2 : Int32
  end
  struct SHELLFLAGSTATE
    _bitfield : Int32
  end
  struct BANDINFOSFB
    dw_mask : UInt32
    dw_state_mask : UInt32
    dw_state : UInt32
    cr_bkgnd : UInt32
    cr_btn_lt : UInt32
    cr_btn_dk : UInt32
    w_view_mode : UInt16
    w_align : UInt16
    psf : IShellFolder
    pidl : ITEMIDLIST*
  end
  struct SHCOLUMNINFO
    scid : PROPERTYKEY
    vt : UInt16
    fmt : UInt32
    c_chars : UInt32
    cs_flags : UInt32
    wsz_title : Char[80]*
    wsz_description : Char[128]*
  end
  struct SHCOLUMNINIT
    dw_flags : UInt32
    dw_reserved : UInt32
    wsz_folder : Char[260]*
  end
  struct SHCOLUMNDATA
    dw_flags : UInt32
    dw_file_attributes : UInt32
    dw_reserved : UInt32
    pwsz_ext : LibC::LPWSTR
    wsz_file : Char[260]*
  end
  struct SHChangeProductKeyAsIDList
    cb : UInt16
    wsz_product_key : Char[39]*
    cb_zero : UInt16
  end
  struct TBINFO
    cbuttons : UInt32
    u_flags : UInt32
  end
  struct SFV_SETITEMPOS
    pidl : ITEMIDLIST*
    pt : POINT
  end
  struct AASHELLMENUFILENAME
    cb_total : Int16
    rgb_reserved : UInt8[12]*
    sz_file_name : Char[0]*
  end
  struct AASHELLMENUITEM
    lp_reserved1 : Void*
    i_reserved : Int32
    ui_reserved : UInt32
    lp_name : AASHELLMENUFILENAME*
    psz : LibC::LPWSTR
  end
  struct DRAGINFOA
    u_size : UInt32
    pt : POINT
    f_nc : LibC::BOOL
    lp_file_list : PSTR
    grf_key_state : UInt32
  end
  struct DRAGINFOW
    u_size : UInt32
    pt : POINT
    f_nc : LibC::BOOL
    lp_file_list : LibC::LPWSTR
    grf_key_state : UInt32
  end
  struct APPBARDATA
    cb_size : UInt32
    h_wnd : HANDLE
    u_callback_message : UInt32
    u_edge : UInt32
    rc : RECT
    l_param : LPARAM
  end
  struct SHFILEOPSTRUCTA
    hwnd : HANDLE
    w_func : UInt32
    p_from : Int8*
    p_to : Int8*
    f_flags : UInt16
    f_any_operations_aborted : LibC::BOOL
    h_name_mappings : Void*
    lpsz_progress_title : PSTR
  end
  struct SHFILEOPSTRUCTW
    hwnd : HANDLE
    w_func : UInt32
    p_from : LibC::LPWSTR
    p_to : LibC::LPWSTR
    f_flags : UInt16
    f_any_operations_aborted : LibC::BOOL
    h_name_mappings : Void*
    lpsz_progress_title : LibC::LPWSTR
  end
  struct SHNAMEMAPPINGA
    psz_old_path : PSTR
    psz_new_path : PSTR
    cch_old_path : Int32
    cch_new_path : Int32
  end
  struct SHNAMEMAPPINGW
    psz_old_path : LibC::LPWSTR
    psz_new_path : LibC::LPWSTR
    cch_old_path : Int32
    cch_new_path : Int32
  end
  struct SHELLEXECUTEINFOA
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    lp_verb : PSTR
    lp_file : PSTR
    lp_parameters : PSTR
    lp_directory : PSTR
    n_show : Int32
    h_inst_app : HINSTANCE
    lp_id_list : Void*
    lp_class : PSTR
    hkey_class : HKEY
    dw_hot_key : UInt32
    anonymous : SHELLEXECUTEINFOA_Anonymous_e__Union
    h_process : LibC::HANDLE
  end
  struct SHELLEXECUTEINFOW
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    lp_verb : LibC::LPWSTR
    lp_file : LibC::LPWSTR
    lp_parameters : LibC::LPWSTR
    lp_directory : LibC::LPWSTR
    n_show : Int32
    h_inst_app : HINSTANCE
    lp_id_list : Void*
    lp_class : LibC::LPWSTR
    hkey_class : HKEY
    dw_hot_key : UInt32
    anonymous : SHELLEXECUTEINFOW_Anonymous_e__Union
    h_process : LibC::HANDLE
  end
  struct SHCREATEPROCESSINFOW
    cb_size : UInt32
    f_mask : UInt32
    hwnd : HANDLE
    psz_file : LibC::LPWSTR
    psz_parameters : LibC::LPWSTR
    psz_current_directory : LibC::LPWSTR
    h_user_token : LibC::HANDLE
    lp_process_attributes : SECURITY_ATTRIBUTES*
    lp_thread_attributes : SECURITY_ATTRIBUTES*
    b_inherit_handles : LibC::BOOL
    dw_creation_flags : UInt32
    lp_startup_info : STARTUPINFOW*
    lp_process_information : PROCESS_INFORMATION*
  end
  struct ASSOCIATIONELEMENT
    ac : ASSOCCLASS
    hk_class : HKEY
    psz_class : LibC::LPWSTR
  end
  struct SHQUERYRBINFO
    cb_size : UInt32
    i64_size : Int64
    i64_num_items : Int64
  end
  struct NOTIFYICONDATAA
    cb_size : UInt32
    h_wnd : HANDLE
    u_id : UInt32
    u_flags : NOTIFY_ICON_DATA_FLAGS
    u_callback_message : UInt32
    h_icon : HANDLE
    sz_tip : CHAR[128]*
    dw_state : UInt32
    dw_state_mask : UInt32
    sz_info : CHAR[256]*
    anonymous : NOTIFYICONDATAA_Anonymous_e__Union
    sz_info_title : CHAR[64]*
    dw_info_flags : UInt32
    guid_item : Guid
    h_balloon_icon : HANDLE
  end
  struct NOTIFYICONDATAW
    cb_size : UInt32
    h_wnd : HANDLE
    u_id : UInt32
    u_flags : NOTIFY_ICON_DATA_FLAGS
    u_callback_message : UInt32
    h_icon : HANDLE
    sz_tip : Char[128]*
    dw_state : UInt32
    dw_state_mask : UInt32
    sz_info : Char[256]*
    anonymous : NOTIFYICONDATAW_Anonymous_e__Union
    sz_info_title : Char[64]*
    dw_info_flags : UInt32
    guid_item : Guid
    h_balloon_icon : HANDLE
  end
  struct NOTIFYICONIDENTIFIER
    cb_size : UInt32
    h_wnd : HANDLE
    u_id : UInt32
    guid_item : Guid
  end
  struct SHFILEINFOA
    h_icon : HANDLE
    i_icon : Int32
    dw_attributes : UInt32
    sz_display_name : CHAR[260]*
    sz_type_name : CHAR[80]*
  end
  struct SHFILEINFOW
    h_icon : HANDLE
    i_icon : Int32
    dw_attributes : UInt32
    sz_display_name : Char[260]*
    sz_type_name : Char[80]*
  end
  struct SHSTOCKICONINFO
    cb_size : UInt32
    h_icon : HANDLE
    i_sys_image_index : Int32
    i_icon : Int32
    sz_path : Char[260]*
  end
  struct OPEN_PRINTER_PROPS_INFOA
    dw_size : UInt32
    psz_sheet_name : PSTR
    u_sheet_index : UInt32
    dw_flags : UInt32
    b_modal : LibC::BOOL
  end
  struct OPEN_PRINTER_PROPS_INFOW
    dw_size : UInt32
    psz_sheet_name : LibC::LPWSTR
    u_sheet_index : UInt32
    dw_flags : UInt32
    b_modal : LibC::BOOL
  end
  struct NC_ADDRESS
    p_addr_info : NC_ADDRESS_NET_ADDRESS_INFO*
    port_number : UInt16
    prefix_length : UInt8
  end
  struct PARSEDURLA
    cb_size : UInt32
    psz_protocol : PSTR
    cch_protocol : UInt32
    psz_suffix : PSTR
    cch_suffix : UInt32
    n_scheme : UInt32
  end
  struct PARSEDURLW
    cb_size : UInt32
    psz_protocol : LibC::LPWSTR
    cch_protocol : UInt32
    psz_suffix : LibC::LPWSTR
    cch_suffix : UInt32
    n_scheme : UInt32
  end
  struct QITAB
    piid : Guid*
    dw_offset : UInt32
  end
  struct DLLVERSIONINFO
    cb_size : UInt32
    dw_major_version : UInt32
    dw_minor_version : UInt32
    dw_build_number : UInt32
    dw_platform_id : UInt32
  end
  struct DLLVERSIONINFO2
    info1 : DLLVERSIONINFO
    dw_flags : UInt32
    ull_version : UInt64
  end
  struct APPINFODATA
    cb_size : UInt32
    dw_mask : UInt32
    psz_display_name : LibC::LPWSTR
    psz_version : LibC::LPWSTR
    psz_publisher : LibC::LPWSTR
    psz_product_id : LibC::LPWSTR
    psz_registered_owner : LibC::LPWSTR
    psz_registered_company : LibC::LPWSTR
    psz_language : LibC::LPWSTR
    psz_support_url : LibC::LPWSTR
    psz_support_telephone : LibC::LPWSTR
    psz_help_link : LibC::LPWSTR
    psz_install_location : LibC::LPWSTR
    psz_install_source : LibC::LPWSTR
    psz_install_date : LibC::LPWSTR
    psz_contact : LibC::LPWSTR
    psz_comments : LibC::LPWSTR
    psz_image : LibC::LPWSTR
    psz_readme_url : LibC::LPWSTR
    psz_update_info_url : LibC::LPWSTR
  end
  struct SLOWAPPINFO
    ull_size : UInt64
    ft_last_used : FILETIME
    i_times_used : Int32
    psz_image : LibC::LPWSTR
  end
  struct PUBAPPINFO
    cb_size : UInt32
    dw_mask : UInt32
    psz_source : LibC::LPWSTR
    st_assigned : SYSTEMTIME
    st_published : SYSTEMTIME
    st_scheduled : SYSTEMTIME
    st_expire : SYSTEMTIME
  end
  struct CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR
    dw_field_id : UInt32
    cpft : CREDENTIAL_PROVIDER_FIELD_TYPE
    psz_label : LibC::LPWSTR
    guid_field_type : Guid
  end
  struct CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION
    ul_authentication_package : UInt32
    clsid_credential_provider : Guid
    cb_serialization : UInt32
    rgb_serialization : UInt8*
  end
  struct SYNCMGR_CONFLICT_ID_INFO
    pblob_id : BYTE_BLOB*
    pblob_extra : BYTE_BLOB*
  end
  struct CONFIRM_CONFLICT_ITEM
    p_shell_item : IShellItem2
    psz_original_name : LibC::LPWSTR
    psz_alternate_name : LibC::LPWSTR
    psz_location_short : LibC::LPWSTR
    psz_location_full : LibC::LPWSTR
    n_type : SYNCMGR_CONFLICT_ITEM_TYPE
  end
  struct CONFIRM_CONFLICT_RESULT_INFO
    psz_new_name : LibC::LPWSTR
    i_item_index : UInt32
  end
  struct WTS_THUMBNAILID
    rgb_key : UInt8[16]*
  end
  struct SYNCMGRPROGRESSITEM
    cb_size : UInt32
    mask : UInt32
    lpc_status_text : LibC::LPWSTR
    dw_status_type : UInt32
    i_prog_value : Int32
    i_max_value : Int32
  end
  struct SYNCMGRLOGERRORINFO
    cb_size : UInt32
    mask : UInt32
    dw_sync_mgr_error_flags : UInt32
    error_id : Guid
    item_id : Guid
  end
  struct SYNCMGRITEM
    cb_size : UInt32
    dw_flags : UInt32
    item_id : Guid
    dw_item_state : UInt32
    h_icon : HANDLE
    wsz_item_name : Char[128]*
    ft_last_update : FILETIME
  end
  struct SYNCMGRHANDLERINFO
    cb_size : UInt32
    h_icon : HANDLE
    sync_mgr_handler_flags : UInt32
    wsz_handler_name : Char[32]*
  end
  struct WINDOWDATA
    dw_window_id : UInt32
    ui_cp : UInt32
    pidl : ITEMIDLIST*
    lpsz_url : LibC::LPWSTR
    lpsz_url_location : LibC::LPWSTR
    lpsz_title : LibC::LPWSTR
  end
  struct HLITEM
    u_hlid : UInt32
    pwz_friendly_name : LibC::LPWSTR
  end
  struct HLTBINFO
    u_dock_type : UInt32
    rc_tb_pos : RECT
  end
  struct HLBWINFO
    cb_size : UInt32
    grf_hlbwif : UInt32
    rc_frame_pos : RECT
    rc_doc_pos : RECT
    hltbinfo : HLTBINFO
  end
  struct BASEBROWSERDATAXP
    _hwnd : HANDLE
    _ptl : ITravelLog
    _phlf : IHlinkFrame
    _pauto_wb2 : IWebBrowser2
    _pauto_eds : IExpDispSupportXP
    _pauto_ss : IShellService
    _e_secure_lock_icon : Int32
    _bitfield : UInt32
    _u_activate_state : UInt32
    _pidl_view_state : ITEMIDLIST*
    _pct_view : IOleCommandTarget
    _pidl_cur : ITEMIDLIST*
    _psv : IShellView
    _psf : IShellFolder
    _hwnd_view : HANDLE
    _psz_title_cur : LibC::LPWSTR
    _pidl_pending : ITEMIDLIST*
    _psv_pending : IShellView
    _psf_pending : IShellFolder
    _hwnd_view_pending : HANDLE
    _psz_title_pending : LibC::LPWSTR
    _f_is_view_mshtml : LibC::BOOL
    _f_privacy_impacted : LibC::BOOL
    _clsid_view : Guid
    _clsid_view_pending : Guid
    _hwnd_frame : HANDLE
  end
  struct BASEBROWSERDATALH
    _hwnd : HANDLE
    _ptl : ITravelLog
    _phlf : IHlinkFrame
    _pauto_wb2 : IWebBrowser2
    _pauto_eds : IExpDispSupport
    _pauto_ss : IShellService
    _e_secure_lock_icon : Int32
    _bitfield : UInt32
    _u_activate_state : UInt32
    _pidl_view_state : ITEMIDLIST*
    _pct_view : IOleCommandTarget
    _pidl_cur : ITEMIDLIST*
    _psv : IShellView
    _psf : IShellFolder
    _hwnd_view : HANDLE
    _psz_title_cur : LibC::LPWSTR
    _pidl_pending : ITEMIDLIST*
    _psv_pending : IShellView
    _psf_pending : IShellFolder
    _hwnd_view_pending : HANDLE
    _psz_title_pending : LibC::LPWSTR
    _f_is_view_mshtml : LibC::BOOL
    _f_privacy_impacted : LibC::BOOL
    _clsid_view : Guid
    _clsid_view_pending : Guid
    _hwnd_frame : HANDLE
    _l_phishing_filter_status : Int32
  end
  struct FOLDERSETDATA
    _fs : FOLDERSETTINGS
    _vid_restore : Guid
    _dw_view_priority : UInt32
  end
  struct TOOLBARITEM
    ptbar : IDockingWindow
    rc_border_tool : RECT
    pwsz_item : LibC::LPWSTR
    f_show : LibC::BOOL
    h_mon : HMONITOR
  end
  struct CPLINFO
    id_icon : Int32
    id_name : Int32
    id_info : Int32
    l_data : LibC::IntPtrT
  end
  struct NEWCPLINFOA
    dw_size : UInt32
    dw_flags : UInt32
    dw_help_context : UInt32
    l_data : LibC::IntPtrT
    h_icon : HANDLE
    sz_name : CHAR[32]*
    sz_info : CHAR[64]*
    sz_help_file : CHAR[128]*
  end
  struct NEWCPLINFOW
    dw_size : UInt32
    dw_flags : UInt32
    dw_help_context : UInt32
    l_data : LibC::IntPtrT
    h_icon : HANDLE
    sz_name : Char[32]*
    sz_info : Char[64]*
    sz_help_file : Char[128]*
  end
  struct PROFILEINFOA
    dw_size : UInt32
    dw_flags : UInt32
    lp_user_name : PSTR
    lp_profile_path : PSTR
    lp_default_path : PSTR
    lp_server_name : PSTR
    lp_policy_path : PSTR
    h_profile : LibC::HANDLE
  end
  struct PROFILEINFOW
    dw_size : UInt32
    dw_flags : UInt32
    lp_user_name : LibC::LPWSTR
    lp_profile_path : LibC::LPWSTR
    lp_default_path : LibC::LPWSTR
    lp_server_name : LibC::LPWSTR
    lp_policy_path : LibC::LPWSTR
    h_profile : LibC::HANDLE
  end
  struct Urlinvokecommandinfoa
    dwcb_size : UInt32
    dw_flags : UInt32
    hwnd_parent : HANDLE
    pcsz_verb : PSTR
  end
  struct Urlinvokecommandinfow
    dwcb_size : UInt32
    dw_flags : UInt32
    hwnd_parent : HANDLE
    pcsz_verb : LibC::LPWSTR
  end


  struct INotifyReplicaVTbl
    query_interface : Proc(INotifyReplica*, Guid*, Void**, HRESULT)
    add_ref : Proc(INotifyReplica*, UInt32)
    release : Proc(INotifyReplica*, UInt32)
    you_are_a_replica : Proc(INotifyReplica*, UInt32, IMoniker*, HRESULT)
  end

  struct INotifyReplica
    lpVtbl : INotifyReplicaVTbl*
  end

  struct IContextMenuVTbl
    query_interface : Proc(IContextMenu*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContextMenu*, UInt32)
    release : Proc(IContextMenu*, UInt32)
    query_context_menu : Proc(IContextMenu*, LibC::HANDLE, UInt32, UInt32, UInt32, UInt32, HRESULT)
    invoke_command : Proc(IContextMenu*, CMINVOKECOMMANDINFO*, HRESULT)
    get_command_string : Proc(IContextMenu*, LibC::UINT_PTR, UInt32, UInt32*, PSTR, UInt32, HRESULT)
  end

  struct IContextMenu
    lpVtbl : IContextMenuVTbl*
  end

  struct IContextMenu2VTbl
    query_interface : Proc(IContextMenu2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContextMenu2*, UInt32)
    release : Proc(IContextMenu2*, UInt32)
    query_context_menu : Proc(IContextMenu2*, LibC::HANDLE, UInt32, UInt32, UInt32, UInt32, HRESULT)
    invoke_command : Proc(IContextMenu2*, CMINVOKECOMMANDINFO*, HRESULT)
    get_command_string : Proc(IContextMenu2*, LibC::UINT_PTR, UInt32, UInt32*, PSTR, UInt32, HRESULT)
    handle_menu_msg : Proc(IContextMenu2*, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  end

  struct IContextMenu2
    lpVtbl : IContextMenu2VTbl*
  end

  struct IContextMenu3VTbl
    query_interface : Proc(IContextMenu3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContextMenu3*, UInt32)
    release : Proc(IContextMenu3*, UInt32)
    query_context_menu : Proc(IContextMenu3*, LibC::HANDLE, UInt32, UInt32, UInt32, UInt32, HRESULT)
    invoke_command : Proc(IContextMenu3*, CMINVOKECOMMANDINFO*, HRESULT)
    get_command_string : Proc(IContextMenu3*, LibC::UINT_PTR, UInt32, UInt32*, PSTR, UInt32, HRESULT)
    handle_menu_msg : Proc(IContextMenu3*, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
    handle_menu_msg2 : Proc(IContextMenu3*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, HRESULT)
  end

  struct IContextMenu3
    lpVtbl : IContextMenu3VTbl*
  end

  struct IExecuteCommandVTbl
    query_interface : Proc(IExecuteCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExecuteCommand*, UInt32)
    release : Proc(IExecuteCommand*, UInt32)
    set_key_state : Proc(IExecuteCommand*, UInt32, HRESULT)
    set_parameters : Proc(IExecuteCommand*, LibC::LPWSTR, HRESULT)
    set_position : Proc(IExecuteCommand*, POINT, HRESULT)
    set_show_window : Proc(IExecuteCommand*, Int32, HRESULT)
    set_no_show_ui : Proc(IExecuteCommand*, LibC::BOOL, HRESULT)
    set_directory : Proc(IExecuteCommand*, LibC::LPWSTR, HRESULT)
    execute : Proc(IExecuteCommand*, HRESULT)
  end

  struct IExecuteCommand
    lpVtbl : IExecuteCommandVTbl*
  end

  struct IPersistFolderVTbl
    query_interface : Proc(IPersistFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistFolder*, UInt32)
    release : Proc(IPersistFolder*, UInt32)
    get_class_id : Proc(IPersistFolder*, Guid*, HRESULT)
    initialize : Proc(IPersistFolder*, ITEMIDLIST*, HRESULT)
  end

  struct IPersistFolder
    lpVtbl : IPersistFolderVTbl*
  end

  struct IRunnableTaskVTbl
    query_interface : Proc(IRunnableTask*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRunnableTask*, UInt32)
    release : Proc(IRunnableTask*, UInt32)
    run : Proc(IRunnableTask*, HRESULT)
    kill : Proc(IRunnableTask*, LibC::BOOL, HRESULT)
    suspend : Proc(IRunnableTask*, HRESULT)
    resume : Proc(IRunnableTask*, HRESULT)
    is_running : Proc(IRunnableTask*, UInt32)
  end

  struct IRunnableTask
    lpVtbl : IRunnableTaskVTbl*
  end

  struct IShellTaskSchedulerVTbl
    query_interface : Proc(IShellTaskScheduler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellTaskScheduler*, UInt32)
    release : Proc(IShellTaskScheduler*, UInt32)
    add_task : Proc(IShellTaskScheduler*, IRunnableTask, Guid*, LibC::UINT_PTR, UInt32, HRESULT)
    remove_tasks : Proc(IShellTaskScheduler*, Guid*, LibC::UINT_PTR, LibC::BOOL, HRESULT)
    count_tasks : Proc(IShellTaskScheduler*, Guid*, UInt32)
    status : Proc(IShellTaskScheduler*, UInt32, UInt32, HRESULT)
  end

  struct IShellTaskScheduler
    lpVtbl : IShellTaskSchedulerVTbl*
  end

  struct IPersistFolder2VTbl
    query_interface : Proc(IPersistFolder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistFolder2*, UInt32)
    release : Proc(IPersistFolder2*, UInt32)
    get_class_id : Proc(IPersistFolder2*, Guid*, HRESULT)
    initialize : Proc(IPersistFolder2*, ITEMIDLIST*, HRESULT)
    get_cur_folder : Proc(IPersistFolder2*, ITEMIDLIST**, HRESULT)
  end

  struct IPersistFolder2
    lpVtbl : IPersistFolder2VTbl*
  end

  struct IPersistFolder3VTbl
    query_interface : Proc(IPersistFolder3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistFolder3*, UInt32)
    release : Proc(IPersistFolder3*, UInt32)
    get_class_id : Proc(IPersistFolder3*, Guid*, HRESULT)
    initialize : Proc(IPersistFolder3*, ITEMIDLIST*, HRESULT)
    get_cur_folder : Proc(IPersistFolder3*, ITEMIDLIST**, HRESULT)
    initialize_ex : Proc(IPersistFolder3*, IBindCtx, ITEMIDLIST*, PERSIST_FOLDER_TARGET_INFO*, HRESULT)
    get_folder_target_info : Proc(IPersistFolder3*, PERSIST_FOLDER_TARGET_INFO*, HRESULT)
  end

  struct IPersistFolder3
    lpVtbl : IPersistFolder3VTbl*
  end

  struct IPersistIDListVTbl
    query_interface : Proc(IPersistIDList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistIDList*, UInt32)
    release : Proc(IPersistIDList*, UInt32)
    get_class_id : Proc(IPersistIDList*, Guid*, HRESULT)
    set_id_list : Proc(IPersistIDList*, ITEMIDLIST*, HRESULT)
    get_id_list : Proc(IPersistIDList*, ITEMIDLIST**, HRESULT)
  end

  struct IPersistIDList
    lpVtbl : IPersistIDListVTbl*
  end

  struct IEnumIDListVTbl
    query_interface : Proc(IEnumIDList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumIDList*, UInt32)
    release : Proc(IEnumIDList*, UInt32)
    next : Proc(IEnumIDList*, UInt32, ITEMIDLIST**, UInt32*, HRESULT)
    skip : Proc(IEnumIDList*, UInt32, HRESULT)
    reset : Proc(IEnumIDList*, HRESULT)
    clone : Proc(IEnumIDList*, IEnumIDList*, HRESULT)
  end

  struct IEnumIDList
    lpVtbl : IEnumIDListVTbl*
  end

  struct IEnumFullIDListVTbl
    query_interface : Proc(IEnumFullIDList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumFullIDList*, UInt32)
    release : Proc(IEnumFullIDList*, UInt32)
    next : Proc(IEnumFullIDList*, UInt32, ITEMIDLIST**, UInt32*, HRESULT)
    skip : Proc(IEnumFullIDList*, UInt32, HRESULT)
    reset : Proc(IEnumFullIDList*, HRESULT)
    clone : Proc(IEnumFullIDList*, IEnumFullIDList*, HRESULT)
  end

  struct IEnumFullIDList
    lpVtbl : IEnumFullIDListVTbl*
  end

  struct IFileSyncMergeHandlerVTbl
    query_interface : Proc(IFileSyncMergeHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSyncMergeHandler*, UInt32)
    release : Proc(IFileSyncMergeHandler*, UInt32)
    merge : Proc(IFileSyncMergeHandler*, LibC::LPWSTR, LibC::LPWSTR, MERGE_UPDATE_STATUS*, HRESULT)
    show_resolve_conflict_ui_async : Proc(IFileSyncMergeHandler*, LibC::LPWSTR, HMONITOR, HRESULT)
  end

  struct IFileSyncMergeHandler
    lpVtbl : IFileSyncMergeHandlerVTbl*
  end

  struct IObjectWithFolderEnumModeVTbl
    query_interface : Proc(IObjectWithFolderEnumMode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithFolderEnumMode*, UInt32)
    release : Proc(IObjectWithFolderEnumMode*, UInt32)
    set_mode : Proc(IObjectWithFolderEnumMode*, FOLDER_ENUM_MODE, HRESULT)
    get_mode : Proc(IObjectWithFolderEnumMode*, FOLDER_ENUM_MODE*, HRESULT)
  end

  struct IObjectWithFolderEnumMode
    lpVtbl : IObjectWithFolderEnumModeVTbl*
  end

  struct IParseAndCreateItemVTbl
    query_interface : Proc(IParseAndCreateItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IParseAndCreateItem*, UInt32)
    release : Proc(IParseAndCreateItem*, UInt32)
    set_item : Proc(IParseAndCreateItem*, IShellItem, HRESULT)
    get_item : Proc(IParseAndCreateItem*, Guid*, Void**, HRESULT)
  end

  struct IParseAndCreateItem
    lpVtbl : IParseAndCreateItemVTbl*
  end

  struct IShellFolderVTbl
    query_interface : Proc(IShellFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolder*, UInt32)
    release : Proc(IShellFolder*, UInt32)
    parse_display_name : Proc(IShellFolder*, LibC::HANDLE, IBindCtx, LibC::LPWSTR, UInt32*, ITEMIDLIST**, UInt32*, HRESULT)
    enum_objects : Proc(IShellFolder*, LibC::HANDLE, UInt32, IEnumIDList*, HRESULT)
    bind_to_object : Proc(IShellFolder*, ITEMIDLIST*, IBindCtx, Guid*, Void**, HRESULT)
    bind_to_storage : Proc(IShellFolder*, ITEMIDLIST*, IBindCtx, Guid*, Void**, HRESULT)
    compare_i_ds : Proc(IShellFolder*, LPARAM, ITEMIDLIST*, ITEMIDLIST*, HRESULT)
    create_view_object : Proc(IShellFolder*, LibC::HANDLE, Guid*, Void**, HRESULT)
    get_attributes_of : Proc(IShellFolder*, UInt32, ITEMIDLIST**, UInt32*, HRESULT)
    get_ui_object_of : Proc(IShellFolder*, LibC::HANDLE, UInt32, ITEMIDLIST**, Guid*, UInt32*, Void**, HRESULT)
    get_display_name_of : Proc(IShellFolder*, ITEMIDLIST*, UInt32, STRRET*, HRESULT)
    set_name_of : Proc(IShellFolder*, LibC::HANDLE, ITEMIDLIST*, LibC::LPWSTR, UInt32, ITEMIDLIST**, HRESULT)
  end

  struct IShellFolder
    lpVtbl : IShellFolderVTbl*
  end

  struct IEnumExtraSearchVTbl
    query_interface : Proc(IEnumExtraSearch*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumExtraSearch*, UInt32)
    release : Proc(IEnumExtraSearch*, UInt32)
    next : Proc(IEnumExtraSearch*, UInt32, EXTRASEARCH*, UInt32*, HRESULT)
    skip : Proc(IEnumExtraSearch*, UInt32, HRESULT)
    reset : Proc(IEnumExtraSearch*, HRESULT)
    clone : Proc(IEnumExtraSearch*, IEnumExtraSearch*, HRESULT)
  end

  struct IEnumExtraSearch
    lpVtbl : IEnumExtraSearchVTbl*
  end

  struct IShellFolder2VTbl
    query_interface : Proc(IShellFolder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolder2*, UInt32)
    release : Proc(IShellFolder2*, UInt32)
    parse_display_name : Proc(IShellFolder2*, LibC::HANDLE, IBindCtx, LibC::LPWSTR, UInt32*, ITEMIDLIST**, UInt32*, HRESULT)
    enum_objects : Proc(IShellFolder2*, LibC::HANDLE, UInt32, IEnumIDList*, HRESULT)
    bind_to_object : Proc(IShellFolder2*, ITEMIDLIST*, IBindCtx, Guid*, Void**, HRESULT)
    bind_to_storage : Proc(IShellFolder2*, ITEMIDLIST*, IBindCtx, Guid*, Void**, HRESULT)
    compare_i_ds : Proc(IShellFolder2*, LPARAM, ITEMIDLIST*, ITEMIDLIST*, HRESULT)
    create_view_object : Proc(IShellFolder2*, LibC::HANDLE, Guid*, Void**, HRESULT)
    get_attributes_of : Proc(IShellFolder2*, UInt32, ITEMIDLIST**, UInt32*, HRESULT)
    get_ui_object_of : Proc(IShellFolder2*, LibC::HANDLE, UInt32, ITEMIDLIST**, Guid*, UInt32*, Void**, HRESULT)
    get_display_name_of : Proc(IShellFolder2*, ITEMIDLIST*, UInt32, STRRET*, HRESULT)
    set_name_of : Proc(IShellFolder2*, LibC::HANDLE, ITEMIDLIST*, LibC::LPWSTR, UInt32, ITEMIDLIST**, HRESULT)
    get_default_search_guid : Proc(IShellFolder2*, Guid*, HRESULT)
    enum_searches : Proc(IShellFolder2*, IEnumExtraSearch*, HRESULT)
    get_default_column : Proc(IShellFolder2*, UInt32, UInt32*, UInt32*, HRESULT)
    get_default_column_state : Proc(IShellFolder2*, UInt32, UInt32*, HRESULT)
    get_details_ex : Proc(IShellFolder2*, ITEMIDLIST*, PROPERTYKEY*, VARIANT*, HRESULT)
    get_details_of : Proc(IShellFolder2*, ITEMIDLIST*, UInt32, SHELLDETAILS*, HRESULT)
    map_column_to_scid : Proc(IShellFolder2*, UInt32, PROPERTYKEY*, HRESULT)
  end

  struct IShellFolder2
    lpVtbl : IShellFolder2VTbl*
  end

  struct IShellViewVTbl
    query_interface : Proc(IShellView*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellView*, UInt32)
    release : Proc(IShellView*, UInt32)
    get_window : Proc(IShellView*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IShellView*, LibC::BOOL, HRESULT)
    translate_accelerator : Proc(IShellView*, MSG*, HRESULT)
    enable_modeless : Proc(IShellView*, LibC::BOOL, HRESULT)
    ui_activate : Proc(IShellView*, UInt32, HRESULT)
    refresh : Proc(IShellView*, HRESULT)
    create_view_window : Proc(IShellView*, IShellView, FOLDERSETTINGS*, IShellBrowser, RECT*, HANDLE*, HRESULT)
    destroy_view_window : Proc(IShellView*, HRESULT)
    get_current_info : Proc(IShellView*, FOLDERSETTINGS*, HRESULT)
    add_property_sheet_pages : Proc(IShellView*, UInt32, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
    save_view_state : Proc(IShellView*, HRESULT)
    select_item : Proc(IShellView*, ITEMIDLIST*, UInt32, HRESULT)
    get_item_object : Proc(IShellView*, UInt32, Guid*, Void**, HRESULT)
  end

  struct IShellView
    lpVtbl : IShellViewVTbl*
  end

  struct IShellView2VTbl
    query_interface : Proc(IShellView2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellView2*, UInt32)
    release : Proc(IShellView2*, UInt32)
    get_window : Proc(IShellView2*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IShellView2*, LibC::BOOL, HRESULT)
    translate_accelerator : Proc(IShellView2*, MSG*, HRESULT)
    enable_modeless : Proc(IShellView2*, LibC::BOOL, HRESULT)
    ui_activate : Proc(IShellView2*, UInt32, HRESULT)
    refresh : Proc(IShellView2*, HRESULT)
    create_view_window : Proc(IShellView2*, IShellView, FOLDERSETTINGS*, IShellBrowser, RECT*, HANDLE*, HRESULT)
    destroy_view_window : Proc(IShellView2*, HRESULT)
    get_current_info : Proc(IShellView2*, FOLDERSETTINGS*, HRESULT)
    add_property_sheet_pages : Proc(IShellView2*, UInt32, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
    save_view_state : Proc(IShellView2*, HRESULT)
    select_item : Proc(IShellView2*, ITEMIDLIST*, UInt32, HRESULT)
    get_item_object : Proc(IShellView2*, UInt32, Guid*, Void**, HRESULT)
    get_view : Proc(IShellView2*, Guid*, UInt32, HRESULT)
    create_view_window2 : Proc(IShellView2*, SV2CVW2_PARAMS*, HRESULT)
    handle_rename : Proc(IShellView2*, ITEMIDLIST*, HRESULT)
    select_and_position_item : Proc(IShellView2*, ITEMIDLIST*, UInt32, POINT*, HRESULT)
  end

  struct IShellView2
    lpVtbl : IShellView2VTbl*
  end

  struct IFolderViewVTbl
    query_interface : Proc(IFolderView*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderView*, UInt32)
    release : Proc(IFolderView*, UInt32)
    get_current_view_mode : Proc(IFolderView*, UInt32*, HRESULT)
    set_current_view_mode : Proc(IFolderView*, UInt32, HRESULT)
    get_folder : Proc(IFolderView*, Guid*, Void**, HRESULT)
    item : Proc(IFolderView*, Int32, ITEMIDLIST**, HRESULT)
    item_count : Proc(IFolderView*, UInt32, Int32*, HRESULT)
    items : Proc(IFolderView*, UInt32, Guid*, Void**, HRESULT)
    get_selection_marked_item : Proc(IFolderView*, Int32*, HRESULT)
    get_focused_item : Proc(IFolderView*, Int32*, HRESULT)
    get_item_position : Proc(IFolderView*, ITEMIDLIST*, POINT*, HRESULT)
    get_spacing : Proc(IFolderView*, POINT*, HRESULT)
    get_default_spacing : Proc(IFolderView*, POINT*, HRESULT)
    get_auto_arrange : Proc(IFolderView*, HRESULT)
    select_item : Proc(IFolderView*, Int32, UInt32, HRESULT)
    select_and_position_items : Proc(IFolderView*, UInt32, ITEMIDLIST**, POINT*, UInt32, HRESULT)
  end

  struct IFolderView
    lpVtbl : IFolderViewVTbl*
  end

  struct IFolderView2VTbl
    query_interface : Proc(IFolderView2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderView2*, UInt32)
    release : Proc(IFolderView2*, UInt32)
    get_current_view_mode : Proc(IFolderView2*, UInt32*, HRESULT)
    set_current_view_mode : Proc(IFolderView2*, UInt32, HRESULT)
    get_folder : Proc(IFolderView2*, Guid*, Void**, HRESULT)
    item : Proc(IFolderView2*, Int32, ITEMIDLIST**, HRESULT)
    item_count : Proc(IFolderView2*, UInt32, Int32*, HRESULT)
    items : Proc(IFolderView2*, UInt32, Guid*, Void**, HRESULT)
    get_selection_marked_item : Proc(IFolderView2*, Int32*, HRESULT)
    get_focused_item : Proc(IFolderView2*, Int32*, HRESULT)
    get_item_position : Proc(IFolderView2*, ITEMIDLIST*, POINT*, HRESULT)
    get_spacing : Proc(IFolderView2*, POINT*, HRESULT)
    get_default_spacing : Proc(IFolderView2*, POINT*, HRESULT)
    get_auto_arrange : Proc(IFolderView2*, HRESULT)
    select_item : Proc(IFolderView2*, Int32, UInt32, HRESULT)
    select_and_position_items : Proc(IFolderView2*, UInt32, ITEMIDLIST**, POINT*, UInt32, HRESULT)
    set_group_by : Proc(IFolderView2*, PROPERTYKEY*, LibC::BOOL, HRESULT)
    get_group_by : Proc(IFolderView2*, PROPERTYKEY*, LibC::BOOL*, HRESULT)
    set_view_property : Proc(IFolderView2*, ITEMIDLIST*, PROPERTYKEY*, PROPVARIANT*, HRESULT)
    get_view_property : Proc(IFolderView2*, ITEMIDLIST*, PROPERTYKEY*, PROPVARIANT*, HRESULT)
    set_tile_view_properties : Proc(IFolderView2*, ITEMIDLIST*, LibC::LPWSTR, HRESULT)
    set_extended_tile_view_properties : Proc(IFolderView2*, ITEMIDLIST*, LibC::LPWSTR, HRESULT)
    set_text : Proc(IFolderView2*, FVTEXTTYPE, LibC::LPWSTR, HRESULT)
    set_current_folder_flags : Proc(IFolderView2*, UInt32, UInt32, HRESULT)
    get_current_folder_flags : Proc(IFolderView2*, UInt32*, HRESULT)
    get_sort_column_count : Proc(IFolderView2*, Int32*, HRESULT)
    set_sort_columns : Proc(IFolderView2*, SORTCOLUMN*, Int32, HRESULT)
    get_sort_columns : Proc(IFolderView2*, SORTCOLUMN*, Int32, HRESULT)
    get_item : Proc(IFolderView2*, Int32, Guid*, Void**, HRESULT)
    get_visible_item : Proc(IFolderView2*, Int32, LibC::BOOL, Int32*, HRESULT)
    get_selected_item : Proc(IFolderView2*, Int32, Int32*, HRESULT)
    get_selection : Proc(IFolderView2*, LibC::BOOL, IShellItemArray*, HRESULT)
    get_selection_state : Proc(IFolderView2*, ITEMIDLIST*, UInt32*, HRESULT)
    invoke_verb_on_selection : Proc(IFolderView2*, PSTR, HRESULT)
    set_view_mode_and_icon_size : Proc(IFolderView2*, FOLDERVIEWMODE, Int32, HRESULT)
    get_view_mode_and_icon_size : Proc(IFolderView2*, FOLDERVIEWMODE*, Int32*, HRESULT)
    set_group_subset_count : Proc(IFolderView2*, UInt32, HRESULT)
    get_group_subset_count : Proc(IFolderView2*, UInt32*, HRESULT)
    set_redraw : Proc(IFolderView2*, LibC::BOOL, HRESULT)
    is_move_in_same_folder : Proc(IFolderView2*, HRESULT)
    do_rename : Proc(IFolderView2*, HRESULT)
  end

  struct IFolderView2
    lpVtbl : IFolderView2VTbl*
  end

  struct IFolderViewSettingsVTbl
    query_interface : Proc(IFolderViewSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderViewSettings*, UInt32)
    release : Proc(IFolderViewSettings*, UInt32)
    get_column_property_list : Proc(IFolderViewSettings*, Guid*, Void**, HRESULT)
    get_group_by_property : Proc(IFolderViewSettings*, PROPERTYKEY*, LibC::BOOL*, HRESULT)
    get_view_mode : Proc(IFolderViewSettings*, FOLDERLOGICALVIEWMODE*, HRESULT)
    get_icon_size : Proc(IFolderViewSettings*, UInt32*, HRESULT)
    get_folder_flags : Proc(IFolderViewSettings*, FOLDERFLAGS*, FOLDERFLAGS*, HRESULT)
    get_sort_columns : Proc(IFolderViewSettings*, SORTCOLUMN*, UInt32, UInt32*, HRESULT)
    get_group_subset_count : Proc(IFolderViewSettings*, UInt32*, HRESULT)
  end

  struct IFolderViewSettings
    lpVtbl : IFolderViewSettingsVTbl*
  end

  struct IInitializeNetworkFolderVTbl
    query_interface : Proc(IInitializeNetworkFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeNetworkFolder*, UInt32)
    release : Proc(IInitializeNetworkFolder*, UInt32)
    initialize : Proc(IInitializeNetworkFolder*, ITEMIDLIST*, ITEMIDLIST*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct IInitializeNetworkFolder
    lpVtbl : IInitializeNetworkFolderVTbl*
  end

  struct INetworkFolderInternalVTbl
    query_interface : Proc(INetworkFolderInternal*, Guid*, Void**, HRESULT)
    add_ref : Proc(INetworkFolderInternal*, UInt32)
    release : Proc(INetworkFolderInternal*, UInt32)
    get_resource_display_type : Proc(INetworkFolderInternal*, UInt32*, HRESULT)
    get_id_list : Proc(INetworkFolderInternal*, ITEMIDLIST**, HRESULT)
    get_provider : Proc(INetworkFolderInternal*, UInt32, ITEMIDLIST**, UInt32, Char*, HRESULT)
  end

  struct INetworkFolderInternal
    lpVtbl : INetworkFolderInternalVTbl*
  end

  struct IPreviewHandlerVisualsVTbl
    query_interface : Proc(IPreviewHandlerVisuals*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreviewHandlerVisuals*, UInt32)
    release : Proc(IPreviewHandlerVisuals*, UInt32)
    set_background_color : Proc(IPreviewHandlerVisuals*, UInt32, HRESULT)
    set_font : Proc(IPreviewHandlerVisuals*, LOGFONTW*, HRESULT)
    set_text_color : Proc(IPreviewHandlerVisuals*, UInt32, HRESULT)
  end

  struct IPreviewHandlerVisuals
    lpVtbl : IPreviewHandlerVisualsVTbl*
  end

  struct ICommDlgBrowserVTbl
    query_interface : Proc(ICommDlgBrowser*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICommDlgBrowser*, UInt32)
    release : Proc(ICommDlgBrowser*, UInt32)
    on_default_command : Proc(ICommDlgBrowser*, IShellView, HRESULT)
    on_state_change : Proc(ICommDlgBrowser*, IShellView, UInt32, HRESULT)
    include_object : Proc(ICommDlgBrowser*, IShellView, ITEMIDLIST*, HRESULT)
  end

  struct ICommDlgBrowser
    lpVtbl : ICommDlgBrowserVTbl*
  end

  struct ICommDlgBrowser2VTbl
    query_interface : Proc(ICommDlgBrowser2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICommDlgBrowser2*, UInt32)
    release : Proc(ICommDlgBrowser2*, UInt32)
    on_default_command : Proc(ICommDlgBrowser2*, IShellView, HRESULT)
    on_state_change : Proc(ICommDlgBrowser2*, IShellView, UInt32, HRESULT)
    include_object : Proc(ICommDlgBrowser2*, IShellView, ITEMIDLIST*, HRESULT)
    notify : Proc(ICommDlgBrowser2*, IShellView, UInt32, HRESULT)
    get_default_menu_text : Proc(ICommDlgBrowser2*, IShellView, Char*, Int32, HRESULT)
    get_view_flags : Proc(ICommDlgBrowser2*, UInt32*, HRESULT)
  end

  struct ICommDlgBrowser2
    lpVtbl : ICommDlgBrowser2VTbl*
  end

  struct IColumnManagerVTbl
    query_interface : Proc(IColumnManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IColumnManager*, UInt32)
    release : Proc(IColumnManager*, UInt32)
    set_column_info : Proc(IColumnManager*, PROPERTYKEY*, CM_COLUMNINFO*, HRESULT)
    get_column_info : Proc(IColumnManager*, PROPERTYKEY*, CM_COLUMNINFO*, HRESULT)
    get_column_count : Proc(IColumnManager*, CM_ENUM_FLAGS, UInt32*, HRESULT)
    get_columns : Proc(IColumnManager*, CM_ENUM_FLAGS, PROPERTYKEY*, UInt32, HRESULT)
    set_columns : Proc(IColumnManager*, PROPERTYKEY*, UInt32, HRESULT)
  end

  struct IColumnManager
    lpVtbl : IColumnManagerVTbl*
  end

  struct IFolderFilterSiteVTbl
    query_interface : Proc(IFolderFilterSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderFilterSite*, UInt32)
    release : Proc(IFolderFilterSite*, UInt32)
    set_filter : Proc(IFolderFilterSite*, IUnknown, HRESULT)
  end

  struct IFolderFilterSite
    lpVtbl : IFolderFilterSiteVTbl*
  end

  struct IFolderFilterVTbl
    query_interface : Proc(IFolderFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderFilter*, UInt32)
    release : Proc(IFolderFilter*, UInt32)
    should_show : Proc(IFolderFilter*, IShellFolder, ITEMIDLIST*, ITEMIDLIST*, HRESULT)
    get_enum_flags : Proc(IFolderFilter*, IShellFolder, ITEMIDLIST*, HANDLE*, UInt32*, HRESULT)
  end

  struct IFolderFilter
    lpVtbl : IFolderFilterVTbl*
  end

  struct IInputObjectSiteVTbl
    query_interface : Proc(IInputObjectSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputObjectSite*, UInt32)
    release : Proc(IInputObjectSite*, UInt32)
    on_focus_change_is : Proc(IInputObjectSite*, IUnknown, LibC::BOOL, HRESULT)
  end

  struct IInputObjectSite
    lpVtbl : IInputObjectSiteVTbl*
  end

  struct IInputObjectVTbl
    query_interface : Proc(IInputObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputObject*, UInt32)
    release : Proc(IInputObject*, UInt32)
    ui_activate_io : Proc(IInputObject*, LibC::BOOL, MSG*, HRESULT)
    has_focus_io : Proc(IInputObject*, HRESULT)
    translate_accelerator_io : Proc(IInputObject*, MSG*, HRESULT)
  end

  struct IInputObject
    lpVtbl : IInputObjectVTbl*
  end

  struct IInputObject2VTbl
    query_interface : Proc(IInputObject2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputObject2*, UInt32)
    release : Proc(IInputObject2*, UInt32)
    ui_activate_io : Proc(IInputObject2*, LibC::BOOL, MSG*, HRESULT)
    has_focus_io : Proc(IInputObject2*, HRESULT)
    translate_accelerator_io : Proc(IInputObject2*, MSG*, HRESULT)
    translate_accelerator_global : Proc(IInputObject2*, MSG*, HRESULT)
  end

  struct IInputObject2
    lpVtbl : IInputObject2VTbl*
  end

  struct IShellIconVTbl
    query_interface : Proc(IShellIcon*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellIcon*, UInt32)
    release : Proc(IShellIcon*, UInt32)
    get_icon_of : Proc(IShellIcon*, ITEMIDLIST*, UInt32, Int32*, HRESULT)
  end

  struct IShellIcon
    lpVtbl : IShellIconVTbl*
  end

  struct IShellBrowserVTbl
    query_interface : Proc(IShellBrowser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellBrowser*, UInt32)
    release : Proc(IShellBrowser*, UInt32)
    get_window : Proc(IShellBrowser*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IShellBrowser*, LibC::BOOL, HRESULT)
    insert_menus_sb : Proc(IShellBrowser*, LibC::HANDLE, OleMenuGroupWidths*, HRESULT)
    set_menu_sb : Proc(IShellBrowser*, LibC::HANDLE, LibC::IntPtrT, LibC::HANDLE, HRESULT)
    remove_menus_sb : Proc(IShellBrowser*, LibC::HANDLE, HRESULT)
    set_status_text_sb : Proc(IShellBrowser*, LibC::LPWSTR, HRESULT)
    enable_modeless_sb : Proc(IShellBrowser*, LibC::BOOL, HRESULT)
    translate_accelerator_sb : Proc(IShellBrowser*, MSG*, UInt16, HRESULT)
    browse_object : Proc(IShellBrowser*, ITEMIDLIST*, UInt32, HRESULT)
    get_view_state_stream : Proc(IShellBrowser*, UInt32, IStream*, HRESULT)
    get_control_window : Proc(IShellBrowser*, UInt32, HANDLE*, HRESULT)
    send_control_msg : Proc(IShellBrowser*, UInt32, UInt32, LibC::UINT_PTR, LPARAM, LRESULT*, HRESULT)
    query_active_shell_view : Proc(IShellBrowser*, IShellView*, HRESULT)
    on_view_window_active : Proc(IShellBrowser*, IShellView, HRESULT)
    set_toolbar_items : Proc(IShellBrowser*, TBBUTTON*, UInt32, UInt32, HRESULT)
  end

  struct IShellBrowser
    lpVtbl : IShellBrowserVTbl*
  end

  struct IProfferServiceVTbl
    query_interface : Proc(IProfferService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProfferService*, UInt32)
    release : Proc(IProfferService*, UInt32)
    proffer_service : Proc(IProfferService*, Guid*, IServiceProvider, UInt32*, HRESULT)
    revoke_service : Proc(IProfferService*, UInt32, HRESULT)
  end

  struct IProfferService
    lpVtbl : IProfferServiceVTbl*
  end

  struct IGetServiceIdsVTbl
    query_interface : Proc(IGetServiceIds*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetServiceIds*, UInt32)
    release : Proc(IGetServiceIds*, UInt32)
    get_service_ids : Proc(IGetServiceIds*, UInt32*, Guid**, HRESULT)
  end

  struct IGetServiceIds
    lpVtbl : IGetServiceIdsVTbl*
  end

  struct IShellItemVTbl
    query_interface : Proc(IShellItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItem*, UInt32)
    release : Proc(IShellItem*, UInt32)
    bind_to_handler : Proc(IShellItem*, IBindCtx, Guid*, Guid*, Void**, HRESULT)
    get_parent : Proc(IShellItem*, IShellItem*, HRESULT)
    get_display_name : Proc(IShellItem*, SIGDN, LibC::LPWSTR*, HRESULT)
    get_attributes : Proc(IShellItem*, UInt32, UInt32*, HRESULT)
    compare : Proc(IShellItem*, IShellItem, UInt32, Int32*, HRESULT)
  end

  struct IShellItem
    lpVtbl : IShellItemVTbl*
  end

  struct IShellItem2VTbl
    query_interface : Proc(IShellItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItem2*, UInt32)
    release : Proc(IShellItem2*, UInt32)
    bind_to_handler : Proc(IShellItem2*, IBindCtx, Guid*, Guid*, Void**, HRESULT)
    get_parent : Proc(IShellItem2*, IShellItem*, HRESULT)
    get_display_name : Proc(IShellItem2*, SIGDN, LibC::LPWSTR*, HRESULT)
    get_attributes : Proc(IShellItem2*, UInt32, UInt32*, HRESULT)
    compare : Proc(IShellItem2*, IShellItem, UInt32, Int32*, HRESULT)
    get_property_store : Proc(IShellItem2*, GETPROPERTYSTOREFLAGS, Guid*, Void**, HRESULT)
    get_property_store_with_create_object : Proc(IShellItem2*, GETPROPERTYSTOREFLAGS, IUnknown, Guid*, Void**, HRESULT)
    get_property_store_for_keys : Proc(IShellItem2*, PROPERTYKEY*, UInt32, GETPROPERTYSTOREFLAGS, Guid*, Void**, HRESULT)
    get_property_description_list : Proc(IShellItem2*, PROPERTYKEY*, Guid*, Void**, HRESULT)
    update : Proc(IShellItem2*, IBindCtx, HRESULT)
    get_property : Proc(IShellItem2*, PROPERTYKEY*, PROPVARIANT*, HRESULT)
    get_clsid : Proc(IShellItem2*, PROPERTYKEY*, Guid*, HRESULT)
    get_file_time : Proc(IShellItem2*, PROPERTYKEY*, FILETIME*, HRESULT)
    get_int32 : Proc(IShellItem2*, PROPERTYKEY*, Int32*, HRESULT)
    get_string : Proc(IShellItem2*, PROPERTYKEY*, LibC::LPWSTR*, HRESULT)
    get_u_int32 : Proc(IShellItem2*, PROPERTYKEY*, UInt32*, HRESULT)
    get_u_int64 : Proc(IShellItem2*, PROPERTYKEY*, UInt64*, HRESULT)
    get_bool : Proc(IShellItem2*, PROPERTYKEY*, LibC::BOOL*, HRESULT)
  end

  struct IShellItem2
    lpVtbl : IShellItem2VTbl*
  end

  struct IShellItemImageFactoryVTbl
    query_interface : Proc(IShellItemImageFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItemImageFactory*, UInt32)
    release : Proc(IShellItemImageFactory*, UInt32)
    get_image : Proc(IShellItemImageFactory*, SIZE, SIIGBF, HBITMAP*, HRESULT)
  end

  struct IShellItemImageFactory
    lpVtbl : IShellItemImageFactoryVTbl*
  end

  struct IEnumShellItemsVTbl
    query_interface : Proc(IEnumShellItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumShellItems*, UInt32)
    release : Proc(IEnumShellItems*, UInt32)
    next : Proc(IEnumShellItems*, UInt32, IShellItem*, UInt32*, HRESULT)
    skip : Proc(IEnumShellItems*, UInt32, HRESULT)
    reset : Proc(IEnumShellItems*, HRESULT)
    clone : Proc(IEnumShellItems*, IEnumShellItems*, HRESULT)
  end

  struct IEnumShellItems
    lpVtbl : IEnumShellItemsVTbl*
  end

  struct ITransferAdviseSinkVTbl
    query_interface : Proc(ITransferAdviseSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITransferAdviseSink*, UInt32)
    release : Proc(ITransferAdviseSink*, UInt32)
    update_progress : Proc(ITransferAdviseSink*, UInt64, UInt64, Int32, Int32, Int32, Int32, HRESULT)
    update_transfer_state : Proc(ITransferAdviseSink*, UInt32, HRESULT)
    confirm_overwrite : Proc(ITransferAdviseSink*, IShellItem, IShellItem, LibC::LPWSTR, HRESULT)
    confirm_encryption_loss : Proc(ITransferAdviseSink*, IShellItem, HRESULT)
    file_failure : Proc(ITransferAdviseSink*, IShellItem, LibC::LPWSTR, HRESULT, Char*, UInt32, HRESULT)
    sub_stream_failure : Proc(ITransferAdviseSink*, IShellItem, LibC::LPWSTR, HRESULT, HRESULT)
    property_failure : Proc(ITransferAdviseSink*, IShellItem, PROPERTYKEY*, HRESULT, HRESULT)
  end

  struct ITransferAdviseSink
    lpVtbl : ITransferAdviseSinkVTbl*
  end

  struct ITransferSourceVTbl
    query_interface : Proc(ITransferSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITransferSource*, UInt32)
    release : Proc(ITransferSource*, UInt32)
    advise : Proc(ITransferSource*, ITransferAdviseSink, UInt32*, HRESULT)
    unadvise : Proc(ITransferSource*, UInt32, HRESULT)
    set_properties : Proc(ITransferSource*, IPropertyChangeArray, HRESULT)
    open_item : Proc(ITransferSource*, IShellItem, UInt32, Guid*, Void**, HRESULT)
    move_item : Proc(ITransferSource*, IShellItem, IShellItem, LibC::LPWSTR, UInt32, IShellItem*, HRESULT)
    recycle_item : Proc(ITransferSource*, IShellItem, IShellItem, UInt32, IShellItem*, HRESULT)
    remove_item : Proc(ITransferSource*, IShellItem, UInt32, HRESULT)
    rename_item : Proc(ITransferSource*, IShellItem, LibC::LPWSTR, UInt32, IShellItem*, HRESULT)
    link_item : Proc(ITransferSource*, IShellItem, IShellItem, LibC::LPWSTR, UInt32, IShellItem*, HRESULT)
    apply_properties_to_item : Proc(ITransferSource*, IShellItem, IShellItem*, HRESULT)
    get_default_destination_name : Proc(ITransferSource*, IShellItem, IShellItem, LibC::LPWSTR*, HRESULT)
    enter_folder : Proc(ITransferSource*, IShellItem, HRESULT)
    leave_folder : Proc(ITransferSource*, IShellItem, HRESULT)
  end

  struct ITransferSource
    lpVtbl : ITransferSourceVTbl*
  end

  struct IEnumResourcesVTbl
    query_interface : Proc(IEnumResources*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumResources*, UInt32)
    release : Proc(IEnumResources*, UInt32)
    next : Proc(IEnumResources*, UInt32, SHELL_ITEM_RESOURCE*, UInt32*, HRESULT)
    skip : Proc(IEnumResources*, UInt32, HRESULT)
    reset : Proc(IEnumResources*, HRESULT)
    clone : Proc(IEnumResources*, IEnumResources*, HRESULT)
  end

  struct IEnumResources
    lpVtbl : IEnumResourcesVTbl*
  end

  struct IShellItemResourcesVTbl
    query_interface : Proc(IShellItemResources*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItemResources*, UInt32)
    release : Proc(IShellItemResources*, UInt32)
    get_attributes : Proc(IShellItemResources*, UInt32*, HRESULT)
    get_size : Proc(IShellItemResources*, UInt64*, HRESULT)
    get_times : Proc(IShellItemResources*, FILETIME*, FILETIME*, FILETIME*, HRESULT)
    set_times : Proc(IShellItemResources*, FILETIME*, FILETIME*, FILETIME*, HRESULT)
    get_resource_description : Proc(IShellItemResources*, SHELL_ITEM_RESOURCE*, LibC::LPWSTR*, HRESULT)
    enum_resources : Proc(IShellItemResources*, IEnumResources*, HRESULT)
    supports_resource : Proc(IShellItemResources*, SHELL_ITEM_RESOURCE*, HRESULT)
    open_resource : Proc(IShellItemResources*, SHELL_ITEM_RESOURCE*, Guid*, Void**, HRESULT)
    create_resource : Proc(IShellItemResources*, SHELL_ITEM_RESOURCE*, Guid*, Void**, HRESULT)
    mark_for_delete : Proc(IShellItemResources*, HRESULT)
  end

  struct IShellItemResources
    lpVtbl : IShellItemResourcesVTbl*
  end

  struct ITransferDestinationVTbl
    query_interface : Proc(ITransferDestination*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITransferDestination*, UInt32)
    release : Proc(ITransferDestination*, UInt32)
    advise : Proc(ITransferDestination*, ITransferAdviseSink, UInt32*, HRESULT)
    unadvise : Proc(ITransferDestination*, UInt32, HRESULT)
    create_item : Proc(ITransferDestination*, LibC::LPWSTR, UInt32, UInt64, UInt32, Guid*, Void**, Guid*, Void**, HRESULT)
  end

  struct ITransferDestination
    lpVtbl : ITransferDestinationVTbl*
  end

  struct IFileOperationProgressSinkVTbl
    query_interface : Proc(IFileOperationProgressSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileOperationProgressSink*, UInt32)
    release : Proc(IFileOperationProgressSink*, UInt32)
    start_operations : Proc(IFileOperationProgressSink*, HRESULT)
    finish_operations : Proc(IFileOperationProgressSink*, HRESULT, HRESULT)
    pre_rename_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, LibC::LPWSTR, HRESULT)
    post_rename_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, LibC::LPWSTR, HRESULT, IShellItem, HRESULT)
    pre_move_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, IShellItem, LibC::LPWSTR, HRESULT)
    post_move_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, IShellItem, LibC::LPWSTR, HRESULT, IShellItem, HRESULT)
    pre_copy_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, IShellItem, LibC::LPWSTR, HRESULT)
    post_copy_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, IShellItem, LibC::LPWSTR, HRESULT, IShellItem, HRESULT)
    pre_delete_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, HRESULT)
    post_delete_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, HRESULT, IShellItem, HRESULT)
    pre_new_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, LibC::LPWSTR, HRESULT)
    post_new_item : Proc(IFileOperationProgressSink*, UInt32, IShellItem, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT, IShellItem, HRESULT)
    update_progress : Proc(IFileOperationProgressSink*, UInt32, UInt32, HRESULT)
    reset_timer : Proc(IFileOperationProgressSink*, HRESULT)
    pause_timer : Proc(IFileOperationProgressSink*, HRESULT)
    resume_timer : Proc(IFileOperationProgressSink*, HRESULT)
  end

  struct IFileOperationProgressSink
    lpVtbl : IFileOperationProgressSinkVTbl*
  end

  struct IShellItemArrayVTbl
    query_interface : Proc(IShellItemArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItemArray*, UInt32)
    release : Proc(IShellItemArray*, UInt32)
    bind_to_handler : Proc(IShellItemArray*, IBindCtx, Guid*, Guid*, Void**, HRESULT)
    get_property_store : Proc(IShellItemArray*, GETPROPERTYSTOREFLAGS, Guid*, Void**, HRESULT)
    get_property_description_list : Proc(IShellItemArray*, PROPERTYKEY*, Guid*, Void**, HRESULT)
    get_attributes : Proc(IShellItemArray*, SIATTRIBFLAGS, UInt32, UInt32*, HRESULT)
    get_count : Proc(IShellItemArray*, UInt32*, HRESULT)
    get_item_at : Proc(IShellItemArray*, UInt32, IShellItem*, HRESULT)
    enum_items : Proc(IShellItemArray*, IEnumShellItems*, HRESULT)
  end

  struct IShellItemArray
    lpVtbl : IShellItemArrayVTbl*
  end

  struct IInitializeWithItemVTbl
    query_interface : Proc(IInitializeWithItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeWithItem*, UInt32)
    release : Proc(IInitializeWithItem*, UInt32)
    initialize : Proc(IInitializeWithItem*, IShellItem, UInt32, HRESULT)
  end

  struct IInitializeWithItem
    lpVtbl : IInitializeWithItemVTbl*
  end

  struct IObjectWithSelectionVTbl
    query_interface : Proc(IObjectWithSelection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithSelection*, UInt32)
    release : Proc(IObjectWithSelection*, UInt32)
    set_selection : Proc(IObjectWithSelection*, IShellItemArray, HRESULT)
    get_selection : Proc(IObjectWithSelection*, Guid*, Void**, HRESULT)
  end

  struct IObjectWithSelection
    lpVtbl : IObjectWithSelectionVTbl*
  end

  struct IObjectWithBackReferencesVTbl
    query_interface : Proc(IObjectWithBackReferences*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithBackReferences*, UInt32)
    release : Proc(IObjectWithBackReferences*, UInt32)
    remove_back_references : Proc(IObjectWithBackReferences*, HRESULT)
  end

  struct IObjectWithBackReferences
    lpVtbl : IObjectWithBackReferencesVTbl*
  end

  struct ICategoryProviderVTbl
    query_interface : Proc(ICategoryProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICategoryProvider*, UInt32)
    release : Proc(ICategoryProvider*, UInt32)
    can_categorize_on_scid : Proc(ICategoryProvider*, PROPERTYKEY*, HRESULT)
    get_default_category : Proc(ICategoryProvider*, Guid*, PROPERTYKEY*, HRESULT)
    get_category_for_scid : Proc(ICategoryProvider*, PROPERTYKEY*, Guid*, HRESULT)
    enum_categories : Proc(ICategoryProvider*, IEnumGUID*, HRESULT)
    get_category_name : Proc(ICategoryProvider*, Guid*, Char*, UInt32, HRESULT)
    create_category : Proc(ICategoryProvider*, Guid*, Guid*, Void**, HRESULT)
  end

  struct ICategoryProvider
    lpVtbl : ICategoryProviderVTbl*
  end

  struct ICategorizerVTbl
    query_interface : Proc(ICategorizer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICategorizer*, UInt32)
    release : Proc(ICategorizer*, UInt32)
    get_description : Proc(ICategorizer*, Char*, UInt32, HRESULT)
    get_category : Proc(ICategorizer*, UInt32, ITEMIDLIST**, UInt32*, HRESULT)
    get_category_info : Proc(ICategorizer*, UInt32, CATEGORY_INFO*, HRESULT)
    compare_category : Proc(ICategorizer*, CATSORT_FLAGS, UInt32, UInt32, HRESULT)
  end

  struct ICategorizer
    lpVtbl : ICategorizerVTbl*
  end

  struct IDropTargetHelperVTbl
    query_interface : Proc(IDropTargetHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDropTargetHelper*, UInt32)
    release : Proc(IDropTargetHelper*, UInt32)
    drag_enter : Proc(IDropTargetHelper*, LibC::HANDLE, IDataObject, POINT*, UInt32, HRESULT)
    drag_leave : Proc(IDropTargetHelper*, HRESULT)
    drag_over : Proc(IDropTargetHelper*, POINT*, UInt32, HRESULT)
    drop : Proc(IDropTargetHelper*, IDataObject, POINT*, UInt32, HRESULT)
    show : Proc(IDropTargetHelper*, LibC::BOOL, HRESULT)
  end

  struct IDropTargetHelper
    lpVtbl : IDropTargetHelperVTbl*
  end

  struct IDragSourceHelperVTbl
    query_interface : Proc(IDragSourceHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDragSourceHelper*, UInt32)
    release : Proc(IDragSourceHelper*, UInt32)
    initialize_from_bitmap : Proc(IDragSourceHelper*, SHDRAGIMAGE*, IDataObject, HRESULT)
    initialize_from_window : Proc(IDragSourceHelper*, LibC::HANDLE, POINT*, IDataObject, HRESULT)
  end

  struct IDragSourceHelper
    lpVtbl : IDragSourceHelperVTbl*
  end

  struct IShellLinkAVTbl
    query_interface : Proc(IShellLinkA*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLinkA*, UInt32)
    release : Proc(IShellLinkA*, UInt32)
    get_path : Proc(IShellLinkA*, UInt8*, Int32, WIN32_FIND_DATAA*, UInt32, HRESULT)
    get_id_list : Proc(IShellLinkA*, ITEMIDLIST**, HRESULT)
    set_id_list : Proc(IShellLinkA*, ITEMIDLIST*, HRESULT)
    get_description : Proc(IShellLinkA*, UInt8*, Int32, HRESULT)
    set_description : Proc(IShellLinkA*, PSTR, HRESULT)
    get_working_directory : Proc(IShellLinkA*, UInt8*, Int32, HRESULT)
    set_working_directory : Proc(IShellLinkA*, PSTR, HRESULT)
    get_arguments : Proc(IShellLinkA*, UInt8*, Int32, HRESULT)
    set_arguments : Proc(IShellLinkA*, PSTR, HRESULT)
    get_hotkey : Proc(IShellLinkA*, UInt16*, HRESULT)
    set_hotkey : Proc(IShellLinkA*, UInt16, HRESULT)
    get_show_cmd : Proc(IShellLinkA*, Int32*, HRESULT)
    set_show_cmd : Proc(IShellLinkA*, Int32, HRESULT)
    get_icon_location : Proc(IShellLinkA*, UInt8*, Int32, Int32*, HRESULT)
    set_icon_location : Proc(IShellLinkA*, PSTR, Int32, HRESULT)
    set_relative_path : Proc(IShellLinkA*, PSTR, UInt32, HRESULT)
    resolve : Proc(IShellLinkA*, LibC::HANDLE, UInt32, HRESULT)
    set_path : Proc(IShellLinkA*, PSTR, HRESULT)
  end

  struct IShellLinkA
    lpVtbl : IShellLinkAVTbl*
  end

  struct IShellLinkWVTbl
    query_interface : Proc(IShellLinkW*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLinkW*, UInt32)
    release : Proc(IShellLinkW*, UInt32)
    get_path : Proc(IShellLinkW*, Char*, Int32, WIN32_FIND_DATAW*, UInt32, HRESULT)
    get_id_list : Proc(IShellLinkW*, ITEMIDLIST**, HRESULT)
    set_id_list : Proc(IShellLinkW*, ITEMIDLIST*, HRESULT)
    get_description : Proc(IShellLinkW*, Char*, Int32, HRESULT)
    set_description : Proc(IShellLinkW*, LibC::LPWSTR, HRESULT)
    get_working_directory : Proc(IShellLinkW*, Char*, Int32, HRESULT)
    set_working_directory : Proc(IShellLinkW*, LibC::LPWSTR, HRESULT)
    get_arguments : Proc(IShellLinkW*, Char*, Int32, HRESULT)
    set_arguments : Proc(IShellLinkW*, LibC::LPWSTR, HRESULT)
    get_hotkey : Proc(IShellLinkW*, UInt16*, HRESULT)
    set_hotkey : Proc(IShellLinkW*, UInt16, HRESULT)
    get_show_cmd : Proc(IShellLinkW*, Int32*, HRESULT)
    set_show_cmd : Proc(IShellLinkW*, Int32, HRESULT)
    get_icon_location : Proc(IShellLinkW*, Char*, Int32, Int32*, HRESULT)
    set_icon_location : Proc(IShellLinkW*, LibC::LPWSTR, Int32, HRESULT)
    set_relative_path : Proc(IShellLinkW*, LibC::LPWSTR, UInt32, HRESULT)
    resolve : Proc(IShellLinkW*, LibC::HANDLE, UInt32, HRESULT)
    set_path : Proc(IShellLinkW*, LibC::LPWSTR, HRESULT)
  end

  struct IShellLinkW
    lpVtbl : IShellLinkWVTbl*
  end

  struct IShellLinkDataListVTbl
    query_interface : Proc(IShellLinkDataList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLinkDataList*, UInt32)
    release : Proc(IShellLinkDataList*, UInt32)
    add_data_block : Proc(IShellLinkDataList*, Void*, HRESULT)
    copy_data_block : Proc(IShellLinkDataList*, UInt32, Void**, HRESULT)
    remove_data_block : Proc(IShellLinkDataList*, UInt32, HRESULT)
    get_flags : Proc(IShellLinkDataList*, UInt32*, HRESULT)
    set_flags : Proc(IShellLinkDataList*, UInt32, HRESULT)
  end

  struct IShellLinkDataList
    lpVtbl : IShellLinkDataListVTbl*
  end

  struct IResolveShellLinkVTbl
    query_interface : Proc(IResolveShellLink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IResolveShellLink*, UInt32)
    release : Proc(IResolveShellLink*, UInt32)
    resolve_shell_link : Proc(IResolveShellLink*, IUnknown, LibC::HANDLE, UInt32, HRESULT)
  end

  struct IResolveShellLink
    lpVtbl : IResolveShellLinkVTbl*
  end

  struct IActionProgressDialogVTbl
    query_interface : Proc(IActionProgressDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActionProgressDialog*, UInt32)
    release : Proc(IActionProgressDialog*, UInt32)
    initialize : Proc(IActionProgressDialog*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    stop : Proc(IActionProgressDialog*, HRESULT)
  end

  struct IActionProgressDialog
    lpVtbl : IActionProgressDialogVTbl*
  end

  struct IActionProgressVTbl
    query_interface : Proc(IActionProgress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActionProgress*, UInt32)
    release : Proc(IActionProgress*, UInt32)
    rbegin : Proc(IActionProgress*, SPACTION, UInt32, HRESULT)
    update_progress : Proc(IActionProgress*, UInt64, UInt64, HRESULT)
    update_text : Proc(IActionProgress*, SPTEXT, LibC::LPWSTR, LibC::BOOL, HRESULT)
    query_cancel : Proc(IActionProgress*, LibC::BOOL*, HRESULT)
    reset_cancel : Proc(IActionProgress*, HRESULT)
    rend : Proc(IActionProgress*, HRESULT)
  end

  struct IActionProgress
    lpVtbl : IActionProgressVTbl*
  end

  struct IShellExtInitVTbl
    query_interface : Proc(IShellExtInit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellExtInit*, UInt32)
    release : Proc(IShellExtInit*, UInt32)
    initialize : Proc(IShellExtInit*, ITEMIDLIST*, IDataObject, HKEY, HRESULT)
  end

  struct IShellExtInit
    lpVtbl : IShellExtInitVTbl*
  end

  struct IShellPropSheetExtVTbl
    query_interface : Proc(IShellPropSheetExt*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellPropSheetExt*, UInt32)
    release : Proc(IShellPropSheetExt*, UInt32)
    add_pages : Proc(IShellPropSheetExt*, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
    replace_page : Proc(IShellPropSheetExt*, UInt32, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
  end

  struct IShellPropSheetExt
    lpVtbl : IShellPropSheetExtVTbl*
  end

  struct IRemoteComputerVTbl
    query_interface : Proc(IRemoteComputer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteComputer*, UInt32)
    release : Proc(IRemoteComputer*, UInt32)
    initialize : Proc(IRemoteComputer*, LibC::LPWSTR, LibC::BOOL, HRESULT)
  end

  struct IRemoteComputer
    lpVtbl : IRemoteComputerVTbl*
  end

  struct IQueryContinueVTbl
    query_interface : Proc(IQueryContinue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryContinue*, UInt32)
    release : Proc(IQueryContinue*, UInt32)
    query_continue : Proc(IQueryContinue*, HRESULT)
  end

  struct IQueryContinue
    lpVtbl : IQueryContinueVTbl*
  end

  struct IObjectWithCancelEventVTbl
    query_interface : Proc(IObjectWithCancelEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithCancelEvent*, UInt32)
    release : Proc(IObjectWithCancelEvent*, UInt32)
    get_cancel_event : Proc(IObjectWithCancelEvent*, LibC::HANDLE*, HRESULT)
  end

  struct IObjectWithCancelEvent
    lpVtbl : IObjectWithCancelEventVTbl*
  end

  struct IUserNotificationVTbl
    query_interface : Proc(IUserNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUserNotification*, UInt32)
    release : Proc(IUserNotification*, UInt32)
    set_balloon_info : Proc(IUserNotification*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    set_balloon_retry : Proc(IUserNotification*, UInt32, UInt32, UInt32, HRESULT)
    set_icon_info : Proc(IUserNotification*, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    show : Proc(IUserNotification*, IQueryContinue, UInt32, HRESULT)
    play_sound : Proc(IUserNotification*, LibC::LPWSTR, HRESULT)
  end

  struct IUserNotification
    lpVtbl : IUserNotificationVTbl*
  end

  struct IItemNameLimitsVTbl
    query_interface : Proc(IItemNameLimits*, Guid*, Void**, HRESULT)
    add_ref : Proc(IItemNameLimits*, UInt32)
    release : Proc(IItemNameLimits*, UInt32)
    get_valid_characters : Proc(IItemNameLimits*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
    get_max_length : Proc(IItemNameLimits*, LibC::LPWSTR, Int32*, HRESULT)
  end

  struct IItemNameLimits
    lpVtbl : IItemNameLimitsVTbl*
  end

  struct ISearchFolderItemFactoryVTbl
    query_interface : Proc(ISearchFolderItemFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISearchFolderItemFactory*, UInt32)
    release : Proc(ISearchFolderItemFactory*, UInt32)
    set_display_name : Proc(ISearchFolderItemFactory*, LibC::LPWSTR, HRESULT)
    set_folder_type_id : Proc(ISearchFolderItemFactory*, Guid, HRESULT)
    set_folder_logical_view_mode : Proc(ISearchFolderItemFactory*, FOLDERLOGICALVIEWMODE, HRESULT)
    set_icon_size : Proc(ISearchFolderItemFactory*, Int32, HRESULT)
    set_visible_columns : Proc(ISearchFolderItemFactory*, UInt32, PROPERTYKEY*, HRESULT)
    set_sort_columns : Proc(ISearchFolderItemFactory*, UInt32, SORTCOLUMN*, HRESULT)
    set_group_column : Proc(ISearchFolderItemFactory*, PROPERTYKEY*, HRESULT)
    set_stacks : Proc(ISearchFolderItemFactory*, UInt32, PROPERTYKEY*, HRESULT)
    set_scope : Proc(ISearchFolderItemFactory*, IShellItemArray, HRESULT)
    set_condition : Proc(ISearchFolderItemFactory*, ICondition, HRESULT)
    get_shell_item : Proc(ISearchFolderItemFactory*, Guid*, Void**, HRESULT)
    get_id_list : Proc(ISearchFolderItemFactory*, ITEMIDLIST**, HRESULT)
  end

  struct ISearchFolderItemFactory
    lpVtbl : ISearchFolderItemFactoryVTbl*
  end

  struct IExtractImageVTbl
    query_interface : Proc(IExtractImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtractImage*, UInt32)
    release : Proc(IExtractImage*, UInt32)
    get_location : Proc(IExtractImage*, Char*, UInt32, UInt32*, SIZE*, UInt32, UInt32*, HRESULT)
    extract : Proc(IExtractImage*, HBITMAP*, HRESULT)
  end

  struct IExtractImage
    lpVtbl : IExtractImageVTbl*
  end

  struct IExtractImage2VTbl
    query_interface : Proc(IExtractImage2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtractImage2*, UInt32)
    release : Proc(IExtractImage2*, UInt32)
    get_location : Proc(IExtractImage2*, Char*, UInt32, UInt32*, SIZE*, UInt32, UInt32*, HRESULT)
    extract : Proc(IExtractImage2*, HBITMAP*, HRESULT)
    get_date_stamp : Proc(IExtractImage2*, FILETIME*, HRESULT)
  end

  struct IExtractImage2
    lpVtbl : IExtractImage2VTbl*
  end

  struct IThumbnailHandlerFactoryVTbl
    query_interface : Proc(IThumbnailHandlerFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailHandlerFactory*, UInt32)
    release : Proc(IThumbnailHandlerFactory*, UInt32)
    get_thumbnail_handler : Proc(IThumbnailHandlerFactory*, ITEMIDLIST*, IBindCtx, Guid*, Void**, HRESULT)
  end

  struct IThumbnailHandlerFactory
    lpVtbl : IThumbnailHandlerFactoryVTbl*
  end

  struct IParentAndItemVTbl
    query_interface : Proc(IParentAndItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IParentAndItem*, UInt32)
    release : Proc(IParentAndItem*, UInt32)
    set_parent_and_item : Proc(IParentAndItem*, ITEMIDLIST*, IShellFolder, ITEMIDLIST*, HRESULT)
    get_parent_and_item : Proc(IParentAndItem*, ITEMIDLIST**, IShellFolder*, ITEMIDLIST**, HRESULT)
  end

  struct IParentAndItem
    lpVtbl : IParentAndItemVTbl*
  end

  struct IDockingWindowVTbl
    query_interface : Proc(IDockingWindow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDockingWindow*, UInt32)
    release : Proc(IDockingWindow*, UInt32)
    get_window : Proc(IDockingWindow*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDockingWindow*, LibC::BOOL, HRESULT)
    show_dw : Proc(IDockingWindow*, LibC::BOOL, HRESULT)
    close_dw : Proc(IDockingWindow*, UInt32, HRESULT)
    resize_border_dw : Proc(IDockingWindow*, RECT*, IUnknown, LibC::BOOL, HRESULT)
  end

  struct IDockingWindow
    lpVtbl : IDockingWindowVTbl*
  end

  struct IDeskBandVTbl
    query_interface : Proc(IDeskBand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeskBand*, UInt32)
    release : Proc(IDeskBand*, UInt32)
    get_window : Proc(IDeskBand*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDeskBand*, LibC::BOOL, HRESULT)
    show_dw : Proc(IDeskBand*, LibC::BOOL, HRESULT)
    close_dw : Proc(IDeskBand*, UInt32, HRESULT)
    resize_border_dw : Proc(IDeskBand*, RECT*, IUnknown, LibC::BOOL, HRESULT)
    get_band_info : Proc(IDeskBand*, UInt32, UInt32, DESKBANDINFO*, HRESULT)
  end

  struct IDeskBand
    lpVtbl : IDeskBandVTbl*
  end

  struct IDeskBandInfoVTbl
    query_interface : Proc(IDeskBandInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeskBandInfo*, UInt32)
    release : Proc(IDeskBandInfo*, UInt32)
    get_default_band_width : Proc(IDeskBandInfo*, UInt32, UInt32, Int32*, HRESULT)
  end

  struct IDeskBandInfo
    lpVtbl : IDeskBandInfoVTbl*
  end

  struct ITaskbarListVTbl
    query_interface : Proc(ITaskbarList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITaskbarList*, UInt32)
    release : Proc(ITaskbarList*, UInt32)
    hr_init : Proc(ITaskbarList*, HRESULT)
    add_tab : Proc(ITaskbarList*, LibC::HANDLE, HRESULT)
    delete_tab : Proc(ITaskbarList*, LibC::HANDLE, HRESULT)
    activate_tab : Proc(ITaskbarList*, LibC::HANDLE, HRESULT)
    set_active_alt : Proc(ITaskbarList*, LibC::HANDLE, HRESULT)
  end

  struct ITaskbarList
    lpVtbl : ITaskbarListVTbl*
  end

  struct ITaskbarList2VTbl
    query_interface : Proc(ITaskbarList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITaskbarList2*, UInt32)
    release : Proc(ITaskbarList2*, UInt32)
    hr_init : Proc(ITaskbarList2*, HRESULT)
    add_tab : Proc(ITaskbarList2*, LibC::HANDLE, HRESULT)
    delete_tab : Proc(ITaskbarList2*, LibC::HANDLE, HRESULT)
    activate_tab : Proc(ITaskbarList2*, LibC::HANDLE, HRESULT)
    set_active_alt : Proc(ITaskbarList2*, LibC::HANDLE, HRESULT)
    mark_fullscreen_window : Proc(ITaskbarList2*, LibC::HANDLE, LibC::BOOL, HRESULT)
  end

  struct ITaskbarList2
    lpVtbl : ITaskbarList2VTbl*
  end

  struct ITaskbarList3VTbl
    query_interface : Proc(ITaskbarList3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITaskbarList3*, UInt32)
    release : Proc(ITaskbarList3*, UInt32)
    hr_init : Proc(ITaskbarList3*, HRESULT)
    add_tab : Proc(ITaskbarList3*, LibC::HANDLE, HRESULT)
    delete_tab : Proc(ITaskbarList3*, LibC::HANDLE, HRESULT)
    activate_tab : Proc(ITaskbarList3*, LibC::HANDLE, HRESULT)
    set_active_alt : Proc(ITaskbarList3*, LibC::HANDLE, HRESULT)
    mark_fullscreen_window : Proc(ITaskbarList3*, LibC::HANDLE, LibC::BOOL, HRESULT)
    set_progress_value : Proc(ITaskbarList3*, LibC::HANDLE, UInt64, UInt64, HRESULT)
    set_progress_state : Proc(ITaskbarList3*, LibC::HANDLE, TBPFLAG, HRESULT)
    register_tab : Proc(ITaskbarList3*, LibC::HANDLE, LibC::HANDLE, HRESULT)
    unregister_tab : Proc(ITaskbarList3*, LibC::HANDLE, HRESULT)
    set_tab_order : Proc(ITaskbarList3*, LibC::HANDLE, LibC::HANDLE, HRESULT)
    set_tab_active : Proc(ITaskbarList3*, LibC::HANDLE, LibC::HANDLE, UInt32, HRESULT)
    thumb_bar_add_buttons : Proc(ITaskbarList3*, LibC::HANDLE, UInt32, THUMBBUTTON*, HRESULT)
    thumb_bar_update_buttons : Proc(ITaskbarList3*, LibC::HANDLE, UInt32, THUMBBUTTON*, HRESULT)
    thumb_bar_set_image_list : Proc(ITaskbarList3*, LibC::HANDLE, HIMAGELIST, HRESULT)
    set_overlay_icon : Proc(ITaskbarList3*, LibC::HANDLE, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    set_thumbnail_tooltip : Proc(ITaskbarList3*, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    set_thumbnail_clip : Proc(ITaskbarList3*, LibC::HANDLE, RECT*, HRESULT)
  end

  struct ITaskbarList3
    lpVtbl : ITaskbarList3VTbl*
  end

  struct ITaskbarList4VTbl
    query_interface : Proc(ITaskbarList4*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITaskbarList4*, UInt32)
    release : Proc(ITaskbarList4*, UInt32)
    hr_init : Proc(ITaskbarList4*, HRESULT)
    add_tab : Proc(ITaskbarList4*, LibC::HANDLE, HRESULT)
    delete_tab : Proc(ITaskbarList4*, LibC::HANDLE, HRESULT)
    activate_tab : Proc(ITaskbarList4*, LibC::HANDLE, HRESULT)
    set_active_alt : Proc(ITaskbarList4*, LibC::HANDLE, HRESULT)
    mark_fullscreen_window : Proc(ITaskbarList4*, LibC::HANDLE, LibC::BOOL, HRESULT)
    set_progress_value : Proc(ITaskbarList4*, LibC::HANDLE, UInt64, UInt64, HRESULT)
    set_progress_state : Proc(ITaskbarList4*, LibC::HANDLE, TBPFLAG, HRESULT)
    register_tab : Proc(ITaskbarList4*, LibC::HANDLE, LibC::HANDLE, HRESULT)
    unregister_tab : Proc(ITaskbarList4*, LibC::HANDLE, HRESULT)
    set_tab_order : Proc(ITaskbarList4*, LibC::HANDLE, LibC::HANDLE, HRESULT)
    set_tab_active : Proc(ITaskbarList4*, LibC::HANDLE, LibC::HANDLE, UInt32, HRESULT)
    thumb_bar_add_buttons : Proc(ITaskbarList4*, LibC::HANDLE, UInt32, THUMBBUTTON*, HRESULT)
    thumb_bar_update_buttons : Proc(ITaskbarList4*, LibC::HANDLE, UInt32, THUMBBUTTON*, HRESULT)
    thumb_bar_set_image_list : Proc(ITaskbarList4*, LibC::HANDLE, HIMAGELIST, HRESULT)
    set_overlay_icon : Proc(ITaskbarList4*, LibC::HANDLE, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    set_thumbnail_tooltip : Proc(ITaskbarList4*, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    set_thumbnail_clip : Proc(ITaskbarList4*, LibC::HANDLE, RECT*, HRESULT)
    set_tab_properties : Proc(ITaskbarList4*, LibC::HANDLE, STPFLAG, HRESULT)
  end

  struct ITaskbarList4
    lpVtbl : ITaskbarList4VTbl*
  end

  struct IExplorerBrowserEventsVTbl
    query_interface : Proc(IExplorerBrowserEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerBrowserEvents*, UInt32)
    release : Proc(IExplorerBrowserEvents*, UInt32)
    on_navigation_pending : Proc(IExplorerBrowserEvents*, ITEMIDLIST*, HRESULT)
    on_view_created : Proc(IExplorerBrowserEvents*, IShellView, HRESULT)
    on_navigation_complete : Proc(IExplorerBrowserEvents*, ITEMIDLIST*, HRESULT)
    on_navigation_failed : Proc(IExplorerBrowserEvents*, ITEMIDLIST*, HRESULT)
  end

  struct IExplorerBrowserEvents
    lpVtbl : IExplorerBrowserEventsVTbl*
  end

  struct IExplorerBrowserVTbl
    query_interface : Proc(IExplorerBrowser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerBrowser*, UInt32)
    release : Proc(IExplorerBrowser*, UInt32)
    initialize : Proc(IExplorerBrowser*, LibC::HANDLE, RECT*, FOLDERSETTINGS*, HRESULT)
    destroy : Proc(IExplorerBrowser*, HRESULT)
    set_rect : Proc(IExplorerBrowser*, LibC::IntPtrT*, RECT, HRESULT)
    set_property_bag : Proc(IExplorerBrowser*, LibC::LPWSTR, HRESULT)
    set_empty_text : Proc(IExplorerBrowser*, LibC::LPWSTR, HRESULT)
    set_folder_settings : Proc(IExplorerBrowser*, FOLDERSETTINGS*, HRESULT)
    advise : Proc(IExplorerBrowser*, IExplorerBrowserEvents, UInt32*, HRESULT)
    unadvise : Proc(IExplorerBrowser*, UInt32, HRESULT)
    set_options : Proc(IExplorerBrowser*, EXPLORER_BROWSER_OPTIONS, HRESULT)
    get_options : Proc(IExplorerBrowser*, EXPLORER_BROWSER_OPTIONS*, HRESULT)
    browse_to_id_list : Proc(IExplorerBrowser*, ITEMIDLIST*, UInt32, HRESULT)
    browse_to_object : Proc(IExplorerBrowser*, IUnknown, UInt32, HRESULT)
    fill_from_object : Proc(IExplorerBrowser*, IUnknown, EXPLORER_BROWSER_FILL_FLAGS, HRESULT)
    remove_all : Proc(IExplorerBrowser*, HRESULT)
    get_current_view : Proc(IExplorerBrowser*, Guid*, Void**, HRESULT)
  end

  struct IExplorerBrowser
    lpVtbl : IExplorerBrowserVTbl*
  end

  struct IEnumObjectsVTbl
    query_interface : Proc(IEnumObjects*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumObjects*, UInt32)
    release : Proc(IEnumObjects*, UInt32)
    next : Proc(IEnumObjects*, UInt32, Guid*, Void**, UInt32*, HRESULT)
    skip : Proc(IEnumObjects*, UInt32, HRESULT)
    reset : Proc(IEnumObjects*, HRESULT)
    clone : Proc(IEnumObjects*, IEnumObjects*, HRESULT)
  end

  struct IEnumObjects
    lpVtbl : IEnumObjectsVTbl*
  end

  struct IOperationsProgressDialogVTbl
    query_interface : Proc(IOperationsProgressDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOperationsProgressDialog*, UInt32)
    release : Proc(IOperationsProgressDialog*, UInt32)
    start_progress_dialog : Proc(IOperationsProgressDialog*, LibC::HANDLE, UInt32, HRESULT)
    stop_progress_dialog : Proc(IOperationsProgressDialog*, HRESULT)
    set_operation : Proc(IOperationsProgressDialog*, SPACTION, HRESULT)
    set_mode : Proc(IOperationsProgressDialog*, UInt32, HRESULT)
    update_progress : Proc(IOperationsProgressDialog*, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, HRESULT)
    update_locations : Proc(IOperationsProgressDialog*, IShellItem, IShellItem, IShellItem, HRESULT)
    reset_timer : Proc(IOperationsProgressDialog*, HRESULT)
    pause_timer : Proc(IOperationsProgressDialog*, HRESULT)
    resume_timer : Proc(IOperationsProgressDialog*, HRESULT)
    get_milliseconds : Proc(IOperationsProgressDialog*, UInt64*, UInt64*, HRESULT)
    get_operation_status : Proc(IOperationsProgressDialog*, PDOPSTATUS*, HRESULT)
  end

  struct IOperationsProgressDialog
    lpVtbl : IOperationsProgressDialogVTbl*
  end

  struct IIOCancelInformationVTbl
    query_interface : Proc(IIOCancelInformation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIOCancelInformation*, UInt32)
    release : Proc(IIOCancelInformation*, UInt32)
    set_cancel_information : Proc(IIOCancelInformation*, UInt32, UInt32, HRESULT)
    get_cancel_information : Proc(IIOCancelInformation*, UInt32*, UInt32*, HRESULT)
  end

  struct IIOCancelInformation
    lpVtbl : IIOCancelInformationVTbl*
  end

  struct IFileOperationVTbl
    query_interface : Proc(IFileOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileOperation*, UInt32)
    release : Proc(IFileOperation*, UInt32)
    advise : Proc(IFileOperation*, IFileOperationProgressSink, UInt32*, HRESULT)
    unadvise : Proc(IFileOperation*, UInt32, HRESULT)
    set_operation_flags : Proc(IFileOperation*, UInt32, HRESULT)
    set_progress_message : Proc(IFileOperation*, LibC::LPWSTR, HRESULT)
    set_progress_dialog : Proc(IFileOperation*, IOperationsProgressDialog, HRESULT)
    set_properties : Proc(IFileOperation*, IPropertyChangeArray, HRESULT)
    set_owner_window : Proc(IFileOperation*, LibC::HANDLE, HRESULT)
    apply_properties_to_item : Proc(IFileOperation*, IShellItem, HRESULT)
    apply_properties_to_items : Proc(IFileOperation*, IUnknown, HRESULT)
    rename_item : Proc(IFileOperation*, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    rename_items : Proc(IFileOperation*, IUnknown, LibC::LPWSTR, HRESULT)
    move_item : Proc(IFileOperation*, IShellItem, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    move_items : Proc(IFileOperation*, IUnknown, IShellItem, HRESULT)
    copy_item : Proc(IFileOperation*, IShellItem, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    copy_items : Proc(IFileOperation*, IUnknown, IShellItem, HRESULT)
    delete_item : Proc(IFileOperation*, IShellItem, IFileOperationProgressSink, HRESULT)
    delete_items : Proc(IFileOperation*, IUnknown, HRESULT)
    new_item : Proc(IFileOperation*, IShellItem, UInt32, LibC::LPWSTR, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    perform_operations : Proc(IFileOperation*, HRESULT)
    get_any_operations_aborted : Proc(IFileOperation*, LibC::BOOL*, HRESULT)
  end

  struct IFileOperation
    lpVtbl : IFileOperationVTbl*
  end

  struct IFileOperation2VTbl
    query_interface : Proc(IFileOperation2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileOperation2*, UInt32)
    release : Proc(IFileOperation2*, UInt32)
    advise : Proc(IFileOperation2*, IFileOperationProgressSink, UInt32*, HRESULT)
    unadvise : Proc(IFileOperation2*, UInt32, HRESULT)
    set_operation_flags : Proc(IFileOperation2*, UInt32, HRESULT)
    set_progress_message : Proc(IFileOperation2*, LibC::LPWSTR, HRESULT)
    set_progress_dialog : Proc(IFileOperation2*, IOperationsProgressDialog, HRESULT)
    set_properties : Proc(IFileOperation2*, IPropertyChangeArray, HRESULT)
    set_owner_window : Proc(IFileOperation2*, LibC::HANDLE, HRESULT)
    apply_properties_to_item : Proc(IFileOperation2*, IShellItem, HRESULT)
    apply_properties_to_items : Proc(IFileOperation2*, IUnknown, HRESULT)
    rename_item : Proc(IFileOperation2*, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    rename_items : Proc(IFileOperation2*, IUnknown, LibC::LPWSTR, HRESULT)
    move_item : Proc(IFileOperation2*, IShellItem, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    move_items : Proc(IFileOperation2*, IUnknown, IShellItem, HRESULT)
    copy_item : Proc(IFileOperation2*, IShellItem, IShellItem, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    copy_items : Proc(IFileOperation2*, IUnknown, IShellItem, HRESULT)
    delete_item : Proc(IFileOperation2*, IShellItem, IFileOperationProgressSink, HRESULT)
    delete_items : Proc(IFileOperation2*, IUnknown, HRESULT)
    new_item : Proc(IFileOperation2*, IShellItem, UInt32, LibC::LPWSTR, LibC::LPWSTR, IFileOperationProgressSink, HRESULT)
    perform_operations : Proc(IFileOperation2*, HRESULT)
    get_any_operations_aborted : Proc(IFileOperation2*, LibC::BOOL*, HRESULT)
    set_operation_flags2 : Proc(IFileOperation2*, FILE_OPERATION_FLAGS2, HRESULT)
  end

  struct IFileOperation2
    lpVtbl : IFileOperation2VTbl*
  end

  struct IObjectProviderVTbl
    query_interface : Proc(IObjectProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectProvider*, UInt32)
    release : Proc(IObjectProvider*, UInt32)
    query_object : Proc(IObjectProvider*, Guid*, Guid*, Void**, HRESULT)
  end

  struct IObjectProvider
    lpVtbl : IObjectProviderVTbl*
  end

  struct INamespaceWalkCBVTbl
    query_interface : Proc(INamespaceWalkCB*, Guid*, Void**, HRESULT)
    add_ref : Proc(INamespaceWalkCB*, UInt32)
    release : Proc(INamespaceWalkCB*, UInt32)
    found_item : Proc(INamespaceWalkCB*, IShellFolder, ITEMIDLIST*, HRESULT)
    enter_folder : Proc(INamespaceWalkCB*, IShellFolder, ITEMIDLIST*, HRESULT)
    leave_folder : Proc(INamespaceWalkCB*, IShellFolder, ITEMIDLIST*, HRESULT)
    initialize_progress_dialog : Proc(INamespaceWalkCB*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
  end

  struct INamespaceWalkCB
    lpVtbl : INamespaceWalkCBVTbl*
  end

  struct INamespaceWalkCB2VTbl
    query_interface : Proc(INamespaceWalkCB2*, Guid*, Void**, HRESULT)
    add_ref : Proc(INamespaceWalkCB2*, UInt32)
    release : Proc(INamespaceWalkCB2*, UInt32)
    found_item : Proc(INamespaceWalkCB2*, IShellFolder, ITEMIDLIST*, HRESULT)
    enter_folder : Proc(INamespaceWalkCB2*, IShellFolder, ITEMIDLIST*, HRESULT)
    leave_folder : Proc(INamespaceWalkCB2*, IShellFolder, ITEMIDLIST*, HRESULT)
    initialize_progress_dialog : Proc(INamespaceWalkCB2*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
    walk_complete : Proc(INamespaceWalkCB2*, HRESULT, HRESULT)
  end

  struct INamespaceWalkCB2
    lpVtbl : INamespaceWalkCB2VTbl*
  end

  struct INamespaceWalkVTbl
    query_interface : Proc(INamespaceWalk*, Guid*, Void**, HRESULT)
    add_ref : Proc(INamespaceWalk*, UInt32)
    release : Proc(INamespaceWalk*, UInt32)
    walk : Proc(INamespaceWalk*, IUnknown, UInt32, Int32, INamespaceWalkCB, HRESULT)
    get_id_array_result : Proc(INamespaceWalk*, UInt32*, ITEMIDLIST***, HRESULT)
  end

  struct INamespaceWalk
    lpVtbl : INamespaceWalkVTbl*
  end

  struct IBandSiteVTbl
    query_interface : Proc(IBandSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBandSite*, UInt32)
    release : Proc(IBandSite*, UInt32)
    add_band : Proc(IBandSite*, IUnknown, HRESULT)
    enum_bands : Proc(IBandSite*, UInt32, UInt32*, HRESULT)
    query_band : Proc(IBandSite*, UInt32, IDeskBand*, UInt32*, Char*, Int32, HRESULT)
    set_band_state : Proc(IBandSite*, UInt32, UInt32, UInt32, HRESULT)
    remove_band : Proc(IBandSite*, UInt32, HRESULT)
    get_band_object : Proc(IBandSite*, UInt32, Guid*, Void**, HRESULT)
    set_band_site_info : Proc(IBandSite*, BANDSITEINFO*, HRESULT)
    get_band_site_info : Proc(IBandSite*, BANDSITEINFO*, HRESULT)
  end

  struct IBandSite
    lpVtbl : IBandSiteVTbl*
  end

  struct IModalWindowVTbl
    query_interface : Proc(IModalWindow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModalWindow*, UInt32)
    release : Proc(IModalWindow*, UInt32)
    show : Proc(IModalWindow*, LibC::HANDLE, HRESULT)
  end

  struct IModalWindow
    lpVtbl : IModalWindowVTbl*
  end

  struct IContextMenuSiteVTbl
    query_interface : Proc(IContextMenuSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContextMenuSite*, UInt32)
    release : Proc(IContextMenuSite*, UInt32)
    do_context_menu_popup : Proc(IContextMenuSite*, IUnknown, UInt32, POINT, HRESULT)
  end

  struct IContextMenuSite
    lpVtbl : IContextMenuSiteVTbl*
  end

  struct IMenuBandVTbl
    query_interface : Proc(IMenuBand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMenuBand*, UInt32)
    release : Proc(IMenuBand*, UInt32)
    is_menu_message : Proc(IMenuBand*, MSG*, HRESULT)
    translate_menu_message : Proc(IMenuBand*, MSG*, LRESULT*, HRESULT)
  end

  struct IMenuBand
    lpVtbl : IMenuBandVTbl*
  end

  struct IRegTreeItemVTbl
    query_interface : Proc(IRegTreeItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRegTreeItem*, UInt32)
    release : Proc(IRegTreeItem*, UInt32)
    get_check_state : Proc(IRegTreeItem*, LibC::BOOL*, HRESULT)
    set_check_state : Proc(IRegTreeItem*, LibC::BOOL, HRESULT)
  end

  struct IRegTreeItem
    lpVtbl : IRegTreeItemVTbl*
  end

  struct IDeskBarVTbl
    query_interface : Proc(IDeskBar*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeskBar*, UInt32)
    release : Proc(IDeskBar*, UInt32)
    get_window : Proc(IDeskBar*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDeskBar*, LibC::BOOL, HRESULT)
    set_client : Proc(IDeskBar*, IUnknown, HRESULT)
    get_client : Proc(IDeskBar*, IUnknown*, HRESULT)
    on_pos_rect_change_db : Proc(IDeskBar*, RECT*, HRESULT)
  end

  struct IDeskBar
    lpVtbl : IDeskBarVTbl*
  end

  struct IMenuPopupVTbl
    query_interface : Proc(IMenuPopup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMenuPopup*, UInt32)
    release : Proc(IMenuPopup*, UInt32)
    get_window : Proc(IMenuPopup*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IMenuPopup*, LibC::BOOL, HRESULT)
    set_client : Proc(IMenuPopup*, IUnknown, HRESULT)
    get_client : Proc(IMenuPopup*, IUnknown*, HRESULT)
    on_pos_rect_change_db : Proc(IMenuPopup*, RECT*, HRESULT)
    popup : Proc(IMenuPopup*, POINTL*, RECTL*, Int32, HRESULT)
    on_select : Proc(IMenuPopup*, UInt32, HRESULT)
    set_sub_menu : Proc(IMenuPopup*, IMenuPopup, LibC::BOOL, HRESULT)
  end

  struct IMenuPopup
    lpVtbl : IMenuPopupVTbl*
  end

  struct IFileIsInUseVTbl
    query_interface : Proc(IFileIsInUse*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileIsInUse*, UInt32)
    release : Proc(IFileIsInUse*, UInt32)
    get_app_name : Proc(IFileIsInUse*, LibC::LPWSTR*, HRESULT)
    get_usage : Proc(IFileIsInUse*, FILE_USAGE_TYPE*, HRESULT)
    get_capabilities : Proc(IFileIsInUse*, UInt32*, HRESULT)
    get_switch_to_hwnd : Proc(IFileIsInUse*, HANDLE*, HRESULT)
    close_file : Proc(IFileIsInUse*, HRESULT)
  end

  struct IFileIsInUse
    lpVtbl : IFileIsInUseVTbl*
  end

  struct IFileDialogEventsVTbl
    query_interface : Proc(IFileDialogEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileDialogEvents*, UInt32)
    release : Proc(IFileDialogEvents*, UInt32)
    on_file_ok : Proc(IFileDialogEvents*, IFileDialog, HRESULT)
    on_folder_changing : Proc(IFileDialogEvents*, IFileDialog, IShellItem, HRESULT)
    on_folder_change : Proc(IFileDialogEvents*, IFileDialog, HRESULT)
    on_selection_change : Proc(IFileDialogEvents*, IFileDialog, HRESULT)
    on_share_violation : Proc(IFileDialogEvents*, IFileDialog, IShellItem, FDE_SHAREVIOLATION_RESPONSE*, HRESULT)
    on_type_change : Proc(IFileDialogEvents*, IFileDialog, HRESULT)
    on_overwrite : Proc(IFileDialogEvents*, IFileDialog, IShellItem, FDE_OVERWRITE_RESPONSE*, HRESULT)
  end

  struct IFileDialogEvents
    lpVtbl : IFileDialogEventsVTbl*
  end

  struct IFileDialogVTbl
    query_interface : Proc(IFileDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileDialog*, UInt32)
    release : Proc(IFileDialog*, UInt32)
    show : Proc(IFileDialog*, LibC::HANDLE, HRESULT)
    set_file_types : Proc(IFileDialog*, UInt32, COMDLG_FILTERSPEC*, HRESULT)
    set_file_type_index : Proc(IFileDialog*, UInt32, HRESULT)
    get_file_type_index : Proc(IFileDialog*, UInt32*, HRESULT)
    advise : Proc(IFileDialog*, IFileDialogEvents, UInt32*, HRESULT)
    unadvise : Proc(IFileDialog*, UInt32, HRESULT)
    set_options : Proc(IFileDialog*, UInt32, HRESULT)
    get_options : Proc(IFileDialog*, UInt32*, HRESULT)
    set_default_folder : Proc(IFileDialog*, IShellItem, HRESULT)
    set_folder : Proc(IFileDialog*, IShellItem, HRESULT)
    get_folder : Proc(IFileDialog*, IShellItem*, HRESULT)
    get_current_selection : Proc(IFileDialog*, IShellItem*, HRESULT)
    set_file_name : Proc(IFileDialog*, LibC::LPWSTR, HRESULT)
    get_file_name : Proc(IFileDialog*, LibC::LPWSTR*, HRESULT)
    set_title : Proc(IFileDialog*, LibC::LPWSTR, HRESULT)
    set_ok_button_label : Proc(IFileDialog*, LibC::LPWSTR, HRESULT)
    set_file_name_label : Proc(IFileDialog*, LibC::LPWSTR, HRESULT)
    get_result : Proc(IFileDialog*, IShellItem*, HRESULT)
    add_place : Proc(IFileDialog*, IShellItem, FDAP, HRESULT)
    set_default_extension : Proc(IFileDialog*, LibC::LPWSTR, HRESULT)
    close : Proc(IFileDialog*, HRESULT, HRESULT)
    set_client_guid : Proc(IFileDialog*, Guid*, HRESULT)
    clear_client_data : Proc(IFileDialog*, HRESULT)
    set_filter : Proc(IFileDialog*, IShellItemFilter, HRESULT)
  end

  struct IFileDialog
    lpVtbl : IFileDialogVTbl*
  end

  struct IFileSaveDialogVTbl
    query_interface : Proc(IFileSaveDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSaveDialog*, UInt32)
    release : Proc(IFileSaveDialog*, UInt32)
    show : Proc(IFileSaveDialog*, LibC::HANDLE, HRESULT)
    set_file_types : Proc(IFileSaveDialog*, UInt32, COMDLG_FILTERSPEC*, HRESULT)
    set_file_type_index : Proc(IFileSaveDialog*, UInt32, HRESULT)
    get_file_type_index : Proc(IFileSaveDialog*, UInt32*, HRESULT)
    advise : Proc(IFileSaveDialog*, IFileDialogEvents, UInt32*, HRESULT)
    unadvise : Proc(IFileSaveDialog*, UInt32, HRESULT)
    set_options : Proc(IFileSaveDialog*, UInt32, HRESULT)
    get_options : Proc(IFileSaveDialog*, UInt32*, HRESULT)
    set_default_folder : Proc(IFileSaveDialog*, IShellItem, HRESULT)
    set_folder : Proc(IFileSaveDialog*, IShellItem, HRESULT)
    get_folder : Proc(IFileSaveDialog*, IShellItem*, HRESULT)
    get_current_selection : Proc(IFileSaveDialog*, IShellItem*, HRESULT)
    set_file_name : Proc(IFileSaveDialog*, LibC::LPWSTR, HRESULT)
    get_file_name : Proc(IFileSaveDialog*, LibC::LPWSTR*, HRESULT)
    set_title : Proc(IFileSaveDialog*, LibC::LPWSTR, HRESULT)
    set_ok_button_label : Proc(IFileSaveDialog*, LibC::LPWSTR, HRESULT)
    set_file_name_label : Proc(IFileSaveDialog*, LibC::LPWSTR, HRESULT)
    get_result : Proc(IFileSaveDialog*, IShellItem*, HRESULT)
    add_place : Proc(IFileSaveDialog*, IShellItem, FDAP, HRESULT)
    set_default_extension : Proc(IFileSaveDialog*, LibC::LPWSTR, HRESULT)
    close : Proc(IFileSaveDialog*, HRESULT, HRESULT)
    set_client_guid : Proc(IFileSaveDialog*, Guid*, HRESULT)
    clear_client_data : Proc(IFileSaveDialog*, HRESULT)
    set_filter : Proc(IFileSaveDialog*, IShellItemFilter, HRESULT)
    set_save_as_item : Proc(IFileSaveDialog*, IShellItem, HRESULT)
    set_properties : Proc(IFileSaveDialog*, IPropertyStore, HRESULT)
    set_collected_properties : Proc(IFileSaveDialog*, IPropertyDescriptionList, LibC::BOOL, HRESULT)
    get_properties : Proc(IFileSaveDialog*, IPropertyStore*, HRESULT)
    apply_properties : Proc(IFileSaveDialog*, IShellItem, IPropertyStore, LibC::HANDLE, IFileOperationProgressSink, HRESULT)
  end

  struct IFileSaveDialog
    lpVtbl : IFileSaveDialogVTbl*
  end

  struct IFileOpenDialogVTbl
    query_interface : Proc(IFileOpenDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileOpenDialog*, UInt32)
    release : Proc(IFileOpenDialog*, UInt32)
    show : Proc(IFileOpenDialog*, LibC::HANDLE, HRESULT)
    set_file_types : Proc(IFileOpenDialog*, UInt32, COMDLG_FILTERSPEC*, HRESULT)
    set_file_type_index : Proc(IFileOpenDialog*, UInt32, HRESULT)
    get_file_type_index : Proc(IFileOpenDialog*, UInt32*, HRESULT)
    advise : Proc(IFileOpenDialog*, IFileDialogEvents, UInt32*, HRESULT)
    unadvise : Proc(IFileOpenDialog*, UInt32, HRESULT)
    set_options : Proc(IFileOpenDialog*, UInt32, HRESULT)
    get_options : Proc(IFileOpenDialog*, UInt32*, HRESULT)
    set_default_folder : Proc(IFileOpenDialog*, IShellItem, HRESULT)
    set_folder : Proc(IFileOpenDialog*, IShellItem, HRESULT)
    get_folder : Proc(IFileOpenDialog*, IShellItem*, HRESULT)
    get_current_selection : Proc(IFileOpenDialog*, IShellItem*, HRESULT)
    set_file_name : Proc(IFileOpenDialog*, LibC::LPWSTR, HRESULT)
    get_file_name : Proc(IFileOpenDialog*, LibC::LPWSTR*, HRESULT)
    set_title : Proc(IFileOpenDialog*, LibC::LPWSTR, HRESULT)
    set_ok_button_label : Proc(IFileOpenDialog*, LibC::LPWSTR, HRESULT)
    set_file_name_label : Proc(IFileOpenDialog*, LibC::LPWSTR, HRESULT)
    get_result : Proc(IFileOpenDialog*, IShellItem*, HRESULT)
    add_place : Proc(IFileOpenDialog*, IShellItem, FDAP, HRESULT)
    set_default_extension : Proc(IFileOpenDialog*, LibC::LPWSTR, HRESULT)
    close : Proc(IFileOpenDialog*, HRESULT, HRESULT)
    set_client_guid : Proc(IFileOpenDialog*, Guid*, HRESULT)
    clear_client_data : Proc(IFileOpenDialog*, HRESULT)
    set_filter : Proc(IFileOpenDialog*, IShellItemFilter, HRESULT)
    get_results : Proc(IFileOpenDialog*, IShellItemArray*, HRESULT)
    get_selected_items : Proc(IFileOpenDialog*, IShellItemArray*, HRESULT)
  end

  struct IFileOpenDialog
    lpVtbl : IFileOpenDialogVTbl*
  end

  struct IFileDialogCustomizeVTbl
    query_interface : Proc(IFileDialogCustomize*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileDialogCustomize*, UInt32)
    release : Proc(IFileDialogCustomize*, UInt32)
    enable_open_drop_down : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    add_menu : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    add_push_button : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    add_combo_box : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    add_radio_button_list : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    add_check_button : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, LibC::BOOL, HRESULT)
    add_edit_box : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    add_separator : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    add_text : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    set_control_label : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    get_control_state : Proc(IFileDialogCustomize*, UInt32, CDCONTROLSTATEF*, HRESULT)
    set_control_state : Proc(IFileDialogCustomize*, UInt32, CDCONTROLSTATEF, HRESULT)
    get_edit_box_text : Proc(IFileDialogCustomize*, UInt32, UInt16**, HRESULT)
    set_edit_box_text : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    get_check_button_state : Proc(IFileDialogCustomize*, UInt32, LibC::BOOL*, HRESULT)
    set_check_button_state : Proc(IFileDialogCustomize*, UInt32, LibC::BOOL, HRESULT)
    add_control_item : Proc(IFileDialogCustomize*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    remove_control_item : Proc(IFileDialogCustomize*, UInt32, UInt32, HRESULT)
    remove_all_control_items : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    get_control_item_state : Proc(IFileDialogCustomize*, UInt32, UInt32, CDCONTROLSTATEF*, HRESULT)
    set_control_item_state : Proc(IFileDialogCustomize*, UInt32, UInt32, CDCONTROLSTATEF, HRESULT)
    get_selected_control_item : Proc(IFileDialogCustomize*, UInt32, UInt32*, HRESULT)
    set_selected_control_item : Proc(IFileDialogCustomize*, UInt32, UInt32, HRESULT)
    start_visual_group : Proc(IFileDialogCustomize*, UInt32, LibC::LPWSTR, HRESULT)
    end_visual_group : Proc(IFileDialogCustomize*, HRESULT)
    make_prominent : Proc(IFileDialogCustomize*, UInt32, HRESULT)
    set_control_item_text : Proc(IFileDialogCustomize*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
  end

  struct IFileDialogCustomize
    lpVtbl : IFileDialogCustomizeVTbl*
  end

  struct IApplicationAssociationRegistrationVTbl
    query_interface : Proc(IApplicationAssociationRegistration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationAssociationRegistration*, UInt32)
    release : Proc(IApplicationAssociationRegistration*, UInt32)
    query_current_default : Proc(IApplicationAssociationRegistration*, LibC::LPWSTR, ASSOCIATIONTYPE, ASSOCIATIONLEVEL, LibC::LPWSTR*, HRESULT)
    query_app_is_default : Proc(IApplicationAssociationRegistration*, LibC::LPWSTR, ASSOCIATIONTYPE, ASSOCIATIONLEVEL, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    query_app_is_default_all : Proc(IApplicationAssociationRegistration*, ASSOCIATIONLEVEL, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    set_app_as_default : Proc(IApplicationAssociationRegistration*, LibC::LPWSTR, LibC::LPWSTR, ASSOCIATIONTYPE, HRESULT)
    set_app_as_default_all : Proc(IApplicationAssociationRegistration*, LibC::LPWSTR, HRESULT)
    clear_user_associations : Proc(IApplicationAssociationRegistration*, HRESULT)
  end

  struct IApplicationAssociationRegistration
    lpVtbl : IApplicationAssociationRegistrationVTbl*
  end

  struct IDelegateFolderVTbl
    query_interface : Proc(IDelegateFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDelegateFolder*, UInt32)
    release : Proc(IDelegateFolder*, UInt32)
    set_item_alloc : Proc(IDelegateFolder*, IMalloc, HRESULT)
  end

  struct IDelegateFolder
    lpVtbl : IDelegateFolderVTbl*
  end

  struct IBrowserFrameOptionsVTbl
    query_interface : Proc(IBrowserFrameOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBrowserFrameOptions*, UInt32)
    release : Proc(IBrowserFrameOptions*, UInt32)
    get_frame_options : Proc(IBrowserFrameOptions*, UInt32, UInt32*, HRESULT)
  end

  struct IBrowserFrameOptions
    lpVtbl : IBrowserFrameOptionsVTbl*
  end

  struct INewWindowManagerVTbl
    query_interface : Proc(INewWindowManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(INewWindowManager*, UInt32)
    release : Proc(INewWindowManager*, UInt32)
    evaluate_new_window : Proc(INewWindowManager*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL, UInt32, UInt32, HRESULT)
  end

  struct INewWindowManager
    lpVtbl : INewWindowManagerVTbl*
  end

  struct IAttachmentExecuteVTbl
    query_interface : Proc(IAttachmentExecute*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAttachmentExecute*, UInt32)
    release : Proc(IAttachmentExecute*, UInt32)
    set_client_title : Proc(IAttachmentExecute*, LibC::LPWSTR, HRESULT)
    set_client_guid : Proc(IAttachmentExecute*, Guid*, HRESULT)
    set_local_path : Proc(IAttachmentExecute*, LibC::LPWSTR, HRESULT)
    set_file_name : Proc(IAttachmentExecute*, LibC::LPWSTR, HRESULT)
    set_source : Proc(IAttachmentExecute*, LibC::LPWSTR, HRESULT)
    set_referrer : Proc(IAttachmentExecute*, LibC::LPWSTR, HRESULT)
    check_policy : Proc(IAttachmentExecute*, HRESULT)
    prompt : Proc(IAttachmentExecute*, LibC::HANDLE, ATTACHMENT_PROMPT, ATTACHMENT_ACTION*, HRESULT)
    save : Proc(IAttachmentExecute*, HRESULT)
    execute : Proc(IAttachmentExecute*, LibC::HANDLE, LibC::LPWSTR, LibC::HANDLE*, HRESULT)
    save_with_ui : Proc(IAttachmentExecute*, LibC::HANDLE, HRESULT)
    clear_client_state : Proc(IAttachmentExecute*, HRESULT)
  end

  struct IAttachmentExecute
    lpVtbl : IAttachmentExecuteVTbl*
  end

  struct IShellMenuCallbackVTbl
    query_interface : Proc(IShellMenuCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellMenuCallback*, UInt32)
    release : Proc(IShellMenuCallback*, UInt32)
    callback_sm : Proc(IShellMenuCallback*, SMDATA*, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  end

  struct IShellMenuCallback
    lpVtbl : IShellMenuCallbackVTbl*
  end

  struct IShellMenuVTbl
    query_interface : Proc(IShellMenu*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellMenu*, UInt32)
    release : Proc(IShellMenu*, UInt32)
    initialize : Proc(IShellMenu*, IShellMenuCallback, UInt32, UInt32, UInt32, HRESULT)
    get_menu_info : Proc(IShellMenu*, IShellMenuCallback*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_shell_folder : Proc(IShellMenu*, IShellFolder, ITEMIDLIST*, HKEY, UInt32, HRESULT)
    get_shell_folder : Proc(IShellMenu*, UInt32*, ITEMIDLIST**, Guid*, Void**, HRESULT)
    set_menu : Proc(IShellMenu*, LibC::HANDLE, LibC::HANDLE, UInt32, HRESULT)
    get_menu : Proc(IShellMenu*, HANDLE*, HANDLE*, UInt32*, HRESULT)
    invalidate_item : Proc(IShellMenu*, SMDATA*, UInt32, HRESULT)
    get_state : Proc(IShellMenu*, SMDATA*, HRESULT)
    set_menu_toolbar : Proc(IShellMenu*, IUnknown, UInt32, HRESULT)
  end

  struct IShellMenu
    lpVtbl : IShellMenuVTbl*
  end

  struct IKnownFolderVTbl
    query_interface : Proc(IKnownFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKnownFolder*, UInt32)
    release : Proc(IKnownFolder*, UInt32)
    get_id : Proc(IKnownFolder*, Guid*, HRESULT)
    get_category : Proc(IKnownFolder*, KF_CATEGORY*, HRESULT)
    get_shell_item : Proc(IKnownFolder*, UInt32, Guid*, Void**, HRESULT)
    get_path : Proc(IKnownFolder*, UInt32, LibC::LPWSTR*, HRESULT)
    set_path : Proc(IKnownFolder*, UInt32, LibC::LPWSTR, HRESULT)
    get_id_list : Proc(IKnownFolder*, UInt32, ITEMIDLIST**, HRESULT)
    get_folder_type : Proc(IKnownFolder*, Guid*, HRESULT)
    get_redirection_capabilities : Proc(IKnownFolder*, UInt32*, HRESULT)
    get_folder_definition : Proc(IKnownFolder*, KNOWNFOLDER_DEFINITION*, HRESULT)
  end

  struct IKnownFolder
    lpVtbl : IKnownFolderVTbl*
  end

  struct IKnownFolderManagerVTbl
    query_interface : Proc(IKnownFolderManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKnownFolderManager*, UInt32)
    release : Proc(IKnownFolderManager*, UInt32)
    folder_id_from_csidl : Proc(IKnownFolderManager*, Int32, Guid*, HRESULT)
    folder_id_to_csidl : Proc(IKnownFolderManager*, Guid*, Int32*, HRESULT)
    get_folder_ids : Proc(IKnownFolderManager*, Guid**, UInt32*, HRESULT)
    get_folder : Proc(IKnownFolderManager*, Guid*, IKnownFolder*, HRESULT)
    get_folder_by_name : Proc(IKnownFolderManager*, LibC::LPWSTR, IKnownFolder*, HRESULT)
    register_folder : Proc(IKnownFolderManager*, Guid*, KNOWNFOLDER_DEFINITION*, HRESULT)
    unregister_folder : Proc(IKnownFolderManager*, Guid*, HRESULT)
    find_folder_from_path : Proc(IKnownFolderManager*, LibC::LPWSTR, FFFP_MODE, IKnownFolder*, HRESULT)
    find_folder_from_id_list : Proc(IKnownFolderManager*, ITEMIDLIST*, IKnownFolder*, HRESULT)
    redirect : Proc(IKnownFolderManager*, Guid*, LibC::HANDLE, UInt32, LibC::LPWSTR, UInt32, Guid*, LibC::LPWSTR*, HRESULT)
  end

  struct IKnownFolderManager
    lpVtbl : IKnownFolderManagerVTbl*
  end

  struct ISharingConfigurationManagerVTbl
    query_interface : Proc(ISharingConfigurationManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISharingConfigurationManager*, UInt32)
    release : Proc(ISharingConfigurationManager*, UInt32)
    create_share : Proc(ISharingConfigurationManager*, DEF_SHARE_ID, SHARE_ROLE, HRESULT)
    delete_share : Proc(ISharingConfigurationManager*, DEF_SHARE_ID, HRESULT)
    share_exists : Proc(ISharingConfigurationManager*, DEF_SHARE_ID, HRESULT)
    get_share_permissions : Proc(ISharingConfigurationManager*, DEF_SHARE_ID, SHARE_ROLE*, HRESULT)
    share_printers : Proc(ISharingConfigurationManager*, HRESULT)
    stop_sharing_printers : Proc(ISharingConfigurationManager*, HRESULT)
    are_printers_shared : Proc(ISharingConfigurationManager*, HRESULT)
  end

  struct ISharingConfigurationManager
    lpVtbl : ISharingConfigurationManagerVTbl*
  end

  struct IRelatedItemVTbl
    query_interface : Proc(IRelatedItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRelatedItem*, UInt32)
    release : Proc(IRelatedItem*, UInt32)
    get_item_id_list : Proc(IRelatedItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IRelatedItem*, IShellItem*, HRESULT)
  end

  struct IRelatedItem
    lpVtbl : IRelatedItemVTbl*
  end

  struct IIdentityNameVTbl
    query_interface : Proc(IIdentityName*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIdentityName*, UInt32)
    release : Proc(IIdentityName*, UInt32)
    get_item_id_list : Proc(IIdentityName*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IIdentityName*, IShellItem*, HRESULT)
  end

  struct IIdentityName
    lpVtbl : IIdentityNameVTbl*
  end

  struct IDelegateItemVTbl
    query_interface : Proc(IDelegateItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDelegateItem*, UInt32)
    release : Proc(IDelegateItem*, UInt32)
    get_item_id_list : Proc(IDelegateItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IDelegateItem*, IShellItem*, HRESULT)
  end

  struct IDelegateItem
    lpVtbl : IDelegateItemVTbl*
  end

  struct ICurrentItemVTbl
    query_interface : Proc(ICurrentItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICurrentItem*, UInt32)
    release : Proc(ICurrentItem*, UInt32)
    get_item_id_list : Proc(ICurrentItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(ICurrentItem*, IShellItem*, HRESULT)
  end

  struct ICurrentItem
    lpVtbl : ICurrentItemVTbl*
  end

  struct ITransferMediumItemVTbl
    query_interface : Proc(ITransferMediumItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITransferMediumItem*, UInt32)
    release : Proc(ITransferMediumItem*, UInt32)
    get_item_id_list : Proc(ITransferMediumItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(ITransferMediumItem*, IShellItem*, HRESULT)
  end

  struct ITransferMediumItem
    lpVtbl : ITransferMediumItemVTbl*
  end

  struct IDisplayItemVTbl
    query_interface : Proc(IDisplayItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDisplayItem*, UInt32)
    release : Proc(IDisplayItem*, UInt32)
    get_item_id_list : Proc(IDisplayItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IDisplayItem*, IShellItem*, HRESULT)
  end

  struct IDisplayItem
    lpVtbl : IDisplayItemVTbl*
  end

  struct IViewStateIdentityItemVTbl
    query_interface : Proc(IViewStateIdentityItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewStateIdentityItem*, UInt32)
    release : Proc(IViewStateIdentityItem*, UInt32)
    get_item_id_list : Proc(IViewStateIdentityItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IViewStateIdentityItem*, IShellItem*, HRESULT)
  end

  struct IViewStateIdentityItem
    lpVtbl : IViewStateIdentityItemVTbl*
  end

  struct IPreviewItemVTbl
    query_interface : Proc(IPreviewItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreviewItem*, UInt32)
    release : Proc(IPreviewItem*, UInt32)
    get_item_id_list : Proc(IPreviewItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IPreviewItem*, IShellItem*, HRESULT)
  end

  struct IPreviewItem
    lpVtbl : IPreviewItemVTbl*
  end

  struct IDestinationStreamFactoryVTbl
    query_interface : Proc(IDestinationStreamFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDestinationStreamFactory*, UInt32)
    release : Proc(IDestinationStreamFactory*, UInt32)
    get_destination_stream : Proc(IDestinationStreamFactory*, IStream*, HRESULT)
  end

  struct IDestinationStreamFactory
    lpVtbl : IDestinationStreamFactoryVTbl*
  end

  struct ICreateProcessInputsVTbl
    query_interface : Proc(ICreateProcessInputs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICreateProcessInputs*, UInt32)
    release : Proc(ICreateProcessInputs*, UInt32)
    get_create_flags : Proc(ICreateProcessInputs*, UInt32*, HRESULT)
    set_create_flags : Proc(ICreateProcessInputs*, UInt32, HRESULT)
    add_create_flags : Proc(ICreateProcessInputs*, UInt32, HRESULT)
    set_hot_key : Proc(ICreateProcessInputs*, UInt16, HRESULT)
    add_startup_flags : Proc(ICreateProcessInputs*, UInt32, HRESULT)
    set_title : Proc(ICreateProcessInputs*, LibC::LPWSTR, HRESULT)
    set_environment_variable : Proc(ICreateProcessInputs*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct ICreateProcessInputs
    lpVtbl : ICreateProcessInputsVTbl*
  end

  struct ICreatingProcessVTbl
    query_interface : Proc(ICreatingProcess*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICreatingProcess*, UInt32)
    release : Proc(ICreatingProcess*, UInt32)
    on_creating : Proc(ICreatingProcess*, ICreateProcessInputs, HRESULT)
  end

  struct ICreatingProcess
    lpVtbl : ICreatingProcessVTbl*
  end

  struct ILaunchUIContextVTbl
    query_interface : Proc(ILaunchUIContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchUIContext*, UInt32)
    release : Proc(ILaunchUIContext*, UInt32)
    set_associated_window : Proc(ILaunchUIContext*, LibC::HANDLE, HRESULT)
    set_tab_grouping_preference : Proc(ILaunchUIContext*, UInt32, HRESULT)
  end

  struct ILaunchUIContext
    lpVtbl : ILaunchUIContextVTbl*
  end

  struct ILaunchUIContextProviderVTbl
    query_interface : Proc(ILaunchUIContextProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchUIContextProvider*, UInt32)
    release : Proc(ILaunchUIContextProvider*, UInt32)
    update_context : Proc(ILaunchUIContextProvider*, ILaunchUIContext, HRESULT)
  end

  struct ILaunchUIContextProvider
    lpVtbl : ILaunchUIContextProviderVTbl*
  end

  struct INewMenuClientVTbl
    query_interface : Proc(INewMenuClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(INewMenuClient*, UInt32)
    release : Proc(INewMenuClient*, UInt32)
    include_items : Proc(INewMenuClient*, Int32*, HRESULT)
    select_and_edit_item : Proc(INewMenuClient*, ITEMIDLIST*, Int32, HRESULT)
  end

  struct INewMenuClient
    lpVtbl : INewMenuClientVTbl*
  end

  struct IInitializeWithBindCtxVTbl
    query_interface : Proc(IInitializeWithBindCtx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeWithBindCtx*, UInt32)
    release : Proc(IInitializeWithBindCtx*, UInt32)
    initialize : Proc(IInitializeWithBindCtx*, IBindCtx, HRESULT)
  end

  struct IInitializeWithBindCtx
    lpVtbl : IInitializeWithBindCtxVTbl*
  end

  struct IShellItemFilterVTbl
    query_interface : Proc(IShellItemFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellItemFilter*, UInt32)
    release : Proc(IShellItemFilter*, UInt32)
    include_item : Proc(IShellItemFilter*, IShellItem, HRESULT)
    get_enum_flags_for_item : Proc(IShellItemFilter*, IShellItem, UInt32*, HRESULT)
  end

  struct IShellItemFilter
    lpVtbl : IShellItemFilterVTbl*
  end

  struct INameSpaceTreeControlVTbl
    query_interface : Proc(INameSpaceTreeControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControl*, UInt32)
    release : Proc(INameSpaceTreeControl*, UInt32)
    initialize : Proc(INameSpaceTreeControl*, LibC::HANDLE, RECT*, UInt32, HRESULT)
    tree_advise : Proc(INameSpaceTreeControl*, IUnknown, UInt32*, HRESULT)
    tree_unadvise : Proc(INameSpaceTreeControl*, UInt32, HRESULT)
    append_root : Proc(INameSpaceTreeControl*, IShellItem, UInt32, UInt32, IShellItemFilter, HRESULT)
    insert_root : Proc(INameSpaceTreeControl*, Int32, IShellItem, UInt32, UInt32, IShellItemFilter, HRESULT)
    remove_root : Proc(INameSpaceTreeControl*, IShellItem, HRESULT)
    remove_all_roots : Proc(INameSpaceTreeControl*, HRESULT)
    get_root_items : Proc(INameSpaceTreeControl*, IShellItemArray*, HRESULT)
    set_item_state : Proc(INameSpaceTreeControl*, IShellItem, UInt32, UInt32, HRESULT)
    get_item_state : Proc(INameSpaceTreeControl*, IShellItem, UInt32, UInt32*, HRESULT)
    get_selected_items : Proc(INameSpaceTreeControl*, IShellItemArray*, HRESULT)
    get_item_custom_state : Proc(INameSpaceTreeControl*, IShellItem, Int32*, HRESULT)
    set_item_custom_state : Proc(INameSpaceTreeControl*, IShellItem, Int32, HRESULT)
    ensure_item_visible : Proc(INameSpaceTreeControl*, IShellItem, HRESULT)
    set_theme : Proc(INameSpaceTreeControl*, LibC::LPWSTR, HRESULT)
    get_next_item : Proc(INameSpaceTreeControl*, IShellItem, NSTCGNI, IShellItem*, HRESULT)
    hit_test : Proc(INameSpaceTreeControl*, POINT*, IShellItem*, HRESULT)
    get_item_rect : Proc(INameSpaceTreeControl*, IShellItem, RECT*, HRESULT)
    collapse_all : Proc(INameSpaceTreeControl*, HRESULT)
  end

  struct INameSpaceTreeControl
    lpVtbl : INameSpaceTreeControlVTbl*
  end

  struct INameSpaceTreeControlFolderCapabilitiesVTbl
    query_interface : Proc(INameSpaceTreeControlFolderCapabilities*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControlFolderCapabilities*, UInt32)
    release : Proc(INameSpaceTreeControlFolderCapabilities*, UInt32)
    get_folder_capabilities : Proc(INameSpaceTreeControlFolderCapabilities*, NSTCFOLDERCAPABILITIES, NSTCFOLDERCAPABILITIES*, HRESULT)
  end

  struct INameSpaceTreeControlFolderCapabilities
    lpVtbl : INameSpaceTreeControlFolderCapabilitiesVTbl*
  end

  struct IPreviewHandlerVTbl
    query_interface : Proc(IPreviewHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreviewHandler*, UInt32)
    release : Proc(IPreviewHandler*, UInt32)
    set_window : Proc(IPreviewHandler*, LibC::HANDLE, RECT*, HRESULT)
    set_rect : Proc(IPreviewHandler*, RECT*, HRESULT)
    do_preview : Proc(IPreviewHandler*, HRESULT)
    unload : Proc(IPreviewHandler*, HRESULT)
    set_focus : Proc(IPreviewHandler*, HRESULT)
    query_focus : Proc(IPreviewHandler*, HANDLE*, HRESULT)
    translate_accelerator : Proc(IPreviewHandler*, MSG*, HRESULT)
  end

  struct IPreviewHandler
    lpVtbl : IPreviewHandlerVTbl*
  end

  struct IPreviewHandlerFrameVTbl
    query_interface : Proc(IPreviewHandlerFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreviewHandlerFrame*, UInt32)
    release : Proc(IPreviewHandlerFrame*, UInt32)
    get_window_context : Proc(IPreviewHandlerFrame*, PREVIEWHANDLERFRAMEINFO*, HRESULT)
    translate_accelerator : Proc(IPreviewHandlerFrame*, MSG*, HRESULT)
  end

  struct IPreviewHandlerFrame
    lpVtbl : IPreviewHandlerFrameVTbl*
  end

  struct IExplorerPaneVisibilityVTbl
    query_interface : Proc(IExplorerPaneVisibility*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerPaneVisibility*, UInt32)
    release : Proc(IExplorerPaneVisibility*, UInt32)
    get_pane_state : Proc(IExplorerPaneVisibility*, Guid*, UInt32*, HRESULT)
  end

  struct IExplorerPaneVisibility
    lpVtbl : IExplorerPaneVisibilityVTbl*
  end

  struct IContextMenuCBVTbl
    query_interface : Proc(IContextMenuCB*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContextMenuCB*, UInt32)
    release : Proc(IContextMenuCB*, UInt32)
    call_back : Proc(IContextMenuCB*, IShellFolder, LibC::HANDLE, IDataObject, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
  end

  struct IContextMenuCB
    lpVtbl : IContextMenuCBVTbl*
  end

  struct IDefaultExtractIconInitVTbl
    query_interface : Proc(IDefaultExtractIconInit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDefaultExtractIconInit*, UInt32)
    release : Proc(IDefaultExtractIconInit*, UInt32)
    set_flags : Proc(IDefaultExtractIconInit*, UInt32, HRESULT)
    set_key : Proc(IDefaultExtractIconInit*, HKEY, HRESULT)
    set_normal_icon : Proc(IDefaultExtractIconInit*, LibC::LPWSTR, Int32, HRESULT)
    set_open_icon : Proc(IDefaultExtractIconInit*, LibC::LPWSTR, Int32, HRESULT)
    set_shortcut_icon : Proc(IDefaultExtractIconInit*, LibC::LPWSTR, Int32, HRESULT)
    set_default_icon : Proc(IDefaultExtractIconInit*, LibC::LPWSTR, Int32, HRESULT)
  end

  struct IDefaultExtractIconInit
    lpVtbl : IDefaultExtractIconInitVTbl*
  end

  struct IExplorerCommandVTbl
    query_interface : Proc(IExplorerCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerCommand*, UInt32)
    release : Proc(IExplorerCommand*, UInt32)
    get_title : Proc(IExplorerCommand*, IShellItemArray, LibC::LPWSTR*, HRESULT)
    get_icon : Proc(IExplorerCommand*, IShellItemArray, LibC::LPWSTR*, HRESULT)
    get_tool_tip : Proc(IExplorerCommand*, IShellItemArray, LibC::LPWSTR*, HRESULT)
    get_canonical_name : Proc(IExplorerCommand*, Guid*, HRESULT)
    get_state : Proc(IExplorerCommand*, IShellItemArray, LibC::BOOL, UInt32*, HRESULT)
    invoke : Proc(IExplorerCommand*, IShellItemArray, IBindCtx, HRESULT)
    get_flags : Proc(IExplorerCommand*, UInt32*, HRESULT)
    enum_sub_commands : Proc(IExplorerCommand*, IEnumExplorerCommand*, HRESULT)
  end

  struct IExplorerCommand
    lpVtbl : IExplorerCommandVTbl*
  end

  struct IExplorerCommandStateVTbl
    query_interface : Proc(IExplorerCommandState*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerCommandState*, UInt32)
    release : Proc(IExplorerCommandState*, UInt32)
    get_state : Proc(IExplorerCommandState*, IShellItemArray, LibC::BOOL, UInt32*, HRESULT)
  end

  struct IExplorerCommandState
    lpVtbl : IExplorerCommandStateVTbl*
  end

  struct IInitializeCommandVTbl
    query_interface : Proc(IInitializeCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeCommand*, UInt32)
    release : Proc(IInitializeCommand*, UInt32)
    initialize : Proc(IInitializeCommand*, LibC::LPWSTR, IPropertyBag, HRESULT)
  end

  struct IInitializeCommand
    lpVtbl : IInitializeCommandVTbl*
  end

  struct IEnumExplorerCommandVTbl
    query_interface : Proc(IEnumExplorerCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumExplorerCommand*, UInt32)
    release : Proc(IEnumExplorerCommand*, UInt32)
    next : Proc(IEnumExplorerCommand*, UInt32, IExplorerCommand*, UInt32*, HRESULT)
    skip : Proc(IEnumExplorerCommand*, UInt32, HRESULT)
    reset : Proc(IEnumExplorerCommand*, HRESULT)
    clone : Proc(IEnumExplorerCommand*, IEnumExplorerCommand*, HRESULT)
  end

  struct IEnumExplorerCommand
    lpVtbl : IEnumExplorerCommandVTbl*
  end

  struct IExplorerCommandProviderVTbl
    query_interface : Proc(IExplorerCommandProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExplorerCommandProvider*, UInt32)
    release : Proc(IExplorerCommandProvider*, UInt32)
    get_commands : Proc(IExplorerCommandProvider*, IUnknown, Guid*, Void**, HRESULT)
    get_command : Proc(IExplorerCommandProvider*, Guid*, Guid*, Void**, HRESULT)
  end

  struct IExplorerCommandProvider
    lpVtbl : IExplorerCommandProviderVTbl*
  end

  struct IOpenControlPanelVTbl
    query_interface : Proc(IOpenControlPanel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenControlPanel*, UInt32)
    release : Proc(IOpenControlPanel*, UInt32)
    open : Proc(IOpenControlPanel*, LibC::LPWSTR, LibC::LPWSTR, IUnknown, HRESULT)
    get_path : Proc(IOpenControlPanel*, LibC::LPWSTR, Char*, UInt32, HRESULT)
    get_current_view : Proc(IOpenControlPanel*, CPVIEW*, HRESULT)
  end

  struct IOpenControlPanel
    lpVtbl : IOpenControlPanelVTbl*
  end

  struct IFileSystemBindDataVTbl
    query_interface : Proc(IFileSystemBindData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemBindData*, UInt32)
    release : Proc(IFileSystemBindData*, UInt32)
    set_find_data : Proc(IFileSystemBindData*, WIN32_FIND_DATAW*, HRESULT)
    get_find_data : Proc(IFileSystemBindData*, WIN32_FIND_DATAW*, HRESULT)
  end

  struct IFileSystemBindData
    lpVtbl : IFileSystemBindDataVTbl*
  end

  struct IFileSystemBindData2VTbl
    query_interface : Proc(IFileSystemBindData2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemBindData2*, UInt32)
    release : Proc(IFileSystemBindData2*, UInt32)
    set_find_data : Proc(IFileSystemBindData2*, WIN32_FIND_DATAW*, HRESULT)
    get_find_data : Proc(IFileSystemBindData2*, WIN32_FIND_DATAW*, HRESULT)
    set_file_id : Proc(IFileSystemBindData2*, LARGE_INTEGER, HRESULT)
    get_file_id : Proc(IFileSystemBindData2*, LARGE_INTEGER*, HRESULT)
    set_junction_clsid : Proc(IFileSystemBindData2*, Guid*, HRESULT)
    get_junction_clsid : Proc(IFileSystemBindData2*, Guid*, HRESULT)
  end

  struct IFileSystemBindData2
    lpVtbl : IFileSystemBindData2VTbl*
  end

  struct ICustomDestinationListVTbl
    query_interface : Proc(ICustomDestinationList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICustomDestinationList*, UInt32)
    release : Proc(ICustomDestinationList*, UInt32)
    set_app_id : Proc(ICustomDestinationList*, LibC::LPWSTR, HRESULT)
    begin_list : Proc(ICustomDestinationList*, UInt32*, Guid*, Void**, HRESULT)
    append_category : Proc(ICustomDestinationList*, LibC::LPWSTR, IObjectArray, HRESULT)
    append_known_category : Proc(ICustomDestinationList*, KNOWNDESTCATEGORY, HRESULT)
    add_user_tasks : Proc(ICustomDestinationList*, IObjectArray, HRESULT)
    commit_list : Proc(ICustomDestinationList*, HRESULT)
    get_removed_destinations : Proc(ICustomDestinationList*, Guid*, Void**, HRESULT)
    delete_list : Proc(ICustomDestinationList*, LibC::LPWSTR, HRESULT)
    abort_list : Proc(ICustomDestinationList*, HRESULT)
  end

  struct ICustomDestinationList
    lpVtbl : ICustomDestinationListVTbl*
  end

  struct IApplicationDestinationsVTbl
    query_interface : Proc(IApplicationDestinations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDestinations*, UInt32)
    release : Proc(IApplicationDestinations*, UInt32)
    set_app_id : Proc(IApplicationDestinations*, LibC::LPWSTR, HRESULT)
    remove_destination : Proc(IApplicationDestinations*, IUnknown, HRESULT)
    remove_all_destinations : Proc(IApplicationDestinations*, HRESULT)
  end

  struct IApplicationDestinations
    lpVtbl : IApplicationDestinationsVTbl*
  end

  struct IApplicationDocumentListsVTbl
    query_interface : Proc(IApplicationDocumentLists*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDocumentLists*, UInt32)
    release : Proc(IApplicationDocumentLists*, UInt32)
    set_app_id : Proc(IApplicationDocumentLists*, LibC::LPWSTR, HRESULT)
    get_list : Proc(IApplicationDocumentLists*, APPDOCLISTTYPE, UInt32, Guid*, Void**, HRESULT)
  end

  struct IApplicationDocumentLists
    lpVtbl : IApplicationDocumentListsVTbl*
  end

  struct IObjectWithAppUserModelIDVTbl
    query_interface : Proc(IObjectWithAppUserModelID*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithAppUserModelID*, UInt32)
    release : Proc(IObjectWithAppUserModelID*, UInt32)
    set_app_id : Proc(IObjectWithAppUserModelID*, LibC::LPWSTR, HRESULT)
    get_app_id : Proc(IObjectWithAppUserModelID*, LibC::LPWSTR*, HRESULT)
  end

  struct IObjectWithAppUserModelID
    lpVtbl : IObjectWithAppUserModelIDVTbl*
  end

  struct IObjectWithProgIDVTbl
    query_interface : Proc(IObjectWithProgID*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectWithProgID*, UInt32)
    release : Proc(IObjectWithProgID*, UInt32)
    set_prog_id : Proc(IObjectWithProgID*, LibC::LPWSTR, HRESULT)
    get_prog_id : Proc(IObjectWithProgID*, LibC::LPWSTR*, HRESULT)
  end

  struct IObjectWithProgID
    lpVtbl : IObjectWithProgIDVTbl*
  end

  struct IUpdateIDListVTbl
    query_interface : Proc(IUpdateIDList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUpdateIDList*, UInt32)
    release : Proc(IUpdateIDList*, UInt32)
    update : Proc(IUpdateIDList*, IBindCtx, ITEMIDLIST*, ITEMIDLIST**, HRESULT)
  end

  struct IUpdateIDList
    lpVtbl : IUpdateIDListVTbl*
  end

  struct IDesktopWallpaperVTbl
    query_interface : Proc(IDesktopWallpaper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDesktopWallpaper*, UInt32)
    release : Proc(IDesktopWallpaper*, UInt32)
    set_wallpaper : Proc(IDesktopWallpaper*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_wallpaper : Proc(IDesktopWallpaper*, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
    get_monitor_device_path_at : Proc(IDesktopWallpaper*, UInt32, LibC::LPWSTR*, HRESULT)
    get_monitor_device_path_count : Proc(IDesktopWallpaper*, UInt32*, HRESULT)
    get_monitor_rect : Proc(IDesktopWallpaper*, LibC::LPWSTR, RECT*, HRESULT)
    set_background_color : Proc(IDesktopWallpaper*, UInt32, HRESULT)
    get_background_color : Proc(IDesktopWallpaper*, UInt32*, HRESULT)
    set_position : Proc(IDesktopWallpaper*, DESKTOP_WALLPAPER_POSITION, HRESULT)
    get_position : Proc(IDesktopWallpaper*, DESKTOP_WALLPAPER_POSITION*, HRESULT)
    set_slideshow : Proc(IDesktopWallpaper*, IShellItemArray, HRESULT)
    get_slideshow : Proc(IDesktopWallpaper*, IShellItemArray*, HRESULT)
    set_slideshow_options : Proc(IDesktopWallpaper*, DESKTOP_SLIDESHOW_OPTIONS, UInt32, HRESULT)
    get_slideshow_options : Proc(IDesktopWallpaper*, DESKTOP_SLIDESHOW_OPTIONS*, UInt32*, HRESULT)
    advance_slideshow : Proc(IDesktopWallpaper*, LibC::LPWSTR, DESKTOP_SLIDESHOW_DIRECTION, HRESULT)
    get_status : Proc(IDesktopWallpaper*, DESKTOP_SLIDESHOW_STATE*, HRESULT)
    enable : Proc(IDesktopWallpaper*, LibC::BOOL, HRESULT)
  end

  struct IDesktopWallpaper
    lpVtbl : IDesktopWallpaperVTbl*
  end

  struct IHomeGroupVTbl
    query_interface : Proc(IHomeGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHomeGroup*, UInt32)
    release : Proc(IHomeGroup*, UInt32)
    is_member : Proc(IHomeGroup*, LibC::BOOL*, HRESULT)
    show_sharing_wizard : Proc(IHomeGroup*, LibC::HANDLE, HOMEGROUPSHARINGCHOICES*, HRESULT)
  end

  struct IHomeGroup
    lpVtbl : IHomeGroupVTbl*
  end

  struct IInitializeWithPropertyStoreVTbl
    query_interface : Proc(IInitializeWithPropertyStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeWithPropertyStore*, UInt32)
    release : Proc(IInitializeWithPropertyStore*, UInt32)
    initialize : Proc(IInitializeWithPropertyStore*, IPropertyStore, HRESULT)
  end

  struct IInitializeWithPropertyStore
    lpVtbl : IInitializeWithPropertyStoreVTbl*
  end

  struct IOpenSearchSourceVTbl
    query_interface : Proc(IOpenSearchSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenSearchSource*, UInt32)
    release : Proc(IOpenSearchSource*, UInt32)
    get_results : Proc(IOpenSearchSource*, LibC::HANDLE, LibC::LPWSTR, UInt32, UInt32, Guid*, Void**, HRESULT)
  end

  struct IOpenSearchSource
    lpVtbl : IOpenSearchSourceVTbl*
  end

  struct IShellLibraryVTbl
    query_interface : Proc(IShellLibrary*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLibrary*, UInt32)
    release : Proc(IShellLibrary*, UInt32)
    load_library_from_item : Proc(IShellLibrary*, IShellItem, UInt32, HRESULT)
    load_library_from_known_folder : Proc(IShellLibrary*, Guid*, UInt32, HRESULT)
    add_folder : Proc(IShellLibrary*, IShellItem, HRESULT)
    remove_folder : Proc(IShellLibrary*, IShellItem, HRESULT)
    get_folders : Proc(IShellLibrary*, LIBRARYFOLDERFILTER, Guid*, Void**, HRESULT)
    resolve_folder : Proc(IShellLibrary*, IShellItem, UInt32, Guid*, Void**, HRESULT)
    get_default_save_folder : Proc(IShellLibrary*, DEFAULTSAVEFOLDERTYPE, Guid*, Void**, HRESULT)
    set_default_save_folder : Proc(IShellLibrary*, DEFAULTSAVEFOLDERTYPE, IShellItem, HRESULT)
    get_options : Proc(IShellLibrary*, LIBRARYOPTIONFLAGS*, HRESULT)
    set_options : Proc(IShellLibrary*, LIBRARYOPTIONFLAGS, LIBRARYOPTIONFLAGS, HRESULT)
    get_folder_type : Proc(IShellLibrary*, Guid*, HRESULT)
    set_folder_type : Proc(IShellLibrary*, Guid*, HRESULT)
    get_icon : Proc(IShellLibrary*, LibC::LPWSTR*, HRESULT)
    set_icon : Proc(IShellLibrary*, LibC::LPWSTR, HRESULT)
    commit : Proc(IShellLibrary*, HRESULT)
    save : Proc(IShellLibrary*, IShellItem, LibC::LPWSTR, LIBRARYSAVEFLAGS, IShellItem*, HRESULT)
    save_in_known_folder : Proc(IShellLibrary*, Guid*, LibC::LPWSTR, LIBRARYSAVEFLAGS, IShellItem*, HRESULT)
  end

  struct IShellLibrary
    lpVtbl : IShellLibraryVTbl*
  end

  struct IDefaultFolderMenuInitializeVTbl
    query_interface : Proc(IDefaultFolderMenuInitialize*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDefaultFolderMenuInitialize*, UInt32)
    release : Proc(IDefaultFolderMenuInitialize*, UInt32)
    initialize : Proc(IDefaultFolderMenuInitialize*, LibC::HANDLE, IContextMenuCB, ITEMIDLIST*, IShellFolder, UInt32, ITEMIDLIST**, IUnknown, UInt32, HKEY*, HRESULT)
    set_menu_restrictions : Proc(IDefaultFolderMenuInitialize*, DEFAULT_FOLDER_MENU_RESTRICTIONS, HRESULT)
    get_menu_restrictions : Proc(IDefaultFolderMenuInitialize*, DEFAULT_FOLDER_MENU_RESTRICTIONS, DEFAULT_FOLDER_MENU_RESTRICTIONS*, HRESULT)
    set_handler_clsid : Proc(IDefaultFolderMenuInitialize*, Guid*, HRESULT)
  end

  struct IDefaultFolderMenuInitialize
    lpVtbl : IDefaultFolderMenuInitializeVTbl*
  end

  struct IApplicationActivationManagerVTbl
    query_interface : Proc(IApplicationActivationManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationActivationManager*, UInt32)
    release : Proc(IApplicationActivationManager*, UInt32)
    activate_application : Proc(IApplicationActivationManager*, LibC::LPWSTR, LibC::LPWSTR, ACTIVATEOPTIONS, UInt32*, HRESULT)
    activate_for_file : Proc(IApplicationActivationManager*, LibC::LPWSTR, IShellItemArray, LibC::LPWSTR, UInt32*, HRESULT)
    activate_for_protocol : Proc(IApplicationActivationManager*, LibC::LPWSTR, IShellItemArray, UInt32*, HRESULT)
  end

  struct IApplicationActivationManager
    lpVtbl : IApplicationActivationManagerVTbl*
  end

  struct IVirtualDesktopManagerVTbl
    query_interface : Proc(IVirtualDesktopManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVirtualDesktopManager*, UInt32)
    release : Proc(IVirtualDesktopManager*, UInt32)
    is_window_on_current_virtual_desktop : Proc(IVirtualDesktopManager*, LibC::HANDLE, LibC::BOOL*, HRESULT)
    get_window_desktop_id : Proc(IVirtualDesktopManager*, LibC::HANDLE, Guid*, HRESULT)
    move_window_to_desktop : Proc(IVirtualDesktopManager*, LibC::HANDLE, Guid*, HRESULT)
  end

  struct IVirtualDesktopManager
    lpVtbl : IVirtualDesktopManagerVTbl*
  end

  struct IAssocHandlerInvokerVTbl
    query_interface : Proc(IAssocHandlerInvoker*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAssocHandlerInvoker*, UInt32)
    release : Proc(IAssocHandlerInvoker*, UInt32)
    supports_selection : Proc(IAssocHandlerInvoker*, HRESULT)
    invoke : Proc(IAssocHandlerInvoker*, HRESULT)
  end

  struct IAssocHandlerInvoker
    lpVtbl : IAssocHandlerInvokerVTbl*
  end

  struct IAssocHandlerVTbl
    query_interface : Proc(IAssocHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAssocHandler*, UInt32)
    release : Proc(IAssocHandler*, UInt32)
    get_name : Proc(IAssocHandler*, LibC::LPWSTR*, HRESULT)
    get_ui_name : Proc(IAssocHandler*, LibC::LPWSTR*, HRESULT)
    get_icon_location : Proc(IAssocHandler*, LibC::LPWSTR*, Int32*, HRESULT)
    is_recommended : Proc(IAssocHandler*, HRESULT)
    make_default : Proc(IAssocHandler*, LibC::LPWSTR, HRESULT)
    invoke : Proc(IAssocHandler*, IDataObject, HRESULT)
    create_invoker : Proc(IAssocHandler*, IDataObject, IAssocHandlerInvoker*, HRESULT)
  end

  struct IAssocHandler
    lpVtbl : IAssocHandlerVTbl*
  end

  struct IEnumAssocHandlersVTbl
    query_interface : Proc(IEnumAssocHandlers*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumAssocHandlers*, UInt32)
    release : Proc(IEnumAssocHandlers*, UInt32)
    next : Proc(IEnumAssocHandlers*, UInt32, IAssocHandler*, UInt32*, HRESULT)
  end

  struct IEnumAssocHandlers
    lpVtbl : IEnumAssocHandlersVTbl*
  end

  struct IDataObjectProviderVTbl
    query_interface : Proc(IDataObjectProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataObjectProvider*, UInt32)
    release : Proc(IDataObjectProvider*, UInt32)
    get_data_object : Proc(IDataObjectProvider*, IDataObject*, HRESULT)
    set_data_object : Proc(IDataObjectProvider*, IDataObject, HRESULT)
  end

  struct IDataObjectProvider
    lpVtbl : IDataObjectProviderVTbl*
  end

  struct IDataTransferManagerInteropVTbl
    query_interface : Proc(IDataTransferManagerInterop*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataTransferManagerInterop*, UInt32)
    release : Proc(IDataTransferManagerInterop*, UInt32)
    get_for_window : Proc(IDataTransferManagerInterop*, LibC::HANDLE, Guid*, Void**, HRESULT)
    show_share_ui_for_window : Proc(IDataTransferManagerInterop*, LibC::HANDLE, HRESULT)
  end

  struct IDataTransferManagerInterop
    lpVtbl : IDataTransferManagerInteropVTbl*
  end

  struct IFrameworkInputPaneHandlerVTbl
    query_interface : Proc(IFrameworkInputPaneHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFrameworkInputPaneHandler*, UInt32)
    release : Proc(IFrameworkInputPaneHandler*, UInt32)
    showing : Proc(IFrameworkInputPaneHandler*, RECT*, LibC::BOOL, HRESULT)
    hiding : Proc(IFrameworkInputPaneHandler*, LibC::BOOL, HRESULT)
  end

  struct IFrameworkInputPaneHandler
    lpVtbl : IFrameworkInputPaneHandlerVTbl*
  end

  struct IFrameworkInputPaneVTbl
    query_interface : Proc(IFrameworkInputPane*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFrameworkInputPane*, UInt32)
    release : Proc(IFrameworkInputPane*, UInt32)
    advise : Proc(IFrameworkInputPane*, IUnknown, IFrameworkInputPaneHandler, UInt32*, HRESULT)
    advise_with_hwnd : Proc(IFrameworkInputPane*, LibC::HANDLE, IFrameworkInputPaneHandler, UInt32*, HRESULT)
    unadvise : Proc(IFrameworkInputPane*, UInt32, HRESULT)
    location : Proc(IFrameworkInputPane*, RECT*, HRESULT)
  end

  struct IFrameworkInputPane
    lpVtbl : IFrameworkInputPaneVTbl*
  end

  struct IAppVisibilityEventsVTbl
    query_interface : Proc(IAppVisibilityEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAppVisibilityEvents*, UInt32)
    release : Proc(IAppVisibilityEvents*, UInt32)
    app_visibility_on_monitor_changed : Proc(IAppVisibilityEvents*, HMONITOR, MONITOR_APP_VISIBILITY, MONITOR_APP_VISIBILITY, HRESULT)
    launcher_visibility_change : Proc(IAppVisibilityEvents*, LibC::BOOL, HRESULT)
  end

  struct IAppVisibilityEvents
    lpVtbl : IAppVisibilityEventsVTbl*
  end

  struct IAppVisibilityVTbl
    query_interface : Proc(IAppVisibility*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAppVisibility*, UInt32)
    release : Proc(IAppVisibility*, UInt32)
    get_app_visibility_on_monitor : Proc(IAppVisibility*, HMONITOR, MONITOR_APP_VISIBILITY*, HRESULT)
    is_launcher_visible : Proc(IAppVisibility*, LibC::BOOL*, HRESULT)
    advise : Proc(IAppVisibility*, IAppVisibilityEvents, UInt32*, HRESULT)
    unadvise : Proc(IAppVisibility*, UInt32, HRESULT)
  end

  struct IAppVisibility
    lpVtbl : IAppVisibilityVTbl*
  end

  struct IPackageExecutionStateChangeNotificationVTbl
    query_interface : Proc(IPackageExecutionStateChangeNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPackageExecutionStateChangeNotification*, UInt32)
    release : Proc(IPackageExecutionStateChangeNotification*, UInt32)
    on_state_changed : Proc(IPackageExecutionStateChangeNotification*, LibC::LPWSTR, PACKAGE_EXECUTION_STATE, HRESULT)
  end

  struct IPackageExecutionStateChangeNotification
    lpVtbl : IPackageExecutionStateChangeNotificationVTbl*
  end

  struct IPackageDebugSettingsVTbl
    query_interface : Proc(IPackageDebugSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPackageDebugSettings*, UInt32)
    release : Proc(IPackageDebugSettings*, UInt32)
    enable_debugging : Proc(IPackageDebugSettings*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    disable_debugging : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    suspend : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    resume : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    terminate_all_processes : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    set_target_session_id : Proc(IPackageDebugSettings*, UInt32, HRESULT)
    enumerate_background_tasks : Proc(IPackageDebugSettings*, LibC::LPWSTR, UInt32*, Guid**, LibC::LPWSTR**, HRESULT)
    activate_background_task : Proc(IPackageDebugSettings*, Guid*, HRESULT)
    start_servicing : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    stop_servicing : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    start_session_redirection : Proc(IPackageDebugSettings*, LibC::LPWSTR, UInt32, HRESULT)
    stop_session_redirection : Proc(IPackageDebugSettings*, LibC::LPWSTR, HRESULT)
    get_package_execution_state : Proc(IPackageDebugSettings*, LibC::LPWSTR, PACKAGE_EXECUTION_STATE*, HRESULT)
    register_for_package_state_changes : Proc(IPackageDebugSettings*, LibC::LPWSTR, IPackageExecutionStateChangeNotification, UInt32*, HRESULT)
    unregister_for_package_state_changes : Proc(IPackageDebugSettings*, UInt32, HRESULT)
  end

  struct IPackageDebugSettings
    lpVtbl : IPackageDebugSettingsVTbl*
  end

  struct IPackageDebugSettings2VTbl
    query_interface : Proc(IPackageDebugSettings2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPackageDebugSettings2*, UInt32)
    release : Proc(IPackageDebugSettings2*, UInt32)
    enable_debugging : Proc(IPackageDebugSettings2*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    disable_debugging : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    suspend : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    resume : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    terminate_all_processes : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    set_target_session_id : Proc(IPackageDebugSettings2*, UInt32, HRESULT)
    enumerate_background_tasks : Proc(IPackageDebugSettings2*, LibC::LPWSTR, UInt32*, Guid**, LibC::LPWSTR**, HRESULT)
    activate_background_task : Proc(IPackageDebugSettings2*, Guid*, HRESULT)
    start_servicing : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    stop_servicing : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    start_session_redirection : Proc(IPackageDebugSettings2*, LibC::LPWSTR, UInt32, HRESULT)
    stop_session_redirection : Proc(IPackageDebugSettings2*, LibC::LPWSTR, HRESULT)
    get_package_execution_state : Proc(IPackageDebugSettings2*, LibC::LPWSTR, PACKAGE_EXECUTION_STATE*, HRESULT)
    register_for_package_state_changes : Proc(IPackageDebugSettings2*, LibC::LPWSTR, IPackageExecutionStateChangeNotification, UInt32*, HRESULT)
    unregister_for_package_state_changes : Proc(IPackageDebugSettings2*, UInt32, HRESULT)
    enumerate_apps : Proc(IPackageDebugSettings2*, LibC::LPWSTR, UInt32*, LibC::LPWSTR**, LibC::LPWSTR**, HRESULT)
  end

  struct IPackageDebugSettings2
    lpVtbl : IPackageDebugSettings2VTbl*
  end

  struct ISuspensionDependencyManagerVTbl
    query_interface : Proc(ISuspensionDependencyManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISuspensionDependencyManager*, UInt32)
    release : Proc(ISuspensionDependencyManager*, UInt32)
    register_as_child : Proc(ISuspensionDependencyManager*, LibC::HANDLE, HRESULT)
    group_child_with_parent : Proc(ISuspensionDependencyManager*, LibC::HANDLE, HRESULT)
    ungroup_child_from_parent : Proc(ISuspensionDependencyManager*, LibC::HANDLE, HRESULT)
  end

  struct ISuspensionDependencyManager
    lpVtbl : ISuspensionDependencyManagerVTbl*
  end

  struct IExecuteCommandApplicationHostEnvironmentVTbl
    query_interface : Proc(IExecuteCommandApplicationHostEnvironment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExecuteCommandApplicationHostEnvironment*, UInt32)
    release : Proc(IExecuteCommandApplicationHostEnvironment*, UInt32)
    get_value : Proc(IExecuteCommandApplicationHostEnvironment*, AHE_TYPE*, HRESULT)
  end

  struct IExecuteCommandApplicationHostEnvironment
    lpVtbl : IExecuteCommandApplicationHostEnvironmentVTbl*
  end

  struct IExecuteCommandHostVTbl
    query_interface : Proc(IExecuteCommandHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExecuteCommandHost*, UInt32)
    release : Proc(IExecuteCommandHost*, UInt32)
    get_ui_mode : Proc(IExecuteCommandHost*, EC_HOST_UI_MODE*, HRESULT)
  end

  struct IExecuteCommandHost
    lpVtbl : IExecuteCommandHostVTbl*
  end

  struct IApplicationDesignModeSettingsVTbl
    query_interface : Proc(IApplicationDesignModeSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDesignModeSettings*, UInt32)
    release : Proc(IApplicationDesignModeSettings*, UInt32)
    set_native_display_size : Proc(IApplicationDesignModeSettings*, SIZE, HRESULT)
    set_scale_factor : Proc(IApplicationDesignModeSettings*, DEVICE_SCALE_FACTOR, HRESULT)
    set_application_view_state : Proc(IApplicationDesignModeSettings*, APPLICATION_VIEW_STATE, HRESULT)
    compute_application_size : Proc(IApplicationDesignModeSettings*, SIZE*, HRESULT)
    is_application_view_state_supported : Proc(IApplicationDesignModeSettings*, APPLICATION_VIEW_STATE, SIZE, DEVICE_SCALE_FACTOR, LibC::BOOL*, HRESULT)
    trigger_edge_gesture : Proc(IApplicationDesignModeSettings*, EDGE_GESTURE_KIND, HRESULT)
  end

  struct IApplicationDesignModeSettings
    lpVtbl : IApplicationDesignModeSettingsVTbl*
  end

  struct IApplicationDesignModeSettings2VTbl
    query_interface : Proc(IApplicationDesignModeSettings2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDesignModeSettings2*, UInt32)
    release : Proc(IApplicationDesignModeSettings2*, UInt32)
    set_native_display_size : Proc(IApplicationDesignModeSettings2*, SIZE, HRESULT)
    set_scale_factor : Proc(IApplicationDesignModeSettings2*, DEVICE_SCALE_FACTOR, HRESULT)
    set_application_view_state : Proc(IApplicationDesignModeSettings2*, APPLICATION_VIEW_STATE, HRESULT)
    compute_application_size : Proc(IApplicationDesignModeSettings2*, SIZE*, HRESULT)
    is_application_view_state_supported : Proc(IApplicationDesignModeSettings2*, APPLICATION_VIEW_STATE, SIZE, DEVICE_SCALE_FACTOR, LibC::BOOL*, HRESULT)
    trigger_edge_gesture : Proc(IApplicationDesignModeSettings2*, EDGE_GESTURE_KIND, HRESULT)
    set_native_display_orientation : Proc(IApplicationDesignModeSettings2*, NATIVE_DISPLAY_ORIENTATION, HRESULT)
    set_application_view_orientation : Proc(IApplicationDesignModeSettings2*, APPLICATION_VIEW_ORIENTATION, HRESULT)
    set_adjacent_display_edges : Proc(IApplicationDesignModeSettings2*, ADJACENT_DISPLAY_EDGES, HRESULT)
    set_is_on_lock_screen : Proc(IApplicationDesignModeSettings2*, LibC::BOOL, HRESULT)
    set_application_view_min_width : Proc(IApplicationDesignModeSettings2*, APPLICATION_VIEW_MIN_WIDTH, HRESULT)
    get_application_size_bounds : Proc(IApplicationDesignModeSettings2*, SIZE*, SIZE*, HRESULT)
    get_application_view_orientation : Proc(IApplicationDesignModeSettings2*, SIZE, APPLICATION_VIEW_ORIENTATION*, HRESULT)
  end

  struct IApplicationDesignModeSettings2
    lpVtbl : IApplicationDesignModeSettings2VTbl*
  end

  struct ILaunchTargetMonitorVTbl
    query_interface : Proc(ILaunchTargetMonitor*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchTargetMonitor*, UInt32)
    release : Proc(ILaunchTargetMonitor*, UInt32)
    get_monitor : Proc(ILaunchTargetMonitor*, HMONITOR*, HRESULT)
  end

  struct ILaunchTargetMonitor
    lpVtbl : ILaunchTargetMonitorVTbl*
  end

  struct ILaunchSourceViewSizePreferenceVTbl
    query_interface : Proc(ILaunchSourceViewSizePreference*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchSourceViewSizePreference*, UInt32)
    release : Proc(ILaunchSourceViewSizePreference*, UInt32)
    get_source_view_to_position : Proc(ILaunchSourceViewSizePreference*, HANDLE*, HRESULT)
    get_source_view_size_preference : Proc(ILaunchSourceViewSizePreference*, APPLICATION_VIEW_SIZE_PREFERENCE*, HRESULT)
  end

  struct ILaunchSourceViewSizePreference
    lpVtbl : ILaunchSourceViewSizePreferenceVTbl*
  end

  struct ILaunchTargetViewSizePreferenceVTbl
    query_interface : Proc(ILaunchTargetViewSizePreference*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchTargetViewSizePreference*, UInt32)
    release : Proc(ILaunchTargetViewSizePreference*, UInt32)
    get_target_view_size_preference : Proc(ILaunchTargetViewSizePreference*, APPLICATION_VIEW_SIZE_PREFERENCE*, HRESULT)
  end

  struct ILaunchTargetViewSizePreference
    lpVtbl : ILaunchTargetViewSizePreferenceVTbl*
  end

  struct ILaunchSourceAppUserModelIdVTbl
    query_interface : Proc(ILaunchSourceAppUserModelId*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILaunchSourceAppUserModelId*, UInt32)
    release : Proc(ILaunchSourceAppUserModelId*, UInt32)
    get_app_user_model_id : Proc(ILaunchSourceAppUserModelId*, LibC::LPWSTR*, HRESULT)
  end

  struct ILaunchSourceAppUserModelId
    lpVtbl : ILaunchSourceAppUserModelIdVTbl*
  end

  struct IInitializeWithWindowVTbl
    query_interface : Proc(IInitializeWithWindow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeWithWindow*, UInt32)
    release : Proc(IInitializeWithWindow*, UInt32)
    initialize : Proc(IInitializeWithWindow*, LibC::HANDLE, HRESULT)
  end

  struct IInitializeWithWindow
    lpVtbl : IInitializeWithWindowVTbl*
  end

  struct IHandlerInfoVTbl
    query_interface : Proc(IHandlerInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHandlerInfo*, UInt32)
    release : Proc(IHandlerInfo*, UInt32)
    get_application_display_name : Proc(IHandlerInfo*, LibC::LPWSTR*, HRESULT)
    get_application_publisher : Proc(IHandlerInfo*, LibC::LPWSTR*, HRESULT)
    get_application_icon_reference : Proc(IHandlerInfo*, LibC::LPWSTR*, HRESULT)
  end

  struct IHandlerInfo
    lpVtbl : IHandlerInfoVTbl*
  end

  struct IHandlerInfo2VTbl
    query_interface : Proc(IHandlerInfo2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHandlerInfo2*, UInt32)
    release : Proc(IHandlerInfo2*, UInt32)
    get_application_display_name : Proc(IHandlerInfo2*, LibC::LPWSTR*, HRESULT)
    get_application_publisher : Proc(IHandlerInfo2*, LibC::LPWSTR*, HRESULT)
    get_application_icon_reference : Proc(IHandlerInfo2*, LibC::LPWSTR*, HRESULT)
    get_application_id : Proc(IHandlerInfo2*, LibC::LPWSTR*, HRESULT)
  end

  struct IHandlerInfo2
    lpVtbl : IHandlerInfo2VTbl*
  end

  struct IHandlerActivationHostVTbl
    query_interface : Proc(IHandlerActivationHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHandlerActivationHost*, UInt32)
    release : Proc(IHandlerActivationHost*, UInt32)
    before_co_create_instance : Proc(IHandlerActivationHost*, Guid*, IShellItemArray, IHandlerInfo, HRESULT)
    before_create_process : Proc(IHandlerActivationHost*, LibC::LPWSTR, LibC::LPWSTR, IHandlerInfo, HRESULT)
  end

  struct IHandlerActivationHost
    lpVtbl : IHandlerActivationHostVTbl*
  end

  struct IAppActivationUIInfoVTbl
    query_interface : Proc(IAppActivationUIInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAppActivationUIInfo*, UInt32)
    release : Proc(IAppActivationUIInfo*, UInt32)
    get_monitor : Proc(IAppActivationUIInfo*, HMONITOR*, HRESULT)
    get_invoke_point : Proc(IAppActivationUIInfo*, POINT*, HRESULT)
    get_show_command : Proc(IAppActivationUIInfo*, Int32*, HRESULT)
    get_show_ui : Proc(IAppActivationUIInfo*, LibC::BOOL*, HRESULT)
    get_key_state : Proc(IAppActivationUIInfo*, UInt32*, HRESULT)
  end

  struct IAppActivationUIInfo
    lpVtbl : IAppActivationUIInfoVTbl*
  end

  struct IContactManagerInteropVTbl
    query_interface : Proc(IContactManagerInterop*, Guid*, Void**, HRESULT)
    add_ref : Proc(IContactManagerInterop*, UInt32)
    release : Proc(IContactManagerInterop*, UInt32)
    show_contact_card_for_window : Proc(IContactManagerInterop*, LibC::HANDLE, IUnknown, RECT*, FLYOUT_PLACEMENT, HRESULT)
  end

  struct IContactManagerInterop
    lpVtbl : IContactManagerInteropVTbl*
  end

  struct IShellIconOverlayIdentifierVTbl
    query_interface : Proc(IShellIconOverlayIdentifier*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellIconOverlayIdentifier*, UInt32)
    release : Proc(IShellIconOverlayIdentifier*, UInt32)
    is_member_of : Proc(IShellIconOverlayIdentifier*, LibC::LPWSTR, UInt32, HRESULT)
    get_overlay_info : Proc(IShellIconOverlayIdentifier*, Char*, Int32, Int32*, UInt32*, HRESULT)
    get_priority : Proc(IShellIconOverlayIdentifier*, Int32*, HRESULT)
  end

  struct IShellIconOverlayIdentifier
    lpVtbl : IShellIconOverlayIdentifierVTbl*
  end

  struct IBannerNotificationHandlerVTbl
    query_interface : Proc(IBannerNotificationHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBannerNotificationHandler*, UInt32)
    release : Proc(IBannerNotificationHandler*, UInt32)
    on_banner_event : Proc(IBannerNotificationHandler*, BANNER_NOTIFICATION*, HRESULT)
  end

  struct IBannerNotificationHandler
    lpVtbl : IBannerNotificationHandlerVTbl*
  end

  struct ISortColumnArrayVTbl
    query_interface : Proc(ISortColumnArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISortColumnArray*, UInt32)
    release : Proc(ISortColumnArray*, UInt32)
    get_count : Proc(ISortColumnArray*, UInt32*, HRESULT)
    get_at : Proc(ISortColumnArray*, UInt32, SORTCOLUMN*, HRESULT)
    get_sort_type : Proc(ISortColumnArray*, SORT_ORDER_TYPE*, HRESULT)
  end

  struct ISortColumnArray
    lpVtbl : ISortColumnArrayVTbl*
  end

  struct IPropertyKeyStoreVTbl
    query_interface : Proc(IPropertyKeyStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPropertyKeyStore*, UInt32)
    release : Proc(IPropertyKeyStore*, UInt32)
    get_key_count : Proc(IPropertyKeyStore*, Int32*, HRESULT)
    get_key_at : Proc(IPropertyKeyStore*, Int32, PROPERTYKEY*, HRESULT)
    append_key : Proc(IPropertyKeyStore*, PROPERTYKEY*, HRESULT)
    delete_key : Proc(IPropertyKeyStore*, Int32, HRESULT)
    is_key_in_store : Proc(IPropertyKeyStore*, PROPERTYKEY*, HRESULT)
    remove_key : Proc(IPropertyKeyStore*, PROPERTYKEY*, HRESULT)
  end

  struct IPropertyKeyStore
    lpVtbl : IPropertyKeyStoreVTbl*
  end

  struct IQueryCodePageVTbl
    query_interface : Proc(IQueryCodePage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryCodePage*, UInt32)
    release : Proc(IQueryCodePage*, UInt32)
    get_code_page : Proc(IQueryCodePage*, UInt32*, HRESULT)
    set_code_page : Proc(IQueryCodePage*, UInt32, HRESULT)
  end

  struct IQueryCodePage
    lpVtbl : IQueryCodePageVTbl*
  end

  struct IFolderViewOptionsVTbl
    query_interface : Proc(IFolderViewOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderViewOptions*, UInt32)
    release : Proc(IFolderViewOptions*, UInt32)
    set_folder_view_options : Proc(IFolderViewOptions*, FOLDERVIEWOPTIONS, FOLDERVIEWOPTIONS, HRESULT)
    get_folder_view_options : Proc(IFolderViewOptions*, FOLDERVIEWOPTIONS*, HRESULT)
  end

  struct IFolderViewOptions
    lpVtbl : IFolderViewOptionsVTbl*
  end

  struct IShellView3VTbl
    query_interface : Proc(IShellView3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellView3*, UInt32)
    release : Proc(IShellView3*, UInt32)
    get_window : Proc(IShellView3*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IShellView3*, LibC::BOOL, HRESULT)
    translate_accelerator : Proc(IShellView3*, MSG*, HRESULT)
    enable_modeless : Proc(IShellView3*, LibC::BOOL, HRESULT)
    ui_activate : Proc(IShellView3*, UInt32, HRESULT)
    refresh : Proc(IShellView3*, HRESULT)
    create_view_window : Proc(IShellView3*, IShellView, FOLDERSETTINGS*, IShellBrowser, RECT*, HANDLE*, HRESULT)
    destroy_view_window : Proc(IShellView3*, HRESULT)
    get_current_info : Proc(IShellView3*, FOLDERSETTINGS*, HRESULT)
    add_property_sheet_pages : Proc(IShellView3*, UInt32, LPFNSVADDPROPSHEETPAGE, LPARAM, HRESULT)
    save_view_state : Proc(IShellView3*, HRESULT)
    select_item : Proc(IShellView3*, ITEMIDLIST*, UInt32, HRESULT)
    get_item_object : Proc(IShellView3*, UInt32, Guid*, Void**, HRESULT)
    get_view : Proc(IShellView3*, Guid*, UInt32, HRESULT)
    create_view_window2 : Proc(IShellView3*, SV2CVW2_PARAMS*, HRESULT)
    handle_rename : Proc(IShellView3*, ITEMIDLIST*, HRESULT)
    select_and_position_item : Proc(IShellView3*, ITEMIDLIST*, UInt32, POINT*, HRESULT)
    create_view_window3 : Proc(IShellView3*, IShellBrowser, IShellView, UInt32, FOLDERFLAGS, FOLDERFLAGS, FOLDERVIEWMODE, Guid*, RECT*, HANDLE*, HRESULT)
  end

  struct IShellView3
    lpVtbl : IShellView3VTbl*
  end

  struct ISearchBoxInfoVTbl
    query_interface : Proc(ISearchBoxInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISearchBoxInfo*, UInt32)
    release : Proc(ISearchBoxInfo*, UInt32)
    get_condition : Proc(ISearchBoxInfo*, Guid*, Void**, HRESULT)
    get_text : Proc(ISearchBoxInfo*, LibC::LPWSTR*, HRESULT)
  end

  struct ISearchBoxInfo
    lpVtbl : ISearchBoxInfoVTbl*
  end

  struct IVisualPropertiesVTbl
    query_interface : Proc(IVisualProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVisualProperties*, UInt32)
    release : Proc(IVisualProperties*, UInt32)
    set_watermark : Proc(IVisualProperties*, HBITMAP, VPWATERMARKFLAGS, HRESULT)
    set_color : Proc(IVisualProperties*, VPCOLORFLAGS, UInt32, HRESULT)
    get_color : Proc(IVisualProperties*, VPCOLORFLAGS, UInt32*, HRESULT)
    set_item_height : Proc(IVisualProperties*, Int32, HRESULT)
    get_item_height : Proc(IVisualProperties*, Int32*, HRESULT)
    set_font : Proc(IVisualProperties*, LOGFONTW*, LibC::BOOL, HRESULT)
    get_font : Proc(IVisualProperties*, LOGFONTW*, HRESULT)
    set_theme : Proc(IVisualProperties*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct IVisualProperties
    lpVtbl : IVisualPropertiesVTbl*
  end

  struct ICommDlgBrowser3VTbl
    query_interface : Proc(ICommDlgBrowser3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICommDlgBrowser3*, UInt32)
    release : Proc(ICommDlgBrowser3*, UInt32)
    on_default_command : Proc(ICommDlgBrowser3*, IShellView, HRESULT)
    on_state_change : Proc(ICommDlgBrowser3*, IShellView, UInt32, HRESULT)
    include_object : Proc(ICommDlgBrowser3*, IShellView, ITEMIDLIST*, HRESULT)
    notify : Proc(ICommDlgBrowser3*, IShellView, UInt32, HRESULT)
    get_default_menu_text : Proc(ICommDlgBrowser3*, IShellView, Char*, Int32, HRESULT)
    get_view_flags : Proc(ICommDlgBrowser3*, UInt32*, HRESULT)
    on_column_clicked : Proc(ICommDlgBrowser3*, IShellView, Int32, HRESULT)
    get_current_filter : Proc(ICommDlgBrowser3*, Char*, Int32, HRESULT)
    on_pre_view_created : Proc(ICommDlgBrowser3*, IShellView, HRESULT)
  end

  struct ICommDlgBrowser3
    lpVtbl : ICommDlgBrowser3VTbl*
  end

  struct IUserAccountChangeCallbackVTbl
    query_interface : Proc(IUserAccountChangeCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUserAccountChangeCallback*, UInt32)
    release : Proc(IUserAccountChangeCallback*, UInt32)
    on_picture_change : Proc(IUserAccountChangeCallback*, LibC::LPWSTR, HRESULT)
  end

  struct IUserAccountChangeCallback
    lpVtbl : IUserAccountChangeCallbackVTbl*
  end

  struct IStreamAsyncVTbl
    query_interface : Proc(IStreamAsync*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamAsync*, UInt32)
    release : Proc(IStreamAsync*, UInt32)
    read : Proc(IStreamAsync*, Void*, UInt32, UInt32*, HRESULT)
    write : Proc(IStreamAsync*, Void*, UInt32, UInt32*, HRESULT)
    seek : Proc(IStreamAsync*, LARGE_INTEGER, STREAM_SEEK, ULARGE_INTEGER*, HRESULT)
    set_size : Proc(IStreamAsync*, ULARGE_INTEGER, HRESULT)
    copy_to : Proc(IStreamAsync*, IStream, ULARGE_INTEGER, ULARGE_INTEGER*, ULARGE_INTEGER*, HRESULT)
    commit : Proc(IStreamAsync*, UInt32, HRESULT)
    revert : Proc(IStreamAsync*, HRESULT)
    lock_region : Proc(IStreamAsync*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    unlock_region : Proc(IStreamAsync*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    stat : Proc(IStreamAsync*, STATSTG*, UInt32, HRESULT)
    clone : Proc(IStreamAsync*, IStream*, HRESULT)
    read_async : Proc(IStreamAsync*, Void*, UInt32, UInt32*, OVERLAPPED*, HRESULT)
    write_async : Proc(IStreamAsync*, Void*, UInt32, UInt32*, OVERLAPPED*, HRESULT)
    overlapped_result : Proc(IStreamAsync*, OVERLAPPED*, UInt32*, LibC::BOOL, HRESULT)
    cancel_io : Proc(IStreamAsync*, HRESULT)
  end

  struct IStreamAsync
    lpVtbl : IStreamAsyncVTbl*
  end

  struct IStreamUnbufferedInfoVTbl
    query_interface : Proc(IStreamUnbufferedInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamUnbufferedInfo*, UInt32)
    release : Proc(IStreamUnbufferedInfo*, UInt32)
    get_sector_size : Proc(IStreamUnbufferedInfo*, UInt32*, HRESULT)
  end

  struct IStreamUnbufferedInfo
    lpVtbl : IStreamUnbufferedInfoVTbl*
  end

  struct IDragSourceHelper2VTbl
    query_interface : Proc(IDragSourceHelper2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDragSourceHelper2*, UInt32)
    release : Proc(IDragSourceHelper2*, UInt32)
    initialize_from_bitmap : Proc(IDragSourceHelper2*, SHDRAGIMAGE*, IDataObject, HRESULT)
    initialize_from_window : Proc(IDragSourceHelper2*, LibC::HANDLE, POINT*, IDataObject, HRESULT)
    set_flags : Proc(IDragSourceHelper2*, UInt32, HRESULT)
  end

  struct IDragSourceHelper2
    lpVtbl : IDragSourceHelper2VTbl*
  end

  struct IHWEventHandlerVTbl
    query_interface : Proc(IHWEventHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHWEventHandler*, UInt32)
    release : Proc(IHWEventHandler*, UInt32)
    initialize : Proc(IHWEventHandler*, LibC::LPWSTR, HRESULT)
    handle_event : Proc(IHWEventHandler*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    handle_event_with_content : Proc(IHWEventHandler*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IDataObject, HRESULT)
  end

  struct IHWEventHandler
    lpVtbl : IHWEventHandlerVTbl*
  end

  struct IHWEventHandler2VTbl
    query_interface : Proc(IHWEventHandler2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHWEventHandler2*, UInt32)
    release : Proc(IHWEventHandler2*, UInt32)
    initialize : Proc(IHWEventHandler2*, LibC::LPWSTR, HRESULT)
    handle_event : Proc(IHWEventHandler2*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    handle_event_with_content : Proc(IHWEventHandler2*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IDataObject, HRESULT)
    handle_event_with_hwnd : Proc(IHWEventHandler2*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::HANDLE, HRESULT)
  end

  struct IHWEventHandler2
    lpVtbl : IHWEventHandler2VTbl*
  end

  struct IQueryCancelAutoPlayVTbl
    query_interface : Proc(IQueryCancelAutoPlay*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryCancelAutoPlay*, UInt32)
    release : Proc(IQueryCancelAutoPlay*, UInt32)
    allow_auto_play : Proc(IQueryCancelAutoPlay*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, HRESULT)
  end

  struct IQueryCancelAutoPlay
    lpVtbl : IQueryCancelAutoPlayVTbl*
  end

  struct IDynamicHWHandlerVTbl
    query_interface : Proc(IDynamicHWHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDynamicHWHandler*, UInt32)
    release : Proc(IDynamicHWHandler*, UInt32)
    get_dynamic_info : Proc(IDynamicHWHandler*, LibC::LPWSTR, UInt32, LibC::LPWSTR*, HRESULT)
  end

  struct IDynamicHWHandler
    lpVtbl : IDynamicHWHandlerVTbl*
  end

  struct IUserNotificationCallbackVTbl
    query_interface : Proc(IUserNotificationCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUserNotificationCallback*, UInt32)
    release : Proc(IUserNotificationCallback*, UInt32)
    on_balloon_user_click : Proc(IUserNotificationCallback*, POINT*, HRESULT)
    on_left_click : Proc(IUserNotificationCallback*, POINT*, HRESULT)
    on_context_menu : Proc(IUserNotificationCallback*, POINT*, HRESULT)
  end

  struct IUserNotificationCallback
    lpVtbl : IUserNotificationCallbackVTbl*
  end

  struct IUserNotification2VTbl
    query_interface : Proc(IUserNotification2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUserNotification2*, UInt32)
    release : Proc(IUserNotification2*, UInt32)
    set_balloon_info : Proc(IUserNotification2*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    set_balloon_retry : Proc(IUserNotification2*, UInt32, UInt32, UInt32, HRESULT)
    set_icon_info : Proc(IUserNotification2*, LibC::HANDLE, LibC::LPWSTR, HRESULT)
    show : Proc(IUserNotification2*, IQueryContinue, UInt32, IUserNotificationCallback, HRESULT)
    play_sound : Proc(IUserNotification2*, LibC::LPWSTR, HRESULT)
  end

  struct IUserNotification2
    lpVtbl : IUserNotification2VTbl*
  end

  struct IDeskBand2VTbl
    query_interface : Proc(IDeskBand2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeskBand2*, UInt32)
    release : Proc(IDeskBand2*, UInt32)
    get_window : Proc(IDeskBand2*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDeskBand2*, LibC::BOOL, HRESULT)
    show_dw : Proc(IDeskBand2*, LibC::BOOL, HRESULT)
    close_dw : Proc(IDeskBand2*, UInt32, HRESULT)
    resize_border_dw : Proc(IDeskBand2*, RECT*, IUnknown, LibC::BOOL, HRESULT)
    get_band_info : Proc(IDeskBand2*, UInt32, UInt32, DESKBANDINFO*, HRESULT)
    can_render_composited : Proc(IDeskBand2*, LibC::BOOL*, HRESULT)
    set_composition_state : Proc(IDeskBand2*, LibC::BOOL, HRESULT)
    get_composition_state : Proc(IDeskBand2*, LibC::BOOL*, HRESULT)
  end

  struct IDeskBand2
    lpVtbl : IDeskBand2VTbl*
  end

  struct IStartMenuPinnedListVTbl
    query_interface : Proc(IStartMenuPinnedList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStartMenuPinnedList*, UInt32)
    release : Proc(IStartMenuPinnedList*, UInt32)
    remove_from_list : Proc(IStartMenuPinnedList*, IShellItem, HRESULT)
  end

  struct IStartMenuPinnedList
    lpVtbl : IStartMenuPinnedListVTbl*
  end

  struct ICDBurnVTbl
    query_interface : Proc(ICDBurn*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICDBurn*, UInt32)
    release : Proc(ICDBurn*, UInt32)
    get_recorder_drive_letter : Proc(ICDBurn*, Char*, UInt32, HRESULT)
    burn : Proc(ICDBurn*, LibC::HANDLE, HRESULT)
    has_recordable_drive : Proc(ICDBurn*, LibC::BOOL*, HRESULT)
  end

  struct ICDBurn
    lpVtbl : ICDBurnVTbl*
  end

  struct IWizardSiteVTbl
    query_interface : Proc(IWizardSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWizardSite*, UInt32)
    release : Proc(IWizardSite*, UInt32)
    get_previous_page : Proc(IWizardSite*, HPROPSHEETPAGE*, HRESULT)
    get_next_page : Proc(IWizardSite*, HPROPSHEETPAGE*, HRESULT)
    get_cancelled_page : Proc(IWizardSite*, HPROPSHEETPAGE*, HRESULT)
  end

  struct IWizardSite
    lpVtbl : IWizardSiteVTbl*
  end

  struct IWizardExtensionVTbl
    query_interface : Proc(IWizardExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWizardExtension*, UInt32)
    release : Proc(IWizardExtension*, UInt32)
    add_pages : Proc(IWizardExtension*, HPROPSHEETPAGE*, UInt32, UInt32*, HRESULT)
    get_first_page : Proc(IWizardExtension*, HPROPSHEETPAGE*, HRESULT)
    get_last_page : Proc(IWizardExtension*, HPROPSHEETPAGE*, HRESULT)
  end

  struct IWizardExtension
    lpVtbl : IWizardExtensionVTbl*
  end

  struct IWebWizardExtensionVTbl
    query_interface : Proc(IWebWizardExtension*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebWizardExtension*, UInt32)
    release : Proc(IWebWizardExtension*, UInt32)
    add_pages : Proc(IWebWizardExtension*, HPROPSHEETPAGE*, UInt32, UInt32*, HRESULT)
    get_first_page : Proc(IWebWizardExtension*, HPROPSHEETPAGE*, HRESULT)
    get_last_page : Proc(IWebWizardExtension*, HPROPSHEETPAGE*, HRESULT)
    set_initial_url : Proc(IWebWizardExtension*, LibC::LPWSTR, HRESULT)
    set_error_url : Proc(IWebWizardExtension*, LibC::LPWSTR, HRESULT)
  end

  struct IWebWizardExtension
    lpVtbl : IWebWizardExtensionVTbl*
  end

  struct IPublishingWizardVTbl
    query_interface : Proc(IPublishingWizard*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPublishingWizard*, UInt32)
    release : Proc(IPublishingWizard*, UInt32)
    add_pages : Proc(IPublishingWizard*, HPROPSHEETPAGE*, UInt32, UInt32*, HRESULT)
    get_first_page : Proc(IPublishingWizard*, HPROPSHEETPAGE*, HRESULT)
    get_last_page : Proc(IPublishingWizard*, HPROPSHEETPAGE*, HRESULT)
    initialize : Proc(IPublishingWizard*, IDataObject, UInt32, LibC::LPWSTR, HRESULT)
    get_transfer_manifest : Proc(IPublishingWizard*, HRESULT*, IXMLDOMDocument*, HRESULT)
  end

  struct IPublishingWizard
    lpVtbl : IPublishingWizardVTbl*
  end

  struct IFolderViewHostVTbl
    query_interface : Proc(IFolderViewHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderViewHost*, UInt32)
    release : Proc(IFolderViewHost*, UInt32)
    initialize : Proc(IFolderViewHost*, LibC::HANDLE, IDataObject, RECT*, HRESULT)
  end

  struct IFolderViewHost
    lpVtbl : IFolderViewHostVTbl*
  end

  struct IAccessibleObjectVTbl
    query_interface : Proc(IAccessibleObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAccessibleObject*, UInt32)
    release : Proc(IAccessibleObject*, UInt32)
    set_accessible_name : Proc(IAccessibleObject*, LibC::LPWSTR, HRESULT)
  end

  struct IAccessibleObject
    lpVtbl : IAccessibleObjectVTbl*
  end

  struct IResultsFolderVTbl
    query_interface : Proc(IResultsFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IResultsFolder*, UInt32)
    release : Proc(IResultsFolder*, UInt32)
    add_item : Proc(IResultsFolder*, IShellItem, HRESULT)
    add_id_list : Proc(IResultsFolder*, ITEMIDLIST*, ITEMIDLIST**, HRESULT)
    remove_item : Proc(IResultsFolder*, IShellItem, HRESULT)
    remove_id_list : Proc(IResultsFolder*, ITEMIDLIST*, HRESULT)
    remove_all : Proc(IResultsFolder*, HRESULT)
  end

  struct IResultsFolder
    lpVtbl : IResultsFolderVTbl*
  end

  struct IAutoCompleteDropDownVTbl
    query_interface : Proc(IAutoCompleteDropDown*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAutoCompleteDropDown*, UInt32)
    release : Proc(IAutoCompleteDropDown*, UInt32)
    get_drop_down_status : Proc(IAutoCompleteDropDown*, UInt32*, LibC::LPWSTR*, HRESULT)
    reset_enumerator : Proc(IAutoCompleteDropDown*, HRESULT)
  end

  struct IAutoCompleteDropDown
    lpVtbl : IAutoCompleteDropDownVTbl*
  end

  struct ICDBurnExtVTbl
    query_interface : Proc(ICDBurnExt*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICDBurnExt*, UInt32)
    release : Proc(ICDBurnExt*, UInt32)
    get_supported_action_types : Proc(ICDBurnExt*, UInt32*, HRESULT)
  end

  struct ICDBurnExt
    lpVtbl : ICDBurnExtVTbl*
  end

  struct IEnumReadyCallbackVTbl
    query_interface : Proc(IEnumReadyCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumReadyCallback*, UInt32)
    release : Proc(IEnumReadyCallback*, UInt32)
    enum_ready : Proc(IEnumReadyCallback*, HRESULT)
  end

  struct IEnumReadyCallback
    lpVtbl : IEnumReadyCallbackVTbl*
  end

  struct IEnumerableViewVTbl
    query_interface : Proc(IEnumerableView*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumerableView*, UInt32)
    release : Proc(IEnumerableView*, UInt32)
    set_enum_ready_callback : Proc(IEnumerableView*, IEnumReadyCallback, HRESULT)
    create_enum_id_list_from_contents : Proc(IEnumerableView*, ITEMIDLIST*, UInt32, IEnumIDList*, HRESULT)
  end

  struct IEnumerableView
    lpVtbl : IEnumerableViewVTbl*
  end

  struct IInsertItemVTbl
    query_interface : Proc(IInsertItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInsertItem*, UInt32)
    release : Proc(IInsertItem*, UInt32)
    insert_item : Proc(IInsertItem*, ITEMIDLIST*, HRESULT)
  end

  struct IInsertItem
    lpVtbl : IInsertItemVTbl*
  end

  struct IFolderBandPrivVTbl
    query_interface : Proc(IFolderBandPriv*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderBandPriv*, UInt32)
    release : Proc(IFolderBandPriv*, UInt32)
    set_cascade : Proc(IFolderBandPriv*, LibC::BOOL, HRESULT)
    set_accelerators : Proc(IFolderBandPriv*, LibC::BOOL, HRESULT)
    set_no_icons : Proc(IFolderBandPriv*, LibC::BOOL, HRESULT)
    set_no_text : Proc(IFolderBandPriv*, LibC::BOOL, HRESULT)
  end

  struct IFolderBandPriv
    lpVtbl : IFolderBandPrivVTbl*
  end

  struct IImageRecompressVTbl
    query_interface : Proc(IImageRecompress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IImageRecompress*, UInt32)
    release : Proc(IImageRecompress*, UInt32)
    recompress_image : Proc(IImageRecompress*, IShellItem, Int32, Int32, Int32, IStorage, IStream*, HRESULT)
  end

  struct IImageRecompress
    lpVtbl : IImageRecompressVTbl*
  end

  struct IFileDialogControlEventsVTbl
    query_interface : Proc(IFileDialogControlEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileDialogControlEvents*, UInt32)
    release : Proc(IFileDialogControlEvents*, UInt32)
    on_item_selected : Proc(IFileDialogControlEvents*, IFileDialogCustomize, UInt32, UInt32, HRESULT)
    on_button_clicked : Proc(IFileDialogControlEvents*, IFileDialogCustomize, UInt32, HRESULT)
    on_check_button_toggled : Proc(IFileDialogControlEvents*, IFileDialogCustomize, UInt32, LibC::BOOL, HRESULT)
    on_control_activating : Proc(IFileDialogControlEvents*, IFileDialogCustomize, UInt32, HRESULT)
  end

  struct IFileDialogControlEvents
    lpVtbl : IFileDialogControlEventsVTbl*
  end

  struct IFileDialog2VTbl
    query_interface : Proc(IFileDialog2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileDialog2*, UInt32)
    release : Proc(IFileDialog2*, UInt32)
    show : Proc(IFileDialog2*, LibC::HANDLE, HRESULT)
    set_file_types : Proc(IFileDialog2*, UInt32, COMDLG_FILTERSPEC*, HRESULT)
    set_file_type_index : Proc(IFileDialog2*, UInt32, HRESULT)
    get_file_type_index : Proc(IFileDialog2*, UInt32*, HRESULT)
    advise : Proc(IFileDialog2*, IFileDialogEvents, UInt32*, HRESULT)
    unadvise : Proc(IFileDialog2*, UInt32, HRESULT)
    set_options : Proc(IFileDialog2*, UInt32, HRESULT)
    get_options : Proc(IFileDialog2*, UInt32*, HRESULT)
    set_default_folder : Proc(IFileDialog2*, IShellItem, HRESULT)
    set_folder : Proc(IFileDialog2*, IShellItem, HRESULT)
    get_folder : Proc(IFileDialog2*, IShellItem*, HRESULT)
    get_current_selection : Proc(IFileDialog2*, IShellItem*, HRESULT)
    set_file_name : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    get_file_name : Proc(IFileDialog2*, LibC::LPWSTR*, HRESULT)
    set_title : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    set_ok_button_label : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    set_file_name_label : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    get_result : Proc(IFileDialog2*, IShellItem*, HRESULT)
    add_place : Proc(IFileDialog2*, IShellItem, FDAP, HRESULT)
    set_default_extension : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    close : Proc(IFileDialog2*, HRESULT, HRESULT)
    set_client_guid : Proc(IFileDialog2*, Guid*, HRESULT)
    clear_client_data : Proc(IFileDialog2*, HRESULT)
    set_filter : Proc(IFileDialog2*, IShellItemFilter, HRESULT)
    set_cancel_button_label : Proc(IFileDialog2*, LibC::LPWSTR, HRESULT)
    set_navigation_root : Proc(IFileDialog2*, IShellItem, HRESULT)
  end

  struct IFileDialog2
    lpVtbl : IFileDialog2VTbl*
  end

  struct IApplicationAssociationRegistrationUIVTbl
    query_interface : Proc(IApplicationAssociationRegistrationUI*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationAssociationRegistrationUI*, UInt32)
    release : Proc(IApplicationAssociationRegistrationUI*, UInt32)
    launch_advanced_association_ui : Proc(IApplicationAssociationRegistrationUI*, LibC::LPWSTR, HRESULT)
  end

  struct IApplicationAssociationRegistrationUI
    lpVtbl : IApplicationAssociationRegistrationUIVTbl*
  end

  struct IShellRunDllVTbl
    query_interface : Proc(IShellRunDll*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellRunDll*, UInt32)
    release : Proc(IShellRunDll*, UInt32)
    run : Proc(IShellRunDll*, LibC::LPWSTR, HRESULT)
  end

  struct IShellRunDll
    lpVtbl : IShellRunDllVTbl*
  end

  struct IPreviousVersionsInfoVTbl
    query_interface : Proc(IPreviousVersionsInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreviousVersionsInfo*, UInt32)
    release : Proc(IPreviousVersionsInfo*, UInt32)
    are_snapshots_available : Proc(IPreviousVersionsInfo*, LibC::LPWSTR, LibC::BOOL, LibC::BOOL*, HRESULT)
  end

  struct IPreviousVersionsInfo
    lpVtbl : IPreviousVersionsInfoVTbl*
  end

  struct IUseToBrowseItemVTbl
    query_interface : Proc(IUseToBrowseItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUseToBrowseItem*, UInt32)
    release : Proc(IUseToBrowseItem*, UInt32)
    get_item_id_list : Proc(IUseToBrowseItem*, ITEMIDLIST**, HRESULT)
    get_item : Proc(IUseToBrowseItem*, IShellItem*, HRESULT)
  end

  struct IUseToBrowseItem
    lpVtbl : IUseToBrowseItemVTbl*
  end

  struct INameSpaceTreeControl2VTbl
    query_interface : Proc(INameSpaceTreeControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControl2*, UInt32)
    release : Proc(INameSpaceTreeControl2*, UInt32)
    initialize : Proc(INameSpaceTreeControl2*, LibC::HANDLE, RECT*, UInt32, HRESULT)
    tree_advise : Proc(INameSpaceTreeControl2*, IUnknown, UInt32*, HRESULT)
    tree_unadvise : Proc(INameSpaceTreeControl2*, UInt32, HRESULT)
    append_root : Proc(INameSpaceTreeControl2*, IShellItem, UInt32, UInt32, IShellItemFilter, HRESULT)
    insert_root : Proc(INameSpaceTreeControl2*, Int32, IShellItem, UInt32, UInt32, IShellItemFilter, HRESULT)
    remove_root : Proc(INameSpaceTreeControl2*, IShellItem, HRESULT)
    remove_all_roots : Proc(INameSpaceTreeControl2*, HRESULT)
    get_root_items : Proc(INameSpaceTreeControl2*, IShellItemArray*, HRESULT)
    set_item_state : Proc(INameSpaceTreeControl2*, IShellItem, UInt32, UInt32, HRESULT)
    get_item_state : Proc(INameSpaceTreeControl2*, IShellItem, UInt32, UInt32*, HRESULT)
    get_selected_items : Proc(INameSpaceTreeControl2*, IShellItemArray*, HRESULT)
    get_item_custom_state : Proc(INameSpaceTreeControl2*, IShellItem, Int32*, HRESULT)
    set_item_custom_state : Proc(INameSpaceTreeControl2*, IShellItem, Int32, HRESULT)
    ensure_item_visible : Proc(INameSpaceTreeControl2*, IShellItem, HRESULT)
    set_theme : Proc(INameSpaceTreeControl2*, LibC::LPWSTR, HRESULT)
    get_next_item : Proc(INameSpaceTreeControl2*, IShellItem, NSTCGNI, IShellItem*, HRESULT)
    hit_test : Proc(INameSpaceTreeControl2*, POINT*, IShellItem*, HRESULT)
    get_item_rect : Proc(INameSpaceTreeControl2*, IShellItem, RECT*, HRESULT)
    collapse_all : Proc(INameSpaceTreeControl2*, HRESULT)
    set_control_style : Proc(INameSpaceTreeControl2*, UInt32, UInt32, HRESULT)
    get_control_style : Proc(INameSpaceTreeControl2*, UInt32, UInt32*, HRESULT)
    set_control_style2 : Proc(INameSpaceTreeControl2*, NSTCSTYLE2, NSTCSTYLE2, HRESULT)
    get_control_style2 : Proc(INameSpaceTreeControl2*, NSTCSTYLE2, NSTCSTYLE2*, HRESULT)
  end

  struct INameSpaceTreeControl2
    lpVtbl : INameSpaceTreeControl2VTbl*
  end

  struct INameSpaceTreeControlEventsVTbl
    query_interface : Proc(INameSpaceTreeControlEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControlEvents*, UInt32)
    release : Proc(INameSpaceTreeControlEvents*, UInt32)
    on_item_click : Proc(INameSpaceTreeControlEvents*, IShellItem, UInt32, UInt32, HRESULT)
    on_property_item_commit : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_item_state_changing : Proc(INameSpaceTreeControlEvents*, IShellItem, UInt32, UInt32, HRESULT)
    on_item_state_changed : Proc(INameSpaceTreeControlEvents*, IShellItem, UInt32, UInt32, HRESULT)
    on_selection_changed : Proc(INameSpaceTreeControlEvents*, IShellItemArray, HRESULT)
    on_keyboard_input : Proc(INameSpaceTreeControlEvents*, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
    on_before_expand : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_after_expand : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_begin_label_edit : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_end_label_edit : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_get_tool_tip : Proc(INameSpaceTreeControlEvents*, IShellItem, Char*, Int32, HRESULT)
    on_before_item_delete : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_item_added : Proc(INameSpaceTreeControlEvents*, IShellItem, LibC::BOOL, HRESULT)
    on_item_deleted : Proc(INameSpaceTreeControlEvents*, IShellItem, LibC::BOOL, HRESULT)
    on_before_context_menu : Proc(INameSpaceTreeControlEvents*, IShellItem, Guid*, Void**, HRESULT)
    on_after_context_menu : Proc(INameSpaceTreeControlEvents*, IShellItem, IContextMenu, Guid*, Void**, HRESULT)
    on_before_state_image_change : Proc(INameSpaceTreeControlEvents*, IShellItem, HRESULT)
    on_get_default_icon_index : Proc(INameSpaceTreeControlEvents*, IShellItem, Int32*, Int32*, HRESULT)
  end

  struct INameSpaceTreeControlEvents
    lpVtbl : INameSpaceTreeControlEventsVTbl*
  end

  struct INameSpaceTreeControlDropHandlerVTbl
    query_interface : Proc(INameSpaceTreeControlDropHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControlDropHandler*, UInt32)
    release : Proc(INameSpaceTreeControlDropHandler*, UInt32)
    on_drag_enter : Proc(INameSpaceTreeControlDropHandler*, IShellItem, IShellItemArray, LibC::BOOL, UInt32, UInt32*, HRESULT)
    on_drag_over : Proc(INameSpaceTreeControlDropHandler*, IShellItem, IShellItemArray, UInt32, UInt32*, HRESULT)
    on_drag_position : Proc(INameSpaceTreeControlDropHandler*, IShellItem, IShellItemArray, Int32, Int32, HRESULT)
    on_drop : Proc(INameSpaceTreeControlDropHandler*, IShellItem, IShellItemArray, Int32, UInt32, UInt32*, HRESULT)
    on_drop_position : Proc(INameSpaceTreeControlDropHandler*, IShellItem, IShellItemArray, Int32, Int32, HRESULT)
    on_drag_leave : Proc(INameSpaceTreeControlDropHandler*, IShellItem, HRESULT)
  end

  struct INameSpaceTreeControlDropHandler
    lpVtbl : INameSpaceTreeControlDropHandlerVTbl*
  end

  struct INameSpaceTreeAccessibleVTbl
    query_interface : Proc(INameSpaceTreeAccessible*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeAccessible*, UInt32)
    release : Proc(INameSpaceTreeAccessible*, UInt32)
    on_get_default_accessibility_action : Proc(INameSpaceTreeAccessible*, IShellItem, UInt8**, HRESULT)
    on_do_default_accessibility_action : Proc(INameSpaceTreeAccessible*, IShellItem, HRESULT)
    on_get_accessibility_role : Proc(INameSpaceTreeAccessible*, IShellItem, VARIANT*, HRESULT)
  end

  struct INameSpaceTreeAccessible
    lpVtbl : INameSpaceTreeAccessibleVTbl*
  end

  struct INameSpaceTreeControlCustomDrawVTbl
    query_interface : Proc(INameSpaceTreeControlCustomDraw*, Guid*, Void**, HRESULT)
    add_ref : Proc(INameSpaceTreeControlCustomDraw*, UInt32)
    release : Proc(INameSpaceTreeControlCustomDraw*, UInt32)
    pre_paint : Proc(INameSpaceTreeControlCustomDraw*, HDC, RECT*, LRESULT*, HRESULT)
    post_paint : Proc(INameSpaceTreeControlCustomDraw*, HDC, RECT*, HRESULT)
    item_pre_paint : Proc(INameSpaceTreeControlCustomDraw*, HDC, RECT*, NSTCCUSTOMDRAW*, UInt32*, UInt32*, LRESULT*, HRESULT)
    item_post_paint : Proc(INameSpaceTreeControlCustomDraw*, HDC, RECT*, NSTCCUSTOMDRAW*, HRESULT)
  end

  struct INameSpaceTreeControlCustomDraw
    lpVtbl : INameSpaceTreeControlCustomDrawVTbl*
  end

  struct ITrayDeskBandVTbl
    query_interface : Proc(ITrayDeskBand*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITrayDeskBand*, UInt32)
    release : Proc(ITrayDeskBand*, UInt32)
    show_desk_band : Proc(ITrayDeskBand*, Guid*, HRESULT)
    hide_desk_band : Proc(ITrayDeskBand*, Guid*, HRESULT)
    is_desk_band_shown : Proc(ITrayDeskBand*, Guid*, HRESULT)
    desk_band_registration_changed : Proc(ITrayDeskBand*, HRESULT)
  end

  struct ITrayDeskBand
    lpVtbl : ITrayDeskBandVTbl*
  end

  struct IBandHostVTbl
    query_interface : Proc(IBandHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBandHost*, UInt32)
    release : Proc(IBandHost*, UInt32)
    create_band : Proc(IBandHost*, Guid*, LibC::BOOL, LibC::BOOL, Guid*, Void**, HRESULT)
    set_band_availability : Proc(IBandHost*, Guid*, LibC::BOOL, HRESULT)
    destroy_band : Proc(IBandHost*, Guid*, HRESULT)
  end

  struct IBandHost
    lpVtbl : IBandHostVTbl*
  end

  struct IComputerInfoChangeNotifyVTbl
    query_interface : Proc(IComputerInfoChangeNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComputerInfoChangeNotify*, UInt32)
    release : Proc(IComputerInfoChangeNotify*, UInt32)
    computer_info_changed : Proc(IComputerInfoChangeNotify*, HRESULT)
  end

  struct IComputerInfoChangeNotify
    lpVtbl : IComputerInfoChangeNotifyVTbl*
  end

  struct IDesktopGadgetVTbl
    query_interface : Proc(IDesktopGadget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDesktopGadget*, UInt32)
    release : Proc(IDesktopGadget*, UInt32)
    run_gadget : Proc(IDesktopGadget*, LibC::LPWSTR, HRESULT)
  end

  struct IDesktopGadget
    lpVtbl : IDesktopGadgetVTbl*
  end

  struct IAccessibilityDockingServiceCallbackVTbl
    query_interface : Proc(IAccessibilityDockingServiceCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAccessibilityDockingServiceCallback*, UInt32)
    release : Proc(IAccessibilityDockingServiceCallback*, UInt32)
    undocked : Proc(IAccessibilityDockingServiceCallback*, UNDOCK_REASON, HRESULT)
  end

  struct IAccessibilityDockingServiceCallback
    lpVtbl : IAccessibilityDockingServiceCallbackVTbl*
  end

  struct IAccessibilityDockingServiceVTbl
    query_interface : Proc(IAccessibilityDockingService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAccessibilityDockingService*, UInt32)
    release : Proc(IAccessibilityDockingService*, UInt32)
    get_available_size : Proc(IAccessibilityDockingService*, HMONITOR, UInt32*, UInt32*, HRESULT)
    dock_window : Proc(IAccessibilityDockingService*, LibC::HANDLE, HMONITOR, UInt32, IAccessibilityDockingServiceCallback, HRESULT)
    undock_window : Proc(IAccessibilityDockingService*, LibC::HANDLE, HRESULT)
  end

  struct IAccessibilityDockingService
    lpVtbl : IAccessibilityDockingServiceVTbl*
  end

  struct IStorageProviderBannersVTbl
    query_interface : Proc(IStorageProviderBanners*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStorageProviderBanners*, UInt32)
    release : Proc(IStorageProviderBanners*, UInt32)
    set_banner : Proc(IStorageProviderBanners*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    clear_banner : Proc(IStorageProviderBanners*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    clear_all_banners : Proc(IStorageProviderBanners*, LibC::LPWSTR, HRESULT)
    get_banner : Proc(IStorageProviderBanners*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
  end

  struct IStorageProviderBanners
    lpVtbl : IStorageProviderBannersVTbl*
  end

  struct IStorageProviderCopyHookVTbl
    query_interface : Proc(IStorageProviderCopyHook*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStorageProviderCopyHook*, UInt32)
    release : Proc(IStorageProviderCopyHook*, UInt32)
    copy_callback : Proc(IStorageProviderCopyHook*, LibC::HANDLE, UInt32, UInt32, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
  end

  struct IStorageProviderCopyHook
    lpVtbl : IStorageProviderCopyHookVTbl*
  end

  struct IWebBrowserVTbl
    query_interface : Proc(IWebBrowser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBrowser*, UInt32)
    release : Proc(IWebBrowser*, UInt32)
    get_type_info_count : Proc(IWebBrowser*, UInt32*, HRESULT)
    get_type_info : Proc(IWebBrowser*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebBrowser*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebBrowser*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    go_back : Proc(IWebBrowser*, HRESULT)
    go_forward : Proc(IWebBrowser*, HRESULT)
    go_home : Proc(IWebBrowser*, HRESULT)
    go_search : Proc(IWebBrowser*, HRESULT)
    navigate : Proc(IWebBrowser*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    refresh : Proc(IWebBrowser*, HRESULT)
    refresh2 : Proc(IWebBrowser*, VARIANT*, HRESULT)
    stop : Proc(IWebBrowser*, HRESULT)
    get_application : Proc(IWebBrowser*, IDispatch*, HRESULT)
    get_parent : Proc(IWebBrowser*, IDispatch*, HRESULT)
    get_container : Proc(IWebBrowser*, IDispatch*, HRESULT)
    get_document : Proc(IWebBrowser*, IDispatch*, HRESULT)
    get_top_level_container : Proc(IWebBrowser*, Int16*, HRESULT)
    get_type : Proc(IWebBrowser*, UInt8**, HRESULT)
    get_left : Proc(IWebBrowser*, Int32*, HRESULT)
    put_left : Proc(IWebBrowser*, Int32, HRESULT)
    get_top : Proc(IWebBrowser*, Int32*, HRESULT)
    put_top : Proc(IWebBrowser*, Int32, HRESULT)
    get_width : Proc(IWebBrowser*, Int32*, HRESULT)
    put_width : Proc(IWebBrowser*, Int32, HRESULT)
    get_height : Proc(IWebBrowser*, Int32*, HRESULT)
    put_height : Proc(IWebBrowser*, Int32, HRESULT)
    get_location_name : Proc(IWebBrowser*, UInt8**, HRESULT)
    get_location_url : Proc(IWebBrowser*, UInt8**, HRESULT)
    get_busy : Proc(IWebBrowser*, Int16*, HRESULT)
  end

  struct IWebBrowser
    lpVtbl : IWebBrowserVTbl*
  end

  struct DWebBrowserEventsVTbl
    query_interface : Proc(DWebBrowserEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DWebBrowserEvents*, UInt32)
    release : Proc(DWebBrowserEvents*, UInt32)
    get_type_info_count : Proc(DWebBrowserEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DWebBrowserEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DWebBrowserEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DWebBrowserEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct DWebBrowserEvents
    lpVtbl : DWebBrowserEventsVTbl*
  end

  struct IWebBrowserAppVTbl
    query_interface : Proc(IWebBrowserApp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBrowserApp*, UInt32)
    release : Proc(IWebBrowserApp*, UInt32)
    get_type_info_count : Proc(IWebBrowserApp*, UInt32*, HRESULT)
    get_type_info : Proc(IWebBrowserApp*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebBrowserApp*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebBrowserApp*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    go_back : Proc(IWebBrowserApp*, HRESULT)
    go_forward : Proc(IWebBrowserApp*, HRESULT)
    go_home : Proc(IWebBrowserApp*, HRESULT)
    go_search : Proc(IWebBrowserApp*, HRESULT)
    navigate : Proc(IWebBrowserApp*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    refresh : Proc(IWebBrowserApp*, HRESULT)
    refresh2 : Proc(IWebBrowserApp*, VARIANT*, HRESULT)
    stop : Proc(IWebBrowserApp*, HRESULT)
    get_application : Proc(IWebBrowserApp*, IDispatch*, HRESULT)
    get_parent : Proc(IWebBrowserApp*, IDispatch*, HRESULT)
    get_container : Proc(IWebBrowserApp*, IDispatch*, HRESULT)
    get_document : Proc(IWebBrowserApp*, IDispatch*, HRESULT)
    get_top_level_container : Proc(IWebBrowserApp*, Int16*, HRESULT)
    get_type : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_left : Proc(IWebBrowserApp*, Int32*, HRESULT)
    put_left : Proc(IWebBrowserApp*, Int32, HRESULT)
    get_top : Proc(IWebBrowserApp*, Int32*, HRESULT)
    put_top : Proc(IWebBrowserApp*, Int32, HRESULT)
    get_width : Proc(IWebBrowserApp*, Int32*, HRESULT)
    put_width : Proc(IWebBrowserApp*, Int32, HRESULT)
    get_height : Proc(IWebBrowserApp*, Int32*, HRESULT)
    put_height : Proc(IWebBrowserApp*, Int32, HRESULT)
    get_location_name : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_location_url : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_busy : Proc(IWebBrowserApp*, Int16*, HRESULT)
    quit : Proc(IWebBrowserApp*, HRESULT)
    client_to_window : Proc(IWebBrowserApp*, Int32*, Int32*, HRESULT)
    put_property : Proc(IWebBrowserApp*, UInt8*, VARIANT, HRESULT)
    get_property : Proc(IWebBrowserApp*, UInt8*, VARIANT*, HRESULT)
    get_name : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_hwnd : Proc(IWebBrowserApp*, SHANDLE_PTR*, HRESULT)
    get_full_name : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_path : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    get_visible : Proc(IWebBrowserApp*, Int16*, HRESULT)
    put_visible : Proc(IWebBrowserApp*, Int16, HRESULT)
    get_status_bar : Proc(IWebBrowserApp*, Int16*, HRESULT)
    put_status_bar : Proc(IWebBrowserApp*, Int16, HRESULT)
    get_status_text : Proc(IWebBrowserApp*, UInt8**, HRESULT)
    put_status_text : Proc(IWebBrowserApp*, UInt8*, HRESULT)
    get_tool_bar : Proc(IWebBrowserApp*, Int32*, HRESULT)
    put_tool_bar : Proc(IWebBrowserApp*, Int32, HRESULT)
    get_menu_bar : Proc(IWebBrowserApp*, Int16*, HRESULT)
    put_menu_bar : Proc(IWebBrowserApp*, Int16, HRESULT)
    get_full_screen : Proc(IWebBrowserApp*, Int16*, HRESULT)
    put_full_screen : Proc(IWebBrowserApp*, Int16, HRESULT)
  end

  struct IWebBrowserApp
    lpVtbl : IWebBrowserAppVTbl*
  end

  struct IWebBrowser2VTbl
    query_interface : Proc(IWebBrowser2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBrowser2*, UInt32)
    release : Proc(IWebBrowser2*, UInt32)
    get_type_info_count : Proc(IWebBrowser2*, UInt32*, HRESULT)
    get_type_info : Proc(IWebBrowser2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebBrowser2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebBrowser2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    go_back : Proc(IWebBrowser2*, HRESULT)
    go_forward : Proc(IWebBrowser2*, HRESULT)
    go_home : Proc(IWebBrowser2*, HRESULT)
    go_search : Proc(IWebBrowser2*, HRESULT)
    navigate : Proc(IWebBrowser2*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    refresh : Proc(IWebBrowser2*, HRESULT)
    refresh2 : Proc(IWebBrowser2*, VARIANT*, HRESULT)
    stop : Proc(IWebBrowser2*, HRESULT)
    get_application : Proc(IWebBrowser2*, IDispatch*, HRESULT)
    get_parent : Proc(IWebBrowser2*, IDispatch*, HRESULT)
    get_container : Proc(IWebBrowser2*, IDispatch*, HRESULT)
    get_document : Proc(IWebBrowser2*, IDispatch*, HRESULT)
    get_top_level_container : Proc(IWebBrowser2*, Int16*, HRESULT)
    get_type : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_left : Proc(IWebBrowser2*, Int32*, HRESULT)
    put_left : Proc(IWebBrowser2*, Int32, HRESULT)
    get_top : Proc(IWebBrowser2*, Int32*, HRESULT)
    put_top : Proc(IWebBrowser2*, Int32, HRESULT)
    get_width : Proc(IWebBrowser2*, Int32*, HRESULT)
    put_width : Proc(IWebBrowser2*, Int32, HRESULT)
    get_height : Proc(IWebBrowser2*, Int32*, HRESULT)
    put_height : Proc(IWebBrowser2*, Int32, HRESULT)
    get_location_name : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_location_url : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_busy : Proc(IWebBrowser2*, Int16*, HRESULT)
    quit : Proc(IWebBrowser2*, HRESULT)
    client_to_window : Proc(IWebBrowser2*, Int32*, Int32*, HRESULT)
    put_property : Proc(IWebBrowser2*, UInt8*, VARIANT, HRESULT)
    get_property : Proc(IWebBrowser2*, UInt8*, VARIANT*, HRESULT)
    get_name : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_hwnd : Proc(IWebBrowser2*, SHANDLE_PTR*, HRESULT)
    get_full_name : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_path : Proc(IWebBrowser2*, UInt8**, HRESULT)
    get_visible : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_visible : Proc(IWebBrowser2*, Int16, HRESULT)
    get_status_bar : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_status_bar : Proc(IWebBrowser2*, Int16, HRESULT)
    get_status_text : Proc(IWebBrowser2*, UInt8**, HRESULT)
    put_status_text : Proc(IWebBrowser2*, UInt8*, HRESULT)
    get_tool_bar : Proc(IWebBrowser2*, Int32*, HRESULT)
    put_tool_bar : Proc(IWebBrowser2*, Int32, HRESULT)
    get_menu_bar : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_menu_bar : Proc(IWebBrowser2*, Int16, HRESULT)
    get_full_screen : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_full_screen : Proc(IWebBrowser2*, Int16, HRESULT)
    navigate2 : Proc(IWebBrowser2*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    query_status_wb : Proc(IWebBrowser2*, OLECMDID, OLECMDF*, HRESULT)
    exec_wb : Proc(IWebBrowser2*, OLECMDID, OLECMDEXECOPT, VARIANT*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IWebBrowser2*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    get_ready_state : Proc(IWebBrowser2*, READYSTATE*, HRESULT)
    get_offline : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_offline : Proc(IWebBrowser2*, Int16, HRESULT)
    get_silent : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_silent : Proc(IWebBrowser2*, Int16, HRESULT)
    get_register_as_browser : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_register_as_browser : Proc(IWebBrowser2*, Int16, HRESULT)
    get_register_as_drop_target : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_register_as_drop_target : Proc(IWebBrowser2*, Int16, HRESULT)
    get_theater_mode : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_theater_mode : Proc(IWebBrowser2*, Int16, HRESULT)
    get_address_bar : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_address_bar : Proc(IWebBrowser2*, Int16, HRESULT)
    get_resizable : Proc(IWebBrowser2*, Int16*, HRESULT)
    put_resizable : Proc(IWebBrowser2*, Int16, HRESULT)
  end

  struct IWebBrowser2
    lpVtbl : IWebBrowser2VTbl*
  end

  struct DWebBrowserEvents2VTbl
    query_interface : Proc(DWebBrowserEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(DWebBrowserEvents2*, UInt32)
    release : Proc(DWebBrowserEvents2*, UInt32)
    get_type_info_count : Proc(DWebBrowserEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(DWebBrowserEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DWebBrowserEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DWebBrowserEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct DWebBrowserEvents2
    lpVtbl : DWebBrowserEvents2VTbl*
  end

  struct DShellWindowsEventsVTbl
    query_interface : Proc(DShellWindowsEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DShellWindowsEvents*, UInt32)
    release : Proc(DShellWindowsEvents*, UInt32)
    get_type_info_count : Proc(DShellWindowsEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DShellWindowsEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DShellWindowsEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DShellWindowsEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct DShellWindowsEvents
    lpVtbl : DShellWindowsEventsVTbl*
  end

  struct IShellWindowsVTbl
    query_interface : Proc(IShellWindows*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellWindows*, UInt32)
    release : Proc(IShellWindows*, UInt32)
    get_type_info_count : Proc(IShellWindows*, UInt32*, HRESULT)
    get_type_info : Proc(IShellWindows*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellWindows*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellWindows*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IShellWindows*, Int32*, HRESULT)
    item : Proc(IShellWindows*, VARIANT, IDispatch*, HRESULT)
    _new_enum : Proc(IShellWindows*, IUnknown*, HRESULT)
    register : Proc(IShellWindows*, IDispatch, Int32, Int32, Int32*, HRESULT)
    register_pending : Proc(IShellWindows*, Int32, VARIANT*, VARIANT*, Int32, Int32*, HRESULT)
    revoke : Proc(IShellWindows*, Int32, HRESULT)
    on_navigate : Proc(IShellWindows*, Int32, VARIANT*, HRESULT)
    on_activated : Proc(IShellWindows*, Int32, Int16, HRESULT)
    find_window_sw : Proc(IShellWindows*, VARIANT*, VARIANT*, Int32, Int32*, Int32, IDispatch*, HRESULT)
    on_created : Proc(IShellWindows*, Int32, IUnknown, HRESULT)
    process_attach_detach : Proc(IShellWindows*, Int16, HRESULT)
  end

  struct IShellWindows
    lpVtbl : IShellWindowsVTbl*
  end

  struct IShellUIHelperVTbl
    query_interface : Proc(IShellUIHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper*, UInt32)
    release : Proc(IShellUIHelper*, UInt32)
    get_type_info_count : Proc(IShellUIHelper*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper*, HRESULT)
    add_favorite : Proc(IShellUIHelper*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper*, UInt8*, VARIANT*, VARIANT*, HRESULT)
  end

  struct IShellUIHelper
    lpVtbl : IShellUIHelperVTbl*
  end

  struct IShellUIHelper2VTbl
    query_interface : Proc(IShellUIHelper2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper2*, UInt32)
    release : Proc(IShellUIHelper2*, UInt32)
    get_type_info_count : Proc(IShellUIHelper2*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper2*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper2*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper2*, HRESULT)
    add_favorite : Proc(IShellUIHelper2*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper2*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper2*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper2*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper2*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper2*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper2*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper2*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper2*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper2*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper2*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper2*, HRESULT)
    skip_run_once : Proc(IShellUIHelper2*, HRESULT)
    customize_settings : Proc(IShellUIHelper2*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper2*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper2*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper2*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper2*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper2*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper2*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper2*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper2*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper2*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper2*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper2*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper2*, UInt8**, HRESULT)
  end

  struct IShellUIHelper2
    lpVtbl : IShellUIHelper2VTbl*
  end

  struct IShellUIHelper3VTbl
    query_interface : Proc(IShellUIHelper3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper3*, UInt32)
    release : Proc(IShellUIHelper3*, UInt32)
    get_type_info_count : Proc(IShellUIHelper3*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper3*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper3*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper3*, HRESULT)
    add_favorite : Proc(IShellUIHelper3*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper3*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper3*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper3*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper3*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper3*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper3*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper3*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper3*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper3*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper3*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper3*, HRESULT)
    skip_run_once : Proc(IShellUIHelper3*, HRESULT)
    customize_settings : Proc(IShellUIHelper3*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper3*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper3*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper3*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper3*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper3*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper3*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper3*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper3*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper3*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper3*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper3*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper3*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper3*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper3*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper3*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper3*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper3*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper3*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper3*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper3*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper3*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper3*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper3*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper3*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper3*, HRESULT)
  end

  struct IShellUIHelper3
    lpVtbl : IShellUIHelper3VTbl*
  end

  struct IShellUIHelper4VTbl
    query_interface : Proc(IShellUIHelper4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper4*, UInt32)
    release : Proc(IShellUIHelper4*, UInt32)
    get_type_info_count : Proc(IShellUIHelper4*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper4*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper4*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper4*, HRESULT)
    add_favorite : Proc(IShellUIHelper4*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper4*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper4*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper4*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper4*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper4*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper4*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper4*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper4*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper4*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper4*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper4*, HRESULT)
    skip_run_once : Proc(IShellUIHelper4*, HRESULT)
    customize_settings : Proc(IShellUIHelper4*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper4*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper4*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper4*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper4*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper4*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper4*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper4*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper4*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper4*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper4*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper4*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper4*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper4*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper4*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper4*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper4*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper4*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper4*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper4*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper4*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper4*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper4*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper4*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper4*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper4*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper4*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper4*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper4*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper4*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper4*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper4*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper4*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper4*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper4*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper4*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper4*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper4*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper4*, Int16*, HRESULT)
  end

  struct IShellUIHelper4
    lpVtbl : IShellUIHelper4VTbl*
  end

  struct IShellUIHelper5VTbl
    query_interface : Proc(IShellUIHelper5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper5*, UInt32)
    release : Proc(IShellUIHelper5*, UInt32)
    get_type_info_count : Proc(IShellUIHelper5*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper5*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper5*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper5*, HRESULT)
    add_favorite : Proc(IShellUIHelper5*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper5*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper5*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper5*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper5*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper5*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper5*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper5*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper5*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper5*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper5*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper5*, HRESULT)
    skip_run_once : Proc(IShellUIHelper5*, HRESULT)
    customize_settings : Proc(IShellUIHelper5*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper5*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper5*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper5*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper5*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper5*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper5*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper5*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper5*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper5*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper5*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper5*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper5*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper5*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper5*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper5*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper5*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper5*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper5*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper5*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper5*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper5*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper5*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper5*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper5*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper5*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper5*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper5*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper5*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper5*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper5*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper5*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper5*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper5*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper5*, Int16*, HRESULT)
    ms_provision_networks : Proc(IShellUIHelper5*, UInt8*, VARIANT*, HRESULT)
    ms_report_safe_url : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_refresh_badge : Proc(IShellUIHelper5*, HRESULT)
    ms_site_mode_clear_badge : Proc(IShellUIHelper5*, HRESULT)
    ms_diagnose_connection_ui_less : Proc(IShellUIHelper5*, HRESULT)
    ms_launch_network_client_help : Proc(IShellUIHelper5*, HRESULT)
    ms_change_default_browser : Proc(IShellUIHelper5*, Int16, HRESULT)
  end

  struct IShellUIHelper5
    lpVtbl : IShellUIHelper5VTbl*
  end

  struct IShellUIHelper6VTbl
    query_interface : Proc(IShellUIHelper6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper6*, UInt32)
    release : Proc(IShellUIHelper6*, UInt32)
    get_type_info_count : Proc(IShellUIHelper6*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper6*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper6*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper6*, HRESULT)
    add_favorite : Proc(IShellUIHelper6*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper6*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper6*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper6*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper6*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper6*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper6*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper6*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper6*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper6*, HRESULT)
    skip_run_once : Proc(IShellUIHelper6*, HRESULT)
    customize_settings : Proc(IShellUIHelper6*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper6*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper6*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper6*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper6*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper6*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper6*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper6*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper6*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper6*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper6*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper6*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper6*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper6*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper6*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper6*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper6*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper6*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper6*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper6*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper6*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper6*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper6*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper6*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper6*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper6*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper6*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper6*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper6*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper6*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper6*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper6*, Int16*, HRESULT)
    ms_provision_networks : Proc(IShellUIHelper6*, UInt8*, VARIANT*, HRESULT)
    ms_report_safe_url : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_refresh_badge : Proc(IShellUIHelper6*, HRESULT)
    ms_site_mode_clear_badge : Proc(IShellUIHelper6*, HRESULT)
    ms_diagnose_connection_ui_less : Proc(IShellUIHelper6*, HRESULT)
    ms_launch_network_client_help : Proc(IShellUIHelper6*, HRESULT)
    ms_change_default_browser : Proc(IShellUIHelper6*, Int16, HRESULT)
    ms_stop_periodic_tile_update : Proc(IShellUIHelper6*, HRESULT)
    ms_start_periodic_tile_update : Proc(IShellUIHelper6*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_start_periodic_tile_update_batch : Proc(IShellUIHelper6*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_clear_tile : Proc(IShellUIHelper6*, HRESULT)
    ms_enable_tile_notification_queue : Proc(IShellUIHelper6*, Int16, HRESULT)
    ms_pinned_site_state : Proc(IShellUIHelper6*, VARIANT*, HRESULT)
    ms_enable_tile_notification_queue_for_square150x150 : Proc(IShellUIHelper6*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_wide310x150 : Proc(IShellUIHelper6*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_square310x310 : Proc(IShellUIHelper6*, Int16, HRESULT)
    ms_scheduled_tile_notification : Proc(IShellUIHelper6*, UInt8*, UInt8*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_remove_scheduled_tile_notification : Proc(IShellUIHelper6*, UInt8*, HRESULT)
    ms_start_periodic_badge_update : Proc(IShellUIHelper6*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_stop_periodic_badge_update : Proc(IShellUIHelper6*, HRESULT)
    ms_launch_internet_options : Proc(IShellUIHelper6*, HRESULT)
  end

  struct IShellUIHelper6
    lpVtbl : IShellUIHelper6VTbl*
  end

  struct IShellUIHelper7VTbl
    query_interface : Proc(IShellUIHelper7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper7*, UInt32)
    release : Proc(IShellUIHelper7*, UInt32)
    get_type_info_count : Proc(IShellUIHelper7*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper7*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper7*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper7*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper7*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper7*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper7*, HRESULT)
    add_favorite : Proc(IShellUIHelper7*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper7*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper7*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper7*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper7*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper7*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper7*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper7*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper7*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper7*, HRESULT)
    skip_run_once : Proc(IShellUIHelper7*, HRESULT)
    customize_settings : Proc(IShellUIHelper7*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper7*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper7*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper7*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper7*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper7*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper7*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper7*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper7*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper7*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper7*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper7*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper7*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper7*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper7*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper7*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper7*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper7*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper7*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper7*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper7*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper7*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper7*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper7*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper7*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper7*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper7*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper7*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper7*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper7*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper7*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper7*, Int16*, HRESULT)
    ms_provision_networks : Proc(IShellUIHelper7*, UInt8*, VARIANT*, HRESULT)
    ms_report_safe_url : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_refresh_badge : Proc(IShellUIHelper7*, HRESULT)
    ms_site_mode_clear_badge : Proc(IShellUIHelper7*, HRESULT)
    ms_diagnose_connection_ui_less : Proc(IShellUIHelper7*, HRESULT)
    ms_launch_network_client_help : Proc(IShellUIHelper7*, HRESULT)
    ms_change_default_browser : Proc(IShellUIHelper7*, Int16, HRESULT)
    ms_stop_periodic_tile_update : Proc(IShellUIHelper7*, HRESULT)
    ms_start_periodic_tile_update : Proc(IShellUIHelper7*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_start_periodic_tile_update_batch : Proc(IShellUIHelper7*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_clear_tile : Proc(IShellUIHelper7*, HRESULT)
    ms_enable_tile_notification_queue : Proc(IShellUIHelper7*, Int16, HRESULT)
    ms_pinned_site_state : Proc(IShellUIHelper7*, VARIANT*, HRESULT)
    ms_enable_tile_notification_queue_for_square150x150 : Proc(IShellUIHelper7*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_wide310x150 : Proc(IShellUIHelper7*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_square310x310 : Proc(IShellUIHelper7*, Int16, HRESULT)
    ms_scheduled_tile_notification : Proc(IShellUIHelper7*, UInt8*, UInt8*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_remove_scheduled_tile_notification : Proc(IShellUIHelper7*, UInt8*, HRESULT)
    ms_start_periodic_badge_update : Proc(IShellUIHelper7*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_stop_periodic_badge_update : Proc(IShellUIHelper7*, HRESULT)
    ms_launch_internet_options : Proc(IShellUIHelper7*, HRESULT)
    set_experimental_flag : Proc(IShellUIHelper7*, UInt8*, Int16, HRESULT)
    get_experimental_flag : Proc(IShellUIHelper7*, UInt8*, Int16*, HRESULT)
    set_experimental_value : Proc(IShellUIHelper7*, UInt8*, UInt32, HRESULT)
    get_experimental_value : Proc(IShellUIHelper7*, UInt8*, UInt32*, HRESULT)
    reset_all_experimental_flags_and_values : Proc(IShellUIHelper7*, HRESULT)
    get_need_ie_auto_launch_flag : Proc(IShellUIHelper7*, UInt8*, Int16*, HRESULT)
    set_need_ie_auto_launch_flag : Proc(IShellUIHelper7*, UInt8*, Int16, HRESULT)
    has_need_ie_auto_launch_flag : Proc(IShellUIHelper7*, UInt8*, Int16*, HRESULT)
    launch_ie : Proc(IShellUIHelper7*, UInt8*, Int16, HRESULT)
  end

  struct IShellUIHelper7
    lpVtbl : IShellUIHelper7VTbl*
  end

  struct IShellUIHelper8VTbl
    query_interface : Proc(IShellUIHelper8*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper8*, UInt32)
    release : Proc(IShellUIHelper8*, UInt32)
    get_type_info_count : Proc(IShellUIHelper8*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper8*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper8*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper8*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper8*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper8*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper8*, HRESULT)
    add_favorite : Proc(IShellUIHelper8*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper8*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper8*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper8*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper8*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper8*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper8*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper8*, HRESULT)
    skip_run_once : Proc(IShellUIHelper8*, HRESULT)
    customize_settings : Proc(IShellUIHelper8*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper8*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper8*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper8*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper8*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper8*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper8*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper8*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper8*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper8*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper8*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper8*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper8*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper8*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper8*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper8*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper8*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper8*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper8*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper8*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper8*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper8*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper8*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper8*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper8*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper8*, Int16*, HRESULT)
    ms_provision_networks : Proc(IShellUIHelper8*, UInt8*, VARIANT*, HRESULT)
    ms_report_safe_url : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_refresh_badge : Proc(IShellUIHelper8*, HRESULT)
    ms_site_mode_clear_badge : Proc(IShellUIHelper8*, HRESULT)
    ms_diagnose_connection_ui_less : Proc(IShellUIHelper8*, HRESULT)
    ms_launch_network_client_help : Proc(IShellUIHelper8*, HRESULT)
    ms_change_default_browser : Proc(IShellUIHelper8*, Int16, HRESULT)
    ms_stop_periodic_tile_update : Proc(IShellUIHelper8*, HRESULT)
    ms_start_periodic_tile_update : Proc(IShellUIHelper8*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_start_periodic_tile_update_batch : Proc(IShellUIHelper8*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_clear_tile : Proc(IShellUIHelper8*, HRESULT)
    ms_enable_tile_notification_queue : Proc(IShellUIHelper8*, Int16, HRESULT)
    ms_pinned_site_state : Proc(IShellUIHelper8*, VARIANT*, HRESULT)
    ms_enable_tile_notification_queue_for_square150x150 : Proc(IShellUIHelper8*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_wide310x150 : Proc(IShellUIHelper8*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_square310x310 : Proc(IShellUIHelper8*, Int16, HRESULT)
    ms_scheduled_tile_notification : Proc(IShellUIHelper8*, UInt8*, UInt8*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_remove_scheduled_tile_notification : Proc(IShellUIHelper8*, UInt8*, HRESULT)
    ms_start_periodic_badge_update : Proc(IShellUIHelper8*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_stop_periodic_badge_update : Proc(IShellUIHelper8*, HRESULT)
    ms_launch_internet_options : Proc(IShellUIHelper8*, HRESULT)
    set_experimental_flag : Proc(IShellUIHelper8*, UInt8*, Int16, HRESULT)
    get_experimental_flag : Proc(IShellUIHelper8*, UInt8*, Int16*, HRESULT)
    set_experimental_value : Proc(IShellUIHelper8*, UInt8*, UInt32, HRESULT)
    get_experimental_value : Proc(IShellUIHelper8*, UInt8*, UInt32*, HRESULT)
    reset_all_experimental_flags_and_values : Proc(IShellUIHelper8*, HRESULT)
    get_need_ie_auto_launch_flag : Proc(IShellUIHelper8*, UInt8*, Int16*, HRESULT)
    set_need_ie_auto_launch_flag : Proc(IShellUIHelper8*, UInt8*, Int16, HRESULT)
    has_need_ie_auto_launch_flag : Proc(IShellUIHelper8*, UInt8*, Int16*, HRESULT)
    launch_ie : Proc(IShellUIHelper8*, UInt8*, Int16, HRESULT)
    get_cv_list_data : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    get_cv_list_local_data : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    get_emie_list_data : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    get_emie_list_local_data : Proc(IShellUIHelper8*, UInt8**, HRESULT)
    open_favorites_pane : Proc(IShellUIHelper8*, HRESULT)
    open_favorites_settings : Proc(IShellUIHelper8*, HRESULT)
    launch_in_hvsi : Proc(IShellUIHelper8*, UInt8*, HRESULT)
  end

  struct IShellUIHelper8
    lpVtbl : IShellUIHelper8VTbl*
  end

  struct IShellUIHelper9VTbl
    query_interface : Proc(IShellUIHelper9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellUIHelper9*, UInt32)
    release : Proc(IShellUIHelper9*, UInt32)
    get_type_info_count : Proc(IShellUIHelper9*, UInt32*, HRESULT)
    get_type_info : Proc(IShellUIHelper9*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellUIHelper9*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellUIHelper9*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset_first_boot_mode : Proc(IShellUIHelper9*, HRESULT)
    reset_safe_mode : Proc(IShellUIHelper9*, HRESULT)
    refresh_offline_desktop : Proc(IShellUIHelper9*, HRESULT)
    add_favorite : Proc(IShellUIHelper9*, UInt8*, VARIANT*, HRESULT)
    add_channel : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    add_desktop_component : Proc(IShellUIHelper9*, UInt8*, UInt8*, VARIANT*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    is_subscribed : Proc(IShellUIHelper9*, UInt8*, Int16*, HRESULT)
    navigate_and_find : Proc(IShellUIHelper9*, UInt8*, UInt8*, VARIANT*, HRESULT)
    import_export_favorites : Proc(IShellUIHelper9*, Int16, UInt8*, HRESULT)
    auto_complete_save_form : Proc(IShellUIHelper9*, VARIANT*, HRESULT)
    auto_scan : Proc(IShellUIHelper9*, UInt8*, UInt8*, VARIANT*, HRESULT)
    auto_complete_attach : Proc(IShellUIHelper9*, VARIANT*, HRESULT)
    show_browser_ui : Proc(IShellUIHelper9*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    add_search_provider : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    run_once_shown : Proc(IShellUIHelper9*, HRESULT)
    skip_run_once : Proc(IShellUIHelper9*, HRESULT)
    customize_settings : Proc(IShellUIHelper9*, Int16, Int16, UInt8*, HRESULT)
    sqm_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    phishing_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    brand_image_uri : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    skip_tabs_welcome : Proc(IShellUIHelper9*, HRESULT)
    diagnose_connection : Proc(IShellUIHelper9*, HRESULT)
    customize_clear_type : Proc(IShellUIHelper9*, Int16, HRESULT)
    is_search_provider_installed : Proc(IShellUIHelper9*, UInt8*, UInt32*, HRESULT)
    is_search_migrated : Proc(IShellUIHelper9*, Int16*, HRESULT)
    default_search_provider : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    run_once_required_settings_complete : Proc(IShellUIHelper9*, Int16, HRESULT)
    run_once_has_shown : Proc(IShellUIHelper9*, Int16*, HRESULT)
    search_guide_url : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    add_service : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    is_service_installed : Proc(IShellUIHelper9*, UInt8*, UInt8*, UInt32*, HRESULT)
    in_private_filtering_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    add_to_favorites_bar : Proc(IShellUIHelper9*, UInt8*, UInt8*, VARIANT*, HRESULT)
    build_new_tab_page : Proc(IShellUIHelper9*, HRESULT)
    set_recently_closed_visible : Proc(IShellUIHelper9*, Int16, HRESULT)
    set_activities_visible : Proc(IShellUIHelper9*, Int16, HRESULT)
    content_discovery_reset : Proc(IShellUIHelper9*, HRESULT)
    is_suggested_sites_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    enable_suggested_sites : Proc(IShellUIHelper9*, Int16, HRESULT)
    navigate_to_suggested_sites : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    show_tabs_help : Proc(IShellUIHelper9*, HRESULT)
    show_in_private_help : Proc(IShellUIHelper9*, HRESULT)
    ms_is_site_mode : Proc(IShellUIHelper9*, Int16*, HRESULT)
    ms_site_mode_show_thumb_bar : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_add_thumb_bar_button : Proc(IShellUIHelper9*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_update_thumb_bar_button : Proc(IShellUIHelper9*, VARIANT, Int16, Int16, HRESULT)
    ms_site_mode_set_icon_overlay : Proc(IShellUIHelper9*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_icon_overlay : Proc(IShellUIHelper9*, HRESULT)
    ms_add_site_mode : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_create_jump_list : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    ms_site_mode_add_jump_list_item : Proc(IShellUIHelper9*, UInt8*, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_clear_jump_list : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_show_jump_list : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_add_button_style : Proc(IShellUIHelper9*, VARIANT, UInt8*, UInt8*, VARIANT*, HRESULT)
    ms_site_mode_show_button_style : Proc(IShellUIHelper9*, VARIANT, VARIANT, HRESULT)
    ms_site_mode_activate : Proc(IShellUIHelper9*, HRESULT)
    ms_is_site_mode_first_run : Proc(IShellUIHelper9*, Int16, VARIANT*, HRESULT)
    ms_add_tracking_protection_list : Proc(IShellUIHelper9*, UInt8*, UInt8*, HRESULT)
    ms_tracking_protection_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    ms_active_x_filtering_enabled : Proc(IShellUIHelper9*, Int16*, HRESULT)
    ms_provision_networks : Proc(IShellUIHelper9*, UInt8*, VARIANT*, HRESULT)
    ms_report_safe_url : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_refresh_badge : Proc(IShellUIHelper9*, HRESULT)
    ms_site_mode_clear_badge : Proc(IShellUIHelper9*, HRESULT)
    ms_diagnose_connection_ui_less : Proc(IShellUIHelper9*, HRESULT)
    ms_launch_network_client_help : Proc(IShellUIHelper9*, HRESULT)
    ms_change_default_browser : Proc(IShellUIHelper9*, Int16, HRESULT)
    ms_stop_periodic_tile_update : Proc(IShellUIHelper9*, HRESULT)
    ms_start_periodic_tile_update : Proc(IShellUIHelper9*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_start_periodic_tile_update_batch : Proc(IShellUIHelper9*, VARIANT, VARIANT, VARIANT, HRESULT)
    ms_clear_tile : Proc(IShellUIHelper9*, HRESULT)
    ms_enable_tile_notification_queue : Proc(IShellUIHelper9*, Int16, HRESULT)
    ms_pinned_site_state : Proc(IShellUIHelper9*, VARIANT*, HRESULT)
    ms_enable_tile_notification_queue_for_square150x150 : Proc(IShellUIHelper9*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_wide310x150 : Proc(IShellUIHelper9*, Int16, HRESULT)
    ms_enable_tile_notification_queue_for_square310x310 : Proc(IShellUIHelper9*, Int16, HRESULT)
    ms_scheduled_tile_notification : Proc(IShellUIHelper9*, UInt8*, UInt8*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_remove_scheduled_tile_notification : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    ms_start_periodic_badge_update : Proc(IShellUIHelper9*, UInt8*, VARIANT, VARIANT, HRESULT)
    ms_stop_periodic_badge_update : Proc(IShellUIHelper9*, HRESULT)
    ms_launch_internet_options : Proc(IShellUIHelper9*, HRESULT)
    set_experimental_flag : Proc(IShellUIHelper9*, UInt8*, Int16, HRESULT)
    get_experimental_flag : Proc(IShellUIHelper9*, UInt8*, Int16*, HRESULT)
    set_experimental_value : Proc(IShellUIHelper9*, UInt8*, UInt32, HRESULT)
    get_experimental_value : Proc(IShellUIHelper9*, UInt8*, UInt32*, HRESULT)
    reset_all_experimental_flags_and_values : Proc(IShellUIHelper9*, HRESULT)
    get_need_ie_auto_launch_flag : Proc(IShellUIHelper9*, UInt8*, Int16*, HRESULT)
    set_need_ie_auto_launch_flag : Proc(IShellUIHelper9*, UInt8*, Int16, HRESULT)
    has_need_ie_auto_launch_flag : Proc(IShellUIHelper9*, UInt8*, Int16*, HRESULT)
    launch_ie : Proc(IShellUIHelper9*, UInt8*, Int16, HRESULT)
    get_cv_list_data : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    get_cv_list_local_data : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    get_emie_list_data : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    get_emie_list_local_data : Proc(IShellUIHelper9*, UInt8**, HRESULT)
    open_favorites_pane : Proc(IShellUIHelper9*, HRESULT)
    open_favorites_settings : Proc(IShellUIHelper9*, HRESULT)
    launch_in_hvsi : Proc(IShellUIHelper9*, UInt8*, HRESULT)
    get_os_sku : Proc(IShellUIHelper9*, UInt32*, HRESULT)
  end

  struct IShellUIHelper9
    lpVtbl : IShellUIHelper9VTbl*
  end

  struct DShellNameSpaceEventsVTbl
    query_interface : Proc(DShellNameSpaceEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DShellNameSpaceEvents*, UInt32)
    release : Proc(DShellNameSpaceEvents*, UInt32)
    get_type_info_count : Proc(DShellNameSpaceEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DShellNameSpaceEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DShellNameSpaceEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DShellNameSpaceEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct DShellNameSpaceEvents
    lpVtbl : DShellNameSpaceEventsVTbl*
  end

  struct IShellFavoritesNameSpaceVTbl
    query_interface : Proc(IShellFavoritesNameSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFavoritesNameSpace*, UInt32)
    release : Proc(IShellFavoritesNameSpace*, UInt32)
    get_type_info_count : Proc(IShellFavoritesNameSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IShellFavoritesNameSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellFavoritesNameSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellFavoritesNameSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    move_selection_up : Proc(IShellFavoritesNameSpace*, HRESULT)
    move_selection_down : Proc(IShellFavoritesNameSpace*, HRESULT)
    reset_sort : Proc(IShellFavoritesNameSpace*, HRESULT)
    new_folder : Proc(IShellFavoritesNameSpace*, HRESULT)
    synchronize : Proc(IShellFavoritesNameSpace*, HRESULT)
    import : Proc(IShellFavoritesNameSpace*, HRESULT)
    export : Proc(IShellFavoritesNameSpace*, HRESULT)
    invoke_context_menu_command : Proc(IShellFavoritesNameSpace*, UInt8*, HRESULT)
    move_selection_to : Proc(IShellFavoritesNameSpace*, HRESULT)
    get_subscriptions_enabled : Proc(IShellFavoritesNameSpace*, Int16*, HRESULT)
    create_subscription_for_selection : Proc(IShellFavoritesNameSpace*, Int16*, HRESULT)
    delete_subscription_for_selection : Proc(IShellFavoritesNameSpace*, Int16*, HRESULT)
    set_root : Proc(IShellFavoritesNameSpace*, UInt8*, HRESULT)
  end

  struct IShellFavoritesNameSpace
    lpVtbl : IShellFavoritesNameSpaceVTbl*
  end

  struct IShellNameSpaceVTbl
    query_interface : Proc(IShellNameSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellNameSpace*, UInt32)
    release : Proc(IShellNameSpace*, UInt32)
    get_type_info_count : Proc(IShellNameSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IShellNameSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellNameSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellNameSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    move_selection_up : Proc(IShellNameSpace*, HRESULT)
    move_selection_down : Proc(IShellNameSpace*, HRESULT)
    reset_sort : Proc(IShellNameSpace*, HRESULT)
    new_folder : Proc(IShellNameSpace*, HRESULT)
    synchronize : Proc(IShellNameSpace*, HRESULT)
    import : Proc(IShellNameSpace*, HRESULT)
    export : Proc(IShellNameSpace*, HRESULT)
    invoke_context_menu_command : Proc(IShellNameSpace*, UInt8*, HRESULT)
    move_selection_to : Proc(IShellNameSpace*, HRESULT)
    get_subscriptions_enabled : Proc(IShellNameSpace*, Int16*, HRESULT)
    create_subscription_for_selection : Proc(IShellNameSpace*, Int16*, HRESULT)
    delete_subscription_for_selection : Proc(IShellNameSpace*, Int16*, HRESULT)
    set_root : Proc(IShellNameSpace*, UInt8*, HRESULT)
    get_enum_options : Proc(IShellNameSpace*, Int32*, HRESULT)
    put_enum_options : Proc(IShellNameSpace*, Int32, HRESULT)
    get_selected_item : Proc(IShellNameSpace*, IDispatch*, HRESULT)
    put_selected_item : Proc(IShellNameSpace*, IDispatch, HRESULT)
    get_root : Proc(IShellNameSpace*, VARIANT*, HRESULT)
    put_root : Proc(IShellNameSpace*, VARIANT, HRESULT)
    get_depth : Proc(IShellNameSpace*, Int32*, HRESULT)
    put_depth : Proc(IShellNameSpace*, Int32, HRESULT)
    get_mode : Proc(IShellNameSpace*, UInt32*, HRESULT)
    put_mode : Proc(IShellNameSpace*, UInt32, HRESULT)
    get_flags : Proc(IShellNameSpace*, UInt32*, HRESULT)
    put_flags : Proc(IShellNameSpace*, UInt32, HRESULT)
    put_tv_flags : Proc(IShellNameSpace*, UInt32, HRESULT)
    get_tv_flags : Proc(IShellNameSpace*, UInt32*, HRESULT)
    get_columns : Proc(IShellNameSpace*, UInt8**, HRESULT)
    put_columns : Proc(IShellNameSpace*, UInt8*, HRESULT)
    get_count_view_types : Proc(IShellNameSpace*, Int32*, HRESULT)
    set_view_type : Proc(IShellNameSpace*, Int32, HRESULT)
    selected_items : Proc(IShellNameSpace*, IDispatch*, HRESULT)
    expand : Proc(IShellNameSpace*, VARIANT, Int32, HRESULT)
    unselect_all : Proc(IShellNameSpace*, HRESULT)
  end

  struct IShellNameSpace
    lpVtbl : IShellNameSpaceVTbl*
  end

  struct IScriptErrorListVTbl
    query_interface : Proc(IScriptErrorList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptErrorList*, UInt32)
    release : Proc(IScriptErrorList*, UInt32)
    get_type_info_count : Proc(IScriptErrorList*, UInt32*, HRESULT)
    get_type_info : Proc(IScriptErrorList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IScriptErrorList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IScriptErrorList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    advance_error : Proc(IScriptErrorList*, HRESULT)
    retreat_error : Proc(IScriptErrorList*, HRESULT)
    can_advance_error : Proc(IScriptErrorList*, LibC::BOOL*, HRESULT)
    can_retreat_error : Proc(IScriptErrorList*, LibC::BOOL*, HRESULT)
    get_error_line : Proc(IScriptErrorList*, Int32*, HRESULT)
    get_error_char : Proc(IScriptErrorList*, Int32*, HRESULT)
    get_error_code : Proc(IScriptErrorList*, Int32*, HRESULT)
    get_error_msg : Proc(IScriptErrorList*, UInt8**, HRESULT)
    get_error_url : Proc(IScriptErrorList*, UInt8**, HRESULT)
    get_always_show_lock_state : Proc(IScriptErrorList*, LibC::BOOL*, HRESULT)
    get_details_pane_open : Proc(IScriptErrorList*, LibC::BOOL*, HRESULT)
    set_details_pane_open : Proc(IScriptErrorList*, LibC::BOOL, HRESULT)
    get_per_error_display : Proc(IScriptErrorList*, LibC::BOOL*, HRESULT)
    set_per_error_display : Proc(IScriptErrorList*, LibC::BOOL, HRESULT)
  end

  struct IScriptErrorList
    lpVtbl : IScriptErrorListVTbl*
  end

  struct IFolderViewOCVTbl
    query_interface : Proc(IFolderViewOC*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFolderViewOC*, UInt32)
    release : Proc(IFolderViewOC*, UInt32)
    get_type_info_count : Proc(IFolderViewOC*, UInt32*, HRESULT)
    get_type_info : Proc(IFolderViewOC*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFolderViewOC*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFolderViewOC*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_folder_view : Proc(IFolderViewOC*, IDispatch, HRESULT)
  end

  struct IFolderViewOC
    lpVtbl : IFolderViewOCVTbl*
  end

  struct DShellFolderViewEventsVTbl
    query_interface : Proc(DShellFolderViewEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DShellFolderViewEvents*, UInt32)
    release : Proc(DShellFolderViewEvents*, UInt32)
    get_type_info_count : Proc(DShellFolderViewEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DShellFolderViewEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DShellFolderViewEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DShellFolderViewEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct DShellFolderViewEvents
    lpVtbl : DShellFolderViewEventsVTbl*
  end

  struct DFConstraintVTbl
    query_interface : Proc(DFConstraint*, Guid*, Void**, HRESULT)
    add_ref : Proc(DFConstraint*, UInt32)
    release : Proc(DFConstraint*, UInt32)
    get_type_info_count : Proc(DFConstraint*, UInt32*, HRESULT)
    get_type_info : Proc(DFConstraint*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DFConstraint*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DFConstraint*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(DFConstraint*, UInt8**, HRESULT)
    get_value : Proc(DFConstraint*, VARIANT*, HRESULT)
  end

  struct DFConstraint
    lpVtbl : DFConstraintVTbl*
  end

  struct FolderItemVTbl
    query_interface : Proc(FolderItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItem*, UInt32)
    release : Proc(FolderItem*, UInt32)
    get_type_info_count : Proc(FolderItem*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(FolderItem*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItem*, IDispatch*, HRESULT)
    get_name : Proc(FolderItem*, UInt8**, HRESULT)
    put_name : Proc(FolderItem*, UInt8*, HRESULT)
    get_path : Proc(FolderItem*, UInt8**, HRESULT)
    get_get_link : Proc(FolderItem*, IDispatch*, HRESULT)
    get_get_folder : Proc(FolderItem*, IDispatch*, HRESULT)
    get_is_link : Proc(FolderItem*, Int16*, HRESULT)
    get_is_folder : Proc(FolderItem*, Int16*, HRESULT)
    get_is_file_system : Proc(FolderItem*, Int16*, HRESULT)
    get_is_browsable : Proc(FolderItem*, Int16*, HRESULT)
    get_modify_date : Proc(FolderItem*, Float64*, HRESULT)
    put_modify_date : Proc(FolderItem*, Float64, HRESULT)
    get_size : Proc(FolderItem*, Int32*, HRESULT)
    get_type : Proc(FolderItem*, UInt8**, HRESULT)
    verbs : Proc(FolderItem*, FolderItemVerbs*, HRESULT)
    invoke_verb : Proc(FolderItem*, VARIANT, HRESULT)
  end

  struct FolderItem
    lpVtbl : FolderItemVTbl*
  end

  struct FolderItemsVTbl
    query_interface : Proc(FolderItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItems*, UInt32)
    release : Proc(FolderItems*, UInt32)
    get_type_info_count : Proc(FolderItems*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItems*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItems*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItems*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(FolderItems*, Int32*, HRESULT)
    get_application : Proc(FolderItems*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItems*, IDispatch*, HRESULT)
    item : Proc(FolderItems*, VARIANT, FolderItem*, HRESULT)
    _new_enum : Proc(FolderItems*, IUnknown*, HRESULT)
  end

  struct FolderItems
    lpVtbl : FolderItemsVTbl*
  end

  struct FolderItemVerbVTbl
    query_interface : Proc(FolderItemVerb*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItemVerb*, UInt32)
    release : Proc(FolderItemVerb*, UInt32)
    get_type_info_count : Proc(FolderItemVerb*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItemVerb*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItemVerb*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItemVerb*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(FolderItemVerb*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItemVerb*, IDispatch*, HRESULT)
    get_name : Proc(FolderItemVerb*, UInt8**, HRESULT)
    do_it : Proc(FolderItemVerb*, HRESULT)
  end

  struct FolderItemVerb
    lpVtbl : FolderItemVerbVTbl*
  end

  struct FolderItemVerbsVTbl
    query_interface : Proc(FolderItemVerbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItemVerbs*, UInt32)
    release : Proc(FolderItemVerbs*, UInt32)
    get_type_info_count : Proc(FolderItemVerbs*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItemVerbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItemVerbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItemVerbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(FolderItemVerbs*, Int32*, HRESULT)
    get_application : Proc(FolderItemVerbs*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItemVerbs*, IDispatch*, HRESULT)
    item : Proc(FolderItemVerbs*, VARIANT, FolderItemVerb*, HRESULT)
    _new_enum : Proc(FolderItemVerbs*, IUnknown*, HRESULT)
  end

  struct FolderItemVerbs
    lpVtbl : FolderItemVerbsVTbl*
  end

  struct FolderVTbl
    query_interface : Proc(Folder*, Guid*, Void**, HRESULT)
    add_ref : Proc(Folder*, UInt32)
    release : Proc(Folder*, UInt32)
    get_type_info_count : Proc(Folder*, UInt32*, HRESULT)
    get_type_info : Proc(Folder*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(Folder*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(Folder*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_title : Proc(Folder*, UInt8**, HRESULT)
    get_application : Proc(Folder*, IDispatch*, HRESULT)
    get_parent : Proc(Folder*, IDispatch*, HRESULT)
    get_parent_folder : Proc(Folder*, Folder*, HRESULT)
    items : Proc(Folder*, FolderItems*, HRESULT)
    parse_name : Proc(Folder*, UInt8*, FolderItem*, HRESULT)
    new_folder : Proc(Folder*, UInt8*, VARIANT, HRESULT)
    move_here : Proc(Folder*, VARIANT, VARIANT, HRESULT)
    copy_here : Proc(Folder*, VARIANT, VARIANT, HRESULT)
    get_details_of : Proc(Folder*, VARIANT, Int32, UInt8**, HRESULT)
  end

  struct Folder
    lpVtbl : FolderVTbl*
  end

  struct Folder2VTbl
    query_interface : Proc(Folder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(Folder2*, UInt32)
    release : Proc(Folder2*, UInt32)
    get_type_info_count : Proc(Folder2*, UInt32*, HRESULT)
    get_type_info : Proc(Folder2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(Folder2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(Folder2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_title : Proc(Folder2*, UInt8**, HRESULT)
    get_application : Proc(Folder2*, IDispatch*, HRESULT)
    get_parent : Proc(Folder2*, IDispatch*, HRESULT)
    get_parent_folder : Proc(Folder2*, Folder*, HRESULT)
    items : Proc(Folder2*, FolderItems*, HRESULT)
    parse_name : Proc(Folder2*, UInt8*, FolderItem*, HRESULT)
    new_folder : Proc(Folder2*, UInt8*, VARIANT, HRESULT)
    move_here : Proc(Folder2*, VARIANT, VARIANT, HRESULT)
    copy_here : Proc(Folder2*, VARIANT, VARIANT, HRESULT)
    get_details_of : Proc(Folder2*, VARIANT, Int32, UInt8**, HRESULT)
    get_self : Proc(Folder2*, FolderItem*, HRESULT)
    get_offline_status : Proc(Folder2*, Int32*, HRESULT)
    synchronize : Proc(Folder2*, HRESULT)
    get_have_to_show_web_view_barricade : Proc(Folder2*, Int16*, HRESULT)
    dismissed_web_view_barricade : Proc(Folder2*, HRESULT)
  end

  struct Folder2
    lpVtbl : Folder2VTbl*
  end

  struct Folder3VTbl
    query_interface : Proc(Folder3*, Guid*, Void**, HRESULT)
    add_ref : Proc(Folder3*, UInt32)
    release : Proc(Folder3*, UInt32)
    get_type_info_count : Proc(Folder3*, UInt32*, HRESULT)
    get_type_info : Proc(Folder3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(Folder3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(Folder3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_title : Proc(Folder3*, UInt8**, HRESULT)
    get_application : Proc(Folder3*, IDispatch*, HRESULT)
    get_parent : Proc(Folder3*, IDispatch*, HRESULT)
    get_parent_folder : Proc(Folder3*, Folder*, HRESULT)
    items : Proc(Folder3*, FolderItems*, HRESULT)
    parse_name : Proc(Folder3*, UInt8*, FolderItem*, HRESULT)
    new_folder : Proc(Folder3*, UInt8*, VARIANT, HRESULT)
    move_here : Proc(Folder3*, VARIANT, VARIANT, HRESULT)
    copy_here : Proc(Folder3*, VARIANT, VARIANT, HRESULT)
    get_details_of : Proc(Folder3*, VARIANT, Int32, UInt8**, HRESULT)
    get_self : Proc(Folder3*, FolderItem*, HRESULT)
    get_offline_status : Proc(Folder3*, Int32*, HRESULT)
    synchronize : Proc(Folder3*, HRESULT)
    get_have_to_show_web_view_barricade : Proc(Folder3*, Int16*, HRESULT)
    dismissed_web_view_barricade : Proc(Folder3*, HRESULT)
    get_show_web_view_barricade : Proc(Folder3*, Int16*, HRESULT)
    put_show_web_view_barricade : Proc(Folder3*, Int16, HRESULT)
  end

  struct Folder3
    lpVtbl : Folder3VTbl*
  end

  struct FolderItem2VTbl
    query_interface : Proc(FolderItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItem2*, UInt32)
    release : Proc(FolderItem2*, UInt32)
    get_type_info_count : Proc(FolderItem2*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(FolderItem2*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItem2*, IDispatch*, HRESULT)
    get_name : Proc(FolderItem2*, UInt8**, HRESULT)
    put_name : Proc(FolderItem2*, UInt8*, HRESULT)
    get_path : Proc(FolderItem2*, UInt8**, HRESULT)
    get_get_link : Proc(FolderItem2*, IDispatch*, HRESULT)
    get_get_folder : Proc(FolderItem2*, IDispatch*, HRESULT)
    get_is_link : Proc(FolderItem2*, Int16*, HRESULT)
    get_is_folder : Proc(FolderItem2*, Int16*, HRESULT)
    get_is_file_system : Proc(FolderItem2*, Int16*, HRESULT)
    get_is_browsable : Proc(FolderItem2*, Int16*, HRESULT)
    get_modify_date : Proc(FolderItem2*, Float64*, HRESULT)
    put_modify_date : Proc(FolderItem2*, Float64, HRESULT)
    get_size : Proc(FolderItem2*, Int32*, HRESULT)
    get_type : Proc(FolderItem2*, UInt8**, HRESULT)
    verbs : Proc(FolderItem2*, FolderItemVerbs*, HRESULT)
    invoke_verb : Proc(FolderItem2*, VARIANT, HRESULT)
    invoke_verb_ex : Proc(FolderItem2*, VARIANT, VARIANT, HRESULT)
    extended_property : Proc(FolderItem2*, UInt8*, VARIANT*, HRESULT)
  end

  struct FolderItem2
    lpVtbl : FolderItem2VTbl*
  end

  struct FolderItems2VTbl
    query_interface : Proc(FolderItems2*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItems2*, UInt32)
    release : Proc(FolderItems2*, UInt32)
    get_type_info_count : Proc(FolderItems2*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItems2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItems2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItems2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(FolderItems2*, Int32*, HRESULT)
    get_application : Proc(FolderItems2*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItems2*, IDispatch*, HRESULT)
    item : Proc(FolderItems2*, VARIANT, FolderItem*, HRESULT)
    _new_enum : Proc(FolderItems2*, IUnknown*, HRESULT)
    invoke_verb_ex : Proc(FolderItems2*, VARIANT, VARIANT, HRESULT)
  end

  struct FolderItems2
    lpVtbl : FolderItems2VTbl*
  end

  struct FolderItems3VTbl
    query_interface : Proc(FolderItems3*, Guid*, Void**, HRESULT)
    add_ref : Proc(FolderItems3*, UInt32)
    release : Proc(FolderItems3*, UInt32)
    get_type_info_count : Proc(FolderItems3*, UInt32*, HRESULT)
    get_type_info : Proc(FolderItems3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(FolderItems3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(FolderItems3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(FolderItems3*, Int32*, HRESULT)
    get_application : Proc(FolderItems3*, IDispatch*, HRESULT)
    get_parent : Proc(FolderItems3*, IDispatch*, HRESULT)
    item : Proc(FolderItems3*, VARIANT, FolderItem*, HRESULT)
    _new_enum : Proc(FolderItems3*, IUnknown*, HRESULT)
    invoke_verb_ex : Proc(FolderItems3*, VARIANT, VARIANT, HRESULT)
    filter : Proc(FolderItems3*, Int32, UInt8*, HRESULT)
    get_verbs : Proc(FolderItems3*, FolderItemVerbs*, HRESULT)
  end

  struct FolderItems3
    lpVtbl : FolderItems3VTbl*
  end

  struct IShellLinkDualVTbl
    query_interface : Proc(IShellLinkDual*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLinkDual*, UInt32)
    release : Proc(IShellLinkDual*, UInt32)
    get_type_info_count : Proc(IShellLinkDual*, UInt32*, HRESULT)
    get_type_info : Proc(IShellLinkDual*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellLinkDual*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellLinkDual*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_path : Proc(IShellLinkDual*, UInt8**, HRESULT)
    put_path : Proc(IShellLinkDual*, UInt8*, HRESULT)
    get_description : Proc(IShellLinkDual*, UInt8**, HRESULT)
    put_description : Proc(IShellLinkDual*, UInt8*, HRESULT)
    get_working_directory : Proc(IShellLinkDual*, UInt8**, HRESULT)
    put_working_directory : Proc(IShellLinkDual*, UInt8*, HRESULT)
    get_arguments : Proc(IShellLinkDual*, UInt8**, HRESULT)
    put_arguments : Proc(IShellLinkDual*, UInt8*, HRESULT)
    get_hotkey : Proc(IShellLinkDual*, Int32*, HRESULT)
    put_hotkey : Proc(IShellLinkDual*, Int32, HRESULT)
    get_show_command : Proc(IShellLinkDual*, Int32*, HRESULT)
    put_show_command : Proc(IShellLinkDual*, Int32, HRESULT)
    resolve : Proc(IShellLinkDual*, Int32, HRESULT)
    get_icon_location : Proc(IShellLinkDual*, UInt8**, Int32*, HRESULT)
    set_icon_location : Proc(IShellLinkDual*, UInt8*, Int32, HRESULT)
    save : Proc(IShellLinkDual*, VARIANT, HRESULT)
  end

  struct IShellLinkDual
    lpVtbl : IShellLinkDualVTbl*
  end

  struct IShellLinkDual2VTbl
    query_interface : Proc(IShellLinkDual2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellLinkDual2*, UInt32)
    release : Proc(IShellLinkDual2*, UInt32)
    get_type_info_count : Proc(IShellLinkDual2*, UInt32*, HRESULT)
    get_type_info : Proc(IShellLinkDual2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellLinkDual2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellLinkDual2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_path : Proc(IShellLinkDual2*, UInt8**, HRESULT)
    put_path : Proc(IShellLinkDual2*, UInt8*, HRESULT)
    get_description : Proc(IShellLinkDual2*, UInt8**, HRESULT)
    put_description : Proc(IShellLinkDual2*, UInt8*, HRESULT)
    get_working_directory : Proc(IShellLinkDual2*, UInt8**, HRESULT)
    put_working_directory : Proc(IShellLinkDual2*, UInt8*, HRESULT)
    get_arguments : Proc(IShellLinkDual2*, UInt8**, HRESULT)
    put_arguments : Proc(IShellLinkDual2*, UInt8*, HRESULT)
    get_hotkey : Proc(IShellLinkDual2*, Int32*, HRESULT)
    put_hotkey : Proc(IShellLinkDual2*, Int32, HRESULT)
    get_show_command : Proc(IShellLinkDual2*, Int32*, HRESULT)
    put_show_command : Proc(IShellLinkDual2*, Int32, HRESULT)
    resolve : Proc(IShellLinkDual2*, Int32, HRESULT)
    get_icon_location : Proc(IShellLinkDual2*, UInt8**, Int32*, HRESULT)
    set_icon_location : Proc(IShellLinkDual2*, UInt8*, Int32, HRESULT)
    save : Proc(IShellLinkDual2*, VARIANT, HRESULT)
    get_target : Proc(IShellLinkDual2*, FolderItem*, HRESULT)
  end

  struct IShellLinkDual2
    lpVtbl : IShellLinkDual2VTbl*
  end

  struct IShellFolderViewDualVTbl
    query_interface : Proc(IShellFolderViewDual*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderViewDual*, UInt32)
    release : Proc(IShellFolderViewDual*, UInt32)
    get_type_info_count : Proc(IShellFolderViewDual*, UInt32*, HRESULT)
    get_type_info : Proc(IShellFolderViewDual*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellFolderViewDual*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellFolderViewDual*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellFolderViewDual*, IDispatch*, HRESULT)
    get_parent : Proc(IShellFolderViewDual*, IDispatch*, HRESULT)
    get_folder : Proc(IShellFolderViewDual*, Folder*, HRESULT)
    selected_items : Proc(IShellFolderViewDual*, FolderItems*, HRESULT)
    get_focused_item : Proc(IShellFolderViewDual*, FolderItem*, HRESULT)
    select_item : Proc(IShellFolderViewDual*, VARIANT*, Int32, HRESULT)
    popup_item_menu : Proc(IShellFolderViewDual*, FolderItem, VARIANT, VARIANT, UInt8**, HRESULT)
    get_script : Proc(IShellFolderViewDual*, IDispatch*, HRESULT)
    get_view_options : Proc(IShellFolderViewDual*, Int32*, HRESULT)
  end

  struct IShellFolderViewDual
    lpVtbl : IShellFolderViewDualVTbl*
  end

  struct IShellFolderViewDual2VTbl
    query_interface : Proc(IShellFolderViewDual2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderViewDual2*, UInt32)
    release : Proc(IShellFolderViewDual2*, UInt32)
    get_type_info_count : Proc(IShellFolderViewDual2*, UInt32*, HRESULT)
    get_type_info : Proc(IShellFolderViewDual2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellFolderViewDual2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellFolderViewDual2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellFolderViewDual2*, IDispatch*, HRESULT)
    get_parent : Proc(IShellFolderViewDual2*, IDispatch*, HRESULT)
    get_folder : Proc(IShellFolderViewDual2*, Folder*, HRESULT)
    selected_items : Proc(IShellFolderViewDual2*, FolderItems*, HRESULT)
    get_focused_item : Proc(IShellFolderViewDual2*, FolderItem*, HRESULT)
    select_item : Proc(IShellFolderViewDual2*, VARIANT*, Int32, HRESULT)
    popup_item_menu : Proc(IShellFolderViewDual2*, FolderItem, VARIANT, VARIANT, UInt8**, HRESULT)
    get_script : Proc(IShellFolderViewDual2*, IDispatch*, HRESULT)
    get_view_options : Proc(IShellFolderViewDual2*, Int32*, HRESULT)
    get_current_view_mode : Proc(IShellFolderViewDual2*, UInt32*, HRESULT)
    put_current_view_mode : Proc(IShellFolderViewDual2*, UInt32, HRESULT)
    select_item_relative : Proc(IShellFolderViewDual2*, Int32, HRESULT)
  end

  struct IShellFolderViewDual2
    lpVtbl : IShellFolderViewDual2VTbl*
  end

  struct IShellFolderViewDual3VTbl
    query_interface : Proc(IShellFolderViewDual3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderViewDual3*, UInt32)
    release : Proc(IShellFolderViewDual3*, UInt32)
    get_type_info_count : Proc(IShellFolderViewDual3*, UInt32*, HRESULT)
    get_type_info : Proc(IShellFolderViewDual3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellFolderViewDual3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellFolderViewDual3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellFolderViewDual3*, IDispatch*, HRESULT)
    get_parent : Proc(IShellFolderViewDual3*, IDispatch*, HRESULT)
    get_folder : Proc(IShellFolderViewDual3*, Folder*, HRESULT)
    selected_items : Proc(IShellFolderViewDual3*, FolderItems*, HRESULT)
    get_focused_item : Proc(IShellFolderViewDual3*, FolderItem*, HRESULT)
    select_item : Proc(IShellFolderViewDual3*, VARIANT*, Int32, HRESULT)
    popup_item_menu : Proc(IShellFolderViewDual3*, FolderItem, VARIANT, VARIANT, UInt8**, HRESULT)
    get_script : Proc(IShellFolderViewDual3*, IDispatch*, HRESULT)
    get_view_options : Proc(IShellFolderViewDual3*, Int32*, HRESULT)
    get_current_view_mode : Proc(IShellFolderViewDual3*, UInt32*, HRESULT)
    put_current_view_mode : Proc(IShellFolderViewDual3*, UInt32, HRESULT)
    select_item_relative : Proc(IShellFolderViewDual3*, Int32, HRESULT)
    get_group_by : Proc(IShellFolderViewDual3*, UInt8**, HRESULT)
    put_group_by : Proc(IShellFolderViewDual3*, UInt8*, HRESULT)
    get_folder_flags : Proc(IShellFolderViewDual3*, UInt32*, HRESULT)
    put_folder_flags : Proc(IShellFolderViewDual3*, UInt32, HRESULT)
    get_sort_columns : Proc(IShellFolderViewDual3*, UInt8**, HRESULT)
    put_sort_columns : Proc(IShellFolderViewDual3*, UInt8*, HRESULT)
    put_icon_size : Proc(IShellFolderViewDual3*, Int32, HRESULT)
    get_icon_size : Proc(IShellFolderViewDual3*, Int32*, HRESULT)
    filter_view : Proc(IShellFolderViewDual3*, UInt8*, HRESULT)
  end

  struct IShellFolderViewDual3
    lpVtbl : IShellFolderViewDual3VTbl*
  end

  struct IShellDispatchVTbl
    query_interface : Proc(IShellDispatch*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch*, UInt32)
    release : Proc(IShellDispatch*, UInt32)
    get_type_info_count : Proc(IShellDispatch*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch*, HRESULT)
    file_run : Proc(IShellDispatch*, HRESULT)
    cascade_windows : Proc(IShellDispatch*, HRESULT)
    tile_vertically : Proc(IShellDispatch*, HRESULT)
    tile_horizontally : Proc(IShellDispatch*, HRESULT)
    shutdown_windows : Proc(IShellDispatch*, HRESULT)
    suspend : Proc(IShellDispatch*, HRESULT)
    eject_pc : Proc(IShellDispatch*, HRESULT)
    set_time : Proc(IShellDispatch*, HRESULT)
    tray_properties : Proc(IShellDispatch*, HRESULT)
    help : Proc(IShellDispatch*, HRESULT)
    find_files : Proc(IShellDispatch*, HRESULT)
    find_computer : Proc(IShellDispatch*, HRESULT)
    refresh_menu : Proc(IShellDispatch*, HRESULT)
    control_panel_item : Proc(IShellDispatch*, UInt8*, HRESULT)
  end

  struct IShellDispatch
    lpVtbl : IShellDispatchVTbl*
  end

  struct IShellDispatch2VTbl
    query_interface : Proc(IShellDispatch2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch2*, UInt32)
    release : Proc(IShellDispatch2*, UInt32)
    get_type_info_count : Proc(IShellDispatch2*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch2*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch2*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch2*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch2*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch2*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch2*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch2*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch2*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch2*, HRESULT)
    file_run : Proc(IShellDispatch2*, HRESULT)
    cascade_windows : Proc(IShellDispatch2*, HRESULT)
    tile_vertically : Proc(IShellDispatch2*, HRESULT)
    tile_horizontally : Proc(IShellDispatch2*, HRESULT)
    shutdown_windows : Proc(IShellDispatch2*, HRESULT)
    suspend : Proc(IShellDispatch2*, HRESULT)
    eject_pc : Proc(IShellDispatch2*, HRESULT)
    set_time : Proc(IShellDispatch2*, HRESULT)
    tray_properties : Proc(IShellDispatch2*, HRESULT)
    help : Proc(IShellDispatch2*, HRESULT)
    find_files : Proc(IShellDispatch2*, HRESULT)
    find_computer : Proc(IShellDispatch2*, HRESULT)
    refresh_menu : Proc(IShellDispatch2*, HRESULT)
    control_panel_item : Proc(IShellDispatch2*, UInt8*, HRESULT)
    is_restricted : Proc(IShellDispatch2*, UInt8*, UInt8*, Int32*, HRESULT)
    shell_execute : Proc(IShellDispatch2*, UInt8*, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    find_printer : Proc(IShellDispatch2*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_system_information : Proc(IShellDispatch2*, UInt8*, VARIANT*, HRESULT)
    service_start : Proc(IShellDispatch2*, UInt8*, VARIANT, VARIANT*, HRESULT)
    service_stop : Proc(IShellDispatch2*, UInt8*, VARIANT, VARIANT*, HRESULT)
    is_service_running : Proc(IShellDispatch2*, UInt8*, VARIANT*, HRESULT)
    can_start_stop_service : Proc(IShellDispatch2*, UInt8*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IShellDispatch2*, UInt8*, VARIANT, VARIANT*, HRESULT)
  end

  struct IShellDispatch2
    lpVtbl : IShellDispatch2VTbl*
  end

  struct IShellDispatch3VTbl
    query_interface : Proc(IShellDispatch3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch3*, UInt32)
    release : Proc(IShellDispatch3*, UInt32)
    get_type_info_count : Proc(IShellDispatch3*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch3*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch3*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch3*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch3*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch3*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch3*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch3*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch3*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch3*, HRESULT)
    file_run : Proc(IShellDispatch3*, HRESULT)
    cascade_windows : Proc(IShellDispatch3*, HRESULT)
    tile_vertically : Proc(IShellDispatch3*, HRESULT)
    tile_horizontally : Proc(IShellDispatch3*, HRESULT)
    shutdown_windows : Proc(IShellDispatch3*, HRESULT)
    suspend : Proc(IShellDispatch3*, HRESULT)
    eject_pc : Proc(IShellDispatch3*, HRESULT)
    set_time : Proc(IShellDispatch3*, HRESULT)
    tray_properties : Proc(IShellDispatch3*, HRESULT)
    help : Proc(IShellDispatch3*, HRESULT)
    find_files : Proc(IShellDispatch3*, HRESULT)
    find_computer : Proc(IShellDispatch3*, HRESULT)
    refresh_menu : Proc(IShellDispatch3*, HRESULT)
    control_panel_item : Proc(IShellDispatch3*, UInt8*, HRESULT)
    is_restricted : Proc(IShellDispatch3*, UInt8*, UInt8*, Int32*, HRESULT)
    shell_execute : Proc(IShellDispatch3*, UInt8*, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    find_printer : Proc(IShellDispatch3*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_system_information : Proc(IShellDispatch3*, UInt8*, VARIANT*, HRESULT)
    service_start : Proc(IShellDispatch3*, UInt8*, VARIANT, VARIANT*, HRESULT)
    service_stop : Proc(IShellDispatch3*, UInt8*, VARIANT, VARIANT*, HRESULT)
    is_service_running : Proc(IShellDispatch3*, UInt8*, VARIANT*, HRESULT)
    can_start_stop_service : Proc(IShellDispatch3*, UInt8*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IShellDispatch3*, UInt8*, VARIANT, VARIANT*, HRESULT)
    add_to_recent : Proc(IShellDispatch3*, VARIANT, UInt8*, HRESULT)
  end

  struct IShellDispatch3
    lpVtbl : IShellDispatch3VTbl*
  end

  struct IShellDispatch4VTbl
    query_interface : Proc(IShellDispatch4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch4*, UInt32)
    release : Proc(IShellDispatch4*, UInt32)
    get_type_info_count : Proc(IShellDispatch4*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch4*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch4*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch4*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch4*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch4*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch4*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch4*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch4*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch4*, HRESULT)
    file_run : Proc(IShellDispatch4*, HRESULT)
    cascade_windows : Proc(IShellDispatch4*, HRESULT)
    tile_vertically : Proc(IShellDispatch4*, HRESULT)
    tile_horizontally : Proc(IShellDispatch4*, HRESULT)
    shutdown_windows : Proc(IShellDispatch4*, HRESULT)
    suspend : Proc(IShellDispatch4*, HRESULT)
    eject_pc : Proc(IShellDispatch4*, HRESULT)
    set_time : Proc(IShellDispatch4*, HRESULT)
    tray_properties : Proc(IShellDispatch4*, HRESULT)
    help : Proc(IShellDispatch4*, HRESULT)
    find_files : Proc(IShellDispatch4*, HRESULT)
    find_computer : Proc(IShellDispatch4*, HRESULT)
    refresh_menu : Proc(IShellDispatch4*, HRESULT)
    control_panel_item : Proc(IShellDispatch4*, UInt8*, HRESULT)
    is_restricted : Proc(IShellDispatch4*, UInt8*, UInt8*, Int32*, HRESULT)
    shell_execute : Proc(IShellDispatch4*, UInt8*, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    find_printer : Proc(IShellDispatch4*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_system_information : Proc(IShellDispatch4*, UInt8*, VARIANT*, HRESULT)
    service_start : Proc(IShellDispatch4*, UInt8*, VARIANT, VARIANT*, HRESULT)
    service_stop : Proc(IShellDispatch4*, UInt8*, VARIANT, VARIANT*, HRESULT)
    is_service_running : Proc(IShellDispatch4*, UInt8*, VARIANT*, HRESULT)
    can_start_stop_service : Proc(IShellDispatch4*, UInt8*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IShellDispatch4*, UInt8*, VARIANT, VARIANT*, HRESULT)
    add_to_recent : Proc(IShellDispatch4*, VARIANT, UInt8*, HRESULT)
    windows_security : Proc(IShellDispatch4*, HRESULT)
    toggle_desktop : Proc(IShellDispatch4*, HRESULT)
    explorer_policy : Proc(IShellDispatch4*, UInt8*, VARIANT*, HRESULT)
    get_setting : Proc(IShellDispatch4*, Int32, Int16*, HRESULT)
  end

  struct IShellDispatch4
    lpVtbl : IShellDispatch4VTbl*
  end

  struct IShellDispatch5VTbl
    query_interface : Proc(IShellDispatch5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch5*, UInt32)
    release : Proc(IShellDispatch5*, UInt32)
    get_type_info_count : Proc(IShellDispatch5*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch5*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch5*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch5*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch5*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch5*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch5*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch5*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch5*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch5*, HRESULT)
    file_run : Proc(IShellDispatch5*, HRESULT)
    cascade_windows : Proc(IShellDispatch5*, HRESULT)
    tile_vertically : Proc(IShellDispatch5*, HRESULT)
    tile_horizontally : Proc(IShellDispatch5*, HRESULT)
    shutdown_windows : Proc(IShellDispatch5*, HRESULT)
    suspend : Proc(IShellDispatch5*, HRESULT)
    eject_pc : Proc(IShellDispatch5*, HRESULT)
    set_time : Proc(IShellDispatch5*, HRESULT)
    tray_properties : Proc(IShellDispatch5*, HRESULT)
    help : Proc(IShellDispatch5*, HRESULT)
    find_files : Proc(IShellDispatch5*, HRESULT)
    find_computer : Proc(IShellDispatch5*, HRESULT)
    refresh_menu : Proc(IShellDispatch5*, HRESULT)
    control_panel_item : Proc(IShellDispatch5*, UInt8*, HRESULT)
    is_restricted : Proc(IShellDispatch5*, UInt8*, UInt8*, Int32*, HRESULT)
    shell_execute : Proc(IShellDispatch5*, UInt8*, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    find_printer : Proc(IShellDispatch5*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_system_information : Proc(IShellDispatch5*, UInt8*, VARIANT*, HRESULT)
    service_start : Proc(IShellDispatch5*, UInt8*, VARIANT, VARIANT*, HRESULT)
    service_stop : Proc(IShellDispatch5*, UInt8*, VARIANT, VARIANT*, HRESULT)
    is_service_running : Proc(IShellDispatch5*, UInt8*, VARIANT*, HRESULT)
    can_start_stop_service : Proc(IShellDispatch5*, UInt8*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IShellDispatch5*, UInt8*, VARIANT, VARIANT*, HRESULT)
    add_to_recent : Proc(IShellDispatch5*, VARIANT, UInt8*, HRESULT)
    windows_security : Proc(IShellDispatch5*, HRESULT)
    toggle_desktop : Proc(IShellDispatch5*, HRESULT)
    explorer_policy : Proc(IShellDispatch5*, UInt8*, VARIANT*, HRESULT)
    get_setting : Proc(IShellDispatch5*, Int32, Int16*, HRESULT)
    window_switcher : Proc(IShellDispatch5*, HRESULT)
  end

  struct IShellDispatch5
    lpVtbl : IShellDispatch5VTbl*
  end

  struct IShellDispatch6VTbl
    query_interface : Proc(IShellDispatch6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDispatch6*, UInt32)
    release : Proc(IShellDispatch6*, UInt32)
    get_type_info_count : Proc(IShellDispatch6*, UInt32*, HRESULT)
    get_type_info : Proc(IShellDispatch6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IShellDispatch6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IShellDispatch6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_application : Proc(IShellDispatch6*, IDispatch*, HRESULT)
    get_parent : Proc(IShellDispatch6*, IDispatch*, HRESULT)
    name_space : Proc(IShellDispatch6*, VARIANT, Folder*, HRESULT)
    browse_for_folder : Proc(IShellDispatch6*, Int32, UInt8*, Int32, VARIANT, Folder*, HRESULT)
    windows : Proc(IShellDispatch6*, IDispatch*, HRESULT)
    open : Proc(IShellDispatch6*, VARIANT, HRESULT)
    explore : Proc(IShellDispatch6*, VARIANT, HRESULT)
    minimize_all : Proc(IShellDispatch6*, HRESULT)
    undo_minimize_all : Proc(IShellDispatch6*, HRESULT)
    file_run : Proc(IShellDispatch6*, HRESULT)
    cascade_windows : Proc(IShellDispatch6*, HRESULT)
    tile_vertically : Proc(IShellDispatch6*, HRESULT)
    tile_horizontally : Proc(IShellDispatch6*, HRESULT)
    shutdown_windows : Proc(IShellDispatch6*, HRESULT)
    suspend : Proc(IShellDispatch6*, HRESULT)
    eject_pc : Proc(IShellDispatch6*, HRESULT)
    set_time : Proc(IShellDispatch6*, HRESULT)
    tray_properties : Proc(IShellDispatch6*, HRESULT)
    help : Proc(IShellDispatch6*, HRESULT)
    find_files : Proc(IShellDispatch6*, HRESULT)
    find_computer : Proc(IShellDispatch6*, HRESULT)
    refresh_menu : Proc(IShellDispatch6*, HRESULT)
    control_panel_item : Proc(IShellDispatch6*, UInt8*, HRESULT)
    is_restricted : Proc(IShellDispatch6*, UInt8*, UInt8*, Int32*, HRESULT)
    shell_execute : Proc(IShellDispatch6*, UInt8*, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    find_printer : Proc(IShellDispatch6*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_system_information : Proc(IShellDispatch6*, UInt8*, VARIANT*, HRESULT)
    service_start : Proc(IShellDispatch6*, UInt8*, VARIANT, VARIANT*, HRESULT)
    service_stop : Proc(IShellDispatch6*, UInt8*, VARIANT, VARIANT*, HRESULT)
    is_service_running : Proc(IShellDispatch6*, UInt8*, VARIANT*, HRESULT)
    can_start_stop_service : Proc(IShellDispatch6*, UInt8*, VARIANT*, HRESULT)
    show_browser_bar : Proc(IShellDispatch6*, UInt8*, VARIANT, VARIANT*, HRESULT)
    add_to_recent : Proc(IShellDispatch6*, VARIANT, UInt8*, HRESULT)
    windows_security : Proc(IShellDispatch6*, HRESULT)
    toggle_desktop : Proc(IShellDispatch6*, HRESULT)
    explorer_policy : Proc(IShellDispatch6*, UInt8*, VARIANT*, HRESULT)
    get_setting : Proc(IShellDispatch6*, Int32, Int16*, HRESULT)
    window_switcher : Proc(IShellDispatch6*, HRESULT)
    search_command : Proc(IShellDispatch6*, HRESULT)
  end

  struct IShellDispatch6
    lpVtbl : IShellDispatch6VTbl*
  end

  struct IFileSearchBandVTbl
    query_interface : Proc(IFileSearchBand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSearchBand*, UInt32)
    release : Proc(IFileSearchBand*, UInt32)
    get_type_info_count : Proc(IFileSearchBand*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSearchBand*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSearchBand*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSearchBand*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_focus : Proc(IFileSearchBand*, HRESULT)
    set_search_parameters : Proc(IFileSearchBand*, UInt8**, Int16, VARIANT*, VARIANT*, HRESULT)
    get_search_id : Proc(IFileSearchBand*, UInt8**, HRESULT)
    get_scope : Proc(IFileSearchBand*, VARIANT*, HRESULT)
    get_query_file : Proc(IFileSearchBand*, VARIANT*, HRESULT)
  end

  struct IFileSearchBand
    lpVtbl : IFileSearchBandVTbl*
  end

  struct IWebWizardHostVTbl
    query_interface : Proc(IWebWizardHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebWizardHost*, UInt32)
    release : Proc(IWebWizardHost*, UInt32)
    get_type_info_count : Proc(IWebWizardHost*, UInt32*, HRESULT)
    get_type_info : Proc(IWebWizardHost*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebWizardHost*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebWizardHost*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    final_back : Proc(IWebWizardHost*, HRESULT)
    final_next : Proc(IWebWizardHost*, HRESULT)
    cancel : Proc(IWebWizardHost*, HRESULT)
    put_caption : Proc(IWebWizardHost*, UInt8*, HRESULT)
    get_caption : Proc(IWebWizardHost*, UInt8**, HRESULT)
    put_property : Proc(IWebWizardHost*, UInt8*, VARIANT*, HRESULT)
    get_property : Proc(IWebWizardHost*, UInt8*, VARIANT*, HRESULT)
    set_wizard_buttons : Proc(IWebWizardHost*, Int16, Int16, Int16, HRESULT)
    set_header_text : Proc(IWebWizardHost*, UInt8*, UInt8*, HRESULT)
  end

  struct IWebWizardHost
    lpVtbl : IWebWizardHostVTbl*
  end

  struct IWebWizardHost2VTbl
    query_interface : Proc(IWebWizardHost2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebWizardHost2*, UInt32)
    release : Proc(IWebWizardHost2*, UInt32)
    get_type_info_count : Proc(IWebWizardHost2*, UInt32*, HRESULT)
    get_type_info : Proc(IWebWizardHost2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebWizardHost2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebWizardHost2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    final_back : Proc(IWebWizardHost2*, HRESULT)
    final_next : Proc(IWebWizardHost2*, HRESULT)
    cancel : Proc(IWebWizardHost2*, HRESULT)
    put_caption : Proc(IWebWizardHost2*, UInt8*, HRESULT)
    get_caption : Proc(IWebWizardHost2*, UInt8**, HRESULT)
    put_property : Proc(IWebWizardHost2*, UInt8*, VARIANT*, HRESULT)
    get_property : Proc(IWebWizardHost2*, UInt8*, VARIANT*, HRESULT)
    set_wizard_buttons : Proc(IWebWizardHost2*, Int16, Int16, Int16, HRESULT)
    set_header_text : Proc(IWebWizardHost2*, UInt8*, UInt8*, HRESULT)
    sign_string : Proc(IWebWizardHost2*, UInt8*, UInt8**, HRESULT)
  end

  struct IWebWizardHost2
    lpVtbl : IWebWizardHost2VTbl*
  end

  struct INewWDEventsVTbl
    query_interface : Proc(INewWDEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(INewWDEvents*, UInt32)
    release : Proc(INewWDEvents*, UInt32)
    get_type_info_count : Proc(INewWDEvents*, UInt32*, HRESULT)
    get_type_info : Proc(INewWDEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(INewWDEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(INewWDEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    final_back : Proc(INewWDEvents*, HRESULT)
    final_next : Proc(INewWDEvents*, HRESULT)
    cancel : Proc(INewWDEvents*, HRESULT)
    put_caption : Proc(INewWDEvents*, UInt8*, HRESULT)
    get_caption : Proc(INewWDEvents*, UInt8**, HRESULT)
    put_property : Proc(INewWDEvents*, UInt8*, VARIANT*, HRESULT)
    get_property : Proc(INewWDEvents*, UInt8*, VARIANT*, HRESULT)
    set_wizard_buttons : Proc(INewWDEvents*, Int16, Int16, Int16, HRESULT)
    set_header_text : Proc(INewWDEvents*, UInt8*, UInt8*, HRESULT)
    passport_authenticate : Proc(INewWDEvents*, UInt8*, Int16*, HRESULT)
  end

  struct INewWDEvents
    lpVtbl : INewWDEventsVTbl*
  end

  struct IAutoCompleteVTbl
    query_interface : Proc(IAutoComplete*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAutoComplete*, UInt32)
    release : Proc(IAutoComplete*, UInt32)
    init : Proc(IAutoComplete*, LibC::HANDLE, IUnknown, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    enable : Proc(IAutoComplete*, LibC::BOOL, HRESULT)
  end

  struct IAutoComplete
    lpVtbl : IAutoCompleteVTbl*
  end

  struct IAutoComplete2VTbl
    query_interface : Proc(IAutoComplete2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAutoComplete2*, UInt32)
    release : Proc(IAutoComplete2*, UInt32)
    init : Proc(IAutoComplete2*, LibC::HANDLE, IUnknown, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    enable : Proc(IAutoComplete2*, LibC::BOOL, HRESULT)
    set_options : Proc(IAutoComplete2*, UInt32, HRESULT)
    get_options : Proc(IAutoComplete2*, UInt32*, HRESULT)
  end

  struct IAutoComplete2
    lpVtbl : IAutoComplete2VTbl*
  end

  struct IEnumACStringVTbl
    query_interface : Proc(IEnumACString*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumACString*, UInt32)
    release : Proc(IEnumACString*, UInt32)
    next : Proc(IEnumACString*, UInt32, LibC::LPWSTR*, UInt32*, HRESULT)
    skip : Proc(IEnumACString*, UInt32, HRESULT)
    reset : Proc(IEnumACString*, HRESULT)
    clone : Proc(IEnumACString*, IEnumString*, HRESULT)
    next_item : Proc(IEnumACString*, Char*, UInt32, UInt32*, HRESULT)
    set_enum_options : Proc(IEnumACString*, UInt32, HRESULT)
    get_enum_options : Proc(IEnumACString*, UInt32*, HRESULT)
  end

  struct IEnumACString
    lpVtbl : IEnumACStringVTbl*
  end

  struct IDataObjectAsyncCapabilityVTbl
    query_interface : Proc(IDataObjectAsyncCapability*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataObjectAsyncCapability*, UInt32)
    release : Proc(IDataObjectAsyncCapability*, UInt32)
    set_async_mode : Proc(IDataObjectAsyncCapability*, LibC::BOOL, HRESULT)
    get_async_mode : Proc(IDataObjectAsyncCapability*, LibC::BOOL*, HRESULT)
    start_operation : Proc(IDataObjectAsyncCapability*, IBindCtx, HRESULT)
    in_operation : Proc(IDataObjectAsyncCapability*, LibC::BOOL*, HRESULT)
    end_operation : Proc(IDataObjectAsyncCapability*, HRESULT, IBindCtx, UInt32, HRESULT)
  end

  struct IDataObjectAsyncCapability
    lpVtbl : IDataObjectAsyncCapabilityVTbl*
  end

  struct IExtractIconAVTbl
    query_interface : Proc(IExtractIconA*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtractIconA*, UInt32)
    release : Proc(IExtractIconA*, UInt32)
    get_icon_location : Proc(IExtractIconA*, UInt32, UInt8*, UInt32, Int32*, UInt32*, HRESULT)
    extract : Proc(IExtractIconA*, PSTR, UInt32, HANDLE*, HANDLE*, UInt32, HRESULT)
  end

  struct IExtractIconA
    lpVtbl : IExtractIconAVTbl*
  end

  struct IExtractIconWVTbl
    query_interface : Proc(IExtractIconW*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtractIconW*, UInt32)
    release : Proc(IExtractIconW*, UInt32)
    get_icon_location : Proc(IExtractIconW*, UInt32, Char*, UInt32, Int32*, UInt32*, HRESULT)
    extract : Proc(IExtractIconW*, LibC::LPWSTR, UInt32, HANDLE*, HANDLE*, UInt32, HRESULT)
  end

  struct IExtractIconW
    lpVtbl : IExtractIconWVTbl*
  end

  struct IShellIconOverlayManagerVTbl
    query_interface : Proc(IShellIconOverlayManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellIconOverlayManager*, UInt32)
    release : Proc(IShellIconOverlayManager*, UInt32)
    get_file_overlay_info : Proc(IShellIconOverlayManager*, LibC::LPWSTR, UInt32, Int32*, UInt32, HRESULT)
    get_reserved_overlay_info : Proc(IShellIconOverlayManager*, LibC::LPWSTR, UInt32, Int32*, UInt32, Int32, HRESULT)
    refresh_overlay_images : Proc(IShellIconOverlayManager*, UInt32, HRESULT)
    load_nonloaded_overlay_identifiers : Proc(IShellIconOverlayManager*, HRESULT)
    overlay_index_from_image_index : Proc(IShellIconOverlayManager*, Int32, Int32*, LibC::BOOL, HRESULT)
  end

  struct IShellIconOverlayManager
    lpVtbl : IShellIconOverlayManagerVTbl*
  end

  struct IShellIconOverlayVTbl
    query_interface : Proc(IShellIconOverlay*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellIconOverlay*, UInt32)
    release : Proc(IShellIconOverlay*, UInt32)
    get_overlay_index : Proc(IShellIconOverlay*, ITEMIDLIST*, Int32*, HRESULT)
    get_overlay_icon_index : Proc(IShellIconOverlay*, ITEMIDLIST*, Int32*, HRESULT)
  end

  struct IShellIconOverlay
    lpVtbl : IShellIconOverlayVTbl*
  end

  struct IURLSearchHookVTbl
    query_interface : Proc(IURLSearchHook*, Guid*, Void**, HRESULT)
    add_ref : Proc(IURLSearchHook*, UInt32)
    release : Proc(IURLSearchHook*, UInt32)
    translate : Proc(IURLSearchHook*, Char*, UInt32, HRESULT)
  end

  struct IURLSearchHook
    lpVtbl : IURLSearchHookVTbl*
  end

  struct ISearchContextVTbl
    query_interface : Proc(ISearchContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISearchContext*, UInt32)
    release : Proc(ISearchContext*, UInt32)
    get_search_url : Proc(ISearchContext*, UInt8**, HRESULT)
    get_search_text : Proc(ISearchContext*, UInt8**, HRESULT)
    get_search_style : Proc(ISearchContext*, UInt32*, HRESULT)
  end

  struct ISearchContext
    lpVtbl : ISearchContextVTbl*
  end

  struct IURLSearchHook2VTbl
    query_interface : Proc(IURLSearchHook2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IURLSearchHook2*, UInt32)
    release : Proc(IURLSearchHook2*, UInt32)
    translate : Proc(IURLSearchHook2*, Char*, UInt32, HRESULT)
    translate_with_search_context : Proc(IURLSearchHook2*, Char*, UInt32, ISearchContext, HRESULT)
  end

  struct IURLSearchHook2
    lpVtbl : IURLSearchHook2VTbl*
  end

  struct IShellDetailsVTbl
    query_interface : Proc(IShellDetails*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellDetails*, UInt32)
    release : Proc(IShellDetails*, UInt32)
    get_details_of : Proc(IShellDetails*, ITEMIDLIST*, UInt32, SHELLDETAILS*, HRESULT)
    column_click : Proc(IShellDetails*, UInt32, HRESULT)
  end

  struct IShellDetails
    lpVtbl : IShellDetailsVTbl*
  end

  struct IObjMgrVTbl
    query_interface : Proc(IObjMgr*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjMgr*, UInt32)
    release : Proc(IObjMgr*, UInt32)
    append : Proc(IObjMgr*, IUnknown, HRESULT)
    remove : Proc(IObjMgr*, IUnknown, HRESULT)
  end

  struct IObjMgr
    lpVtbl : IObjMgrVTbl*
  end

  struct IACListVTbl
    query_interface : Proc(IACList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IACList*, UInt32)
    release : Proc(IACList*, UInt32)
    expand : Proc(IACList*, LibC::LPWSTR, HRESULT)
  end

  struct IACList
    lpVtbl : IACListVTbl*
  end

  struct IACList2VTbl
    query_interface : Proc(IACList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IACList2*, UInt32)
    release : Proc(IACList2*, UInt32)
    expand : Proc(IACList2*, LibC::LPWSTR, HRESULT)
    set_options : Proc(IACList2*, UInt32, HRESULT)
    get_options : Proc(IACList2*, UInt32*, HRESULT)
  end

  struct IACList2
    lpVtbl : IACList2VTbl*
  end

  struct IProgressDialogVTbl
    query_interface : Proc(IProgressDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProgressDialog*, UInt32)
    release : Proc(IProgressDialog*, UInt32)
    start_progress_dialog : Proc(IProgressDialog*, LibC::HANDLE, IUnknown, UInt32, Void*, HRESULT)
    stop_progress_dialog : Proc(IProgressDialog*, HRESULT)
    set_title : Proc(IProgressDialog*, LibC::LPWSTR, HRESULT)
    set_animation : Proc(IProgressDialog*, HINSTANCE, UInt32, HRESULT)
    has_user_cancelled : Proc(IProgressDialog*, LibC::BOOL)
    set_progress : Proc(IProgressDialog*, UInt32, UInt32, HRESULT)
    set_progress64 : Proc(IProgressDialog*, UInt64, UInt64, HRESULT)
    set_line : Proc(IProgressDialog*, UInt32, LibC::LPWSTR, LibC::BOOL, Void*, HRESULT)
    set_cancel_msg : Proc(IProgressDialog*, LibC::LPWSTR, Void*, HRESULT)
    timer : Proc(IProgressDialog*, UInt32, Void*, HRESULT)
  end

  struct IProgressDialog
    lpVtbl : IProgressDialogVTbl*
  end

  struct IDockingWindowSiteVTbl
    query_interface : Proc(IDockingWindowSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDockingWindowSite*, UInt32)
    release : Proc(IDockingWindowSite*, UInt32)
    get_window : Proc(IDockingWindowSite*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDockingWindowSite*, LibC::BOOL, HRESULT)
    get_border_dw : Proc(IDockingWindowSite*, IUnknown, RECT*, HRESULT)
    request_border_space_dw : Proc(IDockingWindowSite*, IUnknown, RECT*, HRESULT)
    set_border_space_dw : Proc(IDockingWindowSite*, IUnknown, RECT*, HRESULT)
  end

  struct IDockingWindowSite
    lpVtbl : IDockingWindowSiteVTbl*
  end

  struct IShellChangeNotifyVTbl
    query_interface : Proc(IShellChangeNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellChangeNotify*, UInt32)
    release : Proc(IShellChangeNotify*, UInt32)
    on_change : Proc(IShellChangeNotify*, Int32, ITEMIDLIST*, ITEMIDLIST*, HRESULT)
  end

  struct IShellChangeNotify
    lpVtbl : IShellChangeNotifyVTbl*
  end

  struct IQueryInfoVTbl
    query_interface : Proc(IQueryInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryInfo*, UInt32)
    release : Proc(IQueryInfo*, UInt32)
    get_info_tip : Proc(IQueryInfo*, QITIPF_FLAGS, LibC::LPWSTR*, HRESULT)
    get_info_flags : Proc(IQueryInfo*, UInt32*, HRESULT)
  end

  struct IQueryInfo
    lpVtbl : IQueryInfoVTbl*
  end

  struct IShellFolderViewCBVTbl
    query_interface : Proc(IShellFolderViewCB*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderViewCB*, UInt32)
    release : Proc(IShellFolderViewCB*, UInt32)
    message_sfvcb : Proc(IShellFolderViewCB*, SFVM_MESSAGE_ID, LibC::UINT_PTR, LPARAM, HRESULT)
  end

  struct IShellFolderViewCB
    lpVtbl : IShellFolderViewCBVTbl*
  end

  struct IShellFolderViewVTbl
    query_interface : Proc(IShellFolderView*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderView*, UInt32)
    release : Proc(IShellFolderView*, UInt32)
    rearrange : Proc(IShellFolderView*, LPARAM, HRESULT)
    get_arrange_param : Proc(IShellFolderView*, LPARAM*, HRESULT)
    arrange_grid : Proc(IShellFolderView*, HRESULT)
    auto_arrange : Proc(IShellFolderView*, HRESULT)
    get_auto_arrange : Proc(IShellFolderView*, HRESULT)
    add_object : Proc(IShellFolderView*, ITEMIDLIST*, UInt32*, HRESULT)
    get_object : Proc(IShellFolderView*, ITEMIDLIST**, UInt32, HRESULT)
    remove_object : Proc(IShellFolderView*, ITEMIDLIST*, UInt32*, HRESULT)
    get_object_count : Proc(IShellFolderView*, UInt32*, HRESULT)
    set_object_count : Proc(IShellFolderView*, UInt32, UInt32, HRESULT)
    update_object : Proc(IShellFolderView*, ITEMIDLIST*, ITEMIDLIST*, UInt32*, HRESULT)
    refresh_object : Proc(IShellFolderView*, ITEMIDLIST*, UInt32*, HRESULT)
    set_redraw : Proc(IShellFolderView*, LibC::BOOL, HRESULT)
    get_selected_count : Proc(IShellFolderView*, UInt32*, HRESULT)
    get_selected_objects : Proc(IShellFolderView*, ITEMIDLIST***, UInt32*, HRESULT)
    is_drop_on_source : Proc(IShellFolderView*, IDropTarget, HRESULT)
    get_drag_point : Proc(IShellFolderView*, POINT*, HRESULT)
    get_drop_point : Proc(IShellFolderView*, POINT*, HRESULT)
    move_icons : Proc(IShellFolderView*, IDataObject, HRESULT)
    set_item_pos : Proc(IShellFolderView*, ITEMIDLIST*, POINT*, HRESULT)
    is_bk_drop_target : Proc(IShellFolderView*, IDropTarget, HRESULT)
    set_clipboard : Proc(IShellFolderView*, LibC::BOOL, HRESULT)
    set_points : Proc(IShellFolderView*, IDataObject, HRESULT)
    get_item_spacing : Proc(IShellFolderView*, ITEMSPACING*, HRESULT)
    set_callback : Proc(IShellFolderView*, IShellFolderViewCB, IShellFolderViewCB*, HRESULT)
    select : Proc(IShellFolderView*, SFVS_SELECT, HRESULT)
    query_support : Proc(IShellFolderView*, UInt32*, HRESULT)
    set_automation_object : Proc(IShellFolderView*, IDispatch, HRESULT)
  end

  struct IShellFolderView
    lpVtbl : IShellFolderViewVTbl*
  end

  struct INamedPropertyBagVTbl
    query_interface : Proc(INamedPropertyBag*, Guid*, Void**, HRESULT)
    add_ref : Proc(INamedPropertyBag*, UInt32)
    release : Proc(INamedPropertyBag*, UInt32)
    read_property_npb : Proc(INamedPropertyBag*, LibC::LPWSTR, LibC::LPWSTR, PROPVARIANT*, HRESULT)
    write_property_npb : Proc(INamedPropertyBag*, LibC::LPWSTR, LibC::LPWSTR, PROPVARIANT*, HRESULT)
    remove_property_npb : Proc(INamedPropertyBag*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct INamedPropertyBag
    lpVtbl : INamedPropertyBagVTbl*
  end

  struct INewShortcutHookAVTbl
    query_interface : Proc(INewShortcutHookA*, Guid*, Void**, HRESULT)
    add_ref : Proc(INewShortcutHookA*, UInt32)
    release : Proc(INewShortcutHookA*, UInt32)
    set_referent : Proc(INewShortcutHookA*, PSTR, LibC::HANDLE, HRESULT)
    get_referent : Proc(INewShortcutHookA*, UInt8*, Int32, HRESULT)
    set_folder : Proc(INewShortcutHookA*, PSTR, HRESULT)
    get_folder : Proc(INewShortcutHookA*, UInt8*, Int32, HRESULT)
    get_name : Proc(INewShortcutHookA*, UInt8*, Int32, HRESULT)
    get_extension : Proc(INewShortcutHookA*, UInt8*, Int32, HRESULT)
  end

  struct INewShortcutHookA
    lpVtbl : INewShortcutHookAVTbl*
  end

  struct INewShortcutHookWVTbl
    query_interface : Proc(INewShortcutHookW*, Guid*, Void**, HRESULT)
    add_ref : Proc(INewShortcutHookW*, UInt32)
    release : Proc(INewShortcutHookW*, UInt32)
    set_referent : Proc(INewShortcutHookW*, LibC::LPWSTR, LibC::HANDLE, HRESULT)
    get_referent : Proc(INewShortcutHookW*, Char*, Int32, HRESULT)
    set_folder : Proc(INewShortcutHookW*, LibC::LPWSTR, HRESULT)
    get_folder : Proc(INewShortcutHookW*, Char*, Int32, HRESULT)
    get_name : Proc(INewShortcutHookW*, Char*, Int32, HRESULT)
    get_extension : Proc(INewShortcutHookW*, Char*, Int32, HRESULT)
  end

  struct INewShortcutHookW
    lpVtbl : INewShortcutHookWVTbl*
  end

  struct ICopyHookAVTbl
    query_interface : Proc(ICopyHookA*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICopyHookA*, UInt32)
    release : Proc(ICopyHookA*, UInt32)
    copy_callback : Proc(ICopyHookA*, LibC::HANDLE, UInt32, UInt32, PSTR, UInt32, PSTR, UInt32, UInt32)
  end

  struct ICopyHookA
    lpVtbl : ICopyHookAVTbl*
  end

  struct ICopyHookWVTbl
    query_interface : Proc(ICopyHookW*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICopyHookW*, UInt32)
    release : Proc(ICopyHookW*, UInt32)
    copy_callback : Proc(ICopyHookW*, LibC::HANDLE, UInt32, UInt32, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32)
  end

  struct ICopyHookW
    lpVtbl : ICopyHookWVTbl*
  end

  struct ICurrentWorkingDirectoryVTbl
    query_interface : Proc(ICurrentWorkingDirectory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICurrentWorkingDirectory*, UInt32)
    release : Proc(ICurrentWorkingDirectory*, UInt32)
    get_directory : Proc(ICurrentWorkingDirectory*, Char*, UInt32, HRESULT)
    set_directory : Proc(ICurrentWorkingDirectory*, LibC::LPWSTR, HRESULT)
  end

  struct ICurrentWorkingDirectory
    lpVtbl : ICurrentWorkingDirectoryVTbl*
  end

  struct IDockingWindowFrameVTbl
    query_interface : Proc(IDockingWindowFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDockingWindowFrame*, UInt32)
    release : Proc(IDockingWindowFrame*, UInt32)
    get_window : Proc(IDockingWindowFrame*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDockingWindowFrame*, LibC::BOOL, HRESULT)
    add_toolbar : Proc(IDockingWindowFrame*, IUnknown, LibC::LPWSTR, UInt32, HRESULT)
    remove_toolbar : Proc(IDockingWindowFrame*, IUnknown, UInt32, HRESULT)
    find_toolbar : Proc(IDockingWindowFrame*, LibC::LPWSTR, Guid*, Void**, HRESULT)
  end

  struct IDockingWindowFrame
    lpVtbl : IDockingWindowFrameVTbl*
  end

  struct IThumbnailCaptureVTbl
    query_interface : Proc(IThumbnailCapture*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailCapture*, UInt32)
    release : Proc(IThumbnailCapture*, UInt32)
    capture_thumbnail : Proc(IThumbnailCapture*, SIZE*, IUnknown, HBITMAP*, HRESULT)
  end

  struct IThumbnailCapture
    lpVtbl : IThumbnailCaptureVTbl*
  end

  struct IShellFolderBandVTbl
    query_interface : Proc(IShellFolderBand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellFolderBand*, UInt32)
    release : Proc(IShellFolderBand*, UInt32)
    initialize_sfb : Proc(IShellFolderBand*, IShellFolder, ITEMIDLIST*, HRESULT)
    set_band_info_sfb : Proc(IShellFolderBand*, BANDINFOSFB*, HRESULT)
    get_band_info_sfb : Proc(IShellFolderBand*, BANDINFOSFB*, HRESULT)
  end

  struct IShellFolderBand
    lpVtbl : IShellFolderBandVTbl*
  end

  struct IDeskBarClientVTbl
    query_interface : Proc(IDeskBarClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeskBarClient*, UInt32)
    release : Proc(IDeskBarClient*, UInt32)
    get_window : Proc(IDeskBarClient*, HANDLE*, HRESULT)
    context_sensitive_help : Proc(IDeskBarClient*, LibC::BOOL, HRESULT)
    set_desk_bar_site : Proc(IDeskBarClient*, IUnknown, HRESULT)
    set_mode_dbc : Proc(IDeskBarClient*, UInt32, HRESULT)
    ui_activate_dbc : Proc(IDeskBarClient*, UInt32, HRESULT)
    get_size : Proc(IDeskBarClient*, UInt32, RECT*, HRESULT)
  end

  struct IDeskBarClient
    lpVtbl : IDeskBarClientVTbl*
  end

  struct IColumnProviderVTbl
    query_interface : Proc(IColumnProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IColumnProvider*, UInt32)
    release : Proc(IColumnProvider*, UInt32)
    initialize : Proc(IColumnProvider*, SHCOLUMNINIT*, HRESULT)
    get_column_info : Proc(IColumnProvider*, UInt32, SHCOLUMNINFO*, HRESULT)
    get_item_data : Proc(IColumnProvider*, PROPERTYKEY*, SHCOLUMNDATA*, VARIANT*, HRESULT)
  end

  struct IColumnProvider
    lpVtbl : IColumnProviderVTbl*
  end

  struct IDocViewSiteVTbl
    query_interface : Proc(IDocViewSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocViewSite*, UInt32)
    release : Proc(IDocViewSite*, UInt32)
    on_set_title : Proc(IDocViewSite*, VARIANT*, HRESULT)
  end

  struct IDocViewSite
    lpVtbl : IDocViewSiteVTbl*
  end

  struct IInitializeObjectVTbl
    query_interface : Proc(IInitializeObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInitializeObject*, UInt32)
    release : Proc(IInitializeObject*, UInt32)
    initialize : Proc(IInitializeObject*, HRESULT)
  end

  struct IInitializeObject
    lpVtbl : IInitializeObjectVTbl*
  end

  struct IBanneredBarVTbl
    query_interface : Proc(IBanneredBar*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBanneredBar*, UInt32)
    release : Proc(IBanneredBar*, UInt32)
    set_icon_size : Proc(IBanneredBar*, UInt32, HRESULT)
    get_icon_size : Proc(IBanneredBar*, UInt32*, HRESULT)
    set_bitmap : Proc(IBanneredBar*, HBITMAP, HRESULT)
    get_bitmap : Proc(IBanneredBar*, HBITMAP*, HRESULT)
  end

  struct IBanneredBar
    lpVtbl : IBanneredBarVTbl*
  end

  struct IQueryAssociationsVTbl
    query_interface : Proc(IQueryAssociations*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryAssociations*, UInt32)
    release : Proc(IQueryAssociations*, UInt32)
    init : Proc(IQueryAssociations*, UInt32, LibC::LPWSTR, HKEY, LibC::HANDLE, HRESULT)
    get_string : Proc(IQueryAssociations*, UInt32, ASSOCSTR, LibC::LPWSTR, Char*, UInt32*, HRESULT)
    get_key : Proc(IQueryAssociations*, UInt32, ASSOCKEY, LibC::LPWSTR, HKEY*, HRESULT)
    get_data : Proc(IQueryAssociations*, UInt32, ASSOCDATA, LibC::LPWSTR, Void*, UInt32*, HRESULT)
    get_enum : Proc(IQueryAssociations*, UInt32, ASSOCENUM, LibC::LPWSTR, Guid*, Void**, HRESULT)
  end

  struct IQueryAssociations
    lpVtbl : IQueryAssociationsVTbl*
  end

  struct IShellAppVTbl
    query_interface : Proc(IShellApp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellApp*, UInt32)
    release : Proc(IShellApp*, UInt32)
    get_app_info : Proc(IShellApp*, APPINFODATA*, HRESULT)
    get_possible_actions : Proc(IShellApp*, UInt32*, HRESULT)
    get_slow_app_info : Proc(IShellApp*, SLOWAPPINFO*, HRESULT)
    get_cached_slow_app_info : Proc(IShellApp*, SLOWAPPINFO*, HRESULT)
    is_installed : Proc(IShellApp*, HRESULT)
  end

  struct IShellApp
    lpVtbl : IShellAppVTbl*
  end

  struct IPublishedAppVTbl
    query_interface : Proc(IPublishedApp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPublishedApp*, UInt32)
    release : Proc(IPublishedApp*, UInt32)
    get_app_info : Proc(IPublishedApp*, APPINFODATA*, HRESULT)
    get_possible_actions : Proc(IPublishedApp*, UInt32*, HRESULT)
    get_slow_app_info : Proc(IPublishedApp*, SLOWAPPINFO*, HRESULT)
    get_cached_slow_app_info : Proc(IPublishedApp*, SLOWAPPINFO*, HRESULT)
    is_installed : Proc(IPublishedApp*, HRESULT)
    install : Proc(IPublishedApp*, SYSTEMTIME*, HRESULT)
    get_published_app_info : Proc(IPublishedApp*, PUBAPPINFO*, HRESULT)
    unschedule : Proc(IPublishedApp*, HRESULT)
  end

  struct IPublishedApp
    lpVtbl : IPublishedAppVTbl*
  end

  struct IPublishedApp2VTbl
    query_interface : Proc(IPublishedApp2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPublishedApp2*, UInt32)
    release : Proc(IPublishedApp2*, UInt32)
    get_app_info : Proc(IPublishedApp2*, APPINFODATA*, HRESULT)
    get_possible_actions : Proc(IPublishedApp2*, UInt32*, HRESULT)
    get_slow_app_info : Proc(IPublishedApp2*, SLOWAPPINFO*, HRESULT)
    get_cached_slow_app_info : Proc(IPublishedApp2*, SLOWAPPINFO*, HRESULT)
    is_installed : Proc(IPublishedApp2*, HRESULT)
    install : Proc(IPublishedApp2*, SYSTEMTIME*, HRESULT)
    get_published_app_info : Proc(IPublishedApp2*, PUBAPPINFO*, HRESULT)
    unschedule : Proc(IPublishedApp2*, HRESULT)
    install2 : Proc(IPublishedApp2*, SYSTEMTIME*, LibC::HANDLE, HRESULT)
  end

  struct IPublishedApp2
    lpVtbl : IPublishedApp2VTbl*
  end

  struct IEnumPublishedAppsVTbl
    query_interface : Proc(IEnumPublishedApps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPublishedApps*, UInt32)
    release : Proc(IEnumPublishedApps*, UInt32)
    next : Proc(IEnumPublishedApps*, IPublishedApp*, HRESULT)
    reset : Proc(IEnumPublishedApps*, HRESULT)
  end

  struct IEnumPublishedApps
    lpVtbl : IEnumPublishedAppsVTbl*
  end

  struct IAppPublisherVTbl
    query_interface : Proc(IAppPublisher*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAppPublisher*, UInt32)
    release : Proc(IAppPublisher*, UInt32)
    get_number_of_categories : Proc(IAppPublisher*, UInt32*, HRESULT)
    get_categories : Proc(IAppPublisher*, APPCATEGORYINFOLIST*, HRESULT)
    get_number_of_apps : Proc(IAppPublisher*, UInt32*, HRESULT)
    enum_apps : Proc(IAppPublisher*, Guid*, IEnumPublishedApps*, HRESULT)
  end

  struct IAppPublisher
    lpVtbl : IAppPublisherVTbl*
  end

  struct ICredentialProviderCredentialVTbl
    query_interface : Proc(ICredentialProviderCredential*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderCredential*, UInt32)
    release : Proc(ICredentialProviderCredential*, UInt32)
    advise : Proc(ICredentialProviderCredential*, ICredentialProviderCredentialEvents, HRESULT)
    un_advise : Proc(ICredentialProviderCredential*, HRESULT)
    set_selected : Proc(ICredentialProviderCredential*, LibC::BOOL*, HRESULT)
    set_deselected : Proc(ICredentialProviderCredential*, HRESULT)
    get_field_state : Proc(ICredentialProviderCredential*, UInt32, CREDENTIAL_PROVIDER_FIELD_STATE*, CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE*, HRESULT)
    get_string_value : Proc(ICredentialProviderCredential*, UInt32, LibC::LPWSTR*, HRESULT)
    get_bitmap_value : Proc(ICredentialProviderCredential*, UInt32, HBITMAP*, HRESULT)
    get_checkbox_value : Proc(ICredentialProviderCredential*, UInt32, LibC::BOOL*, LibC::LPWSTR*, HRESULT)
    get_submit_button_value : Proc(ICredentialProviderCredential*, UInt32, UInt32*, HRESULT)
    get_combo_box_value_count : Proc(ICredentialProviderCredential*, UInt32, UInt32*, UInt32*, HRESULT)
    get_combo_box_value_at : Proc(ICredentialProviderCredential*, UInt32, UInt32, LibC::LPWSTR*, HRESULT)
    set_string_value : Proc(ICredentialProviderCredential*, UInt32, LibC::LPWSTR, HRESULT)
    set_checkbox_value : Proc(ICredentialProviderCredential*, UInt32, LibC::BOOL, HRESULT)
    set_combo_box_selected_value : Proc(ICredentialProviderCredential*, UInt32, UInt32, HRESULT)
    command_link_clicked : Proc(ICredentialProviderCredential*, UInt32, HRESULT)
    get_serialization : Proc(ICredentialProviderCredential*, CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
    report_result : Proc(ICredentialProviderCredential*, NTSTATUS, NTSTATUS, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
  end

  struct ICredentialProviderCredential
    lpVtbl : ICredentialProviderCredentialVTbl*
  end

  struct IQueryContinueWithStatusVTbl
    query_interface : Proc(IQueryContinueWithStatus*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueryContinueWithStatus*, UInt32)
    release : Proc(IQueryContinueWithStatus*, UInt32)
    query_continue : Proc(IQueryContinueWithStatus*, HRESULT)
    set_status_message : Proc(IQueryContinueWithStatus*, LibC::LPWSTR, HRESULT)
  end

  struct IQueryContinueWithStatus
    lpVtbl : IQueryContinueWithStatusVTbl*
  end

  struct IConnectableCredentialProviderCredentialVTbl
    query_interface : Proc(IConnectableCredentialProviderCredential*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConnectableCredentialProviderCredential*, UInt32)
    release : Proc(IConnectableCredentialProviderCredential*, UInt32)
    advise : Proc(IConnectableCredentialProviderCredential*, ICredentialProviderCredentialEvents, HRESULT)
    un_advise : Proc(IConnectableCredentialProviderCredential*, HRESULT)
    set_selected : Proc(IConnectableCredentialProviderCredential*, LibC::BOOL*, HRESULT)
    set_deselected : Proc(IConnectableCredentialProviderCredential*, HRESULT)
    get_field_state : Proc(IConnectableCredentialProviderCredential*, UInt32, CREDENTIAL_PROVIDER_FIELD_STATE*, CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE*, HRESULT)
    get_string_value : Proc(IConnectableCredentialProviderCredential*, UInt32, LibC::LPWSTR*, HRESULT)
    get_bitmap_value : Proc(IConnectableCredentialProviderCredential*, UInt32, HBITMAP*, HRESULT)
    get_checkbox_value : Proc(IConnectableCredentialProviderCredential*, UInt32, LibC::BOOL*, LibC::LPWSTR*, HRESULT)
    get_submit_button_value : Proc(IConnectableCredentialProviderCredential*, UInt32, UInt32*, HRESULT)
    get_combo_box_value_count : Proc(IConnectableCredentialProviderCredential*, UInt32, UInt32*, UInt32*, HRESULT)
    get_combo_box_value_at : Proc(IConnectableCredentialProviderCredential*, UInt32, UInt32, LibC::LPWSTR*, HRESULT)
    set_string_value : Proc(IConnectableCredentialProviderCredential*, UInt32, LibC::LPWSTR, HRESULT)
    set_checkbox_value : Proc(IConnectableCredentialProviderCredential*, UInt32, LibC::BOOL, HRESULT)
    set_combo_box_selected_value : Proc(IConnectableCredentialProviderCredential*, UInt32, UInt32, HRESULT)
    command_link_clicked : Proc(IConnectableCredentialProviderCredential*, UInt32, HRESULT)
    get_serialization : Proc(IConnectableCredentialProviderCredential*, CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
    report_result : Proc(IConnectableCredentialProviderCredential*, NTSTATUS, NTSTATUS, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
    connect : Proc(IConnectableCredentialProviderCredential*, IQueryContinueWithStatus, HRESULT)
    disconnect : Proc(IConnectableCredentialProviderCredential*, HRESULT)
  end

  struct IConnectableCredentialProviderCredential
    lpVtbl : IConnectableCredentialProviderCredentialVTbl*
  end

  struct ICredentialProviderCredentialEventsVTbl
    query_interface : Proc(ICredentialProviderCredentialEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderCredentialEvents*, UInt32)
    release : Proc(ICredentialProviderCredentialEvents*, UInt32)
    set_field_state : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, CREDENTIAL_PROVIDER_FIELD_STATE, HRESULT)
    set_field_interactive_state : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE, HRESULT)
    set_field_string : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, LibC::LPWSTR, HRESULT)
    set_field_checkbox : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, LibC::BOOL, LibC::LPWSTR, HRESULT)
    set_field_bitmap : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, HBITMAP, HRESULT)
    set_field_combo_box_selected_item : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    delete_field_combo_box_item : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    append_field_combo_box_item : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, LibC::LPWSTR, HRESULT)
    set_field_submit_button : Proc(ICredentialProviderCredentialEvents*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    on_creating_window : Proc(ICredentialProviderCredentialEvents*, HANDLE*, HRESULT)
  end

  struct ICredentialProviderCredentialEvents
    lpVtbl : ICredentialProviderCredentialEventsVTbl*
  end

  struct ICredentialProviderVTbl
    query_interface : Proc(ICredentialProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProvider*, UInt32)
    release : Proc(ICredentialProvider*, UInt32)
    set_usage_scenario : Proc(ICredentialProvider*, CREDENTIAL_PROVIDER_USAGE_SCENARIO, UInt32, HRESULT)
    set_serialization : Proc(ICredentialProvider*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, HRESULT)
    advise : Proc(ICredentialProvider*, ICredentialProviderEvents, LibC::UINT_PTR, HRESULT)
    un_advise : Proc(ICredentialProvider*, HRESULT)
    get_field_descriptor_count : Proc(ICredentialProvider*, UInt32*, HRESULT)
    get_field_descriptor_at : Proc(ICredentialProvider*, UInt32, CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR**, HRESULT)
    get_credential_count : Proc(ICredentialProvider*, UInt32*, UInt32*, LibC::BOOL*, HRESULT)
    get_credential_at : Proc(ICredentialProvider*, UInt32, ICredentialProviderCredential*, HRESULT)
  end

  struct ICredentialProvider
    lpVtbl : ICredentialProviderVTbl*
  end

  struct ICredentialProviderEventsVTbl
    query_interface : Proc(ICredentialProviderEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderEvents*, UInt32)
    release : Proc(ICredentialProviderEvents*, UInt32)
    credentials_changed : Proc(ICredentialProviderEvents*, LibC::UINT_PTR, HRESULT)
  end

  struct ICredentialProviderEvents
    lpVtbl : ICredentialProviderEventsVTbl*
  end

  struct ICredentialProviderFilterVTbl
    query_interface : Proc(ICredentialProviderFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderFilter*, UInt32)
    release : Proc(ICredentialProviderFilter*, UInt32)
    filter : Proc(ICredentialProviderFilter*, CREDENTIAL_PROVIDER_USAGE_SCENARIO, UInt32, Guid*, LibC::BOOL*, UInt32, HRESULT)
    update_remote_credential : Proc(ICredentialProviderFilter*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, HRESULT)
  end

  struct ICredentialProviderFilter
    lpVtbl : ICredentialProviderFilterVTbl*
  end

  struct ICredentialProviderCredential2VTbl
    query_interface : Proc(ICredentialProviderCredential2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderCredential2*, UInt32)
    release : Proc(ICredentialProviderCredential2*, UInt32)
    advise : Proc(ICredentialProviderCredential2*, ICredentialProviderCredentialEvents, HRESULT)
    un_advise : Proc(ICredentialProviderCredential2*, HRESULT)
    set_selected : Proc(ICredentialProviderCredential2*, LibC::BOOL*, HRESULT)
    set_deselected : Proc(ICredentialProviderCredential2*, HRESULT)
    get_field_state : Proc(ICredentialProviderCredential2*, UInt32, CREDENTIAL_PROVIDER_FIELD_STATE*, CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE*, HRESULT)
    get_string_value : Proc(ICredentialProviderCredential2*, UInt32, LibC::LPWSTR*, HRESULT)
    get_bitmap_value : Proc(ICredentialProviderCredential2*, UInt32, HBITMAP*, HRESULT)
    get_checkbox_value : Proc(ICredentialProviderCredential2*, UInt32, LibC::BOOL*, LibC::LPWSTR*, HRESULT)
    get_submit_button_value : Proc(ICredentialProviderCredential2*, UInt32, UInt32*, HRESULT)
    get_combo_box_value_count : Proc(ICredentialProviderCredential2*, UInt32, UInt32*, UInt32*, HRESULT)
    get_combo_box_value_at : Proc(ICredentialProviderCredential2*, UInt32, UInt32, LibC::LPWSTR*, HRESULT)
    set_string_value : Proc(ICredentialProviderCredential2*, UInt32, LibC::LPWSTR, HRESULT)
    set_checkbox_value : Proc(ICredentialProviderCredential2*, UInt32, LibC::BOOL, HRESULT)
    set_combo_box_selected_value : Proc(ICredentialProviderCredential2*, UInt32, UInt32, HRESULT)
    command_link_clicked : Proc(ICredentialProviderCredential2*, UInt32, HRESULT)
    get_serialization : Proc(ICredentialProviderCredential2*, CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE*, CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION*, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
    report_result : Proc(ICredentialProviderCredential2*, NTSTATUS, NTSTATUS, LibC::LPWSTR*, CREDENTIAL_PROVIDER_STATUS_ICON*, HRESULT)
    get_user_sid : Proc(ICredentialProviderCredential2*, LibC::LPWSTR*, HRESULT)
  end

  struct ICredentialProviderCredential2
    lpVtbl : ICredentialProviderCredential2VTbl*
  end

  struct ICredentialProviderCredentialWithFieldOptionsVTbl
    query_interface : Proc(ICredentialProviderCredentialWithFieldOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderCredentialWithFieldOptions*, UInt32)
    release : Proc(ICredentialProviderCredentialWithFieldOptions*, UInt32)
    get_field_options : Proc(ICredentialProviderCredentialWithFieldOptions*, UInt32, CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS*, HRESULT)
  end

  struct ICredentialProviderCredentialWithFieldOptions
    lpVtbl : ICredentialProviderCredentialWithFieldOptionsVTbl*
  end

  struct ICredentialProviderCredentialEvents2VTbl
    query_interface : Proc(ICredentialProviderCredentialEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderCredentialEvents2*, UInt32)
    release : Proc(ICredentialProviderCredentialEvents2*, UInt32)
    set_field_state : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, CREDENTIAL_PROVIDER_FIELD_STATE, HRESULT)
    set_field_interactive_state : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE, HRESULT)
    set_field_string : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, LibC::LPWSTR, HRESULT)
    set_field_checkbox : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, LibC::BOOL, LibC::LPWSTR, HRESULT)
    set_field_bitmap : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, HBITMAP, HRESULT)
    set_field_combo_box_selected_item : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    delete_field_combo_box_item : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    append_field_combo_box_item : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, LibC::LPWSTR, HRESULT)
    set_field_submit_button : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, UInt32, HRESULT)
    on_creating_window : Proc(ICredentialProviderCredentialEvents2*, HANDLE*, HRESULT)
    begin_field_updates : Proc(ICredentialProviderCredentialEvents2*, HRESULT)
    end_field_updates : Proc(ICredentialProviderCredentialEvents2*, HRESULT)
    set_field_options : Proc(ICredentialProviderCredentialEvents2*, ICredentialProviderCredential, UInt32, CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS, HRESULT)
  end

  struct ICredentialProviderCredentialEvents2
    lpVtbl : ICredentialProviderCredentialEvents2VTbl*
  end

  struct ICredentialProviderUserVTbl
    query_interface : Proc(ICredentialProviderUser*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderUser*, UInt32)
    release : Proc(ICredentialProviderUser*, UInt32)
    get_sid : Proc(ICredentialProviderUser*, LibC::LPWSTR*, HRESULT)
    get_provider_id : Proc(ICredentialProviderUser*, Guid*, HRESULT)
    get_string_value : Proc(ICredentialProviderUser*, PROPERTYKEY*, LibC::LPWSTR*, HRESULT)
    get_value : Proc(ICredentialProviderUser*, PROPERTYKEY*, PROPVARIANT*, HRESULT)
  end

  struct ICredentialProviderUser
    lpVtbl : ICredentialProviderUserVTbl*
  end

  struct ICredentialProviderUserArrayVTbl
    query_interface : Proc(ICredentialProviderUserArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderUserArray*, UInt32)
    release : Proc(ICredentialProviderUserArray*, UInt32)
    set_provider_filter : Proc(ICredentialProviderUserArray*, Guid*, HRESULT)
    get_account_options : Proc(ICredentialProviderUserArray*, CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS*, HRESULT)
    get_count : Proc(ICredentialProviderUserArray*, UInt32*, HRESULT)
    get_at : Proc(ICredentialProviderUserArray*, UInt32, ICredentialProviderUser*, HRESULT)
  end

  struct ICredentialProviderUserArray
    lpVtbl : ICredentialProviderUserArrayVTbl*
  end

  struct ICredentialProviderSetUserArrayVTbl
    query_interface : Proc(ICredentialProviderSetUserArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICredentialProviderSetUserArray*, UInt32)
    release : Proc(ICredentialProviderSetUserArray*, UInt32)
    set_user_array : Proc(ICredentialProviderSetUserArray*, ICredentialProviderUserArray, HRESULT)
  end

  struct ICredentialProviderSetUserArray
    lpVtbl : ICredentialProviderSetUserArrayVTbl*
  end

  struct ISyncMgrHandlerCollectionVTbl
    query_interface : Proc(ISyncMgrHandlerCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrHandlerCollection*, UInt32)
    release : Proc(ISyncMgrHandlerCollection*, UInt32)
    get_handler_enumerator : Proc(ISyncMgrHandlerCollection*, IEnumString*, HRESULT)
    bind_to_handler : Proc(ISyncMgrHandlerCollection*, LibC::LPWSTR, Guid*, Void**, HRESULT)
  end

  struct ISyncMgrHandlerCollection
    lpVtbl : ISyncMgrHandlerCollectionVTbl*
  end

  struct ISyncMgrHandlerVTbl
    query_interface : Proc(ISyncMgrHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrHandler*, UInt32)
    release : Proc(ISyncMgrHandler*, UInt32)
    get_name : Proc(ISyncMgrHandler*, LibC::LPWSTR*, HRESULT)
    get_handler_info : Proc(ISyncMgrHandler*, ISyncMgrHandlerInfo*, HRESULT)
    get_object : Proc(ISyncMgrHandler*, Guid*, Guid*, Void**, HRESULT)
    get_capabilities : Proc(ISyncMgrHandler*, SYNCMGR_HANDLER_CAPABILITIES*, HRESULT)
    get_policies : Proc(ISyncMgrHandler*, SYNCMGR_HANDLER_POLICIES*, HRESULT)
    activate : Proc(ISyncMgrHandler*, LibC::BOOL, HRESULT)
    enable : Proc(ISyncMgrHandler*, LibC::BOOL, HRESULT)
    synchronize : Proc(ISyncMgrHandler*, LibC::LPWSTR*, UInt32, LibC::HANDLE, ISyncMgrSessionCreator, IUnknown, HRESULT)
  end

  struct ISyncMgrHandler
    lpVtbl : ISyncMgrHandlerVTbl*
  end

  struct ISyncMgrHandlerInfoVTbl
    query_interface : Proc(ISyncMgrHandlerInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrHandlerInfo*, UInt32)
    release : Proc(ISyncMgrHandlerInfo*, UInt32)
    get_type : Proc(ISyncMgrHandlerInfo*, SYNCMGR_HANDLER_TYPE*, HRESULT)
    get_type_label : Proc(ISyncMgrHandlerInfo*, LibC::LPWSTR*, HRESULT)
    get_comment : Proc(ISyncMgrHandlerInfo*, LibC::LPWSTR*, HRESULT)
    get_last_sync_time : Proc(ISyncMgrHandlerInfo*, FILETIME*, HRESULT)
    is_active : Proc(ISyncMgrHandlerInfo*, HRESULT)
    is_enabled : Proc(ISyncMgrHandlerInfo*, HRESULT)
    is_connected : Proc(ISyncMgrHandlerInfo*, HRESULT)
  end

  struct ISyncMgrHandlerInfo
    lpVtbl : ISyncMgrHandlerInfoVTbl*
  end

  struct ISyncMgrSyncItemContainerVTbl
    query_interface : Proc(ISyncMgrSyncItemContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSyncItemContainer*, UInt32)
    release : Proc(ISyncMgrSyncItemContainer*, UInt32)
    get_sync_item : Proc(ISyncMgrSyncItemContainer*, LibC::LPWSTR, ISyncMgrSyncItem*, HRESULT)
    get_sync_item_enumerator : Proc(ISyncMgrSyncItemContainer*, IEnumSyncMgrSyncItems*, HRESULT)
    get_sync_item_count : Proc(ISyncMgrSyncItemContainer*, UInt32*, HRESULT)
  end

  struct ISyncMgrSyncItemContainer
    lpVtbl : ISyncMgrSyncItemContainerVTbl*
  end

  struct ISyncMgrSyncItemVTbl
    query_interface : Proc(ISyncMgrSyncItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSyncItem*, UInt32)
    release : Proc(ISyncMgrSyncItem*, UInt32)
    get_item_id : Proc(ISyncMgrSyncItem*, LibC::LPWSTR*, HRESULT)
    get_name : Proc(ISyncMgrSyncItem*, LibC::LPWSTR*, HRESULT)
    get_item_info : Proc(ISyncMgrSyncItem*, ISyncMgrSyncItemInfo*, HRESULT)
    get_object : Proc(ISyncMgrSyncItem*, Guid*, Guid*, Void**, HRESULT)
    get_capabilities : Proc(ISyncMgrSyncItem*, SYNCMGR_ITEM_CAPABILITIES*, HRESULT)
    get_policies : Proc(ISyncMgrSyncItem*, SYNCMGR_ITEM_POLICIES*, HRESULT)
    enable : Proc(ISyncMgrSyncItem*, LibC::BOOL, HRESULT)
    delete : Proc(ISyncMgrSyncItem*, HRESULT)
  end

  struct ISyncMgrSyncItem
    lpVtbl : ISyncMgrSyncItemVTbl*
  end

  struct ISyncMgrSyncItemInfoVTbl
    query_interface : Proc(ISyncMgrSyncItemInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSyncItemInfo*, UInt32)
    release : Proc(ISyncMgrSyncItemInfo*, UInt32)
    get_type_label : Proc(ISyncMgrSyncItemInfo*, LibC::LPWSTR*, HRESULT)
    get_comment : Proc(ISyncMgrSyncItemInfo*, LibC::LPWSTR*, HRESULT)
    get_last_sync_time : Proc(ISyncMgrSyncItemInfo*, FILETIME*, HRESULT)
    is_enabled : Proc(ISyncMgrSyncItemInfo*, HRESULT)
    is_connected : Proc(ISyncMgrSyncItemInfo*, HRESULT)
  end

  struct ISyncMgrSyncItemInfo
    lpVtbl : ISyncMgrSyncItemInfoVTbl*
  end

  struct IEnumSyncMgrSyncItemsVTbl
    query_interface : Proc(IEnumSyncMgrSyncItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSyncMgrSyncItems*, UInt32)
    release : Proc(IEnumSyncMgrSyncItems*, UInt32)
    next : Proc(IEnumSyncMgrSyncItems*, UInt32, ISyncMgrSyncItem*, UInt32*, HRESULT)
    skip : Proc(IEnumSyncMgrSyncItems*, UInt32, HRESULT)
    reset : Proc(IEnumSyncMgrSyncItems*, HRESULT)
    clone : Proc(IEnumSyncMgrSyncItems*, IEnumSyncMgrSyncItems*, HRESULT)
  end

  struct IEnumSyncMgrSyncItems
    lpVtbl : IEnumSyncMgrSyncItemsVTbl*
  end

  struct ISyncMgrSessionCreatorVTbl
    query_interface : Proc(ISyncMgrSessionCreator*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSessionCreator*, UInt32)
    release : Proc(ISyncMgrSessionCreator*, UInt32)
    create_session : Proc(ISyncMgrSessionCreator*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, ISyncMgrSyncCallback*, HRESULT)
  end

  struct ISyncMgrSessionCreator
    lpVtbl : ISyncMgrSessionCreatorVTbl*
  end

  struct ISyncMgrSyncCallbackVTbl
    query_interface : Proc(ISyncMgrSyncCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSyncCallback*, UInt32)
    release : Proc(ISyncMgrSyncCallback*, UInt32)
    report_progress : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, LibC::LPWSTR, SYNCMGR_PROGRESS_STATUS, UInt32, UInt32, SYNCMGR_CANCEL_REQUEST*, HRESULT)
    set_handler_progress_text : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, SYNCMGR_CANCEL_REQUEST*, HRESULT)
    report_event : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, SYNCMGR_EVENT_LEVEL, SYNCMGR_EVENT_FLAGS, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, Guid*, HRESULT)
    can_continue : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, HRESULT)
    query_for_additional_items : Proc(ISyncMgrSyncCallback*, IEnumString*, IEnumUnknown*, HRESULT)
    add_item_to_session : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, HRESULT)
    add_i_unknown_to_session : Proc(ISyncMgrSyncCallback*, IUnknown, HRESULT)
    propose_item : Proc(ISyncMgrSyncCallback*, ISyncMgrSyncItem, HRESULT)
    commit_item : Proc(ISyncMgrSyncCallback*, LibC::LPWSTR, HRESULT)
    report_manual_sync : Proc(ISyncMgrSyncCallback*, HRESULT)
  end

  struct ISyncMgrSyncCallback
    lpVtbl : ISyncMgrSyncCallbackVTbl*
  end

  struct ISyncMgrUIOperationVTbl
    query_interface : Proc(ISyncMgrUIOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrUIOperation*, UInt32)
    release : Proc(ISyncMgrUIOperation*, UInt32)
    run : Proc(ISyncMgrUIOperation*, LibC::HANDLE, HRESULT)
  end

  struct ISyncMgrUIOperation
    lpVtbl : ISyncMgrUIOperationVTbl*
  end

  struct ISyncMgrEventLinkUIOperationVTbl
    query_interface : Proc(ISyncMgrEventLinkUIOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrEventLinkUIOperation*, UInt32)
    release : Proc(ISyncMgrEventLinkUIOperation*, UInt32)
    run : Proc(ISyncMgrEventLinkUIOperation*, LibC::HANDLE, HRESULT)
    init : Proc(ISyncMgrEventLinkUIOperation*, Guid*, ISyncMgrEvent, HRESULT)
  end

  struct ISyncMgrEventLinkUIOperation
    lpVtbl : ISyncMgrEventLinkUIOperationVTbl*
  end

  struct ISyncMgrScheduleWizardUIOperationVTbl
    query_interface : Proc(ISyncMgrScheduleWizardUIOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrScheduleWizardUIOperation*, UInt32)
    release : Proc(ISyncMgrScheduleWizardUIOperation*, UInt32)
    run : Proc(ISyncMgrScheduleWizardUIOperation*, LibC::HANDLE, HRESULT)
    init_wizard : Proc(ISyncMgrScheduleWizardUIOperation*, LibC::LPWSTR, HRESULT)
  end

  struct ISyncMgrScheduleWizardUIOperation
    lpVtbl : ISyncMgrScheduleWizardUIOperationVTbl*
  end

  struct ISyncMgrSyncResultVTbl
    query_interface : Proc(ISyncMgrSyncResult*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSyncResult*, UInt32)
    release : Proc(ISyncMgrSyncResult*, UInt32)
    result : Proc(ISyncMgrSyncResult*, SYNCMGR_PROGRESS_STATUS, UInt32, UInt32, HRESULT)
  end

  struct ISyncMgrSyncResult
    lpVtbl : ISyncMgrSyncResultVTbl*
  end

  struct ISyncMgrControlVTbl
    query_interface : Proc(ISyncMgrControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrControl*, UInt32)
    release : Proc(ISyncMgrControl*, UInt32)
    start_handler_sync : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::HANDLE, IUnknown, SYNCMGR_SYNC_CONTROL_FLAGS, ISyncMgrSyncResult, HRESULT)
    start_item_sync : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, LibC::HANDLE, IUnknown, SYNCMGR_SYNC_CONTROL_FLAGS, ISyncMgrSyncResult, HRESULT)
    start_sync_all : Proc(ISyncMgrControl*, LibC::HANDLE, HRESULT)
    stop_handler_sync : Proc(ISyncMgrControl*, LibC::LPWSTR, HRESULT)
    stop_item_sync : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, HRESULT)
    stop_sync_all : Proc(ISyncMgrControl*, HRESULT)
    update_handler_collection : Proc(ISyncMgrControl*, Guid*, SYNCMGR_CONTROL_FLAGS, HRESULT)
    update_handler : Proc(ISyncMgrControl*, LibC::LPWSTR, SYNCMGR_CONTROL_FLAGS, HRESULT)
    update_item : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR, SYNCMGR_CONTROL_FLAGS, HRESULT)
    update_events : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR, SYNCMGR_CONTROL_FLAGS, HRESULT)
    update_conflict : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR, ISyncMgrConflict, SYNCMGR_UPDATE_REASON, HRESULT)
    update_conflicts : Proc(ISyncMgrControl*, LibC::LPWSTR, LibC::LPWSTR, SYNCMGR_CONTROL_FLAGS, HRESULT)
    activate_handler : Proc(ISyncMgrControl*, LibC::BOOL, LibC::LPWSTR, LibC::HANDLE, SYNCMGR_CONTROL_FLAGS, HRESULT)
    enable_handler : Proc(ISyncMgrControl*, LibC::BOOL, LibC::LPWSTR, LibC::HANDLE, SYNCMGR_CONTROL_FLAGS, HRESULT)
    enable_item : Proc(ISyncMgrControl*, LibC::BOOL, LibC::LPWSTR, LibC::LPWSTR, LibC::HANDLE, SYNCMGR_CONTROL_FLAGS, HRESULT)
  end

  struct ISyncMgrControl
    lpVtbl : ISyncMgrControlVTbl*
  end

  struct ISyncMgrEventStoreVTbl
    query_interface : Proc(ISyncMgrEventStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrEventStore*, UInt32)
    release : Proc(ISyncMgrEventStore*, UInt32)
    get_event_enumerator : Proc(ISyncMgrEventStore*, IEnumSyncMgrEvents*, HRESULT)
    get_event_count : Proc(ISyncMgrEventStore*, UInt32*, HRESULT)
    get_event : Proc(ISyncMgrEventStore*, Guid*, ISyncMgrEvent*, HRESULT)
    remove_event : Proc(ISyncMgrEventStore*, Guid*, UInt32, HRESULT)
  end

  struct ISyncMgrEventStore
    lpVtbl : ISyncMgrEventStoreVTbl*
  end

  struct ISyncMgrEventVTbl
    query_interface : Proc(ISyncMgrEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrEvent*, UInt32)
    release : Proc(ISyncMgrEvent*, UInt32)
    get_event_id : Proc(ISyncMgrEvent*, Guid*, HRESULT)
    get_handler_id : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_item_id : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_level : Proc(ISyncMgrEvent*, SYNCMGR_EVENT_LEVEL*, HRESULT)
    get_flags : Proc(ISyncMgrEvent*, SYNCMGR_EVENT_FLAGS*, HRESULT)
    get_time : Proc(ISyncMgrEvent*, FILETIME*, HRESULT)
    get_name : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_description : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_link_text : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_link_reference : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
    get_context : Proc(ISyncMgrEvent*, LibC::LPWSTR*, HRESULT)
  end

  struct ISyncMgrEvent
    lpVtbl : ISyncMgrEventVTbl*
  end

  struct IEnumSyncMgrEventsVTbl
    query_interface : Proc(IEnumSyncMgrEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSyncMgrEvents*, UInt32)
    release : Proc(IEnumSyncMgrEvents*, UInt32)
    next : Proc(IEnumSyncMgrEvents*, UInt32, ISyncMgrEvent*, UInt32*, HRESULT)
    skip : Proc(IEnumSyncMgrEvents*, UInt32, HRESULT)
    reset : Proc(IEnumSyncMgrEvents*, HRESULT)
    clone : Proc(IEnumSyncMgrEvents*, IEnumSyncMgrEvents*, HRESULT)
  end

  struct IEnumSyncMgrEvents
    lpVtbl : IEnumSyncMgrEventsVTbl*
  end

  struct ISyncMgrConflictStoreVTbl
    query_interface : Proc(ISyncMgrConflictStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictStore*, UInt32)
    release : Proc(ISyncMgrConflictStore*, UInt32)
    enum_conflicts : Proc(ISyncMgrConflictStore*, LibC::LPWSTR, LibC::LPWSTR, IEnumSyncMgrConflict*, HRESULT)
    bind_to_conflict : Proc(ISyncMgrConflictStore*, SYNCMGR_CONFLICT_ID_INFO*, Guid*, Void**, HRESULT)
    remove_conflicts : Proc(ISyncMgrConflictStore*, SYNCMGR_CONFLICT_ID_INFO*, UInt32, HRESULT)
    get_count : Proc(ISyncMgrConflictStore*, LibC::LPWSTR, LibC::LPWSTR, UInt32*, HRESULT)
  end

  struct ISyncMgrConflictStore
    lpVtbl : ISyncMgrConflictStoreVTbl*
  end

  struct IEnumSyncMgrConflictVTbl
    query_interface : Proc(IEnumSyncMgrConflict*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSyncMgrConflict*, UInt32)
    release : Proc(IEnumSyncMgrConflict*, UInt32)
    next : Proc(IEnumSyncMgrConflict*, UInt32, ISyncMgrConflict*, UInt32*, HRESULT)
    skip : Proc(IEnumSyncMgrConflict*, UInt32, HRESULT)
    reset : Proc(IEnumSyncMgrConflict*, HRESULT)
    clone : Proc(IEnumSyncMgrConflict*, IEnumSyncMgrConflict*, HRESULT)
  end

  struct IEnumSyncMgrConflict
    lpVtbl : IEnumSyncMgrConflictVTbl*
  end

  struct ISyncMgrConflictVTbl
    query_interface : Proc(ISyncMgrConflict*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflict*, UInt32)
    release : Proc(ISyncMgrConflict*, UInt32)
    get_property : Proc(ISyncMgrConflict*, PROPERTYKEY*, PROPVARIANT*, HRESULT)
    get_conflict_id_info : Proc(ISyncMgrConflict*, SYNCMGR_CONFLICT_ID_INFO*, HRESULT)
    get_items_array : Proc(ISyncMgrConflict*, ISyncMgrConflictItems*, HRESULT)
    resolve : Proc(ISyncMgrConflict*, ISyncMgrConflictResolveInfo, HRESULT)
    get_resolution_handler : Proc(ISyncMgrConflict*, Guid*, Void**, HRESULT)
  end

  struct ISyncMgrConflict
    lpVtbl : ISyncMgrConflictVTbl*
  end

  struct ISyncMgrResolutionHandlerVTbl
    query_interface : Proc(ISyncMgrResolutionHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrResolutionHandler*, UInt32)
    release : Proc(ISyncMgrResolutionHandler*, UInt32)
    query_abilities : Proc(ISyncMgrResolutionHandler*, UInt32*, HRESULT)
    keep_other : Proc(ISyncMgrResolutionHandler*, IShellItem, SYNCMGR_RESOLUTION_FEEDBACK*, HRESULT)
    keep_recent : Proc(ISyncMgrResolutionHandler*, SYNCMGR_RESOLUTION_FEEDBACK*, HRESULT)
    remove_from_sync_set : Proc(ISyncMgrResolutionHandler*, SYNCMGR_RESOLUTION_FEEDBACK*, HRESULT)
    keep_items : Proc(ISyncMgrResolutionHandler*, ISyncMgrConflictResolutionItems, SYNCMGR_RESOLUTION_FEEDBACK*, HRESULT)
  end

  struct ISyncMgrResolutionHandler
    lpVtbl : ISyncMgrResolutionHandlerVTbl*
  end

  struct ISyncMgrConflictPresenterVTbl
    query_interface : Proc(ISyncMgrConflictPresenter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictPresenter*, UInt32)
    release : Proc(ISyncMgrConflictPresenter*, UInt32)
    present_conflict : Proc(ISyncMgrConflictPresenter*, ISyncMgrConflict, ISyncMgrConflictResolveInfo, HRESULT)
  end

  struct ISyncMgrConflictPresenter
    lpVtbl : ISyncMgrConflictPresenterVTbl*
  end

  struct ISyncMgrConflictResolveInfoVTbl
    query_interface : Proc(ISyncMgrConflictResolveInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictResolveInfo*, UInt32)
    release : Proc(ISyncMgrConflictResolveInfo*, UInt32)
    get_iteration_info : Proc(ISyncMgrConflictResolveInfo*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_presenter_next_step : Proc(ISyncMgrConflictResolveInfo*, SYNCMGR_PRESENTER_NEXT_STEP*, HRESULT)
    get_presenter_choice : Proc(ISyncMgrConflictResolveInfo*, SYNCMGR_PRESENTER_CHOICE*, LibC::BOOL*, HRESULT)
    get_item_choice_count : Proc(ISyncMgrConflictResolveInfo*, UInt32*, HRESULT)
    get_item_choice : Proc(ISyncMgrConflictResolveInfo*, UInt32, UInt32*, HRESULT)
    set_presenter_next_step : Proc(ISyncMgrConflictResolveInfo*, SYNCMGR_PRESENTER_NEXT_STEP, HRESULT)
    set_presenter_choice : Proc(ISyncMgrConflictResolveInfo*, SYNCMGR_PRESENTER_CHOICE, LibC::BOOL, HRESULT)
    set_item_choices : Proc(ISyncMgrConflictResolveInfo*, UInt32*, UInt32, HRESULT)
  end

  struct ISyncMgrConflictResolveInfo
    lpVtbl : ISyncMgrConflictResolveInfoVTbl*
  end

  struct ISyncMgrConflictFolderVTbl
    query_interface : Proc(ISyncMgrConflictFolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictFolder*, UInt32)
    release : Proc(ISyncMgrConflictFolder*, UInt32)
    get_conflict_id_list : Proc(ISyncMgrConflictFolder*, ISyncMgrConflict, ITEMIDLIST**, HRESULT)
  end

  struct ISyncMgrConflictFolder
    lpVtbl : ISyncMgrConflictFolderVTbl*
  end

  struct ISyncMgrConflictItemsVTbl
    query_interface : Proc(ISyncMgrConflictItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictItems*, UInt32)
    release : Proc(ISyncMgrConflictItems*, UInt32)
    get_count : Proc(ISyncMgrConflictItems*, UInt32*, HRESULT)
    get_item : Proc(ISyncMgrConflictItems*, UInt32, CONFIRM_CONFLICT_ITEM*, HRESULT)
  end

  struct ISyncMgrConflictItems
    lpVtbl : ISyncMgrConflictItemsVTbl*
  end

  struct ISyncMgrConflictResolutionItemsVTbl
    query_interface : Proc(ISyncMgrConflictResolutionItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrConflictResolutionItems*, UInt32)
    release : Proc(ISyncMgrConflictResolutionItems*, UInt32)
    get_count : Proc(ISyncMgrConflictResolutionItems*, UInt32*, HRESULT)
    get_item : Proc(ISyncMgrConflictResolutionItems*, UInt32, CONFIRM_CONFLICT_RESULT_INFO*, HRESULT)
  end

  struct ISyncMgrConflictResolutionItems
    lpVtbl : ISyncMgrConflictResolutionItemsVTbl*
  end

  struct IInputPanelConfigurationVTbl
    query_interface : Proc(IInputPanelConfiguration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputPanelConfiguration*, UInt32)
    release : Proc(IInputPanelConfiguration*, UInt32)
    enable_focus_tracking : Proc(IInputPanelConfiguration*, HRESULT)
  end

  struct IInputPanelConfiguration
    lpVtbl : IInputPanelConfigurationVTbl*
  end

  struct IInputPanelInvocationConfigurationVTbl
    query_interface : Proc(IInputPanelInvocationConfiguration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputPanelInvocationConfiguration*, UInt32)
    release : Proc(IInputPanelInvocationConfiguration*, UInt32)
    require_touch_in_edit_control : Proc(IInputPanelInvocationConfiguration*, HRESULT)
  end

  struct IInputPanelInvocationConfiguration
    lpVtbl : IInputPanelInvocationConfigurationVTbl*
  end

  struct ISharedBitmapVTbl
    query_interface : Proc(ISharedBitmap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISharedBitmap*, UInt32)
    release : Proc(ISharedBitmap*, UInt32)
    get_shared_bitmap : Proc(ISharedBitmap*, HBITMAP*, HRESULT)
    get_size : Proc(ISharedBitmap*, SIZE*, HRESULT)
    get_format : Proc(ISharedBitmap*, WTS_ALPHATYPE*, HRESULT)
    initialize_bitmap : Proc(ISharedBitmap*, HBITMAP, WTS_ALPHATYPE, HRESULT)
    detach : Proc(ISharedBitmap*, HBITMAP*, HRESULT)
  end

  struct ISharedBitmap
    lpVtbl : ISharedBitmapVTbl*
  end

  struct IThumbnailCacheVTbl
    query_interface : Proc(IThumbnailCache*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailCache*, UInt32)
    release : Proc(IThumbnailCache*, UInt32)
    get_thumbnail : Proc(IThumbnailCache*, IShellItem, UInt32, WTS_FLAGS, ISharedBitmap*, WTS_CACHEFLAGS*, WTS_THUMBNAILID*, HRESULT)
    get_thumbnail_by_id : Proc(IThumbnailCache*, WTS_THUMBNAILID, UInt32, ISharedBitmap*, WTS_CACHEFLAGS*, HRESULT)
  end

  struct IThumbnailCache
    lpVtbl : IThumbnailCacheVTbl*
  end

  struct IThumbnailProviderVTbl
    query_interface : Proc(IThumbnailProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailProvider*, UInt32)
    release : Proc(IThumbnailProvider*, UInt32)
    get_thumbnail : Proc(IThumbnailProvider*, UInt32, HBITMAP*, WTS_ALPHATYPE*, HRESULT)
  end

  struct IThumbnailProvider
    lpVtbl : IThumbnailProviderVTbl*
  end

  struct IThumbnailSettingsVTbl
    query_interface : Proc(IThumbnailSettings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailSettings*, UInt32)
    release : Proc(IThumbnailSettings*, UInt32)
    set_context : Proc(IThumbnailSettings*, WTS_CONTEXTFLAGS, HRESULT)
  end

  struct IThumbnailSettings
    lpVtbl : IThumbnailSettingsVTbl*
  end

  struct IThumbnailCachePrimerVTbl
    query_interface : Proc(IThumbnailCachePrimer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailCachePrimer*, UInt32)
    release : Proc(IThumbnailCachePrimer*, UInt32)
    page_in_thumbnail : Proc(IThumbnailCachePrimer*, IShellItem, WTS_FLAGS, UInt32, HRESULT)
  end

  struct IThumbnailCachePrimer
    lpVtbl : IThumbnailCachePrimerVTbl*
  end

  struct IShellImageDataFactoryVTbl
    query_interface : Proc(IShellImageDataFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellImageDataFactory*, UInt32)
    release : Proc(IShellImageDataFactory*, UInt32)
    create_i_shell_image_data : Proc(IShellImageDataFactory*, IShellImageData*, HRESULT)
    create_image_from_file : Proc(IShellImageDataFactory*, LibC::LPWSTR, IShellImageData*, HRESULT)
    create_image_from_stream : Proc(IShellImageDataFactory*, IStream, IShellImageData*, HRESULT)
    get_data_format_from_path : Proc(IShellImageDataFactory*, LibC::LPWSTR, Guid*, HRESULT)
  end

  struct IShellImageDataFactory
    lpVtbl : IShellImageDataFactoryVTbl*
  end

  struct IShellImageDataVTbl
    query_interface : Proc(IShellImageData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellImageData*, UInt32)
    release : Proc(IShellImageData*, UInt32)
    decode : Proc(IShellImageData*, UInt32, UInt32, UInt32, HRESULT)
    draw : Proc(IShellImageData*, HDC, RECT*, RECT*, HRESULT)
    next_frame : Proc(IShellImageData*, HRESULT)
    next_page : Proc(IShellImageData*, HRESULT)
    prev_page : Proc(IShellImageData*, HRESULT)
    is_transparent : Proc(IShellImageData*, HRESULT)
    is_animated : Proc(IShellImageData*, HRESULT)
    is_vector : Proc(IShellImageData*, HRESULT)
    is_multipage : Proc(IShellImageData*, HRESULT)
    is_editable : Proc(IShellImageData*, HRESULT)
    is_printable : Proc(IShellImageData*, HRESULT)
    is_decoded : Proc(IShellImageData*, HRESULT)
    get_current_page : Proc(IShellImageData*, UInt32*, HRESULT)
    get_page_count : Proc(IShellImageData*, UInt32*, HRESULT)
    select_page : Proc(IShellImageData*, UInt32, HRESULT)
    get_size : Proc(IShellImageData*, SIZE*, HRESULT)
    get_raw_data_format : Proc(IShellImageData*, Guid*, HRESULT)
    get_pixel_format : Proc(IShellImageData*, UInt32*, HRESULT)
    get_delay : Proc(IShellImageData*, UInt32*, HRESULT)
    get_properties : Proc(IShellImageData*, UInt32, IPropertySetStorage*, HRESULT)
    rotate : Proc(IShellImageData*, UInt32, HRESULT)
    scale : Proc(IShellImageData*, UInt32, UInt32, UInt32, HRESULT)
    discard_edit : Proc(IShellImageData*, HRESULT)
    set_encoder_params : Proc(IShellImageData*, IPropertyBag, HRESULT)
    display_name : Proc(IShellImageData*, LibC::LPWSTR, UInt32, HRESULT)
    get_resolution : Proc(IShellImageData*, UInt32*, UInt32*, HRESULT)
    get_encoder_params : Proc(IShellImageData*, Guid*, UInt8**, HRESULT)
    register_abort : Proc(IShellImageData*, IShellImageDataAbort, IShellImageDataAbort*, HRESULT)
    clone_frame : Proc(IShellImageData*, UInt8**, HRESULT)
    replace_frame : Proc(IShellImageData*, UInt8*, HRESULT)
  end

  struct IShellImageData
    lpVtbl : IShellImageDataVTbl*
  end

  struct IShellImageDataAbortVTbl
    query_interface : Proc(IShellImageDataAbort*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellImageDataAbort*, UInt32)
    release : Proc(IShellImageDataAbort*, UInt32)
    query_abort : Proc(IShellImageDataAbort*, HRESULT)
  end

  struct IShellImageDataAbort
    lpVtbl : IShellImageDataAbortVTbl*
  end

  struct IStorageProviderPropertyHandlerVTbl
    query_interface : Proc(IStorageProviderPropertyHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStorageProviderPropertyHandler*, UInt32)
    release : Proc(IStorageProviderPropertyHandler*, UInt32)
    retrieve_properties : Proc(IStorageProviderPropertyHandler*, PROPERTYKEY*, UInt32, IPropertyStore*, HRESULT)
    save_properties : Proc(IStorageProviderPropertyHandler*, IPropertyStore, HRESULT)
  end

  struct IStorageProviderPropertyHandler
    lpVtbl : IStorageProviderPropertyHandlerVTbl*
  end

  struct IStorageProviderHandlerVTbl
    query_interface : Proc(IStorageProviderHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStorageProviderHandler*, UInt32)
    release : Proc(IStorageProviderHandler*, UInt32)
    get_property_handler_from_path : Proc(IStorageProviderHandler*, LibC::LPWSTR, IStorageProviderPropertyHandler*, HRESULT)
    get_property_handler_from_uri : Proc(IStorageProviderHandler*, LibC::LPWSTR, IStorageProviderPropertyHandler*, HRESULT)
    get_property_handler_from_file_id : Proc(IStorageProviderHandler*, LibC::LPWSTR, IStorageProviderPropertyHandler*, HRESULT)
  end

  struct IStorageProviderHandler
    lpVtbl : IStorageProviderHandlerVTbl*
  end

  struct ISyncMgrSynchronizeCallbackVTbl
    query_interface : Proc(ISyncMgrSynchronizeCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSynchronizeCallback*, UInt32)
    release : Proc(ISyncMgrSynchronizeCallback*, UInt32)
    show_properties_completed : Proc(ISyncMgrSynchronizeCallback*, HRESULT, HRESULT)
    prepare_for_sync_completed : Proc(ISyncMgrSynchronizeCallback*, HRESULT, HRESULT)
    synchronize_completed : Proc(ISyncMgrSynchronizeCallback*, HRESULT, HRESULT)
    show_error_completed : Proc(ISyncMgrSynchronizeCallback*, HRESULT, UInt32, Guid*, HRESULT)
    enable_modeless : Proc(ISyncMgrSynchronizeCallback*, LibC::BOOL, HRESULT)
    progress : Proc(ISyncMgrSynchronizeCallback*, Guid*, SYNCMGRPROGRESSITEM*, HRESULT)
    log_error : Proc(ISyncMgrSynchronizeCallback*, UInt32, LibC::LPWSTR, SYNCMGRLOGERRORINFO*, HRESULT)
    delete_log_error : Proc(ISyncMgrSynchronizeCallback*, Guid*, UInt32, HRESULT)
    establish_connection : Proc(ISyncMgrSynchronizeCallback*, LibC::LPWSTR, UInt32, HRESULT)
  end

  struct ISyncMgrSynchronizeCallback
    lpVtbl : ISyncMgrSynchronizeCallbackVTbl*
  end

  struct ISyncMgrEnumItemsVTbl
    query_interface : Proc(ISyncMgrEnumItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrEnumItems*, UInt32)
    release : Proc(ISyncMgrEnumItems*, UInt32)
    next : Proc(ISyncMgrEnumItems*, UInt32, SYNCMGRITEM*, UInt32*, HRESULT)
    skip : Proc(ISyncMgrEnumItems*, UInt32, HRESULT)
    reset : Proc(ISyncMgrEnumItems*, HRESULT)
    clone : Proc(ISyncMgrEnumItems*, ISyncMgrEnumItems*, HRESULT)
  end

  struct ISyncMgrEnumItems
    lpVtbl : ISyncMgrEnumItemsVTbl*
  end

  struct ISyncMgrSynchronizeVTbl
    query_interface : Proc(ISyncMgrSynchronize*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSynchronize*, UInt32)
    release : Proc(ISyncMgrSynchronize*, UInt32)
    initialize : Proc(ISyncMgrSynchronize*, UInt32, UInt32, UInt32, UInt8*, HRESULT)
    get_handler_info : Proc(ISyncMgrSynchronize*, SYNCMGRHANDLERINFO**, HRESULT)
    enum_sync_mgr_items : Proc(ISyncMgrSynchronize*, ISyncMgrEnumItems*, HRESULT)
    get_item_object : Proc(ISyncMgrSynchronize*, Guid*, Guid*, Void**, HRESULT)
    show_properties : Proc(ISyncMgrSynchronize*, LibC::HANDLE, Guid*, HRESULT)
    set_progress_callback : Proc(ISyncMgrSynchronize*, ISyncMgrSynchronizeCallback, HRESULT)
    prepare_for_sync : Proc(ISyncMgrSynchronize*, UInt32, Guid*, LibC::HANDLE, UInt32, HRESULT)
    synchronize : Proc(ISyncMgrSynchronize*, LibC::HANDLE, HRESULT)
    set_item_status : Proc(ISyncMgrSynchronize*, Guid*, UInt32, HRESULT)
    show_error : Proc(ISyncMgrSynchronize*, LibC::HANDLE, Guid*, HRESULT)
  end

  struct ISyncMgrSynchronize
    lpVtbl : ISyncMgrSynchronizeVTbl*
  end

  struct ISyncMgrSynchronizeInvokeVTbl
    query_interface : Proc(ISyncMgrSynchronizeInvoke*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrSynchronizeInvoke*, UInt32)
    release : Proc(ISyncMgrSynchronizeInvoke*, UInt32)
    update_items : Proc(ISyncMgrSynchronizeInvoke*, UInt32, Guid*, UInt32, UInt8*, HRESULT)
    update_all : Proc(ISyncMgrSynchronizeInvoke*, HRESULT)
  end

  struct ISyncMgrSynchronizeInvoke
    lpVtbl : ISyncMgrSynchronizeInvokeVTbl*
  end

  struct ISyncMgrRegisterVTbl
    query_interface : Proc(ISyncMgrRegister*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISyncMgrRegister*, UInt32)
    release : Proc(ISyncMgrRegister*, UInt32)
    register_sync_mgr_handler : Proc(ISyncMgrRegister*, Guid*, LibC::LPWSTR, UInt32, HRESULT)
    unregister_sync_mgr_handler : Proc(ISyncMgrRegister*, Guid*, UInt32, HRESULT)
    get_handler_registration_info : Proc(ISyncMgrRegister*, Guid*, UInt32*, HRESULT)
  end

  struct ISyncMgrRegister
    lpVtbl : ISyncMgrRegisterVTbl*
  end

  struct IThumbnailStreamCacheVTbl
    query_interface : Proc(IThumbnailStreamCache*, Guid*, Void**, HRESULT)
    add_ref : Proc(IThumbnailStreamCache*, UInt32)
    release : Proc(IThumbnailStreamCache*, UInt32)
    get_thumbnail_stream : Proc(IThumbnailStreamCache*, LibC::LPWSTR, UInt64, ThumbnailStreamCacheOptions, UInt32, SIZE*, IStream*, HRESULT)
    set_thumbnail_stream : Proc(IThumbnailStreamCache*, LibC::LPWSTR, UInt64, SIZE, IStream, HRESULT)
  end

  struct IThumbnailStreamCache
    lpVtbl : IThumbnailStreamCacheVTbl*
  end

  struct ITravelLogEntryVTbl
    query_interface : Proc(ITravelLogEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITravelLogEntry*, UInt32)
    release : Proc(ITravelLogEntry*, UInt32)
    get_title : Proc(ITravelLogEntry*, LibC::LPWSTR*, HRESULT)
    get_url : Proc(ITravelLogEntry*, LibC::LPWSTR*, HRESULT)
  end

  struct ITravelLogEntry
    lpVtbl : ITravelLogEntryVTbl*
  end

  struct ITravelLogClientVTbl
    query_interface : Proc(ITravelLogClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITravelLogClient*, UInt32)
    release : Proc(ITravelLogClient*, UInt32)
    find_window_by_index : Proc(ITravelLogClient*, UInt32, IUnknown*, HRESULT)
    get_window_data : Proc(ITravelLogClient*, IStream, WINDOWDATA*, HRESULT)
    load_history_position : Proc(ITravelLogClient*, LibC::LPWSTR, UInt32, HRESULT)
  end

  struct ITravelLogClient
    lpVtbl : ITravelLogClientVTbl*
  end

  struct IEnumTravelLogEntryVTbl
    query_interface : Proc(IEnumTravelLogEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumTravelLogEntry*, UInt32)
    release : Proc(IEnumTravelLogEntry*, UInt32)
    next : Proc(IEnumTravelLogEntry*, UInt32, ITravelLogEntry*, UInt32*, HRESULT)
    skip : Proc(IEnumTravelLogEntry*, UInt32, HRESULT)
    reset : Proc(IEnumTravelLogEntry*, HRESULT)
    clone : Proc(IEnumTravelLogEntry*, IEnumTravelLogEntry*, HRESULT)
  end

  struct IEnumTravelLogEntry
    lpVtbl : IEnumTravelLogEntryVTbl*
  end

  struct ITravelLogStgVTbl
    query_interface : Proc(ITravelLogStg*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITravelLogStg*, UInt32)
    release : Proc(ITravelLogStg*, UInt32)
    create_entry : Proc(ITravelLogStg*, LibC::LPWSTR, LibC::LPWSTR, ITravelLogEntry, LibC::BOOL, ITravelLogEntry*, HRESULT)
    travel_to : Proc(ITravelLogStg*, ITravelLogEntry, HRESULT)
    enum_entries : Proc(ITravelLogStg*, TLENUMF, IEnumTravelLogEntry*, HRESULT)
    find_entries : Proc(ITravelLogStg*, TLENUMF, LibC::LPWSTR, IEnumTravelLogEntry*, HRESULT)
    get_count : Proc(ITravelLogStg*, TLENUMF, UInt32*, HRESULT)
    remove_entry : Proc(ITravelLogStg*, ITravelLogEntry, HRESULT)
    get_relative_entry : Proc(ITravelLogStg*, Int32, ITravelLogEntry*, HRESULT)
  end

  struct ITravelLogStg
    lpVtbl : ITravelLogStgVTbl*
  end

  struct IHlinkVTbl
    query_interface : Proc(IHlink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHlink*, UInt32)
    release : Proc(IHlink*, UInt32)
    set_hlink_site : Proc(IHlink*, IHlinkSite, UInt32, HRESULT)
    get_hlink_site : Proc(IHlink*, IHlinkSite*, UInt32*, HRESULT)
    set_moniker_reference : Proc(IHlink*, UInt32, IMoniker, LibC::LPWSTR, HRESULT)
    get_moniker_reference : Proc(IHlink*, UInt32, IMoniker*, LibC::LPWSTR*, HRESULT)
    set_string_reference : Proc(IHlink*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_string_reference : Proc(IHlink*, UInt32, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
    set_friendly_name : Proc(IHlink*, LibC::LPWSTR, HRESULT)
    get_friendly_name : Proc(IHlink*, UInt32, LibC::LPWSTR*, HRESULT)
    set_target_frame_name : Proc(IHlink*, LibC::LPWSTR, HRESULT)
    get_target_frame_name : Proc(IHlink*, LibC::LPWSTR*, HRESULT)
    get_misc_status : Proc(IHlink*, UInt32*, HRESULT)
    navigate : Proc(IHlink*, UInt32, IBindCtx, IBindStatusCallback, IHlinkBrowseContext, HRESULT)
    set_additional_params : Proc(IHlink*, LibC::LPWSTR, HRESULT)
    get_additional_params : Proc(IHlink*, LibC::LPWSTR*, HRESULT)
  end

  struct IHlink
    lpVtbl : IHlinkVTbl*
  end

  struct IHlinkSiteVTbl
    query_interface : Proc(IHlinkSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHlinkSite*, UInt32)
    release : Proc(IHlinkSite*, UInt32)
    query_service : Proc(IHlinkSite*, UInt32, Guid*, Guid*, IUnknown*, HRESULT)
    get_moniker : Proc(IHlinkSite*, UInt32, UInt32, UInt32, IMoniker*, HRESULT)
    ready_to_navigate : Proc(IHlinkSite*, UInt32, UInt32, HRESULT)
    on_navigation_complete : Proc(IHlinkSite*, UInt32, UInt32, HRESULT, LibC::LPWSTR, HRESULT)
  end

  struct IHlinkSite
    lpVtbl : IHlinkSiteVTbl*
  end

  struct IHlinkTargetVTbl
    query_interface : Proc(IHlinkTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHlinkTarget*, UInt32)
    release : Proc(IHlinkTarget*, UInt32)
    set_browse_context : Proc(IHlinkTarget*, IHlinkBrowseContext, HRESULT)
    get_browse_context : Proc(IHlinkTarget*, IHlinkBrowseContext*, HRESULT)
    navigate : Proc(IHlinkTarget*, UInt32, LibC::LPWSTR, HRESULT)
    get_moniker : Proc(IHlinkTarget*, LibC::LPWSTR, UInt32, IMoniker*, HRESULT)
    get_friendly_name : Proc(IHlinkTarget*, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
  end

  struct IHlinkTarget
    lpVtbl : IHlinkTargetVTbl*
  end

  struct IHlinkFrameVTbl
    query_interface : Proc(IHlinkFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHlinkFrame*, UInt32)
    release : Proc(IHlinkFrame*, UInt32)
    set_browse_context : Proc(IHlinkFrame*, IHlinkBrowseContext, HRESULT)
    get_browse_context : Proc(IHlinkFrame*, IHlinkBrowseContext*, HRESULT)
    navigate : Proc(IHlinkFrame*, UInt32, IBindCtx, IBindStatusCallback, IHlink, HRESULT)
    on_navigate : Proc(IHlinkFrame*, UInt32, IMoniker, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    update_hlink : Proc(IHlinkFrame*, UInt32, IMoniker, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct IHlinkFrame
    lpVtbl : IHlinkFrameVTbl*
  end

  struct IEnumHLITEMVTbl
    query_interface : Proc(IEnumHLITEM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumHLITEM*, UInt32)
    release : Proc(IEnumHLITEM*, UInt32)
    next : Proc(IEnumHLITEM*, UInt32, HLITEM*, UInt32*, HRESULT)
    skip : Proc(IEnumHLITEM*, UInt32, HRESULT)
    reset : Proc(IEnumHLITEM*, HRESULT)
    clone : Proc(IEnumHLITEM*, IEnumHLITEM*, HRESULT)
  end

  struct IEnumHLITEM
    lpVtbl : IEnumHLITEMVTbl*
  end

  struct IHlinkBrowseContextVTbl
    query_interface : Proc(IHlinkBrowseContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHlinkBrowseContext*, UInt32)
    release : Proc(IHlinkBrowseContext*, UInt32)
    register : Proc(IHlinkBrowseContext*, UInt32, IUnknown, IMoniker, UInt32*, HRESULT)
    get_object : Proc(IHlinkBrowseContext*, IMoniker, LibC::BOOL, IUnknown*, HRESULT)
    revoke : Proc(IHlinkBrowseContext*, UInt32, HRESULT)
    set_browse_window_info : Proc(IHlinkBrowseContext*, HLBWINFO*, HRESULT)
    get_browse_window_info : Proc(IHlinkBrowseContext*, HLBWINFO*, HRESULT)
    set_initial_hlink : Proc(IHlinkBrowseContext*, IMoniker, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    on_navigate_hlink : Proc(IHlinkBrowseContext*, UInt32, IMoniker, LibC::LPWSTR, LibC::LPWSTR, UInt32*, HRESULT)
    update_hlink : Proc(IHlinkBrowseContext*, UInt32, IMoniker, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    enum_navigation_stack : Proc(IHlinkBrowseContext*, UInt32, UInt32, IEnumHLITEM*, HRESULT)
    query_hlink : Proc(IHlinkBrowseContext*, UInt32, UInt32, HRESULT)
    get_hlink : Proc(IHlinkBrowseContext*, UInt32, IHlink*, HRESULT)
    set_current_hlink : Proc(IHlinkBrowseContext*, UInt32, HRESULT)
    clone : Proc(IHlinkBrowseContext*, IUnknown, Guid*, IUnknown*, HRESULT)
    close : Proc(IHlinkBrowseContext*, UInt32, HRESULT)
  end

  struct IHlinkBrowseContext
    lpVtbl : IHlinkBrowseContextVTbl*
  end

  struct IExtensionServicesVTbl
    query_interface : Proc(IExtensionServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtensionServices*, UInt32)
    release : Proc(IExtensionServices*, UInt32)
    set_additional_headers : Proc(IExtensionServices*, LibC::LPWSTR, HRESULT)
    set_authenticate_data : Proc(IExtensionServices*, LibC::HANDLE, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct IExtensionServices
    lpVtbl : IExtensionServicesVTbl*
  end

  struct ITravelEntryVTbl
    query_interface : Proc(ITravelEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITravelEntry*, UInt32)
    release : Proc(ITravelEntry*, UInt32)
    invoke : Proc(ITravelEntry*, IUnknown, HRESULT)
    update : Proc(ITravelEntry*, IUnknown, LibC::BOOL, HRESULT)
    get_pidl : Proc(ITravelEntry*, ITEMIDLIST**, HRESULT)
  end

  struct ITravelEntry
    lpVtbl : ITravelEntryVTbl*
  end

  struct ITravelLogVTbl
    query_interface : Proc(ITravelLog*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITravelLog*, UInt32)
    release : Proc(ITravelLog*, UInt32)
    add_entry : Proc(ITravelLog*, IUnknown, LibC::BOOL, HRESULT)
    update_entry : Proc(ITravelLog*, IUnknown, LibC::BOOL, HRESULT)
    update_external : Proc(ITravelLog*, IUnknown, IUnknown, HRESULT)
    travel : Proc(ITravelLog*, IUnknown, Int32, HRESULT)
    get_travel_entry : Proc(ITravelLog*, IUnknown, Int32, ITravelEntry*, HRESULT)
    find_travel_entry : Proc(ITravelLog*, IUnknown, ITEMIDLIST*, ITravelEntry*, HRESULT)
    get_tool_tip_text : Proc(ITravelLog*, IUnknown, Int32, Int32, Char*, UInt32, HRESULT)
    insert_menu_entries : Proc(ITravelLog*, IUnknown, LibC::HANDLE, Int32, Int32, Int32, UInt32, HRESULT)
    clone : Proc(ITravelLog*, ITravelLog*, HRESULT)
    count_entries : Proc(ITravelLog*, IUnknown, UInt32)
    revert : Proc(ITravelLog*, HRESULT)
  end

  struct ITravelLog
    lpVtbl : ITravelLogVTbl*
  end

  struct CIE4ConnectionPointVTbl
    query_interface : Proc(CIE4ConnectionPoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(CIE4ConnectionPoint*, UInt32)
    release : Proc(CIE4ConnectionPoint*, UInt32)
    get_connection_interface : Proc(CIE4ConnectionPoint*, Guid*, HRESULT)
    get_connection_point_container : Proc(CIE4ConnectionPoint*, IConnectionPointContainer*, HRESULT)
    advise : Proc(CIE4ConnectionPoint*, IUnknown, UInt32*, HRESULT)
    unadvise : Proc(CIE4ConnectionPoint*, UInt32, HRESULT)
    enum_connections : Proc(CIE4ConnectionPoint*, IEnumConnections*, HRESULT)
    do_invoke_ie4 : Proc(CIE4ConnectionPoint*, LibC::BOOL*, Void**, Int32, DISPPARAMS*, HRESULT)
    do_invoke_pidlie4 : Proc(CIE4ConnectionPoint*, Int32, ITEMIDLIST*, LibC::BOOL, HRESULT)
  end

  struct CIE4ConnectionPoint
    lpVtbl : CIE4ConnectionPointVTbl*
  end

  struct IExpDispSupportXPVTbl
    query_interface : Proc(IExpDispSupportXP*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExpDispSupportXP*, UInt32)
    release : Proc(IExpDispSupportXP*, UInt32)
    find_cie4_connection_point : Proc(IExpDispSupportXP*, Guid*, CIE4ConnectionPoint*, HRESULT)
    on_translate_accelerator : Proc(IExpDispSupportXP*, MSG*, UInt32, HRESULT)
    on_invoke : Proc(IExpDispSupportXP*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct IExpDispSupportXP
    lpVtbl : IExpDispSupportXPVTbl*
  end

  struct IExpDispSupportVTbl
    query_interface : Proc(IExpDispSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExpDispSupport*, UInt32)
    release : Proc(IExpDispSupport*, UInt32)
    find_connection_point : Proc(IExpDispSupport*, Guid*, IConnectionPoint*, HRESULT)
    on_translate_accelerator : Proc(IExpDispSupport*, MSG*, UInt32, HRESULT)
    on_invoke : Proc(IExpDispSupport*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  struct IExpDispSupport
    lpVtbl : IExpDispSupportVTbl*
  end

  struct IBrowserServiceVTbl
    query_interface : Proc(IBrowserService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBrowserService*, UInt32)
    release : Proc(IBrowserService*, UInt32)
    get_parent_site : Proc(IBrowserService*, IOleInPlaceSite*, HRESULT)
    set_title : Proc(IBrowserService*, IShellView, LibC::LPWSTR, HRESULT)
    get_title : Proc(IBrowserService*, IShellView, Char*, UInt32, HRESULT)
    get_ole_object : Proc(IBrowserService*, IOleObject*, HRESULT)
    get_travel_log : Proc(IBrowserService*, ITravelLog*, HRESULT)
    show_control_window : Proc(IBrowserService*, UInt32, LibC::BOOL, HRESULT)
    is_control_window_shown : Proc(IBrowserService*, UInt32, LibC::BOOL*, HRESULT)
    ie_get_display_name : Proc(IBrowserService*, ITEMIDLIST*, LibC::LPWSTR, UInt32, HRESULT)
    ie_parse_display_name : Proc(IBrowserService*, UInt32, LibC::LPWSTR, ITEMIDLIST**, HRESULT)
    display_parse_error : Proc(IBrowserService*, HRESULT, LibC::LPWSTR, HRESULT)
    navigate_to_pidl : Proc(IBrowserService*, ITEMIDLIST*, UInt32, HRESULT)
    set_navigate_state : Proc(IBrowserService*, BNSTATE, HRESULT)
    get_navigate_state : Proc(IBrowserService*, BNSTATE*, HRESULT)
    notify_redirect : Proc(IBrowserService*, IShellView, ITEMIDLIST*, LibC::BOOL*, HRESULT)
    update_window_list : Proc(IBrowserService*, HRESULT)
    update_back_forward_state : Proc(IBrowserService*, HRESULT)
    set_flags : Proc(IBrowserService*, UInt32, UInt32, HRESULT)
    get_flags : Proc(IBrowserService*, UInt32*, HRESULT)
    can_navigate_now : Proc(IBrowserService*, HRESULT)
    get_pidl : Proc(IBrowserService*, ITEMIDLIST**, HRESULT)
    set_referrer : Proc(IBrowserService*, ITEMIDLIST*, HRESULT)
    get_browser_index : Proc(IBrowserService*, UInt32)
    get_browser_by_index : Proc(IBrowserService*, UInt32, IUnknown*, HRESULT)
    get_history_object : Proc(IBrowserService*, IOleObject*, IStream*, IBindCtx*, HRESULT)
    set_history_object : Proc(IBrowserService*, IOleObject, LibC::BOOL, HRESULT)
    cache_ole_server : Proc(IBrowserService*, IOleObject, HRESULT)
    get_set_code_page : Proc(IBrowserService*, VARIANT*, VARIANT*, HRESULT)
    on_http_equiv : Proc(IBrowserService*, IShellView, LibC::BOOL, VARIANT*, VARIANT*, HRESULT)
    get_palette : Proc(IBrowserService*, HPALETTE*, HRESULT)
    register_window : Proc(IBrowserService*, LibC::BOOL, Int32, HRESULT)
  end

  struct IBrowserService
    lpVtbl : IBrowserServiceVTbl*
  end

  struct IShellServiceVTbl
    query_interface : Proc(IShellService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IShellService*, UInt32)
    release : Proc(IShellService*, UInt32)
    set_owner : Proc(IShellService*, IUnknown, HRESULT)
  end

  struct IShellService
    lpVtbl : IShellServiceVTbl*
  end

  struct IBrowserService2VTbl
    query_interface : Proc(IBrowserService2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBrowserService2*, UInt32)
    release : Proc(IBrowserService2*, UInt32)
    get_parent_site : Proc(IBrowserService2*, IOleInPlaceSite*, HRESULT)
    set_title : Proc(IBrowserService2*, IShellView, LibC::LPWSTR, HRESULT)
    get_title : Proc(IBrowserService2*, IShellView, Char*, UInt32, HRESULT)
    get_ole_object : Proc(IBrowserService2*, IOleObject*, HRESULT)
    get_travel_log : Proc(IBrowserService2*, ITravelLog*, HRESULT)
    show_control_window : Proc(IBrowserService2*, UInt32, LibC::BOOL, HRESULT)
    is_control_window_shown : Proc(IBrowserService2*, UInt32, LibC::BOOL*, HRESULT)
    ie_get_display_name : Proc(IBrowserService2*, ITEMIDLIST*, LibC::LPWSTR, UInt32, HRESULT)
    ie_parse_display_name : Proc(IBrowserService2*, UInt32, LibC::LPWSTR, ITEMIDLIST**, HRESULT)
    display_parse_error : Proc(IBrowserService2*, HRESULT, LibC::LPWSTR, HRESULT)
    navigate_to_pidl : Proc(IBrowserService2*, ITEMIDLIST*, UInt32, HRESULT)
    set_navigate_state : Proc(IBrowserService2*, BNSTATE, HRESULT)
    get_navigate_state : Proc(IBrowserService2*, BNSTATE*, HRESULT)
    notify_redirect : Proc(IBrowserService2*, IShellView, ITEMIDLIST*, LibC::BOOL*, HRESULT)
    update_window_list : Proc(IBrowserService2*, HRESULT)
    update_back_forward_state : Proc(IBrowserService2*, HRESULT)
    set_flags : Proc(IBrowserService2*, UInt32, UInt32, HRESULT)
    get_flags : Proc(IBrowserService2*, UInt32*, HRESULT)
    can_navigate_now : Proc(IBrowserService2*, HRESULT)
    get_pidl : Proc(IBrowserService2*, ITEMIDLIST**, HRESULT)
    set_referrer : Proc(IBrowserService2*, ITEMIDLIST*, HRESULT)
    get_browser_index : Proc(IBrowserService2*, UInt32)
    get_browser_by_index : Proc(IBrowserService2*, UInt32, IUnknown*, HRESULT)
    get_history_object : Proc(IBrowserService2*, IOleObject*, IStream*, IBindCtx*, HRESULT)
    set_history_object : Proc(IBrowserService2*, IOleObject, LibC::BOOL, HRESULT)
    cache_ole_server : Proc(IBrowserService2*, IOleObject, HRESULT)
    get_set_code_page : Proc(IBrowserService2*, VARIANT*, VARIANT*, HRESULT)
    on_http_equiv : Proc(IBrowserService2*, IShellView, LibC::BOOL, VARIANT*, VARIANT*, HRESULT)
    get_palette : Proc(IBrowserService2*, HPALETTE*, HRESULT)
    register_window : Proc(IBrowserService2*, LibC::BOOL, Int32, HRESULT)
    wnd_proc_bs : Proc(IBrowserService2*, LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_as_def_folder_settings : Proc(IBrowserService2*, HRESULT)
    get_view_rect : Proc(IBrowserService2*, RECT*, HRESULT)
    on_size : Proc(IBrowserService2*, LibC::UINT_PTR, HRESULT)
    on_create : Proc(IBrowserService2*, CREATESTRUCTW*, HRESULT)
    on_command : Proc(IBrowserService2*, LibC::UINT_PTR, LPARAM, LRESULT)
    on_destroy : Proc(IBrowserService2*, HRESULT)
    on_notify : Proc(IBrowserService2*, NMHDR*, LRESULT)
    on_set_focus : Proc(IBrowserService2*, HRESULT)
    on_frame_window_activate_bs : Proc(IBrowserService2*, LibC::BOOL, HRESULT)
    release_shell_view : Proc(IBrowserService2*, HRESULT)
    activate_pending_view : Proc(IBrowserService2*, HRESULT)
    create_view_window : Proc(IBrowserService2*, IShellView, IShellView, RECT*, HANDLE*, HRESULT)
    create_browser_prop_sheet_ext : Proc(IBrowserService2*, Guid*, Void**, HRESULT)
    get_view_window : Proc(IBrowserService2*, HANDLE*, HRESULT)
    get_base_browser_data : Proc(IBrowserService2*, BASEBROWSERDATALH**, HRESULT)
    put_base_browser_data : Proc(IBrowserService2*, BASEBROWSERDATALH**)
    initialize_travel_log : Proc(IBrowserService2*, ITravelLog, UInt32, HRESULT)
    set_top_browser : Proc(IBrowserService2*, HRESULT)
    offline : Proc(IBrowserService2*, Int32, HRESULT)
    allow_view_resize : Proc(IBrowserService2*, LibC::BOOL, HRESULT)
    set_activate_state : Proc(IBrowserService2*, UInt32, HRESULT)
    update_secure_lock_icon : Proc(IBrowserService2*, Int32, HRESULT)
    initialize_download_manager : Proc(IBrowserService2*, HRESULT)
    initialize_transition_site : Proc(IBrowserService2*, HRESULT)
    _initialize : Proc(IBrowserService2*, LibC::HANDLE, IUnknown, HRESULT)
    _cancel_pending_navigation_async : Proc(IBrowserService2*, HRESULT)
    _cancel_pending_view : Proc(IBrowserService2*, HRESULT)
    _may_save_changes : Proc(IBrowserService2*, HRESULT)
    _pause_or_resume_view : Proc(IBrowserService2*, LibC::BOOL, HRESULT)
    _disable_modeless : Proc(IBrowserService2*, HRESULT)
    _navigate_to_pidl2 : Proc(IBrowserService2*, ITEMIDLIST*, UInt32, UInt32, HRESULT)
    _try_shell2_rename : Proc(IBrowserService2*, IShellView, ITEMIDLIST*, HRESULT)
    _switch_activation_now : Proc(IBrowserService2*, HRESULT)
    _exec_children : Proc(IBrowserService2*, IUnknown, LibC::BOOL, Guid*, UInt32, UInt32, VARIANT*, VARIANT*, HRESULT)
    _send_children : Proc(IBrowserService2*, LibC::HANDLE, LibC::BOOL, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
    get_folder_set_data : Proc(IBrowserService2*, FOLDERSETDATA*, HRESULT)
    _on_focus_change : Proc(IBrowserService2*, UInt32, HRESULT)
    v_show_hide_child_windows : Proc(IBrowserService2*, LibC::BOOL, HRESULT)
    _get_itb_last_focus : Proc(IBrowserService2*, UInt32)
    _put_itb_last_focus : Proc(IBrowserService2*, UInt32, HRESULT)
    _ui_activate_view : Proc(IBrowserService2*, UInt32, HRESULT)
    _get_view_border_rect : Proc(IBrowserService2*, RECT*, HRESULT)
    _update_view_rect_size : Proc(IBrowserService2*, HRESULT)
    _resize_next_border : Proc(IBrowserService2*, UInt32, HRESULT)
    _resize_view : Proc(IBrowserService2*, HRESULT)
    _get_effective_client_area : Proc(IBrowserService2*, RECT*, HMONITOR, HRESULT)
    v_get_view_stream : Proc(IBrowserService2*, ITEMIDLIST*, UInt32, LibC::LPWSTR, IStream)
    forward_view_msg : Proc(IBrowserService2*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_accelerator_menu : Proc(IBrowserService2*, LibC::HANDLE, HRESULT)
    _get_toolbar_count : Proc(IBrowserService2*, Int32)
    _get_toolbar_item : Proc(IBrowserService2*, Int32, TOOLBARITEM**)
    _save_toolbars : Proc(IBrowserService2*, IStream, HRESULT)
    _load_toolbars : Proc(IBrowserService2*, IStream, HRESULT)
    _close_and_release_toolbars : Proc(IBrowserService2*, LibC::BOOL, HRESULT)
    v_may_get_next_toolbar_focus : Proc(IBrowserService2*, MSG*, UInt32, Int32, TOOLBARITEM**, HANDLE*, HRESULT)
    _resize_next_border_helper : Proc(IBrowserService2*, UInt32, LibC::BOOL, HRESULT)
    _find_t_bar : Proc(IBrowserService2*, IUnknown, UInt32)
    _set_focus : Proc(IBrowserService2*, TOOLBARITEM*, LibC::HANDLE, MSG*, HRESULT)
    v_may_translate_accelerator : Proc(IBrowserService2*, MSG*, HRESULT)
    _get_border_dw_helper : Proc(IBrowserService2*, IUnknown, RECT*, LibC::BOOL, HRESULT)
    v_check_zone_crossing : Proc(IBrowserService2*, ITEMIDLIST*, HRESULT)
  end

  struct IBrowserService2
    lpVtbl : IBrowserService2VTbl*
  end

  struct IBrowserService3VTbl
    query_interface : Proc(IBrowserService3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBrowserService3*, UInt32)
    release : Proc(IBrowserService3*, UInt32)
    get_parent_site : Proc(IBrowserService3*, IOleInPlaceSite*, HRESULT)
    set_title : Proc(IBrowserService3*, IShellView, LibC::LPWSTR, HRESULT)
    get_title : Proc(IBrowserService3*, IShellView, Char*, UInt32, HRESULT)
    get_ole_object : Proc(IBrowserService3*, IOleObject*, HRESULT)
    get_travel_log : Proc(IBrowserService3*, ITravelLog*, HRESULT)
    show_control_window : Proc(IBrowserService3*, UInt32, LibC::BOOL, HRESULT)
    is_control_window_shown : Proc(IBrowserService3*, UInt32, LibC::BOOL*, HRESULT)
    ie_get_display_name : Proc(IBrowserService3*, ITEMIDLIST*, LibC::LPWSTR, UInt32, HRESULT)
    ie_parse_display_name : Proc(IBrowserService3*, UInt32, LibC::LPWSTR, ITEMIDLIST**, HRESULT)
    display_parse_error : Proc(IBrowserService3*, HRESULT, LibC::LPWSTR, HRESULT)
    navigate_to_pidl : Proc(IBrowserService3*, ITEMIDLIST*, UInt32, HRESULT)
    set_navigate_state : Proc(IBrowserService3*, BNSTATE, HRESULT)
    get_navigate_state : Proc(IBrowserService3*, BNSTATE*, HRESULT)
    notify_redirect : Proc(IBrowserService3*, IShellView, ITEMIDLIST*, LibC::BOOL*, HRESULT)
    update_window_list : Proc(IBrowserService3*, HRESULT)
    update_back_forward_state : Proc(IBrowserService3*, HRESULT)
    set_flags : Proc(IBrowserService3*, UInt32, UInt32, HRESULT)
    get_flags : Proc(IBrowserService3*, UInt32*, HRESULT)
    can_navigate_now : Proc(IBrowserService3*, HRESULT)
    get_pidl : Proc(IBrowserService3*, ITEMIDLIST**, HRESULT)
    set_referrer : Proc(IBrowserService3*, ITEMIDLIST*, HRESULT)
    get_browser_index : Proc(IBrowserService3*, UInt32)
    get_browser_by_index : Proc(IBrowserService3*, UInt32, IUnknown*, HRESULT)
    get_history_object : Proc(IBrowserService3*, IOleObject*, IStream*, IBindCtx*, HRESULT)
    set_history_object : Proc(IBrowserService3*, IOleObject, LibC::BOOL, HRESULT)
    cache_ole_server : Proc(IBrowserService3*, IOleObject, HRESULT)
    get_set_code_page : Proc(IBrowserService3*, VARIANT*, VARIANT*, HRESULT)
    on_http_equiv : Proc(IBrowserService3*, IShellView, LibC::BOOL, VARIANT*, VARIANT*, HRESULT)
    get_palette : Proc(IBrowserService3*, HPALETTE*, HRESULT)
    register_window : Proc(IBrowserService3*, LibC::BOOL, Int32, HRESULT)
    wnd_proc_bs : Proc(IBrowserService3*, LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_as_def_folder_settings : Proc(IBrowserService3*, HRESULT)
    get_view_rect : Proc(IBrowserService3*, RECT*, HRESULT)
    on_size : Proc(IBrowserService3*, LibC::UINT_PTR, HRESULT)
    on_create : Proc(IBrowserService3*, CREATESTRUCTW*, HRESULT)
    on_command : Proc(IBrowserService3*, LibC::UINT_PTR, LPARAM, LRESULT)
    on_destroy : Proc(IBrowserService3*, HRESULT)
    on_notify : Proc(IBrowserService3*, NMHDR*, LRESULT)
    on_set_focus : Proc(IBrowserService3*, HRESULT)
    on_frame_window_activate_bs : Proc(IBrowserService3*, LibC::BOOL, HRESULT)
    release_shell_view : Proc(IBrowserService3*, HRESULT)
    activate_pending_view : Proc(IBrowserService3*, HRESULT)
    create_view_window : Proc(IBrowserService3*, IShellView, IShellView, RECT*, HANDLE*, HRESULT)
    create_browser_prop_sheet_ext : Proc(IBrowserService3*, Guid*, Void**, HRESULT)
    get_view_window : Proc(IBrowserService3*, HANDLE*, HRESULT)
    get_base_browser_data : Proc(IBrowserService3*, BASEBROWSERDATALH**, HRESULT)
    put_base_browser_data : Proc(IBrowserService3*, BASEBROWSERDATALH**)
    initialize_travel_log : Proc(IBrowserService3*, ITravelLog, UInt32, HRESULT)
    set_top_browser : Proc(IBrowserService3*, HRESULT)
    offline : Proc(IBrowserService3*, Int32, HRESULT)
    allow_view_resize : Proc(IBrowserService3*, LibC::BOOL, HRESULT)
    set_activate_state : Proc(IBrowserService3*, UInt32, HRESULT)
    update_secure_lock_icon : Proc(IBrowserService3*, Int32, HRESULT)
    initialize_download_manager : Proc(IBrowserService3*, HRESULT)
    initialize_transition_site : Proc(IBrowserService3*, HRESULT)
    _initialize : Proc(IBrowserService3*, LibC::HANDLE, IUnknown, HRESULT)
    _cancel_pending_navigation_async : Proc(IBrowserService3*, HRESULT)
    _cancel_pending_view : Proc(IBrowserService3*, HRESULT)
    _may_save_changes : Proc(IBrowserService3*, HRESULT)
    _pause_or_resume_view : Proc(IBrowserService3*, LibC::BOOL, HRESULT)
    _disable_modeless : Proc(IBrowserService3*, HRESULT)
    _navigate_to_pidl2 : Proc(IBrowserService3*, ITEMIDLIST*, UInt32, UInt32, HRESULT)
    _try_shell2_rename : Proc(IBrowserService3*, IShellView, ITEMIDLIST*, HRESULT)
    _switch_activation_now : Proc(IBrowserService3*, HRESULT)
    _exec_children : Proc(IBrowserService3*, IUnknown, LibC::BOOL, Guid*, UInt32, UInt32, VARIANT*, VARIANT*, HRESULT)
    _send_children : Proc(IBrowserService3*, LibC::HANDLE, LibC::BOOL, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
    get_folder_set_data : Proc(IBrowserService3*, FOLDERSETDATA*, HRESULT)
    _on_focus_change : Proc(IBrowserService3*, UInt32, HRESULT)
    v_show_hide_child_windows : Proc(IBrowserService3*, LibC::BOOL, HRESULT)
    _get_itb_last_focus : Proc(IBrowserService3*, UInt32)
    _put_itb_last_focus : Proc(IBrowserService3*, UInt32, HRESULT)
    _ui_activate_view : Proc(IBrowserService3*, UInt32, HRESULT)
    _get_view_border_rect : Proc(IBrowserService3*, RECT*, HRESULT)
    _update_view_rect_size : Proc(IBrowserService3*, HRESULT)
    _resize_next_border : Proc(IBrowserService3*, UInt32, HRESULT)
    _resize_view : Proc(IBrowserService3*, HRESULT)
    _get_effective_client_area : Proc(IBrowserService3*, RECT*, HMONITOR, HRESULT)
    v_get_view_stream : Proc(IBrowserService3*, ITEMIDLIST*, UInt32, LibC::LPWSTR, IStream)
    forward_view_msg : Proc(IBrowserService3*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_accelerator_menu : Proc(IBrowserService3*, LibC::HANDLE, HRESULT)
    _get_toolbar_count : Proc(IBrowserService3*, Int32)
    _get_toolbar_item : Proc(IBrowserService3*, Int32, TOOLBARITEM**)
    _save_toolbars : Proc(IBrowserService3*, IStream, HRESULT)
    _load_toolbars : Proc(IBrowserService3*, IStream, HRESULT)
    _close_and_release_toolbars : Proc(IBrowserService3*, LibC::BOOL, HRESULT)
    v_may_get_next_toolbar_focus : Proc(IBrowserService3*, MSG*, UInt32, Int32, TOOLBARITEM**, HANDLE*, HRESULT)
    _resize_next_border_helper : Proc(IBrowserService3*, UInt32, LibC::BOOL, HRESULT)
    _find_t_bar : Proc(IBrowserService3*, IUnknown, UInt32)
    _set_focus : Proc(IBrowserService3*, TOOLBARITEM*, LibC::HANDLE, MSG*, HRESULT)
    v_may_translate_accelerator : Proc(IBrowserService3*, MSG*, HRESULT)
    _get_border_dw_helper : Proc(IBrowserService3*, IUnknown, RECT*, LibC::BOOL, HRESULT)
    v_check_zone_crossing : Proc(IBrowserService3*, ITEMIDLIST*, HRESULT)
    _position_view_window : Proc(IBrowserService3*, LibC::HANDLE, RECT*, HRESULT)
    ie_parse_display_name_ex : Proc(IBrowserService3*, UInt32, LibC::LPWSTR, UInt32, ITEMIDLIST**, HRESULT)
  end

  struct IBrowserService3
    lpVtbl : IBrowserService3VTbl*
  end

  struct IBrowserService4VTbl
    query_interface : Proc(IBrowserService4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBrowserService4*, UInt32)
    release : Proc(IBrowserService4*, UInt32)
    get_parent_site : Proc(IBrowserService4*, IOleInPlaceSite*, HRESULT)
    set_title : Proc(IBrowserService4*, IShellView, LibC::LPWSTR, HRESULT)
    get_title : Proc(IBrowserService4*, IShellView, Char*, UInt32, HRESULT)
    get_ole_object : Proc(IBrowserService4*, IOleObject*, HRESULT)
    get_travel_log : Proc(IBrowserService4*, ITravelLog*, HRESULT)
    show_control_window : Proc(IBrowserService4*, UInt32, LibC::BOOL, HRESULT)
    is_control_window_shown : Proc(IBrowserService4*, UInt32, LibC::BOOL*, HRESULT)
    ie_get_display_name : Proc(IBrowserService4*, ITEMIDLIST*, LibC::LPWSTR, UInt32, HRESULT)
    ie_parse_display_name : Proc(IBrowserService4*, UInt32, LibC::LPWSTR, ITEMIDLIST**, HRESULT)
    display_parse_error : Proc(IBrowserService4*, HRESULT, LibC::LPWSTR, HRESULT)
    navigate_to_pidl : Proc(IBrowserService4*, ITEMIDLIST*, UInt32, HRESULT)
    set_navigate_state : Proc(IBrowserService4*, BNSTATE, HRESULT)
    get_navigate_state : Proc(IBrowserService4*, BNSTATE*, HRESULT)
    notify_redirect : Proc(IBrowserService4*, IShellView, ITEMIDLIST*, LibC::BOOL*, HRESULT)
    update_window_list : Proc(IBrowserService4*, HRESULT)
    update_back_forward_state : Proc(IBrowserService4*, HRESULT)
    set_flags : Proc(IBrowserService4*, UInt32, UInt32, HRESULT)
    get_flags : Proc(IBrowserService4*, UInt32*, HRESULT)
    can_navigate_now : Proc(IBrowserService4*, HRESULT)
    get_pidl : Proc(IBrowserService4*, ITEMIDLIST**, HRESULT)
    set_referrer : Proc(IBrowserService4*, ITEMIDLIST*, HRESULT)
    get_browser_index : Proc(IBrowserService4*, UInt32)
    get_browser_by_index : Proc(IBrowserService4*, UInt32, IUnknown*, HRESULT)
    get_history_object : Proc(IBrowserService4*, IOleObject*, IStream*, IBindCtx*, HRESULT)
    set_history_object : Proc(IBrowserService4*, IOleObject, LibC::BOOL, HRESULT)
    cache_ole_server : Proc(IBrowserService4*, IOleObject, HRESULT)
    get_set_code_page : Proc(IBrowserService4*, VARIANT*, VARIANT*, HRESULT)
    on_http_equiv : Proc(IBrowserService4*, IShellView, LibC::BOOL, VARIANT*, VARIANT*, HRESULT)
    get_palette : Proc(IBrowserService4*, HPALETTE*, HRESULT)
    register_window : Proc(IBrowserService4*, LibC::BOOL, Int32, HRESULT)
    wnd_proc_bs : Proc(IBrowserService4*, LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_as_def_folder_settings : Proc(IBrowserService4*, HRESULT)
    get_view_rect : Proc(IBrowserService4*, RECT*, HRESULT)
    on_size : Proc(IBrowserService4*, LibC::UINT_PTR, HRESULT)
    on_create : Proc(IBrowserService4*, CREATESTRUCTW*, HRESULT)
    on_command : Proc(IBrowserService4*, LibC::UINT_PTR, LPARAM, LRESULT)
    on_destroy : Proc(IBrowserService4*, HRESULT)
    on_notify : Proc(IBrowserService4*, NMHDR*, LRESULT)
    on_set_focus : Proc(IBrowserService4*, HRESULT)
    on_frame_window_activate_bs : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    release_shell_view : Proc(IBrowserService4*, HRESULT)
    activate_pending_view : Proc(IBrowserService4*, HRESULT)
    create_view_window : Proc(IBrowserService4*, IShellView, IShellView, RECT*, HANDLE*, HRESULT)
    create_browser_prop_sheet_ext : Proc(IBrowserService4*, Guid*, Void**, HRESULT)
    get_view_window : Proc(IBrowserService4*, HANDLE*, HRESULT)
    get_base_browser_data : Proc(IBrowserService4*, BASEBROWSERDATALH**, HRESULT)
    put_base_browser_data : Proc(IBrowserService4*, BASEBROWSERDATALH**)
    initialize_travel_log : Proc(IBrowserService4*, ITravelLog, UInt32, HRESULT)
    set_top_browser : Proc(IBrowserService4*, HRESULT)
    offline : Proc(IBrowserService4*, Int32, HRESULT)
    allow_view_resize : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    set_activate_state : Proc(IBrowserService4*, UInt32, HRESULT)
    update_secure_lock_icon : Proc(IBrowserService4*, Int32, HRESULT)
    initialize_download_manager : Proc(IBrowserService4*, HRESULT)
    initialize_transition_site : Proc(IBrowserService4*, HRESULT)
    _initialize : Proc(IBrowserService4*, LibC::HANDLE, IUnknown, HRESULT)
    _cancel_pending_navigation_async : Proc(IBrowserService4*, HRESULT)
    _cancel_pending_view : Proc(IBrowserService4*, HRESULT)
    _may_save_changes : Proc(IBrowserService4*, HRESULT)
    _pause_or_resume_view : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    _disable_modeless : Proc(IBrowserService4*, HRESULT)
    _navigate_to_pidl2 : Proc(IBrowserService4*, ITEMIDLIST*, UInt32, UInt32, HRESULT)
    _try_shell2_rename : Proc(IBrowserService4*, IShellView, ITEMIDLIST*, HRESULT)
    _switch_activation_now : Proc(IBrowserService4*, HRESULT)
    _exec_children : Proc(IBrowserService4*, IUnknown, LibC::BOOL, Guid*, UInt32, UInt32, VARIANT*, VARIANT*, HRESULT)
    _send_children : Proc(IBrowserService4*, LibC::HANDLE, LibC::BOOL, UInt32, LibC::UINT_PTR, LPARAM, HRESULT)
    get_folder_set_data : Proc(IBrowserService4*, FOLDERSETDATA*, HRESULT)
    _on_focus_change : Proc(IBrowserService4*, UInt32, HRESULT)
    v_show_hide_child_windows : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    _get_itb_last_focus : Proc(IBrowserService4*, UInt32)
    _put_itb_last_focus : Proc(IBrowserService4*, UInt32, HRESULT)
    _ui_activate_view : Proc(IBrowserService4*, UInt32, HRESULT)
    _get_view_border_rect : Proc(IBrowserService4*, RECT*, HRESULT)
    _update_view_rect_size : Proc(IBrowserService4*, HRESULT)
    _resize_next_border : Proc(IBrowserService4*, UInt32, HRESULT)
    _resize_view : Proc(IBrowserService4*, HRESULT)
    _get_effective_client_area : Proc(IBrowserService4*, RECT*, HMONITOR, HRESULT)
    v_get_view_stream : Proc(IBrowserService4*, ITEMIDLIST*, UInt32, LibC::LPWSTR, IStream)
    forward_view_msg : Proc(IBrowserService4*, UInt32, LibC::UINT_PTR, LPARAM, LRESULT)
    set_accelerator_menu : Proc(IBrowserService4*, LibC::HANDLE, HRESULT)
    _get_toolbar_count : Proc(IBrowserService4*, Int32)
    _get_toolbar_item : Proc(IBrowserService4*, Int32, TOOLBARITEM**)
    _save_toolbars : Proc(IBrowserService4*, IStream, HRESULT)
    _load_toolbars : Proc(IBrowserService4*, IStream, HRESULT)
    _close_and_release_toolbars : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    v_may_get_next_toolbar_focus : Proc(IBrowserService4*, MSG*, UInt32, Int32, TOOLBARITEM**, HANDLE*, HRESULT)
    _resize_next_border_helper : Proc(IBrowserService4*, UInt32, LibC::BOOL, HRESULT)
    _find_t_bar : Proc(IBrowserService4*, IUnknown, UInt32)
    _set_focus : Proc(IBrowserService4*, TOOLBARITEM*, LibC::HANDLE, MSG*, HRESULT)
    v_may_translate_accelerator : Proc(IBrowserService4*, MSG*, HRESULT)
    _get_border_dw_helper : Proc(IBrowserService4*, IUnknown, RECT*, LibC::BOOL, HRESULT)
    v_check_zone_crossing : Proc(IBrowserService4*, ITEMIDLIST*, HRESULT)
    _position_view_window : Proc(IBrowserService4*, LibC::HANDLE, RECT*, HRESULT)
    ie_parse_display_name_ex : Proc(IBrowserService4*, UInt32, LibC::LPWSTR, UInt32, ITEMIDLIST**, HRESULT)
    activate_view : Proc(IBrowserService4*, LibC::BOOL, HRESULT)
    save_view_state : Proc(IBrowserService4*, HRESULT)
    _resize_all_borders : Proc(IBrowserService4*, HRESULT)
  end

  struct IBrowserService4
    lpVtbl : IBrowserService4VTbl*
  end

  struct ITrackShellMenuVTbl
    query_interface : Proc(ITrackShellMenu*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITrackShellMenu*, UInt32)
    release : Proc(ITrackShellMenu*, UInt32)
    initialize : Proc(ITrackShellMenu*, IShellMenuCallback, UInt32, UInt32, UInt32, HRESULT)
    get_menu_info : Proc(ITrackShellMenu*, IShellMenuCallback*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_shell_folder : Proc(ITrackShellMenu*, IShellFolder, ITEMIDLIST*, HKEY, UInt32, HRESULT)
    get_shell_folder : Proc(ITrackShellMenu*, UInt32*, ITEMIDLIST**, Guid*, Void**, HRESULT)
    set_menu : Proc(ITrackShellMenu*, LibC::HANDLE, LibC::HANDLE, UInt32, HRESULT)
    get_menu : Proc(ITrackShellMenu*, HANDLE*, HANDLE*, UInt32*, HRESULT)
    invalidate_item : Proc(ITrackShellMenu*, SMDATA*, UInt32, HRESULT)
    get_state : Proc(ITrackShellMenu*, SMDATA*, HRESULT)
    set_menu_toolbar : Proc(ITrackShellMenu*, IUnknown, UInt32, HRESULT)
    set_obscured : Proc(ITrackShellMenu*, LibC::HANDLE, IUnknown, UInt32, HRESULT)
    popup : Proc(ITrackShellMenu*, LibC::HANDLE, POINTL*, RECTL*, Int32, HRESULT)
  end

  struct ITrackShellMenu
    lpVtbl : ITrackShellMenuVTbl*
  end

  struct ITranscodeImageVTbl
    query_interface : Proc(ITranscodeImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITranscodeImage*, UInt32)
    release : Proc(ITranscodeImage*, UInt32)
    transcode_image : Proc(ITranscodeImage*, IShellItem, UInt32, UInt32, UInt32, IStream, UInt32*, UInt32*, HRESULT)
  end

  struct ITranscodeImage
    lpVtbl : ITranscodeImageVTbl*
  end

  struct IUniformResourceLocatorAVTbl
    query_interface : Proc(IUniformResourceLocatorA*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUniformResourceLocatorA*, UInt32)
    release : Proc(IUniformResourceLocatorA*, UInt32)
    set_url : Proc(IUniformResourceLocatorA*, PSTR, UInt32, HRESULT)
    get_url : Proc(IUniformResourceLocatorA*, PSTR*, HRESULT)
    invoke_command : Proc(IUniformResourceLocatorA*, Urlinvokecommandinfoa*, HRESULT)
  end

  struct IUniformResourceLocatorA
    lpVtbl : IUniformResourceLocatorAVTbl*
  end

  struct IUniformResourceLocatorWVTbl
    query_interface : Proc(IUniformResourceLocatorW*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUniformResourceLocatorW*, UInt32)
    release : Proc(IUniformResourceLocatorW*, UInt32)
    set_url : Proc(IUniformResourceLocatorW*, LibC::LPWSTR, UInt32, HRESULT)
    get_url : Proc(IUniformResourceLocatorW*, LibC::LPWSTR*, HRESULT)
    invoke_command : Proc(IUniformResourceLocatorW*, Urlinvokecommandinfow*, HRESULT)
  end

  struct IUniformResourceLocatorW
    lpVtbl : IUniformResourceLocatorWVTbl*
  end

  struct IInputPaneAnimationCoordinatorVTbl
    query_interface : Proc(IInputPaneAnimationCoordinator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInputPaneAnimationCoordinator*, UInt32)
    release : Proc(IInputPaneAnimationCoordinator*, UInt32)
    add_animation : Proc(IInputPaneAnimationCoordinator*, IUnknown, IDCompositionAnimation, HRESULT)
  end

  struct IInputPaneAnimationCoordinator
    lpVtbl : IInputPaneAnimationCoordinatorVTbl*
  end


  # Params # htoken : LibC::HANDLE [In],lpprofileinfo : PROFILEINFOA* [In]
  fun LoadUserProfileA(htoken : LibC::HANDLE, lpprofileinfo : PROFILEINFOA*) : LibC::BOOL

  # Params # htoken : LibC::HANDLE [In],lpprofileinfo : PROFILEINFOW* [In]
  fun LoadUserProfileW(htoken : LibC::HANDLE, lpprofileinfo : PROFILEINFOW*) : LibC::BOOL

  # Params # htoken : LibC::HANDLE [In],hprofile : LibC::HANDLE [In]
  fun UnloadUserProfile(htoken : LibC::HANDLE, hprofile : LibC::HANDLE) : LibC::BOOL

  # Params # lpprofiledir : UInt8* [In],lpcchsize : UInt32* [In]
  fun GetProfilesDirectoryA(lpprofiledir : UInt8*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # lpprofiledir : Char* [In],lpcchsize : UInt32* [In]
  fun GetProfilesDirectoryW(lpprofiledir : Char*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32* [In]
  fun GetProfileType(dwflags : UInt32*) : LibC::BOOL

  # Params # lpsidstring : PSTR [In],lpprofilepath : PSTR [In],lpcomputername : PSTR [In]
  fun DeleteProfileA(lpsidstring : PSTR, lpprofilepath : PSTR, lpcomputername : PSTR) : LibC::BOOL

  # Params # lpsidstring : LibC::LPWSTR [In],lpprofilepath : LibC::LPWSTR [In],lpcomputername : LibC::LPWSTR [In]
  fun DeleteProfileW(lpsidstring : LibC::LPWSTR, lpprofilepath : LibC::LPWSTR, lpcomputername : LibC::LPWSTR) : LibC::BOOL

  # Params # pszusersid : LibC::LPWSTR [In],pszusername : LibC::LPWSTR [In],pszprofilepath : Char* [In],cchprofilepath : UInt32 [In]
  fun CreateProfile(pszusersid : LibC::LPWSTR, pszusername : LibC::LPWSTR, pszprofilepath : Char*, cchprofilepath : UInt32) : HRESULT

  # Params # lpprofiledir : UInt8* [In],lpcchsize : UInt32* [In]
  fun GetDefaultUserProfileDirectoryA(lpprofiledir : UInt8*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # lpprofiledir : Char* [In],lpcchsize : UInt32* [In]
  fun GetDefaultUserProfileDirectoryW(lpprofiledir : Char*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # lpprofiledir : UInt8* [In],lpcchsize : UInt32* [In]
  fun GetAllUsersProfileDirectoryA(lpprofiledir : UInt8*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # lpprofiledir : Char* [In],lpcchsize : UInt32* [In]
  fun GetAllUsersProfileDirectoryW(lpprofiledir : Char*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # htoken : LibC::HANDLE [In],lpprofiledir : UInt8* [In],lpcchsize : UInt32* [In]
  fun GetUserProfileDirectoryA(htoken : LibC::HANDLE, lpprofiledir : UInt8*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # htoken : LibC::HANDLE [In],lpprofiledir : Char* [In],lpcchsize : UInt32* [In]
  fun GetUserProfileDirectoryW(htoken : LibC::HANDLE, lpprofiledir : Char*, lpcchsize : UInt32*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pfnsubclass : SUBCLASSPROC [In],uidsubclass : LibC::UINT_PTR [In],dwrefdata : LibC::UINT_PTR [In]
  fun SetWindowSubclass(hwnd : LibC::HANDLE, pfnsubclass : SUBCLASSPROC, uidsubclass : LibC::UINT_PTR, dwrefdata : LibC::UINT_PTR) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pfnsubclass : SUBCLASSPROC [In],uidsubclass : LibC::UINT_PTR [In],pdwrefdata : LibC::UINT_PTR* [In]
  fun GetWindowSubclass(hwnd : LibC::HANDLE, pfnsubclass : SUBCLASSPROC, uidsubclass : LibC::UINT_PTR, pdwrefdata : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pfnsubclass : SUBCLASSPROC [In],uidsubclass : LibC::UINT_PTR [In]
  fun RemoveWindowSubclass(hwnd : LibC::HANDLE, pfnsubclass : SUBCLASSPROC, uidsubclass : LibC::UINT_PTR) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],umsg : UInt32 [In],wparam : LibC::UINT_PTR [In],lparam : LPARAM [In]
  fun DefSubclassProc(hwnd : LibC::HANDLE, umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM) : LRESULT

  # Params # param0 : LibC::HANDLE [In],param1 : UInt32 [In]
  fun SetWindowContextHelpId(param0 : LibC::HANDLE, param1 : UInt32) : LibC::BOOL

  # Params # param0 : LibC::HANDLE [In]
  fun GetWindowContextHelpId(param0 : LibC::HANDLE) : UInt32

  # Params # param0 : LibC::HANDLE [In],param1 : UInt32 [In]
  fun SetMenuContextHelpId(param0 : LibC::HANDLE, param1 : UInt32) : LibC::BOOL

  # Params # param0 : LibC::HANDLE [In]
  fun GetMenuContextHelpId(param0 : LibC::HANDLE) : UInt32

  # Params # hwndmain : LibC::HANDLE [In],lpszhelp : PSTR [In],ucommand : UInt32 [In],dwdata : LibC::UINT_PTR [In]
  fun WinHelpA(hwndmain : LibC::HANDLE, lpszhelp : PSTR, ucommand : UInt32, dwdata : LibC::UINT_PTR) : LibC::BOOL

  # Params # hwndmain : LibC::HANDLE [In],lpszhelp : LibC::LPWSTR [In],ucommand : UInt32 [In],dwdata : LibC::UINT_PTR [In]
  fun WinHelpW(hwndmain : LibC::HANDLE, lpszhelp : LibC::LPWSTR, ucommand : UInt32, dwdata : LibC::UINT_PTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun SHSimpleIDListFromPath(pszpath : LibC::LPWSTR) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateItemFromIDList(pidl : ITEMIDLIST*, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],pbc : IBindCtx [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateItemFromParsingName(pszpath : LibC::LPWSTR, pbc : IBindCtx, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pidlparent : ITEMIDLIST* [In],psfparent : IShellFolder [In],pidl : ITEMIDLIST* [In],riid : Guid* [In],ppvitem : Void** [In]
  fun SHCreateItemWithParent(pidlparent : ITEMIDLIST*, psfparent : IShellFolder, pidl : ITEMIDLIST*, riid : Guid*, ppvitem : Void**) : HRESULT

  # Params # psiparent : IShellItem [In],pszname : LibC::LPWSTR [In],pbc : IBindCtx [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateItemFromRelativeName(psiparent : IShellItem, pszname : LibC::LPWSTR, pbc : IBindCtx, riid : Guid*, ppv : Void**) : HRESULT

  # Params # kfid : Guid* [In],dwkfflags : UInt32 [In],pszitem : LibC::LPWSTR [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateItemInKnownFolder(kfid : Guid*, dwkfflags : UInt32, pszitem : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT

  # Params # punk : IUnknown [In],ppidl : ITEMIDLIST** [In]
  fun SHGetIDListFromObject(punk : IUnknown, ppidl : ITEMIDLIST**) : HRESULT

  # Params # punk : IUnknown [In],riid : Guid* [In],ppv : Void** [In]
  fun SHGetItemFromObject(punk : IUnknown, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pidl : ITEMIDLIST* [In],sigdnname : SIGDN [In],ppszname : LibC::LPWSTR* [In]
  fun SHGetNameFromIDList(pidl : ITEMIDLIST*, sigdnname : SIGDN, ppszname : LibC::LPWSTR*) : HRESULT

  # Params # pdtobj : IDataObject [In],dwflags : DATAOBJ_GET_ITEM_FLAGS [In],riid : Guid* [In],ppv : Void** [In]
  fun SHGetItemFromDataObject(pdtobj : IDataObject, dwflags : DATAOBJ_GET_ITEM_FLAGS, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pidlparent : ITEMIDLIST* [In],psf : IShellFolder [In],cidl : UInt32 [In],ppidl : ITEMIDLIST** [In],ppsiitemarray : IShellItemArray* [In]
  fun SHCreateShellItemArray(pidlparent : ITEMIDLIST*, psf : IShellFolder, cidl : UInt32, ppidl : ITEMIDLIST**, ppsiitemarray : IShellItemArray*) : HRESULT

  # Params # pdo : IDataObject [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateShellItemArrayFromDataObject(pdo : IDataObject, riid : Guid*, ppv : Void**) : HRESULT

  # Params # cidl : UInt32 [In],rgpidl : ITEMIDLIST** [In],ppsiitemarray : IShellItemArray* [In]
  fun SHCreateShellItemArrayFromIDLists(cidl : UInt32, rgpidl : ITEMIDLIST**, ppsiitemarray : IShellItemArray*) : HRESULT

  # Params # psi : IShellItem [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateShellItemArrayFromShellItem(psi : IShellItem, riid : Guid*, ppv : Void**) : HRESULT

  # Params # riid : Guid* [In],ppv : Void** [In]
  fun SHCreateAssociationRegistration(riid : Guid*, ppv : Void**) : HRESULT

  # Params # riid : Guid* [In],ppv : Void** [In]
  fun SHCreateDefaultExtractIcon(riid : Guid*, ppv : Void**) : HRESULT

  # Params # appid : LibC::LPWSTR [In]
  fun SetCurrentProcessExplicitAppUserModelID(appid : LibC::LPWSTR) : HRESULT

  # Params # appid : LibC::LPWSTR* [In]
  fun GetCurrentProcessExplicitAppUserModelID(appid : LibC::LPWSTR*) : HRESULT

  # Params # psi : IShellItem [In],propkey : PROPERTYKEY* [In],ppropvar : PROPVARIANT* [In]
  fun SHGetTemporaryPropertyForItem(psi : IShellItem, propkey : PROPERTYKEY*, ppropvar : PROPVARIANT*) : HRESULT

  # Params # psi : IShellItem [In],propkey : PROPERTYKEY* [In],propvar : PROPVARIANT* [In]
  fun SHSetTemporaryPropertyForItem(psi : IShellItem, propkey : PROPERTYKEY*, propvar : PROPVARIANT*) : HRESULT

  # Params # psilibrary : IShellItem [In],hwndowner : LibC::HANDLE [In],psztitle : LibC::LPWSTR [In],pszinstruction : LibC::LPWSTR [In],lmdoptions : LIBRARYMANAGEDIALOGOPTIONS [In]
  fun SHShowManageLibraryUI(psilibrary : IShellItem, hwndowner : LibC::HANDLE, psztitle : LibC::LPWSTR, pszinstruction : LibC::LPWSTR, lmdoptions : LIBRARYMANAGEDIALOGOPTIONS) : HRESULT

  # Params # psilibrary : IShellItem [In]
  fun SHResolveLibrary(psilibrary : IShellItem) : HRESULT

  # Params # pszextra : LibC::LPWSTR [In],affilter : ASSOC_FILTER [In],ppenumhandler : IEnumAssocHandlers* [In]
  fun SHAssocEnumHandlers(pszextra : LibC::LPWSTR, affilter : ASSOC_FILTER, ppenumhandler : IEnumAssocHandlers*) : HRESULT

  # Params # protocol : LibC::LPWSTR [In],riid : Guid* [In],enumhandlers : Void** [In]
  fun SHAssocEnumHandlersForProtocolByApplication(protocol : LibC::LPWSTR, riid : Guid*, enumhandlers : Void**) : HRESULT

  # Params # param0 : UInt32* [In],param1 : UInt32 [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserSize(param0 : UInt32*, param1 : UInt32, param2 : HMONITOR*) : UInt32

  # Params # param0 : UInt32* [In],param1 : UInt8* [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserMarshal(param0 : UInt32*, param1 : UInt8*, param2 : HMONITOR*) : UInt8*

  # Params # param0 : UInt32* [In],param1 : UInt8* [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserUnmarshal(param0 : UInt32*, param1 : UInt8*, param2 : HMONITOR*) : UInt8*

  # Params # param0 : UInt32* [In],param1 : HMONITOR* [In]
  fun HMONITOR_UserFree(param0 : UInt32*, param1 : HMONITOR*)

  # Params # param0 : UInt32* [In],param1 : UInt32 [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserSize64(param0 : UInt32*, param1 : UInt32, param2 : HMONITOR*) : UInt32

  # Params # param0 : UInt32* [In],param1 : UInt8* [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserMarshal64(param0 : UInt32*, param1 : UInt8*, param2 : HMONITOR*) : UInt8*

  # Params # param0 : UInt32* [In],param1 : UInt8* [In],param2 : HMONITOR* [In]
  fun HMONITOR_UserUnmarshal64(param0 : UInt32*, param1 : UInt8*, param2 : HMONITOR*) : UInt8*

  # Params # param0 : UInt32* [In],param1 : HMONITOR* [In]
  fun HMONITOR_UserFree64(param0 : UInt32*, param1 : HMONITOR*)

  # Params # psi : IShellItem [In],ppfileop : IFileOperation* [In]
  fun SHCreateDefaultPropertiesOp(psi : IShellItem, ppfileop : IFileOperation*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],psi : IShellItem [In],dwfileopflags : UInt32 [In],pfops : IFileOperationProgressSink [In]
  fun SHSetDefaultProperties(hwnd : LibC::HANDLE, psi : IShellItem, dwfileopflags : UInt32, pfops : IFileOperationProgressSink) : HRESULT

  # Params # ppmalloc : IMalloc* [In]
  fun SHGetMalloc(ppmalloc : IMalloc*) : HRESULT

  # Params # cb : LibC::UINT_PTR [In]
  fun SHAlloc(cb : LibC::UINT_PTR) : Void*

  # Params # pv : Void* [In]
  fun SHFree(pv : Void*)

  # Params # psziconpath : PSTR [In],iiconindex : Int32 [In]
  fun SHGetIconOverlayIndexA(psziconpath : PSTR, iiconindex : Int32) : Int32

  # Params # psziconpath : LibC::LPWSTR [In],iiconindex : Int32 [In]
  fun SHGetIconOverlayIndexW(psziconpath : LibC::LPWSTR, iiconindex : Int32) : Int32

  # Params # pidl : ITEMIDLIST* [In]
  fun ILClone(pidl : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In]
  fun ILCloneFirst(pidl : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl1 : ITEMIDLIST* [In],pidl2 : ITEMIDLIST* [In]
  fun ILCombine(pidl1 : ITEMIDLIST*, pidl2 : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In]
  fun ILFree(pidl : ITEMIDLIST*)

  # Params # pidl : ITEMIDLIST* [In]
  fun ILGetNext(pidl : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In]
  fun ILGetSize(pidl : ITEMIDLIST*) : UInt32

  # Params # pidlparent : ITEMIDLIST* [In],pidlchild : ITEMIDLIST* [In]
  fun ILFindChild(pidlparent : ITEMIDLIST*, pidlchild : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In]
  fun ILFindLastID(pidl : ITEMIDLIST*) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In]
  fun ILRemoveLastID(pidl : ITEMIDLIST*) : LibC::BOOL

  # Params # pidl1 : ITEMIDLIST* [In],pidl2 : ITEMIDLIST* [In]
  fun ILIsEqual(pidl1 : ITEMIDLIST*, pidl2 : ITEMIDLIST*) : LibC::BOOL

  # Params # pidl1 : ITEMIDLIST* [In],pidl2 : ITEMIDLIST* [In],fimmediate : LibC::BOOL [In]
  fun ILIsParent(pidl1 : ITEMIDLIST*, pidl2 : ITEMIDLIST*, fimmediate : LibC::BOOL) : LibC::BOOL

  # Params # pstm : IStream [In],pidl : ITEMIDLIST* [In]
  fun ILSaveToStream(pstm : IStream, pidl : ITEMIDLIST*) : HRESULT

  # Params # pstm : IStream [In],pidl : ITEMIDLIST** [In]
  fun ILLoadFromStreamEx(pstm : IStream, pidl : ITEMIDLIST**) : HRESULT

  # Params # pszpath : PSTR [In]
  fun ILCreateFromPathA(pszpath : PSTR) : ITEMIDLIST*

  # Params # pszpath : LibC::LPWSTR [In]
  fun ILCreateFromPathW(pszpath : LibC::LPWSTR) : ITEMIDLIST*

  # Params # pszpath : LibC::LPWSTR [In],ppidl : ITEMIDLIST** [In],rgfinout : UInt32* [In]
  fun SHILCreateFromPath(pszpath : LibC::LPWSTR, ppidl : ITEMIDLIST**, rgfinout : UInt32*) : HRESULT

  # Params # pidl : ITEMIDLIST* [In],pmkid : SHITEMID* [In],fappend : LibC::BOOL [In]
  fun ILAppendID(pidl : ITEMIDLIST*, pmkid : SHITEMID*, fappend : LibC::BOOL) : ITEMIDLIST*

  # Params # pidl : ITEMIDLIST* [In],pszpath : Char* [In],cchpath : UInt32 [In],uopts : Int32 [In]
  fun SHGetPathFromIDListEx(pidl : ITEMIDLIST*, pszpath : Char*, cchpath : UInt32, uopts : Int32) : LibC::BOOL

  # Params # pidl : ITEMIDLIST* [In],pszpath : UInt8* [In]
  fun SHGetPathFromIDListA(pidl : ITEMIDLIST*, pszpath : UInt8*) : LibC::BOOL

  # Params # pidl : ITEMIDLIST* [In],pszpath : Char* [In]
  fun SHGetPathFromIDListW(pidl : ITEMIDLIST*, pszpath : Char*) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pszpath : LibC::LPWSTR [In]
  fun SHCreateDirectory(hwnd : LibC::HANDLE, pszpath : LibC::LPWSTR) : Int32

  # Params # hwnd : LibC::HANDLE [In],pszpath : PSTR [In],psa : SECURITY_ATTRIBUTES* [In]
  fun SHCreateDirectoryExA(hwnd : LibC::HANDLE, pszpath : PSTR, psa : SECURITY_ATTRIBUTES*) : Int32

  # Params # hwnd : LibC::HANDLE [In],pszpath : LibC::LPWSTR [In],psa : SECURITY_ATTRIBUTES* [In]
  fun SHCreateDirectoryExW(hwnd : LibC::HANDLE, pszpath : LibC::LPWSTR, psa : SECURITY_ATTRIBUTES*) : Int32

  # Params # pidlfolder : ITEMIDLIST* [In],cidl : UInt32 [In],apidl : ITEMIDLIST** [In],dwflags : UInt32 [In]
  fun SHOpenFolderAndSelectItems(pidlfolder : ITEMIDLIST*, cidl : UInt32, apidl : ITEMIDLIST**, dwflags : UInt32) : HRESULT

  # Params # pidlparent : ITEMIDLIST* [In],psfparent : IShellFolder [In],pidl : ITEMIDLIST* [In],ppsi : IShellItem* [In]
  fun SHCreateShellItem(pidlparent : ITEMIDLIST*, psfparent : IShellFolder, pidl : ITEMIDLIST*, ppsi : IShellItem*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],ppidl : ITEMIDLIST** [In]
  fun SHGetSpecialFolderLocation(hwnd : LibC::HANDLE, csidl : Int32, ppidl : ITEMIDLIST**) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],fcreate : LibC::BOOL [In]
  fun SHCloneSpecialIDList(hwnd : LibC::HANDLE, csidl : Int32, fcreate : LibC::BOOL) : ITEMIDLIST*

  # Params # hwnd : LibC::HANDLE [In],pszpath : UInt8* [In],csidl : Int32 [In],fcreate : LibC::BOOL [In]
  fun SHGetSpecialFolderPathA(hwnd : LibC::HANDLE, pszpath : UInt8*, csidl : Int32, fcreate : LibC::BOOL) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pszpath : Char* [In],csidl : Int32 [In],fcreate : LibC::BOOL [In]
  fun SHGetSpecialFolderPathW(hwnd : LibC::HANDLE, pszpath : Char*, csidl : Int32, fcreate : LibC::BOOL) : LibC::BOOL

  # Params # 
  fun SHFlushSFCache

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszpath : UInt8* [In]
  fun SHGetFolderPathA(hwnd : LibC::HANDLE, csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszpath : UInt8*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszpath : Char* [In]
  fun SHGetFolderPathW(hwnd : LibC::HANDLE, csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszpath : Char*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],ppidl : ITEMIDLIST** [In]
  fun SHGetFolderLocation(hwnd : LibC::HANDLE, csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, ppidl : ITEMIDLIST**) : HRESULT

  # Params # csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszpath : PSTR [In]
  fun SHSetFolderPathA(csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszpath : PSTR) : HRESULT

  # Params # csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszpath : LibC::LPWSTR [In]
  fun SHSetFolderPathW(csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszpath : LibC::LPWSTR) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszsubdir : PSTR [In],pszpath : UInt8* [In]
  fun SHGetFolderPathAndSubDirA(hwnd : LibC::HANDLE, csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszsubdir : PSTR, pszpath : UInt8*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],csidl : Int32 [In],htoken : LibC::HANDLE [In],dwflags : UInt32 [In],pszsubdir : LibC::LPWSTR [In],pszpath : Char* [In]
  fun SHGetFolderPathAndSubDirW(hwnd : LibC::HANDLE, csidl : Int32, htoken : LibC::HANDLE, dwflags : UInt32, pszsubdir : LibC::LPWSTR, pszpath : Char*) : HRESULT

  # Params # rfid : Guid* [In],dwflags : UInt32 [In],htoken : LibC::HANDLE [In],ppidl : ITEMIDLIST** [In]
  fun SHGetKnownFolderIDList(rfid : Guid*, dwflags : UInt32, htoken : LibC::HANDLE, ppidl : ITEMIDLIST**) : HRESULT

  # Params # rfid : Guid* [In],dwflags : UInt32 [In],htoken : LibC::HANDLE [In],pszpath : LibC::LPWSTR [In]
  fun SHSetKnownFolderPath(rfid : Guid*, dwflags : UInt32, htoken : LibC::HANDLE, pszpath : LibC::LPWSTR) : HRESULT

  # Params # rfid : Guid* [In],dwflags : UInt32 [In],htoken : LibC::HANDLE [In],ppszpath : LibC::LPWSTR* [In]
  # Commented out because function is part of Lib C
  #fun SHGetKnownFolderPath(rfid : Guid*, dwflags : UInt32, htoken : LibC::HANDLE, ppszpath : LibC::LPWSTR*) : HRESULT

  # Params # rfid : Guid* [In],flags : KNOWN_FOLDER_FLAG [In],htoken : LibC::HANDLE [In],riid : Guid* [In],ppv : Void** [In]
  fun SHGetKnownFolderItem(rfid : Guid*, flags : KNOWN_FOLDER_FLAG, htoken : LibC::HANDLE, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pfcs : SHFOLDERCUSTOMSETTINGS* [In],pszpath : LibC::LPWSTR [In],dwreadwrite : UInt32 [In]
  fun SHGetSetFolderCustomSettings(pfcs : SHFOLDERCUSTOMSETTINGS*, pszpath : LibC::LPWSTR, dwreadwrite : UInt32) : HRESULT

  # Params # lpbi : BROWSEINFOA* [In]
  fun SHBrowseForFolderA(lpbi : BROWSEINFOA*) : ITEMIDLIST*

  # Params # lpbi : BROWSEINFOW* [In]
  fun SHBrowseForFolderW(lpbi : BROWSEINFOW*) : ITEMIDLIST*

  # Params # rclsid : Guid* [In]
  fun SHLoadInProc(rclsid : Guid*) : HRESULT

  # Params # ppshf : IShellFolder* [In]
  fun SHGetDesktopFolder(ppshf : IShellFolder*) : HRESULT

  # Params # weventid : SHCNE_ID [In],uflags : SHCNF_FLAGS [In],dwitem1 : Void* [In],dwitem2 : Void* [In]
  fun SHChangeNotify(weventid : SHCNE_ID, uflags : SHCNF_FLAGS, dwitem1 : Void*, dwitem2 : Void*)

  # Params # uflags : UInt32 [In],pv : Void* [In]
  fun SHAddToRecentDocs(uflags : UInt32, pv : Void*)

  # Params # pidlextra : ITEMIDLIST* [In]
  fun SHHandleUpdateImage(pidlextra : ITEMIDLIST*) : Int32

  # Params # pszhashitem : PSTR [In],iindex : Int32 [In],uflags : UInt32 [In],iimageindex : Int32 [In]
  fun SHUpdateImageA(pszhashitem : PSTR, iindex : Int32, uflags : UInt32, iimageindex : Int32)

  # Params # pszhashitem : LibC::LPWSTR [In],iindex : Int32 [In],uflags : UInt32 [In],iimageindex : Int32 [In]
  fun SHUpdateImageW(pszhashitem : LibC::LPWSTR, iindex : Int32, uflags : UInt32, iimageindex : Int32)

  # Params # hwnd : LibC::HANDLE [In],fsources : SHCNRF_SOURCE [In],fevents : Int32 [In],wmsg : UInt32 [In],centries : Int32 [In],pshcne : SHChangeNotifyEntry* [In]
  fun SHChangeNotifyRegister(hwnd : LibC::HANDLE, fsources : SHCNRF_SOURCE, fevents : Int32, wmsg : UInt32, centries : Int32, pshcne : SHChangeNotifyEntry*) : UInt32

  # Params # ulid : UInt32 [In]
  fun SHChangeNotifyDeregister(ulid : UInt32) : LibC::BOOL

  # Params # hchange : LibC::HANDLE [In],dwprocid : UInt32 [In],pppidl : ITEMIDLIST*** [In],plevent : Int32* [In]
  fun SHChangeNotification_Lock(hchange : LibC::HANDLE, dwprocid : UInt32, pppidl : ITEMIDLIST***, plevent : Int32*) : ShFindChangeNotificationHandle

  # Params # hlock : LibC::HANDLE [In]
  fun SHChangeNotification_Unlock(hlock : LibC::HANDLE) : LibC::BOOL

  # Params # psf : IShellFolder [In],pidlsimple : ITEMIDLIST* [In],ppidlreal : ITEMIDLIST** [In]
  fun SHGetRealIDL(psf : IShellFolder, pidlsimple : ITEMIDLIST*, ppidlreal : ITEMIDLIST**) : HRESULT

  # Params # ppunk : IUnknown* [In]
  fun SHGetInstanceExplorer(ppunk : IUnknown*) : HRESULT

  # Params # psf : IShellFolder [In],pidl : ITEMIDLIST* [In],nformat : SHGDFIL_FORMAT [In],pv : Void* [In],cb : Int32 [In]
  fun SHGetDataFromIDListA(psf : IShellFolder, pidl : ITEMIDLIST*, nformat : SHGDFIL_FORMAT, pv : Void*, cb : Int32) : HRESULT

  # Params # psf : IShellFolder [In],pidl : ITEMIDLIST* [In],nformat : SHGDFIL_FORMAT [In],pv : Void* [In],cb : Int32 [In]
  fun SHGetDataFromIDListW(psf : IShellFolder, pidl : ITEMIDLIST*, nformat : SHGDFIL_FORMAT, pv : Void*, cb : Int32) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pszprompt : LibC::LPWSTR [In],dwreturn : UInt32 [In]
  fun RestartDialog(hwnd : LibC::HANDLE, pszprompt : LibC::LPWSTR, dwreturn : UInt32) : Int32

  # Params # hwnd : LibC::HANDLE [In],pszprompt : LibC::LPWSTR [In],dwreturn : UInt32 [In],dwreasoncode : UInt32 [In]
  fun RestartDialogEx(hwnd : LibC::HANDLE, pszprompt : LibC::LPWSTR, dwreturn : UInt32, dwreasoncode : UInt32) : Int32

  # Params # pszclsid : LibC::LPWSTR [In],pclsid : Guid* [In],punkouter : IUnknown [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCoCreateInstance(pszclsid : LibC::LPWSTR, pclsid : Guid*, punkouter : IUnknown, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pidlfolder : ITEMIDLIST* [In],cidl : UInt32 [In],apidl : ITEMIDLIST** [In],pdtinner : IDataObject [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateDataObject(pidlfolder : ITEMIDLIST*, cidl : UInt32, apidl : ITEMIDLIST**, pdtinner : IDataObject, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pidlfolder : ITEMIDLIST* [In],cidl : UInt32 [In],apidl : ITEMIDLIST** [In],ppdtobj : IDataObject* [In]
  fun CIDLData_CreateFromIDArray(pidlfolder : ITEMIDLIST*, cidl : UInt32, apidl : ITEMIDLIST**, ppdtobj : IDataObject*) : HRESULT

  # Params # cfmt : UInt32 [In],afmt : FORMATETC* [In],ppenumformatetc : IEnumFORMATETC* [In]
  fun SHCreateStdEnumFmtEtc(cfmt : UInt32, afmt : FORMATETC*, ppenumformatetc : IEnumFORMATETC*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pdata : IDataObject [In],pdsrc : IDropSource [In],dweffect : UInt32 [In],pdweffect : UInt32* [In]
  fun SHDoDragDrop(hwnd : LibC::HANDLE, pdata : IDataObject, pdsrc : IDropSource, dweffect : UInt32, pdweffect : UInt32*) : HRESULT

  # Params # him : HIMAGELIST [In],pptoffset : POINT* [In]
  fun DAD_SetDragImage(him : HIMAGELIST, pptoffset : POINT*) : LibC::BOOL

  # Params # hwndtarget : LibC::HANDLE [In],ptstart : POINT [In]
  fun DAD_DragEnterEx(hwndtarget : LibC::HANDLE, ptstart : POINT) : LibC::BOOL

  # Params # hwndtarget : LibC::HANDLE [In],ptstart : POINT [In],pdtobject : IDataObject [In]
  fun DAD_DragEnterEx2(hwndtarget : LibC::HANDLE, ptstart : POINT, pdtobject : IDataObject) : LibC::BOOL

  # Params # fshow : LibC::BOOL [In]
  fun DAD_ShowDragImage(fshow : LibC::BOOL) : LibC::BOOL

  # Params # pt : POINT [In]
  fun DAD_DragMove(pt : POINT) : LibC::BOOL

  # Params # 
  fun DAD_DragLeave : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pad : AUTO_SCROLL_DATA* [In],pptnow : POINT* [In]
  fun DAD_AutoScroll(hwnd : LibC::HANDLE, pad : AUTO_SCROLL_DATA*, pptnow : POINT*) : LibC::BOOL

  # Params # pcs : CABINETSTATE* [In],clength : Int32 [In]
  fun ReadCabinetState(pcs : CABINETSTATE*, clength : Int32) : LibC::BOOL

  # Params # pcs : CABINETSTATE* [In]
  fun WriteCabinetState(pcs : CABINETSTATE*) : LibC::BOOL

  # Params # pszuniquename : Char* [In],cchmax : UInt32 [In],psztemplate : LibC::LPWSTR [In],pszlongplate : LibC::LPWSTR [In],pszdir : LibC::LPWSTR [In]
  fun PathMakeUniqueName(pszuniquename : Char*, cchmax : UInt32, psztemplate : LibC::LPWSTR, pszlongplate : LibC::LPWSTR, pszdir : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsExe(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszdir : LibC::LPWSTR [In],pszspec : LibC::LPWSTR [In]
  fun PathCleanupSpec(pszdir : LibC::LPWSTR, pszspec : LibC::LPWSTR) : PCS_RET

  # Params # pszpath : Char* [In],dirs : UInt16** [In],fflags : PRF_FLAGS [In]
  fun PathResolve(pszpath : Char*, dirs : UInt16**, fflags : PRF_FLAGS) : Int32

  # Params # hwnd : LibC::HANDLE [In],pszfilepath : Char* [In],cchfilepath : UInt32 [In],pszworkingdir : LibC::LPWSTR [In],pszdefext : LibC::LPWSTR [In],pszfilters : LibC::LPWSTR [In],psztitle : LibC::LPWSTR [In]
  fun GetFileNameFromBrowse(hwnd : LibC::HANDLE, pszfilepath : Char*, cchfilepath : UInt32, pszworkingdir : LibC::LPWSTR, pszdefext : LibC::LPWSTR, pszfilters : LibC::LPWSTR, psztitle : LibC::LPWSTR) : LibC::BOOL

  # Params # idrive : Int32 [In]
  fun DriveType(idrive : Int32) : Int32

  # Params # idrive : Int32 [In],foktohitnet : LibC::BOOL [In]
  fun RealDriveType(idrive : Int32, foktohitnet : LibC::BOOL) : Int32

  # Params # idrive : Int32 [In]
  fun IsNetDrive(idrive : Int32) : Int32

  # Params # hmdst : LibC::HANDLE [In],hmsrc : LibC::HANDLE [In],uinsert : UInt32 [In],uidadjust : UInt32 [In],uidadjustmax : UInt32 [In],uflags : MM_FLAGS [In]
  fun Shell_MergeMenus(hmdst : LibC::HANDLE, hmsrc : LibC::HANDLE, uinsert : UInt32, uidadjust : UInt32, uidadjustmax : UInt32, uflags : MM_FLAGS) : UInt32

  # Params # hwnd : LibC::HANDLE [In],shopobjecttype : SHOP_TYPE [In],pszobjectname : LibC::LPWSTR [In],pszpropertypage : LibC::LPWSTR [In]
  fun SHObjectProperties(hwnd : LibC::HANDLE, shopobjecttype : SHOP_TYPE, pszobjectname : LibC::LPWSTR, pszpropertypage : LibC::LPWSTR) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],drive : UInt32 [In],fmtid : SHFMT_ID [In],options : SHFMT_OPT [In]
  fun SHFormatDrive(hwnd : LibC::HANDLE, drive : UInt32, fmtid : SHFMT_ID, options : SHFMT_OPT) : UInt32

  # Params # hpsxa : HPSXA [In]
  fun SHDestroyPropSheetExtArray(hpsxa : HPSXA)

  # Params # hpsxa : HPSXA [In],lpfnaddpage : LPFNSVADDPROPSHEETPAGE [In],lparam : LPARAM [In]
  fun SHAddFromPropSheetExtArray(hpsxa : HPSXA, lpfnaddpage : LPFNSVADDPROPSHEETPAGE, lparam : LPARAM) : UInt32

  # Params # hpsxa : HPSXA [In],upageid : UInt32 [In],lpfnreplacewith : LPFNSVADDPROPSHEETPAGE [In],lparam : LPARAM [In]
  fun SHReplaceFromPropSheetExtArray(hpsxa : HPSXA, upageid : UInt32, lpfnreplacewith : LPFNSVADDPROPSHEETPAGE, lparam : LPARAM) : UInt32

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],grfmode : UInt32 [In]
  fun OpenRegStream(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, grfmode : UInt32) : IStream

  # Params # pidlfolder : ITEMIDLIST* [In],pidlsavefile : ITEMIDLIST* [In]
  fun SHFindFiles(pidlfolder : ITEMIDLIST*, pidlsavefile : ITEMIDLIST*) : LibC::BOOL

  # Params # pszlongpath : Char* [In]
  fun PathGetShortPath(pszlongpath : Char*)

  # Params # pszuniquename : Char* [In],pszpath : LibC::LPWSTR [In],pszshort : LibC::LPWSTR [In],pszfilespec : LibC::LPWSTR [In]
  fun PathYetAnotherMakeUniqueName(pszuniquename : Char*, pszpath : LibC::LPWSTR, pszshort : LibC::LPWSTR, pszfilespec : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun Win32DeleteFile(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # rest : RESTRICTIONS [In]
  fun SHRestricted(rest : RESTRICTIONS) : UInt32

  # Params # pidl : ITEMIDLIST* [In]
  fun SignalFileOpen(pidl : ITEMIDLIST*) : LibC::BOOL

  # Params # psf : IShellFolder [In],pidl : ITEMIDLIST* [In],pkey : PROPERTYKEY* [In],pv : VARIANT* [In],pffoundpropkey : LibC::BOOL* [In]
  fun AssocGetDetailsOfPropKey(psf : IShellFolder, pidl : ITEMIDLIST*, pkey : PROPERTYKEY*, pv : VARIANT*, pffoundpropkey : LibC::BOOL*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pszremotename : LibC::LPWSTR [In],dwtype : UInt32 [In]
  fun SHStartNetConnectionDialogW(hwnd : LibC::HANDLE, pszremotename : LibC::LPWSTR, dwtype : UInt32) : HRESULT

  # Params # psziconfile : PSTR [In],iindex : Int32 [In],uflags : UInt32 [In],phiconlarge : HANDLE* [In],phiconsmall : HANDLE* [In],niconsize : UInt32 [In]
  fun SHDefExtractIconA(psziconfile : PSTR, iindex : Int32, uflags : UInt32, phiconlarge : HANDLE*, phiconsmall : HANDLE*, niconsize : UInt32) : HRESULT

  # Params # psziconfile : LibC::LPWSTR [In],iindex : Int32 [In],uflags : UInt32 [In],phiconlarge : HANDLE* [In],phiconsmall : HANDLE* [In],niconsize : UInt32 [In]
  fun SHDefExtractIconW(psziconfile : LibC::LPWSTR, iindex : Int32, uflags : UInt32, phiconlarge : HANDLE*, phiconsmall : HANDLE*, niconsize : UInt32) : HRESULT

  # Params # hwndparent : LibC::HANDLE [In],poainfo : OPENASINFO* [In]
  fun SHOpenWithDialog(hwndparent : LibC::HANDLE, poainfo : OPENASINFO*) : HRESULT

  # Params # phiml : HIMAGELIST* [In],phimlsmall : HIMAGELIST* [In]
  fun Shell_GetImageLists(phiml : HIMAGELIST*, phimlsmall : HIMAGELIST*) : LibC::BOOL

  # Params # pwsziconpath : LibC::LPWSTR [In],iiconindex : Int32 [In],uiconflags : UInt32 [In]
  fun Shell_GetCachedImageIndex(pwsziconpath : LibC::LPWSTR, iiconindex : Int32, uiconflags : UInt32) : Int32

  # Params # psziconpath : PSTR [In],iiconindex : Int32 [In],uiconflags : UInt32 [In]
  fun Shell_GetCachedImageIndexA(psziconpath : PSTR, iiconindex : Int32, uiconflags : UInt32) : Int32

  # Params # psziconpath : LibC::LPWSTR [In],iiconindex : Int32 [In],uiconflags : UInt32 [In]
  fun Shell_GetCachedImageIndexW(psziconpath : LibC::LPWSTR, iiconindex : Int32, uiconflags : UInt32) : Int32

  # Params # hwndowner : LibC::HANDLE [In],pszfile : LibC::LPWSTR [In],fconnect : VALIDATEUNC_OPTION [In]
  fun SHValidateUNC(hwndowner : LibC::HANDLE, pszfile : LibC::LPWSTR, fconnect : VALIDATEUNC_OPTION) : LibC::BOOL

  # Params # punk : IUnknown [In]
  fun SHSetInstanceExplorer(punk : IUnknown)

  # Params # 
  fun IsUserAnAdmin : LibC::BOOL

  # Params # hwndmain : LibC::HANDLE [In],umsg : UInt32 [In],lparam : LPARAM [In]
  fun SHShellFolderView_Message(hwndmain : LibC::HANDLE, umsg : UInt32, lparam : LPARAM) : LRESULT

  # Params # pcsfv : SFV_CREATE* [In],ppsv : IShellView* [In]
  fun SHCreateShellFolderView(pcsfv : SFV_CREATE*, ppsv : IShellView*) : HRESULT

  # Params # pidlfolder : ITEMIDLIST* [In],hwnd : LibC::HANDLE [In],cidl : UInt32 [In],apidl : ITEMIDLIST** [In],psf : IShellFolder [In],pfn : LPFNDFMCALLBACK [In],nkeys : UInt32 [In],ahkeys : HKEY* [In],ppcm : IContextMenu* [In]
  fun CDefFolderMenu_Create2(pidlfolder : ITEMIDLIST*, hwnd : LibC::HANDLE, cidl : UInt32, apidl : ITEMIDLIST**, psf : IShellFolder, pfn : LPFNDFMCALLBACK, nkeys : UInt32, ahkeys : HKEY*, ppcm : IContextMenu*) : HRESULT

  # Params # pdcm : DEFCONTEXTMENU* [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateDefaultContextMenu(pdcm : DEFCONTEXTMENU*, riid : Guid*, ppv : Void**) : HRESULT

  # Params # hmenu : LibC::HANDLE [In],hwndowner : LibC::HANDLE [In],idcmdfirst : UInt32 [In],idcmdlast : UInt32 [In]
  fun SHFind_InitMenuPopup(hmenu : LibC::HANDLE, hwndowner : LibC::HANDLE, idcmdfirst : UInt32, idcmdlast : UInt32) : IContextMenu

  # Params # pcsfv : CSFV* [In],ppsv : IShellView* [In]
  fun SHCreateShellFolderViewEx(pcsfv : CSFV*, ppsv : IShellView*) : HRESULT

  # Params # lpss : SHELLSTATEA* [In],dwmask : SSF_MASK [In],bset : LibC::BOOL [In]
  fun SHGetSetSettings(lpss : SHELLSTATEA*, dwmask : SSF_MASK, bset : LibC::BOOL)

  # Params # psfs : SHELLFLAGSTATE* [In],dwmask : UInt32 [In]
  fun SHGetSettings(psfs : SHELLFLAGSTATE*, dwmask : UInt32)

  # Params # pidl : ITEMIDLIST* [In],riid : Guid* [In],ppv : Void** [In],ppidllast : ITEMIDLIST** [In]
  fun SHBindToParent(pidl : ITEMIDLIST*, riid : Guid*, ppv : Void**, ppidllast : ITEMIDLIST**) : HRESULT

  # Params # psfroot : IShellFolder [In],pidl : ITEMIDLIST* [In],riid : Guid* [In],ppv : Void** [In],ppidllast : ITEMIDLIST** [In]
  fun SHBindToFolderIDListParent(psfroot : IShellFolder, pidl : ITEMIDLIST*, riid : Guid*, ppv : Void**, ppidllast : ITEMIDLIST**) : HRESULT

  # Params # psfroot : IShellFolder [In],pidl : ITEMIDLIST* [In],ppbc : IBindCtx [In],riid : Guid* [In],ppv : Void** [In],ppidllast : ITEMIDLIST** [In]
  fun SHBindToFolderIDListParentEx(psfroot : IShellFolder, pidl : ITEMIDLIST*, ppbc : IBindCtx, riid : Guid*, ppv : Void**, ppidllast : ITEMIDLIST**) : HRESULT

  # Params # psf : IShellFolder [In],pidl : ITEMIDLIST* [In],pbc : IBindCtx [In],riid : Guid* [In],ppv : Void** [In]
  fun SHBindToObject(psf : IShellFolder, pidl : ITEMIDLIST*, pbc : IBindCtx, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pszname : LibC::LPWSTR [In],pbc : IBindCtx [In],ppidl : ITEMIDLIST** [In],sfgaoin : UInt32 [In],psfgaoout : UInt32* [In]
  fun SHParseDisplayName(pszname : LibC::LPWSTR, pbc : IBindCtx, ppidl : ITEMIDLIST**, sfgaoin : UInt32, psfgaoout : UInt32*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],punkenablemodless : IUnknown [In],pszpath : PSTR [In],dwflags : UInt32 [In]
  fun SHPathPrepareForWriteA(hwnd : LibC::HANDLE, punkenablemodless : IUnknown, pszpath : PSTR, dwflags : UInt32) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],punkenablemodless : IUnknown [In],pszpath : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun SHPathPrepareForWriteW(hwnd : LibC::HANDLE, punkenablemodless : IUnknown, pszpath : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pszfile : LibC::LPWSTR [In],dwfileattributes : UInt32 [In],riid : Guid* [In],ppv : Void** [In]
  fun SHCreateFileExtractIconW(pszfile : LibC::LPWSTR, dwfileattributes : UInt32, riid : Guid*, ppv : Void**) : HRESULT

  # Params # hwndedit : LibC::HANDLE [In],psf : IShellFolder [In]
  fun SHLimitInputEdit(hwndedit : LibC::HANDLE, psf : IShellFolder) : HRESULT

  # Params # pdo : IDataObject [In],dwattributemask : UInt32 [In],pdwattributes : UInt32* [In],pcitems : UInt32* [In]
  fun SHGetAttributesFromDataObject(pdo : IDataObject, dwattributemask : UInt32, pdwattributes : UInt32*, pcitems : UInt32*) : HRESULT

  # Params # pshf : IShellFolder [In],pidl : ITEMIDLIST* [In],piindexsel : Int32* [In]
  fun SHMapPIDLToSystemImageListIndex(pshf : IShellFolder, pidl : ITEMIDLIST*, piindexsel : Int32*) : Int32

  # Params # psz : LibC::LPWSTR [In],pclsid : Guid* [In]
  fun SHCLSIDFromString(psz : LibC::LPWSTR, pclsid : Guid*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],psziconpath : Char* [In],cchiconpath : UInt32 [In],piiconindex : Int32* [In]
  fun PickIconDlg(hwnd : LibC::HANDLE, psziconpath : Char*, cchiconpath : UInt32, piiconindex : Int32*) : Int32

  # Params # pstgparent : IStorage [In],pszfilespec : LibC::LPWSTR [In],grfmode : UInt32 [In],riid : Guid* [In],ppv : Void** [In]
  fun StgMakeUniqueName(pstgparent : IStorage, pszfilespec : LibC::LPWSTR, grfmode : UInt32, riid : Guid*, ppv : Void**) : HRESULT

  # Params # status : SCNRT_STATUS [In]
  fun SHChangeNotifyRegisterThread(status : SCNRT_STATUS)

  # Params # psz : LibC::LPWSTR [In]
  fun PathQualify(psz : LibC::LPWSTR)

  # Params # pszfile : PSTR [In],dwattr : UInt32 [In]
  fun PathIsSlowA(pszfile : PSTR, dwattr : UInt32) : LibC::BOOL

  # Params # pszfile : LibC::LPWSTR [In],dwattr : UInt32 [In]
  fun PathIsSlowW(pszfile : LibC::LPWSTR, dwattr : UInt32) : LibC::BOOL

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],max_iface : UInt32 [In]
  fun SHCreatePropSheetExtArray(hkey : HKEY, pszsubkey : LibC::LPWSTR, max_iface : UInt32) : HPSXA

  # Params # pszcaption : LibC::LPWSTR [In],ahkeys : HKEY* [In],ckeys : UInt32 [In],pclsiddefault : Guid* [In],pdtobj : IDataObject [In],psb : IShellBrowser [In],pstartpage : LibC::LPWSTR [In]
  fun SHOpenPropSheetW(pszcaption : LibC::LPWSTR, ahkeys : HKEY*, ckeys : UInt32, pclsiddefault : Guid*, pdtobj : IDataObject, psb : IShellBrowser, pstartpage : LibC::LPWSTR) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],pszdistunit : LibC::LPWSTR [In],dwflags : UInt32 [In],psdi : SOFTDISTINFO* [In]
  fun SoftwareUpdateMessageBox(hwnd : LibC::HANDLE, pszdistunit : LibC::LPWSTR, dwflags : UInt32, psdi : SOFTDISTINFO*) : UInt32

  # Params # pdtobj : IDataObject [In],dwflags : UInt32 [In]
  fun SHMultiFileProperties(pdtobj : IDataObject, dwflags : UInt32) : HRESULT

  # Params # ppmoniker : IMoniker* [In]
  fun SHCreateQueryCancelAutoPlayMoniker(ppmoniker : IMoniker*) : HRESULT

  # Params # pszfilename : LibC::LPWSTR [In],pfparseprivacypreferences : LibC::BOOL* [In],pfparsepersiterules : LibC::BOOL* [In]
  fun ImportPrivacySettings(pszfilename : LibC::LPWSTR, pfparseprivacypreferences : LibC::BOOL*, pfparsepersiterules : LibC::BOOL*) : LibC::BOOL

  # Params # devicetype : DISPLAY_DEVICE_TYPE [In]
  fun GetScaleFactorForDevice(devicetype : DISPLAY_DEVICE_TYPE) : DEVICE_SCALE_FACTOR

  # Params # displaydevice : DISPLAY_DEVICE_TYPE [In],hwndnotify : LibC::HANDLE [In],umsgnotify : UInt32 [In],pdwcookie : UInt32* [In]
  fun RegisterScaleChangeNotifications(displaydevice : DISPLAY_DEVICE_TYPE, hwndnotify : LibC::HANDLE, umsgnotify : UInt32, pdwcookie : UInt32*) : HRESULT

  # Params # displaydevice : DISPLAY_DEVICE_TYPE [In],dwcookie : UInt32 [In]
  fun RevokeScaleChangeNotifications(displaydevice : DISPLAY_DEVICE_TYPE, dwcookie : UInt32) : HRESULT

  # Params # hmon : HMONITOR [In],pscale : DEVICE_SCALE_FACTOR* [In]
  fun GetScaleFactorForMonitor(hmon : HMONITOR, pscale : DEVICE_SCALE_FACTOR*) : HRESULT

  # Params # hevent : LibC::HANDLE [In],pdwcookie : LibC::UINT_PTR* [In]
  fun RegisterScaleChangeEvent(hevent : LibC::HANDLE, pdwcookie : LibC::UINT_PTR*) : HRESULT

  # Params # dwcookie : LibC::UINT_PTR [In]
  fun UnregisterScaleChangeEvent(dwcookie : LibC::UINT_PTR) : HRESULT

  # Params # param0 : SHELL_UI_COMPONENT [In]
  fun GetDpiForShellUIComponent(param0 : SHELL_UI_COMPONENT) : UInt32

  # Params # lpcmdline : LibC::LPWSTR [In],pnumargs : Int32* [In]
  fun CommandLineToArgvW(lpcmdline : LibC::LPWSTR, pnumargs : Int32*) : LibC::LPWSTR*

  # Params # hdrop : HDROP [In],ifile : UInt32 [In],lpszfile : UInt8* [In],cch : UInt32 [In]
  fun DragQueryFileA(hdrop : HDROP, ifile : UInt32, lpszfile : UInt8*, cch : UInt32) : UInt32

  # Params # hdrop : HDROP [In],ifile : UInt32 [In],lpszfile : Char* [In],cch : UInt32 [In]
  fun DragQueryFileW(hdrop : HDROP, ifile : UInt32, lpszfile : Char*, cch : UInt32) : UInt32

  # Params # hdrop : HDROP [In],ppt : POINT* [In]
  fun DragQueryPoint(hdrop : HDROP, ppt : POINT*) : LibC::BOOL

  # Params # hdrop : HDROP [In]
  fun DragFinish(hdrop : HDROP)

  # Params # hwnd : LibC::HANDLE [In],faccept : LibC::BOOL [In]
  fun DragAcceptFiles(hwnd : LibC::HANDLE, faccept : LibC::BOOL)

  # Params # hwnd : LibC::HANDLE [In],lpoperation : PSTR [In],lpfile : PSTR [In],lpparameters : PSTR [In],lpdirectory : PSTR [In],nshowcmd : Int32 [In]
  fun ShellExecuteA(hwnd : LibC::HANDLE, lpoperation : PSTR, lpfile : PSTR, lpparameters : PSTR, lpdirectory : PSTR, nshowcmd : Int32) : HINSTANCE

  # Params # hwnd : LibC::HANDLE [In],lpoperation : LibC::LPWSTR [In],lpfile : LibC::LPWSTR [In],lpparameters : LibC::LPWSTR [In],lpdirectory : LibC::LPWSTR [In],nshowcmd : Int32 [In]
  fun ShellExecuteW(hwnd : LibC::HANDLE, lpoperation : LibC::LPWSTR, lpfile : LibC::LPWSTR, lpparameters : LibC::LPWSTR, lpdirectory : LibC::LPWSTR, nshowcmd : Int32) : HINSTANCE

  # Params # lpfile : PSTR [In],lpdirectory : PSTR [In],lpresult : UInt8* [In]
  fun FindExecutableA(lpfile : PSTR, lpdirectory : PSTR, lpresult : UInt8*) : HINSTANCE

  # Params # lpfile : LibC::LPWSTR [In],lpdirectory : LibC::LPWSTR [In],lpresult : Char* [In]
  fun FindExecutableW(lpfile : LibC::LPWSTR, lpdirectory : LibC::LPWSTR, lpresult : Char*) : HINSTANCE

  # Params # hwnd : LibC::HANDLE [In],szapp : PSTR [In],szotherstuff : PSTR [In],hicon : LibC::HANDLE [In]
  fun ShellAboutA(hwnd : LibC::HANDLE, szapp : PSTR, szotherstuff : PSTR, hicon : LibC::HANDLE) : Int32

  # Params # hwnd : LibC::HANDLE [In],szapp : LibC::LPWSTR [In],szotherstuff : LibC::LPWSTR [In],hicon : LibC::HANDLE [In]
  fun ShellAboutW(hwnd : LibC::HANDLE, szapp : LibC::LPWSTR, szotherstuff : LibC::LPWSTR, hicon : LibC::HANDLE) : Int32

  # Params # hinst : HINSTANCE [In],hicon : LibC::HANDLE [In]
  fun DuplicateIcon(hinst : HINSTANCE, hicon : LibC::HANDLE) : HANDLE

  # Params # hinst : HINSTANCE [In],psziconpath : UInt8* [In],piicon : UInt16* [In]
  fun ExtractAssociatedIconA(hinst : HINSTANCE, psziconpath : UInt8*, piicon : UInt16*) : HANDLE

  # Params # hinst : HINSTANCE [In],psziconpath : Char* [In],piicon : UInt16* [In]
  fun ExtractAssociatedIconW(hinst : HINSTANCE, psziconpath : Char*, piicon : UInt16*) : HANDLE

  # Params # hinst : HINSTANCE [In],psziconpath : UInt8* [In],piiconindex : UInt16* [In],piiconid : UInt16* [In]
  fun ExtractAssociatedIconExA(hinst : HINSTANCE, psziconpath : UInt8*, piiconindex : UInt16*, piiconid : UInt16*) : HANDLE

  # Params # hinst : HINSTANCE [In],psziconpath : Char* [In],piiconindex : UInt16* [In],piiconid : UInt16* [In]
  fun ExtractAssociatedIconExW(hinst : HINSTANCE, psziconpath : Char*, piiconindex : UInt16*, piiconid : UInt16*) : HANDLE

  # Params # hinst : HINSTANCE [In],pszexefilename : PSTR [In],niconindex : UInt32 [In]
  fun ExtractIconA(hinst : HINSTANCE, pszexefilename : PSTR, niconindex : UInt32) : HANDLE

  # Params # hinst : HINSTANCE [In],pszexefilename : LibC::LPWSTR [In],niconindex : UInt32 [In]
  fun ExtractIconW(hinst : HINSTANCE, pszexefilename : LibC::LPWSTR, niconindex : UInt32) : HANDLE

  # Params # dwmessage : UInt32 [In],pdata : APPBARDATA* [In]
  fun SHAppBarMessage(dwmessage : UInt32, pdata : APPBARDATA*) : LibC::UINT_PTR

  # Params # pszsrc : UInt8* [In],cchsrc : UInt32 [In]
  fun DoEnvironmentSubstA(pszsrc : UInt8*, cchsrc : UInt32) : UInt32

  # Params # pszsrc : Char* [In],cchsrc : UInt32 [In]
  fun DoEnvironmentSubstW(pszsrc : Char*, cchsrc : UInt32) : UInt32

  # Params # lpszfile : PSTR [In],niconindex : Int32 [In],phiconlarge : HANDLE* [In],phiconsmall : HANDLE* [In],nicons : UInt32 [In]
  fun ExtractIconExA(lpszfile : PSTR, niconindex : Int32, phiconlarge : HANDLE*, phiconsmall : HANDLE*, nicons : UInt32) : UInt32

  # Params # lpszfile : LibC::LPWSTR [In],niconindex : Int32 [In],phiconlarge : HANDLE* [In],phiconsmall : HANDLE* [In],nicons : UInt32 [In]
  fun ExtractIconExW(lpszfile : LibC::LPWSTR, niconindex : Int32, phiconlarge : HANDLE*, phiconsmall : HANDLE*, nicons : UInt32) : UInt32

  # Params # lpfileop : SHFILEOPSTRUCTA* [In]
  fun SHFileOperationA(lpfileop : SHFILEOPSTRUCTA*) : Int32

  # Params # lpfileop : SHFILEOPSTRUCTW* [In]
  fun SHFileOperationW(lpfileop : SHFILEOPSTRUCTW*) : Int32

  # Params # hnamemappings : LibC::HANDLE [In]
  fun SHFreeNameMappings(hnamemappings : LibC::HANDLE)

  # Params # pexecinfo : SHELLEXECUTEINFOA* [In]
  fun ShellExecuteExA(pexecinfo : SHELLEXECUTEINFOA*) : LibC::BOOL

  # Params # pexecinfo : SHELLEXECUTEINFOW* [In]
  fun ShellExecuteExW(pexecinfo : SHELLEXECUTEINFOW*) : LibC::BOOL

  # Params # pscpi : SHCREATEPROCESSINFOW* [In]
  fun SHCreateProcessAsUserW(pscpi : SHCREATEPROCESSINFOW*) : LibC::BOOL

  # Params # pszcmdtemplate : LibC::LPWSTR [In],ppszapplication : LibC::LPWSTR* [In],ppszcommandline : LibC::LPWSTR* [In],ppszparameters : LibC::LPWSTR* [In]
  fun SHEvaluateSystemCommandTemplate(pszcmdtemplate : LibC::LPWSTR, ppszapplication : LibC::LPWSTR*, ppszcommandline : LibC::LPWSTR*, ppszparameters : LibC::LPWSTR*) : HRESULT

  # Params # rgclasses : ASSOCIATIONELEMENT* [In],cclasses : UInt32 [In],riid : Guid* [In],ppv : Void** [In]
  fun AssocCreateForClasses(rgclasses : ASSOCIATIONELEMENT*, cclasses : UInt32, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pszrootpath : PSTR [In],pshqueryrbinfo : SHQUERYRBINFO* [In]
  fun SHQueryRecycleBinA(pszrootpath : PSTR, pshqueryrbinfo : SHQUERYRBINFO*) : HRESULT

  # Params # pszrootpath : LibC::LPWSTR [In],pshqueryrbinfo : SHQUERYRBINFO* [In]
  fun SHQueryRecycleBinW(pszrootpath : LibC::LPWSTR, pshqueryrbinfo : SHQUERYRBINFO*) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pszrootpath : PSTR [In],dwflags : UInt32 [In]
  fun SHEmptyRecycleBinA(hwnd : LibC::HANDLE, pszrootpath : PSTR, dwflags : UInt32) : HRESULT

  # Params # hwnd : LibC::HANDLE [In],pszrootpath : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun SHEmptyRecycleBinW(hwnd : LibC::HANDLE, pszrootpath : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pquns : QUERY_USER_NOTIFICATION_STATE* [In]
  fun SHQueryUserNotificationState(pquns : QUERY_USER_NOTIFICATION_STATE*) : HRESULT

  # Params # dwmessage : NOTIFY_ICON_MESSAGE [In],lpdata : NOTIFYICONDATAA* [In]
  fun Shell_NotifyIconA(dwmessage : NOTIFY_ICON_MESSAGE, lpdata : NOTIFYICONDATAA*) : LibC::BOOL

  # Params # dwmessage : NOTIFY_ICON_MESSAGE [In],lpdata : NOTIFYICONDATAW* [In]
  fun Shell_NotifyIconW(dwmessage : NOTIFY_ICON_MESSAGE, lpdata : NOTIFYICONDATAW*) : LibC::BOOL

  # Params # identifier : NOTIFYICONIDENTIFIER* [In],iconlocation : RECT* [In]
  fun Shell_NotifyIconGetRect(identifier : NOTIFYICONIDENTIFIER*, iconlocation : RECT*) : HRESULT

  # Params # pszpath : PSTR [In],dwfileattributes : FILE_FLAGS_AND_ATTRIBUTES [In],psfi : SHFILEINFOA* [In],cbfileinfo : UInt32 [In],uflags : SHGFI_FLAGS [In]
  fun SHGetFileInfoA(pszpath : PSTR, dwfileattributes : FILE_FLAGS_AND_ATTRIBUTES, psfi : SHFILEINFOA*, cbfileinfo : UInt32, uflags : SHGFI_FLAGS) : LibC::UINT_PTR

  # Params # pszpath : LibC::LPWSTR [In],dwfileattributes : FILE_FLAGS_AND_ATTRIBUTES [In],psfi : SHFILEINFOW* [In],cbfileinfo : UInt32 [In],uflags : SHGFI_FLAGS [In]
  fun SHGetFileInfoW(pszpath : LibC::LPWSTR, dwfileattributes : FILE_FLAGS_AND_ATTRIBUTES, psfi : SHFILEINFOW*, cbfileinfo : UInt32, uflags : SHGFI_FLAGS) : LibC::UINT_PTR

  # Params # siid : SHSTOCKICONID [In],uflags : UInt32 [In],psii : SHSTOCKICONINFO* [In]
  fun SHGetStockIconInfo(siid : SHSTOCKICONID, uflags : UInt32, psii : SHSTOCKICONINFO*) : HRESULT

  # Params # pszdirectoryname : PSTR [In],pulfreebytesavailabletocaller : ULARGE_INTEGER* [In],pultotalnumberofbytes : ULARGE_INTEGER* [In],pultotalnumberoffreebytes : ULARGE_INTEGER* [In]
  fun SHGetDiskFreeSpaceExA(pszdirectoryname : PSTR, pulfreebytesavailabletocaller : ULARGE_INTEGER*, pultotalnumberofbytes : ULARGE_INTEGER*, pultotalnumberoffreebytes : ULARGE_INTEGER*) : LibC::BOOL

  # Params # pszdirectoryname : LibC::LPWSTR [In],pulfreebytesavailabletocaller : ULARGE_INTEGER* [In],pultotalnumberofbytes : ULARGE_INTEGER* [In],pultotalnumberoffreebytes : ULARGE_INTEGER* [In]
  fun SHGetDiskFreeSpaceExW(pszdirectoryname : LibC::LPWSTR, pulfreebytesavailabletocaller : ULARGE_INTEGER*, pultotalnumberofbytes : ULARGE_INTEGER*, pultotalnumberoffreebytes : ULARGE_INTEGER*) : LibC::BOOL

  # Params # pszlinkto : PSTR [In],pszdir : PSTR [In],pszname : UInt8* [In],pfmustcopy : LibC::BOOL* [In],uflags : UInt32 [In]
  fun SHGetNewLinkInfoA(pszlinkto : PSTR, pszdir : PSTR, pszname : UInt8*, pfmustcopy : LibC::BOOL*, uflags : UInt32) : LibC::BOOL

  # Params # pszlinkto : LibC::LPWSTR [In],pszdir : LibC::LPWSTR [In],pszname : Char* [In],pfmustcopy : LibC::BOOL* [In],uflags : UInt32 [In]
  fun SHGetNewLinkInfoW(pszlinkto : LibC::LPWSTR, pszdir : LibC::LPWSTR, pszname : Char*, pfmustcopy : LibC::BOOL*, uflags : UInt32) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],uaction : UInt32 [In],lpbuf1 : PSTR [In],lpbuf2 : PSTR [In],fmodal : LibC::BOOL [In]
  fun SHInvokePrinterCommandA(hwnd : LibC::HANDLE, uaction : UInt32, lpbuf1 : PSTR, lpbuf2 : PSTR, fmodal : LibC::BOOL) : LibC::BOOL

  # Params # hwnd : LibC::HANDLE [In],uaction : UInt32 [In],lpbuf1 : LibC::LPWSTR [In],lpbuf2 : LibC::LPWSTR [In],fmodal : LibC::BOOL [In]
  fun SHInvokePrinterCommandW(hwnd : LibC::HANDLE, uaction : UInt32, lpbuf1 : LibC::LPWSTR, lpbuf2 : LibC::LPWSTR, fmodal : LibC::BOOL) : LibC::BOOL

  # Params # 
  fun SHLoadNonloadedIconOverlayIdentifiers : HRESULT

  # Params # pwszpath : LibC::LPWSTR [In],pdwstatus : UInt32* [In]
  fun SHIsFileAvailableOffline(pwszpath : LibC::LPWSTR, pdwstatus : UInt32*) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],pszresmodule : LibC::LPWSTR [In],idsres : Int32 [In]
  fun SHSetLocalizedName(pszpath : LibC::LPWSTR, pszresmodule : LibC::LPWSTR, idsres : Int32) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In]
  fun SHRemoveLocalizedName(pszpath : LibC::LPWSTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],pszresmodule : Char* [In],cch : UInt32 [In],pidsres : Int32* [In]
  fun SHGetLocalizedName(pszpath : LibC::LPWSTR, pszresmodule : Char*, cch : UInt32, pidsres : Int32*) : HRESULT

  # Params # happinst : HINSTANCE [In],hwnd : LibC::HANDLE [In],lpctext : PSTR [In],lpctitle : PSTR [In],fustyle : UInt32 [In]
  fun ShellMessageBoxA(happinst : HINSTANCE, hwnd : LibC::HANDLE, lpctext : PSTR, lpctitle : PSTR, fustyle : UInt32) : Int32

  # Params # happinst : HINSTANCE [In],hwnd : LibC::HANDLE [In],lpctext : LibC::LPWSTR [In],lpctitle : LibC::LPWSTR [In],fustyle : UInt32 [In]
  fun ShellMessageBoxW(happinst : HINSTANCE, hwnd : LibC::HANDLE, lpctext : LibC::LPWSTR, lpctitle : LibC::LPWSTR, fustyle : UInt32) : Int32

  # Params # pszpath : PSTR [In]
  fun IsLFNDriveA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun IsLFNDriveW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # hkeyuser : HKEY [In],dwindex : UInt32 [In],pszmailaddress : Char* [In],cchmailaddress : Int32 [In]
  fun SHEnumerateUnreadMailAccountsW(hkeyuser : HKEY, dwindex : UInt32, pszmailaddress : Char*, cchmailaddress : Int32) : HRESULT

  # Params # hkeyuser : HKEY [In],pszmailaddress : LibC::LPWSTR [In],pdwcount : UInt32* [In],pfiletime : FILETIME* [In],pszshellexecutecommand : Char* [In],cchshellexecutecommand : Int32 [In]
  fun SHGetUnreadMailCountW(hkeyuser : HKEY, pszmailaddress : LibC::LPWSTR, pdwcount : UInt32*, pfiletime : FILETIME*, pszshellexecutecommand : Char*, cchshellexecutecommand : Int32) : HRESULT

  # Params # pszmailaddress : LibC::LPWSTR [In],dwcount : UInt32 [In],pszshellexecutecommand : LibC::LPWSTR [In]
  fun SHSetUnreadMailCountW(pszmailaddress : LibC::LPWSTR, dwcount : UInt32, pszshellexecutecommand : LibC::LPWSTR) : HRESULT

  # Params # htoken : LibC::HANDLE [In],ulrid : UInt32 [In]
  fun SHTestTokenMembership(htoken : LibC::HANDLE, ulrid : UInt32) : LibC::BOOL

  # Params # iimagelist : Int32 [In],riid : Guid* [In],ppvobj : Void** [In]
  fun SHGetImageList(iimagelist : Int32, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # 
  fun InitNetworkAddressControl : LibC::BOOL

  # Params # pszdrive : LibC::LPWSTR [In],pdwmediacontent : UInt32* [In]
  fun SHGetDriveMedia(pszdrive : LibC::LPWSTR, pdwmediacontent : UInt32*) : HRESULT

  # Params # pszstart : PSTR [In],wmatch : UInt16 [In]
  fun StrChrA(pszstart : PSTR, wmatch : UInt16) : PSTR

  # Params # pszstart : LibC::LPWSTR [In],wmatch : Char [In]
  fun StrChrW(pszstart : LibC::LPWSTR, wmatch : Char) : LibC::LPWSTR

  # Params # pszstart : PSTR [In],wmatch : UInt16 [In]
  fun StrChrIA(pszstart : PSTR, wmatch : UInt16) : PSTR

  # Params # pszstart : LibC::LPWSTR [In],wmatch : Char [In]
  fun StrChrIW(pszstart : LibC::LPWSTR, wmatch : Char) : LibC::LPWSTR

  # Params # pszstart : LibC::LPWSTR [In],wmatch : Char [In],cchmax : UInt32 [In]
  fun StrChrNW(pszstart : LibC::LPWSTR, wmatch : Char, cchmax : UInt32) : LibC::LPWSTR

  # Params # pszstart : LibC::LPWSTR [In],wmatch : Char [In],cchmax : UInt32 [In]
  fun StrChrNIW(pszstart : LibC::LPWSTR, wmatch : Char, cchmax : UInt32) : LibC::LPWSTR

  # Params # psz1 : PSTR [In],psz2 : PSTR [In],nchar : Int32 [In]
  fun StrCmpNA(psz1 : PSTR, psz2 : PSTR, nchar : Int32) : Int32

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In],nchar : Int32 [In]
  fun StrCmpNW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR, nchar : Int32) : Int32

  # Params # psz1 : PSTR [In],psz2 : PSTR [In],nchar : Int32 [In]
  fun StrCmpNIA(psz1 : PSTR, psz2 : PSTR, nchar : Int32) : Int32

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In],nchar : Int32 [In]
  fun StrCmpNIW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR, nchar : Int32) : Int32

  # Params # pszstr : PSTR [In],pszset : PSTR [In]
  fun StrCSpnA(pszstr : PSTR, pszset : PSTR) : Int32

  # Params # pszstr : LibC::LPWSTR [In],pszset : LibC::LPWSTR [In]
  fun StrCSpnW(pszstr : LibC::LPWSTR, pszset : LibC::LPWSTR) : Int32

  # Params # pszstr : PSTR [In],pszset : PSTR [In]
  fun StrCSpnIA(pszstr : PSTR, pszset : PSTR) : Int32

  # Params # pszstr : LibC::LPWSTR [In],pszset : LibC::LPWSTR [In]
  fun StrCSpnIW(pszstr : LibC::LPWSTR, pszset : LibC::LPWSTR) : Int32

  # Params # pszsrch : PSTR [In]
  fun StrDupA(pszsrch : PSTR) : PSTR

  # Params # pszsrch : LibC::LPWSTR [In]
  fun StrDupW(pszsrch : LibC::LPWSTR) : LibC::LPWSTR

  # Params # ull : UInt64 [In],flags : SFBS_FLAGS [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun StrFormatByteSizeEx(ull : UInt64, flags : SFBS_FLAGS, pszbuf : Char*, cchbuf : UInt32) : HRESULT

  # Params # dw : UInt32 [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun StrFormatByteSizeA(dw : UInt32, pszbuf : UInt8*, cchbuf : UInt32) : PSTR

  # Params # qdw : Int64 [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun StrFormatByteSize64A(qdw : Int64, pszbuf : UInt8*, cchbuf : UInt32) : PSTR

  # Params # qdw : Int64 [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun StrFormatByteSizeW(qdw : Int64, pszbuf : Char*, cchbuf : UInt32) : LibC::LPWSTR

  # Params # qdw : Int64 [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun StrFormatKBSizeW(qdw : Int64, pszbuf : Char*, cchbuf : UInt32) : LibC::LPWSTR

  # Params # qdw : Int64 [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun StrFormatKBSizeA(qdw : Int64, pszbuf : UInt8*, cchbuf : UInt32) : PSTR

  # Params # pszout : UInt8* [In],cchmax : UInt32 [In],dwtimems : UInt32 [In],digits : Int32 [In]
  fun StrFromTimeIntervalA(pszout : UInt8*, cchmax : UInt32, dwtimems : UInt32, digits : Int32) : Int32

  # Params # pszout : Char* [In],cchmax : UInt32 [In],dwtimems : UInt32 [In],digits : Int32 [In]
  fun StrFromTimeIntervalW(pszout : Char*, cchmax : UInt32, dwtimems : UInt32, digits : Int32) : Int32

  # Params # fcasesens : LibC::BOOL [In],pszstring1 : PSTR [In],pszstring2 : PSTR [In],nchar : Int32 [In]
  fun StrIsIntlEqualA(fcasesens : LibC::BOOL, pszstring1 : PSTR, pszstring2 : PSTR, nchar : Int32) : LibC::BOOL

  # Params # fcasesens : LibC::BOOL [In],pszstring1 : LibC::LPWSTR [In],pszstring2 : LibC::LPWSTR [In],nchar : Int32 [In]
  fun StrIsIntlEqualW(fcasesens : LibC::BOOL, pszstring1 : LibC::LPWSTR, pszstring2 : LibC::LPWSTR, nchar : Int32) : LibC::BOOL

  # Params # psz1 : UInt8* [In],psz2 : PSTR [In],cchmax : Int32 [In]
  fun StrNCatA(psz1 : UInt8*, psz2 : PSTR, cchmax : Int32) : PSTR

  # Params # psz1 : Char* [In],psz2 : LibC::LPWSTR [In],cchmax : Int32 [In]
  fun StrNCatW(psz1 : Char*, psz2 : LibC::LPWSTR, cchmax : Int32) : LibC::LPWSTR

  # Params # psz : PSTR [In],pszset : PSTR [In]
  fun StrPBrkA(psz : PSTR, pszset : PSTR) : PSTR

  # Params # psz : LibC::LPWSTR [In],pszset : LibC::LPWSTR [In]
  fun StrPBrkW(psz : LibC::LPWSTR, pszset : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszstart : PSTR [In],pszend : PSTR [In],wmatch : UInt16 [In]
  fun StrRChrA(pszstart : PSTR, pszend : PSTR, wmatch : UInt16) : PSTR

  # Params # pszstart : LibC::LPWSTR [In],pszend : LibC::LPWSTR [In],wmatch : Char [In]
  fun StrRChrW(pszstart : LibC::LPWSTR, pszend : LibC::LPWSTR, wmatch : Char) : LibC::LPWSTR

  # Params # pszstart : PSTR [In],pszend : PSTR [In],wmatch : UInt16 [In]
  fun StrRChrIA(pszstart : PSTR, pszend : PSTR, wmatch : UInt16) : PSTR

  # Params # pszstart : LibC::LPWSTR [In],pszend : LibC::LPWSTR [In],wmatch : Char [In]
  fun StrRChrIW(pszstart : LibC::LPWSTR, pszend : LibC::LPWSTR, wmatch : Char) : LibC::LPWSTR

  # Params # pszsource : PSTR [In],pszlast : PSTR [In],pszsrch : PSTR [In]
  fun StrRStrIA(pszsource : PSTR, pszlast : PSTR, pszsrch : PSTR) : PSTR

  # Params # pszsource : LibC::LPWSTR [In],pszlast : LibC::LPWSTR [In],pszsrch : LibC::LPWSTR [In]
  fun StrRStrIW(pszsource : LibC::LPWSTR, pszlast : LibC::LPWSTR, pszsrch : LibC::LPWSTR) : LibC::LPWSTR

  # Params # psz : PSTR [In],pszset : PSTR [In]
  fun StrSpnA(psz : PSTR, pszset : PSTR) : Int32

  # Params # psz : LibC::LPWSTR [In],pszset : LibC::LPWSTR [In]
  fun StrSpnW(psz : LibC::LPWSTR, pszset : LibC::LPWSTR) : Int32

  # Params # pszfirst : PSTR [In],pszsrch : PSTR [In]
  fun StrStrA(pszfirst : PSTR, pszsrch : PSTR) : PSTR

  # Params # pszfirst : LibC::LPWSTR [In],pszsrch : LibC::LPWSTR [In]
  fun StrStrW(pszfirst : LibC::LPWSTR, pszsrch : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszfirst : PSTR [In],pszsrch : PSTR [In]
  fun StrStrIA(pszfirst : PSTR, pszsrch : PSTR) : PSTR

  # Params # pszfirst : LibC::LPWSTR [In],pszsrch : LibC::LPWSTR [In]
  fun StrStrIW(pszfirst : LibC::LPWSTR, pszsrch : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszfirst : LibC::LPWSTR [In],pszsrch : LibC::LPWSTR [In],cchmax : UInt32 [In]
  fun StrStrNW(pszfirst : LibC::LPWSTR, pszsrch : LibC::LPWSTR, cchmax : UInt32) : LibC::LPWSTR

  # Params # pszfirst : LibC::LPWSTR [In],pszsrch : LibC::LPWSTR [In],cchmax : UInt32 [In]
  fun StrStrNIW(pszfirst : LibC::LPWSTR, pszsrch : LibC::LPWSTR, cchmax : UInt32) : LibC::LPWSTR

  # Params # pszsrc : PSTR [In]
  fun StrToIntA(pszsrc : PSTR) : Int32

  # Params # pszsrc : LibC::LPWSTR [In]
  fun StrToIntW(pszsrc : LibC::LPWSTR) : Int32

  # Params # pszstring : PSTR [In],dwflags : Int32 [In],piret : Int32* [In]
  fun StrToIntExA(pszstring : PSTR, dwflags : Int32, piret : Int32*) : LibC::BOOL

  # Params # pszstring : LibC::LPWSTR [In],dwflags : Int32 [In],piret : Int32* [In]
  fun StrToIntExW(pszstring : LibC::LPWSTR, dwflags : Int32, piret : Int32*) : LibC::BOOL

  # Params # pszstring : PSTR [In],dwflags : Int32 [In],pllret : Int64* [In]
  fun StrToInt64ExA(pszstring : PSTR, dwflags : Int32, pllret : Int64*) : LibC::BOOL

  # Params # pszstring : LibC::LPWSTR [In],dwflags : Int32 [In],pllret : Int64* [In]
  fun StrToInt64ExW(pszstring : LibC::LPWSTR, dwflags : Int32, pllret : Int64*) : LibC::BOOL

  # Params # psz : PSTR [In],psztrimchars : PSTR [In]
  fun StrTrimA(psz : PSTR, psztrimchars : PSTR) : LibC::BOOL

  # Params # psz : LibC::LPWSTR [In],psztrimchars : LibC::LPWSTR [In]
  fun StrTrimW(psz : LibC::LPWSTR, psztrimchars : LibC::LPWSTR) : LibC::BOOL

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In]
  fun StrCatW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR) : LibC::LPWSTR

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In]
  fun StrCmpW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR) : Int32

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In]
  fun StrCmpIW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR) : Int32

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In]
  fun StrCpyW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszdst : Char* [In],pszsrc : LibC::LPWSTR [In],cchmax : Int32 [In]
  fun StrCpyNW(pszdst : Char*, pszsrc : LibC::LPWSTR, cchmax : Int32) : LibC::LPWSTR

  # Params # pszdest : Char* [In],pszsrc : LibC::LPWSTR [In],cchdestbuffsize : Int32 [In]
  fun StrCatBuffW(pszdest : Char*, pszsrc : LibC::LPWSTR, cchdestbuffsize : Int32) : LibC::LPWSTR

  # Params # pszdest : UInt8* [In],pszsrc : PSTR [In],cchdestbuffsize : Int32 [In]
  fun StrCatBuffA(pszdest : UInt8*, pszsrc : PSTR, cchdestbuffsize : Int32) : PSTR

  # Params # w1 : UInt16 [In],w2 : UInt16 [In]
  fun ChrCmpIA(w1 : UInt16, w2 : UInt16) : LibC::BOOL

  # Params # w1 : Char [In],w2 : Char [In]
  fun ChrCmpIW(w1 : Char, w2 : Char) : LibC::BOOL

  # Params # pszdest : UInt8* [In],cchdest : Int32 [In],pszfmt : PSTR [In],arglist : Int8* [In]
  fun wvnsprintfA(pszdest : UInt8*, cchdest : Int32, pszfmt : PSTR, arglist : Int8*) : Int32

  # Params # pszdest : Char* [In],cchdest : Int32 [In],pszfmt : LibC::LPWSTR [In],arglist : Int8* [In]
  fun wvnsprintfW(pszdest : Char*, cchdest : Int32, pszfmt : LibC::LPWSTR, arglist : Int8*) : Int32

  # Params # pszdest : UInt8* [In],cchdest : Int32 [In],pszfmt : PSTR [In]
  fun wnsprintfA(pszdest : UInt8*, cchdest : Int32, pszfmt : PSTR) : Int32

  # Params # pszdest : Char* [In],cchdest : Int32 [In],pszfmt : LibC::LPWSTR [In]
  fun wnsprintfW(pszdest : Char*, cchdest : Int32, pszfmt : LibC::LPWSTR) : Int32

  # Params # pstr : STRRET* [In],pidl : ITEMIDLIST* [In],ppsz : PSTR* [In]
  fun StrRetToStrA(pstr : STRRET*, pidl : ITEMIDLIST*, ppsz : PSTR*) : HRESULT

  # Params # pstr : STRRET* [In],pidl : ITEMIDLIST* [In],ppsz : LibC::LPWSTR* [In]
  fun StrRetToStrW(pstr : STRRET*, pidl : ITEMIDLIST*, ppsz : LibC::LPWSTR*) : HRESULT

  # Params # pstr : STRRET* [In],pidl : ITEMIDLIST* [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun StrRetToBufA(pstr : STRRET*, pidl : ITEMIDLIST*, pszbuf : UInt8*, cchbuf : UInt32) : HRESULT

  # Params # pstr : STRRET* [In],pidl : ITEMIDLIST* [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun StrRetToBufW(pstr : STRRET*, pidl : ITEMIDLIST*, pszbuf : Char*, cchbuf : UInt32) : HRESULT

  # Params # psz : PSTR [In],ppwsz : LibC::LPWSTR* [In]
  fun SHStrDupA(psz : PSTR, ppwsz : LibC::LPWSTR*) : HRESULT

  # Params # psz : LibC::LPWSTR [In],ppwsz : LibC::LPWSTR* [In]
  fun SHStrDupW(psz : LibC::LPWSTR, ppwsz : LibC::LPWSTR*) : HRESULT

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In]
  fun StrCmpLogicalW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR) : Int32

  # Params # pszdst : Char* [In],cchdst : UInt32 [In],ichat : UInt32 [In],pszsrc : LibC::LPWSTR [In]
  fun StrCatChainW(pszdst : Char*, cchdst : UInt32, ichat : UInt32, pszsrc : LibC::LPWSTR) : UInt32

  # Params # pstr : STRRET* [In],pidl : ITEMIDLIST* [In],pbstr : UInt8** [In]
  fun StrRetToBSTR(pstr : STRRET*, pidl : ITEMIDLIST*, pbstr : UInt8**) : HRESULT

  # Params # pszsource : LibC::LPWSTR [In],pszoutbuf : Char* [In],cchoutbuf : UInt32 [In],ppvreserved : Void** [In]
  fun SHLoadIndirectString(pszsource : LibC::LPWSTR, pszoutbuf : Char*, cchoutbuf : UInt32, ppvreserved : Void**) : HRESULT

  # Params # wch : CHAR [In]
  fun IsCharSpaceA(wch : CHAR) : LibC::BOOL

  # Params # wch : Char [In]
  fun IsCharSpaceW(wch : Char) : LibC::BOOL

  # Params # pszstr1 : PSTR [In],pszstr2 : PSTR [In]
  fun StrCmpCA(pszstr1 : PSTR, pszstr2 : PSTR) : Int32

  # Params # pszstr1 : LibC::LPWSTR [In],pszstr2 : LibC::LPWSTR [In]
  fun StrCmpCW(pszstr1 : LibC::LPWSTR, pszstr2 : LibC::LPWSTR) : Int32

  # Params # pszstr1 : PSTR [In],pszstr2 : PSTR [In]
  fun StrCmpICA(pszstr1 : PSTR, pszstr2 : PSTR) : Int32

  # Params # pszstr1 : LibC::LPWSTR [In],pszstr2 : LibC::LPWSTR [In]
  fun StrCmpICW(pszstr1 : LibC::LPWSTR, pszstr2 : LibC::LPWSTR) : Int32

  # Params # pszstr1 : PSTR [In],pszstr2 : PSTR [In],nchar : Int32 [In]
  fun StrCmpNCA(pszstr1 : PSTR, pszstr2 : PSTR, nchar : Int32) : Int32

  # Params # pszstr1 : LibC::LPWSTR [In],pszstr2 : LibC::LPWSTR [In],nchar : Int32 [In]
  fun StrCmpNCW(pszstr1 : LibC::LPWSTR, pszstr2 : LibC::LPWSTR, nchar : Int32) : Int32

  # Params # pszstr1 : PSTR [In],pszstr2 : PSTR [In],nchar : Int32 [In]
  fun StrCmpNICA(pszstr1 : PSTR, pszstr2 : PSTR, nchar : Int32) : Int32

  # Params # pszstr1 : LibC::LPWSTR [In],pszstr2 : LibC::LPWSTR [In],nchar : Int32 [In]
  fun StrCmpNICW(pszstr1 : LibC::LPWSTR, pszstr2 : LibC::LPWSTR, nchar : Int32) : Int32

  # Params # fcasesens : LibC::BOOL [In],lpstring1 : UInt8* [In],lpstring2 : UInt8* [In],nchar : Int32 [In]
  fun IntlStrEqWorkerA(fcasesens : LibC::BOOL, lpstring1 : UInt8*, lpstring2 : UInt8*, nchar : Int32) : LibC::BOOL

  # Params # fcasesens : LibC::BOOL [In],lpstring1 : Char* [In],lpstring2 : Char* [In],nchar : Int32 [In]
  fun IntlStrEqWorkerW(fcasesens : LibC::BOOL, lpstring1 : Char*, lpstring2 : Char*, nchar : Int32) : LibC::BOOL

  # Params # pszpath : UInt8* [In]
  fun PathAddBackslashA(pszpath : UInt8*) : PSTR

  # Params # pszpath : Char* [In]
  fun PathAddBackslashW(pszpath : Char*) : LibC::LPWSTR

  # Params # pszpath : UInt8* [In],pszext : PSTR [In]
  fun PathAddExtensionA(pszpath : UInt8*, pszext : PSTR) : LibC::BOOL

  # Params # pszpath : Char* [In],pszext : LibC::LPWSTR [In]
  fun PathAddExtensionW(pszpath : Char*, pszext : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : UInt8* [In],pszmore : PSTR [In]
  fun PathAppendA(pszpath : UInt8*, pszmore : PSTR) : LibC::BOOL

  # Params # pszpath : Char* [In],pszmore : LibC::LPWSTR [In]
  fun PathAppendW(pszpath : Char*, pszmore : LibC::LPWSTR) : LibC::BOOL

  # Params # pszroot : UInt8* [In],idrive : Int32 [In]
  fun PathBuildRootA(pszroot : UInt8*, idrive : Int32) : PSTR

  # Params # pszroot : Char* [In],idrive : Int32 [In]
  fun PathBuildRootW(pszroot : Char*, idrive : Int32) : LibC::LPWSTR

  # Params # pszbuf : UInt8* [In],pszpath : PSTR [In]
  fun PathCanonicalizeA(pszbuf : UInt8*, pszpath : PSTR) : LibC::BOOL

  # Params # pszbuf : Char* [In],pszpath : LibC::LPWSTR [In]
  fun PathCanonicalizeW(pszbuf : Char*, pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszdest : UInt8* [In],pszdir : PSTR [In],pszfile : PSTR [In]
  fun PathCombineA(pszdest : UInt8*, pszdir : PSTR, pszfile : PSTR) : PSTR

  # Params # pszdest : Char* [In],pszdir : LibC::LPWSTR [In],pszfile : LibC::LPWSTR [In]
  fun PathCombineW(pszdest : Char*, pszdir : LibC::LPWSTR, pszfile : LibC::LPWSTR) : LibC::LPWSTR

  # Params # hdc : HDC [In],pszpath : UInt8* [In],dx : UInt32 [In]
  fun PathCompactPathA(hdc : HDC, pszpath : UInt8*, dx : UInt32) : LibC::BOOL

  # Params # hdc : HDC [In],pszpath : Char* [In],dx : UInt32 [In]
  fun PathCompactPathW(hdc : HDC, pszpath : Char*, dx : UInt32) : LibC::BOOL

  # Params # pszout : UInt8* [In],pszsrc : PSTR [In],cchmax : UInt32 [In],dwflags : UInt32 [In]
  fun PathCompactPathExA(pszout : UInt8*, pszsrc : PSTR, cchmax : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # pszout : Char* [In],pszsrc : LibC::LPWSTR [In],cchmax : UInt32 [In],dwflags : UInt32 [In]
  fun PathCompactPathExW(pszout : Char*, pszsrc : LibC::LPWSTR, cchmax : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # pszfile1 : PSTR [In],pszfile2 : PSTR [In],achpath : UInt8* [In]
  fun PathCommonPrefixA(pszfile1 : PSTR, pszfile2 : PSTR, achpath : UInt8*) : Int32

  # Params # pszfile1 : LibC::LPWSTR [In],pszfile2 : LibC::LPWSTR [In],achpath : Char* [In]
  fun PathCommonPrefixW(pszfile1 : LibC::LPWSTR, pszfile2 : LibC::LPWSTR, achpath : Char*) : Int32

  # Params # pszpath : PSTR [In]
  fun PathFileExistsA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathFileExistsW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathFindExtensionA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathFindExtensionW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszpath : PSTR [In]
  fun PathFindFileNameA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathFindFileNameW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszpath : PSTR [In]
  fun PathFindNextComponentA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathFindNextComponentW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszpath : UInt8* [In],ppszotherdirs : Int8** [In]
  fun PathFindOnPathA(pszpath : UInt8*, ppszotherdirs : Int8**) : LibC::BOOL

  # Params # pszpath : Char* [In],ppszotherdirs : UInt16** [In]
  fun PathFindOnPathW(pszpath : Char*, ppszotherdirs : UInt16**) : LibC::BOOL

  # Params # pszpath : PSTR [In],apszsuffix : PSTR* [In],iarraysize : Int32 [In]
  fun PathFindSuffixArrayA(pszpath : PSTR, apszsuffix : PSTR*, iarraysize : Int32) : PSTR

  # Params # pszpath : LibC::LPWSTR [In],apszsuffix : LibC::LPWSTR* [In],iarraysize : Int32 [In]
  fun PathFindSuffixArrayW(pszpath : LibC::LPWSTR, apszsuffix : LibC::LPWSTR*, iarraysize : Int32) : LibC::LPWSTR

  # Params # pszpath : PSTR [In]
  fun PathGetArgsA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathGetArgsW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszname : PSTR [In]
  fun PathIsLFNFileSpecA(pszname : PSTR) : LibC::BOOL

  # Params # pszname : LibC::LPWSTR [In]
  fun PathIsLFNFileSpecW(pszname : LibC::LPWSTR) : LibC::BOOL

  # Params # ch : UInt8 [In]
  fun PathGetCharTypeA(ch : UInt8) : UInt32

  # Params # ch : Char [In]
  fun PathGetCharTypeW(ch : Char) : UInt32

  # Params # pszpath : PSTR [In]
  fun PathGetDriveNumberA(pszpath : PSTR) : Int32

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathGetDriveNumberW(pszpath : LibC::LPWSTR) : Int32

  # Params # pszpath : PSTR [In]
  fun PathIsDirectoryA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsDirectoryW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsDirectoryEmptyA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsDirectoryEmptyW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsFileSpecA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsFileSpecW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszprefix : PSTR [In],pszpath : PSTR [In]
  fun PathIsPrefixA(pszprefix : PSTR, pszpath : PSTR) : LibC::BOOL

  # Params # pszprefix : LibC::LPWSTR [In],pszpath : LibC::LPWSTR [In]
  fun PathIsPrefixW(pszprefix : LibC::LPWSTR, pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsRelativeA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsRelativeW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsRootA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsRootW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath1 : PSTR [In],pszpath2 : PSTR [In]
  fun PathIsSameRootA(pszpath1 : PSTR, pszpath2 : PSTR) : LibC::BOOL

  # Params # pszpath1 : LibC::LPWSTR [In],pszpath2 : LibC::LPWSTR [In]
  fun PathIsSameRootW(pszpath1 : LibC::LPWSTR, pszpath2 : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsUNCA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsUNCW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsNetworkPathA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsNetworkPathW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsUNCServerA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsUNCServerW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsUNCServerShareA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsUNCServerShareW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In],pszcontenttype : PSTR [In]
  fun PathIsContentTypeA(pszpath : PSTR, pszcontenttype : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In],pszcontenttype : LibC::LPWSTR [In]
  fun PathIsContentTypeW(pszpath : LibC::LPWSTR, pszcontenttype : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathIsURLA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathIsURLW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathMakePrettyA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathMakePrettyW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszfile : PSTR [In],pszspec : PSTR [In]
  fun PathMatchSpecA(pszfile : PSTR, pszspec : PSTR) : LibC::BOOL

  # Params # pszfile : LibC::LPWSTR [In],pszspec : LibC::LPWSTR [In]
  fun PathMatchSpecW(pszfile : LibC::LPWSTR, pszspec : LibC::LPWSTR) : LibC::BOOL

  # Params # pszfile : PSTR [In],pszspec : PSTR [In],dwflags : UInt32 [In]
  fun PathMatchSpecExA(pszfile : PSTR, pszspec : PSTR, dwflags : UInt32) : HRESULT

  # Params # pszfile : LibC::LPWSTR [In],pszspec : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PathMatchSpecExW(pszfile : LibC::LPWSTR, pszspec : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # psziconfile : PSTR [In]
  fun PathParseIconLocationA(psziconfile : PSTR) : Int32

  # Params # psziconfile : LibC::LPWSTR [In]
  fun PathParseIconLocationW(psziconfile : LibC::LPWSTR) : Int32

  # Params # lpsz : UInt8* [In]
  fun PathQuoteSpacesA(lpsz : UInt8*) : LibC::BOOL

  # Params # lpsz : Char* [In]
  fun PathQuoteSpacesW(lpsz : Char*) : LibC::BOOL

  # Params # pszpath : UInt8* [In],pszfrom : PSTR [In],dwattrfrom : UInt32 [In],pszto : PSTR [In],dwattrto : UInt32 [In]
  fun PathRelativePathToA(pszpath : UInt8*, pszfrom : PSTR, dwattrfrom : UInt32, pszto : PSTR, dwattrto : UInt32) : LibC::BOOL

  # Params # pszpath : Char* [In],pszfrom : LibC::LPWSTR [In],dwattrfrom : UInt32 [In],pszto : LibC::LPWSTR [In],dwattrto : UInt32 [In]
  fun PathRelativePathToW(pszpath : Char*, pszfrom : LibC::LPWSTR, dwattrfrom : UInt32, pszto : LibC::LPWSTR, dwattrto : UInt32) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathRemoveArgsA(pszpath : PSTR)

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathRemoveArgsW(pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In]
  fun PathRemoveBackslashA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathRemoveBackslashW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszpath : PSTR [In]
  fun PathRemoveBlanksA(pszpath : PSTR)

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathRemoveBlanksW(pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In]
  fun PathRemoveExtensionA(pszpath : PSTR)

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathRemoveExtensionW(pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In]
  fun PathRemoveFileSpecA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathRemoveFileSpecW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : UInt8* [In],pszext : PSTR [In]
  fun PathRenameExtensionA(pszpath : UInt8*, pszext : PSTR) : LibC::BOOL

  # Params # pszpath : Char* [In],pszext : LibC::LPWSTR [In]
  fun PathRenameExtensionW(pszpath : Char*, pszext : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun PathSearchAndQualifyA(pszpath : PSTR, pszbuf : UInt8*, cchbuf : UInt32) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun PathSearchAndQualifyW(pszpath : LibC::LPWSTR, pszbuf : Char*, cchbuf : UInt32) : LibC::BOOL

  # Params # hdlg : LibC::HANDLE [In],id : Int32 [In],pszpath : PSTR [In]
  fun PathSetDlgItemPathA(hdlg : LibC::HANDLE, id : Int32, pszpath : PSTR)

  # Params # hdlg : LibC::HANDLE [In],id : Int32 [In],pszpath : LibC::LPWSTR [In]
  fun PathSetDlgItemPathW(hdlg : LibC::HANDLE, id : Int32, pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In]
  fun PathSkipRootA(pszpath : PSTR) : PSTR

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathSkipRootW(pszpath : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszpath : PSTR [In]
  fun PathStripPathA(pszpath : PSTR)

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathStripPathW(pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In]
  fun PathStripToRootA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathStripToRootW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # lpsz : PSTR [In]
  fun PathUnquoteSpacesA(lpsz : PSTR) : LibC::BOOL

  # Params # lpsz : LibC::LPWSTR [In]
  fun PathUnquoteSpacesW(lpsz : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathMakeSystemFolderA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathMakeSystemFolderW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathUnmakeSystemFolderA(pszpath : PSTR) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathUnmakeSystemFolderW(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : PSTR [In],dwattrb : UInt32 [In]
  fun PathIsSystemFolderA(pszpath : PSTR, dwattrb : UInt32) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In],dwattrb : UInt32 [In]
  fun PathIsSystemFolderW(pszpath : LibC::LPWSTR, dwattrb : UInt32) : LibC::BOOL

  # Params # pszpath : PSTR [In]
  fun PathUndecorateA(pszpath : PSTR)

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathUndecorateW(pszpath : LibC::LPWSTR)

  # Params # pszpath : PSTR [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun PathUnExpandEnvStringsA(pszpath : PSTR, pszbuf : UInt8*, cchbuf : UInt32) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun PathUnExpandEnvStringsW(pszpath : LibC::LPWSTR, pszbuf : Char*, cchbuf : UInt32) : LibC::BOOL

  # Params # psz1 : PSTR [In],psz2 : PSTR [In],fignoreslash : LibC::BOOL [In]
  fun UrlCompareA(psz1 : PSTR, psz2 : PSTR, fignoreslash : LibC::BOOL) : Int32

  # Params # psz1 : LibC::LPWSTR [In],psz2 : LibC::LPWSTR [In],fignoreslash : LibC::BOOL [In]
  fun UrlCompareW(psz1 : LibC::LPWSTR, psz2 : LibC::LPWSTR, fignoreslash : LibC::BOOL) : Int32

  # Params # pszbase : PSTR [In],pszrelative : PSTR [In],pszcombined : UInt8* [In],pcchcombined : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCombineA(pszbase : PSTR, pszrelative : PSTR, pszcombined : UInt8*, pcchcombined : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszbase : LibC::LPWSTR [In],pszrelative : LibC::LPWSTR [In],pszcombined : Char* [In],pcchcombined : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCombineW(pszbase : LibC::LPWSTR, pszrelative : LibC::LPWSTR, pszcombined : Char*, pcchcombined : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : PSTR [In],pszcanonicalized : UInt8* [In],pcchcanonicalized : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCanonicalizeA(pszurl : PSTR, pszcanonicalized : UInt8*, pcchcanonicalized : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : LibC::LPWSTR [In],pszcanonicalized : Char* [In],pcchcanonicalized : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCanonicalizeW(pszurl : LibC::LPWSTR, pszcanonicalized : Char*, pcchcanonicalized : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : PSTR [In]
  fun UrlIsOpaqueA(pszurl : PSTR) : LibC::BOOL

  # Params # pszurl : LibC::LPWSTR [In]
  fun UrlIsOpaqueW(pszurl : LibC::LPWSTR) : LibC::BOOL

  # Params # pszurl : PSTR [In]
  fun UrlIsNoHistoryA(pszurl : PSTR) : LibC::BOOL

  # Params # pszurl : LibC::LPWSTR [In]
  fun UrlIsNoHistoryW(pszurl : LibC::LPWSTR) : LibC::BOOL

  # Params # pszurl : PSTR [In],urlis : URLIS [In]
  fun UrlIsA(pszurl : PSTR, urlis : URLIS) : LibC::BOOL

  # Params # pszurl : LibC::LPWSTR [In],urlis : URLIS [In]
  fun UrlIsW(pszurl : LibC::LPWSTR, urlis : URLIS) : LibC::BOOL

  # Params # pszurl : PSTR [In]
  fun UrlGetLocationA(pszurl : PSTR) : PSTR

  # Params # pszurl : LibC::LPWSTR [In]
  fun UrlGetLocationW(pszurl : LibC::LPWSTR) : LibC::LPWSTR

  # Params # pszurl : PSTR [In],pszunescaped : UInt8* [In],pcchunescaped : UInt32* [In],dwflags : UInt32 [In]
  fun UrlUnescapeA(pszurl : PSTR, pszunescaped : UInt8*, pcchunescaped : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : LibC::LPWSTR [In],pszunescaped : Char* [In],pcchunescaped : UInt32* [In],dwflags : UInt32 [In]
  fun UrlUnescapeW(pszurl : LibC::LPWSTR, pszunescaped : Char*, pcchunescaped : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : PSTR [In],pszescaped : UInt8* [In],pcchescaped : UInt32* [In],dwflags : UInt32 [In]
  fun UrlEscapeA(pszurl : PSTR, pszescaped : UInt8*, pcchescaped : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : LibC::LPWSTR [In],pszescaped : Char* [In],pcchescaped : UInt32* [In],dwflags : UInt32 [In]
  fun UrlEscapeW(pszurl : LibC::LPWSTR, pszescaped : Char*, pcchescaped : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszpath : PSTR [In],pszurl : UInt8* [In],pcchurl : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCreateFromPathA(pszpath : PSTR, pszurl : UInt8*, pcchurl : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],pszurl : Char* [In],pcchurl : UInt32* [In],dwflags : UInt32 [In]
  fun UrlCreateFromPathW(pszpath : LibC::LPWSTR, pszurl : Char*, pcchurl : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : PSTR [In],pszpath : UInt8* [In],pcchpath : UInt32* [In],dwflags : UInt32 [In]
  fun PathCreateFromUrlA(pszurl : PSTR, pszpath : UInt8*, pcchpath : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszurl : LibC::LPWSTR [In],pszpath : Char* [In],pcchpath : UInt32* [In],dwflags : UInt32 [In]
  fun PathCreateFromUrlW(pszurl : LibC::LPWSTR, pszpath : Char*, pcchpath : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszin : LibC::LPWSTR [In],ppszout : LibC::LPWSTR* [In],dwflags : UInt32 [In]
  fun PathCreateFromUrlAlloc(pszin : LibC::LPWSTR, ppszout : LibC::LPWSTR*, dwflags : UInt32) : HRESULT

  # Params # pszurl : PSTR [In],pbhash : UInt8* [In],cbhash : UInt32 [In]
  fun UrlHashA(pszurl : PSTR, pbhash : UInt8*, cbhash : UInt32) : HRESULT

  # Params # pszurl : LibC::LPWSTR [In],pbhash : UInt8* [In],cbhash : UInt32 [In]
  fun UrlHashW(pszurl : LibC::LPWSTR, pbhash : UInt8*, cbhash : UInt32) : HRESULT

  # Params # pszin : LibC::LPWSTR [In],pszout : Char* [In],pcchout : UInt32* [In],dwpart : UInt32 [In],dwflags : UInt32 [In]
  fun UrlGetPartW(pszin : LibC::LPWSTR, pszout : Char*, pcchout : UInt32*, dwpart : UInt32, dwflags : UInt32) : HRESULT

  # Params # pszin : PSTR [In],pszout : UInt8* [In],pcchout : UInt32* [In],dwpart : UInt32 [In],dwflags : UInt32 [In]
  fun UrlGetPartA(pszin : PSTR, pszout : UInt8*, pcchout : UInt32*, dwpart : UInt32, dwflags : UInt32) : HRESULT

  # Params # pszin : PSTR [In],pszout : UInt8* [In],pcchout : UInt32* [In],dwflags : UInt32 [In]
  fun UrlApplySchemeA(pszin : PSTR, pszout : UInt8*, pcchout : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pszin : LibC::LPWSTR [In],pszout : Char* [In],pcchout : UInt32* [In],dwflags : UInt32 [In]
  fun UrlApplySchemeW(pszin : LibC::LPWSTR, pszout : Char*, pcchout : UInt32*, dwflags : UInt32) : HRESULT

  # Params # pbdata : UInt8* [In],cbdata : UInt32 [In],pbhash : UInt8* [In],cbhash : UInt32 [In]
  fun HashData(pbdata : UInt8*, cbdata : UInt32, pbhash : UInt8*, cbhash : UInt32) : HRESULT

  # Params # pcszurl : LibC::LPWSTR [In],psztranslatedurl : Char* [In],cchmax : UInt32 [In]
  fun UrlFixupW(pcszurl : LibC::LPWSTR, psztranslatedurl : Char*, cchmax : UInt32) : HRESULT

  # Params # pcszurl : PSTR [In],ppu : PARSEDURLA* [In]
  fun ParseURLA(pcszurl : PSTR, ppu : PARSEDURLA*) : HRESULT

  # Params # pcszurl : LibC::LPWSTR [In],ppu : PARSEDURLW* [In]
  fun ParseURLW(pcszurl : LibC::LPWSTR, ppu : PARSEDURLW*) : HRESULT

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In]
  fun SHDeleteEmptyKeyA(hkey : HKEY, pszsubkey : PSTR) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In]
  fun SHDeleteEmptyKeyW(hkey : HKEY, pszsubkey : LibC::LPWSTR) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In]
  fun SHDeleteKeyA(hkey : HKEY, pszsubkey : PSTR) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In]
  fun SHDeleteKeyW(hkey : HKEY, pszsubkey : LibC::LPWSTR) : LSTATUS

  # Params # hkey : HKEY [In]
  fun SHRegDuplicateHKey(hkey : HKEY) : HKEY

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In]
  fun SHDeleteValueA(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In]
  fun SHDeleteValueW(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHGetValueA(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHGetValueW(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In]
  fun SHSetValueA(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In]
  fun SHSetValueW(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In],srrfflags : Int32 [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHRegGetValueA(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR, srrfflags : Int32, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],srrfflags : Int32 [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHRegGetValueW(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, srrfflags : Int32, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # pwszkey : LibC::LPWSTR [In],pwszvalue : LibC::LPWSTR [In],srrfflags : Int32 [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHRegGetValueFromHKCUHKLM(pwszkey : LibC::LPWSTR, pwszvalue : LibC::LPWSTR, srrfflags : Int32, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pszvalue : PSTR [In],pdwreserved : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHQueryValueExA(hkey : HKEY, pszvalue : PSTR, pdwreserved : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pszvalue : LibC::LPWSTR [In],pdwreserved : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHQueryValueExW(hkey : HKEY, pszvalue : LibC::LPWSTR, pdwreserved : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],pszname : UInt8* [In],pcchname : UInt32* [In]
  fun SHEnumKeyExA(hkey : HKEY, dwindex : UInt32, pszname : UInt8*, pcchname : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],pszname : Char* [In],pcchname : UInt32* [In]
  fun SHEnumKeyExW(hkey : HKEY, dwindex : UInt32, pszname : Char*, pcchname : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],pszvaluename : UInt8* [In],pcchvaluename : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHEnumValueA(hkey : HKEY, dwindex : UInt32, pszvaluename : UInt8*, pcchvaluename : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],dwindex : UInt32 [In],pszvaluename : Char* [In],pcchvaluename : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun SHEnumValueW(hkey : HKEY, dwindex : UInt32, pszvaluename : Char*, pcchvaluename : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pcsubkeys : UInt32* [In],pcchmaxsubkeylen : UInt32* [In],pcvalues : UInt32* [In],pcchmaxvaluenamelen : UInt32* [In]
  fun SHQueryInfoKeyA(hkey : HKEY, pcsubkeys : UInt32*, pcchmaxsubkeylen : UInt32*, pcvalues : UInt32*, pcchmaxvaluenamelen : UInt32*) : LSTATUS

  # Params # hkey : HKEY [In],pcsubkeys : UInt32* [In],pcchmaxsubkeylen : UInt32* [In],pcvalues : UInt32* [In],pcchmaxvaluenamelen : UInt32* [In]
  fun SHQueryInfoKeyW(hkey : HKEY, pcsubkeys : UInt32*, pcchmaxsubkeylen : UInt32*, pcvalues : UInt32*, pcchmaxvaluenamelen : UInt32*) : LSTATUS

  # Params # hkeysrc : HKEY [In],pszsrcsubkey : PSTR [In],hkeydest : HKEY [In],freserved : UInt32 [In]
  fun SHCopyKeyA(hkeysrc : HKEY, pszsrcsubkey : PSTR, hkeydest : HKEY, freserved : UInt32) : LSTATUS

  # Params # hkeysrc : HKEY [In],pszsrcsubkey : LibC::LPWSTR [In],hkeydest : HKEY [In],freserved : UInt32 [In]
  fun SHCopyKeyW(hkeysrc : HKEY, pszsrcsubkey : LibC::LPWSTR, hkeydest : HKEY, freserved : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pcszsubkey : PSTR [In],pcszvalue : PSTR [In],pszpath : UInt8* [In],dwflags : UInt32 [In]
  fun SHRegGetPathA(hkey : HKEY, pcszsubkey : PSTR, pcszvalue : PSTR, pszpath : UInt8*, dwflags : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pcszsubkey : LibC::LPWSTR [In],pcszvalue : LibC::LPWSTR [In],pszpath : Char* [In],dwflags : UInt32 [In]
  fun SHRegGetPathW(hkey : HKEY, pcszsubkey : LibC::LPWSTR, pcszvalue : LibC::LPWSTR, pszpath : Char*, dwflags : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pcszsubkey : PSTR [In],pcszvalue : PSTR [In],pcszpath : PSTR [In],dwflags : UInt32 [In]
  fun SHRegSetPathA(hkey : HKEY, pcszsubkey : PSTR, pcszvalue : PSTR, pcszpath : PSTR, dwflags : UInt32) : LSTATUS

  # Params # hkey : HKEY [In],pcszsubkey : LibC::LPWSTR [In],pcszvalue : LibC::LPWSTR [In],pcszpath : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun SHRegSetPathW(hkey : HKEY, pcszsubkey : LibC::LPWSTR, pcszvalue : LibC::LPWSTR, pcszpath : LibC::LPWSTR, dwflags : UInt32) : LSTATUS

  # Params # pszpath : PSTR [In],samdesired : UInt32 [In],hrelativeuskey : LibC::IntPtrT [In],phnewuskey : LibC::IntPtrT* [In],dwflags : UInt32 [In]
  fun SHRegCreateUSKeyA(pszpath : PSTR, samdesired : UInt32, hrelativeuskey : LibC::IntPtrT, phnewuskey : LibC::IntPtrT*, dwflags : UInt32) : LSTATUS

  # Params # pwzpath : LibC::LPWSTR [In],samdesired : UInt32 [In],hrelativeuskey : LibC::IntPtrT [In],phnewuskey : LibC::IntPtrT* [In],dwflags : UInt32 [In]
  fun SHRegCreateUSKeyW(pwzpath : LibC::LPWSTR, samdesired : UInt32, hrelativeuskey : LibC::IntPtrT, phnewuskey : LibC::IntPtrT*, dwflags : UInt32) : LSTATUS

  # Params # pszpath : PSTR [In],samdesired : UInt32 [In],hrelativeuskey : LibC::IntPtrT [In],phnewuskey : LibC::IntPtrT* [In],fignorehkcu : LibC::BOOL [In]
  fun SHRegOpenUSKeyA(pszpath : PSTR, samdesired : UInt32, hrelativeuskey : LibC::IntPtrT, phnewuskey : LibC::IntPtrT*, fignorehkcu : LibC::BOOL) : LSTATUS

  # Params # pwzpath : LibC::LPWSTR [In],samdesired : UInt32 [In],hrelativeuskey : LibC::IntPtrT [In],phnewuskey : LibC::IntPtrT* [In],fignorehkcu : LibC::BOOL [In]
  fun SHRegOpenUSKeyW(pwzpath : LibC::LPWSTR, samdesired : UInt32, hrelativeuskey : LibC::IntPtrT, phnewuskey : LibC::IntPtrT*, fignorehkcu : LibC::BOOL) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pszvalue : PSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],fignorehkcu : LibC::BOOL [In],pvdefaultdata : Void* [In],dwdefaultdatasize : UInt32 [In]
  fun SHRegQueryUSValueA(huskey : LibC::IntPtrT, pszvalue : PSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, fignorehkcu : LibC::BOOL, pvdefaultdata : Void*, dwdefaultdatasize : UInt32) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pszvalue : LibC::LPWSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],fignorehkcu : LibC::BOOL [In],pvdefaultdata : Void* [In],dwdefaultdatasize : UInt32 [In]
  fun SHRegQueryUSValueW(huskey : LibC::IntPtrT, pszvalue : LibC::LPWSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, fignorehkcu : LibC::BOOL, pvdefaultdata : Void*, dwdefaultdatasize : UInt32) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pszvalue : PSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In],dwflags : UInt32 [In]
  fun SHRegWriteUSValueA(huskey : LibC::IntPtrT, pszvalue : PSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32, dwflags : UInt32) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pwzvalue : LibC::LPWSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In],dwflags : UInt32 [In]
  fun SHRegWriteUSValueW(huskey : LibC::IntPtrT, pwzvalue : LibC::LPWSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32, dwflags : UInt32) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pszvalue : PSTR [In],delregflags : SHREGDEL_FLAGS [In]
  fun SHRegDeleteUSValueA(huskey : LibC::IntPtrT, pszvalue : PSTR, delregflags : SHREGDEL_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pwzvalue : LibC::LPWSTR [In],delregflags : SHREGDEL_FLAGS [In]
  fun SHRegDeleteUSValueW(huskey : LibC::IntPtrT, pwzvalue : LibC::LPWSTR, delregflags : SHREGDEL_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pwzsubkey : LibC::LPWSTR [In],delregflags : SHREGDEL_FLAGS [In]
  fun SHRegDeleteEmptyUSKeyW(huskey : LibC::IntPtrT, pwzsubkey : LibC::LPWSTR, delregflags : SHREGDEL_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pszsubkey : PSTR [In],delregflags : SHREGDEL_FLAGS [In]
  fun SHRegDeleteEmptyUSKeyA(huskey : LibC::IntPtrT, pszsubkey : PSTR, delregflags : SHREGDEL_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],dwindex : UInt32 [In],pszname : UInt8* [In],pcchname : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegEnumUSKeyA(huskey : LibC::IntPtrT, dwindex : UInt32, pszname : UInt8*, pcchname : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],dwindex : UInt32 [In],pwzname : Char* [In],pcchname : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegEnumUSKeyW(huskey : LibC::IntPtrT, dwindex : UInt32, pwzname : Char*, pcchname : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],dwindex : UInt32 [In],pszvaluename : UInt8* [In],pcchvaluename : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegEnumUSValueA(huskey : LibC::IntPtrT, dwindex : UInt32, pszvaluename : UInt8*, pcchvaluename : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],dwindex : UInt32 [In],pszvaluename : Char* [In],pcchvaluename : UInt32* [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegEnumUSValueW(huskey : LibC::IntPtrT, dwindex : UInt32, pszvaluename : Char*, pcchvaluename : UInt32*, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pcsubkeys : UInt32* [In],pcchmaxsubkeylen : UInt32* [In],pcvalues : UInt32* [In],pcchmaxvaluenamelen : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegQueryInfoUSKeyA(huskey : LibC::IntPtrT, pcsubkeys : UInt32*, pcchmaxsubkeylen : UInt32*, pcvalues : UInt32*, pcchmaxvaluenamelen : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In],pcsubkeys : UInt32* [In],pcchmaxsubkeylen : UInt32* [In],pcvalues : UInt32* [In],pcchmaxvaluenamelen : UInt32* [In],enumregflags : SHREGENUM_FLAGS [In]
  fun SHRegQueryInfoUSKeyW(huskey : LibC::IntPtrT, pcsubkeys : UInt32*, pcchmaxsubkeylen : UInt32*, pcvalues : UInt32*, pcchmaxvaluenamelen : UInt32*, enumregflags : SHREGENUM_FLAGS) : LSTATUS

  # Params # huskey : LibC::IntPtrT [In]
  fun SHRegCloseUSKey(huskey : LibC::IntPtrT) : LSTATUS

  # Params # pszsubkey : PSTR [In],pszvalue : PSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],fignorehkcu : LibC::BOOL [In],pvdefaultdata : Void* [In],dwdefaultdatasize : UInt32 [In]
  fun SHRegGetUSValueA(pszsubkey : PSTR, pszvalue : PSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, fignorehkcu : LibC::BOOL, pvdefaultdata : Void*, dwdefaultdatasize : UInt32) : LSTATUS

  # Params # pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],pdwtype : UInt32* [In],pvdata : Void* [In],pcbdata : UInt32* [In],fignorehkcu : LibC::BOOL [In],pvdefaultdata : Void* [In],dwdefaultdatasize : UInt32 [In]
  fun SHRegGetUSValueW(pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, pdwtype : UInt32*, pvdata : Void*, pcbdata : UInt32*, fignorehkcu : LibC::BOOL, pvdefaultdata : Void*, dwdefaultdatasize : UInt32) : LSTATUS

  # Params # pszsubkey : PSTR [In],pszvalue : PSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In],dwflags : UInt32 [In]
  fun SHRegSetUSValueA(pszsubkey : PSTR, pszvalue : PSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32, dwflags : UInt32) : LSTATUS

  # Params # pwzsubkey : LibC::LPWSTR [In],pwzvalue : LibC::LPWSTR [In],dwtype : UInt32 [In],pvdata : Void* [In],cbdata : UInt32 [In],dwflags : UInt32 [In]
  fun SHRegSetUSValueW(pwzsubkey : LibC::LPWSTR, pwzvalue : LibC::LPWSTR, dwtype : UInt32, pvdata : Void*, cbdata : UInt32, dwflags : UInt32) : LSTATUS

  # Params # hk : HKEY [In],pwzkey : LibC::LPWSTR [In],idefault : Int32 [In]
  fun SHRegGetIntW(hk : HKEY, pwzkey : LibC::LPWSTR, idefault : Int32) : Int32

  # Params # pszsubkey : PSTR [In],pszvalue : PSTR [In],fignorehkcu : LibC::BOOL [In],fdefault : LibC::BOOL [In]
  fun SHRegGetBoolUSValueA(pszsubkey : PSTR, pszvalue : PSTR, fignorehkcu : LibC::BOOL, fdefault : LibC::BOOL) : LibC::BOOL

  # Params # pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],fignorehkcu : LibC::BOOL [In],fdefault : LibC::BOOL [In]
  fun SHRegGetBoolUSValueW(pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, fignorehkcu : LibC::BOOL, fdefault : LibC::BOOL) : LibC::BOOL

  # Params # clsid : Guid [In],riid : Guid* [In],ppv : Void** [In]
  fun AssocCreate(clsid : Guid, riid : Guid*, ppv : Void**) : HRESULT

  # Params # flags : UInt32 [In],str : ASSOCSTR [In],pszassoc : PSTR [In],pszextra : PSTR [In],pszout : UInt8* [In],pcchout : UInt32* [In]
  fun AssocQueryStringA(flags : UInt32, str : ASSOCSTR, pszassoc : PSTR, pszextra : PSTR, pszout : UInt8*, pcchout : UInt32*) : HRESULT

  # Params # flags : UInt32 [In],str : ASSOCSTR [In],pszassoc : LibC::LPWSTR [In],pszextra : LibC::LPWSTR [In],pszout : Char* [In],pcchout : UInt32* [In]
  fun AssocQueryStringW(flags : UInt32, str : ASSOCSTR, pszassoc : LibC::LPWSTR, pszextra : LibC::LPWSTR, pszout : Char*, pcchout : UInt32*) : HRESULT

  # Params # flags : UInt32 [In],str : ASSOCSTR [In],hkassoc : HKEY [In],pszextra : PSTR [In],pszout : UInt8* [In],pcchout : UInt32* [In]
  fun AssocQueryStringByKeyA(flags : UInt32, str : ASSOCSTR, hkassoc : HKEY, pszextra : PSTR, pszout : UInt8*, pcchout : UInt32*) : HRESULT

  # Params # flags : UInt32 [In],str : ASSOCSTR [In],hkassoc : HKEY [In],pszextra : LibC::LPWSTR [In],pszout : Char* [In],pcchout : UInt32* [In]
  fun AssocQueryStringByKeyW(flags : UInt32, str : ASSOCSTR, hkassoc : HKEY, pszextra : LibC::LPWSTR, pszout : Char*, pcchout : UInt32*) : HRESULT

  # Params # flags : UInt32 [In],key : ASSOCKEY [In],pszassoc : PSTR [In],pszextra : PSTR [In],phkeyout : HKEY* [In]
  fun AssocQueryKeyA(flags : UInt32, key : ASSOCKEY, pszassoc : PSTR, pszextra : PSTR, phkeyout : HKEY*) : HRESULT

  # Params # flags : UInt32 [In],key : ASSOCKEY [In],pszassoc : LibC::LPWSTR [In],pszextra : LibC::LPWSTR [In],phkeyout : HKEY* [In]
  fun AssocQueryKeyW(flags : UInt32, key : ASSOCKEY, pszassoc : LibC::LPWSTR, pszextra : LibC::LPWSTR, phkeyout : HKEY*) : HRESULT

  # Params # pszassoc : LibC::LPWSTR [In]
  fun AssocIsDangerous(pszassoc : LibC::LPWSTR) : LibC::BOOL

  # Params # pszext : LibC::LPWSTR [In],ptype : PERCEIVED* [In],pflag : UInt32* [In],ppsztype : LibC::LPWSTR* [In]
  fun AssocGetPerceivedType(pszext : LibC::LPWSTR, ptype : PERCEIVED*, pflag : UInt32*, ppsztype : LibC::LPWSTR*) : HRESULT

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In],grfmode : UInt32 [In]
  fun SHOpenRegStreamA(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR, grfmode : UInt32) : IStream

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],grfmode : UInt32 [In]
  fun SHOpenRegStreamW(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, grfmode : UInt32) : IStream

  # Params # hkey : HKEY [In],pszsubkey : PSTR [In],pszvalue : PSTR [In],grfmode : UInt32 [In]
  fun SHOpenRegStream2A(hkey : HKEY, pszsubkey : PSTR, pszvalue : PSTR, grfmode : UInt32) : IStream

  # Params # hkey : HKEY [In],pszsubkey : LibC::LPWSTR [In],pszvalue : LibC::LPWSTR [In],grfmode : UInt32 [In]
  fun SHOpenRegStream2W(hkey : HKEY, pszsubkey : LibC::LPWSTR, pszvalue : LibC::LPWSTR, grfmode : UInt32) : IStream

  # Params # pszfile : PSTR [In],grfmode : UInt32 [In],ppstm : IStream* [In]
  fun SHCreateStreamOnFileA(pszfile : PSTR, grfmode : UInt32, ppstm : IStream*) : HRESULT

  # Params # pszfile : LibC::LPWSTR [In],grfmode : UInt32 [In],ppstm : IStream* [In]
  fun SHCreateStreamOnFileW(pszfile : LibC::LPWSTR, grfmode : UInt32, ppstm : IStream*) : HRESULT

  # Params # pszfile : LibC::LPWSTR [In],grfmode : UInt32 [In],dwattributes : UInt32 [In],fcreate : LibC::BOOL [In],pstmtemplate : IStream [In],ppstm : IStream* [In]
  fun SHCreateStreamOnFileEx(pszfile : LibC::LPWSTR, grfmode : UInt32, dwattributes : UInt32, fcreate : LibC::BOOL, pstmtemplate : IStream, ppstm : IStream*) : HRESULT

  # Params # pinit : UInt8* [In],cbinit : UInt32 [In]
  fun SHCreateMemStream(pinit : UInt8*, cbinit : UInt32) : IStream

  # Params # pszlanguages : UInt8* [In],pcchlanguages : UInt32* [In]
  fun GetAcceptLanguagesA(pszlanguages : UInt8*, pcchlanguages : UInt32*) : HRESULT

  # Params # pszlanguages : Char* [In],pcchlanguages : UInt32* [In]
  fun GetAcceptLanguagesW(pszlanguages : Char*, pcchlanguages : UInt32*) : HRESULT

  # Params # ppunk : IUnknown* [In],punk : IUnknown [In]
  fun IUnknown_Set(ppunk : IUnknown*, punk : IUnknown)

  # Params # ppunk : Void** [In]
  fun IUnknown_AtomicRelease(ppunk : Void**)

  # Params # punk : IUnknown [In],phwnd : HANDLE* [In]
  fun IUnknown_GetWindow(punk : IUnknown, phwnd : HANDLE*) : HRESULT

  # Params # punk : IUnknown [In],punksite : IUnknown [In]
  fun IUnknown_SetSite(punk : IUnknown, punksite : IUnknown) : HRESULT

  # Params # punk : IUnknown [In],riid : Guid* [In],ppv : Void** [In]
  fun IUnknown_GetSite(punk : IUnknown, riid : Guid*, ppv : Void**) : HRESULT

  # Params # punk : IUnknown [In],guidservice : Guid* [In],riid : Guid* [In],ppvout : Void** [In]
  fun IUnknown_QueryService(punk : IUnknown, guidservice : Guid*, riid : Guid*, ppvout : Void**) : HRESULT

  # Params # pstm : IStream [In],pv : Void* [In],cb : UInt32 [In]
  fun IStream_Read(pstm : IStream, pv : Void*, cb : UInt32) : HRESULT

  # Params # pstm : IStream [In],pv : Void* [In],cb : UInt32 [In]
  fun IStream_Write(pstm : IStream, pv : Void*, cb : UInt32) : HRESULT

  # Params # pstm : IStream [In]
  fun IStream_Reset(pstm : IStream) : HRESULT

  # Params # pstm : IStream [In],pui : ULARGE_INTEGER* [In]
  fun IStream_Size(pstm : IStream, pui : ULARGE_INTEGER*) : HRESULT

  # Params # punk : IUnknown [In],riidevent : Guid* [In],fconnect : LibC::BOOL [In],punktarget : IUnknown [In],pdwcookie : UInt32* [In],ppcpout : IConnectionPoint* [In]
  fun ConnectToConnectionPoint(punk : IUnknown, riidevent : Guid*, fconnect : LibC::BOOL, punktarget : IUnknown, pdwcookie : UInt32*, ppcpout : IConnectionPoint*) : HRESULT

  # Params # pstm : IStream [In],ppidlout : ITEMIDLIST** [In]
  fun IStream_ReadPidl(pstm : IStream, ppidlout : ITEMIDLIST**) : HRESULT

  # Params # pstm : IStream [In],pidlwrite : ITEMIDLIST* [In]
  fun IStream_WritePidl(pstm : IStream, pidlwrite : ITEMIDLIST*) : HRESULT

  # Params # pstm : IStream [In],ppsz : LibC::LPWSTR* [In]
  fun IStream_ReadStr(pstm : IStream, ppsz : LibC::LPWSTR*) : HRESULT

  # Params # pstm : IStream [In],psz : LibC::LPWSTR [In]
  fun IStream_WriteStr(pstm : IStream, psz : LibC::LPWSTR) : HRESULT

  # Params # pstmfrom : IStream [In],pstmto : IStream [In],cb : UInt32 [In]
  fun IStream_Copy(pstmfrom : IStream, pstmto : IStream, cb : UInt32) : HRESULT

  # Params # pidl : ITEMIDLIST* [In],pszbagname : LibC::LPWSTR [In],dwflags : UInt32 [In],riid : Guid* [In],ppv : Void** [In]
  fun SHGetViewStatePropertyBag(pidl : ITEMIDLIST*, pszbagname : LibC::LPWSTR, dwflags : UInt32, riid : Guid*, ppv : Void**) : HRESULT

  # Params # pft : FILETIME* [In],pdwflags : UInt32* [In],pszbuf : UInt8* [In],cchbuf : UInt32 [In]
  fun SHFormatDateTimeA(pft : FILETIME*, pdwflags : UInt32*, pszbuf : UInt8*, cchbuf : UInt32) : Int32

  # Params # pft : FILETIME* [In],pdwflags : UInt32* [In],pszbuf : Char* [In],cchbuf : UInt32 [In]
  fun SHFormatDateTimeW(pft : FILETIME*, pdwflags : UInt32*, pszbuf : Char*, cchbuf : UInt32) : Int32

  # Params # pszsrc : PSTR [In],pwszdst : Char* [In],cwchbuf : Int32 [In]
  fun SHAnsiToUnicode(pszsrc : PSTR, pwszdst : Char*, cwchbuf : Int32) : Int32

  # Params # pszsrc : PSTR [In],pszdst : UInt8* [In],cchbuf : Int32 [In]
  fun SHAnsiToAnsi(pszsrc : PSTR, pszdst : UInt8*, cchbuf : Int32) : Int32

  # Params # pwszsrc : LibC::LPWSTR [In],pszdst : UInt8* [In],cchbuf : Int32 [In]
  fun SHUnicodeToAnsi(pwszsrc : LibC::LPWSTR, pszdst : UInt8*, cchbuf : Int32) : Int32

  # Params # pwzsrc : LibC::LPWSTR [In],pwzdst : Char* [In],cwchbuf : Int32 [In]
  fun SHUnicodeToUnicode(pwzsrc : LibC::LPWSTR, pwzdst : Char*, cwchbuf : Int32) : Int32

  # Params # hwnd : LibC::HANDLE [In],psztext : PSTR [In],pszcaption : PSTR [In],utype : UInt32 [In],idefault : Int32 [In],pszregval : PSTR [In]
  fun SHMessageBoxCheckA(hwnd : LibC::HANDLE, psztext : PSTR, pszcaption : PSTR, utype : UInt32, idefault : Int32, pszregval : PSTR) : Int32

  # Params # hwnd : LibC::HANDLE [In],psztext : LibC::LPWSTR [In],pszcaption : LibC::LPWSTR [In],utype : UInt32 [In],idefault : Int32 [In],pszregval : LibC::LPWSTR [In]
  fun SHMessageBoxCheckW(hwnd : LibC::HANDLE, psztext : LibC::LPWSTR, pszcaption : LibC::LPWSTR, utype : UInt32, idefault : Int32, pszregval : LibC::LPWSTR) : Int32

  # Params # umsg : UInt32 [In],wparam : LibC::UINT_PTR [In],lparam : LPARAM [In]
  fun SHSendMessageBroadcastA(umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM) : LRESULT

  # Params # umsg : UInt32 [In],wparam : LibC::UINT_PTR [In],lparam : LPARAM [In]
  fun SHSendMessageBroadcastW(umsg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM) : LRESULT

  # Params # pszmenu : PSTR [In]
  fun SHStripMneumonicA(pszmenu : PSTR) : CHAR

  # Params # pszmenu : LibC::LPWSTR [In]
  fun SHStripMneumonicW(pszmenu : LibC::LPWSTR) : Char

  # Params # dwos : OS [In]
  fun IsOS(dwos : OS) : LibC::BOOL

  # Params # id : SHGLOBALCOUNTER [In]
  fun SHGlobalCounterGetValue(id : SHGLOBALCOUNTER) : Int32

  # Params # id : SHGLOBALCOUNTER [In]
  fun SHGlobalCounterIncrement(id : SHGLOBALCOUNTER) : Int32

  # Params # id : SHGLOBALCOUNTER [In]
  fun SHGlobalCounterDecrement(id : SHGLOBALCOUNTER) : Int32

  # Params # pvdata : Void* [In],dwsize : UInt32 [In],dwprocessid : UInt32 [In]
  fun SHAllocShared(pvdata : Void*, dwsize : UInt32, dwprocessid : UInt32) : LibC::HANDLE

  # Params # hdata : LibC::HANDLE [In],dwprocessid : UInt32 [In]
  fun SHFreeShared(hdata : LibC::HANDLE, dwprocessid : UInt32) : LibC::BOOL

  # Params # hdata : LibC::HANDLE [In],dwprocessid : UInt32 [In]
  fun SHLockShared(hdata : LibC::HANDLE, dwprocessid : UInt32) : Void*

  # Params # pvdata : Void* [In]
  fun SHUnlockShared(pvdata : Void*) : LibC::BOOL

  # Params # 
  fun WhichPlatform : UInt32

  # Params # that : Void* [In],pqit : QITAB* [In],riid : Guid* [In],ppv : Void** [In]
  fun QISearch(that : Void*, pqit : QITAB*, riid : Guid*, ppv : Void**) : HRESULT

  # Params # dwtype : UInt32 [In]
  fun SHIsLowMemoryMachine(dwtype : UInt32) : LibC::BOOL

  # Params # hmenu : LibC::HANDLE [In],id : UInt32 [In]
  fun GetMenuPosFromID(hmenu : LibC::HANDLE, id : UInt32) : Int32

  # Params # pbmap : UInt8* [In],cbmap : UInt32 [In]
  fun SHGetInverseCMAP(pbmap : UInt8*, cbmap : UInt32) : HRESULT

  # Params # hwndedit : LibC::HANDLE [In],dwflags : UInt32 [In]
  fun SHAutoComplete(hwndedit : LibC::HANDLE, dwflags : UInt32) : HRESULT

  # Params # pcref : Int32* [In],ppunk : IUnknown* [In]
  fun SHCreateThreadRef(pcref : Int32*, ppunk : IUnknown*) : HRESULT

  # Params # punk : IUnknown [In]
  fun SHSetThreadRef(punk : IUnknown) : HRESULT

  # Params # ppunk : IUnknown* [In]
  fun SHGetThreadRef(ppunk : IUnknown*) : HRESULT

  # Params # pbc : IBindCtx [In],pclsid : Guid* [In]
  fun SHSkipJunction(pbc : IBindCtx, pclsid : Guid*) : LibC::BOOL

  # Params # pfnthreadproc : LPTHREAD_START_ROUTINE [In],pdata : Void* [In],flags : UInt32 [In],pfncallback : LPTHREAD_START_ROUTINE [In]
  fun SHCreateThread(pfnthreadproc : LPTHREAD_START_ROUTINE, pdata : Void*, flags : UInt32, pfncallback : LPTHREAD_START_ROUTINE) : LibC::BOOL

  # Params # pfnthreadproc : LPTHREAD_START_ROUTINE [In],pdata : Void* [In],flags : UInt32 [In],pfncallback : LPTHREAD_START_ROUTINE [In],phandle : LibC::HANDLE* [In]
  fun SHCreateThreadWithHandle(pfnthreadproc : LPTHREAD_START_ROUTINE, pdata : Void*, flags : UInt32, pfncallback : LPTHREAD_START_ROUTINE, phandle : LibC::HANDLE*) : LibC::BOOL

  # Params # 
  fun SHReleaseThreadRef : HRESULT

  # Params # hdc : HDC [In]
  fun SHCreateShellPalette(hdc : HDC) : HPALETTE

  # Params # clrrgb : UInt32 [In],pwhue : UInt16* [In],pwluminance : UInt16* [In],pwsaturation : UInt16* [In]
  fun ColorRGBToHLS(clrrgb : UInt32, pwhue : UInt16*, pwluminance : UInt16*, pwsaturation : UInt16*)

  # Params # whue : UInt16 [In],wluminance : UInt16 [In],wsaturation : UInt16 [In]
  fun ColorHLSToRGB(whue : UInt16, wluminance : UInt16, wsaturation : UInt16) : UInt32

  # Params # clrrgb : UInt32 [In],n : Int32 [In],fscale : LibC::BOOL [In]
  fun ColorAdjustLuma(clrrgb : UInt32, n : Int32, fscale : LibC::BOOL) : UInt32

  # Params # 
  fun IsInternetESCEnabled : LibC::BOOL

  # Params # pimktrgt : IMoniker [In],pwzlocation : LibC::LPWSTR [In],pwzfriendlyname : LibC::LPWSTR [In],pihlsite : IHlinkSite [In],dwsitedata : UInt32 [In],piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkCreateFromMoniker(pimktrgt : IMoniker, pwzlocation : LibC::LPWSTR, pwzfriendlyname : LibC::LPWSTR, pihlsite : IHlinkSite, dwsitedata : UInt32, piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pwztarget : LibC::LPWSTR [In],pwzlocation : LibC::LPWSTR [In],pwzfriendlyname : LibC::LPWSTR [In],pihlsite : IHlinkSite [In],dwsitedata : UInt32 [In],piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkCreateFromString(pwztarget : LibC::LPWSTR, pwzlocation : LibC::LPWSTR, pwzfriendlyname : LibC::LPWSTR, pihlsite : IHlinkSite, dwsitedata : UInt32, piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pidataobj : IDataObject [In],pihlsite : IHlinkSite [In],dwsitedata : UInt32 [In],piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkCreateFromData(pidataobj : IDataObject, pihlsite : IHlinkSite, dwsitedata : UInt32, piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pidataobj : IDataObject [In]
  fun HlinkQueryCreateFromData(pidataobj : IDataObject) : HRESULT

  # Params # pihl : IHlink [In],riid : Guid* [In],pihlsiteforclone : IHlinkSite [In],dwsitedata : UInt32 [In],ppvobj : Void** [In]
  fun HlinkClone(pihl : IHlink, riid : Guid*, pihlsiteforclone : IHlinkSite, dwsitedata : UInt32, ppvobj : Void**) : HRESULT

  # Params # piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkCreateBrowseContext(piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pwztarget : LibC::LPWSTR [In],pwzlocation : LibC::LPWSTR [In],pihlsite : IHlinkSite [In],dwsitedata : UInt32 [In],pihlframe : IHlinkFrame [In],grfhlnf : UInt32 [In],pibc : IBindCtx [In],pibsc : IBindStatusCallback [In],pihlbc : IHlinkBrowseContext [In]
  fun HlinkNavigateToStringReference(pwztarget : LibC::LPWSTR, pwzlocation : LibC::LPWSTR, pihlsite : IHlinkSite, dwsitedata : UInt32, pihlframe : IHlinkFrame, grfhlnf : UInt32, pibc : IBindCtx, pibsc : IBindStatusCallback, pihlbc : IHlinkBrowseContext) : HRESULT

  # Params # pihl : IHlink [In],pihlframe : IHlinkFrame [In],grfhlnf : UInt32 [In],pbc : IBindCtx [In],pibsc : IBindStatusCallback [In],pihlbc : IHlinkBrowseContext [In]
  fun HlinkNavigate(pihl : IHlink, pihlframe : IHlinkFrame, grfhlnf : UInt32, pbc : IBindCtx, pibsc : IBindStatusCallback, pihlbc : IHlinkBrowseContext) : HRESULT

  # Params # pihlframe : IHlinkFrame [In],pihlbc : IHlinkBrowseContext [In],grfhlnf : UInt32 [In],pimktarget : IMoniker [In],pwzlocation : LibC::LPWSTR [In],pwzfriendlyname : LibC::LPWSTR [In],puhlid : UInt32* [In]
  fun HlinkOnNavigate(pihlframe : IHlinkFrame, pihlbc : IHlinkBrowseContext, grfhlnf : UInt32, pimktarget : IMoniker, pwzlocation : LibC::LPWSTR, pwzfriendlyname : LibC::LPWSTR, puhlid : UInt32*) : HRESULT

  # Params # pihlframe : IHlinkFrame [In],pihlbc : IHlinkBrowseContext [In],uhlid : UInt32 [In],pimktrgt : IMoniker [In],pwzlocation : LibC::LPWSTR [In],pwzfriendlyname : LibC::LPWSTR [In]
  fun HlinkUpdateStackItem(pihlframe : IHlinkFrame, pihlbc : IHlinkBrowseContext, uhlid : UInt32, pimktrgt : IMoniker, pwzlocation : LibC::LPWSTR, pwzfriendlyname : LibC::LPWSTR) : HRESULT

  # Params # dwreserved : UInt32 [In],pihlbc : IHlinkBrowseContext [In],pimkold : IMoniker [In],pimknew : IMoniker [In]
  fun HlinkOnRenameDocument(dwreserved : UInt32, pihlbc : IHlinkBrowseContext, pimkold : IMoniker, pimknew : IMoniker) : HRESULT

  # Params # pimkreference : IMoniker [In],reserved : UInt32 [In],pibc : IBindCtx [In],cfmtetc : UInt32 [In],rgfmtetc : FORMATETC* [In],pibsc : IBindStatusCallback [In],pimkbase : IMoniker [In]
  fun HlinkResolveMonikerForData(pimkreference : IMoniker, reserved : UInt32, pibc : IBindCtx, cfmtetc : UInt32, rgfmtetc : FORMATETC*, pibsc : IBindStatusCallback, pimkbase : IMoniker) : HRESULT

  # Params # pwzreference : LibC::LPWSTR [In],reserved : UInt32 [In],pibc : IBindCtx [In],cfmtetc : UInt32 [In],rgfmtetc : FORMATETC* [In],pibsc : IBindStatusCallback [In],pimkbase : IMoniker [In]
  fun HlinkResolveStringForData(pwzreference : LibC::LPWSTR, reserved : UInt32, pibc : IBindCtx, cfmtetc : UInt32, rgfmtetc : FORMATETC*, pibsc : IBindStatusCallback, pimkbase : IMoniker) : HRESULT

  # Params # pibc : IBindCtx [In],pwzdisplayname : LibC::LPWSTR [In],fnoforceabs : LibC::BOOL [In],pccheaten : UInt32* [In],ppimk : IMoniker* [In]
  fun HlinkParseDisplayName(pibc : IBindCtx, pwzdisplayname : LibC::LPWSTR, fnoforceabs : LibC::BOOL, pccheaten : UInt32*, ppimk : IMoniker*) : HRESULT

  # Params # pwzadditionalheaders : LibC::LPWSTR [In],phwnd : LibC::HANDLE [In],pszusername : LibC::LPWSTR [In],pszpassword : LibC::LPWSTR [In],piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkCreateExtensionServices(pwzadditionalheaders : LibC::LPWSTR, phwnd : LibC::HANDLE, pszusername : LibC::LPWSTR, pszpassword : LibC::LPWSTR, piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pibc : IBindCtx [In],pimkin : IMoniker [In],ppimkout : IMoniker* [In]
  fun HlinkPreprocessMoniker(pibc : IBindCtx, pimkin : IMoniker, ppimkout : IMoniker*) : HRESULT

  # Params # piunk : IUnknown [In],pistm : IStream [In],fcleardirty : LibC::BOOL [In]
  fun OleSaveToStreamEx(piunk : IUnknown, pistm : IStream, fcleardirty : LibC::BOOL) : HRESULT

  # Params # ureference : UInt32 [In],pwzreference : LibC::LPWSTR [In]
  fun HlinkSetSpecialReference(ureference : UInt32, pwzreference : LibC::LPWSTR) : HRESULT

  # Params # ureference : UInt32 [In],ppwzreference : LibC::LPWSTR* [In]
  fun HlinkGetSpecialReference(ureference : UInt32, ppwzreference : LibC::LPWSTR*) : HRESULT

  # Params # grfhlshortcutf : UInt32 [In],pihl : IHlink [In],pwzdir : LibC::LPWSTR [In],pwzfilename : LibC::LPWSTR [In],ppwzshortcutfile : LibC::LPWSTR* [In],dwreserved : UInt32 [In]
  fun HlinkCreateShortcut(grfhlshortcutf : UInt32, pihl : IHlink, pwzdir : LibC::LPWSTR, pwzfilename : LibC::LPWSTR, ppwzshortcutfile : LibC::LPWSTR*, dwreserved : UInt32) : HRESULT

  # Params # grfhlshortcutf : UInt32 [In],pimktarget : IMoniker [In],pwzlocation : LibC::LPWSTR [In],pwzdir : LibC::LPWSTR [In],pwzfilename : LibC::LPWSTR [In],ppwzshortcutfile : LibC::LPWSTR* [In],dwreserved : UInt32 [In]
  fun HlinkCreateShortcutFromMoniker(grfhlshortcutf : UInt32, pimktarget : IMoniker, pwzlocation : LibC::LPWSTR, pwzdir : LibC::LPWSTR, pwzfilename : LibC::LPWSTR, ppwzshortcutfile : LibC::LPWSTR*, dwreserved : UInt32) : HRESULT

  # Params # grfhlshortcutf : UInt32 [In],pwztarget : LibC::LPWSTR [In],pwzlocation : LibC::LPWSTR [In],pwzdir : LibC::LPWSTR [In],pwzfilename : LibC::LPWSTR [In],ppwzshortcutfile : LibC::LPWSTR* [In],dwreserved : UInt32 [In]
  fun HlinkCreateShortcutFromString(grfhlshortcutf : UInt32, pwztarget : LibC::LPWSTR, pwzlocation : LibC::LPWSTR, pwzdir : LibC::LPWSTR, pwzfilename : LibC::LPWSTR, ppwzshortcutfile : LibC::LPWSTR*, dwreserved : UInt32) : HRESULT

  # Params # pwzshortcutfilename : LibC::LPWSTR [In],pihlsite : IHlinkSite [In],dwsitedata : UInt32 [In],piunkouter : IUnknown [In],riid : Guid* [In],ppvobj : Void** [In]
  fun HlinkResolveShortcut(pwzshortcutfilename : LibC::LPWSTR, pihlsite : IHlinkSite, dwsitedata : UInt32, piunkouter : IUnknown, riid : Guid*, ppvobj : Void**) : HRESULT

  # Params # pwzshortcutfilename : LibC::LPWSTR [In],ppimktarget : IMoniker* [In],ppwzlocation : LibC::LPWSTR* [In]
  fun HlinkResolveShortcutToMoniker(pwzshortcutfilename : LibC::LPWSTR, ppimktarget : IMoniker*, ppwzlocation : LibC::LPWSTR*) : HRESULT

  # Params # pwzshortcutfilename : LibC::LPWSTR [In],ppwztarget : LibC::LPWSTR* [In],ppwzlocation : LibC::LPWSTR* [In]
  fun HlinkResolveShortcutToString(pwzshortcutfilename : LibC::LPWSTR, ppwztarget : LibC::LPWSTR*, ppwzlocation : LibC::LPWSTR*) : HRESULT

  # Params # pwzfilename : LibC::LPWSTR [In]
  fun HlinkIsShortcut(pwzfilename : LibC::LPWSTR) : HRESULT

  # Params # pwzparams : LibC::LPWSTR [In],pwzname : LibC::LPWSTR [In],ppwzvalue : LibC::LPWSTR* [In]
  fun HlinkGetValueFromParams(pwzparams : LibC::LPWSTR, pwzname : LibC::LPWSTR, ppwzvalue : LibC::LPWSTR*) : HRESULT

  # Params # pwzurl : LibC::LPWSTR [In],grfflags : UInt32 [In],ppwztranslatedurl : LibC::LPWSTR* [In]
  fun HlinkTranslateURL(pwzurl : LibC::LPWSTR, grfflags : UInt32, ppwztranslatedurl : LibC::LPWSTR*) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],ppszserver : LibC::LPWSTR* [In]
  fun PathIsUNCEx(pszpath : LibC::LPWSTR, ppszserver : LibC::LPWSTR*) : LibC::BOOL

  # Params # pszpath : LibC::LPWSTR [In]
  fun PathCchIsRoot(pszpath : LibC::LPWSTR) : LibC::BOOL

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In],ppszend : LibC::LPWSTR* [In],pcchremaining : LibC::UINT_PTR* [In]
  fun PathCchAddBackslashEx(pszpath : Char*, cchpath : LibC::UINT_PTR, ppszend : LibC::LPWSTR*, pcchremaining : LibC::UINT_PTR*) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchAddBackslash(pszpath : Char*, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],cchpath : LibC::UINT_PTR [In],ppszend : LibC::LPWSTR* [In],pcchremaining : LibC::UINT_PTR* [In]
  fun PathCchRemoveBackslashEx(pszpath : LibC::LPWSTR, cchpath : LibC::UINT_PTR, ppszend : LibC::LPWSTR*, pcchremaining : LibC::UINT_PTR*) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchRemoveBackslash(pszpath : Char*, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],ppszrootend : LibC::LPWSTR* [In]
  fun PathCchSkipRoot(pszpath : LibC::LPWSTR, ppszrootend : LibC::LPWSTR*) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchStripToRoot(pszpath : LibC::LPWSTR, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchRemoveFileSpec(pszpath : LibC::LPWSTR, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],cchpath : LibC::UINT_PTR [In],ppszext : LibC::LPWSTR* [In]
  fun PathCchFindExtension(pszpath : LibC::LPWSTR, cchpath : LibC::UINT_PTR, ppszext : LibC::LPWSTR*) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In],pszext : LibC::LPWSTR [In]
  fun PathCchAddExtension(pszpath : Char*, cchpath : LibC::UINT_PTR, pszext : LibC::LPWSTR) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In],pszext : LibC::LPWSTR [In]
  fun PathCchRenameExtension(pszpath : Char*, cchpath : LibC::UINT_PTR, pszext : LibC::LPWSTR) : HRESULT

  # Params # pszpath : LibC::LPWSTR [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchRemoveExtension(pszpath : LibC::LPWSTR, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpathout : Char* [In],cchpathout : LibC::UINT_PTR [In],pszpathin : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PathCchCanonicalizeEx(pszpathout : Char*, cchpathout : LibC::UINT_PTR, pszpathin : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pszpathout : Char* [In],cchpathout : LibC::UINT_PTR [In],pszpathin : LibC::LPWSTR [In]
  fun PathCchCanonicalize(pszpathout : Char*, cchpathout : LibC::UINT_PTR, pszpathin : LibC::LPWSTR) : HRESULT

  # Params # pszpathout : Char* [In],cchpathout : LibC::UINT_PTR [In],pszpathin : LibC::LPWSTR [In],pszmore : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PathCchCombineEx(pszpathout : Char*, cchpathout : LibC::UINT_PTR, pszpathin : LibC::LPWSTR, pszmore : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pszpathout : Char* [In],cchpathout : LibC::UINT_PTR [In],pszpathin : LibC::LPWSTR [In],pszmore : LibC::LPWSTR [In]
  fun PathCchCombine(pszpathout : Char*, cchpathout : LibC::UINT_PTR, pszpathin : LibC::LPWSTR, pszmore : LibC::LPWSTR) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In],pszmore : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PathCchAppendEx(pszpath : Char*, cchpath : LibC::UINT_PTR, pszmore : LibC::LPWSTR, dwflags : UInt32) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In],pszmore : LibC::LPWSTR [In]
  fun PathCchAppend(pszpath : Char*, cchpath : LibC::UINT_PTR, pszmore : LibC::LPWSTR) : HRESULT

  # Params # pszpath : Char* [In],cchpath : LibC::UINT_PTR [In]
  fun PathCchStripPrefix(pszpath : Char*, cchpath : LibC::UINT_PTR) : HRESULT

  # Params # pszpathin : LibC::LPWSTR [In],pszmore : LibC::LPWSTR [In],dwflags : UInt32 [In],ppszpathout : LibC::LPWSTR* [In]
  fun PathAllocCombine(pszpathin : LibC::LPWSTR, pszmore : LibC::LPWSTR, dwflags : UInt32, ppszpathout : LibC::LPWSTR*) : HRESULT

  # Params # pszpathin : LibC::LPWSTR [In],dwflags : UInt32 [In],ppszpathout : LibC::LPWSTR* [In]
  fun PathAllocCanonicalize(pszpathin : LibC::LPWSTR, dwflags : UInt32, ppszpathout : LibC::LPWSTR*) : HRESULT

  # Params # routine : PAPPSTATE_CHANGE_ROUTINE [In],context : Void* [In],registration : APPSTATE_REGISTRATION** [In]
  fun RegisterAppStateChangeNotification(routine : PAPPSTATE_CHANGE_ROUTINE, context : Void*, registration : APPSTATE_REGISTRATION**) : UInt32

  # Params # registration : APPSTATE_REGISTRATION* [In]
  fun UnregisterAppStateChangeNotification(registration : APPSTATE_REGISTRATION*)

  # Params # routine : PAPPCONSTRAIN_CHANGE_ROUTINE [In],context : Void* [In],registration : APPCONSTRAIN_REGISTRATION** [In]
  fun RegisterAppConstrainedChangeNotification(routine : PAPPCONSTRAIN_CHANGE_ROUTINE, context : Void*, registration : APPCONSTRAIN_REGISTRATION**) : UInt32

  # Params # registration : APPCONSTRAIN_REGISTRATION* [In]
  fun UnregisterAppConstrainedChangeNotification(registration : APPCONSTRAIN_REGISTRATION*)
end
