require "./../../system/com.cr"
require "./../../foundation.cr"
require "./../cryptography.cr"
require "./../authentication/identity.cr"

module Win32cr::Security::Cryptography::Certificates
  alias FNCERTSRVISSERVERONLINEW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPGETDYNAMICFILELISTW = Proc(Void*, UInt16**, UInt32*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPPREPAREW = Proc(Win32cr::Foundation::PWSTR, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPGETDATABASENAMESW = Proc(Void*, UInt16**, UInt32*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPOPENFILEW = Proc(Void*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::LARGE_INTEGER*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPREAD = Proc(Void*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPCLOSE = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPGETBACKUPLOGSW = Proc(Void*, UInt16**, UInt32*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPTRUNCATELOGS = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPEND = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVBACKUPFREE = Proc(Void*, Void)

  alias FNCERTSRVRESTOREGETDATABASELOCATIONSW = Proc(Void*, UInt16**, UInt32*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVRESTOREPREPAREW = Proc(Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVRESTOREREGISTERW = Proc(Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CSEDB_RSTMAPW*, Int32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVRESTOREREGISTERCOMPLETE = Proc(Void*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVRESTOREEND = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias FNCERTSRVSERVERCONTROLW = Proc(Win32cr::Foundation::PWSTR, UInt32, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)

  alias FNIMPORTPFXTOPROVIDER = Proc(Win32cr::Foundation::HWND, UInt8*, UInt32, Win32cr::Security::Cryptography::Certificates::ImportPFXFlags, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Security::Cryptography::CERT_CONTEXT***, Win32cr::Foundation::HRESULT)

  alias FNIMPORTPFXTOPROVIDERFREEDATA = Proc(UInt32, Win32cr::Security::Cryptography::CERT_CONTEXT**, Void)

  Wszregkeynosystemcertsvcpath = "CurrentControlSet\\Services\\CertSvc"
  Wszregkeycertsvcpath = "SYSTEM\\CurrentControlSet\\Services\\CertSvc"
  CA_DISP_INCOMPLETE = 0_u32
  CA_DISP_ERROR = 1_u32
  CA_DISP_REVOKED = 2_u32
  CA_DISP_VALID = 3_u32
  CA_DISP_INVALID = 4_u32
  CA_DISP_UNDER_SUBMISSION = 5_u32
  KRA_DISP_EXPIRED = 0_u32
  KRA_DISP_NOTFOUND = 1_u32
  KRA_DISP_REVOKED = 2_u32
  KRA_DISP_VALID = 3_u32
  KRA_DISP_INVALID = 4_u32
  KRA_DISP_UNTRUSTED = 5_u32
  KRA_DISP_NOTLOADED = 6_u32
  CA_ACCESS_MASKROLES = 255_u32
  CA_CRL_BASE = 1_u32
  CA_CRL_DELTA = 2_u32
  CA_CRL_REPUBLISH = 16_u32
  ICF_ALLOWFOREIGN = 65536_u32
  ICF_EXISTINGROW = 131072_u32
  IKF_OVERWRITE = 65536_u32
  Wszocspcaprop_cacertificate = "CACertificate"
  Wszocspcaprop_hashalgorithmid = "HashAlgorithmId"
  Wszocspcaprop_signingflags = "SigningFlags"
  Wszocspcaprop_reminderduration = "ReminderDuration"
  Wszocspcaprop_signingcertificate = "SigningCertificate"
  Wszocspcaprop_cspname = "CSPName"
  Wszocspcaprop_keyspec = "KeySpec"
  Wszocspcaprop_errorcode = "ErrorCode"
  Wszocspcaprop_providerclsid = "ProviderCLSID"
  Wszocspcaprop_providerproperties = "Provider"
  Wszocspcaprop_localrevocationinformation = "LocalRevocationInformation"
  Wszocspcaprop_signingcertificatetemplate = "SigningCertificateTemplate"
  Wszocspcaprop_caconfig = "CAConfig"
  Wszocspprop_loglevel = "LogLevel"
  Wszocspprop_debug = "Debug"
  Wszocspprop_auditfilter = "AuditFilter"
  Wszocspprop_arraycontroller = "ArrayController"
  Wszocspprop_arraymembers = "ArrayMembers"
  Wszocspprop_enrollpollinterval = "EnrollPollInterval"
  Wszocspisapiprop_virtualrootname = "VirtualRootName"
  Wszocspisapiprop_numofthreads = "NumOfThreads"
  Wszocspisapiprop_numofbackendconnections = "NumOfBackendConnections"
  Wszocspisapiprop_refreshrate = "RefreshRate"
  Wszocspisapiprop_maxnumofcacheentries = "MaxNumOfCacheEntries"
  Wszocspisapiprop_maxage = "MaxAge"
  Wszocspisapiprop_debug = "ISAPIDebug"
  Wszocspcommonprop_reqflags = "RequestFlags"
  Wszocspcommonprop_maxincomingmessagesize = "MaxIncomingMessageSize"
  Wszocspcommonprop_maxnumofrequestentries = "MaxNumOfRequestEntries"
  Wszocsprevprop_crlurltimeout = "CrlUrlTimeOut"
  Wszocsprevprop_basecrlurls = "BaseCrlUrls"
  Wszocsprevprop_serialnumbersdirs = "IssuedSerialNumbersDirectories"
  Wszocsprevprop_basecrl = "BaseCrl"
  Wszocsprevprop_deltacrlurls = "DeltaCrlUrls"
  Wszocsprevprop_deltacrl = "DeltaCrl"
  Wszocsprevprop_refreshtimeout = "RefreshTimeOut"
  Wszocsprevprop_errorcode = "RevocationErrorCode"
  Szbackupannotation = "Cert Server Backup Interface"
  Szrestoreannotation = "Cert Server Restore Interface"
  CSBACKUP_TYPE_MASK = 3_u32
  CSRESTORE_TYPE_FULL = 1_u32
  CSRESTORE_TYPE_ONLINE = 2_u32
  CSRESTORE_TYPE_CATCHUP = 4_u32
  CSRESTORE_TYPE_MASK = 5_u32
  CSBACKUP_DISABLE_INCREMENTAL = 4294967295_u32
  CSBFT_DIRECTORY = 128_u32
  CSBFT_DATABASE_DIRECTORY = 64_u32
  CSBFT_LOG_DIRECTORY = 32_u32
  CSCONTROL_SHUTDOWN = 1_u64
  CSCONTROL_SUSPEND = 2_u64
  CSCONTROL_RESTART = 3_u64
  Wszconfig_commonname = "CommonName"
  Wszconfig_orgunit = "OrgUnit"
  Wszconfig_organization = "Organization"
  Wszconfig_locality = "Locality"
  Wszconfig_state = "State"
  Wszconfig_country = "Country"
  Wszconfig_config = "Config"
  Wszconfig_exchangecertificate = "ExchangeCertificate"
  Wszconfig_signaturecertificate = "SignatureCertificate"
  Wszconfig_description = "Description"
  Wszconfig_comment = "Comment"
  Wszconfig_server = "Server"
  Wszconfig_authority = "Authority"
  Wszconfig_sanitizedname = "SanitizedName"
  Wszconfig_shortname = "ShortName"
  Wszconfig_sanitizedshortname = "SanitizedShortName"
  Wszconfig_flags = "Flags"
  Wszconfig_webenrollmentservers = "WebEnrollmentServers"
  CAIF_DSENTRY = 1_u32
  CAIF_SHAREDFOLDERENTRY = 2_u32
  CAIF_REGISTRY = 4_u32
  CAIF_LOCAL = 8_u32
  CAIF_REGISTRYPARENT = 16_u32
  CR_IN_ENCODEANY = 255_u32
  CR_IN_ENCODEMASK = 255_u32
  CR_IN_FORMATANY = 0_u32
  CR_IN_PKCS10 = 256_u32
  CR_IN_KEYGEN = 512_u32
  CR_IN_PKCS7 = 768_u32
  CR_IN_CMC = 1024_u32
  CR_IN_CHALLENGERESPONSE = 1280_u32
  CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = 1536_u32
  CR_IN_FORMATMASK = 65280_u32
  CR_IN_SCEP = 65536_u32
  CR_IN_RPC = 131072_u32
  CR_IN_HTTP = 196608_u32
  CR_IN_FULLRESPONSE = 262144_u32
  CR_IN_CRLS = 524288_u32
  CR_IN_MACHINE = 1048576_u32
  CR_IN_ROBO = 2097152_u32
  CR_IN_CLIENTIDNONE = 4194304_u32
  CR_IN_CONNECTONLY = 8388608_u32
  CR_IN_RETURNCHALLENGE = 16777216_u32
  CR_IN_SCEPPOST = 33554432_u32
  CR_IN_CERTIFICATETRANSPARENCY = 67108864_u32
  CR_DISP_REVOKED = 6_u32
  CR_OUT_BASE64REQUESTHEADER = 3_u32
  CR_OUT_HEX = 4_u32
  CR_OUT_HEXASCII = 5_u32
  CR_OUT_BASE64X509CRLHEADER = 9_u32
  CR_OUT_HEXADDR = 10_u32
  CR_OUT_HEXASCIIADDR = 11_u32
  CR_OUT_HEXRAW = 12_u32
  CR_OUT_ENCODEMASK = 255_u32
  CR_OUT_CHAIN = 256_u32
  CR_OUT_CRLS = 512_u32
  CR_OUT_NOCRLF = 1073741824_u32
  CR_OUT_NOCR = 2147483648_u32
  CR_GEMT_DEFAULT = 0_u32
  CR_GEMT_HRESULT_STRING = 1_u32
  CR_GEMT_HTTP_ERROR = 2_u32
  CR_PROP_NONE = 0_u32
  CR_PROP_FILEVERSION = 1_u32
  CR_PROP_PRODUCTVERSION = 2_u32
  CR_PROP_EXITCOUNT = 3_u32
  CR_PROP_EXITDESCRIPTION = 4_u32
  CR_PROP_POLICYDESCRIPTION = 5_u32
  CR_PROP_CANAME = 6_u32
  CR_PROP_SANITIZEDCANAME = 7_u32
  CR_PROP_SHAREDFOLDER = 8_u32
  CR_PROP_PARENTCA = 9_u32
  CR_PROP_CATYPE = 10_u32
  CR_PROP_CASIGCERTCOUNT = 11_u32
  CR_PROP_CASIGCERT = 12_u32
  CR_PROP_CASIGCERTCHAIN = 13_u32
  CR_PROP_CAXCHGCERTCOUNT = 14_u32
  CR_PROP_CAXCHGCERT = 15_u32
  CR_PROP_CAXCHGCERTCHAIN = 16_u32
  CR_PROP_BASECRL = 17_u32
  CR_PROP_DELTACRL = 18_u32
  CR_PROP_CACERTSTATE = 19_u32
  CR_PROP_CRLSTATE = 20_u32
  CR_PROP_CAPROPIDMAX = 21_u32
  CR_PROP_DNSNAME = 22_u32
  CR_PROP_ROLESEPARATIONENABLED = 23_u32
  CR_PROP_KRACERTUSEDCOUNT = 24_u32
  CR_PROP_KRACERTCOUNT = 25_u32
  CR_PROP_KRACERT = 26_u32
  CR_PROP_KRACERTSTATE = 27_u32
  CR_PROP_ADVANCEDSERVER = 28_u32
  CR_PROP_TEMPLATES = 29_u32
  CR_PROP_BASECRLPUBLISHSTATUS = 30_u32
  CR_PROP_DELTACRLPUBLISHSTATUS = 31_u32
  CR_PROP_CASIGCERTCRLCHAIN = 32_u32
  CR_PROP_CAXCHGCERTCRLCHAIN = 33_u32
  CR_PROP_CACERTSTATUSCODE = 34_u32
  CR_PROP_CAFORWARDCROSSCERT = 35_u32
  CR_PROP_CABACKWARDCROSSCERT = 36_u32
  CR_PROP_CAFORWARDCROSSCERTSTATE = 37_u32
  CR_PROP_CABACKWARDCROSSCERTSTATE = 38_u32
  CR_PROP_CACERTVERSION = 39_u32
  CR_PROP_SANITIZEDCASHORTNAME = 40_u32
  CR_PROP_CERTCDPURLS = 41_u32
  CR_PROP_CERTAIAURLS = 42_u32
  CR_PROP_CERTAIAOCSPURLS = 43_u32
  CR_PROP_LOCALENAME = 44_u32
  CR_PROP_SUBJECTTEMPLATE_OIDS = 45_u32
  CR_PROP_SCEPSERVERCERTS = 1000_u32
  CR_PROP_SCEPSERVERCAPABILITIES = 1001_u32
  CR_PROP_SCEPSERVERCERTSCHAIN = 1002_u32
  CR_PROP_SCEPMIN = 1000_u32
  CR_PROP_SCEPMAX = 1002_u32
  FR_PROP_CLAIMCHALLENGE = 22_u32
  EAN_NAMEOBJECTID = 2147483648_u32
  EANR_SUPPRESS_IA5CONVERSION = 2147483648_u32
  CERTENROLL_INDEX_BASE = 0_u32
  EXITEVENT_INVALID = 0_u32
  EXITEVENT_STARTUP = 128_u32
  EXITEVENT_CERTIMPORTED = 512_u32
  ENUMEXT_OBJECTID = 1_u32
  CMM_REFRESHONLY = 1_u32
  CMM_READONLY = 2_u32
  DBG_CERTSRV = 1_u32
  Wszservice_name = "CertSvc"
  Wszregkeybase = "SYSTEM\\CurrentControlSet\\Services\\CertSvc"
  Wszregkeyconfig = "Configuration"
  Wszregactive = "Active"
  Wszregdirectory = "ConfigurationDirectory"
  Wszregdbdirectory = "DBDirectory"
  Wszregdblogdirectory = "DBLogDirectory"
  Wszregdbsysdirectory = "DBSystemDirectory"
  Wszregdbtempdirectory = "DBTempDirectory"
  Wszregdbsessioncount = "DBSessionCount"
  Wszregdbmaxreadsessioncount = "DBMaxReadSessionCount"
  Wszregdbflags = "DBFlags"
  Wszregdblastfullbackup = "DBLastFullBackup"
  Wszregdblastincrementalbackup = "DBLastIncrementalBackup"
  Wszregdblastrecovery = "DBLastRecovery"
  Wszregwebclientcamachine = "WebClientCAMachine"
  Wszregversion = "Version"
  Wszregwebclientcaname = "WebClientCAName"
  Wszregwebclientcatype = "WebClientCAType"
  Wszregldapflags = "LDAPFlags"
  Wszregcertsrvdebug = "Debug"
  DBSESSIONCOUNTDEFAULT = 100_u32
  DBFLAGS_READONLY = 1_u32
  DBFLAGS_CREATEIFNEEDED = 2_u32
  DBFLAGS_CIRCULARLOGGING = 4_u32
  DBFLAGS_LAZYFLUSH = 8_u32
  DBFLAGS_MAXCACHESIZEX100 = 16_u32
  DBFLAGS_CHECKPOINTDEPTH60MB = 32_u32
  DBFLAGS_LOGBUFFERSLARGE = 64_u32
  DBFLAGS_LOGBUFFERSHUGE = 128_u32
  DBFLAGS_LOGFILESIZE16MB = 256_u32
  DBFLAGS_MULTITHREADTRANSACTIONS = 512_u32
  DBFLAGS_DISABLESNAPSHOTBACKUP = 1024_u32
  DBFLAGS_ENABLEVOLATILEREQUESTS = 2048_u32
  LDAPF_SSLENABLE = 1_u32
  LDAPF_SIGNDISABLE = 2_u32
  CSVER_MAJOR_WIN2K = 1_u32
  CSVER_MINOR_WIN2K = 1_u32
  CSVER_MAJOR_WHISTLER = 2_u32
  CSVER_MINOR_WHISTLER_BETA2 = 1_u32
  CSVER_MINOR_WHISTLER_BETA3 = 2_u32
  CSVER_MAJOR_LONGHORN = 3_u32
  CSVER_MINOR_LONGHORN_BETA1 = 1_u32
  CSVER_MAJOR_WIN7 = 4_u32
  CSVER_MINOR_WIN7 = 1_u32
  CSVER_MAJOR_WIN8 = 5_u32
  CSVER_MINOR_WIN8 = 1_u32
  CSVER_MAJOR_WINBLUE = 6_u32
  CSVER_MINOR_WINBLUE = 1_u32
  CSVER_MAJOR_THRESHOLD = 7_u32
  CSVER_MINOR_THRESHOLD = 1_u32
  CSVER_MAJOR = 7_u32
  CSVER_MINOR = 1_u32
  Wszregkeyrestoreinprogress = "RestoreInProgress"
  Wszregkeydbparameters = "DBParameters"
  Wszregcadescription = "CADescription"
  Wszregcacerthash = "CACertHash"
  Wszregcaserialnumber = "CACertSerialNumber"
  Wszregcaxchgcerthash = "CAXchgCertHash"
  Wszregkracerthash = "KRACertHash"
  Wszregkracertcount = "KRACertCount"
  Wszregkraflags = "KRAFlags"
  Wszregcatype = "CAType"
  Wszregcertenrollcompatible = "CertEnrollCompatible"
  Wszregenforcex500namelengths = "EnforceX500NameLengths"
  Wszregcommonname = "CommonName"
  Wszregclockskewminutes = "ClockSkewMinutes"
  Wszregcrlnextpublish = "CRLNextPublish"
  Wszregcrlperiodstring = "CRLPeriod"
  Wszregcrlperiodcount = "CRLPeriodUnits"
  Wszregcrloverlapperiodstring = "CRLOverlapPeriod"
  Wszregcrloverlapperiodcount = "CRLOverlapUnits"
  Wszregcrldeltanextpublish = "CRLDeltaNextPublish"
  Wszregcrldeltaperiodstring = "CRLDeltaPeriod"
  Wszregcrldeltaperiodcount = "CRLDeltaPeriodUnits"
  Wszregcrldeltaoverlapperiodstring = "CRLDeltaOverlapPeriod"
  Wszregcrldeltaoverlapperiodcount = "CRLDeltaOverlapUnits"
  Wszregcrlpublicationurls = "CRLPublicationURLs"
  Wszregcacertpublicationurls = "CACertPublicationURLs"
  Wszregcaxchgvalidityperiodstring = "CAXchgValidityPeriod"
  Wszregcaxchgvalidityperiodcount = "CAXchgValidityPeriodUnits"
  Wszregcaxchgoverlapperiodstring = "CAXchgOverlapPeriod"
  Wszregcaxchgoverlapperiodcount = "CAXchgOverlapPeriodUnits"
  Wszregcrlpath_old = "CRLPath"
  Wszregcrleditflags = "CRLEditFlags"
  Wszregcrlflags = "CRLFlags"
  Wszregcrlattemptrepublish = "CRLAttemptRepublish"
  Wszregenabled = "Enabled"
  Wszregforceteletex = "ForceTeletex"
  Wszregloglevel = "LogLevel"
  Wszreghighserial = "HighSerial"
  Wszregpolicyflags = "PolicyFlags"
  Wszregnameseparator = "SubjectNameSeparator"
  Wszregsubjecttemplate = "SubjectTemplate"
  Wszregcauseds = "UseDS"
  Wszregvalidityperiodstring = "ValidityPeriod"
  Wszregvalidityperiodcount = "ValidityPeriodUnits"
  Wszregparentcamachine = "ParentCAMachine"
  Wszregparentcaname = "ParentCAName"
  Wszregrequestfilename = "RequestFileName"
  Wszregrequestid = "RequestId"
  Wszregrequestkeycontainer = "RequestKeyContainer"
  Wszregrequestkeyindex = "RequestKeyIndex"
  Wszregcaservername = "CAServerName"
  Wszregcacertfilename = "CACertFileName"
  Wszregcasecurity = "Security"
  Wszregauditfilter = "AuditFilter"
  Wszregofficerrights = "OfficerRights"
  Wszenrollmentagentrights = "EnrollmentAgentRights"
  Wszregmaxincomingmessagesize = "MaxIncomingMessageSize"
  Wszregmaxincomingallocsize = "MaxIncomingAllocSize"
  Wszregroleseparationenabled = "RoleSeparationEnabled"
  Wszregalternatepublishdomains = "AlternatePublishDomains"
  Wszregsetupstatus = "SetupStatus"
  Wszreginterfaceflags = "InterfaceFlags"
  Wszregdsconfigdn = "DSConfigDN"
  Wszregdsdomaindn = "DSDomainDN"
  Wszregviewageminutes = "ViewAgeMinutes"
  Wszregviewidleminutes = "ViewIdleMinutes"
  Wszregekpublistdirectories = "EndorsementKeyListDirectories"
  Wszcertificatetransparencyflags = "CertificateTransparencyFlags"
  Wszregmaxsctlistsize = "MaxSCTListSize"
  Wszregcertificatetransparencyinfooid = "CTInformationExtensionOid"
  Wszregprocessingflags = "ProcessingFlags"
  Wszregusedefinedcacertinreq = "UseDefinedCACertInRequest"
  Wszregenabledekufordefinedcacert = "EnabledEKUForDefinedCACert"
  Wszregekuoidsforpublishexpiredcertincrl = "EKUOIDsForPublishExpiredCertInCRL"
  Wszcrtfilenameext = ".crt"
  Wszpfxfilenameext = ".p12"
  Wszdatfilenameext = ".dat"
  Wszlogfilenameext = ".log"
  Wszdbfilenameext = ".edb"
  Szdbbasenameparm = "edb"
  Wszlogpath = "CertLog"
  Wszdbbackupsubdir = "DataBase"
  Wszdbbackupcertbackdat = "certbkxp.dat"
  CCLOCKSKEWMINUTESDEFAULT = 10_u32
  CVIEWAGEMINUTESDEFAULT = 16_u32
  Dwvalidityperiodcountdefault_root = 5_u32
  Dwvalidityperiodcountdefault_enterprise = 2_u32
  Dwvalidityperiodcountdefault_standalone = 1_u32
  Dwcaxchgvalidityperiodcountdefault = 1_u32
  Dwcaxchgoverlapperiodcountdefault = 1_u32
  Dwcrlperiodcountdefault = 1_u32
  Dwcrloverlapperiodcountdefault = 0_u32
  Dwcrldeltaperiodcountdefault = 1_u32
  Dwcrldeltaoverlapperiodcountdefault = 0_u32
  SETUP_SERVER_FLAG = 1_u32
  SETUP_CLIENT_FLAG = 2_u32
  SETUP_SUSPEND_FLAG = 4_u32
  SETUP_REQUEST_FLAG = 8_u32
  SETUP_ONLINE_FLAG = 16_u32
  SETUP_DENIED_FLAG = 32_u32
  SETUP_CREATEDB_FLAG = 64_u32
  SETUP_ATTEMPT_VROOT_CREATE = 128_u32
  SETUP_FORCECRL_FLAG = 256_u32
  SETUP_UPDATE_CAOBJECT_SVRTYPE = 512_u32
  SETUP_SERVER_UPGRADED_FLAG = 1024_u32
  SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = 2048_u32
  SETUP_SECURITY_CHANGED = 4096_u32
  SETUP_DCOM_SECURITY_UPDATED_FLAG = 8192_u32
  SETUP_SERVER_IS_UP_TO_DATE_FLAG = 16384_u32
  CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = 1_u32
  CRLF_DELETE_EXPIRED_CRLS = 2_u32
  CRLF_CRLNUMBER_CRITICAL = 4_u32
  CRLF_REVCHECK_IGNORE_OFFLINE = 8_u32
  CRLF_IGNORE_INVALID_POLICIES = 16_u32
  CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = 32_u32
  CRLF_SAVE_FAILED_CERTS = 64_u32
  CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = 128_u32
  CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = 256_u32
  CRLF_PUBLISH_EXPIRED_CERT_CRLS = 512_u32
  CRLF_ENFORCE_ENROLLMENT_AGENT = 1024_u32
  CRLF_DISABLE_RDN_REORDER = 2048_u32
  CRLF_DISABLE_ROOT_CROSS_CERTS = 4096_u32
  CRLF_LOG_FULL_RESPONSE = 8192_u32
  CRLF_USE_XCHG_CERT_TEMPLATE = 16384_u32
  CRLF_USE_CROSS_CERT_TEMPLATE = 32768_u32
  CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = 65536_u32
  CRLF_REVCHECK_IGNORE_NOREVCHECK = 131072_u32
  CRLF_PRESERVE_EXPIRED_CA_CERTS = 262144_u32
  CRLF_PRESERVE_REVOKED_CA_CERTS = 524288_u32
  CRLF_DISABLE_CHAIN_VERIFICATION = 1048576_u32
  CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = 2097152_u32
  KRAF_ENABLEFOREIGN = 1_u32
  KRAF_SAVEBADREQUESTKEY = 2_u32
  KRAF_ENABLEARCHIVEALL = 4_u32
  KRAF_DISABLEUSEDEFAULTPROVIDER = 8_u32
  IF_LOCKICERTREQUEST = 1_u32
  IF_NOREMOTEICERTREQUEST = 2_u32
  IF_NOLOCALICERTREQUEST = 4_u32
  IF_NORPCICERTREQUEST = 8_u32
  IF_NOREMOTEICERTADMIN = 16_u32
  IF_NOLOCALICERTADMIN = 32_u32
  IF_NOREMOTEICERTADMINBACKUP = 64_u32
  IF_NOLOCALICERTADMINBACKUP = 128_u32
  IF_NOSNAPSHOTBACKUP = 256_u32
  IF_ENFORCEENCRYPTICERTREQUEST = 512_u32
  IF_ENFORCEENCRYPTICERTADMIN = 1024_u32
  IF_ENABLEEXITKEYRETRIEVAL = 2048_u32
  IF_ENABLEADMINASAUDITOR = 4096_u32
  PROCFLG_NONE = 0_u32
  PROCFLG_ENFORCEGOODKEYS = 1_u32
  CSURL_SERVERPUBLISH = 1_u32
  CSURL_ADDTOCERTCDP = 2_u32
  CSURL_ADDTOFRESHESTCRL = 4_u32
  CSURL_ADDTOCRLCDP = 8_u32
  CSURL_PUBLISHRETRY = 16_u32
  CSURL_ADDTOCERTOCSP = 32_u32
  CSURL_SERVERPUBLISHDELTA = 64_u32
  CSURL_ADDTOIDP = 128_u32
  Wszregkeycsp = "CSP"
  Wszregkeyencryptioncsp = "EncryptionCSP"
  Wszregkeyexitmodules = "ExitModules"
  Wszregkeypolicymodules = "PolicyModules"
  Wszsecuredattributes = "SignedAttributes"
  Wszzdefaultsignedattributes = "RequesterName\u0000"
  Wszregbackuplogdirectory = "BackupLogDirectory"
  Wszregcheckpointfile = "CheckPointFile"
  Wszreghighlognumber = "HighLogNumber"
  Wszreglowlognumber = "LowLogNumber"
  Wszreglogpath = "LogPath"
  Wszregrestoremapcount = "RestoreMapCount"
  Wszregrestoremap = "RestoreMap"
  Wszregdatabaserecovered = "DatabaseRecovered"
  Wszregrestorestatus = "RestoreStatus"
  Wszregb2icertmanagemodule = "ICertManageModule"
  Wszregsp4defaultconfiguration = "DefaultConfiguration"
  Wszregsp4keysetname = "KeySetName"
  Wszregsp4subjectnameseparator = "SubjectNameSeparator"
  Wszregsp4names = "Names"
  Wszregsp4queries = "Queries"
  Wszregnetscapecerttype = "NetscapeCertType"
  Wsznetscaperevocationtype = "Netscape"
  Wszregprovidertype = "ProviderType"
  Wszregprovider = "Provider"
  Wszhashalgorithm = "HashAlgorithm"
  Wszencryptionalgorithm = "EncryptionAlgorithm"
  Wszmachinekeyset = "MachineKeyset"
  Wszregkeysize = "KeySize"
  Wszregsymmetrickeysize = "SymmetricKeySize"
  Wszcngpublickeyalgorithm = "CNGPublicKeyAlgorithm"
  Wszcnghashalgorithm = "CNGHashAlgorithm"
  Wszcngencryptionalgorithm = "CNGEncryptionAlgorithm"
  Wszregalternatesignaturealgorithm = "AlternateSignatureAlgorithm"
  Sznameseparatordefault = "\n"
  Wszperiodyears = "Years"
  Wszperiodmonths = "Months"
  Wszperiodweeks = "Weeks"
  Wszperioddays = "Days"
  Wszperiodhours = "Hours"
  Wszperiodminutes = "Minutes"
  Wszperiodseconds = "Seconds"
  Wszregissuercerturlflags = "IssuerCertURLFlags"
  Wszregeditflags = "EditFlags"
  Wszregupnmap = "UPNMap"
  Wszregsubjectaltname = "SubjectAltName"
  Wszregsubjectaltname2 = "SubjectAltName2"
  Wszregrequestdisposition = "RequestDisposition"
  Wszregcapathlength = "CAPathLength"
  Wszregrevocationtype = "RevocationType"
  Wszregldaprevocationcrlurl_old = "LDAPRevocationCRLURL"
  Wszregrevocationcrlurl_old = "RevocationCRLURL"
  Wszregftprevocationcrlurl_old = "FTPRevocationCRLURL"
  Wszregfilerevocationcrlurl_old = "FileRevocationCRLURL"
  Wszregrevocationurl = "RevocationURL"
  Wszregldapissuercerturl_old = "LDAPIssuerCertURL"
  Wszregissuercerturl_old = "IssuerCertURL"
  Wszregftpissuercerturl_old = "FTPIssuerCertURL"
  Wszregfileissuercerturl_old = "FileIssuerCertURL"
  Wszregenablerequestextensionlist = "EnableRequestExtensionList"
  Wszregenableenrolleerequestextensionlist = "EnableEnrolleeRequestExtensionList"
  Wszregdisableextensionlist = "DisableExtensionList"
  Wszregekuoidsforvolatilerequests = "EKUOIDsforVolatileRequests"
  Wszregldapsessionoptions = "LDAPSessionOptions"
  Wszldapsessionoptionvalue = "LDAPSessionOptionValue"
  Wszregdefaultsmime = "DefaultSMIME"
  CAPATHLENGTH_INFINITE = 4294967295_u32
  REQDISP_PENDING = 0_u32
  REQDISP_ISSUE = 1_u32
  REQDISP_DENY = 2_u32
  REQDISP_USEREQUESTATTRIBUTE = 3_u32
  REQDISP_MASK = 255_u32
  REQDISP_PENDINGFIRST = 256_u32
  REQDISP_DEFAULT_ENTERPRISE = 1_u32
  REVEXT_CDPLDAPURL_OLD = 1_u32
  REVEXT_CDPHTTPURL_OLD = 2_u32
  REVEXT_CDPFTPURL_OLD = 4_u32
  REVEXT_CDPFILEURL_OLD = 8_u32
  REVEXT_CDPURLMASK_OLD = 255_u32
  REVEXT_CDPENABLE = 256_u32
  REVEXT_ASPENABLE = 512_u32
  REVEXT_DEFAULT_NODS = 256_u32
  REVEXT_DEFAULT_DS = 256_u32
  ISSCERT_LDAPURL_OLD = 1_u32
  ISSCERT_HTTPURL_OLD = 2_u32
  ISSCERT_FTPURL_OLD = 4_u32
  ISSCERT_FILEURL_OLD = 8_u32
  ISSCERT_URLMASK_OLD = 255_u32
  ISSCERT_ENABLE = 256_u32
  ISSCERT_DEFAULT_NODS = 256_u32
  ISSCERT_DEFAULT_DS = 256_u32
  EDITF_ENABLEREQUESTEXTENSIONS = 1_u32
  EDITF_REQUESTEXTENSIONLIST = 2_u32
  EDITF_DISABLEEXTENSIONLIST = 4_u32
  EDITF_ADDOLDKEYUSAGE = 8_u32
  EDITF_ADDOLDCERTTYPE = 16_u32
  EDITF_ATTRIBUTEENDDATE = 32_u32
  EDITF_BASICCONSTRAINTSCRITICAL = 64_u32
  EDITF_BASICCONSTRAINTSCA = 128_u32
  EDITF_ENABLEAKIKEYID = 256_u32
  EDITF_ATTRIBUTECA = 512_u32
  EDITF_IGNOREREQUESTERGROUP = 1024_u32
  EDITF_ENABLEAKIISSUERNAME = 2048_u32
  EDITF_ENABLEAKIISSUERSERIAL = 4096_u32
  EDITF_ENABLEAKICRITICAL = 8192_u32
  EDITF_SERVERUPGRADED = 16384_u32
  EDITF_ATTRIBUTEEKU = 32768_u32
  EDITF_ENABLEDEFAULTSMIME = 65536_u32
  EDITF_EMAILOPTIONAL = 131072_u32
  EDITF_ATTRIBUTESUBJECTALTNAME2 = 262144_u32
  EDITF_ENABLELDAPREFERRALS = 524288_u32
  EDITF_ENABLECHASECLIENTDC = 1048576_u32
  EDITF_AUDITCERTTEMPLATELOAD = 2097152_u32
  EDITF_DISABLEOLDOSCNUPN = 4194304_u32
  EDITF_DISABLELDAPPACKAGELIST = 8388608_u32
  EDITF_ENABLEUPNMAP = 16777216_u32
  EDITF_ENABLEOCSPREVNOCHECK = 33554432_u32
  EDITF_ENABLERENEWONBEHALFOF = 67108864_u32
  EDITF_ENABLEKEYENCIPHERMENTCACERT = 134217728_u32
  Wszregldaprevocationdn_old = "LDAPRevocationDN"
  Wszregldaprevocationdntemplate_old = "LDAPRevocationDNTemplate"
  Wszcrlpublishretrycount = "CRLPublishRetryCount"
  Wszregcertpublishflags = "PublishCertFlags"
  EXITPUB_FILE = 1_u32
  EXITPUB_ACTIVEDIRECTORY = 2_u32
  EXITPUB_REMOVEOLDCERTS = 16_u32
  EXITPUB_DEFAULT_ENTERPRISE = 2_u32
  EXITPUB_DEFAULT_STANDALONE = 1_u32
  Wszclass_certadmin = "CertificateAuthority.Admin"
  Wszclass_certconfig = "CertificateAuthority.Config"
  Wszclass_certgetconfig = "CertificateAuthority.GetConfig"
  Wszclass_certencode = "CertificateAuthority.Encode"
  Wszclass_certdbmem = "CertificateAuthority.DBMem"
  Wszclass_certrequest = "CertificateAuthority.Request"
  Wszclass_certserverexit = "CertificateAuthority.ServerExit"
  Wszclass_certserverpolicy = "CertificateAuthority.ServerPolicy"
  Wszclass_certview = "CertificateAuthority.View"
  Wszmicrosoftcertmodule_prefix = "CertificateAuthority_MicrosoftDefault"
  Wszcertmanage_suffix = "Manage"
  Wszcertexitmodule_postfix = ".Exit"
  Wszcertpolicymodule_postfix = ".Policy"
  Wszcapolicyfile = "CAPolicy.inf"
  Wszinfsection_cdp = "CRLDistributionPoint"
  Wszinfsection_aia = "AuthorityInformationAccess"
  Wszinfsection_eku = "EnhancedKeyUsageExtension"
  Wszinfsection_ccdp = "CrossCertificateDistributionPointsExtension"
  Wszinfsection_certserver = "certsrv_server"
  Wszinfkey_renewalkeylength = "RenewalKeyLength"
  Wszinfkey_renewalvalidityperiodstring = "RenewalValidityPeriod"
  Wszinfkey_renewalvalidityperiodcount = "RenewalValidityPeriodUnits"
  Wszinfkey_utf8 = "UTF8"
  Wszinfkey_crlperiodstring = "CRLPeriod"
  Wszinfkey_crlperiodcount = "CRLPeriodUnits"
  Wszinfkey_crldeltaperiodstring = "CRLDeltaPeriod"
  Wszinfkey_crldeltaperiodcount = "CRLDeltaPeriodUnits"
  Wszinfkey_loaddefaulttemplates = "LoadDefaultTemplates"
  Wszinfkey_enablekeycounting = "EnableKeyCounting"
  Wszinfkey_forceutf8 = "ForceUTF8"
  Wszinfkey_alternatesignaturealgorithm = "AlternateSignatureAlgorithm"
  Wszinfkey_showallcsps = "ShowAllCSPs"
  Wszinfkey_critical = "Critical"
  Wszinfkey_empty = "Empty"
  Wszinfkey_ccdpsyncdeltatime = "SyncDeltaTime"
  Wszinfsection_capolicy = "CAPolicy"
  Wszinfsection_policystatement = "PolicyStatementExtension"
  Wszinfsection_applicationpolicystatement = "ApplicationPolicyStatementExtension"
  Wszinfkey_policies = "Policies"
  Wszinfkey_oid = "OID"
  Wszinfkey_notice = "Notice"
  Wszinfkey_flags = "Flags"
  Wszinfsection_requestattributes = "RequestAttributes"
  Wszinfsection_nameconstraints = "NameConstraintsExtension"
  Wszinfkey_include = "Include"
  Wszinfkey_exclude = "Exclude"
  Wszinfkey_subtree = "SubTree"
  Wszinfkey_upn = "UPN"
  Wszinfkey_email = "EMail"
  Wszinfkey_dns = "DNS"
  Wszinfkey_directoryname = "DirectoryName"
  Wszinfkey_url = "URL"
  Wszinfkey_ipaddress = "IPAddress"
  Wszinfkey_registeredid = "RegisteredId"
  Wszinfkey_othername = "OtherName"
  Wszinfsection_policymappings = "PolicyMappingsExtension"
  Wszinfsection_applicationpolicymappings = "ApplicationPolicyMappingsExtension"
  Wszinfsection_policyconstraints = "PolicyConstraintsExtension"
  Wszinfsection_applicationpolicyconstraints = "ApplicationPolicyConstraintsExtension"
  Wszinfkey_requireexplicitpolicy = "RequireExplicitPolicy"
  Wszinfkey_inhibitpolicymapping = "InhibitPolicyMapping"
  Wszinfsection_basicconstraints = "BasicConstraintsExtension"
  Wszinfkey_pathlength = "PathLength"
  Wszinfsection_extensions = "Extensions"
  Wszinfsection_properties = "Properties"
  Wszinfkey_continue = "_continue_"
  Wszinfsection_newrequest = "NewRequest"
  Wszinfkey_subject = "Subject"
  Wszinfkey_subjectnameflags = "SubjectNameFlags"
  Wszinfkey_x500nameflags = "X500NameFlags"
  Wszinfkey_exportable = "Exportable"
  Wszinfkey_exportableencrypted = "ExportableEncrypted"
  Wszinfkey_hashalgorithm = "HashAlgorithm"
  Wszinfkey_keyalgorithm = "KeyAlgorithm"
  Wszinfkey_keyalgorithmparmeters = "KeyAlgorithmParameters"
  Wszinfkey_keycontainer = "KeyContainer"
  Wszinfkey_readername = "ReaderName"
  Wszinfkey_keylength = "KeyLength"
  Wszinfkey_legacykeyspec = "KeySpec"
  Wszinfkey_keyusageextension = "KeyUsage"
  Wszinfkey_keyusageproperty = "KeyUsageProperty"
  Wszinfkey_machinekeyset = "MachineKeySet"
  Wszinfkey_privatekeyarchive = "PrivateKeyArchive"
  Wszinfkey_encryptionalgorithm = "EncryptionAlgorithm"
  Wszinfkey_encryptionlength = "EncryptionLength"
  Wszinfkey_providername = "ProviderName"
  Wszinfkey_providertype = "ProviderType"
  Wszinfkey_renewalcert = "RenewalCert"
  Wszinfkey_requesttype = "RequestType"
  Wszinfkey_securitydescriptor = "SecurityDescriptor"
  Wszinfkey_silent = "Silent"
  Wszinfkey_smime = "SMIME"
  Wszinfkey_suppressdefaults = "SuppressDefaults"
  Wszinfkey_useexistingkey = "UseExistingKeySet"
  Wszinfkey_userprotected = "UserProtected"
  Wszinfkey_keyprotection = "KeyProtection"
  Wszinfkey_uicontextmessage = "UIContextMessage"
  Wszinfkey_friendlyname = "FriendlyName"
  Wszinfkey_notbefore = "NotBefore"
  Wszinfkey_notafter = "NotAfter"
  Wszinfkey_attestprivatekey = "AttestPrivateKey"
  Wszinfkey_publickey = "PublicKey"
  Wszinfkey_publickeyparameters = "PublicKeyParameters"
  Wszinfkey_ecckeyparameters = "EccKeyParameters"
  Wszinfkey_ecckeyparameters_p = "EccKeyParameters_P"
  Wszinfkey_ecckeyparameters_a = "EccKeyParameters_A"
  Wszinfkey_ecckeyparameters_b = "EccKeyParameters_B"
  Wszinfkey_ecckeyparameters_seed = "EccKeyParameters_Seed"
  Wszinfkey_ecckeyparameters_base = "EccKeyParameters_Base"
  Wszinfkey_ecckeyparameters_order = "EccKeyParameters_Order"
  Wszinfkey_ecckeyparameters_cofactor = "EccKeyParameters_Cofactor"
  Wszinfkey_ecckeyparameterstype = "EccKeyParametersType"
  Wszinfkey_serialnumber = "SerialNumber"
  Wszinfkey_cathumbprint = "CAThumbprint"
  Wszinfkey_cacerts = "CACerts"
  Wszinfkey_cacapabilities = "CACapabilities"
  Wszinfkey_challengepassword = "ChallengePassword"
  Wszinfvalue_requesttype_pkcs10 = "PKCS10"
  Wszinfvalue_requesttype_pkcs7 = "PKCS7"
  Wszinfvalue_requesttype_cmc = "CMC"
  Wszinfvalue_requesttype_cert = "Cert"
  Wszinfvalue_requesttype_scep = "SCEP"
  Wszinfvalue_endorsementkey = "EndorsementKey"
  Wszregexitsmtpkey = "SMTP"
  Wszregexitsmtptemplates = "Templates"
  Wszregexitsmtpeventfilter = "EventFilter"
  Wszregexitsmtpserver = "SMTPServer"
  Wszregexitsmtpauthenticate = "SMTPAuthenticate"
  Wszregexitdeniedkey = "Denied"
  Wszregexitissuedkey = "Issued"
  Wszregexitpendingkey = "Pending"
  Wszregexitrevokedkey = "Revoked"
  Wszregexitcrlissuedkey = "CRLIssued"
  Wszregexitshutdownkey = "Shutdown"
  Wszregexitstartupkey = "Startup"
  Wszregexitimportedkey = "Imported"
  Wszregexitsmtpfrom = "From"
  Wszregexitsmtpto = "To"
  Wszregexitsmtpcc = "Cc"
  Wszregexittitleformat = "TitleFormat"
  Wszregexittitlearg = "TitleArg"
  Wszregexitbodyformat = "BodyFormat"
  Wszregexitbodyarg = "BodyArg"
  Wszregexitpropnotfound = "???"
  Wszregkeyenrollment = "Software\\Microsoft\\Cryptography\\AutoEnrollment"
  Wszregkeygrouppolicyenrollment = "Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment"
  Wszregmaxpendingrequestdays = "MaxPendingRequestDays"
  Wszregaeloglevel_old = "AEEventLogLevel"
  Wszregenrollflags = "EnrollFlags"
  Wszregverifyflags = "VerifyFlags"
  Wszregunicode = "Unicode"
  Wszregaikcloudcaurl = "AIKCloudCAURL"
  Wszregaikkeyalgorithm = "AIKKeyAlgorithm"
  Wszregaikkeylength = "AIKKeyLength"
  Wszregpreservescepdummycerts = "PreserveSCEPDummyCerts"
  Wszregallproviders = "All"
  TP_MACHINEPOLICY = 1_u32
  Wszregkeyrepair = "KeyRepair"
  KR_ENABLE_MACHINE = 1_u32
  KR_ENABLE_USER = 2_u32
  Wszpropdistinguishedname = "DistinguishedName"
  Wszproprawname = "RawName"
  Wszpropcountry = "Country"
  Wszproporganization = "Organization"
  Wszproporgunit = "OrgUnit"
  Wszpropcommonname = "CommonName"
  Wszproplocality = "Locality"
  Wszpropstate = "State"
  Wszproptitle = "Title"
  Wszpropgivenname = "GivenName"
  Wszpropinitials = "Initials"
  Wszpropsurname = "SurName"
  Wszpropdomaincomponent = "DomainComponent"
  Wszpropemail = "EMail"
  Wszpropstreetaddress = "StreetAddress"
  Wszpropunstructuredname = "UnstructuredName"
  Wszpropunstructuredaddress = "UnstructuredAddress"
  Wszpropdeviceserialnumber = "DeviceSerialNumber"
  Wszpropsubjectdot = "Subject."
  Wszproprequestdot = "Request."
  Wszproprequestrequestid = "RequestID"
  Wszproprequestrawrequest = "RawRequest"
  Wszproprequestrawarchivedkey = "RawArchivedKey"
  Wszproprequestarchivedkey = "ArchivedKey"
  Wszproprequestkeyrecoveryhashes = "KeyRecoveryHashes"
  Wszproprequestrawoldcertificate = "RawOldCertificate"
  Wszproprequestattributes = "RequestAttributes"
  Wszproprequesttype = "RequestType"
  Wszproprequestflags = "RequestFlags"
  Wszproprequeststatuscode = "StatusCode"
  Wszproprequestdisposition = "Disposition"
  Wszproprequestdispositionmessage = "DispositionMessage"
  Wszproprequestsubmittedwhen = "SubmittedWhen"
  Wszproprequestresolvedwhen = "ResolvedWhen"
  Wszproprequestrevokedwhen = "RevokedWhen"
  Wszproprequestrevokedeffectivewhen = "RevokedEffectiveWhen"
  Wszproprequestrevokedreason = "RevokedReason"
  Wszproprequestername = "RequesterName"
  Wszpropcallername = "CallerName"
  Wszpropsignerpolicies = "SignerPolicies"
  Wszpropsignerapplicationpolicies = "SignerApplicationPolicies"
  Wszpropofficer = "Officer"
  Wszproppublishexpiredcertincrl = "PublishExpiredCertInCRL"
  Wszproprequesternamefromoldcertificate = "RequesterNameFromOldCertificate"
  Wszpropattestationchallenge = "AttestationChallenge"
  Wszpropendorsementkeyhash = "EndorsementKeyHash"
  Wszpropendorsementcertificatehash = "EndorsementCertificateHash"
  Wszproprawprecertificate = "RawPrecertificate"
  Wszpropchallenge = "Challenge"
  Wszpropexpectedchallenge = "ExpectedChallenge"
  Wszpropdisposition = "Disposition"
  Wszpropdispositiondeny = "Deny"
  Wszpropdispositionpending = "Pending"
  Wszpropvalidityperiodstring = "ValidityPeriod"
  Wszpropvalidityperiodcount = "ValidityPeriodUnits"
  Wszpropexpirationdate = "ExpirationDate"
  Wszpropcerttype = "CertType"
  Wszpropcerttemplate = "CertificateTemplate"
  Wszpropcertusage = "CertificateUsage"
  Wszproprequestosversion = "RequestOSVersion"
  Wszproprequestcspprovider = "RequestCSPProvider"
  Wszpropexitcertfile = "CertFile"
  Wszpropclientbrowsermachine = "cbm"
  Wszpropcertclientmachine = "ccm"
  Wszpropclientdcdns = "cdc"
  Wszproprequestmachinedns = "rmd"
  Wszpropsubjectaltname2 = "san"
  Wszpropdns = "dns"
  Wszpropdn = "dn"
  Wszpropurl = "url"
  Wszpropipaddress = "ipaddress"
  Wszpropguid = "guid"
  Wszpropoid = "oid"
  Wszpropupn = "upn"
  Szpropasntag = "{asn}"
  Wszpropcriticaltag = "{critical}"
  Wszproputf8tag = "{utf8}"
  Wszpropoctettag = "{octet}"
  Wszprophextag = "{hex}"
  Wszproptexttag = "{text}"
  Wszpropdecimaltag = "{decimal}"
  Wszpropfiletag = "{file}"
  Wszat_ekcertinf = "@EKCert"
  Wszat_testroot = "@TestRoot"
  Wszpropcatype = "CAType"
  Wszpropsanitizedcaname = "SanitizedCAName"
  Wszpropsanitizedshortname = "SanitizedShortName"
  Wszpropmachinednsname = "MachineDNSName"
  Wszpropmoduleregloc = "ModuleRegistryLocation"
  Wszpropuseds = "fUseDS"
  Wszpropdeltacrlsdisabled = "fDeltaCRLsDisabled"
  Wszpropserverupgraded = "fServerUpgraded"
  Wszpropconfigdn = "ConfigDN"
  Wszpropdomaindn = "DomainDN"
  Wszproploglevel = "LogLevel"
  Wszpropsessioncount = "SessionCount"
  Wszproptemplatechangesequencenumber = "TemplateChangeSequenceNumber"
  Wszpropvolatilemode = "VolatileMode"
  Wszlocalizedtimeperiodunits = "LocalizedTimePeriodUnits"
  Wszproprequestercaaccess = "RequesterCAAccess"
  Wszpropuserdn = "UserDN"
  Wszpropkeyarchived = "KeyArchived"
  Wszpropcertcount = "CertCount"
  Wszproprawcacertificate = "RawCACertificate"
  Wszpropcertstate = "CertState"
  Wszpropcertsuffix = "CertSuffix"
  Wszproprawcrl = "RawCRL"
  Wszproprawdeltacrl = "RawDeltaCRL"
  Wszpropcrlindex = "CRLIndex"
  Wszpropcrlstate = "CRLState"
  Wszpropcrlsuffix = "CRLSuffix"
  Wszpropeventlogterse = "EventLogTerse"
  Wszpropeventlogerror = "EventLogError"
  Wszpropeventlogwarning = "EventLogWarning"
  Wszpropeventlogverbose = "EventLogVerbose"
  Wszpropeventlogexhaustive = "EventLogExhaustive"
  Wszpropdcname = "DCName"
  Wszpropcrossforest = "CrossForest"
  Wszproprequestersamname = "RequesterSAMName"
  Wszproprequesterupn = "RequesterUPN"
  Wszproprequesterdn = "RequesterDN"
  Wszpropseauditid = "SEAuditId"
  Wszpropseauditfilter = "SEAuditFilter"
  Wszpropcertificaterequestid = "RequestID"
  Wszproprawcertificate = "RawCertificate"
  Wszpropcertificatehash = "CertificateHash"
  Wszpropcertificatetemplate = "CertificateTemplate"
  Wszpropcertificateenrollmentflags = "EnrollmentFlags"
  Wszpropcertificategeneralflags = "GeneralFlags"
  Wszpropcertificateprivatekeyflags = "PrivatekeyFlags"
  Wszpropcertificateserialnumber = "SerialNumber"
  Wszpropcertificatenotbeforedate = "NotBefore"
  Wszpropcertificatenotafterdate = "NotAfter"
  Wszpropcertificatesubjectkeyidentifier = "SubjectKeyIdentifier"
  Wszpropcertificaterawpublickey = "RawPublicKey"
  Wszpropcertificatepublickeylength = "PublicKeyLength"
  Wszpropcertificatepublickeyalgorithm = "PublicKeyAlgorithm"
  Wszpropcertificaterawpublickeyalgorithmparameters = "RawPublicKeyAlgorithmParameters"
  Wszpropcertificateupn = "UPN"
  Wszpropcertificatetype = "CertificateType"
  Wszpropcertificaterawsmimecapabilities = "RawSMIMECapabilities"
  Wszpropnametype = "NameType"
  EXTENSION_CRITICAL_FLAG = 1_u32
  EXTENSION_DISABLE_FLAG = 2_u32
  EXTENSION_DELETE_FLAG = 4_u32
  EXTENSION_POLICY_MASK = 65535_u32
  EXTENSION_ORIGIN_REQUEST = 65536_u32
  EXTENSION_ORIGIN_POLICY = 131072_u32
  EXTENSION_ORIGIN_ADMIN = 196608_u32
  EXTENSION_ORIGIN_SERVER = 262144_u32
  EXTENSION_ORIGIN_RENEWALCERT = 327680_u32
  EXTENSION_ORIGIN_IMPORTEDCERT = 393216_u32
  EXTENSION_ORIGIN_PKCS7 = 458752_u32
  EXTENSION_ORIGIN_CMC = 524288_u32
  EXTENSION_ORIGIN_CACERT = 589824_u32
  EXTENSION_ORIGIN_MASK = 983040_u32
  Wszpropextrequestid = "ExtensionRequestId"
  Wszpropextname = "ExtensionName"
  Wszpropextflags = "ExtensionFlags"
  Wszpropextrawvalue = "ExtensionRawValue"
  Wszpropattribrequestid = "AttributeRequestId"
  Wszpropattribname = "AttributeName"
  Wszpropattribvalue = "AttributeValue"
  Wszpropcrlrowid = "CRLRowId"
  Wszpropcrlnumber = "CRLNumber"
  Wszpropcrlminbase = "CRLMinBase"
  Wszpropcrlnameid = "CRLNameId"
  Wszpropcrlcount = "CRLCount"
  Wszpropcrlthisupdate = "CRLThisUpdate"
  Wszpropcrlnextupdate = "CRLNextUpdate"
  Wszpropcrlthispublish = "CRLThisPublish"
  Wszpropcrlnextpublish = "CRLNextPublish"
  Wszpropcrleffective = "CRLEffective"
  Wszpropcrlpropagationcomplete = "CRLPropagationComplete"
  Wszpropcrllastpublished = "CRLLastPublished"
  Wszpropcrlpublishattempts = "CRLPublishAttempts"
  Wszpropcrlpublishflags = "CRLPublishFlags"
  Wszpropcrlpublishstatuscode = "CRLPublishStatusCode"
  Wszpropcrlpublisherror = "CRLPublishError"
  Wszpropcrlrawcrl = "CRLRawCRL"
  CPF_BASE = 1_u32
  CPF_DELTA = 2_u32
  CPF_COMPLETE = 4_u32
  CPF_SHADOW = 8_u32
  CPF_CASTORE_ERROR = 16_u32
  CPF_BADURL_ERROR = 32_u32
  CPF_MANUAL = 64_u32
  CPF_SIGNATURE_ERROR = 128_u32
  CPF_LDAP_ERROR = 256_u32
  CPF_FILE_ERROR = 512_u32
  CPF_FTP_ERROR = 1024_u32
  CPF_HTTP_ERROR = 2048_u32
  CPF_POSTPONED_BASE_LDAP_ERROR = 4096_u32
  CPF_POSTPONED_BASE_FILE_ERROR = 8192_u32
  PROPTYPE_MASK = 255_u32
  PROPCALLER_SERVER = 256_u32
  PROPCALLER_POLICY = 512_u32
  PROPCALLER_EXIT = 768_u32
  PROPCALLER_ADMIN = 1024_u32
  PROPCALLER_REQUEST = 1280_u32
  PROPCALLER_MASK = 3840_u32
  PROPFLAGS_INDEXED = 65536_u32
  CR_FLG_FORCETELETEX = 1_u32
  CR_FLG_RENEWAL = 2_u32
  CR_FLG_FORCEUTF8 = 4_u32
  CR_FLG_CAXCHGCERT = 8_u32
  CR_FLG_ENROLLONBEHALFOF = 16_u32
  CR_FLG_SUBJECTUNMODIFIED = 32_u32
  CR_FLG_VALIDENCRYPTEDKEYHASH = 64_u32
  CR_FLG_CACROSSCERT = 128_u32
  CR_FLG_ENFORCEUTF8 = 256_u32
  CR_FLG_DEFINEDCACERT = 512_u32
  CR_FLG_CHALLENGEPENDING = 1024_u32
  CR_FLG_CHALLENGESATISFIED = 2048_u32
  CR_FLG_TRUSTONUSE = 4096_u32
  CR_FLG_TRUSTEKCERT = 8192_u32
  CR_FLG_TRUSTEKKEY = 16384_u32
  CR_FLG_PUBLISHERROR = 2147483648_u32
  DB_DISP_ACTIVE = 8_u32
  DB_DISP_PENDING = 9_u32
  DB_DISP_QUEUE_MAX = 9_u32
  DB_DISP_FOREIGN = 12_u32
  DB_DISP_CA_CERT = 15_u32
  DB_DISP_CA_CERT_CHAIN = 16_u32
  DB_DISP_KRA_CERT = 17_u32
  DB_DISP_LOG_MIN = 20_u32
  DB_DISP_ISSUED = 20_u32
  DB_DISP_REVOKED = 21_u32
  DB_DISP_LOG_FAILED_MIN = 30_u32
  DB_DISP_ERROR = 30_u32
  DB_DISP_DENIED = 31_u32
  VR_PENDING = 0_u32
  VR_INSTANT_OK = 1_u32
  VR_INSTANT_BAD = 2_u32
  Wszcert_type = "RequestType"
  Wszcert_type_client = "Client"
  Wszcert_type_server = "Server"
  Wszcert_type_codesign = "CodeSign"
  Wszcert_type_customer = "SetCustomer"
  Wszcert_type_merchant = "SetMerchant"
  Wszcert_type_payment = "SetPayment"
  Wszcert_version = "Version"
  Wszcert_version_1 = "1"
  Wszcert_version_2 = "2"
  Wszcert_version_3 = "3"
  CV_OUT_HEXRAW = 12_u32
  CV_OUT_ENCODEMASK = 255_u32
  CV_OUT_NOCRLF = 1073741824_u32
  CV_OUT_NOCR = 2147483648_u32
  CVR_SEEK_NONE = 0_u32
  CVR_SEEK_MASK = 255_u32
  CVR_SEEK_NODELTA = 4096_u32
  CVR_SORT_NONE = 0_u32
  CVR_SORT_ASCEND = 1_u32
  CVR_SORT_DESCEND = 2_u32
  CV_COLUMN_EXTENSION_DEFAULT = -4_i32
  CV_COLUMN_ATTRIBUTE_DEFAULT = -5_i32
  CV_COLUMN_CRL_DEFAULT = -6_i32
  CV_COLUMN_LOG_REVOKED_DEFAULT = -7_i32
  CVRC_TABLE_MASK = 61440_u32
  CVRC_TABLE_SHIFT = 12_u32
  CRYPT_ENUM_ALL_PROVIDERS = 1_u32
  XEPR_ENUM_FIRST = -1_i32
  XEPR_DATE = 5_u32
  XEPR_TEMPLATENAME = 6_u32
  XEPR_VERSION = 7_u32
  XEPR_V1TEMPLATENAME = 9_u32
  XEPR_V2TEMPLATEOID = 16_u32
  XEKL_KEYSIZE_DEFAULT = 4_u32
  XECP_STRING_PROPERTY = 1_u32
  XECI_DISABLE = 0_u32
  XECI_XENROLL = 1_u32
  XECI_AUTOENROLL = 2_u32
  XECI_REQWIZARD = 3_u32
  XECI_CERTREQ = 4_u32
  Wszcmm_prop_name = "Name"
  Wszcmm_prop_description = "Description"
  Wszcmm_prop_copyright = "Copyright"
  Wszcmm_prop_filever = "File Version"
  Wszcmm_prop_productver = "Product Version"
  Wszcmm_prop_display_hwnd = "HWND"
  Wszcmm_prop_ismultithreaded = "IsMultiThreaded"

  CLSID_CCertAdmin = LibC::GUID.new(0x37eabaf0_u32, 0x7fb6_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x17_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertView = LibC::GUID.new(0xa12d0f7a_u32, 0x1e84_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])

  CLSID_OCSPPropertyCollection = LibC::GUID.new(0xf935a528_u32, 0xba8a_u16, 0x4dd9_u16, StaticArray[0xba_u8, 0x79_u8, 0xf2_u8, 0x83_u8, 0x27_u8, 0x5c_u8, 0xb2_u8, 0xde_u8])

  CLSID_OCSPAdmin = LibC::GUID.new(0xd3f73511_u32, 0x92c9_u16, 0x47cb_u16, StaticArray[0x8f_u8, 0xf2_u8, 0x8d_u8, 0x89_u8, 0x1a_u8, 0x7c_u8, 0x4d_u8, 0xe4_u8])

  CLSID_CCertGetConfig = LibC::GUID.new(0xc6cc49b0_u32, 0xce17_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x33_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertConfig = LibC::GUID.new(0x372fce38_u32, 0x4324_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x10_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertRequest = LibC::GUID.new(0x98aff3f0_u32, 0x5524_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x12_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertServerPolicy = LibC::GUID.new(0xaa000926_u32, 0xffbe_u16, 0x11cf_u16, StaticArray[0x88_u8, 0x0_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertServerExit = LibC::GUID.new(0x4c4a5e40_u32, 0x732c_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertEncodeStringArray = LibC::GUID.new(0x19a76fe0_u32, 0x7494_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertEncodeLongArray = LibC::GUID.new(0x4e0680a0_u32, 0xa0a2_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertEncodeDateArray = LibC::GUID.new(0x301f77b0_u32, 0xa470_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertEncodeCRLDistInfo = LibC::GUID.new(0x1fa60a0_u32, 0xbbff_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x25_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])

  CLSID_CCertEncodeAltName = LibC::GUID.new(0x1cfc4cda_u32, 0x1271_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])

  CLSID_CCertEncodeBitString = LibC::GUID.new(0x6d6b3cd8_u32, 0x1278_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])

  CLSID_CObjectId = LibC::GUID.new(0x884e2000_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CObjectIds = LibC::GUID.new(0x884e2001_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CBinaryConverter = LibC::GUID.new(0x884e2002_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX500DistinguishedName = LibC::GUID.new(0x884e2003_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCspInformation = LibC::GUID.new(0x884e2007_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCspInformations = LibC::GUID.new(0x884e2008_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCspStatus = LibC::GUID.new(0x884e2009_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509PublicKey = LibC::GUID.new(0x884e200b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509PrivateKey = LibC::GUID.new(0x884e200c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509EndorsementKey = LibC::GUID.new(0x11a25a1d_u32, 0xb9a3_u16, 0x4edd_u16, StaticArray[0xaf_u8, 0x83_u8, 0x3b_u8, 0x59_u8, 0xad_u8, 0xbe_u8, 0xd3_u8, 0x61_u8])

  CLSID_CX509Extension = LibC::GUID.new(0x884e200d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509Extensions = LibC::GUID.new(0x884e200e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionKeyUsage = LibC::GUID.new(0x884e200f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionEnhancedKeyUsage = LibC::GUID.new(0x884e2010_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionTemplateName = LibC::GUID.new(0x884e2011_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionTemplate = LibC::GUID.new(0x884e2012_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CAlternativeName = LibC::GUID.new(0x884e2013_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CAlternativeNames = LibC::GUID.new(0x884e2014_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionAlternativeNames = LibC::GUID.new(0x884e2015_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionBasicConstraints = LibC::GUID.new(0x884e2016_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionSubjectKeyIdentifier = LibC::GUID.new(0x884e2017_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionAuthorityKeyIdentifier = LibC::GUID.new(0x884e2018_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CSmimeCapability = LibC::GUID.new(0x884e2019_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CSmimeCapabilities = LibC::GUID.new(0x884e201a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionSmimeCapabilities = LibC::GUID.new(0x884e201b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CPolicyQualifier = LibC::GUID.new(0x884e201c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CPolicyQualifiers = LibC::GUID.new(0x884e201d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertificatePolicy = LibC::GUID.new(0x884e201e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertificatePolicies = LibC::GUID.new(0x884e201f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionCertificatePolicies = LibC::GUID.new(0x884e2020_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509ExtensionMSApplicationPolicies = LibC::GUID.new(0x884e2021_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509Attribute = LibC::GUID.new(0x884e2022_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509Attributes = LibC::GUID.new(0x884e2023_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeExtensions = LibC::GUID.new(0x884e2024_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeClientId = LibC::GUID.new(0x884e2025_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeRenewalCertificate = LibC::GUID.new(0x884e2026_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeArchiveKey = LibC::GUID.new(0x884e2027_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeArchiveKeyHash = LibC::GUID.new(0x884e2028_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeOSVersion = LibC::GUID.new(0x884e202a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509AttributeCspProvider = LibC::GUID.new(0x884e202b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCryptAttribute = LibC::GUID.new(0x884e202c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCryptAttributes = LibC::GUID.new(0x884e202d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertProperty = LibC::GUID.new(0x884e202e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertProperties = LibC::GUID.new(0x884e202f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyFriendlyName = LibC::GUID.new(0x884e2030_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyDescription = LibC::GUID.new(0x884e2031_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyAutoEnroll = LibC::GUID.new(0x884e2032_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyRequestOriginator = LibC::GUID.new(0x884e2033_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertySHA1Hash = LibC::GUID.new(0x884e2034_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyKeyProvInfo = LibC::GUID.new(0x884e2036_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyArchived = LibC::GUID.new(0x884e2037_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyBackedUp = LibC::GUID.new(0x884e2038_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyEnrollment = LibC::GUID.new(0x884e2039_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyRenewal = LibC::GUID.new(0x884e203a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyArchivedKeyHash = LibC::GUID.new(0x884e203b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertPropertyEnrollmentPolicyServer = LibC::GUID.new(0x884e204c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CSignerCertificate = LibC::GUID.new(0x884e203d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509NameValuePair = LibC::GUID.new(0x884e203f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CCertificateAttestationChallenge = LibC::GUID.new(0x1362ada1_u32, 0xeb60_u16, 0x456a_u16, StaticArray[0xb6_u8, 0xe1_u8, 0x11_u8, 0x80_u8, 0x50_u8, 0xdb_u8, 0x74_u8, 0x1b_u8])

  CLSID_CX509CertificateRequestPkcs10 = LibC::GUID.new(0x884e2042_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateRequestCertificate = LibC::GUID.new(0x884e2043_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateRequestPkcs7 = LibC::GUID.new(0x884e2044_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateRequestCmc = LibC::GUID.new(0x884e2045_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509Enrollment = LibC::GUID.new(0x884e2046_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509EnrollmentWebClassFactory = LibC::GUID.new(0x884e2049_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509EnrollmentHelper = LibC::GUID.new(0x884e2050_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509MachineEnrollmentFactory = LibC::GUID.new(0x884e2051_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509EnrollmentPolicyActiveDirectory = LibC::GUID.new(0x91f39027_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509EnrollmentPolicyWebService = LibC::GUID.new(0x91f39028_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509PolicyServerListManager = LibC::GUID.new(0x91f39029_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509PolicyServerUrl = LibC::GUID.new(0x91f3902a_u32, 0x217f_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateTemplateADWritable = LibC::GUID.new(0x8336e323_u32, 0x2e6a_u16, 0x4a04_u16, StaticArray[0x93_u8, 0x7c_u8, 0x54_u8, 0x8f_u8, 0x68_u8, 0x18_u8, 0x39_u8, 0xb3_u8])

  CLSID_CX509CertificateRevocationListEntry = LibC::GUID.new(0x884e205e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateRevocationListEntries = LibC::GUID.new(0x884e205f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509CertificateRevocationList = LibC::GUID.new(0x884e2060_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509SCEPEnrollment = LibC::GUID.new(0x884e2061_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CX509SCEPEnrollmentHelper = LibC::GUID.new(0x884e2062_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])

  CLSID_CEnroll2 = LibC::GUID.new(0x127698e4_u32, 0xe730_u16, 0x4e5c_u16, StaticArray[0xa2_u8, 0xb1_u8, 0x21_u8, 0x49_u8, 0xa_u8, 0x70_u8, 0xc8_u8, 0xa1_u8])

  CLSID_CEnroll = LibC::GUID.new(0x43f8f289_u32, 0x7a20_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])

  enum CERT_VIEW_COLUMN_INDEX
    CV_COLUMN_LOG_DEFAULT = -2_i32
    CV_COLUMN_LOG_FAILED_DEFAULT = -3_i32
    CV_COLUMN_QUEUE_DEFAULT = -1_i32
  end
  enum CERT_DELETE_ROW_FLAGS : UInt32
    CDR_EXPIRED = 1_u32
    CDR_REQUEST_LAST_CHANGED = 2_u32
  end
  enum FULL_RESPONSE_PROPERTY_ID : UInt32
    FR_PROP_NONE = 0_u32
    FR_PROP_FULLRESPONSE = 1_u32
    FR_PROP_STATUSINFOCOUNT = 2_u32
    FR_PROP_BODYPARTSTRING = 3_u32
    FR_PROP_STATUS = 4_u32
    FR_PROP_STATUSSTRING = 5_u32
    FR_PROP_OTHERINFOCHOICE = 6_u32
    FR_PROP_FAILINFO = 7_u32
    FR_PROP_PENDINFOTOKEN = 8_u32
    FR_PROP_PENDINFOTIME = 9_u32
    FR_PROP_ISSUEDCERTIFICATEHASH = 10_u32
    FR_PROP_ISSUEDCERTIFICATE = 11_u32
    FR_PROP_ISSUEDCERTIFICATECHAIN = 12_u32
    FR_PROP_ISSUEDCERTIFICATECRLCHAIN = 13_u32
    FR_PROP_ENCRYPTEDKEYHASH = 14_u32
    FR_PROP_FULLRESPONSENOPKCS7 = 15_u32
    FR_PROP_CAEXCHANGECERTIFICATEHASH = 16_u32
    FR_PROP_CAEXCHANGECERTIFICATE = 17_u32
    FR_PROP_CAEXCHANGECERTIFICATECHAIN = 18_u32
    FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = 19_u32
    FR_PROP_ATTESTATIONCHALLENGE = 20_u32
    FR_PROP_ATTESTATIONPROVIDERNAME = 21_u32
  end
  enum CVRC_COLUMN : UInt32
    CVRC_COLUMN_SCHEMA = 0_u32
    CVRC_COLUMN_RESULT = 1_u32
    CVRC_COLUMN_VALUE = 2_u32
    CVRC_COLUMN_MASK = 4095_u32
  end
  enum CERT_IMPORT_FLAGS : UInt32
    CR_IN_BASE64HEADER = 0_u32
    CR_IN_BASE64 = 1_u32
    CR_IN_BINARY = 2_u32
  end
  enum CERT_GET_CONFIG_FLAGS : UInt32
    CC_DEFAULTCONFIG = 0_u32
    CC_FIRSTCONFIG = 2_u32
    CC_LOCALACTIVECONFIG = 4_u32
    CC_LOCALCONFIG = 3_u32
    CC_UIPICKCONFIG = 1_u32
    CC_UIPICKCONFIGSKIPLOCALCA = 5_u32
  end
  enum ENUM_CERT_COLUMN_VALUE_FLAGS : UInt32
    CV_OUT_BASE64 = 1_u32
    CV_OUT_BASE64HEADER = 0_u32
    CV_OUT_BASE64REQUESTHEADER = 3_u32
    CV_OUT_BASE64X509CRLHEADER = 9_u32
    CV_OUT_BINARY = 2_u32
    CV_OUT_HEX = 4_u32
    CV_OUT_HEXADDR = 10_u32
    CV_OUT_HEXASCII = 5_u32
    CV_OUT_HEXASCIIADDR = 11_u32
  end
  enum PENDING_REQUEST_DESIRED_PROPERTY : UInt32
    XEPR_CADNS = 1_u32
    XEPR_CAFRIENDLYNAME = 3_u32
    XEPR_CANAME = 2_u32
    XEPR_HASH = 8_u32
    XEPR_REQUESTID = 4_u32
  end
  @[Flags]
  enum CERTADMIN_GET_ROLES_FLAGS : UInt32
    CA_ACCESS_ADMIN = 1_u32
    CA_ACCESS_AUDITOR = 4_u32
    CA_ACCESS_ENROLL = 512_u32
    CA_ACCESS_OFFICER = 2_u32
    CA_ACCESS_OPERATOR = 8_u32
    CA_ACCESS_READ = 256_u32
  end
  enum CR_DISP : UInt32
    CR_DISP_DENIED = 2_u32
    CR_DISP_ERROR = 1_u32
    CR_DISP_INCOMPLETE = 0_u32
    CR_DISP_ISSUED = 3_u32
    CR_DISP_ISSUED_OUT_OF_BAND = 4_u32
    CR_DISP_UNDER_SUBMISSION = 5_u32
  end
  enum XEKL_KEYSIZE : UInt32
    XEKL_KEYSIZE_MIN = 1_u32
    XEKL_KEYSIZE_MAX = 2_u32
    XEKL_KEYSIZE_INC = 3_u32
  end
  enum CERT_CREATE_REQUEST_FLAGS : UInt32
    XECR_CMC = 3_u32
    XECR_PKCS10_V1_5 = 4_u32
    XECR_PKCS10_V2_0 = 1_u32
    XECR_PKCS7 = 2_u32
  end
  @[Flags]
  enum CERT_EXIT_EVENT_MASK : UInt32
    EXITEVENT_CERTDENIED = 4_u32
    EXITEVENT_CERTISSUED = 1_u32
    EXITEVENT_CERTPENDING = 2_u32
    EXITEVENT_CERTRETRIEVEPENDING = 16_u32
    EXITEVENT_CERTREVOKED = 8_u32
    EXITEVENT_CRLISSUED = 32_u32
    EXITEVENT_SHUTDOWN = 64_u32
  end
  enum ADDED_CERT_TYPE : UInt32
    XECT_EXTENSION_V1 = 1_u32
    XECT_EXTENSION_V2 = 2_u32
  end
  enum CVRC_TABLE : UInt32
    CVRC_TABLE_ATTRIBUTES = 16384_u32
    CVRC_TABLE_CRL = 20480_u32
    CVRC_TABLE_EXTENSIONS = 12288_u32
    CVRC_TABLE_REQCERT = 0_u32
  end
  enum CERT_PROPERTY_TYPE : UInt32
    PROPTYPE_BINARY = 3_u32
    PROPTYPE_DATE = 2_u32
    PROPTYPE_LONG = 1_u32
    PROPTYPE_STRING = 4_u32
  end
  enum CERT_ALT_NAME : UInt32
    CERT_ALT_NAME_RFC822_NAME = 2_u32
    CERT_ALT_NAME_DNS_NAME = 3_u32
    CERT_ALT_NAME_URL = 7_u32
    CERT_ALT_NAME_REGISTERED_ID = 9_u32
    CERT_ALT_NAME_DIRECTORY_NAME = 5_u32
    CERT_ALT_NAME_IP_ADDRESS = 8_u32
    CERT_ALT_NAME_OTHER_NAME = 1_u32
  end
  enum CSBACKUP_TYPE : UInt32
    CSBACKUP_TYPE_FULL = 1_u32
    CSBACKUP_TYPE_LOGS_ONLY = 2_u32
  end
  enum XEKL_KEYSPEC : UInt32
    XEKL_KEYSPEC_KEYX = 1_u32
    XEKL_KEYSPEC_SIG = 2_u32
  end
  enum CERT_REQUEST_OUT_TYPE : UInt32
    CR_OUT_BASE64HEADER = 0_u32
    CR_OUT_BASE64 = 1_u32
    CR_OUT_BINARY = 2_u32
  end
  enum CERT_VIEW_SEEK_OPERATOR_FLAGS : UInt32
    CVR_SEEK_EQ = 1_u32
    CVR_SEEK_LE = 4_u32
    CVR_SEEK_LT = 2_u32
    CVR_SEEK_GE = 8_u32
    CVR_SEEK_GT = 16_u32
  end
  enum OCSPSigningFlag
    OCSP_SF_SILENT = 1_i32
    OCSP_SF_USE_CACERT = 2_i32
    OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4_i32
    OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8_i32
    OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16_i32
    OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32_i32
    OCSP_SF_RESPONDER_ID_KEYHASH = 64_i32
    OCSP_SF_RESPONDER_ID_NAME = 128_i32
    OCSP_SF_ALLOW_NONCE_EXTENSION = 256_i32
    OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512_i32
  end
  enum OCSPRequestFlag
    OCSP_RF_REJECT_SIGNED_REQUESTS = 1_i32
  end
  enum X509EnrollmentAuthFlags
    X509AuthNone = 0_i32
    X509AuthAnonymous = 1_i32
    X509AuthKerberos = 2_i32
    X509AuthUsername = 4_i32
    X509AuthCertificate = 8_i32
  end
  enum X509SCEPMessageType
    SCEPMessageUnknown = -1_i32
    SCEPMessageCertResponse = 3_i32
    SCEPMessagePKCSRequest = 19_i32
    SCEPMessageGetCertInitial = 20_i32
    SCEPMessageGetCert = 21_i32
    SCEPMessageGetCRL = 22_i32
    SCEPMessageClaimChallengeAnswer = 41_i32
  end
  enum X509SCEPDisposition
    SCEPDispositionUnknown = -1_i32
    SCEPDispositionSuccess = 0_i32
    SCEPDispositionFailure = 2_i32
    SCEPDispositionPending = 3_i32
    SCEPDispositionPendingChallenge = 11_i32
  end
  enum X509SCEPFailInfo
    SCEPFailUnknown = -1_i32
    SCEPFailBadAlgorithm = 0_i32
    SCEPFailBadMessageCheck = 1_i32
    SCEPFailBadRequest = 2_i32
    SCEPFailBadTime = 3_i32
    SCEPFailBadCertId = 4_i32
  end
  enum CERTENROLL_OBJECTID
    XCN_OID_NONE = 0_i32
    XCN_OID_RSA = 1_i32
    XCN_OID_PKCS = 2_i32
    XCN_OID_RSA_HASH = 3_i32
    XCN_OID_RSA_ENCRYPT = 4_i32
    XCN_OID_PKCS_1 = 5_i32
    XCN_OID_PKCS_2 = 6_i32
    XCN_OID_PKCS_3 = 7_i32
    XCN_OID_PKCS_4 = 8_i32
    XCN_OID_PKCS_5 = 9_i32
    XCN_OID_PKCS_6 = 10_i32
    XCN_OID_PKCS_7 = 11_i32
    XCN_OID_PKCS_8 = 12_i32
    XCN_OID_PKCS_9 = 13_i32
    XCN_OID_PKCS_10 = 14_i32
    XCN_OID_PKCS_12 = 15_i32
    XCN_OID_RSA_RSA = 16_i32
    XCN_OID_RSA_MD2RSA = 17_i32
    XCN_OID_RSA_MD4RSA = 18_i32
    XCN_OID_RSA_MD5RSA = 19_i32
    XCN_OID_RSA_SHA1RSA = 20_i32
    XCN_OID_RSA_SETOAEP_RSA = 21_i32
    XCN_OID_RSA_DH = 22_i32
    XCN_OID_RSA_data = 23_i32
    XCN_OID_RSA_signedData = 24_i32
    XCN_OID_RSA_envelopedData = 25_i32
    XCN_OID_RSA_signEnvData = 26_i32
    XCN_OID_RSA_digestedData = 27_i32
    XCN_OID_RSA_hashedData = 28_i32
    XCN_OID_RSA_encryptedData = 29_i32
    XCN_OID_RSA_emailAddr = 30_i32
    XCN_OID_RSA_unstructName = 31_i32
    XCN_OID_RSA_contentType = 32_i32
    XCN_OID_RSA_messageDigest = 33_i32
    XCN_OID_RSA_signingTime = 34_i32
    XCN_OID_RSA_counterSign = 35_i32
    XCN_OID_RSA_challengePwd = 36_i32
    XCN_OID_RSA_unstructAddr = 37_i32
    XCN_OID_RSA_extCertAttrs = 38_i32
    XCN_OID_RSA_certExtensions = 39_i32
    XCN_OID_RSA_SMIMECapabilities = 40_i32
    XCN_OID_RSA_preferSignedData = 41_i32
    XCN_OID_RSA_SMIMEalg = 42_i32
    XCN_OID_RSA_SMIMEalgESDH = 43_i32
    XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44_i32
    XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45_i32
    XCN_OID_RSA_MD2 = 46_i32
    XCN_OID_RSA_MD4 = 47_i32
    XCN_OID_RSA_MD5 = 48_i32
    XCN_OID_RSA_RC2CBC = 49_i32
    XCN_OID_RSA_RC4 = 50_i32
    XCN_OID_RSA_DES_EDE3_CBC = 51_i32
    XCN_OID_RSA_RC5_CBCPad = 52_i32
    XCN_OID_ANSI_X942 = 53_i32
    XCN_OID_ANSI_X942_DH = 54_i32
    XCN_OID_X957 = 55_i32
    XCN_OID_X957_DSA = 56_i32
    XCN_OID_X957_SHA1DSA = 57_i32
    XCN_OID_DS = 58_i32
    XCN_OID_DSALG = 59_i32
    XCN_OID_DSALG_CRPT = 60_i32
    XCN_OID_DSALG_HASH = 61_i32
    XCN_OID_DSALG_SIGN = 62_i32
    XCN_OID_DSALG_RSA = 63_i32
    XCN_OID_OIW = 64_i32
    XCN_OID_OIWSEC = 65_i32
    XCN_OID_OIWSEC_md4RSA = 66_i32
    XCN_OID_OIWSEC_md5RSA = 67_i32
    XCN_OID_OIWSEC_md4RSA2 = 68_i32
    XCN_OID_OIWSEC_desECB = 69_i32
    XCN_OID_OIWSEC_desCBC = 70_i32
    XCN_OID_OIWSEC_desOFB = 71_i32
    XCN_OID_OIWSEC_desCFB = 72_i32
    XCN_OID_OIWSEC_desMAC = 73_i32
    XCN_OID_OIWSEC_rsaSign = 74_i32
    XCN_OID_OIWSEC_dsa = 75_i32
    XCN_OID_OIWSEC_shaDSA = 76_i32
    XCN_OID_OIWSEC_mdc2RSA = 77_i32
    XCN_OID_OIWSEC_shaRSA = 78_i32
    XCN_OID_OIWSEC_dhCommMod = 79_i32
    XCN_OID_OIWSEC_desEDE = 80_i32
    XCN_OID_OIWSEC_sha = 81_i32
    XCN_OID_OIWSEC_mdc2 = 82_i32
    XCN_OID_OIWSEC_dsaComm = 83_i32
    XCN_OID_OIWSEC_dsaCommSHA = 84_i32
    XCN_OID_OIWSEC_rsaXchg = 85_i32
    XCN_OID_OIWSEC_keyHashSeal = 86_i32
    XCN_OID_OIWSEC_md2RSASign = 87_i32
    XCN_OID_OIWSEC_md5RSASign = 88_i32
    XCN_OID_OIWSEC_sha1 = 89_i32
    XCN_OID_OIWSEC_dsaSHA1 = 90_i32
    XCN_OID_OIWSEC_dsaCommSHA1 = 91_i32
    XCN_OID_OIWSEC_sha1RSASign = 92_i32
    XCN_OID_OIWDIR = 93_i32
    XCN_OID_OIWDIR_CRPT = 94_i32
    XCN_OID_OIWDIR_HASH = 95_i32
    XCN_OID_OIWDIR_SIGN = 96_i32
    XCN_OID_OIWDIR_md2 = 97_i32
    XCN_OID_OIWDIR_md2RSA = 98_i32
    XCN_OID_INFOSEC = 99_i32
    XCN_OID_INFOSEC_sdnsSignature = 100_i32
    XCN_OID_INFOSEC_mosaicSignature = 101_i32
    XCN_OID_INFOSEC_sdnsConfidentiality = 102_i32
    XCN_OID_INFOSEC_mosaicConfidentiality = 103_i32
    XCN_OID_INFOSEC_sdnsIntegrity = 104_i32
    XCN_OID_INFOSEC_mosaicIntegrity = 105_i32
    XCN_OID_INFOSEC_sdnsTokenProtection = 106_i32
    XCN_OID_INFOSEC_mosaicTokenProtection = 107_i32
    XCN_OID_INFOSEC_sdnsKeyManagement = 108_i32
    XCN_OID_INFOSEC_mosaicKeyManagement = 109_i32
    XCN_OID_INFOSEC_sdnsKMandSig = 110_i32
    XCN_OID_INFOSEC_mosaicKMandSig = 111_i32
    XCN_OID_INFOSEC_SuiteASignature = 112_i32
    XCN_OID_INFOSEC_SuiteAConfidentiality = 113_i32
    XCN_OID_INFOSEC_SuiteAIntegrity = 114_i32
    XCN_OID_INFOSEC_SuiteATokenProtection = 115_i32
    XCN_OID_INFOSEC_SuiteAKeyManagement = 116_i32
    XCN_OID_INFOSEC_SuiteAKMandSig = 117_i32
    XCN_OID_INFOSEC_mosaicUpdatedSig = 118_i32
    XCN_OID_INFOSEC_mosaicKMandUpdSig = 119_i32
    XCN_OID_INFOSEC_mosaicUpdatedInteg = 120_i32
    XCN_OID_COMMON_NAME = 121_i32
    XCN_OID_SUR_NAME = 122_i32
    XCN_OID_DEVICE_SERIAL_NUMBER = 123_i32
    XCN_OID_COUNTRY_NAME = 124_i32
    XCN_OID_LOCALITY_NAME = 125_i32
    XCN_OID_STATE_OR_PROVINCE_NAME = 126_i32
    XCN_OID_STREET_ADDRESS = 127_i32
    XCN_OID_ORGANIZATION_NAME = 128_i32
    XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129_i32
    XCN_OID_TITLE = 130_i32
    XCN_OID_DESCRIPTION = 131_i32
    XCN_OID_SEARCH_GUIDE = 132_i32
    XCN_OID_BUSINESS_CATEGORY = 133_i32
    XCN_OID_POSTAL_ADDRESS = 134_i32
    XCN_OID_POSTAL_CODE = 135_i32
    XCN_OID_POST_OFFICE_BOX = 136_i32
    XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137_i32
    XCN_OID_TELEPHONE_NUMBER = 138_i32
    XCN_OID_TELEX_NUMBER = 139_i32
    XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140_i32
    XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141_i32
    XCN_OID_X21_ADDRESS = 142_i32
    XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143_i32
    XCN_OID_REGISTERED_ADDRESS = 144_i32
    XCN_OID_DESTINATION_INDICATOR = 145_i32
    XCN_OID_PREFERRED_DELIVERY_METHOD = 146_i32
    XCN_OID_PRESENTATION_ADDRESS = 147_i32
    XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148_i32
    XCN_OID_MEMBER = 149_i32
    XCN_OID_OWNER = 150_i32
    XCN_OID_ROLE_OCCUPANT = 151_i32
    XCN_OID_SEE_ALSO = 152_i32
    XCN_OID_USER_PASSWORD = 153_i32
    XCN_OID_USER_CERTIFICATE = 154_i32
    XCN_OID_CA_CERTIFICATE = 155_i32
    XCN_OID_AUTHORITY_REVOCATION_LIST = 156_i32
    XCN_OID_CERTIFICATE_REVOCATION_LIST = 157_i32
    XCN_OID_CROSS_CERTIFICATE_PAIR = 158_i32
    XCN_OID_GIVEN_NAME = 159_i32
    XCN_OID_INITIALS = 160_i32
    XCN_OID_DN_QUALIFIER = 161_i32
    XCN_OID_DOMAIN_COMPONENT = 162_i32
    XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163_i32
    XCN_OID_PKCS_12_LOCAL_KEY_ID = 164_i32
    XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165_i32
    XCN_OID_LOCAL_MACHINE_KEYSET = 166_i32
    XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167_i32
    XCN_OID_KEYID_RDN = 168_i32
    XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169_i32
    XCN_OID_KEY_ATTRIBUTES = 170_i32
    XCN_OID_CERT_POLICIES_95 = 171_i32
    XCN_OID_KEY_USAGE_RESTRICTION = 172_i32
    XCN_OID_SUBJECT_ALT_NAME = 173_i32
    XCN_OID_ISSUER_ALT_NAME = 174_i32
    XCN_OID_BASIC_CONSTRAINTS = 175_i32
    XCN_OID_KEY_USAGE = 176_i32
    XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177_i32
    XCN_OID_BASIC_CONSTRAINTS2 = 178_i32
    XCN_OID_CERT_POLICIES = 179_i32
    XCN_OID_ANY_CERT_POLICY = 180_i32
    XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181_i32
    XCN_OID_SUBJECT_KEY_IDENTIFIER = 182_i32
    XCN_OID_SUBJECT_ALT_NAME2 = 183_i32
    XCN_OID_ISSUER_ALT_NAME2 = 184_i32
    XCN_OID_CRL_REASON_CODE = 185_i32
    XCN_OID_REASON_CODE_HOLD = 186_i32
    XCN_OID_CRL_DIST_POINTS = 187_i32
    XCN_OID_ENHANCED_KEY_USAGE = 188_i32
    XCN_OID_CRL_NUMBER = 189_i32
    XCN_OID_DELTA_CRL_INDICATOR = 190_i32
    XCN_OID_ISSUING_DIST_POINT = 191_i32
    XCN_OID_FRESHEST_CRL = 192_i32
    XCN_OID_NAME_CONSTRAINTS = 193_i32
    XCN_OID_POLICY_MAPPINGS = 194_i32
    XCN_OID_LEGACY_POLICY_MAPPINGS = 195_i32
    XCN_OID_POLICY_CONSTRAINTS = 196_i32
    XCN_OID_RENEWAL_CERTIFICATE = 197_i32
    XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198_i32
    XCN_OID_ENROLLMENT_CSP_PROVIDER = 199_i32
    XCN_OID_OS_VERSION = 200_i32
    XCN_OID_ENROLLMENT_AGENT = 201_i32
    XCN_OID_PKIX = 202_i32
    XCN_OID_PKIX_PE = 203_i32
    XCN_OID_AUTHORITY_INFO_ACCESS = 204_i32
    XCN_OID_BIOMETRIC_EXT = 205_i32
    XCN_OID_LOGOTYPE_EXT = 206_i32
    XCN_OID_CERT_EXTENSIONS = 207_i32
    XCN_OID_NEXT_UPDATE_LOCATION = 208_i32
    XCN_OID_REMOVE_CERTIFICATE = 209_i32
    XCN_OID_CROSS_CERT_DIST_POINTS = 210_i32
    XCN_OID_CTL = 211_i32
    XCN_OID_SORTED_CTL = 212_i32
    XCN_OID_SERIALIZED = 213_i32
    XCN_OID_NT_PRINCIPAL_NAME = 214_i32
    XCN_OID_PRODUCT_UPDATE = 215_i32
    XCN_OID_ANY_APPLICATION_POLICY = 216_i32
    XCN_OID_AUTO_ENROLL_CTL_USAGE = 217_i32
    XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218_i32
    XCN_OID_CERT_MANIFOLD = 219_i32
    XCN_OID_CERTSRV_CA_VERSION = 220_i32
    XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221_i32
    XCN_OID_CRL_VIRTUAL_BASE = 222_i32
    XCN_OID_CRL_NEXT_PUBLISH = 223_i32
    XCN_OID_KP_CA_EXCHANGE = 224_i32
    XCN_OID_KP_KEY_RECOVERY_AGENT = 225_i32
    XCN_OID_CERTIFICATE_TEMPLATE = 226_i32
    XCN_OID_ENTERPRISE_OID_ROOT = 227_i32
    XCN_OID_RDN_DUMMY_SIGNER = 228_i32
    XCN_OID_APPLICATION_CERT_POLICIES = 229_i32
    XCN_OID_APPLICATION_POLICY_MAPPINGS = 230_i32
    XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231_i32
    XCN_OID_ARCHIVED_KEY_ATTR = 232_i32
    XCN_OID_CRL_SELF_CDP = 233_i32
    XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234_i32
    XCN_OID_ARCHIVED_KEY_CERT_HASH = 235_i32
    XCN_OID_ISSUED_CERT_HASH = 236_i32
    XCN_OID_DS_EMAIL_REPLICATION = 237_i32
    XCN_OID_REQUEST_CLIENT_INFO = 238_i32
    XCN_OID_ENCRYPTED_KEY_HASH = 239_i32
    XCN_OID_CERTSRV_CROSSCA_VERSION = 240_i32
    XCN_OID_NTDS_REPLICATION = 241_i32
    XCN_OID_SUBJECT_DIR_ATTRS = 242_i32
    XCN_OID_PKIX_KP = 243_i32
    XCN_OID_PKIX_KP_SERVER_AUTH = 244_i32
    XCN_OID_PKIX_KP_CLIENT_AUTH = 245_i32
    XCN_OID_PKIX_KP_CODE_SIGNING = 246_i32
    XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247_i32
    XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248_i32
    XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249_i32
    XCN_OID_PKIX_KP_IPSEC_USER = 250_i32
    XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251_i32
    XCN_OID_PKIX_KP_OCSP_SIGNING = 252_i32
    XCN_OID_PKIX_OCSP_NOCHECK = 253_i32
    XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254_i32
    XCN_OID_KP_CTL_USAGE_SIGNING = 255_i32
    XCN_OID_KP_TIME_STAMP_SIGNING = 256_i32
    XCN_OID_SERVER_GATED_CRYPTO = 257_i32
    XCN_OID_SGC_NETSCAPE = 258_i32
    XCN_OID_KP_EFS = 259_i32
    XCN_OID_EFS_RECOVERY = 260_i32
    XCN_OID_WHQL_CRYPTO = 261_i32
    XCN_OID_NT5_CRYPTO = 262_i32
    XCN_OID_OEM_WHQL_CRYPTO = 263_i32
    XCN_OID_EMBEDDED_NT_CRYPTO = 264_i32
    XCN_OID_ROOT_LIST_SIGNER = 265_i32
    XCN_OID_KP_QUALIFIED_SUBORDINATION = 266_i32
    XCN_OID_KP_KEY_RECOVERY = 267_i32
    XCN_OID_KP_DOCUMENT_SIGNING = 268_i32
    XCN_OID_KP_LIFETIME_SIGNING = 269_i32
    XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270_i32
    XCN_OID_KP_SMART_DISPLAY = 271_i32
    XCN_OID_KP_CSP_SIGNATURE = 272_i32
    XCN_OID_DRM = 273_i32
    XCN_OID_DRM_INDIVIDUALIZATION = 274_i32
    XCN_OID_LICENSES = 275_i32
    XCN_OID_LICENSE_SERVER = 276_i32
    XCN_OID_KP_SMARTCARD_LOGON = 277_i32
    XCN_OID_YESNO_TRUST_ATTR = 278_i32
    XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279_i32
    XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280_i32
    XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281_i32
    XCN_OID_PKIX_ACC_DESCR = 282_i32
    XCN_OID_PKIX_OCSP = 283_i32
    XCN_OID_PKIX_CA_ISSUERS = 284_i32
    XCN_OID_VERISIGN_PRIVATE_6_9 = 285_i32
    XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286_i32
    XCN_OID_VERISIGN_BITSTRING_6_13 = 287_i32
    XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288_i32
    XCN_OID_NETSCAPE = 289_i32
    XCN_OID_NETSCAPE_CERT_EXTENSION = 290_i32
    XCN_OID_NETSCAPE_CERT_TYPE = 291_i32
    XCN_OID_NETSCAPE_BASE_URL = 292_i32
    XCN_OID_NETSCAPE_REVOCATION_URL = 293_i32
    XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294_i32
    XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295_i32
    XCN_OID_NETSCAPE_CA_POLICY_URL = 296_i32
    XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297_i32
    XCN_OID_NETSCAPE_COMMENT = 298_i32
    XCN_OID_NETSCAPE_DATA_TYPE = 299_i32
    XCN_OID_NETSCAPE_CERT_SEQUENCE = 300_i32
    XCN_OID_CT_PKI_DATA = 301_i32
    XCN_OID_CT_PKI_RESPONSE = 302_i32
    XCN_OID_PKIX_NO_SIGNATURE = 303_i32
    XCN_OID_CMC = 304_i32
    XCN_OID_CMC_STATUS_INFO = 305_i32
    XCN_OID_CMC_IDENTIFICATION = 306_i32
    XCN_OID_CMC_IDENTITY_PROOF = 307_i32
    XCN_OID_CMC_DATA_RETURN = 308_i32
    XCN_OID_CMC_TRANSACTION_ID = 309_i32
    XCN_OID_CMC_SENDER_NONCE = 310_i32
    XCN_OID_CMC_RECIPIENT_NONCE = 311_i32
    XCN_OID_CMC_ADD_EXTENSIONS = 312_i32
    XCN_OID_CMC_ENCRYPTED_POP = 313_i32
    XCN_OID_CMC_DECRYPTED_POP = 314_i32
    XCN_OID_CMC_LRA_POP_WITNESS = 315_i32
    XCN_OID_CMC_GET_CERT = 316_i32
    XCN_OID_CMC_GET_CRL = 317_i32
    XCN_OID_CMC_REVOKE_REQUEST = 318_i32
    XCN_OID_CMC_REG_INFO = 319_i32
    XCN_OID_CMC_RESPONSE_INFO = 320_i32
    XCN_OID_CMC_QUERY_PENDING = 321_i32
    XCN_OID_CMC_ID_POP_LINK_RANDOM = 322_i32
    XCN_OID_CMC_ID_POP_LINK_WITNESS = 323_i32
    XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324_i32
    XCN_OID_CMC_ADD_ATTRIBUTES = 325_i32
    XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326_i32
    XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327_i32
    XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328_i32
    XCN_OID_PKCS_7_DATA = 329_i32
    XCN_OID_PKCS_7_SIGNED = 330_i32
    XCN_OID_PKCS_7_ENVELOPED = 331_i32
    XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332_i32
    XCN_OID_PKCS_7_DIGESTED = 333_i32
    XCN_OID_PKCS_7_ENCRYPTED = 334_i32
    XCN_OID_PKCS_9_CONTENT_TYPE = 335_i32
    XCN_OID_PKCS_9_MESSAGE_DIGEST = 336_i32
    XCN_OID_CERT_PROP_ID_PREFIX = 337_i32
    XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338_i32
    XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339_i32
    XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340_i32
    XCN_OID_CERT_MD5_HASH_PROP_ID = 341_i32
    XCN_OID_RSA_SHA256RSA = 342_i32
    XCN_OID_RSA_SHA384RSA = 343_i32
    XCN_OID_RSA_SHA512RSA = 344_i32
    XCN_OID_NIST_sha256 = 345_i32
    XCN_OID_NIST_sha384 = 346_i32
    XCN_OID_NIST_sha512 = 347_i32
    XCN_OID_RSA_MGF1 = 348_i32
    XCN_OID_ECC_PUBLIC_KEY = 349_i32
    XCN_OID_ECDSA_SHA1 = 350_i32
    XCN_OID_ECDSA_SPECIFIED = 351_i32
    XCN_OID_ANY_ENHANCED_KEY_USAGE = 352_i32
    XCN_OID_RSA_SSA_PSS = 353_i32
    XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355_i32
    XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356_i32
    XCN_OID_ATTR_TPM_SPECIFICATION = 357_i32
    XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358_i32
    XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359_i32
    XCN_OID_CERT_STRONG_KEY_OS_1 = 360_i32
    XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361_i32
    XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362_i32
    XCN_OID_CERT_STRONG_SIGN_OS_1 = 363_i32
    XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364_i32
    XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365_i32
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366_i32
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367_i32
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368_i32
    XCN_OID_DISALLOWED_HASH = 369_i32
    XCN_OID_DISALLOWED_LIST = 370_i32
    XCN_OID_ECC_CURVE_P256 = 371_i32
    XCN_OID_ECC_CURVE_P384 = 372_i32
    XCN_OID_ECC_CURVE_P521 = 373_i32
    XCN_OID_ECDSA_SHA256 = 374_i32
    XCN_OID_ECDSA_SHA384 = 375_i32
    XCN_OID_ECDSA_SHA512 = 376_i32
    XCN_OID_ENROLL_CAXCHGCERT_HASH = 377_i32
    XCN_OID_ENROLL_EK_INFO = 378_i32
    XCN_OID_ENROLL_EKPUB_CHALLENGE = 379_i32
    XCN_OID_ENROLL_EKVERIFYCERT = 380_i32
    XCN_OID_ENROLL_EKVERIFYCREDS = 381_i32
    XCN_OID_ENROLL_EKVERIFYKEY = 382_i32
    XCN_OID_EV_RDN_COUNTRY = 383_i32
    XCN_OID_EV_RDN_LOCALE = 384_i32
    XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385_i32
    XCN_OID_INHIBIT_ANY_POLICY = 386_i32
    XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387_i32
    XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388_i32
    XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389_i32
    XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390_i32
    XCN_OID_KP_TPM_AIK_CERTIFICATE = 391_i32
    XCN_OID_KP_TPM_EK_CERTIFICATE = 392_i32
    XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393_i32
    XCN_OID_NIST_AES128_CBC = 394_i32
    XCN_OID_NIST_AES128_WRAP = 395_i32
    XCN_OID_NIST_AES192_CBC = 396_i32
    XCN_OID_NIST_AES192_WRAP = 397_i32
    XCN_OID_NIST_AES256_CBC = 398_i32
    XCN_OID_NIST_AES256_WRAP = 399_i32
    XCN_OID_PKCS_12_PbeIds = 400_i32
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401_i32
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402_i32
    XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403_i32
    XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404_i32
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405_i32
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406_i32
    XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407_i32
    XCN_OID_PKINIT_KP_KDC = 408_i32
    XCN_OID_PKIX_CA_REPOSITORY = 409_i32
    XCN_OID_PKIX_OCSP_NONCE = 410_i32
    XCN_OID_PKIX_TIME_STAMPING = 411_i32
    XCN_OID_QC_EU_COMPLIANCE = 412_i32
    XCN_OID_QC_SSCD = 413_i32
    XCN_OID_QC_STATEMENTS_EXT = 414_i32
    XCN_OID_RDN_TPM_MANUFACTURER = 415_i32
    XCN_OID_RDN_TPM_MODEL = 416_i32
    XCN_OID_RDN_TPM_VERSION = 417_i32
    XCN_OID_REVOKED_LIST_SIGNER = 418_i32
    XCN_OID_RFC3161_counterSign = 419_i32
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420_i32
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421_i32
    XCN_OID_ROOT_PROGRAM_FLAGS = 422_i32
    XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423_i32
    XCN_OID_RSA_PSPECIFIED = 424_i32
    XCN_OID_RSAES_OAEP = 425_i32
    XCN_OID_SUBJECT_INFO_ACCESS = 426_i32
    XCN_OID_TIMESTAMP_TOKEN = 427_i32
    XCN_OID_ENROLL_SCEP_ERROR = 428_i32
    XCN_OIDVerisign_MessageType = 429_i32
    XCN_OIDVerisign_PkiStatus = 430_i32
    XCN_OIDVerisign_FailInfo = 431_i32
    XCN_OIDVerisign_SenderNonce = 432_i32
    XCN_OIDVerisign_RecipientNonce = 433_i32
    XCN_OIDVerisign_TransactionID = 434_i32
    XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435_i32
    XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436_i32
    XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437_i32
    XCN_OID_ENROLL_KSP_NAME = 438_i32
  end
  enum WebSecurityLevel
    LevelUnsafe = 0_i32
    LevelSafe = 1_i32
  end
  enum EncodingType
    XCN_CRYPT_STRING_BASE64HEADER = 0_i32
    XCN_CRYPT_STRING_BASE64 = 1_i32
    XCN_CRYPT_STRING_BINARY = 2_i32
    XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3_i32
    XCN_CRYPT_STRING_HEX = 4_i32
    XCN_CRYPT_STRING_HEXASCII = 5_i32
    XCN_CRYPT_STRING_BASE64_ANY = 6_i32
    XCN_CRYPT_STRING_ANY = 7_i32
    XCN_CRYPT_STRING_HEX_ANY = 8_i32
    XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9_i32
    XCN_CRYPT_STRING_HEXADDR = 10_i32
    XCN_CRYPT_STRING_HEXASCIIADDR = 11_i32
    XCN_CRYPT_STRING_HEXRAW = 12_i32
    XCN_CRYPT_STRING_BASE64URI = 13_i32
    XCN_CRYPT_STRING_ENCODEMASK = 255_i32
    XCN_CRYPT_STRING_CHAIN = 256_i32
    XCN_CRYPT_STRING_TEXT = 512_i32
    XCN_CRYPT_STRING_PERCENTESCAPE = 134217728_i32
    XCN_CRYPT_STRING_HASHDATA = 268435456_i32
    XCN_CRYPT_STRING_STRICT = 536870912_i32
    XCN_CRYPT_STRING_NOCRLF = 1073741824_i32
    XCN_CRYPT_STRING_NOCR = -2147483648_i32
  end
  enum PFXExportOptions
    PFXExportEEOnly = 0_i32
    PFXExportChainNoRoot = 1_i32
    PFXExportChainWithRoot = 2_i32
  end
  enum ObjectIdGroupId
    XCN_CRYPT_ANY_GROUP_ID = 0_i32
    XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1_i32
    XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2_i32
    XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3_i32
    XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4_i32
    XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5_i32
    XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6_i32
    XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7_i32
    XCN_CRYPT_POLICY_OID_GROUP_ID = 8_i32
    XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9_i32
    XCN_CRYPT_KDF_OID_GROUP_ID = 10_i32
    XCN_CRYPT_LAST_OID_GROUP_ID = 10_i32
    XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1_i32
    XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4_i32
    XCN_CRYPT_GROUP_ID_MASK = 65535_i32
    XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824_i32
    XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = -2147483648_i32
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920_i32
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16_i32
    XCN_CRYPT_KEY_LENGTH_MASK = 268369920_i32
  end
  enum ObjectIdPublicKeyFlags
    XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0_i32
    XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = -2147483648_i32
    XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824_i32
  end
  enum AlgorithmFlags
    AlgorithmFlagsNone = 0_i32
    AlgorithmFlagsWrap = 1_i32
  end
  enum X500NameFlags
    XCN_CERT_NAME_STR_NONE = 0_i32
    XCN_CERT_SIMPLE_NAME_STR = 1_i32
    XCN_CERT_OID_NAME_STR = 2_i32
    XCN_CERT_X500_NAME_STR = 3_i32
    XCN_CERT_XML_NAME_STR = 4_i32
    XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824_i32
    XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912_i32
    XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456_i32
    XCN_CERT_NAME_STR_CRLF_FLAG = 134217728_i32
    XCN_CERT_NAME_STR_COMMA_FLAG = 67108864_i32
    XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432_i32
    XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216_i32
    XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416_i32
    XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536_i32
    XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072_i32
    XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144_i32
    XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288_i32
    XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576_i32
    XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152_i32
    XCN_CERT_NAME_STR_DS_ESCAPED = 8388608_i32
  end
  enum X509CertificateEnrollmentContext
    ContextNone = 0_i32
    ContextUser = 1_i32
    ContextMachine = 2_i32
    ContextAdministratorForceMachine = 3_i32
  end
  enum EnrollmentEnrollStatus
    Enrolled = 1_i32
    EnrollPended = 2_i32
    EnrollUIDeferredEnrollmentRequired = 4_i32
    EnrollError = 16_i32
    EnrollUnknown = 32_i32
    EnrollSkipped = 64_i32
    EnrollDenied = 256_i32
  end
  enum EnrollmentSelectionStatus
    SelectedNo = 0_i32
    SelectedYes = 1_i32
  end
  enum EnrollmentDisplayStatus
    DisplayNo = 0_i32
    DisplayYes = 1_i32
  end
  enum X509ProviderType
    XCN_PROV_NONE = 0_i32
    XCN_PROV_RSA_FULL = 1_i32
    XCN_PROV_RSA_SIG = 2_i32
    XCN_PROV_DSS = 3_i32
    XCN_PROV_FORTEZZA = 4_i32
    XCN_PROV_MS_EXCHANGE = 5_i32
    XCN_PROV_SSL = 6_i32
    XCN_PROV_RSA_SCHANNEL = 12_i32
    XCN_PROV_DSS_DH = 13_i32
    XCN_PROV_EC_ECDSA_SIG = 14_i32
    XCN_PROV_EC_ECNRA_SIG = 15_i32
    XCN_PROV_EC_ECDSA_FULL = 16_i32
    XCN_PROV_EC_ECNRA_FULL = 17_i32
    XCN_PROV_DH_SCHANNEL = 18_i32
    XCN_PROV_SPYRUS_LYNKS = 20_i32
    XCN_PROV_RNG = 21_i32
    XCN_PROV_INTEL_SEC = 22_i32
    XCN_PROV_REPLACE_OWF = 23_i32
    XCN_PROV_RSA_AES = 24_i32
  end
  enum AlgorithmType
    XCN_BCRYPT_UNKNOWN_INTERFACE = 0_i32
    XCN_BCRYPT_CIPHER_INTERFACE = 1_i32
    XCN_BCRYPT_HASH_INTERFACE = 2_i32
    XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3_i32
    XCN_BCRYPT_SIGNATURE_INTERFACE = 5_i32
    XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4_i32
    XCN_BCRYPT_RNG_INTERFACE = 6_i32
    XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7_i32
  end
  enum AlgorithmOperationFlags
    XCN_NCRYPT_NO_OPERATION = 0_i32
    XCN_NCRYPT_CIPHER_OPERATION = 1_i32
    XCN_NCRYPT_HASH_OPERATION = 2_i32
    XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4_i32
    XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8_i32
    XCN_NCRYPT_SIGNATURE_OPERATION = 16_i32
    XCN_NCRYPT_RNG_OPERATION = 32_i32
    XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64_i32
    XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28_i32
    XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152_i32
    XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304_i32
    XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608_i32
    XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064_i32
  end
  enum X509KeySpec
    XCN_AT_NONE = 0_i32
    XCN_AT_KEYEXCHANGE = 1_i32
    XCN_AT_SIGNATURE = 2_i32
  end
  enum KeyIdentifierHashAlgorithm
    SKIHashDefault = 0_i32
    SKIHashSha1 = 1_i32
    SKIHashCapiSha1 = 2_i32
    SKIHashSha256 = 3_i32
    SKIHashHPKP = 5_i32
  end
  enum X509PrivateKeyExportFlags
    XCN_NCRYPT_ALLOW_EXPORT_NONE = 0_i32
    XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1_i32
    XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2_i32
    XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4_i32
    XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8_i32
  end
  enum X509PrivateKeyUsageFlags
    XCN_NCRYPT_ALLOW_USAGES_NONE = 0_i32
    XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1_i32
    XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2_i32
    XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4_i32
    XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8_i32
    XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215_i32
  end
  enum X509PrivateKeyProtection
    XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0_i32
    XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1_i32
    XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2_i32
    XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4_i32
    XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8_i32
  end
  enum X509PrivateKeyVerify
    VerifyNone = 0_i32
    VerifySilent = 1_i32
    VerifySmartCardNone = 2_i32
    VerifySmartCardSilent = 3_i32
    VerifyAllowUI = 4_i32
  end
  enum X509HardwareKeyUsageFlags
    XCN_NCRYPT_PCP_NONE = 0_i32
    XCN_NCRYPT_TPM12_PROVIDER = 65536_i32
    XCN_NCRYPT_PCP_SIGNATURE_KEY = 1_i32
    XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2_i32
    XCN_NCRYPT_PCP_GENERIC_KEY = 3_i32
    XCN_NCRYPT_PCP_STORAGE_KEY = 4_i32
    XCN_NCRYPT_PCP_IDENTITY_KEY = 8_i32
  end
  enum X509KeyParametersExportType
    XCN_CRYPT_OID_USE_CURVE_NONE = 0_i32
    XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912_i32
    XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456_i32
  end
  enum X509KeyUsageFlags
    XCN_CERT_NO_KEY_USAGE = 0_i32
    XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128_i32
    XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64_i32
    XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32_i32
    XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16_i32
    XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8_i32
    XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4_i32
    XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2_i32
    XCN_CERT_CRL_SIGN_KEY_USAGE = 2_i32
    XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1_i32
    XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768_i32
  end
  enum AlternativeNameType
    XCN_CERT_ALT_NAME_UNKNOWN = 0_i32
    XCN_CERT_ALT_NAME_OTHER_NAME = 1_i32
    XCN_CERT_ALT_NAME_RFC822_NAME = 2_i32
    XCN_CERT_ALT_NAME_DNS_NAME = 3_i32
    XCN_CERT_ALT_NAME_X400_ADDRESS = 4_i32
    XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5_i32
    XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6_i32
    XCN_CERT_ALT_NAME_URL = 7_i32
    XCN_CERT_ALT_NAME_IP_ADDRESS = 8_i32
    XCN_CERT_ALT_NAME_REGISTERED_ID = 9_i32
    XCN_CERT_ALT_NAME_GUID = 10_i32
    XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11_i32
  end
  enum PolicyQualifierType
    PolicyQualifierTypeUnknown = 0_i32
    PolicyQualifierTypeUrl = 1_i32
    PolicyQualifierTypeUserNotice = 2_i32
    PolicyQualifierTypeFlags = 3_i32
  end
  enum RequestClientInfoClientId
    ClientIdNone = 0_i32
    ClientIdXEnroll2003 = 1_i32
    ClientIdAutoEnroll2003 = 2_i32
    ClientIdWizard2003 = 3_i32
    ClientIdCertReq2003 = 4_i32
    ClientIdDefaultRequest = 5_i32
    ClientIdAutoEnroll = 6_i32
    ClientIdRequestWizard = 7_i32
    ClientIdEOBO = 8_i32
    ClientIdCertReq = 9_i32
    ClientIdTest = 10_i32
    ClientIdWinRT = 11_i32
    ClientIdUserStart = 1000_i32
  end
  enum CERTENROLL_PROPERTYID
    XCN_PROPERTYID_NONE = 0_i32
    XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1_i32
    XCN_CERT_KEY_PROV_INFO_PROP_ID = 2_i32
    XCN_CERT_SHA1_HASH_PROP_ID = 3_i32
    XCN_CERT_MD5_HASH_PROP_ID = 4_i32
    XCN_CERT_HASH_PROP_ID = 3_i32
    XCN_CERT_KEY_CONTEXT_PROP_ID = 5_i32
    XCN_CERT_KEY_SPEC_PROP_ID = 6_i32
    XCN_CERT_IE30_RESERVED_PROP_ID = 7_i32
    XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8_i32
    XCN_CERT_ENHKEY_USAGE_PROP_ID = 9_i32
    XCN_CERT_CTL_USAGE_PROP_ID = 9_i32
    XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10_i32
    XCN_CERT_FRIENDLY_NAME_PROP_ID = 11_i32
    XCN_CERT_PVK_FILE_PROP_ID = 12_i32
    XCN_CERT_DESCRIPTION_PROP_ID = 13_i32
    XCN_CERT_ACCESS_STATE_PROP_ID = 14_i32
    XCN_CERT_SIGNATURE_HASH_PROP_ID = 15_i32
    XCN_CERT_SMART_CARD_DATA_PROP_ID = 16_i32
    XCN_CERT_EFS_PROP_ID = 17_i32
    XCN_CERT_FORTEZZA_DATA_PROP_ID = 18_i32
    XCN_CERT_ARCHIVED_PROP_ID = 19_i32
    XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20_i32
    XCN_CERT_AUTO_ENROLL_PROP_ID = 21_i32
    XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22_i32
    XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23_i32
    XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24_i32
    XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25_i32
    XCN_CERT_ENROLLMENT_PROP_ID = 26_i32
    XCN_CERT_DATE_STAMP_PROP_ID = 27_i32
    XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28_i32
    XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29_i32
    XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30_i32
    XCN_CERT_RENEWAL_PROP_ID = 64_i32
    XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65_i32
    XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66_i32
    XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67_i32
    XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68_i32
    XCN_CERT_BACKED_UP_PROP_ID = 69_i32
    XCN_CERT_OCSP_RESPONSE_PROP_ID = 70_i32
    XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71_i32
    XCN_CERT_SOURCE_LOCATION_PROP_ID = 72_i32
    XCN_CERT_SOURCE_URL_PROP_ID = 73_i32
    XCN_CERT_NEW_KEY_PROP_ID = 74_i32
    XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75_i32
    XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76_i32
    XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77_i32
    XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78_i32
    XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79_i32
    XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80_i32
    XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81_i32
    XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82_i32
    XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83_i32
    XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84_i32
    XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85_i32
    XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86_i32
    XCN_CERT_CEP_PROP_ID = 87_i32
    XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89_i32
    XCN_CERT_SCARD_PIN_ID_PROP_ID = 90_i32
    XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91_i32
    XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92_i32
    XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93_i32
    XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94_i32
    XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95_i32
    XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96_i32
    XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97_i32
    XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98_i32
    XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99_i32
    XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100_i32
    XCN_CERT_SMART_CARD_READER_PROP_ID = 101_i32
    XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102_i32
    XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103_i32
    XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104_i32
    XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105_i32
    XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106_i32
    XCN_CERT_SHA256_HASH_PROP_ID = 107_i32
    XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108_i32
    XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109_i32
    XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110_i32
    XCN_CERT_SCEP_CA_CERT_PROP_ID = 111_i32
    XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112_i32
    XCN_CERT_SCEP_NONCE_PROP_ID = 113_i32
    XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114_i32
    XCN_CERT_SCEP_FLAGS_PROP_ID = 115_i32
    XCN_CERT_SCEP_GUID_PROP_ID = 116_i32
    XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117_i32
    XCN_CERT_ISOLATED_KEY_PROP_ID = 118_i32
    XCN_CERT_SERIAL_CHAIN_PROP_ID = 119_i32
    XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120_i32
    XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122_i32
    XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123_i32
    XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124_i32
    XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125_i32
    XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126_i32
    XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127_i32
    XCN_CERT_FIRST_RESERVED_PROP_ID = 128_i32
    XCN_CERT_LAST_RESERVED_PROP_ID = 32767_i32
    XCN_CERT_FIRST_USER_PROP_ID = 32768_i32
    XCN_CERT_LAST_USER_PROP_ID = 65535_i32
    XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096_i32
  end
  enum EnrollmentPolicyServerPropertyFlags
    DefaultNone = 0_i32
    DefaultPolicyServer = 1_i32
  end
  enum PolicyServerUrlFlags
    PsfNone = 0_i32
    PsfLocationGroupPolicy = 1_i32
    PsfLocationRegistry = 2_i32
    PsfUseClientId = 4_i32
    PsfAutoEnrollmentEnabled = 16_i32
    PsfAllowUnTrustedCA = 32_i32
  end
  enum EnrollmentTemplateProperty
    TemplatePropCommonName = 1_i32
    TemplatePropFriendlyName = 2_i32
    TemplatePropEKUs = 3_i32
    TemplatePropCryptoProviders = 4_i32
    TemplatePropMajorRevision = 5_i32
    TemplatePropDescription = 6_i32
    TemplatePropKeySpec = 7_i32
    TemplatePropSchemaVersion = 8_i32
    TemplatePropMinorRevision = 9_i32
    TemplatePropRASignatureCount = 10_i32
    TemplatePropMinimumKeySize = 11_i32
    TemplatePropOID = 12_i32
    TemplatePropSupersede = 13_i32
    TemplatePropRACertificatePolicies = 14_i32
    TemplatePropRAEKUs = 15_i32
    TemplatePropCertificatePolicies = 16_i32
    TemplatePropV1ApplicationPolicy = 17_i32
    TemplatePropAsymmetricAlgorithm = 18_i32
    TemplatePropKeySecurityDescriptor = 19_i32
    TemplatePropSymmetricAlgorithm = 20_i32
    TemplatePropSymmetricKeyLength = 21_i32
    TemplatePropHashAlgorithm = 22_i32
    TemplatePropKeyUsage = 23_i32
    TemplatePropEnrollmentFlags = 24_i32
    TemplatePropSubjectNameFlags = 25_i32
    TemplatePropPrivateKeyFlags = 26_i32
    TemplatePropGeneralFlags = 27_i32
    TemplatePropSecurityDescriptor = 28_i32
    TemplatePropExtensions = 29_i32
    TemplatePropValidityPeriod = 30_i32
    TemplatePropRenewalPeriod = 31_i32
  end
  enum CommitTemplateFlags
    CommitFlagSaveTemplateGenerateOID = 1_i32
    CommitFlagSaveTemplateUseCurrentOID = 2_i32
    CommitFlagSaveTemplateOverwrite = 3_i32
    CommitFlagDeleteTemplate = 4_i32
  end
  enum EnrollmentCAProperty
    CAPropCommonName = 1_i32
    CAPropDistinguishedName = 2_i32
    CAPropSanitizedName = 3_i32
    CAPropSanitizedShortName = 4_i32
    CAPropDNSName = 5_i32
    CAPropCertificateTypes = 6_i32
    CAPropCertificate = 7_i32
    CAPropDescription = 8_i32
    CAPropWebServers = 9_i32
    CAPropSiteName = 10_i32
    CAPropSecurity = 11_i32
    CAPropRenewalOnly = 12_i32
  end
  enum X509EnrollmentPolicyLoadOption
    LoadOptionDefault = 0_i32
    LoadOptionCacheOnly = 1_i32
    LoadOptionReload = 2_i32
    LoadOptionRegisterForADChanges = 4_i32
  end
  enum EnrollmentPolicyFlags
    DisableGroupPolicyList = 2_i32
    DisableUserServerList = 4_i32
  end
  enum PolicyServerUrlPropertyID
    PsPolicyID = 0_i32
    PsFriendlyName = 1_i32
  end
  enum X509EnrollmentPolicyExportFlags
    ExportTemplates = 1_i32
    ExportOIDs = 2_i32
    ExportCAs = 4_i32
  end
  enum X509RequestType
    TypeAny = 0_i32
    TypePkcs10 = 1_i32
    TypePkcs7 = 2_i32
    TypeCmc = 3_i32
    TypeCertificate = 4_i32
  end
  enum X509RequestInheritOptions
    InheritDefault = 0_i32
    InheritNewDefaultKey = 1_i32
    InheritNewSimilarKey = 2_i32
    InheritPrivateKey = 3_i32
    InheritPublicKey = 4_i32
    InheritKeyMask = 15_i32
    InheritNone = 16_i32
    InheritRenewalCertificateFlag = 32_i32
    InheritTemplateFlag = 64_i32
    InheritSubjectFlag = 128_i32
    InheritExtensionsFlag = 256_i32
    InheritSubjectAltNameFlag = 512_i32
    InheritValidityPeriodFlag = 1024_i32
    InheritReserved80000000 = -2147483648_i32
  end
  enum InnerRequestLevel
    LevelInnermost = 0_i32
    LevelNext = 1_i32
  end
  enum Pkcs10AllowedSignatureTypes
    AllowedKeySignature = 1_i32
    AllowedNullSignature = 2_i32
  end
  enum KeyAttestationClaimType
    XCN_NCRYPT_CLAIM_NONE = 0_i32
    XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3_i32
    XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1_i32
    XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2_i32
    XCN_NCRYPT_CLAIM_UNKNOWN = 4096_i32
  end
  enum InstallResponseRestrictionFlags
    AllowNone = 0_i32
    AllowNoOutstandingRequest = 1_i32
    AllowUntrustedCertificate = 2_i32
    AllowUntrustedRoot = 4_i32
  end
  enum WebEnrollmentFlags
    EnrollPrompt = 1_i32
  end
  enum CRLRevocationReason
    XCN_CRL_REASON_UNSPECIFIED = 0_i32
    XCN_CRL_REASON_KEY_COMPROMISE = 1_i32
    XCN_CRL_REASON_CA_COMPROMISE = 2_i32
    XCN_CRL_REASON_AFFILIATION_CHANGED = 3_i32
    XCN_CRL_REASON_SUPERSEDED = 4_i32
    XCN_CRL_REASON_CESSATION_OF_OPERATION = 5_i32
    XCN_CRL_REASON_CERTIFICATE_HOLD = 6_i32
    XCN_CRL_REASON_REMOVE_FROM_CRL = 8_i32
    XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9_i32
    XCN_CRL_REASON_AA_COMPROMISE = 10_i32
  end
  enum X509SCEPProcessMessageFlags
    SCEPProcessDefault = 0_i32
    SCEPProcessSkipCertInstall = 1_i32
  end
  enum DelayRetryAction
    DelayRetryUnknown = 0_i32
    DelayRetryNone = 1_i32
    DelayRetryShort = 2_i32
    DelayRetryLong = 3_i32
    DelayRetrySuccess = 4_i32
    DelayRetryPastSuccess = 5_i32
  end
  enum X509CertificateTemplateGeneralFlag
    GeneralMachineType = 64_i32
    GeneralCA = 128_i32
    GeneralCrossCA = 2048_i32
    GeneralDefault = 65536_i32
    GeneralModified = 131072_i32
    GeneralDonotPersist = 4096_i32
  end
  enum X509CertificateTemplateEnrollmentFlag
    EnrollmentIncludeSymmetricAlgorithms = 1_i32
    EnrollmentPendAllRequests = 2_i32
    EnrollmentPublishToKRAContainer = 4_i32
    EnrollmentPublishToDS = 8_i32
    EnrollmentAutoEnrollmentCheckUserDSCertificate = 16_i32
    EnrollmentAutoEnrollment = 32_i32
    EnrollmentDomainAuthenticationNotRequired = 128_i32
    EnrollmentPreviousApprovalValidateReenrollment = 64_i32
    EnrollmentUserInteractionRequired = 256_i32
    EnrollmentAddTemplateName = 512_i32
    EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024_i32
    EnrollmentAllowEnrollOnBehalfOf = 2048_i32
    EnrollmentAddOCSPNoCheck = 4096_i32
    EnrollmentReuseKeyOnFullSmartCard = 8192_i32
    EnrollmentNoRevocationInfoInCerts = 16384_i32
    EnrollmentIncludeBasicConstraintsForEECerts = 32768_i32
    EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536_i32
    EnrollmentCertificateIssuancePoliciesFromRequest = 131072_i32
    EnrollmentSkipAutoRenewal = 262144_i32
  end
  enum X509CertificateTemplateSubjectNameFlag
    SubjectNameEnrolleeSupplies = 1_i32
    SubjectNameRequireDirectoryPath = -2147483648_i32
    SubjectNameRequireCommonName = 1073741824_i32
    SubjectNameRequireEmail = 536870912_i32
    SubjectNameRequireDNS = 268435456_i32
    SubjectNameAndAlternativeNameOldCertSupplies = 8_i32
    SubjectAlternativeNameEnrolleeSupplies = 65536_i32
    SubjectAlternativeNameRequireDirectoryGUID = 16777216_i32
    SubjectAlternativeNameRequireUPN = 33554432_i32
    SubjectAlternativeNameRequireEmail = 67108864_i32
    SubjectAlternativeNameRequireSPN = 8388608_i32
    SubjectAlternativeNameRequireDNS = 134217728_i32
    SubjectAlternativeNameRequireDomainDNS = 4194304_i32
  end
  enum X509CertificateTemplatePrivateKeyFlag
    PrivateKeyRequireArchival = 1_i32
    PrivateKeyExportable = 16_i32
    PrivateKeyRequireStrongKeyProtection = 32_i32
    PrivateKeyRequireAlternateSignatureAlgorithm = 64_i32
    PrivateKeyRequireSameKeyRenewal = 128_i32
    PrivateKeyUseLegacyProvider = 256_i32
    PrivateKeyEKTrustOnUse = 512_i32
    PrivateKeyEKValidateCert = 1024_i32
    PrivateKeyEKValidateKey = 2048_i32
    PrivateKeyAttestNone = 0_i32
    PrivateKeyAttestPreferred = 4096_i32
    PrivateKeyAttestRequired = 8192_i32
    PrivateKeyAttestMask = 12288_i32
    PrivateKeyAttestWithoutPolicy = 16384_i32
    PrivateKeyServerVersionMask = 983040_i32
    PrivateKeyServerVersionShift = 16_i32
    PrivateKeyHelloKspKey = 1048576_i32
    PrivateKeyHelloLogonKey = 2097152_i32
    PrivateKeyClientVersionMask = 251658240_i32
    PrivateKeyClientVersionShift = 24_i32
  end
  enum ImportPFXFlags
    ImportNone = 0_i32
    ImportMachineContext = 1_i32
    ImportForceOverwrite = 2_i32
    ImportSilent = 4_i32
    ImportSaveProperties = 8_i32
    ImportExportable = 16_i32
    ImportExportableEncrypted = 32_i32
    ImportNoUserProtected = 64_i32
    ImportUserProtected = 128_i32
    ImportUserProtectedHigh = 256_i32
    ImportInstallCertificate = 512_i32
    ImportInstallChain = 1024_i32
    ImportInstallChainAndRoot = 2048_i32
  end
  enum ENUM_CATYPES
    ENUM_ENTERPRISE_ROOTCA = 0_i32
    ENUM_ENTERPRISE_SUBCA = 1_i32
    ENUM_STANDALONE_ROOTCA = 3_i32
    ENUM_STANDALONE_SUBCA = 4_i32
    ENUM_UNKNOWN_CA = 5_i32
  end

  @[Extern]
  struct CSEDB_RSTMAPW
    property pwszDatabaseName : Win32cr::Foundation::PWSTR
    property pwszNewDatabaseName : Win32cr::Foundation::PWSTR
    def initialize(@pwszDatabaseName : Win32cr::Foundation::PWSTR, @pwszNewDatabaseName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERTTRANSBLOB
    property cb : UInt32
    property pb : UInt8*
    def initialize(@cb : UInt32, @pb : UInt8*)
    end
  end

  @[Extern]
  struct CERTVIEWRESTRICTION
    property column_index : UInt32
    property seek_operator : Int32
    property sort_order : Int32
    property pbValue : UInt8*
    property cbValue : UInt32
    def initialize(@column_index : UInt32, @seek_operator : Int32, @sort_order : Int32, @pbValue : UInt8*, @cbValue : UInt32)
    end
  end

  @[Extern]
  struct CAINFO
    property cbSize : UInt32
    property ca_type : Win32cr::Security::Cryptography::Certificates::ENUM_CATYPES
    property cCASignatureCerts : UInt32
    property cCAExchangeCerts : UInt32
    property cExitModules : UInt32
    property lPropIdMax : Int32
    property lRoleSeparationEnabled : Int32
    property cKRACertUsedCount : UInt32
    property cKRACertCount : UInt32
    property fAdvancedServer : UInt32
    def initialize(@cbSize : UInt32, @ca_type : Win32cr::Security::Cryptography::Certificates::ENUM_CATYPES, @cCASignatureCerts : UInt32, @cCAExchangeCerts : UInt32, @cExitModules : UInt32, @lPropIdMax : Int32, @lRoleSeparationEnabled : Int32, @cKRACertUsedCount : UInt32, @cKRACertCount : UInt32, @fAdvancedServer : UInt32)
    end
  end

  @[Extern]
  record IEnumCERTVIEWCOLUMNVtbl,
    query_interface : Proc(IEnumCERTVIEWCOLUMN*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCERTVIEWCOLUMN*, UInt32),
    release : Proc(IEnumCERTVIEWCOLUMN*, UInt32),
    get_type_info_count : Proc(IEnumCERTVIEWCOLUMN*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IEnumCERTVIEWCOLUMN*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IEnumCERTVIEWCOLUMN*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IEnumCERTVIEWCOLUMN*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumCERTVIEWCOLUMN*, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IEnumCERTVIEWCOLUMN*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_display_name : Proc(IEnumCERTVIEWCOLUMN*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IEnumCERTVIEWCOLUMN*, Int32*, Win32cr::Foundation::HRESULT),
    is_indexed : Proc(IEnumCERTVIEWCOLUMN*, Int32*, Win32cr::Foundation::HRESULT),
    get_max_length : Proc(IEnumCERTVIEWCOLUMN*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IEnumCERTVIEWCOLUMN*, Win32cr::Security::Cryptography::Certificates::ENUM_CERT_COLUMN_VALUE_FLAGS, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCERTVIEWCOLUMN*, Int32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCERTVIEWCOLUMN*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCERTVIEWCOLUMN*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumCERTVIEWCOLUMN, lpVtbl : IEnumCERTVIEWCOLUMNVtbl* do
    GUID = LibC::GUID.new(0x9c735be2_u32, 0x57a5_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xdb_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : IEnumCERTVIEWCOLUMN*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCERTVIEWCOLUMN*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCERTVIEWCOLUMN*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IEnumCERTVIEWCOLUMN*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IEnumCERTVIEWCOLUMN*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IEnumCERTVIEWCOLUMN*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IEnumCERTVIEWCOLUMN*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def next__(this : IEnumCERTVIEWCOLUMN*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def get_name(this : IEnumCERTVIEWCOLUMN*, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pstrOut)
    end
    def get_display_name(this : IEnumCERTVIEWCOLUMN*, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_name.call(this, pstrOut)
    end
    def get_type(this : IEnumCERTVIEWCOLUMN*, pType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pType)
    end
    def is_indexed(this : IEnumCERTVIEWCOLUMN*, pIndexed : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_indexed.call(this, pIndexed)
    end
    def get_max_length(this : IEnumCERTVIEWCOLUMN*, pMaxLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_length.call(this, pMaxLength)
    end
    def get_value(this : IEnumCERTVIEWCOLUMN*, flags : Win32cr::Security::Cryptography::Certificates::ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, flags, pvarValue)
    end
    def skip(this : IEnumCERTVIEWCOLUMN*, celt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumCERTVIEWCOLUMN*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumCERTVIEWCOLUMN*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IEnumCERTVIEWATTRIBUTEVtbl,
    query_interface : Proc(IEnumCERTVIEWATTRIBUTE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCERTVIEWATTRIBUTE*, UInt32),
    release : Proc(IEnumCERTVIEWATTRIBUTE*, UInt32),
    get_type_info_count : Proc(IEnumCERTVIEWATTRIBUTE*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IEnumCERTVIEWATTRIBUTE*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IEnumCERTVIEWATTRIBUTE*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IEnumCERTVIEWATTRIBUTE*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumCERTVIEWATTRIBUTE*, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IEnumCERTVIEWATTRIBUTE*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IEnumCERTVIEWATTRIBUTE*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCERTVIEWATTRIBUTE*, Int32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCERTVIEWATTRIBUTE*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCERTVIEWATTRIBUTE*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumCERTVIEWATTRIBUTE, lpVtbl : IEnumCERTVIEWATTRIBUTEVtbl* do
    GUID = LibC::GUID.new(0xe77db656_u32, 0x7653_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : IEnumCERTVIEWATTRIBUTE*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCERTVIEWATTRIBUTE*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCERTVIEWATTRIBUTE*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IEnumCERTVIEWATTRIBUTE*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IEnumCERTVIEWATTRIBUTE*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IEnumCERTVIEWATTRIBUTE*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IEnumCERTVIEWATTRIBUTE*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def next__(this : IEnumCERTVIEWATTRIBUTE*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def get_name(this : IEnumCERTVIEWATTRIBUTE*, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pstrOut)
    end
    def get_value(this : IEnumCERTVIEWATTRIBUTE*, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, pstrOut)
    end
    def skip(this : IEnumCERTVIEWATTRIBUTE*, celt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumCERTVIEWATTRIBUTE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumCERTVIEWATTRIBUTE*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IEnumCERTVIEWEXTENSIONVtbl,
    query_interface : Proc(IEnumCERTVIEWEXTENSION*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCERTVIEWEXTENSION*, UInt32),
    release : Proc(IEnumCERTVIEWEXTENSION*, UInt32),
    get_type_info_count : Proc(IEnumCERTVIEWEXTENSION*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IEnumCERTVIEWEXTENSION*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IEnumCERTVIEWEXTENSION*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IEnumCERTVIEWEXTENSION*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumCERTVIEWEXTENSION*, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IEnumCERTVIEWEXTENSION*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IEnumCERTVIEWEXTENSION*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IEnumCERTVIEWEXTENSION*, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::Security::Cryptography::Certificates::ENUM_CERT_COLUMN_VALUE_FLAGS, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCERTVIEWEXTENSION*, Int32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCERTVIEWEXTENSION*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCERTVIEWEXTENSION*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumCERTVIEWEXTENSION, lpVtbl : IEnumCERTVIEWEXTENSIONVtbl* do
    GUID = LibC::GUID.new(0xe7dd1466_u32, 0x7653_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : IEnumCERTVIEWEXTENSION*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCERTVIEWEXTENSION*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCERTVIEWEXTENSION*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IEnumCERTVIEWEXTENSION*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IEnumCERTVIEWEXTENSION*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IEnumCERTVIEWEXTENSION*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IEnumCERTVIEWEXTENSION*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def next__(this : IEnumCERTVIEWEXTENSION*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def get_name(this : IEnumCERTVIEWEXTENSION*, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pstrOut)
    end
    def get_flags(this : IEnumCERTVIEWEXTENSION*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pFlags)
    end
    def get_value(this : IEnumCERTVIEWEXTENSION*, type__ : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, flags : Win32cr::Security::Cryptography::Certificates::ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, type__, flags, pvarValue)
    end
    def skip(this : IEnumCERTVIEWEXTENSION*, celt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumCERTVIEWEXTENSION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumCERTVIEWEXTENSION*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IEnumCERTVIEWROWVtbl,
    query_interface : Proc(IEnumCERTVIEWROW*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCERTVIEWROW*, UInt32),
    release : Proc(IEnumCERTVIEWROW*, UInt32),
    get_type_info_count : Proc(IEnumCERTVIEWROW*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IEnumCERTVIEWROW*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IEnumCERTVIEWROW*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IEnumCERTVIEWROW*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumCERTVIEWROW*, Int32*, Win32cr::Foundation::HRESULT),
    enum_cert_view_column : Proc(IEnumCERTVIEWROW*, Void**, Win32cr::Foundation::HRESULT),
    enum_cert_view_attribute : Proc(IEnumCERTVIEWROW*, Int32, Void**, Win32cr::Foundation::HRESULT),
    enum_cert_view_extension : Proc(IEnumCERTVIEWROW*, Int32, Void**, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCERTVIEWROW*, Int32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCERTVIEWROW*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCERTVIEWROW*, Void**, Win32cr::Foundation::HRESULT),
    get_max_index : Proc(IEnumCERTVIEWROW*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumCERTVIEWROW, lpVtbl : IEnumCERTVIEWROWVtbl* do
    GUID = LibC::GUID.new(0xd1157f4c_u32, 0x5af2_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xdc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : IEnumCERTVIEWROW*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCERTVIEWROW*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCERTVIEWROW*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IEnumCERTVIEWROW*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IEnumCERTVIEWROW*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IEnumCERTVIEWROW*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IEnumCERTVIEWROW*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def next__(this : IEnumCERTVIEWROW*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def enum_cert_view_column(this : IEnumCERTVIEWROW*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cert_view_column.call(this, ppenum)
    end
    def enum_cert_view_attribute(this : IEnumCERTVIEWROW*, flags : Int32, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cert_view_attribute.call(this, flags, ppenum)
    end
    def enum_cert_view_extension(this : IEnumCERTVIEWROW*, flags : Int32, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cert_view_extension.call(this, flags, ppenum)
    end
    def skip(this : IEnumCERTVIEWROW*, celt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumCERTVIEWROW*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumCERTVIEWROW*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end
    def get_max_index(this : IEnumCERTVIEWROW*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_index.call(this, pIndex)
    end

  end

  @[Extern]
  record ICertViewVtbl,
    query_interface : Proc(ICertView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertView*, UInt32),
    release : Proc(ICertView*, UInt32),
    get_type_info_count : Proc(ICertView*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertView*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertView*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertView*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open_connection : Proc(ICertView*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enum_cert_view_column : Proc(ICertView*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Void**, Win32cr::Foundation::HRESULT),
    get_column_count : Proc(ICertView*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Int32*, Win32cr::Foundation::HRESULT),
    get_column_index : Proc(ICertView*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    set_result_column_count : Proc(ICertView*, Int32, Win32cr::Foundation::HRESULT),
    set_result_column : Proc(ICertView*, Int32, Win32cr::Foundation::HRESULT),
    set_restriction : Proc(ICertView*, Win32cr::Security::Cryptography::Certificates::CERT_VIEW_COLUMN_INDEX, Win32cr::Security::Cryptography::Certificates::CERT_VIEW_SEEK_OPERATOR_FLAGS, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    open_view : Proc(ICertView*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertView, lpVtbl : ICertViewVtbl* do
    GUID = LibC::GUID.new(0xc3fac344_u32, 0x1e84_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : ICertView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertView*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertView*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertView*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertView*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open_connection(this : ICertView*, strConfig : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_connection.call(this, strConfig)
    end
    def enum_cert_view_column(this : ICertView*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cert_view_column.call(this, fResultColumn, ppenum)
    end
    def get_column_count(this : ICertView*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, pcColumn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_count.call(this, fResultColumn, pcColumn)
    end
    def get_column_index(this : ICertView*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, strColumnName : Win32cr::Foundation::BSTR, pColumnIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_index.call(this, fResultColumn, strColumnName, pColumnIndex)
    end
    def set_result_column_count(this : ICertView*, cResultColumn : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_result_column_count.call(this, cResultColumn)
    end
    def set_result_column(this : ICertView*, column_index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_result_column.call(this, column_index)
    end
    def set_restriction(this : ICertView*, column_index : Win32cr::Security::Cryptography::Certificates::CERT_VIEW_COLUMN_INDEX, seek_operator : Win32cr::Security::Cryptography::Certificates::CERT_VIEW_SEEK_OPERATOR_FLAGS, sort_order : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_restriction.call(this, column_index, seek_operator, sort_order, pvarValue)
    end
    def open_view(this : ICertView*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_view.call(this, ppenum)
    end

  end

  @[Extern]
  record ICertView2Vtbl,
    query_interface : Proc(ICertView2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertView2*, UInt32),
    release : Proc(ICertView2*, UInt32),
    get_type_info_count : Proc(ICertView2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertView2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertView2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertView2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open_connection : Proc(ICertView2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enum_cert_view_column : Proc(ICertView2*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Void**, Win32cr::Foundation::HRESULT),
    get_column_count : Proc(ICertView2*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Int32*, Win32cr::Foundation::HRESULT),
    get_column_index : Proc(ICertView2*, Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    set_result_column_count : Proc(ICertView2*, Int32, Win32cr::Foundation::HRESULT),
    set_result_column : Proc(ICertView2*, Int32, Win32cr::Foundation::HRESULT),
    set_restriction : Proc(ICertView2*, Win32cr::Security::Cryptography::Certificates::CERT_VIEW_COLUMN_INDEX, Win32cr::Security::Cryptography::Certificates::CERT_VIEW_SEEK_OPERATOR_FLAGS, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    open_view : Proc(ICertView2*, Void**, Win32cr::Foundation::HRESULT),
    set_table : Proc(ICertView2*, Win32cr::Security::Cryptography::Certificates::CVRC_TABLE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertView2, lpVtbl : ICertView2Vtbl* do
    GUID = LibC::GUID.new(0xd594b282_u32, 0x8851_u16, 0x4b61_u16, StaticArray[0x9c_u8, 0x66_u8, 0x3e_u8, 0xda_u8, 0xdf_u8, 0x84_u8, 0x88_u8, 0x63_u8])
    def query_interface(this : ICertView2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertView2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertView2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertView2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertView2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertView2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertView2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open_connection(this : ICertView2*, strConfig : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_connection.call(this, strConfig)
    end
    def enum_cert_view_column(this : ICertView2*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cert_view_column.call(this, fResultColumn, ppenum)
    end
    def get_column_count(this : ICertView2*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, pcColumn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_count.call(this, fResultColumn, pcColumn)
    end
    def get_column_index(this : ICertView2*, fResultColumn : Win32cr::Security::Cryptography::Certificates::CVRC_COLUMN, strColumnName : Win32cr::Foundation::BSTR, pColumnIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_column_index.call(this, fResultColumn, strColumnName, pColumnIndex)
    end
    def set_result_column_count(this : ICertView2*, cResultColumn : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_result_column_count.call(this, cResultColumn)
    end
    def set_result_column(this : ICertView2*, column_index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_result_column.call(this, column_index)
    end
    def set_restriction(this : ICertView2*, column_index : Win32cr::Security::Cryptography::Certificates::CERT_VIEW_COLUMN_INDEX, seek_operator : Win32cr::Security::Cryptography::Certificates::CERT_VIEW_SEEK_OPERATOR_FLAGS, sort_order : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_restriction.call(this, column_index, seek_operator, sort_order, pvarValue)
    end
    def open_view(this : ICertView2*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_view.call(this, ppenum)
    end
    def set_table(this : ICertView2*, table : Win32cr::Security::Cryptography::Certificates::CVRC_TABLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_table.call(this, table)
    end

  end

  @[Extern]
  record ICertAdminVtbl,
    query_interface : Proc(ICertAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertAdmin*, UInt32),
    release : Proc(ICertAdmin*, UInt32),
    get_type_info_count : Proc(ICertAdmin*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertAdmin*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertAdmin*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertAdmin*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_valid_certificate : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    get_revocation_reason : Proc(ICertAdmin*, Int32*, Win32cr::Foundation::HRESULT),
    revoke_certificate : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Float64, Win32cr::Foundation::HRESULT),
    set_request_attributes : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_certificate_extension : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    deny_request : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    resubmit_request : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    publish_crl : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Float64, Win32cr::Foundation::HRESULT),
    get_crl : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    import_certificate : Proc(ICertAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertAdmin, lpVtbl : ICertAdminVtbl* do
    GUID = LibC::GUID.new(0x34df6950_u32, 0x7fb6_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x17_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertAdmin*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertAdmin*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertAdmin*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertAdmin*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_valid_certificate(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, strSerialNumber : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_valid_certificate.call(this, strConfig, strSerialNumber, pDisposition)
    end
    def get_revocation_reason(this : ICertAdmin*, pReason : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_revocation_reason.call(this, pReason)
    end
    def revoke_certificate(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, strSerialNumber : Win32cr::Foundation::BSTR, reason : Int32, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revoke_certificate.call(this, strConfig, strSerialNumber, reason, date)
    end
    def set_request_attributes(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strAttributes : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_request_attributes.call(this, strConfig, request_id, strAttributes)
    end
    def set_certificate_extension(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strExtensionName : Win32cr::Foundation::BSTR, type__ : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, flags : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_certificate_extension.call(this, strConfig, request_id, strExtensionName, type__, flags, pvarValue)
    end
    def deny_request(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deny_request.call(this, strConfig, request_id)
    end
    def resubmit_request(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resubmit_request.call(this, strConfig, request_id, pDisposition)
    end
    def publish_crl(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.publish_crl.call(this, strConfig, date)
    end
    def get_crl(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, flags : Int32, pstrCRL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_crl.call(this, strConfig, flags, pstrCRL)
    end
    def import_certificate(this : ICertAdmin*, strConfig : Win32cr::Foundation::BSTR, strCertificate : Win32cr::Foundation::BSTR, flags : Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, pRequestId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_certificate.call(this, strConfig, strCertificate, flags, pRequestId)
    end

  end

  @[Extern]
  record ICertAdmin2Vtbl,
    query_interface : Proc(ICertAdmin2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertAdmin2*, UInt32),
    release : Proc(ICertAdmin2*, UInt32),
    get_type_info_count : Proc(ICertAdmin2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertAdmin2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertAdmin2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertAdmin2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_valid_certificate : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    get_revocation_reason : Proc(ICertAdmin2*, Int32*, Win32cr::Foundation::HRESULT),
    revoke_certificate : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Float64, Win32cr::Foundation::HRESULT),
    set_request_attributes : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_certificate_extension : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    deny_request : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    resubmit_request : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    publish_crl : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Float64, Win32cr::Foundation::HRESULT),
    get_crl : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    import_certificate : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, Int32*, Win32cr::Foundation::HRESULT),
    publish_cr_ls : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Float64, Int32, Win32cr::Foundation::HRESULT),
    get_ca_property : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_ca_property : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_ca_property_flags : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_ca_property_display_name : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_archived_key : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_config_entry : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_config_entry : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    import_key : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_my_roles : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERTADMIN_GET_ROLES_FLAGS*, Win32cr::Foundation::HRESULT),
    delete_row : Proc(ICertAdmin2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_DELETE_ROW_FLAGS, Float64, Win32cr::Security::Cryptography::Certificates::CVRC_TABLE, Int32, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertAdmin2, lpVtbl : ICertAdmin2Vtbl* do
    GUID = LibC::GUID.new(0xf7c3ac41_u32, 0xb8ce_u16, 0x4fb4_u16, StaticArray[0xaa_u8, 0x58_u8, 0x3d_u8, 0x1d_u8, 0xc0_u8, 0xe3_u8, 0x6b_u8, 0x39_u8])
    def query_interface(this : ICertAdmin2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertAdmin2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertAdmin2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertAdmin2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertAdmin2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertAdmin2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertAdmin2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_valid_certificate(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, strSerialNumber : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_valid_certificate.call(this, strConfig, strSerialNumber, pDisposition)
    end
    def get_revocation_reason(this : ICertAdmin2*, pReason : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_revocation_reason.call(this, pReason)
    end
    def revoke_certificate(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, strSerialNumber : Win32cr::Foundation::BSTR, reason : Int32, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revoke_certificate.call(this, strConfig, strSerialNumber, reason, date)
    end
    def set_request_attributes(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strAttributes : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_request_attributes.call(this, strConfig, request_id, strAttributes)
    end
    def set_certificate_extension(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strExtensionName : Win32cr::Foundation::BSTR, type__ : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, flags : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_certificate_extension.call(this, strConfig, request_id, strExtensionName, type__, flags, pvarValue)
    end
    def deny_request(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deny_request.call(this, strConfig, request_id)
    end
    def resubmit_request(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resubmit_request.call(this, strConfig, request_id, pDisposition)
    end
    def publish_crl(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.publish_crl.call(this, strConfig, date)
    end
    def get_crl(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, flags : Int32, pstrCRL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_crl.call(this, strConfig, flags, pstrCRL)
    end
    def import_certificate(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, strCertificate : Win32cr::Foundation::BSTR, flags : Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, pRequestId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_certificate.call(this, strConfig, strCertificate, flags, pRequestId)
    end
    def publish_cr_ls(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, date : Float64, crl_flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.publish_cr_ls.call(this, strConfig, date, crl_flags)
    end
    def get_ca_property(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, prop_index : Int32, prop_type : Int32, flags : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property.call(this, strConfig, prop_id, prop_index, prop_type, flags, pvarPropertyValue)
    end
    def set_ca_property(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, prop_index : Int32, prop_type : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ca_property.call(this, strConfig, prop_id, prop_index, prop_type, pvarPropertyValue)
    end
    def get_ca_property_flags(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pPropFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_flags.call(this, strConfig, prop_id, pPropFlags)
    end
    def get_ca_property_display_name(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pstrDisplayName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_display_name.call(this, strConfig, prop_id, pstrDisplayName)
    end
    def get_archived_key(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, flags : Int32, pstrArchivedKey : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_archived_key.call(this, strConfig, request_id, flags, pstrArchivedKey)
    end
    def get_config_entry(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, strNodePath : Win32cr::Foundation::BSTR, strEntryName : Win32cr::Foundation::BSTR, pvarEntry : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_config_entry.call(this, strConfig, strNodePath, strEntryName, pvarEntry)
    end
    def set_config_entry(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, strNodePath : Win32cr::Foundation::BSTR, strEntryName : Win32cr::Foundation::BSTR, pvarEntry : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_config_entry.call(this, strConfig, strNodePath, strEntryName, pvarEntry)
    end
    def import_key(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strCertHash : Win32cr::Foundation::BSTR, flags : Win32cr::Security::Cryptography::Certificates::CERT_IMPORT_FLAGS, strKey : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_key.call(this, strConfig, request_id, strCertHash, flags, strKey)
    end
    def get_my_roles(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, pRoles : Win32cr::Security::Cryptography::Certificates::CERTADMIN_GET_ROLES_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_my_roles.call(this, strConfig, pRoles)
    end
    def delete_row(this : ICertAdmin2*, strConfig : Win32cr::Foundation::BSTR, flags : Win32cr::Security::Cryptography::Certificates::CERT_DELETE_ROW_FLAGS, date : Float64, table : Win32cr::Security::Cryptography::Certificates::CVRC_TABLE, row_id : Int32, pcDeleted : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_row.call(this, strConfig, flags, date, table, row_id, pcDeleted)
    end

  end

  @[Extern]
  record IOCSPPropertyVtbl,
    query_interface : Proc(IOCSPProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOCSPProperty*, UInt32),
    release : Proc(IOCSPProperty*, UInt32),
    get_type_info_count : Proc(IOCSPProperty*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IOCSPProperty*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IOCSPProperty*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IOCSPProperty*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IOCSPProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Value : Proc(IOCSPProperty*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Value : Proc(IOCSPProperty*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Modified : Proc(IOCSPProperty*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOCSPProperty, lpVtbl : IOCSPPropertyVtbl* do
    GUID = LibC::GUID.new(0x66fb7839_u32, 0x5f04_u16, 0x4c25_u16, StaticArray[0xad_u8, 0x18_u8, 0x9f_u8, 0xf1_u8, 0xa8_u8, 0x37_u8, 0x6e_u8, 0xe0_u8])
    def query_interface(this : IOCSPProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOCSPProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOCSPProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IOCSPProperty*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IOCSPProperty*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IOCSPProperty*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IOCSPProperty*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IOCSPProperty*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_Value(this : IOCSPProperty*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Value.call(this, pVal)
    end
    def put_Value(this : IOCSPProperty*, newVal : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Value.call(this, newVal)
    end
    def get_Modified(this : IOCSPProperty*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modified.call(this, pVal)
    end

  end

  @[Extern]
  record IOCSPPropertyCollectionVtbl,
    query_interface : Proc(IOCSPPropertyCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOCSPPropertyCollection*, UInt32),
    release : Proc(IOCSPPropertyCollection*, UInt32),
    get_type_info_count : Proc(IOCSPPropertyCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IOCSPPropertyCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IOCSPPropertyCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IOCSPPropertyCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IOCSPPropertyCollection*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IOCSPPropertyCollection*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IOCSPPropertyCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(IOCSPPropertyCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    create_property : Proc(IOCSPPropertyCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Void**, Win32cr::Foundation::HRESULT),
    delete_property : Proc(IOCSPPropertyCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_properties : Proc(IOCSPPropertyCollection*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_all_properties : Proc(IOCSPPropertyCollection*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOCSPPropertyCollection, lpVtbl : IOCSPPropertyCollectionVtbl* do
    GUID = LibC::GUID.new(0x2597c18d_u32, 0x54e6_u16, 0x4b74_u16, StaticArray[0x9f_u8, 0xa9_u8, 0xa6_u8, 0xbf_u8, 0xda_u8, 0x99_u8, 0xcb_u8, 0xbe_u8])
    def query_interface(this : IOCSPPropertyCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOCSPPropertyCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOCSPPropertyCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IOCSPPropertyCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IOCSPPropertyCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IOCSPPropertyCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IOCSPPropertyCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IOCSPPropertyCollection*, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppVal)
    end
    def get_Item(this : IOCSPPropertyCollection*, index : Int32, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, pVal)
    end
    def get_Count(this : IOCSPPropertyCollection*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get_ItemByName(this : IOCSPPropertyCollection*, bstrPropName : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, bstrPropName, pVal)
    end
    def create_property(this : IOCSPPropertyCollection*, bstrPropName : Win32cr::Foundation::BSTR, pVarPropValue : Win32cr::System::Com::VARIANT*, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_property.call(this, bstrPropName, pVarPropValue, ppVal)
    end
    def delete_property(this : IOCSPPropertyCollection*, bstrPropName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_property.call(this, bstrPropName)
    end
    def initialize_from_properties(this : IOCSPPropertyCollection*, pVarProperties : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_properties.call(this, pVarProperties)
    end
    def get_all_properties(this : IOCSPPropertyCollection*, pVarProperties : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_properties.call(this, pVarProperties)
    end

  end

  @[Extern]
  record IOCSPCAConfigurationVtbl,
    query_interface : Proc(IOCSPCAConfiguration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOCSPCAConfiguration*, UInt32),
    release : Proc(IOCSPCAConfiguration*, UInt32),
    get_type_info_count : Proc(IOCSPCAConfiguration*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IOCSPCAConfiguration*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IOCSPCAConfiguration*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IOCSPCAConfiguration*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Identifier : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CACertificate : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SigningFlags : Proc(IOCSPCAConfiguration*, UInt32*, Win32cr::Foundation::HRESULT),
    put_SigningFlags : Proc(IOCSPCAConfiguration*, UInt32, Win32cr::Foundation::HRESULT),
    get_SigningCertificate : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_SigningCertificate : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_ReminderDuration : Proc(IOCSPCAConfiguration*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ReminderDuration : Proc(IOCSPCAConfiguration*, UInt32, Win32cr::Foundation::HRESULT),
    get_ErrorCode : Proc(IOCSPCAConfiguration*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CSPName : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IOCSPCAConfiguration*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ProviderCLSID : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderCLSID : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderProperties : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ProviderProperties : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Modified : Proc(IOCSPCAConfiguration*, Int16*, Win32cr::Foundation::HRESULT),
    get_LocalRevocationInformation : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_LocalRevocationInformation : Proc(IOCSPCAConfiguration*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_SigningCertificateTemplate : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SigningCertificateTemplate : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAConfig : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAConfig : Proc(IOCSPCAConfiguration*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOCSPCAConfiguration, lpVtbl : IOCSPCAConfigurationVtbl* do
    GUID = LibC::GUID.new(0xaec92b40_u32, 0x3d46_u16, 0x433f_u16, StaticArray[0x87_u8, 0xd1_u8, 0xb8_u8, 0x4d_u8, 0x5c_u8, 0x1e_u8, 0x79_u8, 0xd_u8])
    def query_interface(this : IOCSPCAConfiguration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOCSPCAConfiguration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOCSPCAConfiguration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IOCSPCAConfiguration*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IOCSPCAConfiguration*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IOCSPCAConfiguration*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IOCSPCAConfiguration*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Identifier(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Identifier.call(this, pVal)
    end
    def get_CACertificate(this : IOCSPCAConfiguration*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CACertificate.call(this, pVal)
    end
    def get_HashAlgorithm(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pVal)
    end
    def put_HashAlgorithm(this : IOCSPCAConfiguration*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, newVal)
    end
    def get_SigningFlags(this : IOCSPCAConfiguration*, pVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SigningFlags.call(this, pVal)
    end
    def put_SigningFlags(this : IOCSPCAConfiguration*, newVal : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SigningFlags.call(this, newVal)
    end
    def get_SigningCertificate(this : IOCSPCAConfiguration*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SigningCertificate.call(this, pVal)
    end
    def put_SigningCertificate(this : IOCSPCAConfiguration*, newVal : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SigningCertificate.call(this, newVal)
    end
    def get_ReminderDuration(this : IOCSPCAConfiguration*, pVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReminderDuration.call(this, pVal)
    end
    def put_ReminderDuration(this : IOCSPCAConfiguration*, newVal : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReminderDuration.call(this, newVal)
    end
    def get_ErrorCode(this : IOCSPCAConfiguration*, pVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorCode.call(this, pVal)
    end
    def get_CSPName(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CSPName.call(this, pVal)
    end
    def get_KeySpec(this : IOCSPCAConfiguration*, pVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pVal)
    end
    def get_ProviderCLSID(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderCLSID.call(this, pVal)
    end
    def put_ProviderCLSID(this : IOCSPCAConfiguration*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderCLSID.call(this, newVal)
    end
    def get_ProviderProperties(this : IOCSPCAConfiguration*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderProperties.call(this, pVal)
    end
    def put_ProviderProperties(this : IOCSPCAConfiguration*, newVal : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderProperties.call(this, newVal)
    end
    def get_Modified(this : IOCSPCAConfiguration*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modified.call(this, pVal)
    end
    def get_LocalRevocationInformation(this : IOCSPCAConfiguration*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalRevocationInformation.call(this, pVal)
    end
    def put_LocalRevocationInformation(this : IOCSPCAConfiguration*, newVal : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalRevocationInformation.call(this, newVal)
    end
    def get_SigningCertificateTemplate(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SigningCertificateTemplate.call(this, pVal)
    end
    def put_SigningCertificateTemplate(this : IOCSPCAConfiguration*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SigningCertificateTemplate.call(this, newVal)
    end
    def get_CAConfig(this : IOCSPCAConfiguration*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAConfig.call(this, pVal)
    end
    def put_CAConfig(this : IOCSPCAConfiguration*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAConfig.call(this, newVal)
    end

  end

  @[Extern]
  record IOCSPCAConfigurationCollectionVtbl,
    query_interface : Proc(IOCSPCAConfigurationCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOCSPCAConfigurationCollection*, UInt32),
    release : Proc(IOCSPCAConfigurationCollection*, UInt32),
    get_type_info_count : Proc(IOCSPCAConfigurationCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IOCSPCAConfigurationCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IOCSPCAConfigurationCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IOCSPCAConfigurationCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IOCSPCAConfigurationCollection*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IOCSPCAConfigurationCollection*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IOCSPCAConfigurationCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(IOCSPCAConfigurationCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    create_ca_configuration : Proc(IOCSPCAConfigurationCollection*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    delete_ca_configuration : Proc(IOCSPCAConfigurationCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOCSPCAConfigurationCollection, lpVtbl : IOCSPCAConfigurationCollectionVtbl* do
    GUID = LibC::GUID.new(0x2bebea0b_u32, 0x5ece_u16, 0x4f28_u16, StaticArray[0xa9_u8, 0x1c_u8, 0x86_u8, 0xb4_u8, 0xbb_u8, 0x20_u8, 0xf0_u8, 0xd3_u8])
    def query_interface(this : IOCSPCAConfigurationCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOCSPCAConfigurationCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOCSPCAConfigurationCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IOCSPCAConfigurationCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IOCSPCAConfigurationCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IOCSPCAConfigurationCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IOCSPCAConfigurationCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IOCSPCAConfigurationCollection*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def get_Item(this : IOCSPCAConfigurationCollection*, index : Int32, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, pVal)
    end
    def get_Count(this : IOCSPCAConfigurationCollection*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get_ItemByName(this : IOCSPCAConfigurationCollection*, bstrIdentifier : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, bstrIdentifier, pVal)
    end
    def create_ca_configuration(this : IOCSPCAConfigurationCollection*, bstrIdentifier : Win32cr::Foundation::BSTR, varCACert : Win32cr::System::Com::VARIANT, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ca_configuration.call(this, bstrIdentifier, varCACert, ppVal)
    end
    def delete_ca_configuration(this : IOCSPCAConfigurationCollection*, bstrIdentifier : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_ca_configuration.call(this, bstrIdentifier)
    end

  end

  @[Extern]
  record IOCSPAdminVtbl,
    query_interface : Proc(IOCSPAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOCSPAdmin*, UInt32),
    release : Proc(IOCSPAdmin*, UInt32),
    get_type_info_count : Proc(IOCSPAdmin*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IOCSPAdmin*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IOCSPAdmin*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IOCSPAdmin*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_OCSPServiceProperties : Proc(IOCSPAdmin*, Void**, Win32cr::Foundation::HRESULT),
    get_OCSPCAConfigurationCollection : Proc(IOCSPAdmin*, Void**, Win32cr::Foundation::HRESULT),
    get_configuration : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    set_configuration : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    get_my_roles : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    ping : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_security : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_security : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_signing_certificates : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_hash_algorithms : Proc(IOCSPAdmin*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IOCSPAdmin, lpVtbl : IOCSPAdminVtbl* do
    GUID = LibC::GUID.new(0x322e830d_u32, 0x67db_u16, 0x4fe9_u16, StaticArray[0x95_u8, 0x77_u8, 0x45_u8, 0x96_u8, 0xd9_u8, 0xf0_u8, 0x92_u8, 0x94_u8])
    def query_interface(this : IOCSPAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOCSPAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOCSPAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IOCSPAdmin*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IOCSPAdmin*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IOCSPAdmin*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IOCSPAdmin*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_OCSPServiceProperties(this : IOCSPAdmin*, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OCSPServiceProperties.call(this, ppVal)
    end
    def get_OCSPCAConfigurationCollection(this : IOCSPAdmin*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OCSPCAConfigurationCollection.call(this, pVal)
    end
    def get_configuration(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, bForce : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_configuration.call(this, bstrServerName, bForce)
    end
    def set_configuration(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, bForce : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_configuration.call(this, bstrServerName, bForce)
    end
    def get_my_roles(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, pRoles : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_my_roles.call(this, bstrServerName, pRoles)
    end
    def ping(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ping.call(this, bstrServerName)
    end
    def set_security(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_security.call(this, bstrServerName, bstrVal)
    end
    def get_security(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_security.call(this, bstrServerName, pVal)
    end
    def get_signing_certificates(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, pCACertVar : Win32cr::System::Com::VARIANT*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signing_certificates.call(this, bstrServerName, pCACertVar, pVal)
    end
    def get_hash_algorithms(this : IOCSPAdmin*, bstrServerName : Win32cr::Foundation::BSTR, bstrCAId : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_algorithms.call(this, bstrServerName, bstrCAId, pVal)
    end

  end

  @[Extern]
  record ICertServerPolicyVtbl,
    query_interface : Proc(ICertServerPolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertServerPolicy*, UInt32),
    release : Proc(ICertServerPolicy*, UInt32),
    get_type_info_count : Proc(ICertServerPolicy*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertServerPolicy*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertServerPolicy*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertServerPolicy*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    set_context : Proc(ICertServerPolicy*, Int32, Win32cr::Foundation::HRESULT),
    get_request_property : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_request_attribute : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate_property : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_certificate_property : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_certificate_extension : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_certificate_extension_flags : Proc(ICertServerPolicy*, Int32*, Win32cr::Foundation::HRESULT),
    set_certificate_extension : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_extensions_setup : Proc(ICertServerPolicy*, Int32, Win32cr::Foundation::HRESULT),
    enumerate_extensions : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate_extensions_close : Proc(ICertServerPolicy*, Win32cr::Foundation::HRESULT),
    enumerate_attributes_setup : Proc(ICertServerPolicy*, Int32, Win32cr::Foundation::HRESULT),
    enumerate_attributes : Proc(ICertServerPolicy*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate_attributes_close : Proc(ICertServerPolicy*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertServerPolicy, lpVtbl : ICertServerPolicyVtbl* do
    GUID = LibC::GUID.new(0xaa000922_u32, 0xffbe_u16, 0x11cf_u16, StaticArray[0x88_u8, 0x0_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertServerPolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertServerPolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertServerPolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertServerPolicy*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertServerPolicy*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertServerPolicy*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertServerPolicy*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def set_context(this : ICertServerPolicy*, context : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_context.call(this, context)
    end
    def get_request_property(this : ICertServerPolicy*, strPropertyName : Win32cr::Foundation::BSTR, property_type : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_property.call(this, strPropertyName, property_type, pvarPropertyValue)
    end
    def get_request_attribute(this : ICertServerPolicy*, strAttributeName : Win32cr::Foundation::BSTR, pstrAttributeValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_attribute.call(this, strAttributeName, pstrAttributeValue)
    end
    def get_certificate_property(this : ICertServerPolicy*, strPropertyName : Win32cr::Foundation::BSTR, property_type : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_property.call(this, strPropertyName, property_type, pvarPropertyValue)
    end
    def set_certificate_property(this : ICertServerPolicy*, strPropertyName : Win32cr::Foundation::BSTR, property_type : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_certificate_property.call(this, strPropertyName, property_type, pvarPropertyValue)
    end
    def get_certificate_extension(this : ICertServerPolicy*, strExtensionName : Win32cr::Foundation::BSTR, type__ : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_extension.call(this, strExtensionName, type__, pvarValue)
    end
    def get_certificate_extension_flags(this : ICertServerPolicy*, pExtFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_extension_flags.call(this, pExtFlags)
    end
    def set_certificate_extension(this : ICertServerPolicy*, strExtensionName : Win32cr::Foundation::BSTR, type__ : Int32, ext_flags : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_certificate_extension.call(this, strExtensionName, type__, ext_flags, pvarValue)
    end
    def enumerate_extensions_setup(this : ICertServerPolicy*, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions_setup.call(this, flags)
    end
    def enumerate_extensions(this : ICertServerPolicy*, pstrExtensionName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions.call(this, pstrExtensionName)
    end
    def enumerate_extensions_close(this : ICertServerPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions_close.call(this)
    end
    def enumerate_attributes_setup(this : ICertServerPolicy*, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes_setup.call(this, flags)
    end
    def enumerate_attributes(this : ICertServerPolicy*, pstrAttributeName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes.call(this, pstrAttributeName)
    end
    def enumerate_attributes_close(this : ICertServerPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes_close.call(this)
    end

  end

  @[Extern]
  record ICertServerExitVtbl,
    query_interface : Proc(ICertServerExit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertServerExit*, UInt32),
    release : Proc(ICertServerExit*, UInt32),
    get_type_info_count : Proc(ICertServerExit*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertServerExit*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertServerExit*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertServerExit*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    set_context : Proc(ICertServerExit*, Int32, Win32cr::Foundation::HRESULT),
    get_request_property : Proc(ICertServerExit*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_request_attribute : Proc(ICertServerExit*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate_property : Proc(ICertServerExit*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_certificate_extension : Proc(ICertServerExit*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_certificate_extension_flags : Proc(ICertServerExit*, Int32*, Win32cr::Foundation::HRESULT),
    enumerate_extensions_setup : Proc(ICertServerExit*, Int32, Win32cr::Foundation::HRESULT),
    enumerate_extensions : Proc(ICertServerExit*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate_extensions_close : Proc(ICertServerExit*, Win32cr::Foundation::HRESULT),
    enumerate_attributes_setup : Proc(ICertServerExit*, Int32, Win32cr::Foundation::HRESULT),
    enumerate_attributes : Proc(ICertServerExit*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate_attributes_close : Proc(ICertServerExit*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertServerExit, lpVtbl : ICertServerExitVtbl* do
    GUID = LibC::GUID.new(0x4ba9eb90_u32, 0x732c_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertServerExit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertServerExit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertServerExit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertServerExit*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertServerExit*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertServerExit*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertServerExit*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def set_context(this : ICertServerExit*, context : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_context.call(this, context)
    end
    def get_request_property(this : ICertServerExit*, strPropertyName : Win32cr::Foundation::BSTR, property_type : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_property.call(this, strPropertyName, property_type, pvarPropertyValue)
    end
    def get_request_attribute(this : ICertServerExit*, strAttributeName : Win32cr::Foundation::BSTR, pstrAttributeValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_attribute.call(this, strAttributeName, pstrAttributeValue)
    end
    def get_certificate_property(this : ICertServerExit*, strPropertyName : Win32cr::Foundation::BSTR, property_type : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_property.call(this, strPropertyName, property_type, pvarPropertyValue)
    end
    def get_certificate_extension(this : ICertServerExit*, strExtensionName : Win32cr::Foundation::BSTR, type__ : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_extension.call(this, strExtensionName, type__, pvarValue)
    end
    def get_certificate_extension_flags(this : ICertServerExit*, pExtFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_extension_flags.call(this, pExtFlags)
    end
    def enumerate_extensions_setup(this : ICertServerExit*, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions_setup.call(this, flags)
    end
    def enumerate_extensions(this : ICertServerExit*, pstrExtensionName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions.call(this, pstrExtensionName)
    end
    def enumerate_extensions_close(this : ICertServerExit*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_extensions_close.call(this)
    end
    def enumerate_attributes_setup(this : ICertServerExit*, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes_setup.call(this, flags)
    end
    def enumerate_attributes(this : ICertServerExit*, pstrAttributeName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes.call(this, pstrAttributeName)
    end
    def enumerate_attributes_close(this : ICertServerExit*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_attributes_close.call(this)
    end

  end

  @[Extern]
  record ICertGetConfigVtbl,
    query_interface : Proc(ICertGetConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertGetConfig*, UInt32),
    release : Proc(ICertGetConfig*, UInt32),
    get_type_info_count : Proc(ICertGetConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertGetConfig*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertGetConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertGetConfig*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_config : Proc(ICertGetConfig*, Win32cr::Security::Cryptography::Certificates::CERT_GET_CONFIG_FLAGS, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertGetConfig, lpVtbl : ICertGetConfigVtbl* do
    GUID = LibC::GUID.new(0xc7ea09c0_u32, 0xce17_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x33_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertGetConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertGetConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertGetConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertGetConfig*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertGetConfig*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertGetConfig*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertGetConfig*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_config(this : ICertGetConfig*, flags : Win32cr::Security::Cryptography::Certificates::CERT_GET_CONFIG_FLAGS, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_config.call(this, flags, pstrOut)
    end

  end

  @[Extern]
  record ICertConfigVtbl,
    query_interface : Proc(ICertConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertConfig*, UInt32),
    release : Proc(ICertConfig*, UInt32),
    get_type_info_count : Proc(ICertConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertConfig*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertConfig*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertConfig*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(ICertConfig*, Int32*, Win32cr::Foundation::HRESULT),
    get_field : Proc(ICertConfig*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_config : Proc(ICertConfig*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertConfig, lpVtbl : ICertConfigVtbl* do
    GUID = LibC::GUID.new(0x372fce34_u32, 0x4324_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x10_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertConfig*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertConfig*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertConfig*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertConfig*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def reset(this : ICertConfig*, index : Int32, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, index, pCount)
    end
    def next__(this : ICertConfig*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def get_field(this : ICertConfig*, strFieldName : Win32cr::Foundation::BSTR, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field.call(this, strFieldName, pstrOut)
    end
    def get_config(this : ICertConfig*, flags : Int32, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_config.call(this, flags, pstrOut)
    end

  end

  @[Extern]
  record ICertConfig2Vtbl,
    query_interface : Proc(ICertConfig2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertConfig2*, UInt32),
    release : Proc(ICertConfig2*, UInt32),
    get_type_info_count : Proc(ICertConfig2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertConfig2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertConfig2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertConfig2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertConfig2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    next__ : Proc(ICertConfig2*, Int32*, Win32cr::Foundation::HRESULT),
    get_field : Proc(ICertConfig2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_config : Proc(ICertConfig2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_shared_folder : Proc(ICertConfig2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertConfig2, lpVtbl : ICertConfig2Vtbl* do
    GUID = LibC::GUID.new(0x7a18edde_u32, 0x7e78_u16, 0x4163_u16, StaticArray[0x8d_u8, 0xed_u8, 0x78_u8, 0xe2_u8, 0xc9_u8, 0xce_u8, 0xe9_u8, 0x24_u8])
    def query_interface(this : ICertConfig2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertConfig2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertConfig2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertConfig2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertConfig2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertConfig2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertConfig2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def reset(this : ICertConfig2*, index : Int32, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, index, pCount)
    end
    def next__(this : ICertConfig2*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, pIndex)
    end
    def get_field(this : ICertConfig2*, strFieldName : Win32cr::Foundation::BSTR, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_field.call(this, strFieldName, pstrOut)
    end
    def get_config(this : ICertConfig2*, flags : Int32, pstrOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_config.call(this, flags, pstrOut)
    end
    def set_shared_folder(this : ICertConfig2*, strSharedFolder : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_shared_folder.call(this, strSharedFolder)
    end

  end

  @[Extern]
  record ICertRequestVtbl,
    query_interface : Proc(ICertRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertRequest*, UInt32),
    release : Proc(ICertRequest*, UInt32),
    get_type_info_count : Proc(ICertRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    submit : Proc(ICertRequest*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    retrieve_pending : Proc(ICertRequest*, Int32, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    get_last_status : Proc(ICertRequest*, Int32*, Win32cr::Foundation::HRESULT),
    get_request_id : Proc(ICertRequest*, Int32*, Win32cr::Foundation::HRESULT),
    get_disposition_message : Proc(ICertRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ca_certificate : Proc(ICertRequest*, Int32, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate : Proc(ICertRequest*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertRequest, lpVtbl : ICertRequestVtbl* do
    GUID = LibC::GUID.new(0x14e4840_u32, 0x5523_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x12_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def submit(this : ICertRequest*, flags : Int32, strRequest : Win32cr::Foundation::BSTR, strAttributes : Win32cr::Foundation::BSTR, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.submit.call(this, flags, strRequest, strAttributes, strConfig, pDisposition)
    end
    def retrieve_pending(this : ICertRequest*, request_id : Int32, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.retrieve_pending.call(this, request_id, strConfig, pDisposition)
    end
    def get_last_status(this : ICertRequest*, pStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_status.call(this, pStatus)
    end
    def get_request_id(this : ICertRequest*, pRequestId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id.call(this, pRequestId)
    end
    def get_disposition_message(this : ICertRequest*, pstrDispositionMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disposition_message.call(this, pstrDispositionMessage)
    end
    def get_ca_certificate(this : ICertRequest*, fExchangeCertificate : Int32, strConfig : Win32cr::Foundation::BSTR, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_certificate.call(this, fExchangeCertificate, strConfig, flags, pstrCertificate)
    end
    def get_certificate(this : ICertRequest*, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, flags, pstrCertificate)
    end

  end

  @[Extern]
  record ICertRequest2Vtbl,
    query_interface : Proc(ICertRequest2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertRequest2*, UInt32),
    release : Proc(ICertRequest2*, UInt32),
    get_type_info_count : Proc(ICertRequest2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertRequest2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertRequest2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertRequest2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    submit : Proc(ICertRequest2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    retrieve_pending : Proc(ICertRequest2*, Int32, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    get_last_status : Proc(ICertRequest2*, Int32*, Win32cr::Foundation::HRESULT),
    get_request_id : Proc(ICertRequest2*, Int32*, Win32cr::Foundation::HRESULT),
    get_disposition_message : Proc(ICertRequest2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ca_certificate : Proc(ICertRequest2*, Int32, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate : Proc(ICertRequest2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_issued_certificate : Proc(ICertRequest2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CR_DISP*, Win32cr::Foundation::HRESULT),
    get_error_message_text : Proc(ICertRequest2*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ca_property : Proc(ICertRequest2*, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_ca_property_flags : Proc(ICertRequest2*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_ca_property_display_name : Proc(ICertRequest2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_full_response_property : Proc(ICertRequest2*, Win32cr::Security::Cryptography::Certificates::FULL_RESPONSE_PROPERTY_ID, Int32, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::Security::Cryptography::Certificates::CERT_REQUEST_OUT_TYPE, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertRequest2, lpVtbl : ICertRequest2Vtbl* do
    GUID = LibC::GUID.new(0xa4772988_u32, 0x4a85_u16, 0x4fa9_u16, StaticArray[0x82_u8, 0x4e_u8, 0xb5_u8, 0xcf_u8, 0x5c_u8, 0x16_u8, 0x40_u8, 0x5a_u8])
    def query_interface(this : ICertRequest2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertRequest2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertRequest2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertRequest2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertRequest2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertRequest2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertRequest2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def submit(this : ICertRequest2*, flags : Int32, strRequest : Win32cr::Foundation::BSTR, strAttributes : Win32cr::Foundation::BSTR, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.submit.call(this, flags, strRequest, strAttributes, strConfig, pDisposition)
    end
    def retrieve_pending(this : ICertRequest2*, request_id : Int32, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.retrieve_pending.call(this, request_id, strConfig, pDisposition)
    end
    def get_last_status(this : ICertRequest2*, pStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_status.call(this, pStatus)
    end
    def get_request_id(this : ICertRequest2*, pRequestId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id.call(this, pRequestId)
    end
    def get_disposition_message(this : ICertRequest2*, pstrDispositionMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disposition_message.call(this, pstrDispositionMessage)
    end
    def get_ca_certificate(this : ICertRequest2*, fExchangeCertificate : Int32, strConfig : Win32cr::Foundation::BSTR, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_certificate.call(this, fExchangeCertificate, strConfig, flags, pstrCertificate)
    end
    def get_certificate(this : ICertRequest2*, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, flags, pstrCertificate)
    end
    def get_issued_certificate(this : ICertRequest2*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strSerialNumber : Win32cr::Foundation::BSTR, pDisposition : Win32cr::Security::Cryptography::Certificates::CR_DISP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_issued_certificate.call(this, strConfig, request_id, strSerialNumber, pDisposition)
    end
    def get_error_message_text(this : ICertRequest2*, hrMessage : Int32, flags : Int32, pstrErrorMessageText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_message_text.call(this, hrMessage, flags, pstrErrorMessageText)
    end
    def get_ca_property(this : ICertRequest2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, prop_index : Int32, prop_type : Int32, flags : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property.call(this, strConfig, prop_id, prop_index, prop_type, flags, pvarPropertyValue)
    end
    def get_ca_property_flags(this : ICertRequest2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pPropFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_flags.call(this, strConfig, prop_id, pPropFlags)
    end
    def get_ca_property_display_name(this : ICertRequest2*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pstrDisplayName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_display_name.call(this, strConfig, prop_id, pstrDisplayName)
    end
    def get_full_response_property(this : ICertRequest2*, prop_id : Win32cr::Security::Cryptography::Certificates::FULL_RESPONSE_PROPERTY_ID, prop_index : Int32, prop_type : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, flags : Win32cr::Security::Cryptography::Certificates::CERT_REQUEST_OUT_TYPE, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_full_response_property.call(this, prop_id, prop_index, prop_type, flags, pvarPropertyValue)
    end

  end

  @[Extern]
  record ICertRequest3Vtbl,
    query_interface : Proc(ICertRequest3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertRequest3*, UInt32),
    release : Proc(ICertRequest3*, UInt32),
    get_type_info_count : Proc(ICertRequest3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertRequest3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertRequest3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertRequest3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    submit : Proc(ICertRequest3*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    retrieve_pending : Proc(ICertRequest3*, Int32, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    get_last_status : Proc(ICertRequest3*, Int32*, Win32cr::Foundation::HRESULT),
    get_request_id : Proc(ICertRequest3*, Int32*, Win32cr::Foundation::HRESULT),
    get_disposition_message : Proc(ICertRequest3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ca_certificate : Proc(ICertRequest3*, Int32, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate : Proc(ICertRequest3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_issued_certificate : Proc(ICertRequest3*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CR_DISP*, Win32cr::Foundation::HRESULT),
    get_error_message_text : Proc(ICertRequest3*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ca_property : Proc(ICertRequest3*, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_ca_property_flags : Proc(ICertRequest3*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_ca_property_display_name : Proc(ICertRequest3*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_full_response_property : Proc(ICertRequest3*, Win32cr::Security::Cryptography::Certificates::FULL_RESPONSE_PROPERTY_ID, Int32, Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, Win32cr::Security::Cryptography::Certificates::CERT_REQUEST_OUT_TYPE, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_credential : Proc(ICertRequest3*, Int32, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_request_id_string : Proc(ICertRequest3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_issued_certificate2 : Proc(ICertRequest3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CR_DISP*, Win32cr::Foundation::HRESULT),
    get_refresh_policy : Proc(ICertRequest3*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertRequest3, lpVtbl : ICertRequest3Vtbl* do
    GUID = LibC::GUID.new(0xafc8f92b_u32, 0x33a2_u16, 0x4861_u16, StaticArray[0xbf_u8, 0x36_u8, 0x29_u8, 0x33_u8, 0xb7_u8, 0xcd_u8, 0x67_u8, 0xb3_u8])
    def query_interface(this : ICertRequest3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertRequest3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertRequest3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertRequest3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertRequest3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertRequest3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertRequest3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def submit(this : ICertRequest3*, flags : Int32, strRequest : Win32cr::Foundation::BSTR, strAttributes : Win32cr::Foundation::BSTR, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.submit.call(this, flags, strRequest, strAttributes, strConfig, pDisposition)
    end
    def retrieve_pending(this : ICertRequest3*, request_id : Int32, strConfig : Win32cr::Foundation::BSTR, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.retrieve_pending.call(this, request_id, strConfig, pDisposition)
    end
    def get_last_status(this : ICertRequest3*, pStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_status.call(this, pStatus)
    end
    def get_request_id(this : ICertRequest3*, pRequestId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id.call(this, pRequestId)
    end
    def get_disposition_message(this : ICertRequest3*, pstrDispositionMessage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disposition_message.call(this, pstrDispositionMessage)
    end
    def get_ca_certificate(this : ICertRequest3*, fExchangeCertificate : Int32, strConfig : Win32cr::Foundation::BSTR, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_certificate.call(this, fExchangeCertificate, strConfig, flags, pstrCertificate)
    end
    def get_certificate(this : ICertRequest3*, flags : Int32, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, flags, pstrCertificate)
    end
    def get_issued_certificate(this : ICertRequest3*, strConfig : Win32cr::Foundation::BSTR, request_id : Int32, strSerialNumber : Win32cr::Foundation::BSTR, pDisposition : Win32cr::Security::Cryptography::Certificates::CR_DISP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_issued_certificate.call(this, strConfig, request_id, strSerialNumber, pDisposition)
    end
    def get_error_message_text(this : ICertRequest3*, hrMessage : Int32, flags : Int32, pstrErrorMessageText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_message_text.call(this, hrMessage, flags, pstrErrorMessageText)
    end
    def get_ca_property(this : ICertRequest3*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, prop_index : Int32, prop_type : Int32, flags : Int32, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property.call(this, strConfig, prop_id, prop_index, prop_type, flags, pvarPropertyValue)
    end
    def get_ca_property_flags(this : ICertRequest3*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pPropFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_flags.call(this, strConfig, prop_id, pPropFlags)
    end
    def get_ca_property_display_name(this : ICertRequest3*, strConfig : Win32cr::Foundation::BSTR, prop_id : Int32, pstrDisplayName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_display_name.call(this, strConfig, prop_id, pstrDisplayName)
    end
    def get_full_response_property(this : ICertRequest3*, prop_id : Win32cr::Security::Cryptography::Certificates::FULL_RESPONSE_PROPERTY_ID, prop_index : Int32, prop_type : Win32cr::Security::Cryptography::Certificates::CERT_PROPERTY_TYPE, flags : Win32cr::Security::Cryptography::Certificates::CERT_REQUEST_OUT_TYPE, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_full_response_property.call(this, prop_id, prop_index, prop_type, flags, pvarPropertyValue)
    end
    def set_credential(this : ICertRequest3*, hWnd : Int32, auth_type : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, strCredential : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_credential.call(this, hWnd, auth_type, strCredential, strPassword)
    end
    def get_request_id_string(this : ICertRequest3*, pstrRequestId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id_string.call(this, pstrRequestId)
    end
    def get_issued_certificate2(this : ICertRequest3*, strConfig : Win32cr::Foundation::BSTR, strRequestId : Win32cr::Foundation::BSTR, strSerialNumber : Win32cr::Foundation::BSTR, pDisposition : Win32cr::Security::Cryptography::Certificates::CR_DISP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_issued_certificate2.call(this, strConfig, strRequestId, strSerialNumber, pDisposition)
    end
    def get_refresh_policy(this : ICertRequest3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_refresh_policy.call(this, pValue)
    end

  end

  @[Extern]
  record ICertManageModuleVtbl,
    query_interface : Proc(ICertManageModule*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertManageModule*, UInt32),
    release : Proc(ICertManageModule*, UInt32),
    get_type_info_count : Proc(ICertManageModule*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertManageModule*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertManageModule*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertManageModule*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_property : Proc(ICertManageModule*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(ICertManageModule*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    configure : Proc(ICertManageModule*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertManageModule, lpVtbl : ICertManageModuleVtbl* do
    GUID = LibC::GUID.new(0xe7d7ad42_u32, 0xbd3d_u16, 0x11d1_u16, StaticArray[0x9a_u8, 0x4d_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x97_u8, 0xeb_u8])
    def query_interface(this : ICertManageModule*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertManageModule*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertManageModule*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertManageModule*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertManageModule*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertManageModule*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertManageModule*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_property(this : ICertManageModule*, strConfig : Win32cr::Foundation::BSTR, strStorageLocation : Win32cr::Foundation::BSTR, strPropertyName : Win32cr::Foundation::BSTR, flags : Int32, pvarProperty : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, strConfig, strStorageLocation, strPropertyName, flags, pvarProperty)
    end
    def set_property(this : ICertManageModule*, strConfig : Win32cr::Foundation::BSTR, strStorageLocation : Win32cr::Foundation::BSTR, strPropertyName : Win32cr::Foundation::BSTR, flags : Int32, pvarProperty : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, strConfig, strStorageLocation, strPropertyName, flags, pvarProperty)
    end
    def configure(this : ICertManageModule*, strConfig : Win32cr::Foundation::BSTR, strStorageLocation : Win32cr::Foundation::BSTR, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure.call(this, strConfig, strStorageLocation, flags)
    end

  end

  @[Extern]
  record ICertPolicyVtbl,
    query_interface : Proc(ICertPolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPolicy*, UInt32),
    release : Proc(ICertPolicy*, UInt32),
    get_type_info_count : Proc(ICertPolicy*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPolicy*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPolicy*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPolicy*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPolicy*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    verify_request : Proc(ICertPolicy*, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(ICertPolicy*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    shut_down : Proc(ICertPolicy*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPolicy, lpVtbl : ICertPolicyVtbl* do
    GUID = LibC::GUID.new(0x38bb5a00_u32, 0x7636_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x13_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1b_u8, 0xbf_u8, 0x8c_u8])
    def query_interface(this : ICertPolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPolicy*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPolicy*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPolicy*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPolicy*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertPolicy*, strConfig : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strConfig)
    end
    def verify_request(this : ICertPolicy*, strConfig : Win32cr::Foundation::BSTR, context : Int32, bNewRequest : Int32, flags : Int32, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_request.call(this, strConfig, context, bNewRequest, flags, pDisposition)
    end
    def get_description(this : ICertPolicy*, pstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pstrDescription)
    end
    def shut_down(this : ICertPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shut_down.call(this)
    end

  end

  @[Extern]
  record ICertPolicy2Vtbl,
    query_interface : Proc(ICertPolicy2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPolicy2*, UInt32),
    release : Proc(ICertPolicy2*, UInt32),
    get_type_info_count : Proc(ICertPolicy2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPolicy2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPolicy2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPolicy2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPolicy2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    verify_request : Proc(ICertPolicy2*, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(ICertPolicy2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    shut_down : Proc(ICertPolicy2*, Win32cr::Foundation::HRESULT),
    get_manage_module : Proc(ICertPolicy2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPolicy2, lpVtbl : ICertPolicy2Vtbl* do
    GUID = LibC::GUID.new(0x3db4910e_u32, 0x8001_u16, 0x4bf1_u16, StaticArray[0xaa_u8, 0x1b_u8, 0xf4_u8, 0x3a_u8, 0x80_u8, 0x83_u8, 0x17_u8, 0xa0_u8])
    def query_interface(this : ICertPolicy2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPolicy2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPolicy2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPolicy2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPolicy2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPolicy2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPolicy2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertPolicy2*, strConfig : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strConfig)
    end
    def verify_request(this : ICertPolicy2*, strConfig : Win32cr::Foundation::BSTR, context : Int32, bNewRequest : Int32, flags : Int32, pDisposition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_request.call(this, strConfig, context, bNewRequest, flags, pDisposition)
    end
    def get_description(this : ICertPolicy2*, pstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pstrDescription)
    end
    def shut_down(this : ICertPolicy2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shut_down.call(this)
    end
    def get_manage_module(this : ICertPolicy2*, ppManageModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_manage_module.call(this, ppManageModule)
    end

  end

  @[Extern]
  record INDESPolicyVtbl,
    query_interface : Proc(INDESPolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(INDESPolicy*, UInt32),
    release : Proc(INDESPolicy*, UInt32),
    initialize__ : Proc(INDESPolicy*, Win32cr::Foundation::HRESULT),
    uninitialize : Proc(INDESPolicy*, Win32cr::Foundation::HRESULT),
    generate_challenge : Proc(INDESPolicy*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    verify_request : Proc(INDESPolicy*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    notify : Proc(INDESPolicy*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition, Int32, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record INDESPolicy, lpVtbl : INDESPolicyVtbl* do
    GUID = LibC::GUID.new(0x13ca515d_u32, 0x431d_u16, 0x46cc_u16, StaticArray[0x8c_u8, 0x2e_u8, 0x1d_u8, 0xa2_u8, 0x69_u8, 0xbb_u8, 0xd6_u8, 0x25_u8])
    def query_interface(this : INDESPolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : INDESPolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : INDESPolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : INDESPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this)
    end
    def uninitialize(this : INDESPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninitialize.call(this)
    end
    def generate_challenge(this : INDESPolicy*, pwszTemplate : Win32cr::Foundation::PWSTR, pwszParams : Win32cr::Foundation::PWSTR, ppwszResponse : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_challenge.call(this, pwszTemplate, pwszParams, ppwszResponse)
    end
    def verify_request(this : INDESPolicy*, pctbRequest : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbSigningCertEncoded : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pwszTemplate : Win32cr::Foundation::PWSTR, pwszTransactionId : Win32cr::Foundation::PWSTR, pfVerified : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_request.call(this, pctbRequest, pctbSigningCertEncoded, pwszTemplate, pwszTransactionId, pfVerified)
    end
    def notify(this : INDESPolicy*, pwszChallenge : Win32cr::Foundation::PWSTR, pwszTransactionId : Win32cr::Foundation::PWSTR, disposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition, lastHResult : Int32, pctbIssuedCertEncoded : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, pwszChallenge, pwszTransactionId, disposition, lastHResult, pctbIssuedCertEncoded)
    end

  end

  @[Extern]
  record IObjectIdVtbl,
    query_interface : Proc(IObjectId*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectId*, UInt32),
    release : Proc(IObjectId*, UInt32),
    get_type_info_count : Proc(IObjectId*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IObjectId*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IObjectId*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IObjectId*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_name : Proc(IObjectId*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_OBJECTID, Win32cr::Foundation::HRESULT),
    initialize_from_value : Proc(IObjectId*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_algorithm_name : Proc(IObjectId*, Win32cr::Security::Cryptography::Certificates::ObjectIdGroupId, Win32cr::Security::Cryptography::Certificates::ObjectIdPublicKeyFlags, Win32cr::Security::Cryptography::Certificates::AlgorithmFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IObjectId*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_OBJECTID*, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IObjectId*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IObjectId*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Value : Proc(IObjectId*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_algorithm_name : Proc(IObjectId*, Win32cr::Security::Cryptography::Certificates::ObjectIdGroupId, Win32cr::Security::Cryptography::Certificates::ObjectIdPublicKeyFlags, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectId, lpVtbl : IObjectIdVtbl* do
    GUID = LibC::GUID.new(0x728ab300_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IObjectId*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectId*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectId*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IObjectId*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IObjectId*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IObjectId*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IObjectId*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_name(this : IObjectId*, name : Win32cr::Security::Cryptography::Certificates::CERTENROLL_OBJECTID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_name.call(this, name)
    end
    def initialize_from_value(this : IObjectId*, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_value.call(this, strValue)
    end
    def initialize_from_algorithm_name(this : IObjectId*, group_id : Win32cr::Security::Cryptography::Certificates::ObjectIdGroupId, key_flags : Win32cr::Security::Cryptography::Certificates::ObjectIdPublicKeyFlags, alg_flags : Win32cr::Security::Cryptography::Certificates::AlgorithmFlags, strAlgorithmName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_algorithm_name.call(this, group_id, key_flags, alg_flags, strAlgorithmName)
    end
    def get_Name(this : IObjectId*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_OBJECTID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pValue)
    end
    def get_FriendlyName(this : IObjectId*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, pValue)
    end
    def put_FriendlyName(this : IObjectId*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, value)
    end
    def get_Value(this : IObjectId*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Value.call(this, pValue)
    end
    def get_algorithm_name(this : IObjectId*, group_id : Win32cr::Security::Cryptography::Certificates::ObjectIdGroupId, key_flags : Win32cr::Security::Cryptography::Certificates::ObjectIdPublicKeyFlags, pstrAlgorithmName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_algorithm_name.call(this, group_id, key_flags, pstrAlgorithmName)
    end

  end

  @[Extern]
  record IObjectIdsVtbl,
    query_interface : Proc(IObjectIds*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IObjectIds*, UInt32),
    release : Proc(IObjectIds*, UInt32),
    get_type_info_count : Proc(IObjectIds*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IObjectIds*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IObjectIds*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IObjectIds*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IObjectIds*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IObjectIds*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IObjectIds*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IObjectIds*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IObjectIds*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IObjectIds*, Win32cr::Foundation::HRESULT),
    add_range : Proc(IObjectIds*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IObjectIds, lpVtbl : IObjectIdsVtbl* do
    GUID = LibC::GUID.new(0x728ab301_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IObjectIds*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IObjectIds*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IObjectIds*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IObjectIds*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IObjectIds*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IObjectIds*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IObjectIds*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IObjectIds*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IObjectIds*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IObjectIds*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IObjectIds*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IObjectIds*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IObjectIds*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def add_range(this : IObjectIds*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_range.call(this, pValue)
    end

  end

  @[Extern]
  record IBinaryConverterVtbl,
    query_interface : Proc(IBinaryConverter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBinaryConverter*, UInt32),
    release : Proc(IBinaryConverter*, UInt32),
    get_type_info_count : Proc(IBinaryConverter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBinaryConverter*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBinaryConverter*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBinaryConverter*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    string_to_string : Proc(IBinaryConverter*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    variant_byte_array_to_string : Proc(IBinaryConverter*, Win32cr::System::Com::VARIANT*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    string_to_variant_byte_array : Proc(IBinaryConverter*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBinaryConverter, lpVtbl : IBinaryConverterVtbl* do
    GUID = LibC::GUID.new(0x728ab302_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IBinaryConverter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBinaryConverter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBinaryConverter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBinaryConverter*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBinaryConverter*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBinaryConverter*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBinaryConverter*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def string_to_string(this : IBinaryConverter*, strEncodedIn : Win32cr::Foundation::BSTR, encoding_in : Win32cr::Security::Cryptography::Certificates::EncodingType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncoded : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.string_to_string.call(this, strEncodedIn, encoding_in, encoding, pstrEncoded)
    end
    def variant_byte_array_to_string(this : IBinaryConverter*, pvarByteArray : Win32cr::System::Com::VARIANT*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncoded : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.variant_byte_array_to_string.call(this, pvarByteArray, encoding, pstrEncoded)
    end
    def string_to_variant_byte_array(this : IBinaryConverter*, strEncoded : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pvarByteArray : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.string_to_variant_byte_array.call(this, strEncoded, encoding, pvarByteArray)
    end

  end

  @[Extern]
  record IBinaryConverter2Vtbl,
    query_interface : Proc(IBinaryConverter2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBinaryConverter2*, UInt32),
    release : Proc(IBinaryConverter2*, UInt32),
    get_type_info_count : Proc(IBinaryConverter2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBinaryConverter2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBinaryConverter2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBinaryConverter2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    string_to_string : Proc(IBinaryConverter2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    variant_byte_array_to_string : Proc(IBinaryConverter2*, Win32cr::System::Com::VARIANT*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    string_to_variant_byte_array : Proc(IBinaryConverter2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    string_array_to_variant_array : Proc(IBinaryConverter2*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    variant_array_to_string_array : Proc(IBinaryConverter2*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBinaryConverter2, lpVtbl : IBinaryConverter2Vtbl* do
    GUID = LibC::GUID.new(0x8d7928b4_u32, 0x4e17_u16, 0x428d_u16, StaticArray[0x9a_u8, 0x17_u8, 0x72_u8, 0x8d_u8, 0xf0_u8, 0xd_u8, 0x1b_u8, 0x2b_u8])
    def query_interface(this : IBinaryConverter2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBinaryConverter2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBinaryConverter2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBinaryConverter2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBinaryConverter2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBinaryConverter2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBinaryConverter2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def string_to_string(this : IBinaryConverter2*, strEncodedIn : Win32cr::Foundation::BSTR, encoding_in : Win32cr::Security::Cryptography::Certificates::EncodingType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncoded : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.string_to_string.call(this, strEncodedIn, encoding_in, encoding, pstrEncoded)
    end
    def variant_byte_array_to_string(this : IBinaryConverter2*, pvarByteArray : Win32cr::System::Com::VARIANT*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncoded : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.variant_byte_array_to_string.call(this, pvarByteArray, encoding, pstrEncoded)
    end
    def string_to_variant_byte_array(this : IBinaryConverter2*, strEncoded : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pvarByteArray : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.string_to_variant_byte_array.call(this, strEncoded, encoding, pvarByteArray)
    end
    def string_array_to_variant_array(this : IBinaryConverter2*, pvarStringArray : Win32cr::System::Com::VARIANT*, pvarVariantArray : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.string_array_to_variant_array.call(this, pvarStringArray, pvarVariantArray)
    end
    def variant_array_to_string_array(this : IBinaryConverter2*, pvarVariantArray : Win32cr::System::Com::VARIANT*, pvarStringArray : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.variant_array_to_string_array.call(this, pvarVariantArray, pvarStringArray)
    end

  end

  @[Extern]
  record IX500DistinguishedNameVtbl,
    query_interface : Proc(IX500DistinguishedName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX500DistinguishedName*, UInt32),
    release : Proc(IX500DistinguishedName*, UInt32),
    get_type_info_count : Proc(IX500DistinguishedName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX500DistinguishedName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX500DistinguishedName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX500DistinguishedName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(IX500DistinguishedName*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X500NameFlags, Win32cr::Foundation::HRESULT),
    encode : Proc(IX500DistinguishedName*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::X500NameFlags, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IX500DistinguishedName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_EncodedName : Proc(IX500DistinguishedName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX500DistinguishedName, lpVtbl : IX500DistinguishedNameVtbl* do
    GUID = LibC::GUID.new(0x728ab303_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX500DistinguishedName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX500DistinguishedName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX500DistinguishedName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX500DistinguishedName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX500DistinguishedName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX500DistinguishedName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX500DistinguishedName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : IX500DistinguishedName*, strEncodedName : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, name_flags : Win32cr::Security::Cryptography::Certificates::X500NameFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strEncodedName, encoding, name_flags)
    end
    def encode(this : IX500DistinguishedName*, strName : Win32cr::Foundation::BSTR, name_flags : Win32cr::Security::Cryptography::Certificates::X500NameFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, strName, name_flags)
    end
    def get_Name(this : IX500DistinguishedName*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pValue)
    end
    def get_EncodedName(this : IX500DistinguishedName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncodedName.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509EnrollmentStatusVtbl,
    query_interface : Proc(IX509EnrollmentStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509EnrollmentStatus*, UInt32),
    release : Proc(IX509EnrollmentStatus*, UInt32),
    get_type_info_count : Proc(IX509EnrollmentStatus*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509EnrollmentStatus*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509EnrollmentStatus*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509EnrollmentStatus*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    append_text : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Text : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Text : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Selected : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentSelectionStatus*, Win32cr::Foundation::HRESULT),
    put_Selected : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentSelectionStatus, Win32cr::Foundation::HRESULT),
    get_Display : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentDisplayStatus*, Win32cr::Foundation::HRESULT),
    put_Display : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentDisplayStatus, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentEnrollStatus*, Win32cr::Foundation::HRESULT),
    put_Status : Proc(IX509EnrollmentStatus*, Win32cr::Security::Cryptography::Certificates::EnrollmentEnrollStatus, Win32cr::Foundation::HRESULT),
    get_Error : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    put_Error : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    get_ErrorText : Proc(IX509EnrollmentStatus*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509EnrollmentStatus, lpVtbl : IX509EnrollmentStatusVtbl* do
    GUID = LibC::GUID.new(0x728ab304_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509EnrollmentStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509EnrollmentStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509EnrollmentStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509EnrollmentStatus*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509EnrollmentStatus*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509EnrollmentStatus*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509EnrollmentStatus*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def append_text(this : IX509EnrollmentStatus*, strText : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_text.call(this, strText)
    end
    def get_Text(this : IX509EnrollmentStatus*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Text.call(this, pValue)
    end
    def put_Text(this : IX509EnrollmentStatus*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Text.call(this, value)
    end
    def get_Selected(this : IX509EnrollmentStatus*, pValue : Win32cr::Security::Cryptography::Certificates::EnrollmentSelectionStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Selected.call(this, pValue)
    end
    def put_Selected(this : IX509EnrollmentStatus*, value : Win32cr::Security::Cryptography::Certificates::EnrollmentSelectionStatus) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Selected.call(this, value)
    end
    def get_Display(this : IX509EnrollmentStatus*, pValue : Win32cr::Security::Cryptography::Certificates::EnrollmentDisplayStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Display.call(this, pValue)
    end
    def put_Display(this : IX509EnrollmentStatus*, value : Win32cr::Security::Cryptography::Certificates::EnrollmentDisplayStatus) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Display.call(this, value)
    end
    def get_Status(this : IX509EnrollmentStatus*, pValue : Win32cr::Security::Cryptography::Certificates::EnrollmentEnrollStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, pValue)
    end
    def put_Status(this : IX509EnrollmentStatus*, value : Win32cr::Security::Cryptography::Certificates::EnrollmentEnrollStatus) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Status.call(this, value)
    end
    def get_Error(this : IX509EnrollmentStatus*, pValue : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, pValue)
    end
    def put_Error(this : IX509EnrollmentStatus*, value : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Error.call(this, value)
    end
    def get_ErrorText(this : IX509EnrollmentStatus*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorText.call(this, pValue)
    end

  end

  @[Extern]
  record ICspAlgorithmVtbl,
    query_interface : Proc(ICspAlgorithm*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspAlgorithm*, UInt32),
    release : Proc(ICspAlgorithm*, UInt32),
    get_type_info_count : Proc(ICspAlgorithm*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspAlgorithm*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspAlgorithm*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspAlgorithm*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_algorithm_oid : Proc(ICspAlgorithm*, Int32, Win32cr::Security::Cryptography::Certificates::AlgorithmFlags, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultLength : Proc(ICspAlgorithm*, Int32*, Win32cr::Foundation::HRESULT),
    get_IncrementLength : Proc(ICspAlgorithm*, Int32*, Win32cr::Foundation::HRESULT),
    get_LongName : Proc(ICspAlgorithm*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Valid : Proc(ICspAlgorithm*, Int16*, Win32cr::Foundation::HRESULT),
    get_MaxLength : Proc(ICspAlgorithm*, Int32*, Win32cr::Foundation::HRESULT),
    get_MinLength : Proc(ICspAlgorithm*, Int32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ICspAlgorithm*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(ICspAlgorithm*, Win32cr::Security::Cryptography::Certificates::AlgorithmType*, Win32cr::Foundation::HRESULT),
    get_Operations : Proc(ICspAlgorithm*, Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspAlgorithm, lpVtbl : ICspAlgorithmVtbl* do
    GUID = LibC::GUID.new(0x728ab305_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspAlgorithm*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspAlgorithm*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspAlgorithm*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspAlgorithm*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspAlgorithm*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspAlgorithm*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspAlgorithm*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_algorithm_oid(this : ICspAlgorithm*, length : Int32, alg_flags : Win32cr::Security::Cryptography::Certificates::AlgorithmFlags, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_algorithm_oid.call(this, length, alg_flags, ppValue)
    end
    def get_DefaultLength(this : ICspAlgorithm*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLength.call(this, pValue)
    end
    def get_IncrementLength(this : ICspAlgorithm*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IncrementLength.call(this, pValue)
    end
    def get_LongName(this : ICspAlgorithm*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LongName.call(this, pValue)
    end
    def get_Valid(this : ICspAlgorithm*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Valid.call(this, pValue)
    end
    def get_MaxLength(this : ICspAlgorithm*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxLength.call(this, pValue)
    end
    def get_MinLength(this : ICspAlgorithm*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinLength.call(this, pValue)
    end
    def get_Name(this : ICspAlgorithm*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pValue)
    end
    def get_Type(this : ICspAlgorithm*, pValue : Win32cr::Security::Cryptography::Certificates::AlgorithmType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_Operations(this : ICspAlgorithm*, pValue : Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Operations.call(this, pValue)
    end

  end

  @[Extern]
  record ICspAlgorithmsVtbl,
    query_interface : Proc(ICspAlgorithms*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspAlgorithms*, UInt32),
    release : Proc(ICspAlgorithms*, UInt32),
    get_type_info_count : Proc(ICspAlgorithms*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspAlgorithms*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspAlgorithms*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspAlgorithms*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICspAlgorithms*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICspAlgorithms*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICspAlgorithms*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICspAlgorithms*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICspAlgorithms*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICspAlgorithms*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(ICspAlgorithms*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_IndexByObjectId : Proc(ICspAlgorithms*, Void*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspAlgorithms, lpVtbl : ICspAlgorithmsVtbl* do
    GUID = LibC::GUID.new(0x728ab306_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspAlgorithms*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspAlgorithms*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspAlgorithms*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspAlgorithms*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspAlgorithms*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspAlgorithms*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspAlgorithms*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICspAlgorithms*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICspAlgorithms*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICspAlgorithms*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICspAlgorithms*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICspAlgorithms*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICspAlgorithms*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_ItemByName(this : ICspAlgorithms*, strName : Win32cr::Foundation::BSTR, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, strName, ppValue)
    end
    def get_IndexByObjectId(this : ICspAlgorithms*, pObjectId : Void*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IndexByObjectId.call(this, pObjectId, pIndex)
    end

  end

  @[Extern]
  record ICspInformationVtbl,
    query_interface : Proc(ICspInformation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspInformation*, UInt32),
    release : Proc(ICspInformation*, UInt32),
    get_type_info_count : Proc(ICspInformation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspInformation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspInformation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspInformation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_name : Proc(ICspInformation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_type : Proc(ICspInformation*, Win32cr::Security::Cryptography::Certificates::X509ProviderType, Void*, Int16, Win32cr::Foundation::HRESULT),
    get_CspAlgorithms : Proc(ICspInformation*, Void**, Win32cr::Foundation::HRESULT),
    get_HasHardwareRandomNumberGenerator : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_IsHardwareDevice : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_IsRemovable : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_IsSoftwareDevice : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_Valid : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_MaxKeyContainerNameLength : Proc(ICspInformation*, Int32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ICspInformation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(ICspInformation*, Win32cr::Security::Cryptography::Certificates::X509ProviderType*, Win32cr::Foundation::HRESULT),
    get_Version : Proc(ICspInformation*, Int32*, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(ICspInformation*, Win32cr::Security::Cryptography::Certificates::X509KeySpec*, Win32cr::Foundation::HRESULT),
    get_IsSmartCard : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_default_security_descriptor : Proc(ICspInformation*, Int16, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LegacyCsp : Proc(ICspInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_csp_status_from_operations : Proc(ICspInformation*, Void*, Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspInformation, lpVtbl : ICspInformationVtbl* do
    GUID = LibC::GUID.new(0x728ab307_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspInformation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspInformation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspInformation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspInformation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspInformation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspInformation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspInformation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_name(this : ICspInformation*, strName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_name.call(this, strName)
    end
    def initialize_from_type(this : ICspInformation*, type__ : Win32cr::Security::Cryptography::Certificates::X509ProviderType, pAlgorithm : Void*, machine_context : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_type.call(this, type__, pAlgorithm, machine_context)
    end
    def get_CspAlgorithms(this : ICspInformation*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspAlgorithms.call(this, ppValue)
    end
    def get_HasHardwareRandomNumberGenerator(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HasHardwareRandomNumberGenerator.call(this, pValue)
    end
    def get_IsHardwareDevice(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHardwareDevice.call(this, pValue)
    end
    def get_IsRemovable(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRemovable.call(this, pValue)
    end
    def get_IsSoftwareDevice(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSoftwareDevice.call(this, pValue)
    end
    def get_Valid(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Valid.call(this, pValue)
    end
    def get_MaxKeyContainerNameLength(this : ICspInformation*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxKeyContainerNameLength.call(this, pValue)
    end
    def get_Name(this : ICspInformation*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pValue)
    end
    def get_Type(this : ICspInformation*, pValue : Win32cr::Security::Cryptography::Certificates::X509ProviderType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_Version(this : ICspInformation*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, pValue)
    end
    def get_KeySpec(this : ICspInformation*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeySpec*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pValue)
    end
    def get_IsSmartCard(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSmartCard.call(this, pValue)
    end
    def get_default_security_descriptor(this : ICspInformation*, machine_context : Int16, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_security_descriptor.call(this, machine_context, pValue)
    end
    def get_LegacyCsp(this : ICspInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LegacyCsp.call(this, pValue)
    end
    def get_csp_status_from_operations(this : ICspInformation*, pAlgorithm : Void*, operations : Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_status_from_operations.call(this, pAlgorithm, operations, ppValue)
    end

  end

  @[Extern]
  record ICspInformationsVtbl,
    query_interface : Proc(ICspInformations*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspInformations*, UInt32),
    release : Proc(ICspInformations*, UInt32),
    get_type_info_count : Proc(ICspInformations*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspInformations*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspInformations*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspInformations*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICspInformations*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICspInformations*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICspInformations*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICspInformations*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICspInformations*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICspInformations*, Win32cr::Foundation::HRESULT),
    add_available_csps : Proc(ICspInformations*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(ICspInformations*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_csp_status_from_provider_name : Proc(ICspInformations*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    get_csp_statuses_from_operations : Proc(ICspInformations*, Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_encryption_csp_algorithms : Proc(ICspInformations*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_hash_algorithms : Proc(ICspInformations*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspInformations, lpVtbl : ICspInformationsVtbl* do
    GUID = LibC::GUID.new(0x728ab308_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspInformations*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspInformations*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspInformations*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspInformations*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspInformations*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspInformations*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspInformations*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICspInformations*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICspInformations*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICspInformations*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICspInformations*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICspInformations*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICspInformations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def add_available_csps(this : ICspInformations*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_available_csps.call(this)
    end
    def get_ItemByName(this : ICspInformations*, strName : Win32cr::Foundation::BSTR, ppCspInformation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, strName, ppCspInformation)
    end
    def get_csp_status_from_provider_name(this : ICspInformations*, strProviderName : Win32cr::Foundation::BSTR, legacy_key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_status_from_provider_name.call(this, strProviderName, legacy_key_spec, ppValue)
    end
    def get_csp_statuses_from_operations(this : ICspInformations*, operations : Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, pCspInformation : Void*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses_from_operations.call(this, operations, pCspInformation, ppValue)
    end
    def get_encryption_csp_algorithms(this : ICspInformations*, pCspInformation : Void*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encryption_csp_algorithms.call(this, pCspInformation, ppValue)
    end
    def get_hash_algorithms(this : ICspInformations*, pCspInformation : Void*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_algorithms.call(this, pCspInformation, ppValue)
    end

  end

  @[Extern]
  record ICspStatusVtbl,
    query_interface : Proc(ICspStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspStatus*, UInt32),
    release : Proc(ICspStatus*, UInt32),
    get_type_info_count : Proc(ICspStatus*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspStatus*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspStatus*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspStatus*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICspStatus*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_Ordinal : Proc(ICspStatus*, Int32*, Win32cr::Foundation::HRESULT),
    put_Ordinal : Proc(ICspStatus*, Int32, Win32cr::Foundation::HRESULT),
    get_CspAlgorithm : Proc(ICspStatus*, Void**, Win32cr::Foundation::HRESULT),
    get_CspInformation : Proc(ICspStatus*, Void**, Win32cr::Foundation::HRESULT),
    get_EnrollmentStatus : Proc(ICspStatus*, Void**, Win32cr::Foundation::HRESULT),
    get_DisplayName : Proc(ICspStatus*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspStatus, lpVtbl : ICspStatusVtbl* do
    GUID = LibC::GUID.new(0x728ab309_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspStatus*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspStatus*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspStatus*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspStatus*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICspStatus*, pCsp : Void*, pAlgorithm : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pCsp, pAlgorithm)
    end
    def get_Ordinal(this : ICspStatus*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Ordinal.call(this, pValue)
    end
    def put_Ordinal(this : ICspStatus*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Ordinal.call(this, value)
    end
    def get_CspAlgorithm(this : ICspStatus*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspAlgorithm.call(this, ppValue)
    end
    def get_CspInformation(this : ICspStatus*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformation.call(this, ppValue)
    end
    def get_EnrollmentStatus(this : ICspStatus*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentStatus.call(this, ppValue)
    end
    def get_DisplayName(this : ICspStatus*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayName.call(this, pValue)
    end

  end

  @[Extern]
  record ICspStatusesVtbl,
    query_interface : Proc(ICspStatuses*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICspStatuses*, UInt32),
    release : Proc(ICspStatuses*, UInt32),
    get_type_info_count : Proc(ICspStatuses*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICspStatuses*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICspStatuses*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICspStatuses*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICspStatuses*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICspStatuses*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICspStatuses*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICspStatuses*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICspStatuses*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICspStatuses*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(ICspStatuses*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ItemByOrdinal : Proc(ICspStatuses*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_ItemByOperations : Proc(ICspStatuses*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, Void**, Win32cr::Foundation::HRESULT),
    get_ItemByProvider : Proc(ICspStatuses*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICspStatuses, lpVtbl : ICspStatusesVtbl* do
    GUID = LibC::GUID.new(0x728ab30a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICspStatuses*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICspStatuses*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICspStatuses*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICspStatuses*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICspStatuses*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICspStatuses*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICspStatuses*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICspStatuses*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICspStatuses*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICspStatuses*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICspStatuses*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICspStatuses*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICspStatuses*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_ItemByName(this : ICspStatuses*, strCspName : Win32cr::Foundation::BSTR, strAlgorithmName : Win32cr::Foundation::BSTR, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, strCspName, strAlgorithmName, ppValue)
    end
    def get_ItemByOrdinal(this : ICspStatuses*, ordinal : Int32, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByOrdinal.call(this, ordinal, ppValue)
    end
    def get_ItemByOperations(this : ICspStatuses*, strCspName : Win32cr::Foundation::BSTR, strAlgorithmName : Win32cr::Foundation::BSTR, operations : Win32cr::Security::Cryptography::Certificates::AlgorithmOperationFlags, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByOperations.call(this, strCspName, strAlgorithmName, operations, ppValue)
    end
    def get_ItemByProvider(this : ICspStatuses*, pCspStatus : Void*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByProvider.call(this, pCspStatus, ppValue)
    end

  end

  @[Extern]
  record IX509PublicKeyVtbl,
    query_interface : Proc(IX509PublicKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509PublicKey*, UInt32),
    release : Proc(IX509PublicKey*, UInt32),
    get_type_info_count : Proc(IX509PublicKey*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509PublicKey*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509PublicKey*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509PublicKey*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509PublicKey*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    initialize_from_encoded_public_key_info : Proc(IX509PublicKey*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    get_Algorithm : Proc(IX509PublicKey*, Void**, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IX509PublicKey*, Int32*, Win32cr::Foundation::HRESULT),
    get_EncodedKey : Proc(IX509PublicKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_EncodedParameters : Proc(IX509PublicKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    compute_key_identifier : Proc(IX509PublicKey*, Win32cr::Security::Cryptography::Certificates::KeyIdentifierHashAlgorithm, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509PublicKey, lpVtbl : IX509PublicKeyVtbl* do
    GUID = LibC::GUID.new(0x728ab30b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509PublicKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509PublicKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509PublicKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509PublicKey*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509PublicKey*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509PublicKey*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509PublicKey*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509PublicKey*, pObjectId : Void*, strEncodedKey : Win32cr::Foundation::BSTR, strEncodedParameters : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, strEncodedKey, strEncodedParameters, encoding)
    end
    def initialize_from_encoded_public_key_info(this : IX509PublicKey*, strEncodedPublicKeyInfo : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_encoded_public_key_info.call(this, strEncodedPublicKeyInfo, encoding)
    end
    def get_Algorithm(this : IX509PublicKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Algorithm.call(this, ppValue)
    end
    def get_Length(this : IX509PublicKey*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, pValue)
    end
    def get_EncodedKey(this : IX509PublicKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncodedKey.call(this, encoding, pValue)
    end
    def get_EncodedParameters(this : IX509PublicKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncodedParameters.call(this, encoding, pValue)
    end
    def compute_key_identifier(this : IX509PublicKey*, algorithm : Win32cr::Security::Cryptography::Certificates::KeyIdentifierHashAlgorithm, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_key_identifier.call(this, algorithm, encoding, pValue)
    end

  end

  @[Extern]
  record IX509PrivateKeyVtbl,
    query_interface : Proc(IX509PrivateKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509PrivateKey*, UInt32),
    release : Proc(IX509PrivateKey*, UInt32),
    get_type_info_count : Proc(IX509PrivateKey*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509PrivateKey*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509PrivateKey*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509PrivateKey*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IX509PrivateKey*, Win32cr::Foundation::HRESULT),
    create : Proc(IX509PrivateKey*, Win32cr::Foundation::HRESULT),
    close : Proc(IX509PrivateKey*, Win32cr::Foundation::HRESULT),
    delete : Proc(IX509PrivateKey*, Win32cr::Foundation::HRESULT),
    verify : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify, Win32cr::Foundation::HRESULT),
    import : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    export : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    export_public_key : Proc(IX509PrivateKey*, Void**, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ContainerNamePrefix : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerNamePrefix : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ReaderName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ReaderName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509PrivateKey*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509PrivateKey*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatus : Proc(IX509PrivateKey*, Void**, Win32cr::Foundation::HRESULT),
    put_CspStatus : Proc(IX509PrivateKey*, Void*, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509ProviderType*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509ProviderType, Win32cr::Foundation::HRESULT),
    get_LegacyCsp : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    put_LegacyCsp : Proc(IX509PrivateKey*, Int16, Win32cr::Foundation::HRESULT),
    get_Algorithm : Proc(IX509PrivateKey*, Void**, Win32cr::Foundation::HRESULT),
    put_Algorithm : Proc(IX509PrivateKey*, Void*, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509KeySpec*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IX509PrivateKey*, Int32*, Win32cr::Foundation::HRESULT),
    put_Length : Proc(IX509PrivateKey*, Int32, Win32cr::Foundation::HRESULT),
    get_ExportPolicy : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags*, Win32cr::Foundation::HRESULT),
    put_ExportPolicy : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags, Win32cr::Foundation::HRESULT),
    get_KeyUsage : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags*, Win32cr::Foundation::HRESULT),
    put_KeyUsage : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags, Win32cr::Foundation::HRESULT),
    get_KeyProtection : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection*, Win32cr::Foundation::HRESULT),
    put_KeyProtection : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection, Win32cr::Foundation::HRESULT),
    get_MachineContext : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    put_MachineContext : Proc(IX509PrivateKey*, Int16, Win32cr::Foundation::HRESULT),
    get_SecurityDescriptor : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SecurityDescriptor : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Certificate : Proc(IX509PrivateKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_UniqueContainerName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Opened : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    get_DefaultContainer : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    get_Existing : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    put_Existing : Proc(IX509PrivateKey*, Int16, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509PrivateKey*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509PrivateKey*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509PrivateKey*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509PrivateKey*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Pin : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IX509PrivateKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509PrivateKey, lpVtbl : IX509PrivateKeyVtbl* do
    GUID = LibC::GUID.new(0x728ab30c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509PrivateKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509PrivateKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509PrivateKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509PrivateKey*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509PrivateKey*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509PrivateKey*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509PrivateKey*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IX509PrivateKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this)
    end
    def create(this : IX509PrivateKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this)
    end
    def close(this : IX509PrivateKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def delete(this : IX509PrivateKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def verify(this : IX509PrivateKey*, verify_type : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify.call(this, verify_type)
    end
    def import(this : IX509PrivateKey*, strExportType : Win32cr::Foundation::BSTR, strEncodedKey : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import.call(this, strExportType, strEncodedKey, encoding)
    end
    def export(this : IX509PrivateKey*, strExportType : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedKey : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export.call(this, strExportType, encoding, pstrEncodedKey)
    end
    def export_public_key(this : IX509PrivateKey*, ppPublicKey : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export_public_key.call(this, ppPublicKey)
    end
    def get_ContainerName(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pValue)
    end
    def put_ContainerName(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, value)
    end
    def get_ContainerNamePrefix(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerNamePrefix.call(this, pValue)
    end
    def put_ContainerNamePrefix(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerNamePrefix.call(this, value)
    end
    def get_ReaderName(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReaderName.call(this, pValue)
    end
    def put_ReaderName(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReaderName.call(this, value)
    end
    def get_CspInformations(this : IX509PrivateKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509PrivateKey*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_CspStatus(this : IX509PrivateKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatus.call(this, ppValue)
    end
    def put_CspStatus(this : IX509PrivateKey*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspStatus.call(this, pValue)
    end
    def get_ProviderName(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pValue)
    end
    def put_ProviderName(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, value)
    end
    def get_ProviderType(this : IX509PrivateKey*, pValue : Win32cr::Security::Cryptography::Certificates::X509ProviderType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pValue)
    end
    def put_ProviderType(this : IX509PrivateKey*, value : Win32cr::Security::Cryptography::Certificates::X509ProviderType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, value)
    end
    def get_LegacyCsp(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LegacyCsp.call(this, pValue)
    end
    def put_LegacyCsp(this : IX509PrivateKey*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LegacyCsp.call(this, value)
    end
    def get_Algorithm(this : IX509PrivateKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Algorithm.call(this, ppValue)
    end
    def put_Algorithm(this : IX509PrivateKey*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Algorithm.call(this, pValue)
    end
    def get_KeySpec(this : IX509PrivateKey*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeySpec*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pValue)
    end
    def put_KeySpec(this : IX509PrivateKey*, value : Win32cr::Security::Cryptography::Certificates::X509KeySpec) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, value)
    end
    def get_Length(this : IX509PrivateKey*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, pValue)
    end
    def put_Length(this : IX509PrivateKey*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Length.call(this, value)
    end
    def get_ExportPolicy(this : IX509PrivateKey*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExportPolicy.call(this, pValue)
    end
    def put_ExportPolicy(this : IX509PrivateKey*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ExportPolicy.call(this, value)
    end
    def get_KeyUsage(this : IX509PrivateKey*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyUsage.call(this, pValue)
    end
    def put_KeyUsage(this : IX509PrivateKey*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyUsage.call(this, value)
    end
    def get_KeyProtection(this : IX509PrivateKey*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyProtection.call(this, pValue)
    end
    def put_KeyProtection(this : IX509PrivateKey*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyProtection.call(this, value)
    end
    def get_MachineContext(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MachineContext.call(this, pValue)
    end
    def put_MachineContext(this : IX509PrivateKey*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MachineContext.call(this, value)
    end
    def get_SecurityDescriptor(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SecurityDescriptor.call(this, pValue)
    end
    def put_SecurityDescriptor(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SecurityDescriptor.call(this, value)
    end
    def get_Certificate(this : IX509PrivateKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def put_Certificate(this : IX509PrivateKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Certificate.call(this, encoding, value)
    end
    def get_UniqueContainerName(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueContainerName.call(this, pValue)
    end
    def get_Opened(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Opened.call(this, pValue)
    end
    def get_DefaultContainer(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultContainer.call(this, pValue)
    end
    def get_Existing(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Existing.call(this, pValue)
    end
    def put_Existing(this : IX509PrivateKey*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Existing.call(this, value)
    end
    def get_Silent(this : IX509PrivateKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509PrivateKey*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509PrivateKey*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509PrivateKey*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def put_Pin(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pin.call(this, value)
    end
    def get_FriendlyName(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, pValue)
    end
    def put_FriendlyName(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, value)
    end
    def get_Description(this : IX509PrivateKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pValue)
    end
    def put_Description(this : IX509PrivateKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, value)
    end

  end

  @[Extern]
  record IX509PrivateKey2Vtbl,
    query_interface : Proc(IX509PrivateKey2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509PrivateKey2*, UInt32),
    release : Proc(IX509PrivateKey2*, UInt32),
    get_type_info_count : Proc(IX509PrivateKey2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509PrivateKey2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509PrivateKey2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509PrivateKey2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(IX509PrivateKey2*, Win32cr::Foundation::HRESULT),
    create : Proc(IX509PrivateKey2*, Win32cr::Foundation::HRESULT),
    close : Proc(IX509PrivateKey2*, Win32cr::Foundation::HRESULT),
    delete : Proc(IX509PrivateKey2*, Win32cr::Foundation::HRESULT),
    verify : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify, Win32cr::Foundation::HRESULT),
    import : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    export : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    export_public_key : Proc(IX509PrivateKey2*, Void**, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ContainerNamePrefix : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerNamePrefix : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ReaderName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ReaderName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509PrivateKey2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509PrivateKey2*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatus : Proc(IX509PrivateKey2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspStatus : Proc(IX509PrivateKey2*, Void*, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509ProviderType*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509ProviderType, Win32cr::Foundation::HRESULT),
    get_LegacyCsp : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    put_LegacyCsp : Proc(IX509PrivateKey2*, Int16, Win32cr::Foundation::HRESULT),
    get_Algorithm : Proc(IX509PrivateKey2*, Void**, Win32cr::Foundation::HRESULT),
    put_Algorithm : Proc(IX509PrivateKey2*, Void*, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509KeySpec*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IX509PrivateKey2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Length : Proc(IX509PrivateKey2*, Int32, Win32cr::Foundation::HRESULT),
    get_ExportPolicy : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags*, Win32cr::Foundation::HRESULT),
    put_ExportPolicy : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags, Win32cr::Foundation::HRESULT),
    get_KeyUsage : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags*, Win32cr::Foundation::HRESULT),
    put_KeyUsage : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags, Win32cr::Foundation::HRESULT),
    get_KeyProtection : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection*, Win32cr::Foundation::HRESULT),
    put_KeyProtection : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection, Win32cr::Foundation::HRESULT),
    get_MachineContext : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    put_MachineContext : Proc(IX509PrivateKey2*, Int16, Win32cr::Foundation::HRESULT),
    get_SecurityDescriptor : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SecurityDescriptor : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Certificate : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_UniqueContainerName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Opened : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    get_DefaultContainer : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Existing : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Existing : Proc(IX509PrivateKey2*, Int16, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509PrivateKey2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509PrivateKey2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509PrivateKey2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509PrivateKey2*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Pin : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HardwareKeyUsage : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509HardwareKeyUsageFlags*, Win32cr::Foundation::HRESULT),
    put_HardwareKeyUsage : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509HardwareKeyUsageFlags, Win32cr::Foundation::HRESULT),
    get_AlternateStorageLocation : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_AlternateStorageLocation : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AlgorithmName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_AlgorithmName : Proc(IX509PrivateKey2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AlgorithmParameters : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_AlgorithmParameters : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ParametersExportType : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509KeyParametersExportType*, Win32cr::Foundation::HRESULT),
    put_ParametersExportType : Proc(IX509PrivateKey2*, Win32cr::Security::Cryptography::Certificates::X509KeyParametersExportType, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509PrivateKey2, lpVtbl : IX509PrivateKey2Vtbl* do
    GUID = LibC::GUID.new(0x728ab362_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509PrivateKey2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509PrivateKey2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509PrivateKey2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509PrivateKey2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509PrivateKey2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509PrivateKey2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509PrivateKey2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : IX509PrivateKey2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this)
    end
    def create(this : IX509PrivateKey2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this)
    end
    def close(this : IX509PrivateKey2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def delete(this : IX509PrivateKey2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def verify(this : IX509PrivateKey2*, verify_type : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify.call(this, verify_type)
    end
    def import(this : IX509PrivateKey2*, strExportType : Win32cr::Foundation::BSTR, strEncodedKey : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import.call(this, strExportType, strEncodedKey, encoding)
    end
    def export(this : IX509PrivateKey2*, strExportType : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedKey : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export.call(this, strExportType, encoding, pstrEncodedKey)
    end
    def export_public_key(this : IX509PrivateKey2*, ppPublicKey : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export_public_key.call(this, ppPublicKey)
    end
    def get_ContainerName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pValue)
    end
    def put_ContainerName(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, value)
    end
    def get_ContainerNamePrefix(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerNamePrefix.call(this, pValue)
    end
    def put_ContainerNamePrefix(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerNamePrefix.call(this, value)
    end
    def get_ReaderName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReaderName.call(this, pValue)
    end
    def put_ReaderName(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReaderName.call(this, value)
    end
    def get_CspInformations(this : IX509PrivateKey2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509PrivateKey2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_CspStatus(this : IX509PrivateKey2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatus.call(this, ppValue)
    end
    def put_CspStatus(this : IX509PrivateKey2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspStatus.call(this, pValue)
    end
    def get_ProviderName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pValue)
    end
    def put_ProviderName(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, value)
    end
    def get_ProviderType(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509ProviderType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pValue)
    end
    def put_ProviderType(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509ProviderType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, value)
    end
    def get_LegacyCsp(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LegacyCsp.call(this, pValue)
    end
    def put_LegacyCsp(this : IX509PrivateKey2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LegacyCsp.call(this, value)
    end
    def get_Algorithm(this : IX509PrivateKey2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Algorithm.call(this, ppValue)
    end
    def put_Algorithm(this : IX509PrivateKey2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Algorithm.call(this, pValue)
    end
    def get_KeySpec(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeySpec*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pValue)
    end
    def put_KeySpec(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509KeySpec) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, value)
    end
    def get_Length(this : IX509PrivateKey2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, pValue)
    end
    def put_Length(this : IX509PrivateKey2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Length.call(this, value)
    end
    def get_ExportPolicy(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExportPolicy.call(this, pValue)
    end
    def put_ExportPolicy(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyExportFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ExportPolicy.call(this, value)
    end
    def get_KeyUsage(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyUsage.call(this, pValue)
    end
    def put_KeyUsage(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyUsageFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyUsage.call(this, value)
    end
    def get_KeyProtection(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyProtection.call(this, pValue)
    end
    def put_KeyProtection(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyProtection) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyProtection.call(this, value)
    end
    def get_MachineContext(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MachineContext.call(this, pValue)
    end
    def put_MachineContext(this : IX509PrivateKey2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MachineContext.call(this, value)
    end
    def get_SecurityDescriptor(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SecurityDescriptor.call(this, pValue)
    end
    def put_SecurityDescriptor(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SecurityDescriptor.call(this, value)
    end
    def get_Certificate(this : IX509PrivateKey2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def put_Certificate(this : IX509PrivateKey2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Certificate.call(this, encoding, value)
    end
    def get_UniqueContainerName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueContainerName.call(this, pValue)
    end
    def get_Opened(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Opened.call(this, pValue)
    end
    def get_DefaultContainer(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultContainer.call(this, pValue)
    end
    def get_Existing(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Existing.call(this, pValue)
    end
    def put_Existing(this : IX509PrivateKey2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Existing.call(this, value)
    end
    def get_Silent(this : IX509PrivateKey2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509PrivateKey2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509PrivateKey2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509PrivateKey2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def put_Pin(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pin.call(this, value)
    end
    def get_FriendlyName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, pValue)
    end
    def put_FriendlyName(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, value)
    end
    def get_Description(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pValue)
    end
    def put_Description(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, value)
    end
    def get_HardwareKeyUsage(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509HardwareKeyUsageFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HardwareKeyUsage.call(this, pValue)
    end
    def put_HardwareKeyUsage(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509HardwareKeyUsageFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HardwareKeyUsage.call(this, value)
    end
    def get_AlternateStorageLocation(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateStorageLocation.call(this, pValue)
    end
    def put_AlternateStorageLocation(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateStorageLocation.call(this, value)
    end
    def get_AlgorithmName(this : IX509PrivateKey2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlgorithmName.call(this, pValue)
    end
    def put_AlgorithmName(this : IX509PrivateKey2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlgorithmName.call(this, value)
    end
    def get_AlgorithmParameters(this : IX509PrivateKey2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlgorithmParameters.call(this, encoding, pValue)
    end
    def put_AlgorithmParameters(this : IX509PrivateKey2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlgorithmParameters.call(this, encoding, value)
    end
    def get_ParametersExportType(this : IX509PrivateKey2*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeyParametersExportType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParametersExportType.call(this, pValue)
    end
    def put_ParametersExportType(this : IX509PrivateKey2*, value : Win32cr::Security::Cryptography::Certificates::X509KeyParametersExportType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParametersExportType.call(this, value)
    end

  end

  @[Extern]
  record IX509EndorsementKeyVtbl,
    query_interface : Proc(IX509EndorsementKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509EndorsementKey*, UInt32),
    release : Proc(IX509EndorsementKey*, UInt32),
    get_type_info_count : Proc(IX509EndorsementKey*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509EndorsementKey*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509EndorsementKey*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509EndorsementKey*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(IX509EndorsementKey*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(IX509EndorsementKey*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IX509EndorsementKey*, Int32*, Win32cr::Foundation::HRESULT),
    get_Opened : Proc(IX509EndorsementKey*, Int16*, Win32cr::Foundation::HRESULT),
    add_certificate : Proc(IX509EndorsementKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_certificate : Proc(IX509EndorsementKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_certificate_by_index : Proc(IX509EndorsementKey*, Int16, Int32, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_certificate_count : Proc(IX509EndorsementKey*, Int16, Int32*, Win32cr::Foundation::HRESULT),
    export_public_key : Proc(IX509EndorsementKey*, Void**, Win32cr::Foundation::HRESULT),
    open : Proc(IX509EndorsementKey*, Win32cr::Foundation::HRESULT),
    close : Proc(IX509EndorsementKey*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509EndorsementKey, lpVtbl : IX509EndorsementKeyVtbl* do
    GUID = LibC::GUID.new(0xb11cd855_u32, 0xf4c4_u16, 0x4fc6_u16, StaticArray[0xb7_u8, 0x10_u8, 0x44_u8, 0x22_u8, 0x23_u8, 0x7f_u8, 0x9_u8, 0xe9_u8])
    def query_interface(this : IX509EndorsementKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509EndorsementKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509EndorsementKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509EndorsementKey*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509EndorsementKey*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509EndorsementKey*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509EndorsementKey*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ProviderName(this : IX509EndorsementKey*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pValue)
    end
    def put_ProviderName(this : IX509EndorsementKey*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, value)
    end
    def get_Length(this : IX509EndorsementKey*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, pValue)
    end
    def get_Opened(this : IX509EndorsementKey*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Opened.call(this, pValue)
    end
    def add_certificate(this : IX509EndorsementKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_certificate.call(this, encoding, strCertificate)
    end
    def remove_certificate(this : IX509EndorsementKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_certificate.call(this, encoding, strCertificate)
    end
    def get_certificate_by_index(this : IX509EndorsementKey*, manufacturer_only : Int16, dwIndex : Int32, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_by_index.call(this, manufacturer_only, dwIndex, encoding, pValue)
    end
    def get_certificate_count(this : IX509EndorsementKey*, manufacturer_only : Int16, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_count.call(this, manufacturer_only, pCount)
    end
    def export_public_key(this : IX509EndorsementKey*, ppPublicKey : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export_public_key.call(this, ppPublicKey)
    end
    def open(this : IX509EndorsementKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this)
    end
    def close(this : IX509EndorsementKey*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IX509ExtensionVtbl,
    query_interface : Proc(IX509Extension*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Extension*, UInt32),
    release : Proc(IX509Extension*, UInt32),
    get_type_info_count : Proc(IX509Extension*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Extension*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Extension*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Extension*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509Extension*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509Extension*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509Extension*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509Extension*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509Extension*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Extension, lpVtbl : IX509ExtensionVtbl* do
    GUID = LibC::GUID.new(0x728ab30d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Extension*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Extension*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Extension*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Extension*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Extension*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Extension*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Extension*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509Extension*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509Extension*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509Extension*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509Extension*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509Extension*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end

  end

  @[Extern]
  record IX509ExtensionsVtbl,
    query_interface : Proc(IX509Extensions*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Extensions*, UInt32),
    release : Proc(IX509Extensions*, UInt32),
    get_type_info_count : Proc(IX509Extensions*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Extensions*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Extensions*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Extensions*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509Extensions*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509Extensions*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509Extensions*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509Extensions*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509Extensions*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509Extensions*, Win32cr::Foundation::HRESULT),
    get_IndexByObjectId : Proc(IX509Extensions*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    add_range : Proc(IX509Extensions*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Extensions, lpVtbl : IX509ExtensionsVtbl* do
    GUID = LibC::GUID.new(0x728ab30e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Extensions*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Extensions*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Extensions*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Extensions*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Extensions*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Extensions*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Extensions*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509Extensions*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509Extensions*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509Extensions*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509Extensions*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509Extensions*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509Extensions*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_IndexByObjectId(this : IX509Extensions*, pObjectId : Void*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IndexByObjectId.call(this, pObjectId, pIndex)
    end
    def add_range(this : IX509Extensions*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_range.call(this, pValue)
    end

  end

  @[Extern]
  record IX509ExtensionKeyUsageVtbl,
    query_interface : Proc(IX509ExtensionKeyUsage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionKeyUsage*, UInt32),
    release : Proc(IX509ExtensionKeyUsage*, UInt32),
    get_type_info_count : Proc(IX509ExtensionKeyUsage*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionKeyUsage*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionKeyUsage*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionKeyUsage*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionKeyUsage*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionKeyUsage*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionKeyUsage*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionKeyUsage*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionKeyUsage*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionKeyUsage*, Win32cr::Security::Cryptography::Certificates::X509KeyUsageFlags, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionKeyUsage*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_KeyUsage : Proc(IX509ExtensionKeyUsage*, Win32cr::Security::Cryptography::Certificates::X509KeyUsageFlags*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionKeyUsage, lpVtbl : IX509ExtensionKeyUsageVtbl* do
    GUID = LibC::GUID.new(0x728ab30f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionKeyUsage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionKeyUsage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionKeyUsage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionKeyUsage*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionKeyUsage*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionKeyUsage*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionKeyUsage*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionKeyUsage*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionKeyUsage*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionKeyUsage*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionKeyUsage*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionKeyUsage*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionKeyUsage*, usage_flags : Win32cr::Security::Cryptography::Certificates::X509KeyUsageFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, usage_flags)
    end
    def initialize_decode(this : IX509ExtensionKeyUsage*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_KeyUsage(this : IX509ExtensionKeyUsage*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeyUsageFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyUsage.call(this, pValue)
    end

  end

  @[Extern]
  record IX509ExtensionEnhancedKeyUsageVtbl,
    query_interface : Proc(IX509ExtensionEnhancedKeyUsage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionEnhancedKeyUsage*, UInt32),
    release : Proc(IX509ExtensionEnhancedKeyUsage*, UInt32),
    get_type_info_count : Proc(IX509ExtensionEnhancedKeyUsage*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionEnhancedKeyUsage*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionEnhancedKeyUsage*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionEnhancedKeyUsage*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionEnhancedKeyUsage*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionEnhancedKeyUsage*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionEnhancedKeyUsage*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionEnhancedKeyUsage*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionEnhancedKeyUsage*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionEnhancedKeyUsage*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionEnhancedKeyUsage*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EnhancedKeyUsage : Proc(IX509ExtensionEnhancedKeyUsage*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionEnhancedKeyUsage, lpVtbl : IX509ExtensionEnhancedKeyUsageVtbl* do
    GUID = LibC::GUID.new(0x728ab310_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionEnhancedKeyUsage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionEnhancedKeyUsage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionEnhancedKeyUsage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionEnhancedKeyUsage*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionEnhancedKeyUsage*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionEnhancedKeyUsage*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionEnhancedKeyUsage*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionEnhancedKeyUsage*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionEnhancedKeyUsage*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionEnhancedKeyUsage*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionEnhancedKeyUsage*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionEnhancedKeyUsage*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionEnhancedKeyUsage*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pValue)
    end
    def initialize_decode(this : IX509ExtensionEnhancedKeyUsage*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_EnhancedKeyUsage(this : IX509ExtensionEnhancedKeyUsage*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnhancedKeyUsage.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509ExtensionTemplateNameVtbl,
    query_interface : Proc(IX509ExtensionTemplateName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionTemplateName*, UInt32),
    release : Proc(IX509ExtensionTemplateName*, UInt32),
    get_type_info_count : Proc(IX509ExtensionTemplateName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionTemplateName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionTemplateName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionTemplateName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionTemplateName*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionTemplateName*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionTemplateName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionTemplateName*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionTemplateName*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionTemplateName*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionTemplateName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TemplateName : Proc(IX509ExtensionTemplateName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionTemplateName, lpVtbl : IX509ExtensionTemplateNameVtbl* do
    GUID = LibC::GUID.new(0x728ab311_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionTemplateName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionTemplateName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionTemplateName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionTemplateName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionTemplateName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionTemplateName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionTemplateName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionTemplateName*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionTemplateName*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionTemplateName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionTemplateName*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionTemplateName*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionTemplateName*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, strTemplateName)
    end
    def initialize_decode(this : IX509ExtensionTemplateName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_TemplateName(this : IX509ExtensionTemplateName*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateName.call(this, pValue)
    end

  end

  @[Extern]
  record IX509ExtensionTemplateVtbl,
    query_interface : Proc(IX509ExtensionTemplate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionTemplate*, UInt32),
    release : Proc(IX509ExtensionTemplate*, UInt32),
    get_type_info_count : Proc(IX509ExtensionTemplate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionTemplate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionTemplate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionTemplate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionTemplate*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionTemplate*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionTemplate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionTemplate*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionTemplate*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionTemplate*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionTemplate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TemplateOid : Proc(IX509ExtensionTemplate*, Void**, Win32cr::Foundation::HRESULT),
    get_MajorVersion : Proc(IX509ExtensionTemplate*, Int32*, Win32cr::Foundation::HRESULT),
    get_MinorVersion : Proc(IX509ExtensionTemplate*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionTemplate, lpVtbl : IX509ExtensionTemplateVtbl* do
    GUID = LibC::GUID.new(0x728ab312_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionTemplate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionTemplate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionTemplate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionTemplate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionTemplate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionTemplate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionTemplate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionTemplate*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionTemplate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionTemplate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionTemplate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionTemplate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionTemplate*, pTemplateOid : Void*, major_version : Int32, minor_version : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pTemplateOid, major_version, minor_version)
    end
    def initialize_decode(this : IX509ExtensionTemplate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_TemplateOid(this : IX509ExtensionTemplate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateOid.call(this, ppValue)
    end
    def get_MajorVersion(this : IX509ExtensionTemplate*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MajorVersion.call(this, pValue)
    end
    def get_MinorVersion(this : IX509ExtensionTemplate*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinorVersion.call(this, pValue)
    end

  end

  @[Extern]
  record IAlternativeNameVtbl,
    query_interface : Proc(IAlternativeName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAlternativeName*, UInt32),
    release : Proc(IAlternativeName*, UInt32),
    get_type_info_count : Proc(IAlternativeName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAlternativeName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAlternativeName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAlternativeName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_string : Proc(IAlternativeName*, Win32cr::Security::Cryptography::Certificates::AlternativeNameType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_raw_data : Proc(IAlternativeName*, Win32cr::Security::Cryptography::Certificates::AlternativeNameType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_other_name : Proc(IAlternativeName*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IAlternativeName*, Win32cr::Security::Cryptography::Certificates::AlternativeNameType*, Win32cr::Foundation::HRESULT),
    get_StrValue : Proc(IAlternativeName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IAlternativeName*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IAlternativeName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAlternativeName, lpVtbl : IAlternativeNameVtbl* do
    GUID = LibC::GUID.new(0x728ab313_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IAlternativeName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAlternativeName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAlternativeName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAlternativeName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAlternativeName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAlternativeName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAlternativeName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_string(this : IAlternativeName*, type__ : Win32cr::Security::Cryptography::Certificates::AlternativeNameType, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_string.call(this, type__, strValue)
    end
    def initialize_from_raw_data(this : IAlternativeName*, type__ : Win32cr::Security::Cryptography::Certificates::AlternativeNameType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strRawData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_raw_data.call(this, type__, encoding, strRawData)
    end
    def initialize_from_other_name(this : IAlternativeName*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strRawData : Win32cr::Foundation::BSTR, to_be_wrapped : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_other_name.call(this, pObjectId, encoding, strRawData, to_be_wrapped)
    end
    def get_Type(this : IAlternativeName*, pValue : Win32cr::Security::Cryptography::Certificates::AlternativeNameType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_StrValue(this : IAlternativeName*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StrValue.call(this, pValue)
    end
    def get_ObjectId(this : IAlternativeName*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IAlternativeName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IAlternativeNamesVtbl,
    query_interface : Proc(IAlternativeNames*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAlternativeNames*, UInt32),
    release : Proc(IAlternativeNames*, UInt32),
    get_type_info_count : Proc(IAlternativeNames*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAlternativeNames*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAlternativeNames*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAlternativeNames*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IAlternativeNames*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IAlternativeNames*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IAlternativeNames*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IAlternativeNames*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IAlternativeNames*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IAlternativeNames*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IAlternativeNames, lpVtbl : IAlternativeNamesVtbl* do
    GUID = LibC::GUID.new(0x728ab314_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IAlternativeNames*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAlternativeNames*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAlternativeNames*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAlternativeNames*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAlternativeNames*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAlternativeNames*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAlternativeNames*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IAlternativeNames*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IAlternativeNames*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IAlternativeNames*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IAlternativeNames*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IAlternativeNames*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IAlternativeNames*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IX509ExtensionAlternativeNamesVtbl,
    query_interface : Proc(IX509ExtensionAlternativeNames*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionAlternativeNames*, UInt32),
    release : Proc(IX509ExtensionAlternativeNames*, UInt32),
    get_type_info_count : Proc(IX509ExtensionAlternativeNames*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionAlternativeNames*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionAlternativeNames*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionAlternativeNames*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionAlternativeNames*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionAlternativeNames*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionAlternativeNames*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionAlternativeNames*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionAlternativeNames*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionAlternativeNames*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionAlternativeNames*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AlternativeNames : Proc(IX509ExtensionAlternativeNames*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionAlternativeNames, lpVtbl : IX509ExtensionAlternativeNamesVtbl* do
    GUID = LibC::GUID.new(0x728ab315_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionAlternativeNames*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionAlternativeNames*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionAlternativeNames*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionAlternativeNames*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionAlternativeNames*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionAlternativeNames*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionAlternativeNames*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionAlternativeNames*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionAlternativeNames*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionAlternativeNames*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionAlternativeNames*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionAlternativeNames*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionAlternativeNames*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pValue)
    end
    def initialize_decode(this : IX509ExtensionAlternativeNames*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_AlternativeNames(this : IX509ExtensionAlternativeNames*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternativeNames.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509ExtensionBasicConstraintsVtbl,
    query_interface : Proc(IX509ExtensionBasicConstraints*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionBasicConstraints*, UInt32),
    release : Proc(IX509ExtensionBasicConstraints*, UInt32),
    get_type_info_count : Proc(IX509ExtensionBasicConstraints*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionBasicConstraints*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionBasicConstraints*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionBasicConstraints*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionBasicConstraints*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionBasicConstraints*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionBasicConstraints*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionBasicConstraints*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionBasicConstraints*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionBasicConstraints*, Int16, Int32, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionBasicConstraints*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_IsCA : Proc(IX509ExtensionBasicConstraints*, Int16*, Win32cr::Foundation::HRESULT),
    get_PathLenConstraint : Proc(IX509ExtensionBasicConstraints*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionBasicConstraints, lpVtbl : IX509ExtensionBasicConstraintsVtbl* do
    GUID = LibC::GUID.new(0x728ab316_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionBasicConstraints*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionBasicConstraints*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionBasicConstraints*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionBasicConstraints*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionBasicConstraints*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionBasicConstraints*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionBasicConstraints*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionBasicConstraints*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionBasicConstraints*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionBasicConstraints*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionBasicConstraints*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionBasicConstraints*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionBasicConstraints*, is_ca : Int16, path_len_constraint : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, is_ca, path_len_constraint)
    end
    def initialize_decode(this : IX509ExtensionBasicConstraints*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_IsCA(this : IX509ExtensionBasicConstraints*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsCA.call(this, pValue)
    end
    def get_PathLenConstraint(this : IX509ExtensionBasicConstraints*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PathLenConstraint.call(this, pValue)
    end

  end

  @[Extern]
  record IX509ExtensionSubjectKeyIdentifierVtbl,
    query_interface : Proc(IX509ExtensionSubjectKeyIdentifier*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionSubjectKeyIdentifier*, UInt32),
    release : Proc(IX509ExtensionSubjectKeyIdentifier*, UInt32),
    get_type_info_count : Proc(IX509ExtensionSubjectKeyIdentifier*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionSubjectKeyIdentifier*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionSubjectKeyIdentifier*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionSubjectKeyIdentifier*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionSubjectKeyIdentifier*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionSubjectKeyIdentifier*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionSubjectKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionSubjectKeyIdentifier*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionSubjectKeyIdentifier*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionSubjectKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionSubjectKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SubjectKeyIdentifier : Proc(IX509ExtensionSubjectKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionSubjectKeyIdentifier, lpVtbl : IX509ExtensionSubjectKeyIdentifierVtbl* do
    GUID = LibC::GUID.new(0x728ab317_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionSubjectKeyIdentifier*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionSubjectKeyIdentifier*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionSubjectKeyIdentifier*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionSubjectKeyIdentifier*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionSubjectKeyIdentifier*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionSubjectKeyIdentifier*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionSubjectKeyIdentifier*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionSubjectKeyIdentifier*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionSubjectKeyIdentifier*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionSubjectKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionSubjectKeyIdentifier*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionSubjectKeyIdentifier*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionSubjectKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strKeyIdentifier : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, encoding, strKeyIdentifier)
    end
    def initialize_decode(this : IX509ExtensionSubjectKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_SubjectKeyIdentifier(this : IX509ExtensionSubjectKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubjectKeyIdentifier.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509ExtensionAuthorityKeyIdentifierVtbl,
    query_interface : Proc(IX509ExtensionAuthorityKeyIdentifier*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionAuthorityKeyIdentifier*, UInt32),
    release : Proc(IX509ExtensionAuthorityKeyIdentifier*, UInt32),
    get_type_info_count : Proc(IX509ExtensionAuthorityKeyIdentifier*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionAuthorityKeyIdentifier*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionAuthorityKeyIdentifier*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionAuthorityKeyIdentifier*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionAuthorityKeyIdentifier*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionAuthorityKeyIdentifier*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionAuthorityKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionAuthorityKeyIdentifier*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionAuthorityKeyIdentifier*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionAuthorityKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionAuthorityKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AuthorityKeyIdentifier : Proc(IX509ExtensionAuthorityKeyIdentifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionAuthorityKeyIdentifier, lpVtbl : IX509ExtensionAuthorityKeyIdentifierVtbl* do
    GUID = LibC::GUID.new(0x728ab318_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionAuthorityKeyIdentifier*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionAuthorityKeyIdentifier*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionAuthorityKeyIdentifier*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionAuthorityKeyIdentifier*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionAuthorityKeyIdentifier*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionAuthorityKeyIdentifier*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionAuthorityKeyIdentifier*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionAuthorityKeyIdentifier*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionAuthorityKeyIdentifier*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionAuthorityKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionAuthorityKeyIdentifier*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionAuthorityKeyIdentifier*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionAuthorityKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strKeyIdentifier : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, encoding, strKeyIdentifier)
    end
    def initialize_decode(this : IX509ExtensionAuthorityKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_AuthorityKeyIdentifier(this : IX509ExtensionAuthorityKeyIdentifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuthorityKeyIdentifier.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ISmimeCapabilityVtbl,
    query_interface : Proc(ISmimeCapability*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISmimeCapability*, UInt32),
    release : Proc(ISmimeCapability*, UInt32),
    get_type_info_count : Proc(ISmimeCapability*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISmimeCapability*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISmimeCapability*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISmimeCapability*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ISmimeCapability*, Void*, Int32, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(ISmimeCapability*, Void**, Win32cr::Foundation::HRESULT),
    get_BitCount : Proc(ISmimeCapability*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISmimeCapability, lpVtbl : ISmimeCapabilityVtbl* do
    GUID = LibC::GUID.new(0x728ab319_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ISmimeCapability*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISmimeCapability*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISmimeCapability*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISmimeCapability*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISmimeCapability*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISmimeCapability*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISmimeCapability*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ISmimeCapability*, pObjectId : Void*, bit_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, bit_count)
    end
    def get_ObjectId(this : ISmimeCapability*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_BitCount(this : ISmimeCapability*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitCount.call(this, pValue)
    end

  end

  @[Extern]
  record ISmimeCapabilitiesVtbl,
    query_interface : Proc(ISmimeCapabilities*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISmimeCapabilities*, UInt32),
    release : Proc(ISmimeCapabilities*, UInt32),
    get_type_info_count : Proc(ISmimeCapabilities*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISmimeCapabilities*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISmimeCapabilities*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISmimeCapabilities*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ISmimeCapabilities*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ISmimeCapabilities*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ISmimeCapabilities*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ISmimeCapabilities*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ISmimeCapabilities*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ISmimeCapabilities*, Win32cr::Foundation::HRESULT),
    add_from_csp : Proc(ISmimeCapabilities*, Void*, Win32cr::Foundation::HRESULT),
    add_available_smime_capabilities : Proc(ISmimeCapabilities*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISmimeCapabilities, lpVtbl : ISmimeCapabilitiesVtbl* do
    GUID = LibC::GUID.new(0x728ab31a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ISmimeCapabilities*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISmimeCapabilities*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISmimeCapabilities*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISmimeCapabilities*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISmimeCapabilities*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISmimeCapabilities*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISmimeCapabilities*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ISmimeCapabilities*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ISmimeCapabilities*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ISmimeCapabilities*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ISmimeCapabilities*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ISmimeCapabilities*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ISmimeCapabilities*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def add_from_csp(this : ISmimeCapabilities*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_from_csp.call(this, pValue)
    end
    def add_available_smime_capabilities(this : ISmimeCapabilities*, machine_context : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_available_smime_capabilities.call(this, machine_context)
    end

  end

  @[Extern]
  record IX509ExtensionSmimeCapabilitiesVtbl,
    query_interface : Proc(IX509ExtensionSmimeCapabilities*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionSmimeCapabilities*, UInt32),
    release : Proc(IX509ExtensionSmimeCapabilities*, UInt32),
    get_type_info_count : Proc(IX509ExtensionSmimeCapabilities*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionSmimeCapabilities*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionSmimeCapabilities*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionSmimeCapabilities*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionSmimeCapabilities*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionSmimeCapabilities*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionSmimeCapabilities*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionSmimeCapabilities*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionSmimeCapabilities*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionSmimeCapabilities*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionSmimeCapabilities*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509ExtensionSmimeCapabilities*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionSmimeCapabilities, lpVtbl : IX509ExtensionSmimeCapabilitiesVtbl* do
    GUID = LibC::GUID.new(0x728ab31b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionSmimeCapabilities*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionSmimeCapabilities*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionSmimeCapabilities*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionSmimeCapabilities*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionSmimeCapabilities*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionSmimeCapabilities*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionSmimeCapabilities*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionSmimeCapabilities*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionSmimeCapabilities*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionSmimeCapabilities*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionSmimeCapabilities*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionSmimeCapabilities*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionSmimeCapabilities*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pValue)
    end
    def initialize_decode(this : IX509ExtensionSmimeCapabilities*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_SmimeCapabilities(this : IX509ExtensionSmimeCapabilities*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, ppValue)
    end

  end

  @[Extern]
  record IPolicyQualifierVtbl,
    query_interface : Proc(IPolicyQualifier*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPolicyQualifier*, UInt32),
    release : Proc(IPolicyQualifier*, UInt32),
    get_type_info_count : Proc(IPolicyQualifier*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IPolicyQualifier*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IPolicyQualifier*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IPolicyQualifier*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IPolicyQualifier*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::PolicyQualifierType, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IPolicyQualifier*, Void**, Win32cr::Foundation::HRESULT),
    get_Qualifier : Proc(IPolicyQualifier*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IPolicyQualifier*, Win32cr::Security::Cryptography::Certificates::PolicyQualifierType*, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IPolicyQualifier*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPolicyQualifier, lpVtbl : IPolicyQualifierVtbl* do
    GUID = LibC::GUID.new(0x728ab31c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IPolicyQualifier*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPolicyQualifier*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPolicyQualifier*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IPolicyQualifier*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IPolicyQualifier*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IPolicyQualifier*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IPolicyQualifier*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_encode(this : IPolicyQualifier*, strQualifier : Win32cr::Foundation::BSTR, type__ : Win32cr::Security::Cryptography::Certificates::PolicyQualifierType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, strQualifier, type__)
    end
    def get_ObjectId(this : IPolicyQualifier*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_Qualifier(this : IPolicyQualifier*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Qualifier.call(this, pValue)
    end
    def get_Type(this : IPolicyQualifier*, pValue : Win32cr::Security::Cryptography::Certificates::PolicyQualifierType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_RawData(this : IPolicyQualifier*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IPolicyQualifiersVtbl,
    query_interface : Proc(IPolicyQualifiers*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPolicyQualifiers*, UInt32),
    release : Proc(IPolicyQualifiers*, UInt32),
    get_type_info_count : Proc(IPolicyQualifiers*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IPolicyQualifiers*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IPolicyQualifiers*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IPolicyQualifiers*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IPolicyQualifiers*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IPolicyQualifiers*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IPolicyQualifiers*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IPolicyQualifiers*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IPolicyQualifiers*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IPolicyQualifiers*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IPolicyQualifiers, lpVtbl : IPolicyQualifiersVtbl* do
    GUID = LibC::GUID.new(0x728ab31d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IPolicyQualifiers*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPolicyQualifiers*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPolicyQualifiers*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IPolicyQualifiers*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IPolicyQualifiers*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IPolicyQualifiers*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IPolicyQualifiers*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IPolicyQualifiers*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IPolicyQualifiers*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IPolicyQualifiers*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IPolicyQualifiers*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IPolicyQualifiers*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IPolicyQualifiers*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record ICertificatePolicyVtbl,
    query_interface : Proc(ICertificatePolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificatePolicy*, UInt32),
    release : Proc(ICertificatePolicy*, UInt32),
    get_type_info_count : Proc(ICertificatePolicy*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificatePolicy*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificatePolicy*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificatePolicy*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertificatePolicy*, Void*, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(ICertificatePolicy*, Void**, Win32cr::Foundation::HRESULT),
    get_PolicyQualifiers : Proc(ICertificatePolicy*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificatePolicy, lpVtbl : ICertificatePolicyVtbl* do
    GUID = LibC::GUID.new(0x728ab31e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertificatePolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificatePolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificatePolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificatePolicy*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificatePolicy*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificatePolicy*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificatePolicy*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertificatePolicy*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pValue)
    end
    def get_ObjectId(this : ICertificatePolicy*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_PolicyQualifiers(this : ICertificatePolicy*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyQualifiers.call(this, ppValue)
    end

  end

  @[Extern]
  record ICertificatePoliciesVtbl,
    query_interface : Proc(ICertificatePolicies*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificatePolicies*, UInt32),
    release : Proc(ICertificatePolicies*, UInt32),
    get_type_info_count : Proc(ICertificatePolicies*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificatePolicies*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificatePolicies*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificatePolicies*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICertificatePolicies*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICertificatePolicies*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICertificatePolicies*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICertificatePolicies*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICertificatePolicies*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICertificatePolicies*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificatePolicies, lpVtbl : ICertificatePoliciesVtbl* do
    GUID = LibC::GUID.new(0x728ab31f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertificatePolicies*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificatePolicies*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificatePolicies*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificatePolicies*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificatePolicies*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificatePolicies*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificatePolicies*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICertificatePolicies*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICertificatePolicies*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICertificatePolicies*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICertificatePolicies*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICertificatePolicies*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICertificatePolicies*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IX509ExtensionCertificatePoliciesVtbl,
    query_interface : Proc(IX509ExtensionCertificatePolicies*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionCertificatePolicies*, UInt32),
    release : Proc(IX509ExtensionCertificatePolicies*, UInt32),
    get_type_info_count : Proc(IX509ExtensionCertificatePolicies*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionCertificatePolicies*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionCertificatePolicies*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionCertificatePolicies*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionCertificatePolicies*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionCertificatePolicies*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionCertificatePolicies*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionCertificatePolicies*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionCertificatePolicies*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionCertificatePolicies*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionCertificatePolicies*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Policies : Proc(IX509ExtensionCertificatePolicies*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionCertificatePolicies, lpVtbl : IX509ExtensionCertificatePoliciesVtbl* do
    GUID = LibC::GUID.new(0x728ab320_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionCertificatePolicies*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionCertificatePolicies*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionCertificatePolicies*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionCertificatePolicies*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionCertificatePolicies*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionCertificatePolicies*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionCertificatePolicies*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionCertificatePolicies*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionCertificatePolicies*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionCertificatePolicies*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionCertificatePolicies*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionCertificatePolicies*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionCertificatePolicies*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pValue)
    end
    def initialize_decode(this : IX509ExtensionCertificatePolicies*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_Policies(this : IX509ExtensionCertificatePolicies*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Policies.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509ExtensionMSApplicationPoliciesVtbl,
    query_interface : Proc(IX509ExtensionMSApplicationPolicies*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509ExtensionMSApplicationPolicies*, UInt32),
    release : Proc(IX509ExtensionMSApplicationPolicies*, UInt32),
    get_type_info_count : Proc(IX509ExtensionMSApplicationPolicies*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509ExtensionMSApplicationPolicies*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509ExtensionMSApplicationPolicies*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509ExtensionMSApplicationPolicies*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509ExtensionMSApplicationPolicies*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509ExtensionMSApplicationPolicies*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509ExtensionMSApplicationPolicies*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Critical : Proc(IX509ExtensionMSApplicationPolicies*, Int16*, Win32cr::Foundation::HRESULT),
    put_Critical : Proc(IX509ExtensionMSApplicationPolicies*, Int16, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509ExtensionMSApplicationPolicies*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509ExtensionMSApplicationPolicies*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Policies : Proc(IX509ExtensionMSApplicationPolicies*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509ExtensionMSApplicationPolicies, lpVtbl : IX509ExtensionMSApplicationPoliciesVtbl* do
    GUID = LibC::GUID.new(0x728ab321_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509ExtensionMSApplicationPolicies*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509ExtensionMSApplicationPolicies*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509ExtensionMSApplicationPolicies*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509ExtensionMSApplicationPolicies*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509ExtensionMSApplicationPolicies*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509ExtensionMSApplicationPolicies*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509ExtensionMSApplicationPolicies*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509ExtensionMSApplicationPolicies*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509ExtensionMSApplicationPolicies*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509ExtensionMSApplicationPolicies*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_Critical(this : IX509ExtensionMSApplicationPolicies*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Critical.call(this, pValue)
    end
    def put_Critical(this : IX509ExtensionMSApplicationPolicies*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Critical.call(this, value)
    end
    def initialize_encode(this : IX509ExtensionMSApplicationPolicies*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pValue)
    end
    def initialize_decode(this : IX509ExtensionMSApplicationPolicies*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_Policies(this : IX509ExtensionMSApplicationPolicies*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Policies.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509AttributeVtbl,
    query_interface : Proc(IX509Attribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Attribute*, UInt32),
    release : Proc(IX509Attribute*, UInt32),
    get_type_info_count : Proc(IX509Attribute*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Attribute*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Attribute*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Attribute*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509Attribute*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509Attribute*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509Attribute*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Attribute, lpVtbl : IX509AttributeVtbl* do
    GUID = LibC::GUID.new(0x728ab322_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Attribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Attribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Attribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Attribute*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Attribute*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Attribute*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Attribute*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509Attribute*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509Attribute*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509Attribute*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509AttributesVtbl,
    query_interface : Proc(IX509Attributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Attributes*, UInt32),
    release : Proc(IX509Attributes*, UInt32),
    get_type_info_count : Proc(IX509Attributes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Attributes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Attributes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Attributes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509Attributes*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509Attributes*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509Attributes*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509Attributes*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509Attributes*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509Attributes*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Attributes, lpVtbl : IX509AttributesVtbl* do
    GUID = LibC::GUID.new(0x728ab323_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Attributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Attributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Attributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Attributes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Attributes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Attributes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Attributes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509Attributes*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509Attributes*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509Attributes*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509Attributes*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509Attributes*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509Attributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IX509AttributeExtensionsVtbl,
    query_interface : Proc(IX509AttributeExtensions*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeExtensions*, UInt32),
    release : Proc(IX509AttributeExtensions*, UInt32),
    get_type_info_count : Proc(IX509AttributeExtensions*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeExtensions*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeExtensions*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeExtensions*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeExtensions*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeExtensions*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeExtensions*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeExtensions*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeExtensions*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509AttributeExtensions*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeExtensions, lpVtbl : IX509AttributeExtensionsVtbl* do
    GUID = LibC::GUID.new(0x728ab324_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeExtensions*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeExtensions*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeExtensions*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeExtensions*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeExtensions*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeExtensions*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeExtensions*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeExtensions*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeExtensions*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeExtensions*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeExtensions*, pExtensions : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pExtensions)
    end
    def initialize_decode(this : IX509AttributeExtensions*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_X509Extensions(this : IX509AttributeExtensions*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509AttributeClientIdVtbl,
    query_interface : Proc(IX509AttributeClientId*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeClientId*, UInt32),
    release : Proc(IX509AttributeClientId*, UInt32),
    get_type_info_count : Proc(IX509AttributeClientId*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeClientId*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeClientId*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeClientId*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeClientId*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeClientId*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeClientId*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeClientId*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeClientId*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509AttributeClientId*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    get_MachineDnsName : Proc(IX509AttributeClientId*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_UserSamName : Proc(IX509AttributeClientId*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ProcessName : Proc(IX509AttributeClientId*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeClientId, lpVtbl : IX509AttributeClientIdVtbl* do
    GUID = LibC::GUID.new(0x728ab325_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeClientId*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeClientId*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeClientId*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeClientId*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeClientId*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeClientId*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeClientId*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeClientId*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeClientId*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeClientId*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeClientId*, client_id : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, strMachineDnsName : Win32cr::Foundation::BSTR, strUserSamName : Win32cr::Foundation::BSTR, strProcessName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, client_id, strMachineDnsName, strUserSamName, strProcessName)
    end
    def initialize_decode(this : IX509AttributeClientId*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_ClientId(this : IX509AttributeClientId*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def get_MachineDnsName(this : IX509AttributeClientId*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MachineDnsName.call(this, pValue)
    end
    def get_UserSamName(this : IX509AttributeClientId*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserSamName.call(this, pValue)
    end
    def get_ProcessName(this : IX509AttributeClientId*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProcessName.call(this, pValue)
    end

  end

  @[Extern]
  record IX509AttributeRenewalCertificateVtbl,
    query_interface : Proc(IX509AttributeRenewalCertificate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeRenewalCertificate*, UInt32),
    release : Proc(IX509AttributeRenewalCertificate*, UInt32),
    get_type_info_count : Proc(IX509AttributeRenewalCertificate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeRenewalCertificate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeRenewalCertificate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeRenewalCertificate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeRenewalCertificate*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeRenewalCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeRenewalCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeRenewalCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeRenewalCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509AttributeRenewalCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeRenewalCertificate, lpVtbl : IX509AttributeRenewalCertificateVtbl* do
    GUID = LibC::GUID.new(0x728ab326_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeRenewalCertificate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeRenewalCertificate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeRenewalCertificate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeRenewalCertificate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeRenewalCertificate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeRenewalCertificate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeRenewalCertificate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeRenewalCertificate*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeRenewalCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeRenewalCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeRenewalCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCert : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, encoding, strCert)
    end
    def initialize_decode(this : IX509AttributeRenewalCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_RenewalCertificate(this : IX509AttributeRenewalCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509AttributeArchiveKeyVtbl,
    query_interface : Proc(IX509AttributeArchiveKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeArchiveKey*, UInt32),
    release : Proc(IX509AttributeArchiveKey*, UInt32),
    get_type_info_count : Proc(IX509AttributeArchiveKey*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeArchiveKey*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeArchiveKey*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeArchiveKey*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeArchiveKey*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeArchiveKey*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeArchiveKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeArchiveKey*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Void*, Int32, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeArchiveKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptedKeyBlob : Proc(IX509AttributeArchiveKey*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_EncryptionAlgorithm : Proc(IX509AttributeArchiveKey*, Void**, Win32cr::Foundation::HRESULT),
    get_EncryptionStrength : Proc(IX509AttributeArchiveKey*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeArchiveKey, lpVtbl : IX509AttributeArchiveKeyVtbl* do
    GUID = LibC::GUID.new(0x728ab327_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeArchiveKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeArchiveKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeArchiveKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeArchiveKey*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeArchiveKey*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeArchiveKey*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeArchiveKey*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeArchiveKey*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeArchiveKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeArchiveKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeArchiveKey*, pKey : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCAXCert : Win32cr::Foundation::BSTR, pAlgorithm : Void*, encryption_strength : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, pKey, encoding, strCAXCert, pAlgorithm, encryption_strength)
    end
    def initialize_decode(this : IX509AttributeArchiveKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_EncryptedKeyBlob(this : IX509AttributeArchiveKey*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptedKeyBlob.call(this, encoding, pValue)
    end
    def get_EncryptionAlgorithm(this : IX509AttributeArchiveKey*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionAlgorithm.call(this, ppValue)
    end
    def get_EncryptionStrength(this : IX509AttributeArchiveKey*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionStrength.call(this, pValue)
    end

  end

  @[Extern]
  record IX509AttributeArchiveKeyHashVtbl,
    query_interface : Proc(IX509AttributeArchiveKeyHash*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeArchiveKeyHash*, UInt32),
    release : Proc(IX509AttributeArchiveKeyHash*, UInt32),
    get_type_info_count : Proc(IX509AttributeArchiveKeyHash*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeArchiveKeyHash*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeArchiveKeyHash*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeArchiveKeyHash*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeArchiveKeyHash*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeArchiveKeyHash*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeArchiveKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode_from_encrypted_key_blob : Proc(IX509AttributeArchiveKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeArchiveKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptedKeyHashBlob : Proc(IX509AttributeArchiveKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeArchiveKeyHash, lpVtbl : IX509AttributeArchiveKeyHashVtbl* do
    GUID = LibC::GUID.new(0x728ab328_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeArchiveKeyHash*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeArchiveKeyHash*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeArchiveKeyHash*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeArchiveKeyHash*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeArchiveKeyHash*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeArchiveKeyHash*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeArchiveKeyHash*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeArchiveKeyHash*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeArchiveKeyHash*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeArchiveKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode_from_encrypted_key_blob(this : IX509AttributeArchiveKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncryptedKeyBlob : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode_from_encrypted_key_blob.call(this, encoding, strEncryptedKeyBlob)
    end
    def initialize_decode(this : IX509AttributeArchiveKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_EncryptedKeyHashBlob(this : IX509AttributeArchiveKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptedKeyHashBlob.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509AttributeOSVersionVtbl,
    query_interface : Proc(IX509AttributeOSVersion*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeOSVersion*, UInt32),
    release : Proc(IX509AttributeOSVersion*, UInt32),
    get_type_info_count : Proc(IX509AttributeOSVersion*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeOSVersion*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeOSVersion*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeOSVersion*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeOSVersion*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeOSVersion*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeOSVersion*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeOSVersion*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeOSVersion*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_OSVersion : Proc(IX509AttributeOSVersion*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeOSVersion, lpVtbl : IX509AttributeOSVersionVtbl* do
    GUID = LibC::GUID.new(0x728ab32a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeOSVersion*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeOSVersion*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeOSVersion*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeOSVersion*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeOSVersion*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeOSVersion*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeOSVersion*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeOSVersion*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeOSVersion*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeOSVersion*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeOSVersion*, strOSVersion : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, strOSVersion)
    end
    def initialize_decode(this : IX509AttributeOSVersion*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_OSVersion(this : IX509AttributeOSVersion*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OSVersion.call(this, pValue)
    end

  end

  @[Extern]
  record IX509AttributeCspProviderVtbl,
    query_interface : Proc(IX509AttributeCspProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509AttributeCspProvider*, UInt32),
    release : Proc(IX509AttributeCspProvider*, UInt32),
    get_type_info_count : Proc(IX509AttributeCspProvider*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509AttributeCspProvider*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509AttributeCspProvider*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509AttributeCspProvider*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509AttributeCspProvider*, Void*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(IX509AttributeCspProvider*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509AttributeCspProvider*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_encode : Proc(IX509AttributeCspProvider*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509AttributeCspProvider*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IX509AttributeCspProvider*, Win32cr::Security::Cryptography::Certificates::X509KeySpec*, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(IX509AttributeCspProvider*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509AttributeCspProvider*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509AttributeCspProvider, lpVtbl : IX509AttributeCspProviderVtbl* do
    GUID = LibC::GUID.new(0x728ab32b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509AttributeCspProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509AttributeCspProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509AttributeCspProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509AttributeCspProvider*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509AttributeCspProvider*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509AttributeCspProvider*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509AttributeCspProvider*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509AttributeCspProvider*, pObjectId : Void*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pObjectId, encoding, strEncodedData)
    end
    def get_ObjectId(this : IX509AttributeCspProvider*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_RawData(this : IX509AttributeCspProvider*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_encode(this : IX509AttributeCspProvider*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, strProviderName : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strSignature : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_encode.call(this, key_spec, strProviderName, encoding, strSignature)
    end
    def initialize_decode(this : IX509AttributeCspProvider*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_KeySpec(this : IX509AttributeCspProvider*, pValue : Win32cr::Security::Cryptography::Certificates::X509KeySpec*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pValue)
    end
    def get_ProviderName(this : IX509AttributeCspProvider*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pValue)
    end
    def get_Signature(this : IX509AttributeCspProvider*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ICryptAttributeVtbl,
    query_interface : Proc(ICryptAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICryptAttribute*, UInt32),
    release : Proc(ICryptAttribute*, UInt32),
    get_type_info_count : Proc(ICryptAttribute*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICryptAttribute*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICryptAttribute*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICryptAttribute*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_object_id : Proc(ICryptAttribute*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_values : Proc(ICryptAttribute*, Void*, Win32cr::Foundation::HRESULT),
    get_ObjectId : Proc(ICryptAttribute*, Void**, Win32cr::Foundation::HRESULT),
    get_Values : Proc(ICryptAttribute*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICryptAttribute, lpVtbl : ICryptAttributeVtbl* do
    GUID = LibC::GUID.new(0x728ab32c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICryptAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICryptAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICryptAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICryptAttribute*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICryptAttribute*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICryptAttribute*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICryptAttribute*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_object_id(this : ICryptAttribute*, pObjectId : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_object_id.call(this, pObjectId)
    end
    def initialize_from_values(this : ICryptAttribute*, pAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_values.call(this, pAttributes)
    end
    def get_ObjectId(this : ICryptAttribute*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectId.call(this, ppValue)
    end
    def get_Values(this : ICryptAttribute*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Values.call(this, ppValue)
    end

  end

  @[Extern]
  record ICryptAttributesVtbl,
    query_interface : Proc(ICryptAttributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICryptAttributes*, UInt32),
    release : Proc(ICryptAttributes*, UInt32),
    get_type_info_count : Proc(ICryptAttributes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICryptAttributes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICryptAttributes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICryptAttributes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICryptAttributes*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICryptAttributes*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICryptAttributes*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICryptAttributes*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICryptAttributes*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICryptAttributes*, Win32cr::Foundation::HRESULT),
    get_IndexByObjectId : Proc(ICryptAttributes*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    add_range : Proc(ICryptAttributes*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICryptAttributes, lpVtbl : ICryptAttributesVtbl* do
    GUID = LibC::GUID.new(0x728ab32d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICryptAttributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICryptAttributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICryptAttributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICryptAttributes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICryptAttributes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICryptAttributes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICryptAttributes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICryptAttributes*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICryptAttributes*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICryptAttributes*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICryptAttributes*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICryptAttributes*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICryptAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_IndexByObjectId(this : ICryptAttributes*, pObjectId : Void*, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IndexByObjectId.call(this, pObjectId, pIndex)
    end
    def add_range(this : ICryptAttributes*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_range.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyVtbl,
    query_interface : Proc(ICertProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertProperty*, UInt32),
    release : Proc(ICertProperty*, UInt32),
    get_type_info_count : Proc(ICertProperty*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertProperty*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertProperty*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertProperty*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertProperty*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertProperty*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertProperty*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertProperty*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertProperty*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertProperty*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertProperty*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertProperty, lpVtbl : ICertPropertyVtbl* do
    GUID = LibC::GUID.new(0x728ab32e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertProperty*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertProperty*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertProperty*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertProperty*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertProperty*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertProperty*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertProperty*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertProperty*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertProperty*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertProperty*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertProperty*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end

  end

  @[Extern]
  record ICertPropertiesVtbl,
    query_interface : Proc(ICertProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertProperties*, UInt32),
    release : Proc(ICertProperties*, UInt32),
    get_type_info_count : Proc(ICertProperties*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertProperties*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertProperties*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertProperties*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICertProperties*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICertProperties*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICertProperties*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICertProperties*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICertProperties*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICertProperties*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertProperties*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertProperties, lpVtbl : ICertPropertiesVtbl* do
    GUID = LibC::GUID.new(0x728ab32f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertProperties*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertProperties*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertProperties*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertProperties*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICertProperties*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICertProperties*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICertProperties*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICertProperties*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICertProperties*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICertProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def initialize_from_certificate(this : ICertProperties*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end

  end

  @[Extern]
  record ICertPropertyFriendlyNameVtbl,
    query_interface : Proc(ICertPropertyFriendlyName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyFriendlyName*, UInt32),
    release : Proc(ICertPropertyFriendlyName*, UInt32),
    get_type_info_count : Proc(ICertPropertyFriendlyName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyFriendlyName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyFriendlyName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyFriendlyName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyFriendlyName*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyFriendlyName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyFriendlyName*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyFriendlyName*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyFriendlyName*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyFriendlyName*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyFriendlyName*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyFriendlyName*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(ICertPropertyFriendlyName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyFriendlyName, lpVtbl : ICertPropertyFriendlyNameVtbl* do
    GUID = LibC::GUID.new(0x728ab330_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyFriendlyName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyFriendlyName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyFriendlyName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyFriendlyName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyFriendlyName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyFriendlyName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyFriendlyName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyFriendlyName*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyFriendlyName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyFriendlyName*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyFriendlyName*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyFriendlyName*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyFriendlyName*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyFriendlyName*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyFriendlyName*, strFriendlyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strFriendlyName)
    end
    def get_FriendlyName(this : ICertPropertyFriendlyName*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyDescriptionVtbl,
    query_interface : Proc(ICertPropertyDescription*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyDescription*, UInt32),
    release : Proc(ICertPropertyDescription*, UInt32),
    get_type_info_count : Proc(ICertPropertyDescription*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyDescription*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyDescription*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyDescription*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyDescription*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyDescription*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyDescription*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyDescription*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyDescription*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyDescription*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyDescription*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyDescription*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Description : Proc(ICertPropertyDescription*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyDescription, lpVtbl : ICertPropertyDescriptionVtbl* do
    GUID = LibC::GUID.new(0x728ab331_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyDescription*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyDescription*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyDescription*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyDescription*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyDescription*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyDescription*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyDescription*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyDescription*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyDescription*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyDescription*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyDescription*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyDescription*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyDescription*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyDescription*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyDescription*, strDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strDescription)
    end
    def get_Description(this : ICertPropertyDescription*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyAutoEnrollVtbl,
    query_interface : Proc(ICertPropertyAutoEnroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyAutoEnroll*, UInt32),
    release : Proc(ICertPropertyAutoEnroll*, UInt32),
    get_type_info_count : Proc(ICertPropertyAutoEnroll*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyAutoEnroll*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyAutoEnroll*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyAutoEnroll*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyAutoEnroll*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyAutoEnroll*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyAutoEnroll*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyAutoEnroll*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyAutoEnroll*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyAutoEnroll*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyAutoEnroll*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyAutoEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TemplateName : Proc(ICertPropertyAutoEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyAutoEnroll, lpVtbl : ICertPropertyAutoEnrollVtbl* do
    GUID = LibC::GUID.new(0x728ab332_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyAutoEnroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyAutoEnroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyAutoEnroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyAutoEnroll*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyAutoEnroll*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyAutoEnroll*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyAutoEnroll*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyAutoEnroll*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyAutoEnroll*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyAutoEnroll*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyAutoEnroll*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyAutoEnroll*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyAutoEnroll*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyAutoEnroll*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyAutoEnroll*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strTemplateName)
    end
    def get_TemplateName(this : ICertPropertyAutoEnroll*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateName.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyRequestOriginatorVtbl,
    query_interface : Proc(ICertPropertyRequestOriginator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyRequestOriginator*, UInt32),
    release : Proc(ICertPropertyRequestOriginator*, UInt32),
    get_type_info_count : Proc(ICertPropertyRequestOriginator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyRequestOriginator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyRequestOriginator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyRequestOriginator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyRequestOriginator*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyRequestOriginator*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyRequestOriginator*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyRequestOriginator*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyRequestOriginator*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyRequestOriginator*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyRequestOriginator*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyRequestOriginator*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_local_request_originator : Proc(ICertPropertyRequestOriginator*, Win32cr::Foundation::HRESULT),
    get_RequestOriginator : Proc(ICertPropertyRequestOriginator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyRequestOriginator, lpVtbl : ICertPropertyRequestOriginatorVtbl* do
    GUID = LibC::GUID.new(0x728ab333_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyRequestOriginator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyRequestOriginator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyRequestOriginator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyRequestOriginator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyRequestOriginator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyRequestOriginator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyRequestOriginator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyRequestOriginator*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyRequestOriginator*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyRequestOriginator*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyRequestOriginator*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyRequestOriginator*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyRequestOriginator*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyRequestOriginator*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyRequestOriginator*, strRequestOriginator : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strRequestOriginator)
    end
    def initialize_from_local_request_originator(this : ICertPropertyRequestOriginator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_local_request_originator.call(this)
    end
    def get_RequestOriginator(this : ICertPropertyRequestOriginator*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestOriginator.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertySHA1HashVtbl,
    query_interface : Proc(ICertPropertySHA1Hash*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertySHA1Hash*, UInt32),
    release : Proc(ICertPropertySHA1Hash*, UInt32),
    get_type_info_count : Proc(ICertPropertySHA1Hash*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertySHA1Hash*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertySHA1Hash*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertySHA1Hash*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertySHA1Hash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertySHA1Hash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertySHA1Hash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SHA1Hash : Proc(ICertPropertySHA1Hash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertySHA1Hash, lpVtbl : ICertPropertySHA1HashVtbl* do
    GUID = LibC::GUID.new(0x728ab334_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertySHA1Hash*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertySHA1Hash*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertySHA1Hash*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertySHA1Hash*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertySHA1Hash*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertySHA1Hash*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertySHA1Hash*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertySHA1Hash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertySHA1Hash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertySHA1Hash*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertySHA1Hash*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertySHA1Hash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertySHA1Hash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertySHA1Hash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertySHA1Hash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strRenewalValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, strRenewalValue)
    end
    def get_SHA1Hash(this : ICertPropertySHA1Hash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SHA1Hash.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ICertPropertyKeyProvInfoVtbl,
    query_interface : Proc(ICertPropertyKeyProvInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyKeyProvInfo*, UInt32),
    release : Proc(ICertPropertyKeyProvInfo*, UInt32),
    get_type_info_count : Proc(ICertPropertyKeyProvInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyKeyProvInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyKeyProvInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyKeyProvInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyKeyProvInfo*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyKeyProvInfo*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyKeyProvInfo*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyKeyProvInfo*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyKeyProvInfo*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyKeyProvInfo*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyKeyProvInfo*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyKeyProvInfo*, Void*, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(ICertPropertyKeyProvInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyKeyProvInfo, lpVtbl : ICertPropertyKeyProvInfoVtbl* do
    GUID = LibC::GUID.new(0x728ab336_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyKeyProvInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyKeyProvInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyKeyProvInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyKeyProvInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyKeyProvInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyKeyProvInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyKeyProvInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyKeyProvInfo*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyKeyProvInfo*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyKeyProvInfo*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyKeyProvInfo*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyKeyProvInfo*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyKeyProvInfo*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyKeyProvInfo*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyKeyProvInfo*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pValue)
    end
    def get_PrivateKey(this : ICertPropertyKeyProvInfo*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end

  end

  @[Extern]
  record ICertPropertyArchivedVtbl,
    query_interface : Proc(ICertPropertyArchived*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyArchived*, UInt32),
    release : Proc(ICertPropertyArchived*, UInt32),
    get_type_info_count : Proc(ICertPropertyArchived*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyArchived*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyArchived*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyArchived*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyArchived*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyArchived*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyArchived*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyArchived*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyArchived*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyArchived*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyArchived*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyArchived*, Int16, Win32cr::Foundation::HRESULT),
    get_Archived : Proc(ICertPropertyArchived*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyArchived, lpVtbl : ICertPropertyArchivedVtbl* do
    GUID = LibC::GUID.new(0x728ab337_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyArchived*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyArchived*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyArchived*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyArchived*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyArchived*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyArchived*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyArchived*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyArchived*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyArchived*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyArchived*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyArchived*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyArchived*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyArchived*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyArchived*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyArchived*, archived_value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, archived_value)
    end
    def get_Archived(this : ICertPropertyArchived*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Archived.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyBackedUpVtbl,
    query_interface : Proc(ICertPropertyBackedUp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyBackedUp*, UInt32),
    release : Proc(ICertPropertyBackedUp*, UInt32),
    get_type_info_count : Proc(ICertPropertyBackedUp*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyBackedUp*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyBackedUp*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyBackedUp*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyBackedUp*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyBackedUp*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyBackedUp*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyBackedUp*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyBackedUp*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyBackedUp*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyBackedUp*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_current_time : Proc(ICertPropertyBackedUp*, Int16, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyBackedUp*, Int16, Float64, Win32cr::Foundation::HRESULT),
    get_BackedUpValue : Proc(ICertPropertyBackedUp*, Int16*, Win32cr::Foundation::HRESULT),
    get_BackedUpTime : Proc(ICertPropertyBackedUp*, Float64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyBackedUp, lpVtbl : ICertPropertyBackedUpVtbl* do
    GUID = LibC::GUID.new(0x728ab338_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyBackedUp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyBackedUp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyBackedUp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyBackedUp*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyBackedUp*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyBackedUp*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyBackedUp*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyBackedUp*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyBackedUp*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyBackedUp*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyBackedUp*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyBackedUp*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyBackedUp*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyBackedUp*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_from_current_time(this : ICertPropertyBackedUp*, backed_up_value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_current_time.call(this, backed_up_value)
    end
    def initialize__(this : ICertPropertyBackedUp*, backed_up_value : Int16, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, backed_up_value, date)
    end
    def get_BackedUpValue(this : ICertPropertyBackedUp*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackedUpValue.call(this, pValue)
    end
    def get_BackedUpTime(this : ICertPropertyBackedUp*, pDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackedUpTime.call(this, pDate)
    end

  end

  @[Extern]
  record ICertPropertyEnrollmentVtbl,
    query_interface : Proc(ICertPropertyEnrollment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyEnrollment*, UInt32),
    release : Proc(ICertPropertyEnrollment*, UInt32),
    get_type_info_count : Proc(ICertPropertyEnrollment*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyEnrollment*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyEnrollment*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyEnrollment*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyEnrollment*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyEnrollment*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyEnrollment*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyEnrollment*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyEnrollment*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyEnrollment*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestId : Proc(ICertPropertyEnrollment*, Int32*, Win32cr::Foundation::HRESULT),
    get_CADnsName : Proc(ICertPropertyEnrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CAName : Proc(ICertPropertyEnrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(ICertPropertyEnrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyEnrollment, lpVtbl : ICertPropertyEnrollmentVtbl* do
    GUID = LibC::GUID.new(0x728ab339_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyEnrollment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyEnrollment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyEnrollment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyEnrollment*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyEnrollment*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyEnrollment*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyEnrollment*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyEnrollment*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyEnrollment*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyEnrollment*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyEnrollment*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyEnrollment*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyEnrollment*, request_id : Int32, strCADnsName : Win32cr::Foundation::BSTR, strCAName : Win32cr::Foundation::BSTR, strFriendlyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, request_id, strCADnsName, strCAName, strFriendlyName)
    end
    def get_RequestId(this : ICertPropertyEnrollment*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestId.call(this, pValue)
    end
    def get_CADnsName(this : ICertPropertyEnrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CADnsName.call(this, pValue)
    end
    def get_CAName(this : ICertPropertyEnrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAName.call(this, pValue)
    end
    def get_FriendlyName(this : ICertPropertyEnrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, pValue)
    end

  end

  @[Extern]
  record ICertPropertyRenewalVtbl,
    query_interface : Proc(ICertPropertyRenewal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyRenewal*, UInt32),
    release : Proc(ICertPropertyRenewal*, UInt32),
    get_type_info_count : Proc(ICertPropertyRenewal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyRenewal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyRenewal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyRenewal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyRenewal*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyRenewal*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyRenewal*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate_hash : Proc(ICertPropertyRenewal*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Renewal : Proc(ICertPropertyRenewal*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyRenewal, lpVtbl : ICertPropertyRenewalVtbl* do
    GUID = LibC::GUID.new(0x728ab33a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyRenewal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyRenewal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyRenewal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyRenewal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyRenewal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyRenewal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyRenewal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyRenewal*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyRenewal*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyRenewal*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyRenewal*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyRenewal*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyRenewal*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyRenewal*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyRenewal*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strRenewalValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, strRenewalValue)
    end
    def initialize_from_certificate_hash(this : ICertPropertyRenewal*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate_hash.call(this, machine_context, encoding, strCertificate)
    end
    def get_Renewal(this : ICertPropertyRenewal*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Renewal.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ICertPropertyArchivedKeyHashVtbl,
    query_interface : Proc(ICertPropertyArchivedKeyHash*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyArchivedKeyHash*, UInt32),
    release : Proc(ICertPropertyArchivedKeyHash*, UInt32),
    get_type_info_count : Proc(ICertPropertyArchivedKeyHash*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyArchivedKeyHash*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyArchivedKeyHash*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyArchivedKeyHash*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyArchivedKeyHash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyArchivedKeyHash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyArchivedKeyHash*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ArchivedKeyHash : Proc(ICertPropertyArchivedKeyHash*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyArchivedKeyHash, lpVtbl : ICertPropertyArchivedKeyHashVtbl* do
    GUID = LibC::GUID.new(0x728ab33b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyArchivedKeyHash*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyArchivedKeyHash*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyArchivedKeyHash*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyArchivedKeyHash*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyArchivedKeyHash*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyArchivedKeyHash*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyArchivedKeyHash*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyArchivedKeyHash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyArchivedKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyArchivedKeyHash*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyArchivedKeyHash*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyArchivedKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyArchivedKeyHash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyArchivedKeyHash*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyArchivedKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strArchivedKeyHashValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, strArchivedKeyHashValue)
    end
    def get_ArchivedKeyHash(this : ICertPropertyArchivedKeyHash*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ArchivedKeyHash.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ICertPropertyEnrollmentPolicyServerVtbl,
    query_interface : Proc(ICertPropertyEnrollmentPolicyServer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertPropertyEnrollmentPolicyServer*, UInt32),
    release : Proc(ICertPropertyEnrollmentPolicyServer*, UInt32),
    get_type_info_count : Proc(ICertPropertyEnrollmentPolicyServer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertPropertyEnrollmentPolicyServer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertPropertyEnrollmentPolicyServer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertPropertyEnrollmentPolicyServer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(ICertPropertyEnrollmentPolicyServer*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PropertyId : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*, Win32cr::Foundation::HRESULT),
    put_PropertyId : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_from_certificate : Proc(ICertPropertyEnrollmentPolicyServer*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_value_on_certificate : Proc(ICertPropertyEnrollmentPolicyServer*, Int16, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::EnrollmentPolicyServerPropertyFlags, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_policy_server_url : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_policy_server_id : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_enrollment_server_url : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_request_id_string : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_property_flags : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::EnrollmentPolicyServerPropertyFlags*, Win32cr::Foundation::HRESULT),
    get_url_flags : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags*, Win32cr::Foundation::HRESULT),
    get_authentication : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*, Win32cr::Foundation::HRESULT),
    get_enrollment_server_authentication : Proc(ICertPropertyEnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertPropertyEnrollmentPolicyServer, lpVtbl : ICertPropertyEnrollmentPolicyServerVtbl* do
    GUID = LibC::GUID.new(0x728ab34a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertPropertyEnrollmentPolicyServer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertPropertyEnrollmentPolicyServer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertPropertyEnrollmentPolicyServer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertPropertyEnrollmentPolicyServer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertPropertyEnrollmentPolicyServer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertPropertyEnrollmentPolicyServer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertPropertyEnrollmentPolicyServer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize_from_certificate(this : ICertPropertyEnrollmentPolicyServer*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize_decode(this : ICertPropertyEnrollmentPolicyServer*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strEncodedData : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, encoding, strEncodedData)
    end
    def get_PropertyId(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PropertyId.call(this, pValue)
    end
    def put_PropertyId(this : ICertPropertyEnrollmentPolicyServer*, value : Win32cr::Security::Cryptography::Certificates::CERTENROLL_PROPERTYID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PropertyId.call(this, value)
    end
    def get_RawData(this : ICertPropertyEnrollmentPolicyServer*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def remove_from_certificate(this : ICertPropertyEnrollmentPolicyServer*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def set_value_on_certificate(this : ICertPropertyEnrollmentPolicyServer*, machine_context : Int16, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_on_certificate.call(this, machine_context, encoding, strCertificate)
    end
    def initialize__(this : ICertPropertyEnrollmentPolicyServer*, property_flags : Win32cr::Security::Cryptography::Certificates::EnrollmentPolicyServerPropertyFlags, auth_flags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, enrollment_server_auth_flags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, url_flags : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, strRequestId : Win32cr::Foundation::BSTR, strUrl : Win32cr::Foundation::BSTR, strId : Win32cr::Foundation::BSTR, strEnrollmentServerUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, property_flags, auth_flags, enrollment_server_auth_flags, url_flags, strRequestId, strUrl, strId, strEnrollmentServerUrl)
    end
    def get_policy_server_url(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_policy_server_url.call(this, pValue)
    end
    def get_policy_server_id(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_policy_server_id.call(this, pValue)
    end
    def get_enrollment_server_url(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enrollment_server_url.call(this, pValue)
    end
    def get_request_id_string(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id_string.call(this, pValue)
    end
    def get_property_flags(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::EnrollmentPolicyServerPropertyFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_flags.call(this, pValue)
    end
    def get_url_flags(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url_flags.call(this, pValue)
    end
    def get_authentication(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_authentication.call(this, pValue)
    end
    def get_enrollment_server_authentication(this : ICertPropertyEnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enrollment_server_authentication.call(this, pValue)
    end

  end

  @[Extern]
  record IX509SignatureInformationVtbl,
    query_interface : Proc(IX509SignatureInformation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509SignatureInformation*, UInt32),
    release : Proc(IX509SignatureInformation*, UInt32),
    get_type_info_count : Proc(IX509SignatureInformation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509SignatureInformation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509SignatureInformation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509SignatureInformation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509SignatureInformation*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509SignatureInformation*, Void*, Win32cr::Foundation::HRESULT),
    get_PublicKeyAlgorithm : Proc(IX509SignatureInformation*, Void**, Win32cr::Foundation::HRESULT),
    put_PublicKeyAlgorithm : Proc(IX509SignatureInformation*, Void*, Win32cr::Foundation::HRESULT),
    get_Parameters : Proc(IX509SignatureInformation*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Parameters : Proc(IX509SignatureInformation*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509SignatureInformation*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509SignatureInformation*, Int16, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithmSet : Proc(IX509SignatureInformation*, Int16*, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509SignatureInformation*, Int16*, Win32cr::Foundation::HRESULT),
    put_NullSigned : Proc(IX509SignatureInformation*, Int16, Win32cr::Foundation::HRESULT),
    get_signature_algorithm : Proc(IX509SignatureInformation*, Int16, Int16, Void**, Win32cr::Foundation::HRESULT),
    set_default_values : Proc(IX509SignatureInformation*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509SignatureInformation, lpVtbl : IX509SignatureInformationVtbl* do
    GUID = LibC::GUID.new(0x728ab33c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509SignatureInformation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509SignatureInformation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509SignatureInformation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509SignatureInformation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509SignatureInformation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509SignatureInformation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509SignatureInformation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_HashAlgorithm(this : IX509SignatureInformation*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509SignatureInformation*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_PublicKeyAlgorithm(this : IX509SignatureInformation*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKeyAlgorithm.call(this, ppValue)
    end
    def put_PublicKeyAlgorithm(this : IX509SignatureInformation*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PublicKeyAlgorithm.call(this, pValue)
    end
    def get_Parameters(this : IX509SignatureInformation*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parameters.call(this, encoding, pValue)
    end
    def put_Parameters(this : IX509SignatureInformation*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Parameters.call(this, encoding, value)
    end
    def get_AlternateSignatureAlgorithm(this : IX509SignatureInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509SignatureInformation*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_AlternateSignatureAlgorithmSet(this : IX509SignatureInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithmSet.call(this, pValue)
    end
    def get_NullSigned(this : IX509SignatureInformation*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def put_NullSigned(this : IX509SignatureInformation*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NullSigned.call(this, value)
    end
    def get_signature_algorithm(this : IX509SignatureInformation*, pkcs7_signature : Int16, signature_key : Int16, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signature_algorithm.call(this, pkcs7_signature, signature_key, ppValue)
    end
    def set_default_values(this : IX509SignatureInformation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_values.call(this)
    end

  end

  @[Extern]
  record ISignerCertificateVtbl,
    query_interface : Proc(ISignerCertificate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISignerCertificate*, UInt32),
    release : Proc(ISignerCertificate*, UInt32),
    get_type_info_count : Proc(ISignerCertificate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISignerCertificate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISignerCertificate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISignerCertificate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ISignerCertificate*, Int16, Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(ISignerCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(ISignerCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(ISignerCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(ISignerCertificate*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(ISignerCertificate*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(ISignerCertificate*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(ISignerCertificate*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(ISignerCertificate*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_Pin : Proc(ISignerCertificate*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(ISignerCertificate*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISignerCertificate, lpVtbl : ISignerCertificateVtbl* do
    GUID = LibC::GUID.new(0x728ab33d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ISignerCertificate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISignerCertificate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISignerCertificate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISignerCertificate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISignerCertificate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISignerCertificate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISignerCertificate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ISignerCertificate*, machine_context : Int16, verify_type : Win32cr::Security::Cryptography::Certificates::X509PrivateKeyVerify, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strCertificate : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, machine_context, verify_type, encoding, strCertificate)
    end
    def get_Certificate(this : ISignerCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def get_PrivateKey(this : ISignerCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_Silent(this : ISignerCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : ISignerCertificate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : ISignerCertificate*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : ISignerCertificate*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : ISignerCertificate*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : ISignerCertificate*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def put_Pin(this : ISignerCertificate*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pin.call(this, value)
    end
    def get_SignatureInformation(this : ISignerCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end

  end

  @[Extern]
  record ISignerCertificatesVtbl,
    query_interface : Proc(ISignerCertificates*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISignerCertificates*, UInt32),
    release : Proc(ISignerCertificates*, UInt32),
    get_type_info_count : Proc(ISignerCertificates*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ISignerCertificates*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ISignerCertificates*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ISignerCertificates*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ISignerCertificates*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ISignerCertificates*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ISignerCertificates*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ISignerCertificates*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ISignerCertificates*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ISignerCertificates*, Win32cr::Foundation::HRESULT),
    find : Proc(ISignerCertificates*, Void*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ISignerCertificates, lpVtbl : ISignerCertificatesVtbl* do
    GUID = LibC::GUID.new(0x728ab33e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ISignerCertificates*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISignerCertificates*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISignerCertificates*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ISignerCertificates*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ISignerCertificates*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ISignerCertificates*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ISignerCertificates*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ISignerCertificates*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ISignerCertificates*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ISignerCertificates*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ISignerCertificates*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ISignerCertificates*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ISignerCertificates*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def find(this : ISignerCertificates*, pSignerCert : Void*, piSignerCert : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find.call(this, pSignerCert, piSignerCert)
    end

  end

  @[Extern]
  record IX509NameValuePairVtbl,
    query_interface : Proc(IX509NameValuePair*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509NameValuePair*, UInt32),
    release : Proc(IX509NameValuePair*, UInt32),
    get_type_info_count : Proc(IX509NameValuePair*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509NameValuePair*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509NameValuePair*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509NameValuePair*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509NameValuePair*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Value : Proc(IX509NameValuePair*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IX509NameValuePair*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509NameValuePair, lpVtbl : IX509NameValuePairVtbl* do
    GUID = LibC::GUID.new(0x728ab33f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509NameValuePair*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509NameValuePair*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509NameValuePair*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509NameValuePair*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509NameValuePair*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509NameValuePair*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509NameValuePair*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509NameValuePair*, strName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strName, strValue)
    end
    def get_Value(this : IX509NameValuePair*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Value.call(this, pValue)
    end
    def get_Name(this : IX509NameValuePair*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pValue)
    end

  end

  @[Extern]
  record IX509NameValuePairsVtbl,
    query_interface : Proc(IX509NameValuePairs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509NameValuePairs*, UInt32),
    release : Proc(IX509NameValuePairs*, UInt32),
    get_type_info_count : Proc(IX509NameValuePairs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509NameValuePairs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509NameValuePairs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509NameValuePairs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509NameValuePairs*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509NameValuePairs*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509NameValuePairs*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509NameValuePairs*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509NameValuePairs*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509NameValuePairs*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509NameValuePairs, lpVtbl : IX509NameValuePairsVtbl* do
    GUID = LibC::GUID.new(0x728ab340_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509NameValuePairs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509NameValuePairs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509NameValuePairs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509NameValuePairs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509NameValuePairs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509NameValuePairs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509NameValuePairs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509NameValuePairs*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509NameValuePairs*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509NameValuePairs*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509NameValuePairs*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509NameValuePairs*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509NameValuePairs*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IX509CertificateTemplateVtbl,
    query_interface : Proc(IX509CertificateTemplate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateTemplate*, UInt32),
    release : Proc(IX509CertificateTemplate*, UInt32),
    get_type_info_count : Proc(IX509CertificateTemplate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateTemplate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateTemplate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateTemplate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Property : Proc(IX509CertificateTemplate*, Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateTemplate, lpVtbl : IX509CertificateTemplateVtbl* do
    GUID = LibC::GUID.new(0x54244a13_u32, 0x555a_u16, 0x4e22_u16, StaticArray[0x89_u8, 0x6d_u8, 0x1b_u8, 0xe_u8, 0x52_u8, 0xf7_u8, 0x64_u8, 0x6_u8])
    def query_interface(this : IX509CertificateTemplate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateTemplate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateTemplate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateTemplate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateTemplate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateTemplate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateTemplate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Property(this : IX509CertificateTemplate*, property : Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, pValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Property.call(this, property, pValue)
    end

  end

  @[Extern]
  record IX509CertificateTemplatesVtbl,
    query_interface : Proc(IX509CertificateTemplates*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateTemplates*, UInt32),
    release : Proc(IX509CertificateTemplates*, UInt32),
    get_type_info_count : Proc(IX509CertificateTemplates*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateTemplates*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateTemplates*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateTemplates*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509CertificateTemplates*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509CertificateTemplates*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509CertificateTemplates*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509CertificateTemplates*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509CertificateTemplates*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509CertificateTemplates*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(IX509CertificateTemplates*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ItemByOid : Proc(IX509CertificateTemplates*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateTemplates, lpVtbl : IX509CertificateTemplatesVtbl* do
    GUID = LibC::GUID.new(0x13b79003_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateTemplates*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateTemplates*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateTemplates*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateTemplates*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateTemplates*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateTemplates*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateTemplates*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509CertificateTemplates*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509CertificateTemplates*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509CertificateTemplates*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509CertificateTemplates*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509CertificateTemplates*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509CertificateTemplates*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_ItemByName(this : IX509CertificateTemplates*, bstrName : Win32cr::Foundation::BSTR, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, bstrName, ppValue)
    end
    def get_ItemByOid(this : IX509CertificateTemplates*, pOid : Void*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByOid.call(this, pOid, ppValue)
    end

  end

  @[Extern]
  record IX509CertificateTemplateWritableVtbl,
    query_interface : Proc(IX509CertificateTemplateWritable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateTemplateWritable*, UInt32),
    release : Proc(IX509CertificateTemplateWritable*, UInt32),
    get_type_info_count : Proc(IX509CertificateTemplateWritable*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateTemplateWritable*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateTemplateWritable*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateTemplateWritable*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateTemplateWritable*, Void*, Win32cr::Foundation::HRESULT),
    commit : Proc(IX509CertificateTemplateWritable*, Win32cr::Security::Cryptography::Certificates::CommitTemplateFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Property : Proc(IX509CertificateTemplateWritable*, Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_Property : Proc(IX509CertificateTemplateWritable*, Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateTemplateWritable*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateTemplateWritable, lpVtbl : IX509CertificateTemplateWritableVtbl* do
    GUID = LibC::GUID.new(0xf49466a7_u32, 0x395a_u16, 0x4e9e_u16, StaticArray[0xb6_u8, 0xe7_u8, 0x32_u8, 0xb3_u8, 0x31_u8, 0x60_u8, 0xd_u8, 0xc0_u8])
    def query_interface(this : IX509CertificateTemplateWritable*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateTemplateWritable*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateTemplateWritable*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateTemplateWritable*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateTemplateWritable*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateTemplateWritable*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateTemplateWritable*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateTemplateWritable*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pValue)
    end
    def commit(this : IX509CertificateTemplateWritable*, commitFlags : Win32cr::Security::Cryptography::Certificates::CommitTemplateFlags, strServerContext : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, commitFlags, strServerContext)
    end
    def get_Property(this : IX509CertificateTemplateWritable*, property : Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, pValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Property.call(this, property, pValue)
    end
    def put_Property(this : IX509CertificateTemplateWritable*, property : Win32cr::Security::Cryptography::Certificates::EnrollmentTemplateProperty, value : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Property.call(this, property, value)
    end
    def get_Template(this : IX509CertificateTemplateWritable*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppValue)
    end

  end

  @[Extern]
  record ICertificationAuthorityVtbl,
    query_interface : Proc(ICertificationAuthority*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificationAuthority*, UInt32),
    release : Proc(ICertificationAuthority*, UInt32),
    get_type_info_count : Proc(ICertificationAuthority*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificationAuthority*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificationAuthority*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificationAuthority*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Property : Proc(ICertificationAuthority*, Win32cr::Security::Cryptography::Certificates::EnrollmentCAProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificationAuthority, lpVtbl : ICertificationAuthorityVtbl* do
    GUID = LibC::GUID.new(0x835d1f61_u32, 0x1e95_u16, 0x4bc8_u16, StaticArray[0xb4_u8, 0xd3_u8, 0x97_u8, 0x6c_u8, 0x42_u8, 0xb9_u8, 0x68_u8, 0xf7_u8])
    def query_interface(this : ICertificationAuthority*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificationAuthority*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificationAuthority*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificationAuthority*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificationAuthority*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificationAuthority*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificationAuthority*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Property(this : ICertificationAuthority*, property : Win32cr::Security::Cryptography::Certificates::EnrollmentCAProperty, pValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Property.call(this, property, pValue)
    end

  end

  @[Extern]
  record ICertificationAuthoritiesVtbl,
    query_interface : Proc(ICertificationAuthorities*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificationAuthorities*, UInt32),
    release : Proc(ICertificationAuthorities*, UInt32),
    get_type_info_count : Proc(ICertificationAuthorities*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificationAuthorities*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificationAuthorities*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificationAuthorities*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(ICertificationAuthorities*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICertificationAuthorities*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICertificationAuthorities*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ICertificationAuthorities*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(ICertificationAuthorities*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(ICertificationAuthorities*, Win32cr::Foundation::HRESULT),
    compute_site_costs : Proc(ICertificationAuthorities*, Win32cr::Foundation::HRESULT),
    get_ItemByName : Proc(ICertificationAuthorities*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificationAuthorities, lpVtbl : ICertificationAuthoritiesVtbl* do
    GUID = LibC::GUID.new(0x13b79005_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : ICertificationAuthorities*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificationAuthorities*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificationAuthorities*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificationAuthorities*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificationAuthorities*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificationAuthorities*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificationAuthorities*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : ICertificationAuthorities*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : ICertificationAuthorities*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : ICertificationAuthorities*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : ICertificationAuthorities*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : ICertificationAuthorities*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : ICertificationAuthorities*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def compute_site_costs(this : ICertificationAuthorities*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_site_costs.call(this)
    end
    def get_ItemByName(this : ICertificationAuthorities*, strName : Win32cr::Foundation::BSTR, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByName.call(this, strName, ppValue)
    end

  end

  @[Extern]
  record IX509EnrollmentPolicyServerVtbl,
    query_interface : Proc(IX509EnrollmentPolicyServer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509EnrollmentPolicyServer*, UInt32),
    release : Proc(IX509EnrollmentPolicyServer*, UInt32),
    get_type_info_count : Proc(IX509EnrollmentPolicyServer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509EnrollmentPolicyServer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509EnrollmentPolicyServer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509EnrollmentPolicyServer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Int16, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    load_policy : Proc(IX509EnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentPolicyLoadOption, Win32cr::Foundation::HRESULT),
    get_templates : Proc(IX509EnrollmentPolicyServer*, Void**, Win32cr::Foundation::HRESULT),
    get_c_as_for_template : Proc(IX509EnrollmentPolicyServer*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_c_as : Proc(IX509EnrollmentPolicyServer*, Void**, Win32cr::Foundation::HRESULT),
    validate : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::HRESULT),
    get_custom_oids : Proc(IX509EnrollmentPolicyServer*, Void**, Win32cr::Foundation::HRESULT),
    get_next_update_time : Proc(IX509EnrollmentPolicyServer*, Float64*, Win32cr::Foundation::HRESULT),
    get_last_update_time : Proc(IX509EnrollmentPolicyServer*, Float64*, Win32cr::Foundation::HRESULT),
    get_policy_server_url : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_policy_server_id : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_friendly_name : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_is_default_cep : Proc(IX509EnrollmentPolicyServer*, Int16*, Win32cr::Foundation::HRESULT),
    get_use_client_id : Proc(IX509EnrollmentPolicyServer*, Int16*, Win32cr::Foundation::HRESULT),
    get_allow_un_trusted_ca : Proc(IX509EnrollmentPolicyServer*, Int16*, Win32cr::Foundation::HRESULT),
    get_cache_path : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_cache_dir : Proc(IX509EnrollmentPolicyServer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_auth_flags : Proc(IX509EnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*, Win32cr::Foundation::HRESULT),
    set_credential : Proc(IX509EnrollmentPolicyServer*, Int32, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    query_changes : Proc(IX509EnrollmentPolicyServer*, Int16*, Win32cr::Foundation::HRESULT),
    initialize_import : Proc(IX509EnrollmentPolicyServer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    export : Proc(IX509EnrollmentPolicyServer*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentPolicyExportFlags, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Cost : Proc(IX509EnrollmentPolicyServer*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Cost : Proc(IX509EnrollmentPolicyServer*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509EnrollmentPolicyServer, lpVtbl : IX509EnrollmentPolicyServerVtbl* do
    GUID = LibC::GUID.new(0x13b79026_u32, 0x2181_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509EnrollmentPolicyServer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509EnrollmentPolicyServer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509EnrollmentPolicyServer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509EnrollmentPolicyServer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509EnrollmentPolicyServer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509EnrollmentPolicyServer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509EnrollmentPolicyServer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509EnrollmentPolicyServer*, bstrPolicyServerUrl : Win32cr::Foundation::BSTR, bstrPolicyServerId : Win32cr::Foundation::BSTR, authFlags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, fIsUnTrusted : Int16, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, bstrPolicyServerUrl, bstrPolicyServerId, authFlags, fIsUnTrusted, context)
    end
    def load_policy(this : IX509EnrollmentPolicyServer*, option : Win32cr::Security::Cryptography::Certificates::X509EnrollmentPolicyLoadOption) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_policy.call(this, option)
    end
    def get_templates(this : IX509EnrollmentPolicyServer*, pTemplates : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_templates.call(this, pTemplates)
    end
    def get_c_as_for_template(this : IX509EnrollmentPolicyServer*, pTemplate : Void*, ppCAs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_c_as_for_template.call(this, pTemplate, ppCAs)
    end
    def get_c_as(this : IX509EnrollmentPolicyServer*, ppCAs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_c_as.call(this, ppCAs)
    end
    def validate(this : IX509EnrollmentPolicyServer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this)
    end
    def get_custom_oids(this : IX509EnrollmentPolicyServer*, ppObjectIds : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_custom_oids.call(this, ppObjectIds)
    end
    def get_next_update_time(this : IX509EnrollmentPolicyServer*, pDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_update_time.call(this, pDate)
    end
    def get_last_update_time(this : IX509EnrollmentPolicyServer*, pDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_update_time.call(this, pDate)
    end
    def get_policy_server_url(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_policy_server_url.call(this, pValue)
    end
    def get_policy_server_id(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_policy_server_id.call(this, pValue)
    end
    def get_friendly_name(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendly_name.call(this, pValue)
    end
    def get_is_default_cep(this : IX509EnrollmentPolicyServer*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_is_default_cep.call(this, pValue)
    end
    def get_use_client_id(this : IX509EnrollmentPolicyServer*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_use_client_id.call(this, pValue)
    end
    def get_allow_un_trusted_ca(this : IX509EnrollmentPolicyServer*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allow_un_trusted_ca.call(this, pValue)
    end
    def get_cache_path(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cache_path.call(this, pValue)
    end
    def get_cache_dir(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cache_dir.call(this, pValue)
    end
    def get_auth_flags(this : IX509EnrollmentPolicyServer*, pValue : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auth_flags.call(this, pValue)
    end
    def set_credential(this : IX509EnrollmentPolicyServer*, hWndParent : Int32, flag : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, strCredential : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_credential.call(this, hWndParent, flag, strCredential, strPassword)
    end
    def query_changes(this : IX509EnrollmentPolicyServer*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_changes.call(this, pValue)
    end
    def initialize_import(this : IX509EnrollmentPolicyServer*, val : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_import.call(this, val)
    end
    def export(this : IX509EnrollmentPolicyServer*, exportFlags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentPolicyExportFlags, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.export.call(this, exportFlags, pVal)
    end
    def get_Cost(this : IX509EnrollmentPolicyServer*, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cost.call(this, pValue)
    end
    def put_Cost(this : IX509EnrollmentPolicyServer*, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Cost.call(this, value)
    end

  end

  @[Extern]
  record IX509PolicyServerUrlVtbl,
    query_interface : Proc(IX509PolicyServerUrl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509PolicyServerUrl*, UInt32),
    release : Proc(IX509PolicyServerUrl*, UInt32),
    get_type_info_count : Proc(IX509PolicyServerUrl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509PolicyServerUrl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509PolicyServerUrl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509PolicyServerUrl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    get_Url : Proc(IX509PolicyServerUrl*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Url : Proc(IX509PolicyServerUrl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Default : Proc(IX509PolicyServerUrl*, Int16*, Win32cr::Foundation::HRESULT),
    put_Default : Proc(IX509PolicyServerUrl*, Int16, Win32cr::Foundation::HRESULT),
    get_Flags : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags*, Win32cr::Foundation::HRESULT),
    put_Flags : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, Win32cr::Foundation::HRESULT),
    get_AuthFlags : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*, Win32cr::Foundation::HRESULT),
    put_AuthFlags : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::HRESULT),
    get_Cost : Proc(IX509PolicyServerUrl*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Cost : Proc(IX509PolicyServerUrl*, UInt32, Win32cr::Foundation::HRESULT),
    get_string_property : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlPropertyID, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_string_property : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlPropertyID, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    update_registry : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    remove_from_registry : Proc(IX509PolicyServerUrl*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509PolicyServerUrl, lpVtbl : IX509PolicyServerUrlVtbl* do
    GUID = LibC::GUID.new(0x884e204a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509PolicyServerUrl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509PolicyServerUrl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509PolicyServerUrl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509PolicyServerUrl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509PolicyServerUrl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509PolicyServerUrl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509PolicyServerUrl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509PolicyServerUrl*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def get_Url(this : IX509PolicyServerUrl*, ppValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Url.call(this, ppValue)
    end
    def put_Url(this : IX509PolicyServerUrl*, pValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Url.call(this, pValue)
    end
    def get_Default(this : IX509PolicyServerUrl*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Default.call(this, pValue)
    end
    def put_Default(this : IX509PolicyServerUrl*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Default.call(this, value)
    end
    def get_Flags(this : IX509PolicyServerUrl*, pValue : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Flags.call(this, pValue)
    end
    def put_Flags(this : IX509PolicyServerUrl*, flags : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Flags.call(this, flags)
    end
    def get_AuthFlags(this : IX509PolicyServerUrl*, pValue : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuthFlags.call(this, pValue)
    end
    def put_AuthFlags(this : IX509PolicyServerUrl*, flags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AuthFlags.call(this, flags)
    end
    def get_Cost(this : IX509PolicyServerUrl*, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cost.call(this, pValue)
    end
    def put_Cost(this : IX509PolicyServerUrl*, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Cost.call(this, value)
    end
    def get_string_property(this : IX509PolicyServerUrl*, propertyId : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlPropertyID, ppValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_property.call(this, propertyId, ppValue)
    end
    def set_string_property(this : IX509PolicyServerUrl*, propertyId : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlPropertyID, pValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string_property.call(this, propertyId, pValue)
    end
    def update_registry(this : IX509PolicyServerUrl*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_registry.call(this, context)
    end
    def remove_from_registry(this : IX509PolicyServerUrl*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_registry.call(this, context)
    end

  end

  @[Extern]
  record IX509PolicyServerListManagerVtbl,
    query_interface : Proc(IX509PolicyServerListManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509PolicyServerListManager*, UInt32),
    release : Proc(IX509PolicyServerListManager*, UInt32),
    get_type_info_count : Proc(IX509PolicyServerListManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509PolicyServerListManager*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509PolicyServerListManager*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509PolicyServerListManager*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509PolicyServerListManager*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509PolicyServerListManager*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509PolicyServerListManager*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509PolicyServerListManager*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509PolicyServerListManager*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509PolicyServerListManager*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509PolicyServerListManager*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509PolicyServerListManager, lpVtbl : IX509PolicyServerListManagerVtbl* do
    GUID = LibC::GUID.new(0x884e204b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509PolicyServerListManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509PolicyServerListManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509PolicyServerListManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509PolicyServerListManager*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509PolicyServerListManager*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509PolicyServerListManager*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509PolicyServerListManager*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509PolicyServerListManager*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509PolicyServerListManager*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509PolicyServerListManager*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509PolicyServerListManager*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509PolicyServerListManager*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509PolicyServerListManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def initialize__(this : IX509PolicyServerListManager*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, flags : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context, flags)
    end

  end

  @[Extern]
  record IX509CertificateRequestVtbl,
    query_interface : Proc(IX509CertificateRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequest*, UInt32),
    release : Proc(IX509CertificateRequest*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequest*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequest*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequest*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequest*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequest*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequest*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequest*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequest*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequest*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequest, lpVtbl : IX509CertificateRequestVtbl* do
    GUID = LibC::GUID.new(0x728ab341_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequest*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequest*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequest*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequest*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequest*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequest*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequest*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequest*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequest*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequest*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequest*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequest*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequest*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequest*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequest*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequest*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequest*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequest*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequest*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequest*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequest*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequest*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequest*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs10Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs10*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs10*, UInt32),
    release : Proc(IX509CertificateRequestPkcs10*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs10*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs10*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs10*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs10*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs10*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs10*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs10*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs10*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs10*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs10*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestPkcs10*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestPkcs10*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestPkcs10*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs10, lpVtbl : IX509CertificateRequestPkcs10Vtbl* do
    GUID = LibC::GUID.new(0x728ab342_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestPkcs10*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs10*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs10*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs10*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs10*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs10*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs10*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs10*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs10*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs10*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs10*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs10*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs10*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs10*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs10*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs10*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs10*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs10*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs10*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs10*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs10*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs10*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs10*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs10*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestPkcs10*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestPkcs10*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs10*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs10*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestPkcs10*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestPkcs10*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestPkcs10*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestPkcs10*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestPkcs10*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestPkcs10*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestPkcs10*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs10V2Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs10V2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs10V2*, UInt32),
    release : Proc(IX509CertificateRequestPkcs10V2*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs10V2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs10V2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs10V2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs10V2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs10V2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs10V2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs10V2*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V2*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs10V2*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V2*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V2*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestPkcs10V2*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V2*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_private_key_template : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_public_key_template : Proc(IX509CertificateRequestPkcs10V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestPkcs10V2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs10V2, lpVtbl : IX509CertificateRequestPkcs10V2Vtbl* do
    GUID = LibC::GUID.new(0x728ab35b_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestPkcs10V2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs10V2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs10V2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs10V2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs10V2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs10V2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs10V2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs10V2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs10V2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs10V2*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs10V2*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs10V2*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs10V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs10V2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs10V2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs10V2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs10V2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs10V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs10V2*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs10V2*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs10V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs10V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs10V2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestPkcs10V2*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestPkcs10V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestPkcs10V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestPkcs10V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestPkcs10V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestPkcs10V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestPkcs10V2*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end
    def initialize_from_template(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def initialize_from_private_key_template(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key_template.call(this, context, pPrivateKey, pPolicyServer, pTemplate)
    end
    def initialize_from_public_key_template(this : IX509CertificateRequestPkcs10V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key_template.call(this, context, pPublicKey, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestPkcs10V2*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestPkcs10V2*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs10V3Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs10V3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs10V3*, UInt32),
    release : Proc(IX509CertificateRequestPkcs10V3*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs10V3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs10V3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs10V3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs10V3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs10V3*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs10V3*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs10V3*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V3*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs10V3*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestPkcs10V3*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V3*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_private_key_template : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_public_key_template : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    get_AttestPrivateKey : Proc(IX509CertificateRequestPkcs10V3*, Int16*, Win32cr::Foundation::HRESULT),
    put_AttestPrivateKey : Proc(IX509CertificateRequestPkcs10V3*, Int16, Win32cr::Foundation::HRESULT),
    get_AttestationEncryptionCertificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_AttestationEncryptionCertificate : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptionAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT),
    put_EncryptionAlgorithm : Proc(IX509CertificateRequestPkcs10V3*, Void*, Win32cr::Foundation::HRESULT),
    get_EncryptionStrength : Proc(IX509CertificateRequestPkcs10V3*, Int32*, Win32cr::Foundation::HRESULT),
    put_EncryptionStrength : Proc(IX509CertificateRequestPkcs10V3*, Int32, Win32cr::Foundation::HRESULT),
    get_ChallengePassword : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ChallengePassword : Proc(IX509CertificateRequestPkcs10V3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509CertificateRequestPkcs10V3*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs10V3, lpVtbl : IX509CertificateRequestPkcs10V3Vtbl* do
    GUID = LibC::GUID.new(0x54ea9942_u32, 0x3d66_u16, 0x4530_u16, StaticArray[0xb7_u8, 0x6e_u8, 0x7c_u8, 0x91_u8, 0x70_u8, 0xd3_u8, 0xec_u8, 0x52_u8])
    def query_interface(this : IX509CertificateRequestPkcs10V3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs10V3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs10V3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs10V3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs10V3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs10V3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs10V3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs10V3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs10V3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs10V3*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs10V3*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs10V3*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs10V3*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs10V3*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs10V3*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs10V3*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs10V3*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs10V3*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V3*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs10V3*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestPkcs10V3*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestPkcs10V3*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestPkcs10V3*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V3*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestPkcs10V3*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end
    def initialize_from_template(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def initialize_from_private_key_template(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key_template.call(this, context, pPrivateKey, pPolicyServer, pTemplate)
    end
    def initialize_from_public_key_template(this : IX509CertificateRequestPkcs10V3*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key_template.call(this, context, pPublicKey, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestPkcs10V3*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestPkcs10V3*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end
    def get_AttestPrivateKey(this : IX509CertificateRequestPkcs10V3*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttestPrivateKey.call(this, pValue)
    end
    def put_AttestPrivateKey(this : IX509CertificateRequestPkcs10V3*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AttestPrivateKey.call(this, value)
    end
    def get_AttestationEncryptionCertificate(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttestationEncryptionCertificate.call(this, encoding, pValue)
    end
    def put_AttestationEncryptionCertificate(this : IX509CertificateRequestPkcs10V3*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AttestationEncryptionCertificate.call(this, encoding, value)
    end
    def get_EncryptionAlgorithm(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionAlgorithm.call(this, ppValue)
    end
    def put_EncryptionAlgorithm(this : IX509CertificateRequestPkcs10V3*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionAlgorithm.call(this, pValue)
    end
    def get_EncryptionStrength(this : IX509CertificateRequestPkcs10V3*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionStrength.call(this, pValue)
    end
    def put_EncryptionStrength(this : IX509CertificateRequestPkcs10V3*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionStrength.call(this, value)
    end
    def get_ChallengePassword(this : IX509CertificateRequestPkcs10V3*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChallengePassword.call(this, pValue)
    end
    def put_ChallengePassword(this : IX509CertificateRequestPkcs10V3*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ChallengePassword.call(this, value)
    end
    def get_NameValuePairs(this : IX509CertificateRequestPkcs10V3*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs10V4Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs10V4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs10V4*, UInt32),
    release : Proc(IX509CertificateRequestPkcs10V4*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs10V4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs10V4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs10V4*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs10V4*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs10V4*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs10V4*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs10V4*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestPkcs10V4*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_private_key_template : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_public_key_template : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_AttestPrivateKey : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_AttestPrivateKey : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT),
    get_AttestationEncryptionCertificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_AttestationEncryptionCertificate : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptionAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    put_EncryptionAlgorithm : Proc(IX509CertificateRequestPkcs10V4*, Void*, Win32cr::Foundation::HRESULT),
    get_EncryptionStrength : Proc(IX509CertificateRequestPkcs10V4*, Int32*, Win32cr::Foundation::HRESULT),
    put_EncryptionStrength : Proc(IX509CertificateRequestPkcs10V4*, Int32, Win32cr::Foundation::HRESULT),
    get_ChallengePassword : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ChallengePassword : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509CertificateRequestPkcs10V4*, Void**, Win32cr::Foundation::HRESULT),
    get_ClaimType : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::KeyAttestationClaimType*, Win32cr::Foundation::HRESULT),
    put_ClaimType : Proc(IX509CertificateRequestPkcs10V4*, Win32cr::Security::Cryptography::Certificates::KeyAttestationClaimType, Win32cr::Foundation::HRESULT),
    get_AttestPrivateKeyPreferred : Proc(IX509CertificateRequestPkcs10V4*, Int16*, Win32cr::Foundation::HRESULT),
    put_AttestPrivateKeyPreferred : Proc(IX509CertificateRequestPkcs10V4*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs10V4, lpVtbl : IX509CertificateRequestPkcs10V4Vtbl* do
    GUID = LibC::GUID.new(0x728ab363_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestPkcs10V4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs10V4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs10V4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs10V4*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs10V4*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs10V4*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs10V4*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs10V4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs10V4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs10V4*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs10V4*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs10V4*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs10V4*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs10V4*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs10V4*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs10V4*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs10V4*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestPkcs10V4*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestPkcs10V4*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestPkcs10V4*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestPkcs10V4*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end
    def initialize_from_template(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def initialize_from_private_key_template(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key_template.call(this, context, pPrivateKey, pPolicyServer, pTemplate)
    end
    def initialize_from_public_key_template(this : IX509CertificateRequestPkcs10V4*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key_template.call(this, context, pPublicKey, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestPkcs10V4*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestPkcs10V4*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end
    def get_AttestPrivateKey(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttestPrivateKey.call(this, pValue)
    end
    def put_AttestPrivateKey(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AttestPrivateKey.call(this, value)
    end
    def get_AttestationEncryptionCertificate(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttestationEncryptionCertificate.call(this, encoding, pValue)
    end
    def put_AttestationEncryptionCertificate(this : IX509CertificateRequestPkcs10V4*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AttestationEncryptionCertificate.call(this, encoding, value)
    end
    def get_EncryptionAlgorithm(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionAlgorithm.call(this, ppValue)
    end
    def put_EncryptionAlgorithm(this : IX509CertificateRequestPkcs10V4*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionAlgorithm.call(this, pValue)
    end
    def get_EncryptionStrength(this : IX509CertificateRequestPkcs10V4*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionStrength.call(this, pValue)
    end
    def put_EncryptionStrength(this : IX509CertificateRequestPkcs10V4*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionStrength.call(this, value)
    end
    def get_ChallengePassword(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChallengePassword.call(this, pValue)
    end
    def put_ChallengePassword(this : IX509CertificateRequestPkcs10V4*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ChallengePassword.call(this, value)
    end
    def get_NameValuePairs(this : IX509CertificateRequestPkcs10V4*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end
    def get_ClaimType(this : IX509CertificateRequestPkcs10V4*, pValue : Win32cr::Security::Cryptography::Certificates::KeyAttestationClaimType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClaimType.call(this, pValue)
    end
    def put_ClaimType(this : IX509CertificateRequestPkcs10V4*, value : Win32cr::Security::Cryptography::Certificates::KeyAttestationClaimType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClaimType.call(this, value)
    end
    def get_AttestPrivateKeyPreferred(this : IX509CertificateRequestPkcs10V4*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AttestPrivateKeyPreferred.call(this, pValue)
    end
    def put_AttestPrivateKeyPreferred(this : IX509CertificateRequestPkcs10V4*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AttestPrivateKeyPreferred.call(this, value)
    end

  end

  @[Extern]
  record IX509CertificateRequestCertificateVtbl,
    query_interface : Proc(IX509CertificateRequestCertificate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestCertificate*, UInt32),
    release : Proc(IX509CertificateRequestCertificate*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestCertificate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestCertificate*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestCertificate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestCertificate*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestCertificate*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestCertificate*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestCertificate*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestCertificate*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCertificate*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestCertificate*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestCertificate*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestCertificate*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    check_public_key_signature : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT),
    get_Issuer : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    put_Issuer : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT),
    get_NotBefore : Proc(IX509CertificateRequestCertificate*, Float64*, Win32cr::Foundation::HRESULT),
    put_NotBefore : Proc(IX509CertificateRequestCertificate*, Float64, Win32cr::Foundation::HRESULT),
    get_NotAfter : Proc(IX509CertificateRequestCertificate*, Float64*, Win32cr::Foundation::HRESULT),
    put_NotAfter : Proc(IX509CertificateRequestCertificate*, Float64, Win32cr::Foundation::HRESULT),
    get_SerialNumber : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SerialNumber : Proc(IX509CertificateRequestCertificate*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestCertificate*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestCertificate*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestCertificate, lpVtbl : IX509CertificateRequestCertificateVtbl* do
    GUID = LibC::GUID.new(0x728ab343_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestCertificate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestCertificate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestCertificate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestCertificate*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestCertificate*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestCertificate*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestCertificate*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestCertificate*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestCertificate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestCertificate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestCertificate*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestCertificate*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestCertificate*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestCertificate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestCertificate*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestCertificate*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestCertificate*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestCertificate*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestCertificate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestCertificate*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestCertificate*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestCertificate*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestCertificate*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestCertificate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestCertificate*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestCertificate*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestCertificate*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestCertificate*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestCertificate*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestCertificate*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestCertificate*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestCertificate*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestCertificate*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestCertificate*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestCertificate*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestCertificate*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end
    def check_public_key_signature(this : IX509CertificateRequestCertificate*, pPublicKey : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_public_key_signature.call(this, pPublicKey)
    end
    def get_Issuer(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Issuer.call(this, ppValue)
    end
    def put_Issuer(this : IX509CertificateRequestCertificate*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Issuer.call(this, pValue)
    end
    def get_NotBefore(this : IX509CertificateRequestCertificate*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotBefore.call(this, pValue)
    end
    def put_NotBefore(this : IX509CertificateRequestCertificate*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NotBefore.call(this, value)
    end
    def get_NotAfter(this : IX509CertificateRequestCertificate*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotAfter.call(this, pValue)
    end
    def put_NotAfter(this : IX509CertificateRequestCertificate*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NotAfter.call(this, value)
    end
    def get_SerialNumber(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SerialNumber.call(this, encoding, pValue)
    end
    def put_SerialNumber(this : IX509CertificateRequestCertificate*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SerialNumber.call(this, encoding, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestCertificate*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestCertificate*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end

  end

  @[Extern]
  record IX509CertificateRequestCertificate2Vtbl,
    query_interface : Proc(IX509CertificateRequestCertificate2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestCertificate2*, UInt32),
    release : Proc(IX509CertificateRequestCertificate2*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestCertificate2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestCertificate2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestCertificate2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestCertificate2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestCertificate2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestCertificate2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestCertificate2*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestCertificate2*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCertificate2*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_private_key : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_public_key : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    is_smart_card : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_PublicKey : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateKey : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    get_ReuseKey : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subject : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    put_Subject : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    get_CspStatuses : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_SmimeCapabilities : Proc(IX509CertificateRequestCertificate2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SmimeCapabilities : Proc(IX509CertificateRequestCertificate2*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_KeyContainerNamePrefix : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerNamePrefix : Proc(IX509CertificateRequestCertificate2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_csp_statuses : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509KeySpec, Void**, Win32cr::Foundation::HRESULT),
    check_public_key_signature : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    get_Issuer : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    put_Issuer : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    get_NotBefore : Proc(IX509CertificateRequestCertificate2*, Float64*, Win32cr::Foundation::HRESULT),
    put_NotBefore : Proc(IX509CertificateRequestCertificate2*, Float64, Win32cr::Foundation::HRESULT),
    get_NotAfter : Proc(IX509CertificateRequestCertificate2*, Float64*, Win32cr::Foundation::HRESULT),
    put_NotAfter : Proc(IX509CertificateRequestCertificate2*, Float64, Win32cr::Foundation::HRESULT),
    get_SerialNumber : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SerialNumber : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestCertificate2*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_private_key_template : Proc(IX509CertificateRequestCertificate2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestCertificate2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestCertificate2, lpVtbl : IX509CertificateRequestCertificate2Vtbl* do
    GUID = LibC::GUID.new(0x728ab35a_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestCertificate2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestCertificate2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestCertificate2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestCertificate2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestCertificate2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestCertificate2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestCertificate2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestCertificate2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestCertificate2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestCertificate2*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestCertificate2*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestCertificate2*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestCertificate2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestCertificate2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestCertificate2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestCertificate2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestCertificate2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestCertificate2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestCertificate2*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestCertificate2*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestCertificate2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestCertificate2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestCertificate2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_private_key(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key.call(this, context, pPrivateKey, strTemplateName)
    end
    def initialize_from_public_key(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPublicKey : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_public_key.call(this, context, pPublicKey, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, strCertificate, encoding, inherit_options)
    end
    def initialize_decode(this : IX509CertificateRequestCertificate2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def check_signature(this : IX509CertificateRequestCertificate2*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def is_smart_card(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_smart_card.call(this, pValue)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_PublicKey(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PublicKey.call(this, ppValue)
    end
    def get_PrivateKey(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKey.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_ReuseKey(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseKey.call(this, pValue)
    end
    def get_OldCertificate(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, encoding, pValue)
    end
    def get_Subject(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subject.call(this, ppValue)
    end
    def put_Subject(this : IX509CertificateRequestCertificate2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Subject.call(this, pValue)
    end
    def get_CspStatuses(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspStatuses.call(this, ppValue)
    end
    def get_SmimeCapabilities(this : IX509CertificateRequestCertificate2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmimeCapabilities.call(this, pValue)
    end
    def put_SmimeCapabilities(this : IX509CertificateRequestCertificate2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SmimeCapabilities.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_KeyContainerNamePrefix(this : IX509CertificateRequestCertificate2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyContainerNamePrefix.call(this, pValue)
    end
    def put_KeyContainerNamePrefix(this : IX509CertificateRequestCertificate2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerNamePrefix.call(this, value)
    end
    def get_CryptAttributes(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end
    def get_csp_statuses(this : IX509CertificateRequestCertificate2*, key_spec : Win32cr::Security::Cryptography::Certificates::X509KeySpec, ppCspStatuses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_csp_statuses.call(this, key_spec, ppCspStatuses)
    end
    def check_public_key_signature(this : IX509CertificateRequestCertificate2*, pPublicKey : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_public_key_signature.call(this, pPublicKey)
    end
    def get_Issuer(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Issuer.call(this, ppValue)
    end
    def put_Issuer(this : IX509CertificateRequestCertificate2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Issuer.call(this, pValue)
    end
    def get_NotBefore(this : IX509CertificateRequestCertificate2*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotBefore.call(this, pValue)
    end
    def put_NotBefore(this : IX509CertificateRequestCertificate2*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NotBefore.call(this, value)
    end
    def get_NotAfter(this : IX509CertificateRequestCertificate2*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NotAfter.call(this, pValue)
    end
    def put_NotAfter(this : IX509CertificateRequestCertificate2*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NotAfter.call(this, value)
    end
    def get_SerialNumber(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SerialNumber.call(this, encoding, pValue)
    end
    def put_SerialNumber(this : IX509CertificateRequestCertificate2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SerialNumber.call(this, encoding, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestCertificate2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestCertificate2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def initialize_from_template(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def initialize_from_private_key_template(this : IX509CertificateRequestCertificate2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPrivateKey : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_private_key_template.call(this, context, pPrivateKey, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestCertificate2*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestCertificate2*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs7Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs7*, UInt32),
    release : Proc(IX509CertificateRequestPkcs7*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs7*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs7*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs7*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs7*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs7*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs7*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs7*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs7*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs7*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs7*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs7*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs7*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs7*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs7*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs7*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs7*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs7*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Int16, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request : Proc(IX509CertificateRequestPkcs7*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    get_RequesterName : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequesterName : Proc(IX509CertificateRequestPkcs7*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestPkcs7*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestPkcs7*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs7, lpVtbl : IX509CertificateRequestPkcs7Vtbl* do
    GUID = LibC::GUID.new(0x728ab344_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestPkcs7*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs7*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs7*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs7*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs7*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs7*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs7*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs7*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs7*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs7*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs7*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs7*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs7*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs7*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs7*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs7*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs7*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs7*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs7*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs7*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs7*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs7*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs7*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs7*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs7*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs7*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs7*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs7*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs7*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs7*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs7*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs7*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, renewal_request : Int16, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, renewal_request, strCertificate, encoding, inherit_options)
    end
    def initialize_from_inner_request(this : IX509CertificateRequestPkcs7*, pInnerRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request.call(this, pInnerRequest)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs7*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def get_RequesterName(this : IX509CertificateRequestPkcs7*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequesterName.call(this, pValue)
    end
    def put_RequesterName(this : IX509CertificateRequestPkcs7*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequesterName.call(this, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestPkcs7*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestPkcs7*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end

  end

  @[Extern]
  record IX509CertificateRequestPkcs7V2Vtbl,
    query_interface : Proc(IX509CertificateRequestPkcs7V2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestPkcs7V2*, UInt32),
    release : Proc(IX509CertificateRequestPkcs7V2*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestPkcs7V2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestPkcs7V2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestPkcs7V2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestPkcs7V2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestPkcs7V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestPkcs7V2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestPkcs7V2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestPkcs7V2*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestPkcs7V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestPkcs7V2*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestPkcs7V2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestPkcs7V2*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestPkcs7V2*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestPkcs7V2*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs7V2*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestPkcs7V2*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Int16, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request : Proc(IX509CertificateRequestPkcs7V2*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    get_RequesterName : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequesterName : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestPkcs7V2*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestPkcs7V2*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestPkcs7V2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestPkcs7V2*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestPkcs7V2*, Void**, Win32cr::Foundation::HRESULT),
    check_certificate_signature : Proc(IX509CertificateRequestPkcs7V2*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestPkcs7V2, lpVtbl : IX509CertificateRequestPkcs7V2Vtbl* do
    GUID = LibC::GUID.new(0x728ab35c_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestPkcs7V2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestPkcs7V2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestPkcs7V2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestPkcs7V2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestPkcs7V2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestPkcs7V2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestPkcs7V2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestPkcs7V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestPkcs7V2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestPkcs7V2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestPkcs7V2*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestPkcs7V2*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestPkcs7V2*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestPkcs7V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestPkcs7V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestPkcs7V2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestPkcs7V2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestPkcs7V2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestPkcs7V2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestPkcs7V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestPkcs7V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestPkcs7V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestPkcs7V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestPkcs7V2*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestPkcs7V2*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestPkcs7V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestPkcs7V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestPkcs7V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestPkcs7V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs7V2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestPkcs7V2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestPkcs7V2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestPkcs7V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestPkcs7V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, renewal_request : Int16, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, renewal_request, strCertificate, encoding, inherit_options)
    end
    def initialize_from_inner_request(this : IX509CertificateRequestPkcs7V2*, pInnerRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request.call(this, pInnerRequest)
    end
    def initialize_decode(this : IX509CertificateRequestPkcs7V2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def get_RequesterName(this : IX509CertificateRequestPkcs7V2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequesterName.call(this, pValue)
    end
    def put_RequesterName(this : IX509CertificateRequestPkcs7V2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequesterName.call(this, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestPkcs7V2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestPkcs7V2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def initialize_from_template(this : IX509CertificateRequestPkcs7V2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestPkcs7V2*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestPkcs7V2*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end
    def check_certificate_signature(this : IX509CertificateRequestPkcs7V2*, validate_certificate_chain : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_certificate_signature.call(this, validate_certificate_chain)
    end

  end

  @[Extern]
  record IX509CertificateRequestCmcVtbl,
    query_interface : Proc(IX509CertificateRequestCmc*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestCmc*, UInt32),
    release : Proc(IX509CertificateRequestCmc*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestCmc*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestCmc*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestCmc*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestCmc*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestCmc*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestCmc*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestCmc*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestCmc*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestCmc*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestCmc*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCmc*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCmc*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Int16, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    get_RequesterName : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequesterName : Proc(IX509CertificateRequestCmc*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request_template_name : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestCmc*, Int16*, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_TransactionId : Proc(IX509CertificateRequestCmc*, Int32*, Win32cr::Foundation::HRESULT),
    put_TransactionId : Proc(IX509CertificateRequestCmc*, Int32, Win32cr::Foundation::HRESULT),
    get_SenderNonce : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SenderNonce : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    get_ArchivePrivateKey : Proc(IX509CertificateRequestCmc*, Int16*, Win32cr::Foundation::HRESULT),
    put_ArchivePrivateKey : Proc(IX509CertificateRequestCmc*, Int16, Win32cr::Foundation::HRESULT),
    get_KeyArchivalCertificate : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyArchivalCertificate : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptionAlgorithm : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT),
    put_EncryptionAlgorithm : Proc(IX509CertificateRequestCmc*, Void*, Win32cr::Foundation::HRESULT),
    get_EncryptionStrength : Proc(IX509CertificateRequestCmc*, Int32*, Win32cr::Foundation::HRESULT),
    put_EncryptionStrength : Proc(IX509CertificateRequestCmc*, Int32, Win32cr::Foundation::HRESULT),
    get_EncryptedKeyHash : Proc(IX509CertificateRequestCmc*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SignerCertificates : Proc(IX509CertificateRequestCmc*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestCmc, lpVtbl : IX509CertificateRequestCmcVtbl* do
    GUID = LibC::GUID.new(0x728ab345_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestCmc*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestCmc*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestCmc*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestCmc*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestCmc*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestCmc*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestCmc*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestCmc*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestCmc*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestCmc*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestCmc*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestCmc*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestCmc*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestCmc*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestCmc*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestCmc*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestCmc*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestCmc*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestCmc*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestCmc*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestCmc*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestCmc*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestCmc*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestCmc*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestCmc*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestCmc*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestCmc*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestCmc*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestCmc*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, renewal_request : Int16, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, renewal_request, strCertificate, encoding, inherit_options)
    end
    def initialize_from_inner_request(this : IX509CertificateRequestCmc*, pInnerRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request.call(this, pInnerRequest)
    end
    def initialize_decode(this : IX509CertificateRequestCmc*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def get_RequesterName(this : IX509CertificateRequestCmc*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequesterName.call(this, pValue)
    end
    def put_RequesterName(this : IX509CertificateRequestCmc*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequesterName.call(this, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestCmc*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def initialize_from_inner_request_template_name(this : IX509CertificateRequestCmc*, pInnerRequest : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request_template_name.call(this, pInnerRequest, strTemplateName)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestCmc*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_CryptAttributes(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_NameValuePairs(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_TransactionId(this : IX509CertificateRequestCmc*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransactionId.call(this, pValue)
    end
    def put_TransactionId(this : IX509CertificateRequestCmc*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransactionId.call(this, value)
    end
    def get_SenderNonce(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SenderNonce.call(this, encoding, pValue)
    end
    def put_SenderNonce(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SenderNonce.call(this, encoding, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_ArchivePrivateKey(this : IX509CertificateRequestCmc*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ArchivePrivateKey.call(this, pValue)
    end
    def put_ArchivePrivateKey(this : IX509CertificateRequestCmc*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ArchivePrivateKey.call(this, value)
    end
    def get_KeyArchivalCertificate(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyArchivalCertificate.call(this, encoding, pValue)
    end
    def put_KeyArchivalCertificate(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyArchivalCertificate.call(this, encoding, value)
    end
    def get_EncryptionAlgorithm(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionAlgorithm.call(this, ppValue)
    end
    def put_EncryptionAlgorithm(this : IX509CertificateRequestCmc*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionAlgorithm.call(this, pValue)
    end
    def get_EncryptionStrength(this : IX509CertificateRequestCmc*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionStrength.call(this, pValue)
    end
    def put_EncryptionStrength(this : IX509CertificateRequestCmc*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionStrength.call(this, value)
    end
    def get_EncryptedKeyHash(this : IX509CertificateRequestCmc*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptedKeyHash.call(this, encoding, pValue)
    end
    def get_SignerCertificates(this : IX509CertificateRequestCmc*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificates.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509CertificateRequestCmc2Vtbl,
    query_interface : Proc(IX509CertificateRequestCmc2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRequestCmc2*, UInt32),
    release : Proc(IX509CertificateRequestCmc2*, UInt32),
    get_type_info_count : Proc(IX509CertificateRequestCmc2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRequestCmc2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRequestCmc2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRequestCmc2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::HRESULT),
    get_inner_request : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, Void**, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509RequestType*, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509CertificateRequestCmc2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509CertificateRequestCmc2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509CertificateRequestCmc2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509CertificateRequestCmc2*, Int32, Win32cr::Foundation::HRESULT),
    get_UIContextMessage : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UIContextMessage : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SuppressDefaults : Proc(IX509CertificateRequestCmc2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SuppressDefaults : Proc(IX509CertificateRequestCmc2*, Int16, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId, Win32cr::Foundation::HRESULT),
    get_CspInformations : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    put_CspInformations : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCmc2*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRequestCmc2*, Int16, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_certificate : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Int16, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    get_RequesterName : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequesterName : Proc(IX509CertificateRequestCmc2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request_template_name : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TemplateObjectId : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRequestCmc2*, Int16*, Win32cr::Foundation::HRESULT),
    get_CryptAttributes : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_SuppressOids : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_TransactionId : Proc(IX509CertificateRequestCmc2*, Int32*, Win32cr::Foundation::HRESULT),
    put_TransactionId : Proc(IX509CertificateRequestCmc2*, Int32, Win32cr::Foundation::HRESULT),
    get_SenderNonce : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SenderNonce : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_ArchivePrivateKey : Proc(IX509CertificateRequestCmc2*, Int16*, Win32cr::Foundation::HRESULT),
    put_ArchivePrivateKey : Proc(IX509CertificateRequestCmc2*, Int16, Win32cr::Foundation::HRESULT),
    get_KeyArchivalCertificate : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyArchivalCertificate : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_EncryptionAlgorithm : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    put_EncryptionAlgorithm : Proc(IX509CertificateRequestCmc2*, Void*, Win32cr::Foundation::HRESULT),
    get_EncryptionStrength : Proc(IX509CertificateRequestCmc2*, Int32*, Win32cr::Foundation::HRESULT),
    put_EncryptionStrength : Proc(IX509CertificateRequestCmc2*, Int32, Win32cr::Foundation::HRESULT),
    get_EncryptedKeyHash : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SignerCertificates : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize_from_inner_request_template : Proc(IX509CertificateRequestCmc2*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509CertificateRequestCmc2*, Void**, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRequestCmc2*, Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes, Win32cr::Foundation::HRESULT),
    check_certificate_signature : Proc(IX509CertificateRequestCmc2*, Void*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRequestCmc2, lpVtbl : IX509CertificateRequestCmc2Vtbl* do
    GUID = LibC::GUID.new(0x728ab35d_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRequestCmc2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRequestCmc2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRequestCmc2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRequestCmc2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRequestCmc2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRequestCmc2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRequestCmc2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRequestCmc2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def encode(this : IX509CertificateRequestCmc2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRequestCmc2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def get_inner_request(this : IX509CertificateRequestCmc2*, level : Win32cr::Security::Cryptography::Certificates::InnerRequestLevel, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inner_request.call(this, level, ppValue)
    end
    def get_Type(this : IX509CertificateRequestCmc2*, pValue : Win32cr::Security::Cryptography::Certificates::X509RequestType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pValue)
    end
    def get_EnrollmentContext(this : IX509CertificateRequestCmc2*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Silent(this : IX509CertificateRequestCmc2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509CertificateRequestCmc2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509CertificateRequestCmc2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509CertificateRequestCmc2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_UIContextMessage(this : IX509CertificateRequestCmc2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UIContextMessage.call(this, pValue)
    end
    def put_UIContextMessage(this : IX509CertificateRequestCmc2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UIContextMessage.call(this, value)
    end
    def get_SuppressDefaults(this : IX509CertificateRequestCmc2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressDefaults.call(this, pValue)
    end
    def put_SuppressDefaults(this : IX509CertificateRequestCmc2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressDefaults.call(this, value)
    end
    def get_RenewalCertificate(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, encoding, pValue)
    end
    def put_RenewalCertificate(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, encoding, value)
    end
    def get_ClientId(this : IX509CertificateRequestCmc2*, pValue : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, pValue)
    end
    def put_ClientId(this : IX509CertificateRequestCmc2*, value : Win32cr::Security::Cryptography::Certificates::RequestClientInfoClientId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, value)
    end
    def get_CspInformations(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CspInformations.call(this, ppValue)
    end
    def put_CspInformations(this : IX509CertificateRequestCmc2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CspInformations.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRequestCmc2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRequestCmc2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRequestCmc2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_RawData(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def initialize_from_template_name(this : IX509CertificateRequestCmc2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_certificate(this : IX509CertificateRequestCmc2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, renewal_request : Int16, strCertificate : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, inherit_options : Win32cr::Security::Cryptography::Certificates::X509RequestInheritOptions) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_certificate.call(this, context, renewal_request, strCertificate, encoding, inherit_options)
    end
    def initialize_from_inner_request(this : IX509CertificateRequestCmc2*, pInnerRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request.call(this, pInnerRequest)
    end
    def initialize_decode(this : IX509CertificateRequestCmc2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def get_RequesterName(this : IX509CertificateRequestCmc2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequesterName.call(this, pValue)
    end
    def put_RequesterName(this : IX509CertificateRequestCmc2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequesterName.call(this, value)
    end
    def get_SignerCertificate(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRequestCmc2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def initialize_from_inner_request_template_name(this : IX509CertificateRequestCmc2*, pInnerRequest : Void*, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request_template_name.call(this, pInnerRequest, strTemplateName)
    end
    def get_TemplateObjectId(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TemplateObjectId.call(this, ppValue)
    end
    def get_NullSigned(this : IX509CertificateRequestCmc2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_CryptAttributes(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CryptAttributes.call(this, ppValue)
    end
    def get_NameValuePairs(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SuppressOids(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressOids.call(this, ppValue)
    end
    def get_TransactionId(this : IX509CertificateRequestCmc2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransactionId.call(this, pValue)
    end
    def put_TransactionId(this : IX509CertificateRequestCmc2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransactionId.call(this, value)
    end
    def get_SenderNonce(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SenderNonce.call(this, encoding, pValue)
    end
    def put_SenderNonce(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SenderNonce.call(this, encoding, value)
    end
    def get_SignatureInformation(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_ArchivePrivateKey(this : IX509CertificateRequestCmc2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ArchivePrivateKey.call(this, pValue)
    end
    def put_ArchivePrivateKey(this : IX509CertificateRequestCmc2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ArchivePrivateKey.call(this, value)
    end
    def get_KeyArchivalCertificate(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyArchivalCertificate.call(this, encoding, pValue)
    end
    def put_KeyArchivalCertificate(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyArchivalCertificate.call(this, encoding, value)
    end
    def get_EncryptionAlgorithm(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionAlgorithm.call(this, ppValue)
    end
    def put_EncryptionAlgorithm(this : IX509CertificateRequestCmc2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionAlgorithm.call(this, pValue)
    end
    def get_EncryptionStrength(this : IX509CertificateRequestCmc2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptionStrength.call(this, pValue)
    end
    def put_EncryptionStrength(this : IX509CertificateRequestCmc2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EncryptionStrength.call(this, value)
    end
    def get_EncryptedKeyHash(this : IX509CertificateRequestCmc2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EncryptedKeyHash.call(this, encoding, pValue)
    end
    def get_SignerCertificates(this : IX509CertificateRequestCmc2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificates.call(this, ppValue)
    end
    def initialize_from_template(this : IX509CertificateRequestCmc2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def initialize_from_inner_request_template(this : IX509CertificateRequestCmc2*, pInnerRequest : Void*, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_inner_request_template.call(this, pInnerRequest, pPolicyServer, pTemplate)
    end
    def get_PolicyServer(this : IX509CertificateRequestCmc2*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509CertificateRequestCmc2*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end
    def check_signature(this : IX509CertificateRequestCmc2*, allowed_signature_types : Win32cr::Security::Cryptography::Certificates::Pkcs10AllowedSignatureTypes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this, allowed_signature_types)
    end
    def check_certificate_signature(this : IX509CertificateRequestCmc2*, pSignerCertificate : Void*, validate_certificate_chain : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_certificate_signature.call(this, pSignerCertificate, validate_certificate_chain)
    end

  end

  @[Extern]
  record IX509EnrollmentVtbl,
    query_interface : Proc(IX509Enrollment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Enrollment*, UInt32),
    release : Proc(IX509Enrollment*, UInt32),
    get_type_info_count : Proc(IX509Enrollment*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Enrollment*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Enrollment*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Enrollment*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_request : Proc(IX509Enrollment*, Void*, Win32cr::Foundation::HRESULT),
    create_request : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enroll : Proc(IX509Enrollment*, Win32cr::Foundation::HRESULT),
    install_response : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    create_pfx : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::PFXExportOptions, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Request : Proc(IX509Enrollment*, Void**, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509Enrollment*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509Enrollment*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509Enrollment*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509Enrollment*, Int32, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509Enrollment*, Void**, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IX509Enrollment*, Void**, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Response : Proc(IX509Enrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CertificateFriendlyName : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateFriendlyName : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CertificateDescription : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateDescription : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestId : Proc(IX509Enrollment*, Int32*, Win32cr::Foundation::HRESULT),
    get_CAConfigString : Proc(IX509Enrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Enrollment, lpVtbl : IX509EnrollmentVtbl* do
    GUID = LibC::GUID.new(0x728ab346_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Enrollment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Enrollment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Enrollment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Enrollment*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Enrollment*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Enrollment*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Enrollment*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509Enrollment*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def initialize_from_template_name(this : IX509Enrollment*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_request(this : IX509Enrollment*, pRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_request.call(this, pRequest)
    end
    def create_request(this : IX509Enrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_request.call(this, encoding, pValue)
    end
    def enroll(this : IX509Enrollment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enroll.call(this)
    end
    def install_response(this : IX509Enrollment*, restrictions : Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_response.call(this, restrictions, strResponse, encoding, strPassword)
    end
    def create_pfx(this : IX509Enrollment*, strPassword : Win32cr::Foundation::BSTR, export_options : Win32cr::Security::Cryptography::Certificates::PFXExportOptions, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pfx.call(this, strPassword, export_options, encoding, pValue)
    end
    def get_Request(this : IX509Enrollment*, pValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Request.call(this, pValue)
    end
    def get_Silent(this : IX509Enrollment*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509Enrollment*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509Enrollment*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509Enrollment*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_NameValuePairs(this : IX509Enrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end
    def get_EnrollmentContext(this : IX509Enrollment*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Status(this : IX509Enrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, ppValue)
    end
    def get_Certificate(this : IX509Enrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def get_Response(this : IX509Enrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Response.call(this, encoding, pValue)
    end
    def get_CertificateFriendlyName(this : IX509Enrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateFriendlyName.call(this, pValue)
    end
    def put_CertificateFriendlyName(this : IX509Enrollment*, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateFriendlyName.call(this, strValue)
    end
    def get_CertificateDescription(this : IX509Enrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateDescription.call(this, pValue)
    end
    def put_CertificateDescription(this : IX509Enrollment*, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateDescription.call(this, strValue)
    end
    def get_RequestId(this : IX509Enrollment*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestId.call(this, pValue)
    end
    def get_CAConfigString(this : IX509Enrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAConfigString.call(this, pValue)
    end

  end

  @[Extern]
  record IX509Enrollment2Vtbl,
    query_interface : Proc(IX509Enrollment2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509Enrollment2*, UInt32),
    release : Proc(IX509Enrollment2*, UInt32),
    get_type_info_count : Proc(IX509Enrollment2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509Enrollment2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509Enrollment2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509Enrollment2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    initialize_from_template_name : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_from_request : Proc(IX509Enrollment2*, Void*, Win32cr::Foundation::HRESULT),
    create_request : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enroll : Proc(IX509Enrollment2*, Win32cr::Foundation::HRESULT),
    install_response : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    create_pfx : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::PFXExportOptions, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Request : Proc(IX509Enrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509Enrollment2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509Enrollment2*, Int16, Win32cr::Foundation::HRESULT),
    get_ParentWindow : Proc(IX509Enrollment2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ParentWindow : Proc(IX509Enrollment2*, Int32, Win32cr::Foundation::HRESULT),
    get_NameValuePairs : Proc(IX509Enrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_EnrollmentContext : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IX509Enrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Response : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CertificateFriendlyName : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateFriendlyName : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CertificateDescription : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateDescription : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestId : Proc(IX509Enrollment2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CAConfigString : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_from_template : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Void*, Void*, Win32cr::Foundation::HRESULT),
    install_response2 : Proc(IX509Enrollment2*, Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::HRESULT),
    get_PolicyServer : Proc(IX509Enrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_Template : Proc(IX509Enrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_RequestIdString : Proc(IX509Enrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509Enrollment2, lpVtbl : IX509Enrollment2Vtbl* do
    GUID = LibC::GUID.new(0x728ab350_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509Enrollment2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509Enrollment2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509Enrollment2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509Enrollment2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509Enrollment2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509Enrollment2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509Enrollment2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509Enrollment2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end
    def initialize_from_template_name(this : IX509Enrollment2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTemplateName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template_name.call(this, context, strTemplateName)
    end
    def initialize_from_request(this : IX509Enrollment2*, pRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_request.call(this, pRequest)
    end
    def create_request(this : IX509Enrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_request.call(this, encoding, pValue)
    end
    def enroll(this : IX509Enrollment2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enroll.call(this)
    end
    def install_response(this : IX509Enrollment2*, restrictions : Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_response.call(this, restrictions, strResponse, encoding, strPassword)
    end
    def create_pfx(this : IX509Enrollment2*, strPassword : Win32cr::Foundation::BSTR, export_options : Win32cr::Security::Cryptography::Certificates::PFXExportOptions, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pfx.call(this, strPassword, export_options, encoding, pValue)
    end
    def get_Request(this : IX509Enrollment2*, pValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Request.call(this, pValue)
    end
    def get_Silent(this : IX509Enrollment2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509Enrollment2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def get_ParentWindow(this : IX509Enrollment2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentWindow.call(this, pValue)
    end
    def put_ParentWindow(this : IX509Enrollment2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ParentWindow.call(this, value)
    end
    def get_NameValuePairs(this : IX509Enrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NameValuePairs.call(this, ppValue)
    end
    def get_EnrollmentContext(this : IX509Enrollment2*, pValue : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnrollmentContext.call(this, pValue)
    end
    def get_Status(this : IX509Enrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, ppValue)
    end
    def get_Certificate(this : IX509Enrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def get_Response(this : IX509Enrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Response.call(this, encoding, pValue)
    end
    def get_CertificateFriendlyName(this : IX509Enrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateFriendlyName.call(this, pValue)
    end
    def put_CertificateFriendlyName(this : IX509Enrollment2*, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateFriendlyName.call(this, strValue)
    end
    def get_CertificateDescription(this : IX509Enrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateDescription.call(this, pValue)
    end
    def put_CertificateDescription(this : IX509Enrollment2*, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateDescription.call(this, strValue)
    end
    def get_RequestId(this : IX509Enrollment2*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestId.call(this, pValue)
    end
    def get_CAConfigString(this : IX509Enrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAConfigString.call(this, pValue)
    end
    def initialize_from_template(this : IX509Enrollment2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, pPolicyServer : Void*, pTemplate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_template.call(this, context, pPolicyServer, pTemplate)
    end
    def install_response2(this : IX509Enrollment2*, restrictions : Win32cr::Security::Cryptography::Certificates::InstallResponseRestrictionFlags, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strPassword : Win32cr::Foundation::BSTR, strEnrollmentPolicyServerUrl : Win32cr::Foundation::BSTR, strEnrollmentPolicyServerID : Win32cr::Foundation::BSTR, enrollment_policy_server_flags : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, authFlags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_response2.call(this, restrictions, strResponse, encoding, strPassword, strEnrollmentPolicyServerUrl, strEnrollmentPolicyServerID, enrollment_policy_server_flags, authFlags)
    end
    def get_PolicyServer(this : IX509Enrollment2*, ppPolicyServer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PolicyServer.call(this, ppPolicyServer)
    end
    def get_Template(this : IX509Enrollment2*, ppTemplate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Template.call(this, ppTemplate)
    end
    def get_RequestIdString(this : IX509Enrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestIdString.call(this, pValue)
    end

  end

  @[Extern]
  record IX509EnrollmentHelperVtbl,
    query_interface : Proc(IX509EnrollmentHelper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509EnrollmentHelper*, UInt32),
    release : Proc(IX509EnrollmentHelper*, UInt32),
    get_type_info_count : Proc(IX509EnrollmentHelper*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509EnrollmentHelper*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509EnrollmentHelper*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509EnrollmentHelper*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    add_policy_server : Proc(IX509EnrollmentHelper*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_enrollment_server : Proc(IX509EnrollmentHelper*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enroll : Proc(IX509EnrollmentHelper*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::WebEnrollmentFlags, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509EnrollmentHelper*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509EnrollmentHelper, lpVtbl : IX509EnrollmentHelperVtbl* do
    GUID = LibC::GUID.new(0x728ab351_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509EnrollmentHelper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509EnrollmentHelper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509EnrollmentHelper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509EnrollmentHelper*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509EnrollmentHelper*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509EnrollmentHelper*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509EnrollmentHelper*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def add_policy_server(this : IX509EnrollmentHelper*, strEnrollmentPolicyServerURI : Win32cr::Foundation::BSTR, strEnrollmentPolicyID : Win32cr::Foundation::BSTR, enrollment_policy_server_flags : Win32cr::Security::Cryptography::Certificates::PolicyServerUrlFlags, authFlags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, strCredential : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_policy_server.call(this, strEnrollmentPolicyServerURI, strEnrollmentPolicyID, enrollment_policy_server_flags, authFlags, strCredential, strPassword)
    end
    def add_enrollment_server(this : IX509EnrollmentHelper*, strEnrollmentServerURI : Win32cr::Foundation::BSTR, authFlags : Win32cr::Security::Cryptography::Certificates::X509EnrollmentAuthFlags, strCredential : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_enrollment_server.call(this, strEnrollmentServerURI, authFlags, strCredential, strPassword)
    end
    def enroll(this : IX509EnrollmentHelper*, strEnrollmentPolicyServerURI : Win32cr::Foundation::BSTR, strTemplateName : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, enrollFlags : Win32cr::Security::Cryptography::Certificates::WebEnrollmentFlags, pstrCertificate : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enroll.call(this, strEnrollmentPolicyServerURI, strTemplateName, encoding, enrollFlags, pstrCertificate)
    end
    def initialize__(this : IX509EnrollmentHelper*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, context)
    end

  end

  @[Extern]
  record IX509EnrollmentWebClassFactoryVtbl,
    query_interface : Proc(IX509EnrollmentWebClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509EnrollmentWebClassFactory*, UInt32),
    release : Proc(IX509EnrollmentWebClassFactory*, UInt32),
    get_type_info_count : Proc(IX509EnrollmentWebClassFactory*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509EnrollmentWebClassFactory*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509EnrollmentWebClassFactory*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509EnrollmentWebClassFactory*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_object : Proc(IX509EnrollmentWebClassFactory*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509EnrollmentWebClassFactory, lpVtbl : IX509EnrollmentWebClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x728ab349_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509EnrollmentWebClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509EnrollmentWebClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509EnrollmentWebClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509EnrollmentWebClassFactory*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509EnrollmentWebClassFactory*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509EnrollmentWebClassFactory*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509EnrollmentWebClassFactory*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_object(this : IX509EnrollmentWebClassFactory*, strProgID : Win32cr::Foundation::BSTR, ppIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object.call(this, strProgID, ppIUnknown)
    end

  end

  @[Extern]
  record IX509MachineEnrollmentFactoryVtbl,
    query_interface : Proc(IX509MachineEnrollmentFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509MachineEnrollmentFactory*, UInt32),
    release : Proc(IX509MachineEnrollmentFactory*, UInt32),
    get_type_info_count : Proc(IX509MachineEnrollmentFactory*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509MachineEnrollmentFactory*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509MachineEnrollmentFactory*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509MachineEnrollmentFactory*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_object : Proc(IX509MachineEnrollmentFactory*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509MachineEnrollmentFactory, lpVtbl : IX509MachineEnrollmentFactoryVtbl* do
    GUID = LibC::GUID.new(0x728ab352_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509MachineEnrollmentFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509MachineEnrollmentFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509MachineEnrollmentFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509MachineEnrollmentFactory*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509MachineEnrollmentFactory*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509MachineEnrollmentFactory*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509MachineEnrollmentFactory*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_object(this : IX509MachineEnrollmentFactory*, strProgID : Win32cr::Foundation::BSTR, ppIHelper : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object.call(this, strProgID, ppIHelper)
    end

  end

  @[Extern]
  record IX509CertificateRevocationListEntryVtbl,
    query_interface : Proc(IX509CertificateRevocationListEntry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRevocationListEntry*, UInt32),
    release : Proc(IX509CertificateRevocationListEntry*, UInt32),
    get_type_info_count : Proc(IX509CertificateRevocationListEntry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRevocationListEntry*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRevocationListEntry*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRevocationListEntry*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRevocationListEntry*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Float64, Win32cr::Foundation::HRESULT),
    get_SerialNumber : Proc(IX509CertificateRevocationListEntry*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RevocationDate : Proc(IX509CertificateRevocationListEntry*, Float64*, Win32cr::Foundation::HRESULT),
    get_RevocationReason : Proc(IX509CertificateRevocationListEntry*, Win32cr::Security::Cryptography::Certificates::CRLRevocationReason*, Win32cr::Foundation::HRESULT),
    put_RevocationReason : Proc(IX509CertificateRevocationListEntry*, Win32cr::Security::Cryptography::Certificates::CRLRevocationReason, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRevocationListEntry*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRevocationListEntry*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRevocationListEntry, lpVtbl : IX509CertificateRevocationListEntryVtbl* do
    GUID = LibC::GUID.new(0x728ab35e_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRevocationListEntry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRevocationListEntry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRevocationListEntry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRevocationListEntry*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRevocationListEntry*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRevocationListEntry*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRevocationListEntry*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRevocationListEntry*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, serial_number : Win32cr::Foundation::BSTR, revocation_date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, serial_number, revocation_date)
    end
    def get_SerialNumber(this : IX509CertificateRevocationListEntry*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SerialNumber.call(this, encoding, pValue)
    end
    def get_RevocationDate(this : IX509CertificateRevocationListEntry*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RevocationDate.call(this, pValue)
    end
    def get_RevocationReason(this : IX509CertificateRevocationListEntry*, pValue : Win32cr::Security::Cryptography::Certificates::CRLRevocationReason*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RevocationReason.call(this, pValue)
    end
    def put_RevocationReason(this : IX509CertificateRevocationListEntry*, value : Win32cr::Security::Cryptography::Certificates::CRLRevocationReason) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RevocationReason.call(this, value)
    end
    def get_X509Extensions(this : IX509CertificateRevocationListEntry*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRevocationListEntry*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end

  end

  @[Extern]
  record IX509CertificateRevocationListEntriesVtbl,
    query_interface : Proc(IX509CertificateRevocationListEntries*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRevocationListEntries*, UInt32),
    release : Proc(IX509CertificateRevocationListEntries*, UInt32),
    get_type_info_count : Proc(IX509CertificateRevocationListEntries*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRevocationListEntries*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRevocationListEntries*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRevocationListEntries*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ItemByIndex : Proc(IX509CertificateRevocationListEntries*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IX509CertificateRevocationListEntries*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IX509CertificateRevocationListEntries*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IX509CertificateRevocationListEntries*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IX509CertificateRevocationListEntries*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IX509CertificateRevocationListEntries*, Win32cr::Foundation::HRESULT),
    get_IndexBySerialNumber : Proc(IX509CertificateRevocationListEntries*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    add_range : Proc(IX509CertificateRevocationListEntries*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRevocationListEntries, lpVtbl : IX509CertificateRevocationListEntriesVtbl* do
    GUID = LibC::GUID.new(0x728ab35f_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRevocationListEntries*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRevocationListEntries*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRevocationListEntries*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRevocationListEntries*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRevocationListEntries*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRevocationListEntries*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRevocationListEntries*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ItemByIndex(this : IX509CertificateRevocationListEntries*, index : Int32, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemByIndex.call(this, index, pVal)
    end
    def get_Count(this : IX509CertificateRevocationListEntries*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def get__NewEnum(this : IX509CertificateRevocationListEntries*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pVal)
    end
    def add(this : IX509CertificateRevocationListEntries*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pVal)
    end
    def remove(this : IX509CertificateRevocationListEntries*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clear(this : IX509CertificateRevocationListEntries*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def get_IndexBySerialNumber(this : IX509CertificateRevocationListEntries*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, serial_number : Win32cr::Foundation::BSTR, pIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IndexBySerialNumber.call(this, encoding, serial_number, pIndex)
    end
    def add_range(this : IX509CertificateRevocationListEntries*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_range.call(this, pValue)
    end

  end

  @[Extern]
  record IX509CertificateRevocationListVtbl,
    query_interface : Proc(IX509CertificateRevocationList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509CertificateRevocationList*, UInt32),
    release : Proc(IX509CertificateRevocationList*, UInt32),
    get_type_info_count : Proc(IX509CertificateRevocationList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509CertificateRevocationList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509CertificateRevocationList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509CertificateRevocationList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509CertificateRevocationList*, Win32cr::Foundation::HRESULT),
    initialize_decode : Proc(IX509CertificateRevocationList*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode : Proc(IX509CertificateRevocationList*, Win32cr::Foundation::HRESULT),
    reset_for_encode : Proc(IX509CertificateRevocationList*, Win32cr::Foundation::HRESULT),
    check_public_key_signature : Proc(IX509CertificateRevocationList*, Void*, Win32cr::Foundation::HRESULT),
    check_signature : Proc(IX509CertificateRevocationList*, Win32cr::Foundation::HRESULT),
    get_Issuer : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    put_Issuer : Proc(IX509CertificateRevocationList*, Void*, Win32cr::Foundation::HRESULT),
    get_ThisUpdate : Proc(IX509CertificateRevocationList*, Float64*, Win32cr::Foundation::HRESULT),
    put_ThisUpdate : Proc(IX509CertificateRevocationList*, Float64, Win32cr::Foundation::HRESULT),
    get_NextUpdate : Proc(IX509CertificateRevocationList*, Float64*, Win32cr::Foundation::HRESULT),
    put_NextUpdate : Proc(IX509CertificateRevocationList*, Float64, Win32cr::Foundation::HRESULT),
    get_X509CRLEntries : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    get_X509Extensions : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    get_CriticalExtensions : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509CertificateRevocationList*, Void*, Win32cr::Foundation::HRESULT),
    get_CRLNumber : Proc(IX509CertificateRevocationList*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CRLNumber : Proc(IX509CertificateRevocationList*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAVersion : Proc(IX509CertificateRevocationList*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAVersion : Proc(IX509CertificateRevocationList*, Int32, Win32cr::Foundation::HRESULT),
    get_BaseCRL : Proc(IX509CertificateRevocationList*, Int16*, Win32cr::Foundation::HRESULT),
    get_NullSigned : Proc(IX509CertificateRevocationList*, Int16*, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(IX509CertificateRevocationList*, Void*, Win32cr::Foundation::HRESULT),
    get_AlternateSignatureAlgorithm : Proc(IX509CertificateRevocationList*, Int16*, Win32cr::Foundation::HRESULT),
    put_AlternateSignatureAlgorithm : Proc(IX509CertificateRevocationList*, Int16, Win32cr::Foundation::HRESULT),
    get_SignatureInformation : Proc(IX509CertificateRevocationList*, Void**, Win32cr::Foundation::HRESULT),
    get_RawData : Proc(IX509CertificateRevocationList*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RawDataToBeSigned : Proc(IX509CertificateRevocationList*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Signature : Proc(IX509CertificateRevocationList*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509CertificateRevocationList, lpVtbl : IX509CertificateRevocationListVtbl* do
    GUID = LibC::GUID.new(0x728ab360_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509CertificateRevocationList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509CertificateRevocationList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509CertificateRevocationList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509CertificateRevocationList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509CertificateRevocationList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509CertificateRevocationList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509CertificateRevocationList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509CertificateRevocationList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this)
    end
    def initialize_decode(this : IX509CertificateRevocationList*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_decode.call(this, strEncodedData, encoding)
    end
    def encode(this : IX509CertificateRevocationList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this)
    end
    def reset_for_encode(this : IX509CertificateRevocationList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_for_encode.call(this)
    end
    def check_public_key_signature(this : IX509CertificateRevocationList*, pPublicKey : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_public_key_signature.call(this, pPublicKey)
    end
    def check_signature(this : IX509CertificateRevocationList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_signature.call(this)
    end
    def get_Issuer(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Issuer.call(this, ppValue)
    end
    def put_Issuer(this : IX509CertificateRevocationList*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Issuer.call(this, pValue)
    end
    def get_ThisUpdate(this : IX509CertificateRevocationList*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ThisUpdate.call(this, pValue)
    end
    def put_ThisUpdate(this : IX509CertificateRevocationList*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ThisUpdate.call(this, value)
    end
    def get_NextUpdate(this : IX509CertificateRevocationList*, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NextUpdate.call(this, pValue)
    end
    def put_NextUpdate(this : IX509CertificateRevocationList*, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NextUpdate.call(this, value)
    end
    def get_X509CRLEntries(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509CRLEntries.call(this, ppValue)
    end
    def get_X509Extensions(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509Extensions.call(this, ppValue)
    end
    def get_CriticalExtensions(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CriticalExtensions.call(this, ppValue)
    end
    def get_SignerCertificate(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509CertificateRevocationList*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def get_CRLNumber(this : IX509CertificateRevocationList*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CRLNumber.call(this, encoding, pValue)
    end
    def put_CRLNumber(this : IX509CertificateRevocationList*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CRLNumber.call(this, encoding, value)
    end
    def get_CAVersion(this : IX509CertificateRevocationList*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAVersion.call(this, pValue)
    end
    def put_CAVersion(this : IX509CertificateRevocationList*, pValue : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAVersion.call(this, pValue)
    end
    def get_BaseCRL(this : IX509CertificateRevocationList*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BaseCRL.call(this, pValue)
    end
    def get_NullSigned(this : IX509CertificateRevocationList*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NullSigned.call(this, pValue)
    end
    def get_HashAlgorithm(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, ppValue)
    end
    def put_HashAlgorithm(this : IX509CertificateRevocationList*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, pValue)
    end
    def get_AlternateSignatureAlgorithm(this : IX509CertificateRevocationList*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AlternateSignatureAlgorithm.call(this, pValue)
    end
    def put_AlternateSignatureAlgorithm(this : IX509CertificateRevocationList*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AlternateSignatureAlgorithm.call(this, value)
    end
    def get_SignatureInformation(this : IX509CertificateRevocationList*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignatureInformation.call(this, ppValue)
    end
    def get_RawData(this : IX509CertificateRevocationList*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawData.call(this, encoding, pValue)
    end
    def get_RawDataToBeSigned(this : IX509CertificateRevocationList*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RawDataToBeSigned.call(this, encoding, pValue)
    end
    def get_Signature(this : IX509CertificateRevocationList*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Signature.call(this, encoding, pValue)
    end

  end

  @[Extern]
  record ICertificateAttestationChallengeVtbl,
    query_interface : Proc(ICertificateAttestationChallenge*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificateAttestationChallenge*, UInt32),
    release : Proc(ICertificateAttestationChallenge*, UInt32),
    get_type_info_count : Proc(ICertificateAttestationChallenge*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificateAttestationChallenge*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificateAttestationChallenge*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificateAttestationChallenge*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertificateAttestationChallenge*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    decrypt_challenge : Proc(ICertificateAttestationChallenge*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RequestID : Proc(ICertificateAttestationChallenge*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificateAttestationChallenge, lpVtbl : ICertificateAttestationChallengeVtbl* do
    GUID = LibC::GUID.new(0x6f175a7c_u32, 0x4a3a_u16, 0x40ae_u16, StaticArray[0x9d_u8, 0xba_u8, 0x59_u8, 0x2f_u8, 0xd6_u8, 0xbb_u8, 0xf9_u8, 0xb8_u8])
    def query_interface(this : ICertificateAttestationChallenge*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificateAttestationChallenge*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificateAttestationChallenge*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificateAttestationChallenge*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificateAttestationChallenge*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificateAttestationChallenge*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificateAttestationChallenge*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertificateAttestationChallenge*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strPendingFullCmcResponseWithChallenge : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, strPendingFullCmcResponseWithChallenge)
    end
    def decrypt_challenge(this : ICertificateAttestationChallenge*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEnvelopedPkcs7ReencryptedToCA : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decrypt_challenge.call(this, encoding, pstrEnvelopedPkcs7ReencryptedToCA)
    end
    def get_RequestID(this : ICertificateAttestationChallenge*, pstrRequestID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestID.call(this, pstrRequestID)
    end

  end

  @[Extern]
  record ICertificateAttestationChallenge2Vtbl,
    query_interface : Proc(ICertificateAttestationChallenge2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificateAttestationChallenge2*, UInt32),
    release : Proc(ICertificateAttestationChallenge2*, UInt32),
    get_type_info_count : Proc(ICertificateAttestationChallenge2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificateAttestationChallenge2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificateAttestationChallenge2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificateAttestationChallenge2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertificateAttestationChallenge2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    decrypt_challenge : Proc(ICertificateAttestationChallenge2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RequestID : Proc(ICertificateAttestationChallenge2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_KeyContainerName : Proc(ICertificateAttestationChallenge2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_KeyBlob : Proc(ICertificateAttestationChallenge2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificateAttestationChallenge2, lpVtbl : ICertificateAttestationChallenge2Vtbl* do
    GUID = LibC::GUID.new(0x4631334d_u32, 0xe266_u16, 0x47d6_u16, StaticArray[0xbd_u8, 0x79_u8, 0xbe_u8, 0x53_u8, 0xcb_u8, 0x2e_u8, 0x27_u8, 0x53_u8])
    def query_interface(this : ICertificateAttestationChallenge2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificateAttestationChallenge2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificateAttestationChallenge2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificateAttestationChallenge2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificateAttestationChallenge2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificateAttestationChallenge2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificateAttestationChallenge2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertificateAttestationChallenge2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strPendingFullCmcResponseWithChallenge : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, encoding, strPendingFullCmcResponseWithChallenge)
    end
    def decrypt_challenge(this : ICertificateAttestationChallenge2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEnvelopedPkcs7ReencryptedToCA : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decrypt_challenge.call(this, encoding, pstrEnvelopedPkcs7ReencryptedToCA)
    end
    def get_RequestID(this : ICertificateAttestationChallenge2*, pstrRequestID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestID.call(this, pstrRequestID)
    end
    def put_KeyContainerName(this : ICertificateAttestationChallenge2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyContainerName.call(this, value)
    end
    def put_KeyBlob(this : ICertificateAttestationChallenge2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyBlob.call(this, encoding, value)
    end

  end

  @[Extern]
  record IX509SCEPEnrollmentVtbl,
    query_interface : Proc(IX509SCEPEnrollment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509SCEPEnrollment*, UInt32),
    release : Proc(IX509SCEPEnrollment*, UInt32),
    get_type_info_count : Proc(IX509SCEPEnrollment*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509SCEPEnrollment*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509SCEPEnrollment*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509SCEPEnrollment*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509SCEPEnrollment*, Void*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    initialize_for_pending : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    create_request_message : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_retrieve_pending_message : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_retrieve_certificate_message : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    process_response_message : Proc(IX509SCEPEnrollment*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*, Win32cr::Foundation::HRESULT),
    put_ServerCapabilities : Proc(IX509SCEPEnrollment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FailInfo : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::X509SCEPFailInfo*, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509SCEPEnrollment*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509SCEPEnrollment*, Void*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509SCEPEnrollment*, Void**, Win32cr::Foundation::HRESULT),
    put_OldCertificate : Proc(IX509SCEPEnrollment*, Void*, Win32cr::Foundation::HRESULT),
    get_TransactionId : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_TransactionId : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Request : Proc(IX509SCEPEnrollment*, Void**, Win32cr::Foundation::HRESULT),
    get_CertificateFriendlyName : Proc(IX509SCEPEnrollment*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateFriendlyName : Proc(IX509SCEPEnrollment*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IX509SCEPEnrollment*, Void**, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509SCEPEnrollment*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509SCEPEnrollment*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509SCEPEnrollment*, Int16, Win32cr::Foundation::HRESULT),
    delete_request : Proc(IX509SCEPEnrollment*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509SCEPEnrollment, lpVtbl : IX509SCEPEnrollmentVtbl* do
    GUID = LibC::GUID.new(0x728ab361_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509SCEPEnrollment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509SCEPEnrollment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509SCEPEnrollment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509SCEPEnrollment*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509SCEPEnrollment*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509SCEPEnrollment*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509SCEPEnrollment*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509SCEPEnrollment*, pRequest : Void*, strThumbprint : Win32cr::Foundation::BSTR, thumprint_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strServerCertificates : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pRequest, strThumbprint, thumprint_encoding, strServerCertificates, encoding)
    end
    def initialize_for_pending(this : IX509SCEPEnrollment*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_for_pending.call(this, context)
    end
    def create_request_message(this : IX509SCEPEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_request_message.call(this, encoding, pValue)
    end
    def create_retrieve_pending_message(this : IX509SCEPEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_retrieve_pending_message.call(this, encoding, pValue)
    end
    def create_retrieve_certificate_message(this : IX509SCEPEnrollment*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strIssuer : Win32cr::Foundation::BSTR, issuer_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strSerialNumber : Win32cr::Foundation::BSTR, serial_number_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_retrieve_certificate_message.call(this, context, strIssuer, issuer_encoding, strSerialNumber, serial_number_encoding, encoding, pValue)
    end
    def process_response_message(this : IX509SCEPEnrollment*, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pDisposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_response_message.call(this, strResponse, encoding, pDisposition)
    end
    def put_ServerCapabilities(this : IX509SCEPEnrollment*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServerCapabilities.call(this, value)
    end
    def get_FailInfo(this : IX509SCEPEnrollment*, pValue : Win32cr::Security::Cryptography::Certificates::X509SCEPFailInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FailInfo.call(this, pValue)
    end
    def get_SignerCertificate(this : IX509SCEPEnrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509SCEPEnrollment*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def get_OldCertificate(this : IX509SCEPEnrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, ppValue)
    end
    def put_OldCertificate(this : IX509SCEPEnrollment*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OldCertificate.call(this, pValue)
    end
    def get_TransactionId(this : IX509SCEPEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransactionId.call(this, encoding, pValue)
    end
    def put_TransactionId(this : IX509SCEPEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransactionId.call(this, encoding, value)
    end
    def get_Request(this : IX509SCEPEnrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Request.call(this, ppValue)
    end
    def get_CertificateFriendlyName(this : IX509SCEPEnrollment*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateFriendlyName.call(this, pValue)
    end
    def put_CertificateFriendlyName(this : IX509SCEPEnrollment*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateFriendlyName.call(this, value)
    end
    def get_Status(this : IX509SCEPEnrollment*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, ppValue)
    end
    def get_Certificate(this : IX509SCEPEnrollment*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def get_Silent(this : IX509SCEPEnrollment*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509SCEPEnrollment*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def delete_request(this : IX509SCEPEnrollment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_request.call(this)
    end

  end

  @[Extern]
  record IX509SCEPEnrollment2Vtbl,
    query_interface : Proc(IX509SCEPEnrollment2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509SCEPEnrollment2*, UInt32),
    release : Proc(IX509SCEPEnrollment2*, UInt32),
    get_type_info_count : Proc(IX509SCEPEnrollment2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509SCEPEnrollment2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509SCEPEnrollment2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509SCEPEnrollment2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509SCEPEnrollment2*, Void*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    initialize_for_pending : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::HRESULT),
    create_request_message : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_retrieve_pending_message : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_retrieve_certificate_message : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    process_response_message : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*, Win32cr::Foundation::HRESULT),
    put_ServerCapabilities : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FailInfo : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::X509SCEPFailInfo*, Win32cr::Foundation::HRESULT),
    get_SignerCertificate : Proc(IX509SCEPEnrollment2*, Void**, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(IX509SCEPEnrollment2*, Void*, Win32cr::Foundation::HRESULT),
    get_OldCertificate : Proc(IX509SCEPEnrollment2*, Void**, Win32cr::Foundation::HRESULT),
    put_OldCertificate : Proc(IX509SCEPEnrollment2*, Void*, Win32cr::Foundation::HRESULT),
    get_TransactionId : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_TransactionId : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Request : Proc(IX509SCEPEnrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_CertificateFriendlyName : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CertificateFriendlyName : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IX509SCEPEnrollment2*, Void**, Win32cr::Foundation::HRESULT),
    get_Certificate : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Silent : Proc(IX509SCEPEnrollment2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Silent : Proc(IX509SCEPEnrollment2*, Int16, Win32cr::Foundation::HRESULT),
    delete_request : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::HRESULT),
    create_challenge_answer_message : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    process_response_message2 : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*, Win32cr::Foundation::HRESULT),
    get_ResultMessageText : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DelayRetry : Proc(IX509SCEPEnrollment2*, Win32cr::Security::Cryptography::Certificates::DelayRetryAction*, Win32cr::Foundation::HRESULT),
    get_ActivityId : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ActivityId : Proc(IX509SCEPEnrollment2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509SCEPEnrollment2, lpVtbl : IX509SCEPEnrollment2Vtbl* do
    GUID = LibC::GUID.new(0x728ab364_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509SCEPEnrollment2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509SCEPEnrollment2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509SCEPEnrollment2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509SCEPEnrollment2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509SCEPEnrollment2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509SCEPEnrollment2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509SCEPEnrollment2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509SCEPEnrollment2*, pRequest : Void*, strThumbprint : Win32cr::Foundation::BSTR, thumprint_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strServerCertificates : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pRequest, strThumbprint, thumprint_encoding, strServerCertificates, encoding)
    end
    def initialize_for_pending(this : IX509SCEPEnrollment2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_for_pending.call(this, context)
    end
    def create_request_message(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_request_message.call(this, encoding, pValue)
    end
    def create_retrieve_pending_message(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_retrieve_pending_message.call(this, encoding, pValue)
    end
    def create_retrieve_certificate_message(this : IX509SCEPEnrollment2*, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strIssuer : Win32cr::Foundation::BSTR, issuer_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, strSerialNumber : Win32cr::Foundation::BSTR, serial_number_encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_retrieve_certificate_message.call(this, context, strIssuer, issuer_encoding, strSerialNumber, serial_number_encoding, encoding, pValue)
    end
    def process_response_message(this : IX509SCEPEnrollment2*, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pDisposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_response_message.call(this, strResponse, encoding, pDisposition)
    end
    def put_ServerCapabilities(this : IX509SCEPEnrollment2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ServerCapabilities.call(this, value)
    end
    def get_FailInfo(this : IX509SCEPEnrollment2*, pValue : Win32cr::Security::Cryptography::Certificates::X509SCEPFailInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FailInfo.call(this, pValue)
    end
    def get_SignerCertificate(this : IX509SCEPEnrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignerCertificate.call(this, ppValue)
    end
    def put_SignerCertificate(this : IX509SCEPEnrollment2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, pValue)
    end
    def get_OldCertificate(this : IX509SCEPEnrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OldCertificate.call(this, ppValue)
    end
    def put_OldCertificate(this : IX509SCEPEnrollment2*, pValue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OldCertificate.call(this, pValue)
    end
    def get_TransactionId(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransactionId.call(this, encoding, pValue)
    end
    def put_TransactionId(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransactionId.call(this, encoding, value)
    end
    def get_Request(this : IX509SCEPEnrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Request.call(this, ppValue)
    end
    def get_CertificateFriendlyName(this : IX509SCEPEnrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CertificateFriendlyName.call(this, pValue)
    end
    def put_CertificateFriendlyName(this : IX509SCEPEnrollment2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CertificateFriendlyName.call(this, value)
    end
    def get_Status(this : IX509SCEPEnrollment2*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, ppValue)
    end
    def get_Certificate(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Certificate.call(this, encoding, pValue)
    end
    def get_Silent(this : IX509SCEPEnrollment2*, pValue : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Silent.call(this, pValue)
    end
    def put_Silent(this : IX509SCEPEnrollment2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Silent.call(this, value)
    end
    def delete_request(this : IX509SCEPEnrollment2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_request.call(this)
    end
    def create_challenge_answer_message(this : IX509SCEPEnrollment2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_challenge_answer_message.call(this, encoding, pValue)
    end
    def process_response_message2(this : IX509SCEPEnrollment2*, flags : Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, strResponse : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pDisposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_response_message2.call(this, flags, strResponse, encoding, pDisposition)
    end
    def get_ResultMessageText(this : IX509SCEPEnrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ResultMessageText.call(this, pValue)
    end
    def get_DelayRetry(this : IX509SCEPEnrollment2*, pValue : Win32cr::Security::Cryptography::Certificates::DelayRetryAction*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DelayRetry.call(this, pValue)
    end
    def get_ActivityId(this : IX509SCEPEnrollment2*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ActivityId.call(this, pValue)
    end
    def put_ActivityId(this : IX509SCEPEnrollment2*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ActivityId.call(this, value)
    end

  end

  @[Extern]
  record IX509SCEPEnrollmentHelperVtbl,
    query_interface : Proc(IX509SCEPEnrollmentHelper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IX509SCEPEnrollmentHelper*, UInt32),
    release : Proc(IX509SCEPEnrollmentHelper*, UInt32),
    get_type_info_count : Proc(IX509SCEPEnrollmentHelper*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IX509SCEPEnrollmentHelper*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IX509SCEPEnrollmentHelper*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IX509SCEPEnrollmentHelper*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IX509SCEPEnrollmentHelper*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    initialize_for_pending : Proc(IX509SCEPEnrollmentHelper*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enroll : Proc(IX509SCEPEnrollmentHelper*, Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*, Win32cr::Foundation::HRESULT),
    fetch_pending : Proc(IX509SCEPEnrollmentHelper*, Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*, Win32cr::Foundation::HRESULT),
    get_X509SCEPEnrollment : Proc(IX509SCEPEnrollmentHelper*, Void**, Win32cr::Foundation::HRESULT),
    get_ResultMessageText : Proc(IX509SCEPEnrollmentHelper*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IX509SCEPEnrollmentHelper, lpVtbl : IX509SCEPEnrollmentHelperVtbl* do
    GUID = LibC::GUID.new(0x728ab365_u32, 0x217d_u16, 0x11da_u16, StaticArray[0xb2_u8, 0xa4_u8, 0x0_u8, 0xe_u8, 0x7b_u8, 0xbb_u8, 0x2b_u8, 0x9_u8])
    def query_interface(this : IX509SCEPEnrollmentHelper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IX509SCEPEnrollmentHelper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IX509SCEPEnrollmentHelper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IX509SCEPEnrollmentHelper*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IX509SCEPEnrollmentHelper*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IX509SCEPEnrollmentHelper*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IX509SCEPEnrollmentHelper*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : IX509SCEPEnrollmentHelper*, strServerUrl : Win32cr::Foundation::BSTR, strRequestHeaders : Win32cr::Foundation::BSTR, pRequest : Void*, strCACertificateThumbprint : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strServerUrl, strRequestHeaders, pRequest, strCACertificateThumbprint)
    end
    def initialize_for_pending(this : IX509SCEPEnrollmentHelper*, strServerUrl : Win32cr::Foundation::BSTR, strRequestHeaders : Win32cr::Foundation::BSTR, context : Win32cr::Security::Cryptography::Certificates::X509CertificateEnrollmentContext, strTransactionId : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_for_pending.call(this, strServerUrl, strRequestHeaders, context, strTransactionId)
    end
    def enroll(this : IX509SCEPEnrollmentHelper*, process_flags : Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, pDisposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enroll.call(this, process_flags, pDisposition)
    end
    def fetch_pending(this : IX509SCEPEnrollmentHelper*, process_flags : Win32cr::Security::Cryptography::Certificates::X509SCEPProcessMessageFlags, pDisposition : Win32cr::Security::Cryptography::Certificates::X509SCEPDisposition*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fetch_pending.call(this, process_flags, pDisposition)
    end
    def get_X509SCEPEnrollment(this : IX509SCEPEnrollmentHelper*, ppValue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_X509SCEPEnrollment.call(this, ppValue)
    end
    def get_ResultMessageText(this : IX509SCEPEnrollmentHelper*, pValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ResultMessageText.call(this, pValue)
    end

  end

  @[Extern]
  record ICertEncodeStringArrayVtbl,
    query_interface : Proc(ICertEncodeStringArray*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeStringArray*, UInt32),
    release : Proc(ICertEncodeStringArray*, UInt32),
    get_type_info_count : Proc(ICertEncodeStringArray*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeStringArray*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeStringArray*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeStringArray*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeStringArray*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_string_type : Proc(ICertEncodeStringArray*, Int32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeStringArray*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeStringArray*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeStringArray*, Int32, Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeStringArray*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeStringArray*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeStringArray, lpVtbl : ICertEncodeStringArrayVtbl* do
    GUID = LibC::GUID.new(0x12a88820_u32, 0x7494_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertEncodeStringArray*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeStringArray*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeStringArray*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeStringArray*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeStringArray*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeStringArray*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeStringArray*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeStringArray*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_string_type(this : ICertEncodeStringArray*, pStringType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_type.call(this, pStringType)
    end
    def get_count(this : ICertEncodeStringArray*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeStringArray*, index : Int32, pstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pstr)
    end
    def reset(this : ICertEncodeStringArray*, count : Int32, string_type : Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count, string_type)
    end
    def set_value(this : ICertEncodeStringArray*, index : Int32, str : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, str)
    end
    def encode(this : ICertEncodeStringArray*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeStringArray2Vtbl,
    query_interface : Proc(ICertEncodeStringArray2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeStringArray2*, UInt32),
    release : Proc(ICertEncodeStringArray2*, UInt32),
    get_type_info_count : Proc(ICertEncodeStringArray2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeStringArray2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeStringArray2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeStringArray2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeStringArray2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_string_type : Proc(ICertEncodeStringArray2*, Int32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeStringArray2*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeStringArray2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeStringArray2*, Int32, Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeStringArray2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeStringArray2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeStringArray2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeStringArray2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeStringArray2, lpVtbl : ICertEncodeStringArray2Vtbl* do
    GUID = LibC::GUID.new(0x9c680d93_u32, 0x9b7d_u16, 0x4e95_u16, StaticArray[0x90_u8, 0x18_u8, 0x4f_u8, 0xfe_u8, 0x10_u8, 0xba_u8, 0x5a_u8, 0xda_u8])
    def query_interface(this : ICertEncodeStringArray2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeStringArray2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeStringArray2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeStringArray2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeStringArray2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeStringArray2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeStringArray2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeStringArray2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_string_type(this : ICertEncodeStringArray2*, pStringType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_type.call(this, pStringType)
    end
    def get_count(this : ICertEncodeStringArray2*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeStringArray2*, index : Int32, pstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pstr)
    end
    def reset(this : ICertEncodeStringArray2*, count : Int32, string_type : Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count, string_type)
    end
    def set_value(this : ICertEncodeStringArray2*, index : Int32, str : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, str)
    end
    def encode(this : ICertEncodeStringArray2*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end
    def decode_blob(this : ICertEncodeStringArray2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeStringArray2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, encoding, pstrEncodedData)
    end

  end

  @[Extern]
  record ICertEncodeLongArrayVtbl,
    query_interface : Proc(ICertEncodeLongArray*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeLongArray*, UInt32),
    release : Proc(ICertEncodeLongArray*, UInt32),
    get_type_info_count : Proc(ICertEncodeLongArray*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeLongArray*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeLongArray*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeLongArray*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeLongArray*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeLongArray*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeLongArray*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeLongArray*, Int32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeLongArray*, Int32, Int32, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeLongArray*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeLongArray, lpVtbl : ICertEncodeLongArrayVtbl* do
    GUID = LibC::GUID.new(0x15e2f230_u32, 0xa0a2_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertEncodeLongArray*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeLongArray*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeLongArray*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeLongArray*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeLongArray*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeLongArray*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeLongArray*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeLongArray*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_count(this : ICertEncodeLongArray*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeLongArray*, index : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pValue)
    end
    def reset(this : ICertEncodeLongArray*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count)
    end
    def set_value(this : ICertEncodeLongArray*, index : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, value)
    end
    def encode(this : ICertEncodeLongArray*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeLongArray2Vtbl,
    query_interface : Proc(ICertEncodeLongArray2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeLongArray2*, UInt32),
    release : Proc(ICertEncodeLongArray2*, UInt32),
    get_type_info_count : Proc(ICertEncodeLongArray2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeLongArray2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeLongArray2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeLongArray2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeLongArray2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeLongArray2*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeLongArray2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeLongArray2*, Int32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeLongArray2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeLongArray2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeLongArray2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeLongArray2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeLongArray2, lpVtbl : ICertEncodeLongArray2Vtbl* do
    GUID = LibC::GUID.new(0x4efde84a_u32, 0xbd9b_u16, 0x4fc2_u16, StaticArray[0xa1_u8, 0x8_u8, 0xc3_u8, 0x47_u8, 0xd4_u8, 0x78_u8, 0x84_u8, 0xf_u8])
    def query_interface(this : ICertEncodeLongArray2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeLongArray2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeLongArray2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeLongArray2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeLongArray2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeLongArray2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeLongArray2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeLongArray2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_count(this : ICertEncodeLongArray2*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeLongArray2*, index : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pValue)
    end
    def reset(this : ICertEncodeLongArray2*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count)
    end
    def set_value(this : ICertEncodeLongArray2*, index : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, value)
    end
    def encode(this : ICertEncodeLongArray2*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end
    def decode_blob(this : ICertEncodeLongArray2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeLongArray2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, encoding, pstrEncodedData)
    end

  end

  @[Extern]
  record ICertEncodeDateArrayVtbl,
    query_interface : Proc(ICertEncodeDateArray*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeDateArray*, UInt32),
    release : Proc(ICertEncodeDateArray*, UInt32),
    get_type_info_count : Proc(ICertEncodeDateArray*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeDateArray*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeDateArray*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeDateArray*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeDateArray*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeDateArray*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeDateArray*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeDateArray*, Int32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeDateArray*, Int32, Float64, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeDateArray*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeDateArray, lpVtbl : ICertEncodeDateArrayVtbl* do
    GUID = LibC::GUID.new(0x2f9469a0_u32, 0xa470_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x21_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertEncodeDateArray*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeDateArray*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeDateArray*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeDateArray*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeDateArray*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeDateArray*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeDateArray*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeDateArray*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_count(this : ICertEncodeDateArray*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeDateArray*, index : Int32, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pValue)
    end
    def reset(this : ICertEncodeDateArray*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count)
    end
    def set_value(this : ICertEncodeDateArray*, index : Int32, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, value)
    end
    def encode(this : ICertEncodeDateArray*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeDateArray2Vtbl,
    query_interface : Proc(ICertEncodeDateArray2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeDateArray2*, UInt32),
    release : Proc(ICertEncodeDateArray2*, UInt32),
    get_type_info_count : Proc(ICertEncodeDateArray2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeDateArray2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeDateArray2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeDateArray2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeDateArray2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_count : Proc(ICertEncodeDateArray2*, Int32*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICertEncodeDateArray2*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeDateArray2*, Int32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICertEncodeDateArray2*, Int32, Float64, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeDateArray2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeDateArray2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeDateArray2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeDateArray2, lpVtbl : ICertEncodeDateArray2Vtbl* do
    GUID = LibC::GUID.new(0x99a4edb5_u32, 0x2b8e_u16, 0x448d_u16, StaticArray[0xbf_u8, 0x95_u8, 0xbb_u8, 0xa8_u8, 0xd7_u8, 0x78_u8, 0x9d_u8, 0xc8_u8])
    def query_interface(this : ICertEncodeDateArray2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeDateArray2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeDateArray2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeDateArray2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeDateArray2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeDateArray2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeDateArray2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeDateArray2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_count(this : ICertEncodeDateArray2*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_value(this : ICertEncodeDateArray2*, index : Int32, pValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, pValue)
    end
    def reset(this : ICertEncodeDateArray2*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, count)
    end
    def set_value(this : ICertEncodeDateArray2*, index : Int32, value : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, value)
    end
    def encode(this : ICertEncodeDateArray2*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end
    def decode_blob(this : ICertEncodeDateArray2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeDateArray2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, encoding, pstrEncodedData)
    end

  end

  @[Extern]
  record ICertEncodeCRLDistInfoVtbl,
    query_interface : Proc(ICertEncodeCRLDistInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeCRLDistInfo*, UInt32),
    release : Proc(ICertEncodeCRLDistInfo*, UInt32),
    get_type_info_count : Proc(ICertEncodeCRLDistInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeCRLDistInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeCRLDistInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeCRLDistInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeCRLDistInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_dist_point_count : Proc(ICertEncodeCRLDistInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_name_count : Proc(ICertEncodeCRLDistInfo*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name_choice : Proc(ICertEncodeCRLDistInfo*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ICertEncodeCRLDistInfo*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeCRLDistInfo*, Int32, Win32cr::Foundation::HRESULT),
    set_name_count : Proc(ICertEncodeCRLDistInfo*, Int32, Int32, Win32cr::Foundation::HRESULT),
    set_name_entry : Proc(ICertEncodeCRLDistInfo*, Int32, Int32, Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeCRLDistInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeCRLDistInfo, lpVtbl : ICertEncodeCRLDistInfoVtbl* do
    GUID = LibC::GUID.new(0x1958640_u32, 0xbbff_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x25_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertEncodeCRLDistInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeCRLDistInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeCRLDistInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeCRLDistInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeCRLDistInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeCRLDistInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeCRLDistInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeCRLDistInfo*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_dist_point_count(this : ICertEncodeCRLDistInfo*, pDistPointCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dist_point_count.call(this, pDistPointCount)
    end
    def get_name_count(this : ICertEncodeCRLDistInfo*, dist_point_index : Int32, pNameCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_count.call(this, dist_point_index, pNameCount)
    end
    def get_name_choice(this : ICertEncodeCRLDistInfo*, dist_point_index : Int32, name_index : Int32, pNameChoice : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_choice.call(this, dist_point_index, name_index, pNameChoice)
    end
    def get_name(this : ICertEncodeCRLDistInfo*, dist_point_index : Int32, name_index : Int32, pstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dist_point_index, name_index, pstrName)
    end
    def reset(this : ICertEncodeCRLDistInfo*, dist_point_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, dist_point_count)
    end
    def set_name_count(this : ICertEncodeCRLDistInfo*, dist_point_index : Int32, name_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_count.call(this, dist_point_index, name_count)
    end
    def set_name_entry(this : ICertEncodeCRLDistInfo*, dist_point_index : Int32, name_index : Int32, name_choice : Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, strName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_entry.call(this, dist_point_index, name_index, name_choice, strName)
    end
    def encode(this : ICertEncodeCRLDistInfo*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeCRLDistInfo2Vtbl,
    query_interface : Proc(ICertEncodeCRLDistInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeCRLDistInfo2*, UInt32),
    release : Proc(ICertEncodeCRLDistInfo2*, UInt32),
    get_type_info_count : Proc(ICertEncodeCRLDistInfo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeCRLDistInfo2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeCRLDistInfo2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeCRLDistInfo2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeCRLDistInfo2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_dist_point_count : Proc(ICertEncodeCRLDistInfo2*, Int32*, Win32cr::Foundation::HRESULT),
    get_name_count : Proc(ICertEncodeCRLDistInfo2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name_choice : Proc(ICertEncodeCRLDistInfo2*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ICertEncodeCRLDistInfo2*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeCRLDistInfo2*, Int32, Win32cr::Foundation::HRESULT),
    set_name_count : Proc(ICertEncodeCRLDistInfo2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    set_name_entry : Proc(ICertEncodeCRLDistInfo2*, Int32, Int32, Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeCRLDistInfo2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeCRLDistInfo2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeCRLDistInfo2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeCRLDistInfo2, lpVtbl : ICertEncodeCRLDistInfo2Vtbl* do
    GUID = LibC::GUID.new(0xb4275d4b_u32, 0x3e30_u16, 0x446f_u16, StaticArray[0xad_u8, 0x36_u8, 0x9_u8, 0xd0_u8, 0x31_u8, 0x20_u8, 0xb0_u8, 0x78_u8])
    def query_interface(this : ICertEncodeCRLDistInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeCRLDistInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeCRLDistInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeCRLDistInfo2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeCRLDistInfo2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeCRLDistInfo2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeCRLDistInfo2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeCRLDistInfo2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_dist_point_count(this : ICertEncodeCRLDistInfo2*, pDistPointCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dist_point_count.call(this, pDistPointCount)
    end
    def get_name_count(this : ICertEncodeCRLDistInfo2*, dist_point_index : Int32, pNameCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_count.call(this, dist_point_index, pNameCount)
    end
    def get_name_choice(this : ICertEncodeCRLDistInfo2*, dist_point_index : Int32, name_index : Int32, pNameChoice : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_choice.call(this, dist_point_index, name_index, pNameChoice)
    end
    def get_name(this : ICertEncodeCRLDistInfo2*, dist_point_index : Int32, name_index : Int32, pstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, dist_point_index, name_index, pstrName)
    end
    def reset(this : ICertEncodeCRLDistInfo2*, dist_point_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, dist_point_count)
    end
    def set_name_count(this : ICertEncodeCRLDistInfo2*, dist_point_index : Int32, name_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_count.call(this, dist_point_index, name_count)
    end
    def set_name_entry(this : ICertEncodeCRLDistInfo2*, dist_point_index : Int32, name_index : Int32, name_choice : Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, strName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_entry.call(this, dist_point_index, name_index, name_choice, strName)
    end
    def encode(this : ICertEncodeCRLDistInfo2*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end
    def decode_blob(this : ICertEncodeCRLDistInfo2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeCRLDistInfo2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, encoding, pstrEncodedData)
    end

  end

  @[Extern]
  record ICertEncodeAltNameVtbl,
    query_interface : Proc(ICertEncodeAltName*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeAltName*, UInt32),
    release : Proc(ICertEncodeAltName*, UInt32),
    get_type_info_count : Proc(ICertEncodeAltName*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeAltName*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeAltName*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeAltName*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeAltName*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_name_count : Proc(ICertEncodeAltName*, Int32*, Win32cr::Foundation::HRESULT),
    get_name_choice : Proc(ICertEncodeAltName*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ICertEncodeAltName*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeAltName*, Int32, Win32cr::Foundation::HRESULT),
    set_name_entry : Proc(ICertEncodeAltName*, Int32, Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeAltName*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeAltName, lpVtbl : ICertEncodeAltNameVtbl* do
    GUID = LibC::GUID.new(0x1c9a8c70_u32, 0x1271_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : ICertEncodeAltName*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeAltName*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeAltName*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeAltName*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeAltName*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeAltName*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeAltName*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeAltName*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_name_count(this : ICertEncodeAltName*, pNameCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_count.call(this, pNameCount)
    end
    def get_name_choice(this : ICertEncodeAltName*, name_index : Int32, pNameChoice : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_choice.call(this, name_index, pNameChoice)
    end
    def get_name(this : ICertEncodeAltName*, name_index : Int32, pstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name_index, pstrName)
    end
    def reset(this : ICertEncodeAltName*, name_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, name_count)
    end
    def set_name_entry(this : ICertEncodeAltName*, name_index : Int32, name_choice : Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, strName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_entry.call(this, name_index, name_choice, strName)
    end
    def encode(this : ICertEncodeAltName*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeAltName2Vtbl,
    query_interface : Proc(ICertEncodeAltName2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeAltName2*, UInt32),
    release : Proc(ICertEncodeAltName2*, UInt32),
    get_type_info_count : Proc(ICertEncodeAltName2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeAltName2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeAltName2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeAltName2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeAltName2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_name_count : Proc(ICertEncodeAltName2*, Int32*, Win32cr::Foundation::HRESULT),
    get_name_choice : Proc(ICertEncodeAltName2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(ICertEncodeAltName2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    reset : Proc(ICertEncodeAltName2*, Int32, Win32cr::Foundation::HRESULT),
    set_name_entry : Proc(ICertEncodeAltName2*, Int32, Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeAltName2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeAltName2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeAltName2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_name_blob : Proc(ICertEncodeAltName2*, Int32, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_name_entry_blob : Proc(ICertEncodeAltName2*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeAltName2, lpVtbl : ICertEncodeAltName2Vtbl* do
    GUID = LibC::GUID.new(0xf67fe177_u32, 0x5ef1_u16, 0x4535_u16, StaticArray[0xb4_u8, 0xce_u8, 0x29_u8, 0xdf_u8, 0x15_u8, 0xe2_u8, 0xe0_u8, 0xc3_u8])
    def query_interface(this : ICertEncodeAltName2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeAltName2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeAltName2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeAltName2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeAltName2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeAltName2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeAltName2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeAltName2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_name_count(this : ICertEncodeAltName2*, pNameCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_count.call(this, pNameCount)
    end
    def get_name_choice(this : ICertEncodeAltName2*, name_index : Int32, pNameChoice : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_choice.call(this, name_index, pNameChoice)
    end
    def get_name(this : ICertEncodeAltName2*, name_index : Int32, pstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name_index, pstrName)
    end
    def reset(this : ICertEncodeAltName2*, name_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, name_count)
    end
    def set_name_entry(this : ICertEncodeAltName2*, name_index : Int32, name_choice : Win32cr::Security::Cryptography::Certificates::CERT_ALT_NAME, strName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_entry.call(this, name_index, name_choice, strName)
    end
    def encode(this : ICertEncodeAltName2*, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, pstrBinary)
    end
    def decode_blob(this : ICertEncodeAltName2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeAltName2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, encoding, pstrEncodedData)
    end
    def get_name_blob(this : ICertEncodeAltName2*, name_index : Int32, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name_blob.call(this, name_index, encoding, pstrName)
    end
    def set_name_entry_blob(this : ICertEncodeAltName2*, name_index : Int32, name_choice : Int32, strName : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name_entry_blob.call(this, name_index, name_choice, strName, encoding)
    end

  end

  @[Extern]
  record ICertEncodeBitStringVtbl,
    query_interface : Proc(ICertEncodeBitString*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeBitString*, UInt32),
    release : Proc(ICertEncodeBitString*, UInt32),
    get_type_info_count : Proc(ICertEncodeBitString*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeBitString*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeBitString*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeBitString*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeBitString*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_bit_count : Proc(ICertEncodeBitString*, Int32*, Win32cr::Foundation::HRESULT),
    get_bit_string : Proc(ICertEncodeBitString*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeBitString*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeBitString, lpVtbl : ICertEncodeBitStringVtbl* do
    GUID = LibC::GUID.new(0x6db525be_u32, 0x1278_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x83_u8, 0xfa_u8])
    def query_interface(this : ICertEncodeBitString*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeBitString*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeBitString*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeBitString*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeBitString*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeBitString*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeBitString*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeBitString*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_bit_count(this : ICertEncodeBitString*, pBitCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_count.call(this, pBitCount)
    end
    def get_bit_string(this : ICertEncodeBitString*, pstrBitString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_string.call(this, pstrBitString)
    end
    def encode(this : ICertEncodeBitString*, bit_count : Int32, strBitString : Win32cr::Foundation::BSTR, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, bit_count, strBitString, pstrBinary)
    end

  end

  @[Extern]
  record ICertEncodeBitString2Vtbl,
    query_interface : Proc(ICertEncodeBitString2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertEncodeBitString2*, UInt32),
    release : Proc(ICertEncodeBitString2*, UInt32),
    get_type_info_count : Proc(ICertEncodeBitString2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertEncodeBitString2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertEncodeBitString2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertEncodeBitString2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    decode : Proc(ICertEncodeBitString2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_bit_count : Proc(ICertEncodeBitString2*, Int32*, Win32cr::Foundation::HRESULT),
    get_bit_string : Proc(ICertEncodeBitString2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    encode : Proc(ICertEncodeBitString2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    decode_blob : Proc(ICertEncodeBitString2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::HRESULT),
    encode_blob : Proc(ICertEncodeBitString2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_bit_string_blob : Proc(ICertEncodeBitString2*, Win32cr::Security::Cryptography::Certificates::EncodingType, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertEncodeBitString2, lpVtbl : ICertEncodeBitString2Vtbl* do
    GUID = LibC::GUID.new(0xe070d6e7_u32, 0x23ef_u16, 0x4dd2_u16, StaticArray[0x82_u8, 0x42_u8, 0xeb_u8, 0xd9_u8, 0xc9_u8, 0x28_u8, 0xcb_u8, 0x30_u8])
    def query_interface(this : ICertEncodeBitString2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertEncodeBitString2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertEncodeBitString2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertEncodeBitString2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertEncodeBitString2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertEncodeBitString2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertEncodeBitString2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def decode(this : ICertEncodeBitString2*, strBinary : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode.call(this, strBinary)
    end
    def get_bit_count(this : ICertEncodeBitString2*, pBitCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_count.call(this, pBitCount)
    end
    def get_bit_string(this : ICertEncodeBitString2*, pstrBitString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_string.call(this, pstrBitString)
    end
    def encode(this : ICertEncodeBitString2*, bit_count : Int32, strBitString : Win32cr::Foundation::BSTR, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode.call(this, bit_count, strBitString, pstrBinary)
    end
    def decode_blob(this : ICertEncodeBitString2*, strEncodedData : Win32cr::Foundation::BSTR, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decode_blob.call(this, strEncodedData, encoding)
    end
    def encode_blob(this : ICertEncodeBitString2*, bit_count : Int32, strBitString : Win32cr::Foundation::BSTR, encoding_in : Win32cr::Security::Cryptography::Certificates::EncodingType, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrEncodedData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_blob.call(this, bit_count, strBitString, encoding_in, encoding, pstrEncodedData)
    end
    def get_bit_string_blob(this : ICertEncodeBitString2*, encoding : Win32cr::Security::Cryptography::Certificates::EncodingType, pstrBitString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit_string_blob.call(this, encoding, pstrBitString)
    end

  end

  @[Extern]
  record ICertExitVtbl,
    query_interface : Proc(ICertExit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertExit*, UInt32),
    release : Proc(ICertExit*, UInt32),
    get_type_info_count : Proc(ICertExit*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertExit*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertExit*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertExit*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertExit*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_EXIT_EVENT_MASK*, Win32cr::Foundation::HRESULT),
    notify : Proc(ICertExit*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_description : Proc(ICertExit*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertExit, lpVtbl : ICertExitVtbl* do
    GUID = LibC::GUID.new(0xe19ae1a0_u32, 0x7364_u16, 0x11d0_u16, StaticArray[0x88_u8, 0x16_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0xb8_u8, 0x3c_u8])
    def query_interface(this : ICertExit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertExit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertExit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertExit*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertExit*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertExit*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertExit*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertExit*, strConfig : Win32cr::Foundation::BSTR, pEventMask : Win32cr::Security::Cryptography::Certificates::CERT_EXIT_EVENT_MASK*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strConfig, pEventMask)
    end
    def notify(this : ICertExit*, exit_event : Int32, context : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, exit_event, context)
    end
    def get_description(this : ICertExit*, pstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pstrDescription)
    end

  end

  @[Extern]
  record ICertExit2Vtbl,
    query_interface : Proc(ICertExit2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertExit2*, UInt32),
    release : Proc(ICertExit2*, UInt32),
    get_type_info_count : Proc(ICertExit2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertExit2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertExit2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertExit2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ICertExit2*, Win32cr::Foundation::BSTR, Win32cr::Security::Cryptography::Certificates::CERT_EXIT_EVENT_MASK*, Win32cr::Foundation::HRESULT),
    notify : Proc(ICertExit2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_description : Proc(ICertExit2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_manage_module : Proc(ICertExit2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertExit2, lpVtbl : ICertExit2Vtbl* do
    GUID = LibC::GUID.new(0xabf484b_u32, 0xd049_u16, 0x464d_u16, StaticArray[0xa7_u8, 0xed_u8, 0x55_u8, 0x2e_u8, 0x75_u8, 0x29_u8, 0xb0_u8, 0xff_u8])
    def query_interface(this : ICertExit2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertExit2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertExit2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertExit2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertExit2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertExit2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertExit2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ICertExit2*, strConfig : Win32cr::Foundation::BSTR, pEventMask : Win32cr::Security::Cryptography::Certificates::CERT_EXIT_EVENT_MASK*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, strConfig, pEventMask)
    end
    def notify(this : ICertExit2*, exit_event : Int32, context : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, exit_event, context)
    end
    def get_description(this : ICertExit2*, pstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pstrDescription)
    end
    def get_manage_module(this : ICertExit2*, ppManageModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_manage_module.call(this, ppManageModule)
    end

  end

  @[Extern]
  record ICEnrollVtbl,
    query_interface : Proc(ICEnroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICEnroll*, UInt32),
    release : Proc(ICEnroll*, UInt32),
    get_type_info_count : Proc(ICEnroll*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICEnroll*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICEnroll*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICEnroll*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    createFilePKCS10 : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7 : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    createPKCS10 : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    acceptPKCS7 : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getCertFromPKCS7 : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumProviders : Proc(ICEnroll*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumContainers : Proc(ICEnroll*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfo : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreType : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(ICEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(ICEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(ICEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(ICEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(ICEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(ICEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(ICEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(ICEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileName : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileName : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(ICEnroll*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(ICEnroll*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICEnroll, lpVtbl : ICEnrollVtbl* do
    GUID = LibC::GUID.new(0x43f8f288_u32, 0x7a20_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
    def query_interface(this : ICEnroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICEnroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICEnroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICEnroll*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICEnroll*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICEnroll*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICEnroll*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def createFilePKCS10(this : ICEnroll*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, wszPKCS10FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7(this : ICEnroll*, wszPKCS7FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7.call(this, wszPKCS7FileName)
    end
    def createPKCS10(this : ICEnroll*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, pPKCS10 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10.call(this, dn_name, usage, pPKCS10)
    end
    def acceptPKCS7(this : ICEnroll*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7.call(this, pkcs7)
    end
    def getCertFromPKCS7(this : ICEnroll*, wszPKCS7 : Win32cr::Foundation::BSTR, pbstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromPKCS7.call(this, wszPKCS7, pbstrCert)
    end
    def enumProviders(this : ICEnroll*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProviders.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainers(this : ICEnroll*, dwIndex : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainers.call(this, dwIndex, pbstr)
    end
    def freeRequestInfo(this : ICEnroll*, pkcs7_or_pkcs10 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfo.call(this, pkcs7_or_pkcs10)
    end
    def get_MyStoreName(this : ICEnroll*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreName.call(this, pbstrName)
    end
    def put_MyStoreName(this : ICEnroll*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreName.call(this, bstrName)
    end
    def get_MyStoreType(this : ICEnroll*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreType.call(this, pbstrType)
    end
    def put_MyStoreType(this : ICEnroll*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreType.call(this, bstrType)
    end
    def get_MyStoreFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreName(this : ICEnroll*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreName.call(this, pbstrName)
    end
    def put_CAStoreName(this : ICEnroll*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreName.call(this, bstrName)
    end
    def get_CAStoreType(this : ICEnroll*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreType.call(this, pbstrType)
    end
    def put_CAStoreType(this : ICEnroll*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreType.call(this, bstrType)
    end
    def get_CAStoreFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreName(this : ICEnroll*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreName.call(this, pbstrName)
    end
    def put_RootStoreName(this : ICEnroll*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreName.call(this, bstrName)
    end
    def get_RootStoreType(this : ICEnroll*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreType.call(this, pbstrType)
    end
    def put_RootStoreType(this : ICEnroll*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreType.call(this, bstrType)
    end
    def get_RootStoreFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreName(this : ICEnroll*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreName.call(this, pbstrName)
    end
    def put_RequestStoreName(this : ICEnroll*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreName.call(this, bstrName)
    end
    def get_RequestStoreType(this : ICEnroll*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreType.call(this, pbstrType)
    end
    def put_RequestStoreType(this : ICEnroll*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreType.call(this, bstrType)
    end
    def get_RequestStoreFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerName(this : ICEnroll*, pbstrContainer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pbstrContainer)
    end
    def put_ContainerName(this : ICEnroll*, bstrContainer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, bstrContainer)
    end
    def get_ProviderName(this : ICEnroll*, pbstrProvider : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pbstrProvider)
    end
    def put_ProviderName(this : ICEnroll*, bstrProvider : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, bstrProvider)
    end
    def get_ProviderType(this : ICEnroll*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : ICEnroll*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : ICEnroll*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : ICEnroll*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : ICEnroll*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : ICEnroll*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : ICEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : ICEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : ICEnroll*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : ICEnroll*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToCSP(this : ICEnroll*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : ICEnroll*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileName(this : ICEnroll*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileName.call(this, pbstr)
    end
    def put_SPCFileName(this : ICEnroll*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileName.call(this, bstr)
    end
    def get_PVKFileName(this : ICEnroll*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileName.call(this, pbstr)
    end
    def put_PVKFileName(this : ICEnroll*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileName.call(this, bstr)
    end
    def get_HashAlgorithm(this : ICEnroll*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pbstr)
    end
    def put_HashAlgorithm(this : ICEnroll*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, bstr)
    end

  end

  @[Extern]
  record ICEnroll2Vtbl,
    query_interface : Proc(ICEnroll2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICEnroll2*, UInt32),
    release : Proc(ICEnroll2*, UInt32),
    get_type_info_count : Proc(ICEnroll2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICEnroll2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICEnroll2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICEnroll2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    createFilePKCS10 : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7 : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    createPKCS10 : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    acceptPKCS7 : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getCertFromPKCS7 : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumProviders : Proc(ICEnroll2*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumContainers : Proc(ICEnroll2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfo : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreType : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(ICEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(ICEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(ICEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(ICEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(ICEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(ICEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(ICEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(ICEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileName : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(ICEnroll2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addCertTypeToRequest : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addNameValuePairToSignature : Proc(ICEnroll2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(ICEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(ICEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(ICEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(ICEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICEnroll2, lpVtbl : ICEnroll2Vtbl* do
    GUID = LibC::GUID.new(0x704ca730_u32, 0xc90b_u16, 0x11d1_u16, StaticArray[0x9b_u8, 0xec_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
    def query_interface(this : ICEnroll2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICEnroll2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICEnroll2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICEnroll2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICEnroll2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICEnroll2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICEnroll2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def createFilePKCS10(this : ICEnroll2*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, wszPKCS10FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7(this : ICEnroll2*, wszPKCS7FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7.call(this, wszPKCS7FileName)
    end
    def createPKCS10(this : ICEnroll2*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, pPKCS10 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10.call(this, dn_name, usage, pPKCS10)
    end
    def acceptPKCS7(this : ICEnroll2*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7.call(this, pkcs7)
    end
    def getCertFromPKCS7(this : ICEnroll2*, wszPKCS7 : Win32cr::Foundation::BSTR, pbstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromPKCS7.call(this, wszPKCS7, pbstrCert)
    end
    def enumProviders(this : ICEnroll2*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProviders.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainers(this : ICEnroll2*, dwIndex : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainers.call(this, dwIndex, pbstr)
    end
    def freeRequestInfo(this : ICEnroll2*, pkcs7_or_pkcs10 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfo.call(this, pkcs7_or_pkcs10)
    end
    def get_MyStoreName(this : ICEnroll2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreName.call(this, pbstrName)
    end
    def put_MyStoreName(this : ICEnroll2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreName.call(this, bstrName)
    end
    def get_MyStoreType(this : ICEnroll2*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreType.call(this, pbstrType)
    end
    def put_MyStoreType(this : ICEnroll2*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreType.call(this, bstrType)
    end
    def get_MyStoreFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreName(this : ICEnroll2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreName.call(this, pbstrName)
    end
    def put_CAStoreName(this : ICEnroll2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreName.call(this, bstrName)
    end
    def get_CAStoreType(this : ICEnroll2*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreType.call(this, pbstrType)
    end
    def put_CAStoreType(this : ICEnroll2*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreType.call(this, bstrType)
    end
    def get_CAStoreFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreName(this : ICEnroll2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreName.call(this, pbstrName)
    end
    def put_RootStoreName(this : ICEnroll2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreName.call(this, bstrName)
    end
    def get_RootStoreType(this : ICEnroll2*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreType.call(this, pbstrType)
    end
    def put_RootStoreType(this : ICEnroll2*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreType.call(this, bstrType)
    end
    def get_RootStoreFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreName(this : ICEnroll2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreName.call(this, pbstrName)
    end
    def put_RequestStoreName(this : ICEnroll2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreName.call(this, bstrName)
    end
    def get_RequestStoreType(this : ICEnroll2*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreType.call(this, pbstrType)
    end
    def put_RequestStoreType(this : ICEnroll2*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreType.call(this, bstrType)
    end
    def get_RequestStoreFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerName(this : ICEnroll2*, pbstrContainer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pbstrContainer)
    end
    def put_ContainerName(this : ICEnroll2*, bstrContainer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, bstrContainer)
    end
    def get_ProviderName(this : ICEnroll2*, pbstrProvider : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pbstrProvider)
    end
    def put_ProviderName(this : ICEnroll2*, bstrProvider : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, bstrProvider)
    end
    def get_ProviderType(this : ICEnroll2*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : ICEnroll2*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : ICEnroll2*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : ICEnroll2*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : ICEnroll2*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : ICEnroll2*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : ICEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : ICEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : ICEnroll2*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : ICEnroll2*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToCSP(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileName(this : ICEnroll2*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileName.call(this, pbstr)
    end
    def put_SPCFileName(this : ICEnroll2*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileName.call(this, bstr)
    end
    def get_PVKFileName(this : ICEnroll2*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileName.call(this, pbstr)
    end
    def put_PVKFileName(this : ICEnroll2*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileName.call(this, bstr)
    end
    def get_HashAlgorithm(this : ICEnroll2*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pbstr)
    end
    def put_HashAlgorithm(this : ICEnroll2*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, bstr)
    end
    def addCertTypeToRequest(this : ICEnroll2*, cert_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCertTypeToRequest.call(this, cert_type)
    end
    def addNameValuePairToSignature(this : ICEnroll2*, name : Win32cr::Foundation::BSTR, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addNameValuePairToSignature.call(this, name, value)
    end
    def get_WriteCertToUserDS(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : ICEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end

  end

  @[Extern]
  record ICEnroll3Vtbl,
    query_interface : Proc(ICEnroll3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICEnroll3*, UInt32),
    release : Proc(ICEnroll3*, UInt32),
    get_type_info_count : Proc(ICEnroll3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICEnroll3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICEnroll3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICEnroll3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    createFilePKCS10 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    createPKCS10 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    acceptPKCS7 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getCertFromPKCS7 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumProviders : Proc(ICEnroll3*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumContainers : Proc(ICEnroll3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfo : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreType : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileName : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(ICEnroll3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addCertTypeToRequest : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addNameValuePairToSignature : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    install_pkcs7 : Proc(ICEnroll3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    reset : Proc(ICEnroll3*, Win32cr::Foundation::HRESULT),
    get_supported_key_spec : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    get_key_len : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    enum_algs : Proc(ICEnroll3*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_alg_name : Proc(ICEnroll3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ReuseHardwareKeyIfUnableToGenNew : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_ReuseHardwareKeyIfUnableToGenNew : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_HashAlgID : Proc(ICEnroll3*, Int32, Win32cr::Foundation::HRESULT),
    get_HashAlgID : Proc(ICEnroll3*, Int32*, Win32cr::Foundation::HRESULT),
    put_LimitExchangeKeyToEncipherment : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_LimitExchangeKeyToEncipherment : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableSMIMECapabilities : Proc(ICEnroll3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableSMIMECapabilities : Proc(ICEnroll3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICEnroll3, lpVtbl : ICEnroll3Vtbl* do
    GUID = LibC::GUID.new(0xc28c2d95_u32, 0xb7de_u16, 0x11d2_u16, StaticArray[0xa4_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfe_u8, 0x8e_u8])
    def query_interface(this : ICEnroll3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICEnroll3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICEnroll3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICEnroll3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICEnroll3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICEnroll3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICEnroll3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def createFilePKCS10(this : ICEnroll3*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, wszPKCS10FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7(this : ICEnroll3*, wszPKCS7FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7.call(this, wszPKCS7FileName)
    end
    def createPKCS10(this : ICEnroll3*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, pPKCS10 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10.call(this, dn_name, usage, pPKCS10)
    end
    def acceptPKCS7(this : ICEnroll3*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7.call(this, pkcs7)
    end
    def getCertFromPKCS7(this : ICEnroll3*, wszPKCS7 : Win32cr::Foundation::BSTR, pbstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromPKCS7.call(this, wszPKCS7, pbstrCert)
    end
    def enumProviders(this : ICEnroll3*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProviders.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainers(this : ICEnroll3*, dwIndex : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainers.call(this, dwIndex, pbstr)
    end
    def freeRequestInfo(this : ICEnroll3*, pkcs7_or_pkcs10 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfo.call(this, pkcs7_or_pkcs10)
    end
    def get_MyStoreName(this : ICEnroll3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreName.call(this, pbstrName)
    end
    def put_MyStoreName(this : ICEnroll3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreName.call(this, bstrName)
    end
    def get_MyStoreType(this : ICEnroll3*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreType.call(this, pbstrType)
    end
    def put_MyStoreType(this : ICEnroll3*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreType.call(this, bstrType)
    end
    def get_MyStoreFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreName(this : ICEnroll3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreName.call(this, pbstrName)
    end
    def put_CAStoreName(this : ICEnroll3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreName.call(this, bstrName)
    end
    def get_CAStoreType(this : ICEnroll3*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreType.call(this, pbstrType)
    end
    def put_CAStoreType(this : ICEnroll3*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreType.call(this, bstrType)
    end
    def get_CAStoreFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreName(this : ICEnroll3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreName.call(this, pbstrName)
    end
    def put_RootStoreName(this : ICEnroll3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreName.call(this, bstrName)
    end
    def get_RootStoreType(this : ICEnroll3*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreType.call(this, pbstrType)
    end
    def put_RootStoreType(this : ICEnroll3*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreType.call(this, bstrType)
    end
    def get_RootStoreFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreName(this : ICEnroll3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreName.call(this, pbstrName)
    end
    def put_RequestStoreName(this : ICEnroll3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreName.call(this, bstrName)
    end
    def get_RequestStoreType(this : ICEnroll3*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreType.call(this, pbstrType)
    end
    def put_RequestStoreType(this : ICEnroll3*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreType.call(this, bstrType)
    end
    def get_RequestStoreFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerName(this : ICEnroll3*, pbstrContainer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pbstrContainer)
    end
    def put_ContainerName(this : ICEnroll3*, bstrContainer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, bstrContainer)
    end
    def get_ProviderName(this : ICEnroll3*, pbstrProvider : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pbstrProvider)
    end
    def put_ProviderName(this : ICEnroll3*, bstrProvider : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, bstrProvider)
    end
    def get_ProviderType(this : ICEnroll3*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : ICEnroll3*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : ICEnroll3*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : ICEnroll3*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : ICEnroll3*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : ICEnroll3*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : ICEnroll3*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : ICEnroll3*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : ICEnroll3*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : ICEnroll3*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToCSP(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileName(this : ICEnroll3*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileName.call(this, pbstr)
    end
    def put_SPCFileName(this : ICEnroll3*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileName.call(this, bstr)
    end
    def get_PVKFileName(this : ICEnroll3*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileName.call(this, pbstr)
    end
    def put_PVKFileName(this : ICEnroll3*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileName.call(this, bstr)
    end
    def get_HashAlgorithm(this : ICEnroll3*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pbstr)
    end
    def put_HashAlgorithm(this : ICEnroll3*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, bstr)
    end
    def addCertTypeToRequest(this : ICEnroll3*, cert_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCertTypeToRequest.call(this, cert_type)
    end
    def addNameValuePairToSignature(this : ICEnroll3*, name : Win32cr::Foundation::BSTR, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addNameValuePairToSignature.call(this, name, value)
    end
    def get_WriteCertToUserDS(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : ICEnroll3*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end
    def install_pkcs7(this : ICEnroll3*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7.call(this, pkcs7)
    end
    def reset(this : ICEnroll3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_supported_key_spec(this : ICEnroll3*, pdwKeySpec : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_key_spec.call(this, pdwKeySpec)
    end
    def get_key_len(this : ICEnroll3*, fMin : Win32cr::Foundation::BOOL, fExchange : Win32cr::Foundation::BOOL, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len.call(this, fMin, fExchange, pdwKeySize)
    end
    def enum_algs(this : ICEnroll3*, dwIndex : Int32, algClass : Int32, pdwAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_algs.call(this, dwIndex, algClass, pdwAlgID)
    end
    def get_alg_name(this : ICEnroll3*, algID : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alg_name.call(this, algID, pbstr)
    end
    def put_ReuseHardwareKeyIfUnableToGenNew(this : ICEnroll3*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def get_ReuseHardwareKeyIfUnableToGenNew(this : ICEnroll3*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def put_HashAlgID(this : ICEnroll3*, hashAlgID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgID.call(this, hashAlgID)
    end
    def get_HashAlgID(this : ICEnroll3*, hashAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgID.call(this, hashAlgID)
    end
    def put_LimitExchangeKeyToEncipherment(this : ICEnroll3*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def get_LimitExchangeKeyToEncipherment(this : ICEnroll3*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def put_EnableSMIMECapabilities(this : ICEnroll3*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def get_EnableSMIMECapabilities(this : ICEnroll3*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end

  end

  @[Extern]
  record ICEnroll4Vtbl,
    query_interface : Proc(ICEnroll4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICEnroll4*, UInt32),
    release : Proc(ICEnroll4*, UInt32),
    get_type_info_count : Proc(ICEnroll4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICEnroll4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICEnroll4*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICEnroll4*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    createFilePKCS10 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    createPKCS10 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    acceptPKCS7 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getCertFromPKCS7 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumProviders : Proc(ICEnroll4*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumContainers : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfo : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileName : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addCertTypeToRequest : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addNameValuePairToSignature : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    install_pkcs7 : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    reset : Proc(ICEnroll4*, Win32cr::Foundation::HRESULT),
    get_supported_key_spec : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    get_key_len : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    enum_algs : Proc(ICEnroll4*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_alg_name : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ReuseHardwareKeyIfUnableToGenNew : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_ReuseHardwareKeyIfUnableToGenNew : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_HashAlgID : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_HashAlgID : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_LimitExchangeKeyToEncipherment : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_LimitExchangeKeyToEncipherment : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableSMIMECapabilities : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableSMIMECapabilities : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_PrivateKeyArchiveCertificate : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PrivateKeyArchiveCertificate : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ThumbPrint : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ThumbPrint : Proc(ICEnroll4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    binaryToString : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    stringToBinary : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    addExtensionToRequest : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addAttributeToRequest : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    addNameValuePairToRequest : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    resetExtensions : Proc(ICEnroll4*, Win32cr::Foundation::HRESULT),
    resetAttributes : Proc(ICEnroll4*, Win32cr::Foundation::HRESULT),
    createRequest : Proc(ICEnroll4*, Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createFileRequest : Proc(ICEnroll4*, Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptResponse : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    acceptFileResponse : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getCertFromResponse : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getCertFromFileResponse : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createPFX : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createFilePFX : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setPendingRequestInfo : Proc(ICEnroll4*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enumPendingRequest : Proc(ICEnroll4*, Int32, Win32cr::Security::Cryptography::Certificates::PENDING_REQUEST_DESIRED_PROPERTY, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    removePendingRequest : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_key_len_ex : Proc(ICEnroll4*, Win32cr::Security::Cryptography::Certificates::XEKL_KEYSIZE, Win32cr::Security::Cryptography::Certificates::XEKL_KEYSPEC, Int32*, Win32cr::Foundation::HRESULT),
    install_pkcs7_ex : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    addCertTypeToRequestEx : Proc(ICEnroll4*, Win32cr::Security::Cryptography::Certificates::ADDED_CERT_TYPE, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BOOL, Int32, Win32cr::Foundation::HRESULT),
    getProviderType : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    put_SignerCertificate : Proc(ICEnroll4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(ICEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(ICEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    addBlobPropertyToCertificate : Proc(ICEnroll4*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    resetBlobProperties : Proc(ICEnroll4*, Win32cr::Foundation::HRESULT),
    put_IncludeSubjectKeyID : Proc(ICEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_IncludeSubjectKeyID : Proc(ICEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICEnroll4, lpVtbl : ICEnroll4Vtbl* do
    GUID = LibC::GUID.new(0xc1f1188a_u32, 0x2eb5_u16, 0x4a80_u16, StaticArray[0x84_u8, 0x1b_u8, 0x7e_u8, 0x72_u8, 0x9a_u8, 0x35_u8, 0x6d_u8, 0x90_u8])
    def query_interface(this : ICEnroll4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICEnroll4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICEnroll4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICEnroll4*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICEnroll4*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICEnroll4*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICEnroll4*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def createFilePKCS10(this : ICEnroll4*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, wszPKCS10FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7(this : ICEnroll4*, wszPKCS7FileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7.call(this, wszPKCS7FileName)
    end
    def createPKCS10(this : ICEnroll4*, dn_name : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, pPKCS10 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10.call(this, dn_name, usage, pPKCS10)
    end
    def acceptPKCS7(this : ICEnroll4*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7.call(this, pkcs7)
    end
    def getCertFromPKCS7(this : ICEnroll4*, wszPKCS7 : Win32cr::Foundation::BSTR, pbstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromPKCS7.call(this, wszPKCS7, pbstrCert)
    end
    def enumProviders(this : ICEnroll4*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProviders.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainers(this : ICEnroll4*, dwIndex : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainers.call(this, dwIndex, pbstr)
    end
    def freeRequestInfo(this : ICEnroll4*, pkcs7_or_pkcs10 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfo.call(this, pkcs7_or_pkcs10)
    end
    def get_MyStoreName(this : ICEnroll4*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreName.call(this, pbstrName)
    end
    def put_MyStoreName(this : ICEnroll4*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreName.call(this, bstrName)
    end
    def get_MyStoreType(this : ICEnroll4*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreType.call(this, pbstrType)
    end
    def put_MyStoreType(this : ICEnroll4*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreType.call(this, bstrType)
    end
    def get_MyStoreFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreName(this : ICEnroll4*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreName.call(this, pbstrName)
    end
    def put_CAStoreName(this : ICEnroll4*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreName.call(this, bstrName)
    end
    def get_CAStoreType(this : ICEnroll4*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreType.call(this, pbstrType)
    end
    def put_CAStoreType(this : ICEnroll4*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreType.call(this, bstrType)
    end
    def get_CAStoreFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreName(this : ICEnroll4*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreName.call(this, pbstrName)
    end
    def put_RootStoreName(this : ICEnroll4*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreName.call(this, bstrName)
    end
    def get_RootStoreType(this : ICEnroll4*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreType.call(this, pbstrType)
    end
    def put_RootStoreType(this : ICEnroll4*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreType.call(this, bstrType)
    end
    def get_RootStoreFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreName(this : ICEnroll4*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreName.call(this, pbstrName)
    end
    def put_RequestStoreName(this : ICEnroll4*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreName.call(this, bstrName)
    end
    def get_RequestStoreType(this : ICEnroll4*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreType.call(this, pbstrType)
    end
    def put_RequestStoreType(this : ICEnroll4*, bstrType : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreType.call(this, bstrType)
    end
    def get_RequestStoreFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerName(this : ICEnroll4*, pbstrContainer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pbstrContainer)
    end
    def put_ContainerName(this : ICEnroll4*, bstrContainer : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, bstrContainer)
    end
    def get_ProviderName(this : ICEnroll4*, pbstrProvider : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pbstrProvider)
    end
    def put_ProviderName(this : ICEnroll4*, bstrProvider : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, bstrProvider)
    end
    def get_ProviderType(this : ICEnroll4*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : ICEnroll4*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : ICEnroll4*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : ICEnroll4*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : ICEnroll4*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : ICEnroll4*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : ICEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : ICEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : ICEnroll4*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : ICEnroll4*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToCSP(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileName(this : ICEnroll4*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileName.call(this, pbstr)
    end
    def put_SPCFileName(this : ICEnroll4*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileName.call(this, bstr)
    end
    def get_PVKFileName(this : ICEnroll4*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileName.call(this, pbstr)
    end
    def put_PVKFileName(this : ICEnroll4*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileName.call(this, bstr)
    end
    def get_HashAlgorithm(this : ICEnroll4*, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pbstr)
    end
    def put_HashAlgorithm(this : ICEnroll4*, bstr : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, bstr)
    end
    def addCertTypeToRequest(this : ICEnroll4*, cert_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCertTypeToRequest.call(this, cert_type)
    end
    def addNameValuePairToSignature(this : ICEnroll4*, name : Win32cr::Foundation::BSTR, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addNameValuePairToSignature.call(this, name, value)
    end
    def get_WriteCertToUserDS(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : ICEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end
    def install_pkcs7(this : ICEnroll4*, pkcs7 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7.call(this, pkcs7)
    end
    def reset(this : ICEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_supported_key_spec(this : ICEnroll4*, pdwKeySpec : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_key_spec.call(this, pdwKeySpec)
    end
    def get_key_len(this : ICEnroll4*, fMin : Win32cr::Foundation::BOOL, fExchange : Win32cr::Foundation::BOOL, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len.call(this, fMin, fExchange, pdwKeySize)
    end
    def enum_algs(this : ICEnroll4*, dwIndex : Int32, algClass : Int32, pdwAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_algs.call(this, dwIndex, algClass, pdwAlgID)
    end
    def get_alg_name(this : ICEnroll4*, algID : Int32, pbstr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alg_name.call(this, algID, pbstr)
    end
    def put_ReuseHardwareKeyIfUnableToGenNew(this : ICEnroll4*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def get_ReuseHardwareKeyIfUnableToGenNew(this : ICEnroll4*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def put_HashAlgID(this : ICEnroll4*, hashAlgID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgID.call(this, hashAlgID)
    end
    def get_HashAlgID(this : ICEnroll4*, hashAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgID.call(this, hashAlgID)
    end
    def put_LimitExchangeKeyToEncipherment(this : ICEnroll4*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def get_LimitExchangeKeyToEncipherment(this : ICEnroll4*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def put_EnableSMIMECapabilities(this : ICEnroll4*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def get_EnableSMIMECapabilities(this : ICEnroll4*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def put_PrivateKeyArchiveCertificate(this : ICEnroll4*, bstrCert : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrivateKeyArchiveCertificate.call(this, bstrCert)
    end
    def get_PrivateKeyArchiveCertificate(this : ICEnroll4*, pbstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateKeyArchiveCertificate.call(this, pbstrCert)
    end
    def put_ThumbPrint(this : ICEnroll4*, bstrThumbPrint : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ThumbPrint.call(this, bstrThumbPrint)
    end
    def get_ThumbPrint(this : ICEnroll4*, pbstrThumbPrint : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ThumbPrint.call(this, pbstrThumbPrint)
    end
    def binaryToString(this : ICEnroll4*, flags : Int32, strBinary : Win32cr::Foundation::BSTR, pstrEncoded : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.binaryToString.call(this, flags, strBinary, pstrEncoded)
    end
    def stringToBinary(this : ICEnroll4*, flags : Int32, strEncoded : Win32cr::Foundation::BSTR, pstrBinary : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stringToBinary.call(this, flags, strEncoded, pstrBinary)
    end
    def addExtensionToRequest(this : ICEnroll4*, flags : Int32, strName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addExtensionToRequest.call(this, flags, strName, strValue)
    end
    def addAttributeToRequest(this : ICEnroll4*, flags : Int32, strName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addAttributeToRequest.call(this, flags, strName, strValue)
    end
    def addNameValuePairToRequest(this : ICEnroll4*, flags : Int32, strName : Win32cr::Foundation::BSTR, strValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addNameValuePairToRequest.call(this, flags, strName, strValue)
    end
    def resetExtensions(this : ICEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resetExtensions.call(this)
    end
    def resetAttributes(this : ICEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resetAttributes.call(this)
    end
    def createRequest(this : ICEnroll4*, flags : Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, strDNName : Win32cr::Foundation::BSTR, usage : Win32cr::Foundation::BSTR, pstrRequest : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createRequest.call(this, flags, strDNName, usage, pstrRequest)
    end
    def createFileRequest(this : ICEnroll4*, flags : Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, strDNName : Win32cr::Foundation::BSTR, strUsage : Win32cr::Foundation::BSTR, strRequestFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFileRequest.call(this, flags, strDNName, strUsage, strRequestFileName)
    end
    def acceptResponse(this : ICEnroll4*, strResponse : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptResponse.call(this, strResponse)
    end
    def acceptFileResponse(this : ICEnroll4*, strResponseFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFileResponse.call(this, strResponseFileName)
    end
    def getCertFromResponse(this : ICEnroll4*, strResponse : Win32cr::Foundation::BSTR, pstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromResponse.call(this, strResponse, pstrCert)
    end
    def getCertFromFileResponse(this : ICEnroll4*, strResponseFileName : Win32cr::Foundation::BSTR, pstrCert : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertFromFileResponse.call(this, strResponseFileName, pstrCert)
    end
    def createPFX(this : ICEnroll4*, strPassword : Win32cr::Foundation::BSTR, pstrPFX : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPFX.call(this, strPassword, pstrPFX)
    end
    def createFilePFX(this : ICEnroll4*, strPassword : Win32cr::Foundation::BSTR, strPFXFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePFX.call(this, strPassword, strPFXFileName)
    end
    def setPendingRequestInfo(this : ICEnroll4*, lRequestID : Int32, strCADNS : Win32cr::Foundation::BSTR, strCAName : Win32cr::Foundation::BSTR, strFriendlyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setPendingRequestInfo.call(this, lRequestID, strCADNS, strCAName, strFriendlyName)
    end
    def enumPendingRequest(this : ICEnroll4*, lIndex : Int32, lDesiredProperty : Win32cr::Security::Cryptography::Certificates::PENDING_REQUEST_DESIRED_PROPERTY, pvarProperty : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumPendingRequest.call(this, lIndex, lDesiredProperty, pvarProperty)
    end
    def removePendingRequest(this : ICEnroll4*, strThumbprint : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removePendingRequest.call(this, strThumbprint)
    end
    def get_key_len_ex(this : ICEnroll4*, lSizeSpec : Win32cr::Security::Cryptography::Certificates::XEKL_KEYSIZE, lKeySpec : Win32cr::Security::Cryptography::Certificates::XEKL_KEYSPEC, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len_ex.call(this, lSizeSpec, lKeySpec, pdwKeySize)
    end
    def install_pkcs7_ex(this : ICEnroll4*, pkcs7 : Win32cr::Foundation::BSTR, plCertInstalled : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7_ex.call(this, pkcs7, plCertInstalled)
    end
    def addCertTypeToRequestEx(this : ICEnroll4*, lType : Win32cr::Security::Cryptography::Certificates::ADDED_CERT_TYPE, bstrOIDOrName : Win32cr::Foundation::BSTR, lMajorVersion : Int32, fMinorVersion : Win32cr::Foundation::BOOL, lMinorVersion : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCertTypeToRequestEx.call(this, lType, bstrOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion)
    end
    def getProviderType(this : ICEnroll4*, strProvName : Win32cr::Foundation::BSTR, plProvType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProviderType.call(this, strProvName, plProvType)
    end
    def put_SignerCertificate(this : ICEnroll4*, bstrCert : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignerCertificate.call(this, bstrCert)
    end
    def put_ClientId(this : ICEnroll4*, lClientId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, lClientId)
    end
    def get_ClientId(this : ICEnroll4*, plClientId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, plClientId)
    end
    def addBlobPropertyToCertificate(this : ICEnroll4*, lPropertyId : Int32, lReserved : Int32, bstrProperty : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addBlobPropertyToCertificate.call(this, lPropertyId, lReserved, bstrProperty)
    end
    def resetBlobProperties(this : ICEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resetBlobProperties.call(this)
    end
    def put_IncludeSubjectKeyID(this : ICEnroll4*, fInclude : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IncludeSubjectKeyID.call(this, fInclude)
    end
    def get_IncludeSubjectKeyID(this : ICEnroll4*, pfInclude : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IncludeSubjectKeyID.call(this, pfInclude)
    end

  end

  @[Extern]
  record IEnrollVtbl,
    query_interface : Proc(IEnroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnroll*, UInt32),
    release : Proc(IEnroll*, UInt32),
    createFilePKCS10WStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7WStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    createPKCS10WStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    acceptPKCS7Blob : Proc(IEnroll*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    getCertContextFromPKCS7 : Proc(IEnroll*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*),
    getMyStore : Proc(IEnroll*, Win32cr::Security::Cryptography::HCERTSTORE),
    getCAStore : Proc(IEnroll*, Win32cr::Security::Cryptography::HCERTSTORE),
    getROOTHStore : Proc(IEnroll*, Win32cr::Security::Cryptography::HCERTSTORE),
    enumProvidersWStr : Proc(IEnroll*, Int32, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    enumContainersWStr : Proc(IEnroll*, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfoBlob : Proc(IEnroll*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, Win32cr::Foundation::HRESULT),
    get_MyStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreTypeWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(IEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(IEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(IEnroll*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(IEnroll*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(IEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(IEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(IEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(IEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(IEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(IEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(IEnroll*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(IEnroll*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileNameWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithmWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithmWStr : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IEnroll*, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IEnroll*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Foundation::HRESULT),
    add_cert_type_to_request_w_str : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_name_value_pair_to_signature_w_str : Proc(IEnroll*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_extensions_to_request : Proc(IEnroll*, Win32cr::Security::Cryptography::CERT_EXTENSIONS*, Win32cr::Foundation::HRESULT),
    add_authenticated_attributes_to_pkcs7_request : Proc(IEnroll*, Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*, Win32cr::Foundation::HRESULT),
    create_pkcs7_request_from_request : Proc(IEnroll*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnroll, lpVtbl : IEnrollVtbl* do
    GUID = LibC::GUID.new(0xacaa7838_u32, 0x4585_u16, 0x11d1_u16, StaticArray[0xab_u8, 0x57_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x95_u8, 0xe1_u8])
    def query_interface(this : IEnroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def createFilePKCS10WStr(this : IEnroll*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, wszPKCS10FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10WStr.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7WStr(this : IEnroll*, wszPKCS7FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7WStr.call(this, wszPKCS7FileName)
    end
    def createPKCS10WStr(this : IEnroll*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, pPkcs10Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10WStr.call(this, dn_name, usage, pPkcs10Blob)
    end
    def acceptPKCS7Blob(this : IEnroll*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7Blob.call(this, pBlobPKCS7)
    end
    def getCertContextFromPKCS7(this : IEnroll*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Security::Cryptography::CERT_CONTEXT*
      @lpVtbl.try &.value.getCertContextFromPKCS7.call(this, pBlobPKCS7)
    end
    def getMyStore(this : IEnroll*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getMyStore.call(this)
    end
    def getCAStore(this : IEnroll*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getCAStore.call(this)
    end
    def getROOTHStore(this : IEnroll*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getROOTHStore.call(this)
    end
    def enumProvidersWStr(this : IEnroll*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProvidersWStr.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainersWStr(this : IEnroll*, dwIndex : Int32, pbstr : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainersWStr.call(this, dwIndex, pbstr)
    end
    def freeRequestInfoBlob(this : IEnroll*, pkcs7OrPkcs10 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfoBlob.call(this, pkcs7OrPkcs10)
    end
    def get_MyStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreNameWStr.call(this, szwName)
    end
    def put_MyStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreNameWStr.call(this, szwName)
    end
    def get_MyStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreTypeWStr.call(this, szwType)
    end
    def put_MyStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreTypeWStr.call(this, szwType)
    end
    def get_MyStoreFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreNameWStr.call(this, szwName)
    end
    def put_CAStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreNameWStr.call(this, szwName)
    end
    def get_CAStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreTypeWStr.call(this, szwType)
    end
    def put_CAStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreTypeWStr.call(this, szwType)
    end
    def get_CAStoreFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreNameWStr.call(this, szwName)
    end
    def put_RootStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreNameWStr.call(this, szwName)
    end
    def get_RootStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreTypeWStr.call(this, szwType)
    end
    def put_RootStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreTypeWStr.call(this, szwType)
    end
    def get_RootStoreFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreNameWStr.call(this, szwName)
    end
    def put_RequestStoreNameWStr(this : IEnroll*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreNameWStr.call(this, szwName)
    end
    def get_RequestStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreTypeWStr.call(this, szwType)
    end
    def put_RequestStoreTypeWStr(this : IEnroll*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreTypeWStr.call(this, szwType)
    end
    def get_RequestStoreFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerNameWStr(this : IEnroll*, szwContainer : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerNameWStr.call(this, szwContainer)
    end
    def put_ContainerNameWStr(this : IEnroll*, szwContainer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerNameWStr.call(this, szwContainer)
    end
    def get_ProviderNameWStr(this : IEnroll*, szwProvider : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderNameWStr.call(this, szwProvider)
    end
    def put_ProviderNameWStr(this : IEnroll*, szwProvider : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderNameWStr.call(this, szwProvider)
    end
    def get_ProviderType(this : IEnroll*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : IEnroll*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : IEnroll*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : IEnroll*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : IEnroll*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : IEnroll*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : IEnroll*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : IEnroll*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : IEnroll*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : IEnroll*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToUserDS(this : IEnroll*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : IEnroll*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : IEnroll*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : IEnroll*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end
    def get_WriteCertToCSP(this : IEnroll*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : IEnroll*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileNameWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileNameWStr.call(this, szw)
    end
    def put_SPCFileNameWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileNameWStr.call(this, szw)
    end
    def get_PVKFileNameWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileNameWStr.call(this, szw)
    end
    def put_PVKFileNameWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileNameWStr.call(this, szw)
    end
    def get_HashAlgorithmWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithmWStr.call(this, szw)
    end
    def put_HashAlgorithmWStr(this : IEnroll*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithmWStr.call(this, szw)
    end
    def get_RenewalCertificate(this : IEnroll*, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, ppCertContext)
    end
    def put_RenewalCertificate(this : IEnroll*, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, pCertContext)
    end
    def add_cert_type_to_request_w_str(this : IEnroll*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_cert_type_to_request_w_str.call(this, szw)
    end
    def add_name_value_pair_to_signature_w_str(this : IEnroll*, name : Win32cr::Foundation::PWSTR, value : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_name_value_pair_to_signature_w_str.call(this, name, value)
    end
    def add_extensions_to_request(this : IEnroll*, pCertExtensions : Win32cr::Security::Cryptography::CERT_EXTENSIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extensions_to_request.call(this, pCertExtensions)
    end
    def add_authenticated_attributes_to_pkcs7_request(this : IEnroll*, pAttributes : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_authenticated_attributes_to_pkcs7_request.call(this, pAttributes)
    end
    def create_pkcs7_request_from_request(this : IEnroll*, pRequest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pSigningCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pPkcs7Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pkcs7_request_from_request.call(this, pRequest, pSigningCertContext, pPkcs7Blob)
    end

  end

  @[Extern]
  record IEnroll2Vtbl,
    query_interface : Proc(IEnroll2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnroll2*, UInt32),
    release : Proc(IEnroll2*, UInt32),
    createFilePKCS10WStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7WStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    createPKCS10WStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    acceptPKCS7Blob : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    getCertContextFromPKCS7 : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*),
    getMyStore : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE),
    getCAStore : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE),
    getROOTHStore : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE),
    enumProvidersWStr : Proc(IEnroll2*, Int32, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    enumContainersWStr : Proc(IEnroll2*, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfoBlob : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, Win32cr::Foundation::HRESULT),
    get_MyStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreTypeWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileNameWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithmWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithmWStr : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IEnroll2*, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IEnroll2*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Foundation::HRESULT),
    add_cert_type_to_request_w_str : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_name_value_pair_to_signature_w_str : Proc(IEnroll2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_extensions_to_request : Proc(IEnroll2*, Win32cr::Security::Cryptography::CERT_EXTENSIONS*, Win32cr::Foundation::HRESULT),
    add_authenticated_attributes_to_pkcs7_request : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*, Win32cr::Foundation::HRESULT),
    create_pkcs7_request_from_request : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    install_pkcs7_blob : Proc(IEnroll2*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnroll2*, Win32cr::Foundation::HRESULT),
    get_supported_key_spec : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    get_key_len : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    enum_algs : Proc(IEnroll2*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_alg_name_w_str : Proc(IEnroll2*, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ReuseHardwareKeyIfUnableToGenNew : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_ReuseHardwareKeyIfUnableToGenNew : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_HashAlgID : Proc(IEnroll2*, Int32, Win32cr::Foundation::HRESULT),
    get_HashAlgID : Proc(IEnroll2*, Int32*, Win32cr::Foundation::HRESULT),
    set_h_store_my : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_ca : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_root : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_request : Proc(IEnroll2*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    put_LimitExchangeKeyToEncipherment : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_LimitExchangeKeyToEncipherment : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableSMIMECapabilities : Proc(IEnroll2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableSMIMECapabilities : Proc(IEnroll2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnroll2, lpVtbl : IEnroll2Vtbl* do
    GUID = LibC::GUID.new(0xc080e199_u32, 0xb7df_u16, 0x11d2_u16, StaticArray[0xa4_u8, 0x21_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfe_u8, 0x8e_u8])
    def query_interface(this : IEnroll2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnroll2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnroll2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def createFilePKCS10WStr(this : IEnroll2*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, wszPKCS10FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10WStr.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7WStr(this : IEnroll2*, wszPKCS7FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7WStr.call(this, wszPKCS7FileName)
    end
    def createPKCS10WStr(this : IEnroll2*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, pPkcs10Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10WStr.call(this, dn_name, usage, pPkcs10Blob)
    end
    def acceptPKCS7Blob(this : IEnroll2*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7Blob.call(this, pBlobPKCS7)
    end
    def getCertContextFromPKCS7(this : IEnroll2*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Security::Cryptography::CERT_CONTEXT*
      @lpVtbl.try &.value.getCertContextFromPKCS7.call(this, pBlobPKCS7)
    end
    def getMyStore(this : IEnroll2*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getMyStore.call(this)
    end
    def getCAStore(this : IEnroll2*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getCAStore.call(this)
    end
    def getROOTHStore(this : IEnroll2*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getROOTHStore.call(this)
    end
    def enumProvidersWStr(this : IEnroll2*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProvidersWStr.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainersWStr(this : IEnroll2*, dwIndex : Int32, pbstr : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainersWStr.call(this, dwIndex, pbstr)
    end
    def freeRequestInfoBlob(this : IEnroll2*, pkcs7OrPkcs10 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfoBlob.call(this, pkcs7OrPkcs10)
    end
    def get_MyStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreNameWStr.call(this, szwName)
    end
    def put_MyStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreNameWStr.call(this, szwName)
    end
    def get_MyStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreTypeWStr.call(this, szwType)
    end
    def put_MyStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreTypeWStr.call(this, szwType)
    end
    def get_MyStoreFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreNameWStr.call(this, szwName)
    end
    def put_CAStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreNameWStr.call(this, szwName)
    end
    def get_CAStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreTypeWStr.call(this, szwType)
    end
    def put_CAStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreTypeWStr.call(this, szwType)
    end
    def get_CAStoreFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreNameWStr.call(this, szwName)
    end
    def put_RootStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreNameWStr.call(this, szwName)
    end
    def get_RootStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreTypeWStr.call(this, szwType)
    end
    def put_RootStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreTypeWStr.call(this, szwType)
    end
    def get_RootStoreFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreNameWStr.call(this, szwName)
    end
    def put_RequestStoreNameWStr(this : IEnroll2*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreNameWStr.call(this, szwName)
    end
    def get_RequestStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreTypeWStr.call(this, szwType)
    end
    def put_RequestStoreTypeWStr(this : IEnroll2*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreTypeWStr.call(this, szwType)
    end
    def get_RequestStoreFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerNameWStr(this : IEnroll2*, szwContainer : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerNameWStr.call(this, szwContainer)
    end
    def put_ContainerNameWStr(this : IEnroll2*, szwContainer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerNameWStr.call(this, szwContainer)
    end
    def get_ProviderNameWStr(this : IEnroll2*, szwProvider : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderNameWStr.call(this, szwProvider)
    end
    def put_ProviderNameWStr(this : IEnroll2*, szwProvider : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderNameWStr.call(this, szwProvider)
    end
    def get_ProviderType(this : IEnroll2*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : IEnroll2*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : IEnroll2*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : IEnroll2*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : IEnroll2*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : IEnroll2*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : IEnroll2*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : IEnroll2*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : IEnroll2*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : IEnroll2*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToUserDS(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end
    def get_WriteCertToCSP(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : IEnroll2*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileNameWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileNameWStr.call(this, szw)
    end
    def put_SPCFileNameWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileNameWStr.call(this, szw)
    end
    def get_PVKFileNameWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileNameWStr.call(this, szw)
    end
    def put_PVKFileNameWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileNameWStr.call(this, szw)
    end
    def get_HashAlgorithmWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithmWStr.call(this, szw)
    end
    def put_HashAlgorithmWStr(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithmWStr.call(this, szw)
    end
    def get_RenewalCertificate(this : IEnroll2*, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, ppCertContext)
    end
    def put_RenewalCertificate(this : IEnroll2*, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, pCertContext)
    end
    def add_cert_type_to_request_w_str(this : IEnroll2*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_cert_type_to_request_w_str.call(this, szw)
    end
    def add_name_value_pair_to_signature_w_str(this : IEnroll2*, name : Win32cr::Foundation::PWSTR, value : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_name_value_pair_to_signature_w_str.call(this, name, value)
    end
    def add_extensions_to_request(this : IEnroll2*, pCertExtensions : Win32cr::Security::Cryptography::CERT_EXTENSIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extensions_to_request.call(this, pCertExtensions)
    end
    def add_authenticated_attributes_to_pkcs7_request(this : IEnroll2*, pAttributes : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_authenticated_attributes_to_pkcs7_request.call(this, pAttributes)
    end
    def create_pkcs7_request_from_request(this : IEnroll2*, pRequest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pSigningCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pPkcs7Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pkcs7_request_from_request.call(this, pRequest, pSigningCertContext, pPkcs7Blob)
    end
    def install_pkcs7_blob(this : IEnroll2*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7_blob.call(this, pBlobPKCS7)
    end
    def reset(this : IEnroll2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_supported_key_spec(this : IEnroll2*, pdwKeySpec : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_key_spec.call(this, pdwKeySpec)
    end
    def get_key_len(this : IEnroll2*, fMin : Win32cr::Foundation::BOOL, fExchange : Win32cr::Foundation::BOOL, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len.call(this, fMin, fExchange, pdwKeySize)
    end
    def enum_algs(this : IEnroll2*, dwIndex : Int32, algClass : Int32, pdwAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_algs.call(this, dwIndex, algClass, pdwAlgID)
    end
    def get_alg_name_w_str(this : IEnroll2*, algID : Int32, ppwsz : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alg_name_w_str.call(this, algID, ppwsz)
    end
    def put_ReuseHardwareKeyIfUnableToGenNew(this : IEnroll2*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def get_ReuseHardwareKeyIfUnableToGenNew(this : IEnroll2*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def put_HashAlgID(this : IEnroll2*, hashAlgID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgID.call(this, hashAlgID)
    end
    def get_HashAlgID(this : IEnroll2*, hashAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgID.call(this, hashAlgID)
    end
    def set_h_store_my(this : IEnroll2*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_my.call(this, hStore)
    end
    def set_h_store_ca(this : IEnroll2*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_ca.call(this, hStore)
    end
    def set_h_store_root(this : IEnroll2*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_root.call(this, hStore)
    end
    def set_h_store_request(this : IEnroll2*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_request.call(this, hStore)
    end
    def put_LimitExchangeKeyToEncipherment(this : IEnroll2*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def get_LimitExchangeKeyToEncipherment(this : IEnroll2*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def put_EnableSMIMECapabilities(this : IEnroll2*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def get_EnableSMIMECapabilities(this : IEnroll2*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end

  end

  @[Extern]
  record IEnroll4Vtbl,
    query_interface : Proc(IEnroll4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnroll4*, UInt32),
    release : Proc(IEnroll4*, UInt32),
    createFilePKCS10WStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acceptFilePKCS7WStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    createPKCS10WStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    acceptPKCS7Blob : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    getCertContextFromPKCS7 : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*),
    getMyStore : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE),
    getCAStore : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE),
    getROOTHStore : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE),
    enumProvidersWStr : Proc(IEnroll4*, Int32, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    enumContainersWStr : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    freeRequestInfoBlob : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, Win32cr::Foundation::HRESULT),
    get_MyStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_MyStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_MyStoreFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_MyStoreFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_CAStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_CAStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_CAStoreFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_CAStoreFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_RootStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RootStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RootStoreFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_RootStoreFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_RequestStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_RequestStoreTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RequestStoreFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_RequestStoreFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ContainerNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_ProviderType : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderType : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_KeySpec : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_KeySpec : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ProviderFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProviderFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_UseExistingKeySet : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_UseExistingKeySet : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_GenKeyFlags : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_GenKeyFlags : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_DeleteRequestCert : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_DeleteRequestCert : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToUserDS : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToUserDS : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableT61DNEncoding : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableT61DNEncoding : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_WriteCertToCSP : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_WriteCertToCSP : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_SPCFileNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_SPCFileNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_PVKFileNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_PVKFileNameWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithmWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithmWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_RenewalCertificate : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::HRESULT),
    put_RenewalCertificate : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Foundation::HRESULT),
    add_cert_type_to_request_w_str : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_name_value_pair_to_signature_w_str : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_extensions_to_request : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_EXTENSIONS*, Win32cr::Foundation::HRESULT),
    add_authenticated_attributes_to_pkcs7_request : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*, Win32cr::Foundation::HRESULT),
    create_pkcs7_request_from_request : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    install_pkcs7_blob : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnroll4*, Win32cr::Foundation::HRESULT),
    get_supported_key_spec : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    get_key_len : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Int32*, Win32cr::Foundation::HRESULT),
    enum_algs : Proc(IEnroll4*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_alg_name_w_str : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_ReuseHardwareKeyIfUnableToGenNew : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_ReuseHardwareKeyIfUnableToGenNew : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_HashAlgID : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_HashAlgID : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    set_h_store_my : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_ca : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_root : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    set_h_store_request : Proc(IEnroll4*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Foundation::HRESULT),
    put_LimitExchangeKeyToEncipherment : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_LimitExchangeKeyToEncipherment : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_EnableSMIMECapabilities : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_EnableSMIMECapabilities : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_ThumbPrintWStr : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, Win32cr::Foundation::HRESULT),
    get_ThumbPrintWStr : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    set_private_key_archive_certificate : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Foundation::HRESULT),
    get_private_key_archive_certificate : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_CONTEXT*),
    binaryBlobToString : Proc(IEnroll4*, Int32, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    stringToBinaryBlob : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    addExtensionToRequestWStr : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    addAttributeToRequestWStr : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    addNameValuePairToRequestWStr : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    resetExtensions : Proc(IEnroll4*, Win32cr::Foundation::HRESULT),
    resetAttributes : Proc(IEnroll4*, Win32cr::Foundation::HRESULT),
    createRequestWStr : Proc(IEnroll4*, Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    createFileRequestWStr : Proc(IEnroll4*, Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    acceptResponseBlob : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    acceptFileResponseWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    getCertContextFromResponseBlob : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::HRESULT),
    getCertContextFromFileResponseWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::HRESULT),
    createPFXWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    createFilePFXWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    setPendingRequestInfoWStr : Proc(IEnroll4*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enumPendingRequestWStr : Proc(IEnroll4*, Int32, Win32cr::Security::Cryptography::Certificates::PENDING_REQUEST_DESIRED_PROPERTY, Void*, Win32cr::Foundation::HRESULT),
    removePendingRequestWStr : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, Win32cr::Foundation::HRESULT),
    get_key_len_ex : Proc(IEnroll4*, Win32cr::Security::Cryptography::Certificates::XEKL_KEYSIZE, Win32cr::Security::Cryptography::Certificates::XEKL_KEYSPEC, Int32*, Win32cr::Foundation::HRESULT),
    install_pkcs7_blob_ex : Proc(IEnroll4*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Int32*, Win32cr::Foundation::HRESULT),
    add_cert_type_to_request_w_str_ex : Proc(IEnroll4*, Win32cr::Security::Cryptography::Certificates::ADDED_CERT_TYPE, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::BOOL, Int32, Win32cr::Foundation::HRESULT),
    getProviderTypeWStr : Proc(IEnroll4*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::HRESULT),
    addBlobPropertyToCertificateWStr : Proc(IEnroll4*, Int32, Int32, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Win32cr::Foundation::HRESULT),
    set_signer_certificate : Proc(IEnroll4*, Win32cr::Security::Cryptography::CERT_CONTEXT*, Win32cr::Foundation::HRESULT),
    put_ClientId : Proc(IEnroll4*, Int32, Win32cr::Foundation::HRESULT),
    get_ClientId : Proc(IEnroll4*, Int32*, Win32cr::Foundation::HRESULT),
    put_IncludeSubjectKeyID : Proc(IEnroll4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_IncludeSubjectKeyID : Proc(IEnroll4*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnroll4, lpVtbl : IEnroll4Vtbl* do
    GUID = LibC::GUID.new(0xf8053fe5_u32, 0x78f4_u16, 0x448f_u16, StaticArray[0xa0_u8, 0xdb_u8, 0x41_u8, 0xd6_u8, 0x1b_u8, 0x73_u8, 0x44_u8, 0x6b_u8])
    def query_interface(this : IEnroll4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnroll4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnroll4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def createFilePKCS10WStr(this : IEnroll4*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, wszPKCS10FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePKCS10WStr.call(this, dn_name, usage, wszPKCS10FileName)
    end
    def acceptFilePKCS7WStr(this : IEnroll4*, wszPKCS7FileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFilePKCS7WStr.call(this, wszPKCS7FileName)
    end
    def createPKCS10WStr(this : IEnroll4*, dn_name : Win32cr::Foundation::PWSTR, usage : Win32cr::Foundation::PWSTR, pPkcs10Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPKCS10WStr.call(this, dn_name, usage, pPkcs10Blob)
    end
    def acceptPKCS7Blob(this : IEnroll4*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptPKCS7Blob.call(this, pBlobPKCS7)
    end
    def getCertContextFromPKCS7(this : IEnroll4*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Security::Cryptography::CERT_CONTEXT*
      @lpVtbl.try &.value.getCertContextFromPKCS7.call(this, pBlobPKCS7)
    end
    def getMyStore(this : IEnroll4*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getMyStore.call(this)
    end
    def getCAStore(this : IEnroll4*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getCAStore.call(this)
    end
    def getROOTHStore(this : IEnroll4*) : Win32cr::Security::Cryptography::HCERTSTORE
      @lpVtbl.try &.value.getROOTHStore.call(this)
    end
    def enumProvidersWStr(this : IEnroll4*, dwIndex : Int32, dwFlags : Int32, pbstrProvName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumProvidersWStr.call(this, dwIndex, dwFlags, pbstrProvName)
    end
    def enumContainersWStr(this : IEnroll4*, dwIndex : Int32, pbstr : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumContainersWStr.call(this, dwIndex, pbstr)
    end
    def freeRequestInfoBlob(this : IEnroll4*, pkcs7OrPkcs10 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.freeRequestInfoBlob.call(this, pkcs7OrPkcs10)
    end
    def get_MyStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreNameWStr.call(this, szwName)
    end
    def put_MyStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreNameWStr.call(this, szwName)
    end
    def get_MyStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreTypeWStr.call(this, szwType)
    end
    def put_MyStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreTypeWStr.call(this, szwType)
    end
    def get_MyStoreFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MyStoreFlags.call(this, pdwFlags)
    end
    def put_MyStoreFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MyStoreFlags.call(this, dwFlags)
    end
    def get_CAStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreNameWStr.call(this, szwName)
    end
    def put_CAStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreNameWStr.call(this, szwName)
    end
    def get_CAStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreTypeWStr.call(this, szwType)
    end
    def put_CAStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreTypeWStr.call(this, szwType)
    end
    def get_CAStoreFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAStoreFlags.call(this, pdwFlags)
    end
    def put_CAStoreFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CAStoreFlags.call(this, dwFlags)
    end
    def get_RootStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreNameWStr.call(this, szwName)
    end
    def put_RootStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreNameWStr.call(this, szwName)
    end
    def get_RootStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreTypeWStr.call(this, szwType)
    end
    def put_RootStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreTypeWStr.call(this, szwType)
    end
    def get_RootStoreFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootStoreFlags.call(this, pdwFlags)
    end
    def put_RootStoreFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RootStoreFlags.call(this, dwFlags)
    end
    def get_RequestStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreNameWStr.call(this, szwName)
    end
    def put_RequestStoreNameWStr(this : IEnroll4*, szwName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreNameWStr.call(this, szwName)
    end
    def get_RequestStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreTypeWStr.call(this, szwType)
    end
    def put_RequestStoreTypeWStr(this : IEnroll4*, szwType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreTypeWStr.call(this, szwType)
    end
    def get_RequestStoreFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestStoreFlags.call(this, pdwFlags)
    end
    def put_RequestStoreFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestStoreFlags.call(this, dwFlags)
    end
    def get_ContainerNameWStr(this : IEnroll4*, szwContainer : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerNameWStr.call(this, szwContainer)
    end
    def put_ContainerNameWStr(this : IEnroll4*, szwContainer : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerNameWStr.call(this, szwContainer)
    end
    def get_ProviderNameWStr(this : IEnroll4*, szwProvider : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderNameWStr.call(this, szwProvider)
    end
    def put_ProviderNameWStr(this : IEnroll4*, szwProvider : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderNameWStr.call(this, szwProvider)
    end
    def get_ProviderType(this : IEnroll4*, pdwType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderType.call(this, pdwType)
    end
    def put_ProviderType(this : IEnroll4*, dwType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderType.call(this, dwType)
    end
    def get_KeySpec(this : IEnroll4*, pdw : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySpec.call(this, pdw)
    end
    def put_KeySpec(this : IEnroll4*, dw : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeySpec.call(this, dw)
    end
    def get_ProviderFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderFlags.call(this, pdwFlags)
    end
    def put_ProviderFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderFlags.call(this, dwFlags)
    end
    def get_UseExistingKeySet(this : IEnroll4*, fUseExistingKeys : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def put_UseExistingKeySet(this : IEnroll4*, fUseExistingKeys : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseExistingKeySet.call(this, fUseExistingKeys)
    end
    def get_GenKeyFlags(this : IEnroll4*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenKeyFlags.call(this, pdwFlags)
    end
    def put_GenKeyFlags(this : IEnroll4*, dwFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GenKeyFlags.call(this, dwFlags)
    end
    def get_DeleteRequestCert(this : IEnroll4*, fDelete : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeleteRequestCert.call(this, fDelete)
    end
    def put_DeleteRequestCert(this : IEnroll4*, fDelete : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DeleteRequestCert.call(this, fDelete)
    end
    def get_WriteCertToUserDS(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToUserDS.call(this, fBool)
    end
    def put_WriteCertToUserDS(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToUserDS.call(this, fBool)
    end
    def get_EnableT61DNEncoding(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableT61DNEncoding.call(this, fBool)
    end
    def put_EnableT61DNEncoding(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableT61DNEncoding.call(this, fBool)
    end
    def get_WriteCertToCSP(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteCertToCSP.call(this, fBool)
    end
    def put_WriteCertToCSP(this : IEnroll4*, fBool : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WriteCertToCSP.call(this, fBool)
    end
    def get_SPCFileNameWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPCFileNameWStr.call(this, szw)
    end
    def put_SPCFileNameWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SPCFileNameWStr.call(this, szw)
    end
    def get_PVKFileNameWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PVKFileNameWStr.call(this, szw)
    end
    def put_PVKFileNameWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PVKFileNameWStr.call(this, szw)
    end
    def get_HashAlgorithmWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithmWStr.call(this, szw)
    end
    def put_HashAlgorithmWStr(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithmWStr.call(this, szw)
    end
    def get_RenewalCertificate(this : IEnroll4*, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RenewalCertificate.call(this, ppCertContext)
    end
    def put_RenewalCertificate(this : IEnroll4*, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RenewalCertificate.call(this, pCertContext)
    end
    def add_cert_type_to_request_w_str(this : IEnroll4*, szw : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_cert_type_to_request_w_str.call(this, szw)
    end
    def add_name_value_pair_to_signature_w_str(this : IEnroll4*, name : Win32cr::Foundation::PWSTR, value : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_name_value_pair_to_signature_w_str.call(this, name, value)
    end
    def add_extensions_to_request(this : IEnroll4*, pCertExtensions : Win32cr::Security::Cryptography::CERT_EXTENSIONS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extensions_to_request.call(this, pCertExtensions)
    end
    def add_authenticated_attributes_to_pkcs7_request(this : IEnroll4*, pAttributes : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_authenticated_attributes_to_pkcs7_request.call(this, pAttributes)
    end
    def create_pkcs7_request_from_request(this : IEnroll4*, pRequest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pSigningCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pPkcs7Blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pkcs7_request_from_request.call(this, pRequest, pSigningCertContext, pPkcs7Blob)
    end
    def install_pkcs7_blob(this : IEnroll4*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7_blob.call(this, pBlobPKCS7)
    end
    def reset(this : IEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_supported_key_spec(this : IEnroll4*, pdwKeySpec : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_key_spec.call(this, pdwKeySpec)
    end
    def get_key_len(this : IEnroll4*, fMin : Win32cr::Foundation::BOOL, fExchange : Win32cr::Foundation::BOOL, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len.call(this, fMin, fExchange, pdwKeySize)
    end
    def enum_algs(this : IEnroll4*, dwIndex : Int32, algClass : Int32, pdwAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_algs.call(this, dwIndex, algClass, pdwAlgID)
    end
    def get_alg_name_w_str(this : IEnroll4*, algID : Int32, ppwsz : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alg_name_w_str.call(this, algID, ppwsz)
    end
    def put_ReuseHardwareKeyIfUnableToGenNew(this : IEnroll4*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def get_ReuseHardwareKeyIfUnableToGenNew(this : IEnroll4*, fReuseHardwareKeyIfUnableToGenNew : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReuseHardwareKeyIfUnableToGenNew.call(this, fReuseHardwareKeyIfUnableToGenNew)
    end
    def put_HashAlgID(this : IEnroll4*, hashAlgID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgID.call(this, hashAlgID)
    end
    def get_HashAlgID(this : IEnroll4*, hashAlgID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgID.call(this, hashAlgID)
    end
    def set_h_store_my(this : IEnroll4*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_my.call(this, hStore)
    end
    def set_h_store_ca(this : IEnroll4*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_ca.call(this, hStore)
    end
    def set_h_store_root(this : IEnroll4*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_root.call(this, hStore)
    end
    def set_h_store_request(this : IEnroll4*, hStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_h_store_request.call(this, hStore)
    end
    def put_LimitExchangeKeyToEncipherment(this : IEnroll4*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def get_LimitExchangeKeyToEncipherment(this : IEnroll4*, fLimitExchangeKeyToEncipherment : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LimitExchangeKeyToEncipherment.call(this, fLimitExchangeKeyToEncipherment)
    end
    def put_EnableSMIMECapabilities(this : IEnroll4*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def get_EnableSMIMECapabilities(this : IEnroll4*, fEnableSMIMECapabilities : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableSMIMECapabilities.call(this, fEnableSMIMECapabilities)
    end
    def put_ThumbPrintWStr(this : IEnroll4*, thumbPrintBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ThumbPrintWStr.call(this, thumbPrintBlob)
    end
    def get_ThumbPrintWStr(this : IEnroll4*, thumbPrintBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ThumbPrintWStr.call(this, thumbPrintBlob)
    end
    def set_private_key_archive_certificate(this : IEnroll4*, pPrivateKeyArchiveCert : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_key_archive_certificate.call(this, pPrivateKeyArchiveCert)
    end
    def get_private_key_archive_certificate(this : IEnroll4*) : Win32cr::Security::Cryptography::CERT_CONTEXT*
      @lpVtbl.try &.value.get_private_key_archive_certificate.call(this)
    end
    def binaryBlobToString(this : IEnroll4*, flags : Int32, pblobBinary : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, ppwszString : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.binaryBlobToString.call(this, flags, pblobBinary, ppwszString)
    end
    def stringToBinaryBlob(this : IEnroll4*, flags : Int32, pwszString : Win32cr::Foundation::PWSTR, pblobBinary : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pdwSkip : Int32*, pdwFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stringToBinaryBlob.call(this, flags, pwszString, pblobBinary, pdwSkip, pdwFlags)
    end
    def addExtensionToRequestWStr(this : IEnroll4*, flags : Int32, pwszName : Win32cr::Foundation::PWSTR, pblobValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addExtensionToRequestWStr.call(this, flags, pwszName, pblobValue)
    end
    def addAttributeToRequestWStr(this : IEnroll4*, flags : Int32, pwszName : Win32cr::Foundation::PWSTR, pblobValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addAttributeToRequestWStr.call(this, flags, pwszName, pblobValue)
    end
    def addNameValuePairToRequestWStr(this : IEnroll4*, flags : Int32, pwszName : Win32cr::Foundation::PWSTR, pwszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addNameValuePairToRequestWStr.call(this, flags, pwszName, pwszValue)
    end
    def resetExtensions(this : IEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resetExtensions.call(this)
    end
    def resetAttributes(this : IEnroll4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resetAttributes.call(this)
    end
    def createRequestWStr(this : IEnroll4*, flags : Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, pwszDNName : Win32cr::Foundation::PWSTR, pwszUsage : Win32cr::Foundation::PWSTR, pblobRequest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createRequestWStr.call(this, flags, pwszDNName, pwszUsage, pblobRequest)
    end
    def createFileRequestWStr(this : IEnroll4*, flags : Win32cr::Security::Cryptography::Certificates::CERT_CREATE_REQUEST_FLAGS, pwszDNName : Win32cr::Foundation::PWSTR, pwszUsage : Win32cr::Foundation::PWSTR, pwszRequestFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFileRequestWStr.call(this, flags, pwszDNName, pwszUsage, pwszRequestFileName)
    end
    def acceptResponseBlob(this : IEnroll4*, pblobResponse : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptResponseBlob.call(this, pblobResponse)
    end
    def acceptFileResponseWStr(this : IEnroll4*, pwszResponseFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acceptFileResponseWStr.call(this, pwszResponseFileName)
    end
    def getCertContextFromResponseBlob(this : IEnroll4*, pblobResponse : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertContextFromResponseBlob.call(this, pblobResponse, ppCertContext)
    end
    def getCertContextFromFileResponseWStr(this : IEnroll4*, pwszResponseFileName : Win32cr::Foundation::PWSTR, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCertContextFromFileResponseWStr.call(this, pwszResponseFileName, ppCertContext)
    end
    def createPFXWStr(this : IEnroll4*, pwszPassword : Win32cr::Foundation::PWSTR, pblobPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPFXWStr.call(this, pwszPassword, pblobPFX)
    end
    def createFilePFXWStr(this : IEnroll4*, pwszPassword : Win32cr::Foundation::PWSTR, pwszPFXFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createFilePFXWStr.call(this, pwszPassword, pwszPFXFileName)
    end
    def setPendingRequestInfoWStr(this : IEnroll4*, lRequestID : Int32, pwszCADNS : Win32cr::Foundation::PWSTR, pwszCAName : Win32cr::Foundation::PWSTR, pwszFriendlyName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setPendingRequestInfoWStr.call(this, lRequestID, pwszCADNS, pwszCAName, pwszFriendlyName)
    end
    def enumPendingRequestWStr(this : IEnroll4*, lIndex : Int32, lDesiredProperty : Win32cr::Security::Cryptography::Certificates::PENDING_REQUEST_DESIRED_PROPERTY, ppProperty : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumPendingRequestWStr.call(this, lIndex, lDesiredProperty, ppProperty)
    end
    def removePendingRequestWStr(this : IEnroll4*, thumbPrintBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removePendingRequestWStr.call(this, thumbPrintBlob)
    end
    def get_key_len_ex(this : IEnroll4*, lSizeSpec : Win32cr::Security::Cryptography::Certificates::XEKL_KEYSIZE, lKeySpec : Win32cr::Security::Cryptography::Certificates::XEKL_KEYSPEC, pdwKeySize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_len_ex.call(this, lSizeSpec, lKeySpec, pdwKeySize)
    end
    def install_pkcs7_blob_ex(this : IEnroll4*, pBlobPKCS7 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, plCertInstalled : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install_pkcs7_blob_ex.call(this, pBlobPKCS7, plCertInstalled)
    end
    def add_cert_type_to_request_w_str_ex(this : IEnroll4*, lType : Win32cr::Security::Cryptography::Certificates::ADDED_CERT_TYPE, pwszOIDOrName : Win32cr::Foundation::PWSTR, lMajorVersion : Int32, fMinorVersion : Win32cr::Foundation::BOOL, lMinorVersion : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_cert_type_to_request_w_str_ex.call(this, lType, pwszOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion)
    end
    def getProviderTypeWStr(this : IEnroll4*, pwszProvName : Win32cr::Foundation::PWSTR, plProvType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProviderTypeWStr.call(this, pwszProvName, plProvType)
    end
    def addBlobPropertyToCertificateWStr(this : IEnroll4*, lPropertyId : Int32, lReserved : Int32, pBlobProperty : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addBlobPropertyToCertificateWStr.call(this, lPropertyId, lReserved, pBlobProperty)
    end
    def set_signer_certificate(this : IEnroll4*, pSignerCert : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_signer_certificate.call(this, pSignerCert)
    end
    def put_ClientId(this : IEnroll4*, lClientId : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientId.call(this, lClientId)
    end
    def get_ClientId(this : IEnroll4*, plClientId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientId.call(this, plClientId)
    end
    def put_IncludeSubjectKeyID(this : IEnroll4*, fInclude : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IncludeSubjectKeyID.call(this, fInclude)
    end
    def get_IncludeSubjectKeyID(this : IEnroll4*, pfInclude : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IncludeSubjectKeyID.call(this, pfInclude)
    end

  end

  @[Extern]
  record ICertRequestDVtbl,
    query_interface : Proc(ICertRequestD*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertRequestD*, UInt32),
    release : Proc(ICertRequestD*, UInt32),
    request : Proc(ICertRequestD*, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    get_ca_cert : Proc(ICertRequestD*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    ping : Proc(ICertRequestD*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertRequestD, lpVtbl : ICertRequestDVtbl* do
    GUID = LibC::GUID.new(0xd99e6e70_u32, 0xfc88_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x98_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0x12_u8, 0xf3_u8])
    def query_interface(this : ICertRequestD*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertRequestD*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertRequestD*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def request(this : ICertRequestD*, dwFlags : UInt32, pwszAuthority : Win32cr::Foundation::PWSTR, pdwRequestId : UInt32*, pdwDisposition : UInt32*, pwszAttributes : Win32cr::Foundation::PWSTR, pctbRequest : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbCertChain : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbEncodedCert : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbDispositionMessage : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, dwFlags, pwszAuthority, pdwRequestId, pdwDisposition, pwszAttributes, pctbRequest, pctbCertChain, pctbEncodedCert, pctbDispositionMessage)
    end
    def get_ca_cert(this : ICertRequestD*, fchain : UInt32, pwszAuthority : Win32cr::Foundation::PWSTR, pctbOut : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_cert.call(this, fchain, pwszAuthority, pctbOut)
    end
    def ping(this : ICertRequestD*, pwszAuthority : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ping.call(this, pwszAuthority)
    end

  end

  @[Extern]
  record ICertRequestD2Vtbl,
    query_interface : Proc(ICertRequestD2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertRequestD2*, UInt32),
    release : Proc(ICertRequestD2*, UInt32),
    request : Proc(ICertRequestD2*, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    get_ca_cert : Proc(ICertRequestD2*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    ping : Proc(ICertRequestD2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    request2 : Proc(ICertRequestD2*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, UInt32*, UInt32*, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    get_ca_property : Proc(ICertRequestD2*, Win32cr::Foundation::PWSTR, Int32, Int32, Int32, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    get_ca_property_info : Proc(ICertRequestD2*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, Win32cr::Foundation::HRESULT),
    ping2 : Proc(ICertRequestD2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertRequestD2, lpVtbl : ICertRequestD2Vtbl* do
    GUID = LibC::GUID.new(0x5422fd3a_u32, 0xd4b8_u16, 0x4cef_u16, StaticArray[0xa1_u8, 0x2e_u8, 0xe8_u8, 0x7d_u8, 0x4c_u8, 0xa2_u8, 0x2e_u8, 0x90_u8])
    def query_interface(this : ICertRequestD2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertRequestD2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertRequestD2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def request(this : ICertRequestD2*, dwFlags : UInt32, pwszAuthority : Win32cr::Foundation::PWSTR, pdwRequestId : UInt32*, pdwDisposition : UInt32*, pwszAttributes : Win32cr::Foundation::PWSTR, pctbRequest : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbCertChain : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbEncodedCert : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbDispositionMessage : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, dwFlags, pwszAuthority, pdwRequestId, pdwDisposition, pwszAttributes, pctbRequest, pctbCertChain, pctbEncodedCert, pctbDispositionMessage)
    end
    def get_ca_cert(this : ICertRequestD2*, fchain : UInt32, pwszAuthority : Win32cr::Foundation::PWSTR, pctbOut : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_cert.call(this, fchain, pwszAuthority, pctbOut)
    end
    def ping(this : ICertRequestD2*, pwszAuthority : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ping.call(this, pwszAuthority)
    end
    def request2(this : ICertRequestD2*, pwszAuthority : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pwszSerialNumber : Win32cr::Foundation::PWSTR, pdwRequestId : UInt32*, pdwDisposition : UInt32*, pwszAttributes : Win32cr::Foundation::PWSTR, pctbRequest : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbFullResponse : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbEncodedCert : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*, pctbDispositionMessage : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request2.call(this, pwszAuthority, dwFlags, pwszSerialNumber, pdwRequestId, pdwDisposition, pwszAttributes, pctbRequest, pctbFullResponse, pctbEncodedCert, pctbDispositionMessage)
    end
    def get_ca_property(this : ICertRequestD2*, pwszAuthority : Win32cr::Foundation::PWSTR, prop_id : Int32, prop_index : Int32, prop_type : Int32, pctbPropertyValue : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property.call(this, pwszAuthority, prop_id, prop_index, prop_type, pctbPropertyValue)
    end
    def get_ca_property_info(this : ICertRequestD2*, pwszAuthority : Win32cr::Foundation::PWSTR, pcProperty : Int32*, pctbPropInfo : Win32cr::Security::Cryptography::Certificates::CERTTRANSBLOB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_property_info.call(this, pwszAuthority, pcProperty, pctbPropInfo)
    end
    def ping2(this : ICertRequestD2*, pwszAuthority : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ping2.call(this, pwszAuthority)
    end

  end

  @[Link("certadm")]
  @[Link("certpoleng")]
  lib C
    fun CertSrvIsServerOnlineW(pwszServerName : Win32cr::Foundation::PWSTR, pfServerOnline : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupGetDynamicFileListW(hbc : Void*, ppwszzFileList : Win32cr::Foundation::PWSTR*, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupPrepareW(pwszServerName : Win32cr::Foundation::PWSTR, grbitJet : UInt32, dwBackupFlags : Win32cr::Security::Cryptography::Certificates::CSBACKUP_TYPE, phbc : Void**) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupGetDatabaseNamesW(hbc : Void*, ppwszzAttachmentInformation : Win32cr::Foundation::PWSTR*, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupOpenFileW(hbc : Void*, pwszAttachmentName : Win32cr::Foundation::PWSTR, cbReadHintSize : UInt32, pliFileSize : Win32cr::Foundation::LARGE_INTEGER*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupRead(hbc : Void*, pvBuffer : Void*, cbBuffer : UInt32, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupClose(hbc : Void*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupGetBackupLogsW(hbc : Void*, ppwszzBackupLogFiles : Win32cr::Foundation::PWSTR*, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupTruncateLogs(hbc : Void*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupEnd(hbc : Void*) : Win32cr::Foundation::HRESULT

    fun CertSrvBackupFree(pv : Void*) : Void

    fun CertSrvRestoreGetDatabaseLocationsW(hbc : Void*, ppwszzDatabaseLocationList : Win32cr::Foundation::PWSTR*, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun CertSrvRestorePrepareW(pwszServerName : Win32cr::Foundation::PWSTR, dwRestoreFlags : UInt32, phbc : Void**) : Win32cr::Foundation::HRESULT

    fun CertSrvRestoreRegisterW(hbc : Void*, pwszCheckPointFilePath : Win32cr::Foundation::PWSTR, pwszLogPath : Win32cr::Foundation::PWSTR, rgrstmap : Win32cr::Security::Cryptography::Certificates::CSEDB_RSTMAPW*, crstmap : Int32, pwszBackupLogPath : Win32cr::Foundation::PWSTR, genLow : UInt32, genHigh : UInt32) : Win32cr::Foundation::HRESULT

    fun CertSrvRestoreRegisterThroughFile(hbc : Void*, pwszCheckPointFilePath : Win32cr::Foundation::PWSTR, pwszLogPath : Win32cr::Foundation::PWSTR, rgrstmap : Win32cr::Security::Cryptography::Certificates::CSEDB_RSTMAPW*, crstmap : Int32, pwszBackupLogPath : Win32cr::Foundation::PWSTR, genLow : UInt32, genHigh : UInt32) : Win32cr::Foundation::HRESULT

    fun CertSrvRestoreRegisterComplete(hbc : Void*, hrRestoreState : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT

    fun CertSrvRestoreEnd(hbc : Void*) : Win32cr::Foundation::HRESULT

    fun CertSrvServerControlW(pwszServerName : Win32cr::Foundation::PWSTR, dwControlFlags : UInt32, pcbOut : UInt32*, ppbOut : UInt8**) : Win32cr::Foundation::HRESULT

    fun PstGetTrustAnchors(pTargetName : Win32cr::Foundation::UNICODE_STRING*, cCriteria : UInt32, rgpCriteria : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA*, ppTrustedIssuers : Win32cr::Security::Authentication::Identity::SecPkgContext_IssuerListInfoEx**) : Win32cr::Foundation::NTSTATUS

    fun PstGetTrustAnchorsEx(pTargetName : Win32cr::Foundation::UNICODE_STRING*, cCriteria : UInt32, rgpCriteria : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA*, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, ppTrustedIssuers : Win32cr::Security::Authentication::Identity::SecPkgContext_IssuerListInfoEx**) : Win32cr::Foundation::NTSTATUS

    fun PstGetCertificateChain(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, pTrustedIssuers : Win32cr::Security::Authentication::Identity::SecPkgContext_IssuerListInfoEx*, ppCertChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT**) : Win32cr::Foundation::NTSTATUS

    fun PstGetCertificates(pTargetName : Win32cr::Foundation::UNICODE_STRING*, cCriteria : UInt32, rgpCriteria : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA*, bIsClient : Win32cr::Foundation::BOOL, pdwCertChainContextCount : UInt32*, ppCertChainContexts : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT***) : Win32cr::Foundation::NTSTATUS

    fun PstAcquirePrivateKey(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::NTSTATUS

    fun PstValidate(pTargetName : Win32cr::Foundation::UNICODE_STRING*, bIsClient : Win32cr::Foundation::BOOL, pRequestedIssuancePolicy : Win32cr::Security::Cryptography::CERT_USAGE_MATCH*, phAdditionalCertStore : Win32cr::Security::Cryptography::HCERTSTORE*, pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, pProvGUID : LibC::GUID*) : Win32cr::Foundation::NTSTATUS

    fun PstMapCertificate(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, pTokenInformationType : Win32cr::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE*, ppTokenInformation : Void**) : Win32cr::Foundation::NTSTATUS

    fun PstGetUserNameForCertificate(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, user_name : Win32cr::Foundation::UNICODE_STRING*) : Win32cr::Foundation::NTSTATUS

  end
end