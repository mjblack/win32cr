require "./../foundation.cr"
require "./../system/registry.cr"
require "./../security.cr"
require "./../system/com.cr"

module Win32cr::Security::Cryptography
  alias HCRYPTASYNC = LibC::IntPtrT
  alias HCERTCHAINENGINE = LibC::IntPtrT
  alias BCRYPT_ALG_HANDLE = LibC::IntPtrT
  alias BCRYPT_KEY_HANDLE = LibC::IntPtrT
  alias BCRYPT_HASH_HANDLE = LibC::IntPtrT
  alias BCRYPT_SECRET_HANDLE = LibC::IntPtrT
  alias BCRYPT_HANDLE = LibC::IntPtrT
  alias NCRYPT_HANDLE = LibC::UIntPtrT
  alias NCRYPT_PROV_HANDLE = LibC::UIntPtrT
  alias NCRYPT_KEY_HANDLE = LibC::UIntPtrT
  alias NCRYPT_HASH_HANDLE = LibC::UIntPtrT
  alias NCRYPT_SECRET_HANDLE = LibC::UIntPtrT
  alias HCRYPTPROV_LEGACY = LibC::UIntPtrT
  alias HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = LibC::UIntPtrT
  alias HCERTSTORE = Void*
  alias HCERTSTOREPROV = Void*
  alias PFN_NCRYPT_ALLOC = Proc(LibC::UIntPtrT, Void*)

  alias PFN_NCRYPT_FREE = Proc(Void*, Void)

  alias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = Proc(Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, UInt8*, UInt32*, Void*, Win32cr::Foundation::BOOL)

  alias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = Proc(Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, UInt8*, UInt32*, Void*, Win32cr::Foundation::BOOL)

  alias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = Proc(Win32cr::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, LibC::UIntPtrT*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_ALLOC = Proc(LibC::UIntPtrT, Void*)

  alias PFN_CRYPT_FREE = Proc(Void*, Void)

  alias PFN_CRYPT_ENUM_OID_FUNC = Proc(UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, UInt32*, Win32cr::Foundation::PWSTR*, UInt8**, UInt32*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_ENUM_OID_INFO = Proc(Win32cr::Security::Cryptography::CRYPT_OID_INFO*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_STREAM_OUTPUT = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_ALLOC = Proc(LibC::UIntPtrT, Void*)

  alias PFN_CMSG_FREE = Proc(Void*, Void)

  alias PFN_CMSG_GEN_ENCRYPT_KEY = Proc(LibC::UIntPtrT*, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Void*, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, Win32cr::Security::Cryptography::PFN_CMSG_ALLOC, LibC::UIntPtrT*, UInt8**, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_EXPORT_ENCRYPT_KEY = Proc(LibC::UIntPtrT, LibC::UIntPtrT, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, UInt8*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_IMPORT_ENCRYPT_KEY = Proc(LibC::UIntPtrT, UInt32, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, UInt8*, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = Proc(Win32cr::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_EXPORT_KEY_TRANS = Proc(Win32cr::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, Win32cr::Security::Cryptography::CMSG_KEY_TRANS_ENCRYPT_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_EXPORT_KEY_AGREE = Proc(Win32cr::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, Win32cr::Security::Cryptography::CMSG_KEY_AGREE_ENCRYPT_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_EXPORT_MAIL_LIST = Proc(Win32cr::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*, Win32cr::Security::Cryptography::CMSG_MAIL_LIST_ENCRYPT_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_IMPORT_KEY_TRANS = Proc(Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Win32cr::Security::Cryptography::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, UInt32, Void*, LibC::UIntPtrT*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_IMPORT_KEY_AGREE = Proc(Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Win32cr::Security::Cryptography::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, UInt32, Void*, LibC::UIntPtrT*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_IMPORT_MAIL_LIST = Proc(Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Win32cr::Security::Cryptography::CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*, UInt32, Void*, LibC::UIntPtrT*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_CNG_IMPORT_KEY_TRANS = Proc(Win32cr::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, Win32cr::Security::Cryptography::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_CNG_IMPORT_KEY_AGREE = Proc(Win32cr::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, Win32cr::Security::Cryptography::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = Proc(Win32cr::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = Proc(Win32cr::Foundation::PSTR, Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, Win32cr::Security::Cryptography::CERT_OPEN_STORE_FLAGS, Void*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Security::Cryptography::CERT_STORE_PROV_INFO*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_CLOSE = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, UInt32, Void)

  alias PFN_CERT_STORE_PROV_READ_CERT = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_WRITE_CERT = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_DELETE_CERT = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_READ_CRL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, Win32cr::Security::Cryptography::CRL_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_WRITE_CRL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_DELETE_CRL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_READ_CTL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, Win32cr::Security::Cryptography::CTL_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_WRITE_CTL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_DELETE_CTL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_CONTROL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FIND_CERT = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, Void**, Win32cr::Security::Cryptography::CERT_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FREE_FIND_CERT = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, Void*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_CONTEXT*, UInt32, UInt32, Void*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FIND_CRL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, Void**, Win32cr::Security::Cryptography::CRL_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FREE_FIND_CRL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, Void*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CRL_CONTEXT*, UInt32, UInt32, Void*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FIND_CTL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, Void**, Win32cr::Security::Cryptography::CTL_CONTEXT**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_FREE_FIND_CTL = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, Void*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = Proc(Win32cr::Security::Cryptography::HCERTSTOREPROV, Win32cr::Security::Cryptography::CTL_CONTEXT*, UInt32, UInt32, Void*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_CREATE_CONTEXT_SORT_FUNC = Proc(UInt32, UInt32, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = Proc(Win32cr::Foundation::PWSTR, UInt32, Void*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_ENUM_SYSTEM_STORE = Proc(Void*, Win32cr::Security::Cryptography::CERT_SYSTEM_STORE_FLAGS, Win32cr::Security::Cryptography::CERT_SYSTEM_STORE_INFO*, Void*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_ENUM_PHYSICAL_STORE = Proc(Void*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Security::Cryptography::CERT_PHYSICAL_STORE_INFO*, Void*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = Proc(UInt32, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Void**, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = Proc(Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, UInt32, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt8*, UInt32, UInt8*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = Proc(UInt32, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt8*, UInt32, UInt8*, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = Proc(Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, UInt32, Win32cr::Foundation::PSTR, UInt32, Void*, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = Proc(Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, UInt32, Win32cr::Foundation::PSTR, UInt32, Void*, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = Proc(UInt32, Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, UInt32, Void*, Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, Win32cr::Foundation::BOOL)

  alias PFN_IMPORT_PRIV_KEY_FUNC = Proc(LibC::UIntPtrT, Win32cr::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_EXPORT_PRIV_KEY_FUNC = Proc(LibC::UIntPtrT, UInt32, Win32cr::Foundation::PSTR, UInt32, Void*, Win32cr::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_GET_SIGNER_CERTIFICATE = Proc(Void*, UInt32, Win32cr::Security::Cryptography::CERT_INFO*, Win32cr::Security::Cryptography::HCERTSTORE, Win32cr::Security::Cryptography::CERT_CONTEXT*)

  alias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = Proc(Win32cr::Foundation::PSTR, Void*, Void)

  alias PFN_FREE_ENCODED_OBJECT_FUNC = Proc(Win32cr::Foundation::PSTR, Win32cr::Security::Cryptography::CRYPT_BLOB_ARRAY*, Void*, Void)

  alias PFN_CRYPT_CANCEL_RETRIEVAL = Proc(UInt32, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = Proc(Void*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, Void*, Void)

  alias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = Proc(Win32cr::Security::Cryptography::HCRYPTASYNC, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_ENUM_KEYID_PROP = Proc(Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, UInt32, Void*, Void*, UInt32, UInt32*, Void**, UInt32*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = Proc(Win32cr::Security::Cryptography::CERT_CONTEXT*, Void*, Win32cr::Foundation::BOOL)

  alias PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = Proc(Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*, Win32cr::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT*, Win32cr::Security::Cryptography::CRL_CONTEXT*, Win32cr::Security::Cryptography::CRL_CONTEXT*, Void*, UInt32, Void)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = Proc(Void*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB**, UInt32, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = Proc(Void*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, UInt32, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, UInt8**, UInt32*, Win32cr::Foundation::PWSTR*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB**, Win32cr::Foundation::BOOL)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = Proc(Win32cr::Security::Cryptography::CRYPT_OBJECT_LOCATOR_RELEASE_REASON, Void*, Void)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = Proc(Void*, Win32cr::Foundation::PWSTR, Void)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = Proc(Void*, UInt8*, Void)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = Proc(Void*, Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, Void)

  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = Proc(Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH, Void*, UInt32*, Win32cr::Security::Cryptography::CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE**, Void**, Win32cr::Foundation::BOOL)

  alias PFN_CERT_IS_WEAK_HASH = Proc(UInt32, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)

  alias PFNCryptStreamOutputCallback = Proc(Void*, UInt8*, LibC::UIntPtrT, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)

  alias PFNCryptStreamOutputCallbackEx = Proc(Void*, UInt8*, LibC::UIntPtrT, Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)

  alias PFN_CRYPT_XML_WRITE_CALLBACK = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)

  alias PFN_CRYPT_XML_DATA_PROVIDER_READ = Proc(Void*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  alias PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias PFN_CRYPT_XML_CREATE_TRANSFORM = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, Win32cr::Security::Cryptography::CRYPT_XML_DATA_PROVIDER*, Win32cr::Security::Cryptography::CRYPT_XML_DATA_PROVIDER*, Win32cr::Foundation::HRESULT)

  alias PFN_CRYPT_XML_ENUM_ALG_INFO = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, Void*, Win32cr::Foundation::BOOL)

  alias CryptXmlDllGetInterface = Proc(UInt32, Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, Win32cr::Security::Cryptography::CRYPT_XML_CRYPTOGRAPHIC_INTERFACE*, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllEncodeAlgorithm = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, Win32cr::Security::Cryptography::CRYPT_XML_CHARSET, Void*, Win32cr::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllCreateDigest = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, UInt32*, Void**, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllDigestData = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllFinalizeDigest = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllCloseDigest = Proc(Void*, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllSignData = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, UInt32, UInt8*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllVerifySignature = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, UInt8*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllGetAlgorithmInfo = Proc(Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO**, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllEncodeKeyValue = Proc(Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, Win32cr::Security::Cryptography::CRYPT_XML_CHARSET, Void*, Win32cr::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK, Win32cr::Foundation::HRESULT)

  alias CryptXmlDllCreateKey = Proc(Win32cr::Security::Cryptography::CRYPT_XML_BLOB*, Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, Win32cr::Foundation::HRESULT)

  CERT_COMPARE_SHIFT = 16_i32
  BCRYPT_OBJECT_ALIGNMENT = 16_u32
  BCRYPT_KDF_HASH = "HASH"
  BCRYPT_KDF_HMAC = "HMAC"
  BCRYPT_KDF_TLS_PRF = "TLS_PRF"
  BCRYPT_KDF_SP80056A_CONCAT = "SP800_56A_CONCAT"
  BCRYPT_KDF_RAW_SECRET = "TRUNCATE"
  BCRYPT_KDF_HKDF = "HKDF"
  KDF_HASH_ALGORITHM = 0_u32
  KDF_SECRET_PREPEND = 1_u32
  KDF_SECRET_APPEND = 2_u32
  KDF_HMAC_KEY = 3_u32
  KDF_TLS_PRF_LABEL = 4_u32
  KDF_TLS_PRF_SEED = 5_u32
  KDF_SECRET_HANDLE = 6_u32
  KDF_TLS_PRF_PROTOCOL = 7_u32
  KDF_ALGORITHMID = 8_u32
  KDF_PARTYUINFO = 9_u32
  KDF_PARTYVINFO = 10_u32
  KDF_SUPPPUBINFO = 11_u32
  KDF_SUPPPRIVINFO = 12_u32
  KDF_LABEL = 13_u32
  KDF_CONTEXT = 14_u32
  KDF_SALT = 15_u32
  KDF_ITERATION_COUNT = 16_u32
  KDF_GENERIC_PARAMETER = 17_u32
  KDF_KEYBITLENGTH = 18_u32
  KDF_HKDF_SALT = 19_u32
  KDF_HKDF_INFO = 20_u32
  KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1_u32
  BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1_u32
  BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1_u32
  BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2_u32
  BCRYPT_OPAQUE_KEY_BLOB = "OpaqueKeyBlob"
  BCRYPT_KEY_DATA_BLOB = "KeyDataBlob"
  BCRYPT_AES_WRAP_KEY_BLOB = "Rfc3565KeyWrapBlob"
  BCRYPT_OBJECT_LENGTH = "ObjectLength"
  BCRYPT_ALGORITHM_NAME = "AlgorithmName"
  BCRYPT_PROVIDER_HANDLE = "ProviderHandle"
  BCRYPT_CHAINING_MODE = "ChainingMode"
  BCRYPT_BLOCK_LENGTH = "BlockLength"
  BCRYPT_KEY_LENGTH = "KeyLength"
  BCRYPT_KEY_OBJECT_LENGTH = "KeyObjectLength"
  BCRYPT_KEY_STRENGTH = "KeyStrength"
  BCRYPT_KEY_LENGTHS = "KeyLengths"
  BCRYPT_BLOCK_SIZE_LIST = "BlockSizeList"
  BCRYPT_EFFECTIVE_KEY_LENGTH = "EffectiveKeyLength"
  BCRYPT_HASH_LENGTH = "HashDigestLength"
  BCRYPT_HASH_OID_LIST = "HashOIDList"
  BCRYPT_PADDING_SCHEMES = "PaddingSchemes"
  BCRYPT_SIGNATURE_LENGTH = "SignatureLength"
  BCRYPT_HASH_BLOCK_LENGTH = "HashBlockLength"
  BCRYPT_AUTH_TAG_LENGTH = "AuthTagLength"
  BCRYPT_PRIMITIVE_TYPE = "PrimitiveType"
  BCRYPT_IS_KEYED_HASH = "IsKeyedHash"
  BCRYPT_IS_REUSABLE_HASH = "IsReusableHash"
  BCRYPT_MESSAGE_BLOCK_LENGTH = "MessageBlockLength"
  BCRYPT_PUBLIC_KEY_LENGTH = "PublicKeyLength"
  BCRYPT_PCP_PLATFORM_TYPE_PROPERTY = "PCP_PLATFORM_TYPE"
  BCRYPT_PCP_PROVIDER_VERSION_PROPERTY = "PCP_PROVIDER_VERSION"
  BCRYPT_MULTI_OBJECT_LENGTH = "MultiObjectLength"
  BCRYPT_IS_IFX_TPM_WEAK_KEY = "IsIfxTpmWeakKey"
  BCRYPT_HKDF_HASH_ALGORITHM = "HkdfHashAlgorithm"
  BCRYPT_HKDF_SALT_AND_FINALIZE = "HkdfSaltAndFinalize"
  BCRYPT_HKDF_PRK_AND_FINALIZE = "HkdfPrkAndFinalize"
  BCRYPT_INITIALIZATION_VECTOR = "IV"
  BCRYPT_CHAIN_MODE_NA = "ChainingModeN/A"
  BCRYPT_CHAIN_MODE_CBC = "ChainingModeCBC"
  BCRYPT_CHAIN_MODE_ECB = "ChainingModeECB"
  BCRYPT_CHAIN_MODE_CFB = "ChainingModeCFB"
  BCRYPT_CHAIN_MODE_CCM = "ChainingModeCCM"
  BCRYPT_CHAIN_MODE_GCM = "ChainingModeGCM"
  BCRYPT_SUPPORTED_PAD_ROUTER = 1_u32
  BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2_u32
  BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4_u32
  BCRYPT_SUPPORTED_PAD_OAEP = 8_u32
  BCRYPT_SUPPORTED_PAD_PSS = 16_u32
  BCRYPT_BLOCK_PADDING = 1_u32
  BCRYPT_GENERATE_IV = 32_u32
  BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16_u32
  BCRYPTBUFFER_VERSION = 0_u32
  BCRYPT_PUBLIC_KEY_BLOB = "PUBLICBLOB"
  BCRYPT_PRIVATE_KEY_BLOB = "PRIVATEBLOB"
  BCRYPT_RSAPUBLIC_BLOB = "RSAPUBLICBLOB"
  BCRYPT_RSAPRIVATE_BLOB = "RSAPRIVATEBLOB"
  LEGACY_RSAPUBLIC_BLOB = "CAPIPUBLICBLOB"
  LEGACY_RSAPRIVATE_BLOB = "CAPIPRIVATEBLOB"
  BCRYPT_RSAFULLPRIVATE_BLOB = "RSAFULLPRIVATEBLOB"
  BCRYPT_GLOBAL_PARAMETERS = "SecretAgreementParam"
  BCRYPT_PRIVATE_KEY = "PrivKeyVal"
  BCRYPT_ECCPUBLIC_BLOB = "ECCPUBLICBLOB"
  BCRYPT_ECCPRIVATE_BLOB = "ECCPRIVATEBLOB"
  BCRYPT_ECCFULLPUBLIC_BLOB = "ECCFULLPUBLICBLOB"
  BCRYPT_ECCFULLPRIVATE_BLOB = "ECCFULLPRIVATEBLOB"
  SSL_ECCPUBLIC_BLOB = "SSLECCPUBLICBLOB"
  BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005_u32
  BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221_u32
  BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437_u32
  BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653_u32
  BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869_u32
  BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085_u32
  BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701_u32
  BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997_u32
  BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293_u32
  BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509_u32
  BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725_u32
  BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941_u32
  BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157_u32
  BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373_u32
  BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949_u32
  BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245_u32
  BCRYPT_ECC_FULLKEY_BLOB_V1 = 1_u32
  BCRYPT_DH_PUBLIC_BLOB = "DHPUBLICBLOB"
  BCRYPT_DH_PRIVATE_BLOB = "DHPRIVATEBLOB"
  LEGACY_DH_PUBLIC_BLOB = "CAPIDHPUBLICBLOB"
  LEGACY_DH_PRIVATE_BLOB = "CAPIDHPRIVATEBLOB"
  BCRYPT_DH_PARAMETERS = "DHParameters"
  BCRYPT_DH_PARAMETERS_MAGIC = 1297107012_u32
  BCRYPT_DSA_PUBLIC_BLOB = "DSAPUBLICBLOB"
  BCRYPT_DSA_PRIVATE_BLOB = "DSAPRIVATEBLOB"
  LEGACY_DSA_PUBLIC_BLOB = "CAPIDSAPUBLICBLOB"
  LEGACY_DSA_PRIVATE_BLOB = "CAPIDSAPRIVATEBLOB"
  LEGACY_DSA_V2_PUBLIC_BLOB = "V2CAPIDSAPUBLICBLOB"
  LEGACY_DSA_V2_PRIVATE_BLOB = "V2CAPIDSAPRIVATEBLOB"
  BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724_u32
  BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444_u32
  BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491_u32
  BCRYPT_KEY_DATA_BLOB_VERSION1 = 1_u32
  BCRYPT_DSA_PARAMETERS = "DSAParameters"
  BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828_u32
  BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620_u32
  BCRYPT_ECC_PARAMETERS = "ECCParameters"
  BCRYPT_ECC_CURVE_NAME = "ECCCurveName"
  BCRYPT_ECC_CURVE_NAME_LIST = "ECCCurveNameList"
  BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413_u32
  BCRYPT_ECC_CURVE_BRAINPOOLP160R1 = "brainpoolP160r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP160T1 = "brainpoolP160t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP192R1 = "brainpoolP192r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP192T1 = "brainpoolP192t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP224R1 = "brainpoolP224r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP224T1 = "brainpoolP224t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP256R1 = "brainpoolP256r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP256T1 = "brainpoolP256t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP320R1 = "brainpoolP320r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP320T1 = "brainpoolP320t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP384R1 = "brainpoolP384r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP384T1 = "brainpoolP384t1"
  BCRYPT_ECC_CURVE_BRAINPOOLP512R1 = "brainpoolP512r1"
  BCRYPT_ECC_CURVE_BRAINPOOLP512T1 = "brainpoolP512t1"
  BCRYPT_ECC_CURVE_25519 = "curve25519"
  BCRYPT_ECC_CURVE_EC192WAPI = "ec192wapi"
  BCRYPT_ECC_CURVE_NISTP192 = "nistP192"
  BCRYPT_ECC_CURVE_NISTP224 = "nistP224"
  BCRYPT_ECC_CURVE_NISTP256 = "nistP256"
  BCRYPT_ECC_CURVE_NISTP384 = "nistP384"
  BCRYPT_ECC_CURVE_NISTP521 = "nistP521"
  BCRYPT_ECC_CURVE_NUMSP256T1 = "numsP256t1"
  BCRYPT_ECC_CURVE_NUMSP384T1 = "numsP384t1"
  BCRYPT_ECC_CURVE_NUMSP512T1 = "numsP512t1"
  BCRYPT_ECC_CURVE_SECP160K1 = "secP160k1"
  BCRYPT_ECC_CURVE_SECP160R1 = "secP160r1"
  BCRYPT_ECC_CURVE_SECP160R2 = "secP160r2"
  BCRYPT_ECC_CURVE_SECP192K1 = "secP192k1"
  BCRYPT_ECC_CURVE_SECP192R1 = "secP192r1"
  BCRYPT_ECC_CURVE_SECP224K1 = "secP224k1"
  BCRYPT_ECC_CURVE_SECP224R1 = "secP224r1"
  BCRYPT_ECC_CURVE_SECP256K1 = "secP256k1"
  BCRYPT_ECC_CURVE_SECP256R1 = "secP256r1"
  BCRYPT_ECC_CURVE_SECP384R1 = "secP384r1"
  BCRYPT_ECC_CURVE_SECP521R1 = "secP521r1"
  BCRYPT_ECC_CURVE_WTLS7 = "wtls7"
  BCRYPT_ECC_CURVE_WTLS9 = "wtls9"
  BCRYPT_ECC_CURVE_WTLS12 = "wtls12"
  BCRYPT_ECC_CURVE_X962P192V1 = "x962P192v1"
  BCRYPT_ECC_CURVE_X962P192V2 = "x962P192v2"
  BCRYPT_ECC_CURVE_X962P192V3 = "x962P192v3"
  BCRYPT_ECC_CURVE_X962P239V1 = "x962P239v1"
  BCRYPT_ECC_CURVE_X962P239V2 = "x962P239v2"
  BCRYPT_ECC_CURVE_X962P239V3 = "x962P239v3"
  BCRYPT_ECC_CURVE_X962P256V1 = "x962P256v1"
  MS_PRIMITIVE_PROVIDER = "Microsoft Primitive Provider"
  MS_PLATFORM_CRYPTO_PROVIDER = "Microsoft Platform Crypto Provider"
  BCRYPT_RSA_ALGORITHM = "RSA"
  BCRYPT_RSA_SIGN_ALGORITHM = "RSA_SIGN"
  BCRYPT_DH_ALGORITHM = "DH"
  BCRYPT_DSA_ALGORITHM = "DSA"
  BCRYPT_RC2_ALGORITHM = "RC2"
  BCRYPT_RC4_ALGORITHM = "RC4"
  BCRYPT_AES_ALGORITHM = "AES"
  BCRYPT_DES_ALGORITHM = "DES"
  BCRYPT_DESX_ALGORITHM = "DESX"
  BCRYPT_3DES_ALGORITHM = "3DES"
  BCRYPT_3DES_112_ALGORITHM = "3DES_112"
  BCRYPT_MD2_ALGORITHM = "MD2"
  BCRYPT_MD4_ALGORITHM = "MD4"
  BCRYPT_MD5_ALGORITHM = "MD5"
  BCRYPT_SHA1_ALGORITHM = "SHA1"
  BCRYPT_SHA256_ALGORITHM = "SHA256"
  BCRYPT_SHA384_ALGORITHM = "SHA384"
  BCRYPT_SHA512_ALGORITHM = "SHA512"
  BCRYPT_AES_GMAC_ALGORITHM = "AES-GMAC"
  BCRYPT_AES_CMAC_ALGORITHM = "AES-CMAC"
  BCRYPT_ECDSA_P256_ALGORITHM = "ECDSA_P256"
  BCRYPT_ECDSA_P384_ALGORITHM = "ECDSA_P384"
  BCRYPT_ECDSA_P521_ALGORITHM = "ECDSA_P521"
  BCRYPT_ECDH_P256_ALGORITHM = "ECDH_P256"
  BCRYPT_ECDH_P384_ALGORITHM = "ECDH_P384"
  BCRYPT_ECDH_P521_ALGORITHM = "ECDH_P521"
  BCRYPT_RNG_ALGORITHM = "RNG"
  BCRYPT_RNG_FIPS186_DSA_ALGORITHM = "FIPS186DSARNG"
  BCRYPT_RNG_DUAL_EC_ALGORITHM = "DUALECRNG"
  BCRYPT_SP800108_CTR_HMAC_ALGORITHM = "SP800_108_CTR_HMAC"
  BCRYPT_SP80056A_CONCAT_ALGORITHM = "SP800_56A_CONCAT"
  BCRYPT_PBKDF2_ALGORITHM = "PBKDF2"
  BCRYPT_CAPI_KDF_ALGORITHM = "CAPI_KDF"
  BCRYPT_TLS1_1_KDF_ALGORITHM = "TLS1_1_KDF"
  BCRYPT_TLS1_2_KDF_ALGORITHM = "TLS1_2_KDF"
  BCRYPT_ECDSA_ALGORITHM = "ECDSA"
  BCRYPT_ECDH_ALGORITHM = "ECDH"
  BCRYPT_XTS_AES_ALGORITHM = "XTS-AES"
  BCRYPT_HKDF_ALGORITHM = "HKDF"
  BCRYPT_CHACHA20_POLY1305_ALGORITHM = "CHACHA20_POLY1305"
  BCRYPT_KEY_DERIVATION_INTERFACE = 7_u32
  BCRYPT_MD2_ALG_HANDLE = 1_u32
  BCRYPT_MD4_ALG_HANDLE = 17_u32
  BCRYPT_MD5_ALG_HANDLE = 33_u32
  BCRYPT_SHA1_ALG_HANDLE = 49_u32
  BCRYPT_SHA256_ALG_HANDLE = 65_u32
  BCRYPT_SHA384_ALG_HANDLE = 81_u32
  BCRYPT_SHA512_ALG_HANDLE = 97_u32
  BCRYPT_RC4_ALG_HANDLE = 113_u32
  BCRYPT_RNG_ALG_HANDLE = 129_u32
  BCRYPT_HMAC_MD5_ALG_HANDLE = 145_u32
  BCRYPT_HMAC_SHA1_ALG_HANDLE = 161_u32
  BCRYPT_HMAC_SHA256_ALG_HANDLE = 177_u32
  BCRYPT_HMAC_SHA384_ALG_HANDLE = 193_u32
  BCRYPT_HMAC_SHA512_ALG_HANDLE = 209_u32
  BCRYPT_RSA_ALG_HANDLE = 225_u32
  BCRYPT_ECDSA_ALG_HANDLE = 241_u32
  BCRYPT_AES_CMAC_ALG_HANDLE = 257_u32
  BCRYPT_AES_GMAC_ALG_HANDLE = 273_u32
  BCRYPT_HMAC_MD2_ALG_HANDLE = 289_u32
  BCRYPT_HMAC_MD4_ALG_HANDLE = 305_u32
  BCRYPT_3DES_CBC_ALG_HANDLE = 321_u32
  BCRYPT_3DES_ECB_ALG_HANDLE = 337_u32
  BCRYPT_3DES_CFB_ALG_HANDLE = 353_u32
  BCRYPT_3DES_112_CBC_ALG_HANDLE = 369_u32
  BCRYPT_3DES_112_ECB_ALG_HANDLE = 385_u32
  BCRYPT_3DES_112_CFB_ALG_HANDLE = 401_u32
  BCRYPT_AES_CBC_ALG_HANDLE = 417_u32
  BCRYPT_AES_ECB_ALG_HANDLE = 433_u32
  BCRYPT_AES_CFB_ALG_HANDLE = 449_u32
  BCRYPT_AES_CCM_ALG_HANDLE = 465_u32
  BCRYPT_AES_GCM_ALG_HANDLE = 481_u32
  BCRYPT_DES_CBC_ALG_HANDLE = 497_u32
  BCRYPT_DES_ECB_ALG_HANDLE = 513_u32
  BCRYPT_DES_CFB_ALG_HANDLE = 529_u32
  BCRYPT_DESX_CBC_ALG_HANDLE = 545_u32
  BCRYPT_DESX_ECB_ALG_HANDLE = 561_u32
  BCRYPT_DESX_CFB_ALG_HANDLE = 577_u32
  BCRYPT_RC2_CBC_ALG_HANDLE = 593_u32
  BCRYPT_RC2_ECB_ALG_HANDLE = 609_u32
  BCRYPT_RC2_CFB_ALG_HANDLE = 625_u32
  BCRYPT_DH_ALG_HANDLE = 641_u32
  BCRYPT_ECDH_ALG_HANDLE = 657_u32
  BCRYPT_ECDH_P256_ALG_HANDLE = 673_u32
  BCRYPT_ECDH_P384_ALG_HANDLE = 689_u32
  BCRYPT_ECDH_P521_ALG_HANDLE = 705_u32
  BCRYPT_DSA_ALG_HANDLE = 721_u32
  BCRYPT_ECDSA_P256_ALG_HANDLE = 737_u32
  BCRYPT_ECDSA_P384_ALG_HANDLE = 753_u32
  BCRYPT_ECDSA_P521_ALG_HANDLE = 769_u32
  BCRYPT_RSA_SIGN_ALG_HANDLE = 785_u32
  BCRYPT_CAPI_KDF_ALG_HANDLE = 801_u32
  BCRYPT_PBKDF2_ALG_HANDLE = 817_u32
  BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE = 833_u32
  BCRYPT_SP80056A_CONCAT_ALG_HANDLE = 849_u32
  BCRYPT_TLS1_1_KDF_ALG_HANDLE = 865_u32
  BCRYPT_TLS1_2_KDF_ALG_HANDLE = 881_u32
  BCRYPT_XTS_AES_ALG_HANDLE = 897_u32
  BCRYPT_HKDF_ALG_HANDLE = 913_u32
  BCRYPT_CHACHA20_POLY1305_ALG_HANDLE = 929_u32
  BCRYPT_CAPI_AES_FLAG = 16_u32
  BCRYPT_MULTI_FLAG = 64_u32
  BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4_u32
  BCRYPT_BUFFERS_LOCKED_FLAG = 64_u32
  BCRYPT_EXTENDED_KEYSIZE = 128_u32
  BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256_u32
  BCRYPT_KEY_DERIVATION_OPERATION = 64_u32
  BCRYPT_PUBLIC_KEY_FLAG = 1_u32
  BCRYPT_PRIVATE_KEY_FLAG = 2_u32
  BCRYPT_NO_KEY_VALIDATION = 8_u32
  BCRYPT_KEY_VALIDATION_RANGE = 16_u32
  BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24_u32
  BCRYPT_KEY_VALIDATION_REGENERATE = 32_u32
  BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1_u32
  BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2_u32
  BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2_u32
  CRYPT_OVERWRITE = 1_u32
  CRYPT_PRIORITY_TOP = 0_u32
  CRYPT_PRIORITY_BOTTOM = 4294967295_u32
  CRYPT_DEFAULT_CONTEXT = "Default"
  Wszxmlns_digsig = "http://www.w3.org/2000/09/xmldsig#"
  Wszxmlns_digsig_signatureproperties = "http://www.w3.org/2000/09/xmldsig#SignatureProperties"
  Wszxmlns_digsig_id = "Id"
  Wszuri_xmlns_digsig_base64 = "http://www.w3.org/2000/09/xmldsig#base64"
  Wszuri_xmlns_digsig_sha1 = "http://www.w3.org/2000/09/xmldsig#sha1"
  Wszuri_xmlns_digsig_sha256 = "http://www.w3.org/2001/04/xmlenc#sha256"
  Wszuri_xmlns_digsig_sha384 = "http://www.w3.org/2001/04/xmldsig-more#sha384"
  Wszuri_xmlns_digsig_sha512 = "http://www.w3.org/2001/04/xmlenc#sha512"
  Wszuri_xmlns_digsig_rsa_sha1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
  Wszuri_xmlns_digsig_dsa_sha1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
  Wszuri_xmlns_digsig_rsa_sha256 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
  Wszuri_xmlns_digsig_rsa_sha384 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
  Wszuri_xmlns_digsig_rsa_sha512 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
  Wszuri_xmlns_digsig_ecdsa_sha1 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1"
  Wszuri_xmlns_digsig_ecdsa_sha256 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"
  Wszuri_xmlns_digsig_ecdsa_sha384 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384"
  Wszuri_xmlns_digsig_ecdsa_sha512 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512"
  Wszuri_xmlns_digsig_hmac_sha1 = "http://www.w3.org/2000/09/xmldsig#hmac-sha1"
  Wszuri_xmlns_digsig_hmac_sha256 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"
  Wszuri_xmlns_digsig_hmac_sha384 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384"
  Wszuri_xmlns_digsig_hmac_sha512 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512"
  Wszuri_canonicalization_c14n = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315"
  Wszuri_canonicalization_c14nc = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"
  Wszuri_canonicalization_exslusive_c14n = "http://www.w3.org/2001/10/xml-exc-c14n#"
  Wszuri_canonicalization_exslusive_c14nc = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments"
  Wszuri_transform_xpath = "http://www.w3.org/TR/1999/REC-xpath-19991116"
  Wszuri_xmlns_transform_base64 = "http://www.w3.org/2000/09/xmldsig#base64"
  Wszuri_xmlns_transform_enveloped = "http://www.w3.org/2000/09/xmldsig#enveloped-signature"
  CRYPT_XML_BLOB_MAX = 2147483640_u32
  CRYPT_XML_ID_MAX = 256_u32
  CRYPT_XML_SIGNATURES_MAX = 16_u32
  CRYPT_XML_TRANSFORM_MAX = 16_u32
  CRYPT_XML_SIGNATURE_VALUE_MAX = 2048_u32
  CRYPT_XML_DIGEST_VALUE_MAX = 128_u32
  CRYPT_XML_OBJECTS_MAX = 256_u32
  CRYPT_XML_REFERENCES_MAX = 32760_u32
  CRYPT_XML_E_BASE = -2146885376_i32
  CRYPT_XML_E_LARGE = -2146885375_i32
  CRYPT_XML_E_TOO_MANY_TRANSFORMS = -2146885374_i32
  CRYPT_XML_E_ENCODING = -2146885373_i32
  CRYPT_XML_E_ALGORITHM = -2146885372_i32
  CRYPT_XML_E_TRANSFORM = -2146885371_i32
  CRYPT_XML_E_HANDLE = -2146885370_i32
  CRYPT_XML_E_OPERATION = -2146885369_i32
  CRYPT_XML_E_UNRESOLVED_REFERENCE = -2146885368_i32
  CRYPT_XML_E_INVALID_DIGEST = -2146885367_i32
  CRYPT_XML_E_INVALID_SIGNATURE = -2146885366_i32
  CRYPT_XML_E_HASH_FAILED = -2146885365_i32
  CRYPT_XML_E_SIGN_FAILED = -2146885364_i32
  CRYPT_XML_E_VERIFY_FAILED = -2146885363_i32
  CRYPT_XML_E_TOO_MANY_SIGNATURES = -2146885362_i32
  CRYPT_XML_E_INVALID_KEYVALUE = -2146885361_i32
  CRYPT_XML_E_UNEXPECTED_XML = -2146885360_i32
  CRYPT_XML_E_SIGNER = -2146885359_i32
  CRYPT_XML_E_NON_UNIQUE_ID = -2146885358_i32
  CRYPT_XML_E_LAST = -2146885358_i32
  CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT = 1073741824_u32
  CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT = 536870912_u32
  CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT = 134217728_u32
  CRYPT_XML_FLAG_ECDSA_DSIG11 = 67108864_u32
  CRYPT_XML_STATUS_NO_ERROR = 0_u32
  CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY = 1_u32
  CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT = 1_u32
  CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED = 1_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI = 1_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME = 2_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID = 3_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID = 4_u32
  Szforce_key_protection = "ForceKeyProtection"
  Dwforce_key_protection_disabled = 0_u32
  Dwforce_key_protection_user_select = 1_u32
  Dwforce_key_protection_high = 2_u32
  CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1_u32
  CRYPTPROTECT_PROMPT_ON_PROTECT = 2_u32
  CRYPTPROTECT_PROMPT_RESERVED = 4_u32
  CRYPTPROTECT_PROMPT_STRONG = 8_u32
  CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16_u32
  CRYPTPROTECT_UI_FORBIDDEN = 1_u32
  CRYPTPROTECT_LOCAL_MACHINE = 4_u32
  CRYPTPROTECT_CRED_SYNC = 8_u32
  CRYPTPROTECT_AUDIT = 16_u32
  CRYPTPROTECT_NO_RECOVERY = 32_u32
  CRYPTPROTECT_VERIFY_PROTECTION = 64_u32
  CRYPTPROTECT_CRED_REGENERATE = 128_u32
  CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455_u32
  CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295_u32
  CRYPTPROTECTMEMORY_BLOCK_SIZE = 16_u32
  CRYPTPROTECTMEMORY_SAME_PROCESS = 0_u32
  CRYPTPROTECTMEMORY_CROSS_PROCESS = 1_u32
  CRYPTPROTECTMEMORY_SAME_LOGON = 2_u32
  NCRYPT_MAX_KEY_NAME_LENGTH = 512_u32
  NCRYPT_MAX_ALG_ID_LENGTH = 512_u32
  MS_KEY_STORAGE_PROVIDER = "Microsoft Software Key Storage Provider"
  MS_SMART_CARD_KEY_STORAGE_PROVIDER = "Microsoft Smart Card Key Storage Provider"
  MS_PLATFORM_KEY_STORAGE_PROVIDER = "Microsoft Platform Crypto Provider"
  MS_NGC_KEY_STORAGE_PROVIDER = "Microsoft Passport Key Storage Provider"
  TPM_RSA_SRK_SEAL_KEY = "MICROSOFT_PCP_KSP_RSA_SEAL_KEY_3BD1C4BF-004E-4E2F-8A4D-0BF633DCB074"
  NCRYPT_RSA_ALGORITHM = "RSA"
  NCRYPT_RSA_SIGN_ALGORITHM = "RSA_SIGN"
  NCRYPT_DH_ALGORITHM = "DH"
  NCRYPT_DSA_ALGORITHM = "DSA"
  NCRYPT_MD2_ALGORITHM = "MD2"
  NCRYPT_MD4_ALGORITHM = "MD4"
  NCRYPT_MD5_ALGORITHM = "MD5"
  NCRYPT_SHA1_ALGORITHM = "SHA1"
  NCRYPT_SHA256_ALGORITHM = "SHA256"
  NCRYPT_SHA384_ALGORITHM = "SHA384"
  NCRYPT_SHA512_ALGORITHM = "SHA512"
  NCRYPT_ECDSA_P256_ALGORITHM = "ECDSA_P256"
  NCRYPT_ECDSA_P384_ALGORITHM = "ECDSA_P384"
  NCRYPT_ECDSA_P521_ALGORITHM = "ECDSA_P521"
  NCRYPT_ECDH_P256_ALGORITHM = "ECDH_P256"
  NCRYPT_ECDH_P384_ALGORITHM = "ECDH_P384"
  NCRYPT_ECDH_P521_ALGORITHM = "ECDH_P521"
  NCRYPT_AES_ALGORITHM = "AES"
  NCRYPT_RC2_ALGORITHM = "RC2"
  NCRYPT_3DES_ALGORITHM = "3DES"
  NCRYPT_DES_ALGORITHM = "DES"
  NCRYPT_DESX_ALGORITHM = "DESX"
  NCRYPT_3DES_112_ALGORITHM = "3DES_112"
  NCRYPT_SP800108_CTR_HMAC_ALGORITHM = "SP800_108_CTR_HMAC"
  NCRYPT_SP80056A_CONCAT_ALGORITHM = "SP800_56A_CONCAT"
  NCRYPT_PBKDF2_ALGORITHM = "PBKDF2"
  NCRYPT_CAPI_KDF_ALGORITHM = "CAPI_KDF"
  NCRYPT_ECDSA_ALGORITHM = "ECDSA"
  NCRYPT_ECDH_ALGORITHM = "ECDH"
  NCRYPT_KEY_STORAGE_ALGORITHM = "KEY_STORAGE"
  NCRYPT_HMAC_SHA256_ALGORITHM = "HMAC-SHA256"
  NCRYPT_KEY_DERIVATION_INTERFACE = 7_u32
  NCRYPT_KEY_PROTECTION_INTERFACE = 65540_u32
  NCRYPT_RSA_ALGORITHM_GROUP = "RSA"
  NCRYPT_DH_ALGORITHM_GROUP = "DH"
  NCRYPT_DSA_ALGORITHM_GROUP = "DSA"
  NCRYPT_ECDSA_ALGORITHM_GROUP = "ECDSA"
  NCRYPT_ECDH_ALGORITHM_GROUP = "ECDH"
  NCRYPT_AES_ALGORITHM_GROUP = "AES"
  NCRYPT_RC2_ALGORITHM_GROUP = "RC2"
  NCRYPT_DES_ALGORITHM_GROUP = "DES"
  NCRYPT_KEY_DERIVATION_GROUP = "KEY_DERIVATION"
  NCRYPTBUFFER_VERSION = 0_u32
  NCRYPTBUFFER_EMPTY = 0_u32
  NCRYPTBUFFER_DATA = 1_u32
  NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3_u32
  NCRYPTBUFFER_PROTECTION_FLAGS = 4_u32
  NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20_u32
  NCRYPTBUFFER_SSL_SERVER_RANDOM = 21_u32
  NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22_u32
  NCRYPTBUFFER_SSL_CLEAR_KEY = 23_u32
  NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24_u32
  NCRYPTBUFFER_SSL_SESSION_HASH = 25_u32
  NCRYPTBUFFER_PKCS_OID = 40_u32
  NCRYPTBUFFER_PKCS_ALG_OID = 41_u32
  NCRYPTBUFFER_PKCS_ALG_PARAM = 42_u32
  NCRYPTBUFFER_PKCS_ALG_ID = 43_u32
  NCRYPTBUFFER_PKCS_ATTRS = 44_u32
  NCRYPTBUFFER_PKCS_KEY_NAME = 45_u32
  NCRYPTBUFFER_PKCS_SECRET = 46_u32
  NCRYPTBUFFER_CERT_BLOB = 47_u32
  NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48_u32
  NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49_u32
  NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50_u32
  NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51_u32
  NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52_u32
  NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53_u32
  NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54_u32
  NCRYPTBUFFER_ECC_CURVE_NAME = 60_u32
  NCRYPTBUFFER_ECC_PARAMETERS = 61_u32
  NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70_u32
  NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71_u32
  NCRYPTBUFFER_TPM_SEAL_TICKET = 72_u32
  NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82_u32
  NCRYPT_CIPHER_NO_PADDING_FLAG = 0_u32
  NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1_u32
  NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2_u32
  NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288_u32
  NCRYPT_KEY_ATTEST_MAGIC = 1146110283_u32
  NCRYPT_CLAIM_AUTHORITY_ONLY = 1_u32
  NCRYPT_CLAIM_SUBJECT_ONLY = 2_u32
  NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258_u32
  NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3_u32
  NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4_u32
  NCRYPT_CLAIM_UNKNOWN = 4096_u32
  NCRYPT_CLAIM_PLATFORM = 65536_u32
  NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1_u32
  NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2_u32
  NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0_u32
  NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0_u32
  NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0_u32
  NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0_u32
  NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0_u32
  NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0_u32
  NCRYPT_PAD_CIPHER_FLAG = 16_u32
  NCRYPT_ATTESTATION_FLAG = 32_u32
  NCRYPT_SEALING_FLAG = 256_u32
  NCRYPT_DO_NOT_FINALIZE_FLAG = 1024_u32
  NCRYPT_EXPORT_LEGACY_FLAG = 2048_u32
  NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096_u32
  NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192_u32
  NCRYPT_NO_CACHED_PASSWORD = 16384_u32
  NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768_u32
  NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536_u32
  NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072_u32
  NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144_u32
  NCRYPT_KEY_DERIVATION_OPERATION = 64_u32
  NCRYPT_AUTHORITY_KEY_FLAG = 256_u32
  NCRYPT_NAME_PROPERTY = "Name"
  NCRYPT_UNIQUE_NAME_PROPERTY = "Unique Name"
  NCRYPT_ALGORITHM_PROPERTY = "Algorithm Name"
  NCRYPT_LENGTH_PROPERTY = "Length"
  NCRYPT_LENGTHS_PROPERTY = "Lengths"
  NCRYPT_BLOCK_LENGTH_PROPERTY = "Block Length"
  NCRYPT_PUBLIC_LENGTH_PROPERTY = "PublicKeyLength"
  NCRYPT_SIGNATURE_LENGTH_PROPERTY = "SignatureLength"
  NCRYPT_CHAINING_MODE_PROPERTY = "Chaining Mode"
  NCRYPT_AUTH_TAG_LENGTH = "AuthTagLength"
  NCRYPT_UI_POLICY_PROPERTY = "UI Policy"
  NCRYPT_EXPORT_POLICY_PROPERTY = "Export Policy"
  NCRYPT_WINDOW_HANDLE_PROPERTY = "HWND Handle"
  NCRYPT_USE_CONTEXT_PROPERTY = "Use Context"
  NCRYPT_IMPL_TYPE_PROPERTY = "Impl Type"
  NCRYPT_KEY_USAGE_PROPERTY = "Key Usage"
  NCRYPT_KEY_TYPE_PROPERTY = "Key Type"
  NCRYPT_VERSION_PROPERTY = "Version"
  NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY = "Security Descr Support"
  NCRYPT_SECURITY_DESCR_PROPERTY = "Security Descr"
  NCRYPT_USE_COUNT_ENABLED_PROPERTY = "Enabled Use Count"
  NCRYPT_USE_COUNT_PROPERTY = "Use Count"
  NCRYPT_LAST_MODIFIED_PROPERTY = "Modified"
  NCRYPT_MAX_NAME_LENGTH_PROPERTY = "Max Name Length"
  NCRYPT_ALGORITHM_GROUP_PROPERTY = "Algorithm Group"
  NCRYPT_DH_PARAMETERS_PROPERTY = "DHParameters"
  NCRYPT_ECC_PARAMETERS_PROPERTY = "ECCParameters"
  NCRYPT_ECC_CURVE_NAME_PROPERTY = "ECCCurveName"
  NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY = "ECCCurveNameList"
  NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY = "Virtual Iso"
  NCRYPT_USE_PER_BOOT_KEY_PROPERTY = "Per Boot Key"
  NCRYPT_PROVIDER_HANDLE_PROPERTY = "Provider Handle"
  NCRYPT_PIN_PROPERTY = "SmartCardPin"
  NCRYPT_READER_PROPERTY = "SmartCardReader"
  NCRYPT_SMARTCARD_GUID_PROPERTY = "SmartCardGuid"
  NCRYPT_CERTIFICATE_PROPERTY = "SmartCardKeyCertificate"
  NCRYPT_PIN_PROMPT_PROPERTY = "SmartCardPinPrompt"
  NCRYPT_USER_CERTSTORE_PROPERTY = "SmartCardUserCertStore"
  NCRYPT_ROOT_CERTSTORE_PROPERTY = "SmartcardRootCertStore"
  NCRYPT_SECURE_PIN_PROPERTY = "SmartCardSecurePin"
  NCRYPT_ASSOCIATED_ECDH_KEY = "SmartCardAssociatedECDHKey"
  NCRYPT_SCARD_PIN_ID = "SmartCardPinId"
  NCRYPT_SCARD_PIN_INFO = "SmartCardPinInfo"
  NCRYPT_READER_ICON_PROPERTY = "SmartCardReaderIcon"
  NCRYPT_KDF_SECRET_VALUE = "KDFKeySecret"
  NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY = "SmartCardDismissUITimeoutSeconds"
  NCRYPT_PCP_PLATFORM_TYPE_PROPERTY = "PCP_PLATFORM_TYPE"
  NCRYPT_PCP_PROVIDER_VERSION_PROPERTY = "PCP_PROVIDER_VERSION"
  NCRYPT_PCP_EKPUB_PROPERTY = "PCP_EKPUB"
  NCRYPT_PCP_EKCERT_PROPERTY = "PCP_EKCERT"
  NCRYPT_PCP_EKNVCERT_PROPERTY = "PCP_EKNVCERT"
  NCRYPT_PCP_RSA_EKPUB_PROPERTY = "PCP_RSA_EKPUB"
  NCRYPT_PCP_RSA_EKCERT_PROPERTY = "PCP_RSA_EKCERT"
  NCRYPT_PCP_RSA_EKNVCERT_PROPERTY = "PCP_RSA_EKNVCERT"
  NCRYPT_PCP_ECC_EKPUB_PROPERTY = "PCP_ECC_EKPUB"
  NCRYPT_PCP_ECC_EKCERT_PROPERTY = "PCP_ECC_EKCERT"
  NCRYPT_PCP_ECC_EKNVCERT_PROPERTY = "PCP_ECC_EKNVCERT"
  NCRYPT_PCP_SRKPUB_PROPERTY = "PCP_SRKPUB"
  NCRYPT_PCP_PCRTABLE_PROPERTY = "PCP_PCRTABLE"
  NCRYPT_PCP_CHANGEPASSWORD_PROPERTY = "PCP_CHANGEPASSWORD"
  NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY = "PCP_PASSWORD_REQUIRED"
  NCRYPT_PCP_USAGEAUTH_PROPERTY = "PCP_USAGEAUTH"
  NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY = "PCP_MIGRATIONPASSWORD"
  NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY = "PCP_EXPORT_ALLOWED"
  NCRYPT_PCP_STORAGEPARENT_PROPERTY = "PCP_STORAGEPARENT"
  NCRYPT_PCP_PROVIDERHANDLE_PROPERTY = "PCP_PROVIDERMHANDLE"
  NCRYPT_PCP_PLATFORMHANDLE_PROPERTY = "PCP_PLATFORMHANDLE"
  NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY = "PCP_PLATFORM_BINDING_PCRMASK"
  NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY = "PCP_PLATFORM_BINDING_PCRDIGESTLIST"
  NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY = "PCP_PLATFORM_BINDING_PCRDIGEST"
  NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY = "PCP_KEY_USAGE_POLICY"
  NCRYPT_PCP_RSA_SCHEME_PROPERTY = "PCP_RSA_SCHEME"
  NCRYPT_PCP_TPM12_IDBINDING_PROPERTY = "PCP_TPM12_IDBINDING"
  NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY = "PCP_TPM12_IDBINDING_DYNAMIC"
  NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY = "PCP_TPM12_IDACTIVATION"
  NCRYPT_PCP_KEYATTESTATION_PROPERTY = "PCP_TPM12_KEYATTESTATION"
  NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = "PCP_ALTERNATE_KEY_STORAGE_LOCATION"
  NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY = "PCP_PLATFORM_BINDING_PCRALGID"
  NCRYPT_PCP_HMAC_AUTH_POLICYREF = "PCP_HMAC_AUTH_POLICYREF"
  NCRYPT_PCP_HMAC_AUTH_POLICYINFO = "PCP_HMAC_AUTH_POLICYINFO"
  NCRYPT_PCP_HMAC_AUTH_NONCE = "PCP_HMAC_AUTH_NONCE"
  NCRYPT_PCP_HMAC_AUTH_SIGNATURE = "PCP_HMAC_AUTH_SIGNATURE"
  NCRYPT_PCP_HMAC_AUTH_TICKET = "PCP_HMAC_AUTH_TICKET"
  NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY = "PCP_NO_DA_PROTECTION"
  NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY = "PCP_TPM_MANUFACTURER_ID"
  NCRYPT_PCP_TPM_FW_VERSION_PROPERTY = "PCP_TPM_FW_VERSION"
  NCRYPT_PCP_TPM2BNAME_PROPERTY = "PCP_TPM2BNAME"
  NCRYPT_PCP_TPM_VERSION_PROPERTY = "PCP_TPM_VERSION"
  NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY = "PCP_RAW_POLICYDIGEST"
  NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY = "PCP_KEY_CREATIONHASH"
  NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY = "PCP_KEY_CREATIONTICKET"
  NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY = "PCP_RSA_SCHEME_HASH_ALG"
  NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY = "PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED"
  NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY = "PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY"
  IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0_u32
  IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1_u32
  IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2_u32
  NCRYPT_PCP_SESSIONID_PROPERTY = "PCP_SESSIONID"
  NCRYPT_PCP_PSS_SALT_SIZE_PROPERTY = "PSS Salt Size"
  NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0_u32
  NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1_u32
  NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2_u32
  NCRYPT_PCP_INTERMEDIATE_CA_EKCERT_PROPERTY = "PCP_INTERMEDIATE_CA_EKCERT"
  NCRYPT_PCP_PCRTABLE_ALGORITHM_PROPERTY = "PCP_PCRTABLE_ALGORITHM"
  NCRYPT_PCP_SYMMETRIC_KEYBITS_PROPERTY = "PCP_SYMMETRIC_KEYBITS"
  NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32_u32
  NCRYPT_TPM12_PROVIDER = 65536_u32
  NCRYPT_PCP_SIGNATURE_KEY = 1_u32
  NCRYPT_PCP_ENCRYPTION_KEY = 2_u32
  NCRYPT_PCP_STORAGE_KEY = 4_u32
  NCRYPT_PCP_IDENTITY_KEY = 8_u32
  NCRYPT_PCP_HMACVERIFICATION_KEY = 16_u32
  NCRYPT_SCARD_NGC_KEY_NAME = "SmartCardNgcKeyName"
  NCRYPT_INITIALIZATION_VECTOR = "IV"
  NCRYPT_CHANGEPASSWORD_PROPERTY = "PCP_CHANGEPASSWORD"
  NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = "PCP_ALTERNATE_KEY_STORAGE_LOCATION"
  NCRYPT_KEY_ACCESS_POLICY_PROPERTY = "Key Access Policy"
  NCRYPT_MAX_PROPERTY_NAME = 64_u32
  NCRYPT_MAX_PROPERTY_DATA = 1048576_u32
  NCRYPT_ALLOW_EXPORT_FLAG = 1_u32
  NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2_u32
  NCRYPT_ALLOW_ARCHIVING_FLAG = 4_u32
  NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8_u32
  NCRYPT_IMPL_HARDWARE_FLAG = 1_u32
  NCRYPT_IMPL_SOFTWARE_FLAG = 2_u32
  NCRYPT_IMPL_REMOVABLE_FLAG = 8_u32
  NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16_u32
  NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32_u32
  NCRYPT_ALLOW_DECRYPT_FLAG = 1_u32
  NCRYPT_ALLOW_SIGNING_FLAG = 2_u32
  NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4_u32
  NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8_u32
  NCRYPT_ALLOW_ALL_USAGES = 16777215_u32
  NCRYPT_UI_PROTECT_KEY_FLAG = 1_u32
  NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2_u32
  NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4_u32
  NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8_u32
  NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY = "PinCacheFreeApplicationTicket"
  NCRYPT_PIN_CACHE_FLAGS_PROPERTY = "PinCacheFlags"
  NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1_u32
  NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY = "PinCacheApplicationTicket"
  NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY = "PinCacheApplicationImage"
  NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY = "PinCacheApplicationStatus"
  NCRYPT_PIN_CACHE_PIN_PROPERTY = "PinCachePin"
  NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY = "PinCacheIsGestureRequired"
  NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1_u32
  NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90_u32
  NCRYPT_PIN_CACHE_CLEAR_PROPERTY = "PinCacheClear"
  NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1_u32
  NCRYPT_KEY_ACCESS_POLICY_VERSION = 1_u32
  NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1_u32
  NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851_u32
  NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587_u32
  NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296_u32
  NCRYPT_CIPHER_KEY_BLOB = "CipherKeyBlob"
  NCRYPT_KDF_KEY_BLOB = "KDFKeyBlob"
  NCRYPT_PROTECTED_KEY_BLOB = "ProtectedKeyBlob"
  NCRYPT_TPM_LOADABLE_KEY_BLOB = "PcpTpmProtectedKeyBlob"
  NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211_u32
  NCRYPT_PKCS7_ENVELOPE_BLOB = "PKCS7_ENVELOPE"
  NCRYPT_PKCS8_PRIVATE_KEY_BLOB = "PKCS8_PRIVATEKEY"
  NCRYPT_OPAQUETRANSPORT_BLOB = "OpaqueTransport"
  NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB = "ISOLATED_KEY_ENVELOPE"
  NCRYPT_DESCR_DELIMITER_OR = "OR"
  NCRYPT_DESCR_DELIMITER_AND = "AND"
  NCRYPT_DESCR_EQUAL = "="
  MS_KEY_PROTECTION_PROVIDER = "Microsoft Key Protection Provider"
  NCRYPT_KEY_PROTECTION_ALGORITHM_SID = "SID"
  NCRYPT_KEY_PROTECTION_ALGORITHM_LOCAL = "LOCAL"
  NCRYPT_KEY_PROTECTION_LOCAL_LOGON = "logon"
  NCRYPT_KEY_PROTECTION_LOCAL_USER = "user"
  NCRYPT_KEY_PROTECTION_LOCAL_MACHINE = "machine"
  NCRYPT_KEY_PROTECTION_ALGORITHM_SDDL = "SDDL"
  NCRYPT_KEY_PROTECTION_ALGORITHM_WEBCREDENTIALS = "WEBCREDENTIALS"
  NCRYPT_KEY_PROTECTION_ALGORITHM_LOCKEDCREDENTIALS = "LOCKEDCREDENTIALS"
  NCRYPT_KEY_PROTECTION_ALGORITHM_CERTIFICATE = "CERTIFICATE"
  NCRYPT_KEY_PROTECTION_CERT_HASHID = "HashId"
  NCRYPT_KEY_PROTECTION_CERT_CERTBLOB = "CertBlob"
  NCRYPT_NAMED_DESCRIPTOR_FLAG = 1_u32
  NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = 1_u32
  ALG_CLASS_ANY = 0_u32
  ALG_CLASS_SIGNATURE = 8192_u32
  ALG_CLASS_MSG_ENCRYPT = 16384_u32
  ALG_CLASS_DATA_ENCRYPT = 24576_u32
  ALG_CLASS_HASH = 32768_u32
  ALG_CLASS_KEY_EXCHANGE = 40960_u32
  ALG_CLASS_ALL = 57344_u32
  ALG_TYPE_ANY = 0_u32
  ALG_TYPE_DSS = 512_u32
  ALG_TYPE_RSA = 1024_u32
  ALG_TYPE_BLOCK = 1536_u32
  ALG_TYPE_STREAM = 2048_u32
  ALG_TYPE_DH = 2560_u32
  ALG_TYPE_SECURECHANNEL = 3072_u32
  ALG_TYPE_ECDH = 3584_u32
  ALG_TYPE_THIRDPARTY = 4096_u32
  ALG_SID_ANY = 0_u32
  ALG_SID_THIRDPARTY_ANY = 0_u32
  ALG_SID_RSA_ANY = 0_u32
  ALG_SID_RSA_PKCS = 1_u32
  ALG_SID_RSA_MSATWORK = 2_u32
  ALG_SID_RSA_ENTRUST = 3_u32
  ALG_SID_RSA_PGP = 4_u32
  ALG_SID_DSS_ANY = 0_u32
  ALG_SID_DSS_PKCS = 1_u32
  ALG_SID_DSS_DMS = 2_u32
  ALG_SID_ECDSA = 3_u32
  ALG_SID_DES = 1_u32
  ALG_SID_3DES = 3_u32
  ALG_SID_DESX = 4_u32
  ALG_SID_IDEA = 5_u32
  ALG_SID_CAST = 6_u32
  ALG_SID_SAFERSK64 = 7_u32
  ALG_SID_SAFERSK128 = 8_u32
  ALG_SID_3DES_112 = 9_u32
  ALG_SID_CYLINK_MEK = 12_u32
  ALG_SID_RC5 = 13_u32
  ALG_SID_AES_128 = 14_u32
  ALG_SID_AES_192 = 15_u32
  ALG_SID_AES_256 = 16_u32
  ALG_SID_AES = 17_u32
  ALG_SID_SKIPJACK = 10_u32
  ALG_SID_TEK = 11_u32
  CRYPT_MODE_CBCI = 6_u32
  CRYPT_MODE_CFBP = 7_u32
  CRYPT_MODE_OFBP = 8_u32
  CRYPT_MODE_CBCOFM = 9_u32
  CRYPT_MODE_CBCOFMI = 10_u32
  ALG_SID_RC2 = 2_u32
  ALG_SID_RC4 = 1_u32
  ALG_SID_SEAL = 2_u32
  ALG_SID_DH_SANDF = 1_u32
  ALG_SID_DH_EPHEM = 2_u32
  ALG_SID_AGREED_KEY_ANY = 3_u32
  ALG_SID_KEA = 4_u32
  ALG_SID_ECDH = 5_u32
  ALG_SID_ECDH_EPHEM = 6_u32
  ALG_SID_MD2 = 1_u32
  ALG_SID_MD4 = 2_u32
  ALG_SID_MD5 = 3_u32
  ALG_SID_SHA = 4_u32
  ALG_SID_SHA1 = 4_u32
  ALG_SID_MAC = 5_u32
  ALG_SID_RIPEMD = 6_u32
  ALG_SID_RIPEMD160 = 7_u32
  ALG_SID_SSL3SHAMD5 = 8_u32
  ALG_SID_HMAC = 9_u32
  ALG_SID_TLS1PRF = 10_u32
  ALG_SID_HASH_REPLACE_OWF = 11_u32
  ALG_SID_SHA_256 = 12_u32
  ALG_SID_SHA_384 = 13_u32
  ALG_SID_SHA_512 = 14_u32
  ALG_SID_SSL3_MASTER = 1_u32
  ALG_SID_SCHANNEL_MASTER_HASH = 2_u32
  ALG_SID_SCHANNEL_MAC_KEY = 3_u32
  ALG_SID_PCT1_MASTER = 4_u32
  ALG_SID_SSL2_MASTER = 5_u32
  ALG_SID_TLS1_MASTER = 6_u32
  ALG_SID_SCHANNEL_ENC_KEY = 7_u32
  ALG_SID_ECMQV = 1_u32
  ALG_SID_EXAMPLE = 80_u32
  SIGNATURE_RESOURCE_NUMBER = 666_u32
  CRYPT_VERIFYCONTEXT = 4026531840_u32
  CRYPT_NEWKEYSET = 8_u32
  CRYPT_DELETEKEYSET = 16_u32
  CRYPT_SILENT = 64_u32
  CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128_u32
  CRYPT_UPDATE_KEY = 8_u32
  CRYPT_USER_PROTECTED_STRONG = 1048576_u32
  RSA1024BIT_KEY = 67108864_u32
  CRYPT_SERVER = 1024_u32
  KEY_LENGTH_MASK = 4294901760_u32
  CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32_u32
  CRYPT_SECRETDIGEST = 1_u32
  CRYPT_OWF_REPL_LM_HASH = 1_u32
  CRYPT_LITTLE_ENDIAN = 1_u32
  CRYPT_NOHASHOID = 1_u32
  CRYPT_TYPE2_FORMAT = 2_u32
  CRYPT_X931_FORMAT = 4_u32
  CRYPT_MACHINE_DEFAULT = 1_u32
  CRYPT_USER_DEFAULT = 2_u32
  CRYPT_DELETE_DEFAULT = 4_u32
  SIMPLEBLOB = 1_u32
  PUBLICKEYBLOB = 6_u32
  PRIVATEKEYBLOB = 7_u32
  PLAINTEXTKEYBLOB = 8_u32
  OPAQUEKEYBLOB = 9_u32
  PUBLICKEYBLOBEX = 10_u32
  SYMMETRICWRAPKEYBLOB = 11_u32
  KEYSTATEBLOB = 12_u32
  CRYPT_USERDATA = 1_u32
  KP_IV = 1_u32
  KP_PADDING = 3_u32
  KP_MODE = 4_u32
  KP_MODE_BITS = 5_u32
  KP_P = 11_u32
  KP_G = 12_u32
  KP_Q = 13_u32
  KP_X = 14_u32
  KP_Y = 15_u32
  KP_RA = 16_u32
  KP_RB = 17_u32
  KP_INFO = 18_u32
  KP_EFFECTIVE_KEYLEN = 19_u32
  KP_SCHANNEL_ALG = 20_u32
  KP_CLIENT_RANDOM = 21_u32
  KP_SERVER_RANDOM = 22_u32
  KP_RP = 23_u32
  KP_PRECOMP_MD5 = 24_u32
  KP_PRECOMP_SHA = 25_u32
  KP_CLEAR_KEY = 27_u32
  KP_PUB_EX_LEN = 28_u32
  KP_PUB_EX_VAL = 29_u32
  KP_KEYVAL = 30_u32
  KP_ADMIN_PIN = 31_u32
  KP_KEYEXCHANGE_PIN = 32_u32
  KP_SIGNATURE_PIN = 33_u32
  KP_PREHASH = 34_u32
  KP_ROUNDS = 35_u32
  KP_OAEP_PARAMS = 36_u32
  KP_CMS_KEY_INFO = 37_u32
  KP_CMS_DH_KEY_INFO = 38_u32
  KP_PUB_PARAMS = 39_u32
  KP_VERIFY_PARAMS = 40_u32
  KP_HIGHEST_VERSION = 41_u32
  KP_PIN_ID = 43_u32
  KP_PIN_INFO = 44_u32
  PKCS5_PADDING = 1_u32
  RANDOM_PADDING = 2_u32
  ZERO_PADDING = 3_u32
  CRYPT_MODE_CBC = 1_u32
  CRYPT_MODE_ECB = 2_u32
  CRYPT_MODE_OFB = 3_u32
  CRYPT_MODE_CFB = 4_u32
  CRYPT_MODE_CTS = 5_u32
  CRYPT_ENCRYPT = 1_u32
  CRYPT_DECRYPT = 2_u32
  CRYPT_EXPORT = 4_u32
  CRYPT_READ = 8_u32
  CRYPT_WRITE = 16_u32
  CRYPT_MAC = 32_u32
  CRYPT_EXPORT_KEY = 64_u32
  CRYPT_IMPORT_KEY = 128_u32
  CRYPT_ARCHIVE = 256_u32
  HP_ALGID = 1_u32
  HP_HASHSIZE = 4_u32
  HP_TLS1PRF_LABEL = 6_u32
  HP_TLS1PRF_SEED = 7_u32
  CRYPT_FAILED = 0_u32
  CRYPT_SUCCEED = 1_u32
  PP_ENUMALGS = 1_u32
  PP_ENUMCONTAINERS = 2_u32
  PP_IMPTYPE = 3_u32
  PP_NAME = 4_u32
  PP_VERSION = 5_u32
  PP_CONTAINER = 6_u32
  PP_CHANGE_PASSWORD = 7_u32
  PP_CERTCHAIN = 9_u32
  PP_KEY_TYPE_SUBTYPE = 10_u32
  PP_PROVTYPE = 16_u32
  PP_KEYSTORAGE = 17_u32
  PP_APPLI_CERT = 18_u32
  PP_SYM_KEYSIZE = 19_u32
  PP_SESSION_KEYSIZE = 20_u32
  PP_ENUMALGS_EX = 22_u32
  PP_ENUMMANDROOTS = 25_u32
  PP_ENUMELECTROOTS = 26_u32
  PP_KEYSET_TYPE = 27_u32
  PP_ADMIN_PIN = 31_u32
  PP_SIG_KEYSIZE_INC = 34_u32
  PP_KEYX_KEYSIZE_INC = 35_u32
  PP_UNIQUE_CONTAINER = 36_u32
  PP_SGC_INFO = 37_u32
  PP_KEYSPEC = 39_u32
  PP_ENUMEX_SIGNING_PROT = 40_u32
  PP_CRYPT_COUNT_KEY_USE = 41_u32
  PP_SMARTCARD_GUID = 45_u32
  PP_SMARTCARD_READER_ICON = 47_u32
  CRYPT_FIRST = 1_u32
  CRYPT_NEXT = 2_u32
  CRYPT_SGC_ENUM = 4_u32
  CRYPT_IMPL_HARDWARE = 1_u32
  CRYPT_IMPL_SOFTWARE = 2_u32
  CRYPT_IMPL_MIXED = 3_u32
  CRYPT_IMPL_UNKNOWN = 4_u32
  CRYPT_IMPL_REMOVABLE = 8_u32
  CRYPT_SEC_DESCR = 1_u32
  CRYPT_PSTORE = 2_u32
  CRYPT_UI_PROMPT = 4_u32
  CRYPT_FLAG_PCT1 = 1_u32
  CRYPT_FLAG_SSL2 = 2_u32
  CRYPT_FLAG_SSL3 = 4_u32
  CRYPT_FLAG_TLS1 = 8_u32
  CRYPT_FLAG_IPSEC = 16_u32
  CRYPT_FLAG_SIGNING = 32_u32
  CRYPT_SGC = 1_u32
  CRYPT_FASTSGC = 2_u32
  PP_CONTEXT_INFO = 11_u32
  PP_DISMISS_PIN_UI_SEC = 49_u32
  PROV_RSA_FULL = 1_u32
  PROV_RSA_SIG = 2_u32
  PROV_DSS = 3_u32
  PROV_FORTEZZA = 4_u32
  PROV_MS_EXCHANGE = 5_u32
  PROV_SSL = 6_u32
  PROV_RSA_SCHANNEL = 12_u32
  PROV_DSS_DH = 13_u32
  PROV_EC_ECDSA_SIG = 14_u32
  PROV_EC_ECNRA_SIG = 15_u32
  PROV_EC_ECDSA_FULL = 16_u32
  PROV_EC_ECNRA_FULL = 17_u32
  PROV_DH_SCHANNEL = 18_u32
  PROV_SPYRUS_LYNKS = 20_u32
  PROV_RNG = 21_u32
  PROV_INTEL_SEC = 22_u32
  PROV_REPLACE_OWF = 23_u32
  PROV_RSA_AES = 24_u32
  PROV_STT_MER = 7_u32
  PROV_STT_ACQ = 8_u32
  PROV_STT_BRND = 9_u32
  PROV_STT_ROOT = 10_u32
  PROV_STT_ISS = 11_u32
  MS_DEF_PROV_A = "Microsoft Base Cryptographic Provider v1.0"
  MS_DEF_PROV_W = "Microsoft Base Cryptographic Provider v1.0"
  MS_DEF_PROV = "Microsoft Base Cryptographic Provider v1.0"
  MS_ENHANCED_PROV_A = "Microsoft Enhanced Cryptographic Provider v1.0"
  MS_ENHANCED_PROV_W = "Microsoft Enhanced Cryptographic Provider v1.0"
  MS_ENHANCED_PROV = "Microsoft Enhanced Cryptographic Provider v1.0"
  MS_STRONG_PROV_A = "Microsoft Strong Cryptographic Provider"
  MS_STRONG_PROV_W = "Microsoft Strong Cryptographic Provider"
  MS_STRONG_PROV = "Microsoft Strong Cryptographic Provider"
  MS_DEF_RSA_SIG_PROV_A = "Microsoft RSA Signature Cryptographic Provider"
  MS_DEF_RSA_SIG_PROV_W = "Microsoft RSA Signature Cryptographic Provider"
  MS_DEF_RSA_SIG_PROV = "Microsoft RSA Signature Cryptographic Provider"
  MS_DEF_RSA_SCHANNEL_PROV_A = "Microsoft RSA SChannel Cryptographic Provider"
  MS_DEF_RSA_SCHANNEL_PROV_W = "Microsoft RSA SChannel Cryptographic Provider"
  MS_DEF_RSA_SCHANNEL_PROV = "Microsoft RSA SChannel Cryptographic Provider"
  MS_DEF_DSS_PROV_A = "Microsoft Base DSS Cryptographic Provider"
  MS_DEF_DSS_PROV_W = "Microsoft Base DSS Cryptographic Provider"
  MS_DEF_DSS_PROV = "Microsoft Base DSS Cryptographic Provider"
  MS_DEF_DSS_DH_PROV_A = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
  MS_DEF_DSS_DH_PROV_W = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
  MS_DEF_DSS_DH_PROV = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
  MS_ENH_DSS_DH_PROV_A = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
  MS_ENH_DSS_DH_PROV_W = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
  MS_ENH_DSS_DH_PROV = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
  MS_DEF_DH_SCHANNEL_PROV_A = "Microsoft DH SChannel Cryptographic Provider"
  MS_DEF_DH_SCHANNEL_PROV_W = "Microsoft DH SChannel Cryptographic Provider"
  MS_DEF_DH_SCHANNEL_PROV = "Microsoft DH SChannel Cryptographic Provider"
  MS_SCARD_PROV_A = "Microsoft Base Smart Card Crypto Provider"
  MS_SCARD_PROV_W = "Microsoft Base Smart Card Crypto Provider"
  MS_SCARD_PROV = "Microsoft Base Smart Card Crypto Provider"
  MS_ENH_RSA_AES_PROV_A = "Microsoft Enhanced RSA and AES Cryptographic Provider"
  MS_ENH_RSA_AES_PROV_W = "Microsoft Enhanced RSA and AES Cryptographic Provider"
  MS_ENH_RSA_AES_PROV_XP_A = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
  MS_ENH_RSA_AES_PROV_XP_W = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
  MS_ENH_RSA_AES_PROV_XP = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
  MS_ENH_RSA_AES_PROV = "Microsoft Enhanced RSA and AES Cryptographic Provider"
  MAXUIDLEN = 64_u32
  EXPO_OFFLOAD_REG_VALUE = "ExpoOffload"
  EXPO_OFFLOAD_FUNC_NAME = "OffloadModExpo"
  Szkey_cryptoapi_private_key_options = "Software\\Policies\\Microsoft\\Cryptography"
  Szkey_cache_enabled = "CachePrivateKeys"
  Szkey_cache_seconds = "PrivateKeyLifetimeSeconds"
  Szpriv_key_cache_max_items = "PrivKeyCacheMaxItems"
  Cpriv_key_cache_max_items_default = 20_u32
  Szpriv_key_cache_purge_interval_seconds = "PrivKeyCachePurgeIntervalSeconds"
  Cpriv_key_cache_purge_interval_seconds_default = 86400_u32
  CUR_BLOB_VERSION = 2_u32
  SCHANNEL_MAC_KEY = 0_u32
  SCHANNEL_ENC_KEY = 1_u32
  INTERNATIONAL_USAGE = 1_u32
  Szoid_rsa = "1.2.840.113549"
  Szoid_pkcs = "1.2.840.113549.1"
  Szoid_rsa_hash = "1.2.840.113549.2"
  Szoid_rsa_encrypt = "1.2.840.113549.3"
  Szoid_pkcs_1 = "1.2.840.113549.1.1"
  Szoid_pkcs_2 = "1.2.840.113549.1.2"
  Szoid_pkcs_3 = "1.2.840.113549.1.3"
  Szoid_pkcs_4 = "1.2.840.113549.1.4"
  Szoid_pkcs_5 = "1.2.840.113549.1.5"
  Szoid_pkcs_6 = "1.2.840.113549.1.6"
  Szoid_pkcs_7 = "1.2.840.113549.1.7"
  Szoid_pkcs_8 = "1.2.840.113549.1.8"
  Szoid_pkcs_9 = "1.2.840.113549.1.9"
  Szoid_pkcs_10 = "1.2.840.113549.1.10"
  Szoid_pkcs_12 = "1.2.840.113549.1.12"
  Szoid_rsa_rsa = "1.2.840.113549.1.1.1"
  Szoid_rsa_md2rsa = "1.2.840.113549.1.1.2"
  Szoid_rsa_md4rsa = "1.2.840.113549.1.1.3"
  Szoid_rsa_md5rsa = "1.2.840.113549.1.1.4"
  Szoid_rsa_sha1rsa = "1.2.840.113549.1.1.5"
  Szoid_rsa_setoaep_rsa = "1.2.840.113549.1.1.6"
  Szoid_rsaes_oaep = "1.2.840.113549.1.1.7"
  Szoid_rsa_mgf1 = "1.2.840.113549.1.1.8"
  Szoid_rsa_pspecified = "1.2.840.113549.1.1.9"
  Szoid_rsa_ssa_pss = "1.2.840.113549.1.1.10"
  Szoid_rsa_sha256rsa = "1.2.840.113549.1.1.11"
  Szoid_rsa_sha384rsa = "1.2.840.113549.1.1.12"
  Szoid_rsa_sha512rsa = "1.2.840.113549.1.1.13"
  Szoid_rsa_dh = "1.2.840.113549.1.3.1"
  Szoid_rsa_data = "1.2.840.113549.1.7.1"
  Szoid_rsa_signeddata = "1.2.840.113549.1.7.2"
  Szoid_rsa_envelopeddata = "1.2.840.113549.1.7.3"
  Szoid_rsa_signenvdata = "1.2.840.113549.1.7.4"
  Szoid_rsa_digesteddata = "1.2.840.113549.1.7.5"
  Szoid_rsa_hasheddata = "1.2.840.113549.1.7.5"
  Szoid_rsa_encrypteddata = "1.2.840.113549.1.7.6"
  Szoid_rsa_emailaddr = "1.2.840.113549.1.9.1"
  Szoid_rsa_unstructname = "1.2.840.113549.1.9.2"
  Szoid_rsa_contenttype = "1.2.840.113549.1.9.3"
  Szoid_rsa_messagedigest = "1.2.840.113549.1.9.4"
  Szoid_rsa_signingtime = "1.2.840.113549.1.9.5"
  Szoid_rsa_countersign = "1.2.840.113549.1.9.6"
  Szoid_rsa_challengepwd = "1.2.840.113549.1.9.7"
  Szoid_rsa_unstructaddr = "1.2.840.113549.1.9.8"
  Szoid_rsa_extcertattrs = "1.2.840.113549.1.9.9"
  Szoid_rsa_certextensions = "1.2.840.113549.1.9.14"
  Szoid_rsa_smimecapabilities = "1.2.840.113549.1.9.15"
  Szoid_rsa_prefersigneddata = "1.2.840.113549.1.9.15.1"
  Szoid_timestamp_token = "1.2.840.113549.1.9.16.1.4"
  Szoid_rfc3161_countersign = "1.3.6.1.4.1.311.3.3.1"
  Szoid_rsa_smimealg = "1.2.840.113549.1.9.16.3"
  Szoid_rsa_smimealgesdh = "1.2.840.113549.1.9.16.3.5"
  Szoid_rsa_smimealgcms3deswrap = "1.2.840.113549.1.9.16.3.6"
  Szoid_rsa_smimealgcmsrc2wrap = "1.2.840.113549.1.9.16.3.7"
  Szoid_rsa_md2 = "1.2.840.113549.2.2"
  Szoid_rsa_md4 = "1.2.840.113549.2.4"
  Szoid_rsa_md5 = "1.2.840.113549.2.5"
  Szoid_rsa_rc2cbc = "1.2.840.113549.3.2"
  Szoid_rsa_rc4 = "1.2.840.113549.3.4"
  Szoid_rsa_des_ede3_cbc = "1.2.840.113549.3.7"
  Szoid_rsa_rc5_cbcpad = "1.2.840.113549.3.9"
  Szoid_ansi_x942 = "1.2.840.10046"
  Szoid_ansi_x942_dh = "1.2.840.10046.2.1"
  Szoid_x957 = "1.2.840.10040"
  Szoid_x957_dsa = "1.2.840.10040.4.1"
  Szoid_x957_sha1dsa = "1.2.840.10040.4.3"
  Szoid_ecc_public_key = "1.2.840.10045.2.1"
  Szoid_ecc_curve_p256 = "1.2.840.10045.3.1.7"
  Szoid_ecc_curve_p384 = "1.3.132.0.34"
  Szoid_ecc_curve_p521 = "1.3.132.0.35"
  Szoid_ecc_curve_brainpoolp160r1 = "1.3.36.3.3.2.8.1.1.1"
  Szoid_ecc_curve_brainpoolp160t1 = "1.3.36.3.3.2.8.1.1.2"
  Szoid_ecc_curve_brainpoolp192r1 = "1.3.36.3.3.2.8.1.1.3"
  Szoid_ecc_curve_brainpoolp192t1 = "1.3.36.3.3.2.8.1.1.4"
  Szoid_ecc_curve_brainpoolp224r1 = "1.3.36.3.3.2.8.1.1.5"
  Szoid_ecc_curve_brainpoolp224t1 = "1.3.36.3.3.2.8.1.1.6"
  Szoid_ecc_curve_brainpoolp256r1 = "1.3.36.3.3.2.8.1.1.7"
  Szoid_ecc_curve_brainpoolp256t1 = "1.3.36.3.3.2.8.1.1.8"
  Szoid_ecc_curve_brainpoolp320r1 = "1.3.36.3.3.2.8.1.1.9"
  Szoid_ecc_curve_brainpoolp320t1 = "1.3.36.3.3.2.8.1.1.10"
  Szoid_ecc_curve_brainpoolp384r1 = "1.3.36.3.3.2.8.1.1.11"
  Szoid_ecc_curve_brainpoolp384t1 = "1.3.36.3.3.2.8.1.1.12"
  Szoid_ecc_curve_brainpoolp512r1 = "1.3.36.3.3.2.8.1.1.13"
  Szoid_ecc_curve_brainpoolp512t1 = "1.3.36.3.3.2.8.1.1.14"
  Szoid_ecc_curve_ec192wapi = "1.2.156.11235.1.1.2.1"
  Szoid_cn_ecdsa_sha256 = "1.2.156.11235.1.1.1"
  Szoid_ecc_curve_nistp192 = "1.2.840.10045.3.1.1"
  Szoid_ecc_curve_nistp224 = "1.3.132.0.33"
  Szoid_ecc_curve_nistp256 = "1.2.840.10045.3.1.7"
  Szoid_ecc_curve_nistp384 = "1.3.132.0.34"
  Szoid_ecc_curve_nistp521 = "1.3.132.0.35"
  Szoid_ecc_curve_secp160k1 = "1.3.132.0.9"
  Szoid_ecc_curve_secp160r1 = "1.3.132.0.8"
  Szoid_ecc_curve_secp160r2 = "1.3.132.0.30"
  Szoid_ecc_curve_secp192k1 = "1.3.132.0.31"
  Szoid_ecc_curve_secp192r1 = "1.2.840.10045.3.1.1"
  Szoid_ecc_curve_secp224k1 = "1.3.132.0.32"
  Szoid_ecc_curve_secp224r1 = "1.3.132.0.33"
  Szoid_ecc_curve_secp256k1 = "1.3.132.0.10"
  Szoid_ecc_curve_secp256r1 = "1.2.840.10045.3.1.7"
  Szoid_ecc_curve_secp384r1 = "1.3.132.0.34"
  Szoid_ecc_curve_secp521r1 = "1.3.132.0.35"
  Szoid_ecc_curve_wtls7 = "1.3.132.0.30"
  Szoid_ecc_curve_wtls9 = "2.23.43.1.4.9"
  Szoid_ecc_curve_wtls12 = "1.3.132.0.33"
  Szoid_ecc_curve_x962p192v1 = "1.2.840.10045.3.1.1"
  Szoid_ecc_curve_x962p192v2 = "1.2.840.10045.3.1.2"
  Szoid_ecc_curve_x962p192v3 = "1.2.840.10045.3.1.3"
  Szoid_ecc_curve_x962p239v1 = "1.2.840.10045.3.1.4"
  Szoid_ecc_curve_x962p239v2 = "1.2.840.10045.3.1.5"
  Szoid_ecc_curve_x962p239v3 = "1.2.840.10045.3.1.6"
  Szoid_ecc_curve_x962p256v1 = "1.2.840.10045.3.1.7"
  Szoid_ecdsa_sha1 = "1.2.840.10045.4.1"
  Szoid_ecdsa_specified = "1.2.840.10045.4.3"
  Szoid_ecdsa_sha256 = "1.2.840.10045.4.3.2"
  Szoid_ecdsa_sha384 = "1.2.840.10045.4.3.3"
  Szoid_ecdsa_sha512 = "1.2.840.10045.4.3.4"
  Szoid_nist_aes128_cbc = "2.16.840.1.101.3.4.1.2"
  Szoid_nist_aes192_cbc = "2.16.840.1.101.3.4.1.22"
  Szoid_nist_aes256_cbc = "2.16.840.1.101.3.4.1.42"
  Szoid_nist_aes128_wrap = "2.16.840.1.101.3.4.1.5"
  Szoid_nist_aes192_wrap = "2.16.840.1.101.3.4.1.25"
  Szoid_nist_aes256_wrap = "2.16.840.1.101.3.4.1.45"
  Szoid_dh_single_pass_stddh_sha1_kdf = "1.3.133.16.840.63.0.2"
  Szoid_dh_single_pass_stddh_sha256_kdf = "1.3.132.1.11.1"
  Szoid_dh_single_pass_stddh_sha384_kdf = "1.3.132.1.11.2"
  Szoid_ds = "2.5"
  Szoid_dsalg = "2.5.8"
  Szoid_dsalg_crpt = "2.5.8.1"
  Szoid_dsalg_hash = "2.5.8.2"
  Szoid_dsalg_sign = "2.5.8.3"
  Szoid_dsalg_rsa = "2.5.8.1.1"
  Szoid_oiw = "1.3.14"
  Szoid_oiwsec = "1.3.14.3.2"
  Szoid_oiwsec_md4rsa = "1.3.14.3.2.2"
  Szoid_oiwsec_md5rsa = "1.3.14.3.2.3"
  Szoid_oiwsec_md4rsa2 = "1.3.14.3.2.4"
  Szoid_oiwsec_desecb = "1.3.14.3.2.6"
  Szoid_oiwsec_descbc = "1.3.14.3.2.7"
  Szoid_oiwsec_desofb = "1.3.14.3.2.8"
  Szoid_oiwsec_descfb = "1.3.14.3.2.9"
  Szoid_oiwsec_desmac = "1.3.14.3.2.10"
  Szoid_oiwsec_rsasign = "1.3.14.3.2.11"
  Szoid_oiwsec_dsa = "1.3.14.3.2.12"
  Szoid_oiwsec_shadsa = "1.3.14.3.2.13"
  Szoid_oiwsec_mdc2rsa = "1.3.14.3.2.14"
  Szoid_oiwsec_sharsa = "1.3.14.3.2.15"
  Szoid_oiwsec_dhcommmod = "1.3.14.3.2.16"
  Szoid_oiwsec_desede = "1.3.14.3.2.17"
  Szoid_oiwsec_sha = "1.3.14.3.2.18"
  Szoid_oiwsec_mdc2 = "1.3.14.3.2.19"
  Szoid_oiwsec_dsacomm = "1.3.14.3.2.20"
  Szoid_oiwsec_dsacommsha = "1.3.14.3.2.21"
  Szoid_oiwsec_rsaxchg = "1.3.14.3.2.22"
  Szoid_oiwsec_keyhashseal = "1.3.14.3.2.23"
  Szoid_oiwsec_md2rsasign = "1.3.14.3.2.24"
  Szoid_oiwsec_md5rsasign = "1.3.14.3.2.25"
  Szoid_oiwsec_sha1 = "1.3.14.3.2.26"
  Szoid_oiwsec_dsasha1 = "1.3.14.3.2.27"
  Szoid_oiwsec_dsacommsha1 = "1.3.14.3.2.28"
  Szoid_oiwsec_sha1rsasign = "1.3.14.3.2.29"
  Szoid_oiwdir = "1.3.14.7.2"
  Szoid_oiwdir_crpt = "1.3.14.7.2.1"
  Szoid_oiwdir_hash = "1.3.14.7.2.2"
  Szoid_oiwdir_sign = "1.3.14.7.2.3"
  Szoid_oiwdir_md2 = "1.3.14.7.2.2.1"
  Szoid_oiwdir_md2rsa = "1.3.14.7.2.3.1"
  Szoid_infosec = "2.16.840.1.101.2.1"
  Szoid_infosec_sdnssignature = "2.16.840.1.101.2.1.1.1"
  Szoid_infosec_mosaicsignature = "2.16.840.1.101.2.1.1.2"
  Szoid_infosec_sdnsconfidentiality = "2.16.840.1.101.2.1.1.3"
  Szoid_infosec_mosaicconfidentiality = "2.16.840.1.101.2.1.1.4"
  Szoid_infosec_sdnsintegrity = "2.16.840.1.101.2.1.1.5"
  Szoid_infosec_mosaicintegrity = "2.16.840.1.101.2.1.1.6"
  Szoid_infosec_sdnstokenprotection = "2.16.840.1.101.2.1.1.7"
  Szoid_infosec_mosaictokenprotection = "2.16.840.1.101.2.1.1.8"
  Szoid_infosec_sdnskeymanagement = "2.16.840.1.101.2.1.1.9"
  Szoid_infosec_mosaickeymanagement = "2.16.840.1.101.2.1.1.10"
  Szoid_infosec_sdnskmandsig = "2.16.840.1.101.2.1.1.11"
  Szoid_infosec_mosaickmandsig = "2.16.840.1.101.2.1.1.12"
  Szoid_infosec_suiteasignature = "2.16.840.1.101.2.1.1.13"
  Szoid_infosec_suiteaconfidentiality = "2.16.840.1.101.2.1.1.14"
  Szoid_infosec_suiteaintegrity = "2.16.840.1.101.2.1.1.15"
  Szoid_infosec_suiteatokenprotection = "2.16.840.1.101.2.1.1.16"
  Szoid_infosec_suiteakeymanagement = "2.16.840.1.101.2.1.1.17"
  Szoid_infosec_suiteakmandsig = "2.16.840.1.101.2.1.1.18"
  Szoid_infosec_mosaicupdatedsig = "2.16.840.1.101.2.1.1.19"
  Szoid_infosec_mosaickmandupdsig = "2.16.840.1.101.2.1.1.20"
  Szoid_infosec_mosaicupdatedinteg = "2.16.840.1.101.2.1.1.21"
  Szoid_nist_sha256 = "2.16.840.1.101.3.4.2.1"
  Szoid_nist_sha384 = "2.16.840.1.101.3.4.2.2"
  Szoid_nist_sha512 = "2.16.840.1.101.3.4.2.3"
  Szoid_common_name = "2.5.4.3"
  Szoid_sur_name = "2.5.4.4"
  Szoid_device_serial_number = "2.5.4.5"
  Szoid_country_name = "2.5.4.6"
  Szoid_locality_name = "2.5.4.7"
  Szoid_state_or_province_name = "2.5.4.8"
  Szoid_street_address = "2.5.4.9"
  Szoid_organization_name = "2.5.4.10"
  Szoid_organizational_unit_name = "2.5.4.11"
  Szoid_title = "2.5.4.12"
  Szoid_description = "2.5.4.13"
  Szoid_search_guide = "2.5.4.14"
  Szoid_business_category = "2.5.4.15"
  Szoid_postal_address = "2.5.4.16"
  Szoid_postal_code = "2.5.4.17"
  Szoid_post_office_box = "2.5.4.18"
  Szoid_physical_delivery_office_name = "2.5.4.19"
  Szoid_telephone_number = "2.5.4.20"
  Szoid_telex_number = "2.5.4.21"
  Szoid_teletext_terminal_identifier = "2.5.4.22"
  Szoid_facsimile_telephone_number = "2.5.4.23"
  Szoid_x21_address = "2.5.4.24"
  Szoid_international_isdn_number = "2.5.4.25"
  Szoid_registered_address = "2.5.4.26"
  Szoid_destination_indicator = "2.5.4.27"
  Szoid_preferred_delivery_method = "2.5.4.28"
  Szoid_presentation_address = "2.5.4.29"
  Szoid_supported_application_context = "2.5.4.30"
  Szoid_member = "2.5.4.31"
  Szoid_owner = "2.5.4.32"
  Szoid_role_occupant = "2.5.4.33"
  Szoid_see_also = "2.5.4.34"
  Szoid_user_password = "2.5.4.35"
  Szoid_user_certificate = "2.5.4.36"
  Szoid_ca_certificate = "2.5.4.37"
  Szoid_authority_revocation_list = "2.5.4.38"
  Szoid_certificate_revocation_list = "2.5.4.39"
  Szoid_cross_certificate_pair = "2.5.4.40"
  Szoid_given_name = "2.5.4.42"
  Szoid_initials = "2.5.4.43"
  Szoid_dn_qualifier = "2.5.4.46"
  Szoid_domain_component = "0.9.2342.19200300.100.1.25"
  Szoid_pkcs_12_friendly_name_attr = "1.2.840.113549.1.9.20"
  Szoid_pkcs_12_local_key_id = "1.2.840.113549.1.9.21"
  Szoid_pkcs_12_key_provider_name_attr = "1.3.6.1.4.1.311.17.1"
  Szoid_local_machine_keyset = "1.3.6.1.4.1.311.17.2"
  Szoid_pkcs_12_extended_attributes = "1.3.6.1.4.1.311.17.3"
  Szoid_pkcs_12_protected_password_secret_bag_type_id = "1.3.6.1.4.1.311.17.4"
  Szoid_keyid_rdn = "1.3.6.1.4.1.311.10.7.1"
  Szoid_ev_rdn_locale = "1.3.6.1.4.1.311.60.2.1.1"
  Szoid_ev_rdn_state_or_province = "1.3.6.1.4.1.311.60.2.1.2"
  Szoid_ev_rdn_country = "1.3.6.1.4.1.311.60.2.1.3"
  CERT_RDN_TYPE_MASK = 255_u32
  CERT_RDN_FLAGS_MASK = 4278190080_u32
  CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648_u32
  CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912_u32
  CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456_u32
  CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824_u32
  CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216_u32
  CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432_u32
  CERT_RSA_PUBLIC_KEY_OBJID = "1.2.840.113549.1.1.1"
  CERT_DEFAULT_OID_PUBLIC_KEY_SIGN = "1.2.840.113549.1.1.1"
  CERT_DEFAULT_OID_PUBLIC_KEY_XCHG = "1.2.840.113549.1.1.1"
  CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1_u32
  CERT_V1 = 0_u32
  CERT_V2 = 1_u32
  CERT_V3 = 2_u32
  CERT_INFO_VERSION_FLAG = 1_u32
  CERT_INFO_SERIAL_NUMBER_FLAG = 2_u32
  CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3_u32
  CERT_INFO_ISSUER_FLAG = 4_u32
  CERT_INFO_NOT_BEFORE_FLAG = 5_u32
  CERT_INFO_NOT_AFTER_FLAG = 6_u32
  CERT_INFO_SUBJECT_FLAG = 7_u32
  CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8_u32
  CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9_u32
  CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10_u32
  CERT_INFO_EXTENSION_FLAG = 11_u32
  CRL_V1 = 0_u32
  CRL_V2 = 1_u32
  CERT_BUNDLE_CERTIFICATE = 0_u32
  CERT_BUNDLE_CRL = 1_u32
  CERT_REQUEST_V1 = 0_u32
  CERT_KEYGEN_REQUEST_V1 = 0_u32
  CTL_V1 = 0_u32
  CERT_ENCODING_TYPE_MASK = 65535_u32
  CMSG_ENCODING_TYPE_MASK = 4294901760_u32
  CRYPT_ASN_ENCODING = 1_u32
  CRYPT_NDR_ENCODING = 2_u32
  X509_NDR_ENCODING = 2_u32
  PKCS_7_NDR_ENCODING = 131072_u32
  CRYPT_FORMAT_STR_MULTI_LINE = 1_u32
  CRYPT_FORMAT_STR_NO_HEX = 16_u32
  CRYPT_FORMAT_SIMPLE = 1_u32
  CRYPT_FORMAT_X509 = 2_u32
  CRYPT_FORMAT_OID = 4_u32
  CRYPT_FORMAT_RDN_SEMICOLON = 256_u32
  CRYPT_FORMAT_RDN_CRLF = 512_u32
  CRYPT_FORMAT_RDN_UNQUOTE = 1024_u32
  CRYPT_FORMAT_RDN_REVERSE = 2048_u32
  CRYPT_FORMAT_COMMA = 4096_u32
  CRYPT_FORMAT_SEMICOLON = 256_u32
  CRYPT_FORMAT_CRLF = 512_u32
  CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8_u32
  CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456_u32
  CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536_u32
  CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144_u32
  CRYPT_DECODE_NOCOPY_FLAG = 1_u32
  CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2_u32
  CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4_u32
  CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8_u32
  CRYPT_DECODE_ALLOC_FLAG = 32768_u32
  CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216_u32
  CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432_u32
  CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864_u32
  CRYPT_ENCODE_DECODE_NONE = 0_u32
  X509_CERT = 1_i32
  X509_CERT_TO_BE_SIGNED = 2_i32
  X509_CERT_CRL_TO_BE_SIGNED = 3_i32
  X509_CERT_REQUEST_TO_BE_SIGNED = 4_i32
  X509_EXTENSIONS = 5_i32
  X509_NAME_VALUE = 6_i32
  X509_NAME = 7_i32
  X509_PUBLIC_KEY_INFO = 8_i32
  X509_AUTHORITY_KEY_ID = 9_i32
  X509_KEY_ATTRIBUTES = 10_i32
  X509_KEY_USAGE_RESTRICTION = 11_i32
  X509_ALTERNATE_NAME = 12_i32
  X509_BASIC_CONSTRAINTS = 13_i32
  X509_KEY_USAGE = 14_i32
  X509_BASIC_CONSTRAINTS2 = 15_i32
  X509_CERT_POLICIES = 16_i32
  PKCS_UTC_TIME = 17_i32
  PKCS_TIME_REQUEST = 18_i32
  RSA_CSP_PUBLICKEYBLOB = 19_i32
  X509_UNICODE_NAME = 20_i32
  X509_KEYGEN_REQUEST_TO_BE_SIGNED = 21_i32
  PKCS_ATTRIBUTE = 22_i32
  PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 23_i32
  X509_UNICODE_NAME_VALUE = 24_i32
  X509_ANY_STRING = 6_i32
  X509_UNICODE_ANY_STRING = 24_i32
  X509_OCTET_STRING = 25_i32
  X509_BITS = 26_i32
  X509_INTEGER = 27_i32
  X509_MULTI_BYTE_INTEGER = 28_i32
  X509_ENUMERATED = 29_i32
  X509_CHOICE_OF_TIME = 30_i32
  X509_AUTHORITY_KEY_ID2 = 31_i32
  X509_AUTHORITY_INFO_ACCESS = 32_i32
  X509_SUBJECT_INFO_ACCESS = 32_i32
  X509_CRL_REASON_CODE = 29_i32
  PKCS_CONTENT_INFO = 33_i32
  X509_SEQUENCE_OF_ANY = 34_i32
  X509_CRL_DIST_POINTS = 35_i32
  X509_ENHANCED_KEY_USAGE = 36_i32
  PKCS_CTL = 37_i32
  X509_MULTI_BYTE_UINT = 38_i32
  X509_DSS_PUBLICKEY = 38_i32
  X509_DSS_PARAMETERS = 39_i32
  X509_DSS_SIGNATURE = 40_i32
  PKCS_RC2_CBC_PARAMETERS = 41_i32
  PKCS_SMIME_CAPABILITIES = 42_i32
  X509_QC_STATEMENTS_EXT = 42_i32
  PKCS_RSA_PRIVATE_KEY = 43_i32
  PKCS_PRIVATE_KEY_INFO = 44_i32
  PKCS_ENCRYPTED_PRIVATE_KEY_INFO = 45_i32
  X509_PKIX_POLICY_QUALIFIER_USERNOTICE = 46_i32
  X509_DH_PUBLICKEY = 38_i32
  X509_DH_PARAMETERS = 47_i32
  PKCS_ATTRIBUTES = 48_i32
  PKCS_SORTED_CTL = 49_i32
  X509_ECC_SIGNATURE = 47_i32
  X942_DH_PARAMETERS = 50_i32
  X509_BITS_WITHOUT_TRAILING_ZEROES = 51_i32
  X942_OTHER_INFO = 52_i32
  X509_CERT_PAIR = 53_i32
  X509_ISSUING_DIST_POINT = 54_i32
  X509_NAME_CONSTRAINTS = 55_i32
  X509_POLICY_MAPPINGS = 56_i32
  X509_POLICY_CONSTRAINTS = 57_i32
  X509_CROSS_CERT_DIST_POINTS = 58_i32
  CMC_DATA = 59_i32
  CMC_RESPONSE = 60_i32
  CMC_STATUS = 61_i32
  CMC_ADD_EXTENSIONS = 62_i32
  CMC_ADD_ATTRIBUTES = 63_i32
  X509_CERTIFICATE_TEMPLATE = 64_i32
  OCSP_SIGNED_REQUEST = 65_i32
  OCSP_REQUEST = 66_i32
  OCSP_RESPONSE = 67_i32
  OCSP_BASIC_SIGNED_RESPONSE = 68_i32
  OCSP_BASIC_RESPONSE = 69_i32
  X509_LOGOTYPE_EXT = 70_i32
  X509_BIOMETRIC_EXT = 71_i32
  CNG_RSA_PUBLIC_KEY_BLOB = 72_i32
  X509_OBJECT_IDENTIFIER = 73_i32
  X509_ALGORITHM_IDENTIFIER = 74_i32
  PKCS_RSA_SSA_PSS_PARAMETERS = 75_i32
  PKCS_RSAES_OAEP_PARAMETERS = 76_i32
  ECC_CMS_SHARED_INFO = 77_i32
  TIMESTAMP_REQUEST = 78_i32
  TIMESTAMP_RESPONSE = 79_i32
  TIMESTAMP_INFO = 80_i32
  X509_CERT_BUNDLE = 81_i32
  X509_ECC_PRIVATE_KEY = 82_i32
  CNG_RSA_PRIVATE_KEY_BLOB = 83_i32
  X509_SUBJECT_DIR_ATTRS = 84_i32
  X509_ECC_PARAMETERS = 85_i32
  PKCS7_SIGNER_INFO = 500_i32
  CMS_SIGNER_INFO = 501_i32
  Szoid_authority_key_identifier = "2.5.29.1"
  Szoid_key_attributes = "2.5.29.2"
  Szoid_cert_policies_95 = "2.5.29.3"
  Szoid_key_usage_restriction = "2.5.29.4"
  Szoid_subject_alt_name = "2.5.29.7"
  Szoid_issuer_alt_name = "2.5.29.8"
  Szoid_basic_constraints = "2.5.29.10"
  Szoid_key_usage = "2.5.29.15"
  Szoid_privatekey_usage_period = "2.5.29.16"
  Szoid_basic_constraints2 = "2.5.29.19"
  Szoid_cert_policies = "2.5.29.32"
  Szoid_any_cert_policy = "2.5.29.32.0"
  Szoid_inhibit_any_policy = "2.5.29.54"
  Szoid_authority_key_identifier2 = "2.5.29.35"
  Szoid_subject_key_identifier = "2.5.29.14"
  Szoid_subject_alt_name2 = "2.5.29.17"
  Szoid_issuer_alt_name2 = "2.5.29.18"
  Szoid_crl_reason_code = "2.5.29.21"
  Szoid_reason_code_hold = "2.5.29.23"
  Szoid_crl_dist_points = "2.5.29.31"
  Szoid_enhanced_key_usage = "2.5.29.37"
  Szoid_any_enhanced_key_usage = "2.5.29.37.0"
  Szoid_crl_number = "2.5.29.20"
  Szoid_delta_crl_indicator = "2.5.29.27"
  Szoid_issuing_dist_point = "2.5.29.28"
  Szoid_freshest_crl = "2.5.29.46"
  Szoid_name_constraints = "2.5.29.30"
  Szoid_policy_mappings = "2.5.29.33"
  Szoid_legacy_policy_mappings = "2.5.29.5"
  Szoid_policy_constraints = "2.5.29.36"
  Szoid_renewal_certificate = "1.3.6.1.4.1.311.13.1"
  Szoid_enrollment_name_value_pair = "1.3.6.1.4.1.311.13.2.1"
  Szoid_enrollment_csp_provider = "1.3.6.1.4.1.311.13.2.2"
  Szoid_os_version = "1.3.6.1.4.1.311.13.2.3"
  Szoid_enrollment_agent = "1.3.6.1.4.1.311.20.2.1"
  Szoid_pkix = "1.3.6.1.5.5.7"
  Szoid_pkix_pe = "1.3.6.1.5.5.7.1"
  Szoid_authority_info_access = "1.3.6.1.5.5.7.1.1"
  Szoid_subject_info_access = "1.3.6.1.5.5.7.1.11"
  Szoid_biometric_ext = "1.3.6.1.5.5.7.1.2"
  Szoid_qc_statements_ext = "1.3.6.1.5.5.7.1.3"
  Szoid_logotype_ext = "1.3.6.1.5.5.7.1.12"
  Szoid_tls_features_ext = "1.3.6.1.5.5.7.1.24"
  Szoid_cert_extensions = "1.3.6.1.4.1.311.2.1.14"
  Szoid_next_update_location = "1.3.6.1.4.1.311.10.2"
  Szoid_remove_certificate = "1.3.6.1.4.1.311.10.8.1"
  Szoid_cross_cert_dist_points = "1.3.6.1.4.1.311.10.9.1"
  Szoid_ctl = "1.3.6.1.4.1.311.10.1"
  Szoid_sorted_ctl = "1.3.6.1.4.1.311.10.1.1"
  Szoid_serialized = "1.3.6.1.4.1.311.10.3.3.1"
  Szoid_nt_principal_name = "1.3.6.1.4.1.311.20.2.3"
  Szoid_internationalized_email_address = "1.3.6.1.4.1.311.20.2.4"
  Szoid_product_update = "1.3.6.1.4.1.311.31.1"
  Szoid_any_application_policy = "1.3.6.1.4.1.311.10.12.1"
  Szoid_auto_enroll_ctl_usage = "1.3.6.1.4.1.311.20.1"
  Szoid_enroll_certtype_extension = "1.3.6.1.4.1.311.20.2"
  Szoid_cert_manifold = "1.3.6.1.4.1.311.20.3"
  Szoid_certsrv_ca_version = "1.3.6.1.4.1.311.21.1"
  Szoid_certsrv_previous_cert_hash = "1.3.6.1.4.1.311.21.2"
  Szoid_crl_virtual_base = "1.3.6.1.4.1.311.21.3"
  Szoid_crl_next_publish = "1.3.6.1.4.1.311.21.4"
  Szoid_kp_ca_exchange = "1.3.6.1.4.1.311.21.5"
  Szoid_kp_privacy_ca = "1.3.6.1.4.1.311.21.36"
  Szoid_kp_key_recovery_agent = "1.3.6.1.4.1.311.21.6"
  Szoid_certificate_template = "1.3.6.1.4.1.311.21.7"
  Szoid_enterprise_oid_root = "1.3.6.1.4.1.311.21.8"
  Szoid_rdn_dummy_signer = "1.3.6.1.4.1.311.21.9"
  Szoid_application_cert_policies = "1.3.6.1.4.1.311.21.10"
  Szoid_application_policy_mappings = "1.3.6.1.4.1.311.21.11"
  Szoid_application_policy_constraints = "1.3.6.1.4.1.311.21.12"
  Szoid_archived_key_attr = "1.3.6.1.4.1.311.21.13"
  Szoid_crl_self_cdp = "1.3.6.1.4.1.311.21.14"
  Szoid_require_cert_chain_policy = "1.3.6.1.4.1.311.21.15"
  Szoid_archived_key_cert_hash = "1.3.6.1.4.1.311.21.16"
  Szoid_issued_cert_hash = "1.3.6.1.4.1.311.21.17"
  Szoid_ds_email_replication = "1.3.6.1.4.1.311.21.19"
  Szoid_request_client_info = "1.3.6.1.4.1.311.21.20"
  Szoid_encrypted_key_hash = "1.3.6.1.4.1.311.21.21"
  Szoid_certsrv_crossca_version = "1.3.6.1.4.1.311.21.22"
  Szoid_ntds_replication = "1.3.6.1.4.1.311.25.1"
  Szoid_subject_dir_attrs = "2.5.29.9"
  Szoid_pkix_kp = "1.3.6.1.5.5.7.3"
  Szoid_pkix_kp_server_auth = "1.3.6.1.5.5.7.3.1"
  Szoid_pkix_kp_client_auth = "1.3.6.1.5.5.7.3.2"
  Szoid_pkix_kp_code_signing = "1.3.6.1.5.5.7.3.3"
  Szoid_pkix_kp_email_protection = "1.3.6.1.5.5.7.3.4"
  Szoid_pkix_kp_ipsec_end_system = "1.3.6.1.5.5.7.3.5"
  Szoid_pkix_kp_ipsec_tunnel = "1.3.6.1.5.5.7.3.6"
  Szoid_pkix_kp_ipsec_user = "1.3.6.1.5.5.7.3.7"
  Szoid_pkix_kp_timestamp_signing = "1.3.6.1.5.5.7.3.8"
  Szoid_pkix_kp_ocsp_signing = "1.3.6.1.5.5.7.3.9"
  Szoid_pkix_ocsp_nocheck = "1.3.6.1.5.5.7.48.1.5"
  Szoid_pkix_ocsp_nonce = "1.3.6.1.5.5.7.48.1.2"
  Szoid_ipsec_kp_ike_intermediate = "1.3.6.1.5.5.8.2.2"
  Szoid_pkinit_kp_kdc = "1.3.6.1.5.2.3.5"
  Szoid_kp_ctl_usage_signing = "1.3.6.1.4.1.311.10.3.1"
  Szoid_kp_time_stamp_signing = "1.3.6.1.4.1.311.10.3.2"
  Szoid_server_gated_crypto = "1.3.6.1.4.1.311.10.3.3"
  Szoid_sgc_netscape = "2.16.840.1.113730.4.1"
  Szoid_kp_efs = "1.3.6.1.4.1.311.10.3.4"
  Szoid_efs_recovery = "1.3.6.1.4.1.311.10.3.4.1"
  Szoid_whql_crypto = "1.3.6.1.4.1.311.10.3.5"
  Szoid_attest_whql_crypto = "1.3.6.1.4.1.311.10.3.5.1"
  Szoid_nt5_crypto = "1.3.6.1.4.1.311.10.3.6"
  Szoid_oem_whql_crypto = "1.3.6.1.4.1.311.10.3.7"
  Szoid_embedded_nt_crypto = "1.3.6.1.4.1.311.10.3.8"
  Szoid_root_list_signer = "1.3.6.1.4.1.311.10.3.9"
  Szoid_kp_qualified_subordination = "1.3.6.1.4.1.311.10.3.10"
  Szoid_kp_key_recovery = "1.3.6.1.4.1.311.10.3.11"
  Szoid_kp_document_signing = "1.3.6.1.4.1.311.10.3.12"
  Szoid_kp_lifetime_signing = "1.3.6.1.4.1.311.10.3.13"
  Szoid_kp_mobile_device_software = "1.3.6.1.4.1.311.10.3.14"
  Szoid_kp_smart_display = "1.3.6.1.4.1.311.10.3.15"
  Szoid_kp_csp_signature = "1.3.6.1.4.1.311.10.3.16"
  Szoid_kp_flight_signing = "1.3.6.1.4.1.311.10.3.27"
  Szoid_platform_manifest_binary_id = "1.3.6.1.4.1.311.10.3.28"
  Szoid_drm = "1.3.6.1.4.1.311.10.5.1"
  Szoid_drm_individualization = "1.3.6.1.4.1.311.10.5.2"
  Szoid_licenses = "1.3.6.1.4.1.311.10.6.1"
  Szoid_license_server = "1.3.6.1.4.1.311.10.6.2"
  Szoid_kp_smartcard_logon = "1.3.6.1.4.1.311.20.2.2"
  Szoid_kp_kernel_mode_code_signing = "1.3.6.1.4.1.311.61.1.1"
  Szoid_kp_kernel_mode_trusted_boot_signing = "1.3.6.1.4.1.311.61.4.1"
  Szoid_revoked_list_signer = "1.3.6.1.4.1.311.10.3.19"
  Szoid_windows_kits_signer = "1.3.6.1.4.1.311.10.3.20"
  Szoid_windows_rt_signer = "1.3.6.1.4.1.311.10.3.21"
  Szoid_protected_process_light_signer = "1.3.6.1.4.1.311.10.3.22"
  Szoid_windows_tcb_signer = "1.3.6.1.4.1.311.10.3.23"
  Szoid_protected_process_signer = "1.3.6.1.4.1.311.10.3.24"
  Szoid_windows_third_party_component_signer = "1.3.6.1.4.1.311.10.3.25"
  Szoid_windows_software_extension_signer = "1.3.6.1.4.1.311.10.3.26"
  Szoid_disallowed_list = "1.3.6.1.4.1.311.10.3.30"
  Szoid_pin_rules_signer = "1.3.6.1.4.1.311.10.3.31"
  Szoid_pin_rules_ctl = "1.3.6.1.4.1.311.10.3.32"
  Szoid_pin_rules_ext = "1.3.6.1.4.1.311.10.3.33"
  Szoid_pin_rules_domain_name = "1.3.6.1.4.1.311.10.3.34"
  Szoid_pin_rules_log_end_date_ext = "1.3.6.1.4.1.311.10.3.35"
  Szoid_ium_signing = "1.3.6.1.4.1.311.10.3.37"
  Szoid_ev_whql_crypto = "1.3.6.1.4.1.311.10.3.39"
  Szoid_biometric_signing = "1.3.6.1.4.1.311.10.3.41"
  Szoid_enclave_signing = "1.3.6.1.4.1.311.10.3.42"
  Szoid_sync_root_ctl_ext = "1.3.6.1.4.1.311.10.3.50"
  Szoid_hpkp_domain_name_ctl = "1.3.6.1.4.1.311.10.3.60"
  Szoid_hpkp_header_value_ctl = "1.3.6.1.4.1.311.10.3.61"
  Szoid_kp_kernel_mode_hal_extension_signing = "1.3.6.1.4.1.311.61.5.1"
  Szoid_windows_store_signer = "1.3.6.1.4.1.311.76.3.1"
  Szoid_dynamic_code_gen_signer = "1.3.6.1.4.1.311.76.5.1"
  Szoid_microsoft_publisher_signer = "1.3.6.1.4.1.311.76.8.1"
  Szoid_yesno_trust_attr = "1.3.6.1.4.1.311.10.4.1"
  Szoid_site_pin_rules_index_attr = "1.3.6.1.4.1.311.10.4.2"
  Szoid_site_pin_rules_flags_attr = "1.3.6.1.4.1.311.10.4.3"
  SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1_u32
  Szoid_pkix_policy_qualifier_cps = "1.3.6.1.5.5.7.2.1"
  Szoid_pkix_policy_qualifier_usernotice = "1.3.6.1.5.5.7.2.2"
  Szoid_root_program_flags = "1.3.6.1.4.1.311.60.1.1"
  CERT_ROOT_PROGRAM_FLAG_OU = 16_u32
  CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8_u32
  Szoid_cert_policies_95_qualifier1 = "2.16.840.1.113733.1.7.1.1"
  Szoid_rdn_tpm_manufacturer = "2.23.133.2.1"
  Szoid_rdn_tpm_model = "2.23.133.2.2"
  Szoid_rdn_tpm_version = "2.23.133.2.3"
  Szoid_rdn_tcg_platform_manufacturer = "2.23.133.2.4"
  Szoid_rdn_tcg_platform_model = "2.23.133.2.5"
  Szoid_rdn_tcg_platform_version = "2.23.133.2.6"
  Szoid_ct_cert_sctlist = "1.3.6.1.4.1.11129.2.4.2"
  Szoid_enroll_ek_info = "1.3.6.1.4.1.311.21.23"
  Szoid_enroll_aik_info = "1.3.6.1.4.1.311.21.39"
  Szoid_enroll_attestation_statement = "1.3.6.1.4.1.311.21.24"
  Szoid_enroll_ksp_name = "1.3.6.1.4.1.311.21.25"
  Szoid_enroll_ekpub_challenge = "1.3.6.1.4.1.311.21.26"
  Szoid_enroll_caxchgcert_hash = "1.3.6.1.4.1.311.21.27"
  Szoid_enroll_attestation_challenge = "1.3.6.1.4.1.311.21.28"
  Szoid_enroll_encryption_algorithm = "1.3.6.1.4.1.311.21.29"
  Szoid_kp_tpm_ek_certificate = "2.23.133.8.1"
  Szoid_kp_tpm_platform_certificate = "2.23.133.8.2"
  Szoid_kp_tpm_aik_certificate = "2.23.133.8.3"
  Szoid_enroll_ekverifykey = "1.3.6.1.4.1.311.21.30"
  Szoid_enroll_ekverifycert = "1.3.6.1.4.1.311.21.31"
  Szoid_enroll_ekverifycreds = "1.3.6.1.4.1.311.21.32"
  Szoid_enroll_scep_error = "1.3.6.1.4.1.311.21.33"
  Szoid_enroll_scep_server_state = "1.3.6.1.4.1.311.21.34"
  Szoid_enroll_scep_challenge_answer = "1.3.6.1.4.1.311.21.35"
  Szoid_enroll_scep_client_request = "1.3.6.1.4.1.311.21.37"
  Szoid_enroll_scep_server_message = "1.3.6.1.4.1.311.21.38"
  Szoid_enroll_scep_server_secret = "1.3.6.1.4.1.311.21.40"
  Szoid_enroll_key_affinity = "1.3.6.1.4.1.311.21.41"
  Szoid_enroll_scep_signer_hash = "1.3.6.1.4.1.311.21.42"
  Szoid_enroll_ek_ca_keyid = "1.3.6.1.4.1.311.21.43"
  Szoid_attr_supported_algorithms = "2.5.4.52"
  Szoid_attr_tpm_specification = "2.23.133.2.16"
  Szoid_attr_platform_specification = "2.23.133.2.17"
  Szoid_attr_tpm_security_assertions = "2.23.133.2.18"
  CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023_u32
  CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22_u32
  CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63_u32
  CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16_u32
  CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535_u32
  CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0_u32
  CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128_u32
  CERT_NON_REPUDIATION_KEY_USAGE = 64_u32
  CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32_u32
  CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16_u32
  CERT_KEY_AGREEMENT_KEY_USAGE = 8_u32
  CERT_KEY_CERT_SIGN_KEY_USAGE = 4_u32
  CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2_u32
  CERT_CRL_SIGN_KEY_USAGE = 2_u32
  CERT_ENCIPHER_ONLY_KEY_USAGE = 1_u32
  CERT_DECIPHER_ONLY_KEY_USAGE = 128_u32
  CERT_ALT_NAME_X400_ADDRESS = 4_u32
  CERT_ALT_NAME_EDI_PARTY_NAME = 6_u32
  CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255_u32
  CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16_u32
  CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535_u32
  CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0_u32
  CERT_CA_SUBJECT_FLAG = 128_u32
  CERT_END_ENTITY_SUBJECT_FLAG = 64_u32
  Szoid_pkix_acc_descr = "1.3.6.1.5.5.7.48"
  Szoid_pkix_ocsp = "1.3.6.1.5.5.7.48.1"
  Szoid_pkix_ca_issuers = "1.3.6.1.5.5.7.48.2"
  Szoid_pkix_time_stamping = "1.3.6.1.5.5.7.48.3"
  Szoid_pkix_ca_repository = "1.3.6.1.5.5.7.48.5"
  CRL_REASON_PRIVILEGE_WITHDRAWN = 9_u32
  CRL_REASON_AA_COMPROMISE = 10_u32
  CRL_DIST_POINT_NO_NAME = 0_u32
  CRL_DIST_POINT_FULL_NAME = 1_u32
  CRL_DIST_POINT_ISSUER_RDN_NAME = 2_u32
  CRL_REASON_UNUSED_FLAG = 128_u32
  CRL_REASON_KEY_COMPROMISE_FLAG = 64_u32
  CRL_REASON_CA_COMPROMISE_FLAG = 32_u32
  CRL_REASON_AFFILIATION_CHANGED_FLAG = 16_u32
  CRL_REASON_SUPERSEDED_FLAG = 8_u32
  CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4_u32
  CRL_REASON_CERTIFICATE_HOLD_FLAG = 2_u32
  CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1_u32
  CRL_REASON_AA_COMPROMISE_FLAG = 128_u32
  CRL_DIST_POINT_ERR_INDEX_MASK = 127_u32
  CRL_DIST_POINT_ERR_INDEX_SHIFT = 24_u32
  CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648_i32
  CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255_u32
  CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24_u32
  CERT_EXCLUDED_SUBTREE_BIT = -2147483648_i32
  SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1_u32
  CERT_DSS_R_LEN = 20_u32
  CERT_DSS_S_LEN = 20_u32
  CRYPT_X942_COUNTER_BYTE_LENGTH = 4_u32
  CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4_u32
  CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4_u32
  CRYPT_RC2_40BIT_VERSION = 160_u32
  CRYPT_RC2_56BIT_VERSION = 52_u32
  CRYPT_RC2_64BIT_VERSION = 120_u32
  CRYPT_RC2_128BIT_VERSION = 58_u32
  Szoid_qc_eu_compliance = "0.4.0.1862.1.1"
  Szoid_qc_sscd = "0.4.0.1862.1.4"
  PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1_u32
  Szoid_verisign_private_6_9 = "2.16.840.1.113733.1.6.9"
  Szoid_verisign_onsite_jurisdiction_hash = "2.16.840.1.113733.1.6.11"
  Szoid_verisign_bitstring_6_13 = "2.16.840.1.113733.1.6.13"
  Szoid_verisign_iss_strong_crypto = "2.16.840.1.113733.1.8.1"
  Szoidverisign_messagetype = "2.16.840.1.113733.1.9.2"
  Szoidverisign_pkistatus = "2.16.840.1.113733.1.9.3"
  Szoidverisign_failinfo = "2.16.840.1.113733.1.9.4"
  Szoidverisign_sendernonce = "2.16.840.1.113733.1.9.5"
  Szoidverisign_recipientnonce = "2.16.840.1.113733.1.9.6"
  Szoidverisign_transactionid = "2.16.840.1.113733.1.9.7"
  Szoid_netscape = "2.16.840.1.113730"
  Szoid_netscape_cert_extension = "2.16.840.1.113730.1"
  Szoid_netscape_cert_type = "2.16.840.1.113730.1.1"
  Szoid_netscape_base_url = "2.16.840.1.113730.1.2"
  Szoid_netscape_revocation_url = "2.16.840.1.113730.1.3"
  Szoid_netscape_ca_revocation_url = "2.16.840.1.113730.1.4"
  Szoid_netscape_cert_renewal_url = "2.16.840.1.113730.1.7"
  Szoid_netscape_ca_policy_url = "2.16.840.1.113730.1.8"
  Szoid_netscape_ssl_server_name = "2.16.840.1.113730.1.12"
  Szoid_netscape_comment = "2.16.840.1.113730.1.13"
  Szoid_netscape_data_type = "2.16.840.1.113730.2"
  Szoid_netscape_cert_sequence = "2.16.840.1.113730.2.5"
  NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128_u32
  NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64_u32
  NETSCAPE_SMIME_CERT_TYPE = 32_u32
  NETSCAPE_SIGN_CERT_TYPE = 16_u32
  NETSCAPE_SSL_CA_CERT_TYPE = 4_u32
  NETSCAPE_SMIME_CA_CERT_TYPE = 2_u32
  NETSCAPE_SIGN_CA_CERT_TYPE = 1_u32
  Szoid_ct_pki_data = "1.3.6.1.5.5.7.12.2"
  Szoid_ct_pki_response = "1.3.6.1.5.5.7.12.3"
  Szoid_pkix_no_signature = "1.3.6.1.5.5.7.6.2"
  Szoid_cmc = "1.3.6.1.5.5.7.7"
  Szoid_cmc_status_info = "1.3.6.1.5.5.7.7.1"
  Szoid_cmc_identification = "1.3.6.1.5.5.7.7.2"
  Szoid_cmc_identity_proof = "1.3.6.1.5.5.7.7.3"
  Szoid_cmc_data_return = "1.3.6.1.5.5.7.7.4"
  Szoid_cmc_transaction_id = "1.3.6.1.5.5.7.7.5"
  Szoid_cmc_sender_nonce = "1.3.6.1.5.5.7.7.6"
  Szoid_cmc_recipient_nonce = "1.3.6.1.5.5.7.7.7"
  Szoid_cmc_add_extensions = "1.3.6.1.5.5.7.7.8"
  Szoid_cmc_encrypted_pop = "1.3.6.1.5.5.7.7.9"
  Szoid_cmc_decrypted_pop = "1.3.6.1.5.5.7.7.10"
  Szoid_cmc_lra_pop_witness = "1.3.6.1.5.5.7.7.11"
  Szoid_cmc_get_cert = "1.3.6.1.5.5.7.7.15"
  Szoid_cmc_get_crl = "1.3.6.1.5.5.7.7.16"
  Szoid_cmc_revoke_request = "1.3.6.1.5.5.7.7.17"
  Szoid_cmc_reg_info = "1.3.6.1.5.5.7.7.18"
  Szoid_cmc_response_info = "1.3.6.1.5.5.7.7.19"
  Szoid_cmc_query_pending = "1.3.6.1.5.5.7.7.21"
  Szoid_cmc_id_pop_link_random = "1.3.6.1.5.5.7.7.22"
  Szoid_cmc_id_pop_link_witness = "1.3.6.1.5.5.7.7.23"
  Szoid_cmc_id_confirm_cert_acceptance = "1.3.6.1.5.5.7.7.24"
  Szoid_cmc_add_attributes = "1.3.6.1.4.1.311.10.10.1"
  CMC_TAGGED_CERT_REQUEST_CHOICE = 1_u32
  CMC_OTHER_INFO_NO_CHOICE = 0_u32
  CMC_OTHER_INFO_FAIL_CHOICE = 1_u32
  CMC_OTHER_INFO_PEND_CHOICE = 2_u32
  CMC_STATUS_SUCCESS = 0_u32
  CMC_STATUS_FAILED = 2_u32
  CMC_STATUS_PENDING = 3_u32
  CMC_STATUS_NO_SUPPORT = 4_u32
  CMC_STATUS_CONFIRM_REQUIRED = 5_u32
  CMC_FAIL_BAD_ALG = 0_u32
  CMC_FAIL_BAD_MESSAGE_CHECK = 1_u32
  CMC_FAIL_BAD_REQUEST = 2_u32
  CMC_FAIL_BAD_TIME = 3_u32
  CMC_FAIL_BAD_CERT_ID = 4_u32
  CMC_FAIL_UNSUPORTED_EXT = 5_u32
  CMC_FAIL_MUST_ARCHIVE_KEYS = 6_u32
  CMC_FAIL_BAD_IDENTITY = 7_u32
  CMC_FAIL_POP_REQUIRED = 8_u32
  CMC_FAIL_POP_FAILED = 9_u32
  CMC_FAIL_NO_KEY_REUSE = 10_u32
  CMC_FAIL_INTERNAL_CA_ERROR = 11_u32
  CMC_FAIL_TRY_LATER = 12_u32
  Szoid_loyalty_other_logotype = "1.3.6.1.5.5.7.20.1"
  Szoid_background_other_logotype = "1.3.6.1.5.5.7.20.2"
  CERT_BIOMETRIC_PICTURE_TYPE = 0_u32
  CERT_BIOMETRIC_SIGNATURE_TYPE = 1_u32
  OCSP_REQUEST_V1 = 0_u32
  OCSP_SUCCESSFUL_RESPONSE = 0_u32
  OCSP_MALFORMED_REQUEST_RESPONSE = 1_u32
  OCSP_INTERNAL_ERROR_RESPONSE = 2_u32
  OCSP_TRY_LATER_RESPONSE = 3_u32
  OCSP_SIG_REQUIRED_RESPONSE = 5_u32
  OCSP_UNAUTHORIZED_RESPONSE = 6_u32
  Szoid_pkix_ocsp_basic_signed_response = "1.3.6.1.5.5.7.48.1.1"
  OCSP_BASIC_GOOD_CERT_STATUS = 0_u32
  OCSP_BASIC_REVOKED_CERT_STATUS = 1_u32
  OCSP_BASIC_UNKNOWN_CERT_STATUS = 2_u32
  OCSP_BASIC_RESPONSE_V1 = 0_u32
  OCSP_BASIC_BY_NAME_RESPONDER_ID = 1_u32
  OCSP_BASIC_BY_KEY_RESPONDER_ID = 2_u32
  CRYPT_OID_ENCODE_OBJECT_FUNC = "CryptDllEncodeObject"
  CRYPT_OID_DECODE_OBJECT_FUNC = "CryptDllDecodeObject"
  CRYPT_OID_ENCODE_OBJECT_EX_FUNC = "CryptDllEncodeObjectEx"
  CRYPT_OID_DECODE_OBJECT_EX_FUNC = "CryptDllDecodeObjectEx"
  CRYPT_OID_CREATE_COM_OBJECT_FUNC = "CryptDllCreateCOMObject"
  CRYPT_OID_VERIFY_REVOCATION_FUNC = "CertDllVerifyRevocation"
  CRYPT_OID_VERIFY_CTL_USAGE_FUNC = "CertDllVerifyCTLUsage"
  CRYPT_OID_FORMAT_OBJECT_FUNC = "CryptDllFormatObject"
  CRYPT_OID_FIND_OID_INFO_FUNC = "CryptDllFindOIDInfo"
  CRYPT_OID_FIND_LOCALIZED_NAME_FUNC = "CryptDllFindLocalizedName"
  CRYPT_OID_REGPATH = "Software\\Microsoft\\Cryptography\\OID"
  CRYPT_OID_REG_ENCODING_TYPE_PREFIX = "EncodingType "
  CRYPT_OID_REG_DLL_VALUE_NAME = "Dll"
  CRYPT_OID_REG_FUNC_NAME_VALUE_NAME = "FuncName"
  CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A = "FuncName"
  CRYPT_OID_REG_FLAGS_VALUE_NAME = "CryptFlags"
  CRYPT_DEFAULT_OID = "DEFAULT"
  CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1_u32
  CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1_u32
  CRYPT_REGISTER_FIRST_INDEX = 0_u32
  CRYPT_REGISTER_LAST_INDEX = 4294967295_u32
  CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295_u32
  CALG_OID_INFO_CNG_ONLY = 4294967295_u32
  CALG_OID_INFO_PARAMETERS = 4294967294_u32
  CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM = "CryptOIDInfoHashParameters"
  CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM = "CryptOIDInfoECCParameters"
  CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM = "CryptOIDInfoMgf1Parameters"
  CRYPT_OID_INFO_NO_SIGN_ALGORITHM = "CryptOIDInfoNoSign"
  CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM = "CryptOIDInfoOAEPParameters"
  CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM = "CryptOIDInfoECCWrapParameters"
  CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM = "CryptOIDInfoNoParameters"
  CRYPT_HASH_ALG_OID_GROUP_ID = 1_u32
  CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2_u32
  CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3_u32
  CRYPT_SIGN_ALG_OID_GROUP_ID = 4_u32
  CRYPT_RDN_ATTR_OID_GROUP_ID = 5_u32
  CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6_u32
  CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7_u32
  CRYPT_POLICY_OID_GROUP_ID = 8_u32
  CRYPT_TEMPLATE_OID_GROUP_ID = 9_u32
  CRYPT_KDF_OID_GROUP_ID = 10_u32
  CRYPT_LAST_OID_GROUP_ID = 10_u32
  CRYPT_FIRST_ALG_OID_GROUP_ID = 1_u32
  CRYPT_LAST_ALG_OID_GROUP_ID = 4_u32
  CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1_u32
  CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2_u32
  CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4_u32
  CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648_u32
  CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824_u32
  CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912_u32
  CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456_u32
  CRYPT_OID_INFO_OID_KEY = 1_u32
  CRYPT_OID_INFO_NAME_KEY = 2_u32
  CRYPT_OID_INFO_ALGID_KEY = 3_u32
  CRYPT_OID_INFO_SIGN_KEY = 4_u32
  CRYPT_OID_INFO_CNG_ALGID_KEY = 5_u32
  CRYPT_OID_INFO_CNG_SIGN_KEY = 6_u32
  CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760_u32
  CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648_u32
  CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824_u32
  CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920_u32
  CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16_u32
  CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1_u32
  CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0_u32
  CRYPT_LOCALIZED_NAME_OID = "LocalizedNames"
  CERT_STRONG_SIGN_ECDSA_ALGORITHM = "ECDSA"
  CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1_u32
  CERT_STRONG_SIGN_OID_INFO_CHOICE = 2_u32
  Szoid_cert_strong_sign_os_prefix = "1.3.6.1.4.1.311.72.1."
  Szoid_cert_strong_sign_os_1 = "1.3.6.1.4.1.311.72.1.1"
  Szoid_cert_strong_sign_os_current = "1.3.6.1.4.1.311.72.1.1"
  Szoid_cert_strong_key_os_prefix = "1.3.6.1.4.1.311.72.2."
  Szoid_cert_strong_key_os_1 = "1.3.6.1.4.1.311.72.2.1"
  Szoid_cert_strong_key_os_current = "1.3.6.1.4.1.311.72.2.1"
  Szoid_pkcs_7_data = "1.2.840.113549.1.7.1"
  Szoid_pkcs_7_signed = "1.2.840.113549.1.7.2"
  Szoid_pkcs_7_enveloped = "1.2.840.113549.1.7.3"
  Szoid_pkcs_7_signedandenveloped = "1.2.840.113549.1.7.4"
  Szoid_pkcs_7_digested = "1.2.840.113549.1.7.5"
  Szoid_pkcs_7_encrypted = "1.2.840.113549.1.7.6"
  Szoid_pkcs_9_content_type = "1.2.840.113549.1.9.3"
  Szoid_pkcs_9_message_digest = "1.2.840.113549.1.9.4"
  CMSG_ENCRYPTED = 6_u32
  CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1_u32
  CMSG_KEY_TRANS_RECIPIENT = 1_u32
  CMSG_KEY_AGREE_RECIPIENT = 2_u32
  CMSG_MAIL_LIST_RECIPIENT = 3_u32
  CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648_u32
  CMSG_RC4_NO_SALT_FLAG = 1073741824_u32
  CMSG_INDEFINITE_LENGTH = 4294967295_u32
  CMSG_BARE_CONTENT_FLAG = 1_u32
  CMSG_LENGTH_ONLY_FLAG = 2_u32
  CMSG_DETACHED_FLAG = 4_u32
  CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8_u32
  CMSG_CONTENTS_OCTETS_FLAG = 16_u32
  CMSG_MAX_LENGTH_FLAG = 32_u32
  CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64_u32
  CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128_u32
  CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768_u32
  CMSG_TYPE_PARAM = 1_u32
  CMSG_CONTENT_PARAM = 2_u32
  CMSG_BARE_CONTENT_PARAM = 3_u32
  CMSG_INNER_CONTENT_TYPE_PARAM = 4_u32
  CMSG_SIGNER_COUNT_PARAM = 5_u32
  CMSG_SIGNER_INFO_PARAM = 6_u32
  CMSG_SIGNER_CERT_INFO_PARAM = 7_u32
  CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8_u32
  CMSG_SIGNER_AUTH_ATTR_PARAM = 9_u32
  CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10_u32
  CMSG_CERT_COUNT_PARAM = 11_u32
  CMSG_CERT_PARAM = 12_u32
  CMSG_CRL_COUNT_PARAM = 13_u32
  CMSG_CRL_PARAM = 14_u32
  CMSG_ENVELOPE_ALGORITHM_PARAM = 15_u32
  CMSG_RECIPIENT_COUNT_PARAM = 17_u32
  CMSG_RECIPIENT_INDEX_PARAM = 18_u32
  CMSG_RECIPIENT_INFO_PARAM = 19_u32
  CMSG_HASH_ALGORITHM_PARAM = 20_u32
  CMSG_HASH_DATA_PARAM = 21_u32
  CMSG_COMPUTED_HASH_PARAM = 22_u32
  CMSG_ENCRYPT_PARAM = 26_u32
  CMSG_ENCRYPTED_DIGEST = 27_u32
  CMSG_ENCODED_SIGNER = 28_u32
  CMSG_ENCODED_MESSAGE = 29_u32
  CMSG_VERSION_PARAM = 30_u32
  CMSG_ATTR_CERT_COUNT_PARAM = 31_u32
  CMSG_ATTR_CERT_PARAM = 32_u32
  CMSG_CMS_RECIPIENT_COUNT_PARAM = 33_u32
  CMSG_CMS_RECIPIENT_INDEX_PARAM = 34_u32
  CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35_u32
  CMSG_CMS_RECIPIENT_INFO_PARAM = 36_u32
  CMSG_UNPROTECTED_ATTR_PARAM = 37_u32
  CMSG_SIGNER_CERT_ID_PARAM = 38_u32
  CMSG_CMS_SIGNER_INFO_PARAM = 39_u32
  CMSG_SIGNED_DATA_V1 = 1_u32
  CMSG_SIGNED_DATA_V3 = 3_u32
  CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1_u32
  CMSG_SIGNED_DATA_CMS_VERSION = 3_u32
  CMSG_SIGNER_INFO_V1 = 1_u32
  CMSG_SIGNER_INFO_V3 = 3_u32
  CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1_u32
  CMSG_SIGNER_INFO_CMS_VERSION = 3_u32
  CMSG_HASHED_DATA_V0 = 0_u32
  CMSG_HASHED_DATA_V2 = 2_u32
  CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0_u32
  CMSG_HASHED_DATA_CMS_VERSION = 2_u32
  CMSG_ENVELOPED_DATA_V0 = 0_u32
  CMSG_ENVELOPED_DATA_V2 = 2_u32
  CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0_u32
  CMSG_ENVELOPED_DATA_CMS_VERSION = 2_u32
  CMSG_ENVELOPED_RECIPIENT_V0 = 0_u32
  CMSG_ENVELOPED_RECIPIENT_V2 = 2_u32
  CMSG_ENVELOPED_RECIPIENT_V3 = 3_u32
  CMSG_ENVELOPED_RECIPIENT_V4 = 4_u32
  CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0_u32
  CMSG_KEY_TRANS_CMS_VERSION = 2_u32
  CMSG_KEY_AGREE_VERSION = 3_u32
  CMSG_MAIL_LIST_VERSION = 4_u32
  CMSG_CTRL_VERIFY_SIGNATURE = 1_u32
  CMSG_CTRL_DECRYPT = 2_u32
  CMSG_CTRL_VERIFY_HASH = 5_u32
  CMSG_CTRL_ADD_SIGNER = 6_u32
  CMSG_CTRL_DEL_SIGNER = 7_u32
  CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8_u32
  CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9_u32
  CMSG_CTRL_ADD_CERT = 10_u32
  CMSG_CTRL_DEL_CERT = 11_u32
  CMSG_CTRL_ADD_CRL = 12_u32
  CMSG_CTRL_DEL_CRL = 13_u32
  CMSG_CTRL_ADD_ATTR_CERT = 14_u32
  CMSG_CTRL_DEL_ATTR_CERT = 15_u32
  CMSG_CTRL_KEY_TRANS_DECRYPT = 16_u32
  CMSG_CTRL_KEY_AGREE_DECRYPT = 17_u32
  CMSG_CTRL_MAIL_LIST_DECRYPT = 18_u32
  CMSG_CTRL_VERIFY_SIGNATURE_EX = 19_u32
  CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20_u32
  CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21_u32
  CMSG_VERIFY_SIGNER_PUBKEY = 1_u32
  CMSG_VERIFY_SIGNER_CERT = 2_u32
  CMSG_VERIFY_SIGNER_CHAIN = 3_u32
  CMSG_VERIFY_SIGNER_NULL = 4_u32
  CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1_u32
  CMSG_OID_GEN_ENCRYPT_KEY_FUNC = "CryptMsgDllGenEncryptKey"
  CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC = "CryptMsgDllExportEncryptKey"
  CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC = "CryptMsgDllImportEncryptKey"
  CMSG_DEFAULT_INSTALLABLE_FUNC_OID = 1_i32
  CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1_u32
  CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768_u32
  CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC = "CryptMsgDllGenContentEncryptKey"
  CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC = "CryptMsgDllGenContentEncryptKey"
  CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC = "CryptMsgDllCNGGenContentEncryptKey"
  CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CMSG_OID_EXPORT_KEY_TRANS_FUNC = "CryptMsgDllExportKeyTrans"
  CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC = "CryptMsgDllExportKeyTrans"
  CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC = "CryptMsgDllCNGExportKeyTrans"
  CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32_u32
  CMSG_OID_EXPORT_KEY_AGREE_FUNC = "CryptMsgDllExportKeyAgree"
  CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC = "CryptMsgDllExportKeyAgree"
  CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC = "CryptMsgDllCNGExportKeyAgree"
  CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CMSG_OID_EXPORT_MAIL_LIST_FUNC = "CryptMsgDllExportMailList"
  CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC = "CryptMsgDllExportMailList"
  CMSG_OID_IMPORT_KEY_TRANS_FUNC = "CryptMsgDllImportKeyTrans"
  CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC = "CryptMsgDllImportKeyTrans"
  CMSG_OID_IMPORT_KEY_AGREE_FUNC = "CryptMsgDllImportKeyAgree"
  CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC = "CryptMsgDllImportKeyAgree"
  CMSG_OID_IMPORT_MAIL_LIST_FUNC = "CryptMsgDllImportMailList"
  CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC = "CryptMsgDllImportMailList"
  CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC = "CryptMsgDllCNGImportKeyTrans"
  CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC = "CryptMsgDllCNGImportKeyAgree"
  CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC = "CryptMsgDllCNGImportContentEncryptKey"
  CERT_KEY_PROV_HANDLE_PROP_ID = 1_u32
  CERT_KEY_PROV_INFO_PROP_ID = 2_u32
  CERT_SHA1_HASH_PROP_ID = 3_u32
  CERT_MD5_HASH_PROP_ID = 4_u32
  CERT_HASH_PROP_ID = 3_u32
  CERT_KEY_CONTEXT_PROP_ID = 5_u32
  CERT_KEY_SPEC_PROP_ID = 6_u32
  CERT_IE30_RESERVED_PROP_ID = 7_u32
  CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8_u32
  CERT_ENHKEY_USAGE_PROP_ID = 9_u32
  CERT_CTL_USAGE_PROP_ID = 9_u32
  CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10_u32
  CERT_FRIENDLY_NAME_PROP_ID = 11_u32
  CERT_PVK_FILE_PROP_ID = 12_u32
  CERT_DESCRIPTION_PROP_ID = 13_u32
  CERT_ACCESS_STATE_PROP_ID = 14_u32
  CERT_SIGNATURE_HASH_PROP_ID = 15_u32
  CERT_SMART_CARD_DATA_PROP_ID = 16_u32
  CERT_EFS_PROP_ID = 17_u32
  CERT_FORTEZZA_DATA_PROP_ID = 18_u32
  CERT_ARCHIVED_PROP_ID = 19_u32
  CERT_KEY_IDENTIFIER_PROP_ID = 20_u32
  CERT_AUTO_ENROLL_PROP_ID = 21_u32
  CERT_PUBKEY_ALG_PARA_PROP_ID = 22_u32
  CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23_u32
  CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24_u32
  CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25_u32
  CERT_ENROLLMENT_PROP_ID = 26_u32
  CERT_DATE_STAMP_PROP_ID = 27_u32
  CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28_u32
  CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29_u32
  CERT_EXTENDED_ERROR_INFO_PROP_ID = 30_u32
  CERT_RENEWAL_PROP_ID = 64_u32
  CERT_ARCHIVED_KEY_HASH_PROP_ID = 65_u32
  CERT_AUTO_ENROLL_RETRY_PROP_ID = 66_u32
  CERT_AIA_URL_RETRIEVED_PROP_ID = 67_u32
  CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68_u32
  CERT_BACKED_UP_PROP_ID = 69_u32
  CERT_OCSP_RESPONSE_PROP_ID = 70_u32
  CERT_REQUEST_ORIGINATOR_PROP_ID = 71_u32
  CERT_SOURCE_LOCATION_PROP_ID = 72_u32
  CERT_SOURCE_URL_PROP_ID = 73_u32
  CERT_NEW_KEY_PROP_ID = 74_u32
  CERT_OCSP_CACHE_PREFIX_PROP_ID = 75_u32
  CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76_u32
  CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77_u32
  CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78_u32
  CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79_u32
  CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80_u32
  CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81_u32
  CERT_CA_DISABLE_CRL_PROP_ID = 82_u32
  CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83_u32
  CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84_u32
  CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85_u32
  CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86_u32
  CERT_CEP_PROP_ID = 87_u32
  CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89_u32
  CERT_SCARD_PIN_ID_PROP_ID = 90_u32
  CERT_SCARD_PIN_INFO_PROP_ID = 91_u32
  CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92_u32
  CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93_u32
  CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94_u32
  CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95_u32
  CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96_u32
  CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97_u32
  CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98_u32
  CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99_u32
  CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100_u32
  CERT_SMART_CARD_READER_PROP_ID = 101_u32
  CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102_u32
  CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103_u32
  CERT_DISALLOWED_FILETIME_PROP_ID = 104_u32
  CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105_u32
  CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106_u32
  CERT_SHA256_HASH_PROP_ID = 107_u32
  CERT_SCEP_SERVER_CERTS_PROP_ID = 108_u32
  CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109_u32
  CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110_u32
  CERT_SCEP_CA_CERT_PROP_ID = 111_u32
  CERT_SCEP_SIGNER_CERT_PROP_ID = 112_u32
  CERT_SCEP_NONCE_PROP_ID = 113_u32
  CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114_u32
  CERT_SCEP_FLAGS_PROP_ID = 115_u32
  CERT_SCEP_GUID_PROP_ID = 116_u32
  CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117_u32
  CERT_ISOLATED_KEY_PROP_ID = 118_u32
  CERT_SERIAL_CHAIN_PROP_ID = 119_u32
  CERT_KEY_CLASSIFICATION_PROP_ID = 120_u32
  CERT_OCSP_MUST_STAPLE_PROP_ID = 121_u32
  CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122_u32
  CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123_u32
  CERT_PIN_SHA256_HASH_PROP_ID = 124_u32
  CERT_CLR_DELETE_KEY_PROP_ID = 125_u32
  CERT_NOT_BEFORE_FILETIME_PROP_ID = 126_u32
  CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127_u32
  CERT_FIRST_RESERVED_PROP_ID = 128_u32
  CERT_LAST_RESERVED_PROP_ID = 32767_u32
  CERT_FIRST_USER_PROP_ID = 32768_u32
  CERT_LAST_USER_PROP_ID = 65535_u32
  Szoid_cert_prop_id_prefix = "1.3.6.1.4.1.311.10.11."
  Szoid_cert_key_identifier_prop_id = "1.3.6.1.4.1.311.10.11.20"
  Szoid_cert_issuer_serial_number_md5_hash_prop_id = "1.3.6.1.4.1.311.10.11.28"
  Szoid_cert_subject_name_md5_hash_prop_id = "1.3.6.1.4.1.311.10.11.29"
  Szoid_cert_md5_hash_prop_id = "1.3.6.1.4.1.311.10.11.4"
  Szoid_cert_signature_hash_prop_id = "1.3.6.1.4.1.311.10.11.15"
  Szoid_disallowed_hash = "1.3.6.1.4.1.311.10.11.15"
  Szoid_cert_disallowed_filetime_prop_id = "1.3.6.1.4.1.311.10.11.104"
  CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1_u32
  CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2_u32
  CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4_u32
  CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8_u32
  CERT_ACCESS_STATE_SHARED_USER_FLAG = 16_u32
  Szoid_root_program_auto_update_ca_revocation = "1.3.6.1.4.1.311.60.3.1"
  Szoid_root_program_auto_update_end_revocation = "1.3.6.1.4.1.311.60.3.2"
  Szoid_root_program_no_ocsp_failover_to_crl = "1.3.6.1.4.1.311.60.3.3"
  CERT_STORE_PROV_MSG = 1_i32
  CERT_STORE_PROV_MEMORY = 2_i32
  CERT_STORE_PROV_FILE = 3_i32
  CERT_STORE_PROV_REG = 4_i32
  CERT_STORE_PROV_PKCS7 = 5_i32
  CERT_STORE_PROV_SERIALIZED = 6_i32
  CERT_STORE_PROV_FILENAME_A = 7_i32
  CERT_STORE_PROV_FILENAME_W = 8_i32
  CERT_STORE_PROV_FILENAME = 8_i32
  CERT_STORE_PROV_SYSTEM_A = 9_i32
  CERT_STORE_PROV_SYSTEM_W = 10_i32
  CERT_STORE_PROV_SYSTEM = 10_i32
  CERT_STORE_PROV_COLLECTION = 11_i32
  CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12_i32
  CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13_i32
  CERT_STORE_PROV_SYSTEM_REGISTRY = 13_i32
  CERT_STORE_PROV_PHYSICAL_W = 14_i32
  CERT_STORE_PROV_PHYSICAL = 14_i32
  CERT_STORE_PROV_SMART_CARD_W = 15_i32
  CERT_STORE_PROV_SMART_CARD = 15_i32
  CERT_STORE_PROV_LDAP_W = 16_i32
  CERT_STORE_PROV_LDAP = 16_i32
  CERT_STORE_PROV_PKCS12 = 17_i32
  Sz_cert_store_prov_memory = "Memory"
  Sz_cert_store_prov_filename_w = "File"
  Sz_cert_store_prov_filename = "File"
  Sz_cert_store_prov_system_w = "System"
  Sz_cert_store_prov_system = "System"
  Sz_cert_store_prov_pkcs7 = "PKCS7"
  Sz_cert_store_prov_pkcs12 = "PKCS12"
  Sz_cert_store_prov_serialized = "Serialized"
  Sz_cert_store_prov_collection = "Collection"
  Sz_cert_store_prov_system_registry_w = "SystemRegistry"
  Sz_cert_store_prov_system_registry = "SystemRegistry"
  Sz_cert_store_prov_physical_w = "Physical"
  Sz_cert_store_prov_physical = "Physical"
  Sz_cert_store_prov_smart_card_w = "SmartCard"
  Sz_cert_store_prov_smart_card = "SmartCard"
  Sz_cert_store_prov_ldap_w = "Ldap"
  Sz_cert_store_prov_ldap = "Ldap"
  CERT_STORE_SIGNATURE_FLAG = 1_u32
  CERT_STORE_TIME_VALIDITY_FLAG = 2_u32
  CERT_STORE_REVOCATION_FLAG = 4_u32
  CERT_STORE_NO_CRL_FLAG = 65536_u32
  CERT_STORE_NO_ISSUER_FLAG = 131072_u32
  CERT_STORE_BASE_CRL_FLAG = 256_u32
  CERT_STORE_DELTA_CRL_FLAG = 512_u32
  CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32_u32
  CERT_STORE_SHARE_STORE_FLAG = 64_u32
  CERT_STORE_MANIFOLD_FLAG = 256_u32
  CERT_SYSTEM_STORE_MASK = 4294901760_u32
  CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824_u32
  CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912_u32
  CERT_SYSTEM_STORE_LOCATION_SHIFT = 16_u32
  CERT_SYSTEM_STORE_CURRENT_USER_ID = 1_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2_u32
  CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4_u32
  CERT_SYSTEM_STORE_SERVICES_ID = 5_u32
  CERT_SYSTEM_STORE_USERS_ID = 6_u32
  CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10_u32
  CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH = "Software\\Policies\\Microsoft\\SystemCertificates"
  CERT_EFSBLOB_VALUE_NAME = "EFSBlob"
  CERT_PROT_ROOT_FLAGS_VALUE_NAME = "Flags"
  CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1_u32
  CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2_u32
  CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4_u32
  CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8_u32
  CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8_u32
  CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16_u32
  CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32_u32
  CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536_u32
  CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME = "PeerUsages"
  CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A = "PeerUsages"
  CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH = "Software\\Microsoft\\SystemCertificates"
  CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME = "AuthenticodeFlags"
  CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3_u32
  CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0_u32
  CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1_u32
  CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2_u32
  CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256_u32
  CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512_u32
  CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OC Manager\\Subcomponents"
  CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME = "RootAutoUpdate"
  CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME = "DisableRootAutoUpdate"
  CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME = "EnableDisallowedCertAutoUpdate"
  CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME = "DisablePinRulesAutoUpdate"
  CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = "RootDirUrl"
  CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME = "SyncFromDirUrl"
  CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = "RootDirUrl"
  CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = "SyncDeltaTime"
  CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME = "Flags"
  CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1_u32
  CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2_u32
  CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4_u32
  CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = "LastSyncTime"
  CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = "EncodedCtl"
  CERT_AUTH_ROOT_CTL_FILENAME = "authroot.stl"
  CERT_AUTH_ROOT_CTL_FILENAME_A = "authroot.stl"
  CERT_AUTH_ROOT_CAB_FILENAME = "authrootstl.cab"
  CERT_AUTH_ROOT_SEQ_FILENAME = "authrootseq.txt"
  CERT_AUTH_ROOT_CERT_EXT = ".crt"
  CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = "DisallowedCertSyncDeltaTime"
  CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = "DisallowedCertLastSyncTime"
  CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = "DisallowedCertEncodedCtl"
  CERT_DISALLOWED_CERT_CTL_FILENAME = "disallowedcert.stl"
  CERT_DISALLOWED_CERT_CTL_FILENAME_A = "disallowedcert.stl"
  CERT_DISALLOWED_CERT_CAB_FILENAME = "disallowedcertstl.cab"
  CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER = "DisallowedCert_AutoUpdate_1"
  CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = "PinRulesSyncDeltaTime"
  CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = "PinRulesLastSyncTime"
  CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = "PinRulesEncodedCtl"
  CERT_PIN_RULES_CTL_FILENAME = "pinrules.stl"
  CERT_PIN_RULES_CTL_FILENAME_A = "pinrules.stl"
  CERT_PIN_RULES_CAB_FILENAME = "pinrulesstl.cab"
  CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER = "PinRules_AutoUpdate_1"
  CERT_REGISTRY_STORE_REMOTE_FLAG = 65536_u32
  CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072_u32
  CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648_u32
  CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216_u32
  CERT_REGISTRY_STORE_ROAMING_FLAG = 262144_u32
  CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288_u32
  CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576_u32
  CERT_IE_DIRTY_FLAGS_REGPATH = "Software\\Microsoft\\Cryptography\\IEDirtyFlags"
  CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536_u32
  CERT_LDAP_STORE_SIGN_FLAG = 65536_u32
  CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072_u32
  CERT_LDAP_STORE_OPENED_FLAG = 262144_u32
  CERT_LDAP_STORE_UNBIND_FLAG = 524288_u32
  CRYPT_OID_OPEN_STORE_PROV_FUNC = "CertDllOpenStoreProv"
  CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32_u32
  CERT_STORE_PROV_SHARED_USER_FLAG = 64_u32
  CERT_STORE_PROV_CLOSE_FUNC = 0_u32
  CERT_STORE_PROV_READ_CERT_FUNC = 1_u32
  CERT_STORE_PROV_WRITE_CERT_FUNC = 2_u32
  CERT_STORE_PROV_DELETE_CERT_FUNC = 3_u32
  CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4_u32
  CERT_STORE_PROV_READ_CRL_FUNC = 5_u32
  CERT_STORE_PROV_WRITE_CRL_FUNC = 6_u32
  CERT_STORE_PROV_DELETE_CRL_FUNC = 7_u32
  CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8_u32
  CERT_STORE_PROV_READ_CTL_FUNC = 9_u32
  CERT_STORE_PROV_WRITE_CTL_FUNC = 10_u32
  CERT_STORE_PROV_DELETE_CTL_FUNC = 11_u32
  CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12_u32
  CERT_STORE_PROV_CONTROL_FUNC = 13_u32
  CERT_STORE_PROV_FIND_CERT_FUNC = 14_u32
  CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15_u32
  CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16_u32
  CERT_STORE_PROV_FIND_CRL_FUNC = 17_u32
  CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18_u32
  CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19_u32
  CERT_STORE_PROV_FIND_CTL_FUNC = 20_u32
  CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21_u32
  CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22_u32
  CERT_STORE_PROV_WRITE_ADD_FLAG = 1_u32
  CERT_STORE_SAVE_AS_PKCS12 = 3_u32
  CERT_CLOSE_STORE_FORCE_FLAG = 1_u32
  CERT_CLOSE_STORE_CHECK_FLAG = 2_u32
  CERT_COMPARE_MASK = 65535_u32
  CERT_COMPARE_ANY = 0_u32
  CERT_COMPARE_SHA1_HASH = 1_u32
  CERT_COMPARE_NAME = 2_u32
  CERT_COMPARE_ATTR = 3_u32
  CERT_COMPARE_MD5_HASH = 4_u32
  CERT_COMPARE_PROPERTY = 5_u32
  CERT_COMPARE_PUBLIC_KEY = 6_u32
  CERT_COMPARE_HASH = 1_u32
  CERT_COMPARE_NAME_STR_A = 7_u32
  CERT_COMPARE_NAME_STR_W = 8_u32
  CERT_COMPARE_KEY_SPEC = 9_u32
  CERT_COMPARE_ENHKEY_USAGE = 10_u32
  CERT_COMPARE_CTL_USAGE = 10_u32
  CERT_COMPARE_SUBJECT_CERT = 11_u32
  CERT_COMPARE_ISSUER_OF = 12_u32
  CERT_COMPARE_EXISTING = 13_u32
  CERT_COMPARE_SIGNATURE_HASH = 14_u32
  CERT_COMPARE_KEY_IDENTIFIER = 15_u32
  CERT_COMPARE_CERT_ID = 16_u32
  CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17_u32
  CERT_COMPARE_PUBKEY_MD5_HASH = 18_u32
  CERT_COMPARE_SUBJECT_INFO_ACCESS = 19_u32
  CERT_COMPARE_HASH_STR = 20_u32
  CERT_COMPARE_HAS_PRIVATE_KEY = 21_u32
  CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648_u32
  CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824_u32
  CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1_u32
  CRL_FIND_ANY = 0_u32
  CRL_FIND_ISSUED_BY = 1_u32
  CRL_FIND_EXISTING = 2_u32
  CRL_FIND_ISSUED_FOR = 3_u32
  CRL_FIND_ISSUED_BY_AKI_FLAG = 1_u32
  CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2_u32
  CRL_FIND_ISSUED_BY_DELTA_FLAG = 4_u32
  CRL_FIND_ISSUED_BY_BASE_FLAG = 8_u32
  CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16_u32
  CERT_STORE_ADD_NEW = 1_u32
  CERT_STORE_ADD_USE_EXISTING = 2_u32
  CERT_STORE_ADD_REPLACE_EXISTING = 3_u32
  CERT_STORE_ADD_ALWAYS = 4_u32
  CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5_u32
  CERT_STORE_ADD_NEWER = 6_u32
  CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7_u32
  CERT_STORE_CERTIFICATE_CONTEXT = 1_u32
  CERT_STORE_CRL_CONTEXT = 2_u32
  CERT_STORE_CTL_CONTEXT = 3_u32
  CTL_ANY_SUBJECT_TYPE = 1_u32
  CTL_CERT_SUBJECT_TYPE = 2_u32
  CTL_FIND_NO_LIST_ID_CBDATA = 4294967295_u32
  CERT_STORE_CTRL_RESYNC = 1_u32
  CERT_STORE_CTRL_NOTIFY_CHANGE = 2_u32
  CERT_STORE_CTRL_COMMIT = 3_u32
  CERT_STORE_CTRL_AUTO_RESYNC = 4_u32
  CERT_STORE_CTRL_CANCEL_NOTIFY = 5_u32
  CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096_u32
  CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1_u32
  CERT_CREATE_CONTEXT_SORTED_FLAG = 2_u32
  CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4_u32
  CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8_u32
  CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1_u32
  CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2_u32
  CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4_u32
  CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8_u32
  CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1_u32
  CERT_PHYSICAL_STORE_DEFAULT_NAME = ".Default"
  CERT_PHYSICAL_STORE_GROUP_POLICY_NAME = ".GroupPolicy"
  CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME = ".LocalMachine"
  CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME = ".UserCertificate"
  CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME = ".LocalMachineGroupPolicy"
  CERT_PHYSICAL_STORE_ENTERPRISE_NAME = ".Enterprise"
  CERT_PHYSICAL_STORE_AUTH_ROOT_NAME = ".AuthRoot"
  CERT_PHYSICAL_STORE_SMART_CARD_NAME = ".SmartCard"
  CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC = "CertDllOpenSystemStoreProv"
  CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC = "CertDllRegisterSystemStore"
  CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC = "CertDllUnregisterSystemStore"
  CRYPT_OID_ENUM_SYSTEM_STORE_FUNC = "CertDllEnumSystemStore"
  CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC = "CertDllRegisterPhysicalStore"
  CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC = "CertDllUnregisterPhysicalStore"
  CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC = "CertDllEnumPhysicalStore"
  CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME = "SystemStoreLocation"
  CMSG_TRUSTED_SIGNER_FLAG = 1_u32
  CMSG_SIGNER_ONLY_FLAG = 2_u32
  CMSG_USE_SIGNER_INDEX_FLAG = 4_u32
  CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768_u32
  CMSG_ENCODE_SORTED_CTL_FLAG = 1_u32
  CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2_u32
  CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1_u32
  CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2_u32
  CERT_VERIFY_NO_TIME_CHECK_FLAG = 4_u32
  CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8_u32
  CERT_VERIFY_UPDATED_CTL_FLAG = 1_u32
  CERT_CONTEXT_REVOCATION_TYPE = 1_u32
  CERT_VERIFY_REV_CHAIN_FLAG = 1_u32
  CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2_u32
  CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4_u32
  CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8_u32
  CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16_u32
  CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32_u32
  CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1_u32
  CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4_u32
  CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8_u32
  CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = "CryptDllExtractEncodedSignatureParameters"
  CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC = "CryptDllSignAndEncodeHash"
  CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC = "CryptDllVerifyEncodedSignature"
  CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC = "CryptDllExportPublicKeyInfoEx"
  CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = "CryptDllExportPublicKeyInfoEx2"
  CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = "CryptDllExportPublicKeyInfoFromBCryptKeyHandle"
  CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC = "CryptDllImportPublicKeyInfoEx"
  CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = "CryptDllImportPublicKeyInfoEx2"
  CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128_u32
  CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752_u32
  CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536_u32
  CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072_u32
  CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144_u32
  CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC = "CryptDllImportPrivateKeyInfoEx"
  CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC = "CryptDllExportPrivateKeyInfoEx"
  CRYPT_DELETE_KEYSET = 16_u32
  CERT_XML_NAME_STR = 4_u32
  CERT_NAME_STR_SEMICOLON_FLAG = 1073741824_u32
  CERT_NAME_STR_NO_PLUS_FLAG = 536870912_u32
  CERT_NAME_STR_NO_QUOTING_FLAG = 268435456_u32
  CERT_NAME_STR_CRLF_FLAG = 134217728_u32
  CERT_NAME_STR_COMMA_FLAG = 67108864_u32
  CERT_NAME_STR_REVERSE_FLAG = 33554432_u32
  CERT_NAME_STR_FORWARD_FLAG = 16777216_u32
  CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536_u32
  CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072_u32
  CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144_u32
  CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288_u32
  CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576_u32
  CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152_u32
  CERT_NAME_EMAIL_TYPE = 1_u32
  CERT_NAME_RDN_TYPE = 2_u32
  CERT_NAME_ATTR_TYPE = 3_u32
  CERT_NAME_SIMPLE_DISPLAY_TYPE = 4_u32
  CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5_u32
  CERT_NAME_DNS_TYPE = 6_u32
  CERT_NAME_URL_TYPE = 7_u32
  CERT_NAME_UPN_TYPE = 8_u32
  CERT_NAME_ISSUER_FLAG = 1_u32
  CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536_u32
  CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2_u32
  CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1_u32
  CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2_u32
  CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4_u32
  CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64_u32
  CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4_u32
  CREDENTIAL_OID_PASSWORD_CREDENTIALS_A = 1_i32
  CREDENTIAL_OID_PASSWORD_CREDENTIALS_W = 2_i32
  CREDENTIAL_OID_PASSWORD_CREDENTIALS = 2_i32
  SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC = "SchemeDllRetrieveEncodedObject"
  SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC = "SchemeDllRetrieveEncodedObjectW"
  CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC = "ContextDllCreateObjectContext"
  CONTEXT_OID_CERTIFICATE = 1_i32
  CONTEXT_OID_CRL = 2_i32
  CONTEXT_OID_CTL = 3_i32
  CONTEXT_OID_PKCS7 = 4_i32
  CONTEXT_OID_CAPI2_ANY = 5_i32
  CONTEXT_OID_OCSP_RESP = 6_i32
  CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1_u32
  CRYPT_CACHE_ONLY_RETRIEVAL = 2_u32
  CRYPT_WIRE_ONLY_RETRIEVAL = 4_u32
  CRYPT_DONT_CACHE_RESULT = 8_u32
  CRYPT_ASYNC_RETRIEVAL = 16_u32
  CRYPT_STICKY_CACHE_RETRIEVAL = 4096_u32
  CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192_u32
  CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384_u32
  CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768_u32
  CRYPT_LDAP_SIGN_RETRIEVAL = 65536_u32
  CRYPT_NO_AUTH_RETRIEVAL = 131072_u32
  CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144_u32
  CRYPT_AIA_RETRIEVAL = 524288_u32
  CRYPT_HTTP_POST_RETRIEVAL = 1048576_u32
  CRYPT_PROXY_CACHE_RETRIEVAL = 2097152_u32
  CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304_u32
  CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608_u32
  CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864_u32
  CRYPT_ENABLE_FILE_RETRIEVAL = 134217728_u32
  CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456_u32
  CRYPT_VERIFY_CONTEXT_SIGNATURE = 32_u32
  CRYPT_VERIFY_DATA_HASH = 64_u32
  CRYPT_KEEP_TIME_VALID = 128_u32
  CRYPT_DONT_VERIFY_SIGNATURE = 256_u32
  CRYPT_DONT_CHECK_TIME_VALIDITY = 512_u32
  CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024_u32
  CRYPT_ACCUMULATIVE_TIMEOUT = 2048_u32
  CRYPT_OCSP_ONLY_RETRIEVAL = 16777216_u32
  CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7_u32
  CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0_u32
  CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295_u32
  CRYPTNET_URL_CACHE_RESPONSE_NONE = 0_u32
  CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1_u32
  CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768_u32
  CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096_u32
  CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = 1_i32
  CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL = 2_i32
  URL_OID_GET_OBJECT_URL_FUNC = "UrlDllGetObjectUrl"
  URL_OID_CERTIFICATE_ISSUER = 1_i32
  URL_OID_CERTIFICATE_CRL_DIST_POINT = 2_i32
  URL_OID_CTL_ISSUER = 3_i32
  URL_OID_CTL_NEXT_UPDATE = 4_i32
  URL_OID_CRL_ISSUER = 5_i32
  URL_OID_CERTIFICATE_FRESHEST_CRL = 6_i32
  URL_OID_CRL_FRESHEST_CRL = 7_i32
  URL_OID_CROSS_CERT_DIST_POINT = 8_i32
  URL_OID_CERTIFICATE_OCSP = 9_i32
  URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT = 10_i32
  URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP = 11_i32
  URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS = 12_i32
  URL_OID_CERTIFICATE_ONLY_OCSP = 13_i32
  TIME_VALID_OID_GET_OBJECT_FUNC = "TimeValidDllGetObject"
  TIME_VALID_OID_GET_CTL = 1_i32
  TIME_VALID_OID_GET_CRL = 2_i32
  TIME_VALID_OID_GET_CRL_FROM_CERT = 3_i32
  TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT = 4_i32
  TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL = 5_i32
  TIME_VALID_OID_FLUSH_OBJECT_FUNC = "TimeValidDllFlushObject"
  TIME_VALID_OID_FLUSH_CTL = 1_i32
  TIME_VALID_OID_FLUSH_CRL = 2_i32
  TIME_VALID_OID_FLUSH_CRL_FROM_CERT = 3_i32
  TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT = 4_i32
  TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL = 5_i32
  CRYPT_KEYID_MACHINE_FLAG = 32_u32
  CRYPT_KEYID_ALLOC_FLAG = 32768_u32
  CRYPT_KEYID_DELETE_FLAG = 16_u32
  CRYPT_KEYID_SET_NEW_FLAG = 8192_u32
  CERT_CHAIN_CONFIG_REGPATH = "Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config"
  CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = "MaxUrlRetrievalByteCount"
  CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME = "ChainCacheResyncFiletime"
  CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME = "DisableMandatoryBasicConstraints"
  CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME = "DisableCANameConstraints"
  CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME = "DisableUnsupportedCriticalExtensions"
  CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME = "MaxAIAUrlCountInCert"
  CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME = "MaxAIAUrlRetrievalCountPerChain"
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = "MaxAIAUrlRetrievalByteCount"
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME = "MaxAIAUrlRetrievalCertCount"
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10_u32
  CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME = "OcspValiditySeconds"
  CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME = "DisableSerialChain"
  CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME = "SerialChainLogFileName"
  CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME = "DisableSyncWithSslTime"
  CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME = "MaxSslTimeUpdatedEventCount"
  CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5_u32
  CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295_u32
  CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME = "SslHandshakeLogFileName"
  CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME = "EnableWeakSignatureFlags"
  CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1_u32
  CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2_u32
  CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4_u32
  CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8_u32
  CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME = "MinRsaPubKeyBitLength"
  CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023_u32
  CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295_u32
  CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME = "WeakRsaPubKeyTime"
  CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME = "WeakSignatureLogDir"
  CERT_CHAIN_DEFAULT_CONFIG_SUBDIR = "Default"
  CERT_CHAIN_WEAK_PREFIX_NAME = "Weak"
  CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME = "ThirdParty"
  CERT_CHAIN_WEAK_ALL_CONFIG_NAME = "All"
  CERT_CHAIN_WEAK_FLAGS_NAME = "Flags"
  CERT_CHAIN_WEAK_HYGIENE_NAME = "Hygiene"
  CERT_CHAIN_WEAK_AFTER_TIME_NAME = "AfterTime"
  CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME = "FileHashAfterTime"
  CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME = "TimestampHashAfterTime"
  CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME = "MinBitLength"
  CERT_CHAIN_WEAK_SHA256_ALLOW_NAME = "Sha256Allow"
  CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295_u32
  CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648_u32
  CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16_u32
  CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536_u32
  CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072_u32
  CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144_u32
  CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576_u32
  CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152_u32
  CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304_u32
  CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608_u32
  CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216_u32
  CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432_u32
  CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864_u32
  CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728_u32
  CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456_u32
  CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912_u32
  CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824_u32
  CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096_u32
  CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192_u32
  CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384_u32
  CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768_u32
  CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144_u32
  CERT_CHAIN_AUTO_CURRENT_USER = 1_u32
  CERT_CHAIN_AUTO_LOCAL_MACHINE = 2_u32
  CERT_CHAIN_AUTO_IMPERSONATED = 3_u32
  CERT_CHAIN_AUTO_PROCESS_INFO = 4_u32
  CERT_CHAIN_AUTO_PINRULE_INFO = 5_u32
  CERT_CHAIN_AUTO_NETWORK_INFO = 6_u32
  CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7_u32
  CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8_u32
  CERT_CHAIN_AUTO_FLAGS_VALUE_NAME = "AutoFlags"
  CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1_u32
  CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2_u32
  CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4_u32
  CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8_u32
  CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME = "AutoFlushFirstDeltaSeconds"
  CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME = "AutoFlushNextDeltaSeconds"
  CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME = "AutoLogFileName"
  CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME = "DisableAutoFlushProcessNameList"
  CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME = "SrvOcspRespMinValiditySeconds"
  CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = "SrvOcspRespUrlRetrievalTimeoutMilliseconds"
  CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = "SrvOcspRespMaxBeforeNextUpdateSeconds"
  CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = "SrvOcspRespMinBeforeNextUpdateSeconds"
  CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME = "SrvOcspRespMinAfterNextUpdateSeconds"
  CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME = "SrvOcspRespMinSyncCertFileSeconds"
  CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5_u32
  CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME = "SrvOcspRespMaxSyncCertFileSeconds"
  CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME = "CryptnetMaxCachedOcspPerCrlCount"
  CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500_u32
  CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295_u32
  CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME = "CryptnetDefaultFlushExemptSeconds"
  CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME = "CryptnetPreFetchMinMaxAgeSeconds"
  CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME = "CryptnetPreFetchMaxMaxAgeSeconds"
  CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchMinOcspValidityPeriodSeconds"
  CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME = "CryptnetPreFetchAfterPublishPreFetchDivisor"
  CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10_u32
  CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME = "CryptnetPreFetchBeforeNextUpdatePreFetchDivisor"
  CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20_u32
  CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds"
  CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME = "CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor"
  CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 10_u32
  CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds"
  CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds"
  CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds"
  CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME = "CryptnetPreFetchTriggerPeriodSeconds"
  CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295_u32
  CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME = "CryptnetPreFetchScanAfterTriggerDelaySeconds"
  CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60_u32
  CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME = "CryptnetPreFetchRetrievalTimeoutSeconds"
  CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME = "ProcessNameList"
  CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME = "PreFetchUrlList"
  CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME = "DisableInformationEvents"
  CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME = "LogFileName"
  CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME = "TimeoutSeconds"
  CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME = "MaxAgeSeconds"
  CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = "PublishBeforeNextUpdateSeconds"
  CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME = "PublishRandomIntervalSeconds"
  CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = "MinBeforeNextUpdateSeconds"
  CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME = "MinAfterNextUpdateSeconds"
  CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = "ChainUrlRetrievalTimeoutMilliseconds"
  CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = "ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds"
  CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME = "EnableInetUnknownAuth"
  CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME = "EnableInetLocal"
  CERT_RETR_BEHAVIOR_FILE_VALUE_NAME = "AllowFileUrlScheme"
  CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME = "DisableLDAPSignAndEncrypt"
  CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME = "CryptnetCachedOcspSwitchToCrlCount"
  CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50_u32
  CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295_u32
  CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME = "DisableAIAUrlRetrieval"
  CERT_CHAIN_OPTIONS_VALUE_NAME = "Options"
  CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2_u32
  CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4_u32
  CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME = "CrossCertDownloadIntervalHours"
  CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME = "CRLValidityExtensionPeriod"
  CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12_u32
  CERT_CHAIN_CACHE_END_CERT = 1_u32
  CERT_CHAIN_THREAD_STORE_SYNC = 2_u32
  CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4_u32
  CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8_u32
  CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16_u32
  CERT_CHAIN_ENABLE_SHARE_STORE = 32_u32
  CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1_u32
  CERT_TRUST_NO_ERROR = 0_u32
  CERT_TRUST_IS_NOT_TIME_VALID = 1_u32
  CERT_TRUST_IS_NOT_TIME_NESTED = 2_u32
  CERT_TRUST_IS_REVOKED = 4_u32
  CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8_u32
  CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16_u32
  CERT_TRUST_IS_UNTRUSTED_ROOT = 32_u32
  CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64_u32
  CERT_TRUST_IS_CYCLIC = 128_u32
  CERT_TRUST_INVALID_EXTENSION = 256_u32
  CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512_u32
  CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024_u32
  CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048_u32
  CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096_u32
  CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192_u32
  CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384_u32
  CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768_u32
  CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216_u32
  CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432_u32
  CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864_u32
  CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728_u32
  CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576_u32
  CERT_TRUST_HAS_WEAK_HYGIENE = 2097152_u32
  CERT_TRUST_IS_PARTIAL_CHAIN = 65536_u32
  CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072_u32
  CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144_u32
  CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288_u32
  CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1_u32
  CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2_u32
  CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4_u32
  CERT_TRUST_IS_SELF_SIGNED = 8_u32
  CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16_u32
  CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32_u32
  CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64_u32
  CERT_TRUST_IS_KEY_ROLLOVER = 128_u32
  CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144_u32
  CERT_TRUST_SSL_TIME_VALID_OCSP = 524288_u32
  CERT_TRUST_SSL_RECONNECT_OCSP = 1048576_u32
  CERT_TRUST_HAS_PREFERRED_ISSUER = 256_u32
  CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512_u32
  CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024_u32
  CERT_TRUST_IS_PEER_TRUSTED = 2048_u32
  CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096_u32
  CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192_u32
  CERT_TRUST_IS_CA_TRUSTED = 16384_u32
  CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768_u32
  CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072_u32
  CERT_TRUST_IS_COMPLEX_CHAIN = 65536_u32
  CERT_TRUST_SSL_TIME_VALID = 16777216_u32
  CERT_TRUST_NO_TIME_CHECK = 33554432_u32
  USAGE_MATCH_TYPE_AND = 0_u32
  USAGE_MATCH_TYPE_OR = 1_u32
  CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1_u32
  CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456_u32
  CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912_u32
  CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824_u32
  CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648_u32
  CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728_u32
  CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864_u32
  CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64_u32
  CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128_u32
  CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256_u32
  CERT_CHAIN_TIMESTAMP_TIME = 512_u32
  CERT_CHAIN_ENABLE_PEER_TRUST = 1024_u32
  CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048_u32
  CERT_CHAIN_DISABLE_MD2_MD4 = 4096_u32
  CERT_CHAIN_DISABLE_AIA = 8192_u32
  CERT_CHAIN_HAS_MOTW = 16384_u32
  CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768_u32
  CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536_u32
  REVOCATION_OID_CRL_REVOCATION = 1_i32
  CERT_CHAIN_FIND_BY_ISSUER = 1_u32
  CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728_u32
  CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC = "CertDllVerifyCertificateChainPolicy"
  CERT_CHAIN_POLICY_BASE = 1_i32
  CERT_CHAIN_POLICY_AUTHENTICODE = 2_i32
  CERT_CHAIN_POLICY_AUTHENTICODE_TS = 3_i32
  CERT_CHAIN_POLICY_SSL = 4_i32
  CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5_i32
  CERT_CHAIN_POLICY_NT_AUTH = 6_i32
  CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7_i32
  CERT_CHAIN_POLICY_EV = 8_i32
  CERT_CHAIN_POLICY_SSL_F12 = 9_i32
  CERT_CHAIN_POLICY_SSL_HPKP_HEADER = 10_i32
  CERT_CHAIN_POLICY_THIRD_PARTY_ROOT = 11_i32
  CERT_CHAIN_POLICY_SSL_KEY_PIN = 12_i32
  BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648_u32
  BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144_u32
  SSL_F12_ERROR_TEXT_LENGTH = 256_u32
  CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0_u32
  CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1_u32
  CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2_u32
  CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0_u32
  CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1_u32
  CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2_u32
  SSL_HPKP_PKP_HEADER_INDEX = 0_u32
  SSL_HPKP_PKP_RO_HEADER_INDEX = 1_u32
  SSL_HPKP_HEADER_COUNT = 2_u32
  SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2_i32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1_i32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2_u32
  CRYPT_STRING_BASE64URI = 13_u32
  CRYPT_STRING_ENCODEMASK = 255_u32
  CRYPT_STRING_RESERVED100 = 256_u32
  CRYPT_STRING_RESERVED200 = 512_u32
  CRYPT_STRING_PERCENTESCAPE = 134217728_u32
  CRYPT_STRING_HASHDATA = 268435456_u32
  CRYPT_STRING_NOCRLF = 1073741824_u32
  CRYPT_STRING_NOCR = 2147483648_u32
  Szoid_pkcs_12_pbeids = "1.2.840.113549.1.12.1"
  Szoid_pkcs_12_pbewithsha1and128bitrc4 = "1.2.840.113549.1.12.1.1"
  Szoid_pkcs_12_pbewithsha1and40bitrc4 = "1.2.840.113549.1.12.1.2"
  Szoid_pkcs_12_pbewithsha1and3keytripledes = "1.2.840.113549.1.12.1.3"
  Szoid_pkcs_12_pbewithsha1and2keytripledes = "1.2.840.113549.1.12.1.4"
  Szoid_pkcs_12_pbewithsha1and128bitrc2 = "1.2.840.113549.1.12.1.5"
  Szoid_pkcs_12_pbewithsha1and40bitrc2 = "1.2.840.113549.1.12.1.6"
  Szoid_pkcs_5_pbkdf2 = "1.2.840.113549.1.5.12"
  Szoid_pkcs_5_pbes2 = "1.2.840.113549.1.5.13"
  PKCS12_IMPORT_SILENT = 64_u32
  PKCS12_ONLY_CERTIFICATES = 1024_u32
  PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048_u32
  PKCS12_VIRTUAL_ISOLATION_KEY = 65536_u32
  PKCS12_IMPORT_RESERVED_MASK = 4294901760_u32
  PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0_u32
  PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME = "PfxProvider"
  PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME = "PfxContainer"
  REPORT_NO_PRIVATE_KEY = 1_u32
  REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2_u32
  EXPORT_PRIVATE_KEYS = 4_u32
  PKCS12_PROTECT_TO_DOMAIN_SIDS = 32_u32
  PKCS12_EXPORT_SILENT = 64_u32
  PKCS12_EXPORT_PBES2_PARAMS = 128_u32
  PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256_u32
  PKCS12_ENCRYPT_CERTIFICATES = 512_u32
  PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096_u32
  PKCS12_EXPORT_ECC_CURVE_OID = 8192_u32
  PKCS12_EXPORT_RESERVED_MASK = 4294901760_u32
  PKCS12_PBKDF2_ID_HMAC_SHA1 = "1.2.840.113549.2.7"
  PKCS12_PBKDF2_ID_HMAC_SHA256 = "1.2.840.113549.2.9"
  PKCS12_PBKDF2_ID_HMAC_SHA384 = "1.2.840.113549.2.10"
  PKCS12_PBKDF2_ID_HMAC_SHA512 = "1.2.840.113549.2.11"
  PKCS12_PBES2_ALG_AES256_SHA256 = "AES256-SHA256"
  PKCS12_CONFIG_REGPATH = "Software\\Microsoft\\Windows\\CurrentVersion\\PFX"
  PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME = "EncryptCertificates"
  CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1_u32
  CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2_u32
  CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1_u32
  CERT_RETRIEVE_ISSUER_LOGO = 1_i32
  CERT_RETRIEVE_SUBJECT_LOGO = 2_i32
  CERT_RETRIEVE_COMMUNITY_LOGO = 3_i32
  CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE = 1000_i32
  CERT_SELECT_MAX_PARA = 500_u32
  CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12_u32
  CERT_SELECT_BY_FRIENDLYNAME = 13_u32
  CERT_SELECT_BY_THUMBPRINT = 14_u32
  CERT_SELECT_ALLOW_EXPIRED = 1_u32
  CERT_SELECT_TRUSTED_ROOT = 2_u32
  CERT_SELECT_DISALLOW_SELFSIGNED = 4_u32
  CERT_SELECT_HAS_PRIVATE_KEY = 8_u32
  CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16_u32
  CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32_u32
  CERT_SELECT_HARDWARE_ONLY = 64_u32
  CERT_SELECT_ALLOW_DUPLICATES = 128_u32
  CERT_SELECT_IGNORE_AUTOSELECT = 256_u32
  TIMESTAMP_FAILURE_BAD_ALG = 0_u32
  TIMESTAMP_FAILURE_BAD_REQUEST = 2_u32
  TIMESTAMP_FAILURE_BAD_FORMAT = 5_u32
  TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14_u32
  TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15_u32
  TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16_u32
  TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17_u32
  TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25_u32
  TIMESTAMP_DONT_HASH_DATA = 1_u32
  TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32_u32
  TIMESTAMP_NO_AUTH_RETRIEVAL = 131072_u32
  CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1_u32
  CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32_u32
  CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33_u32
  CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535_u32
  SSL_OBJECT_LOCATOR_PFX_FUNC = "SslObjectLocatorInitializePfx"
  SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC = "SslObjectLocatorInitializeIssuerList"
  SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC = "SslObjectLocatorInitializeCertValidationConfig"
  CERT_FILE_HASH_USE_TYPE = 1_u32
  CERT_TIMESTAMP_HASH_USE_TYPE = 2_u32
  RECIPIENTPOLICYV1 = 1_u32
  RECIPIENTPOLICYV2 = 2_u32
  E_ICARD_COMMUNICATION = -1073413888_i32
  E_ICARD_DATA_ACCESS = -1073413887_i32
  E_ICARD_EXPORT = -1073413886_i32
  E_ICARD_IDENTITY = -1073413885_i32
  E_ICARD_IMPORT = -1073413884_i32
  E_ICARD_ARGUMENT = -1073413883_i32
  E_ICARD_REQUEST = -1073413882_i32
  E_ICARD_INFORMATIONCARD = -1073413881_i32
  E_ICARD_STOREKEY = -1073413880_i32
  E_ICARD_LOGOVALIDATION = -1073413879_i32
  E_ICARD_PASSWORDVALIDATION = -1073413878_i32
  E_ICARD_POLICY = -1073413877_i32
  E_ICARD_PROCESSDIED = -1073413876_i32
  E_ICARD_SERVICEBUSY = -1073413875_i32
  E_ICARD_SERVICE = -1073413874_i32
  E_ICARD_SHUTTINGDOWN = -1073413873_i32
  E_ICARD_TOKENCREATION = -1073413872_i32
  E_ICARD_TRUSTEXCHANGE = -1073413871_i32
  E_ICARD_UNTRUSTED = -1073413870_i32
  E_ICARD_USERCANCELLED = -1073413869_i32
  E_ICARD_STORE_IMPORT = -1073413868_i32
  E_ICARD_FAIL = -1073413867_i32
  E_ICARD_UI_INITIALIZATION = -1073413862_i32
  E_ICARD_REFRESH_REQUIRED = -1073413760_i32
  E_ICARD_MISSING_APPLIESTO = -1073413759_i32
  E_ICARD_INVALID_PROOF_KEY = -1073413758_i32
  E_ICARD_UNKNOWN_REFERENCE = -1073413757_i32
  E_ICARD_FAILED_REQUIRED_CLAIMS = -1073413756_i32
  AUDIT_CARD_WRITTEN = 1074070016_i32
  AUDIT_CARD_DELETE = 1074070017_i32
  AUDIT_CARD_IMPORT = 1074070018_i32
  AUDIT_STORE_IMPORT = 1074070019_i32
  AUDIT_STORE_EXPORT = 1074070020_i32
  AUDIT_STORE_DELETE = 1074070021_i32
  AUDIT_SERVICE_IDLE_STOP = 1074070022_i32

  CLSID_CCertSrvSetupKeyInformation = LibC::GUID.new(0x38373906_u32, 0x5433_u16, 0x4633_u16, StaticArray[0xb0_u8, 0xfb_u8, 0x29_u8, 0xb7_u8, 0xe7_u8, 0x82_u8, 0x62_u8, 0xe1_u8])

  CLSID_CCertSrvSetup = LibC::GUID.new(0x961f180f_u32, 0xf55c_u16, 0x413d_u16, StaticArray[0xa9_u8, 0xb3_u8, 0x7d_u8, 0x2a_u8, 0xf4_u8, 0xd8_u8, 0xe4_u8, 0x2f_u8])

  CLSID_CMSCEPSetup = LibC::GUID.new(0xaa4f5c02_u32, 0x8e7c_u16, 0x49c4_u16, StaticArray[0x94_u8, 0xfa_u8, 0x67_u8, 0xa5_u8, 0xcc_u8, 0x5e_u8, 0xad_u8, 0xb4_u8])

  CLSID_CCertificateEnrollmentServerSetup = LibC::GUID.new(0x9902f3bc_u32, 0x88af_u16, 0x4cf8_u16, StaticArray[0xae_u8, 0x62_u8, 0x71_u8, 0x40_u8, 0x53_u8, 0x15_u8, 0x52_u8, 0xb6_u8])

  CLSID_CCertificateEnrollmentPolicyServerSetup = LibC::GUID.new(0xafe2fa32_u32, 0x41b1_u16, 0x459d_u16, StaticArray[0xa5_u8, 0xde_u8, 0x49_u8, 0xad_u8, 0xd8_u8, 0xa7_u8, 0x21_u8, 0x82_u8])

  @[Flags]
  enum BCRYPT_OPERATION : UInt32
    BCRYPT_CIPHER_OPERATION = 1_u32
    BCRYPT_HASH_OPERATION = 2_u32
    BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4_u32
    BCRYPT_SECRET_AGREEMENT_OPERATION = 8_u32
    BCRYPT_SIGNATURE_OPERATION = 16_u32
    BCRYPT_RNG_OPERATION = 32_u32
  end
  @[Flags]
  enum NCRYPT_OPERATION : UInt32
    NCRYPT_CIPHER_OPERATION = 1_u32
    NCRYPT_HASH_OPERATION = 2_u32
    NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4_u32
    NCRYPT_SECRET_AGREEMENT_OPERATION = 8_u32
    NCRYPT_SIGNATURE_OPERATION = 16_u32
  end
  @[Flags]
  enum CERT_FIND_FLAGS : UInt32
    CERT_FIND_ANY = 0_u32
    CERT_FIND_CERT_ID = 1048576_u32
    CERT_FIND_CTL_USAGE = 655360_u32
    CERT_FIND_ENHKEY_USAGE = 655360_u32
    CERT_FIND_EXISTING = 851968_u32
    CERT_FIND_HASH = 65536_u32
    CERT_FIND_HAS_PRIVATE_KEY = 1376256_u32
    CERT_FIND_ISSUER_ATTR = 196612_u32
    CERT_FIND_ISSUER_NAME = 131076_u32
    CERT_FIND_ISSUER_OF = 786432_u32
    CERT_FIND_ISSUER_STR = 524292_u32
    CERT_FIND_KEY_IDENTIFIER = 983040_u32
    CERT_FIND_KEY_SPEC = 589824_u32
    CERT_FIND_MD5_HASH = 262144_u32
    CERT_FIND_PROPERTY = 327680_u32
    CERT_FIND_PUBLIC_KEY = 393216_u32
    CERT_FIND_SHA1_HASH = 65536_u32
    CERT_FIND_SIGNATURE_HASH = 917504_u32
    CERT_FIND_SUBJECT_ATTR = 196615_u32
    CERT_FIND_SUBJECT_CERT = 720896_u32
    CERT_FIND_SUBJECT_NAME = 131079_u32
    CERT_FIND_SUBJECT_STR = 524295_u32
    CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112_u32
    CERT_FIND_PUBKEY_MD5_HASH = 1179648_u32
    CERT_FIND_SUBJECT_STR_A = 458759_u32
    CERT_FIND_SUBJECT_STR_W = 524295_u32
    CERT_FIND_ISSUER_STR_A = 458756_u32
    CERT_FIND_ISSUER_STR_W = 524292_u32
    CERT_FIND_SUBJECT_INFO_ACCESS = 1245184_u32
    CERT_FIND_HASH_STR = 1310720_u32
    CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1_u32
    CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2_u32
    CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4_u32
    CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8_u32
    CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16_u32
    CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32_u32
    CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1_u32
    CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2_u32
    CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4_u32
    CERT_FIND_NO_CTL_USAGE_FLAG = 8_u32
    CERT_FIND_OR_CTL_USAGE_FLAG = 16_u32
    CERT_FIND_VALID_CTL_USAGE_FLAG = 32_u32
  end
  enum CERT_QUERY_OBJECT_TYPE : UInt32
    CERT_QUERY_OBJECT_FILE = 1_u32
    CERT_QUERY_OBJECT_BLOB = 2_u32
  end
  enum CERT_QUERY_CONTENT_TYPE : UInt32
    CERT_QUERY_CONTENT_CERT = 1_u32
    CERT_QUERY_CONTENT_CTL = 2_u32
    CERT_QUERY_CONTENT_CRL = 3_u32
    CERT_QUERY_CONTENT_SERIALIZED_STORE = 4_u32
    CERT_QUERY_CONTENT_SERIALIZED_CERT = 5_u32
    CERT_QUERY_CONTENT_SERIALIZED_CTL = 6_u32
    CERT_QUERY_CONTENT_SERIALIZED_CRL = 7_u32
    CERT_QUERY_CONTENT_PKCS7_SIGNED = 8_u32
    CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9_u32
    CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10_u32
    CERT_QUERY_CONTENT_PKCS10 = 11_u32
    CERT_QUERY_CONTENT_PFX = 12_u32
    CERT_QUERY_CONTENT_CERT_PAIR = 13_u32
    CERT_QUERY_CONTENT_PFX_AND_LOAD = 14_u32
  end
  enum CERT_QUERY_CONTENT_TYPE_FLAGS : UInt32
    CERT_QUERY_CONTENT_FLAG_CERT = 2_u32
    CERT_QUERY_CONTENT_FLAG_CTL = 4_u32
    CERT_QUERY_CONTENT_FLAG_CRL = 8_u32
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16_u32
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32_u32
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64_u32
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128_u32
    CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256_u32
    CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512_u32
    CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024_u32
    CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048_u32
    CERT_QUERY_CONTENT_FLAG_PFX = 4096_u32
    CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192_u32
    CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384_u32
    CERT_QUERY_CONTENT_FLAG_ALL = 16382_u32
    CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818_u32
  end
  enum CERT_QUERY_FORMAT_TYPE : UInt32
    CERT_QUERY_FORMAT_BINARY = 1_u32
    CERT_QUERY_FORMAT_BASE64_ENCODED = 2_u32
    CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3_u32
  end
  enum CERT_QUERY_FORMAT_TYPE_FLAGS : UInt32
    CERT_QUERY_FORMAT_FLAG_BINARY = 2_u32
    CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4_u32
    CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8_u32
    CERT_QUERY_FORMAT_FLAG_ALL = 14_u32
  end
  enum CERT_QUERY_ENCODING_TYPE : UInt32
    X509_ASN_ENCODING = 1_u32
    PKCS_7_ASN_ENCODING = 65536_u32
  end
  enum CERT_RDN_ATTR_VALUE_TYPE : UInt32
    CERT_RDN_ANY_TYPE = 0_u32
    CERT_RDN_NUMERIC_STRING = 3_u32
    CERT_RDN_PRINTABLE_STRING = 4_u32
    CERT_RDN_T61_STRING = 5_u32
    CERT_RDN_VIDEOTEX_STRING = 6_u32
    CERT_RDN_IA5_STRING = 7_u32
    CERT_RDN_GRAPHIC_STRING = 8_u32
    CERT_RDN_ISO646_STRING = 9_u32
    CERT_RDN_GENERAL_STRING = 10_u32
    CERT_RDN_INT4_STRING = 11_u32
    CERT_RDN_UNICODE_STRING = 12_u32
    CERT_RDN_BMP_STRING = 12_u32
    CERT_RDN_ENCODED_BLOB = 1_u32
    CERT_RDN_OCTET_STRING = 2_u32
    CERT_RDN_TELETEX_STRING = 5_u32
    CERT_RDN_UNIVERSAL_STRING = 11_u32
    CERT_RDN_UTF8_STRING = 13_u32
    CERT_RDN_VISIBLE_STRING = 9_u32
  end
  enum CERT_STRING_TYPE : UInt32
    CERT_SIMPLE_NAME_STR = 1_u32
    CERT_OID_NAME_STR = 2_u32
    CERT_X500_NAME_STR = 3_u32
  end
  enum BCRYPT_TABLE : UInt32
    CRYPT_LOCAL = 1_u32
    CRYPT_DOMAIN = 2_u32
  end
  enum CERT_KEY_SPEC : UInt32
    AT_KEYEXCHANGE = 1_u32
    AT_SIGNATURE = 2_u32
    CERT_NCRYPT_KEY_SPEC = 4294967295_u32
  end
  enum BCRYPT_INTERFACE : UInt32
    BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3_u32
    BCRYPT_CIPHER_INTERFACE = 1_u32
    BCRYPT_HASH_INTERFACE = 2_u32
    BCRYPT_RNG_INTERFACE = 6_u32
    BCRYPT_SECRET_AGREEMENT_INTERFACE = 4_u32
    BCRYPT_SIGNATURE_INTERFACE = 5_u32
    NCRYPT_KEY_STORAGE_INTERFACE = 65537_u32
    NCRYPT_SCHANNEL_INTERFACE = 65538_u32
    NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539_u32
  end
  @[Flags]
  enum NCRYPT_FLAGS : UInt32
    BCRYPT_PAD_NONE = 1_u32
    BCRYPT_PAD_OAEP = 4_u32
    BCRYPT_PAD_PKCS1 = 2_u32
    BCRYPT_PAD_PSS = 8_u32
    NCRYPT_SILENT_FLAG = 64_u32
    NCRYPT_NO_PADDING_FLAG = 1_u32
    NCRYPT_PAD_OAEP_FLAG = 4_u32
    NCRYPT_PAD_PKCS1_FLAG = 2_u32
    NCRYPT_REGISTER_NOTIFY_FLAG = 1_u32
    NCRYPT_UNREGISTER_NOTIFY_FLAG = 2_u32
    NCRYPT_MACHINE_KEY_FLAG = 32_u32
    NCRYPT_UNPROTECT_NO_DECRYPT = 1_u32
    NCRYPT_OVERWRITE_KEY_FLAG = 128_u32
    NCRYPT_NO_KEY_VALIDATION = 8_u32
    NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512_u32
    NCRYPT_PAD_PSS_FLAG = 8_u32
    NCRYPT_PERSIST_FLAG = 2147483648_u32
    NCRYPT_PERSIST_ONLY_FLAG = 1073741824_u32
  end
  enum CRYPT_STRING : UInt32
    CRYPT_STRING_BASE64HEADER = 0_u32
    CRYPT_STRING_BASE64 = 1_u32
    CRYPT_STRING_BINARY = 2_u32
    CRYPT_STRING_BASE64REQUESTHEADER = 3_u32
    CRYPT_STRING_HEX = 4_u32
    CRYPT_STRING_HEXASCII = 5_u32
    CRYPT_STRING_BASE64X509CRLHEADER = 9_u32
    CRYPT_STRING_HEXADDR = 10_u32
    CRYPT_STRING_HEXASCIIADDR = 11_u32
    CRYPT_STRING_HEXRAW = 12_u32
    CRYPT_STRING_STRICT = 536870912_u32
    CRYPT_STRING_BASE64_ANY = 6_u32
    CRYPT_STRING_ANY = 7_u32
    CRYPT_STRING_HEX_ANY = 8_u32
  end
  @[Flags]
  enum CRYPT_IMPORT_PUBLIC_KEY_FLAGS : UInt32
    CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648_u32
    CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824_u32
  end
  enum CRYPT_XML_FLAGS : UInt32
    CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 268435456_u32
    CRYPT_XML_FLAG_NO_SERIALIZE = 2147483648_u32
    CRYPT_XML_SIGN_ADD_KEYVALUE = 1_u32
  end
  @[Flags]
  enum CRYPT_ENCODE_OBJECT_FLAGS : UInt32
    CRYPT_ENCODE_ALLOC_FLAG = 32768_u32
    CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072_u32
    CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824_u32
    CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648_u32
    CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912_u32
  end
  enum CRYPT_OBJECT_LOCATOR_RELEASE_REASON : UInt32
    CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1_u32
    CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2_u32
    CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3_u32
    CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4_u32
  end
  @[Flags]
  enum CRYPT_ACQUIRE_FLAGS : UInt32
    CRYPT_ACQUIRE_CACHE_FLAG = 1_u32
    CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4_u32
    CRYPT_ACQUIRE_NO_HEALING = 8_u32
    CRYPT_ACQUIRE_SILENT_FLAG = 64_u32
    CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2_u32
  end
  @[Flags]
  enum CRYPT_GET_URL_FLAGS : UInt32
    CRYPT_GET_URL_FROM_PROPERTY = 1_u32
    CRYPT_GET_URL_FROM_EXTENSION = 2_u32
    CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4_u32
    CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8_u32
  end
  enum CERT_STORE_SAVE_AS : UInt32
    CERT_STORE_SAVE_AS_PKCS7 = 2_u32
    CERT_STORE_SAVE_AS_STORE = 1_u32
  end
  enum BCRYPT_QUERY_PROVIDER_MODE : UInt32
    CRYPT_ANY = 4_u32
    CRYPT_UM = 1_u32
    CRYPT_KM = 2_u32
    CRYPT_MM = 3_u32
  end
  @[Flags]
  enum CERT_FIND_CHAIN_IN_STORE_FLAGS : UInt32
    CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1_u32
    CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2_u32
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768_u32
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4_u32
    CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8_u32
    CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384_u32
  end
  enum CERT_CONTROL_STORE_FLAGS : UInt32
    CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1_u32
    CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2_u32
    CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1_u32
  end
  @[Flags]
  enum BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS : UInt32
    BCRYPT_ALG_HANDLE_HMAC_FLAG = 8_u32
    BCRYPT_PROV_DISPATCH = 1_u32
    BCRYPT_HASH_REUSABLE_FLAG = 32_u32
  end
  enum CERT_STORE_SAVE_TO : UInt32
    CERT_STORE_SAVE_TO_FILE = 1_u32
    CERT_STORE_SAVE_TO_FILENAME = 4_u32
    CERT_STORE_SAVE_TO_FILENAME_A = 3_u32
    CERT_STORE_SAVE_TO_FILENAME_W = 4_u32
    CERT_STORE_SAVE_TO_MEMORY = 2_u32
  end
  enum CRYPT_SET_PROV_PARAM_ID : UInt32
    PP_CLIENT_HWND = 1_u32
    PP_DELETEKEY = 24_u32
    PP_KEYEXCHANGE_ALG = 14_u32
    PP_KEYEXCHANGE_PIN = 32_u32
    PP_KEYEXCHANGE_KEYSIZE = 12_u32
    PP_KEYSET_SEC_DESCR = 8_u32
    PP_PIN_PROMPT_STRING = 44_u32
    PP_ROOT_CERTSTORE = 46_u32
    PP_SIGNATURE_ALG = 15_u32
    PP_SIGNATURE_PIN = 33_u32
    PP_SIGNATURE_KEYSIZE = 13_u32
    PP_UI_PROMPT = 21_u32
    PP_USE_HARDWARE_RNG = 38_u32
    PP_USER_CERTSTORE = 42_u32
    PP_SECURE_KEYEXCHANGE_PIN = 47_u32
    PP_SECURE_SIGNATURE_PIN = 48_u32
    PP_SMARTCARD_READER = 43_u32
  end
  enum CRYPT_KEY_PARAM_ID : UInt32
    KP_ALGID = 7_u32
    KP_CERTIFICATE = 26_u32
    KP_PERMISSIONS = 6_u32
    KP_SALT = 2_u32
    KP_SALT_EX = 10_u32
    KP_BLOCKLEN = 8_u32
    KP_GET_USE_COUNT = 42_u32
    KP_KEYLEN = 9_u32
  end
  @[Flags]
  enum CRYPT_KEY_FLAGS : UInt32
    CRYPT_EXPORTABLE = 1_u32
    CRYPT_USER_PROTECTED = 2_u32
    CRYPT_ARCHIVABLE = 16384_u32
    CRYPT_CREATE_IV = 512_u32
    CRYPT_CREATE_SALT = 4_u32
    CRYPT_DATA_KEY = 2048_u32
    CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768_u32
    CRYPT_KEK = 1024_u32
    CRYPT_INITIATOR = 64_u32
    CRYPT_NO_SALT = 16_u32
    CRYPT_ONLINE = 128_u32
    CRYPT_PREGEN = 64_u32
    CRYPT_RECIPIENT = 16_u32
    CRYPT_SF = 256_u32
    CRYPT_SGCKEY = 8192_u32
    CRYPT_VOLATILE = 4096_u32
    CRYPT_MACHINE_KEYSET = 32_u32
    CRYPT_USER_KEYSET = 4096_u32
    PKCS12_PREFER_CNG_KSP = 256_u32
    PKCS12_ALWAYS_CNG_KSP = 512_u32
    PKCS12_ALLOW_OVERWRITE_KEY = 16384_u32
    PKCS12_NO_PERSIST_KEY = 32768_u32
    PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16_u32
    CRYPT_OAEP = 64_u32
    CRYPT_BLOB_VER3 = 128_u32
    CRYPT_DESTROYKEY = 4_u32
    CRYPT_SSL2_FALLBACK = 2_u32
    CRYPT_Y_ONLY = 1_u32
    CRYPT_IPSEC_HMAC_KEY = 256_u32
    CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1_u32
    CERT_SET_KEY_CONTEXT_PROP_ID = 1_u32
  end
  enum CRYPT_MSG_TYPE : UInt32
    CMSG_DATA = 1_u32
    CMSG_SIGNED = 2_u32
    CMSG_ENVELOPED = 3_u32
    CMSG_SIGNED_AND_ENVELOPED = 4_u32
    CMSG_HASHED = 5_u32
  end
  enum CERT_OPEN_STORE_FLAGS : UInt32
    CERT_STORE_BACKUP_RESTORE_FLAG = 2048_u32
    CERT_STORE_CREATE_NEW_FLAG = 8192_u32
    CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4_u32
    CERT_STORE_DELETE_FLAG = 16_u32
    CERT_STORE_ENUM_ARCHIVED_FLAG = 512_u32
    CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096_u32
    CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1_u32
    CERT_STORE_OPEN_EXISTING_FLAG = 16384_u32
    CERT_STORE_READONLY_FLAG = 32768_u32
    CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2_u32
    CERT_STORE_SHARE_CONTEXT_FLAG = 128_u32
    CERT_STORE_UPDATE_KEYID_FLAG = 1024_u32
  end
  @[Flags]
  enum CRYPT_DEFAULT_CONTEXT_FLAGS : UInt32
    CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1_u32
    CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2_u32
  end
  enum CRYPT_VERIFY_CERT_FLAGS : UInt32
    CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1_u32
    CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2_u32
    CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4_u32
  end
  enum CRYPT_SET_HASH_PARAM : UInt32
    HP_HMAC_INFO = 5_u32
    HP_HASHVAL = 2_u32
  end
  enum CERT_SYSTEM_STORE_FLAGS : UInt32
    CERT_SYSTEM_STORE_LOCATION_MASK = 16711680_u32
    CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648_u32
  end
  @[Flags]
  enum CERT_CREATE_SELFSIGN_FLAGS : UInt32
    CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2_u32
    CERT_CREATE_SELFSIGN_NO_SIGN = 1_u32
  end
  enum CRYPT_DEFAULT_CONTEXT_TYPE : UInt32
    CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1_u32
    CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2_u32
  end
  @[Flags]
  enum BCRYPT_RESOLVE_PROVIDERS_FLAGS : UInt32
    CRYPT_ALL_FUNCTIONS = 1_u32
    CRYPT_ALL_PROVIDERS = 2_u32
  end
  enum CERT_FIND_TYPE : UInt32
    CTL_FIND_ANY = 0_u32
    CTL_FIND_SHA1_HASH = 1_u32
    CTL_FIND_MD5_HASH = 2_u32
    CTL_FIND_USAGE = 3_u32
    CTL_FIND_SAME_USAGE_FLAG = 1_u32
    CTL_FIND_EXISTING = 5_u32
    CTL_FIND_SUBJECT = 4_u32
  end
  enum CRYPT_FIND_FLAGS : UInt32
    CRYPT_FIND_USER_KEYSET_FLAG = 1_u32
    CRYPT_FIND_MACHINE_KEYSET_FLAG = 2_u32
    CRYPT_FIND_SILENT_KEYSET_FLAG = 64_u32
  end
  @[Flags]
  enum CRYPT_IMAGE_REF_FLAGS : UInt32
    CRYPT_MIN_DEPENDENCIES = 1_u32
    CRYPT_PROCESS_ISOLATE = 65536_u32
  end
  enum CERT_REVOCATION_STATUS_REASON : UInt32
    CRL_REASON_UNSPECIFIED = 0_u32
    CRL_REASON_KEY_COMPROMISE = 1_u32
    CRL_REASON_CA_COMPROMISE = 2_u32
    CRL_REASON_AFFILIATION_CHANGED = 3_u32
    CRL_REASON_SUPERSEDED = 4_u32
    CRL_REASON_CESSATION_OF_OPERATION = 5_u32
    CRL_REASON_CERTIFICATE_HOLD = 6_u32
    CRL_REASON_REMOVE_FROM_CRL = 8_u32
  end
  @[Flags]
  enum CERT_ROOT_PROGRAM_FLAGS : UInt32
    CERT_ROOT_PROGRAM_FLAG_LSC = 64_u32
    CERT_ROOT_PROGRAM_FLAG_ORG = 128_u32
    CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32_u32
  end
  enum CRYPT_XML_KEY_VALUE_TYPE : UInt32
    CRYPT_XML_KEY_VALUE_TYPE_DSA = 1_u32
    CRYPT_XML_KEY_VALUE_TYPE_RSA = 2_u32
    CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 3_u32
    CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 4_u32
  end
  enum CERT_LOGOTYPE_CHOICE : UInt32
    CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0_u32
    CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1_u32
    CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2_u32
  end
  enum CMSG_KEY_AGREE_OPTION : UInt32
    CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1_u32
    CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2_u32
  end
  enum CERT_LOGOTYPE_OPTION : UInt32
    CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1_u32
    CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2_u32
  end
  @[Flags]
  enum CERT_STORE_PROV_FLAGS : UInt32
    CERT_STORE_PROV_EXTERNAL_FLAG = 1_u32
    CERT_STORE_PROV_DELETED_FLAG = 2_u32
    CERT_STORE_PROV_NO_PERSIST_FLAG = 4_u32
    CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8_u32
    CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16_u32
  end
  enum CMSG_KEY_AGREE_ORIGINATOR : UInt32
    CMSG_KEY_AGREE_ORIGINATOR_CERT = 1_u32
    CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2_u32
  end
  @[Flags]
  enum CRYPT_CONTEXT_CONFIG_FLAGS : UInt32
    CRYPT_EXCLUSIVE = 1_u32
    CRYPT_OVERRIDE = 65536_u32
  end
  enum BCRYPT_DSA_MAGIC : UInt32
    BCRYPT_DSA_PUBLIC_MAGIC = 1112560452_u32
    BCRYPT_DSA_PRIVATE_MAGIC = 1448104772_u32
  end
  enum CRYPT_XML_X509DATA_TYPE : UInt32
    CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 1_u32
    CRYPT_XML_X509DATA_TYPE_SKI = 2_u32
    CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 3_u32
    CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 4_u32
    CRYPT_XML_X509DATA_TYPE_CRL = 5_u32
    CRYPT_XML_X509DATA_TYPE_CUSTOM = 6_u32
  end
  enum CERT_BIOMETRIC_DATA_TYPE : UInt32
    CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1_u32
    CERT_BIOMETRIC_OID_DATA_CHOICE = 2_u32
  end
  enum CERT_CHAIN_POLICY_FLAGS : UInt32
    CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1_u32
    CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2_u32
    CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4_u32
    CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7_u32
    CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8_u32
    CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16_u32
    CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32_u32
    CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64_u32
    CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128_u32
    CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256_u32
    CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512_u32
    CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024_u32
    CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048_u32
    CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840_u32
    CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768_u32
    CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384_u32
    CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192_u32
    CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096_u32
  end
  @[Flags]
  enum CERT_STRONG_SIGN_FLAGS : UInt32
    CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1_u32
    CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2_u32
  end
  enum CERT_LOGOTYPE_IMAGE_INFO_TYPE : UInt32
    CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1_u32
    CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2_u32
  end
  enum CRYPT_XML_STATUS_INFO_STATUS : UInt32
    CRYPT_XML_STATUS_INTERNAL_REFERENCE = 1_u32
    CRYPT_XML_STATUS_KEY_AVAILABLE = 2_u32
    CRYPT_XML_STATUS_DIGESTING = 4_u32
    CRYPT_XML_STATUS_DIGEST_VALID = 8_u32
    CRYPT_XML_STATUS_SIGNATURE_VALID = 65536_u32
    CRYPT_XML_STATUS_OPENED_TO_ENCODE = 2147483648_u32
  end
  @[Flags]
  enum CRYPT_XML_TRANSFORM_FLAGS : UInt32
    CRYPT_XML_TRANSFORM_ON_STREAM = 1_u32
    CRYPT_XML_TRANSFORM_ON_NODESET = 2_u32
    CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 3_u32
  end
  enum CRYPT_XML_GROUP_ID : UInt32
    CRYPT_XML_GROUP_ID_HASH = 1_u32
    CRYPT_XML_GROUP_ID_SIGN = 2_u32
  end
  enum CERT_SELECT_CRITERIA_TYPE : UInt32
    CERT_SELECT_BY_ENHKEY_USAGE = 1_u32
    CERT_SELECT_BY_KEY_USAGE = 2_u32
    CERT_SELECT_BY_POLICY_OID = 3_u32
    CERT_SELECT_BY_PROV_NAME = 4_u32
    CERT_SELECT_BY_EXTENSION = 5_u32
    CERT_SELECT_BY_SUBJECT_HOST_NAME = 6_u32
    CERT_SELECT_BY_ISSUER_ATTR = 7_u32
    CERT_SELECT_BY_SUBJECT_ATTR = 8_u32
    CERT_SELECT_BY_ISSUER_NAME = 9_u32
    CERT_SELECT_BY_PUBLIC_KEY = 10_u32
    CERT_SELECT_BY_TLS_SIGNATURES = 11_u32
  end
  enum BCRYPT_RSAKEY_BLOB_MAGIC : UInt32
    BCRYPT_RSAPUBLIC_MAGIC = 826364754_u32
    BCRYPT_RSAPRIVATE_MAGIC = 843141970_u32
    BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186_u32
  end
  enum CRYPT_XML_KEYINFO_TYPE : UInt32
    CRYPT_XML_KEYINFO_TYPE_KEYNAME = 1_u32
    CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 2_u32
    CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 3_u32
    CRYPT_XML_KEYINFO_TYPE_X509DATA = 4_u32
    CRYPT_XML_KEYINFO_TYPE_CUSTOM = 5_u32
  end
  enum CRYPT_TIMESTAMP_VERSION : UInt32
    TIMESTAMP_VERSION = 1_u32
  end
  enum CERT_ID_OPTION : UInt32
    CERT_ID_ISSUER_SERIAL_NUMBER = 1_u32
    CERT_ID_KEY_IDENTIFIER = 2_u32
    CERT_ID_SHA1_HASH = 3_u32
  end
  enum HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE : UInt32
    AUTHTYPE_CLIENT = 1_u32
    AUTHTYPE_SERVER = 2_u32
  end
  enum BCRYPT_DH_KEY_BLOB_MAGIC : UInt32
    BCRYPT_DH_PUBLIC_MAGIC = 1112557636_u32
    BCRYPT_DH_PRIVATE_MAGIC = 1448101956_u32
  end
  enum CRYPT_XML_STATUS_ERROR_STATUS : UInt32
    CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 1_u32
    CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 2_u32
    CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 5_u32
    CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 8_u32
    CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 65536_u32
    CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 131072_u32
  end
  enum CRYPT_TIMESTAMP_RESPONSE_STATUS : UInt32
    TIMESTAMP_STATUS_GRANTED = 0_u32
    TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1_u32
    TIMESTAMP_STATUS_REJECTED = 2_u32
    TIMESTAMP_STATUS_WAITING = 3_u32
    TIMESTAMP_STATUS_REVOCATION_WARNING = 4_u32
    TIMESTAMP_STATUS_REVOKED = 5_u32
  end
  enum NCRYPT_ALGORITHM_NAME_CLASS : UInt32
    NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3_u32
    NCRYPT_SECRET_AGREEMENT_INTERFACE = 4_u32
    NCRYPT_SIGNATURE_INTERFACE = 5_u32
  end
  enum ECC_CURVE_TYPE_ENUM
    BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1_i32
    BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2_i32
    BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3_i32
  end
  enum ECC_CURVE_ALG_ID_ENUM
    BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0_i32
  end
  enum HASHALGORITHM_ENUM
    DSA_HASH_ALGORITHM_SHA1 = 0_i32
    DSA_HASH_ALGORITHM_SHA256 = 1_i32
    DSA_HASH_ALGORITHM_SHA512 = 2_i32
  end
  enum DSAFIPSVERSION_ENUM
    DSA_FIPS186_2 = 0_i32
    DSA_FIPS186_3 = 1_i32
  end
  enum BCRYPT_HASH_OPERATION_TYPE
    BCRYPT_HASH_OPERATION_HASH_DATA = 1_i32
    BCRYPT_HASH_OPERATION_FINISH_HASH = 2_i32
  end
  enum BCRYPT_MULTI_OPERATION_TYPE
    BCRYPT_OPERATION_TYPE_HASH = 1_i32
  end
  enum CertKeyType : UInt32
    KeyTypeOther = 0_u32
    KeyTypeVirtualSmartCard = 1_u32
    KeyTypePhysicalSmartCard = 2_u32
    KeyTypePassport = 3_u32
    KeyTypePassportRemote = 4_u32
    KeyTypePassportSmartCard = 5_u32
    KeyTypeHardware = 6_u32
    KeyTypeSoftware = 7_u32
    KeyTypeSelfSigned = 8_u32
  end
  enum CRYPT_XML_CHARSET
    CRYPT_XML_CHARSET_AUTO = 0_i32
    CRYPT_XML_CHARSET_UTF8 = 1_i32
    CRYPT_XML_CHARSET_UTF16LE = 2_i32
    CRYPT_XML_CHARSET_UTF16BE = 3_i32
  end
  enum CRYPT_XML_PROPERTY_ID
    CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1_i32
    CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2_i32
    CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3_i32
    CRYPT_XML_PROPERTY_DOC_DECLARATION = 4_i32
    CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5_i32
  end
  enum CRYPT_XML_KEYINFO_SPEC
    CRYPT_XML_KEYINFO_SPEC_NONE = 0_i32
    CRYPT_XML_KEYINFO_SPEC_ENCODED = 1_i32
    CRYPT_XML_KEYINFO_SPEC_PARAM = 2_i32
  end
  enum HandleType
    Asymmetric = 1_i32
    Symmetric = 2_i32
    Transform = 3_i32
    Hash = 4_i32
  end
  enum PaddingMode
    None = 1_i32
    PKCS7 = 2_i32
    Zeros = 3_i32
    ANSIX923 = 4_i32
    ISO10126 = 5_i32
  end
  enum Direction
    DirectionEncrypt = 1_i32
    DirectionDecrypt = 2_i32
  end
  enum CASetupProperty
    ENUM_SETUPPROP_INVALID = -1_i32
    ENUM_SETUPPROP_CATYPE = 0_i32
    ENUM_SETUPPROP_CAKEYINFORMATION = 1_i32
    ENUM_SETUPPROP_INTERACTIVE = 2_i32
    ENUM_SETUPPROP_CANAME = 3_i32
    ENUM_SETUPPROP_CADSSUFFIX = 4_i32
    ENUM_SETUPPROP_VALIDITYPERIOD = 5_i32
    ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6_i32
    ENUM_SETUPPROP_EXPIRATIONDATE = 7_i32
    ENUM_SETUPPROP_PRESERVEDATABASE = 8_i32
    ENUM_SETUPPROP_DATABASEDIRECTORY = 9_i32
    ENUM_SETUPPROP_LOGDIRECTORY = 10_i32
    ENUM_SETUPPROP_SHAREDFOLDER = 11_i32
    ENUM_SETUPPROP_PARENTCAMACHINE = 12_i32
    ENUM_SETUPPROP_PARENTCANAME = 13_i32
    ENUM_SETUPPROP_REQUESTFILE = 14_i32
    ENUM_SETUPPROP_WEBCAMACHINE = 15_i32
    ENUM_SETUPPROP_WEBCANAME = 16_i32
  end
  enum MSCEPSetupProperty
    ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0_i32
    ENUM_CEPSETUPPROP_USECHALLENGE = 1_i32
    ENUM_CEPSETUPPROP_RANAME_CN = 2_i32
    ENUM_CEPSETUPPROP_RANAME_EMAIL = 3_i32
    ENUM_CEPSETUPPROP_RANAME_COMPANY = 4_i32
    ENUM_CEPSETUPPROP_RANAME_DEPT = 5_i32
    ENUM_CEPSETUPPROP_RANAME_CITY = 6_i32
    ENUM_CEPSETUPPROP_RANAME_STATE = 7_i32
    ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8_i32
    ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9_i32
    ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10_i32
    ENUM_CEPSETUPPROP_CAINFORMATION = 11_i32
    ENUM_CEPSETUPPROP_MSCEPURL = 12_i32
    ENUM_CEPSETUPPROP_CHALLENGEURL = 13_i32
  end
  enum CESSetupProperty
    ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0_i32
    ENUM_CESSETUPPROP_CACONFIG = 1_i32
    ENUM_CESSETUPPROP_AUTHENTICATION = 2_i32
    ENUM_CESSETUPPROP_SSLCERTHASH = 3_i32
    ENUM_CESSETUPPROP_URL = 4_i32
    ENUM_CESSETUPPROP_RENEWALONLY = 5_i32
    ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6_i32
  end
  enum CEPSetupProperty
    ENUM_CEPSETUPPROP_AUTHENTICATION = 0_i32
    ENUM_CEPSETUPPROP_SSLCERTHASH = 1_i32
    ENUM_CEPSETUPPROP_URL = 2_i32
    ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3_i32
  end

  @[Extern]
  struct CMS_KEY_INFO
    property dwVersion : UInt32
    property algid : UInt32
    property pbOID : UInt8*
    property cbOID : UInt32
    def initialize(@dwVersion : UInt32, @algid : UInt32, @pbOID : UInt8*, @cbOID : UInt32)
    end
  end

  @[Extern]
  struct HMAC_Info
    property hash_algid : UInt32
    property pbInnerString : UInt8*
    property cbInnerString : UInt32
    property pbOuterString : UInt8*
    property cbOuterString : UInt32
    def initialize(@hash_algid : UInt32, @pbInnerString : UInt8*, @cbInnerString : UInt32, @pbOuterString : UInt8*, @cbOuterString : UInt32)
    end
  end

  @[Extern]
  struct SCHANNEL_ALG
    property dwUse : UInt32
    property algid : UInt32
    property cBits : UInt32
    property dwFlags : UInt32
    property dwReserved : UInt32
    def initialize(@dwUse : UInt32, @algid : UInt32, @cBits : UInt32, @dwFlags : UInt32, @dwReserved : UInt32)
    end
  end

  @[Extern]
  struct PROV_ENUMALGS
    property aiAlgid : UInt32
    property dwBitLen : UInt32
    property dwNameLen : UInt32
    property szName : Win32cr::Foundation::CHAR[20]
    def initialize(@aiAlgid : UInt32, @dwBitLen : UInt32, @dwNameLen : UInt32, @szName : Win32cr::Foundation::CHAR[20])
    end
  end

  @[Extern]
  struct PROV_ENUMALGS_EX
    property aiAlgid : UInt32
    property dwDefaultLen : UInt32
    property dwMinLen : UInt32
    property dwMaxLen : UInt32
    property dwProtocols : UInt32
    property dwNameLen : UInt32
    property szName : Win32cr::Foundation::CHAR[20]
    property dwLongNameLen : UInt32
    property szLongName : Win32cr::Foundation::CHAR[40]
    def initialize(@aiAlgid : UInt32, @dwDefaultLen : UInt32, @dwMinLen : UInt32, @dwMaxLen : UInt32, @dwProtocols : UInt32, @dwNameLen : UInt32, @szName : Win32cr::Foundation::CHAR[20], @dwLongNameLen : UInt32, @szLongName : Win32cr::Foundation::CHAR[40])
    end
  end

  @[Extern]
  struct PUBLICKEYSTRUC
    property bType : UInt8
    property bVersion : UInt8
    property reserved : UInt16
    property aiKeyAlg : UInt32
    def initialize(@bType : UInt8, @bVersion : UInt8, @reserved : UInt16, @aiKeyAlg : UInt32)
    end
  end

  @[Extern]
  struct RSAPUBKEY
    property magic : UInt32
    property bitlen : UInt32
    property pubexp : UInt32
    def initialize(@magic : UInt32, @bitlen : UInt32, @pubexp : UInt32)
    end
  end

  @[Extern]
  struct PUBKEY
    property magic : UInt32
    property bitlen : UInt32
    def initialize(@magic : UInt32, @bitlen : UInt32)
    end
  end

  @[Extern]
  struct DSSSEED
    property counter : UInt32
    property seed : UInt8[20]
    def initialize(@counter : UInt32, @seed : UInt8[20])
    end
  end

  @[Extern]
  struct PUBKEYVER3
    property magic : UInt32
    property bitlenP : UInt32
    property bitlenQ : UInt32
    property bitlenJ : UInt32
    property dss_seed : Win32cr::Security::Cryptography::DSSSEED
    def initialize(@magic : UInt32, @bitlenP : UInt32, @bitlenQ : UInt32, @bitlenJ : UInt32, @dss_seed : Win32cr::Security::Cryptography::DSSSEED)
    end
  end

  @[Extern]
  struct PRIVKEYVER3
    property magic : UInt32
    property bitlenP : UInt32
    property bitlenQ : UInt32
    property bitlenJ : UInt32
    property bitlenX : UInt32
    property dss_seed : Win32cr::Security::Cryptography::DSSSEED
    def initialize(@magic : UInt32, @bitlenP : UInt32, @bitlenQ : UInt32, @bitlenJ : UInt32, @bitlenX : UInt32, @dss_seed : Win32cr::Security::Cryptography::DSSSEED)
    end
  end

  @[Extern]
  struct KEY_TYPE_SUBTYPE
    property dwKeySpec : UInt32
    property type__ : LibC::GUID
    property subtype : LibC::GUID
    def initialize(@dwKeySpec : UInt32, @type__ : LibC::GUID, @subtype : LibC::GUID)
    end
  end

  @[Extern]
  struct CERT_FORTEZZA_DATA_PROP
    property serial_number : UInt8[8]
    property cert_index : Int32
    property cert_label : UInt8[36]
    def initialize(@serial_number : UInt8[8], @cert_index : Int32, @cert_label : UInt8[36])
    end
  end

  @[Extern]
  struct CRYPT_RC4_KEY_STATE
    property key : UInt8[16]
    property s_box : UInt8[256]
    property i : UInt8
    property j : UInt8
    def initialize(@key : UInt8[16], @s_box : UInt8[256], @i : UInt8, @j : UInt8)
    end
  end

  @[Extern]
  struct CRYPT_DES_KEY_STATE
    property key : UInt8[8]
    property iv : UInt8[8]
    property feedback : UInt8[8]
    def initialize(@key : UInt8[8], @iv : UInt8[8], @feedback : UInt8[8])
    end
  end

  @[Extern]
  struct CRYPT_3DES_KEY_STATE
    property key : UInt8[24]
    property iv : UInt8[8]
    property feedback : UInt8[8]
    def initialize(@key : UInt8[24], @iv : UInt8[8], @feedback : UInt8[8])
    end
  end

  @[Extern]
  struct CRYPT_AES_128_KEY_STATE
    property key : UInt8[16]
    property iv : UInt8[16]
    property encryption_state : UInt8[176]
    property decryption_state : UInt8[176]
    property feedback : UInt8[16]
    def initialize(@key : UInt8[16], @iv : UInt8[16], @encryption_state : UInt8[176], @decryption_state : UInt8[176], @feedback : UInt8[16])
    end
  end

  @[Extern]
  struct CRYPT_AES_256_KEY_STATE
    property key : UInt8[32]
    property iv : UInt8[16]
    property encryption_state : UInt8[240]
    property decryption_state : UInt8[240]
    property feedback : UInt8[16]
    def initialize(@key : UInt8[32], @iv : UInt8[16], @encryption_state : UInt8[240], @decryption_state : UInt8[240], @feedback : UInt8[16])
    end
  end

  @[Extern]
  struct CRYPTOAPI_BLOB
    property cbData : UInt32
    property pbData : UInt8*
    def initialize(@cbData : UInt32, @pbData : UInt8*)
    end
  end

  @[Extern]
  struct CMS_DH_KEY_INFO
    property dwVersion : UInt32
    property algid : UInt32
    property pszContentEncObjId : Win32cr::Foundation::PSTR
    property pub_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pReserved : Void*
    def initialize(@dwVersion : UInt32, @algid : UInt32, @pszContentEncObjId : Win32cr::Foundation::PSTR, @pub_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pReserved : Void*)
    end
  end

  @[Extern]
  struct BCRYPT_KEY_LENGTHS_STRUCT
    property dwMinLength : UInt32
    property dwMaxLength : UInt32
    property dwIncrement : UInt32
    def initialize(@dwMinLength : UInt32, @dwMaxLength : UInt32, @dwIncrement : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_OID
    property cbOID : UInt32
    property pbOID : UInt8*
    def initialize(@cbOID : UInt32, @pbOID : UInt8*)
    end
  end

  @[Extern]
  struct BCRYPT_OID_LIST
    property dwOIDCount : UInt32
    property pOIDs : Win32cr::Security::Cryptography::BCRYPT_OID*
    def initialize(@dwOIDCount : UInt32, @pOIDs : Win32cr::Security::Cryptography::BCRYPT_OID*)
    end
  end

  @[Extern]
  struct BCRYPT_PKCS1_PADDING_INFO
    property pszAlgId : Win32cr::Foundation::PWSTR
    def initialize(@pszAlgId : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct BCRYPT_PSS_PADDING_INFO
    property pszAlgId : Win32cr::Foundation::PWSTR
    property cbSalt : UInt32
    def initialize(@pszAlgId : Win32cr::Foundation::PWSTR, @cbSalt : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_OAEP_PADDING_INFO
    property pszAlgId : Win32cr::Foundation::PWSTR
    property pbLabel : UInt8*
    property cbLabel : UInt32
    def initialize(@pszAlgId : Win32cr::Foundation::PWSTR, @pbLabel : UInt8*, @cbLabel : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    property cbSize : UInt32
    property dwInfoVersion : UInt32
    property pbNonce : UInt8*
    property cbNonce : UInt32
    property pbAuthData : UInt8*
    property cbAuthData : UInt32
    property pbTag : UInt8*
    property cbTag : UInt32
    property pbMacContext : UInt8*
    property cbMacContext : UInt32
    property cbAAD : UInt32
    property cbData : UInt64
    property dwFlags : UInt32
    def initialize(@cbSize : UInt32, @dwInfoVersion : UInt32, @pbNonce : UInt8*, @cbNonce : UInt32, @pbAuthData : UInt8*, @cbAuthData : UInt32, @pbTag : UInt8*, @cbTag : UInt32, @pbMacContext : UInt8*, @cbMacContext : UInt32, @cbAAD : UInt32, @cbData : UInt64, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct BCryptBuffer
    property cbBuffer : UInt32
    property buffer_type : UInt32
    property pvBuffer : Void*
    def initialize(@cbBuffer : UInt32, @buffer_type : UInt32, @pvBuffer : Void*)
    end
  end

  @[Extern]
  struct BCryptBufferDesc
    property ulVersion : UInt32
    property cBuffers : UInt32
    property pBuffers : Win32cr::Security::Cryptography::BCryptBuffer*
    def initialize(@ulVersion : UInt32, @cBuffers : UInt32, @pBuffers : Win32cr::Security::Cryptography::BCryptBuffer*)
    end
  end

  @[Extern]
  struct BCRYPT_KEY_BLOB
    property magic : UInt32
    def initialize(@magic : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_RSAKEY_BLOB
    property magic : Win32cr::Security::Cryptography::BCRYPT_RSAKEY_BLOB_MAGIC
    property bit_length : UInt32
    property cbPublicExp : UInt32
    property cbModulus : UInt32
    property cbPrime1 : UInt32
    property cbPrime2 : UInt32
    def initialize(@magic : Win32cr::Security::Cryptography::BCRYPT_RSAKEY_BLOB_MAGIC, @bit_length : UInt32, @cbPublicExp : UInt32, @cbModulus : UInt32, @cbPrime1 : UInt32, @cbPrime2 : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_ECCKEY_BLOB
    property dwMagic : UInt32
    property cbKey : UInt32
    def initialize(@dwMagic : UInt32, @cbKey : UInt32)
    end
  end

  @[Extern]
  struct SSL_ECCKEY_BLOB
    property dwCurveType : UInt32
    property cbKey : UInt32
    def initialize(@dwCurveType : UInt32, @cbKey : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_ECCFULLKEY_BLOB
    property dwMagic : UInt32
    property dwVersion : UInt32
    property dwCurveType : Win32cr::Security::Cryptography::ECC_CURVE_TYPE_ENUM
    property dwCurveGenerationAlgId : Win32cr::Security::Cryptography::ECC_CURVE_ALG_ID_ENUM
    property cbFieldLength : UInt32
    property cbSubgroupOrder : UInt32
    property cbCofactor : UInt32
    property cbSeed : UInt32
    def initialize(@dwMagic : UInt32, @dwVersion : UInt32, @dwCurveType : Win32cr::Security::Cryptography::ECC_CURVE_TYPE_ENUM, @dwCurveGenerationAlgId : Win32cr::Security::Cryptography::ECC_CURVE_ALG_ID_ENUM, @cbFieldLength : UInt32, @cbSubgroupOrder : UInt32, @cbCofactor : UInt32, @cbSeed : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_DH_KEY_BLOB
    property dwMagic : Win32cr::Security::Cryptography::BCRYPT_DH_KEY_BLOB_MAGIC
    property cbKey : UInt32
    def initialize(@dwMagic : Win32cr::Security::Cryptography::BCRYPT_DH_KEY_BLOB_MAGIC, @cbKey : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_DH_PARAMETER_HEADER
    property cbLength : UInt32
    property dwMagic : UInt32
    property cbKeyLength : UInt32
    def initialize(@cbLength : UInt32, @dwMagic : UInt32, @cbKeyLength : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_DSA_KEY_BLOB
    property dwMagic : Win32cr::Security::Cryptography::BCRYPT_DSA_MAGIC
    property cbKey : UInt32
    property count : UInt8[4]
    property seed : UInt8[20]
    property q : UInt8[20]
    def initialize(@dwMagic : Win32cr::Security::Cryptography::BCRYPT_DSA_MAGIC, @cbKey : UInt32, @count : UInt8[4], @seed : UInt8[20], @q : UInt8[20])
    end
  end

  @[Extern]
  struct BCRYPT_DSA_KEY_BLOB_V2
    property dwMagic : Win32cr::Security::Cryptography::BCRYPT_DSA_MAGIC
    property cbKey : UInt32
    property hashAlgorithm : Win32cr::Security::Cryptography::HASHALGORITHM_ENUM
    property standardVersion : Win32cr::Security::Cryptography::DSAFIPSVERSION_ENUM
    property cbSeedLength : UInt32
    property cbGroupSize : UInt32
    property count : UInt8[4]
    def initialize(@dwMagic : Win32cr::Security::Cryptography::BCRYPT_DSA_MAGIC, @cbKey : UInt32, @hashAlgorithm : Win32cr::Security::Cryptography::HASHALGORITHM_ENUM, @standardVersion : Win32cr::Security::Cryptography::DSAFIPSVERSION_ENUM, @cbSeedLength : UInt32, @cbGroupSize : UInt32, @count : UInt8[4])
    end
  end

  @[Extern]
  struct BCRYPT_KEY_DATA_BLOB_HEADER
    property dwMagic : UInt32
    property dwVersion : UInt32
    property cbKeyData : UInt32
    def initialize(@dwMagic : UInt32, @dwVersion : UInt32, @cbKeyData : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_DSA_PARAMETER_HEADER
    property cbLength : UInt32
    property dwMagic : UInt32
    property cbKeyLength : UInt32
    property count : UInt8[4]
    property seed : UInt8[20]
    property q : UInt8[20]
    def initialize(@cbLength : UInt32, @dwMagic : UInt32, @cbKeyLength : UInt32, @count : UInt8[4], @seed : UInt8[20], @q : UInt8[20])
    end
  end

  @[Extern]
  struct BCRYPT_DSA_PARAMETER_HEADER_V2
    property cbLength : UInt32
    property dwMagic : UInt32
    property cbKeyLength : UInt32
    property hashAlgorithm : Win32cr::Security::Cryptography::HASHALGORITHM_ENUM
    property standardVersion : Win32cr::Security::Cryptography::DSAFIPSVERSION_ENUM
    property cbSeedLength : UInt32
    property cbGroupSize : UInt32
    property count : UInt8[4]
    def initialize(@cbLength : UInt32, @dwMagic : UInt32, @cbKeyLength : UInt32, @hashAlgorithm : Win32cr::Security::Cryptography::HASHALGORITHM_ENUM, @standardVersion : Win32cr::Security::Cryptography::DSAFIPSVERSION_ENUM, @cbSeedLength : UInt32, @cbGroupSize : UInt32, @count : UInt8[4])
    end
  end

  @[Extern]
  struct BCRYPT_ECC_CURVE_NAMES
    property dwEccCurveNames : UInt32
    property pEccCurveNames : Win32cr::Foundation::PWSTR*
    def initialize(@dwEccCurveNames : UInt32, @pEccCurveNames : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct BCRYPT_MULTI_HASH_OPERATION
    property iHash : UInt32
    property hashOperation : Win32cr::Security::Cryptography::BCRYPT_HASH_OPERATION_TYPE
    property pbBuffer : UInt8*
    property cbBuffer : UInt32
    def initialize(@iHash : UInt32, @hashOperation : Win32cr::Security::Cryptography::BCRYPT_HASH_OPERATION_TYPE, @pbBuffer : UInt8*, @cbBuffer : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
    property cbPerObject : UInt32
    property cbPerElement : UInt32
    def initialize(@cbPerObject : UInt32, @cbPerElement : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_ALGORITHM_IDENTIFIER
    property pszName : Win32cr::Foundation::PWSTR
    property dwClass : UInt32
    property dwFlags : UInt32
    def initialize(@pszName : Win32cr::Foundation::PWSTR, @dwClass : UInt32, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct BCRYPT_PROVIDER_NAME
    property pszProviderName : Win32cr::Foundation::PWSTR
    def initialize(@pszProviderName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct BCRYPT_INTERFACE_VERSION
    property major_version : UInt16
    property minor_version : UInt16
    def initialize(@major_version : UInt16, @minor_version : UInt16)
    end
  end

  @[Extern]
  struct CRYPT_INTERFACE_REG
    property dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE
    property dwFlags : Win32cr::Security::Cryptography::BCRYPT_TABLE
    property cFunctions : UInt32
    property rgpszFunctions : Win32cr::Foundation::PWSTR*
    def initialize(@dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, @dwFlags : Win32cr::Security::Cryptography::BCRYPT_TABLE, @cFunctions : UInt32, @rgpszFunctions : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_IMAGE_REG
    property pszImage : Win32cr::Foundation::PWSTR
    property cInterfaces : UInt32
    property rgpInterfaces : Win32cr::Security::Cryptography::CRYPT_INTERFACE_REG**
    def initialize(@pszImage : Win32cr::Foundation::PWSTR, @cInterfaces : UInt32, @rgpInterfaces : Win32cr::Security::Cryptography::CRYPT_INTERFACE_REG**)
    end
  end

  @[Extern]
  struct CRYPT_PROVIDER_REG
    property cAliases : UInt32
    property rgpszAliases : Win32cr::Foundation::PWSTR*
    property pUM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REG*
    property pKM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REG*
    def initialize(@cAliases : UInt32, @rgpszAliases : Win32cr::Foundation::PWSTR*, @pUM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REG*, @pKM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REG*)
    end
  end

  @[Extern]
  struct CRYPT_PROVIDERS
    property cProviders : UInt32
    property rgpszProviders : Win32cr::Foundation::PWSTR*
    def initialize(@cProviders : UInt32, @rgpszProviders : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_CONTEXT_CONFIG
    property dwFlags : Win32cr::Security::Cryptography::CRYPT_CONTEXT_CONFIG_FLAGS
    property dwReserved : UInt32
    def initialize(@dwFlags : Win32cr::Security::Cryptography::CRYPT_CONTEXT_CONFIG_FLAGS, @dwReserved : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_CONTEXT_FUNCTION_CONFIG
    property dwFlags : UInt32
    property dwReserved : UInt32
    def initialize(@dwFlags : UInt32, @dwReserved : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_CONTEXTS
    property cContexts : UInt32
    property rgpszContexts : Win32cr::Foundation::PWSTR*
    def initialize(@cContexts : UInt32, @rgpszContexts : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_CONTEXT_FUNCTIONS
    property cFunctions : UInt32
    property rgpszFunctions : Win32cr::Foundation::PWSTR*
    def initialize(@cFunctions : UInt32, @rgpszFunctions : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_CONTEXT_FUNCTION_PROVIDERS
    property cProviders : UInt32
    property rgpszProviders : Win32cr::Foundation::PWSTR*
    def initialize(@cProviders : UInt32, @rgpszProviders : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_PROPERTY_REF
    property pszProperty : Win32cr::Foundation::PWSTR
    property cbValue : UInt32
    property pbValue : UInt8*
    def initialize(@pszProperty : Win32cr::Foundation::PWSTR, @cbValue : UInt32, @pbValue : UInt8*)
    end
  end

  @[Extern]
  struct CRYPT_IMAGE_REF
    property pszImage : Win32cr::Foundation::PWSTR
    property dwFlags : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF_FLAGS
    def initialize(@pszImage : Win32cr::Foundation::PWSTR, @dwFlags : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF_FLAGS)
    end
  end

  @[Extern]
  struct CRYPT_PROVIDER_REF
    property dwInterface : UInt32
    property pszFunction : Win32cr::Foundation::PWSTR
    property pszProvider : Win32cr::Foundation::PWSTR
    property cProperties : UInt32
    property rgpProperties : Win32cr::Security::Cryptography::CRYPT_PROPERTY_REF**
    property pUM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF*
    property pKM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF*
    def initialize(@dwInterface : UInt32, @pszFunction : Win32cr::Foundation::PWSTR, @pszProvider : Win32cr::Foundation::PWSTR, @cProperties : UInt32, @rgpProperties : Win32cr::Security::Cryptography::CRYPT_PROPERTY_REF**, @pUM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF*, @pKM : Win32cr::Security::Cryptography::CRYPT_IMAGE_REF*)
    end
  end

  @[Extern]
  struct CRYPT_PROVIDER_REFS
    property cProviders : UInt32
    property rgpProviders : Win32cr::Security::Cryptography::CRYPT_PROVIDER_REF**
    def initialize(@cProviders : UInt32, @rgpProviders : Win32cr::Security::Cryptography::CRYPT_PROVIDER_REF**)
    end
  end

  @[Extern]
  struct NCRYPT_ALLOC_PARA
    property cbSize : UInt32
    property pfnAlloc : Win32cr::Security::Cryptography::PFN_NCRYPT_ALLOC
    property pfnFree : Win32cr::Security::Cryptography::PFN_NCRYPT_FREE
    def initialize(@cbSize : UInt32, @pfnAlloc : Win32cr::Security::Cryptography::PFN_NCRYPT_ALLOC, @pfnFree : Win32cr::Security::Cryptography::PFN_NCRYPT_FREE)
    end
  end

  @[Extern]
  struct NCRYPT_CIPHER_PADDING_INFO
    property cbSize : UInt32
    property dwFlags : UInt32
    property pbIV : UInt8*
    property cbIV : UInt32
    property pbOtherInfo : UInt8*
    property cbOtherInfo : UInt32
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @pbIV : UInt8*, @cbIV : UInt32, @pbOtherInfo : UInt8*, @cbOtherInfo : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO
    property magic : UInt32
    property pcrMask : UInt32
    def initialize(@magic : UInt32, @pcrMask : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_KEY_ATTEST_PADDING_INFO
    property magic : UInt32
    property pbKeyBlob : UInt8*
    property cbKeyBlob : UInt32
    property pbKeyAuth : UInt8*
    property cbKeyAuth : UInt32
    def initialize(@magic : UInt32, @pbKeyBlob : UInt8*, @cbKeyBlob : UInt32, @pbKeyAuth : UInt8*, @cbKeyAuth : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
    property version : UInt32
    property flags : UInt32
    property cbPublicKeyBlob : UInt32
    def initialize(@version : UInt32, @flags : UInt32, @cbPublicKeyBlob : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
    property magic : UInt32
    property version : UInt32
    property cbSignature : UInt32
    property cbReport : UInt32
    property cbAttributes : UInt32
    def initialize(@magic : UInt32, @version : UInt32, @cbSignature : UInt32, @cbReport : UInt32, @cbAttributes : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
    property version : UInt32
    property trustlet_id : UInt64
    property min_svn : UInt32
    property flags_mask : UInt32
    property flags_expected : UInt32
    property _bitfield : UInt32
    def initialize(@version : UInt32, @trustlet_id : UInt64, @min_svn : UInt32, @flags_mask : UInt32, @flags_expected : UInt32, @_bitfield : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
    property version : UInt32
    property key_usage : UInt32
    property _bitfield : UInt32
    property cbAlgName : UInt32
    property cbNonce : UInt32
    property cbAuthTag : UInt32
    property cbWrappingKey : UInt32
    property cbIsolatedKey : UInt32
    def initialize(@version : UInt32, @key_usage : UInt32, @_bitfield : UInt32, @cbAlgName : UInt32, @cbNonce : UInt32, @cbAuthTag : UInt32, @cbWrappingKey : UInt32, @cbIsolatedKey : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
    property header : Win32cr::Security::Cryptography::NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
    def initialize(@header : Win32cr::Security::Cryptography::NCRYPT_EXPORTED_ISOLATED_KEY_HEADER)
    end
  end

  @[Extern]
  struct NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
    property magic : UInt32
    property version : UInt32
    property header_size : UInt32
    property cbCertifyInfo : UInt32
    property cbSignature : UInt32
    property cbTpmPublic : UInt32
    def initialize(@magic : UInt32, @version : UInt32, @header_size : UInt32, @cbCertifyInfo : UInt32, @cbSignature : UInt32, @cbTpmPublic : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
    property magic : UInt32
    property version : UInt32
    property pcrAlg : UInt32
    property cbSignature : UInt32
    property cbQuote : UInt32
    property cbPcrs : UInt32
    def initialize(@magic : UInt32, @version : UInt32, @pcrAlg : UInt32, @cbSignature : UInt32, @cbQuote : UInt32, @cbPcrs : UInt32)
    end
  end

  @[Extern]
  struct NCryptAlgorithmName
    property pszName : Win32cr::Foundation::PWSTR
    property dwClass : Win32cr::Security::Cryptography::NCRYPT_ALGORITHM_NAME_CLASS
    property dwAlgOperations : Win32cr::Security::Cryptography::NCRYPT_OPERATION
    property dwFlags : UInt32
    def initialize(@pszName : Win32cr::Foundation::PWSTR, @dwClass : Win32cr::Security::Cryptography::NCRYPT_ALGORITHM_NAME_CLASS, @dwAlgOperations : Win32cr::Security::Cryptography::NCRYPT_OPERATION, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct NCryptKeyName
    property pszName : Win32cr::Foundation::PWSTR
    property pszAlgid : Win32cr::Foundation::PWSTR
    property dwLegacyKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC
    property dwFlags : UInt32
    def initialize(@pszName : Win32cr::Foundation::PWSTR, @pszAlgid : Win32cr::Foundation::PWSTR, @dwLegacyKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct NCryptProviderName
    property pszName : Win32cr::Foundation::PWSTR
    property pszComment : Win32cr::Foundation::PWSTR
    def initialize(@pszName : Win32cr::Foundation::PWSTR, @pszComment : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct NCRYPT_UI_POLICY
    property dwVersion : UInt32
    property dwFlags : UInt32
    property pszCreationTitle : Win32cr::Foundation::PWSTR
    property pszFriendlyName : Win32cr::Foundation::PWSTR
    property pszDescription : Win32cr::Foundation::PWSTR
    def initialize(@dwVersion : UInt32, @dwFlags : UInt32, @pszCreationTitle : Win32cr::Foundation::PWSTR, @pszFriendlyName : Win32cr::Foundation::PWSTR, @pszDescription : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct NCRYPT_KEY_ACCESS_POLICY_BLOB
    property dwVersion : UInt32
    property dwPolicyFlags : UInt32
    property cbUserSid : UInt32
    property cbApplicationSid : UInt32
    def initialize(@dwVersion : UInt32, @dwPolicyFlags : UInt32, @cbUserSid : UInt32, @cbApplicationSid : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_SUPPORTED_LENGTHS
    property dwMinLength : UInt32
    property dwMaxLength : UInt32
    property dwIncrement : UInt32
    property dwDefaultLength : UInt32
    def initialize(@dwMinLength : UInt32, @dwMaxLength : UInt32, @dwIncrement : UInt32, @dwDefaultLength : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
    property dwVersion : UInt32
    property iExpiration : Int32
    property pabNonce : UInt8[32]
    property pabPolicyRef : UInt8[32]
    property pabHMAC : UInt8[32]
    def initialize(@dwVersion : UInt32, @iExpiration : Int32, @pabNonce : UInt8[32], @pabPolicyRef : UInt8[32], @pabHMAC : UInt8[32])
    end
  end

  @[Extern]
  struct NCRYPT_PCP_TPM_FW_VERSION_INFO
    property major1 : UInt16
    property major2 : UInt16
    property minor1 : UInt16
    property minor2 : UInt16
    def initialize(@major1 : UInt16, @major2 : UInt16, @minor1 : UInt16, @minor2 : UInt16)
    end
  end

  @[Extern]
  struct NCRYPT_PCP_RAW_POLICYDIGEST
    property dwVersion : UInt32
    property cbDigest : UInt32
    def initialize(@dwVersion : UInt32, @cbDigest : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_KEY_BLOB_HEADER
    property cbSize : UInt32
    property dwMagic : UInt32
    property cbAlgName : UInt32
    property cbKeyData : UInt32
    def initialize(@cbSize : UInt32, @dwMagic : UInt32, @cbAlgName : UInt32, @cbKeyData : UInt32)
    end
  end

  @[Extern]
  struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
    property magic : UInt32
    property cbHeader : UInt32
    property cbPublic : UInt32
    property cbPrivate : UInt32
    property cbName : UInt32
    def initialize(@magic : UInt32, @cbHeader : UInt32, @cbPublic : UInt32, @cbPrivate : UInt32, @cbName : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_BIT_BLOB
    property cbData : UInt32
    property pbData : UInt8*
    property cUnusedBits : UInt32
    def initialize(@cbData : UInt32, @pbData : UInt8*, @cUnusedBits : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_ALGORITHM_IDENTIFIER
    property pszObjId : Win32cr::Foundation::PSTR
    property parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_OBJID_TABLE
    property dwAlgId : UInt32
    property pszObjId : Win32cr::Foundation::PSTR
    def initialize(@dwAlgId : UInt32, @pszObjId : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct CRYPT_HASH_INFO
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_EXTENSION
    property pszObjId : Win32cr::Foundation::PSTR
    property fCritical : Win32cr::Foundation::BOOL
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @fCritical : Win32cr::Foundation::BOOL, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_ATTRIBUTE_TYPE_VALUE
    property pszObjId : Win32cr::Foundation::PSTR
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_ATTRIBUTE
    property pszObjId : Win32cr::Foundation::PSTR
    property cValue : UInt32
    property rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @cValue : UInt32, @rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CRYPT_ATTRIBUTES
    property cAttr : UInt32
    property rgAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    def initialize(@cAttr : UInt32, @rgAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CERT_RDN_ATTR
    property pszObjId : Win32cr::Foundation::PSTR
    property dwValueType : Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @dwValueType : Win32cr::Security::Cryptography::CERT_RDN_ATTR_VALUE_TYPE, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_RDN
    property cRDNAttr : UInt32
    property rgRDNAttr : Win32cr::Security::Cryptography::CERT_RDN_ATTR*
    def initialize(@cRDNAttr : UInt32, @rgRDNAttr : Win32cr::Security::Cryptography::CERT_RDN_ATTR*)
    end
  end

  @[Extern]
  struct CERT_NAME_INFO
    property cRDN : UInt32
    property rgRDN : Win32cr::Security::Cryptography::CERT_RDN*
    def initialize(@cRDN : UInt32, @rgRDN : Win32cr::Security::Cryptography::CERT_RDN*)
    end
  end

  @[Extern]
  struct CERT_NAME_VALUE
    property dwValueType : UInt32
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwValueType : UInt32, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_PUBLIC_KEY_INFO
    property algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    def initialize(@algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_ECC_PRIVATE_KEY_INFO
    property dwVersion : UInt32
    property private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property szCurveOid : Win32cr::Foundation::PSTR
    property public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    def initialize(@dwVersion : UInt32, @private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @szCurveOid : Win32cr::Foundation::PSTR, @public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_PRIVATE_KEY_INFO
    property version : UInt32
    property algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pAttributes : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*
    def initialize(@version : UInt32, @algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pAttributes : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES*)
    end
  end

  @[Extern]
  struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
    property encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_PKCS8_IMPORT_PARAMS
    property private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pResolvehCryptProvFunc : Win32cr::Security::Cryptography::PCRYPT_RESOLVE_HCRYPTPROV_FUNC
    property pVoidResolveFunc : Void*
    property pDecryptPrivateKeyFunc : Win32cr::Security::Cryptography::PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
    property pVoidDecryptFunc : Void*
    def initialize(@private_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pResolvehCryptProvFunc : Win32cr::Security::Cryptography::PCRYPT_RESOLVE_HCRYPTPROV_FUNC, @pVoidResolveFunc : Void*, @pDecryptPrivateKeyFunc : Win32cr::Security::Cryptography::PCRYPT_DECRYPT_PRIVATE_KEY_FUNC, @pVoidDecryptFunc : Void*)
    end
  end

  @[Extern]
  struct CRYPT_PKCS8_EXPORT_PARAMS
    property hCryptProv : LibC::UIntPtrT
    property dwKeySpec : UInt32
    property pszPrivateKeyObjId : Win32cr::Foundation::PSTR
    property pEncryptPrivateKeyFunc : Win32cr::Security::Cryptography::PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
    property pVoidEncryptFunc : Void*
    def initialize(@hCryptProv : LibC::UIntPtrT, @dwKeySpec : UInt32, @pszPrivateKeyObjId : Win32cr::Foundation::PSTR, @pEncryptPrivateKeyFunc : Win32cr::Security::Cryptography::PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC, @pVoidEncryptFunc : Void*)
    end
  end

  @[Extern]
  struct CERT_INFO
    property dwVersion : UInt32
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property not_before : Win32cr::Foundation::FILETIME
    property not_after : Win32cr::Foundation::FILETIME
    property subject : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO
    property issuer_unique_id : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property subject_unique_id : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : UInt32, @serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @not_before : Win32cr::Foundation::FILETIME, @not_after : Win32cr::Foundation::FILETIME, @subject : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO, @issuer_unique_id : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @subject_unique_id : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRL_ENTRY
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property revocation_date : Win32cr::Foundation::FILETIME
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @revocation_date : Win32cr::Foundation::FILETIME, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRL_INFO
    property dwVersion : UInt32
    property signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property this_update : Win32cr::Foundation::FILETIME
    property next_update : Win32cr::Foundation::FILETIME
    property cCRLEntry : UInt32
    property rgCRLEntry : Win32cr::Security::Cryptography::CRL_ENTRY*
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : UInt32, @signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @this_update : Win32cr::Foundation::FILETIME, @next_update : Win32cr::Foundation::FILETIME, @cCRLEntry : UInt32, @rgCRLEntry : Win32cr::Security::Cryptography::CRL_ENTRY*, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CERT_OR_CRL_BLOB
    property dwChoice : UInt32
    property cbEncoded : UInt32
    property pbEncoded : UInt8*
    def initialize(@dwChoice : UInt32, @cbEncoded : UInt32, @pbEncoded : UInt8*)
    end
  end

  @[Extern]
  struct CERT_OR_CRL_BUNDLE
    property cItem : UInt32
    property rgItem : Win32cr::Security::Cryptography::CERT_OR_CRL_BLOB*
    def initialize(@cItem : UInt32, @rgItem : Win32cr::Security::Cryptography::CERT_OR_CRL_BLOB*)
    end
  end

  @[Extern]
  struct CERT_REQUEST_INFO
    property dwVersion : UInt32
    property subject : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO
    property cAttribute : UInt32
    property rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    def initialize(@dwVersion : UInt32, @subject : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO, @cAttribute : UInt32, @rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CERT_KEYGEN_REQUEST_INFO
    property dwVersion : UInt32
    property subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO
    property pwszChallengeString : Win32cr::Foundation::PWSTR
    def initialize(@dwVersion : UInt32, @subject_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO, @pwszChallengeString : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_SIGNED_CONTENT_INFO
    property to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    def initialize(@to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CTL_USAGE
    property cUsageIdentifier : UInt32
    property rgpszUsageIdentifier : Win32cr::Foundation::PSTR*
    def initialize(@cUsageIdentifier : UInt32, @rgpszUsageIdentifier : Win32cr::Foundation::PSTR*)
    end
  end

  @[Extern]
  struct CTL_ENTRY
    property subject_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cAttribute : UInt32
    property rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    def initialize(@subject_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cAttribute : UInt32, @rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CTL_INFO
    property dwVersion : UInt32
    property subject_usage : Win32cr::Security::Cryptography::CTL_USAGE
    property list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property sequence_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property this_update : Win32cr::Foundation::FILETIME
    property next_update : Win32cr::Foundation::FILETIME
    property subject_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property cCTLEntry : UInt32
    property rgCTLEntry : Win32cr::Security::Cryptography::CTL_ENTRY*
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : UInt32, @subject_usage : Win32cr::Security::Cryptography::CTL_USAGE, @list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @sequence_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @this_update : Win32cr::Foundation::FILETIME, @next_update : Win32cr::Foundation::FILETIME, @subject_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @cCTLEntry : UInt32, @rgCTLEntry : Win32cr::Security::Cryptography::CTL_ENTRY*, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRYPT_TIME_STAMP_REQUEST_INFO
    property pszTimeStampAlgorithm : Win32cr::Foundation::PSTR
    property pszContentType : Win32cr::Foundation::PSTR
    property content : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cAttribute : UInt32
    property rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    def initialize(@pszTimeStampAlgorithm : Win32cr::Foundation::PSTR, @pszContentType : Win32cr::Foundation::PSTR, @content : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cAttribute : UInt32, @rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR
    property pwszName : Win32cr::Foundation::PWSTR
    property pwszValue : Win32cr::Foundation::PWSTR
    def initialize(@pwszName : Win32cr::Foundation::PWSTR, @pwszValue : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CRYPT_CSP_PROVIDER
    property dwKeySpec : UInt32
    property pwszProviderName : Win32cr::Foundation::PWSTR
    property signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    def initialize(@dwKeySpec : UInt32, @pwszProviderName : Win32cr::Foundation::PWSTR, @signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_ENCODE_PARA
    property cbSize : UInt32
    property pfnAlloc : Win32cr::Security::Cryptography::PFN_CRYPT_ALLOC
    property pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE
    def initialize(@cbSize : UInt32, @pfnAlloc : Win32cr::Security::Cryptography::PFN_CRYPT_ALLOC, @pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE)
    end
  end

  @[Extern]
  struct CRYPT_DECODE_PARA
    property cbSize : UInt32
    property pfnAlloc : Win32cr::Security::Cryptography::PFN_CRYPT_ALLOC
    property pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE
    def initialize(@cbSize : UInt32, @pfnAlloc : Win32cr::Security::Cryptography::PFN_CRYPT_ALLOC, @pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE)
    end
  end

  @[Extern]
  struct CERT_EXTENSIONS
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CERT_AUTHORITY_KEY_ID_INFO
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cert_issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cert_serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cert_issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cert_serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_PRIVATE_KEY_VALIDITY
    property not_before : Win32cr::Foundation::FILETIME
    property not_after : Win32cr::Foundation::FILETIME
    def initialize(@not_before : Win32cr::Foundation::FILETIME, @not_after : Win32cr::Foundation::FILETIME)
    end
  end

  @[Extern]
  struct CERT_KEY_ATTRIBUTES_INFO
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property intended_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property pPrivateKeyUsagePeriod : Win32cr::Security::Cryptography::CERT_PRIVATE_KEY_VALIDITY*
    def initialize(@key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @intended_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @pPrivateKeyUsagePeriod : Win32cr::Security::Cryptography::CERT_PRIVATE_KEY_VALIDITY*)
    end
  end

  @[Extern]
  struct CERT_POLICY_ID
    property cCertPolicyElementId : UInt32
    property rgpszCertPolicyElementId : Win32cr::Foundation::PSTR*
    def initialize(@cCertPolicyElementId : UInt32, @rgpszCertPolicyElementId : Win32cr::Foundation::PSTR*)
    end
  end

  @[Extern]
  struct CERT_KEY_USAGE_RESTRICTION_INFO
    property cCertPolicyId : UInt32
    property rgCertPolicyId : Win32cr::Security::Cryptography::CERT_POLICY_ID*
    property restricted_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    def initialize(@cCertPolicyId : UInt32, @rgCertPolicyId : Win32cr::Security::Cryptography::CERT_POLICY_ID*, @restricted_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CERT_OTHER_NAME
    property pszObjId : Win32cr::Foundation::PSTR
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_ALT_NAME_ENTRY
    property dwAltNameChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pOtherName : Win32cr::Security::Cryptography::CERT_OTHER_NAME*
    property pwszRfc822Name : Win32cr::Foundation::PWSTR
    property pwszDNSName : Win32cr::Foundation::PWSTR
    property directory_name : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pwszURL : Win32cr::Foundation::PWSTR
    property ip_address : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pszRegisteredID : Win32cr::Foundation::PSTR
    def initialize(@pOtherName : Win32cr::Security::Cryptography::CERT_OTHER_NAME*, @pwszRfc822Name : Win32cr::Foundation::PWSTR, @pwszDNSName : Win32cr::Foundation::PWSTR, @directory_name : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pwszURL : Win32cr::Foundation::PWSTR, @ip_address : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pszRegisteredID : Win32cr::Foundation::PSTR)
    end
    end

    def initialize(@dwAltNameChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CERT_ALT_NAME_INFO
    property cAltEntry : UInt32
    property rgAltEntry : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY*
    def initialize(@cAltEntry : UInt32, @rgAltEntry : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY*)
    end
  end

  @[Extern]
  struct CERT_BASIC_CONSTRAINTS_INFO
    property subject_type : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property fPathLenConstraint : Win32cr::Foundation::BOOL
    property dwPathLenConstraint : UInt32
    property cSubtreesConstraint : UInt32
    property rgSubtreesConstraint : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@subject_type : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @fPathLenConstraint : Win32cr::Foundation::BOOL, @dwPathLenConstraint : UInt32, @cSubtreesConstraint : UInt32, @rgSubtreesConstraint : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CERT_BASIC_CONSTRAINTS2_INFO
    property fCA : Win32cr::Foundation::BOOL
    property fPathLenConstraint : Win32cr::Foundation::BOOL
    property dwPathLenConstraint : UInt32
    def initialize(@fCA : Win32cr::Foundation::BOOL, @fPathLenConstraint : Win32cr::Foundation::BOOL, @dwPathLenConstraint : UInt32)
    end
  end

  @[Extern]
  struct CERT_POLICY_QUALIFIER_INFO
    property pszPolicyQualifierId : Win32cr::Foundation::PSTR
    property qualifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszPolicyQualifierId : Win32cr::Foundation::PSTR, @qualifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_POLICY_INFO
    property pszPolicyIdentifier : Win32cr::Foundation::PSTR
    property cPolicyQualifier : UInt32
    property rgPolicyQualifier : Win32cr::Security::Cryptography::CERT_POLICY_QUALIFIER_INFO*
    def initialize(@pszPolicyIdentifier : Win32cr::Foundation::PSTR, @cPolicyQualifier : UInt32, @rgPolicyQualifier : Win32cr::Security::Cryptography::CERT_POLICY_QUALIFIER_INFO*)
    end
  end

  @[Extern]
  struct CERT_POLICIES_INFO
    property cPolicyInfo : UInt32
    property rgPolicyInfo : Win32cr::Security::Cryptography::CERT_POLICY_INFO*
    def initialize(@cPolicyInfo : UInt32, @rgPolicyInfo : Win32cr::Security::Cryptography::CERT_POLICY_INFO*)
    end
  end

  @[Extern]
  struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
    property pszOrganization : Win32cr::Foundation::PSTR
    property cNoticeNumbers : UInt32
    property rgNoticeNumbers : Int32*
    def initialize(@pszOrganization : Win32cr::Foundation::PSTR, @cNoticeNumbers : UInt32, @rgNoticeNumbers : Int32*)
    end
  end

  @[Extern]
  struct CERT_POLICY_QUALIFIER_USER_NOTICE
    property pNoticeReference : Win32cr::Security::Cryptography::CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*
    property pszDisplayText : Win32cr::Foundation::PWSTR
    def initialize(@pNoticeReference : Win32cr::Security::Cryptography::CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*, @pszDisplayText : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CPS_URLS
    property pszURL : Win32cr::Foundation::PWSTR
    property pAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*
    property pDigest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@pszURL : Win32cr::Foundation::PWSTR, @pAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, @pDigest : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CERT_POLICY95_QUALIFIER1
    property pszPracticesReference : Win32cr::Foundation::PWSTR
    property pszNoticeIdentifier : Win32cr::Foundation::PSTR
    property pszNSINoticeIdentifier : Win32cr::Foundation::PSTR
    property cCPSURLs : UInt32
    property rgCPSURLs : Win32cr::Security::Cryptography::CPS_URLS*
    def initialize(@pszPracticesReference : Win32cr::Foundation::PWSTR, @pszNoticeIdentifier : Win32cr::Foundation::PSTR, @pszNSINoticeIdentifier : Win32cr::Foundation::PSTR, @cCPSURLs : UInt32, @rgCPSURLs : Win32cr::Security::Cryptography::CPS_URLS*)
    end
  end

  @[Extern]
  struct CERT_POLICY_MAPPING
    property pszIssuerDomainPolicy : Win32cr::Foundation::PSTR
    property pszSubjectDomainPolicy : Win32cr::Foundation::PSTR
    def initialize(@pszIssuerDomainPolicy : Win32cr::Foundation::PSTR, @pszSubjectDomainPolicy : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct CERT_POLICY_MAPPINGS_INFO
    property cPolicyMapping : UInt32
    property rgPolicyMapping : Win32cr::Security::Cryptography::CERT_POLICY_MAPPING*
    def initialize(@cPolicyMapping : UInt32, @rgPolicyMapping : Win32cr::Security::Cryptography::CERT_POLICY_MAPPING*)
    end
  end

  @[Extern]
  struct CERT_POLICY_CONSTRAINTS_INFO
    property fRequireExplicitPolicy : Win32cr::Foundation::BOOL
    property dwRequireExplicitPolicySkipCerts : UInt32
    property fInhibitPolicyMapping : Win32cr::Foundation::BOOL
    property dwInhibitPolicyMappingSkipCerts : UInt32
    def initialize(@fRequireExplicitPolicy : Win32cr::Foundation::BOOL, @dwRequireExplicitPolicySkipCerts : UInt32, @fInhibitPolicyMapping : Win32cr::Foundation::BOOL, @dwInhibitPolicyMappingSkipCerts : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
    property pszObjId : Win32cr::Foundation::PSTR
    property cValue : UInt32
    property rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @cValue : UInt32, @rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CRYPT_CONTENT_INFO
    property pszObjId : Win32cr::Foundation::PSTR
    property content : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @content : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_SEQUENCE_OF_ANY
    property cValue : UInt32
    property rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@cValue : UInt32, @rgValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CERT_AUTHORITY_KEY_ID2_INFO
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property authority_cert_issuer : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO
    property authority_cert_serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @authority_cert_issuer : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO, @authority_cert_serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_ACCESS_DESCRIPTION
    property pszAccessMethod : Win32cr::Foundation::PSTR
    property access_location : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY
    def initialize(@pszAccessMethod : Win32cr::Foundation::PSTR, @access_location : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY)
    end
  end

  @[Extern]
  struct CERT_AUTHORITY_INFO_ACCESS
    property cAccDescr : UInt32
    property rgAccDescr : Win32cr::Security::Cryptography::CERT_ACCESS_DESCRIPTION*
    def initialize(@cAccDescr : UInt32, @rgAccDescr : Win32cr::Security::Cryptography::CERT_ACCESS_DESCRIPTION*)
    end
  end

  @[Extern]
  struct CRL_DIST_POINT_NAME
    property dwDistPointNameChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property full_name : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO
    def initialize(@full_name : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO)
    end
    end

    def initialize(@dwDistPointNameChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CRL_DIST_POINT
    property dist_point_name : Win32cr::Security::Cryptography::CRL_DIST_POINT_NAME
    property reason_flags : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property crl_issuer : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO
    def initialize(@dist_point_name : Win32cr::Security::Cryptography::CRL_DIST_POINT_NAME, @reason_flags : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @crl_issuer : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO)
    end
  end

  @[Extern]
  struct CRL_DIST_POINTS_INFO
    property cDistPoint : UInt32
    property rgDistPoint : Win32cr::Security::Cryptography::CRL_DIST_POINT*
    def initialize(@cDistPoint : UInt32, @rgDistPoint : Win32cr::Security::Cryptography::CRL_DIST_POINT*)
    end
  end

  @[Extern]
  struct CROSS_CERT_DIST_POINTS_INFO
    property dwSyncDeltaTime : UInt32
    property cDistPoint : UInt32
    property rgDistPoint : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO*
    def initialize(@dwSyncDeltaTime : UInt32, @cDistPoint : UInt32, @rgDistPoint : Win32cr::Security::Cryptography::CERT_ALT_NAME_INFO*)
    end
  end

  @[Extern]
  struct CERT_PAIR
    property forward : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property reverse : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@forward : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @reverse : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRL_ISSUING_DIST_POINT
    property dist_point_name : Win32cr::Security::Cryptography::CRL_DIST_POINT_NAME
    property fOnlyContainsUserCerts : Win32cr::Foundation::BOOL
    property fOnlyContainsCACerts : Win32cr::Foundation::BOOL
    property only_some_reason_flags : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property fIndirectCRL : Win32cr::Foundation::BOOL
    def initialize(@dist_point_name : Win32cr::Security::Cryptography::CRL_DIST_POINT_NAME, @fOnlyContainsUserCerts : Win32cr::Foundation::BOOL, @fOnlyContainsCACerts : Win32cr::Foundation::BOOL, @only_some_reason_flags : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @fIndirectCRL : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct CERT_GENERAL_SUBTREE
    property base : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY
    property dwMinimum : UInt32
    property fMaximum : Win32cr::Foundation::BOOL
    property dwMaximum : UInt32
    def initialize(@base : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY, @dwMinimum : UInt32, @fMaximum : Win32cr::Foundation::BOOL, @dwMaximum : UInt32)
    end
  end

  @[Extern]
  struct CERT_NAME_CONSTRAINTS_INFO
    property cPermittedSubtree : UInt32
    property rgPermittedSubtree : Win32cr::Security::Cryptography::CERT_GENERAL_SUBTREE*
    property cExcludedSubtree : UInt32
    property rgExcludedSubtree : Win32cr::Security::Cryptography::CERT_GENERAL_SUBTREE*
    def initialize(@cPermittedSubtree : UInt32, @rgPermittedSubtree : Win32cr::Security::Cryptography::CERT_GENERAL_SUBTREE*, @cExcludedSubtree : UInt32, @rgExcludedSubtree : Win32cr::Security::Cryptography::CERT_GENERAL_SUBTREE*)
    end
  end

  @[Extern]
  struct CERT_DSS_PARAMETERS
    property p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property q : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @q : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_DH_PARAMETERS
    property p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_ECC_SIGNATURE
    property r : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property s : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@r : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @s : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_X942_DH_VALIDATION_PARAMS
    property seed : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property pgenCounter : UInt32
    def initialize(@seed : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @pgenCounter : UInt32)
    end
  end

  @[Extern]
  struct CERT_X942_DH_PARAMETERS
    property p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property q : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property j : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pValidationParams : Win32cr::Security::Cryptography::CERT_X942_DH_VALIDATION_PARAMS*
    def initialize(@p : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @g : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @q : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @j : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pValidationParams : Win32cr::Security::Cryptography::CERT_X942_DH_VALIDATION_PARAMS*)
    end
  end

  @[Extern]
  struct CRYPT_X942_OTHER_INFO
    property pszContentEncryptionObjId : Win32cr::Foundation::PSTR
    property rgbCounter : UInt8[4]
    property rgbKeyLength : UInt8[4]
    property pub_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszContentEncryptionObjId : Win32cr::Foundation::PSTR, @rgbCounter : UInt8[4], @rgbKeyLength : UInt8[4], @pub_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_ECC_CMS_SHARED_INFO
    property algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property entity_u_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property rgbSuppPubInfo : UInt8[4]
    def initialize(@algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @entity_u_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @rgbSuppPubInfo : UInt8[4])
    end
  end

  @[Extern]
  struct CRYPT_RC2_CBC_PARAMETERS
    property dwVersion : UInt32
    property fIV : Win32cr::Foundation::BOOL
    property rgbIV : UInt8[8]
    def initialize(@dwVersion : UInt32, @fIV : Win32cr::Foundation::BOOL, @rgbIV : UInt8[8])
    end
  end

  @[Extern]
  struct CRYPT_SMIME_CAPABILITY
    property pszObjId : Win32cr::Foundation::PSTR
    property parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_SMIME_CAPABILITIES
    property cCapability : UInt32
    property rgCapability : Win32cr::Security::Cryptography::CRYPT_SMIME_CAPABILITY*
    def initialize(@cCapability : UInt32, @rgCapability : Win32cr::Security::Cryptography::CRYPT_SMIME_CAPABILITY*)
    end
  end

  @[Extern]
  struct CERT_QC_STATEMENT
    property pszStatementId : Win32cr::Foundation::PSTR
    property statement_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszStatementId : Win32cr::Foundation::PSTR, @statement_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_QC_STATEMENTS_EXT_INFO
    property cStatement : UInt32
    property rgStatement : Win32cr::Security::Cryptography::CERT_QC_STATEMENT*
    def initialize(@cStatement : UInt32, @rgStatement : Win32cr::Security::Cryptography::CERT_QC_STATEMENT*)
    end
  end

  @[Extern]
  struct CRYPT_MASK_GEN_ALGORITHM
    property pszObjId : Win32cr::Foundation::PSTR
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER)
    end
  end

  @[Extern]
  struct CRYPT_RSA_SSA_PSS_PARAMETERS
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property mask_gen_algorithm : Win32cr::Security::Cryptography::CRYPT_MASK_GEN_ALGORITHM
    property dwSaltLength : UInt32
    property dwTrailerField : UInt32
    def initialize(@hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @mask_gen_algorithm : Win32cr::Security::Cryptography::CRYPT_MASK_GEN_ALGORITHM, @dwSaltLength : UInt32, @dwTrailerField : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_PSOURCE_ALGORITHM
    property pszObjId : Win32cr::Foundation::PSTR
    property encoding_parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @encoding_parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_RSAES_OAEP_PARAMETERS
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property mask_gen_algorithm : Win32cr::Security::Cryptography::CRYPT_MASK_GEN_ALGORITHM
    property p_source_algorithm : Win32cr::Security::Cryptography::CRYPT_PSOURCE_ALGORITHM
    def initialize(@hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @mask_gen_algorithm : Win32cr::Security::Cryptography::CRYPT_MASK_GEN_ALGORITHM, @p_source_algorithm : Win32cr::Security::Cryptography::CRYPT_PSOURCE_ALGORITHM)
    end
  end

  @[Extern]
  struct CMC_TAGGED_ATTRIBUTE
    property dwBodyPartID : UInt32
    property attribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE
    def initialize(@dwBodyPartID : UInt32, @attribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE)
    end
  end

  @[Extern]
  struct CMC_TAGGED_CERT_REQUEST
    property dwBodyPartID : UInt32
    property signed_cert_request : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwBodyPartID : UInt32, @signed_cert_request : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMC_TAGGED_REQUEST
    property dwTaggedRequestChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pTaggedCertRequest : Win32cr::Security::Cryptography::CMC_TAGGED_CERT_REQUEST*
    def initialize(@pTaggedCertRequest : Win32cr::Security::Cryptography::CMC_TAGGED_CERT_REQUEST*)
    end
    end

    def initialize(@dwTaggedRequestChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMC_TAGGED_CONTENT_INFO
    property dwBodyPartID : UInt32
    property encoded_content_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwBodyPartID : UInt32, @encoded_content_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMC_TAGGED_OTHER_MSG
    property dwBodyPartID : UInt32
    property pszObjId : Win32cr::Foundation::PSTR
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwBodyPartID : UInt32, @pszObjId : Win32cr::Foundation::PSTR, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMC_DATA_INFO
    property cTaggedAttribute : UInt32
    property rgTaggedAttribute : Win32cr::Security::Cryptography::CMC_TAGGED_ATTRIBUTE*
    property cTaggedRequest : UInt32
    property rgTaggedRequest : Win32cr::Security::Cryptography::CMC_TAGGED_REQUEST*
    property cTaggedContentInfo : UInt32
    property rgTaggedContentInfo : Win32cr::Security::Cryptography::CMC_TAGGED_CONTENT_INFO*
    property cTaggedOtherMsg : UInt32
    property rgTaggedOtherMsg : Win32cr::Security::Cryptography::CMC_TAGGED_OTHER_MSG*
    def initialize(@cTaggedAttribute : UInt32, @rgTaggedAttribute : Win32cr::Security::Cryptography::CMC_TAGGED_ATTRIBUTE*, @cTaggedRequest : UInt32, @rgTaggedRequest : Win32cr::Security::Cryptography::CMC_TAGGED_REQUEST*, @cTaggedContentInfo : UInt32, @rgTaggedContentInfo : Win32cr::Security::Cryptography::CMC_TAGGED_CONTENT_INFO*, @cTaggedOtherMsg : UInt32, @rgTaggedOtherMsg : Win32cr::Security::Cryptography::CMC_TAGGED_OTHER_MSG*)
    end
  end

  @[Extern]
  struct CMC_RESPONSE_INFO
    property cTaggedAttribute : UInt32
    property rgTaggedAttribute : Win32cr::Security::Cryptography::CMC_TAGGED_ATTRIBUTE*
    property cTaggedContentInfo : UInt32
    property rgTaggedContentInfo : Win32cr::Security::Cryptography::CMC_TAGGED_CONTENT_INFO*
    property cTaggedOtherMsg : UInt32
    property rgTaggedOtherMsg : Win32cr::Security::Cryptography::CMC_TAGGED_OTHER_MSG*
    def initialize(@cTaggedAttribute : UInt32, @rgTaggedAttribute : Win32cr::Security::Cryptography::CMC_TAGGED_ATTRIBUTE*, @cTaggedContentInfo : UInt32, @rgTaggedContentInfo : Win32cr::Security::Cryptography::CMC_TAGGED_CONTENT_INFO*, @cTaggedOtherMsg : UInt32, @rgTaggedOtherMsg : Win32cr::Security::Cryptography::CMC_TAGGED_OTHER_MSG*)
    end
  end

  @[Extern]
  struct CMC_PEND_INFO
    property pend_token : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pend_time : Win32cr::Foundation::FILETIME
    def initialize(@pend_token : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pend_time : Win32cr::Foundation::FILETIME)
    end
  end

  @[Extern]
  struct CMC_STATUS_INFO
    property dwStatus : UInt32
    property cBodyList : UInt32
    property rgdwBodyList : UInt32*
    property pwszStatusString : Win32cr::Foundation::PWSTR
    property dwOtherInfoChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dwFailInfo : UInt32
    property pPendInfo : Win32cr::Security::Cryptography::CMC_PEND_INFO*
    def initialize(@dwFailInfo : UInt32, @pPendInfo : Win32cr::Security::Cryptography::CMC_PEND_INFO*)
    end
    end

    def initialize(@dwStatus : UInt32, @cBodyList : UInt32, @rgdwBodyList : UInt32*, @pwszStatusString : Win32cr::Foundation::PWSTR, @dwOtherInfoChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMC_ADD_EXTENSIONS_INFO
    property dwCmcDataReference : UInt32
    property cCertReference : UInt32
    property rgdwCertReference : UInt32*
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwCmcDataReference : UInt32, @cCertReference : UInt32, @rgdwCertReference : UInt32*, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CMC_ADD_ATTRIBUTES_INFO
    property dwCmcDataReference : UInt32
    property cCertReference : UInt32
    property rgdwCertReference : UInt32*
    property cAttribute : UInt32
    property rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    def initialize(@dwCmcDataReference : UInt32, @cCertReference : UInt32, @rgdwCertReference : UInt32*, @cAttribute : UInt32, @rgAttribute : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CERT_TEMPLATE_EXT
    property pszObjId : Win32cr::Foundation::PSTR
    property dwMajorVersion : UInt32
    property fMinorVersion : Win32cr::Foundation::BOOL
    property dwMinorVersion : UInt32
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @dwMajorVersion : UInt32, @fMinorVersion : Win32cr::Foundation::BOOL, @dwMinorVersion : UInt32)
    end
  end

  @[Extern]
  struct CERT_HASHED_URL
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pwszUrl : Win32cr::Foundation::PWSTR
    def initialize(@hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pwszUrl : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_DETAILS
    property pwszMimeType : Win32cr::Foundation::PWSTR
    property cHashedUrl : UInt32
    property rgHashedUrl : Win32cr::Security::Cryptography::CERT_HASHED_URL*
    def initialize(@pwszMimeType : Win32cr::Foundation::PWSTR, @cHashedUrl : UInt32, @rgHashedUrl : Win32cr::Security::Cryptography::CERT_HASHED_URL*)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_REFERENCE
    property cHashedUrl : UInt32
    property rgHashedUrl : Win32cr::Security::Cryptography::CERT_HASHED_URL*
    def initialize(@cHashedUrl : UInt32, @rgHashedUrl : Win32cr::Security::Cryptography::CERT_HASHED_URL*)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_IMAGE_INFO
    property dwLogotypeImageInfoChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE_INFO_TYPE
    property dwFileSize : UInt32
    property dwXSize : UInt32
    property dwYSize : UInt32
    property dwLogotypeImageResolutionChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_CHOICE
    property anonymous : Anonymous_e__Union_
    property pwszLanguage : Win32cr::Foundation::PWSTR

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dwNumBits : UInt32
    property dwTableSize : UInt32
    def initialize(@dwNumBits : UInt32, @dwTableSize : UInt32)
    end
    end

    def initialize(@dwLogotypeImageInfoChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE_INFO_TYPE, @dwFileSize : UInt32, @dwXSize : UInt32, @dwYSize : UInt32, @dwLogotypeImageResolutionChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_CHOICE, @anonymous : Anonymous_e__Union_, @pwszLanguage : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_IMAGE
    property logotype_details : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DETAILS
    property pLogotypeImageInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE_INFO*
    def initialize(@logotype_details : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DETAILS, @pLogotypeImageInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE_INFO*)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_AUDIO_INFO
    property dwFileSize : UInt32
    property dwPlayTime : UInt32
    property dwChannels : UInt32
    property dwSampleRate : UInt32
    property pwszLanguage : Win32cr::Foundation::PWSTR
    def initialize(@dwFileSize : UInt32, @dwPlayTime : UInt32, @dwChannels : UInt32, @dwSampleRate : UInt32, @pwszLanguage : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_AUDIO
    property logotype_details : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DETAILS
    property pLogotypeAudioInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_AUDIO_INFO*
    def initialize(@logotype_details : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DETAILS, @pLogotypeAudioInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_AUDIO_INFO*)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_DATA
    property cLogotypeImage : UInt32
    property rgLogotypeImage : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE*
    property cLogotypeAudio : UInt32
    property rgLogotypeAudio : Win32cr::Security::Cryptography::CERT_LOGOTYPE_AUDIO*
    def initialize(@cLogotypeImage : UInt32, @rgLogotypeImage : Win32cr::Security::Cryptography::CERT_LOGOTYPE_IMAGE*, @cLogotypeAudio : UInt32, @rgLogotypeAudio : Win32cr::Security::Cryptography::CERT_LOGOTYPE_AUDIO*)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_INFO
    property dwLogotypeInfoChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_OPTION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pLogotypeDirectInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DATA*
    property pLogotypeIndirectInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_REFERENCE*
    def initialize(@pLogotypeDirectInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_DATA*, @pLogotypeIndirectInfo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_REFERENCE*)
    end
    end

    def initialize(@dwLogotypeInfoChoice : Win32cr::Security::Cryptography::CERT_LOGOTYPE_OPTION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CERT_OTHER_LOGOTYPE_INFO
    property pszObjId : Win32cr::Foundation::PSTR
    property logotype_info : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO
    def initialize(@pszObjId : Win32cr::Foundation::PSTR, @logotype_info : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO)
    end
  end

  @[Extern]
  struct CERT_LOGOTYPE_EXT_INFO
    property cCommunityLogo : UInt32
    property rgCommunityLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*
    property pIssuerLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*
    property pSubjectLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*
    property cOtherLogo : UInt32
    property rgOtherLogo : Win32cr::Security::Cryptography::CERT_OTHER_LOGOTYPE_INFO*
    def initialize(@cCommunityLogo : UInt32, @rgCommunityLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*, @pIssuerLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*, @pSubjectLogo : Win32cr::Security::Cryptography::CERT_LOGOTYPE_INFO*, @cOtherLogo : UInt32, @rgOtherLogo : Win32cr::Security::Cryptography::CERT_OTHER_LOGOTYPE_INFO*)
    end
  end

  @[Extern]
  struct CERT_BIOMETRIC_DATA
    property dwTypeOfBiometricDataChoice : Win32cr::Security::Cryptography::CERT_BIOMETRIC_DATA_TYPE
    property anonymous : Anonymous_e__Union_
    property hashed_url : Win32cr::Security::Cryptography::CERT_HASHED_URL

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dwPredefined : UInt32
    property pszObjId : Win32cr::Foundation::PSTR
    def initialize(@dwPredefined : UInt32, @pszObjId : Win32cr::Foundation::PSTR)
    end
    end

    def initialize(@dwTypeOfBiometricDataChoice : Win32cr::Security::Cryptography::CERT_BIOMETRIC_DATA_TYPE, @anonymous : Anonymous_e__Union_, @hashed_url : Win32cr::Security::Cryptography::CERT_HASHED_URL)
    end
  end

  @[Extern]
  struct CERT_BIOMETRIC_EXT_INFO
    property cBiometricData : UInt32
    property rgBiometricData : Win32cr::Security::Cryptography::CERT_BIOMETRIC_DATA*
    def initialize(@cBiometricData : UInt32, @rgBiometricData : Win32cr::Security::Cryptography::CERT_BIOMETRIC_DATA*)
    end
  end

  @[Extern]
  struct OCSP_SIGNATURE_INFO
    property signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property cCertEncoded : UInt32
    property rgCertEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@signature_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @signature : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @cCertEncoded : UInt32, @rgCertEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct OCSP_SIGNED_REQUEST_INFO
    property to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pOptionalSignatureInfo : Win32cr::Security::Cryptography::OCSP_SIGNATURE_INFO*
    def initialize(@to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pOptionalSignatureInfo : Win32cr::Security::Cryptography::OCSP_SIGNATURE_INFO*)
    end
  end

  @[Extern]
  struct OCSP_CERT_ID
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property issuer_name_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property issuer_key_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @issuer_name_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @issuer_key_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct OCSP_REQUEST_ENTRY
    property cert_id : Win32cr::Security::Cryptography::OCSP_CERT_ID
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@cert_id : Win32cr::Security::Cryptography::OCSP_CERT_ID, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct OCSP_REQUEST_INFO
    property dwVersion : UInt32
    property pRequestorName : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY*
    property cRequestEntry : UInt32
    property rgRequestEntry : Win32cr::Security::Cryptography::OCSP_REQUEST_ENTRY*
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : UInt32, @pRequestorName : Win32cr::Security::Cryptography::CERT_ALT_NAME_ENTRY*, @cRequestEntry : UInt32, @rgRequestEntry : Win32cr::Security::Cryptography::OCSP_REQUEST_ENTRY*, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct OCSP_RESPONSE_INFO
    property dwStatus : UInt32
    property pszObjId : Win32cr::Foundation::PSTR
    property value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwStatus : UInt32, @pszObjId : Win32cr::Foundation::PSTR, @value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct OCSP_BASIC_SIGNED_RESPONSE_INFO
    property to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property signature_info : Win32cr::Security::Cryptography::OCSP_SIGNATURE_INFO
    def initialize(@to_be_signed : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @signature_info : Win32cr::Security::Cryptography::OCSP_SIGNATURE_INFO)
    end
  end

  @[Extern]
  struct OCSP_BASIC_REVOKED_INFO
    property revocation_date : Win32cr::Foundation::FILETIME
    property dwCrlReasonCode : Win32cr::Security::Cryptography::CERT_REVOCATION_STATUS_REASON
    def initialize(@revocation_date : Win32cr::Foundation::FILETIME, @dwCrlReasonCode : Win32cr::Security::Cryptography::CERT_REVOCATION_STATUS_REASON)
    end
  end

  @[Extern]
  struct OCSP_BASIC_RESPONSE_ENTRY
    property cert_id : Win32cr::Security::Cryptography::OCSP_CERT_ID
    property dwCertStatus : UInt32
    property anonymous : Anonymous_e__Union_
    property this_update : Win32cr::Foundation::FILETIME
    property next_update : Win32cr::Foundation::FILETIME
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pRevokedInfo : Win32cr::Security::Cryptography::OCSP_BASIC_REVOKED_INFO*
    def initialize(@pRevokedInfo : Win32cr::Security::Cryptography::OCSP_BASIC_REVOKED_INFO*)
    end
    end

    def initialize(@cert_id : Win32cr::Security::Cryptography::OCSP_CERT_ID, @dwCertStatus : UInt32, @anonymous : Anonymous_e__Union_, @this_update : Win32cr::Foundation::FILETIME, @next_update : Win32cr::Foundation::FILETIME, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct OCSP_BASIC_RESPONSE_INFO
    property dwVersion : UInt32
    property dwResponderIdChoice : UInt32
    property anonymous : Anonymous_e__Union_
    property produced_at : Win32cr::Foundation::FILETIME
    property cResponseEntry : UInt32
    property rgResponseEntry : Win32cr::Security::Cryptography::OCSP_BASIC_RESPONSE_ENTRY*
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property by_name_responder_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property by_key_responder_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@by_name_responder_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @by_key_responder_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
    end

    def initialize(@dwVersion : UInt32, @dwResponderIdChoice : UInt32, @anonymous : Anonymous_e__Union_, @produced_at : Win32cr::Foundation::FILETIME, @cResponseEntry : UInt32, @rgResponseEntry : Win32cr::Security::Cryptography::OCSP_BASIC_RESPONSE_ENTRY*, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CERT_SUPPORTED_ALGORITHM_INFO
    property algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property intended_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property intended_cert_policies : Win32cr::Security::Cryptography::CERT_POLICIES_INFO
    def initialize(@algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @intended_key_usage : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @intended_cert_policies : Win32cr::Security::Cryptography::CERT_POLICIES_INFO)
    end
  end

  @[Extern]
  struct CERT_TPM_SPECIFICATION_INFO
    property pwszFamily : Win32cr::Foundation::PWSTR
    property dwLevel : UInt32
    property dwRevision : UInt32
    def initialize(@pwszFamily : Win32cr::Foundation::PWSTR, @dwLevel : UInt32, @dwRevision : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_OID_FUNC_ENTRY
    property pszOID : Win32cr::Foundation::PSTR
    property pvFuncAddr : Void*
    def initialize(@pszOID : Win32cr::Foundation::PSTR, @pvFuncAddr : Void*)
    end
  end

  @[Extern]
  struct CRYPT_OID_INFO
    property cbSize : UInt32
    property pszOID : Win32cr::Foundation::PSTR
    property pwszName : Win32cr::Foundation::PWSTR
    property dwGroupId : UInt32
    property anonymous : Anonymous_e__Union_
    property extra_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dwValue : UInt32
    property algid : UInt32
    property dwLength : UInt32
    def initialize(@dwValue : UInt32, @algid : UInt32, @dwLength : UInt32)
    end
    end

    def initialize(@cbSize : UInt32, @pszOID : Win32cr::Foundation::PSTR, @pwszName : Win32cr::Foundation::PWSTR, @dwGroupId : UInt32, @anonymous : Anonymous_e__Union_, @extra_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_STRONG_SIGN_SERIALIZED_INFO
    property dwFlags : Win32cr::Security::Cryptography::CERT_STRONG_SIGN_FLAGS
    property pwszCNGSignHashAlgids : Win32cr::Foundation::PWSTR
    property pwszCNGPubKeyMinBitLengths : Win32cr::Foundation::PWSTR
    def initialize(@dwFlags : Win32cr::Security::Cryptography::CERT_STRONG_SIGN_FLAGS, @pwszCNGSignHashAlgids : Win32cr::Foundation::PWSTR, @pwszCNGPubKeyMinBitLengths : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_STRONG_SIGN_PARA
    property cbSize : UInt32
    property dwInfoChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pvInfo : Void*
    property pSerializedInfo : Win32cr::Security::Cryptography::CERT_STRONG_SIGN_SERIALIZED_INFO*
    property pszOID : Win32cr::Foundation::PSTR
    def initialize(@pvInfo : Void*, @pSerializedInfo : Win32cr::Security::Cryptography::CERT_STRONG_SIGN_SERIALIZED_INFO*, @pszOID : Win32cr::Foundation::PSTR)
    end
    end

    def initialize(@cbSize : UInt32, @dwInfoChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CERT_ISSUER_SERIAL_NUMBER
    property issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CERT_ID
    property dwIdChoice : Win32cr::Security::Cryptography::CERT_ID_OPTION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property issuer_serial_number : Win32cr::Security::Cryptography::CERT_ISSUER_SERIAL_NUMBER
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property hash_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@issuer_serial_number : Win32cr::Security::Cryptography::CERT_ISSUER_SERIAL_NUMBER, @key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @hash_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
    end

    def initialize(@dwIdChoice : Win32cr::Security::Cryptography::CERT_ID_OPTION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMSG_SIGNER_ENCODE_INFO
    property cbSize : UInt32
    property pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : UInt32
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvHashAuxInfo : Void*
    property cAuthAttr : UInt32
    property rgAuthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    property cUnauthAttr : UInt32
    property rgUnauthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*, @anonymous : Anonymous_e__Union_, @dwKeySpec : UInt32, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvHashAuxInfo : Void*, @cAuthAttr : UInt32, @rgAuthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*, @cUnauthAttr : UInt32, @rgUnauthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*)
    end
  end

  @[Extern]
  struct CMSG_SIGNED_ENCODE_INFO
    property cbSize : UInt32
    property cSigners : UInt32
    property rgSigners : Win32cr::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO*
    property cCertEncoded : UInt32
    property rgCertEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    property cCrlEncoded : UInt32
    property rgCrlEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@cbSize : UInt32, @cSigners : UInt32, @rgSigners : Win32cr::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO*, @cCertEncoded : UInt32, @rgCertEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, @cCrlEncoded : UInt32, @rgCrlEncoded : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CMSG_ENVELOPED_ENCODE_INFO
    property cbSize : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvEncryptionAuxInfo : Void*
    property cRecipients : UInt32
    property rgpRecipients : Win32cr::Security::Cryptography::CERT_INFO**
    def initialize(@cbSize : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvEncryptionAuxInfo : Void*, @cRecipients : UInt32, @rgpRecipients : Win32cr::Security::Cryptography::CERT_INFO**)
    end
  end

  @[Extern]
  struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
    property cbSize : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvKeyEncryptionAuxInfo : Void*
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property recipient_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property recipient_id : Win32cr::Security::Cryptography::CERT_ID
    def initialize(@cbSize : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvKeyEncryptionAuxInfo : Void*, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @recipient_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @recipient_id : Win32cr::Security::Cryptography::CERT_ID)
    end
  end

  @[Extern]
  struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
    property cbSize : UInt32
    property recipient_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property recipient_id : Win32cr::Security::Cryptography::CERT_ID
    property date : Win32cr::Foundation::FILETIME
    property pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*
    def initialize(@cbSize : UInt32, @recipient_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @recipient_id : Win32cr::Security::Cryptography::CERT_ID, @date : Win32cr::Foundation::FILETIME, @pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*)
    end
  end

  @[Extern]
  struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
    property cbSize : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvKeyEncryptionAuxInfo : Void*
    property key_wrap_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvKeyWrapAuxInfo : Void*
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property dwKeySpec : UInt32
    property dwKeyChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_OPTION
    property anonymous : Anonymous_e__Union_
    property user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cRecipientEncryptedKeys : UInt32
    property rgpRecipientEncryptedKeys : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO**

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pEphemeralAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*
    property pSenderId : Win32cr::Security::Cryptography::CERT_ID*
    def initialize(@pEphemeralAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, @pSenderId : Win32cr::Security::Cryptography::CERT_ID*)
    end
    end

    def initialize(@cbSize : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvKeyEncryptionAuxInfo : Void*, @key_wrap_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvKeyWrapAuxInfo : Void*, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @dwKeySpec : UInt32, @dwKeyChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_OPTION, @anonymous : Anonymous_e__Union_, @user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cRecipientEncryptedKeys : UInt32, @rgpRecipientEncryptedKeys : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO**)
    end
  end

  @[Extern]
  struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    property cbSize : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvKeyEncryptionAuxInfo : Void*
    property hCryptProv : LibC::UIntPtrT
    property dwKeyChoice : UInt32
    property anonymous : Anonymous_e__Union_
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property date : Win32cr::Foundation::FILETIME
    property pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hKeyEncryptionKey : LibC::UIntPtrT
    property pvKeyEncryptionKey : Void*
    def initialize(@hKeyEncryptionKey : LibC::UIntPtrT, @pvKeyEncryptionKey : Void*)
    end
    end

    def initialize(@cbSize : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvKeyEncryptionAuxInfo : Void*, @hCryptProv : LibC::UIntPtrT, @dwKeyChoice : UInt32, @anonymous : Anonymous_e__Union_, @key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @date : Win32cr::Foundation::FILETIME, @pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*)
    end
  end

  @[Extern]
  struct CMSG_RECIPIENT_ENCODE_INFO
    property dwRecipientChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*
    property pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*
    property pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*
    def initialize(@pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, @pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, @pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*)
    end
    end

    def initialize(@dwRecipientChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMSG_RC2_AUX_INFO
    property cbSize : UInt32
    property dwBitLen : UInt32
    def initialize(@cbSize : UInt32, @dwBitLen : UInt32)
    end
  end

  @[Extern]
  struct CMSG_SP3_COMPATIBLE_AUX_INFO
    property cbSize : UInt32
    property dwFlags : UInt32
    def initialize(@cbSize : UInt32, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CMSG_RC4_AUX_INFO
    property cbSize : UInt32
    property dwBitLen : UInt32
    def initialize(@cbSize : UInt32, @dwBitLen : UInt32)
    end
  end

  @[Extern]
  struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
    property cbSize : UInt32
    property signed_info : Win32cr::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO
    property enveloped_info : Win32cr::Security::Cryptography::CMSG_ENVELOPED_ENCODE_INFO
    def initialize(@cbSize : UInt32, @signed_info : Win32cr::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO, @enveloped_info : Win32cr::Security::Cryptography::CMSG_ENVELOPED_ENCODE_INFO)
    end
  end

  @[Extern]
  struct CMSG_HASHED_ENCODE_INFO
    property cbSize : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvHashAuxInfo : Void*
    def initialize(@cbSize : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvHashAuxInfo : Void*)
    end
  end

  @[Extern]
  struct CMSG_ENCRYPTED_ENCODE_INFO
    property cbSize : UInt32
    property content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvEncryptionAuxInfo : Void*
    def initialize(@cbSize : UInt32, @content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvEncryptionAuxInfo : Void*)
    end
  end

  @[Extern]
  struct CMSG_STREAM_INFO
    property cbContent : UInt32
    property pfnStreamOutput : Win32cr::Security::Cryptography::PFN_CMSG_STREAM_OUTPUT
    property pvArg : Void*
    def initialize(@cbContent : UInt32, @pfnStreamOutput : Win32cr::Security::Cryptography::PFN_CMSG_STREAM_OUTPUT, @pvArg : Void*)
    end
  end

  @[Extern]
  struct CMSG_SIGNER_INFO
    property dwVersion : UInt32
    property issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hash_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property auth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES
    property unauth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES
    def initialize(@dwVersion : UInt32, @issuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hash_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @auth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES, @unauth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES)
    end
  end

  @[Extern]
  struct CMSG_CMS_SIGNER_INFO
    property dwVersion : UInt32
    property signer_id : Win32cr::Security::Cryptography::CERT_ID
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hash_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property auth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES
    property unauth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES
    def initialize(@dwVersion : UInt32, @signer_id : Win32cr::Security::Cryptography::CERT_ID, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hash_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_hash : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @auth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES, @unauth_attrs : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTES)
    end
  end

  @[Extern]
  struct CMSG_KEY_TRANS_RECIPIENT_INFO
    property dwVersion : UInt32
    property recipient_id : Win32cr::Security::Cryptography::CERT_ID
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwVersion : UInt32, @recipient_id : Win32cr::Security::Cryptography::CERT_ID, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
    property recipient_id : Win32cr::Security::Cryptography::CERT_ID
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property date : Win32cr::Foundation::FILETIME
    property pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*
    def initialize(@recipient_id : Win32cr::Security::Cryptography::CERT_ID, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @date : Win32cr::Foundation::FILETIME, @pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*)
    end
  end

  @[Extern]
  struct CMSG_KEY_AGREE_RECIPIENT_INFO
    property dwVersion : UInt32
    property dwOriginatorChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_ORIGINATOR
    property anonymous : Anonymous_e__Union_
    property user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property cRecipientEncryptedKeys : UInt32
    property rgpRecipientEncryptedKeys : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCRYPTED_KEY_INFO**

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property originator_cert_id : Win32cr::Security::Cryptography::CERT_ID
    property originator_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO
    def initialize(@originator_cert_id : Win32cr::Security::Cryptography::CERT_ID, @originator_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO)
    end
    end

    def initialize(@dwVersion : UInt32, @dwOriginatorChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_ORIGINATOR, @anonymous : Anonymous_e__Union_, @user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @cRecipientEncryptedKeys : UInt32, @rgpRecipientEncryptedKeys : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCRYPTED_KEY_INFO**)
    end
  end

  @[Extern]
  struct CMSG_MAIL_LIST_RECIPIENT_INFO
    property dwVersion : UInt32
    property key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property date : Win32cr::Foundation::FILETIME
    property pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*
    def initialize(@dwVersion : UInt32, @key_id : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @date : Win32cr::Foundation::FILETIME, @pOtherAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE_TYPE_VALUE*)
    end
  end

  @[Extern]
  struct CMSG_CMS_RECIPIENT_INFO
    property dwRecipientChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_INFO*
    property pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_INFO*
    property pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_INFO*
    def initialize(@pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_INFO*, @pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_INFO*, @pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_INFO*)
    end
    end

    def initialize(@dwRecipientChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
    property cbSize : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property dwSignerIndex : UInt32
    property dwSignerType : UInt32
    property pvSigner : Void*
    def initialize(@cbSize : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @dwSignerIndex : UInt32, @dwSignerType : UInt32, @pvSigner : Void*)
    end
  end

  @[Extern]
  struct CMSG_CTRL_DECRYPT_PARA
    property cbSize : UInt32
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : UInt32
    property dwRecipientIndex : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @anonymous : Anonymous_e__Union_, @dwKeySpec : UInt32, @dwRecipientIndex : UInt32)
    end
  end

  @[Extern]
  struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
    property cbSize : UInt32
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : UInt32
    property pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_INFO*
    property dwRecipientIndex : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @anonymous : Anonymous_e__Union_, @dwKeySpec : UInt32, @pKeyTrans : Win32cr::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_INFO*, @dwRecipientIndex : UInt32)
    end
  end

  @[Extern]
  struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
    property cbSize : UInt32
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : UInt32
    property pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_INFO*
    property dwRecipientIndex : UInt32
    property dwRecipientEncryptedKeyIndex : UInt32
    property originator_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @anonymous : Anonymous_e__Union_, @dwKeySpec : UInt32, @pKeyAgree : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_INFO*, @dwRecipientIndex : UInt32, @dwRecipientEncryptedKeyIndex : UInt32, @originator_public_key : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB)
    end
  end

  @[Extern]
  struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
    property cbSize : UInt32
    property hCryptProv : LibC::UIntPtrT
    property pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_INFO*
    property dwRecipientIndex : UInt32
    property dwKeyChoice : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hKeyEncryptionKey : LibC::UIntPtrT
    property pvKeyEncryptionKey : Void*
    def initialize(@hKeyEncryptionKey : LibC::UIntPtrT, @pvKeyEncryptionKey : Void*)
    end
    end

    def initialize(@cbSize : UInt32, @hCryptProv : LibC::UIntPtrT, @pMailList : Win32cr::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_INFO*, @dwRecipientIndex : UInt32, @dwKeyChoice : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
    property cbSize : UInt32
    property dwSignerIndex : UInt32
    property blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@cbSize : UInt32, @dwSignerIndex : UInt32, @blob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
    property cbSize : UInt32
    property dwSignerIndex : UInt32
    property dwUnauthAttrIndex : UInt32
    def initialize(@cbSize : UInt32, @dwSignerIndex : UInt32, @dwUnauthAttrIndex : UInt32)
    end
  end

  @[Extern]
  struct CMSG_CONTENT_ENCRYPT_INFO
    property cbSize : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvEncryptionAuxInfo : Void*
    property cRecipients : UInt32
    property rgCmsRecipients : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCODE_INFO*
    property pfnAlloc : Win32cr::Security::Cryptography::PFN_CMSG_ALLOC
    property pfnFree : Win32cr::Security::Cryptography::PFN_CMSG_FREE
    property dwEncryptFlags : UInt32
    property anonymous : Anonymous_e__Union_
    property dwFlags : UInt32
    property fCNG : Win32cr::Foundation::BOOL
    property pbCNGContentEncryptKeyObject : UInt8*
    property pbContentEncryptKey : UInt8*
    property cbContentEncryptKey : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hContentEncryptKey : LibC::UIntPtrT
    property hCNGContentEncryptKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE
    def initialize(@hContentEncryptKey : LibC::UIntPtrT, @hCNGContentEncryptKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvEncryptionAuxInfo : Void*, @cRecipients : UInt32, @rgCmsRecipients : Win32cr::Security::Cryptography::CMSG_RECIPIENT_ENCODE_INFO*, @pfnAlloc : Win32cr::Security::Cryptography::PFN_CMSG_ALLOC, @pfnFree : Win32cr::Security::Cryptography::PFN_CMSG_FREE, @dwEncryptFlags : UInt32, @anonymous : Anonymous_e__Union_, @dwFlags : UInt32, @fCNG : Win32cr::Foundation::BOOL, @pbCNGContentEncryptKeyObject : UInt8*, @pbContentEncryptKey : UInt8*, @cbContentEncryptKey : UInt32)
    end
  end

  @[Extern]
  struct CMSG_KEY_TRANS_ENCRYPT_INFO
    property cbSize : UInt32
    property dwRecipientIndex : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property dwFlags : UInt32
    def initialize(@cbSize : UInt32, @dwRecipientIndex : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
    property cbSize : UInt32
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@cbSize : UInt32, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CMSG_KEY_AGREE_ENCRYPT_INFO
    property cbSize : UInt32
    property dwRecipientIndex : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property dwOriginatorChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_ORIGINATOR
    property anonymous : Anonymous_e__Union_
    property cKeyAgreeKeyEncryptInfo : UInt32
    property rgpKeyAgreeKeyEncryptInfo : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_KEY_ENCRYPT_INFO**
    property dwFlags : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property originator_cert_id : Win32cr::Security::Cryptography::CERT_ID
    property originator_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO
    def initialize(@originator_cert_id : Win32cr::Security::Cryptography::CERT_ID, @originator_public_key_info : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO)
    end
    end

    def initialize(@cbSize : UInt32, @dwRecipientIndex : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @user_keying_material : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @dwOriginatorChoice : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_ORIGINATOR, @anonymous : Anonymous_e__Union_, @cKeyAgreeKeyEncryptInfo : UInt32, @rgpKeyAgreeKeyEncryptInfo : Win32cr::Security::Cryptography::CMSG_KEY_AGREE_KEY_ENCRYPT_INFO**, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CMSG_MAIL_LIST_ENCRYPT_INFO
    property cbSize : UInt32
    property dwRecipientIndex : UInt32
    property key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property dwFlags : UInt32
    def initialize(@cbSize : UInt32, @dwRecipientIndex : UInt32, @key_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @encrypted_key : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CMSG_CNG_CONTENT_DECRYPT_INFO
    property cbSize : UInt32
    property content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pfnAlloc : Win32cr::Security::Cryptography::PFN_CMSG_ALLOC
    property pfnFree : Win32cr::Security::Cryptography::PFN_CMSG_FREE
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    property pbContentEncryptKey : UInt8*
    property cbContentEncryptKey : UInt32
    property hCNGContentEncryptKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE
    property pbCNGContentEncryptKeyObject : UInt8*
    def initialize(@cbSize : UInt32, @content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pfnAlloc : Win32cr::Security::Cryptography::PFN_CMSG_ALLOC, @pfnFree : Win32cr::Security::Cryptography::PFN_CMSG_FREE, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, @pbContentEncryptKey : UInt8*, @cbContentEncryptKey : UInt32, @hCNGContentEncryptKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, @pbCNGContentEncryptKeyObject : UInt8*)
    end
  end

  @[Extern]
  struct CERT_CONTEXT
    property dwCertEncodingType : UInt32
    property pbCertEncoded : UInt8*
    property cbCertEncoded : UInt32
    property pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*
    property hCertStore : Win32cr::Security::Cryptography::HCERTSTORE
    def initialize(@dwCertEncodingType : UInt32, @pbCertEncoded : UInt8*, @cbCertEncoded : UInt32, @pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*, @hCertStore : Win32cr::Security::Cryptography::HCERTSTORE)
    end
  end

  @[Extern]
  struct CRL_CONTEXT
    property dwCertEncodingType : UInt32
    property pbCrlEncoded : UInt8*
    property cbCrlEncoded : UInt32
    property pCrlInfo : Win32cr::Security::Cryptography::CRL_INFO*
    property hCertStore : Win32cr::Security::Cryptography::HCERTSTORE
    def initialize(@dwCertEncodingType : UInt32, @pbCrlEncoded : UInt8*, @cbCrlEncoded : UInt32, @pCrlInfo : Win32cr::Security::Cryptography::CRL_INFO*, @hCertStore : Win32cr::Security::Cryptography::HCERTSTORE)
    end
  end

  @[Extern]
  struct CTL_CONTEXT
    property dwMsgAndCertEncodingType : UInt32
    property pbCtlEncoded : UInt8*
    property cbCtlEncoded : UInt32
    property pCtlInfo : Win32cr::Security::Cryptography::CTL_INFO*
    property hCertStore : Win32cr::Security::Cryptography::HCERTSTORE
    property hCryptMsg : Void*
    property pbCtlContent : UInt8*
    property cbCtlContent : UInt32
    def initialize(@dwMsgAndCertEncodingType : UInt32, @pbCtlEncoded : UInt8*, @cbCtlEncoded : UInt32, @pCtlInfo : Win32cr::Security::Cryptography::CTL_INFO*, @hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, @hCryptMsg : Void*, @pbCtlContent : UInt8*, @cbCtlContent : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_KEY_PROV_PARAM
    property dwParam : UInt32
    property pbData : UInt8*
    property cbData : UInt32
    property dwFlags : UInt32
    def initialize(@dwParam : UInt32, @pbData : UInt8*, @cbData : UInt32, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_KEY_PROV_INFO
    property pwszContainerName : Win32cr::Foundation::PWSTR
    property pwszProvName : Win32cr::Foundation::PWSTR
    property dwProvType : UInt32
    property dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS
    property cProvParam : UInt32
    property rgProvParam : Win32cr::Security::Cryptography::CRYPT_KEY_PROV_PARAM*
    property dwKeySpec : UInt32
    def initialize(@pwszContainerName : Win32cr::Foundation::PWSTR, @pwszProvName : Win32cr::Foundation::PWSTR, @dwProvType : UInt32, @dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS, @cProvParam : UInt32, @rgProvParam : Win32cr::Security::Cryptography::CRYPT_KEY_PROV_PARAM*, @dwKeySpec : UInt32)
    end
  end

  @[Extern]
  struct CERT_KEY_CONTEXT
    property cbSize : UInt32
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : UInt32

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @anonymous : Anonymous_e__Union_, @dwKeySpec : UInt32)
    end
  end

  @[Extern]
  struct ROOT_INFO_LUID
    property low_part : UInt32
    property high_part : Int32
    def initialize(@low_part : UInt32, @high_part : Int32)
    end
  end

  @[Extern]
  struct CRYPT_SMART_CARD_ROOT_INFO
    property rgbCardID : UInt8[16]
    property luid : Win32cr::Security::Cryptography::ROOT_INFO_LUID
    def initialize(@rgbCardID : UInt8[16], @luid : Win32cr::Security::Cryptography::ROOT_INFO_LUID)
    end
  end

  @[Extern]
  struct CERT_SYSTEM_STORE_RELOCATE_PARA
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_

    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property pvSystemStore : Void*
    property pszSystemStore : Win32cr::Foundation::PSTR
    property pwszSystemStore : Win32cr::Foundation::PWSTR
    def initialize(@pvSystemStore : Void*, @pszSystemStore : Win32cr::Foundation::PSTR, @pwszSystemStore : Win32cr::Foundation::PWSTR)
    end
    end


    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property hKeyBase : Win32cr::System::Registry::HKEY
    property pvBase : Void*
    def initialize(@hKeyBase : Win32cr::System::Registry::HKEY, @pvBase : Void*)
    end
    end

    def initialize(@anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_)
    end
  end

  @[Extern]
  struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA
    property hKeyBase : Win32cr::System::Registry::HKEY
    property pwszRegPath : Win32cr::Foundation::PWSTR
    def initialize(@hKeyBase : Win32cr::System::Registry::HKEY, @pwszRegPath : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_REGISTRY_STORE_ROAMING_PARA
    property hKey : Win32cr::System::Registry::HKEY
    property pwszStoreDirectory : Win32cr::Foundation::PWSTR
    def initialize(@hKey : Win32cr::System::Registry::HKEY, @pwszStoreDirectory : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_LDAP_STORE_OPENED_PARA
    property pvLdapSessionHandle : Void*
    property pwszLdapUrl : Win32cr::Foundation::PWSTR
    def initialize(@pvLdapSessionHandle : Void*, @pwszLdapUrl : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_STORE_PROV_INFO
    property cbSize : UInt32
    property cStoreProvFunc : UInt32
    property rgpvStoreProvFunc : Void**
    property hStoreProv : Win32cr::Security::Cryptography::HCERTSTOREPROV
    property dwStoreProvFlags : Win32cr::Security::Cryptography::CERT_STORE_PROV_FLAGS
    property hStoreProvFuncAddr2 : Void*
    def initialize(@cbSize : UInt32, @cStoreProvFunc : UInt32, @rgpvStoreProvFunc : Void**, @hStoreProv : Win32cr::Security::Cryptography::HCERTSTOREPROV, @dwStoreProvFlags : Win32cr::Security::Cryptography::CERT_STORE_PROV_FLAGS, @hStoreProvFuncAddr2 : Void*)
    end
  end

  @[Extern]
  struct CERT_STORE_PROV_FIND_INFO
    property cbSize : UInt32
    property dwMsgAndCertEncodingType : UInt32
    property dwFindFlags : UInt32
    property dwFindType : UInt32
    property pvFindPara : Void*
    def initialize(@cbSize : UInt32, @dwMsgAndCertEncodingType : UInt32, @dwFindFlags : UInt32, @dwFindType : UInt32, @pvFindPara : Void*)
    end
  end

  @[Extern]
  struct CRL_FIND_ISSUED_FOR_PARA
    property pSubjectCert : Win32cr::Security::Cryptography::CERT_CONTEXT*
    property pIssuerCert : Win32cr::Security::Cryptography::CERT_CONTEXT*
    def initialize(@pSubjectCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, @pIssuerCert : Win32cr::Security::Cryptography::CERT_CONTEXT*)
    end
  end

  @[Extern]
  struct CTL_ANY_SUBJECT_INFO
    property subject_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property subject_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@subject_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @subject_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CTL_FIND_USAGE_PARA
    property cbSize : UInt32
    property subject_usage : Win32cr::Security::Cryptography::CTL_USAGE
    property list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pSigner : Win32cr::Security::Cryptography::CERT_INFO*
    def initialize(@cbSize : UInt32, @subject_usage : Win32cr::Security::Cryptography::CTL_USAGE, @list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pSigner : Win32cr::Security::Cryptography::CERT_INFO*)
    end
  end

  @[Extern]
  struct CTL_FIND_SUBJECT_PARA
    property cbSize : UInt32
    property pUsagePara : Win32cr::Security::Cryptography::CTL_FIND_USAGE_PARA*
    property dwSubjectType : UInt32
    property pvSubject : Void*
    def initialize(@cbSize : UInt32, @pUsagePara : Win32cr::Security::Cryptography::CTL_FIND_USAGE_PARA*, @dwSubjectType : UInt32, @pvSubject : Void*)
    end
  end

  @[Extern]
  struct CERT_CREATE_CONTEXT_PARA
    property cbSize : UInt32
    property pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE
    property pvFree : Void*
    property pfnSort : Win32cr::Security::Cryptography::PFN_CERT_CREATE_CONTEXT_SORT_FUNC
    property pvSort : Void*
    def initialize(@cbSize : UInt32, @pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_FREE, @pvFree : Void*, @pfnSort : Win32cr::Security::Cryptography::PFN_CERT_CREATE_CONTEXT_SORT_FUNC, @pvSort : Void*)
    end
  end

  @[Extern]
  struct CERT_SYSTEM_STORE_INFO
    property cbSize : UInt32
    def initialize(@cbSize : UInt32)
    end
  end

  @[Extern]
  struct CERT_PHYSICAL_STORE_INFO
    property cbSize : UInt32
    property pszOpenStoreProvider : Win32cr::Foundation::PSTR
    property dwOpenEncodingType : UInt32
    property dwOpenFlags : UInt32
    property open_parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property dwFlags : UInt32
    property dwPriority : UInt32
    def initialize(@cbSize : UInt32, @pszOpenStoreProvider : Win32cr::Foundation::PSTR, @dwOpenEncodingType : UInt32, @dwOpenFlags : UInt32, @open_parameters : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @dwFlags : UInt32, @dwPriority : UInt32)
    end
  end

  @[Extern]
  struct CTL_VERIFY_USAGE_PARA
    property cbSize : UInt32
    property list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cCtlStore : UInt32
    property rghCtlStore : Win32cr::Security::Cryptography::HCERTSTORE*
    property cSignerStore : UInt32
    property rghSignerStore : Win32cr::Security::Cryptography::HCERTSTORE*
    def initialize(@cbSize : UInt32, @list_identifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cCtlStore : UInt32, @rghCtlStore : Win32cr::Security::Cryptography::HCERTSTORE*, @cSignerStore : UInt32, @rghSignerStore : Win32cr::Security::Cryptography::HCERTSTORE*)
    end
  end

  @[Extern]
  struct CTL_VERIFY_USAGE_STATUS
    property cbSize : UInt32
    property dwError : UInt32
    property dwFlags : UInt32
    property ppCtl : Win32cr::Security::Cryptography::CTL_CONTEXT**
    property dwCtlEntryIndex : UInt32
    property ppSigner : Win32cr::Security::Cryptography::CERT_CONTEXT**
    property dwSignerIndex : UInt32
    def initialize(@cbSize : UInt32, @dwError : UInt32, @dwFlags : UInt32, @ppCtl : Win32cr::Security::Cryptography::CTL_CONTEXT**, @dwCtlEntryIndex : UInt32, @ppSigner : Win32cr::Security::Cryptography::CERT_CONTEXT**, @dwSignerIndex : UInt32)
    end
  end

  @[Extern]
  struct CERT_REVOCATION_CRL_INFO
    property cbSize : UInt32
    property pBaseCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*
    property pDeltaCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*
    property pCrlEntry : Win32cr::Security::Cryptography::CRL_ENTRY*
    property fDeltaCrlEntry : Win32cr::Foundation::BOOL
    def initialize(@cbSize : UInt32, @pBaseCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, @pDeltaCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, @pCrlEntry : Win32cr::Security::Cryptography::CRL_ENTRY*, @fDeltaCrlEntry : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct CERT_REVOCATION_PARA
    property cbSize : UInt32
    property pIssuerCert : Win32cr::Security::Cryptography::CERT_CONTEXT*
    property cCertStore : UInt32
    property rgCertStore : Win32cr::Security::Cryptography::HCERTSTORE*
    property hCrlStore : Win32cr::Security::Cryptography::HCERTSTORE
    property pftTimeToUse : Win32cr::Foundation::FILETIME*
    def initialize(@cbSize : UInt32, @pIssuerCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, @cCertStore : UInt32, @rgCertStore : Win32cr::Security::Cryptography::HCERTSTORE*, @hCrlStore : Win32cr::Security::Cryptography::HCERTSTORE, @pftTimeToUse : Win32cr::Foundation::FILETIME*)
    end
  end

  @[Extern]
  struct CERT_REVOCATION_STATUS
    property cbSize : UInt32
    property dwIndex : UInt32
    property dwError : UInt32
    property dwReason : Win32cr::Security::Cryptography::CERT_REVOCATION_STATUS_REASON
    property fHasFreshnessTime : Win32cr::Foundation::BOOL
    property dwFreshnessTime : UInt32
    def initialize(@cbSize : UInt32, @dwIndex : UInt32, @dwError : UInt32, @dwReason : Win32cr::Security::Cryptography::CERT_REVOCATION_STATUS_REASON, @fHasFreshnessTime : Win32cr::Foundation::BOOL, @dwFreshnessTime : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
    property cert_sign_hash_cng_alg_prop_data : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cert_issuer_pub_key_bit_length_prop_data : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@cert_sign_hash_cng_alg_prop_data : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cert_issuer_pub_key_bit_length_prop_data : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
    property cCNGHashAlgid : UInt32
    property rgpwszCNGHashAlgid : Win32cr::Foundation::PWSTR*
    property dwWeakIndex : UInt32
    def initialize(@cCNGHashAlgid : UInt32, @rgpwszCNGHashAlgid : Win32cr::Foundation::PWSTR*, @dwWeakIndex : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
    property cOID : UInt32
    property rgpszOID : Win32cr::Foundation::PSTR*
    def initialize(@cOID : UInt32, @rgpszOID : Win32cr::Foundation::PSTR*)
    end
  end

  @[Extern]
  struct CRYPT_SIGN_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgEncodingType : UInt32
    property pSigningCert : Win32cr::Security::Cryptography::CERT_CONTEXT*
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvHashAuxInfo : Void*
    property cMsgCert : UInt32
    property rgpMsgCert : Win32cr::Security::Cryptography::CERT_CONTEXT**
    property cMsgCrl : UInt32
    property rgpMsgCrl : Win32cr::Security::Cryptography::CRL_CONTEXT**
    property cAuthAttr : UInt32
    property rgAuthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    property cUnauthAttr : UInt32
    property rgUnauthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*
    property dwFlags : UInt32
    property dwInnerContentType : UInt32
    def initialize(@cbSize : UInt32, @dwMsgEncodingType : UInt32, @pSigningCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvHashAuxInfo : Void*, @cMsgCert : UInt32, @rgpMsgCert : Win32cr::Security::Cryptography::CERT_CONTEXT**, @cMsgCrl : UInt32, @rgpMsgCrl : Win32cr::Security::Cryptography::CRL_CONTEXT**, @cAuthAttr : UInt32, @rgAuthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*, @cUnauthAttr : UInt32, @rgUnauthAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*, @dwFlags : UInt32, @dwInnerContentType : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_VERIFY_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgAndCertEncodingType : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property pfnGetSignerCertificate : Win32cr::Security::Cryptography::PFN_CRYPT_GET_SIGNER_CERTIFICATE
    property pvGetArg : Void*
    def initialize(@cbSize : UInt32, @dwMsgAndCertEncodingType : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @pfnGetSignerCertificate : Win32cr::Security::Cryptography::PFN_CRYPT_GET_SIGNER_CERTIFICATE, @pvGetArg : Void*)
    end
  end

  @[Extern]
  struct CRYPT_ENCRYPT_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgEncodingType : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvEncryptionAuxInfo : Void*
    property dwFlags : UInt32
    property dwInnerContentType : UInt32
    def initialize(@cbSize : UInt32, @dwMsgEncodingType : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @content_encryption_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvEncryptionAuxInfo : Void*, @dwFlags : UInt32, @dwInnerContentType : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_DECRYPT_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgAndCertEncodingType : UInt32
    property cCertStore : UInt32
    property rghCertStore : Win32cr::Security::Cryptography::HCERTSTORE*
    def initialize(@cbSize : UInt32, @dwMsgAndCertEncodingType : UInt32, @cCertStore : UInt32, @rghCertStore : Win32cr::Security::Cryptography::HCERTSTORE*)
    end
  end

  @[Extern]
  struct CRYPT_HASH_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgEncodingType : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvHashAuxInfo : Void*
    def initialize(@cbSize : UInt32, @dwMsgEncodingType : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvHashAuxInfo : Void*)
    end
  end

  @[Extern]
  struct CRYPT_KEY_SIGN_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgAndCertEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE
    property anonymous : Anonymous_e__Union_
    property dwKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property pvHashAuxInfo : Void*
    property pub_key_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property hCryptProv : LibC::UIntPtrT
    property hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE
    def initialize(@hCryptProv : LibC::UIntPtrT, @hNCryptKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE)
    end
    end

    def initialize(@cbSize : UInt32, @dwMsgAndCertEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, @anonymous : Anonymous_e__Union_, @dwKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @pvHashAuxInfo : Void*, @pub_key_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER)
    end
  end

  @[Extern]
  struct CRYPT_KEY_VERIFY_MESSAGE_PARA
    property cbSize : UInt32
    property dwMsgEncodingType : UInt32
    property hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY
    def initialize(@cbSize : UInt32, @dwMsgEncodingType : UInt32, @hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY)
    end
  end

  @[Extern]
  struct CERT_CHAIN
    property cCerts : UInt32
    property certs : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    property keyLocatorInfo : Win32cr::Security::Cryptography::CRYPT_KEY_PROV_INFO
    def initialize(@cCerts : UInt32, @certs : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, @keyLocatorInfo : Win32cr::Security::Cryptography::CRYPT_KEY_PROV_INFO)
    end
  end

  @[Extern]
  struct CRYPT_BLOB_ARRAY
    property cBlob : UInt32
    property rgBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@cBlob : UInt32, @rgBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CRYPT_CREDENTIALS
    property cbSize : UInt32
    property pszCredentialsOid : Win32cr::Foundation::PSTR
    property pvCredentials : Void*
    def initialize(@cbSize : UInt32, @pszCredentialsOid : Win32cr::Foundation::PSTR, @pvCredentials : Void*)
    end
  end

  @[Extern]
  struct CRYPT_PASSWORD_CREDENTIALSA
    property cbSize : UInt32
    property pszUsername : Win32cr::Foundation::PSTR
    property pszPassword : Win32cr::Foundation::PSTR
    def initialize(@cbSize : UInt32, @pszUsername : Win32cr::Foundation::PSTR, @pszPassword : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct CRYPT_PASSWORD_CREDENTIALSW
    property cbSize : UInt32
    property pszUsername : Win32cr::Foundation::PWSTR
    property pszPassword : Win32cr::Foundation::PWSTR
    def initialize(@cbSize : UInt32, @pszUsername : Win32cr::Foundation::PWSTR, @pszPassword : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO
    property cbSize : UInt32
    property dwObjectType : UInt32
    property dwError : UInt32
    property dwReserved : UInt32
    property this_update_time : Win32cr::Foundation::FILETIME
    property next_update_time : Win32cr::Foundation::FILETIME
    property publish_time : Win32cr::Foundation::FILETIME
    def initialize(@cbSize : UInt32, @dwObjectType : UInt32, @dwError : UInt32, @dwReserved : UInt32, @this_update_time : Win32cr::Foundation::FILETIME, @next_update_time : Win32cr::Foundation::FILETIME, @publish_time : Win32cr::Foundation::FILETIME)
    end
  end

  @[Extern]
  struct CRYPTNET_URL_CACHE_FLUSH_INFO
    property cbSize : UInt32
    property dwExemptSeconds : UInt32
    property expire_time : Win32cr::Foundation::FILETIME
    def initialize(@cbSize : UInt32, @dwExemptSeconds : UInt32, @expire_time : Win32cr::Foundation::FILETIME)
    end
  end

  @[Extern]
  struct CRYPTNET_URL_CACHE_RESPONSE_INFO
    property cbSize : UInt32
    property wResponseType : UInt16
    property wResponseFlags : UInt16
    property last_modified_time : Win32cr::Foundation::FILETIME
    property dwMaxAge : UInt32
    property pwszETag : Win32cr::Foundation::PWSTR
    property dwProxyId : UInt32
    def initialize(@cbSize : UInt32, @wResponseType : UInt16, @wResponseFlags : UInt16, @last_modified_time : Win32cr::Foundation::FILETIME, @dwMaxAge : UInt32, @pwszETag : Win32cr::Foundation::PWSTR, @dwProxyId : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_RETRIEVE_AUX_INFO
    property cbSize : UInt32
    property pLastSyncTime : Win32cr::Foundation::FILETIME*
    property dwMaxUrlRetrievalByteCount : UInt32
    property pPreFetchInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_PRE_FETCH_INFO*
    property pFlushInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_FLUSH_INFO*
    property ppResponseInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_RESPONSE_INFO**
    property pwszCacheFileNamePrefix : Win32cr::Foundation::PWSTR
    property pftCacheResync : Win32cr::Foundation::FILETIME*
    property fProxyCacheRetrieval : Win32cr::Foundation::BOOL
    property dwHttpStatusCode : UInt32
    property ppwszErrorResponseHeaders : Win32cr::Foundation::PWSTR*
    property ppErrorContentBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB**
    def initialize(@cbSize : UInt32, @pLastSyncTime : Win32cr::Foundation::FILETIME*, @dwMaxUrlRetrievalByteCount : UInt32, @pPreFetchInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_PRE_FETCH_INFO*, @pFlushInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_FLUSH_INFO*, @ppResponseInfo : Win32cr::Security::Cryptography::CRYPTNET_URL_CACHE_RESPONSE_INFO**, @pwszCacheFileNamePrefix : Win32cr::Foundation::PWSTR, @pftCacheResync : Win32cr::Foundation::FILETIME*, @fProxyCacheRetrieval : Win32cr::Foundation::BOOL, @dwHttpStatusCode : UInt32, @ppwszErrorResponseHeaders : Win32cr::Foundation::PWSTR*, @ppErrorContentBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB**)
    end
  end

  @[Extern]
  struct CRYPT_ASYNC_RETRIEVAL_COMPLETION
    property pfnCompletion : Win32cr::Security::Cryptography::PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC
    property pvCompletion : Void*
    def initialize(@pfnCompletion : Win32cr::Security::Cryptography::PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC, @pvCompletion : Void*)
    end
  end

  @[Extern]
  struct CRYPT_URL_ARRAY
    property cUrl : UInt32
    property rgwszUrl : Win32cr::Foundation::PWSTR*
    def initialize(@cUrl : UInt32, @rgwszUrl : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct CRYPT_URL_INFO
    property cbSize : UInt32
    property dwSyncDeltaTime : UInt32
    property cGroup : UInt32
    property rgcGroupEntry : UInt32*
    def initialize(@cbSize : UInt32, @dwSyncDeltaTime : UInt32, @cGroup : UInt32, @rgcGroupEntry : UInt32*)
    end
  end

  @[Extern]
  struct CERT_CRL_CONTEXT_PAIR
    property pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*
    property pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*
    def initialize(@pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, @pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*)
    end
  end

  @[Extern]
  struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
    property cbSize : UInt32
    property iDeltaCrlIndicator : Int32
    property pftCacheResync : Win32cr::Foundation::FILETIME*
    property pLastSyncTime : Win32cr::Foundation::FILETIME*
    property pMaxAgeTime : Win32cr::Foundation::FILETIME*
    property pChainPara : Win32cr::Security::Cryptography::CERT_REVOCATION_CHAIN_PARA*
    property pDeltaCrlIndicator : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@cbSize : UInt32, @iDeltaCrlIndicator : Int32, @pftCacheResync : Win32cr::Foundation::FILETIME*, @pLastSyncTime : Win32cr::Foundation::FILETIME*, @pMaxAgeTime : Win32cr::Foundation::FILETIME*, @pChainPara : Win32cr::Security::Cryptography::CERT_REVOCATION_CHAIN_PARA*, @pDeltaCrlIndicator : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CERT_CHAIN_ENGINE_CONFIG
    property cbSize : UInt32
    property hRestrictedRoot : Win32cr::Security::Cryptography::HCERTSTORE
    property hRestrictedTrust : Win32cr::Security::Cryptography::HCERTSTORE
    property hRestrictedOther : Win32cr::Security::Cryptography::HCERTSTORE
    property cAdditionalStore : UInt32
    property rghAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE*
    property dwFlags : UInt32
    property dwUrlRetrievalTimeout : UInt32
    property maximum_cached_certificates : UInt32
    property cycle_detection_modulus : UInt32
    property hExclusiveRoot : Win32cr::Security::Cryptography::HCERTSTORE
    property hExclusiveTrustedPeople : Win32cr::Security::Cryptography::HCERTSTORE
    property dwExclusiveFlags : UInt32
    def initialize(@cbSize : UInt32, @hRestrictedRoot : Win32cr::Security::Cryptography::HCERTSTORE, @hRestrictedTrust : Win32cr::Security::Cryptography::HCERTSTORE, @hRestrictedOther : Win32cr::Security::Cryptography::HCERTSTORE, @cAdditionalStore : UInt32, @rghAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE*, @dwFlags : UInt32, @dwUrlRetrievalTimeout : UInt32, @maximum_cached_certificates : UInt32, @cycle_detection_modulus : UInt32, @hExclusiveRoot : Win32cr::Security::Cryptography::HCERTSTORE, @hExclusiveTrustedPeople : Win32cr::Security::Cryptography::HCERTSTORE, @dwExclusiveFlags : UInt32)
    end
  end

  @[Extern]
  struct CERT_TRUST_STATUS
    property dwErrorStatus : UInt32
    property dwInfoStatus : UInt32
    def initialize(@dwErrorStatus : UInt32, @dwInfoStatus : UInt32)
    end
  end

  @[Extern]
  struct CERT_REVOCATION_INFO
    property cbSize : UInt32
    property dwRevocationResult : UInt32
    property pszRevocationOid : Win32cr::Foundation::PSTR
    property pvOidSpecificInfo : Void*
    property fHasFreshnessTime : Win32cr::Foundation::BOOL
    property dwFreshnessTime : UInt32
    property pCrlInfo : Win32cr::Security::Cryptography::CERT_REVOCATION_CRL_INFO*
    def initialize(@cbSize : UInt32, @dwRevocationResult : UInt32, @pszRevocationOid : Win32cr::Foundation::PSTR, @pvOidSpecificInfo : Void*, @fHasFreshnessTime : Win32cr::Foundation::BOOL, @dwFreshnessTime : UInt32, @pCrlInfo : Win32cr::Security::Cryptography::CERT_REVOCATION_CRL_INFO*)
    end
  end

  @[Extern]
  struct CERT_TRUST_LIST_INFO
    property cbSize : UInt32
    property pCtlEntry : Win32cr::Security::Cryptography::CTL_ENTRY*
    property pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*
    def initialize(@cbSize : UInt32, @pCtlEntry : Win32cr::Security::Cryptography::CTL_ENTRY*, @pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*)
    end
  end

  @[Extern]
  struct CERT_CHAIN_ELEMENT
    property cbSize : UInt32
    property pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*
    property trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS
    property pRevocationInfo : Win32cr::Security::Cryptography::CERT_REVOCATION_INFO*
    property pIssuanceUsage : Win32cr::Security::Cryptography::CTL_USAGE*
    property pApplicationUsage : Win32cr::Security::Cryptography::CTL_USAGE*
    property pwszExtendedErrorInfo : Win32cr::Foundation::PWSTR
    def initialize(@cbSize : UInt32, @pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, @trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS, @pRevocationInfo : Win32cr::Security::Cryptography::CERT_REVOCATION_INFO*, @pIssuanceUsage : Win32cr::Security::Cryptography::CTL_USAGE*, @pApplicationUsage : Win32cr::Security::Cryptography::CTL_USAGE*, @pwszExtendedErrorInfo : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_SIMPLE_CHAIN
    property cbSize : UInt32
    property trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS
    property cElement : UInt32
    property rgpElement : Win32cr::Security::Cryptography::CERT_CHAIN_ELEMENT**
    property pTrustListInfo : Win32cr::Security::Cryptography::CERT_TRUST_LIST_INFO*
    property fHasRevocationFreshnessTime : Win32cr::Foundation::BOOL
    property dwRevocationFreshnessTime : UInt32
    def initialize(@cbSize : UInt32, @trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS, @cElement : UInt32, @rgpElement : Win32cr::Security::Cryptography::CERT_CHAIN_ELEMENT**, @pTrustListInfo : Win32cr::Security::Cryptography::CERT_TRUST_LIST_INFO*, @fHasRevocationFreshnessTime : Win32cr::Foundation::BOOL, @dwRevocationFreshnessTime : UInt32)
    end
  end

  @[Extern]
  struct CERT_CHAIN_CONTEXT
    property cbSize : UInt32
    property trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS
    property cChain : UInt32
    property rgpChain : Win32cr::Security::Cryptography::CERT_SIMPLE_CHAIN**
    property cLowerQualityChainContext : UInt32
    property rgpLowerQualityChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT**
    property fHasRevocationFreshnessTime : Win32cr::Foundation::BOOL
    property dwRevocationFreshnessTime : UInt32
    property dwCreateFlags : UInt32
    property chain_id : LibC::GUID
    def initialize(@cbSize : UInt32, @trust_status : Win32cr::Security::Cryptography::CERT_TRUST_STATUS, @cChain : UInt32, @rgpChain : Win32cr::Security::Cryptography::CERT_SIMPLE_CHAIN**, @cLowerQualityChainContext : UInt32, @rgpLowerQualityChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT**, @fHasRevocationFreshnessTime : Win32cr::Foundation::BOOL, @dwRevocationFreshnessTime : UInt32, @dwCreateFlags : UInt32, @chain_id : LibC::GUID)
    end
  end

  @[Extern]
  struct CERT_USAGE_MATCH
    property dwType : UInt32
    property usage : Win32cr::Security::Cryptography::CTL_USAGE
    def initialize(@dwType : UInt32, @usage : Win32cr::Security::Cryptography::CTL_USAGE)
    end
  end

  @[Extern]
  struct CTL_USAGE_MATCH
    property dwType : UInt32
    property usage : Win32cr::Security::Cryptography::CTL_USAGE
    def initialize(@dwType : UInt32, @usage : Win32cr::Security::Cryptography::CTL_USAGE)
    end
  end

  @[Extern]
  struct CERT_CHAIN_PARA
    property cbSize : UInt32
    property requested_usage : Win32cr::Security::Cryptography::CERT_USAGE_MATCH
    def initialize(@cbSize : UInt32, @requested_usage : Win32cr::Security::Cryptography::CERT_USAGE_MATCH)
    end
  end

  @[Extern]
  struct CERT_REVOCATION_CHAIN_PARA
    property cbSize : UInt32
    property hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE
    property hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE
    property dwChainFlags : UInt32
    property dwUrlRetrievalTimeout : UInt32
    property pftCurrentTime : Win32cr::Foundation::FILETIME*
    property pftCacheResync : Win32cr::Foundation::FILETIME*
    property cbMaxUrlRetrievalByteCount : UInt32
    def initialize(@cbSize : UInt32, @hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE, @hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE, @dwChainFlags : UInt32, @dwUrlRetrievalTimeout : UInt32, @pftCurrentTime : Win32cr::Foundation::FILETIME*, @pftCacheResync : Win32cr::Foundation::FILETIME*, @cbMaxUrlRetrievalByteCount : UInt32)
    end
  end

  @[Extern]
  struct CRL_REVOCATION_INFO
    property pCrlEntry : Win32cr::Security::Cryptography::CRL_ENTRY*
    property pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*
    property pCrlIssuerChain : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*
    def initialize(@pCrlEntry : Win32cr::Security::Cryptography::CRL_ENTRY*, @pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, @pCrlIssuerChain : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*)
    end
  end

  @[Extern]
  struct CERT_CHAIN_FIND_BY_ISSUER_PARA
    property cbSize : UInt32
    property pszUsageIdentifier : Win32cr::Foundation::PSTR
    property dwKeySpec : UInt32
    property dwAcquirePrivateKeyFlags : UInt32
    property cIssuer : UInt32
    property rgIssuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    property pfnFindCallback : Win32cr::Security::Cryptography::PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
    property pvFindArg : Void*
    def initialize(@cbSize : UInt32, @pszUsageIdentifier : Win32cr::Foundation::PSTR, @dwKeySpec : UInt32, @dwAcquirePrivateKeyFlags : UInt32, @cIssuer : UInt32, @rgIssuer : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, @pfnFindCallback : Win32cr::Security::Cryptography::PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK, @pvFindArg : Void*)
    end
  end

  @[Extern]
  struct CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwFlags : Win32cr::Security::Cryptography::CERT_CHAIN_POLICY_FLAGS
    property pvExtraPolicyPara : Void*
    def initialize(@cbSize : UInt32, @dwFlags : Win32cr::Security::Cryptography::CERT_CHAIN_POLICY_FLAGS, @pvExtraPolicyPara : Void*)
    end
  end

  @[Extern]
  struct CERT_CHAIN_POLICY_STATUS
    property cbSize : UInt32
    property dwError : UInt32
    property lChainIndex : Int32
    property lElementIndex : Int32
    property pvExtraPolicyStatus : Void*
    def initialize(@cbSize : UInt32, @dwError : UInt32, @lChainIndex : Int32, @lElementIndex : Int32, @pvExtraPolicyStatus : Void*)
    end
  end

  @[Extern]
  struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwRegPolicySettings : UInt32
    property pSignerInfo : Win32cr::Security::Cryptography::CMSG_SIGNER_INFO*
    def initialize(@cbSize : UInt32, @dwRegPolicySettings : UInt32, @pSignerInfo : Win32cr::Security::Cryptography::CMSG_SIGNER_INFO*)
    end
  end

  @[Extern]
  struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
    property cbSize : UInt32
    property fCommercial : Win32cr::Foundation::BOOL
    def initialize(@cbSize : UInt32, @fCommercial : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwRegPolicySettings : UInt32
    property fCommercial : Win32cr::Foundation::BOOL
    def initialize(@cbSize : UInt32, @dwRegPolicySettings : UInt32, @fCommercial : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct HTTPSPolicyCallbackData
    property anonymous : Anonymous_e__Union_
    property dwAuthType : Win32cr::Security::Cryptography::HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE
    property fdwChecks : UInt32
    property pwszServerName : Win32cr::Foundation::PWSTR

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property cbStruct : UInt32
    property cbSize : UInt32
    def initialize(@cbStruct : UInt32, @cbSize : UInt32)
    end
    end

    def initialize(@anonymous : Anonymous_e__Union_, @dwAuthType : Win32cr::Security::Cryptography::HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE, @fdwChecks : UInt32, @pwszServerName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct EV_EXTRA_CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwRootProgramQualifierFlags : Win32cr::Security::Cryptography::CERT_ROOT_PROGRAM_FLAGS
    def initialize(@cbSize : UInt32, @dwRootProgramQualifierFlags : Win32cr::Security::Cryptography::CERT_ROOT_PROGRAM_FLAGS)
    end
  end

  @[Extern]
  struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS
    property cbSize : UInt32
    property dwQualifiers : UInt32
    property dwIssuanceUsageIndex : UInt32
    def initialize(@cbSize : UInt32, @dwQualifiers : UInt32, @dwIssuanceUsageIndex : UInt32)
    end
  end

  @[Extern]
  struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
    property cbSize : UInt32
    property dwErrorLevel : UInt32
    property dwErrorCategory : UInt32
    property dwReserved : UInt32
    property wszErrorText : UInt16[256]
    def initialize(@cbSize : UInt32, @dwErrorLevel : UInt32, @dwErrorCategory : UInt32, @dwReserved : UInt32, @wszErrorText : UInt16[256])
    end
  end

  @[Extern]
  struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwReserved : UInt32
    property pwszServerName : Win32cr::Foundation::PWSTR
    property rgpszHpkpValue : Win32cr::Foundation::PSTR[2]
    def initialize(@cbSize : UInt32, @dwReserved : UInt32, @pwszServerName : Win32cr::Foundation::PWSTR, @rgpszHpkpValue : Win32cr::Foundation::PSTR[2])
    end
  end

  @[Extern]
  struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
    property cbSize : UInt32
    property dwReserved : UInt32
    property pwszServerName : Win32cr::Foundation::PWSTR
    def initialize(@cbSize : UInt32, @dwReserved : UInt32, @pwszServerName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
    property cbSize : UInt32
    property lError : Int32
    property wszErrorText : UInt16[512]
    def initialize(@cbSize : UInt32, @lError : Int32, @wszErrorText : UInt16[512])
    end
  end

  @[Extern]
  struct CRYPT_PKCS12_PBE_PARAMS
    property iIterations : Int32
    property cbSalt : UInt32
    def initialize(@iIterations : Int32, @cbSalt : UInt32)
    end
  end

  @[Extern]
  struct PKCS12_PBES2_EXPORT_PARAMS
    property dwSize : UInt32
    property hNcryptDescriptor : Void*
    property pwszPbes2Alg : Win32cr::Foundation::PWSTR
    def initialize(@dwSize : UInt32, @hNcryptDescriptor : Void*, @pwszPbes2Alg : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CERT_SERVER_OCSP_RESPONSE_CONTEXT
    property cbSize : UInt32
    property pbEncodedOcspResponse : UInt8*
    property cbEncodedOcspResponse : UInt32
    def initialize(@cbSize : UInt32, @pbEncodedOcspResponse : UInt8*, @cbEncodedOcspResponse : UInt32)
    end
  end

  @[Extern]
  struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
    property cbSize : UInt32
    property dwFlags : UInt32
    property pcbUsedSize : UInt32*
    property pwszOcspDirectory : Win32cr::Foundation::PWSTR
    property pfnUpdateCallback : Win32cr::Security::Cryptography::PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
    property pvUpdateCallbackArg : Void*
    def initialize(@cbSize : UInt32, @dwFlags : UInt32, @pcbUsedSize : UInt32*, @pwszOcspDirectory : Win32cr::Foundation::PWSTR, @pfnUpdateCallback : Win32cr::Security::Cryptography::PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK, @pvUpdateCallbackArg : Void*)
    end
  end

  @[Extern]
  struct CERT_SELECT_CHAIN_PARA
    property hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE
    property pTime : Win32cr::Foundation::FILETIME*
    property hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE
    property pChainPara : Win32cr::Security::Cryptography::CERT_CHAIN_PARA*
    property dwFlags : UInt32
    def initialize(@hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE, @pTime : Win32cr::Foundation::FILETIME*, @hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE, @pChainPara : Win32cr::Security::Cryptography::CERT_CHAIN_PARA*, @dwFlags : UInt32)
    end
  end

  @[Extern]
  struct CERT_SELECT_CRITERIA
    property dwType : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA_TYPE
    property cPara : UInt32
    property ppPara : Void**
    def initialize(@dwType : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA_TYPE, @cPara : UInt32, @ppPara : Void**)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_REQUEST
    property dwVersion : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_VERSION
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hashed_message : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pszTSAPolicyId : Win32cr::Foundation::PSTR
    property nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property fCertReq : Win32cr::Foundation::BOOL
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_VERSION, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hashed_message : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pszTSAPolicyId : Win32cr::Foundation::PSTR, @nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @fCertReq : Win32cr::Foundation::BOOL, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_RESPONSE
    property dwStatus : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_RESPONSE_STATUS
    property cFreeText : UInt32
    property rgFreeText : Win32cr::Foundation::PWSTR*
    property failure_info : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB
    property content_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@dwStatus : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_RESPONSE_STATUS, @cFreeText : UInt32, @rgFreeText : Win32cr::Foundation::PWSTR*, @failure_info : Win32cr::Security::Cryptography::CRYPT_BIT_BLOB, @content_info : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_ACCURACY
    property dwSeconds : UInt32
    property dwMillis : UInt32
    property dwMicros : UInt32
    def initialize(@dwSeconds : UInt32, @dwMillis : UInt32, @dwMicros : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_INFO
    property dwVersion : UInt32
    property pszTSAPolicyId : Win32cr::Foundation::PSTR
    property hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER
    property hashed_message : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property ftTime : Win32cr::Foundation::FILETIME
    property pvAccuracy : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_ACCURACY*
    property fOrdering : Win32cr::Foundation::BOOL
    property nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property tsa : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@dwVersion : UInt32, @pszTSAPolicyId : Win32cr::Foundation::PSTR, @hash_algorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, @hashed_message : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @serial_number : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @ftTime : Win32cr::Foundation::FILETIME, @pvAccuracy : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_ACCURACY*, @fOrdering : Win32cr::Foundation::BOOL, @nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @tsa : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_CONTEXT
    property cbEncoded : UInt32
    property pbEncoded : UInt8*
    property pTimeStamp : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_INFO*
    def initialize(@cbEncoded : UInt32, @pbEncoded : UInt8*, @pTimeStamp : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_INFO*)
    end
  end

  @[Extern]
  struct CRYPT_TIMESTAMP_PARA
    property pszTSAPolicyId : Win32cr::Foundation::PSTR
    property fRequestCerts : Win32cr::Foundation::BOOL
    property nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cExtension : UInt32
    property rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*
    def initialize(@pszTSAPolicyId : Win32cr::Foundation::PSTR, @fRequestCerts : Win32cr::Foundation::BOOL, @nonce : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cExtension : UInt32, @rgExtension : Win32cr::Security::Cryptography::CERT_EXTENSION*)
    end
  end

  @[Extern]
  struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
    property cbSize : UInt32
    property pfnGet : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
    property pfnRelease : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
    property pfnFreePassword : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD
    property pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
    property pfnFreeIdentifier : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
    def initialize(@cbSize : UInt32, @pfnGet : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET, @pfnRelease : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE, @pfnFreePassword : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD, @pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE, @pfnFreeIdentifier : Win32cr::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)
    end
  end

  @[Extern]
  struct CRYPTPROTECT_PROMPTSTRUCT
    property cbSize : UInt32
    property dwPromptFlags : UInt32
    property hwndApp : Win32cr::Foundation::HWND
    property szPrompt : Win32cr::Foundation::PWSTR
    def initialize(@cbSize : UInt32, @dwPromptFlags : UInt32, @hwndApp : Win32cr::Foundation::HWND, @szPrompt : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct NCRYPT_PROTECT_STREAM_INFO
    property pfnStreamOutput : Win32cr::Security::Cryptography::PFNCryptStreamOutputCallback
    property pvCallbackCtxt : Void*
    def initialize(@pfnStreamOutput : Win32cr::Security::Cryptography::PFNCryptStreamOutputCallback, @pvCallbackCtxt : Void*)
    end
  end

  @[Extern]
  struct NCRYPT_PROTECT_STREAM_INFO_EX
    property pfnStreamOutput : Win32cr::Security::Cryptography::PFNCryptStreamOutputCallbackEx
    property pvCallbackCtxt : Void*
    def initialize(@pfnStreamOutput : Win32cr::Security::Cryptography::PFNCryptStreamOutputCallbackEx, @pvCallbackCtxt : Void*)
    end
  end

  @[Extern]
  struct CRYPT_XML_BLOB
    property dwCharset : Win32cr::Security::Cryptography::CRYPT_XML_CHARSET
    property cbData : UInt32
    property pbData : UInt8*
    def initialize(@dwCharset : Win32cr::Security::Cryptography::CRYPT_XML_CHARSET, @cbData : UInt32, @pbData : UInt8*)
    end
  end

  @[Extern]
  struct CRYPT_XML_DATA_BLOB
    property cbData : UInt32
    property pbData : UInt8*
    def initialize(@cbData : UInt32, @pbData : UInt8*)
    end
  end

  @[Extern]
  struct CRYPT_XML_PROPERTY
    property dwPropId : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY_ID
    property pvValue : Void*
    property cbValue : UInt32
    def initialize(@dwPropId : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY_ID, @pvValue : Void*, @cbValue : UInt32)
    end
  end

  @[Extern]
  struct CRYPT_XML_DATA_PROVIDER
    property pvCallbackState : Void*
    property cbBufferSize : UInt32
    property pfnRead : Win32cr::Security::Cryptography::PFN_CRYPT_XML_DATA_PROVIDER_READ
    property pfnClose : Win32cr::Security::Cryptography::PFN_CRYPT_XML_DATA_PROVIDER_CLOSE
    def initialize(@pvCallbackState : Void*, @cbBufferSize : UInt32, @pfnRead : Win32cr::Security::Cryptography::PFN_CRYPT_XML_DATA_PROVIDER_READ, @pfnClose : Win32cr::Security::Cryptography::PFN_CRYPT_XML_DATA_PROVIDER_CLOSE)
    end
  end

  @[Extern]
  struct CRYPT_XML_STATUS
    property cbSize : UInt32
    property dwErrorStatus : Win32cr::Security::Cryptography::CRYPT_XML_STATUS_ERROR_STATUS
    property dwInfoStatus : Win32cr::Security::Cryptography::CRYPT_XML_STATUS_INFO_STATUS
    def initialize(@cbSize : UInt32, @dwErrorStatus : Win32cr::Security::Cryptography::CRYPT_XML_STATUS_ERROR_STATUS, @dwInfoStatus : Win32cr::Security::Cryptography::CRYPT_XML_STATUS_INFO_STATUS)
    end
  end

  @[Extern]
  struct CRYPT_XML_ALGORITHM
    property cbSize : UInt32
    property wszAlgorithm : Win32cr::Foundation::PWSTR
    property encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@cbSize : UInt32, @wszAlgorithm : Win32cr::Foundation::PWSTR, @encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_TRANSFORM_INFO
    property cbSize : UInt32
    property wszAlgorithm : Win32cr::Foundation::PWSTR
    property cbBufferSize : UInt32
    property dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_FLAGS
    property pfnCreateTransform : Win32cr::Security::Cryptography::PFN_CRYPT_XML_CREATE_TRANSFORM
    def initialize(@cbSize : UInt32, @wszAlgorithm : Win32cr::Foundation::PWSTR, @cbBufferSize : UInt32, @dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_FLAGS, @pfnCreateTransform : Win32cr::Security::Cryptography::PFN_CRYPT_XML_CREATE_TRANSFORM)
    end
  end

  @[Extern]
  struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG
    property cbSize : UInt32
    property cTransformInfo : UInt32
    property rgpTransformInfo : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_INFO**
    def initialize(@cbSize : UInt32, @cTransformInfo : UInt32, @rgpTransformInfo : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_INFO**)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_DSA_KEY_VALUE
    property p : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property q : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property g : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property y : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property j : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property seed : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property counter : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    def initialize(@p : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @q : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @g : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @y : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @j : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @seed : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @counter : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_ECDSA_KEY_VALUE
    property wszNamedCurve : Win32cr::Foundation::PWSTR
    property x : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property y : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property explicit_para : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@wszNamedCurve : Win32cr::Foundation::PWSTR, @x : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @y : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @explicit_para : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_RSA_KEY_VALUE
    property modulus : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property exponent : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    def initialize(@modulus : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @exponent : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_VALUE
    property dwType : Win32cr::Security::Cryptography::CRYPT_XML_KEY_VALUE_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_DSA_KEY_VALUE
    property rsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_RSA_KEY_VALUE
    property ecdsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_ECDSA_KEY_VALUE
    property custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@dsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_DSA_KEY_VALUE, @rsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_RSA_KEY_VALUE, @ecdsa_key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_ECDSA_KEY_VALUE, @custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
    end

    def initialize(@dwType : Win32cr::Security::Cryptography::CRYPT_XML_KEY_VALUE_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CRYPT_XML_ISSUER_SERIAL
    property wszIssuer : Win32cr::Foundation::PWSTR
    property wszSerial : Win32cr::Foundation::PWSTR
    def initialize(@wszIssuer : Win32cr::Foundation::PWSTR, @wszSerial : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct CRYPT_XML_X509DATA_ITEM
    property dwType : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property issuer_serial : Win32cr::Security::Cryptography::CRYPT_XML_ISSUER_SERIAL
    property ski : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property wszSubjectName : Win32cr::Foundation::PWSTR
    property certificate : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property crl : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB
    property custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@issuer_serial : Win32cr::Security::Cryptography::CRYPT_XML_ISSUER_SERIAL, @ski : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @wszSubjectName : Win32cr::Foundation::PWSTR, @certificate : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @crl : Win32cr::Security::Cryptography::CRYPT_XML_DATA_BLOB, @custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
    end

    def initialize(@dwType : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CRYPT_XML_X509DATA
    property cX509Data : UInt32
    property rgX509Data : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA_ITEM*
    def initialize(@cX509Data : UInt32, @rgX509Data : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA_ITEM*)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_INFO_ITEM
    property dwType : Win32cr::Security::Cryptography::CRYPT_XML_KEYINFO_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property wszKeyName : Win32cr::Foundation::PWSTR
    property key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_VALUE
    property retrieval_method : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    property x509_data : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA
    property custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@wszKeyName : Win32cr::Foundation::PWSTR, @key_value : Win32cr::Security::Cryptography::CRYPT_XML_KEY_VALUE, @retrieval_method : Win32cr::Security::Cryptography::CRYPT_XML_BLOB, @x509_data : Win32cr::Security::Cryptography::CRYPT_XML_X509DATA, @custom : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
    end

    def initialize(@dwType : Win32cr::Security::Cryptography::CRYPT_XML_KEYINFO_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEY_INFO
    property cbSize : UInt32
    property wszId : Win32cr::Foundation::PWSTR
    property cKeyInfo : UInt32
    property rgKeyInfo : Win32cr::Security::Cryptography::CRYPT_XML_KEY_INFO_ITEM*
    property hVerifyKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE
    def initialize(@cbSize : UInt32, @wszId : Win32cr::Foundation::PWSTR, @cKeyInfo : UInt32, @rgKeyInfo : Win32cr::Security::Cryptography::CRYPT_XML_KEY_INFO_ITEM*, @hVerifyKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE)
    end
  end

  @[Extern]
  struct CRYPT_XML_REFERENCE
    property cbSize : UInt32
    property hReference : Void*
    property wszId : Win32cr::Foundation::PWSTR
    property wszUri : Win32cr::Foundation::PWSTR
    property wszType : Win32cr::Foundation::PWSTR
    property digest_method : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM
    property digest_value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property cTransform : UInt32
    property rgTransform : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*
    def initialize(@cbSize : UInt32, @hReference : Void*, @wszId : Win32cr::Foundation::PWSTR, @wszUri : Win32cr::Foundation::PWSTR, @wszType : Win32cr::Foundation::PWSTR, @digest_method : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM, @digest_value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @cTransform : UInt32, @rgTransform : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*)
    end
  end

  @[Extern]
  struct CRYPT_XML_REFERENCES
    property cReference : UInt32
    property rgpReference : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCE**
    def initialize(@cReference : UInt32, @rgpReference : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCE**)
    end
  end

  @[Extern]
  struct CRYPT_XML_SIGNED_INFO
    property cbSize : UInt32
    property wszId : Win32cr::Foundation::PWSTR
    property canonicalization : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM
    property signature_method : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM
    property cReference : UInt32
    property rgpReference : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCE**
    property encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@cbSize : UInt32, @wszId : Win32cr::Foundation::PWSTR, @canonicalization : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM, @signature_method : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM, @cReference : UInt32, @rgpReference : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCE**, @encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_OBJECT
    property cbSize : UInt32
    property hObject : Void*
    property wszId : Win32cr::Foundation::PWSTR
    property wszMimeType : Win32cr::Foundation::PWSTR
    property wszEncoding : Win32cr::Foundation::PWSTR
    property manifest : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCES
    property encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB
    def initialize(@cbSize : UInt32, @hObject : Void*, @wszId : Win32cr::Foundation::PWSTR, @wszMimeType : Win32cr::Foundation::PWSTR, @wszEncoding : Win32cr::Foundation::PWSTR, @manifest : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCES, @encoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB)
    end
  end

  @[Extern]
  struct CRYPT_XML_SIGNATURE
    property cbSize : UInt32
    property hSignature : Void*
    property wszId : Win32cr::Foundation::PWSTR
    property signed_info : Win32cr::Security::Cryptography::CRYPT_XML_SIGNED_INFO
    property signature_value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property pKeyInfo : Win32cr::Security::Cryptography::CRYPT_XML_KEY_INFO*
    property cObject : UInt32
    property rgpObject : Win32cr::Security::Cryptography::CRYPT_XML_OBJECT**
    def initialize(@cbSize : UInt32, @hSignature : Void*, @wszId : Win32cr::Foundation::PWSTR, @signed_info : Win32cr::Security::Cryptography::CRYPT_XML_SIGNED_INFO, @signature_value : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @pKeyInfo : Win32cr::Security::Cryptography::CRYPT_XML_KEY_INFO*, @cObject : UInt32, @rgpObject : Win32cr::Security::Cryptography::CRYPT_XML_OBJECT**)
    end
  end

  @[Extern]
  struct CRYPT_XML_DOC_CTXT
    property cbSize : UInt32
    property hDocCtxt : Void*
    property pTransformsConfig : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG*
    property cSignature : UInt32
    property rgpSignature : Win32cr::Security::Cryptography::CRYPT_XML_SIGNATURE**
    def initialize(@cbSize : UInt32, @hDocCtxt : Void*, @pTransformsConfig : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG*, @cSignature : UInt32, @rgpSignature : Win32cr::Security::Cryptography::CRYPT_XML_SIGNATURE**)
    end
  end

  @[Extern]
  struct CRYPT_XML_KEYINFO_PARAM
    property wszId : Win32cr::Foundation::PWSTR
    property wszKeyName : Win32cr::Foundation::PWSTR
    property ski : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    property wszSubjectName : Win32cr::Foundation::PWSTR
    property cCertificate : UInt32
    property rgCertificate : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    property cCRL : UInt32
    property rgCRL : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@wszId : Win32cr::Foundation::PWSTR, @wszKeyName : Win32cr::Foundation::PWSTR, @ski : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB, @wszSubjectName : Win32cr::Foundation::PWSTR, @cCertificate : UInt32, @rgCertificate : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, @cCRL : UInt32, @rgCRL : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CRYPT_XML_ALGORITHM_INFO
    property cbSize : UInt32
    property wszAlgorithmURI : Win32cr::Foundation::PWSTR
    property wszName : Win32cr::Foundation::PWSTR
    property dwGroupId : Win32cr::Security::Cryptography::CRYPT_XML_GROUP_ID
    property wszCNGAlgid : Win32cr::Foundation::PWSTR
    property wszCNGExtraAlgid : Win32cr::Foundation::PWSTR
    property dwSignFlags : UInt32
    property dwVerifyFlags : UInt32
    property pvPaddingInfo : Void*
    property pvExtraInfo : Void*
    def initialize(@cbSize : UInt32, @wszAlgorithmURI : Win32cr::Foundation::PWSTR, @wszName : Win32cr::Foundation::PWSTR, @dwGroupId : Win32cr::Security::Cryptography::CRYPT_XML_GROUP_ID, @wszCNGAlgid : Win32cr::Foundation::PWSTR, @wszCNGExtraAlgid : Win32cr::Foundation::PWSTR, @dwSignFlags : UInt32, @dwVerifyFlags : UInt32, @pvPaddingInfo : Void*, @pvExtraInfo : Void*)
    end
  end

  @[Extern]
  struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
    property cbSize : UInt32
    property fpCryptXmlEncodeAlgorithm : Win32cr::Security::Cryptography::CryptXmlDllEncodeAlgorithm
    property fpCryptXmlCreateDigest : Win32cr::Security::Cryptography::CryptXmlDllCreateDigest
    property fpCryptXmlDigestData : Win32cr::Security::Cryptography::CryptXmlDllDigestData
    property fpCryptXmlFinalizeDigest : Win32cr::Security::Cryptography::CryptXmlDllFinalizeDigest
    property fpCryptXmlCloseDigest : Win32cr::Security::Cryptography::CryptXmlDllCloseDigest
    property fpCryptXmlSignData : Win32cr::Security::Cryptography::CryptXmlDllSignData
    property fpCryptXmlVerifySignature : Win32cr::Security::Cryptography::CryptXmlDllVerifySignature
    property fpCryptXmlGetAlgorithmInfo : Win32cr::Security::Cryptography::CryptXmlDllGetAlgorithmInfo
    def initialize(@cbSize : UInt32, @fpCryptXmlEncodeAlgorithm : Win32cr::Security::Cryptography::CryptXmlDllEncodeAlgorithm, @fpCryptXmlCreateDigest : Win32cr::Security::Cryptography::CryptXmlDllCreateDigest, @fpCryptXmlDigestData : Win32cr::Security::Cryptography::CryptXmlDllDigestData, @fpCryptXmlFinalizeDigest : Win32cr::Security::Cryptography::CryptXmlDllFinalizeDigest, @fpCryptXmlCloseDigest : Win32cr::Security::Cryptography::CryptXmlDllCloseDigest, @fpCryptXmlSignData : Win32cr::Security::Cryptography::CryptXmlDllSignData, @fpCryptXmlVerifySignature : Win32cr::Security::Cryptography::CryptXmlDllVerifySignature, @fpCryptXmlGetAlgorithmInfo : Win32cr::Security::Cryptography::CryptXmlDllGetAlgorithmInfo)
    end
  end

  @[Extern]
  struct INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS
    property keySize : Int32
    property keyExchangeAlgorithm : Win32cr::Foundation::PWSTR
    property signatureAlgorithm : Win32cr::Foundation::PWSTR
    def initialize(@keySize : Int32, @keyExchangeAlgorithm : Win32cr::Foundation::PWSTR, @signatureAlgorithm : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS
    property keySize : Int32
    property blockSize : Int32
    property feedbackSize : Int32
    def initialize(@keySize : Int32, @blockSize : Int32, @feedbackSize : Int32)
    end
  end

  @[Extern]
  struct INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
    property inputBlockSize : Int32
    property outputBlockSize : Int32
    property canTransformMultipleBlocks : Win32cr::Foundation::BOOL
    property canReuseTransform : Win32cr::Foundation::BOOL
    def initialize(@inputBlockSize : Int32, @outputBlockSize : Int32, @canTransformMultipleBlocks : Win32cr::Foundation::BOOL, @canReuseTransform : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct INFORMATIONCARD_HASH_CRYPTO_PARAMETERS
    property hashSize : Int32
    property transform : Win32cr::Security::Cryptography::INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
    def initialize(@hashSize : Int32, @transform : Win32cr::Security::Cryptography::INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS)
    end
  end

  @[Extern]
  struct INFORMATIONCARD_CRYPTO_HANDLE
    property type__ : Win32cr::Security::Cryptography::HandleType
    property expiration : Int64
    property cryptoParameters : Void*
    def initialize(@type__ : Win32cr::Security::Cryptography::HandleType, @expiration : Int64, @cryptoParameters : Void*)
    end
  end

  @[Extern]
  struct GENERIC_XML_TOKEN
    property createDate : Win32cr::Foundation::FILETIME
    property expiryDate : Win32cr::Foundation::FILETIME
    property xmlToken : Win32cr::Foundation::PWSTR
    property internalTokenReference : Win32cr::Foundation::PWSTR
    property externalTokenReference : Win32cr::Foundation::PWSTR
    def initialize(@createDate : Win32cr::Foundation::FILETIME, @expiryDate : Win32cr::Foundation::FILETIME, @xmlToken : Win32cr::Foundation::PWSTR, @internalTokenReference : Win32cr::Foundation::PWSTR, @externalTokenReference : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct POLICY_ELEMENT
    property targetEndpointAddress : Win32cr::Foundation::PWSTR
    property issuerEndpointAddress : Win32cr::Foundation::PWSTR
    property issuedTokenParameters : Win32cr::Foundation::PWSTR
    property privacyNoticeLink : Win32cr::Foundation::PWSTR
    property privacyNoticeVersion : UInt32
    property useManagedPresentation : Win32cr::Foundation::BOOL
    def initialize(@targetEndpointAddress : Win32cr::Foundation::PWSTR, @issuerEndpointAddress : Win32cr::Foundation::PWSTR, @issuedTokenParameters : Win32cr::Foundation::PWSTR, @privacyNoticeLink : Win32cr::Foundation::PWSTR, @privacyNoticeVersion : UInt32, @useManagedPresentation : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct ENDPOINTADDRESS
    property serviceUrl : Win32cr::Foundation::PWSTR
    property policyUrl : Win32cr::Foundation::PWSTR
    property rawCertificate : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB
    def initialize(@serviceUrl : Win32cr::Foundation::PWSTR, @policyUrl : Win32cr::Foundation::PWSTR, @rawCertificate : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB)
    end
  end

  @[Extern]
  struct ENDPOINTADDRESS2
    property serviceUrl : Win32cr::Foundation::PWSTR
    property policyUrl : Win32cr::Foundation::PWSTR
    property identityType : UInt32
    property identityBytes : Void*
    def initialize(@serviceUrl : Win32cr::Foundation::PWSTR, @policyUrl : Win32cr::Foundation::PWSTR, @identityType : UInt32, @identityBytes : Void*)
    end
  end

  @[Extern]
  struct CERTIFICATE_CHAIN_BLOB
    property certCount : UInt32
    property rawCertificates : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*
    def initialize(@certCount : UInt32, @rawCertificates : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*)
    end
  end

  @[Extern]
  struct CLAIMLIST
    property count : UInt32
    property claims : Win32cr::Foundation::PWSTR*
    def initialize(@count : UInt32, @claims : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct RECIPIENTPOLICY
    property recipient : Win32cr::Security::Cryptography::ENDPOINTADDRESS
    property issuer : Win32cr::Security::Cryptography::ENDPOINTADDRESS
    property tokenType : Win32cr::Foundation::PWSTR
    property requiredClaims : Win32cr::Security::Cryptography::CLAIMLIST
    property optionalClaims : Win32cr::Security::Cryptography::CLAIMLIST
    property privacyUrl : Win32cr::Foundation::PWSTR
    property privacyVersion : UInt32
    def initialize(@recipient : Win32cr::Security::Cryptography::ENDPOINTADDRESS, @issuer : Win32cr::Security::Cryptography::ENDPOINTADDRESS, @tokenType : Win32cr::Foundation::PWSTR, @requiredClaims : Win32cr::Security::Cryptography::CLAIMLIST, @optionalClaims : Win32cr::Security::Cryptography::CLAIMLIST, @privacyUrl : Win32cr::Foundation::PWSTR, @privacyVersion : UInt32)
    end
  end

  @[Extern]
  struct RECIPIENTPOLICY2
    property recipient : Win32cr::Security::Cryptography::ENDPOINTADDRESS2
    property issuer : Win32cr::Security::Cryptography::ENDPOINTADDRESS2
    property tokenType : Win32cr::Foundation::PWSTR
    property requiredClaims : Win32cr::Security::Cryptography::CLAIMLIST
    property optionalClaims : Win32cr::Security::Cryptography::CLAIMLIST
    property privacyUrl : Win32cr::Foundation::PWSTR
    property privacyVersion : UInt32
    def initialize(@recipient : Win32cr::Security::Cryptography::ENDPOINTADDRESS2, @issuer : Win32cr::Security::Cryptography::ENDPOINTADDRESS2, @tokenType : Win32cr::Foundation::PWSTR, @requiredClaims : Win32cr::Security::Cryptography::CLAIMLIST, @optionalClaims : Win32cr::Security::Cryptography::CLAIMLIST, @privacyUrl : Win32cr::Foundation::PWSTR, @privacyVersion : UInt32)
    end
  end

  @[Extern]
  record ICertSrvSetupKeyInformationVtbl,
    query_interface : Proc(ICertSrvSetupKeyInformation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertSrvSetupKeyInformation*, UInt32),
    release : Proc(ICertSrvSetupKeyInformation*, UInt32),
    get_type_info_count : Proc(ICertSrvSetupKeyInformation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertSrvSetupKeyInformation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertSrvSetupKeyInformation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertSrvSetupKeyInformation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ProviderName : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ProviderName : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Length : Proc(ICertSrvSetupKeyInformation*, Int32*, Win32cr::Foundation::HRESULT),
    put_Length : Proc(ICertSrvSetupKeyInformation*, Int32, Win32cr::Foundation::HRESULT),
    get_Existing : Proc(ICertSrvSetupKeyInformation*, Int16*, Win32cr::Foundation::HRESULT),
    put_Existing : Proc(ICertSrvSetupKeyInformation*, Int16, Win32cr::Foundation::HRESULT),
    get_ContainerName : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ContainerName : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HashAlgorithm : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HashAlgorithm : Proc(ICertSrvSetupKeyInformation*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ExistingCACertificate : Proc(ICertSrvSetupKeyInformation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_ExistingCACertificate : Proc(ICertSrvSetupKeyInformation*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertSrvSetupKeyInformation, lpVtbl : ICertSrvSetupKeyInformationVtbl* do
    GUID = LibC::GUID.new(0x6ba73778_u32, 0x36da_u16, 0x4c39_u16, StaticArray[0x8a_u8, 0x85_u8, 0xbc_u8, 0xfa_u8, 0x7d_u8, 0x0_u8, 0x7_u8, 0x93_u8])
    def query_interface(this : ICertSrvSetupKeyInformation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertSrvSetupKeyInformation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertSrvSetupKeyInformation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertSrvSetupKeyInformation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertSrvSetupKeyInformation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertSrvSetupKeyInformation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertSrvSetupKeyInformation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ProviderName(this : ICertSrvSetupKeyInformation*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProviderName.call(this, pVal)
    end
    def put_ProviderName(this : ICertSrvSetupKeyInformation*, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProviderName.call(this, bstrVal)
    end
    def get_Length(this : ICertSrvSetupKeyInformation*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, pVal)
    end
    def put_Length(this : ICertSrvSetupKeyInformation*, lVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Length.call(this, lVal)
    end
    def get_Existing(this : ICertSrvSetupKeyInformation*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Existing.call(this, pVal)
    end
    def put_Existing(this : ICertSrvSetupKeyInformation*, bVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Existing.call(this, bVal)
    end
    def get_ContainerName(this : ICertSrvSetupKeyInformation*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContainerName.call(this, pVal)
    end
    def put_ContainerName(this : ICertSrvSetupKeyInformation*, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ContainerName.call(this, bstrVal)
    end
    def get_HashAlgorithm(this : ICertSrvSetupKeyInformation*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HashAlgorithm.call(this, pVal)
    end
    def put_HashAlgorithm(this : ICertSrvSetupKeyInformation*, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HashAlgorithm.call(this, bstrVal)
    end
    def get_ExistingCACertificate(this : ICertSrvSetupKeyInformation*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExistingCACertificate.call(this, pVal)
    end
    def put_ExistingCACertificate(this : ICertSrvSetupKeyInformation*, varVal : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ExistingCACertificate.call(this, varVal)
    end

  end

  @[Extern]
  record ICertSrvSetupKeyInformationCollectionVtbl,
    query_interface : Proc(ICertSrvSetupKeyInformationCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertSrvSetupKeyInformationCollection*, UInt32),
    release : Proc(ICertSrvSetupKeyInformationCollection*, UInt32),
    get_type_info_count : Proc(ICertSrvSetupKeyInformationCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertSrvSetupKeyInformationCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertSrvSetupKeyInformationCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertSrvSetupKeyInformationCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ICertSrvSetupKeyInformationCollection*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(ICertSrvSetupKeyInformationCollection*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ICertSrvSetupKeyInformationCollection*, Int32*, Win32cr::Foundation::HRESULT),
    add : Proc(ICertSrvSetupKeyInformationCollection*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertSrvSetupKeyInformationCollection, lpVtbl : ICertSrvSetupKeyInformationCollectionVtbl* do
    GUID = LibC::GUID.new(0xe65c8b00_u32, 0xe58f_u16, 0x41f9_u16, StaticArray[0xa9_u8, 0xec_u8, 0xa2_u8, 0x8d_u8, 0x74_u8, 0x27_u8, 0xc8_u8, 0x44_u8])
    def query_interface(this : ICertSrvSetupKeyInformationCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertSrvSetupKeyInformationCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertSrvSetupKeyInformationCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertSrvSetupKeyInformationCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertSrvSetupKeyInformationCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertSrvSetupKeyInformationCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertSrvSetupKeyInformationCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : ICertSrvSetupKeyInformationCollection*, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppVal)
    end
    def get_Item(this : ICertSrvSetupKeyInformationCollection*, index : Int32, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, pVal)
    end
    def get_Count(this : ICertSrvSetupKeyInformationCollection*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, pVal)
    end
    def add(this : ICertSrvSetupKeyInformationCollection*, pIKeyInformation : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pIKeyInformation)
    end

  end

  @[Extern]
  record ICertSrvSetupVtbl,
    query_interface : Proc(ICertSrvSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertSrvSetup*, UInt32),
    release : Proc(ICertSrvSetup*, UInt32),
    get_type_info_count : Proc(ICertSrvSetup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertSrvSetup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertSrvSetup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertSrvSetup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CAErrorId : Proc(ICertSrvSetup*, Int32*, Win32cr::Foundation::HRESULT),
    get_CAErrorString : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_defaults : Proc(ICertSrvSetup*, Int16, Int16, Win32cr::Foundation::HRESULT),
    get_ca_setup_property : Proc(ICertSrvSetup*, Win32cr::Security::Cryptography::CASetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_ca_setup_property : Proc(ICertSrvSetup*, Win32cr::Security::Cryptography::CASetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    is_property_editable : Proc(ICertSrvSetup*, Win32cr::Security::Cryptography::CASetupProperty, Int16*, Win32cr::Foundation::HRESULT),
    get_supported_ca_types : Proc(ICertSrvSetup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_provider_name_list : Proc(ICertSrvSetup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_key_length_list : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_hash_algorithm_list : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_private_key_container_list : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_existing_ca_certificates : Proc(ICertSrvSetup*, Void**, Win32cr::Foundation::HRESULT),
    ca_import_pfx : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16, Void**, Win32cr::Foundation::HRESULT),
    set_ca_distinguished_name : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Int16, Int16, Int16, Win32cr::Foundation::HRESULT),
    set_database_information : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    set_parent_ca_information : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_web_ca_information : Proc(ICertSrvSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    install : Proc(ICertSrvSetup*, Win32cr::Foundation::HRESULT),
    pre_un_install : Proc(ICertSrvSetup*, Int16, Win32cr::Foundation::HRESULT),
    post_un_install : Proc(ICertSrvSetup*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertSrvSetup, lpVtbl : ICertSrvSetupVtbl* do
    GUID = LibC::GUID.new(0xb760a1bb_u32, 0x4784_u16, 0x44c0_u16, StaticArray[0x8f_u8, 0x12_u8, 0x55_u8, 0x5f_u8, 0x7_u8, 0x80_u8, 0xff_u8, 0x25_u8])
    def query_interface(this : ICertSrvSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertSrvSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertSrvSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertSrvSetup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertSrvSetup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertSrvSetup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertSrvSetup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CAErrorId(this : ICertSrvSetup*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAErrorId.call(this, pVal)
    end
    def get_CAErrorString(this : ICertSrvSetup*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CAErrorString.call(this, pVal)
    end
    def initialize_defaults(this : ICertSrvSetup*, bServer : Int16, bClient : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_defaults.call(this, bServer, bClient)
    end
    def get_ca_setup_property(this : ICertSrvSetup*, propertyId : Win32cr::Security::Cryptography::CASetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_setup_property.call(this, propertyId, pPropertyValue)
    end
    def set_ca_setup_property(this : ICertSrvSetup*, propertyId : Win32cr::Security::Cryptography::CASetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ca_setup_property.call(this, propertyId, pPropertyValue)
    end
    def is_property_editable(this : ICertSrvSetup*, propertyId : Win32cr::Security::Cryptography::CASetupProperty, pbEditable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_property_editable.call(this, propertyId, pbEditable)
    end
    def get_supported_ca_types(this : ICertSrvSetup*, pCATypes : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_ca_types.call(this, pCATypes)
    end
    def get_provider_name_list(this : ICertSrvSetup*, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider_name_list.call(this, pVal)
    end
    def get_key_length_list(this : ICertSrvSetup*, bstrProviderName : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_length_list.call(this, bstrProviderName, pVal)
    end
    def get_hash_algorithm_list(this : ICertSrvSetup*, bstrProviderName : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hash_algorithm_list.call(this, bstrProviderName, pVal)
    end
    def get_private_key_container_list(this : ICertSrvSetup*, bstrProviderName : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_key_container_list.call(this, bstrProviderName, pVal)
    end
    def get_existing_ca_certificates(this : ICertSrvSetup*, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_existing_ca_certificates.call(this, ppVal)
    end
    def ca_import_pfx(this : ICertSrvSetup*, bstrFileName : Win32cr::Foundation::BSTR, bstrPasswd : Win32cr::Foundation::BSTR, bOverwriteExistingKey : Int16, ppVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ca_import_pfx.call(this, bstrFileName, bstrPasswd, bOverwriteExistingKey, ppVal)
    end
    def set_ca_distinguished_name(this : ICertSrvSetup*, bstrCADN : Win32cr::Foundation::BSTR, bIgnoreUnicode : Int16, bOverwriteExistingKey : Int16, bOverwriteExistingCAInDS : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ca_distinguished_name.call(this, bstrCADN, bIgnoreUnicode, bOverwriteExistingKey, bOverwriteExistingCAInDS)
    end
    def set_database_information(this : ICertSrvSetup*, bstrDBDirectory : Win32cr::Foundation::BSTR, bstrLogDirectory : Win32cr::Foundation::BSTR, bstrSharedFolder : Win32cr::Foundation::BSTR, bForceOverwrite : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_database_information.call(this, bstrDBDirectory, bstrLogDirectory, bstrSharedFolder, bForceOverwrite)
    end
    def set_parent_ca_information(this : ICertSrvSetup*, bstrCAConfiguration : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parent_ca_information.call(this, bstrCAConfiguration)
    end
    def set_web_ca_information(this : ICertSrvSetup*, bstrCAConfiguration : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_web_ca_information.call(this, bstrCAConfiguration)
    end
    def install(this : ICertSrvSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install.call(this)
    end
    def pre_un_install(this : ICertSrvSetup*, bClientOnly : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_un_install.call(this, bClientOnly)
    end
    def post_un_install(this : ICertSrvSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_un_install.call(this)
    end

  end

  @[Extern]
  record IMSCEPSetupVtbl,
    query_interface : Proc(IMSCEPSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSCEPSetup*, UInt32),
    release : Proc(IMSCEPSetup*, UInt32),
    get_type_info_count : Proc(IMSCEPSetup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSCEPSetup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSCEPSetup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSCEPSetup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_MSCEPErrorId : Proc(IMSCEPSetup*, Int32*, Win32cr::Foundation::HRESULT),
    get_MSCEPErrorString : Proc(IMSCEPSetup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_defaults : Proc(IMSCEPSetup*, Win32cr::Foundation::HRESULT),
    get_mscep_setup_property : Proc(IMSCEPSetup*, Win32cr::Security::Cryptography::MSCEPSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_mscep_setup_property : Proc(IMSCEPSetup*, Win32cr::Security::Cryptography::MSCEPSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_account_information : Proc(IMSCEPSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    is_mscep_store_empty : Proc(IMSCEPSetup*, Int16*, Win32cr::Foundation::HRESULT),
    get_provider_name_list : Proc(IMSCEPSetup*, Int16, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_key_length_list : Proc(IMSCEPSetup*, Int16, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    install : Proc(IMSCEPSetup*, Win32cr::Foundation::HRESULT),
    pre_un_install : Proc(IMSCEPSetup*, Win32cr::Foundation::HRESULT),
    post_un_install : Proc(IMSCEPSetup*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMSCEPSetup, lpVtbl : IMSCEPSetupVtbl* do
    GUID = LibC::GUID.new(0x4f7761bb_u32, 0x9f3b_u16, 0x4592_u16, StaticArray[0x9e_u8, 0xe0_u8, 0x9a_u8, 0x73_u8, 0x25_u8, 0x9c_u8, 0x31_u8, 0x3e_u8])
    def query_interface(this : IMSCEPSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSCEPSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSCEPSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSCEPSetup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSCEPSetup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSCEPSetup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSCEPSetup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_MSCEPErrorId(this : IMSCEPSetup*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MSCEPErrorId.call(this, pVal)
    end
    def get_MSCEPErrorString(this : IMSCEPSetup*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MSCEPErrorString.call(this, pVal)
    end
    def initialize_defaults(this : IMSCEPSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_defaults.call(this)
    end
    def get_mscep_setup_property(this : IMSCEPSetup*, propertyId : Win32cr::Security::Cryptography::MSCEPSetupProperty, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mscep_setup_property.call(this, propertyId, pVal)
    end
    def set_mscep_setup_property(this : IMSCEPSetup*, propertyId : Win32cr::Security::Cryptography::MSCEPSetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mscep_setup_property.call(this, propertyId, pPropertyValue)
    end
    def set_account_information(this : IMSCEPSetup*, bstrUserName : Win32cr::Foundation::BSTR, bstrPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_account_information.call(this, bstrUserName, bstrPassword)
    end
    def is_mscep_store_empty(this : IMSCEPSetup*, pbEmpty : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_mscep_store_empty.call(this, pbEmpty)
    end
    def get_provider_name_list(this : IMSCEPSetup*, bExchange : Int16, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider_name_list.call(this, bExchange, pVal)
    end
    def get_key_length_list(this : IMSCEPSetup*, bExchange : Int16, bstrProviderName : Win32cr::Foundation::BSTR, pVal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_length_list.call(this, bExchange, bstrProviderName, pVal)
    end
    def install(this : IMSCEPSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install.call(this)
    end
    def pre_un_install(this : IMSCEPSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_un_install.call(this)
    end
    def post_un_install(this : IMSCEPSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_un_install.call(this)
    end

  end

  @[Extern]
  record ICertificateEnrollmentServerSetupVtbl,
    query_interface : Proc(ICertificateEnrollmentServerSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificateEnrollmentServerSetup*, UInt32),
    release : Proc(ICertificateEnrollmentServerSetup*, UInt32),
    get_type_info_count : Proc(ICertificateEnrollmentServerSetup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificateEnrollmentServerSetup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificateEnrollmentServerSetup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificateEnrollmentServerSetup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ErrorString : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_install_defaults : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Foundation::HRESULT),
    get_property : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Security::Cryptography::CESSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Security::Cryptography::CESSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_application_pool_credentials : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    install : Proc(ICertificateEnrollmentServerSetup*, Win32cr::Foundation::HRESULT),
    un_install : Proc(ICertificateEnrollmentServerSetup*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificateEnrollmentServerSetup, lpVtbl : ICertificateEnrollmentServerSetupVtbl* do
    GUID = LibC::GUID.new(0x70027fdb_u32, 0x9dd9_u16, 0x4921_u16, StaticArray[0x89_u8, 0x44_u8, 0xb3_u8, 0x5c_u8, 0xb3_u8, 0x1b_u8, 0xd2_u8, 0xec_u8])
    def query_interface(this : ICertificateEnrollmentServerSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificateEnrollmentServerSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificateEnrollmentServerSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificateEnrollmentServerSetup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificateEnrollmentServerSetup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificateEnrollmentServerSetup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificateEnrollmentServerSetup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ErrorString(this : ICertificateEnrollmentServerSetup*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorString.call(this, pVal)
    end
    def initialize_install_defaults(this : ICertificateEnrollmentServerSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_install_defaults.call(this)
    end
    def get_property(this : ICertificateEnrollmentServerSetup*, propertyId : Win32cr::Security::Cryptography::CESSetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, propertyId, pPropertyValue)
    end
    def set_property(this : ICertificateEnrollmentServerSetup*, propertyId : Win32cr::Security::Cryptography::CESSetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, propertyId, pPropertyValue)
    end
    def set_application_pool_credentials(this : ICertificateEnrollmentServerSetup*, bstrUsername : Win32cr::Foundation::BSTR, bstrPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_application_pool_credentials.call(this, bstrUsername, bstrPassword)
    end
    def install(this : ICertificateEnrollmentServerSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install.call(this)
    end
    def un_install(this : ICertificateEnrollmentServerSetup*, pCAConfig : Win32cr::System::Com::VARIANT*, pAuthentication : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_install.call(this, pCAConfig, pAuthentication)
    end

  end

  @[Extern]
  record ICertificateEnrollmentPolicyServerSetupVtbl,
    query_interface : Proc(ICertificateEnrollmentPolicyServerSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32),
    release : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32),
    get_type_info_count : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ICertificateEnrollmentPolicyServerSetup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ICertificateEnrollmentPolicyServerSetup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ErrorString : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    initialize_install_defaults : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::Foundation::HRESULT),
    get_property : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::Security::Cryptography::CEPSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::Security::Cryptography::CEPSetupProperty, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    install : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::Foundation::HRESULT),
    un_install : Proc(ICertificateEnrollmentPolicyServerSetup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ICertificateEnrollmentPolicyServerSetup, lpVtbl : ICertificateEnrollmentPolicyServerSetupVtbl* do
    GUID = LibC::GUID.new(0x859252cc_u32, 0x238c_u16, 0x4a88_u16, StaticArray[0xb8_u8, 0xfd_u8, 0xa3_u8, 0x7e_u8, 0x7d_u8, 0x4_u8, 0xe6_u8, 0x8b_u8])
    def query_interface(this : ICertificateEnrollmentPolicyServerSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICertificateEnrollmentPolicyServerSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICertificateEnrollmentPolicyServerSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ICertificateEnrollmentPolicyServerSetup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ICertificateEnrollmentPolicyServerSetup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ICertificateEnrollmentPolicyServerSetup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ICertificateEnrollmentPolicyServerSetup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ErrorString(this : ICertificateEnrollmentPolicyServerSetup*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorString.call(this, pVal)
    end
    def initialize_install_defaults(this : ICertificateEnrollmentPolicyServerSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_install_defaults.call(this)
    end
    def get_property(this : ICertificateEnrollmentPolicyServerSetup*, propertyId : Win32cr::Security::Cryptography::CEPSetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, propertyId, pPropertyValue)
    end
    def set_property(this : ICertificateEnrollmentPolicyServerSetup*, propertyId : Win32cr::Security::Cryptography::CEPSetupProperty, pPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, propertyId, pPropertyValue)
    end
    def install(this : ICertificateEnrollmentPolicyServerSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.install.call(this)
    end
    def un_install(this : ICertificateEnrollmentPolicyServerSetup*, pAuthKeyBasedRenewal : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_install.call(this, pAuthKeyBasedRenewal)
    end

  end

  @[Link("advapi32")]
  @[Link("bcrypt")]
  @[Link("ncrypt")]
  @[Link("crypt32")]
  @[Link("wintrust")]
  @[Link("cryptnet")]
  @[Link("cryptxml")]
  @[Link("infocardapi")]
  lib C
    fun CryptAcquireContextA(phProv : LibC::UIntPtrT*, szContainer : Win32cr::Foundation::PSTR, szProvider : Win32cr::Foundation::PSTR, dwProvType : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptAcquireContextW(phProv : LibC::UIntPtrT*, szContainer : Win32cr::Foundation::PWSTR, szProvider : Win32cr::Foundation::PWSTR, dwProvType : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptReleaseContext(hProv : LibC::UIntPtrT, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGenKey(hProv : LibC::UIntPtrT, algid : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptDeriveKey(hProv : LibC::UIntPtrT, algid : UInt32, hBaseData : LibC::UIntPtrT, dwFlags : UInt32, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptDestroyKey(hKey : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun CryptSetKeyParam(hKey : LibC::UIntPtrT, dwParam : Win32cr::Security::Cryptography::CRYPT_KEY_PARAM_ID, pbData : UInt8*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGetKeyParam(hKey : LibC::UIntPtrT, dwParam : Win32cr::Security::Cryptography::CRYPT_KEY_PARAM_ID, pbData : UInt8*, pdwDataLen : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetHashParam(hHash : LibC::UIntPtrT, dwParam : Win32cr::Security::Cryptography::CRYPT_SET_HASH_PARAM, pbData : UInt8*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGetHashParam(hHash : LibC::UIntPtrT, dwParam : UInt32, pbData : UInt8*, pdwDataLen : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetProvParam(hProv : LibC::UIntPtrT, dwParam : Win32cr::Security::Cryptography::CRYPT_SET_PROV_PARAM_ID, pbData : UInt8*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGetProvParam(hProv : LibC::UIntPtrT, dwParam : UInt32, pbData : UInt8*, pdwDataLen : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGenRandom(hProv : LibC::UIntPtrT, dwLen : UInt32, pbBuffer : UInt8*) : Win32cr::Foundation::BOOL

    fun CryptGetUserKey(hProv : LibC::UIntPtrT, dwKeySpec : UInt32, phUserKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptExportKey(hKey : LibC::UIntPtrT, hExpKey : LibC::UIntPtrT, dwBlobType : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS, pbData : UInt8*, pdwDataLen : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptImportKey(hProv : LibC::UIntPtrT, pbData : UInt8*, dwDataLen : UInt32, hPubKey : LibC::UIntPtrT, dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptEncrypt(hKey : LibC::UIntPtrT, hHash : LibC::UIntPtrT, final : Win32cr::Foundation::BOOL, dwFlags : UInt32, pbData : UInt8*, pdwDataLen : UInt32*, dwBufLen : UInt32) : Win32cr::Foundation::BOOL

    fun CryptDecrypt(hKey : LibC::UIntPtrT, hHash : LibC::UIntPtrT, final : Win32cr::Foundation::BOOL, dwFlags : UInt32, pbData : UInt8*, pdwDataLen : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptCreateHash(hProv : LibC::UIntPtrT, algid : UInt32, hKey : LibC::UIntPtrT, dwFlags : UInt32, phHash : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptHashData(hHash : LibC::UIntPtrT, pbData : UInt8*, dwDataLen : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptHashSessionKey(hHash : LibC::UIntPtrT, hKey : LibC::UIntPtrT, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptDestroyHash(hHash : LibC::UIntPtrT) : Win32cr::Foundation::BOOL

    fun CryptSignHashA(hHash : LibC::UIntPtrT, dwKeySpec : UInt32, szDescription : Win32cr::Foundation::PSTR, dwFlags : UInt32, pbSignature : UInt8*, pdwSigLen : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptSignHashW(hHash : LibC::UIntPtrT, dwKeySpec : UInt32, szDescription : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pbSignature : UInt8*, pdwSigLen : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptVerifySignatureA(hHash : LibC::UIntPtrT, pbSignature : UInt8*, dwSigLen : UInt32, hPubKey : LibC::UIntPtrT, szDescription : Win32cr::Foundation::PSTR, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptVerifySignatureW(hHash : LibC::UIntPtrT, pbSignature : UInt8*, dwSigLen : UInt32, hPubKey : LibC::UIntPtrT, szDescription : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetProviderA(pszProvName : Win32cr::Foundation::PSTR, dwProvType : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetProviderW(pszProvName : Win32cr::Foundation::PWSTR, dwProvType : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetProviderExA(pszProvName : Win32cr::Foundation::PSTR, dwProvType : UInt32, pdwReserved : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptSetProviderExW(pszProvName : Win32cr::Foundation::PWSTR, dwProvType : UInt32, pdwReserved : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGetDefaultProviderA(dwProvType : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pszProvName : Win32cr::Foundation::PSTR, pcbProvName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptGetDefaultProviderW(dwProvType : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pszProvName : Win32cr::Foundation::PWSTR, pcbProvName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEnumProviderTypesA(dwIndex : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pdwProvType : UInt32*, szTypeName : Win32cr::Foundation::PSTR, pcbTypeName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEnumProviderTypesW(dwIndex : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pdwProvType : UInt32*, szTypeName : Win32cr::Foundation::PWSTR, pcbTypeName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEnumProvidersA(dwIndex : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pdwProvType : UInt32*, szProvName : Win32cr::Foundation::PSTR, pcbProvName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEnumProvidersW(dwIndex : UInt32, pdwReserved : UInt32*, dwFlags : UInt32, pdwProvType : UInt32*, szProvName : Win32cr::Foundation::PWSTR, pcbProvName : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptContextAddRef(hProv : LibC::UIntPtrT, pdwReserved : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptDuplicateKey(hKey : LibC::UIntPtrT, pdwReserved : UInt32*, dwFlags : UInt32, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptDuplicateHash(hHash : LibC::UIntPtrT, pdwReserved : UInt32*, dwFlags : UInt32, phHash : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun BCryptOpenAlgorithmProvider(phAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE*, pszAlgId : Win32cr::Foundation::PWSTR, pszImplementation : Win32cr::Foundation::PWSTR, dwFlags : Win32cr::Security::Cryptography::BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumAlgorithms(dwAlgOperations : Win32cr::Security::Cryptography::BCRYPT_OPERATION, pAlgCount : UInt32*, ppAlgList : Win32cr::Security::Cryptography::BCRYPT_ALGORITHM_IDENTIFIER**, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumProviders(pszAlgId : Win32cr::Foundation::PWSTR, pImplCount : UInt32*, ppImplList : Win32cr::Security::Cryptography::BCRYPT_PROVIDER_NAME**, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptGetProperty(hObject : Win32cr::Security::Cryptography::BCRYPT_HANDLE, pszProperty : Win32cr::Foundation::PWSTR, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptSetProperty(hObject : Win32cr::Security::Cryptography::BCRYPT_HANDLE, pszProperty : Win32cr::Foundation::PWSTR, pbInput : UInt8*, cbInput : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptCloseAlgorithmProvider(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptFreeBuffer(pvBuffer : Void*) : Void

    fun BCryptGenerateSymmetricKey(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, pbKeyObject : UInt8*, cbKeyObject : UInt32, pbSecret : UInt8*, cbSecret : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptGenerateKeyPair(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, dwLength : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptEncrypt(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pbInput : UInt8*, cbInput : UInt32, pPaddingInfo : Void*, pbIV : UInt8*, cbIV : UInt32, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::NTSTATUS

    fun BCryptDecrypt(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pbInput : UInt8*, cbInput : UInt32, pPaddingInfo : Void*, pbIV : UInt8*, cbIV : UInt32, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::NTSTATUS

    fun BCryptExportKey(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, hExportKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pszBlobType : Win32cr::Foundation::PWSTR, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptImportKey(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, hImportKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pszBlobType : Win32cr::Foundation::PWSTR, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, pbKeyObject : UInt8*, cbKeyObject : UInt32, pbInput : UInt8*, cbInput : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptImportKeyPair(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, hImportKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pszBlobType : Win32cr::Foundation::PWSTR, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, pbInput : UInt8*, cbInput : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDuplicateKey(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, phNewKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*, pbKeyObject : UInt8*, cbKeyObject : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptFinalizeKeyPair(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDestroyKey(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE) : Win32cr::Foundation::NTSTATUS

    fun BCryptDestroySecret(hSecret : Win32cr::Security::Cryptography::BCRYPT_SECRET_HANDLE) : Win32cr::Foundation::NTSTATUS

    fun BCryptSignHash(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pPaddingInfo : Void*, pbInput : UInt8*, cbInput : UInt32, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::NTSTATUS

    fun BCryptVerifySignature(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pPaddingInfo : Void*, pbHash : UInt8*, cbHash : UInt32, pbSignature : UInt8*, cbSignature : UInt32, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::NTSTATUS

    fun BCryptSecretAgreement(hPrivKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, hPubKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, phAgreedSecret : Win32cr::Security::Cryptography::BCRYPT_SECRET_HANDLE*, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDeriveKey(hSharedSecret : Win32cr::Security::Cryptography::BCRYPT_SECRET_HANDLE, pwszKDF : Win32cr::Foundation::PWSTR, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptKeyDerivation(hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptCreateHash(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, phHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE*, pbHashObject : UInt8*, cbHashObject : UInt32, pbSecret : UInt8*, cbSecret : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptHashData(hHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE, pbInput : UInt8*, cbInput : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptFinishHash(hHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE, pbOutput : UInt8*, cbOutput : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptCreateMultiHash(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, phHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE*, nHashes : UInt32, pbHashObject : UInt8*, cbHashObject : UInt32, pbSecret : UInt8*, cbSecret : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptProcessMultiOperations(hObject : Win32cr::Security::Cryptography::BCRYPT_HANDLE, operationType : Win32cr::Security::Cryptography::BCRYPT_MULTI_OPERATION_TYPE, pOperations : Void*, cbOperations : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDuplicateHash(hHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE, phNewHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE*, pbHashObject : UInt8*, cbHashObject : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDestroyHash(hHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE) : Win32cr::Foundation::NTSTATUS

    fun BCryptHash(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, pbSecret : UInt8*, cbSecret : UInt32, pbInput : UInt8*, cbInput : UInt32, pbOutput : UInt8*, cbOutput : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptGenRandom(hAlgorithm : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, pbBuffer : UInt8*, cbBuffer : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDeriveKeyCapi(hHash : Win32cr::Security::Cryptography::BCRYPT_HASH_HANDLE, hTargetAlg : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptDeriveKeyPBKDF2(hPrf : Win32cr::Security::Cryptography::BCRYPT_ALG_HANDLE, pbPassword : UInt8*, cbPassword : UInt32, pbSalt : UInt8*, cbSalt : UInt32, cIterations : UInt64, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, dwFlags : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptQueryProviderRegistration(pszProvider : Win32cr::Foundation::PWSTR, dwMode : Win32cr::Security::Cryptography::BCRYPT_QUERY_PROVIDER_MODE, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_PROVIDER_REG**) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumRegisteredProviders(pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_PROVIDERS**) : Win32cr::Foundation::NTSTATUS

    fun BCryptCreateContext(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, pConfig : Win32cr::Security::Cryptography::CRYPT_CONTEXT_CONFIG*) : Win32cr::Foundation::NTSTATUS

    fun BCryptDeleteContext(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumContexts(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_CONTEXTS**) : Win32cr::Foundation::NTSTATUS

    fun BCryptConfigureContext(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, pConfig : Win32cr::Security::Cryptography::CRYPT_CONTEXT_CONFIG*) : Win32cr::Foundation::NTSTATUS

    fun BCryptQueryContextConfiguration(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_CONTEXT_CONFIG**) : Win32cr::Foundation::NTSTATUS

    fun BCryptAddContextFunction(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, dwPosition : UInt32) : Win32cr::Foundation::NTSTATUS

    fun BCryptRemoveContextFunction(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumContextFunctions(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_CONTEXT_FUNCTIONS**) : Win32cr::Foundation::NTSTATUS

    fun BCryptConfigureContextFunction(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, pConfig : Win32cr::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_CONFIG*) : Win32cr::Foundation::NTSTATUS

    fun BCryptQueryContextFunctionConfiguration(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_CONFIG**) : Win32cr::Foundation::NTSTATUS

    fun BCryptEnumContextFunctionProviders(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_PROVIDERS**) : Win32cr::Foundation::NTSTATUS

    fun BCryptSetContextFunctionProperty(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, pszProperty : Win32cr::Foundation::PWSTR, cbValue : UInt32, pbValue : UInt8*) : Win32cr::Foundation::NTSTATUS

    fun BCryptQueryContextFunctionProperty(dwTable : Win32cr::Security::Cryptography::BCRYPT_TABLE, pszContext : Win32cr::Foundation::PWSTR, dwInterface : Win32cr::Security::Cryptography::BCRYPT_INTERFACE, pszFunction : Win32cr::Foundation::PWSTR, pszProperty : Win32cr::Foundation::PWSTR, pcbValue : UInt32*, ppbValue : UInt8**) : Win32cr::Foundation::NTSTATUS

    fun BCryptRegisterConfigChangeNotify(phEvent : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::NTSTATUS

    fun BCryptUnregisterConfigChangeNotify(hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::NTSTATUS

    fun BCryptResolveProviders(pszContext : Win32cr::Foundation::PWSTR, dwInterface : UInt32, pszFunction : Win32cr::Foundation::PWSTR, pszProvider : Win32cr::Foundation::PWSTR, dwMode : Win32cr::Security::Cryptography::BCRYPT_QUERY_PROVIDER_MODE, dwFlags : Win32cr::Security::Cryptography::BCRYPT_RESOLVE_PROVIDERS_FLAGS, pcbBuffer : UInt32*, ppBuffer : Win32cr::Security::Cryptography::CRYPT_PROVIDER_REFS**) : Win32cr::Foundation::NTSTATUS

    fun BCryptGetFipsAlgorithmMode(pfEnabled : UInt8*) : Win32cr::Foundation::NTSTATUS

    fun NCryptOpenStorageProvider(phProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE*, pszProviderName : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptEnumAlgorithms(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, dwAlgOperations : Win32cr::Security::Cryptography::NCRYPT_OPERATION, pdwAlgCount : UInt32*, ppAlgList : Win32cr::Security::Cryptography::NCryptAlgorithmName**, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptIsAlgSupported(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, pszAlgId : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptEnumKeys(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, pszScope : Win32cr::Foundation::PWSTR, ppKeyName : Win32cr::Security::Cryptography::NCryptKeyName**, ppEnumState : Void**, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptEnumStorageProviders(pdwProviderCount : UInt32*, ppProviderList : Win32cr::Security::Cryptography::NCryptProviderName**, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptFreeBuffer(pvInput : Void*) : Win32cr::Foundation::HRESULT

    fun NCryptOpenKey(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, phKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE*, pszKeyName : Win32cr::Foundation::PWSTR, dwLegacyKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptCreatePersistedKey(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, phKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE*, pszAlgId : Win32cr::Foundation::PWSTR, pszKeyName : Win32cr::Foundation::PWSTR, dwLegacyKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptGetProperty(hObject : Win32cr::Security::Cryptography::NCRYPT_HANDLE, pszProperty : Win32cr::Foundation::PWSTR, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::OBJECT_SECURITY_INFORMATION) : Win32cr::Foundation::HRESULT

    fun NCryptSetProperty(hObject : Win32cr::Security::Cryptography::NCRYPT_HANDLE, pszProperty : Win32cr::Foundation::PWSTR, pbInput : UInt8*, cbInput : UInt32, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptFinalizeKey(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptEncrypt(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pbInput : UInt8*, cbInput : UInt32, pPaddingInfo : Void*, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptDecrypt(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pbInput : UInt8*, cbInput : UInt32, pPaddingInfo : Void*, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptImportKey(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, hImportKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pszBlobType : Win32cr::Foundation::PWSTR, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, phKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE*, pbData : UInt8*, cbData : UInt32, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptExportKey(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, hExportKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pszBlobType : Win32cr::Foundation::PWSTR, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbOutput : UInt8*, cbOutput : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptSignHash(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pPaddingInfo : Void*, pbHashValue : UInt8*, cbHashValue : UInt32, pbSignature : UInt8*, cbSignature : UInt32, pcbResult : UInt32*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptVerifySignature(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pPaddingInfo : Void*, pbHashValue : UInt8*, cbHashValue : UInt32, pbSignature : UInt8*, cbSignature : UInt32, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptDeleteKey(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptFreeObject(hObject : Win32cr::Security::Cryptography::NCRYPT_HANDLE) : Win32cr::Foundation::HRESULT

    fun NCryptIsKeyHandle(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE) : Win32cr::Foundation::BOOL

    fun NCryptTranslateHandle(phProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE*, phKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE*, hLegacyProv : LibC::UIntPtrT, hLegacyKey : LibC::UIntPtrT, dwLegacyKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptNotifyChangeKey(hProvider : Win32cr::Security::Cryptography::NCRYPT_PROV_HANDLE, phEvent : Win32cr::Foundation::HANDLE*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptSecretAgreement(hPrivKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, hPubKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, phAgreedSecret : Win32cr::Security::Cryptography::NCRYPT_SECRET_HANDLE*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS) : Win32cr::Foundation::HRESULT

    fun NCryptDeriveKey(hSharedSecret : Win32cr::Security::Cryptography::NCRYPT_SECRET_HANDLE, pwszKDF : Win32cr::Foundation::PWSTR, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptKeyDerivation(hKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbDerivedKey : UInt8*, cbDerivedKey : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptCreateClaim(hSubjectKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, hAuthorityKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, dwClaimType : UInt32, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbClaimBlob : UInt8*, cbClaimBlob : UInt32, pcbResult : UInt32*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptVerifyClaim(hSubjectKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, hAuthorityKey : Win32cr::Security::Cryptography::NCRYPT_KEY_HANDLE, dwClaimType : UInt32, pParameterList : Win32cr::Security::Cryptography::BCryptBufferDesc*, pbClaimBlob : UInt8*, cbClaimBlob : UInt32, pOutput : Win32cr::Security::Cryptography::BCryptBufferDesc*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun CryptFormatObject(dwCertEncodingType : UInt32, dwFormatType : UInt32, dwFormatStrType : UInt32, pFormatStruct : Void*, lpszStructType : Win32cr::Foundation::PSTR, pbEncoded : UInt8*, cbEncoded : UInt32, pbFormat : Void*, pcbFormat : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEncodeObjectEx(dwCertEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, lpszStructType : Win32cr::Foundation::PSTR, pvStructInfo : Void*, dwFlags : Win32cr::Security::Cryptography::CRYPT_ENCODE_OBJECT_FLAGS, pEncodePara : Win32cr::Security::Cryptography::CRYPT_ENCODE_PARA*, pvEncoded : Void*, pcbEncoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEncodeObject(dwCertEncodingType : UInt32, lpszStructType : Win32cr::Foundation::PSTR, pvStructInfo : Void*, pbEncoded : UInt8*, pcbEncoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptDecodeObjectEx(dwCertEncodingType : UInt32, lpszStructType : Win32cr::Foundation::PSTR, pbEncoded : UInt8*, cbEncoded : UInt32, dwFlags : UInt32, pDecodePara : Win32cr::Security::Cryptography::CRYPT_DECODE_PARA*, pvStructInfo : Void*, pcbStructInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptDecodeObject(dwCertEncodingType : UInt32, lpszStructType : Win32cr::Foundation::PSTR, pbEncoded : UInt8*, cbEncoded : UInt32, dwFlags : UInt32, pvStructInfo : Void*, pcbStructInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptInstallOIDFunctionAddress(hModule : Win32cr::Foundation::HINSTANCE, dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, cFuncEntry : UInt32, rgFuncEntry : Win32cr::Security::Cryptography::CRYPT_OID_FUNC_ENTRY*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptInitOIDFunctionSet(pszFuncName : Win32cr::Foundation::PSTR, dwFlags : UInt32) : Void*

    fun CryptGetOIDFunctionAddress(hFuncSet : Void*, dwEncodingType : UInt32, pszOID : Win32cr::Foundation::PSTR, dwFlags : UInt32, ppvFuncAddr : Void**, phFuncAddr : Void**) : Win32cr::Foundation::BOOL

    fun CryptGetDefaultOIDDllList(hFuncSet : Void*, dwEncodingType : UInt32, pwszDllList : UInt16*, pcchDllList : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptGetDefaultOIDFunctionAddress(hFuncSet : Void*, dwEncodingType : UInt32, pwszDll : Win32cr::Foundation::PWSTR, dwFlags : UInt32, ppvFuncAddr : Void**, phFuncAddr : Void**) : Win32cr::Foundation::BOOL

    fun CryptFreeOIDFunctionAddress(hFuncAddr : Void*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptRegisterOIDFunction(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pszOID : Win32cr::Foundation::PSTR, pwszDll : Win32cr::Foundation::PWSTR, pszOverrideFuncName : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun CryptUnregisterOIDFunction(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pszOID : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun CryptRegisterDefaultOIDFunction(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, dwIndex : UInt32, pwszDll : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun CryptUnregisterDefaultOIDFunction(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pwszDll : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun CryptSetOIDFunctionValue(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pszOID : Win32cr::Foundation::PSTR, pwszValueName : Win32cr::Foundation::PWSTR, dwValueType : Win32cr::System::Registry::REG_VALUE_TYPE, pbValueData : UInt8*, cbValueData : UInt32) : Win32cr::Foundation::BOOL

    fun CryptGetOIDFunctionValue(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pszOID : Win32cr::Foundation::PSTR, pwszValueName : Win32cr::Foundation::PWSTR, pdwValueType : UInt32*, pbValueData : UInt8*, pcbValueData : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptEnumOIDFunction(dwEncodingType : UInt32, pszFuncName : Win32cr::Foundation::PSTR, pszOID : Win32cr::Foundation::PSTR, dwFlags : UInt32, pvArg : Void*, pfnEnumOIDFunc : Win32cr::Security::Cryptography::PFN_CRYPT_ENUM_OID_FUNC) : Win32cr::Foundation::BOOL

    fun CryptFindOIDInfo(dwKeyType : UInt32, pvKey : Void*, dwGroupId : UInt32) : Win32cr::Security::Cryptography::CRYPT_OID_INFO*

    fun CryptRegisterOIDInfo(pInfo : Win32cr::Security::Cryptography::CRYPT_OID_INFO*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptUnregisterOIDInfo(pInfo : Win32cr::Security::Cryptography::CRYPT_OID_INFO*) : Win32cr::Foundation::BOOL

    fun CryptEnumOIDInfo(dwGroupId : UInt32, dwFlags : UInt32, pvArg : Void*, pfnEnumOIDInfo : Win32cr::Security::Cryptography::PFN_CRYPT_ENUM_OID_INFO) : Win32cr::Foundation::BOOL

    fun CryptFindLocalizedName(pwszCryptName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun CryptMsgOpenToEncode(dwMsgEncodingType : UInt32, dwFlags : UInt32, dwMsgType : Win32cr::Security::Cryptography::CRYPT_MSG_TYPE, pvMsgEncodeInfo : Void*, pszInnerContentObjID : Win32cr::Foundation::PSTR, pStreamInfo : Win32cr::Security::Cryptography::CMSG_STREAM_INFO*) : Void*

    fun CryptMsgCalculateEncodedLength(dwMsgEncodingType : UInt32, dwFlags : UInt32, dwMsgType : UInt32, pvMsgEncodeInfo : Void*, pszInnerContentObjID : Win32cr::Foundation::PSTR, cbData : UInt32) : UInt32

    fun CryptMsgOpenToDecode(dwMsgEncodingType : UInt32, dwFlags : UInt32, dwMsgType : UInt32, hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, pRecipientInfo : Win32cr::Security::Cryptography::CERT_INFO*, pStreamInfo : Win32cr::Security::Cryptography::CMSG_STREAM_INFO*) : Void*

    fun CryptMsgDuplicate(hCryptMsg : Void*) : Void*

    fun CryptMsgClose(hCryptMsg : Void*) : Win32cr::Foundation::BOOL

    fun CryptMsgUpdate(hCryptMsg : Void*, pbData : UInt8*, cbData : UInt32, fFinal : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL

    fun CryptMsgGetParam(hCryptMsg : Void*, dwParamType : UInt32, dwIndex : UInt32, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptMsgControl(hCryptMsg : Void*, dwFlags : UInt32, dwCtrlType : UInt32, pvCtrlPara : Void*) : Win32cr::Foundation::BOOL

    fun CryptMsgVerifyCountersignatureEncoded(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwEncodingType : UInt32, pbSignerInfo : UInt8*, cbSignerInfo : UInt32, pbSignerInfoCountersignature : UInt8*, cbSignerInfoCountersignature : UInt32, pciCountersigner : Win32cr::Security::Cryptography::CERT_INFO*) : Win32cr::Foundation::BOOL

    fun CryptMsgVerifyCountersignatureEncodedEx(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwEncodingType : UInt32, pbSignerInfo : UInt8*, cbSignerInfo : UInt32, pbSignerInfoCountersignature : UInt8*, cbSignerInfoCountersignature : UInt32, dwSignerType : UInt32, pvSigner : Void*, dwFlags : UInt32, pvExtra : Void*) : Win32cr::Foundation::BOOL

    fun CryptMsgCountersign(hCryptMsg : Void*, dwIndex : UInt32, cCountersigners : UInt32, rgCountersigners : Win32cr::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO*) : Win32cr::Foundation::BOOL

    fun CryptMsgCountersignEncoded(dwEncodingType : UInt32, pbSignerInfo : UInt8*, cbSignerInfo : UInt32, cCountersigners : UInt32, rgCountersigners : Win32cr::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO*, pbCountersignature : UInt8*, pcbCountersignature : UInt32*) : Win32cr::Foundation::BOOL

    fun CertOpenStore(lpszStoreProvider : Win32cr::Foundation::PSTR, dwEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwFlags : Win32cr::Security::Cryptography::CERT_OPEN_STORE_FLAGS, pvPara : Void*) : Win32cr::Security::Cryptography::HCERTSTORE

    fun CertDuplicateStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE) : Win32cr::Security::Cryptography::HCERTSTORE

    fun CertSaveStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, dwSaveAs : Win32cr::Security::Cryptography::CERT_STORE_SAVE_AS, dwSaveTo : Win32cr::Security::Cryptography::CERT_STORE_SAVE_TO, pvSaveToPara : Void*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun CertCloseStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CertGetSubjectCertificateFromStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, pCertId : Win32cr::Security::Cryptography::CERT_INFO*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    # Commented out due to being part of LibC
    #fun CertEnumCertificatesInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pPrevCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CertFindCertificateInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, dwFindFlags : UInt32, dwFindType : Win32cr::Security::Cryptography::CERT_FIND_FLAGS, pvFindPara : Void*, pPrevCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CertGetIssuerCertificateFromStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pSubjectContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pPrevIssuerContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pdwFlags : UInt32*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CertVerifySubjectCertificateContext(pSubject : Win32cr::Security::Cryptography::CERT_CONTEXT*, pIssuer : Win32cr::Security::Cryptography::CERT_CONTEXT*, pdwFlags : UInt32*) : Win32cr::Foundation::BOOL

    fun CertDuplicateCertificateContext(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CertCreateCertificateContext(dwCertEncodingType : UInt32, pbCertEncoded : UInt8*, cbCertEncoded : UInt32) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CertFreeCertificateContext(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertSetCertificateContextProperty(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwPropId : UInt32, dwFlags : UInt32, pvData : Void*) : Win32cr::Foundation::BOOL

    fun CertGetCertificateContextProperty(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwPropId : UInt32, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CertEnumCertificateContextProperties(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwPropId : UInt32) : UInt32

    fun CertCreateCTLEntryFromCertificateContextProperties(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, cOptAttr : UInt32, rgOptAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*, dwFlags : UInt32, pvReserved : Void*, pCtlEntry : Win32cr::Security::Cryptography::CTL_ENTRY*, pcbCtlEntry : UInt32*) : Win32cr::Foundation::BOOL

    fun CertSetCertificateContextPropertiesFromCTLEntry(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pCtlEntry : Win32cr::Security::Cryptography::CTL_ENTRY*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CertGetCRLFromStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pIssuerContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pPrevCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, pdwFlags : UInt32*) : Win32cr::Security::Cryptography::CRL_CONTEXT*

    fun CertEnumCRLsInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pPrevCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*) : Win32cr::Security::Cryptography::CRL_CONTEXT*

    fun CertFindCRLInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, dwFindFlags : UInt32, dwFindType : UInt32, pvFindPara : Void*, pPrevCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*) : Win32cr::Security::Cryptography::CRL_CONTEXT*

    fun CertDuplicateCRLContext(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*) : Win32cr::Security::Cryptography::CRL_CONTEXT*

    fun CertCreateCRLContext(dwCertEncodingType : UInt32, pbCrlEncoded : UInt8*, cbCrlEncoded : UInt32) : Win32cr::Security::Cryptography::CRL_CONTEXT*

    fun CertFreeCRLContext(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertSetCRLContextProperty(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwPropId : UInt32, dwFlags : UInt32, pvData : Void*) : Win32cr::Foundation::BOOL

    fun CertGetCRLContextProperty(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwPropId : UInt32, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CertEnumCRLContextProperties(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwPropId : UInt32) : UInt32

    fun CertFindCertificateInCRL(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwFlags : UInt32, pvReserved : Void*, ppCrlEntry : Win32cr::Security::Cryptography::CRL_ENTRY**) : Win32cr::Foundation::BOOL

    fun CertIsValidCRLForCertificate(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, pCrl : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwFlags : UInt32, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CertAddEncodedCertificateToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, pbCertEncoded : UInt8*, cbCertEncoded : UInt32, dwAddDisposition : UInt32, ppCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddCertificateContextToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddSerializedElementToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pbElement : UInt8*, cbElement : UInt32, dwAddDisposition : UInt32, dwFlags : UInt32, dwContextTypeFlags : UInt32, pdwContextType : UInt32*, ppvContext : Void**) : Win32cr::Foundation::BOOL

    fun CertDeleteCertificateFromStore(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertAddEncodedCRLToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, pbCrlEncoded : UInt8*, cbCrlEncoded : UInt32, dwAddDisposition : UInt32, ppCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddCRLContextToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CRL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertDeleteCRLFromStore(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertSerializeCertificateStoreElement(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwFlags : UInt32, pbElement : UInt8*, pcbElement : UInt32*) : Win32cr::Foundation::BOOL

    fun CertSerializeCRLStoreElement(pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwFlags : UInt32, pbElement : UInt8*, pcbElement : UInt32*) : Win32cr::Foundation::BOOL

    fun CertDuplicateCTLContext(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*) : Win32cr::Security::Cryptography::CTL_CONTEXT*

    fun CertCreateCTLContext(dwMsgAndCertEncodingType : UInt32, pbCtlEncoded : UInt8*, cbCtlEncoded : UInt32) : Win32cr::Security::Cryptography::CTL_CONTEXT*

    fun CertFreeCTLContext(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertSetCTLContextProperty(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwPropId : UInt32, dwFlags : UInt32, pvData : Void*) : Win32cr::Foundation::BOOL

    fun CertGetCTLContextProperty(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwPropId : UInt32, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CertEnumCTLContextProperties(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwPropId : UInt32) : UInt32

    fun CertEnumCTLsInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pPrevCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*) : Win32cr::Security::Cryptography::CTL_CONTEXT*

    fun CertFindSubjectInCTL(dwEncodingType : UInt32, dwSubjectType : UInt32, pvSubject : Void*, pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwFlags : UInt32) : Win32cr::Security::Cryptography::CTL_ENTRY*

    fun CertFindCTLInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwMsgAndCertEncodingType : UInt32, dwFindFlags : UInt32, dwFindType : Win32cr::Security::Cryptography::CERT_FIND_TYPE, pvFindPara : Void*, pPrevCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*) : Win32cr::Security::Cryptography::CTL_CONTEXT*

    fun CertAddEncodedCTLToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwMsgAndCertEncodingType : UInt32, pbCtlEncoded : UInt8*, cbCtlEncoded : UInt32, dwAddDisposition : UInt32, ppCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddCTLContextToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CTL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertSerializeCTLStoreElement(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwFlags : UInt32, pbElement : UInt8*, pcbElement : UInt32*) : Win32cr::Foundation::BOOL

    fun CertDeleteCTLFromStore(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CertAddCertificateLinkToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddCRLLinkToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCrlContext : Win32cr::Security::Cryptography::CRL_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CRL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddCTLLinkToStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwAddDisposition : UInt32, ppStoreContext : Win32cr::Security::Cryptography::CTL_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertAddStoreToCollection(hCollectionStore : Win32cr::Security::Cryptography::HCERTSTORE, hSiblingStore : Win32cr::Security::Cryptography::HCERTSTORE, dwUpdateFlags : UInt32, dwPriority : UInt32) : Win32cr::Foundation::BOOL

    fun CertRemoveStoreFromCollection(hCollectionStore : Win32cr::Security::Cryptography::HCERTSTORE, hSiblingStore : Win32cr::Security::Cryptography::HCERTSTORE) : Void

    fun CertControlStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwFlags : Win32cr::Security::Cryptography::CERT_CONTROL_STORE_FLAGS, dwCtrlType : UInt32, pvCtrlPara : Void*) : Win32cr::Foundation::BOOL

    fun CertSetStoreProperty(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwPropId : UInt32, dwFlags : UInt32, pvData : Void*) : Win32cr::Foundation::BOOL

    fun CertGetStoreProperty(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwPropId : UInt32, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CertCreateContext(dwContextType : UInt32, dwEncodingType : UInt32, pbEncoded : UInt8*, cbEncoded : UInt32, dwFlags : UInt32, pCreatePara : Win32cr::Security::Cryptography::CERT_CREATE_CONTEXT_PARA*) : Void*

    fun CertRegisterSystemStore(pvSystemStore : Void*, dwFlags : UInt32, pStoreInfo : Win32cr::Security::Cryptography::CERT_SYSTEM_STORE_INFO*, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CertRegisterPhysicalStore(pvSystemStore : Void*, dwFlags : UInt32, pwszStoreName : Win32cr::Foundation::PWSTR, pStoreInfo : Win32cr::Security::Cryptography::CERT_PHYSICAL_STORE_INFO*, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CertUnregisterSystemStore(pvSystemStore : Void*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CertUnregisterPhysicalStore(pvSystemStore : Void*, dwFlags : UInt32, pwszStoreName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun CertEnumSystemStoreLocation(dwFlags : UInt32, pvArg : Void*, pfnEnum : Win32cr::Security::Cryptography::PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) : Win32cr::Foundation::BOOL

    fun CertEnumSystemStore(dwFlags : UInt32, pvSystemStoreLocationPara : Void*, pvArg : Void*, pfnEnum : Win32cr::Security::Cryptography::PFN_CERT_ENUM_SYSTEM_STORE) : Win32cr::Foundation::BOOL

    fun CertEnumPhysicalStore(pvSystemStore : Void*, dwFlags : UInt32, pvArg : Void*, pfnEnum : Win32cr::Security::Cryptography::PFN_CERT_ENUM_PHYSICAL_STORE) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun CertGetEnhancedKeyUsage(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwFlags : UInt32, pUsage : Win32cr::Security::Cryptography::CTL_USAGE*, pcbUsage : UInt32*) : Win32cr::Foundation::BOOL

    fun CertSetEnhancedKeyUsage(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pUsage : Win32cr::Security::Cryptography::CTL_USAGE*) : Win32cr::Foundation::BOOL

    fun CertAddEnhancedKeyUsageIdentifier(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pszUsageIdentifier : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun CertRemoveEnhancedKeyUsageIdentifier(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pszUsageIdentifier : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun CertGetValidUsages(cCerts : UInt32, rghCerts : Win32cr::Security::Cryptography::CERT_CONTEXT**, cNumOIDs : Int32*, rghOIDs : Win32cr::Foundation::PSTR*, pcbOIDs : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptMsgGetAndVerifySigner(hCryptMsg : Void*, cSignerStore : UInt32, rghSignerStore : Win32cr::Security::Cryptography::HCERTSTORE*, dwFlags : UInt32, ppSigner : Win32cr::Security::Cryptography::CERT_CONTEXT**, pdwSignerIndex : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptMsgSignCTL(dwMsgEncodingType : UInt32, pbCtlContent : UInt8*, cbCtlContent : UInt32, pSignInfo : Win32cr::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO*, dwFlags : UInt32, pbEncoded : UInt8*, pcbEncoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptMsgEncodeAndSignCTL(dwMsgEncodingType : UInt32, pCtlInfo : Win32cr::Security::Cryptography::CTL_INFO*, pSignInfo : Win32cr::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO*, dwFlags : UInt32, pbEncoded : UInt8*, pcbEncoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CertFindSubjectInSortedCTL(pSubjectIdentifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, dwFlags : UInt32, pvReserved : Void*, pEncodedAttributes : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CertEnumSubjectInSortedCTL(pCtlContext : Win32cr::Security::Cryptography::CTL_CONTEXT*, ppvNextSubject : Void**, pSubjectIdentifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pEncodedAttributes : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CertVerifyCTLUsage(dwEncodingType : UInt32, dwSubjectType : UInt32, pvSubject : Void*, pSubjectUsage : Win32cr::Security::Cryptography::CTL_USAGE*, dwFlags : UInt32, pVerifyUsagePara : Win32cr::Security::Cryptography::CTL_VERIFY_USAGE_PARA*, pVerifyUsageStatus : Win32cr::Security::Cryptography::CTL_VERIFY_USAGE_STATUS*) : Win32cr::Foundation::BOOL

    fun CertVerifyRevocation(dwEncodingType : UInt32, dwRevType : UInt32, cContext : UInt32, rgpvContext : Void**, dwFlags : UInt32, pRevPara : Win32cr::Security::Cryptography::CERT_REVOCATION_PARA*, pRevStatus : Win32cr::Security::Cryptography::CERT_REVOCATION_STATUS*) : Win32cr::Foundation::BOOL

    fun CertCompareIntegerBlob(pInt1 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pInt2 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CertCompareCertificate(dwCertEncodingType : UInt32, pCertId1 : Win32cr::Security::Cryptography::CERT_INFO*, pCertId2 : Win32cr::Security::Cryptography::CERT_INFO*) : Win32cr::Foundation::BOOL

    fun CertCompareCertificateName(dwCertEncodingType : UInt32, pCertName1 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pCertName2 : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CertIsRDNAttrsInCertificateName(dwCertEncodingType : UInt32, dwFlags : UInt32, pCertName : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pRDN : Win32cr::Security::Cryptography::CERT_RDN*) : Win32cr::Foundation::BOOL

    fun CertComparePublicKeyInfo(dwCertEncodingType : UInt32, pPublicKey1 : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pPublicKey2 : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*) : Win32cr::Foundation::BOOL

    fun CertGetPublicKeyLength(dwCertEncodingType : UInt32, pPublicKey : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*) : UInt32

    fun CryptVerifyCertificateSignature(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwCertEncodingType : UInt32, pbEncoded : UInt8*, cbEncoded : UInt32, pPublicKey : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*) : Win32cr::Foundation::BOOL

    fun CryptVerifyCertificateSignatureEx(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwCertEncodingType : UInt32, dwSubjectType : UInt32, pvSubject : Void*, dwIssuerType : UInt32, pvIssuer : Void*, dwFlags : Win32cr::Security::Cryptography::CRYPT_VERIFY_CERT_FLAGS, pvExtra : Void*) : Win32cr::Foundation::BOOL

    fun CertIsStrongHashToSign(pStrongSignPara : Win32cr::Security::Cryptography::CERT_STRONG_SIGN_PARA*, pwszCNGHashAlgid : Win32cr::Foundation::PWSTR, pSigningCert : Win32cr::Security::Cryptography::CERT_CONTEXT*) : Win32cr::Foundation::BOOL

    fun CryptHashToBeSigned(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwCertEncodingType : UInt32, pbEncoded : UInt8*, cbEncoded : UInt32, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptHashCertificate(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, algid : UInt32, dwFlags : UInt32, pbEncoded : UInt8*, cbEncoded : UInt32, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptHashCertificate2(pwszCNGHashAlgid : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pvReserved : Void*, pbEncoded : UInt8*, cbEncoded : UInt32, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptSignCertificate(hCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec : UInt32, dwCertEncodingType : UInt32, pbEncodedToBeSigned : UInt8*, cbEncodedToBeSigned : UInt32, pSignatureAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, pvHashAuxInfo : Void*, pbSignature : UInt8*, pcbSignature : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, dwCertEncodingType : UInt32, lpszStructType : Win32cr::Foundation::PSTR, pvStructInfo : Void*, pSignatureAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, pvHashAuxInfo : Void*, pbEncoded : UInt8*, pcbEncoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CertVerifyTimeValidity(pTimeToVerify : Win32cr::Foundation::FILETIME*, pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*) : Int32

    fun CertVerifyCRLTimeValidity(pTimeToVerify : Win32cr::Foundation::FILETIME*, pCrlInfo : Win32cr::Security::Cryptography::CRL_INFO*) : Int32

    fun CertVerifyValidityNesting(pSubjectInfo : Win32cr::Security::Cryptography::CERT_INFO*, pIssuerInfo : Win32cr::Security::Cryptography::CERT_INFO*) : Win32cr::Foundation::BOOL

    fun CertVerifyCRLRevocation(dwCertEncodingType : UInt32, pCertId : Win32cr::Security::Cryptography::CERT_INFO*, cCrlInfo : UInt32, rgpCrlInfo : Win32cr::Security::Cryptography::CRL_INFO**) : Win32cr::Foundation::BOOL

    fun CertAlgIdToOID(dwAlgId : UInt32) : Win32cr::Foundation::PSTR

    fun CertOIDToAlgId(pszObjId : Win32cr::Foundation::PSTR) : UInt32

    fun CertFindExtension(pszObjId : Win32cr::Foundation::PSTR, cExtensions : UInt32, rgExtensions : Win32cr::Security::Cryptography::CERT_EXTENSION*) : Win32cr::Security::Cryptography::CERT_EXTENSION*

    fun CertFindAttribute(pszObjId : Win32cr::Foundation::PSTR, cAttr : UInt32, rgAttr : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*) : Win32cr::Security::Cryptography::CRYPT_ATTRIBUTE*

    fun CertFindRDNAttr(pszObjId : Win32cr::Foundation::PSTR, pName : Win32cr::Security::Cryptography::CERT_NAME_INFO*) : Win32cr::Security::Cryptography::CERT_RDN_ATTR*

    fun CertGetIntendedKeyUsage(dwCertEncodingType : UInt32, pCertInfo : Win32cr::Security::Cryptography::CERT_INFO*, pbKeyUsage : UInt8*, cbKeyUsage : UInt32) : Win32cr::Foundation::BOOL

    fun CryptInstallDefaultContext(hCryptProv : LibC::UIntPtrT, dwDefaultType : Win32cr::Security::Cryptography::CRYPT_DEFAULT_CONTEXT_TYPE, pvDefaultPara : Void*, dwFlags : Win32cr::Security::Cryptography::CRYPT_DEFAULT_CONTEXT_FLAGS, pvReserved : Void*, phDefaultContext : Void**) : Win32cr::Foundation::BOOL

    fun CryptUninstallDefaultContext(hDefaultContext : Void*, dwFlags : UInt32, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CryptExportPublicKeyInfo(hCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec : UInt32, dwCertEncodingType : UInt32, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pcbInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec : UInt32, dwCertEncodingType : UInt32, pszPublicKeyObjId : Win32cr::Foundation::PSTR, dwFlags : UInt32, pvAuxInfo : Void*, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pcbInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, dwCertEncodingType : UInt32, pszPublicKeyObjId : Win32cr::Foundation::PSTR, dwFlags : UInt32, pvAuxInfo : Void*, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pcbInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptImportPublicKeyInfo(hCryptProv : LibC::UIntPtrT, dwCertEncodingType : UInt32, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptImportPublicKeyInfoEx(hCryptProv : LibC::UIntPtrT, dwCertEncodingType : UInt32, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, aiKeyAlg : UInt32, dwFlags : UInt32, pvAuxInfo : Void*, phKey : LibC::UIntPtrT*) : Win32cr::Foundation::BOOL

    fun CryptImportPublicKeyInfoEx2(dwCertEncodingType : UInt32, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, dwFlags : Win32cr::Security::Cryptography::CRYPT_IMPORT_PUBLIC_KEY_FLAGS, pvAuxInfo : Void*, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*) : Win32cr::Foundation::BOOL

    fun CryptAcquireCertificatePrivateKey(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwFlags : Win32cr::Security::Cryptography::CRYPT_ACQUIRE_FLAGS, pvParameters : Void*, phCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE*, pdwKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC*, pfCallerFreeProvOrNCryptKey : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::BOOL

    fun CryptFindCertificateKeyProvInfo(pCert : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwFlags : Win32cr::Security::Cryptography::CRYPT_FIND_FLAGS, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CryptImportPKCS8(sPrivateKeyAndParams : Win32cr::Security::Cryptography::CRYPT_PKCS8_IMPORT_PARAMS, dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS, phCryptProv : LibC::UIntPtrT*, pvAuxInfo : Void*) : Win32cr::Foundation::BOOL

    fun CryptExportPKCS8(hCryptProv : LibC::UIntPtrT, dwKeySpec : UInt32, pszPrivateKeyObjId : Win32cr::Foundation::PSTR, dwFlags : UInt32, pvAuxInfo : Void*, pbPrivateKeyBlob : UInt8*, pcbPrivateKeyBlob : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptHashPublicKeyInfo(hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, algid : UInt32, dwFlags : UInt32, dwCertEncodingType : UInt32, pInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CertRDNValueToStrA(dwValueType : UInt32, pValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, psz : UInt8*, csz : UInt32) : UInt32

    fun CertRDNValueToStrW(dwValueType : UInt32, pValue : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, psz : UInt16*, csz : UInt32) : UInt32

    fun CertNameToStrA(dwCertEncodingType : UInt32, pName : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwStrType : Win32cr::Security::Cryptography::CERT_STRING_TYPE, psz : UInt8*, csz : UInt32) : UInt32

    fun CertNameToStrW(dwCertEncodingType : UInt32, pName : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwStrType : Win32cr::Security::Cryptography::CERT_STRING_TYPE, psz : UInt16*, csz : UInt32) : UInt32

    fun CertStrToNameA(dwCertEncodingType : UInt32, pszX500 : Win32cr::Foundation::PSTR, dwStrType : Win32cr::Security::Cryptography::CERT_STRING_TYPE, pvReserved : Void*, pbEncoded : UInt8*, pcbEncoded : UInt32*, ppszError : Win32cr::Foundation::PSTR*) : Win32cr::Foundation::BOOL

    fun CertStrToNameW(dwCertEncodingType : UInt32, pszX500 : Win32cr::Foundation::PWSTR, dwStrType : Win32cr::Security::Cryptography::CERT_STRING_TYPE, pvReserved : Void*, pbEncoded : UInt8*, pcbEncoded : UInt32*, ppszError : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::BOOL

    fun CertGetNameStringA(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwType : UInt32, dwFlags : UInt32, pvTypePara : Void*, pszNameString : UInt8*, cchNameString : UInt32) : UInt32

    fun CertGetNameStringW(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, dwType : UInt32, dwFlags : UInt32, pvTypePara : Void*, pszNameString : UInt16*, cchNameString : UInt32) : UInt32

    fun CryptSignMessage(pSignPara : Win32cr::Security::Cryptography::CRYPT_SIGN_MESSAGE_PARA*, fDetachedSignature : Win32cr::Foundation::BOOL, cToBeSigned : UInt32, rgpbToBeSigned : UInt8**, rgcbToBeSigned : UInt32*, pbSignedBlob : UInt8*, pcbSignedBlob : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptVerifyMessageSignature(pVerifyPara : Win32cr::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : UInt32, pbSignedBlob : UInt8*, cbSignedBlob : UInt32, pbDecoded : UInt8*, pcbDecoded : UInt32*, ppSignerCert : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CryptGetMessageSignerCount(dwMsgEncodingType : UInt32, pbSignedBlob : UInt8*, cbSignedBlob : UInt32) : Int32

    fun CryptGetMessageCertificates(dwMsgAndCertEncodingType : UInt32, hCryptProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, dwFlags : UInt32, pbSignedBlob : UInt8*, cbSignedBlob : UInt32) : Win32cr::Security::Cryptography::HCERTSTORE

    fun CryptVerifyDetachedMessageSignature(pVerifyPara : Win32cr::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : UInt32, pbDetachedSignBlob : UInt8*, cbDetachedSignBlob : UInt32, cToBeSigned : UInt32, rgpbToBeSigned : UInt8**, rgcbToBeSigned : UInt32*, ppSignerCert : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CryptEncryptMessage(pEncryptPara : Win32cr::Security::Cryptography::CRYPT_ENCRYPT_MESSAGE_PARA*, cRecipientCert : UInt32, rgpRecipientCert : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbToBeEncrypted : UInt8*, cbToBeEncrypted : UInt32, pbEncryptedBlob : UInt8*, pcbEncryptedBlob : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptDecryptMessage(pDecryptPara : Win32cr::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA*, pbEncryptedBlob : UInt8*, cbEncryptedBlob : UInt32, pbDecrypted : UInt8*, pcbDecrypted : UInt32*, ppXchgCert : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CryptSignAndEncryptMessage(pSignPara : Win32cr::Security::Cryptography::CRYPT_SIGN_MESSAGE_PARA*, pEncryptPara : Win32cr::Security::Cryptography::CRYPT_ENCRYPT_MESSAGE_PARA*, cRecipientCert : UInt32, rgpRecipientCert : Win32cr::Security::Cryptography::CERT_CONTEXT**, pbToBeSignedAndEncrypted : UInt8*, cbToBeSignedAndEncrypted : UInt32, pbSignedAndEncryptedBlob : UInt8*, pcbSignedAndEncryptedBlob : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptDecryptAndVerifyMessageSignature(pDecryptPara : Win32cr::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA*, pVerifyPara : Win32cr::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : UInt32, pbEncryptedBlob : UInt8*, cbEncryptedBlob : UInt32, pbDecrypted : UInt8*, pcbDecrypted : UInt32*, ppXchgCert : Win32cr::Security::Cryptography::CERT_CONTEXT**, ppSignerCert : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CryptDecodeMessage(dwMsgTypeFlags : UInt32, pDecryptPara : Win32cr::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA*, pVerifyPara : Win32cr::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : UInt32, pbEncodedBlob : UInt8*, cbEncodedBlob : UInt32, dwPrevInnerContentType : UInt32, pdwMsgType : UInt32*, pdwInnerContentType : UInt32*, pbDecoded : UInt8*, pcbDecoded : UInt32*, ppXchgCert : Win32cr::Security::Cryptography::CERT_CONTEXT**, ppSignerCert : Win32cr::Security::Cryptography::CERT_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CryptHashMessage(pHashPara : Win32cr::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA*, fDetachedHash : Win32cr::Foundation::BOOL, cToBeHashed : UInt32, rgpbToBeHashed : UInt8**, rgcbToBeHashed : UInt32*, pbHashedBlob : UInt8*, pcbHashedBlob : UInt32*, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptVerifyMessageHash(pHashPara : Win32cr::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA*, pbHashedBlob : UInt8*, cbHashedBlob : UInt32, pbToBeHashed : UInt8*, pcbToBeHashed : UInt32*, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptVerifyDetachedMessageHash(pHashPara : Win32cr::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA*, pbDetachedHashBlob : UInt8*, cbDetachedHashBlob : UInt32, cToBeHashed : UInt32, rgpbToBeHashed : UInt8**, rgcbToBeHashed : UInt32*, pbComputedHash : UInt8*, pcbComputedHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptSignMessageWithKey(pSignPara : Win32cr::Security::Cryptography::CRYPT_KEY_SIGN_MESSAGE_PARA*, pbToBeSigned : UInt8*, cbToBeSigned : UInt32, pbSignedBlob : UInt8*, pcbSignedBlob : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptVerifyMessageSignatureWithKey(pVerifyPara : Win32cr::Security::Cryptography::CRYPT_KEY_VERIFY_MESSAGE_PARA*, pPublicKeyInfo : Win32cr::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, pbSignedBlob : UInt8*, cbSignedBlob : UInt32, pbDecoded : UInt8*, pcbDecoded : UInt32*) : Win32cr::Foundation::BOOL

    fun CertOpenSystemStoreA(hProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, szSubsystemProtocol : Win32cr::Foundation::PSTR) : Win32cr::Security::Cryptography::HCERTSTORE

    # Commented out due to being part of LibC
    #fun CertOpenSystemStoreW(hProv : Win32cr::Security::Cryptography::HCRYPTPROV_LEGACY, szSubsystemProtocol : Win32cr::Foundation::PWSTR) : Win32cr::Security::Cryptography::HCERTSTORE

    fun CertAddEncodedCertificateToSystemStoreA(szCertStoreName : Win32cr::Foundation::PSTR, pbCertEncoded : UInt8*, cbCertEncoded : UInt32) : Win32cr::Foundation::BOOL

    fun CertAddEncodedCertificateToSystemStoreW(szCertStoreName : Win32cr::Foundation::PWSTR, pbCertEncoded : UInt8*, cbCertEncoded : UInt32) : Win32cr::Foundation::BOOL

    fun FindCertsByIssuer(pCertChains : Win32cr::Security::Cryptography::CERT_CHAIN*, pcbCertChains : UInt32*, pcCertChains : UInt32*, pbEncodedIssuerName : UInt8*, cbEncodedIssuerName : UInt32, pwszPurpose : Win32cr::Foundation::PWSTR, dwKeySpec : UInt32) : Win32cr::Foundation::HRESULT

    fun CryptQueryObject(dwObjectType : Win32cr::Security::Cryptography::CERT_QUERY_OBJECT_TYPE, pvObject : Void*, dwExpectedContentTypeFlags : Win32cr::Security::Cryptography::CERT_QUERY_CONTENT_TYPE_FLAGS, dwExpectedFormatTypeFlags : Win32cr::Security::Cryptography::CERT_QUERY_FORMAT_TYPE_FLAGS, dwFlags : UInt32, pdwMsgAndCertEncodingType : Win32cr::Security::Cryptography::CERT_QUERY_ENCODING_TYPE*, pdwContentType : Win32cr::Security::Cryptography::CERT_QUERY_CONTENT_TYPE*, pdwFormatType : Win32cr::Security::Cryptography::CERT_QUERY_FORMAT_TYPE*, phCertStore : Win32cr::Security::Cryptography::HCERTSTORE*, phMsg : Void**, ppvContext : Void**) : Win32cr::Foundation::BOOL

    fun CryptMemAlloc(cbSize : UInt32) : Void*

    fun CryptMemRealloc(pv : Void*, cbSize : UInt32) : Void*

    fun CryptMemFree(pv : Void*) : Void

    fun CryptCreateAsyncHandle(dwFlags : UInt32, phAsync : Win32cr::Security::Cryptography::HCRYPTASYNC*) : Win32cr::Foundation::BOOL

    fun CryptSetAsyncParam(hAsync : Win32cr::Security::Cryptography::HCRYPTASYNC, pszParamOid : Win32cr::Foundation::PSTR, pvParam : Void*, pfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) : Win32cr::Foundation::BOOL

    fun CryptGetAsyncParam(hAsync : Win32cr::Security::Cryptography::HCRYPTASYNC, pszParamOid : Win32cr::Foundation::PSTR, ppvParam : Void**, ppfnFree : Win32cr::Security::Cryptography::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*) : Win32cr::Foundation::BOOL

    fun CryptCloseAsyncHandle(hAsync : Win32cr::Security::Cryptography::HCRYPTASYNC) : Win32cr::Foundation::BOOL

    fun CryptRetrieveObjectByUrlA(pszUrl : Win32cr::Foundation::PSTR, pszObjectOid : Win32cr::Foundation::PSTR, dwRetrievalFlags : UInt32, dwTimeout : UInt32, ppvObject : Void**, hAsyncRetrieve : Win32cr::Security::Cryptography::HCRYPTASYNC, pCredentials : Win32cr::Security::Cryptography::CRYPT_CREDENTIALS*, pvVerify : Void*, pAuxInfo : Win32cr::Security::Cryptography::CRYPT_RETRIEVE_AUX_INFO*) : Win32cr::Foundation::BOOL

    fun CryptRetrieveObjectByUrlW(pszUrl : Win32cr::Foundation::PWSTR, pszObjectOid : Win32cr::Foundation::PSTR, dwRetrievalFlags : UInt32, dwTimeout : UInt32, ppvObject : Void**, hAsyncRetrieve : Win32cr::Security::Cryptography::HCRYPTASYNC, pCredentials : Win32cr::Security::Cryptography::CRYPT_CREDENTIALS*, pvVerify : Void*, pAuxInfo : Win32cr::Security::Cryptography::CRYPT_RETRIEVE_AUX_INFO*) : Win32cr::Foundation::BOOL

    fun CryptInstallCancelRetrieval(pfnCancel : Win32cr::Security::Cryptography::PFN_CRYPT_CANCEL_RETRIEVAL, pvArg : Void*, dwFlags : UInt32, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CryptUninstallCancelRetrieval(dwFlags : UInt32, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CryptGetObjectUrl(pszUrlOid : Win32cr::Foundation::PSTR, pvPara : Void*, dwFlags : Win32cr::Security::Cryptography::CRYPT_GET_URL_FLAGS, pUrlArray : Win32cr::Security::Cryptography::CRYPT_URL_ARRAY*, pcbUrlArray : UInt32*, pUrlInfo : Win32cr::Security::Cryptography::CRYPT_URL_INFO*, pcbUrlInfo : UInt32*, pvReserved : Void*) : Win32cr::Foundation::BOOL

    fun CertCreateSelfSignCertificate(hCryptProvOrNCryptKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pSubjectIssuerBlob : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwFlags : Win32cr::Security::Cryptography::CERT_CREATE_SELFSIGN_FLAGS, pKeyProvInfo : Win32cr::Security::Cryptography::CRYPT_KEY_PROV_INFO*, pSignatureAlgorithm : Win32cr::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, pStartTime : Win32cr::Foundation::SYSTEMTIME*, pEndTime : Win32cr::Foundation::SYSTEMTIME*, pExtensions : Win32cr::Security::Cryptography::CERT_EXTENSIONS*) : Win32cr::Security::Cryptography::CERT_CONTEXT*

    fun CryptGetKeyIdentifierProperty(pKeyIdentifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwPropId : UInt32, dwFlags : UInt32, pwszComputerName : Win32cr::Foundation::PWSTR, pvReserved : Void*, pvData : Void*, pcbData : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptSetKeyIdentifierProperty(pKeyIdentifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwPropId : UInt32, dwFlags : UInt32, pwszComputerName : Win32cr::Foundation::PWSTR, pvReserved : Void*, pvData : Void*) : Win32cr::Foundation::BOOL

    fun CryptEnumKeyIdentifierProperties(pKeyIdentifier : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, dwPropId : UInt32, dwFlags : UInt32, pwszComputerName : Win32cr::Foundation::PWSTR, pvReserved : Void*, pvArg : Void*, pfnEnum : Win32cr::Security::Cryptography::PFN_CRYPT_ENUM_KEYID_PROP) : Win32cr::Foundation::BOOL

    fun CryptCreateKeyIdentifierFromCSP(dwCertEncodingType : UInt32, pszPubKeyOID : Win32cr::Foundation::PSTR, pPubKeyStruc : Win32cr::Security::Cryptography::PUBLICKEYSTRUC*, cbPubKeyStruc : UInt32, dwFlags : UInt32, pvReserved : Void*, pbHash : UInt8*, pcbHash : UInt32*) : Win32cr::Foundation::BOOL

    fun CertCreateCertificateChainEngine(pConfig : Win32cr::Security::Cryptography::CERT_CHAIN_ENGINE_CONFIG*, phChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE*) : Win32cr::Foundation::BOOL

    fun CertFreeCertificateChainEngine(hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE) : Void

    fun CertResyncCertificateChainEngine(hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE) : Win32cr::Foundation::BOOL

    fun CertGetCertificateChain(hChainEngine : Win32cr::Security::Cryptography::HCERTCHAINENGINE, pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, pTime : Win32cr::Foundation::FILETIME*, hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE, pChainPara : Win32cr::Security::Cryptography::CERT_CHAIN_PARA*, dwFlags : UInt32, pvReserved : Void*, ppChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT**) : Win32cr::Foundation::BOOL

    fun CertFreeCertificateChain(pChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*) : Void

    fun CertDuplicateCertificateChain(pChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*) : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*

    fun CertFindChainInStore(hCertStore : Win32cr::Security::Cryptography::HCERTSTORE, dwCertEncodingType : UInt32, dwFindFlags : Win32cr::Security::Cryptography::CERT_FIND_CHAIN_IN_STORE_FLAGS, dwFindType : UInt32, pvFindPara : Void*, pPrevChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*) : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*

    fun CertVerifyCertificateChainPolicy(pszPolicyOID : Win32cr::Foundation::PSTR, pChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*, pPolicyPara : Win32cr::Security::Cryptography::CERT_CHAIN_POLICY_PARA*, pPolicyStatus : Win32cr::Security::Cryptography::CERT_CHAIN_POLICY_STATUS*) : Win32cr::Foundation::BOOL

    fun CryptStringToBinaryA(pszString : UInt8*, cchString : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_STRING, pbBinary : UInt8*, pcbBinary : UInt32*, pdwSkip : UInt32*, pdwFlags : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptStringToBinaryW(pszString : UInt16*, cchString : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_STRING, pbBinary : UInt8*, pcbBinary : UInt32*, pdwSkip : UInt32*, pdwFlags : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptBinaryToStringA(pbBinary : UInt8*, cbBinary : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_STRING, pszString : UInt8*, pcchString : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptBinaryToStringW(pbBinary : UInt8*, cbBinary : UInt32, dwFlags : Win32cr::Security::Cryptography::CRYPT_STRING, pszString : UInt16*, pcchString : UInt32*) : Win32cr::Foundation::BOOL

    fun PFXImportCertStore(pPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, szPassword : Win32cr::Foundation::PWSTR, dwFlags : Win32cr::Security::Cryptography::CRYPT_KEY_FLAGS) : Win32cr::Security::Cryptography::HCERTSTORE

    fun PFXIsPFXBlob(pPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun PFXVerifyPassword(pPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, szPassword : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun PFXExportCertStoreEx(hStore : Win32cr::Security::Cryptography::HCERTSTORE, pPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, szPassword : Win32cr::Foundation::PWSTR, pvPara : Void*, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun PFXExportCertStore(hStore : Win32cr::Security::Cryptography::HCERTSTORE, pPFX : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, szPassword : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CertOpenServerOcspResponse(pChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*, dwFlags : UInt32, pOpenPara : Win32cr::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_OPEN_PARA*) : Void*

    fun CertAddRefServerOcspResponse(hServerOcspResponse : Void*) : Void

    fun CertCloseServerOcspResponse(hServerOcspResponse : Void*, dwFlags : UInt32) : Void

    fun CertGetServerOcspResponseContext(hServerOcspResponse : Void*, dwFlags : UInt32, pvReserved : Void*) : Win32cr::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT*

    fun CertAddRefServerOcspResponseContext(pServerOcspResponseContext : Win32cr::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT*) : Void

    fun CertFreeServerOcspResponseContext(pServerOcspResponseContext : Win32cr::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT*) : Void

    fun CertRetrieveLogoOrBiometricInfo(pCertContext : Win32cr::Security::Cryptography::CERT_CONTEXT*, lpszLogoOrBiometricType : Win32cr::Foundation::PSTR, dwRetrievalFlags : UInt32, dwTimeout : UInt32, dwFlags : UInt32, pvReserved : Void*, ppbData : UInt8**, pcbData : UInt32*, ppwszMimeType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::BOOL

    fun CertSelectCertificateChains(pSelectionContext : LibC::GUID*, dwFlags : UInt32, pChainParameters : Win32cr::Security::Cryptography::CERT_SELECT_CHAIN_PARA*, cCriteria : UInt32, rgpCriteria : Win32cr::Security::Cryptography::CERT_SELECT_CRITERIA*, hStore : Win32cr::Security::Cryptography::HCERTSTORE, pcSelection : UInt32*, pprgpSelection : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT***) : Win32cr::Foundation::BOOL

    fun CertFreeCertificateChainList(prgpSelection : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT**) : Void

    fun CryptRetrieveTimeStamp(wszUrl : Win32cr::Foundation::PWSTR, dwRetrievalFlags : UInt32, dwTimeout : UInt32, pszHashId : Win32cr::Foundation::PSTR, pPara : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_PARA*, pbData : UInt8*, cbData : UInt32, ppTsContext : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_CONTEXT**, ppTsSigner : Win32cr::Security::Cryptography::CERT_CONTEXT**, phStore : Win32cr::Security::Cryptography::HCERTSTORE*) : Win32cr::Foundation::BOOL

    fun CryptVerifyTimeStampSignature(pbTSContentInfo : UInt8*, cbTSContentInfo : UInt32, pbData : UInt8*, cbData : UInt32, hAdditionalStore : Win32cr::Security::Cryptography::HCERTSTORE, ppTsContext : Win32cr::Security::Cryptography::CRYPT_TIMESTAMP_CONTEXT**, ppTsSigner : Win32cr::Security::Cryptography::CERT_CONTEXT**, phStore : Win32cr::Security::Cryptography::HCERTSTORE*) : Win32cr::Foundation::BOOL

    fun CertIsWeakHash(dwHashUseType : UInt32, pwszCNGHashAlgid : Win32cr::Foundation::PWSTR, dwChainFlags : UInt32, pSignerChainContext : Win32cr::Security::Cryptography::CERT_CHAIN_CONTEXT*, pTimeStamp : Win32cr::Foundation::FILETIME*, pwszFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun CryptProtectData(pDataIn : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, szDataDescr : Win32cr::Foundation::PWSTR, pOptionalEntropy : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pvReserved : Void*, pPromptStruct : Win32cr::Security::Cryptography::CRYPTPROTECT_PROMPTSTRUCT*, dwFlags : UInt32, pDataOut : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CryptUnprotectData(pDataIn : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, ppszDataDescr : Win32cr::Foundation::PWSTR*, pOptionalEntropy : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*, pvReserved : Void*, pPromptStruct : Win32cr::Security::Cryptography::CRYPTPROTECT_PROMPTSTRUCT*, dwFlags : UInt32, pDataOut : Win32cr::Security::Cryptography::CRYPTOAPI_BLOB*) : Win32cr::Foundation::BOOL

    fun CryptUpdateProtectedState(pOldSid : Win32cr::Foundation::PSID, pwszOldPassword : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pdwSuccessCount : UInt32*, pdwFailureCount : UInt32*) : Win32cr::Foundation::BOOL

    fun CryptProtectMemory(pDataIn : Void*, cbDataIn : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun CryptUnprotectMemory(pDataIn : Void*, cbDataIn : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun NCryptRegisterProtectionDescriptorName(pwszName : Win32cr::Foundation::PWSTR, pwszDescriptorString : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptQueryProtectionDescriptorName(pwszName : Win32cr::Foundation::PWSTR, pwszDescriptorString : UInt16*, pcDescriptorString : LibC::UIntPtrT*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun NCryptCreateProtectionDescriptor(pwszDescriptorString : Win32cr::Foundation::PWSTR, dwFlags : UInt32, phDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE*) : Win32cr::Foundation::HRESULT

    fun NCryptCloseProtectionDescriptor(hDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE) : Win32cr::Foundation::HRESULT

    fun NCryptGetProtectionDescriptorInfo(hDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE, pMemPara : Win32cr::Security::Cryptography::NCRYPT_ALLOC_PARA*, dwInfoType : UInt32, ppvInfo : Void**) : Win32cr::Foundation::HRESULT

    fun NCryptProtectSecret(hDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE, dwFlags : UInt32, pbData : UInt8*, cbData : UInt32, pMemPara : Win32cr::Security::Cryptography::NCRYPT_ALLOC_PARA*, hWnd : Win32cr::Foundation::HWND, ppbProtectedBlob : UInt8**, pcbProtectedBlob : UInt32*) : Win32cr::Foundation::HRESULT

    fun NCryptUnprotectSecret(phDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE*, dwFlags : Win32cr::Security::Cryptography::NCRYPT_FLAGS, pbProtectedBlob : UInt8*, cbProtectedBlob : UInt32, pMemPara : Win32cr::Security::Cryptography::NCRYPT_ALLOC_PARA*, hWnd : Win32cr::Foundation::HWND, ppbData : UInt8**, pcbData : UInt32*) : Win32cr::Foundation::HRESULT

    fun NCryptStreamOpenToProtect(hDescriptor : Win32cr::Security::NCRYPT_DESCRIPTOR_HANDLE, dwFlags : UInt32, hWnd : Win32cr::Foundation::HWND, pStreamInfo : Win32cr::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO*, phStream : Win32cr::Security::NCRYPT_STREAM_HANDLE*) : Win32cr::Foundation::HRESULT

    fun NCryptStreamOpenToUnprotect(pStreamInfo : Win32cr::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO*, dwFlags : UInt32, hWnd : Win32cr::Foundation::HWND, phStream : Win32cr::Security::NCRYPT_STREAM_HANDLE*) : Win32cr::Foundation::HRESULT

    fun NCryptStreamOpenToUnprotectEx(pStreamInfo : Win32cr::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO_EX*, dwFlags : UInt32, hWnd : Win32cr::Foundation::HWND, phStream : Win32cr::Security::NCRYPT_STREAM_HANDLE*) : Win32cr::Foundation::HRESULT

    fun NCryptStreamUpdate(hStream : Win32cr::Security::NCRYPT_STREAM_HANDLE, pbData : UInt8*, cbData : LibC::UIntPtrT, fFinal : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    fun NCryptStreamClose(hStream : Win32cr::Security::NCRYPT_STREAM_HANDLE) : Win32cr::Foundation::HRESULT

    fun CryptXmlClose(hCryptXml : Void*) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetTransforms(ppConfig : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG**) : Win32cr::Foundation::HRESULT

    fun CryptXmlOpenToEncode(pConfig : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG*, dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS, wszId : Win32cr::Foundation::PWSTR, rgProperty : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY*, cProperty : UInt32, pEncoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB*, phSignature : Void**) : Win32cr::Foundation::HRESULT

    fun CryptXmlOpenToDecode(pConfig : Win32cr::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG*, dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS, rgProperty : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY*, cProperty : UInt32, pEncoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB*, phCryptXml : Void**) : Win32cr::Foundation::HRESULT

    fun CryptXmlAddObject(hSignatureOrObject : Void*, dwFlags : UInt32, rgProperty : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY*, cProperty : UInt32, pEncoded : Win32cr::Security::Cryptography::CRYPT_XML_BLOB*, ppObject : Win32cr::Security::Cryptography::CRYPT_XML_OBJECT**) : Win32cr::Foundation::HRESULT

    fun CryptXmlCreateReference(hCryptXml : Void*, dwFlags : UInt32, wszId : Win32cr::Foundation::PWSTR, wszURI : Win32cr::Foundation::PWSTR, wszType : Win32cr::Foundation::PWSTR, pDigestMethod : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, cTransform : UInt32, rgTransform : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, phReference : Void**) : Win32cr::Foundation::HRESULT

    fun CryptXmlDigestReference(hReference : Void*, dwFlags : UInt32, pDataProviderIn : Win32cr::Security::Cryptography::CRYPT_XML_DATA_PROVIDER*) : Win32cr::Foundation::HRESULT

    fun CryptXmlSetHMACSecret(hSignature : Void*, pbSecret : UInt8*, cbSecret : UInt32) : Win32cr::Foundation::HRESULT

    fun CryptXmlSign(hSignature : Void*, hKey : Win32cr::Security::Cryptography::HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec : Win32cr::Security::Cryptography::CERT_KEY_SPEC, dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS, dwKeyInfoSpec : Win32cr::Security::Cryptography::CRYPT_XML_KEYINFO_SPEC, pvKeyInfoSpec : Void*, pSignatureMethod : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, pCanonicalization : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*) : Win32cr::Foundation::HRESULT

    fun CryptXmlImportPublicKey(dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS, pKeyValue : Win32cr::Security::Cryptography::CRYPT_XML_KEY_VALUE*, phKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE*) : Win32cr::Foundation::HRESULT

    fun CryptXmlVerifySignature(hSignature : Void*, hKey : Win32cr::Security::Cryptography::BCRYPT_KEY_HANDLE, dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetDocContext(hCryptXml : Void*, ppStruct : Win32cr::Security::Cryptography::CRYPT_XML_DOC_CTXT**) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetSignature(hCryptXml : Void*, ppStruct : Win32cr::Security::Cryptography::CRYPT_XML_SIGNATURE**) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetReference(hCryptXml : Void*, ppStruct : Win32cr::Security::Cryptography::CRYPT_XML_REFERENCE**) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetStatus(hCryptXml : Void*, pStatus : Win32cr::Security::Cryptography::CRYPT_XML_STATUS*) : Win32cr::Foundation::HRESULT

    fun CryptXmlEncode(hCryptXml : Void*, dwCharset : Win32cr::Security::Cryptography::CRYPT_XML_CHARSET, rgProperty : Win32cr::Security::Cryptography::CRYPT_XML_PROPERTY*, cProperty : UInt32, pvCallbackState : Void*, pfnWrite : Win32cr::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK) : Win32cr::Foundation::HRESULT

    fun CryptXmlGetAlgorithmInfo(pXmlAlgorithm : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM*, dwFlags : Win32cr::Security::Cryptography::CRYPT_XML_FLAGS, ppAlgInfo : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO**) : Win32cr::Foundation::HRESULT

    fun CryptXmlFindAlgorithmInfo(dwFindByType : UInt32, pvFindBy : Void*, dwGroupId : UInt32, dwFlags : UInt32) : Win32cr::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*

    fun CryptXmlEnumAlgorithmInfo(dwGroupId : UInt32, dwFlags : UInt32, pvArg : Void*, pfnEnumAlgInfo : Win32cr::Security::Cryptography::PFN_CRYPT_XML_ENUM_ALG_INFO) : Win32cr::Foundation::HRESULT

    fun GetToken(cPolicyChain : UInt32, pPolicyChain : Win32cr::Security::Cryptography::POLICY_ELEMENT*, securityToken : Win32cr::Security::Cryptography::GENERIC_XML_TOKEN**, phProofTokenCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE**) : Win32cr::Foundation::HRESULT

    fun ManageCardSpace : Win32cr::Foundation::HRESULT

    fun ImportInformationCard(fileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT

    fun Encrypt(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, fOAEP : Win32cr::Foundation::BOOL, cbInData : UInt32, pInData : UInt8*, pcbOutData : UInt32*, ppOutData : UInt8**) : Win32cr::Foundation::HRESULT

    fun Decrypt(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, fOAEP : Win32cr::Foundation::BOOL, cbInData : UInt32, pInData : UInt8*, pcbOutData : UInt32*, ppOutData : UInt8**) : Win32cr::Foundation::HRESULT

    fun SignHash(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbHash : UInt32, pHash : UInt8*, hashAlgOid : Win32cr::Foundation::PWSTR, pcbSig : UInt32*, ppSig : UInt8**) : Win32cr::Foundation::HRESULT

    fun VerifyHash(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbHash : UInt32, pHash : UInt8*, hashAlgOid : Win32cr::Foundation::PWSTR, cbSig : UInt32, pSig : UInt8*, pfVerified : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun GetCryptoTransform(hSymmetricCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, mode : UInt32, padding : Win32cr::Security::Cryptography::PaddingMode, feedbackSize : UInt32, direction : Win32cr::Security::Cryptography::Direction, cbIV : UInt32, pIV : UInt8*, pphTransform : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE**) : Win32cr::Foundation::HRESULT

    fun GetKeyedHash(hSymmetricCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, pphHash : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE**) : Win32cr::Foundation::HRESULT

    fun TransformBlock(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : UInt32, pInData : UInt8*, pcbOutData : UInt32*, ppOutData : UInt8**) : Win32cr::Foundation::HRESULT

    fun TransformFinalBlock(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : UInt32, pInData : UInt8*, pcbOutData : UInt32*, ppOutData : UInt8**) : Win32cr::Foundation::HRESULT

    fun HashCore(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : UInt32, pInData : UInt8*) : Win32cr::Foundation::HRESULT

    fun HashFinal(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : UInt32, pInData : UInt8*, pcbOutData : UInt32*, ppOutData : UInt8**) : Win32cr::Foundation::HRESULT

    fun FreeToken(pAllocMemory : Win32cr::Security::Cryptography::GENERIC_XML_TOKEN*) : Win32cr::Foundation::BOOL

    fun CloseCryptoHandle(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*) : Win32cr::Foundation::HRESULT

    fun GenerateDerivedKey(hCrypto : Win32cr::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE*, cbLabel : UInt32, pLabel : UInt8*, cbNonce : UInt32, pNonce : UInt8*, derivedKeyLength : UInt32, offset : UInt32, algId : Win32cr::Foundation::PWSTR, pcbKey : UInt32*, ppKey : UInt8**) : Win32cr::Foundation::HRESULT

    fun GetBrowserToken(dwParamType : UInt32, pParam : Void*, pcbToken : UInt32*, ppToken : UInt8**) : Win32cr::Foundation::HRESULT

  end
end