require "../foundation.cr"
require "../system/registry.cr"
require "../security.cr"
require "../system/com.cr"

@[Link("delayimp")]
@[Link("user32")]
@[Link(ldflags: "/IGNORE:4199")]
@[Link(ldflags: "/DELAYLOAD:advapi32.dll")]
@[Link(ldflags: "/DELAYLOAD:bcrypt.dll")]
@[Link(ldflags: "/DELAYLOAD:ncrypt.dll")]
@[Link(ldflags: "/DELAYLOAD:crypt32.dll")]
@[Link(ldflags: "/DELAYLOAD:wintrust.dll")]
@[Link(ldflags: "/DELAYLOAD:cryptnet.dll")]
@[Link(ldflags: "/DELAYLOAD:cryptxml.dll")]
@[Link(ldflags: "/DELAYLOAD:infocardapi.dll")]
lib LibWin32
  alias HCRYPTASYNC = LibC::IntPtrT
  alias HCERTCHAINENGINE = LibC::IntPtrT
  alias BCRYPT_ALG_HANDLE = LibC::IntPtrT
  alias BCRYPT_KEY_HANDLE = LibC::IntPtrT

  CERT_COMPARE_SHIFT = 16_i32
  BCRYPT_OBJECT_ALIGNMENT = 16_u32
  KDF_HASH_ALGORITHM = 0_u32
  KDF_SECRET_PREPEND = 1_u32
  KDF_SECRET_APPEND = 2_u32
  KDF_HMAC_KEY = 3_u32
  KDF_TLS_PRF_LABEL = 4_u32
  KDF_TLS_PRF_SEED = 5_u32
  KDF_SECRET_HANDLE = 6_u32
  KDF_TLS_PRF_PROTOCOL = 7_u32
  KDF_ALGORITHMID = 8_u32
  KDF_PARTYUINFO = 9_u32
  KDF_PARTYVINFO = 10_u32
  KDF_SUPPPUBINFO = 11_u32
  KDF_SUPPPRIVINFO = 12_u32
  KDF_LABEL = 13_u32
  KDF_CONTEXT = 14_u32
  KDF_SALT = 15_u32
  KDF_ITERATION_COUNT = 16_u32
  KDF_GENERIC_PARAMETER = 17_u32
  KDF_KEYBITLENGTH = 18_u32
  KDF_HKDF_SALT = 19_u32
  KDF_HKDF_INFO = 20_u32
  KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1_u32
  BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1_u32
  BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1_u32
  BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2_u32
  BCRYPT_SUPPORTED_PAD_ROUTER = 1_u32
  BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2_u32
  BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4_u32
  BCRYPT_SUPPORTED_PAD_OAEP = 8_u32
  BCRYPT_SUPPORTED_PAD_PSS = 16_u32
  BCRYPT_BLOCK_PADDING = 1_u32
  BCRYPT_GENERATE_IV = 32_u32
  BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16_u32
  BCRYPTBUFFER_VERSION = 0_u32
  BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005_u32
  BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221_u32
  BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437_u32
  BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653_u32
  BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869_u32
  BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085_u32
  BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701_u32
  BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997_u32
  BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293_u32
  BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509_u32
  BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725_u32
  BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941_u32
  BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157_u32
  BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373_u32
  BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949_u32
  BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245_u32
  BCRYPT_ECC_FULLKEY_BLOB_V1 = 1_u32
  BCRYPT_DH_PARAMETERS_MAGIC = 1297107012_u32
  BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724_u32
  BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444_u32
  BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491_u32
  BCRYPT_KEY_DATA_BLOB_VERSION1 = 1_u32
  BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828_u32
  BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620_u32
  BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413_u32
  BCRYPT_KEY_DERIVATION_INTERFACE = 7_u32
  BCRYPT_MD2_ALG_HANDLE = 1_u32
  BCRYPT_MD4_ALG_HANDLE = 17_u32
  BCRYPT_MD5_ALG_HANDLE = 33_u32
  BCRYPT_SHA1_ALG_HANDLE = 49_u32
  BCRYPT_SHA256_ALG_HANDLE = 65_u32
  BCRYPT_SHA384_ALG_HANDLE = 81_u32
  BCRYPT_SHA512_ALG_HANDLE = 97_u32
  BCRYPT_RC4_ALG_HANDLE = 113_u32
  BCRYPT_RNG_ALG_HANDLE = 129_u32
  BCRYPT_HMAC_MD5_ALG_HANDLE = 145_u32
  BCRYPT_HMAC_SHA1_ALG_HANDLE = 161_u32
  BCRYPT_HMAC_SHA256_ALG_HANDLE = 177_u32
  BCRYPT_HMAC_SHA384_ALG_HANDLE = 193_u32
  BCRYPT_HMAC_SHA512_ALG_HANDLE = 209_u32
  BCRYPT_RSA_ALG_HANDLE = 225_u32
  BCRYPT_ECDSA_ALG_HANDLE = 241_u32
  BCRYPT_AES_CMAC_ALG_HANDLE = 257_u32
  BCRYPT_AES_GMAC_ALG_HANDLE = 273_u32
  BCRYPT_HMAC_MD2_ALG_HANDLE = 289_u32
  BCRYPT_HMAC_MD4_ALG_HANDLE = 305_u32
  BCRYPT_3DES_CBC_ALG_HANDLE = 321_u32
  BCRYPT_3DES_ECB_ALG_HANDLE = 337_u32
  BCRYPT_3DES_CFB_ALG_HANDLE = 353_u32
  BCRYPT_3DES_112_CBC_ALG_HANDLE = 369_u32
  BCRYPT_3DES_112_ECB_ALG_HANDLE = 385_u32
  BCRYPT_3DES_112_CFB_ALG_HANDLE = 401_u32
  BCRYPT_AES_CBC_ALG_HANDLE = 417_u32
  BCRYPT_AES_ECB_ALG_HANDLE = 433_u32
  BCRYPT_AES_CFB_ALG_HANDLE = 449_u32
  BCRYPT_AES_CCM_ALG_HANDLE = 465_u32
  BCRYPT_AES_GCM_ALG_HANDLE = 481_u32
  BCRYPT_DES_CBC_ALG_HANDLE = 497_u32
  BCRYPT_DES_ECB_ALG_HANDLE = 513_u32
  BCRYPT_DES_CFB_ALG_HANDLE = 529_u32
  BCRYPT_DESX_CBC_ALG_HANDLE = 545_u32
  BCRYPT_DESX_ECB_ALG_HANDLE = 561_u32
  BCRYPT_DESX_CFB_ALG_HANDLE = 577_u32
  BCRYPT_RC2_CBC_ALG_HANDLE = 593_u32
  BCRYPT_RC2_ECB_ALG_HANDLE = 609_u32
  BCRYPT_RC2_CFB_ALG_HANDLE = 625_u32
  BCRYPT_DH_ALG_HANDLE = 641_u32
  BCRYPT_ECDH_ALG_HANDLE = 657_u32
  BCRYPT_ECDH_P256_ALG_HANDLE = 673_u32
  BCRYPT_ECDH_P384_ALG_HANDLE = 689_u32
  BCRYPT_ECDH_P521_ALG_HANDLE = 705_u32
  BCRYPT_DSA_ALG_HANDLE = 721_u32
  BCRYPT_ECDSA_P256_ALG_HANDLE = 737_u32
  BCRYPT_ECDSA_P384_ALG_HANDLE = 753_u32
  BCRYPT_ECDSA_P521_ALG_HANDLE = 769_u32
  BCRYPT_RSA_SIGN_ALG_HANDLE = 785_u32
  BCRYPT_CAPI_KDF_ALG_HANDLE = 801_u32
  BCRYPT_PBKDF2_ALG_HANDLE = 817_u32
  BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE = 833_u32
  BCRYPT_SP80056A_CONCAT_ALG_HANDLE = 849_u32
  BCRYPT_TLS1_1_KDF_ALG_HANDLE = 865_u32
  BCRYPT_TLS1_2_KDF_ALG_HANDLE = 881_u32
  BCRYPT_XTS_AES_ALG_HANDLE = 897_u32
  BCRYPT_HKDF_ALG_HANDLE = 913_u32
  BCRYPT_CHACHA20_POLY1305_ALG_HANDLE = 929_u32
  BCRYPT_CAPI_AES_FLAG = 16_u32
  BCRYPT_MULTI_FLAG = 64_u32
  BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4_u32
  BCRYPT_BUFFERS_LOCKED_FLAG = 64_u32
  BCRYPT_EXTENDED_KEYSIZE = 128_u32
  BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256_u32
  BCRYPT_KEY_DERIVATION_OPERATION = 64_u32
  BCRYPT_PUBLIC_KEY_FLAG = 1_u32
  BCRYPT_PRIVATE_KEY_FLAG = 2_u32
  BCRYPT_NO_KEY_VALIDATION = 8_u32
  BCRYPT_KEY_VALIDATION_RANGE = 16_u32
  BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24_u32
  BCRYPT_KEY_VALIDATION_REGENERATE = 32_u32
  BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1_u32
  BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2_u32
  BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2_u32
  CRYPT_OVERWRITE = 1_u32
  CRYPT_PRIORITY_TOP = 0_u32
  CRYPT_PRIORITY_BOTTOM = 4294967295_u32
  CRYPT_XML_BLOB_MAX = 2147483640_u32
  CRYPT_XML_ID_MAX = 256_u32
  CRYPT_XML_SIGNATURES_MAX = 16_u32
  CRYPT_XML_TRANSFORM_MAX = 16_u32
  CRYPT_XML_SIGNATURE_VALUE_MAX = 2048_u32
  CRYPT_XML_DIGEST_VALUE_MAX = 128_u32
  CRYPT_XML_OBJECTS_MAX = 256_u32
  CRYPT_XML_REFERENCES_MAX = 32760_u32
  CRYPT_XML_E_BASE = -2146885376_i32
  CRYPT_XML_E_LARGE = -2146885375_i32
  CRYPT_XML_E_TOO_MANY_TRANSFORMS = -2146885374_i32
  CRYPT_XML_E_ENCODING = -2146885373_i32
  CRYPT_XML_E_ALGORITHM = -2146885372_i32
  CRYPT_XML_E_TRANSFORM = -2146885371_i32
  CRYPT_XML_E_HANDLE = -2146885370_i32
  CRYPT_XML_E_OPERATION = -2146885369_i32
  CRYPT_XML_E_UNRESOLVED_REFERENCE = -2146885368_i32
  CRYPT_XML_E_INVALID_DIGEST = -2146885367_i32
  CRYPT_XML_E_INVALID_SIGNATURE = -2146885366_i32
  CRYPT_XML_E_HASH_FAILED = -2146885365_i32
  CRYPT_XML_E_SIGN_FAILED = -2146885364_i32
  CRYPT_XML_E_VERIFY_FAILED = -2146885363_i32
  CRYPT_XML_E_TOO_MANY_SIGNATURES = -2146885362_i32
  CRYPT_XML_E_INVALID_KEYVALUE = -2146885361_i32
  CRYPT_XML_E_UNEXPECTED_XML = -2146885360_i32
  CRYPT_XML_E_SIGNER = -2146885359_i32
  CRYPT_XML_E_NON_UNIQUE_ID = -2146885358_i32
  CRYPT_XML_E_LAST = -2146885358_i32
  CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT = 1073741824_u32
  CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT = 536870912_u32
  CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT = 134217728_u32
  CRYPT_XML_FLAG_ECDSA_DSIG11 = 67108864_u32
  CRYPT_XML_STATUS_NO_ERROR = 0_u32
  CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY = 1_u32
  CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT = 1_u32
  CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED = 1_u32
  CRYPT_XML_GROUP_ID_HASH = 1_u32
  CRYPT_XML_GROUP_ID_SIGN = 2_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI = 1_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME = 2_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID = 3_u32
  CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID = 4_u32
  CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1_u32
  CRYPTPROTECT_PROMPT_ON_PROTECT = 2_u32
  CRYPTPROTECT_PROMPT_RESERVED = 4_u32
  CRYPTPROTECT_PROMPT_STRONG = 8_u32
  CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16_u32
  CRYPTPROTECT_UI_FORBIDDEN = 1_u32
  CRYPTPROTECT_LOCAL_MACHINE = 4_u32
  CRYPTPROTECT_CRED_SYNC = 8_u32
  CRYPTPROTECT_AUDIT = 16_u32
  CRYPTPROTECT_NO_RECOVERY = 32_u32
  CRYPTPROTECT_VERIFY_PROTECTION = 64_u32
  CRYPTPROTECT_CRED_REGENERATE = 128_u32
  CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455_u32
  CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295_u32
  CRYPTPROTECTMEMORY_BLOCK_SIZE = 16_u32
  CRYPTPROTECTMEMORY_SAME_PROCESS = 0_u32
  CRYPTPROTECTMEMORY_CROSS_PROCESS = 1_u32
  CRYPTPROTECTMEMORY_SAME_LOGON = 2_u32
  NCRYPT_MAX_KEY_NAME_LENGTH = 512_u32
  NCRYPT_MAX_ALG_ID_LENGTH = 512_u32
  NCRYPT_KEY_DERIVATION_INTERFACE = 7_u32
  NCRYPT_KEY_PROTECTION_INTERFACE = 65540_u32
  NCRYPTBUFFER_VERSION = 0_u32
  NCRYPTBUFFER_EMPTY = 0_u32
  NCRYPTBUFFER_DATA = 1_u32
  NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3_u32
  NCRYPTBUFFER_PROTECTION_FLAGS = 4_u32
  NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20_u32
  NCRYPTBUFFER_SSL_SERVER_RANDOM = 21_u32
  NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22_u32
  NCRYPTBUFFER_SSL_CLEAR_KEY = 23_u32
  NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24_u32
  NCRYPTBUFFER_SSL_SESSION_HASH = 25_u32
  NCRYPTBUFFER_PKCS_OID = 40_u32
  NCRYPTBUFFER_PKCS_ALG_OID = 41_u32
  NCRYPTBUFFER_PKCS_ALG_PARAM = 42_u32
  NCRYPTBUFFER_PKCS_ALG_ID = 43_u32
  NCRYPTBUFFER_PKCS_ATTRS = 44_u32
  NCRYPTBUFFER_PKCS_KEY_NAME = 45_u32
  NCRYPTBUFFER_PKCS_SECRET = 46_u32
  NCRYPTBUFFER_CERT_BLOB = 47_u32
  NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48_u32
  NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49_u32
  NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50_u32
  NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51_u32
  NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52_u32
  NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53_u32
  NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54_u32
  NCRYPTBUFFER_ECC_CURVE_NAME = 60_u32
  NCRYPTBUFFER_ECC_PARAMETERS = 61_u32
  NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70_u32
  NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71_u32
  NCRYPTBUFFER_TPM_SEAL_TICKET = 72_u32
  NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81_u32
  NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82_u32
  NCRYPT_CIPHER_NO_PADDING_FLAG = 0_u32
  NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1_u32
  NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2_u32
  NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288_u32
  NCRYPT_KEY_ATTEST_MAGIC = 1146110283_u32
  NCRYPT_CLAIM_AUTHORITY_ONLY = 1_u32
  NCRYPT_CLAIM_SUBJECT_ONLY = 2_u32
  NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258_u32
  NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3_u32
  NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4_u32
  NCRYPT_CLAIM_UNKNOWN = 4096_u32
  NCRYPT_CLAIM_PLATFORM = 65536_u32
  NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1_u32
  NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2_u32
  NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0_u32
  NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0_u32
  NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0_u32
  NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0_u32
  NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0_u32
  NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0_u32
  NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0_u32
  NCRYPT_PAD_CIPHER_FLAG = 16_u32
  NCRYPT_ATTESTATION_FLAG = 32_u32
  NCRYPT_SEALING_FLAG = 256_u32
  NCRYPT_DO_NOT_FINALIZE_FLAG = 1024_u32
  NCRYPT_EXPORT_LEGACY_FLAG = 2048_u32
  NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096_u32
  NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192_u32
  NCRYPT_NO_CACHED_PASSWORD = 16384_u32
  NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768_u32
  NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536_u32
  NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072_u32
  NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144_u32
  NCRYPT_KEY_DERIVATION_OPERATION = 64_u32
  NCRYPT_AUTHORITY_KEY_FLAG = 256_u32
  IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0_u32
  IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1_u32
  IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2_u32
  NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0_u32
  NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1_u32
  NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2_u32
  NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32_u32
  NCRYPT_TPM12_PROVIDER = 65536_u32
  NCRYPT_PCP_SIGNATURE_KEY = 1_u32
  NCRYPT_PCP_ENCRYPTION_KEY = 2_u32
  NCRYPT_PCP_STORAGE_KEY = 4_u32
  NCRYPT_PCP_IDENTITY_KEY = 8_u32
  NCRYPT_PCP_HMACVERIFICATION_KEY = 16_u32
  NCRYPT_MAX_PROPERTY_NAME = 64_u32
  NCRYPT_MAX_PROPERTY_DATA = 1048576_u32
  NCRYPT_ALLOW_EXPORT_FLAG = 1_u32
  NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2_u32
  NCRYPT_ALLOW_ARCHIVING_FLAG = 4_u32
  NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8_u32
  NCRYPT_IMPL_HARDWARE_FLAG = 1_u32
  NCRYPT_IMPL_SOFTWARE_FLAG = 2_u32
  NCRYPT_IMPL_REMOVABLE_FLAG = 8_u32
  NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16_u32
  NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32_u32
  NCRYPT_ALLOW_DECRYPT_FLAG = 1_u32
  NCRYPT_ALLOW_SIGNING_FLAG = 2_u32
  NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4_u32
  NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8_u32
  NCRYPT_ALLOW_ALL_USAGES = 16777215_u32
  NCRYPT_UI_PROTECT_KEY_FLAG = 1_u32
  NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2_u32
  NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4_u32
  NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8_u32
  NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1_u32
  NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1_u32
  NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90_u32
  NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1_u32
  NCRYPT_KEY_ACCESS_POLICY_VERSION = 1_u32
  NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1_u32
  NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851_u32
  NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587_u32
  NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296_u32
  NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211_u32
  NCRYPT_NAMED_DESCRIPTOR_FLAG = 1_u32
  NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = 1_u32
  ALG_CLASS_ANY = 0_u32
  ALG_CLASS_SIGNATURE = 8192_u32
  ALG_CLASS_MSG_ENCRYPT = 16384_u32
  ALG_CLASS_DATA_ENCRYPT = 24576_u32
  ALG_CLASS_HASH = 32768_u32
  ALG_CLASS_KEY_EXCHANGE = 40960_u32
  ALG_CLASS_ALL = 57344_u32
  ALG_TYPE_ANY = 0_u32
  ALG_TYPE_DSS = 512_u32
  ALG_TYPE_RSA = 1024_u32
  ALG_TYPE_BLOCK = 1536_u32
  ALG_TYPE_STREAM = 2048_u32
  ALG_TYPE_DH = 2560_u32
  ALG_TYPE_SECURECHANNEL = 3072_u32
  ALG_TYPE_ECDH = 3584_u32
  ALG_TYPE_THIRDPARTY = 4096_u32
  ALG_SID_ANY = 0_u32
  ALG_SID_THIRDPARTY_ANY = 0_u32
  ALG_SID_RSA_ANY = 0_u32
  ALG_SID_RSA_PKCS = 1_u32
  ALG_SID_RSA_MSATWORK = 2_u32
  ALG_SID_RSA_ENTRUST = 3_u32
  ALG_SID_RSA_PGP = 4_u32
  ALG_SID_DSS_ANY = 0_u32
  ALG_SID_DSS_PKCS = 1_u32
  ALG_SID_DSS_DMS = 2_u32
  ALG_SID_ECDSA = 3_u32
  ALG_SID_DES = 1_u32
  ALG_SID_3DES = 3_u32
  ALG_SID_DESX = 4_u32
  ALG_SID_IDEA = 5_u32
  ALG_SID_CAST = 6_u32
  ALG_SID_SAFERSK64 = 7_u32
  ALG_SID_SAFERSK128 = 8_u32
  ALG_SID_3DES_112 = 9_u32
  ALG_SID_CYLINK_MEK = 12_u32
  ALG_SID_RC5 = 13_u32
  ALG_SID_AES_128 = 14_u32
  ALG_SID_AES_192 = 15_u32
  ALG_SID_AES_256 = 16_u32
  ALG_SID_AES = 17_u32
  ALG_SID_SKIPJACK = 10_u32
  ALG_SID_TEK = 11_u32
  CRYPT_MODE_CBCI = 6_u32
  CRYPT_MODE_CFBP = 7_u32
  CRYPT_MODE_OFBP = 8_u32
  CRYPT_MODE_CBCOFM = 9_u32
  CRYPT_MODE_CBCOFMI = 10_u32
  ALG_SID_RC2 = 2_u32
  ALG_SID_RC4 = 1_u32
  ALG_SID_SEAL = 2_u32
  ALG_SID_DH_SANDF = 1_u32
  ALG_SID_DH_EPHEM = 2_u32
  ALG_SID_AGREED_KEY_ANY = 3_u32
  ALG_SID_KEA = 4_u32
  ALG_SID_ECDH = 5_u32
  ALG_SID_ECDH_EPHEM = 6_u32
  ALG_SID_MD2 = 1_u32
  ALG_SID_MD4 = 2_u32
  ALG_SID_MD5 = 3_u32
  ALG_SID_SHA = 4_u32
  ALG_SID_SHA1 = 4_u32
  ALG_SID_MAC = 5_u32
  ALG_SID_RIPEMD = 6_u32
  ALG_SID_RIPEMD160 = 7_u32
  ALG_SID_SSL3SHAMD5 = 8_u32
  ALG_SID_HMAC = 9_u32
  ALG_SID_TLS1PRF = 10_u32
  ALG_SID_HASH_REPLACE_OWF = 11_u32
  ALG_SID_SHA_256 = 12_u32
  ALG_SID_SHA_384 = 13_u32
  ALG_SID_SHA_512 = 14_u32
  ALG_SID_SSL3_MASTER = 1_u32
  ALG_SID_SCHANNEL_MASTER_HASH = 2_u32
  ALG_SID_SCHANNEL_MAC_KEY = 3_u32
  ALG_SID_PCT1_MASTER = 4_u32
  ALG_SID_SSL2_MASTER = 5_u32
  ALG_SID_TLS1_MASTER = 6_u32
  ALG_SID_SCHANNEL_ENC_KEY = 7_u32
  ALG_SID_ECMQV = 1_u32
  ALG_SID_EXAMPLE = 80_u32
  SIGNATURE_RESOURCE_NUMBER = 666_u32
  CRYPT_VERIFYCONTEXT = 4026531840_u32
  CRYPT_NEWKEYSET = 8_u32
  CRYPT_DELETEKEYSET = 16_u32
  CRYPT_SILENT = 64_u32
  CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128_u32
  CRYPT_UPDATE_KEY = 8_u32
  CRYPT_USER_PROTECTED_STRONG = 1048576_u32
  RSA1024BIT_KEY = 67108864_u32
  CRYPT_SERVER = 1024_u32
  KEY_LENGTH_MASK = 4294901760_u32
  CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32_u32
  CRYPT_SECRETDIGEST = 1_u32
  CRYPT_OWF_REPL_LM_HASH = 1_u32
  CRYPT_LITTLE_ENDIAN = 1_u32
  CRYPT_NOHASHOID = 1_u32
  CRYPT_TYPE2_FORMAT = 2_u32
  CRYPT_X931_FORMAT = 4_u32
  CRYPT_MACHINE_DEFAULT = 1_u32
  CRYPT_USER_DEFAULT = 2_u32
  CRYPT_DELETE_DEFAULT = 4_u32
  SIMPLEBLOB = 1_u32
  PUBLICKEYBLOB = 6_u32
  PRIVATEKEYBLOB = 7_u32
  PLAINTEXTKEYBLOB = 8_u32
  OPAQUEKEYBLOB = 9_u32
  PUBLICKEYBLOBEX = 10_u32
  SYMMETRICWRAPKEYBLOB = 11_u32
  KEYSTATEBLOB = 12_u32
  CRYPT_USERDATA = 1_u32
  KP_IV = 1_u32
  KP_PADDING = 3_u32
  KP_MODE = 4_u32
  KP_MODE_BITS = 5_u32
  KP_P = 11_u32
  KP_G = 12_u32
  KP_Q = 13_u32
  KP_X = 14_u32
  KP_Y = 15_u32
  KP_RA = 16_u32
  KP_RB = 17_u32
  KP_INFO = 18_u32
  KP_EFFECTIVE_KEYLEN = 19_u32
  KP_SCHANNEL_ALG = 20_u32
  KP_CLIENT_RANDOM = 21_u32
  KP_SERVER_RANDOM = 22_u32
  KP_RP = 23_u32
  KP_PRECOMP_MD5 = 24_u32
  KP_PRECOMP_SHA = 25_u32
  KP_CLEAR_KEY = 27_u32
  KP_PUB_EX_LEN = 28_u32
  KP_PUB_EX_VAL = 29_u32
  KP_KEYVAL = 30_u32
  KP_ADMIN_PIN = 31_u32
  KP_KEYEXCHANGE_PIN = 32_u32
  KP_SIGNATURE_PIN = 33_u32
  KP_PREHASH = 34_u32
  KP_ROUNDS = 35_u32
  KP_OAEP_PARAMS = 36_u32
  KP_CMS_KEY_INFO = 37_u32
  KP_CMS_DH_KEY_INFO = 38_u32
  KP_PUB_PARAMS = 39_u32
  KP_VERIFY_PARAMS = 40_u32
  KP_HIGHEST_VERSION = 41_u32
  KP_PIN_ID = 43_u32
  KP_PIN_INFO = 44_u32
  PKCS5_PADDING = 1_u32
  RANDOM_PADDING = 2_u32
  ZERO_PADDING = 3_u32
  CRYPT_MODE_CBC = 1_u32
  CRYPT_MODE_ECB = 2_u32
  CRYPT_MODE_OFB = 3_u32
  CRYPT_MODE_CFB = 4_u32
  CRYPT_MODE_CTS = 5_u32
  CRYPT_ENCRYPT = 1_u32
  CRYPT_DECRYPT = 2_u32
  CRYPT_EXPORT = 4_u32
  CRYPT_READ = 8_u32
  CRYPT_WRITE = 16_u32
  CRYPT_MAC = 32_u32
  CRYPT_EXPORT_KEY = 64_u32
  CRYPT_IMPORT_KEY = 128_u32
  CRYPT_ARCHIVE = 256_u32
  HP_ALGID = 1_u32
  HP_HASHSIZE = 4_u32
  HP_TLS1PRF_LABEL = 6_u32
  HP_TLS1PRF_SEED = 7_u32
  CRYPT_FAILED = 0_u32
  CRYPT_SUCCEED = 1_u32
  PP_ENUMALGS = 1_u32
  PP_ENUMCONTAINERS = 2_u32
  PP_IMPTYPE = 3_u32
  PP_NAME = 4_u32
  PP_VERSION = 5_u32
  PP_CONTAINER = 6_u32
  PP_CHANGE_PASSWORD = 7_u32
  PP_CERTCHAIN = 9_u32
  PP_KEY_TYPE_SUBTYPE = 10_u32
  PP_PROVTYPE = 16_u32
  PP_KEYSTORAGE = 17_u32
  PP_APPLI_CERT = 18_u32
  PP_SYM_KEYSIZE = 19_u32
  PP_SESSION_KEYSIZE = 20_u32
  PP_ENUMALGS_EX = 22_u32
  PP_ENUMMANDROOTS = 25_u32
  PP_ENUMELECTROOTS = 26_u32
  PP_KEYSET_TYPE = 27_u32
  PP_ADMIN_PIN = 31_u32
  PP_SIG_KEYSIZE_INC = 34_u32
  PP_KEYX_KEYSIZE_INC = 35_u32
  PP_UNIQUE_CONTAINER = 36_u32
  PP_SGC_INFO = 37_u32
  PP_KEYSPEC = 39_u32
  PP_ENUMEX_SIGNING_PROT = 40_u32
  PP_CRYPT_COUNT_KEY_USE = 41_u32
  PP_SMARTCARD_GUID = 45_u32
  PP_SMARTCARD_READER_ICON = 47_u32
  CRYPT_FIRST = 1_u32
  CRYPT_NEXT = 2_u32
  CRYPT_SGC_ENUM = 4_u32
  CRYPT_IMPL_HARDWARE = 1_u32
  CRYPT_IMPL_SOFTWARE = 2_u32
  CRYPT_IMPL_MIXED = 3_u32
  CRYPT_IMPL_UNKNOWN = 4_u32
  CRYPT_IMPL_REMOVABLE = 8_u32
  CRYPT_SEC_DESCR = 1_u32
  CRYPT_PSTORE = 2_u32
  CRYPT_UI_PROMPT = 4_u32
  CRYPT_FLAG_PCT1 = 1_u32
  CRYPT_FLAG_SSL2 = 2_u32
  CRYPT_FLAG_SSL3 = 4_u32
  CRYPT_FLAG_TLS1 = 8_u32
  CRYPT_FLAG_IPSEC = 16_u32
  CRYPT_FLAG_SIGNING = 32_u32
  CRYPT_SGC = 1_u32
  CRYPT_FASTSGC = 2_u32
  PP_CONTEXT_INFO = 11_u32
  PP_DISMISS_PIN_UI_SEC = 49_u32
  PROV_RSA_FULL = 1_u32
  PROV_RSA_SIG = 2_u32
  PROV_DSS = 3_u32
  PROV_FORTEZZA = 4_u32
  PROV_MS_EXCHANGE = 5_u32
  PROV_SSL = 6_u32
  PROV_RSA_SCHANNEL = 12_u32
  PROV_DSS_DH = 13_u32
  PROV_EC_ECDSA_SIG = 14_u32
  PROV_EC_ECNRA_SIG = 15_u32
  PROV_EC_ECDSA_FULL = 16_u32
  PROV_EC_ECNRA_FULL = 17_u32
  PROV_DH_SCHANNEL = 18_u32
  PROV_SPYRUS_LYNKS = 20_u32
  PROV_RNG = 21_u32
  PROV_INTEL_SEC = 22_u32
  PROV_REPLACE_OWF = 23_u32
  PROV_RSA_AES = 24_u32
  PROV_STT_MER = 7_u32
  PROV_STT_ACQ = 8_u32
  PROV_STT_BRND = 9_u32
  PROV_STT_ROOT = 10_u32
  PROV_STT_ISS = 11_u32
  MAXUIDLEN = 64_u32
  CUR_BLOB_VERSION = 2_u32
  SCHANNEL_MAC_KEY = 0_u32
  SCHANNEL_ENC_KEY = 1_u32
  INTERNATIONAL_USAGE = 1_u32
  CERT_RDN_TYPE_MASK = 255_u32
  CERT_RDN_FLAGS_MASK = 4278190080_u32
  CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648_u32
  CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912_u32
  CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456_u32
  CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824_u32
  CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216_u32
  CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432_u32
  CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1_u32
  CERT_V1 = 0_u32
  CERT_V2 = 1_u32
  CERT_V3 = 2_u32
  CERT_INFO_VERSION_FLAG = 1_u32
  CERT_INFO_SERIAL_NUMBER_FLAG = 2_u32
  CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3_u32
  CERT_INFO_ISSUER_FLAG = 4_u32
  CERT_INFO_NOT_BEFORE_FLAG = 5_u32
  CERT_INFO_NOT_AFTER_FLAG = 6_u32
  CERT_INFO_SUBJECT_FLAG = 7_u32
  CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8_u32
  CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9_u32
  CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10_u32
  CERT_INFO_EXTENSION_FLAG = 11_u32
  CRL_V1 = 0_u32
  CRL_V2 = 1_u32
  CERT_BUNDLE_CERTIFICATE = 0_u32
  CERT_BUNDLE_CRL = 1_u32
  CERT_REQUEST_V1 = 0_u32
  CERT_KEYGEN_REQUEST_V1 = 0_u32
  CTL_V1 = 0_u32
  CERT_ENCODING_TYPE_MASK = 65535_u32
  CMSG_ENCODING_TYPE_MASK = 4294901760_u32
  CRYPT_ASN_ENCODING = 1_u32
  CRYPT_NDR_ENCODING = 2_u32
  X509_NDR_ENCODING = 2_u32
  PKCS_7_NDR_ENCODING = 131072_u32
  CRYPT_FORMAT_STR_MULTI_LINE = 1_u32
  CRYPT_FORMAT_STR_NO_HEX = 16_u32
  CRYPT_FORMAT_SIMPLE = 1_u32
  CRYPT_FORMAT_X509 = 2_u32
  CRYPT_FORMAT_OID = 4_u32
  CRYPT_FORMAT_RDN_SEMICOLON = 256_u32
  CRYPT_FORMAT_RDN_CRLF = 512_u32
  CRYPT_FORMAT_RDN_UNQUOTE = 1024_u32
  CRYPT_FORMAT_RDN_REVERSE = 2048_u32
  CRYPT_FORMAT_COMMA = 4096_u32
  CRYPT_FORMAT_SEMICOLON = 256_u32
  CRYPT_FORMAT_CRLF = 512_u32
  CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8_u32
  CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456_u32
  CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536_u32
  CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144_u32
  CRYPT_DECODE_NOCOPY_FLAG = 1_u32
  CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2_u32
  CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4_u32
  CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8_u32
  CRYPT_DECODE_ALLOC_FLAG = 32768_u32
  CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216_u32
  CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432_u32
  CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864_u32
  CRYPT_ENCODE_DECODE_NONE = 0_u32
  SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1_u32
  CERT_ROOT_PROGRAM_FLAG_OU = 16_u32
  CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8_u32
  CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023_u32
  CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22_u32
  CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63_u32
  CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16_u32
  CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535_u32
  CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0_u32
  CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128_u32
  CERT_NON_REPUDIATION_KEY_USAGE = 64_u32
  CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32_u32
  CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16_u32
  CERT_KEY_AGREEMENT_KEY_USAGE = 8_u32
  CERT_KEY_CERT_SIGN_KEY_USAGE = 4_u32
  CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2_u32
  CERT_CRL_SIGN_KEY_USAGE = 2_u32
  CERT_ENCIPHER_ONLY_KEY_USAGE = 1_u32
  CERT_DECIPHER_ONLY_KEY_USAGE = 128_u32
  CERT_ALT_NAME_X400_ADDRESS = 4_u32
  CERT_ALT_NAME_EDI_PARTY_NAME = 6_u32
  CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255_u32
  CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16_u32
  CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535_u32
  CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0_u32
  CERT_CA_SUBJECT_FLAG = 128_u32
  CERT_END_ENTITY_SUBJECT_FLAG = 64_u32
  CRL_REASON_PRIVILEGE_WITHDRAWN = 9_u32
  CRL_REASON_AA_COMPROMISE = 10_u32
  CRL_DIST_POINT_NO_NAME = 0_u32
  CRL_DIST_POINT_FULL_NAME = 1_u32
  CRL_DIST_POINT_ISSUER_RDN_NAME = 2_u32
  CRL_REASON_UNUSED_FLAG = 128_u32
  CRL_REASON_KEY_COMPROMISE_FLAG = 64_u32
  CRL_REASON_CA_COMPROMISE_FLAG = 32_u32
  CRL_REASON_AFFILIATION_CHANGED_FLAG = 16_u32
  CRL_REASON_SUPERSEDED_FLAG = 8_u32
  CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4_u32
  CRL_REASON_CERTIFICATE_HOLD_FLAG = 2_u32
  CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1_u32
  CRL_REASON_AA_COMPROMISE_FLAG = 128_u32
  CRL_DIST_POINT_ERR_INDEX_MASK = 127_u32
  CRL_DIST_POINT_ERR_INDEX_SHIFT = 24_u32
  CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648_i32
  CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255_u32
  CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24_u32
  CERT_EXCLUDED_SUBTREE_BIT = -2147483648_i32
  SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1_u32
  CERT_DSS_R_LEN = 20_u32
  CERT_DSS_S_LEN = 20_u32
  CRYPT_X942_COUNTER_BYTE_LENGTH = 4_u32
  CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4_u32
  CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4_u32
  CRYPT_RC2_40BIT_VERSION = 160_u32
  CRYPT_RC2_56BIT_VERSION = 52_u32
  CRYPT_RC2_64BIT_VERSION = 120_u32
  CRYPT_RC2_128BIT_VERSION = 58_u32
  PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1_u32
  NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128_u32
  NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64_u32
  NETSCAPE_SMIME_CERT_TYPE = 32_u32
  NETSCAPE_SIGN_CERT_TYPE = 16_u32
  NETSCAPE_SSL_CA_CERT_TYPE = 4_u32
  NETSCAPE_SMIME_CA_CERT_TYPE = 2_u32
  NETSCAPE_SIGN_CA_CERT_TYPE = 1_u32
  CMC_TAGGED_CERT_REQUEST_CHOICE = 1_u32
  CMC_OTHER_INFO_NO_CHOICE = 0_u32
  CMC_OTHER_INFO_FAIL_CHOICE = 1_u32
  CMC_OTHER_INFO_PEND_CHOICE = 2_u32
  CMC_STATUS_SUCCESS = 0_u32
  CMC_STATUS_FAILED = 2_u32
  CMC_STATUS_PENDING = 3_u32
  CMC_STATUS_NO_SUPPORT = 4_u32
  CMC_STATUS_CONFIRM_REQUIRED = 5_u32
  CMC_FAIL_BAD_ALG = 0_u32
  CMC_FAIL_BAD_MESSAGE_CHECK = 1_u32
  CMC_FAIL_BAD_REQUEST = 2_u32
  CMC_FAIL_BAD_TIME = 3_u32
  CMC_FAIL_BAD_CERT_ID = 4_u32
  CMC_FAIL_UNSUPORTED_EXT = 5_u32
  CMC_FAIL_MUST_ARCHIVE_KEYS = 6_u32
  CMC_FAIL_BAD_IDENTITY = 7_u32
  CMC_FAIL_POP_REQUIRED = 8_u32
  CMC_FAIL_POP_FAILED = 9_u32
  CMC_FAIL_NO_KEY_REUSE = 10_u32
  CMC_FAIL_INTERNAL_CA_ERROR = 11_u32
  CMC_FAIL_TRY_LATER = 12_u32
  CERT_BIOMETRIC_PICTURE_TYPE = 0_u32
  CERT_BIOMETRIC_SIGNATURE_TYPE = 1_u32
  OCSP_REQUEST_V1 = 0_u32
  OCSP_SUCCESSFUL_RESPONSE = 0_u32
  OCSP_MALFORMED_REQUEST_RESPONSE = 1_u32
  OCSP_INTERNAL_ERROR_RESPONSE = 2_u32
  OCSP_TRY_LATER_RESPONSE = 3_u32
  OCSP_SIG_REQUIRED_RESPONSE = 5_u32
  OCSP_UNAUTHORIZED_RESPONSE = 6_u32
  OCSP_BASIC_GOOD_CERT_STATUS = 0_u32
  OCSP_BASIC_REVOKED_CERT_STATUS = 1_u32
  OCSP_BASIC_UNKNOWN_CERT_STATUS = 2_u32
  OCSP_BASIC_RESPONSE_V1 = 0_u32
  OCSP_BASIC_BY_NAME_RESPONDER_ID = 1_u32
  OCSP_BASIC_BY_KEY_RESPONDER_ID = 2_u32
  CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1_u32
  CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1_u32
  CRYPT_REGISTER_FIRST_INDEX = 0_u32
  CRYPT_REGISTER_LAST_INDEX = 4294967295_u32
  CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295_u32
  CALG_OID_INFO_CNG_ONLY = 4294967295_u32
  CALG_OID_INFO_PARAMETERS = 4294967294_u32
  CRYPT_HASH_ALG_OID_GROUP_ID = 1_u32
  CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2_u32
  CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3_u32
  CRYPT_SIGN_ALG_OID_GROUP_ID = 4_u32
  CRYPT_RDN_ATTR_OID_GROUP_ID = 5_u32
  CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6_u32
  CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7_u32
  CRYPT_POLICY_OID_GROUP_ID = 8_u32
  CRYPT_TEMPLATE_OID_GROUP_ID = 9_u32
  CRYPT_KDF_OID_GROUP_ID = 10_u32
  CRYPT_LAST_OID_GROUP_ID = 10_u32
  CRYPT_FIRST_ALG_OID_GROUP_ID = 1_u32
  CRYPT_LAST_ALG_OID_GROUP_ID = 4_u32
  CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1_u32
  CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2_u32
  CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4_u32
  CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648_u32
  CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824_u32
  CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912_u32
  CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456_u32
  CRYPT_OID_INFO_OID_KEY = 1_u32
  CRYPT_OID_INFO_NAME_KEY = 2_u32
  CRYPT_OID_INFO_ALGID_KEY = 3_u32
  CRYPT_OID_INFO_SIGN_KEY = 4_u32
  CRYPT_OID_INFO_CNG_ALGID_KEY = 5_u32
  CRYPT_OID_INFO_CNG_SIGN_KEY = 6_u32
  CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760_u32
  CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648_u32
  CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824_u32
  CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920_u32
  CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16_u32
  CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1_u32
  CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0_u32
  CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1_u32
  CERT_STRONG_SIGN_OID_INFO_CHOICE = 2_u32
  CMSG_ENCRYPTED = 6_u32
  CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1_u32
  CMSG_KEY_TRANS_RECIPIENT = 1_u32
  CMSG_KEY_AGREE_RECIPIENT = 2_u32
  CMSG_MAIL_LIST_RECIPIENT = 3_u32
  CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648_u32
  CMSG_RC4_NO_SALT_FLAG = 1073741824_u32
  CMSG_INDEFINITE_LENGTH = 4294967295_u32
  CMSG_BARE_CONTENT_FLAG = 1_u32
  CMSG_LENGTH_ONLY_FLAG = 2_u32
  CMSG_DETACHED_FLAG = 4_u32
  CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8_u32
  CMSG_CONTENTS_OCTETS_FLAG = 16_u32
  CMSG_MAX_LENGTH_FLAG = 32_u32
  CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64_u32
  CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128_u32
  CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768_u32
  CMSG_TYPE_PARAM = 1_u32
  CMSG_CONTENT_PARAM = 2_u32
  CMSG_BARE_CONTENT_PARAM = 3_u32
  CMSG_INNER_CONTENT_TYPE_PARAM = 4_u32
  CMSG_SIGNER_COUNT_PARAM = 5_u32
  CMSG_SIGNER_INFO_PARAM = 6_u32
  CMSG_SIGNER_CERT_INFO_PARAM = 7_u32
  CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8_u32
  CMSG_SIGNER_AUTH_ATTR_PARAM = 9_u32
  CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10_u32
  CMSG_CERT_COUNT_PARAM = 11_u32
  CMSG_CERT_PARAM = 12_u32
  CMSG_CRL_COUNT_PARAM = 13_u32
  CMSG_CRL_PARAM = 14_u32
  CMSG_ENVELOPE_ALGORITHM_PARAM = 15_u32
  CMSG_RECIPIENT_COUNT_PARAM = 17_u32
  CMSG_RECIPIENT_INDEX_PARAM = 18_u32
  CMSG_RECIPIENT_INFO_PARAM = 19_u32
  CMSG_HASH_ALGORITHM_PARAM = 20_u32
  CMSG_HASH_DATA_PARAM = 21_u32
  CMSG_COMPUTED_HASH_PARAM = 22_u32
  CMSG_ENCRYPT_PARAM = 26_u32
  CMSG_ENCRYPTED_DIGEST = 27_u32
  CMSG_ENCODED_SIGNER = 28_u32
  CMSG_ENCODED_MESSAGE = 29_u32
  CMSG_VERSION_PARAM = 30_u32
  CMSG_ATTR_CERT_COUNT_PARAM = 31_u32
  CMSG_ATTR_CERT_PARAM = 32_u32
  CMSG_CMS_RECIPIENT_COUNT_PARAM = 33_u32
  CMSG_CMS_RECIPIENT_INDEX_PARAM = 34_u32
  CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35_u32
  CMSG_CMS_RECIPIENT_INFO_PARAM = 36_u32
  CMSG_UNPROTECTED_ATTR_PARAM = 37_u32
  CMSG_SIGNER_CERT_ID_PARAM = 38_u32
  CMSG_CMS_SIGNER_INFO_PARAM = 39_u32
  CMSG_SIGNED_DATA_V1 = 1_u32
  CMSG_SIGNED_DATA_V3 = 3_u32
  CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1_u32
  CMSG_SIGNED_DATA_CMS_VERSION = 3_u32
  CMSG_SIGNER_INFO_V1 = 1_u32
  CMSG_SIGNER_INFO_V3 = 3_u32
  CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1_u32
  CMSG_SIGNER_INFO_CMS_VERSION = 3_u32
  CMSG_HASHED_DATA_V0 = 0_u32
  CMSG_HASHED_DATA_V2 = 2_u32
  CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0_u32
  CMSG_HASHED_DATA_CMS_VERSION = 2_u32
  CMSG_ENVELOPED_DATA_V0 = 0_u32
  CMSG_ENVELOPED_DATA_V2 = 2_u32
  CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0_u32
  CMSG_ENVELOPED_DATA_CMS_VERSION = 2_u32
  CMSG_ENVELOPED_RECIPIENT_V0 = 0_u32
  CMSG_ENVELOPED_RECIPIENT_V2 = 2_u32
  CMSG_ENVELOPED_RECIPIENT_V3 = 3_u32
  CMSG_ENVELOPED_RECIPIENT_V4 = 4_u32
  CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0_u32
  CMSG_KEY_TRANS_CMS_VERSION = 2_u32
  CMSG_KEY_AGREE_VERSION = 3_u32
  CMSG_MAIL_LIST_VERSION = 4_u32
  CMSG_CTRL_VERIFY_SIGNATURE = 1_u32
  CMSG_CTRL_DECRYPT = 2_u32
  CMSG_CTRL_VERIFY_HASH = 5_u32
  CMSG_CTRL_ADD_SIGNER = 6_u32
  CMSG_CTRL_DEL_SIGNER = 7_u32
  CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8_u32
  CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9_u32
  CMSG_CTRL_ADD_CERT = 10_u32
  CMSG_CTRL_DEL_CERT = 11_u32
  CMSG_CTRL_ADD_CRL = 12_u32
  CMSG_CTRL_DEL_CRL = 13_u32
  CMSG_CTRL_ADD_ATTR_CERT = 14_u32
  CMSG_CTRL_DEL_ATTR_CERT = 15_u32
  CMSG_CTRL_KEY_TRANS_DECRYPT = 16_u32
  CMSG_CTRL_KEY_AGREE_DECRYPT = 17_u32
  CMSG_CTRL_MAIL_LIST_DECRYPT = 18_u32
  CMSG_CTRL_VERIFY_SIGNATURE_EX = 19_u32
  CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20_u32
  CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21_u32
  CMSG_VERIFY_SIGNER_PUBKEY = 1_u32
  CMSG_VERIFY_SIGNER_CERT = 2_u32
  CMSG_VERIFY_SIGNER_CHAIN = 3_u32
  CMSG_VERIFY_SIGNER_NULL = 4_u32
  CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1_u32
  CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1_u32
  CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768_u32
  CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16_u32
  CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32_u32
  CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1_u32
  CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2_u32
  CERT_KEY_PROV_HANDLE_PROP_ID = 1_u32
  CERT_KEY_PROV_INFO_PROP_ID = 2_u32
  CERT_SHA1_HASH_PROP_ID = 3_u32
  CERT_MD5_HASH_PROP_ID = 4_u32
  CERT_HASH_PROP_ID = 3_u32
  CERT_KEY_CONTEXT_PROP_ID = 5_u32
  CERT_KEY_SPEC_PROP_ID = 6_u32
  CERT_IE30_RESERVED_PROP_ID = 7_u32
  CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8_u32
  CERT_ENHKEY_USAGE_PROP_ID = 9_u32
  CERT_CTL_USAGE_PROP_ID = 9_u32
  CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10_u32
  CERT_FRIENDLY_NAME_PROP_ID = 11_u32
  CERT_PVK_FILE_PROP_ID = 12_u32
  CERT_DESCRIPTION_PROP_ID = 13_u32
  CERT_ACCESS_STATE_PROP_ID = 14_u32
  CERT_SIGNATURE_HASH_PROP_ID = 15_u32
  CERT_SMART_CARD_DATA_PROP_ID = 16_u32
  CERT_EFS_PROP_ID = 17_u32
  CERT_FORTEZZA_DATA_PROP_ID = 18_u32
  CERT_ARCHIVED_PROP_ID = 19_u32
  CERT_KEY_IDENTIFIER_PROP_ID = 20_u32
  CERT_AUTO_ENROLL_PROP_ID = 21_u32
  CERT_PUBKEY_ALG_PARA_PROP_ID = 22_u32
  CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23_u32
  CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24_u32
  CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25_u32
  CERT_ENROLLMENT_PROP_ID = 26_u32
  CERT_DATE_STAMP_PROP_ID = 27_u32
  CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28_u32
  CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29_u32
  CERT_EXTENDED_ERROR_INFO_PROP_ID = 30_u32
  CERT_RENEWAL_PROP_ID = 64_u32
  CERT_ARCHIVED_KEY_HASH_PROP_ID = 65_u32
  CERT_AUTO_ENROLL_RETRY_PROP_ID = 66_u32
  CERT_AIA_URL_RETRIEVED_PROP_ID = 67_u32
  CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68_u32
  CERT_BACKED_UP_PROP_ID = 69_u32
  CERT_OCSP_RESPONSE_PROP_ID = 70_u32
  CERT_REQUEST_ORIGINATOR_PROP_ID = 71_u32
  CERT_SOURCE_LOCATION_PROP_ID = 72_u32
  CERT_SOURCE_URL_PROP_ID = 73_u32
  CERT_NEW_KEY_PROP_ID = 74_u32
  CERT_OCSP_CACHE_PREFIX_PROP_ID = 75_u32
  CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76_u32
  CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77_u32
  CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78_u32
  CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79_u32
  CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80_u32
  CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81_u32
  CERT_CA_DISABLE_CRL_PROP_ID = 82_u32
  CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83_u32
  CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84_u32
  CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85_u32
  CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86_u32
  CERT_CEP_PROP_ID = 87_u32
  CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89_u32
  CERT_SCARD_PIN_ID_PROP_ID = 90_u32
  CERT_SCARD_PIN_INFO_PROP_ID = 91_u32
  CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92_u32
  CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93_u32
  CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94_u32
  CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95_u32
  CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96_u32
  CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97_u32
  CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98_u32
  CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99_u32
  CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100_u32
  CERT_SMART_CARD_READER_PROP_ID = 101_u32
  CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102_u32
  CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103_u32
  CERT_DISALLOWED_FILETIME_PROP_ID = 104_u32
  CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105_u32
  CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106_u32
  CERT_SHA256_HASH_PROP_ID = 107_u32
  CERT_SCEP_SERVER_CERTS_PROP_ID = 108_u32
  CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109_u32
  CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110_u32
  CERT_SCEP_CA_CERT_PROP_ID = 111_u32
  CERT_SCEP_SIGNER_CERT_PROP_ID = 112_u32
  CERT_SCEP_NONCE_PROP_ID = 113_u32
  CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114_u32
  CERT_SCEP_FLAGS_PROP_ID = 115_u32
  CERT_SCEP_GUID_PROP_ID = 116_u32
  CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117_u32
  CERT_ISOLATED_KEY_PROP_ID = 118_u32
  CERT_SERIAL_CHAIN_PROP_ID = 119_u32
  CERT_KEY_CLASSIFICATION_PROP_ID = 120_u32
  CERT_OCSP_MUST_STAPLE_PROP_ID = 121_u32
  CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122_u32
  CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123_u32
  CERT_PIN_SHA256_HASH_PROP_ID = 124_u32
  CERT_CLR_DELETE_KEY_PROP_ID = 125_u32
  CERT_NOT_BEFORE_FILETIME_PROP_ID = 126_u32
  CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127_u32
  CERT_FIRST_RESERVED_PROP_ID = 128_u32
  CERT_LAST_RESERVED_PROP_ID = 32767_u32
  CERT_FIRST_USER_PROP_ID = 32768_u32
  CERT_LAST_USER_PROP_ID = 65535_u32
  CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1_u32
  CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2_u32
  CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4_u32
  CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8_u32
  CERT_ACCESS_STATE_SHARED_USER_FLAG = 16_u32
  CERT_STORE_SIGNATURE_FLAG = 1_u32
  CERT_STORE_TIME_VALIDITY_FLAG = 2_u32
  CERT_STORE_REVOCATION_FLAG = 4_u32
  CERT_STORE_NO_CRL_FLAG = 65536_u32
  CERT_STORE_NO_ISSUER_FLAG = 131072_u32
  CERT_STORE_BASE_CRL_FLAG = 256_u32
  CERT_STORE_DELTA_CRL_FLAG = 512_u32
  CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32_u32
  CERT_STORE_SHARE_STORE_FLAG = 64_u32
  CERT_STORE_MANIFOLD_FLAG = 256_u32
  CERT_SYSTEM_STORE_MASK = 4294901760_u32
  CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824_u32
  CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912_u32
  CERT_SYSTEM_STORE_LOCATION_SHIFT = 16_u32
  CERT_SYSTEM_STORE_CURRENT_USER_ID = 1_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2_u32
  CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4_u32
  CERT_SYSTEM_STORE_SERVICES_ID = 5_u32
  CERT_SYSTEM_STORE_USERS_ID = 6_u32
  CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9_u32
  CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10_u32
  CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1_u32
  CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2_u32
  CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4_u32
  CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8_u32
  CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8_u32
  CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16_u32
  CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32_u32
  CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536_u32
  CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3_u32
  CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0_u32
  CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1_u32
  CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2_u32
  CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256_u32
  CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512_u32
  CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1_u32
  CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2_u32
  CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4_u32
  CERT_REGISTRY_STORE_REMOTE_FLAG = 65536_u32
  CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072_u32
  CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648_u32
  CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216_u32
  CERT_REGISTRY_STORE_ROAMING_FLAG = 262144_u32
  CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288_u32
  CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576_u32
  CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536_u32
  CERT_LDAP_STORE_SIGN_FLAG = 65536_u32
  CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072_u32
  CERT_LDAP_STORE_OPENED_FLAG = 262144_u32
  CERT_LDAP_STORE_UNBIND_FLAG = 524288_u32
  CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32_u32
  CERT_STORE_PROV_SHARED_USER_FLAG = 64_u32
  CERT_STORE_PROV_CLOSE_FUNC = 0_u32
  CERT_STORE_PROV_READ_CERT_FUNC = 1_u32
  CERT_STORE_PROV_WRITE_CERT_FUNC = 2_u32
  CERT_STORE_PROV_DELETE_CERT_FUNC = 3_u32
  CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4_u32
  CERT_STORE_PROV_READ_CRL_FUNC = 5_u32
  CERT_STORE_PROV_WRITE_CRL_FUNC = 6_u32
  CERT_STORE_PROV_DELETE_CRL_FUNC = 7_u32
  CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8_u32
  CERT_STORE_PROV_READ_CTL_FUNC = 9_u32
  CERT_STORE_PROV_WRITE_CTL_FUNC = 10_u32
  CERT_STORE_PROV_DELETE_CTL_FUNC = 11_u32
  CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12_u32
  CERT_STORE_PROV_CONTROL_FUNC = 13_u32
  CERT_STORE_PROV_FIND_CERT_FUNC = 14_u32
  CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15_u32
  CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16_u32
  CERT_STORE_PROV_FIND_CRL_FUNC = 17_u32
  CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18_u32
  CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19_u32
  CERT_STORE_PROV_FIND_CTL_FUNC = 20_u32
  CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21_u32
  CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22_u32
  CERT_STORE_PROV_WRITE_ADD_FLAG = 1_u32
  CERT_STORE_SAVE_AS_PKCS12 = 3_u32
  CERT_CLOSE_STORE_FORCE_FLAG = 1_u32
  CERT_CLOSE_STORE_CHECK_FLAG = 2_u32
  CERT_COMPARE_MASK = 65535_u32
  CERT_COMPARE_ANY = 0_u32
  CERT_COMPARE_SHA1_HASH = 1_u32
  CERT_COMPARE_NAME = 2_u32
  CERT_COMPARE_ATTR = 3_u32
  CERT_COMPARE_MD5_HASH = 4_u32
  CERT_COMPARE_PROPERTY = 5_u32
  CERT_COMPARE_PUBLIC_KEY = 6_u32
  CERT_COMPARE_HASH = 1_u32
  CERT_COMPARE_NAME_STR_A = 7_u32
  CERT_COMPARE_NAME_STR_W = 8_u32
  CERT_COMPARE_KEY_SPEC = 9_u32
  CERT_COMPARE_ENHKEY_USAGE = 10_u32
  CERT_COMPARE_CTL_USAGE = 10_u32
  CERT_COMPARE_SUBJECT_CERT = 11_u32
  CERT_COMPARE_ISSUER_OF = 12_u32
  CERT_COMPARE_EXISTING = 13_u32
  CERT_COMPARE_SIGNATURE_HASH = 14_u32
  CERT_COMPARE_KEY_IDENTIFIER = 15_u32
  CERT_COMPARE_CERT_ID = 16_u32
  CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17_u32
  CERT_COMPARE_PUBKEY_MD5_HASH = 18_u32
  CERT_COMPARE_SUBJECT_INFO_ACCESS = 19_u32
  CERT_COMPARE_HASH_STR = 20_u32
  CERT_COMPARE_HAS_PRIVATE_KEY = 21_u32
  CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648_u32
  CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824_u32
  CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1_u32
  CRL_FIND_ANY = 0_u32
  CRL_FIND_ISSUED_BY = 1_u32
  CRL_FIND_EXISTING = 2_u32
  CRL_FIND_ISSUED_FOR = 3_u32
  CRL_FIND_ISSUED_BY_AKI_FLAG = 1_u32
  CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2_u32
  CRL_FIND_ISSUED_BY_DELTA_FLAG = 4_u32
  CRL_FIND_ISSUED_BY_BASE_FLAG = 8_u32
  CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16_u32
  CERT_STORE_ADD_NEW = 1_u32
  CERT_STORE_ADD_USE_EXISTING = 2_u32
  CERT_STORE_ADD_REPLACE_EXISTING = 3_u32
  CERT_STORE_ADD_ALWAYS = 4_u32
  CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5_u32
  CERT_STORE_ADD_NEWER = 6_u32
  CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7_u32
  CERT_STORE_CERTIFICATE_CONTEXT = 1_u32
  CERT_STORE_CRL_CONTEXT = 2_u32
  CERT_STORE_CTL_CONTEXT = 3_u32
  CTL_ANY_SUBJECT_TYPE = 1_u32
  CTL_CERT_SUBJECT_TYPE = 2_u32
  CTL_FIND_NO_LIST_ID_CBDATA = 4294967295_u32
  CERT_STORE_CTRL_RESYNC = 1_u32
  CERT_STORE_CTRL_NOTIFY_CHANGE = 2_u32
  CERT_STORE_CTRL_COMMIT = 3_u32
  CERT_STORE_CTRL_AUTO_RESYNC = 4_u32
  CERT_STORE_CTRL_CANCEL_NOTIFY = 5_u32
  CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096_u32
  CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1_u32
  CERT_CREATE_CONTEXT_SORTED_FLAG = 2_u32
  CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4_u32
  CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8_u32
  CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1_u32
  CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2_u32
  CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4_u32
  CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8_u32
  CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1_u32
  CMSG_TRUSTED_SIGNER_FLAG = 1_u32
  CMSG_SIGNER_ONLY_FLAG = 2_u32
  CMSG_USE_SIGNER_INDEX_FLAG = 4_u32
  CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768_u32
  CMSG_ENCODE_SORTED_CTL_FLAG = 1_u32
  CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2_u32
  CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1_u32
  CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2_u32
  CERT_VERIFY_NO_TIME_CHECK_FLAG = 4_u32
  CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8_u32
  CERT_VERIFY_UPDATED_CTL_FLAG = 1_u32
  CERT_CONTEXT_REVOCATION_TYPE = 1_u32
  CERT_VERIFY_REV_CHAIN_FLAG = 1_u32
  CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2_u32
  CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4_u32
  CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8_u32
  CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16_u32
  CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32_u32
  CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1_u32
  CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3_u32
  CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3_u32
  CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4_u32
  CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8_u32
  CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128_u32
  CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752_u32
  CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536_u32
  CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072_u32
  CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144_u32
  CRYPT_DELETE_KEYSET = 16_u32
  CERT_XML_NAME_STR = 4_u32
  CERT_NAME_STR_SEMICOLON_FLAG = 1073741824_u32
  CERT_NAME_STR_NO_PLUS_FLAG = 536870912_u32
  CERT_NAME_STR_NO_QUOTING_FLAG = 268435456_u32
  CERT_NAME_STR_CRLF_FLAG = 134217728_u32
  CERT_NAME_STR_COMMA_FLAG = 67108864_u32
  CERT_NAME_STR_REVERSE_FLAG = 33554432_u32
  CERT_NAME_STR_FORWARD_FLAG = 16777216_u32
  CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536_u32
  CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072_u32
  CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144_u32
  CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288_u32
  CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576_u32
  CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152_u32
  CERT_NAME_EMAIL_TYPE = 1_u32
  CERT_NAME_RDN_TYPE = 2_u32
  CERT_NAME_ATTR_TYPE = 3_u32
  CERT_NAME_SIMPLE_DISPLAY_TYPE = 4_u32
  CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5_u32
  CERT_NAME_DNS_TYPE = 6_u32
  CERT_NAME_URL_TYPE = 7_u32
  CERT_NAME_UPN_TYPE = 8_u32
  CERT_NAME_ISSUER_FLAG = 1_u32
  CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536_u32
  CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2_u32
  CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1_u32
  CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2_u32
  CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4_u32
  CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64_u32
  CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4_u32
  CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1_u32
  CRYPT_CACHE_ONLY_RETRIEVAL = 2_u32
  CRYPT_WIRE_ONLY_RETRIEVAL = 4_u32
  CRYPT_DONT_CACHE_RESULT = 8_u32
  CRYPT_ASYNC_RETRIEVAL = 16_u32
  CRYPT_STICKY_CACHE_RETRIEVAL = 4096_u32
  CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192_u32
  CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384_u32
  CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768_u32
  CRYPT_LDAP_SIGN_RETRIEVAL = 65536_u32
  CRYPT_NO_AUTH_RETRIEVAL = 131072_u32
  CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144_u32
  CRYPT_AIA_RETRIEVAL = 524288_u32
  CRYPT_HTTP_POST_RETRIEVAL = 1048576_u32
  CRYPT_PROXY_CACHE_RETRIEVAL = 2097152_u32
  CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304_u32
  CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608_u32
  CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864_u32
  CRYPT_ENABLE_FILE_RETRIEVAL = 134217728_u32
  CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456_u32
  CRYPT_VERIFY_CONTEXT_SIGNATURE = 32_u32
  CRYPT_VERIFY_DATA_HASH = 64_u32
  CRYPT_KEEP_TIME_VALID = 128_u32
  CRYPT_DONT_VERIFY_SIGNATURE = 256_u32
  CRYPT_DONT_CHECK_TIME_VALIDITY = 512_u32
  CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024_u32
  CRYPT_ACCUMULATIVE_TIMEOUT = 2048_u32
  CRYPT_OCSP_ONLY_RETRIEVAL = 16777216_u32
  CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6_u32
  CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7_u32
  CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0_u32
  CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295_u32
  CRYPTNET_URL_CACHE_RESPONSE_NONE = 0_u32
  CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1_u32
  CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768_u32
  CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096_u32
  CRYPT_KEYID_MACHINE_FLAG = 32_u32
  CRYPT_KEYID_ALLOC_FLAG = 32768_u32
  CRYPT_KEYID_DELETE_FLAG = 16_u32
  CRYPT_KEYID_SET_NEW_FLAG = 8192_u32
  CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000_u32
  CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10_u32
  CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5_u32
  CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295_u32
  CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1_u32
  CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2_u32
  CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4_u32
  CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8_u32
  CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023_u32
  CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295_u32
  CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295_u32
  CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648_u32
  CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16_u32
  CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536_u32
  CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072_u32
  CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144_u32
  CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576_u32
  CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152_u32
  CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304_u32
  CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608_u32
  CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216_u32
  CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432_u32
  CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864_u32
  CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728_u32
  CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456_u32
  CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912_u32
  CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824_u32
  CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096_u32
  CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192_u32
  CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384_u32
  CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768_u32
  CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144_u32
  CERT_CHAIN_AUTO_CURRENT_USER = 1_u32
  CERT_CHAIN_AUTO_LOCAL_MACHINE = 2_u32
  CERT_CHAIN_AUTO_IMPERSONATED = 3_u32
  CERT_CHAIN_AUTO_PROCESS_INFO = 4_u32
  CERT_CHAIN_AUTO_PINRULE_INFO = 5_u32
  CERT_CHAIN_AUTO_NETWORK_INFO = 6_u32
  CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7_u32
  CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8_u32
  CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1_u32
  CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2_u32
  CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4_u32
  CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8_u32
  CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5_u32
  CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500_u32
  CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295_u32
  CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10_u32
  CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20_u32
  CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 10_u32
  CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295_u32
  CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60_u32
  CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50_u32
  CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295_u32
  CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2_u32
  CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4_u32
  CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12_u32
  CERT_CHAIN_CACHE_END_CERT = 1_u32
  CERT_CHAIN_THREAD_STORE_SYNC = 2_u32
  CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4_u32
  CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8_u32
  CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16_u32
  CERT_CHAIN_ENABLE_SHARE_STORE = 32_u32
  CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1_u32
  CERT_TRUST_NO_ERROR = 0_u32
  CERT_TRUST_IS_NOT_TIME_VALID = 1_u32
  CERT_TRUST_IS_NOT_TIME_NESTED = 2_u32
  CERT_TRUST_IS_REVOKED = 4_u32
  CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8_u32
  CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16_u32
  CERT_TRUST_IS_UNTRUSTED_ROOT = 32_u32
  CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64_u32
  CERT_TRUST_IS_CYCLIC = 128_u32
  CERT_TRUST_INVALID_EXTENSION = 256_u32
  CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512_u32
  CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024_u32
  CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048_u32
  CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096_u32
  CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192_u32
  CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384_u32
  CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768_u32
  CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216_u32
  CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432_u32
  CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864_u32
  CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728_u32
  CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576_u32
  CERT_TRUST_HAS_WEAK_HYGIENE = 2097152_u32
  CERT_TRUST_IS_PARTIAL_CHAIN = 65536_u32
  CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072_u32
  CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144_u32
  CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288_u32
  CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1_u32
  CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2_u32
  CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4_u32
  CERT_TRUST_IS_SELF_SIGNED = 8_u32
  CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16_u32
  CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32_u32
  CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64_u32
  CERT_TRUST_IS_KEY_ROLLOVER = 128_u32
  CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144_u32
  CERT_TRUST_SSL_TIME_VALID_OCSP = 524288_u32
  CERT_TRUST_SSL_RECONNECT_OCSP = 1048576_u32
  CERT_TRUST_HAS_PREFERRED_ISSUER = 256_u32
  CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512_u32
  CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024_u32
  CERT_TRUST_IS_PEER_TRUSTED = 2048_u32
  CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096_u32
  CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192_u32
  CERT_TRUST_IS_CA_TRUSTED = 16384_u32
  CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768_u32
  CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072_u32
  CERT_TRUST_IS_COMPLEX_CHAIN = 65536_u32
  CERT_TRUST_SSL_TIME_VALID = 16777216_u32
  CERT_TRUST_NO_TIME_CHECK = 33554432_u32
  USAGE_MATCH_TYPE_AND = 0_u32
  USAGE_MATCH_TYPE_OR = 1_u32
  CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1_u32
  CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456_u32
  CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912_u32
  CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824_u32
  CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648_u32
  CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728_u32
  CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864_u32
  CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64_u32
  CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128_u32
  CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256_u32
  CERT_CHAIN_TIMESTAMP_TIME = 512_u32
  CERT_CHAIN_ENABLE_PEER_TRUST = 1024_u32
  CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048_u32
  CERT_CHAIN_DISABLE_MD2_MD4 = 4096_u32
  CERT_CHAIN_DISABLE_AIA = 8192_u32
  CERT_CHAIN_HAS_MOTW = 16384_u32
  CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768_u32
  CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536_u32
  CERT_CHAIN_FIND_BY_ISSUER = 1_u32
  CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728_u32
  BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648_u32
  BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072_u32
  MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144_u32
  SSL_F12_ERROR_TEXT_LENGTH = 256_u32
  CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0_u32
  CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1_u32
  CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2_u32
  CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0_u32
  CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1_u32
  CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2_u32
  SSL_HPKP_PKP_HEADER_INDEX = 0_u32
  SSL_HPKP_PKP_RO_HEADER_INDEX = 1_u32
  SSL_HPKP_HEADER_COUNT = 2_u32
  SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2_i32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1_i32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1_u32
  CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2_u32
  CRYPT_STRING_BASE64URI = 13_u32
  CRYPT_STRING_ENCODEMASK = 255_u32
  CRYPT_STRING_RESERVED100 = 256_u32
  CRYPT_STRING_RESERVED200 = 512_u32
  CRYPT_STRING_PERCENTESCAPE = 134217728_u32
  CRYPT_STRING_HASHDATA = 268435456_u32
  CRYPT_STRING_NOCRLF = 1073741824_u32
  CRYPT_STRING_NOCR = 2147483648_u32
  PKCS12_IMPORT_SILENT = 64_u32
  PKCS12_ONLY_CERTIFICATES = 1024_u32
  PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048_u32
  PKCS12_VIRTUAL_ISOLATION_KEY = 65536_u32
  PKCS12_IMPORT_RESERVED_MASK = 4294901760_u32
  PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0_u32
  REPORT_NO_PRIVATE_KEY = 1_u32
  REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2_u32
  EXPORT_PRIVATE_KEYS = 4_u32
  PKCS12_PROTECT_TO_DOMAIN_SIDS = 32_u32
  PKCS12_EXPORT_SILENT = 64_u32
  PKCS12_EXPORT_PBES2_PARAMS = 128_u32
  PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256_u32
  PKCS12_ENCRYPT_CERTIFICATES = 512_u32
  PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096_u32
  PKCS12_EXPORT_ECC_CURVE_OID = 8192_u32
  PKCS12_EXPORT_RESERVED_MASK = 4294901760_u32
  CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1_u32
  CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2_u32
  CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1_u32
  CERT_SELECT_MAX_PARA = 500_u32
  CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12_u32
  CERT_SELECT_BY_FRIENDLYNAME = 13_u32
  CERT_SELECT_BY_THUMBPRINT = 14_u32
  CERT_SELECT_ALLOW_EXPIRED = 1_u32
  CERT_SELECT_TRUSTED_ROOT = 2_u32
  CERT_SELECT_DISALLOW_SELFSIGNED = 4_u32
  CERT_SELECT_HAS_PRIVATE_KEY = 8_u32
  CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16_u32
  CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32_u32
  CERT_SELECT_HARDWARE_ONLY = 64_u32
  CERT_SELECT_ALLOW_DUPLICATES = 128_u32
  CERT_SELECT_IGNORE_AUTOSELECT = 256_u32
  TIMESTAMP_FAILURE_BAD_ALG = 0_u32
  TIMESTAMP_FAILURE_BAD_REQUEST = 2_u32
  TIMESTAMP_FAILURE_BAD_FORMAT = 5_u32
  TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14_u32
  TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15_u32
  TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16_u32
  TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17_u32
  TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25_u32
  TIMESTAMP_DONT_HASH_DATA = 1_u32
  TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32_u32
  TIMESTAMP_NO_AUTH_RETRIEVAL = 131072_u32
  CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1_u32
  CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32_u32
  CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33_u32
  CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535_u32
  CERT_FILE_HASH_USE_TYPE = 1_u32
  CERT_TIMESTAMP_HASH_USE_TYPE = 2_u32
  RECIPIENTPOLICYV1 = 1_u32
  RECIPIENTPOLICYV2 = 2_u32
  E_ICARD_COMMUNICATION = -1073413888_i32
  E_ICARD_DATA_ACCESS = -1073413887_i32
  E_ICARD_EXPORT = -1073413886_i32
  E_ICARD_IDENTITY = -1073413885_i32
  E_ICARD_IMPORT = -1073413884_i32
  E_ICARD_ARGUMENT = -1073413883_i32
  E_ICARD_REQUEST = -1073413882_i32
  E_ICARD_INFORMATIONCARD = -1073413881_i32
  E_ICARD_STOREKEY = -1073413880_i32
  E_ICARD_LOGOVALIDATION = -1073413879_i32
  E_ICARD_PASSWORDVALIDATION = -1073413878_i32
  E_ICARD_POLICY = -1073413877_i32
  E_ICARD_PROCESSDIED = -1073413876_i32
  E_ICARD_SERVICEBUSY = -1073413875_i32
  E_ICARD_SERVICE = -1073413874_i32
  E_ICARD_SHUTTINGDOWN = -1073413873_i32
  E_ICARD_TOKENCREATION = -1073413872_i32
  E_ICARD_TRUSTEXCHANGE = -1073413871_i32
  E_ICARD_UNTRUSTED = -1073413870_i32
  E_ICARD_USERCANCELLED = -1073413869_i32
  E_ICARD_STORE_IMPORT = -1073413868_i32
  E_ICARD_FAIL = -1073413867_i32
  E_ICARD_UI_INITIALIZATION = -1073413862_i32
  E_ICARD_REFRESH_REQUIRED = -1073413760_i32
  E_ICARD_MISSING_APPLIESTO = -1073413759_i32
  E_ICARD_INVALID_PROOF_KEY = -1073413758_i32
  E_ICARD_UNKNOWN_REFERENCE = -1073413757_i32
  E_ICARD_FAILED_REQUIRED_CLAIMS = -1073413756_i32
  AUDIT_CARD_WRITTEN = 1074070016_i32
  AUDIT_CARD_DELETE = 1074070017_i32
  AUDIT_CARD_IMPORT = 1074070018_i32
  AUDIT_STORE_IMPORT = 1074070019_i32
  AUDIT_STORE_EXPORT = 1074070020_i32
  AUDIT_STORE_DELETE = 1074070021_i32
  AUDIT_SERVICE_IDLE_STOP = 1074070022_i32
  CCertSrvSetupKeyInformation = LibC::GUID.new(0x38373906_u32, 0x5433_u16, 0x4633_u16, StaticArray[0xb0_u8, 0xfb_u8, 0x29_u8, 0xb7_u8, 0xe7_u8, 0x82_u8, 0x62_u8, 0xe1_u8])
  CCertSrvSetup = LibC::GUID.new(0x961f180f_u32, 0xf55c_u16, 0x413d_u16, StaticArray[0xa9_u8, 0xb3_u8, 0x7d_u8, 0x2a_u8, 0xf4_u8, 0xd8_u8, 0xe4_u8, 0x2f_u8])
  CMSCEPSetup = LibC::GUID.new(0xaa4f5c02_u32, 0x8e7c_u16, 0x49c4_u16, StaticArray[0x94_u8, 0xfa_u8, 0x67_u8, 0xa5_u8, 0xcc_u8, 0x5e_u8, 0xad_u8, 0xb4_u8])
  CCertificateEnrollmentServerSetup = LibC::GUID.new(0x9902f3bc_u32, 0x88af_u16, 0x4cf8_u16, StaticArray[0xae_u8, 0x62_u8, 0x71_u8, 0x40_u8, 0x53_u8, 0x15_u8, 0x52_u8, 0xb6_u8])
  CCertificateEnrollmentPolicyServerSetup = LibC::GUID.new(0xafe2fa32_u32, 0x41b1_u16, 0x459d_u16, StaticArray[0xa5_u8, 0xde_u8, 0x49_u8, 0xad_u8, 0xd8_u8, 0xa7_u8, 0x21_u8, 0x82_u8])

  alias PFN_NCRYPT_ALLOC = Proc(LibC::UINT_PTR, Void*)
  alias PFN_NCRYPT_FREE = Proc(Void*, Void)
  alias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = Proc(CRYPT_ALGORITHM_IDENTIFIER, CRYPTOAPI_BLOB, UInt8*, UInt32*, Void*, LibC::BOOL)
  alias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = Proc(CRYPT_ALGORITHM_IDENTIFIER*, CRYPTOAPI_BLOB*, UInt8*, UInt32*, Void*, LibC::BOOL)
  alias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = Proc(CRYPT_PRIVATE_KEY_INFO*, LibC::UINT_PTR*, Void*, LibC::BOOL)
  alias PFN_CRYPT_ALLOC = Proc(LibC::UINT_PTR, Void*)
  alias PFN_CRYPT_FREE = Proc(Void*, Void)
  alias PFN_CRYPT_ENUM_OID_FUNC = Proc(UInt32, PSTR, PSTR, UInt32, UInt32*, LibC::LPWSTR*, UInt8**, UInt32*, Void*, LibC::BOOL)
  alias PFN_CRYPT_ENUM_OID_INFO = Proc(CRYPT_OID_INFO*, Void*, LibC::BOOL)
  alias PFN_CMSG_STREAM_OUTPUT = Proc(Void*, UInt8*, UInt32, LibC::BOOL, LibC::BOOL)
  alias PFN_CMSG_ALLOC = Proc(LibC::UINT_PTR, Void*)
  alias PFN_CMSG_FREE = Proc(Void*, Void)
  alias PFN_CMSG_GEN_ENCRYPT_KEY = Proc(LibC::UINT_PTR*, CRYPT_ALGORITHM_IDENTIFIER*, Void*, CERT_PUBLIC_KEY_INFO*, PFN_CMSG_ALLOC, LibC::UINT_PTR*, UInt8**, UInt32*, LibC::BOOL)
  alias PFN_CMSG_EXPORT_ENCRYPT_KEY = Proc(LibC::UINT_PTR, LibC::UINT_PTR, CERT_PUBLIC_KEY_INFO*, UInt8*, UInt32*, LibC::BOOL)
  alias PFN_CMSG_IMPORT_ENCRYPT_KEY = Proc(LibC::UINT_PTR, UInt32, CRYPT_ALGORITHM_IDENTIFIER*, CRYPT_ALGORITHM_IDENTIFIER*, UInt8*, UInt32, LibC::UINT_PTR*, LibC::BOOL)
  alias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = Proc(CMSG_CONTENT_ENCRYPT_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_EXPORT_KEY_TRANS = Proc(CMSG_CONTENT_ENCRYPT_INFO*, CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, CMSG_KEY_TRANS_ENCRYPT_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_EXPORT_KEY_AGREE = Proc(CMSG_CONTENT_ENCRYPT_INFO*, CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, CMSG_KEY_AGREE_ENCRYPT_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_EXPORT_MAIL_LIST = Proc(CMSG_CONTENT_ENCRYPT_INFO*, CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*, CMSG_MAIL_LIST_ENCRYPT_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_IMPORT_KEY_TRANS = Proc(CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, UInt32, Void*, LibC::UINT_PTR*, LibC::BOOL)
  alias PFN_CMSG_IMPORT_KEY_AGREE = Proc(CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, UInt32, Void*, LibC::UINT_PTR*, LibC::BOOL)
  alias PFN_CMSG_IMPORT_MAIL_LIST = Proc(CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*, UInt32, Void*, LibC::UINT_PTR*, LibC::BOOL)
  alias PFN_CMSG_CNG_IMPORT_KEY_TRANS = Proc(CMSG_CNG_CONTENT_DECRYPT_INFO*, CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_CNG_IMPORT_KEY_AGREE = Proc(CMSG_CNG_CONTENT_DECRYPT_INFO*, CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, UInt32, Void*, LibC::BOOL)
  alias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = Proc(CMSG_CNG_CONTENT_DECRYPT_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = Proc(PSTR, CERT_QUERY_ENCODING_TYPE, LibC::UINT_PTR, CERT_OPEN_STORE_FLAGS, Void*, Void*, CERT_STORE_PROV_INFO*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_CLOSE = Proc(Void*, UInt32, Void)
  alias PFN_CERT_STORE_PROV_READ_CERT = Proc(Void*, CERT_CONTEXT*, UInt32, CERT_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_WRITE_CERT = Proc(Void*, CERT_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_DELETE_CERT = Proc(Void*, CERT_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = Proc(Void*, CERT_CONTEXT*, UInt32, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_READ_CRL = Proc(Void*, CRL_CONTEXT*, UInt32, CRL_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_WRITE_CRL = Proc(Void*, CRL_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_DELETE_CRL = Proc(Void*, CRL_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = Proc(Void*, CRL_CONTEXT*, UInt32, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_READ_CTL = Proc(Void*, CTL_CONTEXT*, UInt32, CTL_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_WRITE_CTL = Proc(Void*, CTL_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_DELETE_CTL = Proc(Void*, CTL_CONTEXT*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = Proc(Void*, CTL_CONTEXT*, UInt32, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_CONTROL = Proc(Void*, UInt32, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FIND_CERT = Proc(Void*, CERT_STORE_PROV_FIND_INFO*, CERT_CONTEXT*, UInt32, Void**, CERT_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FREE_FIND_CERT = Proc(Void*, CERT_CONTEXT*, Void*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = Proc(Void*, CERT_CONTEXT*, UInt32, UInt32, Void*, UInt32*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FIND_CRL = Proc(Void*, CERT_STORE_PROV_FIND_INFO*, CRL_CONTEXT*, UInt32, Void**, CRL_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FREE_FIND_CRL = Proc(Void*, CRL_CONTEXT*, Void*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = Proc(Void*, CRL_CONTEXT*, UInt32, UInt32, Void*, UInt32*, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FIND_CTL = Proc(Void*, CERT_STORE_PROV_FIND_INFO*, CTL_CONTEXT*, UInt32, Void**, CTL_CONTEXT**, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_FREE_FIND_CTL = Proc(Void*, CTL_CONTEXT*, Void*, UInt32, LibC::BOOL)
  alias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = Proc(Void*, CTL_CONTEXT*, UInt32, UInt32, Void*, UInt32*, LibC::BOOL)
  alias PFN_CERT_CREATE_CONTEXT_SORT_FUNC = Proc(UInt32, UInt32, UInt32, Void*, LibC::BOOL)
  alias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = Proc(LibC::LPWSTR, UInt32, Void*, Void*, LibC::BOOL)
  alias PFN_CERT_ENUM_SYSTEM_STORE = Proc(Void*, CERT_SYSTEM_STORE_FLAGS, CERT_SYSTEM_STORE_INFO*, Void*, Void*, LibC::BOOL)
  alias PFN_CERT_ENUM_PHYSICAL_STORE = Proc(Void*, UInt32, LibC::LPWSTR, CERT_PHYSICAL_STORE_INFO*, Void*, Void*, LibC::BOOL)
  alias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = Proc(UInt32, CRYPT_ALGORITHM_IDENTIFIER*, Void**, LibC::LPWSTR*, LibC::BOOL)
  alias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = Proc(LibC::UINT_PTR, UInt32, CRYPT_ALGORITHM_IDENTIFIER*, Void*, LibC::LPWSTR, LibC::LPWSTR, UInt8*, UInt32, UInt8*, UInt32*, LibC::BOOL)
  alias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = Proc(UInt32, CERT_PUBLIC_KEY_INFO*, CRYPT_ALGORITHM_IDENTIFIER*, Void*, LibC::LPWSTR, LibC::LPWSTR, UInt8*, UInt32, UInt8*, UInt32, LibC::BOOL)
  alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = Proc(LibC::UINT_PTR, UInt32, PSTR, UInt32, Void*, CERT_PUBLIC_KEY_INFO*, UInt32*, LibC::BOOL)
  alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = Proc(BCRYPT_KEY_HANDLE, UInt32, PSTR, UInt32, Void*, CERT_PUBLIC_KEY_INFO*, UInt32*, LibC::BOOL)
  alias PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = Proc(UInt32, CERT_PUBLIC_KEY_INFO*, UInt32, Void*, BCRYPT_KEY_HANDLE*, LibC::BOOL)
  alias PFN_IMPORT_PRIV_KEY_FUNC = Proc(LibC::UINT_PTR, CRYPT_PRIVATE_KEY_INFO*, UInt32, Void*, LibC::BOOL)
  alias PFN_EXPORT_PRIV_KEY_FUNC = Proc(LibC::UINT_PTR, UInt32, PSTR, UInt32, Void*, CRYPT_PRIVATE_KEY_INFO*, UInt32*, LibC::BOOL)
  alias PFN_CRYPT_GET_SIGNER_CERTIFICATE = Proc(Void*, UInt32, CERT_INFO*, Void*, CERT_CONTEXT*)
  alias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = Proc(PSTR, Void*, Void)
  alias PFN_FREE_ENCODED_OBJECT_FUNC = Proc(PSTR, CRYPT_BLOB_ARRAY*, Void*, Void)
  alias PFN_CRYPT_CANCEL_RETRIEVAL = Proc(UInt32, Void*, LibC::BOOL)
  alias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = Proc(Void*, UInt32, PSTR, PSTR, Void*, Void)
  alias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = Proc(HCRYPTASYNC, LibC::BOOL)
  alias PFN_CRYPT_ENUM_KEYID_PROP = Proc(CRYPTOAPI_BLOB*, UInt32, Void*, Void*, UInt32, UInt32*, Void**, UInt32*, LibC::BOOL)
  alias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = Proc(CERT_CONTEXT*, Void*, LibC::BOOL)
  alias PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = Proc(CERT_CHAIN_CONTEXT*, CERT_SERVER_OCSP_RESPONSE_CONTEXT*, CRL_CONTEXT*, CRL_CONTEXT*, Void*, UInt32, Void)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = Proc(Void*, CRYPTOAPI_BLOB**, UInt32, LibC::BOOL)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = Proc(Void*, CRYPTOAPI_BLOB*, UInt32, CRYPTOAPI_BLOB*, UInt8**, UInt32*, LibC::LPWSTR*, CRYPTOAPI_BLOB**, LibC::BOOL)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = Proc(CRYPT_OBJECT_LOCATOR_RELEASE_REASON, Void*, Void)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = Proc(Void*, LibC::LPWSTR, Void)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = Proc(Void*, UInt8*, Void)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = Proc(Void*, CRYPTOAPI_BLOB*, Void)
  alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = Proc(PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH, Void*, UInt32*, CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE**, Void**, LibC::BOOL)
  alias PFN_CERT_IS_WEAK_HASH = Proc(UInt32, LibC::LPWSTR, UInt32, CERT_CHAIN_CONTEXT*, FILETIME*, LibC::LPWSTR, LibC::BOOL)
  alias PFNCryptStreamOutputCallback = Proc(Void*, UInt8*, LibC::UINT_PTR, LibC::BOOL, Int32)
  alias PFNCryptStreamOutputCallbackEx = Proc(Void*, UInt8*, LibC::UINT_PTR, NCRYPT_DESCRIPTOR_HANDLE, LibC::BOOL, Int32)
  alias PFN_CRYPT_XML_WRITE_CALLBACK = Proc(Void*, UInt8*, UInt32, HRESULT)
  alias PFN_CRYPT_XML_DATA_PROVIDER_READ = Proc(Void*, UInt8*, UInt32, UInt32*, HRESULT)
  alias PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = Proc(Void*, HRESULT)
  alias PFN_CRYPT_XML_CREATE_TRANSFORM = Proc(CRYPT_XML_ALGORITHM*, CRYPT_XML_DATA_PROVIDER*, CRYPT_XML_DATA_PROVIDER*, HRESULT)
  alias PFN_CRYPT_XML_ENUM_ALG_INFO = Proc(CRYPT_XML_ALGORITHM_INFO*, Void*, LibC::BOOL)
  alias CryptXmlDllGetInterface = Proc(UInt32, CRYPT_XML_ALGORITHM_INFO*, CRYPT_XML_CRYPTOGRAPHIC_INTERFACE*, HRESULT)
  alias CryptXmlDllEncodeAlgorithm = Proc(CRYPT_XML_ALGORITHM_INFO*, CRYPT_XML_CHARSET, Void*, PFN_CRYPT_XML_WRITE_CALLBACK, HRESULT)
  alias CryptXmlDllCreateDigest = Proc(CRYPT_XML_ALGORITHM*, UInt32*, Void**, HRESULT)
  alias CryptXmlDllDigestData = Proc(Void*, UInt8*, UInt32, HRESULT)
  alias CryptXmlDllFinalizeDigest = Proc(Void*, UInt8*, UInt32, HRESULT)
  alias CryptXmlDllCloseDigest = Proc(Void*, HRESULT)
  alias CryptXmlDllSignData = Proc(CRYPT_XML_ALGORITHM*, LibC::UINT_PTR, UInt32, UInt8*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
  alias CryptXmlDllVerifySignature = Proc(CRYPT_XML_ALGORITHM*, BCRYPT_KEY_HANDLE, UInt8*, UInt32, UInt8*, UInt32, HRESULT)
  alias CryptXmlDllGetAlgorithmInfo = Proc(CRYPT_XML_ALGORITHM*, CRYPT_XML_ALGORITHM_INFO**, HRESULT)
  alias CryptXmlDllEncodeKeyValue = Proc(LibC::UINT_PTR, CRYPT_XML_CHARSET, Void*, PFN_CRYPT_XML_WRITE_CALLBACK, HRESULT)
  alias CryptXmlDllCreateKey = Proc(CRYPT_XML_BLOB*, BCRYPT_KEY_HANDLE*, HRESULT)


  enum BCRYPT_OPERATION : UInt32
    BCRYPT_CIPHER_OPERATION = 1
    BCRYPT_HASH_OPERATION = 2
    BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4
    BCRYPT_SECRET_AGREEMENT_OPERATION = 8
    BCRYPT_SIGNATURE_OPERATION = 16
    BCRYPT_RNG_OPERATION = 32
  end

  enum NCRYPT_OPERATION : UInt32
    NCRYPT_CIPHER_OPERATION = 1
    NCRYPT_HASH_OPERATION = 2
    NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4
    NCRYPT_SECRET_AGREEMENT_OPERATION = 8
    NCRYPT_SIGNATURE_OPERATION = 16
  end

  enum CERT_FIND_FLAGS : UInt32
    CERT_FIND_ANY = 0
    CERT_FIND_CERT_ID = 1048576
    CERT_FIND_CTL_USAGE = 655360
    CERT_FIND_ENHKEY_USAGE = 655360
    CERT_FIND_EXISTING = 851968
    CERT_FIND_HASH = 65536
    CERT_FIND_HAS_PRIVATE_KEY = 1376256
    CERT_FIND_ISSUER_ATTR = 196612
    CERT_FIND_ISSUER_NAME = 131076
    CERT_FIND_ISSUER_OF = 786432
    CERT_FIND_ISSUER_STR = 524292
    CERT_FIND_KEY_IDENTIFIER = 983040
    CERT_FIND_KEY_SPEC = 589824
    CERT_FIND_MD5_HASH = 262144
    CERT_FIND_PROPERTY = 327680
    CERT_FIND_PUBLIC_KEY = 393216
    CERT_FIND_SHA1_HASH = 65536
    CERT_FIND_SIGNATURE_HASH = 917504
    CERT_FIND_SUBJECT_ATTR = 196615
    CERT_FIND_SUBJECT_CERT = 720896
    CERT_FIND_SUBJECT_NAME = 131079
    CERT_FIND_SUBJECT_STR = 524295
    CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112
    CERT_FIND_PUBKEY_MD5_HASH = 1179648
    CERT_FIND_SUBJECT_STR_A = 458759
    CERT_FIND_SUBJECT_STR_W = 524295
    CERT_FIND_ISSUER_STR_A = 458756
    CERT_FIND_ISSUER_STR_W = 524292
    CERT_FIND_SUBJECT_INFO_ACCESS = 1245184
    CERT_FIND_HASH_STR = 1310720
    CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1
    CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2
    CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4
    CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8
    CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16
    CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32
    CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1
    CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2
    CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4
    CERT_FIND_NO_CTL_USAGE_FLAG = 8
    CERT_FIND_OR_CTL_USAGE_FLAG = 16
    CERT_FIND_VALID_CTL_USAGE_FLAG = 32
  end

  enum CERT_QUERY_OBJECT_TYPE : UInt32
    CERT_QUERY_OBJECT_FILE = 1
    CERT_QUERY_OBJECT_BLOB = 2
  end

  enum CERT_QUERY_CONTENT_TYPE : UInt32
    CERT_QUERY_CONTENT_CERT = 1
    CERT_QUERY_CONTENT_CTL = 2
    CERT_QUERY_CONTENT_CRL = 3
    CERT_QUERY_CONTENT_SERIALIZED_STORE = 4
    CERT_QUERY_CONTENT_SERIALIZED_CERT = 5
    CERT_QUERY_CONTENT_SERIALIZED_CTL = 6
    CERT_QUERY_CONTENT_SERIALIZED_CRL = 7
    CERT_QUERY_CONTENT_PKCS7_SIGNED = 8
    CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9
    CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10
    CERT_QUERY_CONTENT_PKCS10 = 11
    CERT_QUERY_CONTENT_PFX = 12
    CERT_QUERY_CONTENT_CERT_PAIR = 13
    CERT_QUERY_CONTENT_PFX_AND_LOAD = 14
  end

  enum CERT_QUERY_CONTENT_TYPE_FLAGS : UInt32
    CERT_QUERY_CONTENT_FLAG_CERT = 2
    CERT_QUERY_CONTENT_FLAG_CTL = 4
    CERT_QUERY_CONTENT_FLAG_CRL = 8
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64
    CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128
    CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256
    CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512
    CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024
    CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048
    CERT_QUERY_CONTENT_FLAG_PFX = 4096
    CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192
    CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384
    CERT_QUERY_CONTENT_FLAG_ALL = 16382
    CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818
  end

  enum CERT_QUERY_FORMAT_TYPE : UInt32
    CERT_QUERY_FORMAT_BINARY = 1
    CERT_QUERY_FORMAT_BASE64_ENCODED = 2
    CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3
  end

  enum CERT_QUERY_FORMAT_TYPE_FLAGS : UInt32
    CERT_QUERY_FORMAT_FLAG_BINARY = 2
    CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4
    CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8
    CERT_QUERY_FORMAT_FLAG_ALL = 14
  end

  enum CERT_QUERY_ENCODING_TYPE : UInt32
    X509_ASN_ENCODING = 1
    PKCS_7_ASN_ENCODING = 65536
  end

  enum CERT_RDN_ATTR_VALUE_TYPE : UInt32
    CERT_RDN_ANY_TYPE = 0
    CERT_RDN_NUMERIC_STRING = 3
    CERT_RDN_PRINTABLE_STRING = 4
    CERT_RDN_T61_STRING = 5
    CERT_RDN_VIDEOTEX_STRING = 6
    CERT_RDN_IA5_STRING = 7
    CERT_RDN_GRAPHIC_STRING = 8
    CERT_RDN_ISO646_STRING = 9
    CERT_RDN_GENERAL_STRING = 10
    CERT_RDN_INT4_STRING = 11
    CERT_RDN_UNICODE_STRING = 12
    CERT_RDN_BMP_STRING = 12
    CERT_RDN_ENCODED_BLOB = 1
    CERT_RDN_OCTET_STRING = 2
    CERT_RDN_TELETEX_STRING = 5
    CERT_RDN_UNIVERSAL_STRING = 11
    CERT_RDN_UTF8_STRING = 13
    CERT_RDN_VISIBLE_STRING = 9
  end

  enum CERT_STRING_TYPE : UInt32
    CERT_SIMPLE_NAME_STR = 1
    CERT_OID_NAME_STR = 2
    CERT_X500_NAME_STR = 3
  end

  enum BCRYPT_TABLE : UInt32
    CRYPT_LOCAL = 1
    CRYPT_DOMAIN = 2
  end

  enum CERT_KEY_SPEC : UInt32
    AT_KEYEXCHANGE = 1
    AT_SIGNATURE = 2
    CERT_NCRYPT_KEY_SPEC = 4294967295
  end

  enum BCRYPT_INTERFACE : UInt32
    BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3
    BCRYPT_CIPHER_INTERFACE = 1
    BCRYPT_HASH_INTERFACE = 2
    BCRYPT_RNG_INTERFACE = 6
    BCRYPT_SECRET_AGREEMENT_INTERFACE = 4
    BCRYPT_SIGNATURE_INTERFACE = 5
    NCRYPT_KEY_STORAGE_INTERFACE = 65537
    NCRYPT_SCHANNEL_INTERFACE = 65538
    NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539
  end

  enum NCRYPT_FLAGS : UInt32
    BCRYPT_PAD_NONE = 1
    BCRYPT_PAD_OAEP = 4
    BCRYPT_PAD_PKCS1 = 2
    BCRYPT_PAD_PSS = 8
    NCRYPT_SILENT_FLAG = 64
    NCRYPT_NO_PADDING_FLAG = 1
    NCRYPT_PAD_OAEP_FLAG = 4
    NCRYPT_PAD_PKCS1_FLAG = 2
    NCRYPT_REGISTER_NOTIFY_FLAG = 1
    NCRYPT_UNREGISTER_NOTIFY_FLAG = 2
    NCRYPT_MACHINE_KEY_FLAG = 32
    NCRYPT_UNPROTECT_NO_DECRYPT = 1
    NCRYPT_OVERWRITE_KEY_FLAG = 128
    NCRYPT_NO_KEY_VALIDATION = 8
    NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512
    NCRYPT_PAD_PSS_FLAG = 8
    NCRYPT_PERSIST_FLAG = 2147483648
    NCRYPT_PERSIST_ONLY_FLAG = 1073741824
  end

  enum CRYPT_STRING : UInt32
    CRYPT_STRING_BASE64HEADER = 0
    CRYPT_STRING_BASE64 = 1
    CRYPT_STRING_BINARY = 2
    CRYPT_STRING_BASE64REQUESTHEADER = 3
    CRYPT_STRING_HEX = 4
    CRYPT_STRING_HEXASCII = 5
    CRYPT_STRING_BASE64X509CRLHEADER = 9
    CRYPT_STRING_HEXADDR = 10
    CRYPT_STRING_HEXASCIIADDR = 11
    CRYPT_STRING_HEXRAW = 12
    CRYPT_STRING_STRICT = 536870912
    CRYPT_STRING_BASE64_ANY = 6
    CRYPT_STRING_ANY = 7
    CRYPT_STRING_HEX_ANY = 8
  end

  enum CRYPT_IMPORT_PUBLIC_KEY_FLAGS : UInt32
    CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648
    CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824
  end

  enum CRYPT_XML_FLAGS : UInt32
    CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 268435456
    CRYPT_XML_FLAG_NO_SERIALIZE = 2147483648
    CRYPT_XML_SIGN_ADD_KEYVALUE = 1
  end

  enum CRYPT_ENCODE_OBJECT_FLAGS : UInt32
    CRYPT_ENCODE_ALLOC_FLAG = 32768
    CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072
    CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824
    CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648
    CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912
  end

  enum CRYPT_OBJECT_LOCATOR_RELEASE_REASON : UInt32
    CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1
    CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2
    CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3
    CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4
  end

  enum CRYPT_ACQUIRE_FLAGS : UInt32
    CRYPT_ACQUIRE_CACHE_FLAG = 1
    CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4
    CRYPT_ACQUIRE_NO_HEALING = 8
    CRYPT_ACQUIRE_SILENT_FLAG = 64
    CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2
  end

  enum CRYPT_GET_URL_FLAGS : UInt32
    CRYPT_GET_URL_FROM_PROPERTY = 1
    CRYPT_GET_URL_FROM_EXTENSION = 2
    CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4
    CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8
  end

  enum CERT_STORE_SAVE_AS : UInt32
    CERT_STORE_SAVE_AS_PKCS7 = 2
    CERT_STORE_SAVE_AS_STORE = 1
  end

  enum BCRYPT_QUERY_PROVIDER_MODE : UInt32
    CRYPT_ANY = 4
    CRYPT_UM = 1
    CRYPT_KM = 2
    CRYPT_MM = 3
  end

  enum CERT_FIND_CHAIN_IN_STORE_FLAGS : UInt32
    CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1
    CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4
    CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8
    CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384
  end

  enum CERT_CONTROL_STORE_FLAGS : UInt32
    CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1
    CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2
    CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1
  end

  enum BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS : UInt32
    BCRYPT_ALG_HANDLE_HMAC_FLAG = 8
    BCRYPT_PROV_DISPATCH = 1
    BCRYPT_HASH_REUSABLE_FLAG = 32
  end

  enum CERT_STORE_SAVE_TO : UInt32
    CERT_STORE_SAVE_TO_FILE = 1
    CERT_STORE_SAVE_TO_FILENAME = 4
    CERT_STORE_SAVE_TO_FILENAME_A = 3
    CERT_STORE_SAVE_TO_FILENAME_W = 4
    CERT_STORE_SAVE_TO_MEMORY = 2
  end

  enum CRYPT_SET_PROV_PARAM_ID : UInt32
    PP_CLIENT_HWND = 1
    PP_DELETEKEY = 24
    PP_KEYEXCHANGE_ALG = 14
    PP_KEYEXCHANGE_PIN = 32
    PP_KEYEXCHANGE_KEYSIZE = 12
    PP_KEYSET_SEC_DESCR = 8
    PP_PIN_PROMPT_STRING = 44
    PP_ROOT_CERTSTORE = 46
    PP_SIGNATURE_ALG = 15
    PP_SIGNATURE_PIN = 33
    PP_SIGNATURE_KEYSIZE = 13
    PP_UI_PROMPT = 21
    PP_USE_HARDWARE_RNG = 38
    PP_USER_CERTSTORE = 42
    PP_SECURE_KEYEXCHANGE_PIN = 47
    PP_SECURE_SIGNATURE_PIN = 48
    PP_SMARTCARD_READER = 43
  end

  enum CRYPT_KEY_PARAM_ID : UInt32
    KP_ALGID = 7
    KP_CERTIFICATE = 26
    KP_PERMISSIONS = 6
    KP_SALT = 2
    KP_SALT_EX = 10
    KP_BLOCKLEN = 8
    KP_GET_USE_COUNT = 42
    KP_KEYLEN = 9
  end

  enum CRYPT_KEY_FLAGS : UInt32
    CRYPT_EXPORTABLE = 1
    CRYPT_USER_PROTECTED = 2
    CRYPT_ARCHIVABLE = 16384
    CRYPT_CREATE_IV = 512
    CRYPT_CREATE_SALT = 4
    CRYPT_DATA_KEY = 2048
    CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768
    CRYPT_KEK = 1024
    CRYPT_INITIATOR = 64
    CRYPT_NO_SALT = 16
    CRYPT_ONLINE = 128
    CRYPT_PREGEN = 64
    CRYPT_RECIPIENT = 16
    CRYPT_SF = 256
    CRYPT_SGCKEY = 8192
    CRYPT_VOLATILE = 4096
    CRYPT_MACHINE_KEYSET = 32
    CRYPT_USER_KEYSET = 4096
    PKCS12_PREFER_CNG_KSP = 256
    PKCS12_ALWAYS_CNG_KSP = 512
    PKCS12_ALLOW_OVERWRITE_KEY = 16384
    PKCS12_NO_PERSIST_KEY = 32768
    PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16
    CRYPT_OAEP = 64
    CRYPT_BLOB_VER3 = 128
    CRYPT_DESTROYKEY = 4
    CRYPT_SSL2_FALLBACK = 2
    CRYPT_Y_ONLY = 1
    CRYPT_IPSEC_HMAC_KEY = 256
    CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1
    CERT_SET_KEY_CONTEXT_PROP_ID = 1
  end

  enum CRYPT_MSG_TYPE : UInt32
    CMSG_DATA = 1
    CMSG_SIGNED = 2
    CMSG_ENVELOPED = 3
    CMSG_SIGNED_AND_ENVELOPED = 4
    CMSG_HASHED = 5
  end

  enum CERT_OPEN_STORE_FLAGS : UInt32
    CERT_STORE_BACKUP_RESTORE_FLAG = 2048
    CERT_STORE_CREATE_NEW_FLAG = 8192
    CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4
    CERT_STORE_DELETE_FLAG = 16
    CERT_STORE_ENUM_ARCHIVED_FLAG = 512
    CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096
    CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1
    CERT_STORE_OPEN_EXISTING_FLAG = 16384
    CERT_STORE_READONLY_FLAG = 32768
    CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2
    CERT_STORE_SHARE_CONTEXT_FLAG = 128
    CERT_STORE_UPDATE_KEYID_FLAG = 1024
  end

  enum CRYPT_DEFAULT_CONTEXT_FLAGS : UInt32
    CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1
    CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2
  end

  enum CRYPT_VERIFY_CERT_FLAGS : UInt32
    CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1
    CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2
    CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4
  end

  enum CRYPT_SET_HASH_PARAM : UInt32
    HP_HMAC_INFO = 5
    HP_HASHVAL = 2
  end

  enum CERT_SYSTEM_STORE_FLAGS : UInt32
    CERT_SYSTEM_STORE_LOCATION_MASK = 16711680
    CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648
  end

  enum CERT_CREATE_SELFSIGN_FLAGS : UInt32
    CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2
    CERT_CREATE_SELFSIGN_NO_SIGN = 1
  end

  enum CRYPT_DEFAULT_CONTEXT_TYPE : UInt32
    CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1
    CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2
  end

  enum BCRYPT_RESOLVE_PROVIDERS_FLAGS : UInt32
    CRYPT_ALL_FUNCTIONS = 1
    CRYPT_ALL_PROVIDERS = 2
  end

  enum CERT_FIND_TYPE : UInt32
    CTL_FIND_ANY = 0
    CTL_FIND_SHA1_HASH = 1
    CTL_FIND_MD5_HASH = 2
    CTL_FIND_USAGE = 3
    CTL_FIND_SAME_USAGE_FLAG = 1
    CTL_FIND_EXISTING = 5
    CTL_FIND_SUBJECT = 4
  end

  enum CRYPT_FIND_FLAGS : UInt32
    CRYPT_FIND_USER_KEYSET_FLAG = 1
    CRYPT_FIND_MACHINE_KEYSET_FLAG = 2
    CRYPT_FIND_SILENT_KEYSET_FLAG = 64
  end

  enum CRYPT_IMAGE_REF_FLAGS : UInt32
    CRYPT_MIN_DEPENDENCIES = 1
    CRYPT_PROCESS_ISOLATE = 65536
  end

  enum CERT_REVOCATION_STATUS_REASON : UInt32
    CRL_REASON_UNSPECIFIED = 0
    CRL_REASON_KEY_COMPROMISE = 1
    CRL_REASON_CA_COMPROMISE = 2
    CRL_REASON_AFFILIATION_CHANGED = 3
    CRL_REASON_SUPERSEDED = 4
    CRL_REASON_CESSATION_OF_OPERATION = 5
    CRL_REASON_CERTIFICATE_HOLD = 6
    CRL_REASON_REMOVE_FROM_CRL = 8
  end

  enum CERT_ROOT_PROGRAM_FLAGS : UInt32
    CERT_ROOT_PROGRAM_FLAG_LSC = 64
    CERT_ROOT_PROGRAM_FLAG_ORG = 128
    CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32
  end

  enum CRYPT_XML_KEY_VALUE_TYPE : UInt32
    CRYPT_XML_KEY_VALUE_TYPE_DSA = 1
    CRYPT_XML_KEY_VALUE_TYPE_RSA = 2
    CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 3
    CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 4
  end

  enum CERT_LOGOTYPE_CHOICE : UInt32
    CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0
    CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1
    CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2
  end

  enum CMSG_KEY_AGREE_OPTION : UInt32
    CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1
    CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2
  end

  enum CERT_LOGOTYPE_OPTION : UInt32
    CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1
    CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2
  end

  enum CERT_STORE_PROV_FLAGS : UInt32
    CERT_STORE_PROV_EXTERNAL_FLAG = 1
    CERT_STORE_PROV_DELETED_FLAG = 2
    CERT_STORE_PROV_NO_PERSIST_FLAG = 4
    CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8
    CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16
  end

  enum CMSG_KEY_AGREE_ORIGINATOR : UInt32
    CMSG_KEY_AGREE_ORIGINATOR_CERT = 1
    CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2
  end

  enum CRYPT_CONTEXT_CONFIG_FLAGS : UInt32
    CRYPT_EXCLUSIVE = 1
    CRYPT_OVERRIDE = 65536
  end

  enum BCRYPT_DSA_MAGIC : UInt32
    BCRYPT_DSA_PUBLIC_MAGIC = 1112560452
    BCRYPT_DSA_PRIVATE_MAGIC = 1448104772
  end

  enum CRYPT_XML_X509DATA_TYPE : UInt32
    CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 1
    CRYPT_XML_X509DATA_TYPE_SKI = 2
    CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 3
    CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 4
    CRYPT_XML_X509DATA_TYPE_CRL = 5
    CRYPT_XML_X509DATA_TYPE_CUSTOM = 6
  end

  enum CERT_BIOMETRIC_DATA_TYPE : UInt32
    CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1
    CERT_BIOMETRIC_OID_DATA_CHOICE = 2
  end

  enum CERT_CHAIN_POLICY_FLAGS : UInt32
    CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1
    CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2
    CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4
    CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7
    CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8
    CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16
    CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32
    CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64
    CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128
    CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256
    CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512
    CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024
    CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048
    CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840
    CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768
    CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384
    CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192
    CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096
  end

  enum CERT_STRONG_SIGN_FLAGS : UInt32
    CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1
    CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2
  end

  enum CERT_LOGOTYPE_IMAGE_INFO_TYPE : UInt32
    CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1
    CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2
  end

  enum CRYPT_XML_STATUS_INFO_STATUS : UInt32
    CRYPT_XML_STATUS_INTERNAL_REFERENCE = 1
    CRYPT_XML_STATUS_KEY_AVAILABLE = 2
    CRYPT_XML_STATUS_DIGESTING = 4
    CRYPT_XML_STATUS_DIGEST_VALID = 8
    CRYPT_XML_STATUS_SIGNATURE_VALID = 65536
    CRYPT_XML_STATUS_OPENED_TO_ENCODE = 2147483648
  end

  enum CRYPT_XML_TRANSFORM_FLAGS : UInt32
    CRYPT_XML_TRANSFORM_ON_STREAM = 1
    CRYPT_XML_TRANSFORM_ON_NODESET = 2
    CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 3
  end

  enum CRYPT_XML_GROUP_ID : UInt32
    CRYPT_XML_GROUP_ID_HASH_________ = 1
    CRYPT_XML_GROUP_ID_SIGN_________ = 2
  end

  enum CERT_SELECT_CRITERIA_TYPE : UInt32
    CERT_SELECT_BY_ENHKEY_USAGE = 1
    CERT_SELECT_BY_KEY_USAGE = 2
    CERT_SELECT_BY_POLICY_OID = 3
    CERT_SELECT_BY_PROV_NAME = 4
    CERT_SELECT_BY_EXTENSION = 5
    CERT_SELECT_BY_SUBJECT_HOST_NAME = 6
    CERT_SELECT_BY_ISSUER_ATTR = 7
    CERT_SELECT_BY_SUBJECT_ATTR = 8
    CERT_SELECT_BY_ISSUER_NAME = 9
    CERT_SELECT_BY_PUBLIC_KEY = 10
    CERT_SELECT_BY_TLS_SIGNATURES = 11
  end

  enum BCRYPT_RSAKEY_BLOB_MAGIC : UInt32
    BCRYPT_RSAPUBLIC_MAGIC = 826364754
    BCRYPT_RSAPRIVATE_MAGIC = 843141970
    BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186
  end

  enum CRYPT_XML_KEYINFO_TYPE : UInt32
    CRYPT_XML_KEYINFO_TYPE_KEYNAME = 1
    CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 2
    CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 3
    CRYPT_XML_KEYINFO_TYPE_X509DATA = 4
    CRYPT_XML_KEYINFO_TYPE_CUSTOM = 5
  end

  enum CRYPT_TIMESTAMP_VERSION : UInt32
    TIMESTAMP_VERSION = 1
  end

  enum CERT_ID_OPTION : UInt32
    CERT_ID_ISSUER_SERIAL_NUMBER = 1
    CERT_ID_KEY_IDENTIFIER = 2
    CERT_ID_SHA1_HASH = 3
  end

  enum HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE : UInt32
    AUTHTYPE_CLIENT = 1
    AUTHTYPE_SERVER = 2
  end

  enum BCRYPT_DH_KEY_BLOB_MAGIC : UInt32
    BCRYPT_DH_PUBLIC_MAGIC = 1112557636
    BCRYPT_DH_PRIVATE_MAGIC = 1448101956
  end

  enum CRYPT_XML_STATUS_ERROR_STATUS : UInt32
    CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 1
    CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 2
    CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 5
    CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 8
    CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 65536
    CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 131072
  end

  enum CRYPT_TIMESTAMP_RESPONSE_STATUS : UInt32
    TIMESTAMP_STATUS_GRANTED = 0
    TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1
    TIMESTAMP_STATUS_REJECTED = 2
    TIMESTAMP_STATUS_WAITING = 3
    TIMESTAMP_STATUS_REVOCATION_WARNING = 4
    TIMESTAMP_STATUS_REVOKED = 5
  end

  enum NCRYPT_ALGORITHM_NAME_CLASS : UInt32
    NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3
    NCRYPT_SECRET_AGREEMENT_INTERFACE = 4
    NCRYPT_SIGNATURE_INTERFACE = 5
  end

  enum ECC_CURVE_TYPE_ENUM : Int32
    BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1
    BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2
    BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3
  end

  enum ECC_CURVE_ALG_ID_ENUM : Int32
    BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0
  end

  enum HASHALGORITHM_ENUM : Int32
    DSA_HASH_ALGORITHM_SHA1 = 0
    DSA_HASH_ALGORITHM_SHA256 = 1
    DSA_HASH_ALGORITHM_SHA512 = 2
  end

  enum DSAFIPSVERSION_ENUM : Int32
    DSA_FIPS186_2 = 0
    DSA_FIPS186_3 = 1
  end

  enum BCRYPT_HASH_OPERATION_TYPE : Int32
    BCRYPT_HASH_OPERATION_HASH_DATA = 1
    BCRYPT_HASH_OPERATION_FINISH_HASH = 2
  end

  enum BCRYPT_MULTI_OPERATION_TYPE : Int32
    BCRYPT_OPERATION_TYPE_HASH = 1
  end

  enum CertKeyType : UInt32
    KeyTypeOther = 0
    KeyTypeVirtualSmartCard = 1
    KeyTypePhysicalSmartCard = 2
    KeyTypePassport = 3
    KeyTypePassportRemote = 4
    KeyTypePassportSmartCard = 5
    KeyTypeHardware = 6
    KeyTypeSoftware = 7
    KeyTypeSelfSigned = 8
  end

  enum CRYPT_XML_CHARSET : Int32
    CRYPT_XML_CHARSET_AUTO = 0
    CRYPT_XML_CHARSET_UTF8 = 1
    CRYPT_XML_CHARSET_UTF16LE = 2
    CRYPT_XML_CHARSET_UTF16BE = 3
  end

  enum CRYPT_XML_PROPERTY_ID : Int32
    CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1
    CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2
    CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3
    CRYPT_XML_PROPERTY_DOC_DECLARATION = 4
    CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5
  end

  enum CRYPT_XML_KEYINFO_SPEC : Int32
    CRYPT_XML_KEYINFO_SPEC_NONE = 0
    CRYPT_XML_KEYINFO_SPEC_ENCODED = 1
    CRYPT_XML_KEYINFO_SPEC_PARAM = 2
  end

  enum HandleType : Int32
    Asymmetric = 1
    Symmetric = 2
    Transform = 3
    Hash = 4
  end

  enum PaddingMode : Int32
    None = 1
    PKCS7 = 2
    Zeros = 3
    ANSIX923 = 4
    ISO10126 = 5
  end

  enum Direction : Int32
    DirectionEncrypt = 1
    DirectionDecrypt = 2
  end

  enum CASetupProperty : Int32
    ENUM_SETUPPROP_INVALID = -1
    ENUM_SETUPPROP_CATYPE = 0
    ENUM_SETUPPROP_CAKEYINFORMATION = 1
    ENUM_SETUPPROP_INTERACTIVE = 2
    ENUM_SETUPPROP_CANAME = 3
    ENUM_SETUPPROP_CADSSUFFIX = 4
    ENUM_SETUPPROP_VALIDITYPERIOD = 5
    ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6
    ENUM_SETUPPROP_EXPIRATIONDATE = 7
    ENUM_SETUPPROP_PRESERVEDATABASE = 8
    ENUM_SETUPPROP_DATABASEDIRECTORY = 9
    ENUM_SETUPPROP_LOGDIRECTORY = 10
    ENUM_SETUPPROP_SHAREDFOLDER = 11
    ENUM_SETUPPROP_PARENTCAMACHINE = 12
    ENUM_SETUPPROP_PARENTCANAME = 13
    ENUM_SETUPPROP_REQUESTFILE = 14
    ENUM_SETUPPROP_WEBCAMACHINE = 15
    ENUM_SETUPPROP_WEBCANAME = 16
  end

  enum MSCEPSetupProperty : Int32
    ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0
    ENUM_CEPSETUPPROP_USECHALLENGE = 1
    ENUM_CEPSETUPPROP_RANAME_CN = 2
    ENUM_CEPSETUPPROP_RANAME_EMAIL = 3
    ENUM_CEPSETUPPROP_RANAME_COMPANY = 4
    ENUM_CEPSETUPPROP_RANAME_DEPT = 5
    ENUM_CEPSETUPPROP_RANAME_CITY = 6
    ENUM_CEPSETUPPROP_RANAME_STATE = 7
    ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8
    ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9
    ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10
    ENUM_CEPSETUPPROP_CAINFORMATION = 11
    ENUM_CEPSETUPPROP_MSCEPURL = 12
    ENUM_CEPSETUPPROP_CHALLENGEURL = 13
  end

  enum CESSetupProperty : Int32
    ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0
    ENUM_CESSETUPPROP_CACONFIG = 1
    ENUM_CESSETUPPROP_AUTHENTICATION = 2
    ENUM_CESSETUPPROP_SSLCERTHASH = 3
    ENUM_CESSETUPPROP_URL = 4
    ENUM_CESSETUPPROP_RENEWALONLY = 5
    ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6
  end

  enum CEPSetupProperty : Int32
    ENUM_CEPSETUPPROP_AUTHENTICATION = 0
    ENUM_CEPSETUPPROP_SSLCERTHASH = 1
    ENUM_CEPSETUPPROP_URL = 2
    ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3
  end

  union CERT_ALT_NAME_ENTRY_Anonymous_e__Union
    p_other_name : CERT_OTHER_NAME*
    pwsz_rfc822_name : LibC::LPWSTR
    pwsz_dns_name : LibC::LPWSTR
    directory_name : CRYPTOAPI_BLOB
    pwsz_url : LibC::LPWSTR
    ip_address : CRYPTOAPI_BLOB
    psz_registered_id : PSTR
  end
  union CRL_DIST_POINT_NAME_Anonymous_e__Union
    full_name : CERT_ALT_NAME_INFO
  end
  union CMC_TAGGED_REQUEST_Anonymous_e__Union
    p_tagged_cert_request : CMC_TAGGED_CERT_REQUEST*
  end
  union CMC_STATUS_INFO_Anonymous_e__Union
    dw_fail_info : UInt32
    p_pend_info : CMC_PEND_INFO*
  end
  union CERT_LOGOTYPE_IMAGE_INFO_Anonymous_e__Union
    dw_num_bits : UInt32
    dw_table_size : UInt32
  end
  union CERT_LOGOTYPE_INFO_Anonymous_e__Union
    p_logotype_direct_info : CERT_LOGOTYPE_DATA*
    p_logotype_indirect_info : CERT_LOGOTYPE_REFERENCE*
  end
  union CERT_BIOMETRIC_DATA_Anonymous_e__Union
    dw_predefined : UInt32
    psz_obj_id : PSTR
  end
  union OCSP_BASIC_RESPONSE_ENTRY_Anonymous_e__Union
    p_revoked_info : OCSP_BASIC_REVOKED_INFO*
  end
  union OCSP_BASIC_RESPONSE_INFO_Anonymous_e__Union
    by_name_responder_id : CRYPTOAPI_BLOB
    by_key_responder_id : CRYPTOAPI_BLOB
  end
  union CRYPT_OID_INFO_Anonymous_e__Union
    dw_value : UInt32
    algid : UInt32
    dw_length : UInt32
  end
  union CERT_STRONG_SIGN_PARA_Anonymous_e__Union
    pv_info : Void*
    p_serialized_info : CERT_STRONG_SIGN_SERIALIZED_INFO*
    psz_oid : PSTR
  end
  union CERT_ID_Anonymous_e__Union
    issuer_serial_number : CERT_ISSUER_SERIAL_NUMBER
    key_id : CRYPTOAPI_BLOB
    hash_id : CRYPTOAPI_BLOB
  end
  union CMSG_SIGNER_ENCODE_INFO_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
    p_ephemeral_algorithm : CRYPT_ALGORITHM_IDENTIFIER*
    p_sender_id : CERT_ID*
  end
  union CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
    h_key_encryption_key : LibC::UINT_PTR
    pv_key_encryption_key : Void*
  end
  union CMSG_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
    p_key_trans : CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*
    p_key_agree : CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*
    p_mail_list : CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*
  end
  union CMSG_KEY_AGREE_RECIPIENT_INFO_Anonymous_e__Union
    originator_cert_id : CERT_ID
    originator_public_key_info : CERT_PUBLIC_KEY_INFO
  end
  union CMSG_CMS_RECIPIENT_INFO_Anonymous_e__Union
    p_key_trans : CMSG_KEY_TRANS_RECIPIENT_INFO*
    p_key_agree : CMSG_KEY_AGREE_RECIPIENT_INFO*
    p_mail_list : CMSG_MAIL_LIST_RECIPIENT_INFO*
  end
  union CMSG_CTRL_DECRYPT_PARA_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_Anonymous_e__Union
    h_key_encryption_key : LibC::UINT_PTR
    pv_key_encryption_key : Void*
  end
  union CMSG_CONTENT_ENCRYPT_INFO_Anonymous_e__Union
    h_content_encrypt_key : LibC::UINT_PTR
    h_cng_content_encrypt_key : BCRYPT_KEY_HANDLE
  end
  union CMSG_KEY_AGREE_ENCRYPT_INFO_Anonymous_e__Union
    originator_cert_id : CERT_ID
    originator_public_key_info : CERT_PUBLIC_KEY_INFO
  end
  union CERT_KEY_CONTEXT_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union CERT_SYSTEM_STORE_RELOCATE_PARA_Anonymous2_e__Union
    pv_system_store : Void*
    psz_system_store : PSTR
    pwsz_system_store : LibC::LPWSTR
  end
  union CERT_SYSTEM_STORE_RELOCATE_PARA_Anonymous1_e__Union
    h_key_base : HKEY
    pv_base : Void*
  end
  union CRYPT_KEY_SIGN_MESSAGE_PARA_Anonymous_e__Union
    h_crypt_prov : LibC::UINT_PTR
    h_n_crypt_key : LibC::UINT_PTR
  end
  union HTTPSPolicyCallbackData_Anonymous_e__Union
    cb_struct : UInt32
    cb_size : UInt32
  end
  union CRYPT_XML_KEY_VALUE_Anonymous_e__Union
    dsa_key_value : CRYPT_XML_KEY_DSA_KEY_VALUE
    rsa_key_value : CRYPT_XML_KEY_RSA_KEY_VALUE
    ecdsa_key_value : CRYPT_XML_KEY_ECDSA_KEY_VALUE
    custom : CRYPT_XML_BLOB
  end
  union CRYPT_XML_X509DATA_ITEM_Anonymous_e__Union
    issuer_serial : CRYPT_XML_ISSUER_SERIAL
    ski : CRYPT_XML_DATA_BLOB
    wsz_subject_name : LibC::LPWSTR
    certificate : CRYPT_XML_DATA_BLOB
    crl : CRYPT_XML_DATA_BLOB
    custom : CRYPT_XML_BLOB
  end
  union CRYPT_XML_KEY_INFO_ITEM_Anonymous_e__Union
    wsz_key_name : LibC::LPWSTR
    key_value : CRYPT_XML_KEY_VALUE
    retrieval_method : CRYPT_XML_BLOB
    x509_data : CRYPT_XML_X509DATA
    custom : CRYPT_XML_BLOB
  end

  struct CMS_KEY_INFO
    dw_version : UInt32
    algid : UInt32
    pb_oid : UInt8*
    cb_oid : UInt32
  end
  struct HMAC_Info
    hash_algid : UInt32
    pb_inner_string : UInt8*
    cb_inner_string : UInt32
    pb_outer_string : UInt8*
    cb_outer_string : UInt32
  end
  struct SCHANNEL_ALG
    dw_use : UInt32
    algid : UInt32
    c_bits : UInt32
    dw_flags : UInt32
    dw_reserved : UInt32
  end
  struct PROV_ENUMALGS
    ai_algid : UInt32
    dw_bit_len : UInt32
    dw_name_len : UInt32
    sz_name : CHAR[20]*
  end
  struct PROV_ENUMALGS_EX
    ai_algid : UInt32
    dw_default_len : UInt32
    dw_min_len : UInt32
    dw_max_len : UInt32
    dw_protocols : UInt32
    dw_name_len : UInt32
    sz_name : CHAR[20]*
    dw_long_name_len : UInt32
    sz_long_name : CHAR[40]*
  end
  struct PUBLICKEYSTRUC
    b_type : UInt8
    b_version : UInt8
    reserved : UInt16
    ai_key_alg : UInt32
  end
  struct RSAPUBKEY
    magic : UInt32
    bitlen : UInt32
    pubexp : UInt32
  end
  struct PUBKEY
    magic : UInt32
    bitlen : UInt32
  end
  struct DSSSEED
    counter : UInt32
    seed : UInt8[20]*
  end
  struct PUBKEYVER3
    magic : UInt32
    bitlen_p : UInt32
    bitlen_q : UInt32
    bitlen_j : UInt32
    dss_seed : DSSSEED
  end
  struct PRIVKEYVER3
    magic : UInt32
    bitlen_p : UInt32
    bitlen_q : UInt32
    bitlen_j : UInt32
    bitlen_x : UInt32
    dss_seed : DSSSEED
  end
  struct KEY_TYPE_SUBTYPE
    dw_key_spec : UInt32
    type : Guid
    subtype : Guid
  end
  struct CERT_FORTEZZA_DATA_PROP
    serial_number : UInt8[8]*
    cert_index : Int32
    cert_label : UInt8[36]*
  end
  struct CRYPT_RC4_KEY_STATE
    key : UInt8[16]*
    s_box : UInt8[256]*
    i : UInt8
    j : UInt8
  end
  struct CRYPT_DES_KEY_STATE
    key : UInt8[8]*
    iv : UInt8[8]*
    feedback : UInt8[8]*
  end
  struct CRYPT_3DES_KEY_STATE
    key : UInt8[24]*
    iv : UInt8[8]*
    feedback : UInt8[8]*
  end
  struct CRYPT_AES_128_KEY_STATE
    key : UInt8[16]*
    iv : UInt8[16]*
    encryption_state : UInt8[176]*
    decryption_state : UInt8[176]*
    feedback : UInt8[16]*
  end
  struct CRYPT_AES_256_KEY_STATE
    key : UInt8[32]*
    iv : UInt8[16]*
    encryption_state : UInt8[240]*
    decryption_state : UInt8[240]*
    feedback : UInt8[16]*
  end
  struct CRYPTOAPI_BLOB
    cb_data : UInt32
    pb_data : UInt8*
  end
  struct CMS_DH_KEY_INFO
    dw_version : UInt32
    algid : UInt32
    psz_content_enc_obj_id : PSTR
    pub_info : CRYPTOAPI_BLOB
    p_reserved : Void*
  end
  struct BCRYPT_KEY_LENGTHS_STRUCT
    dw_min_length : UInt32
    dw_max_length : UInt32
    dw_increment : UInt32
  end
  struct BCRYPT_OID
    cb_oid : UInt32
    pb_oid : UInt8*
  end
  struct BCRYPT_OID_LIST
    dw_oid_count : UInt32
    p_oi_ds : BCRYPT_OID*
  end
  struct BCRYPT_PKCS1_PADDING_INFO
    psz_alg_id : LibC::LPWSTR
  end
  struct BCRYPT_PSS_PADDING_INFO
    psz_alg_id : LibC::LPWSTR
    cb_salt : UInt32
  end
  struct BCRYPT_OAEP_PADDING_INFO
    psz_alg_id : LibC::LPWSTR
    pb_label : UInt8*
    cb_label : UInt32
  end
  struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    cb_size : UInt32
    dw_info_version : UInt32
    pb_nonce : UInt8*
    cb_nonce : UInt32
    pb_auth_data : UInt8*
    cb_auth_data : UInt32
    pb_tag : UInt8*
    cb_tag : UInt32
    pb_mac_context : UInt8*
    cb_mac_context : UInt32
    cb_aad : UInt32
    cb_data : UInt64
    dw_flags : UInt32
  end
  struct BCryptBuffer
    cb_buffer : UInt32
    buffer_type : UInt32
    pv_buffer : Void*
  end
  struct BCryptBufferDesc
    ul_version : UInt32
    c_buffers : UInt32
    p_buffers : BCryptBuffer*
  end
  struct BCRYPT_KEY_BLOB
    magic : UInt32
  end
  struct BCRYPT_RSAKEY_BLOB
    magic : BCRYPT_RSAKEY_BLOB_MAGIC
    bit_length : UInt32
    cb_public_exp : UInt32
    cb_modulus : UInt32
    cb_prime1 : UInt32
    cb_prime2 : UInt32
  end
  struct BCRYPT_ECCKEY_BLOB
    dw_magic : UInt32
    cb_key : UInt32
  end
  struct SSL_ECCKEY_BLOB
    dw_curve_type : UInt32
    cb_key : UInt32
  end
  struct BCRYPT_ECCFULLKEY_BLOB
    dw_magic : UInt32
    dw_version : UInt32
    dw_curve_type : ECC_CURVE_TYPE_ENUM
    dw_curve_generation_alg_id : ECC_CURVE_ALG_ID_ENUM
    cb_field_length : UInt32
    cb_subgroup_order : UInt32
    cb_cofactor : UInt32
    cb_seed : UInt32
  end
  struct BCRYPT_DH_KEY_BLOB
    dw_magic : BCRYPT_DH_KEY_BLOB_MAGIC
    cb_key : UInt32
  end
  struct BCRYPT_DH_PARAMETER_HEADER
    cb_length : UInt32
    dw_magic : UInt32
    cb_key_length : UInt32
  end
  struct BCRYPT_DSA_KEY_BLOB
    dw_magic : BCRYPT_DSA_MAGIC
    cb_key : UInt32
    count : UInt8[4]*
    seed : UInt8[20]*
    q : UInt8[20]*
  end
  struct BCRYPT_DSA_KEY_BLOB_V2
    dw_magic : BCRYPT_DSA_MAGIC
    cb_key : UInt32
    hash_algorithm : HASHALGORITHM_ENUM
    standard_version : DSAFIPSVERSION_ENUM
    cb_seed_length : UInt32
    cb_group_size : UInt32
    count : UInt8[4]*
  end
  struct BCRYPT_KEY_DATA_BLOB_HEADER
    dw_magic : UInt32
    dw_version : UInt32
    cb_key_data : UInt32
  end
  struct BCRYPT_DSA_PARAMETER_HEADER
    cb_length : UInt32
    dw_magic : UInt32
    cb_key_length : UInt32
    count : UInt8[4]*
    seed : UInt8[20]*
    q : UInt8[20]*
  end
  struct BCRYPT_DSA_PARAMETER_HEADER_V2
    cb_length : UInt32
    dw_magic : UInt32
    cb_key_length : UInt32
    hash_algorithm : HASHALGORITHM_ENUM
    standard_version : DSAFIPSVERSION_ENUM
    cb_seed_length : UInt32
    cb_group_size : UInt32
    count : UInt8[4]*
  end
  struct BCRYPT_ECC_CURVE_NAMES
    dw_ecc_curve_names : UInt32
    p_ecc_curve_names : LibC::LPWSTR*
  end
  struct BCRYPT_MULTI_HASH_OPERATION
    i_hash : UInt32
    hash_operation : BCRYPT_HASH_OPERATION_TYPE
    pb_buffer : UInt8*
    cb_buffer : UInt32
  end
  struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
    cb_per_object : UInt32
    cb_per_element : UInt32
  end
  struct BCRYPT_ALGORITHM_IDENTIFIER
    psz_name : LibC::LPWSTR
    dw_class : UInt32
    dw_flags : UInt32
  end
  struct BCRYPT_PROVIDER_NAME
    psz_provider_name : LibC::LPWSTR
  end
  struct BCRYPT_INTERFACE_VERSION
    major_version : UInt16
    minor_version : UInt16
  end
  struct CRYPT_INTERFACE_REG
    dw_interface : BCRYPT_INTERFACE
    dw_flags : BCRYPT_TABLE
    c_functions : UInt32
    rgpsz_functions : LibC::LPWSTR*
  end
  struct CRYPT_IMAGE_REG
    psz_image : LibC::LPWSTR
    c_interfaces : UInt32
    rgp_interfaces : CRYPT_INTERFACE_REG**
  end
  struct CRYPT_PROVIDER_REG
    c_aliases : UInt32
    rgpsz_aliases : LibC::LPWSTR*
    p_um : CRYPT_IMAGE_REG*
    p_km : CRYPT_IMAGE_REG*
  end
  struct CRYPT_PROVIDERS
    c_providers : UInt32
    rgpsz_providers : LibC::LPWSTR*
  end
  struct CRYPT_CONTEXT_CONFIG
    dw_flags : CRYPT_CONTEXT_CONFIG_FLAGS
    dw_reserved : UInt32
  end
  struct CRYPT_CONTEXT_FUNCTION_CONFIG
    dw_flags : UInt32
    dw_reserved : UInt32
  end
  struct CRYPT_CONTEXTS
    c_contexts : UInt32
    rgpsz_contexts : LibC::LPWSTR*
  end
  struct CRYPT_CONTEXT_FUNCTIONS
    c_functions : UInt32
    rgpsz_functions : LibC::LPWSTR*
  end
  struct CRYPT_CONTEXT_FUNCTION_PROVIDERS
    c_providers : UInt32
    rgpsz_providers : LibC::LPWSTR*
  end
  struct CRYPT_PROPERTY_REF
    psz_property : LibC::LPWSTR
    cb_value : UInt32
    pb_value : UInt8*
  end
  struct CRYPT_IMAGE_REF
    psz_image : LibC::LPWSTR
    dw_flags : CRYPT_IMAGE_REF_FLAGS
  end
  struct CRYPT_PROVIDER_REF
    dw_interface : UInt32
    psz_function : LibC::LPWSTR
    psz_provider : LibC::LPWSTR
    c_properties : UInt32
    rgp_properties : CRYPT_PROPERTY_REF**
    p_um : CRYPT_IMAGE_REF*
    p_km : CRYPT_IMAGE_REF*
  end
  struct CRYPT_PROVIDER_REFS
    c_providers : UInt32
    rgp_providers : CRYPT_PROVIDER_REF**
  end
  struct NCRYPT_ALLOC_PARA
    cb_size : UInt32
    pfn_alloc : PFN_NCRYPT_ALLOC
    pfn_free : PFN_NCRYPT_FREE
  end
  struct NCRYPT_CIPHER_PADDING_INFO
    cb_size : UInt32
    dw_flags : UInt32
    pb_iv : UInt8*
    cb_iv : UInt32
    pb_other_info : UInt8*
    cb_other_info : UInt32
  end
  struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO
    magic : UInt32
    pcr_mask : UInt32
  end
  struct NCRYPT_KEY_ATTEST_PADDING_INFO
    magic : UInt32
    pb_key_blob : UInt8*
    cb_key_blob : UInt32
    pb_key_auth : UInt8*
    cb_key_auth : UInt32
  end
  struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
    version : UInt32
    flags : UInt32
    cb_public_key_blob : UInt32
  end
  struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
    magic : UInt32
    version : UInt32
    cb_signature : UInt32
    cb_report : UInt32
    cb_attributes : UInt32
  end
  struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
    version : UInt32
    trustlet_id : UInt64
    min_svn : UInt32
    flags_mask : UInt32
    flags_expected : UInt32
    _bitfield : UInt32
  end
  struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
    version : UInt32
    key_usage : UInt32
    _bitfield : UInt32
    cb_alg_name : UInt32
    cb_nonce : UInt32
    cb_auth_tag : UInt32
    cb_wrapping_key : UInt32
    cb_isolated_key : UInt32
  end
  struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
    header : NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
  end
  struct NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
    magic : UInt32
    version : UInt32
    header_size : UInt32
    cb_certify_info : UInt32
    cb_signature : UInt32
    cb_tpm_public : UInt32
  end
  struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
    magic : UInt32
    version : UInt32
    pcr_alg : UInt32
    cb_signature : UInt32
    cb_quote : UInt32
    cb_pcrs : UInt32
  end
  struct NCryptAlgorithmName
    psz_name : LibC::LPWSTR
    dw_class : NCRYPT_ALGORITHM_NAME_CLASS
    dw_alg_operations : NCRYPT_OPERATION
    dw_flags : UInt32
  end
  struct NCryptKeyName
    psz_name : LibC::LPWSTR
    psz_algid : LibC::LPWSTR
    dw_legacy_key_spec : CERT_KEY_SPEC
    dw_flags : UInt32
  end
  struct NCryptProviderName
    psz_name : LibC::LPWSTR
    psz_comment : LibC::LPWSTR
  end
  struct NCRYPT_UI_POLICY
    dw_version : UInt32
    dw_flags : UInt32
    psz_creation_title : LibC::LPWSTR
    psz_friendly_name : LibC::LPWSTR
    psz_description : LibC::LPWSTR
  end
  struct NCRYPT_KEY_ACCESS_POLICY_BLOB
    dw_version : UInt32
    dw_policy_flags : UInt32
    cb_user_sid : UInt32
    cb_application_sid : UInt32
  end
  struct NCRYPT_SUPPORTED_LENGTHS
    dw_min_length : UInt32
    dw_max_length : UInt32
    dw_increment : UInt32
    dw_default_length : UInt32
  end
  struct NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
    dw_version : UInt32
    i_expiration : Int32
    pab_nonce : UInt8[32]*
    pab_policy_ref : UInt8[32]*
    pab_hmac : UInt8[32]*
  end
  struct NCRYPT_PCP_TPM_FW_VERSION_INFO
    major1 : UInt16
    major2 : UInt16
    minor1 : UInt16
    minor2 : UInt16
  end
  struct NCRYPT_PCP_RAW_POLICYDIGEST
    dw_version : UInt32
    cb_digest : UInt32
  end
  struct NCRYPT_KEY_BLOB_HEADER
    cb_size : UInt32
    dw_magic : UInt32
    cb_alg_name : UInt32
    cb_key_data : UInt32
  end
  struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
    magic : UInt32
    cb_header : UInt32
    cb_public : UInt32
    cb_private : UInt32
    cb_name : UInt32
  end
  struct CRYPT_BIT_BLOB
    cb_data : UInt32
    pb_data : UInt8*
    c_unused_bits : UInt32
  end
  struct CRYPT_ALGORITHM_IDENTIFIER
    psz_obj_id : PSTR
    parameters : CRYPTOAPI_BLOB
  end
  struct CRYPT_OBJID_TABLE
    dw_alg_id : UInt32
    psz_obj_id : PSTR
  end
  struct CRYPT_HASH_INFO
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hash : CRYPTOAPI_BLOB
  end
  struct CERT_EXTENSION
    psz_obj_id : PSTR
    f_critical : LibC::BOOL
    value : CRYPTOAPI_BLOB
  end
  struct CRYPT_ATTRIBUTE_TYPE_VALUE
    psz_obj_id : PSTR
    value : CRYPTOAPI_BLOB
  end
  struct CRYPT_ATTRIBUTE
    psz_obj_id : PSTR
    c_value : UInt32
    rg_value : CRYPTOAPI_BLOB*
  end
  struct CRYPT_ATTRIBUTES
    c_attr : UInt32
    rg_attr : CRYPT_ATTRIBUTE*
  end
  struct CERT_RDN_ATTR
    psz_obj_id : PSTR
    dw_value_type : CERT_RDN_ATTR_VALUE_TYPE
    value : CRYPTOAPI_BLOB
  end
  struct CERT_RDN
    c_rdn_attr : UInt32
    rg_rdn_attr : CERT_RDN_ATTR*
  end
  struct CERT_NAME_INFO
    c_rdn : UInt32
    rg_rdn : CERT_RDN*
  end
  struct CERT_NAME_VALUE
    dw_value_type : UInt32
    value : CRYPTOAPI_BLOB
  end
  struct CERT_PUBLIC_KEY_INFO
    algorithm : CRYPT_ALGORITHM_IDENTIFIER
    public_key : CRYPT_BIT_BLOB
  end
  struct CRYPT_ECC_PRIVATE_KEY_INFO
    dw_version : UInt32
    private_key : CRYPTOAPI_BLOB
    sz_curve_oid : PSTR
    public_key : CRYPT_BIT_BLOB
  end
  struct CRYPT_PRIVATE_KEY_INFO
    version : UInt32
    algorithm : CRYPT_ALGORITHM_IDENTIFIER
    private_key : CRYPTOAPI_BLOB
    p_attributes : CRYPT_ATTRIBUTES*
  end
  struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
    encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_private_key : CRYPTOAPI_BLOB
  end
  struct CRYPT_PKCS8_IMPORT_PARAMS
    private_key : CRYPTOAPI_BLOB
    p_resolveh_crypt_prov_func : PCRYPT_RESOLVE_HCRYPTPROV_FUNC
    p_void_resolve_func : Void*
    p_decrypt_private_key_func : PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
    p_void_decrypt_func : Void*
  end
  struct CRYPT_PKCS8_EXPORT_PARAMS
    h_crypt_prov : LibC::UINT_PTR
    dw_key_spec : UInt32
    psz_private_key_obj_id : PSTR
    p_encrypt_private_key_func : PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
    p_void_encrypt_func : Void*
  end
  struct CERT_INFO
    dw_version : UInt32
    serial_number : CRYPTOAPI_BLOB
    signature_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    issuer : CRYPTOAPI_BLOB
    not_before : FILETIME
    not_after : FILETIME
    subject : CRYPTOAPI_BLOB
    subject_public_key_info : CERT_PUBLIC_KEY_INFO
    issuer_unique_id : CRYPT_BIT_BLOB
    subject_unique_id : CRYPT_BIT_BLOB
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRL_ENTRY
    serial_number : CRYPTOAPI_BLOB
    revocation_date : FILETIME
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRL_INFO
    dw_version : UInt32
    signature_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    issuer : CRYPTOAPI_BLOB
    this_update : FILETIME
    next_update : FILETIME
    c_crl_entry : UInt32
    rg_crl_entry : CRL_ENTRY*
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CERT_OR_CRL_BLOB
    dw_choice : UInt32
    cb_encoded : UInt32
    pb_encoded : UInt8*
  end
  struct CERT_OR_CRL_BUNDLE
    c_item : UInt32
    rg_item : CERT_OR_CRL_BLOB*
  end
  struct CERT_REQUEST_INFO
    dw_version : UInt32
    subject : CRYPTOAPI_BLOB
    subject_public_key_info : CERT_PUBLIC_KEY_INFO
    c_attribute : UInt32
    rg_attribute : CRYPT_ATTRIBUTE*
  end
  struct CERT_KEYGEN_REQUEST_INFO
    dw_version : UInt32
    subject_public_key_info : CERT_PUBLIC_KEY_INFO
    pwsz_challenge_string : LibC::LPWSTR
  end
  struct CERT_SIGNED_CONTENT_INFO
    to_be_signed : CRYPTOAPI_BLOB
    signature_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    signature : CRYPT_BIT_BLOB
  end
  struct CTL_USAGE
    c_usage_identifier : UInt32
    rgpsz_usage_identifier : PSTR*
  end
  struct CTL_ENTRY
    subject_identifier : CRYPTOAPI_BLOB
    c_attribute : UInt32
    rg_attribute : CRYPT_ATTRIBUTE*
  end
  struct CTL_INFO
    dw_version : UInt32
    subject_usage : CTL_USAGE
    list_identifier : CRYPTOAPI_BLOB
    sequence_number : CRYPTOAPI_BLOB
    this_update : FILETIME
    next_update : FILETIME
    subject_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    c_ctl_entry : UInt32
    rg_ctl_entry : CTL_ENTRY*
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRYPT_TIME_STAMP_REQUEST_INFO
    psz_time_stamp_algorithm : PSTR
    psz_content_type : PSTR
    content : CRYPTOAPI_BLOB
    c_attribute : UInt32
    rg_attribute : CRYPT_ATTRIBUTE*
  end
  struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR
    pwsz_name : LibC::LPWSTR
    pwsz_value : LibC::LPWSTR
  end
  struct CRYPT_CSP_PROVIDER
    dw_key_spec : UInt32
    pwsz_provider_name : LibC::LPWSTR
    signature : CRYPT_BIT_BLOB
  end
  struct CRYPT_ENCODE_PARA
    cb_size : UInt32
    pfn_alloc : PFN_CRYPT_ALLOC
    pfn_free : PFN_CRYPT_FREE
  end
  struct CRYPT_DECODE_PARA
    cb_size : UInt32
    pfn_alloc : PFN_CRYPT_ALLOC
    pfn_free : PFN_CRYPT_FREE
  end
  struct CERT_EXTENSIONS
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CERT_AUTHORITY_KEY_ID_INFO
    key_id : CRYPTOAPI_BLOB
    cert_issuer : CRYPTOAPI_BLOB
    cert_serial_number : CRYPTOAPI_BLOB
  end
  struct CERT_PRIVATE_KEY_VALIDITY
    not_before : FILETIME
    not_after : FILETIME
  end
  struct CERT_KEY_ATTRIBUTES_INFO
    key_id : CRYPTOAPI_BLOB
    intended_key_usage : CRYPT_BIT_BLOB
    p_private_key_usage_period : CERT_PRIVATE_KEY_VALIDITY*
  end
  struct CERT_POLICY_ID
    c_cert_policy_element_id : UInt32
    rgpsz_cert_policy_element_id : PSTR*
  end
  struct CERT_KEY_USAGE_RESTRICTION_INFO
    c_cert_policy_id : UInt32
    rg_cert_policy_id : CERT_POLICY_ID*
    restricted_key_usage : CRYPT_BIT_BLOB
  end
  struct CERT_OTHER_NAME
    psz_obj_id : PSTR
    value : CRYPTOAPI_BLOB
  end
  struct CERT_ALT_NAME_ENTRY
    dw_alt_name_choice : UInt32
    anonymous : CERT_ALT_NAME_ENTRY_Anonymous_e__Union
  end
  struct CERT_ALT_NAME_INFO
    c_alt_entry : UInt32
    rg_alt_entry : CERT_ALT_NAME_ENTRY*
  end
  struct CERT_BASIC_CONSTRAINTS_INFO
    subject_type : CRYPT_BIT_BLOB
    f_path_len_constraint : LibC::BOOL
    dw_path_len_constraint : UInt32
    c_subtrees_constraint : UInt32
    rg_subtrees_constraint : CRYPTOAPI_BLOB*
  end
  struct CERT_BASIC_CONSTRAINTS2_INFO
    f_ca : LibC::BOOL
    f_path_len_constraint : LibC::BOOL
    dw_path_len_constraint : UInt32
  end
  struct CERT_POLICY_QUALIFIER_INFO
    psz_policy_qualifier_id : PSTR
    qualifier : CRYPTOAPI_BLOB
  end
  struct CERT_POLICY_INFO
    psz_policy_identifier : PSTR
    c_policy_qualifier : UInt32
    rg_policy_qualifier : CERT_POLICY_QUALIFIER_INFO*
  end
  struct CERT_POLICIES_INFO
    c_policy_info : UInt32
    rg_policy_info : CERT_POLICY_INFO*
  end
  struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
    psz_organization : PSTR
    c_notice_numbers : UInt32
    rg_notice_numbers : Int32*
  end
  struct CERT_POLICY_QUALIFIER_USER_NOTICE
    p_notice_reference : CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*
    psz_display_text : LibC::LPWSTR
  end
  struct CPS_URLS
    psz_url : LibC::LPWSTR
    p_algorithm : CRYPT_ALGORITHM_IDENTIFIER*
    p_digest : CRYPTOAPI_BLOB*
  end
  struct CERT_POLICY95_QUALIFIER1
    psz_practices_reference : LibC::LPWSTR
    psz_notice_identifier : PSTR
    psz_nsi_notice_identifier : PSTR
    c_cpsur_ls : UInt32
    rg_cpsur_ls : CPS_URLS*
  end
  struct CERT_POLICY_MAPPING
    psz_issuer_domain_policy : PSTR
    psz_subject_domain_policy : PSTR
  end
  struct CERT_POLICY_MAPPINGS_INFO
    c_policy_mapping : UInt32
    rg_policy_mapping : CERT_POLICY_MAPPING*
  end
  struct CERT_POLICY_CONSTRAINTS_INFO
    f_require_explicit_policy : LibC::BOOL
    dw_require_explicit_policy_skip_certs : UInt32
    f_inhibit_policy_mapping : LibC::BOOL
    dw_inhibit_policy_mapping_skip_certs : UInt32
  end
  struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
    psz_obj_id : PSTR
    c_value : UInt32
    rg_value : CRYPTOAPI_BLOB*
  end
  struct CRYPT_CONTENT_INFO
    psz_obj_id : PSTR
    content : CRYPTOAPI_BLOB
  end
  struct CRYPT_SEQUENCE_OF_ANY
    c_value : UInt32
    rg_value : CRYPTOAPI_BLOB*
  end
  struct CERT_AUTHORITY_KEY_ID2_INFO
    key_id : CRYPTOAPI_BLOB
    authority_cert_issuer : CERT_ALT_NAME_INFO
    authority_cert_serial_number : CRYPTOAPI_BLOB
  end
  struct CERT_ACCESS_DESCRIPTION
    psz_access_method : PSTR
    access_location : CERT_ALT_NAME_ENTRY
  end
  struct CERT_AUTHORITY_INFO_ACCESS
    c_acc_descr : UInt32
    rg_acc_descr : CERT_ACCESS_DESCRIPTION*
  end
  struct CRL_DIST_POINT_NAME
    dw_dist_point_name_choice : UInt32
    anonymous : CRL_DIST_POINT_NAME_Anonymous_e__Union
  end
  struct CRL_DIST_POINT
    dist_point_name : CRL_DIST_POINT_NAME
    reason_flags : CRYPT_BIT_BLOB
    crl_issuer : CERT_ALT_NAME_INFO
  end
  struct CRL_DIST_POINTS_INFO
    c_dist_point : UInt32
    rg_dist_point : CRL_DIST_POINT*
  end
  struct CROSS_CERT_DIST_POINTS_INFO
    dw_sync_delta_time : UInt32
    c_dist_point : UInt32
    rg_dist_point : CERT_ALT_NAME_INFO*
  end
  struct CERT_PAIR
    forward : CRYPTOAPI_BLOB
    reverse : CRYPTOAPI_BLOB
  end
  struct CRL_ISSUING_DIST_POINT
    dist_point_name : CRL_DIST_POINT_NAME
    f_only_contains_user_certs : LibC::BOOL
    f_only_contains_ca_certs : LibC::BOOL
    only_some_reason_flags : CRYPT_BIT_BLOB
    f_indirect_crl : LibC::BOOL
  end
  struct CERT_GENERAL_SUBTREE
    base : CERT_ALT_NAME_ENTRY
    dw_minimum : UInt32
    f_maximum : LibC::BOOL
    dw_maximum : UInt32
  end
  struct CERT_NAME_CONSTRAINTS_INFO
    c_permitted_subtree : UInt32
    rg_permitted_subtree : CERT_GENERAL_SUBTREE*
    c_excluded_subtree : UInt32
    rg_excluded_subtree : CERT_GENERAL_SUBTREE*
  end
  struct CERT_DSS_PARAMETERS
    p : CRYPTOAPI_BLOB
    q : CRYPTOAPI_BLOB
    g : CRYPTOAPI_BLOB
  end
  struct CERT_DH_PARAMETERS
    p : CRYPTOAPI_BLOB
    g : CRYPTOAPI_BLOB
  end
  struct CERT_ECC_SIGNATURE
    r : CRYPTOAPI_BLOB
    s : CRYPTOAPI_BLOB
  end
  struct CERT_X942_DH_VALIDATION_PARAMS
    seed : CRYPT_BIT_BLOB
    pgen_counter : UInt32
  end
  struct CERT_X942_DH_PARAMETERS
    p : CRYPTOAPI_BLOB
    g : CRYPTOAPI_BLOB
    q : CRYPTOAPI_BLOB
    j : CRYPTOAPI_BLOB
    p_validation_params : CERT_X942_DH_VALIDATION_PARAMS*
  end
  struct CRYPT_X942_OTHER_INFO
    psz_content_encryption_obj_id : PSTR
    rgb_counter : UInt8[4]*
    rgb_key_length : UInt8[4]*
    pub_info : CRYPTOAPI_BLOB
  end
  struct CRYPT_ECC_CMS_SHARED_INFO
    algorithm : CRYPT_ALGORITHM_IDENTIFIER
    entity_u_info : CRYPTOAPI_BLOB
    rgb_supp_pub_info : UInt8[4]*
  end
  struct CRYPT_RC2_CBC_PARAMETERS
    dw_version : UInt32
    f_iv : LibC::BOOL
    rgb_iv : UInt8[8]*
  end
  struct CRYPT_SMIME_CAPABILITY
    psz_obj_id : PSTR
    parameters : CRYPTOAPI_BLOB
  end
  struct CRYPT_SMIME_CAPABILITIES
    c_capability : UInt32
    rg_capability : CRYPT_SMIME_CAPABILITY*
  end
  struct CERT_QC_STATEMENT
    psz_statement_id : PSTR
    statement_info : CRYPTOAPI_BLOB
  end
  struct CERT_QC_STATEMENTS_EXT_INFO
    c_statement : UInt32
    rg_statement : CERT_QC_STATEMENT*
  end
  struct CRYPT_MASK_GEN_ALGORITHM
    psz_obj_id : PSTR
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
  end
  struct CRYPT_RSA_SSA_PSS_PARAMETERS
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    mask_gen_algorithm : CRYPT_MASK_GEN_ALGORITHM
    dw_salt_length : UInt32
    dw_trailer_field : UInt32
  end
  struct CRYPT_PSOURCE_ALGORITHM
    psz_obj_id : PSTR
    encoding_parameters : CRYPTOAPI_BLOB
  end
  struct CRYPT_RSAES_OAEP_PARAMETERS
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    mask_gen_algorithm : CRYPT_MASK_GEN_ALGORITHM
    p_source_algorithm : CRYPT_PSOURCE_ALGORITHM
  end
  struct CMC_TAGGED_ATTRIBUTE
    dw_body_part_id : UInt32
    attribute : CRYPT_ATTRIBUTE
  end
  struct CMC_TAGGED_CERT_REQUEST
    dw_body_part_id : UInt32
    signed_cert_request : CRYPTOAPI_BLOB
  end
  struct CMC_TAGGED_REQUEST
    dw_tagged_request_choice : UInt32
    anonymous : CMC_TAGGED_REQUEST_Anonymous_e__Union
  end
  struct CMC_TAGGED_CONTENT_INFO
    dw_body_part_id : UInt32
    encoded_content_info : CRYPTOAPI_BLOB
  end
  struct CMC_TAGGED_OTHER_MSG
    dw_body_part_id : UInt32
    psz_obj_id : PSTR
    value : CRYPTOAPI_BLOB
  end
  struct CMC_DATA_INFO
    c_tagged_attribute : UInt32
    rg_tagged_attribute : CMC_TAGGED_ATTRIBUTE*
    c_tagged_request : UInt32
    rg_tagged_request : CMC_TAGGED_REQUEST*
    c_tagged_content_info : UInt32
    rg_tagged_content_info : CMC_TAGGED_CONTENT_INFO*
    c_tagged_other_msg : UInt32
    rg_tagged_other_msg : CMC_TAGGED_OTHER_MSG*
  end
  struct CMC_RESPONSE_INFO
    c_tagged_attribute : UInt32
    rg_tagged_attribute : CMC_TAGGED_ATTRIBUTE*
    c_tagged_content_info : UInt32
    rg_tagged_content_info : CMC_TAGGED_CONTENT_INFO*
    c_tagged_other_msg : UInt32
    rg_tagged_other_msg : CMC_TAGGED_OTHER_MSG*
  end
  struct CMC_PEND_INFO
    pend_token : CRYPTOAPI_BLOB
    pend_time : FILETIME
  end
  struct CMC_STATUS_INFO
    dw_status : UInt32
    c_body_list : UInt32
    rgdw_body_list : UInt32*
    pwsz_status_string : LibC::LPWSTR
    dw_other_info_choice : UInt32
    anonymous : CMC_STATUS_INFO_Anonymous_e__Union
  end
  struct CMC_ADD_EXTENSIONS_INFO
    dw_cmc_data_reference : UInt32
    c_cert_reference : UInt32
    rgdw_cert_reference : UInt32*
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CMC_ADD_ATTRIBUTES_INFO
    dw_cmc_data_reference : UInt32
    c_cert_reference : UInt32
    rgdw_cert_reference : UInt32*
    c_attribute : UInt32
    rg_attribute : CRYPT_ATTRIBUTE*
  end
  struct CERT_TEMPLATE_EXT
    psz_obj_id : PSTR
    dw_major_version : UInt32
    f_minor_version : LibC::BOOL
    dw_minor_version : UInt32
  end
  struct CERT_HASHED_URL
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hash : CRYPTOAPI_BLOB
    pwsz_url : LibC::LPWSTR
  end
  struct CERT_LOGOTYPE_DETAILS
    pwsz_mime_type : LibC::LPWSTR
    c_hashed_url : UInt32
    rg_hashed_url : CERT_HASHED_URL*
  end
  struct CERT_LOGOTYPE_REFERENCE
    c_hashed_url : UInt32
    rg_hashed_url : CERT_HASHED_URL*
  end
  struct CERT_LOGOTYPE_IMAGE_INFO
    dw_logotype_image_info_choice : CERT_LOGOTYPE_IMAGE_INFO_TYPE
    dw_file_size : UInt32
    dw_x_size : UInt32
    dw_y_size : UInt32
    dw_logotype_image_resolution_choice : CERT_LOGOTYPE_CHOICE
    anonymous : CERT_LOGOTYPE_IMAGE_INFO_Anonymous_e__Union
    pwsz_language : LibC::LPWSTR
  end
  struct CERT_LOGOTYPE_IMAGE
    logotype_details : CERT_LOGOTYPE_DETAILS
    p_logotype_image_info : CERT_LOGOTYPE_IMAGE_INFO*
  end
  struct CERT_LOGOTYPE_AUDIO_INFO
    dw_file_size : UInt32
    dw_play_time : UInt32
    dw_channels : UInt32
    dw_sample_rate : UInt32
    pwsz_language : LibC::LPWSTR
  end
  struct CERT_LOGOTYPE_AUDIO
    logotype_details : CERT_LOGOTYPE_DETAILS
    p_logotype_audio_info : CERT_LOGOTYPE_AUDIO_INFO*
  end
  struct CERT_LOGOTYPE_DATA
    c_logotype_image : UInt32
    rg_logotype_image : CERT_LOGOTYPE_IMAGE*
    c_logotype_audio : UInt32
    rg_logotype_audio : CERT_LOGOTYPE_AUDIO*
  end
  struct CERT_LOGOTYPE_INFO
    dw_logotype_info_choice : CERT_LOGOTYPE_OPTION
    anonymous : CERT_LOGOTYPE_INFO_Anonymous_e__Union
  end
  struct CERT_OTHER_LOGOTYPE_INFO
    psz_obj_id : PSTR
    logotype_info : CERT_LOGOTYPE_INFO
  end
  struct CERT_LOGOTYPE_EXT_INFO
    c_community_logo : UInt32
    rg_community_logo : CERT_LOGOTYPE_INFO*
    p_issuer_logo : CERT_LOGOTYPE_INFO*
    p_subject_logo : CERT_LOGOTYPE_INFO*
    c_other_logo : UInt32
    rg_other_logo : CERT_OTHER_LOGOTYPE_INFO*
  end
  struct CERT_BIOMETRIC_DATA
    dw_type_of_biometric_data_choice : CERT_BIOMETRIC_DATA_TYPE
    anonymous : CERT_BIOMETRIC_DATA_Anonymous_e__Union
    hashed_url : CERT_HASHED_URL
  end
  struct CERT_BIOMETRIC_EXT_INFO
    c_biometric_data : UInt32
    rg_biometric_data : CERT_BIOMETRIC_DATA*
  end
  struct OCSP_SIGNATURE_INFO
    signature_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    signature : CRYPT_BIT_BLOB
    c_cert_encoded : UInt32
    rg_cert_encoded : CRYPTOAPI_BLOB*
  end
  struct OCSP_SIGNED_REQUEST_INFO
    to_be_signed : CRYPTOAPI_BLOB
    p_optional_signature_info : OCSP_SIGNATURE_INFO*
  end
  struct OCSP_CERT_ID
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    issuer_name_hash : CRYPTOAPI_BLOB
    issuer_key_hash : CRYPTOAPI_BLOB
    serial_number : CRYPTOAPI_BLOB
  end
  struct OCSP_REQUEST_ENTRY
    cert_id : OCSP_CERT_ID
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct OCSP_REQUEST_INFO
    dw_version : UInt32
    p_requestor_name : CERT_ALT_NAME_ENTRY*
    c_request_entry : UInt32
    rg_request_entry : OCSP_REQUEST_ENTRY*
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct OCSP_RESPONSE_INFO
    dw_status : UInt32
    psz_obj_id : PSTR
    value : CRYPTOAPI_BLOB
  end
  struct OCSP_BASIC_SIGNED_RESPONSE_INFO
    to_be_signed : CRYPTOAPI_BLOB
    signature_info : OCSP_SIGNATURE_INFO
  end
  struct OCSP_BASIC_REVOKED_INFO
    revocation_date : FILETIME
    dw_crl_reason_code : CERT_REVOCATION_STATUS_REASON
  end
  struct OCSP_BASIC_RESPONSE_ENTRY
    cert_id : OCSP_CERT_ID
    dw_cert_status : UInt32
    anonymous : OCSP_BASIC_RESPONSE_ENTRY_Anonymous_e__Union
    this_update : FILETIME
    next_update : FILETIME
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct OCSP_BASIC_RESPONSE_INFO
    dw_version : UInt32
    dw_responder_id_choice : UInt32
    anonymous : OCSP_BASIC_RESPONSE_INFO_Anonymous_e__Union
    produced_at : FILETIME
    c_response_entry : UInt32
    rg_response_entry : OCSP_BASIC_RESPONSE_ENTRY*
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CERT_SUPPORTED_ALGORITHM_INFO
    algorithm : CRYPT_ALGORITHM_IDENTIFIER
    intended_key_usage : CRYPT_BIT_BLOB
    intended_cert_policies : CERT_POLICIES_INFO
  end
  struct CERT_TPM_SPECIFICATION_INFO
    pwsz_family : LibC::LPWSTR
    dw_level : UInt32
    dw_revision : UInt32
  end
  struct CRYPT_OID_FUNC_ENTRY
    psz_oid : PSTR
    pv_func_addr : Void*
  end
  struct CRYPT_OID_INFO
    cb_size : UInt32
    psz_oid : PSTR
    pwsz_name : LibC::LPWSTR
    dw_group_id : UInt32
    anonymous : CRYPT_OID_INFO_Anonymous_e__Union
    extra_info : CRYPTOAPI_BLOB
  end
  struct CERT_STRONG_SIGN_SERIALIZED_INFO
    dw_flags : CERT_STRONG_SIGN_FLAGS
    pwsz_cng_sign_hash_algids : LibC::LPWSTR
    pwsz_cng_pub_key_min_bit_lengths : LibC::LPWSTR
  end
  struct CERT_STRONG_SIGN_PARA
    cb_size : UInt32
    dw_info_choice : UInt32
    anonymous : CERT_STRONG_SIGN_PARA_Anonymous_e__Union
  end
  struct CERT_ISSUER_SERIAL_NUMBER
    issuer : CRYPTOAPI_BLOB
    serial_number : CRYPTOAPI_BLOB
  end
  struct CERT_ID
    dw_id_choice : CERT_ID_OPTION
    anonymous : CERT_ID_Anonymous_e__Union
  end
  struct CMSG_SIGNER_ENCODE_INFO
    cb_size : UInt32
    p_cert_info : CERT_INFO*
    anonymous : CMSG_SIGNER_ENCODE_INFO_Anonymous_e__Union
    dw_key_spec : UInt32
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_hash_aux_info : Void*
    c_auth_attr : UInt32
    rg_auth_attr : CRYPT_ATTRIBUTE*
    c_unauth_attr : UInt32
    rg_unauth_attr : CRYPT_ATTRIBUTE*
  end
  struct CMSG_SIGNED_ENCODE_INFO
    cb_size : UInt32
    c_signers : UInt32
    rg_signers : CMSG_SIGNER_ENCODE_INFO*
    c_cert_encoded : UInt32
    rg_cert_encoded : CRYPTOAPI_BLOB*
    c_crl_encoded : UInt32
    rg_crl_encoded : CRYPTOAPI_BLOB*
  end
  struct CMSG_ENVELOPED_ENCODE_INFO
    cb_size : UInt32
    h_crypt_prov : LibC::UINT_PTR
    content_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_encryption_aux_info : Void*
    c_recipients : UInt32
    rgp_recipients : CERT_INFO**
  end
  struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
    cb_size : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_key_encryption_aux_info : Void*
    h_crypt_prov : LibC::UINT_PTR
    recipient_public_key : CRYPT_BIT_BLOB
    recipient_id : CERT_ID
  end
  struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
    cb_size : UInt32
    recipient_public_key : CRYPT_BIT_BLOB
    recipient_id : CERT_ID
    date : FILETIME
    p_other_attr : CRYPT_ATTRIBUTE_TYPE_VALUE*
  end
  struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
    cb_size : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_key_encryption_aux_info : Void*
    key_wrap_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_key_wrap_aux_info : Void*
    h_crypt_prov : LibC::UINT_PTR
    dw_key_spec : UInt32
    dw_key_choice : CMSG_KEY_AGREE_OPTION
    anonymous : CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
    user_keying_material : CRYPTOAPI_BLOB
    c_recipient_encrypted_keys : UInt32
    rgp_recipient_encrypted_keys : CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO**
  end
  struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    cb_size : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_key_encryption_aux_info : Void*
    h_crypt_prov : LibC::UINT_PTR
    dw_key_choice : UInt32
    anonymous : CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
    key_id : CRYPTOAPI_BLOB
    date : FILETIME
    p_other_attr : CRYPT_ATTRIBUTE_TYPE_VALUE*
  end
  struct CMSG_RECIPIENT_ENCODE_INFO
    dw_recipient_choice : UInt32
    anonymous : CMSG_RECIPIENT_ENCODE_INFO_Anonymous_e__Union
  end
  struct CMSG_RC2_AUX_INFO
    cb_size : UInt32
    dw_bit_len : UInt32
  end
  struct CMSG_SP3_COMPATIBLE_AUX_INFO
    cb_size : UInt32
    dw_flags : UInt32
  end
  struct CMSG_RC4_AUX_INFO
    cb_size : UInt32
    dw_bit_len : UInt32
  end
  struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
    cb_size : UInt32
    signed_info : CMSG_SIGNED_ENCODE_INFO
    enveloped_info : CMSG_ENVELOPED_ENCODE_INFO
  end
  struct CMSG_HASHED_ENCODE_INFO
    cb_size : UInt32
    h_crypt_prov : LibC::UINT_PTR
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_hash_aux_info : Void*
  end
  struct CMSG_ENCRYPTED_ENCODE_INFO
    cb_size : UInt32
    content_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_encryption_aux_info : Void*
  end
  struct CMSG_STREAM_INFO
    cb_content : UInt32
    pfn_stream_output : PFN_CMSG_STREAM_OUTPUT
    pv_arg : Void*
  end
  struct CMSG_SIGNER_INFO
    dw_version : UInt32
    issuer : CRYPTOAPI_BLOB
    serial_number : CRYPTOAPI_BLOB
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hash_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_hash : CRYPTOAPI_BLOB
    auth_attrs : CRYPT_ATTRIBUTES
    unauth_attrs : CRYPT_ATTRIBUTES
  end
  struct CMSG_CMS_SIGNER_INFO
    dw_version : UInt32
    signer_id : CERT_ID
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hash_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_hash : CRYPTOAPI_BLOB
    auth_attrs : CRYPT_ATTRIBUTES
    unauth_attrs : CRYPT_ATTRIBUTES
  end
  struct CMSG_KEY_TRANS_RECIPIENT_INFO
    dw_version : UInt32
    recipient_id : CERT_ID
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_key : CRYPTOAPI_BLOB
  end
  struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
    recipient_id : CERT_ID
    encrypted_key : CRYPTOAPI_BLOB
    date : FILETIME
    p_other_attr : CRYPT_ATTRIBUTE_TYPE_VALUE*
  end
  struct CMSG_KEY_AGREE_RECIPIENT_INFO
    dw_version : UInt32
    dw_originator_choice : CMSG_KEY_AGREE_ORIGINATOR
    anonymous : CMSG_KEY_AGREE_RECIPIENT_INFO_Anonymous_e__Union
    user_keying_material : CRYPTOAPI_BLOB
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    c_recipient_encrypted_keys : UInt32
    rgp_recipient_encrypted_keys : CMSG_RECIPIENT_ENCRYPTED_KEY_INFO**
  end
  struct CMSG_MAIL_LIST_RECIPIENT_INFO
    dw_version : UInt32
    key_id : CRYPTOAPI_BLOB
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_key : CRYPTOAPI_BLOB
    date : FILETIME
    p_other_attr : CRYPT_ATTRIBUTE_TYPE_VALUE*
  end
  struct CMSG_CMS_RECIPIENT_INFO
    dw_recipient_choice : UInt32
    anonymous : CMSG_CMS_RECIPIENT_INFO_Anonymous_e__Union
  end
  struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
    cb_size : UInt32
    h_crypt_prov : LibC::UINT_PTR
    dw_signer_index : UInt32
    dw_signer_type : UInt32
    pv_signer : Void*
  end
  struct CMSG_CTRL_DECRYPT_PARA
    cb_size : UInt32
    anonymous : CMSG_CTRL_DECRYPT_PARA_Anonymous_e__Union
    dw_key_spec : UInt32
    dw_recipient_index : UInt32
  end
  struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
    cb_size : UInt32
    anonymous : CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_Anonymous_e__Union
    dw_key_spec : UInt32
    p_key_trans : CMSG_KEY_TRANS_RECIPIENT_INFO*
    dw_recipient_index : UInt32
  end
  struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
    cb_size : UInt32
    anonymous : CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_Anonymous_e__Union
    dw_key_spec : UInt32
    p_key_agree : CMSG_KEY_AGREE_RECIPIENT_INFO*
    dw_recipient_index : UInt32
    dw_recipient_encrypted_key_index : UInt32
    originator_public_key : CRYPT_BIT_BLOB
  end
  struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
    cb_size : UInt32
    h_crypt_prov : LibC::UINT_PTR
    p_mail_list : CMSG_MAIL_LIST_RECIPIENT_INFO*
    dw_recipient_index : UInt32
    dw_key_choice : UInt32
    anonymous : CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_Anonymous_e__Union
  end
  struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
    cb_size : UInt32
    dw_signer_index : UInt32
    blob : CRYPTOAPI_BLOB
  end
  struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
    cb_size : UInt32
    dw_signer_index : UInt32
    dw_unauth_attr_index : UInt32
  end
  struct CMSG_CONTENT_ENCRYPT_INFO
    cb_size : UInt32
    h_crypt_prov : LibC::UINT_PTR
    content_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_encryption_aux_info : Void*
    c_recipients : UInt32
    rg_cms_recipients : CMSG_RECIPIENT_ENCODE_INFO*
    pfn_alloc : PFN_CMSG_ALLOC
    pfn_free : PFN_CMSG_FREE
    dw_encrypt_flags : UInt32
    anonymous : CMSG_CONTENT_ENCRYPT_INFO_Anonymous_e__Union
    dw_flags : UInt32
    f_cng : LibC::BOOL
    pb_cng_content_encrypt_key_object : UInt8*
    pb_content_encrypt_key : UInt8*
    cb_content_encrypt_key : UInt32
  end
  struct CMSG_KEY_TRANS_ENCRYPT_INFO
    cb_size : UInt32
    dw_recipient_index : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_key : CRYPTOAPI_BLOB
    dw_flags : UInt32
  end
  struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
    cb_size : UInt32
    encrypted_key : CRYPTOAPI_BLOB
  end
  struct CMSG_KEY_AGREE_ENCRYPT_INFO
    cb_size : UInt32
    dw_recipient_index : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    user_keying_material : CRYPTOAPI_BLOB
    dw_originator_choice : CMSG_KEY_AGREE_ORIGINATOR
    anonymous : CMSG_KEY_AGREE_ENCRYPT_INFO_Anonymous_e__Union
    c_key_agree_key_encrypt_info : UInt32
    rgp_key_agree_key_encrypt_info : CMSG_KEY_AGREE_KEY_ENCRYPT_INFO**
    dw_flags : UInt32
  end
  struct CMSG_MAIL_LIST_ENCRYPT_INFO
    cb_size : UInt32
    dw_recipient_index : UInt32
    key_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    encrypted_key : CRYPTOAPI_BLOB
    dw_flags : UInt32
  end
  struct CMSG_CNG_CONTENT_DECRYPT_INFO
    cb_size : UInt32
    content_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pfn_alloc : PFN_CMSG_ALLOC
    pfn_free : PFN_CMSG_FREE
    h_n_crypt_key : LibC::UINT_PTR
    pb_content_encrypt_key : UInt8*
    cb_content_encrypt_key : UInt32
    h_cng_content_encrypt_key : BCRYPT_KEY_HANDLE
    pb_cng_content_encrypt_key_object : UInt8*
  end
  struct CERT_CONTEXT
    dw_cert_encoding_type : UInt32
    pb_cert_encoded : UInt8*
    cb_cert_encoded : UInt32
    p_cert_info : CERT_INFO*
    h_cert_store : Void*
  end
  struct CRL_CONTEXT
    dw_cert_encoding_type : UInt32
    pb_crl_encoded : UInt8*
    cb_crl_encoded : UInt32
    p_crl_info : CRL_INFO*
    h_cert_store : Void*
  end
  struct CTL_CONTEXT
    dw_msg_and_cert_encoding_type : UInt32
    pb_ctl_encoded : UInt8*
    cb_ctl_encoded : UInt32
    p_ctl_info : CTL_INFO*
    h_cert_store : Void*
    h_crypt_msg : Void*
    pb_ctl_content : UInt8*
    cb_ctl_content : UInt32
  end
  struct CRYPT_KEY_PROV_PARAM
    dw_param : UInt32
    pb_data : UInt8*
    cb_data : UInt32
    dw_flags : UInt32
  end
  struct CRYPT_KEY_PROV_INFO
    pwsz_container_name : LibC::LPWSTR
    pwsz_prov_name : LibC::LPWSTR
    dw_prov_type : UInt32
    dw_flags : CRYPT_KEY_FLAGS
    c_prov_param : UInt32
    rg_prov_param : CRYPT_KEY_PROV_PARAM*
    dw_key_spec : UInt32
  end
  struct CERT_KEY_CONTEXT
    cb_size : UInt32
    anonymous : CERT_KEY_CONTEXT_Anonymous_e__Union
    dw_key_spec : UInt32
  end
  struct ROOT_INFO_LUID
    low_part : UInt32
    high_part : Int32
  end
  struct CRYPT_SMART_CARD_ROOT_INFO
    rgb_card_id : UInt8[16]*
    luid : ROOT_INFO_LUID
  end
  struct CERT_SYSTEM_STORE_RELOCATE_PARA
    anonymous1 : CERT_SYSTEM_STORE_RELOCATE_PARA_Anonymous1_e__Union
    anonymous2 : CERT_SYSTEM_STORE_RELOCATE_PARA_Anonymous2_e__Union
  end
  struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA
    h_key_base : HKEY
    pwsz_reg_path : LibC::LPWSTR
  end
  struct CERT_REGISTRY_STORE_ROAMING_PARA
    h_key : HKEY
    pwsz_store_directory : LibC::LPWSTR
  end
  struct CERT_LDAP_STORE_OPENED_PARA
    pv_ldap_session_handle : Void*
    pwsz_ldap_url : LibC::LPWSTR
  end
  struct CERT_STORE_PROV_INFO
    cb_size : UInt32
    c_store_prov_func : UInt32
    rgpv_store_prov_func : Void**
    h_store_prov : Void*
    dw_store_prov_flags : CERT_STORE_PROV_FLAGS
    h_store_prov_func_addr2 : Void*
  end
  struct CERT_STORE_PROV_FIND_INFO
    cb_size : UInt32
    dw_msg_and_cert_encoding_type : UInt32
    dw_find_flags : UInt32
    dw_find_type : UInt32
    pv_find_para : Void*
  end
  struct CRL_FIND_ISSUED_FOR_PARA
    p_subject_cert : CERT_CONTEXT*
    p_issuer_cert : CERT_CONTEXT*
  end
  struct CTL_ANY_SUBJECT_INFO
    subject_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    subject_identifier : CRYPTOAPI_BLOB
  end
  struct CTL_FIND_USAGE_PARA
    cb_size : UInt32
    subject_usage : CTL_USAGE
    list_identifier : CRYPTOAPI_BLOB
    p_signer : CERT_INFO*
  end
  struct CTL_FIND_SUBJECT_PARA
    cb_size : UInt32
    p_usage_para : CTL_FIND_USAGE_PARA*
    dw_subject_type : UInt32
    pv_subject : Void*
  end
  struct CERT_CREATE_CONTEXT_PARA
    cb_size : UInt32
    pfn_free : PFN_CRYPT_FREE
    pv_free : Void*
    pfn_sort : PFN_CERT_CREATE_CONTEXT_SORT_FUNC
    pv_sort : Void*
  end
  struct CERT_SYSTEM_STORE_INFO
    cb_size : UInt32
  end
  struct CERT_PHYSICAL_STORE_INFO
    cb_size : UInt32
    psz_open_store_provider : PSTR
    dw_open_encoding_type : UInt32
    dw_open_flags : UInt32
    open_parameters : CRYPTOAPI_BLOB
    dw_flags : UInt32
    dw_priority : UInt32
  end
  struct CTL_VERIFY_USAGE_PARA
    cb_size : UInt32
    list_identifier : CRYPTOAPI_BLOB
    c_ctl_store : UInt32
    rgh_ctl_store : Void**
    c_signer_store : UInt32
    rgh_signer_store : Void**
  end
  struct CTL_VERIFY_USAGE_STATUS
    cb_size : UInt32
    dw_error : UInt32
    dw_flags : UInt32
    pp_ctl : CTL_CONTEXT**
    dw_ctl_entry_index : UInt32
    pp_signer : CERT_CONTEXT**
    dw_signer_index : UInt32
  end
  struct CERT_REVOCATION_CRL_INFO
    cb_size : UInt32
    p_base_crl_context : CRL_CONTEXT*
    p_delta_crl_context : CRL_CONTEXT*
    p_crl_entry : CRL_ENTRY*
    f_delta_crl_entry : LibC::BOOL
  end
  struct CERT_REVOCATION_PARA
    cb_size : UInt32
    p_issuer_cert : CERT_CONTEXT*
    c_cert_store : UInt32
    rg_cert_store : Void**
    h_crl_store : Void*
    pft_time_to_use : FILETIME*
  end
  struct CERT_REVOCATION_STATUS
    cb_size : UInt32
    dw_index : UInt32
    dw_error : UInt32
    dw_reason : CERT_REVOCATION_STATUS_REASON
    f_has_freshness_time : LibC::BOOL
    dw_freshness_time : UInt32
  end
  struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
    cert_sign_hash_cng_alg_prop_data : CRYPTOAPI_BLOB
    cert_issuer_pub_key_bit_length_prop_data : CRYPTOAPI_BLOB
  end
  struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
    c_cng_hash_algid : UInt32
    rgpwsz_cng_hash_algid : LibC::LPWSTR*
    dw_weak_index : UInt32
  end
  struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
    c_oid : UInt32
    rgpsz_oid : PSTR*
  end
  struct CRYPT_SIGN_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_encoding_type : UInt32
    p_signing_cert : CERT_CONTEXT*
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_hash_aux_info : Void*
    c_msg_cert : UInt32
    rgp_msg_cert : CERT_CONTEXT**
    c_msg_crl : UInt32
    rgp_msg_crl : CRL_CONTEXT**
    c_auth_attr : UInt32
    rg_auth_attr : CRYPT_ATTRIBUTE*
    c_unauth_attr : UInt32
    rg_unauth_attr : CRYPT_ATTRIBUTE*
    dw_flags : UInt32
    dw_inner_content_type : UInt32
  end
  struct CRYPT_VERIFY_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_and_cert_encoding_type : UInt32
    h_crypt_prov : LibC::UINT_PTR
    pfn_get_signer_certificate : PFN_CRYPT_GET_SIGNER_CERTIFICATE
    pv_get_arg : Void*
  end
  struct CRYPT_ENCRYPT_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_encoding_type : UInt32
    h_crypt_prov : LibC::UINT_PTR
    content_encryption_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_encryption_aux_info : Void*
    dw_flags : UInt32
    dw_inner_content_type : UInt32
  end
  struct CRYPT_DECRYPT_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_and_cert_encoding_type : UInt32
    c_cert_store : UInt32
    rgh_cert_store : Void**
  end
  struct CRYPT_HASH_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_encoding_type : UInt32
    h_crypt_prov : LibC::UINT_PTR
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_hash_aux_info : Void*
  end
  struct CRYPT_KEY_SIGN_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_and_cert_encoding_type : CERT_QUERY_ENCODING_TYPE
    anonymous : CRYPT_KEY_SIGN_MESSAGE_PARA_Anonymous_e__Union
    dw_key_spec : CERT_KEY_SPEC
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    pv_hash_aux_info : Void*
    pub_key_algorithm : CRYPT_ALGORITHM_IDENTIFIER
  end
  struct CRYPT_KEY_VERIFY_MESSAGE_PARA
    cb_size : UInt32
    dw_msg_encoding_type : UInt32
    h_crypt_prov : LibC::UINT_PTR
  end
  struct CERT_CHAIN
    c_certs : UInt32
    certs : CRYPTOAPI_BLOB*
    key_locator_info : CRYPT_KEY_PROV_INFO
  end
  struct CRYPT_BLOB_ARRAY
    c_blob : UInt32
    rg_blob : CRYPTOAPI_BLOB*
  end
  struct CRYPT_CREDENTIALS
    cb_size : UInt32
    psz_credentials_oid : PSTR
    pv_credentials : Void*
  end
  struct CRYPT_PASSWORD_CREDENTIALSA
    cb_size : UInt32
    psz_username : PSTR
    psz_password : PSTR
  end
  struct CRYPT_PASSWORD_CREDENTIALSW
    cb_size : UInt32
    psz_username : LibC::LPWSTR
    psz_password : LibC::LPWSTR
  end
  struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO
    cb_size : UInt32
    dw_object_type : UInt32
    dw_error : UInt32
    dw_reserved : UInt32
    this_update_time : FILETIME
    next_update_time : FILETIME
    publish_time : FILETIME
  end
  struct CRYPTNET_URL_CACHE_FLUSH_INFO
    cb_size : UInt32
    dw_exempt_seconds : UInt32
    expire_time : FILETIME
  end
  struct CRYPTNET_URL_CACHE_RESPONSE_INFO
    cb_size : UInt32
    w_response_type : UInt16
    w_response_flags : UInt16
    last_modified_time : FILETIME
    dw_max_age : UInt32
    pwsz_e_tag : LibC::LPWSTR
    dw_proxy_id : UInt32
  end
  struct CRYPT_RETRIEVE_AUX_INFO
    cb_size : UInt32
    p_last_sync_time : FILETIME*
    dw_max_url_retrieval_byte_count : UInt32
    p_pre_fetch_info : CRYPTNET_URL_CACHE_PRE_FETCH_INFO*
    p_flush_info : CRYPTNET_URL_CACHE_FLUSH_INFO*
    pp_response_info : CRYPTNET_URL_CACHE_RESPONSE_INFO**
    pwsz_cache_file_name_prefix : LibC::LPWSTR
    pft_cache_resync : FILETIME*
    f_proxy_cache_retrieval : LibC::BOOL
    dw_http_status_code : UInt32
    ppwsz_error_response_headers : LibC::LPWSTR*
    pp_error_content_blob : CRYPTOAPI_BLOB**
  end
  struct CRYPT_ASYNC_RETRIEVAL_COMPLETION
    pfn_completion : PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC
    pv_completion : Void*
  end
  struct CRYPT_URL_ARRAY
    c_url : UInt32
    rgwsz_url : LibC::LPWSTR*
  end
  struct CRYPT_URL_INFO
    cb_size : UInt32
    dw_sync_delta_time : UInt32
    c_group : UInt32
    rgc_group_entry : UInt32*
  end
  struct CERT_CRL_CONTEXT_PAIR
    p_cert_context : CERT_CONTEXT*
    p_crl_context : CRL_CONTEXT*
  end
  struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
    cb_size : UInt32
    i_delta_crl_indicator : Int32
    pft_cache_resync : FILETIME*
    p_last_sync_time : FILETIME*
    p_max_age_time : FILETIME*
    p_chain_para : CERT_REVOCATION_CHAIN_PARA*
    p_delta_crl_indicator : CRYPTOAPI_BLOB*
  end
  struct CERT_CHAIN_ENGINE_CONFIG
    cb_size : UInt32
    h_restricted_root : Void*
    h_restricted_trust : Void*
    h_restricted_other : Void*
    c_additional_store : UInt32
    rgh_additional_store : Void**
    dw_flags : UInt32
    dw_url_retrieval_timeout : UInt32
    maximum_cached_certificates : UInt32
    cycle_detection_modulus : UInt32
    h_exclusive_root : Void*
    h_exclusive_trusted_people : Void*
    dw_exclusive_flags : UInt32
  end
  struct CERT_TRUST_STATUS
    dw_error_status : UInt32
    dw_info_status : UInt32
  end
  struct CERT_REVOCATION_INFO
    cb_size : UInt32
    dw_revocation_result : UInt32
    psz_revocation_oid : PSTR
    pv_oid_specific_info : Void*
    f_has_freshness_time : LibC::BOOL
    dw_freshness_time : UInt32
    p_crl_info : CERT_REVOCATION_CRL_INFO*
  end
  struct CERT_TRUST_LIST_INFO
    cb_size : UInt32
    p_ctl_entry : CTL_ENTRY*
    p_ctl_context : CTL_CONTEXT*
  end
  struct CERT_CHAIN_ELEMENT
    cb_size : UInt32
    p_cert_context : CERT_CONTEXT*
    trust_status : CERT_TRUST_STATUS
    p_revocation_info : CERT_REVOCATION_INFO*
    p_issuance_usage : CTL_USAGE*
    p_application_usage : CTL_USAGE*
    pwsz_extended_error_info : LibC::LPWSTR
  end
  struct CERT_SIMPLE_CHAIN
    cb_size : UInt32
    trust_status : CERT_TRUST_STATUS
    c_element : UInt32
    rgp_element : CERT_CHAIN_ELEMENT**
    p_trust_list_info : CERT_TRUST_LIST_INFO*
    f_has_revocation_freshness_time : LibC::BOOL
    dw_revocation_freshness_time : UInt32
  end
  struct CERT_CHAIN_CONTEXT
    cb_size : UInt32
    trust_status : CERT_TRUST_STATUS
    c_chain : UInt32
    rgp_chain : CERT_SIMPLE_CHAIN**
    c_lower_quality_chain_context : UInt32
    rgp_lower_quality_chain_context : CERT_CHAIN_CONTEXT**
    f_has_revocation_freshness_time : LibC::BOOL
    dw_revocation_freshness_time : UInt32
    dw_create_flags : UInt32
    chain_id : Guid
  end
  struct CERT_USAGE_MATCH
    dw_type : UInt32
    usage : CTL_USAGE
  end
  struct CTL_USAGE_MATCH
    dw_type : UInt32
    usage : CTL_USAGE
  end
  struct CERT_CHAIN_PARA
    cb_size : UInt32
    requested_usage : CERT_USAGE_MATCH
  end
  struct CERT_REVOCATION_CHAIN_PARA
    cb_size : UInt32
    h_chain_engine : HCERTCHAINENGINE
    h_additional_store : Void*
    dw_chain_flags : UInt32
    dw_url_retrieval_timeout : UInt32
    pft_current_time : FILETIME*
    pft_cache_resync : FILETIME*
    cb_max_url_retrieval_byte_count : UInt32
  end
  struct CRL_REVOCATION_INFO
    p_crl_entry : CRL_ENTRY*
    p_crl_context : CRL_CONTEXT*
    p_crl_issuer_chain : CERT_CHAIN_CONTEXT*
  end
  struct CERT_CHAIN_FIND_BY_ISSUER_PARA
    cb_size : UInt32
    psz_usage_identifier : PSTR
    dw_key_spec : UInt32
    dw_acquire_private_key_flags : UInt32
    c_issuer : UInt32
    rg_issuer : CRYPTOAPI_BLOB*
    pfn_find_callback : PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
    pv_find_arg : Void*
  end
  struct CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_flags : CERT_CHAIN_POLICY_FLAGS
    pv_extra_policy_para : Void*
  end
  struct CERT_CHAIN_POLICY_STATUS
    cb_size : UInt32
    dw_error : UInt32
    l_chain_index : Int32
    l_element_index : Int32
    pv_extra_policy_status : Void*
  end
  struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_reg_policy_settings : UInt32
    p_signer_info : CMSG_SIGNER_INFO*
  end
  struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
    cb_size : UInt32
    f_commercial : LibC::BOOL
  end
  struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_reg_policy_settings : UInt32
    f_commercial : LibC::BOOL
  end
  struct HTTPSPolicyCallbackData
    anonymous : HTTPSPolicyCallbackData_Anonymous_e__Union
    dw_auth_type : HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE
    fdw_checks : UInt32
    pwsz_server_name : LibC::LPWSTR
  end
  struct EV_EXTRA_CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_root_program_qualifier_flags : CERT_ROOT_PROGRAM_FLAGS
  end
  struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS
    cb_size : UInt32
    dw_qualifiers : UInt32
    dw_issuance_usage_index : UInt32
  end
  struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
    cb_size : UInt32
    dw_error_level : UInt32
    dw_error_category : UInt32
    dw_reserved : UInt32
    wsz_error_text : Char[256]*
  end
  struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_reserved : UInt32
    pwsz_server_name : LibC::LPWSTR
    rgpsz_hpkp_value : PSTR[2]*
  end
  struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
    cb_size : UInt32
    dw_reserved : UInt32
    pwsz_server_name : LibC::LPWSTR
  end
  struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
    cb_size : UInt32
    l_error : Int32
    wsz_error_text : Char[512]*
  end
  struct CRYPT_PKCS12_PBE_PARAMS
    i_iterations : Int32
    cb_salt : UInt32
  end
  struct PKCS12_PBES2_EXPORT_PARAMS
    dw_size : UInt32
    h_ncrypt_descriptor : Void*
    pwsz_pbes2_alg : LibC::LPWSTR
  end
  struct CERT_SERVER_OCSP_RESPONSE_CONTEXT
    cb_size : UInt32
    pb_encoded_ocsp_response : UInt8*
    cb_encoded_ocsp_response : UInt32
  end
  struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
    cb_size : UInt32
    dw_flags : UInt32
    pcb_used_size : UInt32*
    pwsz_ocsp_directory : LibC::LPWSTR
    pfn_update_callback : PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
    pv_update_callback_arg : Void*
  end
  struct CERT_SELECT_CHAIN_PARA
    h_chain_engine : HCERTCHAINENGINE
    p_time : FILETIME*
    h_additional_store : Void*
    p_chain_para : CERT_CHAIN_PARA*
    dw_flags : UInt32
  end
  struct CERT_SELECT_CRITERIA
    dw_type : CERT_SELECT_CRITERIA_TYPE
    c_para : UInt32
    pp_para : Void**
  end
  struct CRYPT_TIMESTAMP_REQUEST
    dw_version : CRYPT_TIMESTAMP_VERSION
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hashed_message : CRYPTOAPI_BLOB
    psz_tsa_policy_id : PSTR
    nonce : CRYPTOAPI_BLOB
    f_cert_req : LibC::BOOL
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRYPT_TIMESTAMP_RESPONSE
    dw_status : CRYPT_TIMESTAMP_RESPONSE_STATUS
    c_free_text : UInt32
    rg_free_text : LibC::LPWSTR*
    failure_info : CRYPT_BIT_BLOB
    content_info : CRYPTOAPI_BLOB
  end
  struct CRYPT_TIMESTAMP_ACCURACY
    dw_seconds : UInt32
    dw_millis : UInt32
    dw_micros : UInt32
  end
  struct CRYPT_TIMESTAMP_INFO
    dw_version : UInt32
    psz_tsa_policy_id : PSTR
    hash_algorithm : CRYPT_ALGORITHM_IDENTIFIER
    hashed_message : CRYPTOAPI_BLOB
    serial_number : CRYPTOAPI_BLOB
    ft_time : FILETIME
    pv_accuracy : CRYPT_TIMESTAMP_ACCURACY*
    f_ordering : LibC::BOOL
    nonce : CRYPTOAPI_BLOB
    tsa : CRYPTOAPI_BLOB
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRYPT_TIMESTAMP_CONTEXT
    cb_encoded : UInt32
    pb_encoded : UInt8*
    p_time_stamp : CRYPT_TIMESTAMP_INFO*
  end
  struct CRYPT_TIMESTAMP_PARA
    psz_tsa_policy_id : PSTR
    f_request_certs : LibC::BOOL
    nonce : CRYPTOAPI_BLOB
    c_extension : UInt32
    rg_extension : CERT_EXTENSION*
  end
  struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
    cb_size : UInt32
    pfn_get : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
    pfn_release : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
    pfn_free_password : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD
    pfn_free : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
    pfn_free_identifier : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
  end
  struct CRYPTPROTECT_PROMPTSTRUCT
    cb_size : UInt32
    dw_prompt_flags : UInt32
    hwnd_app : HANDLE
    sz_prompt : LibC::LPWSTR
  end
  struct NCRYPT_PROTECT_STREAM_INFO
    pfn_stream_output : PFNCryptStreamOutputCallback
    pv_callback_ctxt : Void*
  end
  struct NCRYPT_PROTECT_STREAM_INFO_EX
    pfn_stream_output : PFNCryptStreamOutputCallbackEx
    pv_callback_ctxt : Void*
  end
  struct CRYPT_XML_BLOB
    dw_charset : CRYPT_XML_CHARSET
    cb_data : UInt32
    pb_data : UInt8*
  end
  struct CRYPT_XML_DATA_BLOB
    cb_data : UInt32
    pb_data : UInt8*
  end
  struct CRYPT_XML_PROPERTY
    dw_prop_id : CRYPT_XML_PROPERTY_ID
    pv_value : Void*
    cb_value : UInt32
  end
  struct CRYPT_XML_DATA_PROVIDER
    pv_callback_state : Void*
    cb_buffer_size : UInt32
    pfn_read : PFN_CRYPT_XML_DATA_PROVIDER_READ
    pfn_close : PFN_CRYPT_XML_DATA_PROVIDER_CLOSE
  end
  struct CRYPT_XML_STATUS
    cb_size : UInt32
    dw_error_status : CRYPT_XML_STATUS_ERROR_STATUS
    dw_info_status : CRYPT_XML_STATUS_INFO_STATUS
  end
  struct CRYPT_XML_ALGORITHM
    cb_size : UInt32
    wsz_algorithm : LibC::LPWSTR
    encoded : CRYPT_XML_BLOB
  end
  struct CRYPT_XML_TRANSFORM_INFO
    cb_size : UInt32
    wsz_algorithm : LibC::LPWSTR
    cb_buffer_size : UInt32
    dw_flags : CRYPT_XML_TRANSFORM_FLAGS
    pfn_create_transform : PFN_CRYPT_XML_CREATE_TRANSFORM
  end
  struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG
    cb_size : UInt32
    c_transform_info : UInt32
    rgp_transform_info : CRYPT_XML_TRANSFORM_INFO**
  end
  struct CRYPT_XML_KEY_DSA_KEY_VALUE
    p : CRYPT_XML_DATA_BLOB
    q : CRYPT_XML_DATA_BLOB
    g : CRYPT_XML_DATA_BLOB
    y : CRYPT_XML_DATA_BLOB
    j : CRYPT_XML_DATA_BLOB
    seed : CRYPT_XML_DATA_BLOB
    counter : CRYPT_XML_DATA_BLOB
  end
  struct CRYPT_XML_KEY_ECDSA_KEY_VALUE
    wsz_named_curve : LibC::LPWSTR
    x : CRYPT_XML_DATA_BLOB
    y : CRYPT_XML_DATA_BLOB
    explicit_para : CRYPT_XML_BLOB
  end
  struct CRYPT_XML_KEY_RSA_KEY_VALUE
    modulus : CRYPT_XML_DATA_BLOB
    exponent : CRYPT_XML_DATA_BLOB
  end
  struct CRYPT_XML_KEY_VALUE
    dw_type : CRYPT_XML_KEY_VALUE_TYPE
    anonymous : CRYPT_XML_KEY_VALUE_Anonymous_e__Union
  end
  struct CRYPT_XML_ISSUER_SERIAL
    wsz_issuer : LibC::LPWSTR
    wsz_serial : LibC::LPWSTR
  end
  struct CRYPT_XML_X509DATA_ITEM
    dw_type : CRYPT_XML_X509DATA_TYPE
    anonymous : CRYPT_XML_X509DATA_ITEM_Anonymous_e__Union
  end
  struct CRYPT_XML_X509DATA
    c_x509_data : UInt32
    rg_x509_data : CRYPT_XML_X509DATA_ITEM*
  end
  struct CRYPT_XML_KEY_INFO_ITEM
    dw_type : CRYPT_XML_KEYINFO_TYPE
    anonymous : CRYPT_XML_KEY_INFO_ITEM_Anonymous_e__Union
  end
  struct CRYPT_XML_KEY_INFO
    cb_size : UInt32
    wsz_id : LibC::LPWSTR
    c_key_info : UInt32
    rg_key_info : CRYPT_XML_KEY_INFO_ITEM*
    h_verify_key : BCRYPT_KEY_HANDLE
  end
  struct CRYPT_XML_REFERENCE
    cb_size : UInt32
    h_reference : Void*
    wsz_id : LibC::LPWSTR
    wsz_uri : LibC::LPWSTR
    wsz_type : LibC::LPWSTR
    digest_method : CRYPT_XML_ALGORITHM
    digest_value : CRYPTOAPI_BLOB
    c_transform : UInt32
    rg_transform : CRYPT_XML_ALGORITHM*
  end
  struct CRYPT_XML_REFERENCES
    c_reference : UInt32
    rgp_reference : CRYPT_XML_REFERENCE**
  end
  struct CRYPT_XML_SIGNED_INFO
    cb_size : UInt32
    wsz_id : LibC::LPWSTR
    canonicalization : CRYPT_XML_ALGORITHM
    signature_method : CRYPT_XML_ALGORITHM
    c_reference : UInt32
    rgp_reference : CRYPT_XML_REFERENCE**
    encoded : CRYPT_XML_BLOB
  end
  struct CRYPT_XML_OBJECT
    cb_size : UInt32
    h_object : Void*
    wsz_id : LibC::LPWSTR
    wsz_mime_type : LibC::LPWSTR
    wsz_encoding : LibC::LPWSTR
    manifest : CRYPT_XML_REFERENCES
    encoded : CRYPT_XML_BLOB
  end
  struct CRYPT_XML_SIGNATURE
    cb_size : UInt32
    h_signature : Void*
    wsz_id : LibC::LPWSTR
    signed_info : CRYPT_XML_SIGNED_INFO
    signature_value : CRYPTOAPI_BLOB
    p_key_info : CRYPT_XML_KEY_INFO*
    c_object : UInt32
    rgp_object : CRYPT_XML_OBJECT**
  end
  struct CRYPT_XML_DOC_CTXT
    cb_size : UInt32
    h_doc_ctxt : Void*
    p_transforms_config : CRYPT_XML_TRANSFORM_CHAIN_CONFIG*
    c_signature : UInt32
    rgp_signature : CRYPT_XML_SIGNATURE**
  end
  struct CRYPT_XML_KEYINFO_PARAM
    wsz_id : LibC::LPWSTR
    wsz_key_name : LibC::LPWSTR
    ski : CRYPTOAPI_BLOB
    wsz_subject_name : LibC::LPWSTR
    c_certificate : UInt32
    rg_certificate : CRYPTOAPI_BLOB*
    c_crl : UInt32
    rg_crl : CRYPTOAPI_BLOB*
  end
  struct CRYPT_XML_ALGORITHM_INFO
    cb_size : UInt32
    wsz_algorithm_uri : LibC::LPWSTR
    wsz_name : LibC::LPWSTR
    dw_group_id : CRYPT_XML_GROUP_ID
    wsz_cng_algid : LibC::LPWSTR
    wsz_cng_extra_algid : LibC::LPWSTR
    dw_sign_flags : UInt32
    dw_verify_flags : UInt32
    pv_padding_info : Void*
    pv_extra_info : Void*
  end
  struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
    cb_size : UInt32
    fp_crypt_xml_encode_algorithm : CryptXmlDllEncodeAlgorithm
    fp_crypt_xml_create_digest : CryptXmlDllCreateDigest
    fp_crypt_xml_digest_data : CryptXmlDllDigestData
    fp_crypt_xml_finalize_digest : CryptXmlDllFinalizeDigest
    fp_crypt_xml_close_digest : CryptXmlDllCloseDigest
    fp_crypt_xml_sign_data : CryptXmlDllSignData
    fp_crypt_xml_verify_signature : CryptXmlDllVerifySignature
    fp_crypt_xml_get_algorithm_info : CryptXmlDllGetAlgorithmInfo
  end
  struct INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS
    key_size : Int32
    key_exchange_algorithm : LibC::LPWSTR
    signature_algorithm : LibC::LPWSTR
  end
  struct INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS
    key_size : Int32
    block_size : Int32
    feedback_size : Int32
  end
  struct INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
    input_block_size : Int32
    output_block_size : Int32
    can_transform_multiple_blocks : LibC::BOOL
    can_reuse_transform : LibC::BOOL
  end
  struct INFORMATIONCARD_HASH_CRYPTO_PARAMETERS
    hash_size : Int32
    transform : INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
  end
  struct INFORMATIONCARD_CRYPTO_HANDLE
    type : HandleType
    expiration : Int64
    crypto_parameters : Void*
  end
  struct GENERIC_XML_TOKEN
    create_date : FILETIME
    expiry_date : FILETIME
    xml_token : LibC::LPWSTR
    internal_token_reference : LibC::LPWSTR
    external_token_reference : LibC::LPWSTR
  end
  struct POLICY_ELEMENT
    target_endpoint_address : LibC::LPWSTR
    issuer_endpoint_address : LibC::LPWSTR
    issued_token_parameters : LibC::LPWSTR
    privacy_notice_link : LibC::LPWSTR
    privacy_notice_version : UInt32
    use_managed_presentation : LibC::BOOL
  end
  struct ENDPOINTADDRESS
    service_url : LibC::LPWSTR
    policy_url : LibC::LPWSTR
    raw_certificate : CRYPTOAPI_BLOB
  end
  struct ENDPOINTADDRESS2
    service_url : LibC::LPWSTR
    policy_url : LibC::LPWSTR
    identity_type : UInt32
    identity_bytes : Void*
  end
  struct CERTIFICATE_CHAIN_BLOB
    cert_count : UInt32
    raw_certificates : CRYPTOAPI_BLOB*
  end
  struct CLAIMLIST
    count : UInt32
    claims : LibC::LPWSTR*
  end
  struct RECIPIENTPOLICY
    recipient : ENDPOINTADDRESS
    issuer : ENDPOINTADDRESS
    token_type : LibC::LPWSTR
    required_claims : CLAIMLIST
    optional_claims : CLAIMLIST
    privacy_url : LibC::LPWSTR
    privacy_version : UInt32
  end
  struct RECIPIENTPOLICY2
    recipient : ENDPOINTADDRESS2
    issuer : ENDPOINTADDRESS2
    token_type : LibC::LPWSTR
    required_claims : CLAIMLIST
    optional_claims : CLAIMLIST
    privacy_url : LibC::LPWSTR
    privacy_version : UInt32
  end


  struct ICertSrvSetupKeyInformationVTbl
    query_interface : Proc(ICertSrvSetupKeyInformation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICertSrvSetupKeyInformation*, UInt32)
    release : Proc(ICertSrvSetupKeyInformation*, UInt32)
    get_type_info_count : Proc(ICertSrvSetupKeyInformation*, UInt32*, HRESULT)
    get_type_info : Proc(ICertSrvSetupKeyInformation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICertSrvSetupKeyInformation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICertSrvSetupKeyInformation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_provider_name : Proc(ICertSrvSetupKeyInformation*, UInt8**, HRESULT)
    put_provider_name : Proc(ICertSrvSetupKeyInformation*, UInt8*, HRESULT)
    get_length : Proc(ICertSrvSetupKeyInformation*, Int32*, HRESULT)
    put_length : Proc(ICertSrvSetupKeyInformation*, Int32, HRESULT)
    get_existing : Proc(ICertSrvSetupKeyInformation*, Int16*, HRESULT)
    put_existing : Proc(ICertSrvSetupKeyInformation*, Int16, HRESULT)
    get_container_name : Proc(ICertSrvSetupKeyInformation*, UInt8**, HRESULT)
    put_container_name : Proc(ICertSrvSetupKeyInformation*, UInt8*, HRESULT)
    get_hash_algorithm : Proc(ICertSrvSetupKeyInformation*, UInt8**, HRESULT)
    put_hash_algorithm : Proc(ICertSrvSetupKeyInformation*, UInt8*, HRESULT)
    get_existing_ca_certificate : Proc(ICertSrvSetupKeyInformation*, VARIANT*, HRESULT)
    put_existing_ca_certificate : Proc(ICertSrvSetupKeyInformation*, VARIANT, HRESULT)
  end

  struct ICertSrvSetupKeyInformation
    lpVtbl : ICertSrvSetupKeyInformationVTbl*
  end

  struct ICertSrvSetupKeyInformationCollectionVTbl
    query_interface : Proc(ICertSrvSetupKeyInformationCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICertSrvSetupKeyInformationCollection*, UInt32)
    release : Proc(ICertSrvSetupKeyInformationCollection*, UInt32)
    get_type_info_count : Proc(ICertSrvSetupKeyInformationCollection*, UInt32*, HRESULT)
    get_type_info : Proc(ICertSrvSetupKeyInformationCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICertSrvSetupKeyInformationCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICertSrvSetupKeyInformationCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(ICertSrvSetupKeyInformationCollection*, IUnknown*, HRESULT)
    get_item : Proc(ICertSrvSetupKeyInformationCollection*, Int32, VARIANT*, HRESULT)
    get_count : Proc(ICertSrvSetupKeyInformationCollection*, Int32*, HRESULT)
    add : Proc(ICertSrvSetupKeyInformationCollection*, ICertSrvSetupKeyInformation, HRESULT)
  end

  struct ICertSrvSetupKeyInformationCollection
    lpVtbl : ICertSrvSetupKeyInformationCollectionVTbl*
  end

  struct ICertSrvSetupVTbl
    query_interface : Proc(ICertSrvSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICertSrvSetup*, UInt32)
    release : Proc(ICertSrvSetup*, UInt32)
    get_type_info_count : Proc(ICertSrvSetup*, UInt32*, HRESULT)
    get_type_info : Proc(ICertSrvSetup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICertSrvSetup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICertSrvSetup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ca_error_id : Proc(ICertSrvSetup*, Int32*, HRESULT)
    get_ca_error_string : Proc(ICertSrvSetup*, UInt8**, HRESULT)
    initialize_defaults : Proc(ICertSrvSetup*, Int16, Int16, HRESULT)
    get_ca_setup_property : Proc(ICertSrvSetup*, CASetupProperty, VARIANT*, HRESULT)
    set_ca_setup_property : Proc(ICertSrvSetup*, CASetupProperty, VARIANT*, HRESULT)
    is_property_editable : Proc(ICertSrvSetup*, CASetupProperty, Int16*, HRESULT)
    get_supported_ca_types : Proc(ICertSrvSetup*, VARIANT*, HRESULT)
    get_provider_name_list : Proc(ICertSrvSetup*, VARIANT*, HRESULT)
    get_key_length_list : Proc(ICertSrvSetup*, UInt8*, VARIANT*, HRESULT)
    get_hash_algorithm_list : Proc(ICertSrvSetup*, UInt8*, VARIANT*, HRESULT)
    get_private_key_container_list : Proc(ICertSrvSetup*, UInt8*, VARIANT*, HRESULT)
    get_existing_ca_certificates : Proc(ICertSrvSetup*, ICertSrvSetupKeyInformationCollection*, HRESULT)
    ca_import_pfx : Proc(ICertSrvSetup*, UInt8*, UInt8*, Int16, ICertSrvSetupKeyInformation*, HRESULT)
    set_ca_distinguished_name : Proc(ICertSrvSetup*, UInt8*, Int16, Int16, Int16, HRESULT)
    set_database_information : Proc(ICertSrvSetup*, UInt8*, UInt8*, UInt8*, Int16, HRESULT)
    set_parent_ca_information : Proc(ICertSrvSetup*, UInt8*, HRESULT)
    set_web_ca_information : Proc(ICertSrvSetup*, UInt8*, HRESULT)
    install : Proc(ICertSrvSetup*, HRESULT)
    pre_un_install : Proc(ICertSrvSetup*, Int16, HRESULT)
    post_un_install : Proc(ICertSrvSetup*, HRESULT)
  end

  struct ICertSrvSetup
    lpVtbl : ICertSrvSetupVTbl*
  end

  struct IMSCEPSetupVTbl
    query_interface : Proc(IMSCEPSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSCEPSetup*, UInt32)
    release : Proc(IMSCEPSetup*, UInt32)
    get_type_info_count : Proc(IMSCEPSetup*, UInt32*, HRESULT)
    get_type_info : Proc(IMSCEPSetup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSCEPSetup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSCEPSetup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_mscep_error_id : Proc(IMSCEPSetup*, Int32*, HRESULT)
    get_mscep_error_string : Proc(IMSCEPSetup*, UInt8**, HRESULT)
    initialize_defaults : Proc(IMSCEPSetup*, HRESULT)
    get_mscep_setup_property : Proc(IMSCEPSetup*, MSCEPSetupProperty, VARIANT*, HRESULT)
    set_mscep_setup_property : Proc(IMSCEPSetup*, MSCEPSetupProperty, VARIANT*, HRESULT)
    set_account_information : Proc(IMSCEPSetup*, UInt8*, UInt8*, HRESULT)
    is_mscep_store_empty : Proc(IMSCEPSetup*, Int16*, HRESULT)
    get_provider_name_list : Proc(IMSCEPSetup*, Int16, VARIANT*, HRESULT)
    get_key_length_list : Proc(IMSCEPSetup*, Int16, UInt8*, VARIANT*, HRESULT)
    install : Proc(IMSCEPSetup*, HRESULT)
    pre_un_install : Proc(IMSCEPSetup*, HRESULT)
    post_un_install : Proc(IMSCEPSetup*, HRESULT)
  end

  struct IMSCEPSetup
    lpVtbl : IMSCEPSetupVTbl*
  end

  struct ICertificateEnrollmentServerSetupVTbl
    query_interface : Proc(ICertificateEnrollmentServerSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICertificateEnrollmentServerSetup*, UInt32)
    release : Proc(ICertificateEnrollmentServerSetup*, UInt32)
    get_type_info_count : Proc(ICertificateEnrollmentServerSetup*, UInt32*, HRESULT)
    get_type_info : Proc(ICertificateEnrollmentServerSetup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICertificateEnrollmentServerSetup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICertificateEnrollmentServerSetup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_error_string : Proc(ICertificateEnrollmentServerSetup*, UInt8**, HRESULT)
    initialize_install_defaults : Proc(ICertificateEnrollmentServerSetup*, HRESULT)
    get_property : Proc(ICertificateEnrollmentServerSetup*, CESSetupProperty, VARIANT*, HRESULT)
    set_property : Proc(ICertificateEnrollmentServerSetup*, CESSetupProperty, VARIANT*, HRESULT)
    set_application_pool_credentials : Proc(ICertificateEnrollmentServerSetup*, UInt8*, UInt8*, HRESULT)
    install : Proc(ICertificateEnrollmentServerSetup*, HRESULT)
    un_install : Proc(ICertificateEnrollmentServerSetup*, VARIANT*, VARIANT*, HRESULT)
  end

  struct ICertificateEnrollmentServerSetup
    lpVtbl : ICertificateEnrollmentServerSetupVTbl*
  end

  struct ICertificateEnrollmentPolicyServerSetupVTbl
    query_interface : Proc(ICertificateEnrollmentPolicyServerSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32)
    release : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32)
    get_type_info_count : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32*, HRESULT)
    get_type_info : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICertificateEnrollmentPolicyServerSetup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICertificateEnrollmentPolicyServerSetup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_error_string : Proc(ICertificateEnrollmentPolicyServerSetup*, UInt8**, HRESULT)
    initialize_install_defaults : Proc(ICertificateEnrollmentPolicyServerSetup*, HRESULT)
    get_property : Proc(ICertificateEnrollmentPolicyServerSetup*, CEPSetupProperty, VARIANT*, HRESULT)
    set_property : Proc(ICertificateEnrollmentPolicyServerSetup*, CEPSetupProperty, VARIANT*, HRESULT)
    install : Proc(ICertificateEnrollmentPolicyServerSetup*, HRESULT)
    un_install : Proc(ICertificateEnrollmentPolicyServerSetup*, VARIANT*, HRESULT)
  end

  struct ICertificateEnrollmentPolicyServerSetup
    lpVtbl : ICertificateEnrollmentPolicyServerSetupVTbl*
  end


  # Params # phprov : LibC::UINT_PTR* [In],szcontainer : PSTR [In],szprovider : PSTR [In],dwprovtype : UInt32 [In],dwflags : UInt32 [In]
  fun CryptAcquireContextA(phprov : LibC::UINT_PTR*, szcontainer : PSTR, szprovider : PSTR, dwprovtype : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # phprov : LibC::UINT_PTR* [In],szcontainer : LibC::LPWSTR [In],szprovider : LibC::LPWSTR [In],dwprovtype : UInt32 [In],dwflags : UInt32 [In]
  fun CryptAcquireContextW(phprov : LibC::UINT_PTR*, szcontainer : LibC::LPWSTR, szprovider : LibC::LPWSTR, dwprovtype : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],dwflags : UInt32 [In]
  fun CryptReleaseContext(hprov : LibC::UINT_PTR, dwflags : UInt32) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],algid : UInt32 [In],dwflags : CRYPT_KEY_FLAGS [In],phkey : LibC::UINT_PTR* [In]
  fun CryptGenKey(hprov : LibC::UINT_PTR, algid : UInt32, dwflags : CRYPT_KEY_FLAGS, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],algid : UInt32 [In],hbasedata : LibC::UINT_PTR [In],dwflags : UInt32 [In],phkey : LibC::UINT_PTR* [In]
  fun CryptDeriveKey(hprov : LibC::UINT_PTR, algid : UInt32, hbasedata : LibC::UINT_PTR, dwflags : UInt32, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In]
  fun CryptDestroyKey(hkey : LibC::UINT_PTR) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],dwparam : CRYPT_KEY_PARAM_ID [In],pbdata : UInt8* [In],dwflags : UInt32 [In]
  fun CryptSetKeyParam(hkey : LibC::UINT_PTR, dwparam : CRYPT_KEY_PARAM_ID, pbdata : UInt8*, dwflags : UInt32) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],dwparam : CRYPT_KEY_PARAM_ID [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In],dwflags : UInt32 [In]
  fun CryptGetKeyParam(hkey : LibC::UINT_PTR, dwparam : CRYPT_KEY_PARAM_ID, pbdata : UInt8*, pdwdatalen : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],dwparam : CRYPT_SET_HASH_PARAM [In],pbdata : UInt8* [In],dwflags : UInt32 [In]
  fun CryptSetHashParam(hhash : LibC::UINT_PTR, dwparam : CRYPT_SET_HASH_PARAM, pbdata : UInt8*, dwflags : UInt32) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],dwparam : UInt32 [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In],dwflags : UInt32 [In]
  fun CryptGetHashParam(hhash : LibC::UINT_PTR, dwparam : UInt32, pbdata : UInt8*, pdwdatalen : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],dwparam : CRYPT_SET_PROV_PARAM_ID [In],pbdata : UInt8* [In],dwflags : UInt32 [In]
  fun CryptSetProvParam(hprov : LibC::UINT_PTR, dwparam : CRYPT_SET_PROV_PARAM_ID, pbdata : UInt8*, dwflags : UInt32) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],dwparam : UInt32 [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In],dwflags : UInt32 [In]
  fun CryptGetProvParam(hprov : LibC::UINT_PTR, dwparam : UInt32, pbdata : UInt8*, pdwdatalen : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],dwlen : UInt32 [In],pbbuffer : UInt8* [In]
  fun CryptGenRandom(hprov : LibC::UINT_PTR, dwlen : UInt32, pbbuffer : UInt8*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],phuserkey : LibC::UINT_PTR* [In]
  fun CryptGetUserKey(hprov : LibC::UINT_PTR, dwkeyspec : UInt32, phuserkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],hexpkey : LibC::UINT_PTR [In],dwblobtype : UInt32 [In],dwflags : CRYPT_KEY_FLAGS [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In]
  fun CryptExportKey(hkey : LibC::UINT_PTR, hexpkey : LibC::UINT_PTR, dwblobtype : UInt32, dwflags : CRYPT_KEY_FLAGS, pbdata : UInt8*, pdwdatalen : UInt32*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],pbdata : UInt8* [In],dwdatalen : UInt32 [In],hpubkey : LibC::UINT_PTR [In],dwflags : CRYPT_KEY_FLAGS [In],phkey : LibC::UINT_PTR* [In]
  fun CryptImportKey(hprov : LibC::UINT_PTR, pbdata : UInt8*, dwdatalen : UInt32, hpubkey : LibC::UINT_PTR, dwflags : CRYPT_KEY_FLAGS, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],hhash : LibC::UINT_PTR [In],final : LibC::BOOL [In],dwflags : UInt32 [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In],dwbuflen : UInt32 [In]
  fun CryptEncrypt(hkey : LibC::UINT_PTR, hhash : LibC::UINT_PTR, final : LibC::BOOL, dwflags : UInt32, pbdata : UInt8*, pdwdatalen : UInt32*, dwbuflen : UInt32) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],hhash : LibC::UINT_PTR [In],final : LibC::BOOL [In],dwflags : UInt32 [In],pbdata : UInt8* [In],pdwdatalen : UInt32* [In]
  fun CryptDecrypt(hkey : LibC::UINT_PTR, hhash : LibC::UINT_PTR, final : LibC::BOOL, dwflags : UInt32, pbdata : UInt8*, pdwdatalen : UInt32*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],algid : UInt32 [In],hkey : LibC::UINT_PTR [In],dwflags : UInt32 [In],phhash : LibC::UINT_PTR* [In]
  fun CryptCreateHash(hprov : LibC::UINT_PTR, algid : UInt32, hkey : LibC::UINT_PTR, dwflags : UInt32, phhash : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],pbdata : UInt8* [In],dwdatalen : UInt32 [In],dwflags : UInt32 [In]
  fun CryptHashData(hhash : LibC::UINT_PTR, pbdata : UInt8*, dwdatalen : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],hkey : LibC::UINT_PTR [In],dwflags : UInt32 [In]
  fun CryptHashSessionKey(hhash : LibC::UINT_PTR, hkey : LibC::UINT_PTR, dwflags : UInt32) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In]
  fun CryptDestroyHash(hhash : LibC::UINT_PTR) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],szdescription : PSTR [In],dwflags : UInt32 [In],pbsignature : UInt8* [In],pdwsiglen : UInt32* [In]
  fun CryptSignHashA(hhash : LibC::UINT_PTR, dwkeyspec : UInt32, szdescription : PSTR, dwflags : UInt32, pbsignature : UInt8*, pdwsiglen : UInt32*) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],szdescription : LibC::LPWSTR [In],dwflags : UInt32 [In],pbsignature : UInt8* [In],pdwsiglen : UInt32* [In]
  fun CryptSignHashW(hhash : LibC::UINT_PTR, dwkeyspec : UInt32, szdescription : LibC::LPWSTR, dwflags : UInt32, pbsignature : UInt8*, pdwsiglen : UInt32*) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],pbsignature : UInt8* [In],dwsiglen : UInt32 [In],hpubkey : LibC::UINT_PTR [In],szdescription : PSTR [In],dwflags : UInt32 [In]
  fun CryptVerifySignatureA(hhash : LibC::UINT_PTR, pbsignature : UInt8*, dwsiglen : UInt32, hpubkey : LibC::UINT_PTR, szdescription : PSTR, dwflags : UInt32) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],pbsignature : UInt8* [In],dwsiglen : UInt32 [In],hpubkey : LibC::UINT_PTR [In],szdescription : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun CryptVerifySignatureW(hhash : LibC::UINT_PTR, pbsignature : UInt8*, dwsiglen : UInt32, hpubkey : LibC::UINT_PTR, szdescription : LibC::LPWSTR, dwflags : UInt32) : LibC::BOOL

  # Params # pszprovname : PSTR [In],dwprovtype : UInt32 [In]
  fun CryptSetProviderA(pszprovname : PSTR, dwprovtype : UInt32) : LibC::BOOL

  # Params # pszprovname : LibC::LPWSTR [In],dwprovtype : UInt32 [In]
  fun CryptSetProviderW(pszprovname : LibC::LPWSTR, dwprovtype : UInt32) : LibC::BOOL

  # Params # pszprovname : PSTR [In],dwprovtype : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In]
  fun CryptSetProviderExA(pszprovname : PSTR, dwprovtype : UInt32, pdwreserved : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # pszprovname : LibC::LPWSTR [In],dwprovtype : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In]
  fun CryptSetProviderExW(pszprovname : LibC::LPWSTR, dwprovtype : UInt32, pdwreserved : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # dwprovtype : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pszprovname : PSTR [In],pcbprovname : UInt32* [In]
  fun CryptGetDefaultProviderA(dwprovtype : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pszprovname : PSTR, pcbprovname : UInt32*) : LibC::BOOL

  # Params # dwprovtype : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pszprovname : LibC::LPWSTR [In],pcbprovname : UInt32* [In]
  fun CryptGetDefaultProviderW(dwprovtype : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pszprovname : LibC::LPWSTR, pcbprovname : UInt32*) : LibC::BOOL

  # Params # dwindex : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pdwprovtype : UInt32* [In],sztypename : PSTR [In],pcbtypename : UInt32* [In]
  fun CryptEnumProviderTypesA(dwindex : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pdwprovtype : UInt32*, sztypename : PSTR, pcbtypename : UInt32*) : LibC::BOOL

  # Params # dwindex : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pdwprovtype : UInt32* [In],sztypename : LibC::LPWSTR [In],pcbtypename : UInt32* [In]
  fun CryptEnumProviderTypesW(dwindex : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pdwprovtype : UInt32*, sztypename : LibC::LPWSTR, pcbtypename : UInt32*) : LibC::BOOL

  # Params # dwindex : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pdwprovtype : UInt32* [In],szprovname : PSTR [In],pcbprovname : UInt32* [In]
  fun CryptEnumProvidersA(dwindex : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pdwprovtype : UInt32*, szprovname : PSTR, pcbprovname : UInt32*) : LibC::BOOL

  # Params # dwindex : UInt32 [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],pdwprovtype : UInt32* [In],szprovname : LibC::LPWSTR [In],pcbprovname : UInt32* [In]
  fun CryptEnumProvidersW(dwindex : UInt32, pdwreserved : UInt32*, dwflags : UInt32, pdwprovtype : UInt32*, szprovname : LibC::LPWSTR, pcbprovname : UInt32*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In]
  fun CryptContextAddRef(hprov : LibC::UINT_PTR, pdwreserved : UInt32*, dwflags : UInt32) : LibC::BOOL

  # Params # hkey : LibC::UINT_PTR [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],phkey : LibC::UINT_PTR* [In]
  fun CryptDuplicateKey(hkey : LibC::UINT_PTR, pdwreserved : UInt32*, dwflags : UInt32, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hhash : LibC::UINT_PTR [In],pdwreserved : UInt32* [In],dwflags : UInt32 [In],phhash : LibC::UINT_PTR* [In]
  fun CryptDuplicateHash(hhash : LibC::UINT_PTR, pdwreserved : UInt32*, dwflags : UInt32, phhash : LibC::UINT_PTR*) : LibC::BOOL

  # Params # phalgorithm : BCRYPT_ALG_HANDLE* [In],pszalgid : LibC::LPWSTR [In],pszimplementation : LibC::LPWSTR [In],dwflags : BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS [In]
  fun BCryptOpenAlgorithmProvider(phalgorithm : BCRYPT_ALG_HANDLE*, pszalgid : LibC::LPWSTR, pszimplementation : LibC::LPWSTR, dwflags : BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS) : NTSTATUS

  # Params # dwalgoperations : BCRYPT_OPERATION [In],palgcount : UInt32* [In],ppalglist : BCRYPT_ALGORITHM_IDENTIFIER** [In],dwflags : UInt32 [In]
  fun BCryptEnumAlgorithms(dwalgoperations : BCRYPT_OPERATION, palgcount : UInt32*, ppalglist : BCRYPT_ALGORITHM_IDENTIFIER**, dwflags : UInt32) : NTSTATUS

  # Params # pszalgid : LibC::LPWSTR [In],pimplcount : UInt32* [In],ppimpllist : BCRYPT_PROVIDER_NAME** [In],dwflags : UInt32 [In]
  fun BCryptEnumProviders(pszalgid : LibC::LPWSTR, pimplcount : UInt32*, ppimpllist : BCRYPT_PROVIDER_NAME**, dwflags : UInt32) : NTSTATUS

  # Params # hobject : Void* [In],pszproperty : LibC::LPWSTR [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun BCryptGetProperty(hobject : Void*, pszproperty : LibC::LPWSTR, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : UInt32) : NTSTATUS

  # Params # hobject : Void* [In],pszproperty : LibC::LPWSTR [In],pbinput : UInt8* [In],cbinput : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptSetProperty(hobject : Void*, pszproperty : LibC::LPWSTR, pbinput : UInt8*, cbinput : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],dwflags : UInt32 [In]
  fun BCryptCloseAlgorithmProvider(halgorithm : BCRYPT_ALG_HANDLE, dwflags : UInt32) : NTSTATUS

  # Params # pvbuffer : Void* [In]
  fun BCryptFreeBuffer(pvbuffer : Void*)

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],phkey : BCRYPT_KEY_HANDLE* [In],pbkeyobject : UInt8* [In],cbkeyobject : UInt32 [In],pbsecret : UInt8* [In],cbsecret : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptGenerateSymmetricKey(halgorithm : BCRYPT_ALG_HANDLE, phkey : BCRYPT_KEY_HANDLE*, pbkeyobject : UInt8*, cbkeyobject : UInt32, pbsecret : UInt8*, cbsecret : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],phkey : BCRYPT_KEY_HANDLE* [In],dwlength : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptGenerateKeyPair(halgorithm : BCRYPT_ALG_HANDLE, phkey : BCRYPT_KEY_HANDLE*, dwlength : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],pbinput : UInt8* [In],cbinput : UInt32 [In],ppaddinginfo : Void* [In],pbiv : UInt8* [In],cbiv : UInt32 [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun BCryptEncrypt(hkey : BCRYPT_KEY_HANDLE, pbinput : UInt8*, cbinput : UInt32, ppaddinginfo : Void*, pbiv : UInt8*, cbiv : UInt32, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],pbinput : UInt8* [In],cbinput : UInt32 [In],ppaddinginfo : Void* [In],pbiv : UInt8* [In],cbiv : UInt32 [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun BCryptDecrypt(hkey : BCRYPT_KEY_HANDLE, pbinput : UInt8*, cbinput : UInt32, ppaddinginfo : Void*, pbiv : UInt8*, cbiv : UInt32, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],hexportkey : BCRYPT_KEY_HANDLE [In],pszblobtype : LibC::LPWSTR [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun BCryptExportKey(hkey : BCRYPT_KEY_HANDLE, hexportkey : BCRYPT_KEY_HANDLE, pszblobtype : LibC::LPWSTR, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],himportkey : BCRYPT_KEY_HANDLE [In],pszblobtype : LibC::LPWSTR [In],phkey : BCRYPT_KEY_HANDLE* [In],pbkeyobject : UInt8* [In],cbkeyobject : UInt32 [In],pbinput : UInt8* [In],cbinput : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptImportKey(halgorithm : BCRYPT_ALG_HANDLE, himportkey : BCRYPT_KEY_HANDLE, pszblobtype : LibC::LPWSTR, phkey : BCRYPT_KEY_HANDLE*, pbkeyobject : UInt8*, cbkeyobject : UInt32, pbinput : UInt8*, cbinput : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],himportkey : BCRYPT_KEY_HANDLE [In],pszblobtype : LibC::LPWSTR [In],phkey : BCRYPT_KEY_HANDLE* [In],pbinput : UInt8* [In],cbinput : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptImportKeyPair(halgorithm : BCRYPT_ALG_HANDLE, himportkey : BCRYPT_KEY_HANDLE, pszblobtype : LibC::LPWSTR, phkey : BCRYPT_KEY_HANDLE*, pbinput : UInt8*, cbinput : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],phnewkey : BCRYPT_KEY_HANDLE* [In],pbkeyobject : UInt8* [In],cbkeyobject : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptDuplicateKey(hkey : BCRYPT_KEY_HANDLE, phnewkey : BCRYPT_KEY_HANDLE*, pbkeyobject : UInt8*, cbkeyobject : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],dwflags : UInt32 [In]
  fun BCryptFinalizeKeyPair(hkey : BCRYPT_KEY_HANDLE, dwflags : UInt32) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In]
  fun BCryptDestroyKey(hkey : BCRYPT_KEY_HANDLE) : NTSTATUS

  # Params # hsecret : Void* [In]
  fun BCryptDestroySecret(hsecret : Void*) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],ppaddinginfo : Void* [In],pbinput : UInt8* [In],cbinput : UInt32 [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun BCryptSignHash(hkey : BCRYPT_KEY_HANDLE, ppaddinginfo : Void*, pbinput : UInt8*, cbinput : UInt32, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],ppaddinginfo : Void* [In],pbhash : UInt8* [In],cbhash : UInt32 [In],pbsignature : UInt8* [In],cbsignature : UInt32 [In],dwflags : NCRYPT_FLAGS [In]
  fun BCryptVerifySignature(hkey : BCRYPT_KEY_HANDLE, ppaddinginfo : Void*, pbhash : UInt8*, cbhash : UInt32, pbsignature : UInt8*, cbsignature : UInt32, dwflags : NCRYPT_FLAGS) : NTSTATUS

  # Params # hprivkey : BCRYPT_KEY_HANDLE [In],hpubkey : BCRYPT_KEY_HANDLE [In],phagreedsecret : Void** [In],dwflags : UInt32 [In]
  fun BCryptSecretAgreement(hprivkey : BCRYPT_KEY_HANDLE, hpubkey : BCRYPT_KEY_HANDLE, phagreedsecret : Void**, dwflags : UInt32) : NTSTATUS

  # Params # hsharedsecret : Void* [In],pwszkdf : LibC::LPWSTR [In],pparameterlist : BCryptBufferDesc* [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun BCryptDeriveKey(hsharedsecret : Void*, pwszkdf : LibC::LPWSTR, pparameterlist : BCryptBufferDesc*, pbderivedkey : UInt8*, cbderivedkey : UInt32, pcbresult : UInt32*, dwflags : UInt32) : NTSTATUS

  # Params # hkey : BCRYPT_KEY_HANDLE [In],pparameterlist : BCryptBufferDesc* [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun BCryptKeyDerivation(hkey : BCRYPT_KEY_HANDLE, pparameterlist : BCryptBufferDesc*, pbderivedkey : UInt8*, cbderivedkey : UInt32, pcbresult : UInt32*, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],phhash : Void** [In],pbhashobject : UInt8* [In],cbhashobject : UInt32 [In],pbsecret : UInt8* [In],cbsecret : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptCreateHash(halgorithm : BCRYPT_ALG_HANDLE, phhash : Void**, pbhashobject : UInt8*, cbhashobject : UInt32, pbsecret : UInt8*, cbsecret : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hhash : Void* [In],pbinput : UInt8* [In],cbinput : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptHashData(hhash : Void*, pbinput : UInt8*, cbinput : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hhash : Void* [In],pboutput : UInt8* [In],cboutput : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptFinishHash(hhash : Void*, pboutput : UInt8*, cboutput : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],phhash : Void** [In],nhashes : UInt32 [In],pbhashobject : UInt8* [In],cbhashobject : UInt32 [In],pbsecret : UInt8* [In],cbsecret : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptCreateMultiHash(halgorithm : BCRYPT_ALG_HANDLE, phhash : Void**, nhashes : UInt32, pbhashobject : UInt8*, cbhashobject : UInt32, pbsecret : UInt8*, cbsecret : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hobject : Void* [In],operationtype : BCRYPT_MULTI_OPERATION_TYPE [In],poperations : Void* [In],cboperations : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptProcessMultiOperations(hobject : Void*, operationtype : BCRYPT_MULTI_OPERATION_TYPE, poperations : Void*, cboperations : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hhash : Void* [In],phnewhash : Void** [In],pbhashobject : UInt8* [In],cbhashobject : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptDuplicateHash(hhash : Void*, phnewhash : Void**, pbhashobject : UInt8*, cbhashobject : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hhash : Void* [In]
  fun BCryptDestroyHash(hhash : Void*) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],pbsecret : UInt8* [In],cbsecret : UInt32 [In],pbinput : UInt8* [In],cbinput : UInt32 [In],pboutput : UInt8* [In],cboutput : UInt32 [In]
  fun BCryptHash(halgorithm : BCRYPT_ALG_HANDLE, pbsecret : UInt8*, cbsecret : UInt32, pbinput : UInt8*, cbinput : UInt32, pboutput : UInt8*, cboutput : UInt32) : NTSTATUS

  # Params # halgorithm : BCRYPT_ALG_HANDLE [In],pbbuffer : UInt8* [In],cbbuffer : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptGenRandom(halgorithm : BCRYPT_ALG_HANDLE, pbbuffer : UInt8*, cbbuffer : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hhash : Void* [In],htargetalg : BCRYPT_ALG_HANDLE [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptDeriveKeyCapi(hhash : Void*, htargetalg : BCRYPT_ALG_HANDLE, pbderivedkey : UInt8*, cbderivedkey : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # hprf : BCRYPT_ALG_HANDLE [In],pbpassword : UInt8* [In],cbpassword : UInt32 [In],pbsalt : UInt8* [In],cbsalt : UInt32 [In],citerations : UInt64 [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],dwflags : UInt32 [In]
  fun BCryptDeriveKeyPBKDF2(hprf : BCRYPT_ALG_HANDLE, pbpassword : UInt8*, cbpassword : UInt32, pbsalt : UInt8*, cbsalt : UInt32, citerations : UInt64, pbderivedkey : UInt8*, cbderivedkey : UInt32, dwflags : UInt32) : NTSTATUS

  # Params # pszprovider : LibC::LPWSTR [In],dwmode : BCRYPT_QUERY_PROVIDER_MODE [In],dwinterface : BCRYPT_INTERFACE [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_PROVIDER_REG** [In]
  fun BCryptQueryProviderRegistration(pszprovider : LibC::LPWSTR, dwmode : BCRYPT_QUERY_PROVIDER_MODE, dwinterface : BCRYPT_INTERFACE, pcbbuffer : UInt32*, ppbuffer : CRYPT_PROVIDER_REG**) : NTSTATUS

  # Params # pcbbuffer : UInt32* [In],ppbuffer : CRYPT_PROVIDERS** [In]
  fun BCryptEnumRegisteredProviders(pcbbuffer : UInt32*, ppbuffer : CRYPT_PROVIDERS**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],pconfig : CRYPT_CONTEXT_CONFIG* [In]
  fun BCryptCreateContext(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, pconfig : CRYPT_CONTEXT_CONFIG*) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In]
  fun BCryptDeleteContext(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_CONTEXTS** [In]
  fun BCryptEnumContexts(dwtable : BCRYPT_TABLE, pcbbuffer : UInt32*, ppbuffer : CRYPT_CONTEXTS**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],pconfig : CRYPT_CONTEXT_CONFIG* [In]
  fun BCryptConfigureContext(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, pconfig : CRYPT_CONTEXT_CONFIG*) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_CONTEXT_CONFIG** [In]
  fun BCryptQueryContextConfiguration(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, pcbbuffer : UInt32*, ppbuffer : CRYPT_CONTEXT_CONFIG**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],dwposition : UInt32 [In]
  fun BCryptAddContextFunction(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, dwposition : UInt32) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In]
  fun BCryptRemoveContextFunction(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_CONTEXT_FUNCTIONS** [In]
  fun BCryptEnumContextFunctions(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pcbbuffer : UInt32*, ppbuffer : CRYPT_CONTEXT_FUNCTIONS**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],pconfig : CRYPT_CONTEXT_FUNCTION_CONFIG* [In]
  fun BCryptConfigureContextFunction(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, pconfig : CRYPT_CONTEXT_FUNCTION_CONFIG*) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_CONTEXT_FUNCTION_CONFIG** [In]
  fun BCryptQueryContextFunctionConfiguration(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, pcbbuffer : UInt32*, ppbuffer : CRYPT_CONTEXT_FUNCTION_CONFIG**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_CONTEXT_FUNCTION_PROVIDERS** [In]
  fun BCryptEnumContextFunctionProviders(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, pcbbuffer : UInt32*, ppbuffer : CRYPT_CONTEXT_FUNCTION_PROVIDERS**) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],pszproperty : LibC::LPWSTR [In],cbvalue : UInt32 [In],pbvalue : UInt8* [In]
  fun BCryptSetContextFunctionProperty(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, pszproperty : LibC::LPWSTR, cbvalue : UInt32, pbvalue : UInt8*) : NTSTATUS

  # Params # dwtable : BCRYPT_TABLE [In],pszcontext : LibC::LPWSTR [In],dwinterface : BCRYPT_INTERFACE [In],pszfunction : LibC::LPWSTR [In],pszproperty : LibC::LPWSTR [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun BCryptQueryContextFunctionProperty(dwtable : BCRYPT_TABLE, pszcontext : LibC::LPWSTR, dwinterface : BCRYPT_INTERFACE, pszfunction : LibC::LPWSTR, pszproperty : LibC::LPWSTR, pcbvalue : UInt32*, ppbvalue : UInt8**) : NTSTATUS

  # Params # phevent : LibC::HANDLE* [In]
  fun BCryptRegisterConfigChangeNotify(phevent : LibC::HANDLE*) : NTSTATUS

  # Params # hevent : LibC::HANDLE [In]
  fun BCryptUnregisterConfigChangeNotify(hevent : LibC::HANDLE) : NTSTATUS

  # Params # pszcontext : LibC::LPWSTR [In],dwinterface : UInt32 [In],pszfunction : LibC::LPWSTR [In],pszprovider : LibC::LPWSTR [In],dwmode : BCRYPT_QUERY_PROVIDER_MODE [In],dwflags : BCRYPT_RESOLVE_PROVIDERS_FLAGS [In],pcbbuffer : UInt32* [In],ppbuffer : CRYPT_PROVIDER_REFS** [In]
  fun BCryptResolveProviders(pszcontext : LibC::LPWSTR, dwinterface : UInt32, pszfunction : LibC::LPWSTR, pszprovider : LibC::LPWSTR, dwmode : BCRYPT_QUERY_PROVIDER_MODE, dwflags : BCRYPT_RESOLVE_PROVIDERS_FLAGS, pcbbuffer : UInt32*, ppbuffer : CRYPT_PROVIDER_REFS**) : NTSTATUS

  # Params # pfenabled : UInt8* [In]
  fun BCryptGetFipsAlgorithmMode(pfenabled : UInt8*) : NTSTATUS

  # Params # phprovider : LibC::UINT_PTR* [In],pszprovidername : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun NCryptOpenStorageProvider(phprovider : LibC::UINT_PTR*, pszprovidername : LibC::LPWSTR, dwflags : UInt32) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],dwalgoperations : NCRYPT_OPERATION [In],pdwalgcount : UInt32* [In],ppalglist : NCryptAlgorithmName** [In],dwflags : UInt32 [In]
  fun NCryptEnumAlgorithms(hprovider : LibC::UINT_PTR, dwalgoperations : NCRYPT_OPERATION, pdwalgcount : UInt32*, ppalglist : NCryptAlgorithmName**, dwflags : UInt32) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],pszalgid : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun NCryptIsAlgSupported(hprovider : LibC::UINT_PTR, pszalgid : LibC::LPWSTR, dwflags : UInt32) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],pszscope : LibC::LPWSTR [In],ppkeyname : NCryptKeyName** [In],ppenumstate : Void** [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptEnumKeys(hprovider : LibC::UINT_PTR, pszscope : LibC::LPWSTR, ppkeyname : NCryptKeyName**, ppenumstate : Void**, dwflags : NCRYPT_FLAGS) : Int32

  # Params # pdwprovidercount : UInt32* [In],ppproviderlist : NCryptProviderName** [In],dwflags : UInt32 [In]
  fun NCryptEnumStorageProviders(pdwprovidercount : UInt32*, ppproviderlist : NCryptProviderName**, dwflags : UInt32) : Int32

  # Params # pvinput : Void* [In]
  fun NCryptFreeBuffer(pvinput : Void*) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],phkey : LibC::UINT_PTR* [In],pszkeyname : LibC::LPWSTR [In],dwlegacykeyspec : CERT_KEY_SPEC [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptOpenKey(hprovider : LibC::UINT_PTR, phkey : LibC::UINT_PTR*, pszkeyname : LibC::LPWSTR, dwlegacykeyspec : CERT_KEY_SPEC, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],phkey : LibC::UINT_PTR* [In],pszalgid : LibC::LPWSTR [In],pszkeyname : LibC::LPWSTR [In],dwlegacykeyspec : CERT_KEY_SPEC [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptCreatePersistedKey(hprovider : LibC::UINT_PTR, phkey : LibC::UINT_PTR*, pszalgid : LibC::LPWSTR, pszkeyname : LibC::LPWSTR, dwlegacykeyspec : CERT_KEY_SPEC, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hobject : LibC::UINT_PTR [In],pszproperty : LibC::LPWSTR [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : OBJECT_SECURITY_INFORMATION [In]
  fun NCryptGetProperty(hobject : LibC::UINT_PTR, pszproperty : LibC::LPWSTR, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : OBJECT_SECURITY_INFORMATION) : Int32

  # Params # hobject : LibC::UINT_PTR [In],pszproperty : LibC::LPWSTR [In],pbinput : UInt8* [In],cbinput : UInt32 [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptSetProperty(hobject : LibC::UINT_PTR, pszproperty : LibC::LPWSTR, pbinput : UInt8*, cbinput : UInt32, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptFinalizeKey(hkey : LibC::UINT_PTR, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],pbinput : UInt8* [In],cbinput : UInt32 [In],ppaddinginfo : Void* [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptEncrypt(hkey : LibC::UINT_PTR, pbinput : UInt8*, cbinput : UInt32, ppaddinginfo : Void*, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],pbinput : UInt8* [In],cbinput : UInt32 [In],ppaddinginfo : Void* [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptDecrypt(hkey : LibC::UINT_PTR, pbinput : UInt8*, cbinput : UInt32, ppaddinginfo : Void*, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],himportkey : LibC::UINT_PTR [In],pszblobtype : LibC::LPWSTR [In],pparameterlist : BCryptBufferDesc* [In],phkey : LibC::UINT_PTR* [In],pbdata : UInt8* [In],cbdata : UInt32 [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptImportKey(hprovider : LibC::UINT_PTR, himportkey : LibC::UINT_PTR, pszblobtype : LibC::LPWSTR, pparameterlist : BCryptBufferDesc*, phkey : LibC::UINT_PTR*, pbdata : UInt8*, cbdata : UInt32, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],hexportkey : LibC::UINT_PTR [In],pszblobtype : LibC::LPWSTR [In],pparameterlist : BCryptBufferDesc* [In],pboutput : UInt8* [In],cboutput : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptExportKey(hkey : LibC::UINT_PTR, hexportkey : LibC::UINT_PTR, pszblobtype : LibC::LPWSTR, pparameterlist : BCryptBufferDesc*, pboutput : UInt8*, cboutput : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],ppaddinginfo : Void* [In],pbhashvalue : UInt8* [In],cbhashvalue : UInt32 [In],pbsignature : UInt8* [In],cbsignature : UInt32 [In],pcbresult : UInt32* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptSignHash(hkey : LibC::UINT_PTR, ppaddinginfo : Void*, pbhashvalue : UInt8*, cbhashvalue : UInt32, pbsignature : UInt8*, cbsignature : UInt32, pcbresult : UInt32*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],ppaddinginfo : Void* [In],pbhashvalue : UInt8* [In],cbhashvalue : UInt32 [In],pbsignature : UInt8* [In],cbsignature : UInt32 [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptVerifySignature(hkey : LibC::UINT_PTR, ppaddinginfo : Void*, pbhashvalue : UInt8*, cbhashvalue : UInt32, pbsignature : UInt8*, cbsignature : UInt32, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hkey : LibC::UINT_PTR [In],dwflags : UInt32 [In]
  fun NCryptDeleteKey(hkey : LibC::UINT_PTR, dwflags : UInt32) : Int32

  # Params # hobject : LibC::UINT_PTR [In]
  fun NCryptFreeObject(hobject : LibC::UINT_PTR) : Int32

  # Params # hkey : LibC::UINT_PTR [In]
  fun NCryptIsKeyHandle(hkey : LibC::UINT_PTR) : LibC::BOOL

  # Params # phprovider : LibC::UINT_PTR* [In],phkey : LibC::UINT_PTR* [In],hlegacyprov : LibC::UINT_PTR [In],hlegacykey : LibC::UINT_PTR [In],dwlegacykeyspec : CERT_KEY_SPEC [In],dwflags : UInt32 [In]
  fun NCryptTranslateHandle(phprovider : LibC::UINT_PTR*, phkey : LibC::UINT_PTR*, hlegacyprov : LibC::UINT_PTR, hlegacykey : LibC::UINT_PTR, dwlegacykeyspec : CERT_KEY_SPEC, dwflags : UInt32) : Int32

  # Params # hprovider : LibC::UINT_PTR [In],phevent : LibC::HANDLE* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptNotifyChangeKey(hprovider : LibC::UINT_PTR, phevent : LibC::HANDLE*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hprivkey : LibC::UINT_PTR [In],hpubkey : LibC::UINT_PTR [In],phagreedsecret : LibC::UINT_PTR* [In],dwflags : NCRYPT_FLAGS [In]
  fun NCryptSecretAgreement(hprivkey : LibC::UINT_PTR, hpubkey : LibC::UINT_PTR, phagreedsecret : LibC::UINT_PTR*, dwflags : NCRYPT_FLAGS) : Int32

  # Params # hsharedsecret : LibC::UINT_PTR [In],pwszkdf : LibC::LPWSTR [In],pparameterlist : BCryptBufferDesc* [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun NCryptDeriveKey(hsharedsecret : LibC::UINT_PTR, pwszkdf : LibC::LPWSTR, pparameterlist : BCryptBufferDesc*, pbderivedkey : UInt8*, cbderivedkey : UInt32, pcbresult : UInt32*, dwflags : UInt32) : Int32

  # Params # hkey : LibC::UINT_PTR [In],pparameterlist : BCryptBufferDesc* [In],pbderivedkey : UInt8* [In],cbderivedkey : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun NCryptKeyDerivation(hkey : LibC::UINT_PTR, pparameterlist : BCryptBufferDesc*, pbderivedkey : UInt8*, cbderivedkey : UInt32, pcbresult : UInt32*, dwflags : UInt32) : Int32

  # Params # hsubjectkey : LibC::UINT_PTR [In],hauthoritykey : LibC::UINT_PTR [In],dwclaimtype : UInt32 [In],pparameterlist : BCryptBufferDesc* [In],pbclaimblob : UInt8* [In],cbclaimblob : UInt32 [In],pcbresult : UInt32* [In],dwflags : UInt32 [In]
  fun NCryptCreateClaim(hsubjectkey : LibC::UINT_PTR, hauthoritykey : LibC::UINT_PTR, dwclaimtype : UInt32, pparameterlist : BCryptBufferDesc*, pbclaimblob : UInt8*, cbclaimblob : UInt32, pcbresult : UInt32*, dwflags : UInt32) : Int32

  # Params # hsubjectkey : LibC::UINT_PTR [In],hauthoritykey : LibC::UINT_PTR [In],dwclaimtype : UInt32 [In],pparameterlist : BCryptBufferDesc* [In],pbclaimblob : UInt8* [In],cbclaimblob : UInt32 [In],poutput : BCryptBufferDesc* [In],dwflags : UInt32 [In]
  fun NCryptVerifyClaim(hsubjectkey : LibC::UINT_PTR, hauthoritykey : LibC::UINT_PTR, dwclaimtype : UInt32, pparameterlist : BCryptBufferDesc*, pbclaimblob : UInt8*, cbclaimblob : UInt32, poutput : BCryptBufferDesc*, dwflags : UInt32) : Int32

  # Params # dwcertencodingtype : UInt32 [In],dwformattype : UInt32 [In],dwformatstrtype : UInt32 [In],pformatstruct : Void* [In],lpszstructtype : PSTR [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],pbformat : Void* [In],pcbformat : UInt32* [In]
  fun CryptFormatObject(dwcertencodingtype : UInt32, dwformattype : UInt32, dwformatstrtype : UInt32, pformatstruct : Void*, lpszstructtype : PSTR, pbencoded : UInt8*, cbencoded : UInt32, pbformat : Void*, pcbformat : UInt32*) : LibC::BOOL

  # Params # dwcertencodingtype : CERT_QUERY_ENCODING_TYPE [In],lpszstructtype : PSTR [In],pvstructinfo : Void* [In],dwflags : CRYPT_ENCODE_OBJECT_FLAGS [In],pencodepara : CRYPT_ENCODE_PARA* [In],pvencoded : Void* [In],pcbencoded : UInt32* [In]
  fun CryptEncodeObjectEx(dwcertencodingtype : CERT_QUERY_ENCODING_TYPE, lpszstructtype : PSTR, pvstructinfo : Void*, dwflags : CRYPT_ENCODE_OBJECT_FLAGS, pencodepara : CRYPT_ENCODE_PARA*, pvencoded : Void*, pcbencoded : UInt32*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],lpszstructtype : PSTR [In],pvstructinfo : Void* [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In]
  fun CryptEncodeObject(dwcertencodingtype : UInt32, lpszstructtype : PSTR, pvstructinfo : Void*, pbencoded : UInt8*, pcbencoded : UInt32*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],lpszstructtype : PSTR [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],dwflags : UInt32 [In],pdecodepara : CRYPT_DECODE_PARA* [In],pvstructinfo : Void* [In],pcbstructinfo : UInt32* [In]
  fun CryptDecodeObjectEx(dwcertencodingtype : UInt32, lpszstructtype : PSTR, pbencoded : UInt8*, cbencoded : UInt32, dwflags : UInt32, pdecodepara : CRYPT_DECODE_PARA*, pvstructinfo : Void*, pcbstructinfo : UInt32*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],lpszstructtype : PSTR [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],dwflags : UInt32 [In],pvstructinfo : Void* [In],pcbstructinfo : UInt32* [In]
  fun CryptDecodeObject(dwcertencodingtype : UInt32, lpszstructtype : PSTR, pbencoded : UInt8*, cbencoded : UInt32, dwflags : UInt32, pvstructinfo : Void*, pcbstructinfo : UInt32*) : LibC::BOOL

  # Params # hmodule : HINSTANCE [In],dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],cfuncentry : UInt32 [In],rgfuncentry : CRYPT_OID_FUNC_ENTRY* [In],dwflags : UInt32 [In]
  fun CryptInstallOIDFunctionAddress(hmodule : HINSTANCE, dwencodingtype : UInt32, pszfuncname : PSTR, cfuncentry : UInt32, rgfuncentry : CRYPT_OID_FUNC_ENTRY*, dwflags : UInt32) : LibC::BOOL

  # Params # pszfuncname : PSTR [In],dwflags : UInt32 [In]
  fun CryptInitOIDFunctionSet(pszfuncname : PSTR, dwflags : UInt32) : Void*

  # Params # hfuncset : Void* [In],dwencodingtype : UInt32 [In],pszoid : PSTR [In],dwflags : UInt32 [In],ppvfuncaddr : Void** [In],phfuncaddr : Void** [In]
  fun CryptGetOIDFunctionAddress(hfuncset : Void*, dwencodingtype : UInt32, pszoid : PSTR, dwflags : UInt32, ppvfuncaddr : Void**, phfuncaddr : Void**) : LibC::BOOL

  # Params # hfuncset : Void* [In],dwencodingtype : UInt32 [In],pwszdlllist : Char* [In],pcchdlllist : UInt32* [In]
  fun CryptGetDefaultOIDDllList(hfuncset : Void*, dwencodingtype : UInt32, pwszdlllist : Char*, pcchdlllist : UInt32*) : LibC::BOOL

  # Params # hfuncset : Void* [In],dwencodingtype : UInt32 [In],pwszdll : LibC::LPWSTR [In],dwflags : UInt32 [In],ppvfuncaddr : Void** [In],phfuncaddr : Void** [In]
  fun CryptGetDefaultOIDFunctionAddress(hfuncset : Void*, dwencodingtype : UInt32, pwszdll : LibC::LPWSTR, dwflags : UInt32, ppvfuncaddr : Void**, phfuncaddr : Void**) : LibC::BOOL

  # Params # hfuncaddr : Void* [In],dwflags : UInt32 [In]
  fun CryptFreeOIDFunctionAddress(hfuncaddr : Void*, dwflags : UInt32) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pszoid : PSTR [In],pwszdll : LibC::LPWSTR [In],pszoverridefuncname : PSTR [In]
  fun CryptRegisterOIDFunction(dwencodingtype : UInt32, pszfuncname : PSTR, pszoid : PSTR, pwszdll : LibC::LPWSTR, pszoverridefuncname : PSTR) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pszoid : PSTR [In]
  fun CryptUnregisterOIDFunction(dwencodingtype : UInt32, pszfuncname : PSTR, pszoid : PSTR) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],dwindex : UInt32 [In],pwszdll : LibC::LPWSTR [In]
  fun CryptRegisterDefaultOIDFunction(dwencodingtype : UInt32, pszfuncname : PSTR, dwindex : UInt32, pwszdll : LibC::LPWSTR) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pwszdll : LibC::LPWSTR [In]
  fun CryptUnregisterDefaultOIDFunction(dwencodingtype : UInt32, pszfuncname : PSTR, pwszdll : LibC::LPWSTR) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pszoid : PSTR [In],pwszvaluename : LibC::LPWSTR [In],dwvaluetype : REG_VALUE_TYPE [In],pbvaluedata : UInt8* [In],cbvaluedata : UInt32 [In]
  fun CryptSetOIDFunctionValue(dwencodingtype : UInt32, pszfuncname : PSTR, pszoid : PSTR, pwszvaluename : LibC::LPWSTR, dwvaluetype : REG_VALUE_TYPE, pbvaluedata : UInt8*, cbvaluedata : UInt32) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pszoid : PSTR [In],pwszvaluename : LibC::LPWSTR [In],pdwvaluetype : UInt32* [In],pbvaluedata : UInt8* [In],pcbvaluedata : UInt32* [In]
  fun CryptGetOIDFunctionValue(dwencodingtype : UInt32, pszfuncname : PSTR, pszoid : PSTR, pwszvaluename : LibC::LPWSTR, pdwvaluetype : UInt32*, pbvaluedata : UInt8*, pcbvaluedata : UInt32*) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pszfuncname : PSTR [In],pszoid : PSTR [In],dwflags : UInt32 [In],pvarg : Void* [In],pfnenumoidfunc : PFN_CRYPT_ENUM_OID_FUNC [In]
  fun CryptEnumOIDFunction(dwencodingtype : UInt32, pszfuncname : PSTR, pszoid : PSTR, dwflags : UInt32, pvarg : Void*, pfnenumoidfunc : PFN_CRYPT_ENUM_OID_FUNC) : LibC::BOOL

  # Params # dwkeytype : UInt32 [In],pvkey : Void* [In],dwgroupid : UInt32 [In]
  fun CryptFindOIDInfo(dwkeytype : UInt32, pvkey : Void*, dwgroupid : UInt32) : CRYPT_OID_INFO*

  # Params # pinfo : CRYPT_OID_INFO* [In],dwflags : UInt32 [In]
  fun CryptRegisterOIDInfo(pinfo : CRYPT_OID_INFO*, dwflags : UInt32) : LibC::BOOL

  # Params # pinfo : CRYPT_OID_INFO* [In]
  fun CryptUnregisterOIDInfo(pinfo : CRYPT_OID_INFO*) : LibC::BOOL

  # Params # dwgroupid : UInt32 [In],dwflags : UInt32 [In],pvarg : Void* [In],pfnenumoidinfo : PFN_CRYPT_ENUM_OID_INFO [In]
  fun CryptEnumOIDInfo(dwgroupid : UInt32, dwflags : UInt32, pvarg : Void*, pfnenumoidinfo : PFN_CRYPT_ENUM_OID_INFO) : LibC::BOOL

  # Params # pwszcryptname : LibC::LPWSTR [In]
  fun CryptFindLocalizedName(pwszcryptname : LibC::LPWSTR) : LibC::LPWSTR

  # Params # dwmsgencodingtype : UInt32 [In],dwflags : UInt32 [In],dwmsgtype : CRYPT_MSG_TYPE [In],pvmsgencodeinfo : Void* [In],pszinnercontentobjid : PSTR [In],pstreaminfo : CMSG_STREAM_INFO* [In]
  fun CryptMsgOpenToEncode(dwmsgencodingtype : UInt32, dwflags : UInt32, dwmsgtype : CRYPT_MSG_TYPE, pvmsgencodeinfo : Void*, pszinnercontentobjid : PSTR, pstreaminfo : CMSG_STREAM_INFO*) : Void*

  # Params # dwmsgencodingtype : UInt32 [In],dwflags : UInt32 [In],dwmsgtype : UInt32 [In],pvmsgencodeinfo : Void* [In],pszinnercontentobjid : PSTR [In],cbdata : UInt32 [In]
  fun CryptMsgCalculateEncodedLength(dwmsgencodingtype : UInt32, dwflags : UInt32, dwmsgtype : UInt32, pvmsgencodeinfo : Void*, pszinnercontentobjid : PSTR, cbdata : UInt32) : UInt32

  # Params # dwmsgencodingtype : UInt32 [In],dwflags : UInt32 [In],dwmsgtype : UInt32 [In],hcryptprov : LibC::UINT_PTR [In],precipientinfo : CERT_INFO* [In],pstreaminfo : CMSG_STREAM_INFO* [In]
  fun CryptMsgOpenToDecode(dwmsgencodingtype : UInt32, dwflags : UInt32, dwmsgtype : UInt32, hcryptprov : LibC::UINT_PTR, precipientinfo : CERT_INFO*, pstreaminfo : CMSG_STREAM_INFO*) : Void*

  # Params # hcryptmsg : Void* [In]
  fun CryptMsgDuplicate(hcryptmsg : Void*) : Void*

  # Params # hcryptmsg : Void* [In]
  fun CryptMsgClose(hcryptmsg : Void*) : LibC::BOOL

  # Params # hcryptmsg : Void* [In],pbdata : UInt8* [In],cbdata : UInt32 [In],ffinal : LibC::BOOL [In]
  fun CryptMsgUpdate(hcryptmsg : Void*, pbdata : UInt8*, cbdata : UInt32, ffinal : LibC::BOOL) : LibC::BOOL

  # Params # hcryptmsg : Void* [In],dwparamtype : UInt32 [In],dwindex : UInt32 [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CryptMsgGetParam(hcryptmsg : Void*, dwparamtype : UInt32, dwindex : UInt32, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # hcryptmsg : Void* [In],dwflags : UInt32 [In],dwctrltype : UInt32 [In],pvctrlpara : Void* [In]
  fun CryptMsgControl(hcryptmsg : Void*, dwflags : UInt32, dwctrltype : UInt32, pvctrlpara : Void*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwencodingtype : UInt32 [In],pbsignerinfo : UInt8* [In],cbsignerinfo : UInt32 [In],pbsignerinfocountersignature : UInt8* [In],cbsignerinfocountersignature : UInt32 [In],pcicountersigner : CERT_INFO* [In]
  fun CryptMsgVerifyCountersignatureEncoded(hcryptprov : LibC::UINT_PTR, dwencodingtype : UInt32, pbsignerinfo : UInt8*, cbsignerinfo : UInt32, pbsignerinfocountersignature : UInt8*, cbsignerinfocountersignature : UInt32, pcicountersigner : CERT_INFO*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwencodingtype : UInt32 [In],pbsignerinfo : UInt8* [In],cbsignerinfo : UInt32 [In],pbsignerinfocountersignature : UInt8* [In],cbsignerinfocountersignature : UInt32 [In],dwsignertype : UInt32 [In],pvsigner : Void* [In],dwflags : UInt32 [In],pvextra : Void* [In]
  fun CryptMsgVerifyCountersignatureEncodedEx(hcryptprov : LibC::UINT_PTR, dwencodingtype : UInt32, pbsignerinfo : UInt8*, cbsignerinfo : UInt32, pbsignerinfocountersignature : UInt8*, cbsignerinfocountersignature : UInt32, dwsignertype : UInt32, pvsigner : Void*, dwflags : UInt32, pvextra : Void*) : LibC::BOOL

  # Params # hcryptmsg : Void* [In],dwindex : UInt32 [In],ccountersigners : UInt32 [In],rgcountersigners : CMSG_SIGNER_ENCODE_INFO* [In]
  fun CryptMsgCountersign(hcryptmsg : Void*, dwindex : UInt32, ccountersigners : UInt32, rgcountersigners : CMSG_SIGNER_ENCODE_INFO*) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],pbsignerinfo : UInt8* [In],cbsignerinfo : UInt32 [In],ccountersigners : UInt32 [In],rgcountersigners : CMSG_SIGNER_ENCODE_INFO* [In],pbcountersignature : UInt8* [In],pcbcountersignature : UInt32* [In]
  fun CryptMsgCountersignEncoded(dwencodingtype : UInt32, pbsignerinfo : UInt8*, cbsignerinfo : UInt32, ccountersigners : UInt32, rgcountersigners : CMSG_SIGNER_ENCODE_INFO*, pbcountersignature : UInt8*, pcbcountersignature : UInt32*) : LibC::BOOL

  # Params # lpszstoreprovider : PSTR [In],dwencodingtype : CERT_QUERY_ENCODING_TYPE [In],hcryptprov : LibC::UINT_PTR [In],dwflags : CERT_OPEN_STORE_FLAGS [In],pvpara : Void* [In]
  fun CertOpenStore(lpszstoreprovider : PSTR, dwencodingtype : CERT_QUERY_ENCODING_TYPE, hcryptprov : LibC::UINT_PTR, dwflags : CERT_OPEN_STORE_FLAGS, pvpara : Void*) : Void*

  # Params # hcertstore : Void* [In]
  fun CertDuplicateStore(hcertstore : Void*) : Void*

  # Params # hcertstore : Void* [In],dwencodingtype : CERT_QUERY_ENCODING_TYPE [In],dwsaveas : CERT_STORE_SAVE_AS [In],dwsaveto : CERT_STORE_SAVE_TO [In],pvsavetopara : Void* [In],dwflags : UInt32 [In]
  fun CertSaveStore(hcertstore : Void*, dwencodingtype : CERT_QUERY_ENCODING_TYPE, dwsaveas : CERT_STORE_SAVE_AS, dwsaveto : CERT_STORE_SAVE_TO, pvsavetopara : Void*, dwflags : UInt32) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwflags : UInt32 [In]
  # Commented out because function is part of Lib C
  #fun CertCloseStore(hcertstore : Void*, dwflags : UInt32) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],pcertid : CERT_INFO* [In]
  fun CertGetSubjectCertificateFromStore(hcertstore : Void*, dwcertencodingtype : UInt32, pcertid : CERT_INFO*) : CERT_CONTEXT*

  # Params # hcertstore : Void* [In],pprevcertcontext : CERT_CONTEXT* [In]
  # Commented out because function is part of Lib C
  #fun CertEnumCertificatesInStore(hcertstore : Void*, pprevcertcontext : CERT_CONTEXT*) : CERT_CONTEXT*

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],dwfindflags : UInt32 [In],dwfindtype : CERT_FIND_FLAGS [In],pvfindpara : Void* [In],pprevcertcontext : CERT_CONTEXT* [In]
  fun CertFindCertificateInStore(hcertstore : Void*, dwcertencodingtype : UInt32, dwfindflags : UInt32, dwfindtype : CERT_FIND_FLAGS, pvfindpara : Void*, pprevcertcontext : CERT_CONTEXT*) : CERT_CONTEXT*

  # Params # hcertstore : Void* [In],psubjectcontext : CERT_CONTEXT* [In],pprevissuercontext : CERT_CONTEXT* [In],pdwflags : UInt32* [In]
  fun CertGetIssuerCertificateFromStore(hcertstore : Void*, psubjectcontext : CERT_CONTEXT*, pprevissuercontext : CERT_CONTEXT*, pdwflags : UInt32*) : CERT_CONTEXT*

  # Params # psubject : CERT_CONTEXT* [In],pissuer : CERT_CONTEXT* [In],pdwflags : UInt32* [In]
  fun CertVerifySubjectCertificateContext(psubject : CERT_CONTEXT*, pissuer : CERT_CONTEXT*, pdwflags : UInt32*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In]
  fun CertDuplicateCertificateContext(pcertcontext : CERT_CONTEXT*) : CERT_CONTEXT*

  # Params # dwcertencodingtype : UInt32 [In],pbcertencoded : UInt8* [In],cbcertencoded : UInt32 [In]
  fun CertCreateCertificateContext(dwcertencodingtype : UInt32, pbcertencoded : UInt8*, cbcertencoded : UInt32) : CERT_CONTEXT*

  # Params # pcertcontext : CERT_CONTEXT* [In]
  fun CertFreeCertificateContext(pcertcontext : CERT_CONTEXT*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pvdata : Void* [In]
  fun CertSetCertificateContextProperty(pcertcontext : CERT_CONTEXT*, dwpropid : UInt32, dwflags : UInt32, pvdata : Void*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwpropid : UInt32 [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CertGetCertificateContextProperty(pcertcontext : CERT_CONTEXT*, dwpropid : UInt32, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwpropid : UInt32 [In]
  fun CertEnumCertificateContextProperties(pcertcontext : CERT_CONTEXT*, dwpropid : UInt32) : UInt32

  # Params # pcertcontext : CERT_CONTEXT* [In],coptattr : UInt32 [In],rgoptattr : CRYPT_ATTRIBUTE* [In],dwflags : UInt32 [In],pvreserved : Void* [In],pctlentry : CTL_ENTRY* [In],pcbctlentry : UInt32* [In]
  fun CertCreateCTLEntryFromCertificateContextProperties(pcertcontext : CERT_CONTEXT*, coptattr : UInt32, rgoptattr : CRYPT_ATTRIBUTE*, dwflags : UInt32, pvreserved : Void*, pctlentry : CTL_ENTRY*, pcbctlentry : UInt32*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],pctlentry : CTL_ENTRY* [In],dwflags : UInt32 [In]
  fun CertSetCertificateContextPropertiesFromCTLEntry(pcertcontext : CERT_CONTEXT*, pctlentry : CTL_ENTRY*, dwflags : UInt32) : LibC::BOOL

  # Params # hcertstore : Void* [In],pissuercontext : CERT_CONTEXT* [In],pprevcrlcontext : CRL_CONTEXT* [In],pdwflags : UInt32* [In]
  fun CertGetCRLFromStore(hcertstore : Void*, pissuercontext : CERT_CONTEXT*, pprevcrlcontext : CRL_CONTEXT*, pdwflags : UInt32*) : CRL_CONTEXT*

  # Params # hcertstore : Void* [In],pprevcrlcontext : CRL_CONTEXT* [In]
  fun CertEnumCRLsInStore(hcertstore : Void*, pprevcrlcontext : CRL_CONTEXT*) : CRL_CONTEXT*

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],dwfindflags : UInt32 [In],dwfindtype : UInt32 [In],pvfindpara : Void* [In],pprevcrlcontext : CRL_CONTEXT* [In]
  fun CertFindCRLInStore(hcertstore : Void*, dwcertencodingtype : UInt32, dwfindflags : UInt32, dwfindtype : UInt32, pvfindpara : Void*, pprevcrlcontext : CRL_CONTEXT*) : CRL_CONTEXT*

  # Params # pcrlcontext : CRL_CONTEXT* [In]
  fun CertDuplicateCRLContext(pcrlcontext : CRL_CONTEXT*) : CRL_CONTEXT*

  # Params # dwcertencodingtype : UInt32 [In],pbcrlencoded : UInt8* [In],cbcrlencoded : UInt32 [In]
  fun CertCreateCRLContext(dwcertencodingtype : UInt32, pbcrlencoded : UInt8*, cbcrlencoded : UInt32) : CRL_CONTEXT*

  # Params # pcrlcontext : CRL_CONTEXT* [In]
  fun CertFreeCRLContext(pcrlcontext : CRL_CONTEXT*) : LibC::BOOL

  # Params # pcrlcontext : CRL_CONTEXT* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pvdata : Void* [In]
  fun CertSetCRLContextProperty(pcrlcontext : CRL_CONTEXT*, dwpropid : UInt32, dwflags : UInt32, pvdata : Void*) : LibC::BOOL

  # Params # pcrlcontext : CRL_CONTEXT* [In],dwpropid : UInt32 [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CertGetCRLContextProperty(pcrlcontext : CRL_CONTEXT*, dwpropid : UInt32, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # pcrlcontext : CRL_CONTEXT* [In],dwpropid : UInt32 [In]
  fun CertEnumCRLContextProperties(pcrlcontext : CRL_CONTEXT*, dwpropid : UInt32) : UInt32

  # Params # pcert : CERT_CONTEXT* [In],pcrlcontext : CRL_CONTEXT* [In],dwflags : UInt32 [In],pvreserved : Void* [In],ppcrlentry : CRL_ENTRY** [In]
  fun CertFindCertificateInCRL(pcert : CERT_CONTEXT*, pcrlcontext : CRL_CONTEXT*, dwflags : UInt32, pvreserved : Void*, ppcrlentry : CRL_ENTRY**) : LibC::BOOL

  # Params # pcert : CERT_CONTEXT* [In],pcrl : CRL_CONTEXT* [In],dwflags : UInt32 [In],pvreserved : Void* [In]
  fun CertIsValidCRLForCertificate(pcert : CERT_CONTEXT*, pcrl : CRL_CONTEXT*, dwflags : UInt32, pvreserved : Void*) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],pbcertencoded : UInt8* [In],cbcertencoded : UInt32 [In],dwadddisposition : UInt32 [In],ppcertcontext : CERT_CONTEXT** [In]
  fun CertAddEncodedCertificateToStore(hcertstore : Void*, dwcertencodingtype : UInt32, pbcertencoded : UInt8*, cbcertencoded : UInt32, dwadddisposition : UInt32, ppcertcontext : CERT_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pcertcontext : CERT_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CERT_CONTEXT** [In]
  fun CertAddCertificateContextToStore(hcertstore : Void*, pcertcontext : CERT_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CERT_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pbelement : UInt8* [In],cbelement : UInt32 [In],dwadddisposition : UInt32 [In],dwflags : UInt32 [In],dwcontexttypeflags : UInt32 [In],pdwcontexttype : UInt32* [In],ppvcontext : Void** [In]
  fun CertAddSerializedElementToStore(hcertstore : Void*, pbelement : UInt8*, cbelement : UInt32, dwadddisposition : UInt32, dwflags : UInt32, dwcontexttypeflags : UInt32, pdwcontexttype : UInt32*, ppvcontext : Void**) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In]
  fun CertDeleteCertificateFromStore(pcertcontext : CERT_CONTEXT*) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],pbcrlencoded : UInt8* [In],cbcrlencoded : UInt32 [In],dwadddisposition : UInt32 [In],ppcrlcontext : CRL_CONTEXT** [In]
  fun CertAddEncodedCRLToStore(hcertstore : Void*, dwcertencodingtype : UInt32, pbcrlencoded : UInt8*, cbcrlencoded : UInt32, dwadddisposition : UInt32, ppcrlcontext : CRL_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pcrlcontext : CRL_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CRL_CONTEXT** [In]
  fun CertAddCRLContextToStore(hcertstore : Void*, pcrlcontext : CRL_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CRL_CONTEXT**) : LibC::BOOL

  # Params # pcrlcontext : CRL_CONTEXT* [In]
  fun CertDeleteCRLFromStore(pcrlcontext : CRL_CONTEXT*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwflags : UInt32 [In],pbelement : UInt8* [In],pcbelement : UInt32* [In]
  fun CertSerializeCertificateStoreElement(pcertcontext : CERT_CONTEXT*, dwflags : UInt32, pbelement : UInt8*, pcbelement : UInt32*) : LibC::BOOL

  # Params # pcrlcontext : CRL_CONTEXT* [In],dwflags : UInt32 [In],pbelement : UInt8* [In],pcbelement : UInt32* [In]
  fun CertSerializeCRLStoreElement(pcrlcontext : CRL_CONTEXT*, dwflags : UInt32, pbelement : UInt8*, pcbelement : UInt32*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In]
  fun CertDuplicateCTLContext(pctlcontext : CTL_CONTEXT*) : CTL_CONTEXT*

  # Params # dwmsgandcertencodingtype : UInt32 [In],pbctlencoded : UInt8* [In],cbctlencoded : UInt32 [In]
  fun CertCreateCTLContext(dwmsgandcertencodingtype : UInt32, pbctlencoded : UInt8*, cbctlencoded : UInt32) : CTL_CONTEXT*

  # Params # pctlcontext : CTL_CONTEXT* [In]
  fun CertFreeCTLContext(pctlcontext : CTL_CONTEXT*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pvdata : Void* [In]
  fun CertSetCTLContextProperty(pctlcontext : CTL_CONTEXT*, dwpropid : UInt32, dwflags : UInt32, pvdata : Void*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In],dwpropid : UInt32 [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CertGetCTLContextProperty(pctlcontext : CTL_CONTEXT*, dwpropid : UInt32, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In],dwpropid : UInt32 [In]
  fun CertEnumCTLContextProperties(pctlcontext : CTL_CONTEXT*, dwpropid : UInt32) : UInt32

  # Params # hcertstore : Void* [In],pprevctlcontext : CTL_CONTEXT* [In]
  fun CertEnumCTLsInStore(hcertstore : Void*, pprevctlcontext : CTL_CONTEXT*) : CTL_CONTEXT*

  # Params # dwencodingtype : UInt32 [In],dwsubjecttype : UInt32 [In],pvsubject : Void* [In],pctlcontext : CTL_CONTEXT* [In],dwflags : UInt32 [In]
  fun CertFindSubjectInCTL(dwencodingtype : UInt32, dwsubjecttype : UInt32, pvsubject : Void*, pctlcontext : CTL_CONTEXT*, dwflags : UInt32) : CTL_ENTRY*

  # Params # hcertstore : Void* [In],dwmsgandcertencodingtype : UInt32 [In],dwfindflags : UInt32 [In],dwfindtype : CERT_FIND_TYPE [In],pvfindpara : Void* [In],pprevctlcontext : CTL_CONTEXT* [In]
  fun CertFindCTLInStore(hcertstore : Void*, dwmsgandcertencodingtype : UInt32, dwfindflags : UInt32, dwfindtype : CERT_FIND_TYPE, pvfindpara : Void*, pprevctlcontext : CTL_CONTEXT*) : CTL_CONTEXT*

  # Params # hcertstore : Void* [In],dwmsgandcertencodingtype : UInt32 [In],pbctlencoded : UInt8* [In],cbctlencoded : UInt32 [In],dwadddisposition : UInt32 [In],ppctlcontext : CTL_CONTEXT** [In]
  fun CertAddEncodedCTLToStore(hcertstore : Void*, dwmsgandcertencodingtype : UInt32, pbctlencoded : UInt8*, cbctlencoded : UInt32, dwadddisposition : UInt32, ppctlcontext : CTL_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pctlcontext : CTL_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CTL_CONTEXT** [In]
  fun CertAddCTLContextToStore(hcertstore : Void*, pctlcontext : CTL_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CTL_CONTEXT**) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In],dwflags : UInt32 [In],pbelement : UInt8* [In],pcbelement : UInt32* [In]
  fun CertSerializeCTLStoreElement(pctlcontext : CTL_CONTEXT*, dwflags : UInt32, pbelement : UInt8*, pcbelement : UInt32*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In]
  fun CertDeleteCTLFromStore(pctlcontext : CTL_CONTEXT*) : LibC::BOOL

  # Params # hcertstore : Void* [In],pcertcontext : CERT_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CERT_CONTEXT** [In]
  fun CertAddCertificateLinkToStore(hcertstore : Void*, pcertcontext : CERT_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CERT_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pcrlcontext : CRL_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CRL_CONTEXT** [In]
  fun CertAddCRLLinkToStore(hcertstore : Void*, pcrlcontext : CRL_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CRL_CONTEXT**) : LibC::BOOL

  # Params # hcertstore : Void* [In],pctlcontext : CTL_CONTEXT* [In],dwadddisposition : UInt32 [In],ppstorecontext : CTL_CONTEXT** [In]
  fun CertAddCTLLinkToStore(hcertstore : Void*, pctlcontext : CTL_CONTEXT*, dwadddisposition : UInt32, ppstorecontext : CTL_CONTEXT**) : LibC::BOOL

  # Params # hcollectionstore : Void* [In],hsiblingstore : Void* [In],dwupdateflags : UInt32 [In],dwpriority : UInt32 [In]
  fun CertAddStoreToCollection(hcollectionstore : Void*, hsiblingstore : Void*, dwupdateflags : UInt32, dwpriority : UInt32) : LibC::BOOL

  # Params # hcollectionstore : Void* [In],hsiblingstore : Void* [In]
  fun CertRemoveStoreFromCollection(hcollectionstore : Void*, hsiblingstore : Void*)

  # Params # hcertstore : Void* [In],dwflags : CERT_CONTROL_STORE_FLAGS [In],dwctrltype : UInt32 [In],pvctrlpara : Void* [In]
  fun CertControlStore(hcertstore : Void*, dwflags : CERT_CONTROL_STORE_FLAGS, dwctrltype : UInt32, pvctrlpara : Void*) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pvdata : Void* [In]
  fun CertSetStoreProperty(hcertstore : Void*, dwpropid : UInt32, dwflags : UInt32, pvdata : Void*) : LibC::BOOL

  # Params # hcertstore : Void* [In],dwpropid : UInt32 [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CertGetStoreProperty(hcertstore : Void*, dwpropid : UInt32, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # dwcontexttype : UInt32 [In],dwencodingtype : UInt32 [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],dwflags : UInt32 [In],pcreatepara : CERT_CREATE_CONTEXT_PARA* [In]
  fun CertCreateContext(dwcontexttype : UInt32, dwencodingtype : UInt32, pbencoded : UInt8*, cbencoded : UInt32, dwflags : UInt32, pcreatepara : CERT_CREATE_CONTEXT_PARA*) : Void*

  # Params # pvsystemstore : Void* [In],dwflags : UInt32 [In],pstoreinfo : CERT_SYSTEM_STORE_INFO* [In],pvreserved : Void* [In]
  fun CertRegisterSystemStore(pvsystemstore : Void*, dwflags : UInt32, pstoreinfo : CERT_SYSTEM_STORE_INFO*, pvreserved : Void*) : LibC::BOOL

  # Params # pvsystemstore : Void* [In],dwflags : UInt32 [In],pwszstorename : LibC::LPWSTR [In],pstoreinfo : CERT_PHYSICAL_STORE_INFO* [In],pvreserved : Void* [In]
  fun CertRegisterPhysicalStore(pvsystemstore : Void*, dwflags : UInt32, pwszstorename : LibC::LPWSTR, pstoreinfo : CERT_PHYSICAL_STORE_INFO*, pvreserved : Void*) : LibC::BOOL

  # Params # pvsystemstore : Void* [In],dwflags : UInt32 [In]
  fun CertUnregisterSystemStore(pvsystemstore : Void*, dwflags : UInt32) : LibC::BOOL

  # Params # pvsystemstore : Void* [In],dwflags : UInt32 [In],pwszstorename : LibC::LPWSTR [In]
  fun CertUnregisterPhysicalStore(pvsystemstore : Void*, dwflags : UInt32, pwszstorename : LibC::LPWSTR) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pvarg : Void* [In],pfnenum : PFN_CERT_ENUM_SYSTEM_STORE_LOCATION [In]
  fun CertEnumSystemStoreLocation(dwflags : UInt32, pvarg : Void*, pfnenum : PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pvsystemstorelocationpara : Void* [In],pvarg : Void* [In],pfnenum : PFN_CERT_ENUM_SYSTEM_STORE [In]
  fun CertEnumSystemStore(dwflags : UInt32, pvsystemstorelocationpara : Void*, pvarg : Void*, pfnenum : PFN_CERT_ENUM_SYSTEM_STORE) : LibC::BOOL

  # Params # pvsystemstore : Void* [In],dwflags : UInt32 [In],pvarg : Void* [In],pfnenum : PFN_CERT_ENUM_PHYSICAL_STORE [In]
  fun CertEnumPhysicalStore(pvsystemstore : Void*, dwflags : UInt32, pvarg : Void*, pfnenum : PFN_CERT_ENUM_PHYSICAL_STORE) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwflags : UInt32 [In],pusage : CTL_USAGE* [In],pcbusage : UInt32* [In]
  # Commented out because function is part of Lib C
  #fun CertGetEnhancedKeyUsage(pcertcontext : CERT_CONTEXT*, dwflags : UInt32, pusage : CTL_USAGE*, pcbusage : UInt32*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],pusage : CTL_USAGE* [In]
  fun CertSetEnhancedKeyUsage(pcertcontext : CERT_CONTEXT*, pusage : CTL_USAGE*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],pszusageidentifier : PSTR [In]
  fun CertAddEnhancedKeyUsageIdentifier(pcertcontext : CERT_CONTEXT*, pszusageidentifier : PSTR) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],pszusageidentifier : PSTR [In]
  fun CertRemoveEnhancedKeyUsageIdentifier(pcertcontext : CERT_CONTEXT*, pszusageidentifier : PSTR) : LibC::BOOL

  # Params # ccerts : UInt32 [In],rghcerts : CERT_CONTEXT** [In],cnumoids : Int32* [In],rghoids : PSTR* [In],pcboids : UInt32* [In]
  fun CertGetValidUsages(ccerts : UInt32, rghcerts : CERT_CONTEXT**, cnumoids : Int32*, rghoids : PSTR*, pcboids : UInt32*) : LibC::BOOL

  # Params # hcryptmsg : Void* [In],csignerstore : UInt32 [In],rghsignerstore : Void** [In],dwflags : UInt32 [In],ppsigner : CERT_CONTEXT** [In],pdwsignerindex : UInt32* [In]
  fun CryptMsgGetAndVerifySigner(hcryptmsg : Void*, csignerstore : UInt32, rghsignerstore : Void**, dwflags : UInt32, ppsigner : CERT_CONTEXT**, pdwsignerindex : UInt32*) : LibC::BOOL

  # Params # dwmsgencodingtype : UInt32 [In],pbctlcontent : UInt8* [In],cbctlcontent : UInt32 [In],psigninfo : CMSG_SIGNED_ENCODE_INFO* [In],dwflags : UInt32 [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In]
  fun CryptMsgSignCTL(dwmsgencodingtype : UInt32, pbctlcontent : UInt8*, cbctlcontent : UInt32, psigninfo : CMSG_SIGNED_ENCODE_INFO*, dwflags : UInt32, pbencoded : UInt8*, pcbencoded : UInt32*) : LibC::BOOL

  # Params # dwmsgencodingtype : UInt32 [In],pctlinfo : CTL_INFO* [In],psigninfo : CMSG_SIGNED_ENCODE_INFO* [In],dwflags : UInt32 [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In]
  fun CryptMsgEncodeAndSignCTL(dwmsgencodingtype : UInt32, pctlinfo : CTL_INFO*, psigninfo : CMSG_SIGNED_ENCODE_INFO*, dwflags : UInt32, pbencoded : UInt8*, pcbencoded : UInt32*) : LibC::BOOL

  # Params # psubjectidentifier : CRYPTOAPI_BLOB* [In],pctlcontext : CTL_CONTEXT* [In],dwflags : UInt32 [In],pvreserved : Void* [In],pencodedattributes : CRYPTOAPI_BLOB* [In]
  fun CertFindSubjectInSortedCTL(psubjectidentifier : CRYPTOAPI_BLOB*, pctlcontext : CTL_CONTEXT*, dwflags : UInt32, pvreserved : Void*, pencodedattributes : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # pctlcontext : CTL_CONTEXT* [In],ppvnextsubject : Void** [In],psubjectidentifier : CRYPTOAPI_BLOB* [In],pencodedattributes : CRYPTOAPI_BLOB* [In]
  fun CertEnumSubjectInSortedCTL(pctlcontext : CTL_CONTEXT*, ppvnextsubject : Void**, psubjectidentifier : CRYPTOAPI_BLOB*, pencodedattributes : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],dwsubjecttype : UInt32 [In],pvsubject : Void* [In],psubjectusage : CTL_USAGE* [In],dwflags : UInt32 [In],pverifyusagepara : CTL_VERIFY_USAGE_PARA* [In],pverifyusagestatus : CTL_VERIFY_USAGE_STATUS* [In]
  fun CertVerifyCTLUsage(dwencodingtype : UInt32, dwsubjecttype : UInt32, pvsubject : Void*, psubjectusage : CTL_USAGE*, dwflags : UInt32, pverifyusagepara : CTL_VERIFY_USAGE_PARA*, pverifyusagestatus : CTL_VERIFY_USAGE_STATUS*) : LibC::BOOL

  # Params # dwencodingtype : UInt32 [In],dwrevtype : UInt32 [In],ccontext : UInt32 [In],rgpvcontext : Void** [In],dwflags : UInt32 [In],prevpara : CERT_REVOCATION_PARA* [In],prevstatus : CERT_REVOCATION_STATUS* [In]
  fun CertVerifyRevocation(dwencodingtype : UInt32, dwrevtype : UInt32, ccontext : UInt32, rgpvcontext : Void**, dwflags : UInt32, prevpara : CERT_REVOCATION_PARA*, prevstatus : CERT_REVOCATION_STATUS*) : LibC::BOOL

  # Params # pint1 : CRYPTOAPI_BLOB* [In],pint2 : CRYPTOAPI_BLOB* [In]
  fun CertCompareIntegerBlob(pint1 : CRYPTOAPI_BLOB*, pint2 : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pcertid1 : CERT_INFO* [In],pcertid2 : CERT_INFO* [In]
  fun CertCompareCertificate(dwcertencodingtype : UInt32, pcertid1 : CERT_INFO*, pcertid2 : CERT_INFO*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pcertname1 : CRYPTOAPI_BLOB* [In],pcertname2 : CRYPTOAPI_BLOB* [In]
  fun CertCompareCertificateName(dwcertencodingtype : UInt32, pcertname1 : CRYPTOAPI_BLOB*, pcertname2 : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],dwflags : UInt32 [In],pcertname : CRYPTOAPI_BLOB* [In],prdn : CERT_RDN* [In]
  fun CertIsRDNAttrsInCertificateName(dwcertencodingtype : UInt32, dwflags : UInt32, pcertname : CRYPTOAPI_BLOB*, prdn : CERT_RDN*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],ppublickey1 : CERT_PUBLIC_KEY_INFO* [In],ppublickey2 : CERT_PUBLIC_KEY_INFO* [In]
  fun CertComparePublicKeyInfo(dwcertencodingtype : UInt32, ppublickey1 : CERT_PUBLIC_KEY_INFO*, ppublickey2 : CERT_PUBLIC_KEY_INFO*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],ppublickey : CERT_PUBLIC_KEY_INFO* [In]
  fun CertGetPublicKeyLength(dwcertencodingtype : UInt32, ppublickey : CERT_PUBLIC_KEY_INFO*) : UInt32

  # Params # hcryptprov : LibC::UINT_PTR [In],dwcertencodingtype : UInt32 [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],ppublickey : CERT_PUBLIC_KEY_INFO* [In]
  fun CryptVerifyCertificateSignature(hcryptprov : LibC::UINT_PTR, dwcertencodingtype : UInt32, pbencoded : UInt8*, cbencoded : UInt32, ppublickey : CERT_PUBLIC_KEY_INFO*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwcertencodingtype : UInt32 [In],dwsubjecttype : UInt32 [In],pvsubject : Void* [In],dwissuertype : UInt32 [In],pvissuer : Void* [In],dwflags : CRYPT_VERIFY_CERT_FLAGS [In],pvextra : Void* [In]
  fun CryptVerifyCertificateSignatureEx(hcryptprov : LibC::UINT_PTR, dwcertencodingtype : UInt32, dwsubjecttype : UInt32, pvsubject : Void*, dwissuertype : UInt32, pvissuer : Void*, dwflags : CRYPT_VERIFY_CERT_FLAGS, pvextra : Void*) : LibC::BOOL

  # Params # pstrongsignpara : CERT_STRONG_SIGN_PARA* [In],pwszcnghashalgid : LibC::LPWSTR [In],psigningcert : CERT_CONTEXT* [In]
  fun CertIsStrongHashToSign(pstrongsignpara : CERT_STRONG_SIGN_PARA*, pwszcnghashalgid : LibC::LPWSTR, psigningcert : CERT_CONTEXT*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwcertencodingtype : UInt32 [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptHashToBeSigned(hcryptprov : LibC::UINT_PTR, dwcertencodingtype : UInt32, pbencoded : UInt8*, cbencoded : UInt32, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],algid : UInt32 [In],dwflags : UInt32 [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptHashCertificate(hcryptprov : LibC::UINT_PTR, algid : UInt32, dwflags : UInt32, pbencoded : UInt8*, cbencoded : UInt32, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # pwszcnghashalgid : LibC::LPWSTR [In],dwflags : UInt32 [In],pvreserved : Void* [In],pbencoded : UInt8* [In],cbencoded : UInt32 [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptHashCertificate2(pwszcnghashalgid : LibC::LPWSTR, dwflags : UInt32, pvreserved : Void*, pbencoded : UInt8*, cbencoded : UInt32, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # hcryptprovorncryptkey : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],dwcertencodingtype : UInt32 [In],pbencodedtobesigned : UInt8* [In],cbencodedtobesigned : UInt32 [In],psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER* [In],pvhashauxinfo : Void* [In],pbsignature : UInt8* [In],pcbsignature : UInt32* [In]
  fun CryptSignCertificate(hcryptprovorncryptkey : LibC::UINT_PTR, dwkeyspec : UInt32, dwcertencodingtype : UInt32, pbencodedtobesigned : UInt8*, cbencodedtobesigned : UInt32, psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pvhashauxinfo : Void*, pbsignature : UInt8*, pcbsignature : UInt32*) : LibC::BOOL

  # Params # hcryptprovorncryptkey : LibC::UINT_PTR [In],dwkeyspec : CERT_KEY_SPEC [In],dwcertencodingtype : UInt32 [In],lpszstructtype : PSTR [In],pvstructinfo : Void* [In],psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER* [In],pvhashauxinfo : Void* [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In]
  fun CryptSignAndEncodeCertificate(hcryptprovorncryptkey : LibC::UINT_PTR, dwkeyspec : CERT_KEY_SPEC, dwcertencodingtype : UInt32, lpszstructtype : PSTR, pvstructinfo : Void*, psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pvhashauxinfo : Void*, pbencoded : UInt8*, pcbencoded : UInt32*) : LibC::BOOL

  # Params # ptimetoverify : FILETIME* [In],pcertinfo : CERT_INFO* [In]
  fun CertVerifyTimeValidity(ptimetoverify : FILETIME*, pcertinfo : CERT_INFO*) : Int32

  # Params # ptimetoverify : FILETIME* [In],pcrlinfo : CRL_INFO* [In]
  fun CertVerifyCRLTimeValidity(ptimetoverify : FILETIME*, pcrlinfo : CRL_INFO*) : Int32

  # Params # psubjectinfo : CERT_INFO* [In],pissuerinfo : CERT_INFO* [In]
  fun CertVerifyValidityNesting(psubjectinfo : CERT_INFO*, pissuerinfo : CERT_INFO*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pcertid : CERT_INFO* [In],ccrlinfo : UInt32 [In],rgpcrlinfo : CRL_INFO** [In]
  fun CertVerifyCRLRevocation(dwcertencodingtype : UInt32, pcertid : CERT_INFO*, ccrlinfo : UInt32, rgpcrlinfo : CRL_INFO**) : LibC::BOOL

  # Params # dwalgid : UInt32 [In]
  fun CertAlgIdToOID(dwalgid : UInt32) : PSTR

  # Params # pszobjid : PSTR [In]
  fun CertOIDToAlgId(pszobjid : PSTR) : UInt32

  # Params # pszobjid : PSTR [In],cextensions : UInt32 [In],rgextensions : CERT_EXTENSION* [In]
  fun CertFindExtension(pszobjid : PSTR, cextensions : UInt32, rgextensions : CERT_EXTENSION*) : CERT_EXTENSION*

  # Params # pszobjid : PSTR [In],cattr : UInt32 [In],rgattr : CRYPT_ATTRIBUTE* [In]
  fun CertFindAttribute(pszobjid : PSTR, cattr : UInt32, rgattr : CRYPT_ATTRIBUTE*) : CRYPT_ATTRIBUTE*

  # Params # pszobjid : PSTR [In],pname : CERT_NAME_INFO* [In]
  fun CertFindRDNAttr(pszobjid : PSTR, pname : CERT_NAME_INFO*) : CERT_RDN_ATTR*

  # Params # dwcertencodingtype : UInt32 [In],pcertinfo : CERT_INFO* [In],pbkeyusage : UInt8* [In],cbkeyusage : UInt32 [In]
  fun CertGetIntendedKeyUsage(dwcertencodingtype : UInt32, pcertinfo : CERT_INFO*, pbkeyusage : UInt8*, cbkeyusage : UInt32) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwdefaulttype : CRYPT_DEFAULT_CONTEXT_TYPE [In],pvdefaultpara : Void* [In],dwflags : CRYPT_DEFAULT_CONTEXT_FLAGS [In],pvreserved : Void* [In],phdefaultcontext : Void** [In]
  fun CryptInstallDefaultContext(hcryptprov : LibC::UINT_PTR, dwdefaulttype : CRYPT_DEFAULT_CONTEXT_TYPE, pvdefaultpara : Void*, dwflags : CRYPT_DEFAULT_CONTEXT_FLAGS, pvreserved : Void*, phdefaultcontext : Void**) : LibC::BOOL

  # Params # hdefaultcontext : Void* [In],dwflags : UInt32 [In],pvreserved : Void* [In]
  fun CryptUninstallDefaultContext(hdefaultcontext : Void*, dwflags : UInt32, pvreserved : Void*) : LibC::BOOL

  # Params # hcryptprovorncryptkey : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],dwcertencodingtype : UInt32 [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],pcbinfo : UInt32* [In]
  fun CryptExportPublicKeyInfo(hcryptprovorncryptkey : LibC::UINT_PTR, dwkeyspec : UInt32, dwcertencodingtype : UInt32, pinfo : CERT_PUBLIC_KEY_INFO*, pcbinfo : UInt32*) : LibC::BOOL

  # Params # hcryptprovorncryptkey : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],dwcertencodingtype : UInt32 [In],pszpublickeyobjid : PSTR [In],dwflags : UInt32 [In],pvauxinfo : Void* [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],pcbinfo : UInt32* [In]
  fun CryptExportPublicKeyInfoEx(hcryptprovorncryptkey : LibC::UINT_PTR, dwkeyspec : UInt32, dwcertencodingtype : UInt32, pszpublickeyobjid : PSTR, dwflags : UInt32, pvauxinfo : Void*, pinfo : CERT_PUBLIC_KEY_INFO*, pcbinfo : UInt32*) : LibC::BOOL

  # Params # hbcryptkey : BCRYPT_KEY_HANDLE [In],dwcertencodingtype : UInt32 [In],pszpublickeyobjid : PSTR [In],dwflags : UInt32 [In],pvauxinfo : Void* [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],pcbinfo : UInt32* [In]
  fun CryptExportPublicKeyInfoFromBCryptKeyHandle(hbcryptkey : BCRYPT_KEY_HANDLE, dwcertencodingtype : UInt32, pszpublickeyobjid : PSTR, dwflags : UInt32, pvauxinfo : Void*, pinfo : CERT_PUBLIC_KEY_INFO*, pcbinfo : UInt32*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwcertencodingtype : UInt32 [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],phkey : LibC::UINT_PTR* [In]
  fun CryptImportPublicKeyInfo(hcryptprov : LibC::UINT_PTR, dwcertencodingtype : UInt32, pinfo : CERT_PUBLIC_KEY_INFO*, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwcertencodingtype : UInt32 [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],aikeyalg : UInt32 [In],dwflags : UInt32 [In],pvauxinfo : Void* [In],phkey : LibC::UINT_PTR* [In]
  fun CryptImportPublicKeyInfoEx(hcryptprov : LibC::UINT_PTR, dwcertencodingtype : UInt32, pinfo : CERT_PUBLIC_KEY_INFO*, aikeyalg : UInt32, dwflags : UInt32, pvauxinfo : Void*, phkey : LibC::UINT_PTR*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],dwflags : CRYPT_IMPORT_PUBLIC_KEY_FLAGS [In],pvauxinfo : Void* [In],phkey : BCRYPT_KEY_HANDLE* [In]
  fun CryptImportPublicKeyInfoEx2(dwcertencodingtype : UInt32, pinfo : CERT_PUBLIC_KEY_INFO*, dwflags : CRYPT_IMPORT_PUBLIC_KEY_FLAGS, pvauxinfo : Void*, phkey : BCRYPT_KEY_HANDLE*) : LibC::BOOL

  # Params # pcert : CERT_CONTEXT* [In],dwflags : CRYPT_ACQUIRE_FLAGS [In],pvparameters : Void* [In],phcryptprovorncryptkey : LibC::UINT_PTR* [In],pdwkeyspec : CERT_KEY_SPEC* [In],pfcallerfreeprovorncryptkey : LibC::BOOL* [In]
  fun CryptAcquireCertificatePrivateKey(pcert : CERT_CONTEXT*, dwflags : CRYPT_ACQUIRE_FLAGS, pvparameters : Void*, phcryptprovorncryptkey : LibC::UINT_PTR*, pdwkeyspec : CERT_KEY_SPEC*, pfcallerfreeprovorncryptkey : LibC::BOOL*) : LibC::BOOL

  # Params # pcert : CERT_CONTEXT* [In],dwflags : CRYPT_FIND_FLAGS [In],pvreserved : Void* [In]
  fun CryptFindCertificateKeyProvInfo(pcert : CERT_CONTEXT*, dwflags : CRYPT_FIND_FLAGS, pvreserved : Void*) : LibC::BOOL

  # Params # sprivatekeyandparams : CRYPT_PKCS8_IMPORT_PARAMS [In],dwflags : CRYPT_KEY_FLAGS [In],phcryptprov : LibC::UINT_PTR* [In],pvauxinfo : Void* [In]
  fun CryptImportPKCS8(sprivatekeyandparams : CRYPT_PKCS8_IMPORT_PARAMS, dwflags : CRYPT_KEY_FLAGS, phcryptprov : LibC::UINT_PTR*, pvauxinfo : Void*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],dwkeyspec : UInt32 [In],pszprivatekeyobjid : PSTR [In],dwflags : UInt32 [In],pvauxinfo : Void* [In],pbprivatekeyblob : UInt8* [In],pcbprivatekeyblob : UInt32* [In]
  fun CryptExportPKCS8(hcryptprov : LibC::UINT_PTR, dwkeyspec : UInt32, pszprivatekeyobjid : PSTR, dwflags : UInt32, pvauxinfo : Void*, pbprivatekeyblob : UInt8*, pcbprivatekeyblob : UInt32*) : LibC::BOOL

  # Params # hcryptprov : LibC::UINT_PTR [In],algid : UInt32 [In],dwflags : UInt32 [In],dwcertencodingtype : UInt32 [In],pinfo : CERT_PUBLIC_KEY_INFO* [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptHashPublicKeyInfo(hcryptprov : LibC::UINT_PTR, algid : UInt32, dwflags : UInt32, dwcertencodingtype : UInt32, pinfo : CERT_PUBLIC_KEY_INFO*, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # dwvaluetype : UInt32 [In],pvalue : CRYPTOAPI_BLOB* [In],psz : UInt8* [In],csz : UInt32 [In]
  fun CertRDNValueToStrA(dwvaluetype : UInt32, pvalue : CRYPTOAPI_BLOB*, psz : UInt8*, csz : UInt32) : UInt32

  # Params # dwvaluetype : UInt32 [In],pvalue : CRYPTOAPI_BLOB* [In],psz : Char* [In],csz : UInt32 [In]
  fun CertRDNValueToStrW(dwvaluetype : UInt32, pvalue : CRYPTOAPI_BLOB*, psz : Char*, csz : UInt32) : UInt32

  # Params # dwcertencodingtype : UInt32 [In],pname : CRYPTOAPI_BLOB* [In],dwstrtype : CERT_STRING_TYPE [In],psz : UInt8* [In],csz : UInt32 [In]
  fun CertNameToStrA(dwcertencodingtype : UInt32, pname : CRYPTOAPI_BLOB*, dwstrtype : CERT_STRING_TYPE, psz : UInt8*, csz : UInt32) : UInt32

  # Params # dwcertencodingtype : UInt32 [In],pname : CRYPTOAPI_BLOB* [In],dwstrtype : CERT_STRING_TYPE [In],psz : Char* [In],csz : UInt32 [In]
  fun CertNameToStrW(dwcertencodingtype : UInt32, pname : CRYPTOAPI_BLOB*, dwstrtype : CERT_STRING_TYPE, psz : Char*, csz : UInt32) : UInt32

  # Params # dwcertencodingtype : UInt32 [In],pszx500 : PSTR [In],dwstrtype : CERT_STRING_TYPE [In],pvreserved : Void* [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In],ppszerror : PSTR* [In]
  fun CertStrToNameA(dwcertencodingtype : UInt32, pszx500 : PSTR, dwstrtype : CERT_STRING_TYPE, pvreserved : Void*, pbencoded : UInt8*, pcbencoded : UInt32*, ppszerror : PSTR*) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pszx500 : LibC::LPWSTR [In],dwstrtype : CERT_STRING_TYPE [In],pvreserved : Void* [In],pbencoded : UInt8* [In],pcbencoded : UInt32* [In],ppszerror : LibC::LPWSTR* [In]
  fun CertStrToNameW(dwcertencodingtype : UInt32, pszx500 : LibC::LPWSTR, dwstrtype : CERT_STRING_TYPE, pvreserved : Void*, pbencoded : UInt8*, pcbencoded : UInt32*, ppszerror : LibC::LPWSTR*) : LibC::BOOL

  # Params # pcertcontext : CERT_CONTEXT* [In],dwtype : UInt32 [In],dwflags : UInt32 [In],pvtypepara : Void* [In],psznamestring : UInt8* [In],cchnamestring : UInt32 [In]
  fun CertGetNameStringA(pcertcontext : CERT_CONTEXT*, dwtype : UInt32, dwflags : UInt32, pvtypepara : Void*, psznamestring : UInt8*, cchnamestring : UInt32) : UInt32

  # Params # pcertcontext : CERT_CONTEXT* [In],dwtype : UInt32 [In],dwflags : UInt32 [In],pvtypepara : Void* [In],psznamestring : Char* [In],cchnamestring : UInt32 [In]
  fun CertGetNameStringW(pcertcontext : CERT_CONTEXT*, dwtype : UInt32, dwflags : UInt32, pvtypepara : Void*, psznamestring : Char*, cchnamestring : UInt32) : UInt32

  # Params # psignpara : CRYPT_SIGN_MESSAGE_PARA* [In],fdetachedsignature : LibC::BOOL [In],ctobesigned : UInt32 [In],rgpbtobesigned : UInt8** [In],rgcbtobesigned : UInt32* [In],pbsignedblob : UInt8* [In],pcbsignedblob : UInt32* [In]
  fun CryptSignMessage(psignpara : CRYPT_SIGN_MESSAGE_PARA*, fdetachedsignature : LibC::BOOL, ctobesigned : UInt32, rgpbtobesigned : UInt8**, rgcbtobesigned : UInt32*, pbsignedblob : UInt8*, pcbsignedblob : UInt32*) : LibC::BOOL

  # Params # pverifypara : CRYPT_VERIFY_MESSAGE_PARA* [In],dwsignerindex : UInt32 [In],pbsignedblob : UInt8* [In],cbsignedblob : UInt32 [In],pbdecoded : UInt8* [In],pcbdecoded : UInt32* [In],ppsignercert : CERT_CONTEXT** [In]
  fun CryptVerifyMessageSignature(pverifypara : CRYPT_VERIFY_MESSAGE_PARA*, dwsignerindex : UInt32, pbsignedblob : UInt8*, cbsignedblob : UInt32, pbdecoded : UInt8*, pcbdecoded : UInt32*, ppsignercert : CERT_CONTEXT**) : LibC::BOOL

  # Params # dwmsgencodingtype : UInt32 [In],pbsignedblob : UInt8* [In],cbsignedblob : UInt32 [In]
  fun CryptGetMessageSignerCount(dwmsgencodingtype : UInt32, pbsignedblob : UInt8*, cbsignedblob : UInt32) : Int32

  # Params # dwmsgandcertencodingtype : UInt32 [In],hcryptprov : LibC::UINT_PTR [In],dwflags : UInt32 [In],pbsignedblob : UInt8* [In],cbsignedblob : UInt32 [In]
  fun CryptGetMessageCertificates(dwmsgandcertencodingtype : UInt32, hcryptprov : LibC::UINT_PTR, dwflags : UInt32, pbsignedblob : UInt8*, cbsignedblob : UInt32) : Void*

  # Params # pverifypara : CRYPT_VERIFY_MESSAGE_PARA* [In],dwsignerindex : UInt32 [In],pbdetachedsignblob : UInt8* [In],cbdetachedsignblob : UInt32 [In],ctobesigned : UInt32 [In],rgpbtobesigned : UInt8** [In],rgcbtobesigned : UInt32* [In],ppsignercert : CERT_CONTEXT** [In]
  fun CryptVerifyDetachedMessageSignature(pverifypara : CRYPT_VERIFY_MESSAGE_PARA*, dwsignerindex : UInt32, pbdetachedsignblob : UInt8*, cbdetachedsignblob : UInt32, ctobesigned : UInt32, rgpbtobesigned : UInt8**, rgcbtobesigned : UInt32*, ppsignercert : CERT_CONTEXT**) : LibC::BOOL

  # Params # pencryptpara : CRYPT_ENCRYPT_MESSAGE_PARA* [In],crecipientcert : UInt32 [In],rgprecipientcert : CERT_CONTEXT** [In],pbtobeencrypted : UInt8* [In],cbtobeencrypted : UInt32 [In],pbencryptedblob : UInt8* [In],pcbencryptedblob : UInt32* [In]
  fun CryptEncryptMessage(pencryptpara : CRYPT_ENCRYPT_MESSAGE_PARA*, crecipientcert : UInt32, rgprecipientcert : CERT_CONTEXT**, pbtobeencrypted : UInt8*, cbtobeencrypted : UInt32, pbencryptedblob : UInt8*, pcbencryptedblob : UInt32*) : LibC::BOOL

  # Params # pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA* [In],pbencryptedblob : UInt8* [In],cbencryptedblob : UInt32 [In],pbdecrypted : UInt8* [In],pcbdecrypted : UInt32* [In],ppxchgcert : CERT_CONTEXT** [In]
  fun CryptDecryptMessage(pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA*, pbencryptedblob : UInt8*, cbencryptedblob : UInt32, pbdecrypted : UInt8*, pcbdecrypted : UInt32*, ppxchgcert : CERT_CONTEXT**) : LibC::BOOL

  # Params # psignpara : CRYPT_SIGN_MESSAGE_PARA* [In],pencryptpara : CRYPT_ENCRYPT_MESSAGE_PARA* [In],crecipientcert : UInt32 [In],rgprecipientcert : CERT_CONTEXT** [In],pbtobesignedandencrypted : UInt8* [In],cbtobesignedandencrypted : UInt32 [In],pbsignedandencryptedblob : UInt8* [In],pcbsignedandencryptedblob : UInt32* [In]
  fun CryptSignAndEncryptMessage(psignpara : CRYPT_SIGN_MESSAGE_PARA*, pencryptpara : CRYPT_ENCRYPT_MESSAGE_PARA*, crecipientcert : UInt32, rgprecipientcert : CERT_CONTEXT**, pbtobesignedandencrypted : UInt8*, cbtobesignedandencrypted : UInt32, pbsignedandencryptedblob : UInt8*, pcbsignedandencryptedblob : UInt32*) : LibC::BOOL

  # Params # pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA* [In],pverifypara : CRYPT_VERIFY_MESSAGE_PARA* [In],dwsignerindex : UInt32 [In],pbencryptedblob : UInt8* [In],cbencryptedblob : UInt32 [In],pbdecrypted : UInt8* [In],pcbdecrypted : UInt32* [In],ppxchgcert : CERT_CONTEXT** [In],ppsignercert : CERT_CONTEXT** [In]
  fun CryptDecryptAndVerifyMessageSignature(pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA*, pverifypara : CRYPT_VERIFY_MESSAGE_PARA*, dwsignerindex : UInt32, pbencryptedblob : UInt8*, cbencryptedblob : UInt32, pbdecrypted : UInt8*, pcbdecrypted : UInt32*, ppxchgcert : CERT_CONTEXT**, ppsignercert : CERT_CONTEXT**) : LibC::BOOL

  # Params # dwmsgtypeflags : UInt32 [In],pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA* [In],pverifypara : CRYPT_VERIFY_MESSAGE_PARA* [In],dwsignerindex : UInt32 [In],pbencodedblob : UInt8* [In],cbencodedblob : UInt32 [In],dwprevinnercontenttype : UInt32 [In],pdwmsgtype : UInt32* [In],pdwinnercontenttype : UInt32* [In],pbdecoded : UInt8* [In],pcbdecoded : UInt32* [In],ppxchgcert : CERT_CONTEXT** [In],ppsignercert : CERT_CONTEXT** [In]
  fun CryptDecodeMessage(dwmsgtypeflags : UInt32, pdecryptpara : CRYPT_DECRYPT_MESSAGE_PARA*, pverifypara : CRYPT_VERIFY_MESSAGE_PARA*, dwsignerindex : UInt32, pbencodedblob : UInt8*, cbencodedblob : UInt32, dwprevinnercontenttype : UInt32, pdwmsgtype : UInt32*, pdwinnercontenttype : UInt32*, pbdecoded : UInt8*, pcbdecoded : UInt32*, ppxchgcert : CERT_CONTEXT**, ppsignercert : CERT_CONTEXT**) : LibC::BOOL

  # Params # phashpara : CRYPT_HASH_MESSAGE_PARA* [In],fdetachedhash : LibC::BOOL [In],ctobehashed : UInt32 [In],rgpbtobehashed : UInt8** [In],rgcbtobehashed : UInt32* [In],pbhashedblob : UInt8* [In],pcbhashedblob : UInt32* [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptHashMessage(phashpara : CRYPT_HASH_MESSAGE_PARA*, fdetachedhash : LibC::BOOL, ctobehashed : UInt32, rgpbtobehashed : UInt8**, rgcbtobehashed : UInt32*, pbhashedblob : UInt8*, pcbhashedblob : UInt32*, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # phashpara : CRYPT_HASH_MESSAGE_PARA* [In],pbhashedblob : UInt8* [In],cbhashedblob : UInt32 [In],pbtobehashed : UInt8* [In],pcbtobehashed : UInt32* [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptVerifyMessageHash(phashpara : CRYPT_HASH_MESSAGE_PARA*, pbhashedblob : UInt8*, cbhashedblob : UInt32, pbtobehashed : UInt8*, pcbtobehashed : UInt32*, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # phashpara : CRYPT_HASH_MESSAGE_PARA* [In],pbdetachedhashblob : UInt8* [In],cbdetachedhashblob : UInt32 [In],ctobehashed : UInt32 [In],rgpbtobehashed : UInt8** [In],rgcbtobehashed : UInt32* [In],pbcomputedhash : UInt8* [In],pcbcomputedhash : UInt32* [In]
  fun CryptVerifyDetachedMessageHash(phashpara : CRYPT_HASH_MESSAGE_PARA*, pbdetachedhashblob : UInt8*, cbdetachedhashblob : UInt32, ctobehashed : UInt32, rgpbtobehashed : UInt8**, rgcbtobehashed : UInt32*, pbcomputedhash : UInt8*, pcbcomputedhash : UInt32*) : LibC::BOOL

  # Params # psignpara : CRYPT_KEY_SIGN_MESSAGE_PARA* [In],pbtobesigned : UInt8* [In],cbtobesigned : UInt32 [In],pbsignedblob : UInt8* [In],pcbsignedblob : UInt32* [In]
  fun CryptSignMessageWithKey(psignpara : CRYPT_KEY_SIGN_MESSAGE_PARA*, pbtobesigned : UInt8*, cbtobesigned : UInt32, pbsignedblob : UInt8*, pcbsignedblob : UInt32*) : LibC::BOOL

  # Params # pverifypara : CRYPT_KEY_VERIFY_MESSAGE_PARA* [In],ppublickeyinfo : CERT_PUBLIC_KEY_INFO* [In],pbsignedblob : UInt8* [In],cbsignedblob : UInt32 [In],pbdecoded : UInt8* [In],pcbdecoded : UInt32* [In]
  fun CryptVerifyMessageSignatureWithKey(pverifypara : CRYPT_KEY_VERIFY_MESSAGE_PARA*, ppublickeyinfo : CERT_PUBLIC_KEY_INFO*, pbsignedblob : UInt8*, cbsignedblob : UInt32, pbdecoded : UInt8*, pcbdecoded : UInt32*) : LibC::BOOL

  # Params # hprov : LibC::UINT_PTR [In],szsubsystemprotocol : PSTR [In]
  fun CertOpenSystemStoreA(hprov : LibC::UINT_PTR, szsubsystemprotocol : PSTR) : Void*

  # Params # hprov : LibC::UINT_PTR [In],szsubsystemprotocol : LibC::LPWSTR [In]
  # Commented out because function is part of Lib C
  #fun CertOpenSystemStoreW(hprov : LibC::UINT_PTR, szsubsystemprotocol : LibC::LPWSTR) : Void*

  # Params # szcertstorename : PSTR [In],pbcertencoded : UInt8* [In],cbcertencoded : UInt32 [In]
  fun CertAddEncodedCertificateToSystemStoreA(szcertstorename : PSTR, pbcertencoded : UInt8*, cbcertencoded : UInt32) : LibC::BOOL

  # Params # szcertstorename : LibC::LPWSTR [In],pbcertencoded : UInt8* [In],cbcertencoded : UInt32 [In]
  fun CertAddEncodedCertificateToSystemStoreW(szcertstorename : LibC::LPWSTR, pbcertencoded : UInt8*, cbcertencoded : UInt32) : LibC::BOOL

  # Params # pcertchains : CERT_CHAIN* [In],pcbcertchains : UInt32* [In],pccertchains : UInt32* [In],pbencodedissuername : UInt8* [In],cbencodedissuername : UInt32 [In],pwszpurpose : LibC::LPWSTR [In],dwkeyspec : UInt32 [In]
  fun FindCertsByIssuer(pcertchains : CERT_CHAIN*, pcbcertchains : UInt32*, pccertchains : UInt32*, pbencodedissuername : UInt8*, cbencodedissuername : UInt32, pwszpurpose : LibC::LPWSTR, dwkeyspec : UInt32) : HRESULT

  # Params # dwobjecttype : CERT_QUERY_OBJECT_TYPE [In],pvobject : Void* [In],dwexpectedcontenttypeflags : CERT_QUERY_CONTENT_TYPE_FLAGS [In],dwexpectedformattypeflags : CERT_QUERY_FORMAT_TYPE_FLAGS [In],dwflags : UInt32 [In],pdwmsgandcertencodingtype : CERT_QUERY_ENCODING_TYPE* [In],pdwcontenttype : CERT_QUERY_CONTENT_TYPE* [In],pdwformattype : CERT_QUERY_FORMAT_TYPE* [In],phcertstore : Void** [In],phmsg : Void** [In],ppvcontext : Void** [In]
  fun CryptQueryObject(dwobjecttype : CERT_QUERY_OBJECT_TYPE, pvobject : Void*, dwexpectedcontenttypeflags : CERT_QUERY_CONTENT_TYPE_FLAGS, dwexpectedformattypeflags : CERT_QUERY_FORMAT_TYPE_FLAGS, dwflags : UInt32, pdwmsgandcertencodingtype : CERT_QUERY_ENCODING_TYPE*, pdwcontenttype : CERT_QUERY_CONTENT_TYPE*, pdwformattype : CERT_QUERY_FORMAT_TYPE*, phcertstore : Void**, phmsg : Void**, ppvcontext : Void**) : LibC::BOOL

  # Params # cbsize : UInt32 [In]
  fun CryptMemAlloc(cbsize : UInt32) : Void*

  # Params # pv : Void* [In],cbsize : UInt32 [In]
  fun CryptMemRealloc(pv : Void*, cbsize : UInt32) : Void*

  # Params # pv : Void* [In]
  fun CryptMemFree(pv : Void*)

  # Params # dwflags : UInt32 [In],phasync : HCRYPTASYNC* [In]
  fun CryptCreateAsyncHandle(dwflags : UInt32, phasync : HCRYPTASYNC*) : LibC::BOOL

  # Params # hasync : HCRYPTASYNC [In],pszparamoid : PSTR [In],pvparam : Void* [In],pfnfree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC [In]
  fun CryptSetAsyncParam(hasync : HCRYPTASYNC, pszparamoid : PSTR, pvparam : Void*, pfnfree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) : LibC::BOOL

  # Params # hasync : HCRYPTASYNC [In],pszparamoid : PSTR [In],ppvparam : Void** [In],ppfnfree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* [In]
  fun CryptGetAsyncParam(hasync : HCRYPTASYNC, pszparamoid : PSTR, ppvparam : Void**, ppfnfree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*) : LibC::BOOL

  # Params # hasync : HCRYPTASYNC [In]
  fun CryptCloseAsyncHandle(hasync : HCRYPTASYNC) : LibC::BOOL

  # Params # pszurl : PSTR [In],pszobjectoid : PSTR [In],dwretrievalflags : UInt32 [In],dwtimeout : UInt32 [In],ppvobject : Void** [In],hasyncretrieve : HCRYPTASYNC [In],pcredentials : CRYPT_CREDENTIALS* [In],pvverify : Void* [In],pauxinfo : CRYPT_RETRIEVE_AUX_INFO* [In]
  fun CryptRetrieveObjectByUrlA(pszurl : PSTR, pszobjectoid : PSTR, dwretrievalflags : UInt32, dwtimeout : UInt32, ppvobject : Void**, hasyncretrieve : HCRYPTASYNC, pcredentials : CRYPT_CREDENTIALS*, pvverify : Void*, pauxinfo : CRYPT_RETRIEVE_AUX_INFO*) : LibC::BOOL

  # Params # pszurl : LibC::LPWSTR [In],pszobjectoid : PSTR [In],dwretrievalflags : UInt32 [In],dwtimeout : UInt32 [In],ppvobject : Void** [In],hasyncretrieve : HCRYPTASYNC [In],pcredentials : CRYPT_CREDENTIALS* [In],pvverify : Void* [In],pauxinfo : CRYPT_RETRIEVE_AUX_INFO* [In]
  fun CryptRetrieveObjectByUrlW(pszurl : LibC::LPWSTR, pszobjectoid : PSTR, dwretrievalflags : UInt32, dwtimeout : UInt32, ppvobject : Void**, hasyncretrieve : HCRYPTASYNC, pcredentials : CRYPT_CREDENTIALS*, pvverify : Void*, pauxinfo : CRYPT_RETRIEVE_AUX_INFO*) : LibC::BOOL

  # Params # pfncancel : PFN_CRYPT_CANCEL_RETRIEVAL [In],pvarg : Void* [In],dwflags : UInt32 [In],pvreserved : Void* [In]
  fun CryptInstallCancelRetrieval(pfncancel : PFN_CRYPT_CANCEL_RETRIEVAL, pvarg : Void*, dwflags : UInt32, pvreserved : Void*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pvreserved : Void* [In]
  fun CryptUninstallCancelRetrieval(dwflags : UInt32, pvreserved : Void*) : LibC::BOOL

  # Params # pszurloid : PSTR [In],pvpara : Void* [In],dwflags : CRYPT_GET_URL_FLAGS [In],purlarray : CRYPT_URL_ARRAY* [In],pcburlarray : UInt32* [In],purlinfo : CRYPT_URL_INFO* [In],pcburlinfo : UInt32* [In],pvreserved : Void* [In]
  fun CryptGetObjectUrl(pszurloid : PSTR, pvpara : Void*, dwflags : CRYPT_GET_URL_FLAGS, purlarray : CRYPT_URL_ARRAY*, pcburlarray : UInt32*, purlinfo : CRYPT_URL_INFO*, pcburlinfo : UInt32*, pvreserved : Void*) : LibC::BOOL

  # Params # hcryptprovorncryptkey : LibC::UINT_PTR [In],psubjectissuerblob : CRYPTOAPI_BLOB* [In],dwflags : CERT_CREATE_SELFSIGN_FLAGS [In],pkeyprovinfo : CRYPT_KEY_PROV_INFO* [In],psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER* [In],pstarttime : SYSTEMTIME* [In],pendtime : SYSTEMTIME* [In],pextensions : CERT_EXTENSIONS* [In]
  fun CertCreateSelfSignCertificate(hcryptprovorncryptkey : LibC::UINT_PTR, psubjectissuerblob : CRYPTOAPI_BLOB*, dwflags : CERT_CREATE_SELFSIGN_FLAGS, pkeyprovinfo : CRYPT_KEY_PROV_INFO*, psignaturealgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pstarttime : SYSTEMTIME*, pendtime : SYSTEMTIME*, pextensions : CERT_EXTENSIONS*) : CERT_CONTEXT*

  # Params # pkeyidentifier : CRYPTOAPI_BLOB* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pwszcomputername : LibC::LPWSTR [In],pvreserved : Void* [In],pvdata : Void* [In],pcbdata : UInt32* [In]
  fun CryptGetKeyIdentifierProperty(pkeyidentifier : CRYPTOAPI_BLOB*, dwpropid : UInt32, dwflags : UInt32, pwszcomputername : LibC::LPWSTR, pvreserved : Void*, pvdata : Void*, pcbdata : UInt32*) : LibC::BOOL

  # Params # pkeyidentifier : CRYPTOAPI_BLOB* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pwszcomputername : LibC::LPWSTR [In],pvreserved : Void* [In],pvdata : Void* [In]
  fun CryptSetKeyIdentifierProperty(pkeyidentifier : CRYPTOAPI_BLOB*, dwpropid : UInt32, dwflags : UInt32, pwszcomputername : LibC::LPWSTR, pvreserved : Void*, pvdata : Void*) : LibC::BOOL

  # Params # pkeyidentifier : CRYPTOAPI_BLOB* [In],dwpropid : UInt32 [In],dwflags : UInt32 [In],pwszcomputername : LibC::LPWSTR [In],pvreserved : Void* [In],pvarg : Void* [In],pfnenum : PFN_CRYPT_ENUM_KEYID_PROP [In]
  fun CryptEnumKeyIdentifierProperties(pkeyidentifier : CRYPTOAPI_BLOB*, dwpropid : UInt32, dwflags : UInt32, pwszcomputername : LibC::LPWSTR, pvreserved : Void*, pvarg : Void*, pfnenum : PFN_CRYPT_ENUM_KEYID_PROP) : LibC::BOOL

  # Params # dwcertencodingtype : UInt32 [In],pszpubkeyoid : PSTR [In],ppubkeystruc : PUBLICKEYSTRUC* [In],cbpubkeystruc : UInt32 [In],dwflags : UInt32 [In],pvreserved : Void* [In],pbhash : UInt8* [In],pcbhash : UInt32* [In]
  fun CryptCreateKeyIdentifierFromCSP(dwcertencodingtype : UInt32, pszpubkeyoid : PSTR, ppubkeystruc : PUBLICKEYSTRUC*, cbpubkeystruc : UInt32, dwflags : UInt32, pvreserved : Void*, pbhash : UInt8*, pcbhash : UInt32*) : LibC::BOOL

  # Params # pconfig : CERT_CHAIN_ENGINE_CONFIG* [In],phchainengine : HCERTCHAINENGINE* [In]
  fun CertCreateCertificateChainEngine(pconfig : CERT_CHAIN_ENGINE_CONFIG*, phchainengine : HCERTCHAINENGINE*) : LibC::BOOL

  # Params # hchainengine : HCERTCHAINENGINE [In]
  fun CertFreeCertificateChainEngine(hchainengine : HCERTCHAINENGINE)

  # Params # hchainengine : HCERTCHAINENGINE [In]
  fun CertResyncCertificateChainEngine(hchainengine : HCERTCHAINENGINE) : LibC::BOOL

  # Params # hchainengine : HCERTCHAINENGINE [In],pcertcontext : CERT_CONTEXT* [In],ptime : FILETIME* [In],hadditionalstore : Void* [In],pchainpara : CERT_CHAIN_PARA* [In],dwflags : UInt32 [In],pvreserved : Void* [In],ppchaincontext : CERT_CHAIN_CONTEXT** [In]
  fun CertGetCertificateChain(hchainengine : HCERTCHAINENGINE, pcertcontext : CERT_CONTEXT*, ptime : FILETIME*, hadditionalstore : Void*, pchainpara : CERT_CHAIN_PARA*, dwflags : UInt32, pvreserved : Void*, ppchaincontext : CERT_CHAIN_CONTEXT**) : LibC::BOOL

  # Params # pchaincontext : CERT_CHAIN_CONTEXT* [In]
  fun CertFreeCertificateChain(pchaincontext : CERT_CHAIN_CONTEXT*)

  # Params # pchaincontext : CERT_CHAIN_CONTEXT* [In]
  fun CertDuplicateCertificateChain(pchaincontext : CERT_CHAIN_CONTEXT*) : CERT_CHAIN_CONTEXT*

  # Params # hcertstore : Void* [In],dwcertencodingtype : UInt32 [In],dwfindflags : CERT_FIND_CHAIN_IN_STORE_FLAGS [In],dwfindtype : UInt32 [In],pvfindpara : Void* [In],pprevchaincontext : CERT_CHAIN_CONTEXT* [In]
  fun CertFindChainInStore(hcertstore : Void*, dwcertencodingtype : UInt32, dwfindflags : CERT_FIND_CHAIN_IN_STORE_FLAGS, dwfindtype : UInt32, pvfindpara : Void*, pprevchaincontext : CERT_CHAIN_CONTEXT*) : CERT_CHAIN_CONTEXT*

  # Params # pszpolicyoid : PSTR [In],pchaincontext : CERT_CHAIN_CONTEXT* [In],ppolicypara : CERT_CHAIN_POLICY_PARA* [In],ppolicystatus : CERT_CHAIN_POLICY_STATUS* [In]
  fun CertVerifyCertificateChainPolicy(pszpolicyoid : PSTR, pchaincontext : CERT_CHAIN_CONTEXT*, ppolicypara : CERT_CHAIN_POLICY_PARA*, ppolicystatus : CERT_CHAIN_POLICY_STATUS*) : LibC::BOOL

  # Params # pszstring : UInt8* [In],cchstring : UInt32 [In],dwflags : CRYPT_STRING [In],pbbinary : UInt8* [In],pcbbinary : UInt32* [In],pdwskip : UInt32* [In],pdwflags : UInt32* [In]
  fun CryptStringToBinaryA(pszstring : UInt8*, cchstring : UInt32, dwflags : CRYPT_STRING, pbbinary : UInt8*, pcbbinary : UInt32*, pdwskip : UInt32*, pdwflags : UInt32*) : LibC::BOOL

  # Params # pszstring : Char* [In],cchstring : UInt32 [In],dwflags : CRYPT_STRING [In],pbbinary : UInt8* [In],pcbbinary : UInt32* [In],pdwskip : UInt32* [In],pdwflags : UInt32* [In]
  fun CryptStringToBinaryW(pszstring : Char*, cchstring : UInt32, dwflags : CRYPT_STRING, pbbinary : UInt8*, pcbbinary : UInt32*, pdwskip : UInt32*, pdwflags : UInt32*) : LibC::BOOL

  # Params # pbbinary : UInt8* [In],cbbinary : UInt32 [In],dwflags : CRYPT_STRING [In],pszstring : UInt8* [In],pcchstring : UInt32* [In]
  fun CryptBinaryToStringA(pbbinary : UInt8*, cbbinary : UInt32, dwflags : CRYPT_STRING, pszstring : UInt8*, pcchstring : UInt32*) : LibC::BOOL

  # Params # pbbinary : UInt8* [In],cbbinary : UInt32 [In],dwflags : CRYPT_STRING [In],pszstring : Char* [In],pcchstring : UInt32* [In]
  fun CryptBinaryToStringW(pbbinary : UInt8*, cbbinary : UInt32, dwflags : CRYPT_STRING, pszstring : Char*, pcchstring : UInt32*) : LibC::BOOL

  # Params # ppfx : CRYPTOAPI_BLOB* [In],szpassword : LibC::LPWSTR [In],dwflags : CRYPT_KEY_FLAGS [In]
  fun PFXImportCertStore(ppfx : CRYPTOAPI_BLOB*, szpassword : LibC::LPWSTR, dwflags : CRYPT_KEY_FLAGS) : Void*

  # Params # ppfx : CRYPTOAPI_BLOB* [In]
  fun PFXIsPFXBlob(ppfx : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # ppfx : CRYPTOAPI_BLOB* [In],szpassword : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PFXVerifyPassword(ppfx : CRYPTOAPI_BLOB*, szpassword : LibC::LPWSTR, dwflags : UInt32) : LibC::BOOL

  # Params # hstore : Void* [In],ppfx : CRYPTOAPI_BLOB* [In],szpassword : LibC::LPWSTR [In],pvpara : Void* [In],dwflags : UInt32 [In]
  fun PFXExportCertStoreEx(hstore : Void*, ppfx : CRYPTOAPI_BLOB*, szpassword : LibC::LPWSTR, pvpara : Void*, dwflags : UInt32) : LibC::BOOL

  # Params # hstore : Void* [In],ppfx : CRYPTOAPI_BLOB* [In],szpassword : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun PFXExportCertStore(hstore : Void*, ppfx : CRYPTOAPI_BLOB*, szpassword : LibC::LPWSTR, dwflags : UInt32) : LibC::BOOL

  # Params # pchaincontext : CERT_CHAIN_CONTEXT* [In],dwflags : UInt32 [In],popenpara : CERT_SERVER_OCSP_RESPONSE_OPEN_PARA* [In]
  fun CertOpenServerOcspResponse(pchaincontext : CERT_CHAIN_CONTEXT*, dwflags : UInt32, popenpara : CERT_SERVER_OCSP_RESPONSE_OPEN_PARA*) : Void*

  # Params # hserverocspresponse : Void* [In]
  fun CertAddRefServerOcspResponse(hserverocspresponse : Void*)

  # Params # hserverocspresponse : Void* [In],dwflags : UInt32 [In]
  fun CertCloseServerOcspResponse(hserverocspresponse : Void*, dwflags : UInt32)

  # Params # hserverocspresponse : Void* [In],dwflags : UInt32 [In],pvreserved : Void* [In]
  fun CertGetServerOcspResponseContext(hserverocspresponse : Void*, dwflags : UInt32, pvreserved : Void*) : CERT_SERVER_OCSP_RESPONSE_CONTEXT*

  # Params # pserverocspresponsecontext : CERT_SERVER_OCSP_RESPONSE_CONTEXT* [In]
  fun CertAddRefServerOcspResponseContext(pserverocspresponsecontext : CERT_SERVER_OCSP_RESPONSE_CONTEXT*)

  # Params # pserverocspresponsecontext : CERT_SERVER_OCSP_RESPONSE_CONTEXT* [In]
  fun CertFreeServerOcspResponseContext(pserverocspresponsecontext : CERT_SERVER_OCSP_RESPONSE_CONTEXT*)

  # Params # pcertcontext : CERT_CONTEXT* [In],lpszlogoorbiometrictype : PSTR [In],dwretrievalflags : UInt32 [In],dwtimeout : UInt32 [In],dwflags : UInt32 [In],pvreserved : Void* [In],ppbdata : UInt8** [In],pcbdata : UInt32* [In],ppwszmimetype : LibC::LPWSTR* [In]
  fun CertRetrieveLogoOrBiometricInfo(pcertcontext : CERT_CONTEXT*, lpszlogoorbiometrictype : PSTR, dwretrievalflags : UInt32, dwtimeout : UInt32, dwflags : UInt32, pvreserved : Void*, ppbdata : UInt8**, pcbdata : UInt32*, ppwszmimetype : LibC::LPWSTR*) : LibC::BOOL

  # Params # pselectioncontext : Guid* [In],dwflags : UInt32 [In],pchainparameters : CERT_SELECT_CHAIN_PARA* [In],ccriteria : UInt32 [In],rgpcriteria : CERT_SELECT_CRITERIA* [In],hstore : Void* [In],pcselection : UInt32* [In],pprgpselection : CERT_CHAIN_CONTEXT*** [In]
  fun CertSelectCertificateChains(pselectioncontext : Guid*, dwflags : UInt32, pchainparameters : CERT_SELECT_CHAIN_PARA*, ccriteria : UInt32, rgpcriteria : CERT_SELECT_CRITERIA*, hstore : Void*, pcselection : UInt32*, pprgpselection : CERT_CHAIN_CONTEXT***) : LibC::BOOL

  # Params # prgpselection : CERT_CHAIN_CONTEXT** [In]
  fun CertFreeCertificateChainList(prgpselection : CERT_CHAIN_CONTEXT**)

  # Params # wszurl : LibC::LPWSTR [In],dwretrievalflags : UInt32 [In],dwtimeout : UInt32 [In],pszhashid : PSTR [In],ppara : CRYPT_TIMESTAMP_PARA* [In],pbdata : UInt8* [In],cbdata : UInt32 [In],pptscontext : CRYPT_TIMESTAMP_CONTEXT** [In],pptssigner : CERT_CONTEXT** [In],phstore : Void** [In]
  fun CryptRetrieveTimeStamp(wszurl : LibC::LPWSTR, dwretrievalflags : UInt32, dwtimeout : UInt32, pszhashid : PSTR, ppara : CRYPT_TIMESTAMP_PARA*, pbdata : UInt8*, cbdata : UInt32, pptscontext : CRYPT_TIMESTAMP_CONTEXT**, pptssigner : CERT_CONTEXT**, phstore : Void**) : LibC::BOOL

  # Params # pbtscontentinfo : UInt8* [In],cbtscontentinfo : UInt32 [In],pbdata : UInt8* [In],cbdata : UInt32 [In],hadditionalstore : Void* [In],pptscontext : CRYPT_TIMESTAMP_CONTEXT** [In],pptssigner : CERT_CONTEXT** [In],phstore : Void** [In]
  fun CryptVerifyTimeStampSignature(pbtscontentinfo : UInt8*, cbtscontentinfo : UInt32, pbdata : UInt8*, cbdata : UInt32, hadditionalstore : Void*, pptscontext : CRYPT_TIMESTAMP_CONTEXT**, pptssigner : CERT_CONTEXT**, phstore : Void**) : LibC::BOOL

  # Params # dwhashusetype : UInt32 [In],pwszcnghashalgid : LibC::LPWSTR [In],dwchainflags : UInt32 [In],psignerchaincontext : CERT_CHAIN_CONTEXT* [In],ptimestamp : FILETIME* [In],pwszfilename : LibC::LPWSTR [In]
  fun CertIsWeakHash(dwhashusetype : UInt32, pwszcnghashalgid : LibC::LPWSTR, dwchainflags : UInt32, psignerchaincontext : CERT_CHAIN_CONTEXT*, ptimestamp : FILETIME*, pwszfilename : LibC::LPWSTR) : LibC::BOOL

  # Params # pdatain : CRYPTOAPI_BLOB* [In],szdatadescr : LibC::LPWSTR [In],poptionalentropy : CRYPTOAPI_BLOB* [In],pvreserved : Void* [In],ppromptstruct : CRYPTPROTECT_PROMPTSTRUCT* [In],dwflags : UInt32 [In],pdataout : CRYPTOAPI_BLOB* [In]
  fun CryptProtectData(pdatain : CRYPTOAPI_BLOB*, szdatadescr : LibC::LPWSTR, poptionalentropy : CRYPTOAPI_BLOB*, pvreserved : Void*, ppromptstruct : CRYPTPROTECT_PROMPTSTRUCT*, dwflags : UInt32, pdataout : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # pdatain : CRYPTOAPI_BLOB* [In],ppszdatadescr : LibC::LPWSTR* [In],poptionalentropy : CRYPTOAPI_BLOB* [In],pvreserved : Void* [In],ppromptstruct : CRYPTPROTECT_PROMPTSTRUCT* [In],dwflags : UInt32 [In],pdataout : CRYPTOAPI_BLOB* [In]
  fun CryptUnprotectData(pdatain : CRYPTOAPI_BLOB*, ppszdatadescr : LibC::LPWSTR*, poptionalentropy : CRYPTOAPI_BLOB*, pvreserved : Void*, ppromptstruct : CRYPTPROTECT_PROMPTSTRUCT*, dwflags : UInt32, pdataout : CRYPTOAPI_BLOB*) : LibC::BOOL

  # Params # poldsid : PSID [In],pwszoldpassword : LibC::LPWSTR [In],dwflags : UInt32 [In],pdwsuccesscount : UInt32* [In],pdwfailurecount : UInt32* [In]
  fun CryptUpdateProtectedState(poldsid : PSID, pwszoldpassword : LibC::LPWSTR, dwflags : UInt32, pdwsuccesscount : UInt32*, pdwfailurecount : UInt32*) : LibC::BOOL

  # Params # pdatain : Void* [In],cbdatain : UInt32 [In],dwflags : UInt32 [In]
  fun CryptProtectMemory(pdatain : Void*, cbdatain : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # pdatain : Void* [In],cbdatain : UInt32 [In],dwflags : UInt32 [In]
  fun CryptUnprotectMemory(pdatain : Void*, cbdatain : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # pwszname : LibC::LPWSTR [In],pwszdescriptorstring : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun NCryptRegisterProtectionDescriptorName(pwszname : LibC::LPWSTR, pwszdescriptorstring : LibC::LPWSTR, dwflags : UInt32) : Int32

  # Params # pwszname : LibC::LPWSTR [In],pwszdescriptorstring : Char* [In],pcdescriptorstring : LibC::UINT_PTR* [In],dwflags : UInt32 [In]
  fun NCryptQueryProtectionDescriptorName(pwszname : LibC::LPWSTR, pwszdescriptorstring : Char*, pcdescriptorstring : LibC::UINT_PTR*, dwflags : UInt32) : Int32

  # Params # pwszdescriptorstring : LibC::LPWSTR [In],dwflags : UInt32 [In],phdescriptor : NCRYPT_DESCRIPTOR_HANDLE* [In]
  fun NCryptCreateProtectionDescriptor(pwszdescriptorstring : LibC::LPWSTR, dwflags : UInt32, phdescriptor : NCRYPT_DESCRIPTOR_HANDLE*) : Int32

  # Params # hdescriptor : NCRYPT_DESCRIPTOR_HANDLE [In]
  fun NCryptCloseProtectionDescriptor(hdescriptor : NCRYPT_DESCRIPTOR_HANDLE) : Int32

  # Params # hdescriptor : NCRYPT_DESCRIPTOR_HANDLE [In],pmempara : NCRYPT_ALLOC_PARA* [In],dwinfotype : UInt32 [In],ppvinfo : Void** [In]
  fun NCryptGetProtectionDescriptorInfo(hdescriptor : NCRYPT_DESCRIPTOR_HANDLE, pmempara : NCRYPT_ALLOC_PARA*, dwinfotype : UInt32, ppvinfo : Void**) : Int32

  # Params # hdescriptor : NCRYPT_DESCRIPTOR_HANDLE [In],dwflags : UInt32 [In],pbdata : UInt8* [In],cbdata : UInt32 [In],pmempara : NCRYPT_ALLOC_PARA* [In],hwnd : LibC::HANDLE [In],ppbprotectedblob : UInt8** [In],pcbprotectedblob : UInt32* [In]
  fun NCryptProtectSecret(hdescriptor : NCRYPT_DESCRIPTOR_HANDLE, dwflags : UInt32, pbdata : UInt8*, cbdata : UInt32, pmempara : NCRYPT_ALLOC_PARA*, hwnd : LibC::HANDLE, ppbprotectedblob : UInt8**, pcbprotectedblob : UInt32*) : Int32

  # Params # phdescriptor : NCRYPT_DESCRIPTOR_HANDLE* [In],dwflags : NCRYPT_FLAGS [In],pbprotectedblob : UInt8* [In],cbprotectedblob : UInt32 [In],pmempara : NCRYPT_ALLOC_PARA* [In],hwnd : LibC::HANDLE [In],ppbdata : UInt8** [In],pcbdata : UInt32* [In]
  fun NCryptUnprotectSecret(phdescriptor : NCRYPT_DESCRIPTOR_HANDLE*, dwflags : NCRYPT_FLAGS, pbprotectedblob : UInt8*, cbprotectedblob : UInt32, pmempara : NCRYPT_ALLOC_PARA*, hwnd : LibC::HANDLE, ppbdata : UInt8**, pcbdata : UInt32*) : Int32

  # Params # hdescriptor : NCRYPT_DESCRIPTOR_HANDLE [In],dwflags : UInt32 [In],hwnd : LibC::HANDLE [In],pstreaminfo : NCRYPT_PROTECT_STREAM_INFO* [In],phstream : NCRYPT_STREAM_HANDLE* [In]
  fun NCryptStreamOpenToProtect(hdescriptor : NCRYPT_DESCRIPTOR_HANDLE, dwflags : UInt32, hwnd : LibC::HANDLE, pstreaminfo : NCRYPT_PROTECT_STREAM_INFO*, phstream : NCRYPT_STREAM_HANDLE*) : Int32

  # Params # pstreaminfo : NCRYPT_PROTECT_STREAM_INFO* [In],dwflags : UInt32 [In],hwnd : LibC::HANDLE [In],phstream : NCRYPT_STREAM_HANDLE* [In]
  fun NCryptStreamOpenToUnprotect(pstreaminfo : NCRYPT_PROTECT_STREAM_INFO*, dwflags : UInt32, hwnd : LibC::HANDLE, phstream : NCRYPT_STREAM_HANDLE*) : Int32

  # Params # pstreaminfo : NCRYPT_PROTECT_STREAM_INFO_EX* [In],dwflags : UInt32 [In],hwnd : LibC::HANDLE [In],phstream : NCRYPT_STREAM_HANDLE* [In]
  fun NCryptStreamOpenToUnprotectEx(pstreaminfo : NCRYPT_PROTECT_STREAM_INFO_EX*, dwflags : UInt32, hwnd : LibC::HANDLE, phstream : NCRYPT_STREAM_HANDLE*) : Int32

  # Params # hstream : NCRYPT_STREAM_HANDLE [In],pbdata : UInt8* [In],cbdata : LibC::UINT_PTR [In],ffinal : LibC::BOOL [In]
  fun NCryptStreamUpdate(hstream : NCRYPT_STREAM_HANDLE, pbdata : UInt8*, cbdata : LibC::UINT_PTR, ffinal : LibC::BOOL) : Int32

  # Params # hstream : NCRYPT_STREAM_HANDLE [In]
  fun NCryptStreamClose(hstream : NCRYPT_STREAM_HANDLE) : Int32

  # Params # hcryptxml : Void* [In]
  fun CryptXmlClose(hcryptxml : Void*) : HRESULT

  # Params # ppconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG** [In]
  fun CryptXmlGetTransforms(ppconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG**) : HRESULT

  # Params # pconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG* [In],dwflags : CRYPT_XML_FLAGS [In],wszid : LibC::LPWSTR [In],rgproperty : CRYPT_XML_PROPERTY* [In],cproperty : UInt32 [In],pencoded : CRYPT_XML_BLOB* [In],phsignature : Void** [In]
  fun CryptXmlOpenToEncode(pconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG*, dwflags : CRYPT_XML_FLAGS, wszid : LibC::LPWSTR, rgproperty : CRYPT_XML_PROPERTY*, cproperty : UInt32, pencoded : CRYPT_XML_BLOB*, phsignature : Void**) : HRESULT

  # Params # pconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG* [In],dwflags : CRYPT_XML_FLAGS [In],rgproperty : CRYPT_XML_PROPERTY* [In],cproperty : UInt32 [In],pencoded : CRYPT_XML_BLOB* [In],phcryptxml : Void** [In]
  fun CryptXmlOpenToDecode(pconfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG*, dwflags : CRYPT_XML_FLAGS, rgproperty : CRYPT_XML_PROPERTY*, cproperty : UInt32, pencoded : CRYPT_XML_BLOB*, phcryptxml : Void**) : HRESULT

  # Params # hsignatureorobject : Void* [In],dwflags : UInt32 [In],rgproperty : CRYPT_XML_PROPERTY* [In],cproperty : UInt32 [In],pencoded : CRYPT_XML_BLOB* [In],ppobject : CRYPT_XML_OBJECT** [In]
  fun CryptXmlAddObject(hsignatureorobject : Void*, dwflags : UInt32, rgproperty : CRYPT_XML_PROPERTY*, cproperty : UInt32, pencoded : CRYPT_XML_BLOB*, ppobject : CRYPT_XML_OBJECT**) : HRESULT

  # Params # hcryptxml : Void* [In],dwflags : UInt32 [In],wszid : LibC::LPWSTR [In],wszuri : LibC::LPWSTR [In],wsztype : LibC::LPWSTR [In],pdigestmethod : CRYPT_XML_ALGORITHM* [In],ctransform : UInt32 [In],rgtransform : CRYPT_XML_ALGORITHM* [In],phreference : Void** [In]
  fun CryptXmlCreateReference(hcryptxml : Void*, dwflags : UInt32, wszid : LibC::LPWSTR, wszuri : LibC::LPWSTR, wsztype : LibC::LPWSTR, pdigestmethod : CRYPT_XML_ALGORITHM*, ctransform : UInt32, rgtransform : CRYPT_XML_ALGORITHM*, phreference : Void**) : HRESULT

  # Params # hreference : Void* [In],dwflags : UInt32 [In],pdataproviderin : CRYPT_XML_DATA_PROVIDER* [In]
  fun CryptXmlDigestReference(hreference : Void*, dwflags : UInt32, pdataproviderin : CRYPT_XML_DATA_PROVIDER*) : HRESULT

  # Params # hsignature : Void* [In],pbsecret : UInt8* [In],cbsecret : UInt32 [In]
  fun CryptXmlSetHMACSecret(hsignature : Void*, pbsecret : UInt8*, cbsecret : UInt32) : HRESULT

  # Params # hsignature : Void* [In],hkey : LibC::UINT_PTR [In],dwkeyspec : CERT_KEY_SPEC [In],dwflags : CRYPT_XML_FLAGS [In],dwkeyinfospec : CRYPT_XML_KEYINFO_SPEC [In],pvkeyinfospec : Void* [In],psignaturemethod : CRYPT_XML_ALGORITHM* [In],pcanonicalization : CRYPT_XML_ALGORITHM* [In]
  fun CryptXmlSign(hsignature : Void*, hkey : LibC::UINT_PTR, dwkeyspec : CERT_KEY_SPEC, dwflags : CRYPT_XML_FLAGS, dwkeyinfospec : CRYPT_XML_KEYINFO_SPEC, pvkeyinfospec : Void*, psignaturemethod : CRYPT_XML_ALGORITHM*, pcanonicalization : CRYPT_XML_ALGORITHM*) : HRESULT

  # Params # dwflags : CRYPT_XML_FLAGS [In],pkeyvalue : CRYPT_XML_KEY_VALUE* [In],phkey : BCRYPT_KEY_HANDLE* [In]
  fun CryptXmlImportPublicKey(dwflags : CRYPT_XML_FLAGS, pkeyvalue : CRYPT_XML_KEY_VALUE*, phkey : BCRYPT_KEY_HANDLE*) : HRESULT

  # Params # hsignature : Void* [In],hkey : BCRYPT_KEY_HANDLE [In],dwflags : CRYPT_XML_FLAGS [In]
  fun CryptXmlVerifySignature(hsignature : Void*, hkey : BCRYPT_KEY_HANDLE, dwflags : CRYPT_XML_FLAGS) : HRESULT

  # Params # hcryptxml : Void* [In],ppstruct : CRYPT_XML_DOC_CTXT** [In]
  fun CryptXmlGetDocContext(hcryptxml : Void*, ppstruct : CRYPT_XML_DOC_CTXT**) : HRESULT

  # Params # hcryptxml : Void* [In],ppstruct : CRYPT_XML_SIGNATURE** [In]
  fun CryptXmlGetSignature(hcryptxml : Void*, ppstruct : CRYPT_XML_SIGNATURE**) : HRESULT

  # Params # hcryptxml : Void* [In],ppstruct : CRYPT_XML_REFERENCE** [In]
  fun CryptXmlGetReference(hcryptxml : Void*, ppstruct : CRYPT_XML_REFERENCE**) : HRESULT

  # Params # hcryptxml : Void* [In],pstatus : CRYPT_XML_STATUS* [In]
  fun CryptXmlGetStatus(hcryptxml : Void*, pstatus : CRYPT_XML_STATUS*) : HRESULT

  # Params # hcryptxml : Void* [In],dwcharset : CRYPT_XML_CHARSET [In],rgproperty : CRYPT_XML_PROPERTY* [In],cproperty : UInt32 [In],pvcallbackstate : Void* [In],pfnwrite : PFN_CRYPT_XML_WRITE_CALLBACK [In]
  fun CryptXmlEncode(hcryptxml : Void*, dwcharset : CRYPT_XML_CHARSET, rgproperty : CRYPT_XML_PROPERTY*, cproperty : UInt32, pvcallbackstate : Void*, pfnwrite : PFN_CRYPT_XML_WRITE_CALLBACK) : HRESULT

  # Params # pxmlalgorithm : CRYPT_XML_ALGORITHM* [In],dwflags : CRYPT_XML_FLAGS [In],ppalginfo : CRYPT_XML_ALGORITHM_INFO** [In]
  fun CryptXmlGetAlgorithmInfo(pxmlalgorithm : CRYPT_XML_ALGORITHM*, dwflags : CRYPT_XML_FLAGS, ppalginfo : CRYPT_XML_ALGORITHM_INFO**) : HRESULT

  # Params # dwfindbytype : UInt32 [In],pvfindby : Void* [In],dwgroupid : UInt32 [In],dwflags : UInt32 [In]
  fun CryptXmlFindAlgorithmInfo(dwfindbytype : UInt32, pvfindby : Void*, dwgroupid : UInt32, dwflags : UInt32) : CRYPT_XML_ALGORITHM_INFO*

  # Params # dwgroupid : UInt32 [In],dwflags : UInt32 [In],pvarg : Void* [In],pfnenumalginfo : PFN_CRYPT_XML_ENUM_ALG_INFO [In]
  fun CryptXmlEnumAlgorithmInfo(dwgroupid : UInt32, dwflags : UInt32, pvarg : Void*, pfnenumalginfo : PFN_CRYPT_XML_ENUM_ALG_INFO) : HRESULT

  # Params # cpolicychain : UInt32 [In],ppolicychain : POLICY_ELEMENT* [In],securitytoken : GENERIC_XML_TOKEN** [In],phprooftokencrypto : INFORMATIONCARD_CRYPTO_HANDLE** [In]
  fun GetToken(cpolicychain : UInt32, ppolicychain : POLICY_ELEMENT*, securitytoken : GENERIC_XML_TOKEN**, phprooftokencrypto : INFORMATIONCARD_CRYPTO_HANDLE**) : HRESULT

  # Params # 
  fun ManageCardSpace : HRESULT

  # Params # filename : LibC::LPWSTR [In]
  fun ImportInformationCard(filename : LibC::LPWSTR) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],foaep : LibC::BOOL [In],cbindata : UInt32 [In],pindata : UInt8* [In],pcboutdata : UInt32* [In],ppoutdata : UInt8** [In]
  fun Encrypt(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, foaep : LibC::BOOL, cbindata : UInt32, pindata : UInt8*, pcboutdata : UInt32*, ppoutdata : UInt8**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],foaep : LibC::BOOL [In],cbindata : UInt32 [In],pindata : UInt8* [In],pcboutdata : UInt32* [In],ppoutdata : UInt8** [In]
  fun Decrypt(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, foaep : LibC::BOOL, cbindata : UInt32, pindata : UInt8*, pcboutdata : UInt32*, ppoutdata : UInt8**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbhash : UInt32 [In],phash : UInt8* [In],hashalgoid : LibC::LPWSTR [In],pcbsig : UInt32* [In],ppsig : UInt8** [In]
  fun SignHash(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbhash : UInt32, phash : UInt8*, hashalgoid : LibC::LPWSTR, pcbsig : UInt32*, ppsig : UInt8**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbhash : UInt32 [In],phash : UInt8* [In],hashalgoid : LibC::LPWSTR [In],cbsig : UInt32 [In],psig : UInt8* [In],pfverified : LibC::BOOL* [In]
  fun VerifyHash(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbhash : UInt32, phash : UInt8*, hashalgoid : LibC::LPWSTR, cbsig : UInt32, psig : UInt8*, pfverified : LibC::BOOL*) : HRESULT

  # Params # hsymmetriccrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],mode : UInt32 [In],padding : PaddingMode [In],feedbacksize : UInt32 [In],direction : Direction [In],cbiv : UInt32 [In],piv : UInt8* [In],pphtransform : INFORMATIONCARD_CRYPTO_HANDLE** [In]
  fun GetCryptoTransform(hsymmetriccrypto : INFORMATIONCARD_CRYPTO_HANDLE*, mode : UInt32, padding : PaddingMode, feedbacksize : UInt32, direction : Direction, cbiv : UInt32, piv : UInt8*, pphtransform : INFORMATIONCARD_CRYPTO_HANDLE**) : HRESULT

  # Params # hsymmetriccrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],pphhash : INFORMATIONCARD_CRYPTO_HANDLE** [In]
  fun GetKeyedHash(hsymmetriccrypto : INFORMATIONCARD_CRYPTO_HANDLE*, pphhash : INFORMATIONCARD_CRYPTO_HANDLE**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbindata : UInt32 [In],pindata : UInt8* [In],pcboutdata : UInt32* [In],ppoutdata : UInt8** [In]
  fun TransformBlock(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbindata : UInt32, pindata : UInt8*, pcboutdata : UInt32*, ppoutdata : UInt8**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbindata : UInt32 [In],pindata : UInt8* [In],pcboutdata : UInt32* [In],ppoutdata : UInt8** [In]
  fun TransformFinalBlock(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbindata : UInt32, pindata : UInt8*, pcboutdata : UInt32*, ppoutdata : UInt8**) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbindata : UInt32 [In],pindata : UInt8* [In]
  fun HashCore(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbindata : UInt32, pindata : UInt8*) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cbindata : UInt32 [In],pindata : UInt8* [In],pcboutdata : UInt32* [In],ppoutdata : UInt8** [In]
  fun HashFinal(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbindata : UInt32, pindata : UInt8*, pcboutdata : UInt32*, ppoutdata : UInt8**) : HRESULT

  # Params # pallocmemory : GENERIC_XML_TOKEN* [In]
  fun FreeToken(pallocmemory : GENERIC_XML_TOKEN*) : LibC::BOOL

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In]
  fun CloseCryptoHandle(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*) : HRESULT

  # Params # hcrypto : INFORMATIONCARD_CRYPTO_HANDLE* [In],cblabel : UInt32 [In],plabel : UInt8* [In],cbnonce : UInt32 [In],pnonce : UInt8* [In],derivedkeylength : UInt32 [In],offset : UInt32 [In],algid : LibC::LPWSTR [In],pcbkey : UInt32* [In],ppkey : UInt8** [In]
  fun GenerateDerivedKey(hcrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cblabel : UInt32, plabel : UInt8*, cbnonce : UInt32, pnonce : UInt8*, derivedkeylength : UInt32, offset : UInt32, algid : LibC::LPWSTR, pcbkey : UInt32*, ppkey : UInt8**) : HRESULT

  # Params # dwparamtype : UInt32 [In],pparam : Void* [In],pcbtoken : UInt32* [In],pptoken : UInt8** [In]
  fun GetBrowserToken(dwparamtype : UInt32, pparam : Void*, pcbtoken : UInt32*, pptoken : UInt8**) : HRESULT
end
