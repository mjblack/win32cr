require "../../foundation.cr"
require "../../security.cr"
require "../../system/kernel.cr"
require "../../security/credentials.cr"
require "../../system/rpc.cr"
require "../../system/threading.cr"
require "../../security/cryptography.cr"
require "../../system/passwordmanagement.cr"
require "../../system/com.cr"
require "../../system/windowsprogramming.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:secur32.dll")]
@[Link(ldflags: "/DELAYLOAD:advapi32.dll")]
@[Link(ldflags: "/DELAYLOAD:sspicli.dll")]
@[Link(ldflags: "/DELAYLOAD:credui.dll")]
@[Link(ldflags: "/DELAYLOAD:schannel.dll")]
@[Link(ldflags: "/DELAYLOAD:tokenbinding.dll")]
@[Link(ldflags: "/DELAYLOAD:slc.dll")]
@[Link(ldflags: "/DELAYLOAD:slcext.dll")]
@[Link(ldflags: "/DELAYLOAD:slwga.dll")]
@[Link(ldflags: "/DELAYLOAD:clipc.dll")]
{% else %}
@[Link("secur32")]
@[Link("advapi32")]
@[Link("sspicli")]
@[Link("credui")]
@[Link("schannel")]
@[Link("tokenbinding")]
@[Link("slc")]
@[Link("slcext")]
@[Link("slwga")]
@[Link("clipc")]
{% end %}
lib LibWin32
  alias LsaHandle = LibC::IntPtrT

  ISSP_LEVEL = 32_u32
  ISSP_MODE = 1_u32
  SECPKG_FLAG_INTEGRITY = 1_u32
  SECPKG_FLAG_PRIVACY = 2_u32
  SECPKG_FLAG_TOKEN_ONLY = 4_u32
  SECPKG_FLAG_DATAGRAM = 8_u32
  SECPKG_FLAG_CONNECTION = 16_u32
  SECPKG_FLAG_MULTI_REQUIRED = 32_u32
  SECPKG_FLAG_CLIENT_ONLY = 64_u32
  SECPKG_FLAG_EXTENDED_ERROR = 128_u32
  SECPKG_FLAG_IMPERSONATION = 256_u32
  SECPKG_FLAG_ACCEPT_WIN32_NAME = 512_u32
  SECPKG_FLAG_STREAM = 1024_u32
  SECPKG_FLAG_NEGOTIABLE = 2048_u32
  SECPKG_FLAG_GSS_COMPATIBLE = 4096_u32
  SECPKG_FLAG_LOGON = 8192_u32
  SECPKG_FLAG_ASCII_BUFFERS = 16384_u32
  SECPKG_FLAG_FRAGMENT = 32768_u32
  SECPKG_FLAG_MUTUAL_AUTH = 65536_u32
  SECPKG_FLAG_DELEGATION = 131072_u32
  SECPKG_FLAG_READONLY_WITH_CHECKSUM = 262144_u32
  SECPKG_FLAG_RESTRICTED_TOKENS = 524288_u32
  SECPKG_FLAG_NEGO_EXTENDER = 1048576_u32
  SECPKG_FLAG_NEGOTIABLE2 = 2097152_u32
  SECPKG_FLAG_APPCONTAINER_PASSTHROUGH = 4194304_u32
  SECPKG_FLAG_APPCONTAINER_CHECKS = 8388608_u32
  SECPKG_FLAG_CREDENTIAL_ISOLATION_ENABLED = 16777216_u32
  SECPKG_FLAG_APPLY_LOOPBACK = 33554432_u32
  SECPKG_ID_NONE = 65535_u32
  SECPKG_CALLFLAGS_APPCONTAINER = 1_u32
  SECPKG_CALLFLAGS_APPCONTAINER_AUTHCAPABLE = 2_u32
  SECPKG_CALLFLAGS_FORCE_SUPPLIED = 4_u32
  SECPKG_CALLFLAGS_APPCONTAINER_UPNCAPABLE = 8_u32
  SECBUFFER_VERSION = 0_u32
  SECBUFFER_EMPTY = 0_u32
  SECBUFFER_DATA = 1_u32
  SECBUFFER_TOKEN = 2_u32
  SECBUFFER_PKG_PARAMS = 3_u32
  SECBUFFER_MISSING = 4_u32
  SECBUFFER_EXTRA = 5_u32
  SECBUFFER_STREAM_TRAILER = 6_u32
  SECBUFFER_STREAM_HEADER = 7_u32
  SECBUFFER_NEGOTIATION_INFO = 8_u32
  SECBUFFER_PADDING = 9_u32
  SECBUFFER_STREAM = 10_u32
  SECBUFFER_MECHLIST = 11_u32
  SECBUFFER_MECHLIST_SIGNATURE = 12_u32
  SECBUFFER_TARGET = 13_u32
  SECBUFFER_CHANNEL_BINDINGS = 14_u32
  SECBUFFER_CHANGE_PASS_RESPONSE = 15_u32
  SECBUFFER_TARGET_HOST = 16_u32
  SECBUFFER_ALERT = 17_u32
  SECBUFFER_APPLICATION_PROTOCOLS = 18_u32
  SECBUFFER_SRTP_PROTECTION_PROFILES = 19_u32
  SECBUFFER_SRTP_MASTER_KEY_IDENTIFIER = 20_u32
  SECBUFFER_TOKEN_BINDING = 21_u32
  SECBUFFER_PRESHARED_KEY = 22_u32
  SECBUFFER_PRESHARED_KEY_IDENTITY = 23_u32
  SECBUFFER_DTLS_MTU = 24_u32
  SECBUFFER_SEND_GENERIC_TLS_EXTENSION = 25_u32
  SECBUFFER_SUBSCRIBE_GENERIC_TLS_EXTENSION = 26_u32
  SECBUFFER_FLAGS = 27_u32
  SECBUFFER_TRAFFIC_SECRETS = 28_u32
  SECBUFFER_ATTRMASK = 4026531840_u32
  SECBUFFER_READONLY = 2147483648_u32
  SECBUFFER_READONLY_WITH_CHECKSUM = 268435456_u32
  SECBUFFER_RESERVED = 1610612736_u32
  SZ_ALG_MAX_SIZE = 64_u32
  SECURITY_NATIVE_DREP = 16_u32
  SECURITY_NETWORK_DREP = 0_u32
  SECPKG_CRED_BOTH = 3_u32
  SECPKG_CRED_DEFAULT = 4_u32
  SECPKG_CRED_RESERVED = 4026531840_u32
  SECPKG_CRED_AUTOLOGON_RESTRICTED = 16_u32
  SECPKG_CRED_PROCESS_POLICY_ONLY = 32_u32
  ISC_REQ_DELEGATE = 1_u32
  ISC_REQ_MUTUAL_AUTH = 2_u32
  ISC_REQ_REPLAY_DETECT = 4_u32
  ISC_REQ_SEQUENCE_DETECT = 8_u32
  ISC_REQ_CONFIDENTIALITY = 16_u32
  ISC_REQ_USE_SESSION_KEY = 32_u32
  ISC_REQ_PROMPT_FOR_CREDS = 64_u32
  ISC_REQ_USE_SUPPLIED_CREDS = 128_u32
  ISC_REQ_ALLOCATE_MEMORY = 256_u32
  ISC_REQ_USE_DCE_STYLE = 512_u32
  ISC_REQ_DATAGRAM = 1024_u32
  ISC_REQ_CONNECTION = 2048_u32
  ISC_REQ_CALL_LEVEL = 4096_u32
  ISC_REQ_FRAGMENT_SUPPLIED = 8192_u32
  ISC_REQ_EXTENDED_ERROR = 16384_u32
  ISC_REQ_STREAM = 32768_u32
  ISC_REQ_INTEGRITY = 65536_u32
  ISC_REQ_IDENTIFY = 131072_u32
  ISC_REQ_NULL_SESSION = 262144_u32
  ISC_REQ_MANUAL_CRED_VALIDATION = 524288_u32
  ISC_REQ_RESERVED1 = 1048576_u32
  ISC_REQ_FRAGMENT_TO_FIT = 2097152_u32
  ISC_REQ_FORWARD_CREDENTIALS = 4194304_u32
  ISC_REQ_NO_INTEGRITY = 8388608_u32
  ISC_REQ_USE_HTTP_STYLE = 16777216_u32
  ISC_REQ_UNVERIFIED_TARGET_NAME = 536870912_u32
  ISC_REQ_CONFIDENTIALITY_ONLY = 1073741824_u32
  ISC_REQ_MESSAGES = 4294967296_u64
  ISC_REQ_DEFERRED_CRED_VALIDATION = 8589934592_u64
  ISC_RET_DELEGATE = 1_u32
  ISC_RET_MUTUAL_AUTH = 2_u32
  ISC_RET_REPLAY_DETECT = 4_u32
  ISC_RET_SEQUENCE_DETECT = 8_u32
  ISC_RET_CONFIDENTIALITY = 16_u32
  ISC_RET_USE_SESSION_KEY = 32_u32
  ISC_RET_USED_COLLECTED_CREDS = 64_u32
  ISC_RET_USED_SUPPLIED_CREDS = 128_u32
  ISC_RET_ALLOCATED_MEMORY = 256_u32
  ISC_RET_USED_DCE_STYLE = 512_u32
  ISC_RET_DATAGRAM = 1024_u32
  ISC_RET_CONNECTION = 2048_u32
  ISC_RET_INTERMEDIATE_RETURN = 4096_u32
  ISC_RET_CALL_LEVEL = 8192_u32
  ISC_RET_EXTENDED_ERROR = 16384_u32
  ISC_RET_STREAM = 32768_u32
  ISC_RET_INTEGRITY = 65536_u32
  ISC_RET_IDENTIFY = 131072_u32
  ISC_RET_NULL_SESSION = 262144_u32
  ISC_RET_MANUAL_CRED_VALIDATION = 524288_u32
  ISC_RET_RESERVED1 = 1048576_u32
  ISC_RET_FRAGMENT_ONLY = 2097152_u32
  ISC_RET_FORWARD_CREDENTIALS = 4194304_u32
  ISC_RET_USED_HTTP_STYLE = 16777216_u32
  ISC_RET_NO_ADDITIONAL_TOKEN = 33554432_u32
  ISC_RET_REAUTHENTICATION = 134217728_u32
  ISC_RET_CONFIDENTIALITY_ONLY = 1073741824_u32
  ISC_RET_MESSAGES = 4294967296_u64
  ISC_RET_DEFERRED_CRED_VALIDATION = 8589934592_u64
  ASC_REQ_MUTUAL_AUTH = 2_u32
  ASC_REQ_CONFIDENTIALITY = 16_u32
  ASC_REQ_USE_SESSION_KEY = 32_u32
  ASC_REQ_SESSION_TICKET = 64_u32
  ASC_REQ_USE_DCE_STYLE = 512_u32
  ASC_REQ_DATAGRAM = 1024_u32
  ASC_REQ_CALL_LEVEL = 4096_u32
  ASC_REQ_FRAGMENT_SUPPLIED = 8192_u32
  ASC_REQ_INTEGRITY = 131072_u32
  ASC_REQ_LICENSING = 262144_u32
  ASC_REQ_IDENTIFY = 524288_u32
  ASC_REQ_ALLOW_NULL_SESSION = 1048576_u32
  ASC_REQ_ALLOW_NON_USER_LOGONS = 2097152_u32
  ASC_REQ_ALLOW_CONTEXT_REPLAY = 4194304_u32
  ASC_REQ_FRAGMENT_TO_FIT = 8388608_u32
  ASC_REQ_NO_TOKEN = 16777216_u32
  ASC_REQ_PROXY_BINDINGS = 67108864_u32
  ASC_REQ_ALLOW_MISSING_BINDINGS = 268435456_u32
  ASC_REQ_MESSAGES = 4294967296_u64
  ASC_RET_DELEGATE = 1_u32
  ASC_RET_MUTUAL_AUTH = 2_u32
  ASC_RET_REPLAY_DETECT = 4_u32
  ASC_RET_SEQUENCE_DETECT = 8_u32
  ASC_RET_CONFIDENTIALITY = 16_u32
  ASC_RET_USE_SESSION_KEY = 32_u32
  ASC_RET_SESSION_TICKET = 64_u32
  ASC_RET_ALLOCATED_MEMORY = 256_u32
  ASC_RET_USED_DCE_STYLE = 512_u32
  ASC_RET_DATAGRAM = 1024_u32
  ASC_RET_CONNECTION = 2048_u32
  ASC_RET_CALL_LEVEL = 8192_u32
  ASC_RET_THIRD_LEG_FAILED = 16384_u32
  ASC_RET_EXTENDED_ERROR = 32768_u32
  ASC_RET_STREAM = 65536_u32
  ASC_RET_INTEGRITY = 131072_u32
  ASC_RET_LICENSING = 262144_u32
  ASC_RET_IDENTIFY = 524288_u32
  ASC_RET_NULL_SESSION = 1048576_u32
  ASC_RET_ALLOW_NON_USER_LOGONS = 2097152_u32
  ASC_RET_ALLOW_CONTEXT_REPLAY = 4194304_u32
  ASC_RET_FRAGMENT_ONLY = 8388608_u32
  ASC_RET_NO_TOKEN = 16777216_u32
  ASC_RET_NO_ADDITIONAL_TOKEN = 33554432_u32
  ASC_RET_MESSAGES = 4294967296_u64
  SECPKG_CRED_ATTR_NAMES = 1_u32
  SECPKG_CRED_ATTR_SSI_PROVIDER = 2_u32
  SECPKG_CRED_ATTR_KDC_PROXY_SETTINGS = 3_u32
  SECPKG_CRED_ATTR_CERT = 4_u32
  SECPKG_CRED_ATTR_PAC_BYPASS = 5_u32
  KDC_PROXY_SETTINGS_V1 = 1_u32
  KDC_PROXY_SETTINGS_FLAGS_FORCEPROXY = 1_u32
  SECPKG_ATTR_PROTO_INFO = 7_u32
  SECPKG_ATTR_USER_FLAGS = 11_u32
  SECPKG_ATTR_USE_VALIDATED = 15_u32
  SECPKG_ATTR_CREDENTIAL_NAME = 16_u32
  SECPKG_ATTR_TARGET = 19_u32
  SECPKG_ATTR_AUTHENTICATION_ID = 20_u32
  SECPKG_ATTR_LOGOFF_TIME = 21_u32
  SECPKG_ATTR_NEGO_KEYS = 22_u32
  SECPKG_ATTR_PROMPTING_NEEDED = 24_u32
  SECPKG_ATTR_NEGO_PKG_INFO = 31_u32
  SECPKG_ATTR_NEGO_STATUS = 32_u32
  SECPKG_ATTR_CONTEXT_DELETED = 33_u32
  SECPKG_ATTR_APPLICATION_PROTOCOL = 35_u32
  SECPKG_ATTR_NEGOTIATED_TLS_EXTENSIONS = 36_u32
  SECPKG_ATTR_IS_LOOPBACK = 37_u32
  SECPKG_ATTR_NEGO_INFO_FLAG_NO_KERBEROS = 1_u32
  SECPKG_ATTR_NEGO_INFO_FLAG_NO_NTLM = 2_u32
  SECPKG_NEGOTIATION_COMPLETE = 0_u32
  SECPKG_NEGOTIATION_OPTIMISTIC = 1_u32
  SECPKG_NEGOTIATION_IN_PROGRESS = 2_u32
  SECPKG_NEGOTIATION_DIRECT = 3_u32
  SECPKG_NEGOTIATION_TRY_MULTICRED = 4_u32
  MAX_PROTOCOL_ID_SIZE = 255_u32
  SECQOP_WRAP_NO_ENCRYPT = 2147483649_u32
  SECQOP_WRAP_OOB_DATA = 1073741824_u32
  SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION = 1_u32
  SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_2 = 2_u32
  SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_3 = 3_u32
  SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_4 = 4_u32
  SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_5 = 5_u32
  SASL_OPTION_SEND_SIZE = 1_u32
  SASL_OPTION_RECV_SIZE = 2_u32
  SASL_OPTION_AUTHZ_STRING = 3_u32
  SASL_OPTION_AUTHZ_PROCESSING = 4_u32
  SEC_WINNT_AUTH_IDENTITY_VERSION_2 = 513_u32
  SEC_WINNT_AUTH_IDENTITY_VERSION = 512_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_PROCESS_ENCRYPTED = 16_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_PROTECTED = 32_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_USER_PROTECTED = 64_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_ENCRYPTED = 128_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_RESERVED = 65536_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_USER = 131072_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_DOMAIN = 262144_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_ID_PROVIDER = 524288_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_USE_MASK = 4278190080_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_SAVE = 2147483648_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_BY_CALLER = 2147483648_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_CHECKED = 1073741824_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_NO_CHECKBOX = 536870912_u32
  SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_LOAD = 268435456_u32
  SSPIPFC_CREDPROV_DO_NOT_SAVE = 1_u32
  SSPIPFC_SAVE_CRED_BY_CALLER = 1_u32
  SSPIPFC_NO_CHECKBOX = 2_u32
  SSPIPFC_CREDPROV_DO_NOT_LOAD = 4_u32
  SSPIPFC_USE_CREDUIBROKER = 8_u32
  NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1_u32
  NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2_u32
  NGC_DATA_FLAG_IS_SMARTCARD_DATA = 4_u32
  NGC_DATA_FLAG_IS_CLOUD_TRUST_CRED = 8_u32
  SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_LOGON = 1_u32
  SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_PROCESS = 2_u32
  SEC_WINNT_AUTH_IDENTITY_ENCRYPT_FOR_SYSTEM = 4_u32
  SEC_WINNT_AUTH_IDENTITY_MARSHALLED = 4_u32
  SEC_WINNT_AUTH_IDENTITY_ONLY = 8_u32
  SECPKG_OPTIONS_PERMANENT = 1_u32
  LOOKUP_VIEW_LOCAL_INFORMATION = 1_u32
  LOOKUP_TRANSLATE_NAMES = 2048_u32
  SECPKG_ATTR_ISSUER_LIST = 80_u32
  SECPKG_ATTR_REMOTE_CRED = 81_u32
  SECPKG_ATTR_SUPPORTED_ALGS = 86_u32
  SECPKG_ATTR_CIPHER_STRENGTHS = 87_u32
  SECPKG_ATTR_SUPPORTED_PROTOCOLS = 88_u32
  SECPKG_ATTR_MAPPED_CRED_ATTR = 92_u32
  SECPKG_ATTR_REMOTE_CERTIFICATES = 95_u32
  SECPKG_ATTR_CLIENT_CERT_POLICY = 96_u32
  SECPKG_ATTR_CC_POLICY_RESULT = 97_u32
  SECPKG_ATTR_USE_NCRYPT = 98_u32
  SECPKG_ATTR_LOCAL_CERT_INFO = 99_u32
  SECPKG_ATTR_CIPHER_INFO = 100_u32
  SECPKG_ATTR_REMOTE_CERT_CHAIN = 103_u32
  SECPKG_ATTR_UI_INFO = 104_u32
  SECPKG_ATTR_KEYING_MATERIAL = 107_u32
  SECPKG_ATTR_SRTP_PARAMETERS = 108_u32
  SECPKG_ATTR_TOKEN_BINDING = 109_u32
  SECPKG_ATTR_CONNECTION_INFO_EX = 110_u32
  SECPKG_ATTR_KEYING_MATERIAL_TOKEN_BINDING = 111_u32
  SECPKG_ATTR_KEYING_MATERIAL_INPROC = 112_u32
  SECPKG_ATTR_CERT_CHECK_RESULT = 113_u32
  SECPKG_ATTR_CERT_CHECK_RESULT_INPROC = 114_u32
  SECPKG_ATTR_SESSION_TICKET_KEYS = 115_u32
  SESSION_TICKET_INFO_V0 = 0_u32
  SESSION_TICKET_INFO_VERSION = 0_u32
  LSA_MODE_PASSWORD_PROTECTED = 1_i32
  LSA_MODE_INDIVIDUAL_ACCOUNTS = 2_i32
  LSA_MODE_MANDATORY_ACCESS = 4_i32
  LSA_MODE_LOG_FULL = 8_i32
  LSA_MAXIMUM_SID_COUNT = 256_i32
  LSA_MAXIMUM_ENUMERATION_LENGTH = 32000_u32
  LSA_CALL_LICENSE_SERVER = 2147483648_u32
  SE_ADT_OBJECT_ONLY = 1_u32
  SE_MAX_AUDIT_PARAMETERS = 32_u32
  SE_MAX_GENERIC_AUDIT_PARAMETERS = 28_u32
  SE_ADT_PARAMETERS_SELF_RELATIVE = 1_u32
  SE_ADT_PARAMETERS_SEND_TO_LSA = 2_u32
  SE_ADT_PARAMETER_EXTENSIBLE_AUDIT = 4_u32
  SE_ADT_PARAMETER_GENERIC_AUDIT = 8_u32
  SE_ADT_PARAMETER_WRITE_SYNCHRONOUS = 16_u32
  SE_ADT_POLICY_AUDIT_EVENT_TYPE_EX_BEGIN = 100_u32
  POLICY_AUDIT_EVENT_UNCHANGED = 0_i32
  POLICY_AUDIT_EVENT_SUCCESS = 1_i32
  POLICY_AUDIT_EVENT_FAILURE = 2_i32
  POLICY_AUDIT_EVENT_NONE = 4_i32
  POLICY_VIEW_LOCAL_INFORMATION = 1_i32
  POLICY_VIEW_AUDIT_INFORMATION = 2_i32
  POLICY_GET_PRIVATE_INFORMATION = 4_i32
  POLICY_TRUST_ADMIN = 8_i32
  POLICY_CREATE_ACCOUNT = 16_i32
  POLICY_CREATE_SECRET = 32_i32
  POLICY_CREATE_PRIVILEGE = 64_i32
  POLICY_SET_DEFAULT_QUOTA_LIMITS = 128_i32
  POLICY_SET_AUDIT_REQUIREMENTS = 256_i32
  POLICY_AUDIT_LOG_ADMIN = 512_i32
  POLICY_SERVER_ADMIN = 1024_i32
  POLICY_LOOKUP_NAMES = 2048_i32
  POLICY_NOTIFICATION = 4096_i32
  LSA_LOOKUP_ISOLATED_AS_LOCAL = 2147483648_u32
  LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID = 2147483648_u32
  LSA_LOOKUP_PREFER_INTERNET_NAMES = 1073741824_u32
  PER_USER_POLICY_UNCHANGED = 0_u32
  PER_USER_AUDIT_SUCCESS_INCLUDE = 1_u32
  PER_USER_AUDIT_SUCCESS_EXCLUDE = 2_u32
  PER_USER_AUDIT_FAILURE_INCLUDE = 4_u32
  PER_USER_AUDIT_FAILURE_EXCLUDE = 8_u32
  PER_USER_AUDIT_NONE = 16_u32
  POLICY_QOS_SCHANNEL_REQUIRED = 1_u32
  POLICY_QOS_OUTBOUND_INTEGRITY = 2_u32
  POLICY_QOS_OUTBOUND_CONFIDENTIALITY = 4_u32
  POLICY_QOS_INBOUND_INTEGRITY = 8_u32
  POLICY_QOS_INBOUND_CONFIDENTIALITY = 16_u32
  POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE = 32_u32
  POLICY_QOS_RAS_SERVER_ALLOWED = 64_u32
  POLICY_QOS_DHCP_SERVER_ALLOWED = 128_u32
  POLICY_KERBEROS_VALIDATE_CLIENT = 128_u32
  ACCOUNT_VIEW = 1_i32
  ACCOUNT_ADJUST_PRIVILEGES = 2_i32
  ACCOUNT_ADJUST_QUOTAS = 4_i32
  ACCOUNT_ADJUST_SYSTEM_ACCESS = 8_i32
  TRUSTED_QUERY_DOMAIN_NAME = 1_i32
  TRUSTED_QUERY_CONTROLLERS = 2_i32
  TRUSTED_SET_CONTROLLERS = 4_i32
  TRUSTED_QUERY_POSIX = 8_i32
  TRUSTED_SET_POSIX = 16_i32
  TRUSTED_SET_AUTH = 32_i32
  TRUSTED_QUERY_AUTH = 64_i32
  TRUST_ATTRIBUTE_TREE_PARENT = 4194304_u32
  TRUST_ATTRIBUTE_TREE_ROOT = 8388608_u32
  TRUST_ATTRIBUTES_VALID = 4278386687_u32
  TRUST_ATTRIBUTE_QUARANTINED_DOMAIN = 4_u32
  TRUST_ATTRIBUTE_TRUST_USES_RC4_ENCRYPTION = 128_u32
  TRUST_ATTRIBUTE_TRUST_USES_AES_KEYS = 256_u32
  TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION = 512_u32
  TRUST_ATTRIBUTE_PIM_TRUST = 1024_u32
  TRUST_ATTRIBUTE_CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION = 2048_u32
  TRUST_ATTRIBUTES_USER = 4278190080_u32
  LSA_FOREST_TRUST_RECORD_TYPE_UNRECOGNIZED = 2147483648_u32
  LSA_FTRECORD_DISABLED_REASONS = 65535_i32
  LSA_TLN_DISABLED_NEW = 1_i32
  LSA_TLN_DISABLED_ADMIN = 2_i32
  LSA_TLN_DISABLED_CONFLICT = 4_i32
  LSA_SID_DISABLED_ADMIN = 1_i32
  LSA_SID_DISABLED_CONFLICT = 2_i32
  LSA_NB_DISABLED_ADMIN = 4_i32
  LSA_NB_DISABLED_CONFLICT = 8_i32
  MAX_RECORDS_IN_FOREST_TRUST_INFO = 4000_u32
  SECRET_SET_VALUE = 1_i32
  SECRET_QUERY_VALUE = 2_i32
  LSA_GLOBAL_SECRET_PREFIX_LENGTH = 2_u32
  LSA_LOCAL_SECRET_PREFIX_LENGTH = 2_u32
  LSA_SECRET_MAXIMUM_COUNT = 4096_i32
  LSA_SECRET_MAXIMUM_LENGTH = 512_i32
  MAXIMUM_CAPES_PER_CAP = 127_u32
  CENTRAL_ACCESS_POLICY_OWNER_RIGHTS_PRESENT_FLAG = 1_u32
  CENTRAL_ACCESS_POLICY_STAGED_OWNER_RIGHTS_PRESENT_FLAG = 256_u32
  CENTRAL_ACCESS_POLICY_STAGED_FLAG = 65536_u32
  LSASETCAPS_RELOAD_FLAG = 1_u32
  LSASETCAPS_VALID_FLAG_MASK = 1_u32
  NEGOTIATE_MAX_PREFIX = 32_u32
  NEGOTIATE_ALLOW_NTLM = 268435456_u32
  NEGOTIATE_NEG_NTLM = 536870912_u32
  MAX_USER_RECORDS = 1000_u32
  Audit_System_SecurityStateChange = "0cce9210-69ae-11d9-bed3-505054503030"
  Audit_System_SecuritySubsystemExtension = "0cce9211-69ae-11d9-bed3-505054503030"
  Audit_System_Integrity = "0cce9212-69ae-11d9-bed3-505054503030"
  Audit_System_IPSecDriverEvents = "0cce9213-69ae-11d9-bed3-505054503030"
  Audit_System_Others = "0cce9214-69ae-11d9-bed3-505054503030"
  Audit_Logon_Logon = "0cce9215-69ae-11d9-bed3-505054503030"
  Audit_Logon_Logoff = "0cce9216-69ae-11d9-bed3-505054503030"
  Audit_Logon_AccountLockout = "0cce9217-69ae-11d9-bed3-505054503030"
  Audit_Logon_IPSecMainMode = "0cce9218-69ae-11d9-bed3-505054503030"
  Audit_Logon_IPSecQuickMode = "0cce9219-69ae-11d9-bed3-505054503030"
  Audit_Logon_IPSecUserMode = "0cce921a-69ae-11d9-bed3-505054503030"
  Audit_Logon_SpecialLogon = "0cce921b-69ae-11d9-bed3-505054503030"
  Audit_Logon_Others = "0cce921c-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_FileSystem = "0cce921d-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Registry = "0cce921e-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Kernel = "0cce921f-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Sam = "0cce9220-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_CertificationServices = "0cce9221-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_ApplicationGenerated = "0cce9222-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Handle = "0cce9223-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Share = "0cce9224-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_FirewallPacketDrops = "0cce9225-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_FirewallConnection = "0cce9226-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_Other = "0cce9227-69ae-11d9-bed3-505054503030"
  Audit_PrivilegeUse_Sensitive = "0cce9228-69ae-11d9-bed3-505054503030"
  Audit_PrivilegeUse_NonSensitive = "0cce9229-69ae-11d9-bed3-505054503030"
  Audit_PrivilegeUse_Others = "0cce922a-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_ProcessCreation = "0cce922b-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_ProcessTermination = "0cce922c-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_DpapiActivity = "0cce922d-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_RpcCall = "0cce922e-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_AuditPolicy = "0cce922f-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_AuthenticationPolicy = "0cce9230-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_AuthorizationPolicy = "0cce9231-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_MpsscvRulePolicy = "0cce9232-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_WfpIPSecPolicy = "0cce9233-69ae-11d9-bed3-505054503030"
  Audit_PolicyChange_Others = "0cce9234-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_UserAccount = "0cce9235-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_ComputerAccount = "0cce9236-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_SecurityGroup = "0cce9237-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_DistributionGroup = "0cce9238-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_ApplicationGroup = "0cce9239-69ae-11d9-bed3-505054503030"
  Audit_AccountManagement_Others = "0cce923a-69ae-11d9-bed3-505054503030"
  Audit_DSAccess_DSAccess = "0cce923b-69ae-11d9-bed3-505054503030"
  Audit_DsAccess_AdAuditChanges = "0cce923c-69ae-11d9-bed3-505054503030"
  Audit_Ds_Replication = "0cce923d-69ae-11d9-bed3-505054503030"
  Audit_Ds_DetailedReplication = "0cce923e-69ae-11d9-bed3-505054503030"
  Audit_AccountLogon_CredentialValidation = "0cce923f-69ae-11d9-bed3-505054503030"
  Audit_AccountLogon_Kerberos = "0cce9240-69ae-11d9-bed3-505054503030"
  Audit_AccountLogon_Others = "0cce9241-69ae-11d9-bed3-505054503030"
  Audit_AccountLogon_KerbCredentialValidation = "0cce9242-69ae-11d9-bed3-505054503030"
  Audit_Logon_NPS = "0cce9243-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_DetailedFileShare = "0cce9244-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_RemovableStorage = "0cce9245-69ae-11d9-bed3-505054503030"
  Audit_ObjectAccess_CbacStaging = "0cce9246-69ae-11d9-bed3-505054503030"
  Audit_Logon_Claims = "0cce9247-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_PnpActivity = "0cce9248-69ae-11d9-bed3-505054503030"
  Audit_Logon_Groups = "0cce9249-69ae-11d9-bed3-505054503030"
  Audit_DetailedTracking_TokenRightAdjusted = "0cce924a-69ae-11d9-bed3-505054503030"
  Audit_System = "69979848-797a-11d9-bed3-505054503030"
  Audit_Logon = "69979849-797a-11d9-bed3-505054503030"
  Audit_ObjectAccess = "6997984a-797a-11d9-bed3-505054503030"
  Audit_PrivilegeUse = "6997984b-797a-11d9-bed3-505054503030"
  Audit_DetailedTracking = "6997984c-797a-11d9-bed3-505054503030"
  Audit_PolicyChange = "6997984d-797a-11d9-bed3-505054503030"
  Audit_AccountManagement = "6997984e-797a-11d9-bed3-505054503030"
  Audit_DirectoryServiceAccess = "6997984f-797a-11d9-bed3-505054503030"
  Audit_AccountLogon = "69979850-797a-11d9-bed3-505054503030"
  DOMAIN_NO_LM_OWF_CHANGE = 64_i32
  MSV1_0_CHALLENGE_LENGTH = 8_u32
  MSV1_0_USER_SESSION_KEY_LENGTH = 16_u32
  MSV1_0_LANMAN_SESSION_KEY_LENGTH = 8_u32
  MSV1_0_USE_CLIENT_CHALLENGE = 128_u32
  MSV1_0_DISABLE_PERSONAL_FALLBACK = 4096_u32
  MSV1_0_ALLOW_FORCE_GUEST = 8192_u32
  MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED = 16384_u32
  MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY = 32768_u32
  MSV1_0_SUBAUTHENTICATION_DLL_EX = 1048576_u32
  MSV1_0_ALLOW_MSVCHAPV2 = 65536_u32
  MSV1_0_S4U2SELF = 131072_u32
  MSV1_0_CHECK_LOGONHOURS_FOR_S4U = 262144_u32
  MSV1_0_INTERNET_DOMAIN = 524288_u32
  MSV1_0_SUBAUTHENTICATION_DLL = 4278190080_u32
  MSV1_0_SUBAUTHENTICATION_DLL_SHIFT = 24_u32
  MSV1_0_MNS_LOGON = 16777216_u32
  MSV1_0_SUBAUTHENTICATION_DLL_RAS = 2_u32
  MSV1_0_SUBAUTHENTICATION_DLL_IIS = 132_u32
  MSV1_0_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2_u32
  LOGON_NTLMV2_ENABLED = 256_u32
  LOGON_NT_V2 = 2048_u32
  LOGON_LM_V2 = 4096_u32
  LOGON_NTLM_V2 = 8192_u32
  LOGON_OPTIMIZED = 16384_u32
  LOGON_WINLOGON = 32768_u32
  LOGON_PKINIT = 65536_u32
  LOGON_NO_OPTIMIZED = 131072_u32
  LOGON_NO_ELEVATION = 262144_u32
  LOGON_MANAGED_SERVICE = 524288_u32
  MSV1_0_SUBAUTHENTICATION_FLAGS = 4278190080_u32
  LOGON_GRACE_LOGON = 16777216_u32
  MSV1_0_OWF_PASSWORD_LENGTH = 16_u32
  MSV1_0_SHA_PASSWORD_LENGTH = 20_u32
  MSV1_0_CREDENTIAL_KEY_LENGTH = 20_u32
  MSV1_0_CRED_REMOVED = 4_u32
  MSV1_0_CRED_CREDKEY_PRESENT = 8_u32
  MSV1_0_CRED_SHA_PRESENT = 16_u32
  MSV1_0_CRED_VERSION_V2 = 2_u32
  MSV1_0_CRED_VERSION_V3 = 4_u32
  MSV1_0_CRED_VERSION_IUM = 4294901761_u32
  MSV1_0_CRED_VERSION_REMOTE = 4294901762_u32
  MSV1_0_CRED_VERSION_ARSO = 4294901763_u32
  MSV1_0_CRED_VERSION_RESERVED_1 = 4294967294_u32
  MSV1_0_CRED_VERSION_INVALID = 4294967295_u32
  MSV1_0_NTLM3_RESPONSE_LENGTH = 16_u32
  MSV1_0_NTLM3_OWF_LENGTH = 16_u32
  MSV1_0_MAX_NTLM3_LIFE = 1800_u32
  MSV1_0_MAX_AVL_SIZE = 64000_u32
  MSV1_0_AV_FLAG_FORCE_GUEST = 1_u32
  MSV1_0_AV_FLAG_MIC_HANDSHAKE_MESSAGES = 2_u32
  MSV1_0_AV_FLAG_UNVERIFIED_TARGET = 4_u32
  RTL_ENCRYPT_MEMORY_SIZE = 8_u32
  RTL_ENCRYPT_OPTION_CROSS_PROCESS = 1_u32
  RTL_ENCRYPT_OPTION_SAME_LOGON = 2_u32
  RTL_ENCRYPT_OPTION_FOR_SYSTEM = 4_u32
  KERBEROS_VERSION = 5_u32
  KERBEROS_REVISION = 6_u32
  KERB_ETYPE_AES128_CTS_HMAC_SHA1_96 = 17_u32
  KERB_ETYPE_AES256_CTS_HMAC_SHA1_96 = 18_u32
  KERB_ETYPE_RC4_PLAIN2 = -129_i32
  KERB_ETYPE_RC4_LM = -130_i32
  KERB_ETYPE_RC4_SHA = -131_i32
  KERB_ETYPE_DES_PLAIN = -132_i32
  KERB_ETYPE_RC4_HMAC_OLD = -133_i32
  KERB_ETYPE_RC4_PLAIN_OLD = -134_i32
  KERB_ETYPE_RC4_HMAC_OLD_EXP = -135_i32
  KERB_ETYPE_RC4_PLAIN_OLD_EXP = -136_i32
  KERB_ETYPE_RC4_PLAIN = -140_i32
  KERB_ETYPE_RC4_PLAIN_EXP = -141_i32
  KERB_ETYPE_AES128_CTS_HMAC_SHA1_96_PLAIN = -148_i32
  KERB_ETYPE_AES256_CTS_HMAC_SHA1_96_PLAIN = -149_i32
  KERB_ETYPE_DSA_SHA1_CMS = 9_u32
  KERB_ETYPE_RSA_MD5_CMS = 10_u32
  KERB_ETYPE_RSA_SHA1_CMS = 11_u32
  KERB_ETYPE_RC2_CBC_ENV = 12_u32
  KERB_ETYPE_RSA_ENV = 13_u32
  KERB_ETYPE_RSA_ES_OEAP_ENV = 14_u32
  KERB_ETYPE_DES_EDE3_CBC_ENV = 15_u32
  KERB_ETYPE_DSA_SIGN = 8_u32
  KERB_ETYPE_RSA_PRIV = 9_u32
  KERB_ETYPE_RSA_PUB = 10_u32
  KERB_ETYPE_RSA_PUB_MD5 = 11_u32
  KERB_ETYPE_RSA_PUB_SHA1 = 12_u32
  KERB_ETYPE_PKCS7_PUB = 13_u32
  KERB_ETYPE_DES3_CBC_MD5 = 5_u32
  KERB_ETYPE_DES3_CBC_SHA1 = 7_u32
  KERB_ETYPE_DES3_CBC_SHA1_KD = 16_u32
  KERB_ETYPE_DES_CBC_MD5_NT = 20_u32
  KERB_ETYPE_RC4_HMAC_NT_EXP = 24_u32
  KERB_CHECKSUM_NONE = 0_u32
  KERB_CHECKSUM_CRC32 = 1_u32
  KERB_CHECKSUM_MD4 = 2_u32
  KERB_CHECKSUM_KRB_DES_MAC = 4_u32
  KERB_CHECKSUM_KRB_DES_MAC_K = 5_u32
  KERB_CHECKSUM_MD5 = 7_u32
  KERB_CHECKSUM_MD5_DES = 8_u32
  KERB_CHECKSUM_SHA1_NEW = 14_u32
  KERB_CHECKSUM_HMAC_SHA1_96_AES128 = 15_u32
  KERB_CHECKSUM_HMAC_SHA1_96_AES256 = 16_u32
  KERB_CHECKSUM_LM = -130_i32
  KERB_CHECKSUM_SHA1 = -131_i32
  KERB_CHECKSUM_REAL_CRC32 = -132_i32
  KERB_CHECKSUM_DES_MAC = -133_i32
  KERB_CHECKSUM_DES_MAC_MD5 = -134_i32
  KERB_CHECKSUM_MD25 = -135_i32
  KERB_CHECKSUM_RC4_MD5 = -136_i32
  KERB_CHECKSUM_MD5_HMAC = -137_i32
  KERB_CHECKSUM_HMAC_MD5 = -138_i32
  KERB_CHECKSUM_HMAC_SHA1_96_AES128_Ki = -150_i32
  KERB_CHECKSUM_HMAC_SHA1_96_AES256_Ki = -151_i32
  AUTH_REQ_ALLOW_FORWARDABLE = 1_u32
  AUTH_REQ_ALLOW_PROXIABLE = 2_u32
  AUTH_REQ_ALLOW_POSTDATE = 4_u32
  AUTH_REQ_ALLOW_RENEWABLE = 8_u32
  AUTH_REQ_ALLOW_NOADDRESS = 16_u32
  AUTH_REQ_ALLOW_ENC_TKT_IN_SKEY = 32_u32
  AUTH_REQ_ALLOW_VALIDATE = 64_u32
  AUTH_REQ_VALIDATE_CLIENT = 128_u32
  AUTH_REQ_OK_AS_DELEGATE = 256_u32
  AUTH_REQ_PREAUTH_REQUIRED = 512_u32
  AUTH_REQ_TRANSITIVE_TRUST = 1024_u32
  AUTH_REQ_ALLOW_S4U_DELEGATE = 2048_u32
  KERB_TICKET_FLAGS_name_canonicalize = 65536_u32
  KERB_TICKET_FLAGS_cname_in_pa_data = 262144_u32
  KERB_TICKET_FLAGS_enc_pa_rep = 65536_u32
  KRB_NT_UNKNOWN = 0_u32
  KRB_NT_PRINCIPAL = 1_u32
  KRB_NT_PRINCIPAL_AND_ID = -131_i32
  KRB_NT_SRV_INST = 2_u32
  KRB_NT_SRV_INST_AND_ID = -132_i32
  KRB_NT_SRV_HST = 3_u32
  KRB_NT_SRV_XHST = 4_u32
  KRB_NT_UID = 5_u32
  KRB_NT_ENTERPRISE_PRINCIPAL = 10_u32
  KRB_NT_WELLKNOWN = 11_u32
  KRB_NT_ENT_PRINCIPAL_AND_ID = -130_i32
  KRB_NT_MS_PRINCIPAL = -128_i32
  KRB_NT_MS_PRINCIPAL_AND_ID = -129_i32
  KRB_NT_MS_BRANCH_ID = -133_i32
  KRB_NT_X500_PRINCIPAL = 6_u32
  KERB_WRAP_NO_ENCRYPT = 2147483649_u32
  KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1_u32
  KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2_u32
  KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_DUPLICATES = 1_u32
  KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2_u32
  KERB_CERTIFICATE_S4U_LOGON_FLAG_FAIL_IF_NT_AUTH_POLICY_REQUIRED = 4_u32
  KERB_CERTIFICATE_S4U_LOGON_FLAG_IDENTIFY = 8_u32
  KERB_LOGON_FLAG_ALLOW_EXPIRED_TICKET = 1_u32
  KERB_LOGON_FLAG_REDIRECTED = 2_u32
  KERB_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2_u32
  KERB_S4U_LOGON_FLAG_IDENTIFY = 8_u32
  KERB_USE_DEFAULT_TICKET_FLAGS = 0_u32
  KERB_RETRIEVE_TICKET_DEFAULT = 0_u32
  KERB_RETRIEVE_TICKET_DONT_USE_CACHE = 1_u32
  KERB_RETRIEVE_TICKET_USE_CACHE_ONLY = 2_u32
  KERB_RETRIEVE_TICKET_USE_CREDHANDLE = 4_u32
  KERB_RETRIEVE_TICKET_AS_KERB_CRED = 8_u32
  KERB_RETRIEVE_TICKET_WITH_SEC_CRED = 16_u32
  KERB_RETRIEVE_TICKET_CACHE_TICKET = 32_u32
  KERB_RETRIEVE_TICKET_MAX_LIFETIME = 64_u32
  KERB_ETYPE_DEFAULT = 0_u32
  KERB_PURGE_ALL_TICKETS = 1_u32
  KERB_S4U2PROXY_CACHE_ENTRY_INFO_FLAG_NEGATIVE = 1_u32
  KERB_S4U2PROXY_CRED_FLAG_NEGATIVE = 1_u32
  KERB_REFRESH_POLICY_KERBEROS = 1_u32
  KERB_REFRESH_POLICY_KDC = 2_u32
  KERB_CLOUD_KERBEROS_DEBUG_DATA_VERSION = 0_u32
  DS_UNKNOWN_ADDRESS_TYPE = 0_u32
  KERB_SETPASS_USE_LOGONID = 1_u32
  KERB_SETPASS_USE_CREDHANDLE = 2_u32
  KERB_DECRYPT_FLAG_DEFAULT_KEY = 1_u32
  KERB_REFRESH_SCCRED_RELEASE = 0_u32
  KERB_REFRESH_SCCRED_GETTGT = 1_u32
  KERB_TRANSFER_CRED_WITH_TICKETS = 1_u32
  KERB_TRANSFER_CRED_CLEANUP_CREDENTIALS = 2_u32
  KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE_FLAG_DAC_DISABLED = 1_u32
  AUDIT_SET_SYSTEM_POLICY = 1_u32
  AUDIT_QUERY_SYSTEM_POLICY = 2_u32
  AUDIT_SET_USER_POLICY = 4_u32
  AUDIT_QUERY_USER_POLICY = 8_u32
  AUDIT_ENUMERATE_USERS = 16_u32
  AUDIT_SET_MISC_POLICY = 32_u32
  AUDIT_QUERY_MISC_POLICY = 64_u32
  SECPKG_CLIENT_PROCESS_TERMINATED = 1_u32
  SECPKG_CLIENT_THREAD_TERMINATED = 2_u32
  SECPKG_CALL_KERNEL_MODE = 1_u32
  SECPKG_CALL_ANSI = 2_u32
  SECPKG_CALL_URGENT = 4_u32
  SECPKG_CALL_RECURSIVE = 8_u32
  SECPKG_CALL_IN_PROC = 16_u32
  SECPKG_CALL_CLEANUP = 32_u32
  SECPKG_CALL_WOWCLIENT = 64_u32
  SECPKG_CALL_THREAD_TERM = 128_u32
  SECPKG_CALL_PROCESS_TERM = 256_u32
  SECPKG_CALL_IS_TCB = 512_u32
  SECPKG_CALL_NETWORK_ONLY = 1024_u32
  SECPKG_CALL_WINLOGON = 2048_u32
  SECPKG_CALL_ASYNC_UPDATE = 4096_u32
  SECPKG_CALL_SYSTEM_PROC = 8192_u32
  SECPKG_CALL_NEGO = 16384_u32
  SECPKG_CALL_NEGO_EXTENDER = 32768_u32
  SECPKG_CALL_BUFFER_MARSHAL = 65536_u32
  SECPKG_CALL_UNLOCK = 131072_u32
  SECPKG_CALL_CLOUDAP_CONNECT = 262144_u32
  SECPKG_CALL_WOWX86 = 64_u32
  SECPKG_CALL_WOWA32 = 262144_u32
  SECPKG_CREDENTIAL_VERSION = 201_u32
  SECPKG_CREDENTIAL_FLAGS_CALLER_HAS_TCB = 1_u32
  SECPKG_CREDENTIAL_FLAGS_CREDMAN_CRED = 2_u32
  SECPKG_SURROGATE_LOGON_VERSION_1 = 1_u32
  SECBUFFER_UNMAPPED = 1073741824_u32
  SECBUFFER_KERNEL_MAP = 536870912_u32
  PRIMARY_CRED_CLEAR_PASSWORD = 1_u32
  PRIMARY_CRED_OWF_PASSWORD = 2_u32
  PRIMARY_CRED_UPDATE = 4_u32
  PRIMARY_CRED_CACHED_LOGON = 8_u32
  PRIMARY_CRED_LOGON_NO_TCB = 16_u32
  PRIMARY_CRED_LOGON_LUA = 32_u32
  PRIMARY_CRED_INTERACTIVE_SMARTCARD_LOGON = 64_u32
  PRIMARY_CRED_REFRESH_NEEDED = 128_u32
  PRIMARY_CRED_INTERNET_USER = 256_u32
  PRIMARY_CRED_AUTH_ID = 512_u32
  PRIMARY_CRED_DO_NOT_SPLIT = 1024_u32
  PRIMARY_CRED_PROTECTED_USER = 2048_u32
  PRIMARY_CRED_EX = 4096_u32
  PRIMARY_CRED_TRANSFER = 8192_u32
  PRIMARY_CRED_RESTRICTED_TS = 16384_u32
  PRIMARY_CRED_PACKED_CREDS = 32768_u32
  PRIMARY_CRED_ENTERPRISE_INTERNET_USER = 65536_u32
  PRIMARY_CRED_ENCRYPTED_CREDGUARD_PASSWORD = 131072_u32
  PRIMARY_CRED_CACHED_INTERACTIVE_LOGON = 262144_u32
  PRIMARY_CRED_INTERACTIVE_NGC_LOGON = 524288_u32
  PRIMARY_CRED_INTERACTIVE_FIDO_LOGON = 1048576_u32
  PRIMARY_CRED_ARSO_LOGON = 2097152_u32
  PRIMARY_CRED_SUPPLEMENTAL = 4194304_u32
  PRIMARY_CRED_LOGON_PACKAGE_SHIFT = 24_u32
  PRIMARY_CRED_PACKAGE_MASK = 4278190080_u32
  SECPKG_PRIMARY_CRED_EX_FLAGS_EX_DELEGATION_TOKEN = 1_u32
  MAX_CRED_SIZE = 1024_u32
  SECPKG_STATE_ENCRYPTION_PERMITTED = 1_u32
  SECPKG_STATE_STRONG_ENCRYPTION_PERMITTED = 2_u32
  SECPKG_STATE_DOMAIN_CONTROLLER = 4_u32
  SECPKG_STATE_WORKSTATION = 8_u32
  SECPKG_STATE_STANDALONE = 16_u32
  SECPKG_STATE_CRED_ISOLATION_ENABLED = 32_u32
  SECPKG_STATE_RESERVED_1 = 2147483648_u32
  SECPKG_MAX_OID_LENGTH = 32_u32
  SECPKG_ATTR_SASL_CONTEXT = 65536_u32
  SECPKG_ATTR_THUNK_ALL = 65536_u32
  UNDERSTANDS_LONG_NAMES = 1_u32
  NO_LONG_NAMES = 2_u32
  SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_OPTIMISTIC_LOGON = 1_u32
  SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_CLEANUP_CREDENTIALS = 2_u32
  SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_TO_SSO_SESSION = 4_u32
  NOTIFIER_FLAG_NEW_THREAD = 1_u32
  NOTIFIER_FLAG_ONE_SHOT = 2_u32
  NOTIFIER_FLAG_SECONDS = 2147483648_u32
  NOTIFIER_TYPE_INTERVAL = 1_u32
  NOTIFIER_TYPE_HANDLE_WAIT = 2_u32
  NOTIFIER_TYPE_STATE_CHANGE = 3_u32
  NOTIFIER_TYPE_NOTIFY_EVENT = 4_u32
  NOTIFIER_TYPE_IMMEDIATE = 16_u32
  NOTIFY_CLASS_PACKAGE_CHANGE = 1_u32
  NOTIFY_CLASS_ROLE_CHANGE = 2_u32
  NOTIFY_CLASS_DOMAIN_CHANGE = 3_u32
  NOTIFY_CLASS_REGISTRY_CHANGE = 4_u32
  LSA_QUERY_CLIENT_PRELOGON_SESSION_ID = 1_u32
  CREDP_FLAGS_IN_PROCESS = 1_u32
  CREDP_FLAGS_USE_MIDL_HEAP = 2_u32
  CREDP_FLAGS_DONT_CACHE_TI = 4_u32
  CREDP_FLAGS_CLEAR_PASSWORD = 8_u32
  CREDP_FLAGS_USER_ENCRYPTED_PASSWORD = 16_u32
  CREDP_FLAGS_TRUSTED_CALLER = 32_u32
  CREDP_FLAGS_VALIDATE_PROXY_TARGET = 64_u32
  CRED_MARSHALED_TI_SIZE_SIZE = 12_u32
  SECPKG_UNICODE_ATTRIBUTE = 2147483648_u32
  SECPKG_ANSI_ATTRIBUTE = 0_u32
  SECPKG_CREDENTIAL_ATTRIBUTE = 0_u32
  SECPKG_INTERFACE_VERSION = 65536_u32
  SECPKG_INTERFACE_VERSION_2 = 131072_u32
  SECPKG_INTERFACE_VERSION_3 = 262144_u32
  SECPKG_INTERFACE_VERSION_4 = 524288_u32
  SECPKG_INTERFACE_VERSION_5 = 1048576_u32
  SECPKG_INTERFACE_VERSION_6 = 2097152_u32
  SECPKG_INTERFACE_VERSION_7 = 4194304_u32
  SECPKG_INTERFACE_VERSION_8 = 8388608_u32
  SECPKG_INTERFACE_VERSION_9 = 16777216_u32
  SECPKG_INTERFACE_VERSION_10 = 33554432_u32
  UNISP_RPC_ID = 14_u32
  RCRED_STATUS_NOCRED = 0_u32
  RCRED_CRED_EXISTS = 1_u32
  RCRED_STATUS_UNKNOWN_ISSUER = 2_u32
  LCRED_STATUS_NOCRED = 0_u32
  LCRED_CRED_EXISTS = 1_u32
  LCRED_STATUS_UNKNOWN_ISSUER = 2_u32
  SECPKGCONTEXT_CONNECTION_INFO_EX_V1 = 1_u32
  SECPKGCONTEXT_CIPHERINFO_V1 = 1_u32
  SSL_SESSION_RECONNECT = 1_u32
  KERN_CONTEXT_CERT_INFO_V1 = 0_u32
  ENABLE_TLS_CLIENT_EARLY_START = 1_u32
  SCH_CRED_V1 = 1_u32
  SCH_CRED_V2 = 2_u32
  SCH_CRED_VERSION = 2_u32
  SCH_CRED_V3 = 3_u32
  SCHANNEL_CRED_VERSION = 4_u32
  SCH_CREDENTIALS_VERSION = 5_u32
  TLS_PARAMS_OPTIONAL = 1_u32
  SCH_CRED_MAX_SUPPORTED_PARAMETERS = 16_u32
  SCH_CRED_MAX_SUPPORTED_ALPN_IDS = 16_u32
  SCH_CRED_MAX_SUPPORTED_CRYPTO_SETTINGS = 16_u32
  SCH_CRED_MAX_SUPPORTED_CHAINING_MODES = 16_u32
  SCH_MAX_EXT_SUBSCRIPTIONS = 2_u32
  SCH_CRED_FORMAT_CERT_CONTEXT = 0_u32
  SCH_CRED_FORMAT_CERT_HASH = 1_u32
  SCH_CRED_FORMAT_CERT_HASH_STORE = 2_u32
  SCH_CRED_MAX_STORE_NAME_SIZE = 128_u32
  SCH_CRED_MAX_SUPPORTED_ALGS = 256_u32
  SCH_CRED_MAX_SUPPORTED_CERTS = 100_u32
  SCH_MACHINE_CERT_HASH = 1_u32
  SCH_CRED_DISABLE_RECONNECTS = 128_u32
  SCH_CRED_RESTRICTED_ROOTS = 8192_u32
  SCH_CRED_REVOCATION_CHECK_CACHE_ONLY = 16384_u32
  SCH_CRED_CACHE_ONLY_URL_RETRIEVAL = 32768_u32
  SCH_CRED_MEMORY_STORE_CERT = 65536_u32
  SCH_CRED_SNI_CREDENTIAL = 524288_u32
  SCH_CRED_SNI_ENABLE_OCSP = 1048576_u32
  SCH_USE_DTLS_ONLY = 16777216_u32
  SCH_ALLOW_NULL_ENCRYPTION = 33554432_u32
  SCH_CRED_DEFERRED_CRED_VALIDATION = 67108864_u32
  SCHANNEL_RENEGOTIATE = 0_u32
  SCHANNEL_SHUTDOWN = 1_u32
  SCHANNEL_ALERT = 2_u32
  SCHANNEL_SESSION = 3_u32
  TLS1_ALERT_CLOSE_NOTIFY = 0_u32
  TLS1_ALERT_UNEXPECTED_MESSAGE = 10_u32
  TLS1_ALERT_BAD_RECORD_MAC = 20_u32
  TLS1_ALERT_DECRYPTION_FAILED = 21_u32
  TLS1_ALERT_RECORD_OVERFLOW = 22_u32
  TLS1_ALERT_DECOMPRESSION_FAIL = 30_u32
  TLS1_ALERT_HANDSHAKE_FAILURE = 40_u32
  TLS1_ALERT_BAD_CERTIFICATE = 42_u32
  TLS1_ALERT_UNSUPPORTED_CERT = 43_u32
  TLS1_ALERT_CERTIFICATE_REVOKED = 44_u32
  TLS1_ALERT_CERTIFICATE_EXPIRED = 45_u32
  TLS1_ALERT_CERTIFICATE_UNKNOWN = 46_u32
  TLS1_ALERT_ILLEGAL_PARAMETER = 47_u32
  TLS1_ALERT_UNKNOWN_CA = 48_u32
  TLS1_ALERT_ACCESS_DENIED = 49_u32
  TLS1_ALERT_DECODE_ERROR = 50_u32
  TLS1_ALERT_DECRYPT_ERROR = 51_u32
  TLS1_ALERT_EXPORT_RESTRICTION = 60_u32
  TLS1_ALERT_PROTOCOL_VERSION = 70_u32
  TLS1_ALERT_INSUFFIENT_SECURITY = 71_u32
  TLS1_ALERT_INTERNAL_ERROR = 80_u32
  TLS1_ALERT_USER_CANCELED = 90_u32
  TLS1_ALERT_NO_RENEGOTIATION = 100_u32
  TLS1_ALERT_UNSUPPORTED_EXT = 110_u32
  TLS1_ALERT_UNKNOWN_PSK_IDENTITY = 115_u32
  TLS1_ALERT_NO_APP_PROTOCOL = 120_u32
  SP_PROT_PCT1_SERVER = 1_u32
  SP_PROT_PCT1_CLIENT = 2_u32
  SP_PROT_SSL2_SERVER = 4_u32
  SP_PROT_SSL2_CLIENT = 8_u32
  SP_PROT_SSL3_SERVER = 16_u32
  SP_PROT_SSL3_CLIENT = 32_u32
  SP_PROT_TLS1_SERVER = 64_u32
  SP_PROT_TLS1_CLIENT = 128_u32
  SP_PROT_UNI_SERVER = 1073741824_u32
  SP_PROT_UNI_CLIENT = 2147483648_u32
  SP_PROT_ALL = 4294967295_u32
  SP_PROT_NONE = 0_u32
  SP_PROT_TLS1_0_SERVER = 64_u32
  SP_PROT_TLS1_0_CLIENT = 128_u32
  SP_PROT_TLS1_1_SERVER = 256_u32
  SP_PROT_TLS1_1_CLIENT = 512_u32
  SP_PROT_TLS1_2_SERVER = 1024_u32
  SP_PROT_TLS1_2_CLIENT = 2048_u32
  SP_PROT_TLS1_3_SERVER = 4096_u32
  SP_PROT_TLS1_3_CLIENT = 8192_u32
  SP_PROT_DTLS_SERVER = 65536_u32
  SP_PROT_DTLS_CLIENT = 131072_u32
  SP_PROT_DTLS1_0_SERVER = 65536_u32
  SP_PROT_DTLS1_0_CLIENT = 131072_u32
  SP_PROT_DTLS1_2_SERVER = 262144_u32
  SP_PROT_DTLS1_2_CLIENT = 524288_u32
  SP_PROT_TLS1_3PLUS_SERVER = 4096_u32
  SP_PROT_TLS1_3PLUS_CLIENT = 8192_u32
  SCHANNEL_SECRET_TYPE_CAPI = 1_u32
  SCHANNEL_SECRET_PRIVKEY = 2_u32
  SCH_CRED_X509_CERTCHAIN = 1_u32
  SCH_CRED_X509_CAPI = 2_u32
  SCH_CRED_CERT_CONTEXT = 3_u32
  SL_SYSTEM_STATE_REBOOT_POLICY_FOUND = 1_u32
  SL_SYSTEM_STATE_TAMPERED = 2_u32
  SL_REARM_REBOOT_REQUIRED = 1_u32
  SPP_MIGRATION_GATHER_MIGRATABLE_APPS = 1_u32
  SPP_MIGRATION_GATHER_ACTIVATED_WINDOWS_STATE = 2_u32
  SPP_MIGRATION_GATHER_ALL = 4294967295_u32
  USER_ACCOUNT_DISABLED = 1_u32
  USER_HOME_DIRECTORY_REQUIRED = 2_u32
  USER_PASSWORD_NOT_REQUIRED = 4_u32
  USER_TEMP_DUPLICATE_ACCOUNT = 8_u32
  USER_NORMAL_ACCOUNT = 16_u32
  USER_MNS_LOGON_ACCOUNT = 32_u32
  USER_INTERDOMAIN_TRUST_ACCOUNT = 64_u32
  USER_WORKSTATION_TRUST_ACCOUNT = 128_u32
  USER_SERVER_TRUST_ACCOUNT = 256_u32
  USER_DONT_EXPIRE_PASSWORD = 512_u32
  USER_ACCOUNT_AUTO_LOCKED = 1024_u32
  USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 2048_u32
  USER_SMARTCARD_REQUIRED = 4096_u32
  USER_TRUSTED_FOR_DELEGATION = 8192_u32
  USER_NOT_DELEGATED = 16384_u32
  USER_USE_DES_KEY_ONLY = 32768_u32
  USER_DONT_REQUIRE_PREAUTH = 65536_u32
  USER_PASSWORD_EXPIRED = 131072_u32
  USER_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 262144_u32
  USER_NO_AUTH_DATA_REQUIRED = 524288_u32
  USER_PARTIAL_SECRETS_ACCOUNT = 1048576_u32
  USER_USE_AES_KEYS = 2097152_u32
  SAM_DAYS_PER_WEEK = 7_u32
  USER_ALL_PARAMETERS = 2097152_u32
  CLEAR_BLOCK_LENGTH = 8_u32
  CYPHER_BLOCK_LENGTH = 8_u32
  MSV1_0_VALIDATION_LOGOFF_TIME = 1_u32
  MSV1_0_VALIDATION_KICKOFF_TIME = 2_u32
  MSV1_0_VALIDATION_LOGON_SERVER = 4_u32
  MSV1_0_VALIDATION_LOGON_DOMAIN = 8_u32
  MSV1_0_VALIDATION_SESSION_KEY = 16_u32
  MSV1_0_VALIDATION_USER_FLAGS = 32_u32
  MSV1_0_VALIDATION_USER_ID = 64_u32
  MSV1_0_SUBAUTH_ACCOUNT_DISABLED = 1_u32
  MSV1_0_SUBAUTH_PASSWORD = 2_u32
  MSV1_0_SUBAUTH_WORKSTATIONS = 4_u32
  MSV1_0_SUBAUTH_LOGON_HOURS = 8_u32
  MSV1_0_SUBAUTH_ACCOUNT_EXPIRY = 16_u32
  MSV1_0_SUBAUTH_PASSWORD_EXPIRY = 32_u32
  MSV1_0_SUBAUTH_ACCOUNT_TYPE = 64_u32
  MSV1_0_SUBAUTH_LOCKOUT = 128_u32
  SL_MDOLLAR_ZONE = 40960_u32
  SL_SERVER_ZONE = 45056_u32
  SL_MSCH_ZONE = 49152_u32
  SL_INTERNAL_ZONE = 57344_u32
  SL_CLIENTAPI_ZONE = 61440_u32
  FACILITY_SL_ITF = 4_u32
  FACILITY_WINDOWS_STORE = 63_u32
  SL_E_SRV_INVALID_PUBLISH_LICENSE = -1073434623_i32
  SL_E_SRV_INVALID_PRODUCT_KEY_LICENSE = -1073434622_i32
  SL_E_SRV_INVALID_RIGHTS_ACCOUNT_LICENSE = -1073434621_i32
  SL_E_SRV_INVALID_LICENSE_STRUCTURE = -1073434620_i32
  SL_E_SRV_AUTHORIZATION_FAILED = -1073434619_i32
  SL_E_SRV_INVALID_BINDING = -1073434618_i32
  SL_E_SRV_SERVER_PONG = -1073434617_i32
  SL_E_SRV_INVALID_PAYLOAD = -1073434616_i32
  SL_E_SRV_INVALID_SECURITY_PROCESSOR_LICENSE = -1073434615_i32
  SL_E_SRV_BUSINESS_TOKEN_ENTRY_NOT_FOUND = -1073434608_i32
  SL_E_SRV_CLIENT_CLOCK_OUT_OF_SYNC = -1073434607_i32
  SL_E_SRV_GENERAL_ERROR = -1073434368_i32
  SL_E_CHPA_PRODUCT_KEY_OUT_OF_RANGE = -1073430527_i32
  SL_E_CHPA_INVALID_BINDING = -1073430526_i32
  SL_E_CHPA_PRODUCT_KEY_BLOCKED = -1073430525_i32
  SL_E_CHPA_INVALID_PRODUCT_KEY = -1073430524_i32
  SL_E_CHPA_BINDING_NOT_FOUND = -1073430523_i32
  SL_E_CHPA_BINDING_MAPPING_NOT_FOUND = -1073430522_i32
  SL_E_CHPA_UNSUPPORTED_PRODUCT_KEY = -1073430521_i32
  SL_E_CHPA_MAXIMUM_UNLOCK_EXCEEDED = -1073430520_i32
  SL_E_CHPA_ACTCONFIG_ID_NOT_FOUND = -1073430519_i32
  SL_E_CHPA_INVALID_PRODUCT_DATA_ID = -1073430518_i32
  SL_E_CHPA_INVALID_PRODUCT_DATA = -1073430517_i32
  SL_E_CHPA_SYSTEM_ERROR = -1073430516_i32
  SL_E_CHPA_INVALID_ACTCONFIG_ID = -1073430515_i32
  SL_E_CHPA_INVALID_PRODUCT_KEY_LENGTH = -1073430514_i32
  SL_E_CHPA_INVALID_PRODUCT_KEY_FORMAT = -1073430513_i32
  SL_E_CHPA_INVALID_PRODUCT_KEY_CHAR = -1073430512_i32
  SL_E_CHPA_INVALID_BINDING_URI = -1073430511_i32
  SL_E_CHPA_NETWORK_ERROR = -1073430510_i32
  SL_E_CHPA_DATABASE_ERROR = -1073430509_i32
  SL_E_CHPA_INVALID_ARGUMENT = -1073430508_i32
  SL_E_CHPA_DMAK_LIMIT_EXCEEDED = -1073430496_i32
  SL_E_CHPA_DMAK_EXTENSION_LIMIT_EXCEEDED = -1073430495_i32
  SL_E_CHPA_REISSUANCE_LIMIT_NOT_FOUND = -1073430494_i32
  SL_E_CHPA_OVERRIDE_REQUEST_NOT_FOUND = -1073430493_i32
  SL_E_CHPA_OEM_SLP_COA0 = -1073430506_i32
  SL_E_CHPA_PRODUCT_KEY_BLOCKED_IPLOCATION = -1073430505_i32
  SL_E_CHPA_RESPONSE_NOT_AVAILABLE = -1073430507_i32
  SL_E_CHPA_GENERAL_ERROR = -1073430448_i32
  SL_E_CHPA_TIMEBASED_ACTIVATION_BEFORE_START_DATE = -1073430480_i32
  SL_E_CHPA_TIMEBASED_ACTIVATION_AFTER_END_DATE = -1073430479_i32
  SL_E_CHPA_TIMEBASED_ACTIVATION_NOT_AVAILABLE = -1073430478_i32
  SL_E_CHPA_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = -1073430477_i32
  SL_E_CHPA_NO_RULES_TO_ACTIVATE = -1073430449_i32
  SL_E_CHPA_DIGITALMARKER_INVALID_BINDING = -1073430447_i32
  SL_E_CHPA_DIGITALMARKER_BINDING_NOT_CONFIGURED = -1073430446_i32
  SL_E_CHPA_DYNAMICALLY_BLOCKED_PRODUCT_KEY = -1073430432_i32
  SL_E_CHPA_MSCH_RESPONSE_NOT_AVAILABLE_VGA = -1073429505_i32
  SL_E_CHPA_BUSINESS_RULE_INPUT_NOT_FOUND = -1073428736_i32
  SL_E_CHPA_NULL_VALUE_FOR_PROPERTY_NAME_OR_ID = -1073428656_i32
  SL_E_CHPA_UNKNOWN_PROPERTY_NAME = -1073428655_i32
  SL_E_CHPA_UNKNOWN_PROPERTY_ID = -1073428654_i32
  SL_E_CHPA_FAILED_TO_UPDATE_PRODUCTKEY_BINDING = -1073428651_i32
  SL_E_CHPA_FAILED_TO_INSERT_PRODUCTKEY_BINDING = -1073428650_i32
  SL_E_CHPA_FAILED_TO_DELETE_PRODUCTKEY_BINDING = -1073428649_i32
  SL_E_CHPA_FAILED_TO_PROCESS_PRODUCT_KEY_BINDINGS_XML = -1073428648_i32
  SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_PROPERTY = -1073428646_i32
  SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_PROPERTY = -1073428645_i32
  SL_E_CHPA_FAILED_TO_DELETE_PRODUCT_KEY_PROPERTY = -1073428644_i32
  SL_E_CHPA_UNKNOWN_PRODUCT_KEY_TYPE = -1073428636_i32
  SL_E_CHPA_PRODUCT_KEY_BEING_USED = -1073428624_i32
  SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_RECORD = -1073428608_i32
  SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_RECORD = -1073428607_i32
  SL_E_INVALID_LICENSE_STATE_BREACH_GRACE = -1073429871_i32
  SL_E_INVALID_LICENSE_STATE_BREACH_GRACE_EXPIRED = -1073429870_i32
  SL_E_INVALID_TEMPLATE_ID = -1073429770_i32
  SL_E_INVALID_XML_BLOB = -1073429766_i32
  SL_E_VALIDATION_BLOB_PARAM_NOT_FOUND = -1073429721_i32
  SL_E_INVALID_CLIENT_TOKEN = -1073429720_i32
  SL_E_INVALID_OFFLINE_BLOB = -1073429719_i32
  SL_E_OFFLINE_VALIDATION_BLOB_PARAM_NOT_FOUND = -1073429718_i32
  SL_E_INVALID_OSVERSION_TEMPLATEID = -1073429717_i32
  SL_E_OFFLINE_GENUINE_BLOB_REVOKED = -1073429716_i32
  SL_E_OFFLINE_GENUINE_BLOB_NOT_FOUND = -1073429715_i32
  SL_E_INVALID_OS_FOR_PRODUCT_KEY = -1073429503_i32
  SL_E_INVALID_FILE_HASH = -1073429343_i32
  SL_E_VALIDATION_BLOCKED_PRODUCT_KEY = -1073429342_i32
  SL_E_MISMATCHED_KEY_TYPES = -1073429340_i32
  SL_E_VALIDATION_INVALID_PRODUCT_KEY = -1073429339_i32
  SL_E_INVALID_OEM_OR_VOLUME_BINDING_DATA = -1073429337_i32
  SL_E_INVALID_LICENSE_STATE = -1073429336_i32
  SL_E_IP_LOCATION_FALIED = -1073429335_i32
  SL_E_SOFTMOD_EXPLOIT_DETECTED = -1073429333_i32
  SL_E_INVALID_TOKEN_DATA = -1073429332_i32
  SL_E_HEALTH_CHECK_FAILED_NEUTRAL_FILES = -1073429331_i32
  SL_E_HEALTH_CHECK_FAILED_MUI_FILES = -1073429330_i32
  SL_E_INVALID_AD_DATA = -1073429329_i32
  SL_E_INVALID_RSDP_COUNT = -1073429328_i32
  SL_E_ENGINE_DETECTED_EXPLOIT = -1073429327_i32
  SL_E_NON_GENUINE_STATUS_LAST = -1073428992_i32
  SL_E_NOTIFICATION_BREACH_DETECTED = -1073429199_i32
  SL_E_NOTIFICATION_GRACE_EXPIRED = -1073429198_i32
  SL_E_NOTIFICATION_OTHER_REASONS = -1073429197_i32
  SL_E_INVALID_CONTEXT = -1073422335_i32
  SL_E_TOKEN_STORE_INVALID_STATE = -1073422334_i32
  SL_E_EVALUATION_FAILED = -1073422333_i32
  SL_E_NOT_EVALUATED = -1073422332_i32
  SL_E_NOT_ACTIVATED = -1073422331_i32
  SL_E_INVALID_GUID = -1073422330_i32
  SL_E_TOKSTO_TOKEN_NOT_FOUND = -1073422329_i32
  SL_E_TOKSTO_NO_PROPERTIES = -1073422328_i32
  SL_E_TOKSTO_NOT_INITIALIZED = -1073422327_i32
  SL_E_TOKSTO_ALREADY_INITIALIZED = -1073422326_i32
  SL_E_TOKSTO_NO_ID_SET = -1073422325_i32
  SL_E_TOKSTO_CANT_CREATE_FILE = -1073422324_i32
  SL_E_TOKSTO_CANT_WRITE_TO_FILE = -1073422323_i32
  SL_E_TOKSTO_CANT_READ_FILE = -1073422322_i32
  SL_E_TOKSTO_CANT_PARSE_PROPERTIES = -1073422321_i32
  SL_E_TOKSTO_PROPERTY_NOT_FOUND = -1073422320_i32
  SL_E_TOKSTO_INVALID_FILE = -1073422319_i32
  SL_E_TOKSTO_CANT_CREATE_MUTEX = -1073422318_i32
  SL_E_TOKSTO_CANT_ACQUIRE_MUTEX = -1073422317_i32
  SL_E_TOKSTO_NO_TOKEN_DATA = -1073422316_i32
  SL_E_EUL_CONSUMPTION_FAILED = -1073422315_i32
  SL_E_PKEY_INVALID_CONFIG = -1073422314_i32
  SL_E_PKEY_INVALID_UNIQUEID = -1073422313_i32
  SL_E_PKEY_INVALID_ALGORITHM = -1073422312_i32
  SL_E_PKEY_INTERNAL_ERROR = -1073422311_i32
  SL_E_LICENSE_INVALID_ADDON_INFO = -1073422310_i32
  SL_E_HWID_ERROR = -1073422309_i32
  SL_E_PKEY_INVALID_KEYCHANGE1 = -1073422308_i32
  SL_E_PKEY_INVALID_KEYCHANGE2 = -1073422307_i32
  SL_E_PKEY_INVALID_KEYCHANGE3 = -1073422306_i32
  SL_E_POLICY_OTHERINFO_MISMATCH = -1073422304_i32
  SL_E_PRODUCT_UNIQUENESS_GROUP_ID_INVALID = -1073422303_i32
  SL_E_SECURE_STORE_ID_MISMATCH = -1073422302_i32
  SL_E_INVALID_RULESET_RULE = -1073422301_i32
  SL_E_INVALID_CONTEXT_DATA = -1073422300_i32
  SL_E_INVALID_HASH = -1073422299_i32
  SL_E_INVALID_USE_OF_ADD_ON_PKEY = -2147164122_i32
  SL_E_WINDOWS_VERSION_MISMATCH = -1073422297_i32
  SL_E_ACTIVATION_IN_PROGRESS = -1073422296_i32
  SL_E_STORE_UPGRADE_TOKEN_REQUIRED = -1073422295_i32
  SL_E_STORE_UPGRADE_TOKEN_WRONG_EDITION = -1073422294_i32
  SL_E_STORE_UPGRADE_TOKEN_WRONG_PID = -1073422293_i32
  SL_E_STORE_UPGRADE_TOKEN_NOT_PRS_SIGNED = -1073422292_i32
  SL_E_STORE_UPGRADE_TOKEN_WRONG_VERSION = -1073422291_i32
  SL_E_STORE_UPGRADE_TOKEN_NOT_AUTHORIZED = -1073422290_i32
  SL_E_SFS_INVALID_FS_VERSION = -2147163903_i32
  SL_E_SFS_INVALID_FD_TABLE = -2147163902_i32
  SL_E_SFS_INVALID_SYNC = -2147163901_i32
  SL_E_SFS_BAD_TOKEN_NAME = -2147163900_i32
  SL_E_SFS_BAD_TOKEN_EXT = -2147163899_i32
  SL_E_SFS_DUPLICATE_TOKEN_NAME = -2147163898_i32
  SL_E_SFS_TOKEN_SIZE_MISMATCH = -2147163897_i32
  SL_E_SFS_INVALID_TOKEN_DATA_HASH = -2147163896_i32
  SL_E_SFS_FILE_READ_ERROR = -2147163895_i32
  SL_E_SFS_FILE_WRITE_ERROR = -2147163894_i32
  SL_E_SFS_INVALID_FILE_POSITION = -2147163893_i32
  SL_E_SFS_NO_ACTIVE_TRANSACTION = -2147163892_i32
  SL_E_SFS_INVALID_FS_HEADER = -2147163891_i32
  SL_E_SFS_INVALID_TOKEN_DESCRIPTOR = -2147163890_i32
  SL_E_INTERNAL_ERROR = -1073418239_i32
  SL_E_RIGHT_NOT_CONSUMED = -1073418238_i32
  SL_E_USE_LICENSE_NOT_INSTALLED = -1073418237_i32
  SL_E_MISMATCHED_PKEY_RANGE = -1073418236_i32
  SL_E_MISMATCHED_PID = -1073418235_i32
  SL_E_EXTERNAL_SIGNATURE_NOT_FOUND = -1073418234_i32
  SL_E_RAC_NOT_AVAILABLE = -1073418233_i32
  SL_E_SPC_NOT_AVAILABLE = -1073418232_i32
  SL_E_GRACE_TIME_EXPIRED = -1073418231_i32
  SL_E_MISMATCHED_APPID = -1073418230_i32
  SL_E_NO_PID_CONFIG_DATA = -1073418229_i32
  SL_I_OOB_GRACE_PERIOD = 1074065420_i32
  SL_I_OOT_GRACE_PERIOD = 1074065421_i32
  SL_E_MISMATCHED_SECURITY_PROCESSOR = -1073418226_i32
  SL_E_OUT_OF_TOLERANCE = -1073418225_i32
  SL_E_INVALID_PKEY = -1073418224_i32
  SL_E_LICENSE_FILE_NOT_INSTALLED = -1073418223_i32
  SL_E_VALUE_NOT_FOUND = -1073418222_i32
  SL_E_RIGHT_NOT_GRANTED = -1073418221_i32
  SL_E_PKEY_NOT_INSTALLED = -1073418220_i32
  SL_E_PRODUCT_SKU_NOT_INSTALLED = -1073418219_i32
  SL_E_NOT_SUPPORTED = -1073418218_i32
  SL_E_PUBLISHING_LICENSE_NOT_INSTALLED = -1073418217_i32
  SL_E_LICENSE_SERVER_URL_NOT_FOUND = -1073418216_i32
  SL_E_INVALID_EVENT_ID = -1073418215_i32
  SL_E_EVENT_NOT_REGISTERED = -1073418214_i32
  SL_E_EVENT_ALREADY_REGISTERED = -1073418213_i32
  SL_E_DECRYPTION_LICENSES_NOT_AVAILABLE = -1073418212_i32
  SL_E_LICENSE_SIGNATURE_VERIFICATION_FAILED = -1073418211_i32
  SL_E_DATATYPE_MISMATCHED = -1073418210_i32
  SL_E_INVALID_LICENSE = -1073418209_i32
  SL_E_INVALID_PACKAGE = -1073418208_i32
  SL_E_VALIDITY_TIME_EXPIRED = -1073418207_i32
  SL_E_LICENSE_AUTHORIZATION_FAILED = -1073418206_i32
  SL_E_LICENSE_DECRYPTION_FAILED = -1073418205_i32
  SL_E_WINDOWS_INVALID_LICENSE_STATE = -1073418204_i32
  SL_E_LUA_ACCESSDENIED = -1073418203_i32
  SL_E_PROXY_KEY_NOT_FOUND = -1073418202_i32
  SL_E_TAMPER_DETECTED = -1073418201_i32
  SL_E_POLICY_CACHE_INVALID = -1073418200_i32
  SL_E_INVALID_RUNNING_MODE = -1073418199_i32
  SL_E_SLP_NOT_SIGNED = -1073418198_i32
  SL_E_CIDIID_INVALID_DATA = -1073418196_i32
  SL_E_CIDIID_INVALID_VERSION = -1073418195_i32
  SL_E_CIDIID_VERSION_NOT_SUPPORTED = -1073418194_i32
  SL_E_CIDIID_INVALID_DATA_LENGTH = -1073418193_i32
  SL_E_CIDIID_NOT_DEPOSITED = -1073418192_i32
  SL_E_CIDIID_MISMATCHED = -1073418191_i32
  SL_E_INVALID_BINDING_BLOB = -1073418190_i32
  SL_E_PRODUCT_KEY_INSTALLATION_NOT_ALLOWED = -1073418189_i32
  SL_E_EUL_NOT_AVAILABLE = -1073418188_i32
  SL_E_VL_NOT_WINDOWS_SLP = -1073418187_i32
  SL_E_VL_NOT_ENOUGH_COUNT = -1073418184_i32
  SL_E_VL_BINDING_SERVICE_NOT_ENABLED = -1073418183_i32
  SL_E_VL_INFO_PRODUCT_USER_RIGHT = 1074065472_i32
  SL_E_VL_KEY_MANAGEMENT_SERVICE_NOT_ACTIVATED = -1073418175_i32
  SL_E_VL_KEY_MANAGEMENT_SERVICE_ID_MISMATCH = -1073418174_i32
  SL_E_PROXY_POLICY_NOT_UPDATED = -1073418169_i32
  SL_E_CIDIID_INVALID_CHECK_DIGITS = -1073418163_i32
  SL_E_LICENSE_MANAGEMENT_DATA_NOT_FOUND = -1073418161_i32
  SL_E_INVALID_PRODUCT_KEY = -1073418160_i32
  SL_E_BLOCKED_PRODUCT_KEY = -1073418159_i32
  SL_E_DUPLICATE_POLICY = -1073418158_i32
  SL_E_MISSING_OVERRIDE_ONLY_ATTRIBUTE = -1073418157_i32
  SL_E_LICENSE_MANAGEMENT_DATA_DUPLICATED = -1073418156_i32
  SL_E_BASE_SKU_NOT_AVAILABLE = -1073418155_i32
  SL_E_VL_MACHINE_NOT_BOUND = -1073418154_i32
  SL_E_SLP_MISSING_ACPI_SLIC = -1073418153_i32
  SL_E_SLP_MISSING_SLP_MARKER = -1073418152_i32
  SL_E_SLP_BAD_FORMAT = -1073418151_i32
  SL_E_INVALID_PACKAGE_VERSION = -1073418144_i32
  SL_E_PKEY_INVALID_UPGRADE = -1073418143_i32
  SL_E_ISSUANCE_LICENSE_NOT_INSTALLED = -1073418142_i32
  SL_E_SLP_OEM_CERT_MISSING = -1073418141_i32
  SL_E_NONGENUINE_GRACE_TIME_EXPIRED = -1073418140_i32
  SL_I_NONGENUINE_GRACE_PERIOD = 1074065509_i32
  SL_E_DEPENDENT_PROPERTY_NOT_SET = -1073418138_i32
  SL_E_NONGENUINE_GRACE_TIME_EXPIRED_2 = -1073418137_i32
  SL_I_NONGENUINE_GRACE_PERIOD_2 = 1074065512_i32
  SL_E_MISMATCHED_PRODUCT_SKU = -1073418135_i32
  SL_E_OPERATION_NOT_ALLOWED = -1073418134_i32
  SL_E_VL_KEY_MANAGEMENT_SERVICE_VM_NOT_SUPPORTED = -1073418133_i32
  SL_E_VL_INVALID_TIMESTAMP = -1073418132_i32
  SL_E_PLUGIN_INVALID_MANIFEST = -1073418127_i32
  SL_E_APPLICATION_POLICIES_MISSING = -1073418126_i32
  SL_E_APPLICATION_POLICIES_NOT_LOADED = -1073418125_i32
  SL_E_VL_BINDING_SERVICE_UNAVAILABLE = -1073418124_i32
  SL_E_SERVICE_STOPPING = -1073418123_i32
  SL_E_PLUGIN_NOT_REGISTERED = -1073418122_i32
  SL_E_AUTHN_WRONG_VERSION = -1073418121_i32
  SL_E_AUTHN_MISMATCHED_KEY = -1073418120_i32
  SL_E_AUTHN_CHALLENGE_NOT_SET = -1073418119_i32
  SL_E_AUTHN_CANT_VERIFY = -1073418118_i32
  SL_E_SERVICE_RUNNING = -1073418117_i32
  SL_E_SLP_INVALID_MARKER_VERSION = -1073418116_i32
  SL_E_INVALID_PRODUCT_KEY_TYPE = -1073418115_i32
  SL_E_CIDIID_MISMATCHED_PKEY = -1073418114_i32
  SL_E_CIDIID_NOT_BOUND = -1073418113_i32
  SL_E_LICENSE_NOT_BOUND = -1073418112_i32
  SL_E_VL_AD_AO_NOT_FOUND = -1073418111_i32
  SL_E_VL_AD_AO_NAME_TOO_LONG = -1073418110_i32
  SL_E_VL_AD_SCHEMA_VERSION_NOT_SUPPORTED = -1073418109_i32
  SL_E_NOT_GENUINE = -1073417728_i32
  SL_E_EDITION_MISMATCHED = -1073417712_i32
  SL_E_HWID_CHANGED = -1073417711_i32
  SL_E_OEM_KEY_EDITION_MISMATCH = -1073417710_i32
  SL_E_NO_PRODUCT_KEY_FOUND = -1073417709_i32
  SL_E_DOWNLEVEL_SETUP_KEY = -1073417708_i32
  SL_E_BIOS_KEY = -1073417707_i32
  SL_E_TKA_CHALLENGE_EXPIRED = -1073417471_i32
  SL_E_TKA_SILENT_ACTIVATION_FAILURE = -1073417470_i32
  SL_E_TKA_INVALID_CERT_CHAIN = -1073417469_i32
  SL_E_TKA_GRANT_NOT_FOUND = -1073417468_i32
  SL_E_TKA_CERT_NOT_FOUND = -1073417467_i32
  SL_E_TKA_INVALID_SKU_ID = -1073417466_i32
  SL_E_TKA_INVALID_BLOB = -1073417465_i32
  SL_E_TKA_TAMPERED_CERT_CHAIN = -1073417464_i32
  SL_E_TKA_CHALLENGE_MISMATCH = -1073417463_i32
  SL_E_TKA_INVALID_CERTIFICATE = -1073417462_i32
  SL_E_TKA_INVALID_SMARTCARD = -1073417461_i32
  SL_E_TKA_FAILED_GRANT_PARSING = -1073417460_i32
  SL_E_TKA_INVALID_THUMBPRINT = -1073417459_i32
  SL_E_TKA_THUMBPRINT_CERT_NOT_FOUND = -1073417458_i32
  SL_E_TKA_CRITERIA_MISMATCH = -1073417457_i32
  SL_E_TKA_TPID_MISMATCH = -1073417456_i32
  SL_E_TKA_SOFT_CERT_DISALLOWED = -1073417455_i32
  SL_E_TKA_SOFT_CERT_INVALID = -1073417454_i32
  SL_E_TKA_CERT_CNG_NOT_AVAILABLE = -1073417453_i32
  SL_I_STORE_BASED_ACTIVATION = 1074066433_i32
  E_RM_UNKNOWN_ERROR = -1073415165_i32
  SL_I_TIMEBASED_VALIDITY_PERIOD = 1074068484_i32
  SL_I_PERPETUAL_OOB_GRACE_PERIOD = 1074068485_i32
  SL_I_TIMEBASED_EXTENDED_GRACE_PERIOD = 1074068486_i32
  SL_E_VALIDITY_PERIOD_EXPIRED = -1073415161_i32
  SL_E_IA_THROTTLE_LIMIT_EXCEEDED = -1073414912_i32
  SL_E_IA_INVALID_VIRTUALIZATION_PLATFORM = -1073414911_i32
  SL_E_IA_PARENT_PARTITION_NOT_ACTIVATED = -1073414910_i32
  SL_E_IA_ID_MISMATCH = -1073414909_i32
  SL_E_IA_MACHINE_NOT_BOUND = -1073414908_i32
  SL_E_TAMPER_RECOVERY_REQUIRES_ACTIVATION = -1073414656_i32
  SL_REMAPPING_SP_PUB_GENERAL_NOT_INITIALIZED = -1073426175_i32
  SL_REMAPPING_SP_STATUS_SYSTEM_TIME_SKEWED = -2147167998_i32
  SL_REMAPPING_SP_STATUS_GENERIC_FAILURE = -1073426173_i32
  SL_REMAPPING_SP_STATUS_INVALIDARG = -1073426172_i32
  SL_REMAPPING_SP_STATUS_ALREADY_EXISTS = -1073426171_i32
  SL_REMAPPING_SP_STATUS_INSUFFICIENT_BUFFER = -1073426169_i32
  SL_REMAPPING_SP_STATUS_INVALIDDATA = -1073426168_i32
  SL_REMAPPING_SP_STATUS_INVALID_SPAPI_CALL = -1073426167_i32
  SL_REMAPPING_SP_STATUS_INVALID_SPAPI_VERSION = -1073426166_i32
  SL_REMAPPING_SP_STATUS_DEBUGGER_DETECTED = -2147167989_i32
  SL_REMAPPING_SP_STATUS_NO_MORE_DATA = -1073426164_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_KEYLENGTH = -1073425919_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCKLENGTH = -1073425918_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHER = -1073425917_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHERMODE = -1073425916_i32
  SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_PROVIDERID = -1073425915_i32
  SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_KEYID = -1073425914_i32
  SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_HASHID = -1073425913_i32
  SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_ATTRIBUTEID = -1073425912_i32
  SL_REMAPPING_SP_PUB_CRYPTO_HASH_FINALIZED = -1073425911_i32
  SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_AVAILABLE = -1073425910_i32
  SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_FOUND = -1073425909_i32
  SL_REMAPPING_SP_PUB_CRYPTO_NOT_BLOCK_ALIGNED = -1073425908_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURELENGTH = -1073425907_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURE = -1073425906_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCK = -1073425905_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_FORMAT = -1073425904_i32
  SL_REMAPPING_SP_PUB_CRYPTO_INVALID_PADDING = -1073425903_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED = -1073425663_i32
  SL_REMAPPING_SP_PUB_TS_REARMED = -1073425662_i32
  SL_REMAPPING_SP_PUB_TS_RECREATED = -1073425661_i32
  SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_NOT_FOUND = -1073425660_i32
  SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_ALREADY_EXISTS = -1073425659_i32
  SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_SIZE_TOO_BIG = -1073425658_i32
  SL_REMAPPING_SP_PUB_TS_MAX_REARM_REACHED = -1073425657_i32
  SL_REMAPPING_SP_PUB_TS_DATA_SIZE_TOO_BIG = -1073425656_i32
  SL_REMAPPING_SP_PUB_TS_INVALID_HW_BINDING = -1073425655_i32
  SL_REMAPPING_SP_PUB_TIMER_ALREADY_EXISTS = -1073425654_i32
  SL_REMAPPING_SP_PUB_TIMER_NOT_FOUND = -1073425653_i32
  SL_REMAPPING_SP_PUB_TIMER_EXPIRED = -1073425652_i32
  SL_REMAPPING_SP_PUB_TIMER_NAME_SIZE_TOO_BIG = -1073425651_i32
  SL_REMAPPING_SP_PUB_TS_FULL = -1073425650_i32
  SL_REMAPPING_SP_PUB_TRUSTED_TIME_OK = 1074057999_i32
  SL_REMAPPING_SP_PUB_TS_ENTRY_READ_ONLY = -1073425648_i32
  SL_REMAPPING_SP_PUB_TIMER_READ_ONLY = -1073425647_i32
  SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_READ_ONLY = -1073425646_i32
  SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_NOT_FOUND = -1073425645_i32
  SL_REMAPPING_SP_PUB_TS_ACCESS_DENIED = -1073425644_i32
  SL_REMAPPING_SP_PUB_TS_NAMESPACE_NOT_FOUND = -1073425643_i32
  SL_REMAPPING_SP_PUB_TS_NAMESPACE_IN_USE = -1073425642_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_LOAD_INVALID = -1073425641_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_GENERATION = -1073425640_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_INVALID_DATA = -1073425639_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_NO_DATA = -1073425638_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_BREADCRUMB_MISMATCH = -1073425637_i32
  SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_VERSION_MISMATCH = -1073425636_i32
  SL_REMAPPING_SP_PUB_TAMPER_MODULE_AUTHENTICATION = -1073425407_i32
  SL_REMAPPING_SP_PUB_TAMPER_SECURITY_PROCESSOR_PATCHED = -1073425406_i32
  SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER = -1073425151_i32
  SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER_RESTORE_FAILED = -1073425150_i32
  SL_REMAPPING_SP_PUB_KM_CACHE_IDENTICAL = 1074058753_i32
  SL_REMAPPING_SP_PUB_KM_CACHE_POLICY_CHANGED = 1074058754_i32
  SL_REMAPPING_SP_STATUS_PUSHKEY_CONFLICT = -1073424639_i32
  SL_REMAPPING_SP_PUB_PROXY_SOFT_TAMPER = -1073424638_i32
  SL_REMAPPING_SP_PUB_API_INVALID_LICENSE = -1073426432_i32
  SL_REMAPPING_SP_PUB_API_INVALID_ALGORITHM_TYPE = -1073426423_i32
  SL_REMAPPING_SP_PUB_API_TOO_MANY_LOADED_ENVIRONMENTS = -1073426420_i32
  SL_REMAPPING_SP_PUB_API_BAD_GET_INFO_QUERY = -1073426414_i32
  SL_REMAPPING_SP_PUB_API_INVALID_HANDLE = -1073426388_i32
  SL_REMAPPING_SP_PUB_API_INVALID_KEY_LENGTH = -1073426347_i32
  SL_REMAPPING_SP_PUB_API_NO_AES_PROVIDER = -1073426317_i32
  SL_REMAPPING_SP_PUB_API_HANDLE_NOT_COMMITED = -1073426303_i32
  SL_REMAPPING_MDOLLAR_PRODUCT_KEY_OUT_OF_RANGE = -2143313819_i32
  SL_REMAPPING_MDOLLAR_INVALID_BINDING = -2143313818_i32
  SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED = -2143313817_i32
  SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY = -2143313816_i32
  SL_REMAPPING_MDOLLAR_UNSUPPORTED_PRODUCT_KEY = -2143313812_i32
  SL_REMAPPING_MDOLLAR_MAXIMUM_UNLOCK_EXCEEDED = -2143313807_i32
  SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA_ID = -2143313805_i32
  SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA = -2143313804_i32
  SL_REMAPPING_MDOLLAR_INVALID_ACTCONFIG_ID = -2143313802_i32
  SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_LENGTH = -2143313801_i32
  SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_FORMAT = -2143313800_i32
  SL_REMAPPING_MDOLLAR_INVALID_BINDING_URI = -2143313798_i32
  SL_REMAPPING_MDOLLAR_INVALID_ARGUMENT = -2143313795_i32
  SL_REMAPPING_MDOLLAR_DMAK_LIMIT_EXCEEDED = -2143313793_i32
  SL_REMAPPING_MDOLLAR_DMAK_EXTENSION_LIMIT_EXCEEDED = -2143313792_i32
  SL_REMAPPING_MDOLLAR_OEM_SLP_COA0 = -2143313789_i32
  SL_REMAPPING_MDOLLAR_CIDIID_INVALID_VERSION = -2143313779_i32
  SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA = -2143313778_i32
  SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA_LENGTH = -2143313777_i32
  SL_REMAPPING_MDOLLAR_CIDIID_INVALID_CHECK_DIGITS = -2143313776_i32
  SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_BEFORE_START_DATE = -2143313769_i32
  SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_AFTER_END_DATE = -2143313768_i32
  SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_NOT_AVAILABLE = -2143313767_i32
  SL_REMAPPING_MDOLLAR_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = -2143313766_i32
  SL_REMAPPING_MDOLLAR_NO_RULES_TO_ACTIVATE = -2143313720_i32
  SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED_IPLOCATION = -2143313717_i32
  SL_REMAPPING_MDOLLAR_DIGITALMARKER_INVALID_BINDING = -2143313709_i32
  SL_REMAPPING_MDOLLAR_DIGITALMARKER_BINDING_NOT_CONFIGURED = -2143313708_i32
  SL_REMAPPING_MDOLLAR_ROT_OVERRIDE_LIMIT_REACHED = -2143313707_i32
  SL_REMAPPING_MDOLLAR_DMAK_OVERRIDE_LIMIT_REACHED = -2143313706_i32
  SL_REMAPPING_MDOLLAR_FREE_OFFER_EXPIRED = -2143312896_i32
  SL_REMAPPING_MDOLLAR_OSR_DONOR_HWID_NO_ENTITLEMENT = -2143310920_i32
  SL_REMAPPING_MDOLLAR_OSR_GENERIC_ERROR = -2143310919_i32
  SL_REMAPPING_MDOLLAR_OSR_NO_ASSOCIATION = -2143310918_i32
  SL_REMAPPING_MDOLLAR_OSR_NOT_ADMIN = -2143310917_i32
  SL_REMAPPING_MDOLLAR_OSR_USER_THROTTLED = -2143310916_i32
  SL_REMAPPING_MDOLLAR_OSR_LICENSE_THROTTLED = -2143310915_i32
  SL_REMAPPING_MDOLLAR_OSR_DEVICE_THROTTLED = -2143310914_i32
  SL_REMAPPING_MDOLLAR_OSR_GP_DISABLED = -2143310913_i32
  SL_REMAPPING_MDOLLAR_OSR_HARDWARE_BLOCKED = -2143310912_i32
  SL_REMAPPING_MDOLLAR_OSR_USER_BLOCKED = -2143310911_i32
  SL_REMAPPING_MDOLLAR_OSR_LICENSE_BLOCKED = -2143310910_i32
  SL_REMAPPING_MDOLLAR_OSR_DEVICE_BLOCKED = -2143310909_i32
  WINDOWS_SLID = "55c92734-d682-4d71-983e-d6ec3f16059f"

  type HMAPPER = Void

  alias PSAM_PASSWORD_NOTIFICATION_ROUTINE = Proc(UNICODE_STRING*, UInt32, UNICODE_STRING*, NTSTATUS)
  alias PSAM_INIT_NOTIFICATION_ROUTINE = Proc(BOOLEAN)
  alias PSAM_PASSWORD_FILTER_ROUTINE = Proc(UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, BOOLEAN, BOOLEAN)
  alias SEC_GET_KEY_FN = Proc(Void*, Void*, UInt32, Void**, Int32*, Void)
  alias ACQUIRE_CREDENTIALS_HANDLE_FN_W = Proc(UInt16*, UInt16*, UInt32, Void*, Void*, SEC_GET_KEY_FN, Void*, SecHandle*, LARGE_INTEGER*, Int32)
  alias ACQUIRE_CREDENTIALS_HANDLE_FN_A = Proc(Int8*, Int8*, UInt32, Void*, Void*, SEC_GET_KEY_FN, Void*, SecHandle*, LARGE_INTEGER*, Int32)
  alias FREE_CREDENTIALS_HANDLE_FN = Proc(SecHandle*, Int32)
  alias ADD_CREDENTIALS_FN_W = Proc(SecHandle*, UInt16*, UInt16*, UInt32, Void*, SEC_GET_KEY_FN, Void*, LARGE_INTEGER*, Int32)
  alias ADD_CREDENTIALS_FN_A = Proc(SecHandle*, Int8*, Int8*, UInt32, Void*, SEC_GET_KEY_FN, Void*, LARGE_INTEGER*, Int32)
  alias CHANGE_PASSWORD_FN_W = Proc(UInt16*, UInt16*, UInt16*, UInt16*, UInt16*, BOOLEAN, UInt32, SecBufferDesc*, Int32)
  alias CHANGE_PASSWORD_FN_A = Proc(Int8*, Int8*, Int8*, Int8*, Int8*, BOOLEAN, UInt32, SecBufferDesc*, Int32)
  alias INITIALIZE_SECURITY_CONTEXT_FN_W = Proc(SecHandle*, SecHandle*, UInt16*, UInt32, UInt32, UInt32, SecBufferDesc*, UInt32, SecHandle*, SecBufferDesc*, UInt32*, LARGE_INTEGER*, Int32)
  alias INITIALIZE_SECURITY_CONTEXT_FN_A = Proc(SecHandle*, SecHandle*, Int8*, UInt32, UInt32, UInt32, SecBufferDesc*, UInt32, SecHandle*, SecBufferDesc*, UInt32*, LARGE_INTEGER*, Int32)
  alias ACCEPT_SECURITY_CONTEXT_FN = Proc(SecHandle*, SecHandle*, SecBufferDesc*, UInt32, UInt32, SecHandle*, SecBufferDesc*, UInt32*, LARGE_INTEGER*, Int32)
  alias COMPLETE_AUTH_TOKEN_FN = Proc(SecHandle*, SecBufferDesc*, Int32)
  alias IMPERSONATE_SECURITY_CONTEXT_FN = Proc(SecHandle*, Int32)
  alias REVERT_SECURITY_CONTEXT_FN = Proc(SecHandle*, Int32)
  alias QUERY_SECURITY_CONTEXT_TOKEN_FN = Proc(SecHandle*, Void**, Int32)
  alias DELETE_SECURITY_CONTEXT_FN = Proc(SecHandle*, Int32)
  alias APPLY_CONTROL_TOKEN_FN = Proc(SecHandle*, SecBufferDesc*, Int32)
  alias QUERY_CONTEXT_ATTRIBUTES_FN_W = Proc(SecHandle*, UInt32, Void*, Int32)
  alias QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias QUERY_CONTEXT_ATTRIBUTES_FN_A = Proc(SecHandle*, UInt32, Void*, Int32)
  alias QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias SET_CONTEXT_ATTRIBUTES_FN_W = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias SET_CONTEXT_ATTRIBUTES_FN_A = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias QUERY_CREDENTIALS_ATTRIBUTES_FN_W = Proc(SecHandle*, UInt32, Void*, Int32)
  alias QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias QUERY_CREDENTIALS_ATTRIBUTES_FN_A = Proc(SecHandle*, UInt32, Void*, Int32)
  alias QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias SET_CREDENTIALS_ATTRIBUTES_FN_W = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias SET_CREDENTIALS_ATTRIBUTES_FN_A = Proc(SecHandle*, UInt32, Void*, UInt32, Int32)
  alias FREE_CONTEXT_BUFFER_FN = Proc(Void*, Int32)
  alias MAKE_SIGNATURE_FN = Proc(SecHandle*, UInt32, SecBufferDesc*, UInt32, Int32)
  alias VERIFY_SIGNATURE_FN = Proc(SecHandle*, SecBufferDesc*, UInt32, UInt32*, Int32)
  alias ENCRYPT_MESSAGE_FN = Proc(SecHandle*, UInt32, SecBufferDesc*, UInt32, Int32)
  alias DECRYPT_MESSAGE_FN = Proc(SecHandle*, SecBufferDesc*, UInt32, UInt32*, Int32)
  alias ENUMERATE_SECURITY_PACKAGES_FN_W = Proc(UInt32*, SecPkgInfoW**, Int32)
  alias ENUMERATE_SECURITY_PACKAGES_FN_A = Proc(UInt32*, SecPkgInfoA**, Int32)
  alias QUERY_SECURITY_PACKAGE_INFO_FN_W = Proc(UInt16*, SecPkgInfoW**, Int32)
  alias QUERY_SECURITY_PACKAGE_INFO_FN_A = Proc(Int8*, SecPkgInfoA**, Int32)
  alias EXPORT_SECURITY_CONTEXT_FN = Proc(SecHandle*, UInt32, SecBuffer*, Void**, Int32)
  alias IMPORT_SECURITY_CONTEXT_FN_W = Proc(UInt16*, SecBuffer*, Void*, SecHandle*, Int32)
  alias IMPORT_SECURITY_CONTEXT_FN_A = Proc(Int8*, SecBuffer*, Void*, SecHandle*, Int32)
  alias INIT_SECURITY_INTERFACE_A = Proc(SecurityFunctionTableA*)
  alias INIT_SECURITY_INTERFACE_W = Proc(SecurityFunctionTableW*)
  alias PLSA_CREATE_LOGON_SESSION = Proc(LUID*, NTSTATUS)
  alias PLSA_DELETE_LOGON_SESSION = Proc(LUID*, NTSTATUS)
  alias PLSA_ADD_CREDENTIAL = Proc(LUID*, UInt32, STRING*, STRING*, NTSTATUS)
  alias PLSA_GET_CREDENTIALS = Proc(LUID*, UInt32, UInt32*, BOOLEAN, STRING*, UInt32*, STRING*, NTSTATUS)
  alias PLSA_DELETE_CREDENTIAL = Proc(LUID*, UInt32, STRING*, NTSTATUS)
  alias PLSA_ALLOCATE_LSA_HEAP = Proc(UInt32, Void*)
  alias PLSA_FREE_LSA_HEAP = Proc(Void*, Void)
  alias PLSA_ALLOCATE_PRIVATE_HEAP = Proc(LibC::UINT_PTR, Void*)
  alias PLSA_FREE_PRIVATE_HEAP = Proc(Void*, Void)
  alias PLSA_ALLOCATE_CLIENT_BUFFER = Proc(Void**, UInt32, Void**, NTSTATUS)
  alias PLSA_FREE_CLIENT_BUFFER = Proc(Void**, Void*, NTSTATUS)
  alias PLSA_COPY_TO_CLIENT_BUFFER = Proc(Void**, UInt32, Void*, Void*, NTSTATUS)
  alias PLSA_COPY_FROM_CLIENT_BUFFER = Proc(Void**, UInt32, Void*, Void*, NTSTATUS)
  alias PLSA_AP_INITIALIZE_PACKAGE = Proc(UInt32, LSA_DISPATCH_TABLE*, STRING*, STRING*, STRING**, NTSTATUS)
  alias PLSA_AP_LOGON_USER = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, Void**, UInt32*, LUID*, Int32*, LSA_TOKEN_INFORMATION_TYPE*, Void**, UNICODE_STRING**, UNICODE_STRING**, NTSTATUS)
  alias PLSA_AP_LOGON_USER_EX = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, Void**, UInt32*, LUID*, Int32*, LSA_TOKEN_INFORMATION_TYPE*, Void**, UNICODE_STRING**, UNICODE_STRING**, UNICODE_STRING**, NTSTATUS)
  alias PLSA_AP_CALL_PACKAGE = Proc(Void**, Void*, Void*, UInt32, Void**, UInt32*, Int32*, NTSTATUS)
  alias PLSA_AP_CALL_PACKAGE_PASSTHROUGH = Proc(Void**, Void*, Void*, UInt32, Void**, UInt32*, Int32*, NTSTATUS)
  alias PLSA_AP_LOGON_TERMINATED = Proc(LUID*, Void)
  alias PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = Proc(UNICODE_STRING*, Void*, UInt32, UInt32, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, Void**, UInt32*, NTSTATUS)
  alias PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = Proc(UNICODE_STRING*, BOOLEAN)
  alias PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = Proc(Void*, Void)
  alias PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = Proc(SAM_REGISTER_MAPPING_TABLE*, NTSTATUS)
  alias PLSA_CALLBACK_FUNCTION = Proc(LibC::UINT_PTR, LibC::UINT_PTR, SecBuffer*, SecBuffer*, NTSTATUS)
  alias PLSA_REDIRECTED_LOGON_INIT = Proc(LibC::HANDLE, UNICODE_STRING*, UInt32, LUID*, NTSTATUS)
  alias PLSA_REDIRECTED_LOGON_CALLBACK = Proc(LibC::HANDLE, Void*, UInt32, Void**, UInt32*, NTSTATUS)
  alias PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = Proc(LibC::HANDLE, Void)
  alias PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = Proc(LibC::HANDLE, UInt8**, UInt32*, NTSTATUS)
  alias PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = Proc(LibC::HANDLE, SECPKG_SUPPLEMENTAL_CRED_ARRAY**, NTSTATUS)
  alias PLSA_IMPERSONATE_CLIENT = Proc(NTSTATUS)
  alias PLSA_UNLOAD_PACKAGE = Proc(NTSTATUS)
  alias PLSA_DUPLICATE_HANDLE = Proc(LibC::HANDLE, LibC::HANDLE*, NTSTATUS)
  alias PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = Proc(LUID*, UInt32, Void*, BOOLEAN, NTSTATUS)
  alias PLSA_CREATE_THREAD = Proc(SECURITY_ATTRIBUTES*, UInt32, LPTHREAD_START_ROUTINE, Void*, UInt32, UInt32*, LibC::HANDLE)
  alias PLSA_GET_CLIENT_INFO = Proc(SECPKG_CLIENT_INFO*, NTSTATUS)
  alias PLSA_REGISTER_NOTIFICATION = Proc(LPTHREAD_START_ROUTINE, Void*, UInt32, UInt32, UInt32, UInt32, LibC::HANDLE, LibC::HANDLE)
  alias PLSA_CANCEL_NOTIFICATION = Proc(LibC::HANDLE, NTSTATUS)
  alias PLSA_MAP_BUFFER = Proc(SecBuffer*, SecBuffer*, NTSTATUS)
  alias PLSA_CREATE_TOKEN = Proc(LUID*, TOKEN_SOURCE*, SECURITY_LOGON_TYPE, SECURITY_IMPERSONATION_LEVEL, LSA_TOKEN_INFORMATION_TYPE, Void*, TOKEN_GROUPS*, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, LibC::HANDLE*, Int32*, NTSTATUS)
  alias PLSA_CREATE_TOKEN_EX = Proc(LUID*, TOKEN_SOURCE*, SECURITY_LOGON_TYPE, SECURITY_IMPERSONATION_LEVEL, LSA_TOKEN_INFORMATION_TYPE, Void*, TOKEN_GROUPS*, UNICODE_STRING*, UNICODE_STRING*, Void*, SECPKG_SESSIONINFO_TYPE, LibC::HANDLE*, Int32*, NTSTATUS)
  alias PLSA_AUDIT_LOGON = Proc(NTSTATUS, NTSTATUS, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, PSID, SECURITY_LOGON_TYPE, TOKEN_SOURCE*, LUID*, Void)
  alias PLSA_CALL_PACKAGE = Proc(UNICODE_STRING*, Void*, UInt32, Void**, UInt32*, Int32*, NTSTATUS)
  alias PLSA_CALL_PACKAGEEX = Proc(UNICODE_STRING*, Void*, Void*, UInt32, Void**, UInt32*, Int32*, NTSTATUS)
  alias PLSA_CALL_PACKAGE_PASSTHROUGH = Proc(UNICODE_STRING*, Void*, Void*, UInt32, Void**, UInt32*, Int32*, NTSTATUS)
  alias PLSA_GET_CALL_INFO = Proc(SECPKG_CALL_INFO*, BOOLEAN)
  alias PLSA_CREATE_SHARED_MEMORY = Proc(UInt32, UInt32, Void*)
  alias PLSA_ALLOCATE_SHARED_MEMORY = Proc(Void*, UInt32, Void*)
  alias PLSA_FREE_SHARED_MEMORY = Proc(Void*, Void*, Void)
  alias PLSA_DELETE_SHARED_MEMORY = Proc(Void*, BOOLEAN)
  alias PLSA_GET_APP_MODE_INFO = Proc(UInt32*, LibC::UINT_PTR*, LibC::UINT_PTR*, SecBuffer*, BOOLEAN*, NTSTATUS)
  alias PLSA_SET_APP_MODE_INFO = Proc(UInt32, LibC::UINT_PTR, LibC::UINT_PTR, SecBuffer*, BOOLEAN, NTSTATUS)
  alias PLSA_OPEN_SAM_USER = Proc(UNICODE_STRING*, SECPKG_NAME_TYPE, UNICODE_STRING*, BOOLEAN, UInt32, Void**, NTSTATUS)
  alias PLSA_GET_USER_CREDENTIALS = Proc(Void*, Void**, UInt32*, Void**, UInt32*, NTSTATUS)
  alias PLSA_GET_USER_AUTH_DATA = Proc(Void*, UInt8**, UInt32*, NTSTATUS)
  alias PLSA_CLOSE_SAM_USER = Proc(Void*, NTSTATUS)
  alias PLSA_GET_AUTH_DATA_FOR_USER = Proc(UNICODE_STRING*, SECPKG_NAME_TYPE, UNICODE_STRING*, UInt8**, UInt32*, UNICODE_STRING*, NTSTATUS)
  alias PLSA_CONVERT_AUTH_DATA_TO_TOKEN = Proc(Void*, UInt32, SECURITY_IMPERSONATION_LEVEL, TOKEN_SOURCE*, SECURITY_LOGON_TYPE, UNICODE_STRING*, LibC::HANDLE*, LUID*, UNICODE_STRING*, Int32*, NTSTATUS)
  alias PLSA_CRACK_SINGLE_NAME = Proc(UInt32, BOOLEAN, UNICODE_STRING*, UNICODE_STRING*, UInt32, UNICODE_STRING*, UNICODE_STRING*, UInt32*, NTSTATUS)
  alias PLSA_AUDIT_ACCOUNT_LOGON = Proc(UInt32, BOOLEAN, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, NTSTATUS, NTSTATUS)
  alias PLSA_CLIENT_CALLBACK = Proc(PSTR, LibC::UINT_PTR, LibC::UINT_PTR, SecBuffer*, SecBuffer*, NTSTATUS)
  alias PLSA_REGISTER_CALLBACK = Proc(UInt32, PLSA_CALLBACK_FUNCTION, NTSTATUS)
  alias PLSA_GET_EXTENDED_CALL_FLAGS = Proc(UInt32*, NTSTATUS)
  alias PLSA_UPDATE_PRIMARY_CREDENTIALS = Proc(SECPKG_PRIMARY_CRED*, SECPKG_SUPPLEMENTAL_CRED_ARRAY*, NTSTATUS)
  alias PLSA_PROTECT_MEMORY = Proc(Void*, UInt32, Void)
  alias PLSA_OPEN_TOKEN_BY_LOGON_ID = Proc(LUID*, LibC::HANDLE*, NTSTATUS)
  alias PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = Proc(UInt8*, UInt32, Void*, UInt8**, UInt32*, NTSTATUS)
  alias PLSA_GET_SERVICE_ACCOUNT_PASSWORD = Proc(UNICODE_STRING*, UNICODE_STRING*, CRED_FETCH, FILETIME*, UNICODE_STRING*, UNICODE_STRING*, FILETIME*, NTSTATUS)
  alias PLSA_AUDIT_LOGON_EX = Proc(NTSTATUS, NTSTATUS, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, PSID, SECURITY_LOGON_TYPE, SECURITY_IMPERSONATION_LEVEL, TOKEN_SOURCE*, LUID*, Void)
  alias PLSA_CHECK_PROTECTED_USER_BY_TOKEN = Proc(LibC::HANDLE, BOOLEAN*, NTSTATUS)
  alias PLSA_QUERY_CLIENT_REQUEST = Proc(Void**, UInt32, Void**, NTSTATUS)
  alias CredReadFn = Proc(LUID*, UInt32, LibC::LPWSTR, UInt32, UInt32, ENCRYPTED_CREDENTIALW**, NTSTATUS)
  alias CredReadDomainCredentialsFn = Proc(LUID*, UInt32, CREDENTIAL_TARGET_INFORMATIONW*, UInt32, UInt32*, ENCRYPTED_CREDENTIALW***, NTSTATUS)
  alias CredFreeCredentialsFn = Proc(UInt32, ENCRYPTED_CREDENTIALW**, Void)
  alias CredWriteFn = Proc(LUID*, UInt32, ENCRYPTED_CREDENTIALW*, UInt32, NTSTATUS)
  alias CrediUnmarshalandDecodeStringFn = Proc(LibC::LPWSTR, UInt8**, UInt32*, UInt8*, NTSTATUS)
  alias PLSA_LOCATE_PKG_BY_ID = Proc(UInt32, Void*)
  alias SpInitializeFn = Proc(LibC::UINT_PTR, SECPKG_PARAMETERS*, LSA_SECPKG_FUNCTION_TABLE*, NTSTATUS)
  alias SpShutdownFn = Proc(NTSTATUS)
  alias SpGetInfoFn = Proc(SecPkgInfoA*, NTSTATUS)
  alias SpGetExtendedInformationFn = Proc(SECPKG_EXTENDED_INFORMATION_CLASS, SECPKG_EXTENDED_INFORMATION**, NTSTATUS)
  alias SpSetExtendedInformationFn = Proc(SECPKG_EXTENDED_INFORMATION_CLASS, SECPKG_EXTENDED_INFORMATION*, NTSTATUS)
  alias PLSA_AP_LOGON_USER_EX2 = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, Void**, UInt32*, LUID*, Int32*, LSA_TOKEN_INFORMATION_TYPE*, Void**, UNICODE_STRING**, UNICODE_STRING**, UNICODE_STRING**, SECPKG_PRIMARY_CRED*, SECPKG_SUPPLEMENTAL_CRED_ARRAY**, NTSTATUS)
  alias PLSA_AP_LOGON_USER_EX3 = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, SECPKG_SURROGATE_LOGON*, Void**, UInt32*, LUID*, Int32*, LSA_TOKEN_INFORMATION_TYPE*, Void**, UNICODE_STRING**, UNICODE_STRING**, UNICODE_STRING**, SECPKG_PRIMARY_CRED*, SECPKG_SUPPLEMENTAL_CRED_ARRAY**, NTSTATUS)
  alias PLSA_AP_PRE_LOGON_USER_SURROGATE = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, SECPKG_SURROGATE_LOGON*, Int32*, NTSTATUS)
  alias PLSA_AP_POST_LOGON_USER_SURROGATE = Proc(Void**, SECURITY_LOGON_TYPE, Void*, Void*, UInt32, SECPKG_SURROGATE_LOGON*, Void*, UInt32, LUID*, NTSTATUS, NTSTATUS, LSA_TOKEN_INFORMATION_TYPE, Void*, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, SECPKG_PRIMARY_CRED*, SECPKG_SUPPLEMENTAL_CRED_ARRAY*, NTSTATUS)
  alias SpAcceptCredentialsFn = Proc(SECURITY_LOGON_TYPE, UNICODE_STRING*, SECPKG_PRIMARY_CRED*, SECPKG_SUPPLEMENTAL_CRED*, NTSTATUS)
  alias SpAcquireCredentialsHandleFn = Proc(UNICODE_STRING*, UInt32, LUID*, Void*, Void*, Void*, LibC::UINT_PTR*, LARGE_INTEGER*, NTSTATUS)
  alias SpFreeCredentialsHandleFn = Proc(LibC::UINT_PTR, NTSTATUS)
  alias SpQueryCredentialsAttributesFn = Proc(LibC::UINT_PTR, UInt32, Void*, NTSTATUS)
  alias SpSetCredentialsAttributesFn = Proc(LibC::UINT_PTR, UInt32, Void*, UInt32, NTSTATUS)
  alias SpAddCredentialsFn = Proc(LibC::UINT_PTR, UNICODE_STRING*, UNICODE_STRING*, UInt32, Void*, Void*, Void*, LARGE_INTEGER*, NTSTATUS)
  alias SpSaveCredentialsFn = Proc(LibC::UINT_PTR, SecBuffer*, NTSTATUS)
  alias SpGetCredentialsFn = Proc(LibC::UINT_PTR, SecBuffer*, NTSTATUS)
  alias SpDeleteCredentialsFn = Proc(LibC::UINT_PTR, SecBuffer*, NTSTATUS)
  alias SpInitLsaModeContextFn = Proc(LibC::UINT_PTR, LibC::UINT_PTR, UNICODE_STRING*, UInt32, UInt32, SecBufferDesc*, LibC::UINT_PTR*, SecBufferDesc*, UInt32*, LARGE_INTEGER*, BOOLEAN*, SecBuffer*, NTSTATUS)
  alias SpDeleteContextFn = Proc(LibC::UINT_PTR, NTSTATUS)
  alias SpApplyControlTokenFn = Proc(LibC::UINT_PTR, SecBufferDesc*, NTSTATUS)
  alias SpAcceptLsaModeContextFn = Proc(LibC::UINT_PTR, LibC::UINT_PTR, SecBufferDesc*, UInt32, UInt32, LibC::UINT_PTR*, SecBufferDesc*, UInt32*, LARGE_INTEGER*, BOOLEAN*, SecBuffer*, NTSTATUS)
  alias SpGetUserInfoFn = Proc(LUID*, UInt32, SECURITY_USER_DATA**, NTSTATUS)
  alias SpQueryContextAttributesFn = Proc(LibC::UINT_PTR, UInt32, Void*, NTSTATUS)
  alias SpSetContextAttributesFn = Proc(LibC::UINT_PTR, UInt32, Void*, UInt32, NTSTATUS)
  alias SpChangeAccountPasswordFn = Proc(UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, UNICODE_STRING*, BOOLEAN, SecBufferDesc*, NTSTATUS)
  alias SpQueryMetaDataFn = Proc(LibC::UINT_PTR, UNICODE_STRING*, UInt32, UInt32*, UInt8**, LibC::UINT_PTR*, NTSTATUS)
  alias SpExchangeMetaDataFn = Proc(LibC::UINT_PTR, UNICODE_STRING*, UInt32, UInt32, UInt8*, LibC::UINT_PTR*, NTSTATUS)
  alias SpGetCredUIContextFn = Proc(LibC::UINT_PTR, Guid*, UInt32*, UInt8**, NTSTATUS)
  alias SpUpdateCredentialsFn = Proc(LibC::UINT_PTR, Guid*, UInt32, UInt8*, NTSTATUS)
  alias SpValidateTargetInfoFn = Proc(Void**, Void*, Void*, UInt32, SECPKG_TARGETINFO*, NTSTATUS)
  alias LSA_AP_POST_LOGON_USER = Proc(SECPKG_POST_LOGON_USER_INFO*, NTSTATUS)
  alias SpGetRemoteCredGuardLogonBufferFn = Proc(LibC::UINT_PTR, LibC::UINT_PTR, UNICODE_STRING*, LibC::HANDLE*, PLSA_REDIRECTED_LOGON_CALLBACK*, PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK*, UInt32*, Void**, NTSTATUS)
  alias SpGetRemoteCredGuardSupplementalCredsFn = Proc(LibC::UINT_PTR, UNICODE_STRING*, LibC::HANDLE*, PLSA_REDIRECTED_LOGON_CALLBACK*, PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK*, UInt32*, Void**, NTSTATUS)
  alias SpGetTbalSupplementalCredsFn = Proc(LUID, UInt32*, Void**, NTSTATUS)
  alias SpInstanceInitFn = Proc(UInt32, SECPKG_DLL_FUNCTIONS*, Void**, NTSTATUS)
  alias SpInitUserModeContextFn = Proc(LibC::UINT_PTR, SecBuffer*, NTSTATUS)
  alias SpMakeSignatureFn = Proc(LibC::UINT_PTR, UInt32, SecBufferDesc*, UInt32, NTSTATUS)
  alias SpVerifySignatureFn = Proc(LibC::UINT_PTR, SecBufferDesc*, UInt32, UInt32*, NTSTATUS)
  alias SpSealMessageFn = Proc(LibC::UINT_PTR, UInt32, SecBufferDesc*, UInt32, NTSTATUS)
  alias SpUnsealMessageFn = Proc(LibC::UINT_PTR, SecBufferDesc*, UInt32, UInt32*, NTSTATUS)
  alias SpGetContextTokenFn = Proc(LibC::UINT_PTR, LibC::HANDLE*, NTSTATUS)
  alias SpExportSecurityContextFn = Proc(LibC::UINT_PTR, UInt32, SecBuffer*, LibC::HANDLE*, NTSTATUS)
  alias SpImportSecurityContextFn = Proc(SecBuffer*, LibC::HANDLE, LibC::UINT_PTR*, NTSTATUS)
  alias SpCompleteAuthTokenFn = Proc(LibC::UINT_PTR, SecBufferDesc*, NTSTATUS)
  alias SpFormatCredentialsFn = Proc(SecBuffer*, SecBuffer*, NTSTATUS)
  alias SpMarshallSupplementalCredsFn = Proc(UInt32, UInt8*, UInt32*, Void**, NTSTATUS)
  alias SpMarshalAttributeDataFn = Proc(UInt32, UInt32, UInt32, UInt8*, UInt32*, UInt8**, NTSTATUS)
  alias SpLsaModeInitializeFn = Proc(UInt32, UInt32*, SECPKG_FUNCTION_TABLE**, UInt32*, NTSTATUS)
  alias SpUserModeInitializeFn = Proc(UInt32, UInt32*, SECPKG_USER_FUNCTION_TABLE**, UInt32*, NTSTATUS)
  alias PKSEC_CREATE_CONTEXT_LIST = Proc(KSEC_CONTEXT_TYPE, Void*)
  alias PKSEC_INSERT_LIST_ENTRY = Proc(Void*, KSEC_LIST_ENTRY*, Void)
  alias PKSEC_REFERENCE_LIST_ENTRY = Proc(KSEC_LIST_ENTRY*, UInt32, BOOLEAN, NTSTATUS)
  alias PKSEC_DEREFERENCE_LIST_ENTRY = Proc(KSEC_LIST_ENTRY*, UInt8*, Void)
  alias PKSEC_SERIALIZE_WINNT_AUTH_DATA = Proc(Void*, UInt32*, Void**, NTSTATUS)
  alias PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = Proc(Void*, UInt32*, Void**, NTSTATUS)
  alias PKSEC_LOCATE_PKG_BY_ID = Proc(UInt32, Void*)
  alias KspInitPackageFn = Proc(SECPKG_KERNEL_FUNCTIONS*, NTSTATUS)
  alias KspDeleteContextFn = Proc(LibC::UINT_PTR, LibC::UINT_PTR*, NTSTATUS)
  alias KspInitContextFn = Proc(LibC::UINT_PTR, SecBuffer*, LibC::UINT_PTR*, NTSTATUS)
  alias KspMakeSignatureFn = Proc(LibC::UINT_PTR, UInt32, SecBufferDesc*, UInt32, NTSTATUS)
  alias KspVerifySignatureFn = Proc(LibC::UINT_PTR, SecBufferDesc*, UInt32, UInt32*, NTSTATUS)
  alias KspSealMessageFn = Proc(LibC::UINT_PTR, UInt32, SecBufferDesc*, UInt32, NTSTATUS)
  alias KspUnsealMessageFn = Proc(LibC::UINT_PTR, SecBufferDesc*, UInt32, UInt32*, NTSTATUS)
  alias KspGetTokenFn = Proc(LibC::UINT_PTR, LibC::HANDLE*, Void**, NTSTATUS)
  alias KspQueryAttributesFn = Proc(LibC::UINT_PTR, UInt32, Void*, NTSTATUS)
  alias KspCompleteTokenFn = Proc(LibC::UINT_PTR, SecBufferDesc*, NTSTATUS)
  alias KspMapHandleFn = Proc(LibC::UINT_PTR, LibC::UINT_PTR*, NTSTATUS)
  alias KspSetPagingModeFn = Proc(BOOLEAN, NTSTATUS)
  alias KspSerializeAuthDataFn = Proc(Void*, UInt32*, Void**, NTSTATUS)
  alias SSL_EMPTY_CACHE_FN_A = Proc(PSTR, UInt32, LibC::BOOL)
  alias SSL_EMPTY_CACHE_FN_W = Proc(LibC::LPWSTR, UInt32, LibC::BOOL)
  alias SSL_CRACK_CERTIFICATE_FN = Proc(UInt8*, UInt32, LibC::BOOL, X509Certificate**, LibC::BOOL)
  alias SSL_FREE_CERTIFICATE_FN = Proc(X509Certificate*, Void)
  alias SslGetServerIdentityFn = Proc(UInt8*, UInt32, UInt8**, UInt32*, UInt32, Int32)
  alias SslGetExtensionsFn = Proc(UInt8*, UInt32, SCH_EXTENSION_DATA*, UInt8, UInt32*, SchGetExtensionsOptions, Int32)


  enum SECPKG_ATTR : UInt32
    SECPKG_ATTR_C_ACCESS_TOKEN = 2147483666
    SECPKG_ATTR_C_FULL_ACCESS_TOKEN = 2147483778
    SECPKG_ATTR_CERT_TRUST_STATUS = 2147483780
    SECPKG_ATTR_CREDS = 2147483776
    SECPKG_ATTR_CREDS_2 = 2147483782
    SECPKG_ATTR_NEGOTIATION_PACKAGE = 2147483777
    SECPKG_ATTR_PACKAGE_INFO = 10
    SECPKG_ATTR_SERVER_AUTH_FLAGS = 2147483779
    SECPKG_ATTR_SIZES = 0
    SECPKG_ATTR_SUBJECT_SECURITY_ATTRIBUTES = 124
    SECPKG_ATTR_APP_DATA = 94
    SECPKG_ATTR_EAP_PRF_INFO = 101
    SECPKG_ATTR_EARLY_START = 105
    SECPKG_ATTR_DTLS_MTU = 34
    SECPKG_ATTR_KEYING_MATERIAL_INFO = 106
    SECPKG_ATTR_ACCESS_TOKEN = 18
    SECPKG_ATTR_AUTHORITY = 6
    SECPKG_ATTR_CLIENT_SPECIFIED_TARGET = 27
    SECPKG_ATTR_CONNECTION_INFO = 90
    SECPKG_ATTR_DCE_INFO = 3
    SECPKG_ATTR_ENDPOINT_BINDINGS = 26
    SECPKG_ATTR_EAP_KEY_BLOCK = 91
    SECPKG_ATTR_FLAGS = 14
    SECPKG_ATTR_ISSUER_LIST_EX = 89
    SECPKG_ATTR_KEY_INFO = 5
    SECPKG_ATTR_LAST_CLIENT_TOKEN_STATUS = 30
    SECPKG_ATTR_LIFESPAN = 2
    SECPKG_ATTR_LOCAL_CERT_CONTEXT = 84
    SECPKG_ATTR_LOCAL_CRED = 82
    SECPKG_ATTR_NAMES = 1
    SECPKG_ATTR_NATIVE_NAMES = 13
    SECPKG_ATTR_NEGOTIATION_INFO = 12
    SECPKG_ATTR_PASSWORD_EXPIRY = 8
    SECPKG_ATTR_REMOTE_CERT_CONTEXT = 83
    SECPKG_ATTR_ROOT_STORE = 85
    SECPKG_ATTR_SESSION_KEY = 9
    SECPKG_ATTR_SESSION_INFO = 93
    SECPKG_ATTR_STREAM_SIZES = 4
    SECPKG_ATTR_SUPPORTED_SIGNATURES = 102
    SECPKG_ATTR_TARGET_INFORMATION = 17
    SECPKG_ATTR_UNIQUE_BINDINGS = 25
  end

  enum MSV1_0 : UInt32
    MSV1_0_PASSTHRU = 1
    MSV1_0_GUEST_LOGON = 2
  end

  enum SECPKG_CRED : UInt32
    SECPKG_CRED_INBOUND = 1
    SECPKG_CRED_OUTBOUND = 2
  end

  enum MSV_SUB_AUTHENTICATION_FILTER : UInt32
    LOGON_GUEST = 1
    LOGON_NOENCRYPTION = 2
    LOGON_CACHED_ACCOUNT = 4
    LOGON_USED_LM_PASSWORD = 8
    LOGON_EXTRA_SIDS = 32
    LOGON_SUBAUTH_SESSION_KEY = 64
    LOGON_SERVER_TRUST_ACCOUNT = 128
    LOGON_PROFILE_PATH_RETURNED = 1024
    LOGON_RESOURCE_GROUPS = 512
  end

  enum EXPORT_SECURITY_CONTEXT_FLAGS : UInt32
    SECPKG_CONTEXT_EXPORT_RESET_NEW = 1
    SECPKG_CONTEXT_EXPORT_DELETE_OLD = 2
    SECPKG_CONTEXT_EXPORT_TO_KERNEL = 4
  end

  enum ACCEPT_SECURITY_CONTEXT_CONTEXT_REQ : UInt32
    ASC_REQ_ALLOCATE_MEMORY = 256
    ASC_REQ_CONNECTION = 2048
    ASC_REQ_DELEGATE = 1
    ASC_REQ_EXTENDED_ERROR = 32768
    ASC_REQ_REPLAY_DETECT = 4
    ASC_REQ_SEQUENCE_DETECT = 8
    ASC_REQ_STREAM = 65536
  end

  enum KERB_TICKET_FLAGS : UInt32
    KERB_TICKET_FLAGS_forwardable = 1073741824
    KERB_TICKET_FLAGS_forwarded = 536870912
    KERB_TICKET_FLAGS_hw_authent = 1048576
    KERB_TICKET_FLAGS_initial = 4194304
    KERB_TICKET_FLAGS_invalid = 16777216
    KERB_TICKET_FLAGS_may_postdate = 67108864
    KERB_TICKET_FLAGS_ok_as_delegate = 262144
    KERB_TICKET_FLAGS_postdated = 33554432
    KERB_TICKET_FLAGS_pre_authent = 2097152
    KERB_TICKET_FLAGS_proxiable = 268435456
    KERB_TICKET_FLAGS_proxy = 134217728
    KERB_TICKET_FLAGS_renewable = 8388608
    KERB_TICKET_FLAGS_reserved = 2147483648
    KERB_TICKET_FLAGS_reserved1 = 1
  end

  enum KERB_ADDRESS_TYPE : UInt32
    DS_INET_ADDRESS = 1
    DS_NETBIOS_ADDRESS = 2
  end

  enum SCHANNEL_CRED_FLAGS : UInt32
    SCH_CRED_AUTO_CRED_VALIDATION = 32
    SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE = 131072
    SCH_DISABLE_RECONNECTS = 128
    SCH_CRED_IGNORE_NO_REVOCATION_CHECK = 2048
    SCH_CRED_IGNORE_REVOCATION_OFFLINE = 4096
    SCH_CRED_MANUAL_CRED_VALIDATION = 8
    SCH_CRED_NO_DEFAULT_CREDS = 16
    SCH_CRED_NO_SERVERNAME_CHECK = 4
    SCH_CRED_NO_SYSTEM_MAPPER = 2
    SCH_CRED_REVOCATION_CHECK_CHAIN = 512
    SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1024
    SCH_CRED_REVOCATION_CHECK_END_CERT = 256
    SCH_CRED_USE_DEFAULT_CREDS = 64
    SCH_SEND_AUX_RECORD = 2097152
    SCH_SEND_ROOT_CERT = 262144
    SCH_USE_STRONG_CRYPTO = 4194304
    SCH_USE_PRESHAREDKEY_ONLY = 8388608
  end

  enum DOMAIN_PASSWORD_PROPERTIES : UInt32
    DOMAIN_PASSWORD_COMPLEX = 1
    DOMAIN_PASSWORD_NO_ANON_CHANGE = 2
    DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 4
    DOMAIN_LOCKOUT_ADMINS = 8
    DOMAIN_PASSWORD_STORE_CLEARTEXT = 16
    DOMAIN_REFUSE_PASSWORD_CHANGE = 32
  end

  enum SCHANNEL_ALERT_TOKEN_ALERT_TYPE : UInt32
    TLS1_ALERT_WARNING = 1
    TLS1_ALERT_FATAL = 2
  end

  enum TRUSTED_DOMAIN_TRUST_TYPE : UInt32
    TRUST_TYPE_DOWNLEVEL = 1
    TRUST_TYPE_UPLEVEL = 2
    TRUST_TYPE_MIT = 3
    TRUST_TYPE_DCE = 4
  end

  enum MSV_SUBAUTH_LOGON_PARAMETER_CONTROL : UInt32
    MSV1_0_CLEARTEXT_PASSWORD_ALLOWED = 2
    MSV1_0_UPDATE_LOGON_STATISTICS = 4
    MSV1_0_RETURN_USER_PARAMETERS = 8
    MSV1_0_DONT_TRY_GUEST_ACCOUNT = 16
    MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT = 32
    MSV1_0_RETURN_PASSWORD_EXPIRY = 64
    MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT = 2048
    MSV1_0_TRY_GUEST_ACCOUNT_ONLY = 256
    MSV1_0_RETURN_PROFILE_PATH = 512
    MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY = 1024
  end

  enum KERB_REQUEST_FLAGS : UInt32
    KERB_REQUEST_ADD_CREDENTIAL = 1
    KERB_REQUEST_REPLACE_CREDENTIAL = 2
    KERB_REQUEST_REMOVE_CREDENTIAL = 4
  end

  enum TRUSTED_DOMAIN_TRUST_DIRECTION : UInt32
    TRUST_DIRECTION_DISABLED = 0
    TRUST_DIRECTION_INBOUND = 1
    TRUST_DIRECTION_OUTBOUND = 2
    TRUST_DIRECTION_BIDIRECTIONAL = 3
  end

  enum MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS : UInt32
    MSV1_0_CRED_LM_PRESENT = 1
    MSV1_0_CRED_NT_PRESENT = 2
    MSV1_0_CRED_VERSION = 0
  end

  enum SECURITY_PACKAGE_OPTIONS_TYPE : UInt32
    SECPKG_OPTIONS_TYPE_UNKNOWN = 0
    SECPKG_OPTIONS_TYPE_LSA = 1
    SECPKG_OPTIONS_TYPE_SSPI = 2
  end

  enum SCHANNEL_SESSION_TOKEN_FLAGS : UInt32
    SSL_SESSION_ENABLE_RECONNECTS = 1
    SSL_SESSION_DISABLE_RECONNECTS = 2
  end

  enum KERB_CRYPTO_KEY_TYPE : Int32
    KERB_ETYPE_DES_CBC_CRC = 1
    KERB_ETYPE_DES_CBC_MD4 = 2
    KERB_ETYPE_DES_CBC_MD5 = 3
    KERB_ETYPE_NULL = 0
    KERB_ETYPE_RC4_HMAC_NT = 23
    KERB_ETYPE_RC4_MD4 = -128
  end

  enum LSA_AUTH_INFORMATION_AUTH_TYPE : UInt32
    TRUST_AUTH_TYPE_NONE = 0
    TRUST_AUTH_TYPE_NT4OWF = 1
    TRUST_AUTH_TYPE_CLEAR = 2
    TRUST_AUTH_TYPE_VERSION = 3
  end

  enum SECPKG_PACKAGE_CHANGE_TYPE : UInt32
    SECPKG_PACKAGE_CHANGE_LOAD = 0
    SECPKG_PACKAGE_CHANGE_UNLOAD = 1
    SECPKG_PACKAGE_CHANGE_SELECT = 2
  end

  enum TRUSTED_DOMAIN_TRUST_ATTRIBUTES : UInt32
    TRUST_ATTRIBUTE_NON_TRANSITIVE = 1
    TRUST_ATTRIBUTE_UPLEVEL_ONLY = 2
    TRUST_ATTRIBUTE_FILTER_SIDS = 4
    TRUST_ATTRIBUTE_FOREST_TRANSITIVE = 8
    TRUST_ATTRIBUTE_CROSS_ORGANIZATION = 16
    TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL = 64
    TRUST_ATTRIBUTE_WITHIN_FOREST = 32
  end

  enum LSA_LOOKUP_DOMAIN_INFO_CLASS : Int32
    AccountDomainInformation = 5
    DnsDomainInformation = 12
  end

  enum SECURITY_LOGON_TYPE : Int32
    UndefinedLogonType = 0
    Interactive = 2
    Network = 3
    Batch = 4
    Service = 5
    Proxy = 6
    Unlock = 7
    NetworkCleartext = 8
    NewCredentials = 9
    RemoteInteractive = 10
    CachedInteractive = 11
    CachedRemoteInteractive = 12
    CachedUnlock = 13
  end

  enum SE_ADT_PARAMETER_TYPE : Int32
    SeAdtParmTypeNone = 0
    SeAdtParmTypeString = 1
    SeAdtParmTypeFileSpec = 2
    SeAdtParmTypeUlong = 3
    SeAdtParmTypeSid = 4
    SeAdtParmTypeLogonId = 5
    SeAdtParmTypeNoLogonId = 6
    SeAdtParmTypeAccessMask = 7
    SeAdtParmTypePrivs = 8
    SeAdtParmTypeObjectTypes = 9
    SeAdtParmTypeHexUlong = 10
    SeAdtParmTypePtr = 11
    SeAdtParmTypeTime = 12
    SeAdtParmTypeGuid = 13
    SeAdtParmTypeLuid = 14
    SeAdtParmTypeHexInt64 = 15
    SeAdtParmTypeStringList = 16
    SeAdtParmTypeSidList = 17
    SeAdtParmTypeDuration = 18
    SeAdtParmTypeUserAccountControl = 19
    SeAdtParmTypeNoUac = 20
    SeAdtParmTypeMessage = 21
    SeAdtParmTypeDateTime = 22
    SeAdtParmTypeSockAddr = 23
    SeAdtParmTypeSD = 24
    SeAdtParmTypeLogonHours = 25
    SeAdtParmTypeLogonIdNoSid = 26
    SeAdtParmTypeUlongNoConv = 27
    SeAdtParmTypeSockAddrNoPort = 28
    SeAdtParmTypeAccessReason = 29
    SeAdtParmTypeStagingReason = 30
    SeAdtParmTypeResourceAttribute = 31
    SeAdtParmTypeClaims = 32
    SeAdtParmTypeLogonIdAsSid = 33
    SeAdtParmTypeMultiSzString = 34
    SeAdtParmTypeLogonIdEx = 35
  end

  enum POLICY_AUDIT_EVENT_TYPE : Int32
    AuditCategorySystem = 0
    AuditCategoryLogon = 1
    AuditCategoryObjectAccess = 2
    AuditCategoryPrivilegeUse = 3
    AuditCategoryDetailedTracking = 4
    AuditCategoryPolicyChange = 5
    AuditCategoryAccountManagement = 6
    AuditCategoryDirectoryServiceAccess = 7
    AuditCategoryAccountLogon = 8
  end

  enum POLICY_LSA_SERVER_ROLE : Int32
    PolicyServerRoleBackup = 2
    PolicyServerRolePrimary = 3
  end

  enum POLICY_INFORMATION_CLASS : Int32
    PolicyAuditLogInformation = 1
    PolicyAuditEventsInformation = 2
    PolicyPrimaryDomainInformation = 3
    PolicyPdAccountInformation = 4
    PolicyAccountDomainInformation = 5
    PolicyLsaServerRoleInformation = 6
    PolicyReplicaSourceInformation = 7
    PolicyDefaultQuotaInformation = 8
    PolicyModificationInformation = 9
    PolicyAuditFullSetInformation = 10
    PolicyAuditFullQueryInformation = 11
    PolicyDnsDomainInformation = 12
    PolicyDnsDomainInformationInt = 13
    PolicyLocalAccountDomainInformation = 14
    PolicyMachineAccountInformation = 15
    PolicyLastEntry = 16
  end

  enum POLICY_DOMAIN_INFORMATION_CLASS : Int32
    PolicyDomainEfsInformation = 2
    PolicyDomainKerberosTicketInformation = 3
  end

  enum POLICY_NOTIFICATION_INFORMATION_CLASS : Int32
    PolicyNotifyAuditEventsInformation = 1
    PolicyNotifyAccountDomainInformation = 2
    PolicyNotifyServerRoleInformation = 3
    PolicyNotifyDnsDomainInformation = 4
    PolicyNotifyDomainEfsInformation = 5
    PolicyNotifyDomainKerberosTicketInformation = 6
    PolicyNotifyMachineAccountPasswordInformation = 7
    PolicyNotifyGlobalSaclInformation = 8
    PolicyNotifyMax = 9
  end

  enum TRUSTED_INFORMATION_CLASS : Int32
    TrustedDomainNameInformation = 1
    TrustedControllersInformation = 2
    TrustedPosixOffsetInformation = 3
    TrustedPasswordInformation = 4
    TrustedDomainInformationBasic = 5
    TrustedDomainInformationEx = 6
    TrustedDomainAuthInformation = 7
    TrustedDomainFullInformation = 8
    TrustedDomainAuthInformationInternal = 9
    TrustedDomainFullInformationInternal = 10
    TrustedDomainInformationEx2Internal = 11
    TrustedDomainFullInformation2Internal = 12
    TrustedDomainSupportedEncryptionTypes = 13
  end

  enum LSA_FOREST_TRUST_RECORD_TYPE : Int32
    ForestTrustTopLevelName = 0
    ForestTrustTopLevelNameEx = 1
    ForestTrustDomainInfo = 2
    ForestTrustRecordTypeLast = 2
  end

  enum LSA_FOREST_TRUST_COLLISION_RECORD_TYPE : Int32
    CollisionTdo = 0
    CollisionXref = 1
    CollisionOther = 2
  end

  enum NEGOTIATE_MESSAGES : Int32
    NegEnumPackagePrefixes = 0
    NegGetCallerName = 1
    NegTransferCredentials = 2
    NegMsgReserved1 = 3
    NegCallPackageMax = 4
  end

  enum MSV1_0_LOGON_SUBMIT_TYPE : Int32
    MsV1_0InteractiveLogon = 2
    MsV1_0Lm20Logon = 3
    MsV1_0NetworkLogon = 4
    MsV1_0SubAuthLogon = 5
    MsV1_0WorkstationUnlockLogon = 7
    MsV1_0S4ULogon = 12
    MsV1_0VirtualLogon = 82
    MsV1_0NoElevationLogon = 83
    MsV1_0LuidLogon = 84
  end

  enum MSV1_0_PROFILE_BUFFER_TYPE : Int32
    MsV1_0InteractiveProfile = 2
    MsV1_0Lm20LogonProfile = 3
    MsV1_0SmartCardProfile = 4
  end

  enum MSV1_0_CREDENTIAL_KEY_TYPE : Int32
    InvalidCredKey = 0
    DeprecatedIUMCredKey = 1
    DomainUserCredKey = 2
    LocalUserCredKey = 3
    ExternallySuppliedCredKey = 4
  end

  enum MSV1_0_AVID : Int32
    MsvAvEOL = 0
    MsvAvNbComputerName = 1
    MsvAvNbDomainName = 2
    MsvAvDnsComputerName = 3
    MsvAvDnsDomainName = 4
    MsvAvDnsTreeName = 5
    MsvAvFlags = 6
    MsvAvTimestamp = 7
    MsvAvRestrictions = 8
    MsvAvTargetName = 9
    MsvAvChannelBindings = 10
  end

  enum MSV1_0_PROTOCOL_MESSAGE_TYPE : Int32
    MsV1_0Lm20ChallengeRequest = 0
    MsV1_0Lm20GetChallengeResponse = 1
    MsV1_0EnumerateUsers = 2
    MsV1_0GetUserInfo = 3
    MsV1_0ReLogonUsers = 4
    MsV1_0ChangePassword = 5
    MsV1_0ChangeCachedPassword = 6
    MsV1_0GenericPassthrough = 7
    MsV1_0CacheLogon = 8
    MsV1_0SubAuth = 9
    MsV1_0DeriveCredential = 10
    MsV1_0CacheLookup = 11
    MsV1_0SetProcessOption = 12
    MsV1_0ConfigLocalAliases = 13
    MsV1_0ClearCachedCredentials = 14
    MsV1_0LookupToken = 15
    MsV1_0ValidateAuth = 16
    MsV1_0CacheLookupEx = 17
    MsV1_0GetCredentialKey = 18
    MsV1_0SetThreadOption = 19
    MsV1_0DecryptDpapiMasterKey = 20
    MsV1_0GetStrongCredentialKey = 21
    MsV1_0TransferCred = 22
    MsV1_0ProvisionTbal = 23
    MsV1_0DeleteTbalSecrets = 24
  end

  enum KERB_LOGON_SUBMIT_TYPE : Int32
    KerbInteractiveLogon = 2
    KerbSmartCardLogon = 6
    KerbWorkstationUnlockLogon = 7
    KerbSmartCardUnlockLogon = 8
    KerbProxyLogon = 9
    KerbTicketLogon = 10
    KerbTicketUnlockLogon = 11
    KerbS4ULogon = 12
    KerbCertificateLogon = 13
    KerbCertificateS4ULogon = 14
    KerbCertificateUnlockLogon = 15
    KerbNoElevationLogon = 83
    KerbLuidLogon = 84
  end

  enum KERB_PROFILE_BUFFER_TYPE : Int32
    KerbInteractiveProfile = 2
    KerbSmartCardProfile = 4
    KerbTicketProfile = 6
  end

  enum KERB_PROTOCOL_MESSAGE_TYPE : Int32
    KerbDebugRequestMessage = 0
    KerbQueryTicketCacheMessage = 1
    KerbChangeMachinePasswordMessage = 2
    KerbVerifyPacMessage = 3
    KerbRetrieveTicketMessage = 4
    KerbUpdateAddressesMessage = 5
    KerbPurgeTicketCacheMessage = 6
    KerbChangePasswordMessage = 7
    KerbRetrieveEncodedTicketMessage = 8
    KerbDecryptDataMessage = 9
    KerbAddBindingCacheEntryMessage = 10
    KerbSetPasswordMessage = 11
    KerbSetPasswordExMessage = 12
    KerbVerifyCredentialsMessage = 13
    KerbQueryTicketCacheExMessage = 14
    KerbPurgeTicketCacheExMessage = 15
    KerbRefreshSmartcardCredentialsMessage = 16
    KerbAddExtraCredentialsMessage = 17
    KerbQuerySupplementalCredentialsMessage = 18
    KerbTransferCredentialsMessage = 19
    KerbQueryTicketCacheEx2Message = 20
    KerbSubmitTicketMessage = 21
    KerbAddExtraCredentialsExMessage = 22
    KerbQueryKdcProxyCacheMessage = 23
    KerbPurgeKdcProxyCacheMessage = 24
    KerbQueryTicketCacheEx3Message = 25
    KerbCleanupMachinePkinitCredsMessage = 26
    KerbAddBindingCacheEntryExMessage = 27
    KerbQueryBindingCacheMessage = 28
    KerbPurgeBindingCacheMessage = 29
    KerbPinKdcMessage = 30
    KerbUnpinAllKdcsMessage = 31
    KerbQueryDomainExtendedPoliciesMessage = 32
    KerbQueryS4U2ProxyCacheMessage = 33
    KerbRetrieveKeyTabMessage = 34
    KerbRefreshPolicyMessage = 35
    KerbPrintCloudKerberosDebugMessage = 36
  end

  enum KERB_CERTIFICATE_INFO_TYPE : Int32
    CertHashInfo = 1
  end

  enum PKU2U_LOGON_SUBMIT_TYPE : Int32
    Pku2uCertificateS4ULogon = 14
  end

  enum SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT : Int32
    SecApplicationProtocolNegotiationExt_None = 0
    SecApplicationProtocolNegotiationExt_NPN = 1
    SecApplicationProtocolNegotiationExt_ALPN = 2
  end

  enum SEC_TRAFFIC_SECRET_TYPE : Int32
    SecTrafficSecret_None = 0
    SecTrafficSecret_Client = 1
    SecTrafficSecret_Server = 2
  end

  enum SECPKG_CRED_CLASS : Int32
    SecPkgCredClass_None = 0
    SecPkgCredClass_Ephemeral = 10
    SecPkgCredClass_PersistedGeneric = 20
    SecPkgCredClass_PersistedSpecific = 30
    SecPkgCredClass_Explicit = 40
  end

  enum SECPKG_ATTR_LCT_STATUS : Int32
    SecPkgAttrLastClientTokenYes = 0
    SecPkgAttrLastClientTokenNo = 1
    SecPkgAttrLastClientTokenMaybe = 2
  end

  enum SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS : Int32
    SecApplicationProtocolNegotiationStatus_None = 0
    SecApplicationProtocolNegotiationStatus_Success = 1
    SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2
  end

  enum SecDelegationType : Int32
    SecFull = 0
    SecService = 1
    SecTree = 2
    SecDirectory = 3
    SecObject = 4
  end

  enum SASL_AUTHZID_STATE : Int32
    Sasl_AuthZIDForbidden = 0
    Sasl_AuthZIDProcessed = 1
  end

  enum LSA_TOKEN_INFORMATION_TYPE : Int32
    LsaTokenInformationNull = 0
    LsaTokenInformationV1 = 1
    LsaTokenInformationV2 = 2
    LsaTokenInformationV3 = 3
  end

  enum SECPKG_EXTENDED_INFORMATION_CLASS : Int32
    SecpkgGssInfo = 1
    SecpkgContextThunks = 2
    SecpkgMutualAuthLevel = 3
    SecpkgWowClientDll = 4
    SecpkgExtraOids = 5
    SecpkgMaxInfo = 6
    SecpkgNego2Info = 7
  end

  enum SECPKG_CALL_PACKAGE_MESSAGE_TYPE : Int32
    SecPkgCallPackageMinMessage = 1024
    SecPkgCallPackagePinDcMessage = 1024
    SecPkgCallPackageUnpinAllDcsMessage = 1025
    SecPkgCallPackageTransferCredMessage = 1026
    SecPkgCallPackageMaxMessage = 1026
  end

  enum SECPKG_SESSIONINFO_TYPE : Int32
    SecSessionPrimaryCred = 0
  end

  enum SECPKG_NAME_TYPE : Int32
    SecNameSamCompatible = 0
    SecNameAlternateId = 1
    SecNameFlat = 2
    SecNameDN = 3
    SecNameSPN = 4
  end

  enum CRED_FETCH : Int32
    CredFetchDefault = 0
    CredFetchDPAPI = 1
    CredFetchForced = 2
  end

  enum KSEC_CONTEXT_TYPE : Int32
    KSecPaged = 0
    KSecNonPaged = 1
  end

  enum Etlssignaturealgorithm : Int32
    TlsSignatureAlgorithm_Anonymous = 0
    TlsSignatureAlgorithm_Rsa = 1
    TlsSignatureAlgorithm_Dsa = 2
    TlsSignatureAlgorithm_Ecdsa = 3
  end

  enum Etlshashalgorithm : Int32
    TlsHashAlgorithm_None = 0
    TlsHashAlgorithm_Md5 = 1
    TlsHashAlgorithm_Sha1 = 2
    TlsHashAlgorithm_Sha224 = 3
    TlsHashAlgorithm_Sha256 = 4
    TlsHashAlgorithm_Sha384 = 5
    TlsHashAlgorithm_Sha512 = 6
  end

  enum SchGetExtensionsOptions : UInt32
    SCH_EXTENSIONS_OPTIONS_NONE = 0
    SCH_NO_RECORD_HEADER = 1
  end

  enum NETLOGON_LOGON_INFO_CLASS : Int32
    NetlogonInteractiveInformation = 1
    NetlogonNetworkInformation = 2
    NetlogonServiceInformation = 3
    NetlogonGenericInformation = 4
    NetlogonInteractiveTransitiveInformation = 5
    NetlogonNetworkTransitiveInformation = 6
    NetlogonServiceTransitiveInformation = 7
  end

  enum TOKENBINDING_TYPE : Int32
    TOKENBINDING_TYPE_PROVIDED = 0
    TOKENBINDING_TYPE_REFERRED = 1
  end

  enum TOKENBINDING_EXTENSION_FORMAT : Int32
    TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = 0
  end

  enum TOKENBINDING_KEY_PARAMETERS_TYPE : Int32
    TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = 0
    TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = 1
    TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = 2
    TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = 255
  end

  enum EXTENDED_NAME_FORMAT : Int32
    NameUnknown = 0
    NameFullyQualifiedDN = 1
    NameSamCompatible = 2
    NameDisplay = 3
    NameUniqueId = 6
    NameCanonical = 7
    NameUserPrincipal = 8
    NameCanonicalEx = 9
    NameServicePrincipal = 10
    NameDnsDomain = 12
    NameGivenName = 13
    NameSurname = 14
  end

  enum SLDATATYPE : UInt32
    SL_DATA_NONE = 0
    SL_DATA_SZ = 1
    SL_DATA_DWORD = 4
    SL_DATA_BINARY = 3
    SL_DATA_MULTI_SZ = 7
    SL_DATA_SUM = 100
  end

  enum SLIDTYPE : Int32
    SL_ID_APPLICATION = 0
    SL_ID_PRODUCT_SKU = 1
    SL_ID_LICENSE_FILE = 2
    SL_ID_LICENSE = 3
    SL_ID_PKEY = 4
    SL_ID_ALL_LICENSES = 5
    SL_ID_ALL_LICENSE_FILES = 6
    SL_ID_STORE_TOKEN = 7
    SL_ID_LAST = 8
  end

  enum SLLICENSINGSTATUS : Int32
    SL_LICENSING_STATUS_UNLICENSED = 0
    SL_LICENSING_STATUS_LICENSED = 1
    SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2
    SL_LICENSING_STATUS_NOTIFICATION = 3
    SL_LICENSING_STATUS_LAST = 4
  end

  enum SL_ACTIVATION_TYPE : Int32
    SL_ACTIVATION_TYPE_DEFAULT = 0
    SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = 1
  end

  enum SLREFERRALTYPE : Int32
    SL_REFERRALTYPE_SKUID = 0
    SL_REFERRALTYPE_APPID = 1
    SL_REFERRALTYPE_OVERRIDE_SKUID = 2
    SL_REFERRALTYPE_OVERRIDE_APPID = 3
    SL_REFERRALTYPE_BEST_MATCH = 4
  end

  enum SL_GENUINE_STATE : Int32
    SL_GEN_STATE_IS_GENUINE = 0
    SL_GEN_STATE_INVALID_LICENSE = 1
    SL_GEN_STATE_TAMPERED = 2
    SL_GEN_STATE_OFFLINE = 3
    SL_GEN_STATE_LAST = 4
  end

  union LSA_FOREST_TRUST_RECORD_ForestTrustData_e__Union
    top_level_name : UNICODE_STRING
    domain_info : LSA_FOREST_TRUST_DOMAIN_INFO
    data : LSA_FOREST_TRUST_BINARY_DATA
  end
  union SEC_WINNT_AUTH_IDENTITY_INFO
    auth_id_exw : SEC_WINNT_AUTH_IDENTITY_EXW
    auth_id_exa : SEC_WINNT_AUTH_IDENTITY_EXA
    auth_id_a : SEC_WINNT_AUTH_IDENTITY_A
    auth_id_w : SEC_WINNT_AUTH_IDENTITY_W
    auth_id_ex2 : SEC_WINNT_AUTH_IDENTITY_EX2
  end
  union SECPKG_EXTENDED_INFORMATION_Info_e__Union
    gss_info : SECPKG_GSS_INFO
    context_thunks : SECPKG_CONTEXT_THUNKS
    mutual_auth_level : SECPKG_MUTUAL_AUTH_LEVEL
    wow_client_dll : SECPKG_WOW_CLIENT_DLL
    extra_oids : SECPKG_EXTRA_OIDS
    nego2_info : SECPKG_NEGO2_INFO
  end

  struct LSA_TRUST_INFORMATION
    name : UNICODE_STRING
    sid : PSID
  end
  struct LSA_REFERENCED_DOMAIN_LIST
    entries : UInt32
    domains : LSA_TRUST_INFORMATION*
  end
  struct LSA_TRANSLATED_SID2
    use : SID_NAME_USE
    sid : PSID
    domain_index : Int32
    flags : UInt32
  end
  struct LSA_TRANSLATED_NAME
    use : SID_NAME_USE
    name : UNICODE_STRING
    domain_index : Int32
  end
  struct POLICY_ACCOUNT_DOMAIN_INFO
    domain_name : UNICODE_STRING
    domain_sid : PSID
  end
  struct POLICY_DNS_DOMAIN_INFO
    name : UNICODE_STRING
    dns_domain_name : UNICODE_STRING
    dns_forest_name : UNICODE_STRING
    domain_guid : Guid
    sid : PSID
  end
  struct SE_ADT_OBJECT_TYPE
    object_type : Guid
    flags : UInt16
    level : UInt16
    access_mask : UInt32
  end
  struct SE_ADT_PARAMETER_ARRAY_ENTRY
    type : SE_ADT_PARAMETER_TYPE
    length : UInt32
    data : LibC::UINT_PTR[2]*
    address : Void*
  end
  struct SE_ADT_ACCESS_REASON
    access_mask : UInt32
    access_reasons : UInt32[32]*
    object_type_index : UInt32
    access_granted : UInt32
    security_descriptor : SECURITY_DESCRIPTOR*
  end
  struct SE_ADT_CLAIMS
    length : UInt32
    claims : Void*
  end
  struct SE_ADT_PARAMETER_ARRAY
    category_id : UInt32
    audit_id : UInt32
    parameter_count : UInt32
    length : UInt32
    flat_sub_category_id : UInt16
    type : UInt16
    flags : UInt32
    parameters : SE_ADT_PARAMETER_ARRAY_ENTRY[32]*
  end
  struct SE_ADT_PARAMETER_ARRAY_EX
    category_id : UInt32
    audit_id : UInt32
    version : UInt32
    parameter_count : UInt32
    length : UInt32
    flat_sub_category_id : UInt16
    type : UInt16
    flags : UInt32
    parameters : SE_ADT_PARAMETER_ARRAY_ENTRY[32]*
  end
  struct LSA_TRANSLATED_SID
    use : SID_NAME_USE
    relative_id : UInt32
    domain_index : Int32
  end
  struct POLICY_AUDIT_LOG_INFO
    audit_log_percent_full : UInt32
    maximum_log_size : UInt32
    audit_retention_period : LARGE_INTEGER
    audit_log_full_shutdown_in_progress : BOOLEAN
    time_to_shutdown : LARGE_INTEGER
    next_audit_record_id : UInt32
  end
  struct POLICY_AUDIT_EVENTS_INFO
    auditing_mode : BOOLEAN
    event_auditing_options : UInt32*
    maximum_audit_event_count : UInt32
  end
  struct POLICY_AUDIT_SUBCATEGORIES_INFO
    maximum_sub_category_count : UInt32
    event_auditing_options : UInt32*
  end
  struct POLICY_AUDIT_CATEGORIES_INFO
    maximum_category_count : UInt32
    sub_categories_info : POLICY_AUDIT_SUBCATEGORIES_INFO*
  end
  struct POLICY_PRIMARY_DOMAIN_INFO
    name : UNICODE_STRING
    sid : PSID
  end
  struct POLICY_PD_ACCOUNT_INFO
    name : UNICODE_STRING
  end
  struct POLICY_LSA_SERVER_ROLE_INFO
    lsa_server_role : POLICY_LSA_SERVER_ROLE
  end
  struct POLICY_REPLICA_SOURCE_INFO
    replica_source : UNICODE_STRING
    replica_account_name : UNICODE_STRING
  end
  struct POLICY_DEFAULT_QUOTA_INFO
    quota_limits : QUOTA_LIMITS
  end
  struct POLICY_MODIFICATION_INFO
    modified_id : LARGE_INTEGER
    database_creation_time : LARGE_INTEGER
  end
  struct POLICY_AUDIT_FULL_SET_INFO
    shut_down_on_full : BOOLEAN
  end
  struct POLICY_AUDIT_FULL_QUERY_INFO
    shut_down_on_full : BOOLEAN
    log_is_full : BOOLEAN
  end
  struct POLICY_DOMAIN_EFS_INFO
    info_length : UInt32
    efs_blob : UInt8*
  end
  struct POLICY_DOMAIN_KERBEROS_TICKET_INFO
    authentication_options : UInt32
    max_service_ticket_age : LARGE_INTEGER
    max_ticket_age : LARGE_INTEGER
    max_renew_age : LARGE_INTEGER
    max_clock_skew : LARGE_INTEGER
    reserved : LARGE_INTEGER
  end
  struct POLICY_MACHINE_ACCT_INFO
    rid : UInt32
    sid : PSID
  end
  struct TRUSTED_DOMAIN_NAME_INFO
    name : UNICODE_STRING
  end
  struct TRUSTED_CONTROLLERS_INFO
    entries : UInt32
    names : UNICODE_STRING*
  end
  struct TRUSTED_POSIX_OFFSET_INFO
    offset : UInt32
  end
  struct TRUSTED_PASSWORD_INFO
    password : UNICODE_STRING
    old_password : UNICODE_STRING
  end
  struct TRUSTED_DOMAIN_INFORMATION_EX
    name : UNICODE_STRING
    flat_name : UNICODE_STRING
    sid : PSID
    trust_direction : TRUSTED_DOMAIN_TRUST_DIRECTION
    trust_type : TRUSTED_DOMAIN_TRUST_TYPE
    trust_attributes : TRUSTED_DOMAIN_TRUST_ATTRIBUTES
  end
  struct TRUSTED_DOMAIN_INFORMATION_EX2
    name : UNICODE_STRING
    flat_name : UNICODE_STRING
    sid : PSID
    trust_direction : UInt32
    trust_type : UInt32
    trust_attributes : UInt32
    forest_trust_length : UInt32
    forest_trust_info : UInt8*
  end
  struct LSA_AUTH_INFORMATION
    last_update_time : LARGE_INTEGER
    auth_type : LSA_AUTH_INFORMATION_AUTH_TYPE
    auth_info_length : UInt32
    auth_info : UInt8*
  end
  struct TRUSTED_DOMAIN_AUTH_INFORMATION
    incoming_auth_infos : UInt32
    incoming_authentication_information : LSA_AUTH_INFORMATION*
    incoming_previous_authentication_information : LSA_AUTH_INFORMATION*
    outgoing_auth_infos : UInt32
    outgoing_authentication_information : LSA_AUTH_INFORMATION*
    outgoing_previous_authentication_information : LSA_AUTH_INFORMATION*
  end
  struct TRUSTED_DOMAIN_FULL_INFORMATION
    information : TRUSTED_DOMAIN_INFORMATION_EX
    posix_offset : TRUSTED_POSIX_OFFSET_INFO
    auth_information : TRUSTED_DOMAIN_AUTH_INFORMATION
  end
  struct TRUSTED_DOMAIN_FULL_INFORMATION2
    information : TRUSTED_DOMAIN_INFORMATION_EX2
    posix_offset : TRUSTED_POSIX_OFFSET_INFO
    auth_information : TRUSTED_DOMAIN_AUTH_INFORMATION
  end
  struct TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
    supported_encryption_types : UInt32
  end
  struct LSA_FOREST_TRUST_DOMAIN_INFO
    sid : PSID
    dns_name : UNICODE_STRING
    netbios_name : UNICODE_STRING
  end
  struct LSA_FOREST_TRUST_BINARY_DATA
    length : UInt32
    buffer : UInt8*
  end
  struct LSA_FOREST_TRUST_RECORD
    flags : UInt32
    forest_trust_type : LSA_FOREST_TRUST_RECORD_TYPE
    time : LARGE_INTEGER
    forest_trust_data : LSA_FOREST_TRUST_RECORD_ForestTrustData_e__Union
  end
  struct LSA_FOREST_TRUST_INFORMATION
    record_count : UInt32
    entries : LSA_FOREST_TRUST_RECORD**
  end
  struct LSA_FOREST_TRUST_COLLISION_RECORD
    index : UInt32
    type : LSA_FOREST_TRUST_COLLISION_RECORD_TYPE
    flags : UInt32
    name : UNICODE_STRING
  end
  struct LSA_FOREST_TRUST_COLLISION_INFORMATION
    record_count : UInt32
    entries : LSA_FOREST_TRUST_COLLISION_RECORD**
  end
  struct LSA_ENUMERATION_INFORMATION
    sid : PSID
  end
  struct LSA_LAST_INTER_LOGON_INFO
    last_successful_logon : LARGE_INTEGER
    last_failed_logon : LARGE_INTEGER
    failed_attempt_count_since_last_successful_logon : UInt32
  end
  struct SECURITY_LOGON_SESSION_DATA
    size : UInt32
    logon_id : LUID
    user_name : UNICODE_STRING
    logon_domain : UNICODE_STRING
    authentication_package : UNICODE_STRING
    logon_type : UInt32
    session : UInt32
    sid : PSID
    logon_time : LARGE_INTEGER
    logon_server : UNICODE_STRING
    dns_domain_name : UNICODE_STRING
    upn : UNICODE_STRING
    user_flags : UInt32
    last_logon_info : LSA_LAST_INTER_LOGON_INFO
    logon_script : UNICODE_STRING
    profile_path : UNICODE_STRING
    home_directory : UNICODE_STRING
    home_directory_drive : UNICODE_STRING
    logoff_time : LARGE_INTEGER
    kick_off_time : LARGE_INTEGER
    password_last_set : LARGE_INTEGER
    password_can_change : LARGE_INTEGER
    password_must_change : LARGE_INTEGER
  end
  struct CENTRAL_ACCESS_POLICY_ENTRY
    name : UNICODE_STRING
    description : UNICODE_STRING
    change_id : UNICODE_STRING
    length_applies_to : UInt32
    applies_to : UInt8*
    length_sd : UInt32
    sd : SECURITY_DESCRIPTOR*
    length_staged_sd : UInt32
    staged_sd : SECURITY_DESCRIPTOR*
    flags : UInt32
  end
  struct CENTRAL_ACCESS_POLICY
    capid : PSID
    name : UNICODE_STRING
    description : UNICODE_STRING
    change_id : UNICODE_STRING
    flags : UInt32
    cape_count : UInt32
    cap_es : CENTRAL_ACCESS_POLICY_ENTRY**
  end
  struct NEGOTIATE_PACKAGE_PREFIX
    package_id : LibC::UINT_PTR
    package_data_a : Void*
    package_data_w : Void*
    prefix_len : LibC::UINT_PTR
    prefix : UInt8[32]*
  end
  struct NEGOTIATE_PACKAGE_PREFIXES
    message_type : UInt32
    prefix_count : UInt32
    offset : UInt32
    pad : UInt32
  end
  struct NEGOTIATE_CALLER_NAME_REQUEST
    message_type : UInt32
    logon_id : LUID
  end
  struct NEGOTIATE_CALLER_NAME_RESPONSE
    message_type : UInt32
    caller_name : LibC::LPWSTR
  end
  struct DOMAIN_PASSWORD_INFORMATION
    min_password_length : UInt16
    password_history_length : UInt16
    password_properties : DOMAIN_PASSWORD_PROPERTIES
    max_password_age : LARGE_INTEGER
    min_password_age : LARGE_INTEGER
  end
  struct MSV1_0_INTERACTIVE_LOGON
    message_type : MSV1_0_LOGON_SUBMIT_TYPE
    logon_domain_name : UNICODE_STRING
    user_name : UNICODE_STRING
    password : UNICODE_STRING
  end
  struct MSV1_0_INTERACTIVE_PROFILE
    message_type : MSV1_0_PROFILE_BUFFER_TYPE
    logon_count : UInt16
    bad_password_count : UInt16
    logon_time : LARGE_INTEGER
    logoff_time : LARGE_INTEGER
    kick_off_time : LARGE_INTEGER
    password_last_set : LARGE_INTEGER
    password_can_change : LARGE_INTEGER
    password_must_change : LARGE_INTEGER
    logon_script : UNICODE_STRING
    home_directory : UNICODE_STRING
    full_name : UNICODE_STRING
    profile_path : UNICODE_STRING
    home_directory_drive : UNICODE_STRING
    logon_server : UNICODE_STRING
    user_flags : UInt32
  end
  struct MSV1_0_LM20_LOGON
    message_type : MSV1_0_LOGON_SUBMIT_TYPE
    logon_domain_name : UNICODE_STRING
    user_name : UNICODE_STRING
    workstation : UNICODE_STRING
    challenge_to_client : UInt8[8]*
    case_sensitive_challenge_response : STRING
    case_insensitive_challenge_response : STRING
    parameter_control : UInt32
  end
  struct MSV1_0_SUBAUTH_LOGON
    message_type : MSV1_0_LOGON_SUBMIT_TYPE
    logon_domain_name : UNICODE_STRING
    user_name : UNICODE_STRING
    workstation : UNICODE_STRING
    challenge_to_client : UInt8[8]*
    authentication_info1 : STRING
    authentication_info2 : STRING
    parameter_control : MSV_SUBAUTH_LOGON_PARAMETER_CONTROL
    sub_auth_package_id : UInt32
  end
  struct MSV1_0_S4U_LOGON
    message_type : MSV1_0_LOGON_SUBMIT_TYPE
    flags : UInt32
    user_principal_name : UNICODE_STRING
    domain_name : UNICODE_STRING
  end
  struct MSV1_0_LM20_LOGON_PROFILE
    message_type : MSV1_0_PROFILE_BUFFER_TYPE
    kick_off_time : LARGE_INTEGER
    logoff_time : LARGE_INTEGER
    user_flags : MSV_SUB_AUTHENTICATION_FILTER
    user_session_key : UInt8[16]*
    logon_domain_name : UNICODE_STRING
    lanman_session_key : UInt8[8]*
    logon_server : UNICODE_STRING
    user_parameters : UNICODE_STRING
  end
  struct MSV1_0_CREDENTIAL_KEY
    data : UInt8[20]*
  end
  struct MSV1_0_SUPPLEMENTAL_CREDENTIAL
    version : UInt32
    flags : MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS
    lm_password : UInt8[16]*
    nt_password : UInt8[16]*
  end
  struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2
    version : UInt32
    flags : UInt32
    nt_password : UInt8[16]*
    credential_key : MSV1_0_CREDENTIAL_KEY
  end
  struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3
    version : UInt32
    flags : UInt32
    credential_key_type : MSV1_0_CREDENTIAL_KEY_TYPE
    nt_password : UInt8[16]*
    credential_key : MSV1_0_CREDENTIAL_KEY
    sha_password : UInt8[20]*
  end
  struct MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL
    version : UInt32
    encrypted_creds_size : UInt32
    encrypted_creds : UInt8[0]*
  end
  struct MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL
    version : UInt32
    flags : UInt32
    credential_key : MSV1_0_CREDENTIAL_KEY
    credential_key_type : MSV1_0_CREDENTIAL_KEY_TYPE
    encrypted_creds_size : UInt32
    encrypted_creds : UInt8[0]*
  end
  struct MSV1_0_NTLM3_RESPONSE
    response : UInt8[16]*
    resp_type : UInt8
    hi_resp_type : UInt8
    flags : UInt16
    msg_word : UInt32
    time_stamp : UInt64
    challenge_from_client : UInt8[8]*
    av_pairs_off : UInt32
    buffer : UInt8[0]*
  end
  struct MSV1_0_AV_PAIR
    av_id : UInt16
    av_len : UInt16
  end
  struct MSV1_0_CHANGEPASSWORD_REQUEST
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    domain_name : UNICODE_STRING
    account_name : UNICODE_STRING
    old_password : UNICODE_STRING
    new_password : UNICODE_STRING
    impersonating : BOOLEAN
  end
  struct MSV1_0_CHANGEPASSWORD_RESPONSE
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    password_info_valid : BOOLEAN
    domain_password_info : DOMAIN_PASSWORD_INFORMATION
  end
  struct MSV1_0_PASSTHROUGH_REQUEST
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    domain_name : UNICODE_STRING
    package_name : UNICODE_STRING
    data_length : UInt32
    logon_data : UInt8*
    pad : UInt32
  end
  struct MSV1_0_PASSTHROUGH_RESPONSE
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    pad : UInt32
    data_length : UInt32
    validation_data : UInt8*
  end
  struct MSV1_0_SUBAUTH_REQUEST
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    sub_auth_package_id : UInt32
    sub_auth_info_length : UInt32
    sub_auth_submit_buffer : UInt8*
  end
  struct MSV1_0_SUBAUTH_RESPONSE
    message_type : MSV1_0_PROTOCOL_MESSAGE_TYPE
    sub_auth_info_length : UInt32
    sub_auth_return_buffer : UInt8*
  end
  struct KERB_INTERACTIVE_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    logon_domain_name : UNICODE_STRING
    user_name : UNICODE_STRING
    password : UNICODE_STRING
  end
  struct KERB_INTERACTIVE_UNLOCK_LOGON
    logon : KERB_INTERACTIVE_LOGON
    logon_id : LUID
  end
  struct KERB_SMART_CARD_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    pin : UNICODE_STRING
    csp_data_length : UInt32
    csp_data : UInt8*
  end
  struct KERB_SMART_CARD_UNLOCK_LOGON
    logon : KERB_SMART_CARD_LOGON
    logon_id : LUID
  end
  struct KERB_CERTIFICATE_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    domain_name : UNICODE_STRING
    user_name : UNICODE_STRING
    pin : UNICODE_STRING
    flags : UInt32
    csp_data_length : UInt32
    csp_data : UInt8*
  end
  struct KERB_CERTIFICATE_UNLOCK_LOGON
    logon : KERB_CERTIFICATE_LOGON
    logon_id : LUID
  end
  struct KERB_CERTIFICATE_S4U_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    flags : UInt32
    user_principal_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    certificate_length : UInt32
    certificate : UInt8*
  end
  struct KERB_TICKET_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    flags : UInt32
    service_ticket_length : UInt32
    ticket_granting_ticket_length : UInt32
    service_ticket : UInt8*
    ticket_granting_ticket : UInt8*
  end
  struct KERB_TICKET_UNLOCK_LOGON
    logon : KERB_TICKET_LOGON
    logon_id : LUID
  end
  struct KERB_S4U_LOGON
    message_type : KERB_LOGON_SUBMIT_TYPE
    flags : UInt32
    client_upn : UNICODE_STRING
    client_realm : UNICODE_STRING
  end
  struct KERB_INTERACTIVE_PROFILE
    message_type : KERB_PROFILE_BUFFER_TYPE
    logon_count : UInt16
    bad_password_count : UInt16
    logon_time : LARGE_INTEGER
    logoff_time : LARGE_INTEGER
    kick_off_time : LARGE_INTEGER
    password_last_set : LARGE_INTEGER
    password_can_change : LARGE_INTEGER
    password_must_change : LARGE_INTEGER
    logon_script : UNICODE_STRING
    home_directory : UNICODE_STRING
    full_name : UNICODE_STRING
    profile_path : UNICODE_STRING
    home_directory_drive : UNICODE_STRING
    logon_server : UNICODE_STRING
    user_flags : UInt32
  end
  struct KERB_SMART_CARD_PROFILE
    profile : KERB_INTERACTIVE_PROFILE
    certificate_size : UInt32
    certificate_data : UInt8*
  end
  struct KERB_CRYPTO_KEY
    key_type : KERB_CRYPTO_KEY_TYPE
    length : UInt32
    value : UInt8*
  end
  struct KERB_CRYPTO_KEY32
    key_type : Int32
    length : UInt32
    offset : UInt32
  end
  struct KERB_TICKET_PROFILE
    profile : KERB_INTERACTIVE_PROFILE
    session_key : KERB_CRYPTO_KEY
  end
  struct KERB_QUERY_TKT_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
  end
  struct KERB_TICKET_CACHE_INFO
    server_name : UNICODE_STRING
    realm_name : UNICODE_STRING
    start_time : LARGE_INTEGER
    end_time : LARGE_INTEGER
    renew_time : LARGE_INTEGER
    encryption_type : Int32
    ticket_flags : KERB_TICKET_FLAGS
  end
  struct KERB_TICKET_CACHE_INFO_EX
    client_name : UNICODE_STRING
    client_realm : UNICODE_STRING
    server_name : UNICODE_STRING
    server_realm : UNICODE_STRING
    start_time : LARGE_INTEGER
    end_time : LARGE_INTEGER
    renew_time : LARGE_INTEGER
    encryption_type : Int32
    ticket_flags : UInt32
  end
  struct KERB_TICKET_CACHE_INFO_EX2
    client_name : UNICODE_STRING
    client_realm : UNICODE_STRING
    server_name : UNICODE_STRING
    server_realm : UNICODE_STRING
    start_time : LARGE_INTEGER
    end_time : LARGE_INTEGER
    renew_time : LARGE_INTEGER
    encryption_type : Int32
    ticket_flags : UInt32
    session_key_type : UInt32
    branch_id : UInt32
  end
  struct KERB_TICKET_CACHE_INFO_EX3
    client_name : UNICODE_STRING
    client_realm : UNICODE_STRING
    server_name : UNICODE_STRING
    server_realm : UNICODE_STRING
    start_time : LARGE_INTEGER
    end_time : LARGE_INTEGER
    renew_time : LARGE_INTEGER
    encryption_type : Int32
    ticket_flags : UInt32
    session_key_type : UInt32
    branch_id : UInt32
    cache_flags : UInt32
    kdc_called : UNICODE_STRING
  end
  struct KERB_QUERY_TKT_CACHE_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_tickets : UInt32
    tickets : KERB_TICKET_CACHE_INFO[0]*
  end
  struct KERB_QUERY_TKT_CACHE_EX_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_tickets : UInt32
    tickets : KERB_TICKET_CACHE_INFO_EX[0]*
  end
  struct KERB_QUERY_TKT_CACHE_EX2_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_tickets : UInt32
    tickets : KERB_TICKET_CACHE_INFO_EX2[0]*
  end
  struct KERB_QUERY_TKT_CACHE_EX3_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_tickets : UInt32
    tickets : KERB_TICKET_CACHE_INFO_EX3[0]*
  end
  struct KERB_AUTH_DATA
    type : UInt32
    length : UInt32
    data : UInt8*
  end
  struct KERB_NET_ADDRESS
    family : UInt32
    length : UInt32
    address : PSTR
  end
  struct KERB_NET_ADDRESSES
    number : UInt32
    addresses : KERB_NET_ADDRESS[0]*
  end
  struct KERB_EXTERNAL_NAME
    name_type : Int16
    name_count : UInt16
    names : UNICODE_STRING[0]*
  end
  struct KERB_EXTERNAL_TICKET
    service_name : KERB_EXTERNAL_NAME*
    target_name : KERB_EXTERNAL_NAME*
    client_name : KERB_EXTERNAL_NAME*
    domain_name : UNICODE_STRING
    target_domain_name : UNICODE_STRING
    alt_target_domain_name : UNICODE_STRING
    session_key : KERB_CRYPTO_KEY
    ticket_flags : KERB_TICKET_FLAGS
    flags : UInt32
    key_expiration_time : LARGE_INTEGER
    start_time : LARGE_INTEGER
    end_time : LARGE_INTEGER
    renew_until : LARGE_INTEGER
    time_skew : LARGE_INTEGER
    encoded_ticket_size : UInt32
    encoded_ticket : UInt8*
  end
  struct KERB_RETRIEVE_TKT_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    target_name : UNICODE_STRING
    ticket_flags : UInt32
    cache_options : UInt32
    encryption_type : KERB_CRYPTO_KEY_TYPE
    credentials_handle : SecHandle
  end
  struct KERB_RETRIEVE_TKT_RESPONSE
    ticket : KERB_EXTERNAL_TICKET
  end
  struct KERB_PURGE_TKT_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    server_name : UNICODE_STRING
    realm_name : UNICODE_STRING
  end
  struct KERB_PURGE_TKT_CACHE_EX_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    flags : UInt32
    ticket_template : KERB_TICKET_CACHE_INFO_EX
  end
  struct KERB_SUBMIT_TKT_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    flags : UInt32
    key : KERB_CRYPTO_KEY32
    kerb_cred_size : UInt32
    kerb_cred_offset : UInt32
  end
  struct KERB_QUERY_KDC_PROXY_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    logon_id : LUID
  end
  struct KDC_PROXY_CACHE_ENTRY_DATA
    since_last_used : UInt64
    domain_name : UNICODE_STRING
    proxy_server_name : UNICODE_STRING
    proxy_server_vdir : UNICODE_STRING
    proxy_server_port : UInt16
    logon_id : LUID
    cred_user_name : UNICODE_STRING
    cred_domain_name : UNICODE_STRING
    global_cache : BOOLEAN
  end
  struct KERB_QUERY_KDC_PROXY_CACHE_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_entries : UInt32
    entries : KDC_PROXY_CACHE_ENTRY_DATA*
  end
  struct KERB_PURGE_KDC_PROXY_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    logon_id : LUID
  end
  struct KERB_PURGE_KDC_PROXY_CACHE_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_purged : UInt32
  end
  struct KERB_S4U2PROXY_CACHE_ENTRY_INFO
    server_name : UNICODE_STRING
    flags : UInt32
    last_status : NTSTATUS
    expiry : LARGE_INTEGER
  end
  struct KERB_S4U2PROXY_CRED
    user_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    flags : UInt32
    last_status : NTSTATUS
    expiry : LARGE_INTEGER
    count_of_entries : UInt32
    entries : KERB_S4U2PROXY_CACHE_ENTRY_INFO*
  end
  struct KERB_QUERY_S4U2PROXY_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    logon_id : LUID
  end
  struct KERB_QUERY_S4U2PROXY_CACHE_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_creds : UInt32
    creds : KERB_S4U2PROXY_CRED*
  end
  struct KERB_RETRIEVE_KEY_TAB_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    user_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    password : UNICODE_STRING
  end
  struct KERB_RETRIEVE_KEY_TAB_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    key_tab_length : UInt32
    key_tab : UInt8*
  end
  struct KERB_REFRESH_POLICY_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
  end
  struct KERB_REFRESH_POLICY_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
  end
  struct KERB_CLOUD_KERBEROS_DEBUG_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
  end
  struct KERB_CLOUD_KERBEROS_DEBUG_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    version : UInt32
    length : UInt32
    data : UInt32[0]*
  end
  struct KERB_CLOUD_KERBEROS_DEBUG_DATA_V0
    _bitfield : Int32
  end
  struct KERB_CHANGEPASSWORD_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    domain_name : UNICODE_STRING
    account_name : UNICODE_STRING
    old_password : UNICODE_STRING
    new_password : UNICODE_STRING
    impersonating : BOOLEAN
  end
  struct KERB_SETPASSWORD_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    credentials_handle : SecHandle
    flags : UInt32
    domain_name : UNICODE_STRING
    account_name : UNICODE_STRING
    password : UNICODE_STRING
  end
  struct KERB_SETPASSWORD_EX_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    credentials_handle : SecHandle
    flags : UInt32
    account_realm : UNICODE_STRING
    account_name : UNICODE_STRING
    password : UNICODE_STRING
    client_realm : UNICODE_STRING
    client_name : UNICODE_STRING
    impersonating : BOOLEAN
    kdc_address : UNICODE_STRING
    kdc_address_type : UInt32
  end
  struct KERB_DECRYPT_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
    flags : UInt32
    crypto_type : Int32
    key_usage : Int32
    key : KERB_CRYPTO_KEY
    encrypted_data_size : UInt32
    initial_vector_size : UInt32
    initial_vector : UInt8*
    encrypted_data : UInt8*
  end
  struct KERB_DECRYPT_RESPONSE
    decrypted_data : UInt8[0]*
  end
  struct KERB_ADD_BINDING_CACHE_ENTRY_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    realm_name : UNICODE_STRING
    kdc_address : UNICODE_STRING
    address_type : KERB_ADDRESS_TYPE
  end
  struct KERB_REFRESH_SCCRED_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    credential_blob : UNICODE_STRING
    logon_id : LUID
    flags : UInt32
  end
  struct KERB_ADD_CREDENTIALS_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    user_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    password : UNICODE_STRING
    logon_id : LUID
    flags : KERB_REQUEST_FLAGS
  end
  struct KERB_ADD_CREDENTIALS_REQUEST_EX
    credentials : KERB_ADD_CREDENTIALS_REQUEST
    principal_name_count : UInt32
    principal_names : UNICODE_STRING[0]*
  end
  struct KERB_TRANSFER_CRED_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    origin_logon_id : LUID
    destination_logon_id : LUID
    flags : UInt32
  end
  struct KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    logon_id : LUID
  end
  struct KERB_BINDING_CACHE_ENTRY_DATA
    discovery_time : UInt64
    realm_name : UNICODE_STRING
    kdc_address : UNICODE_STRING
    address_type : KERB_ADDRESS_TYPE
    flags : UInt32
    dc_flags : UInt32
    cache_flags : UInt32
    kdc_name : UNICODE_STRING
  end
  struct KERB_QUERY_BINDING_CACHE_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    count_of_entries : UInt32
    entries : KERB_BINDING_CACHE_ENTRY_DATA*
  end
  struct KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    realm_name : UNICODE_STRING
    kdc_address : UNICODE_STRING
    address_type : KERB_ADDRESS_TYPE
    dc_flags : UInt32
  end
  struct KERB_QUERY_BINDING_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
  end
  struct KERB_PURGE_BINDING_CACHE_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
  end
  struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    domain_name : UNICODE_STRING
  end
  struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE
    message_type : KERB_PROTOCOL_MESSAGE_TYPE
    flags : UInt32
    extended_policies : UInt32
    ds_flags : UInt32
  end
  struct KERB_CERTIFICATE_HASHINFO
    store_name_length : UInt16
    hash_length : UInt16
  end
  struct KERB_CERTIFICATE_INFO
    cert_info_size : UInt32
    info_type : UInt32
  end
  struct POLICY_AUDIT_SID_ARRAY
    users_count : UInt32
    user_sid_array : PSID*
  end
  struct AUDIT_POLICY_INFORMATION
    audit_sub_category_guid : Guid
    auditing_information : UInt32
    audit_category_guid : Guid
  end
  struct PKU2U_CERT_BLOB
    cert_offset : UInt32
    cert_length : UInt16
  end
  struct PKU2U_CREDUI_CONTEXT
    version : UInt64
    cb_header_length : UInt16
    cb_structure_length : UInt32
    cert_array_count : UInt16
    cert_array_offset : UInt32
  end
  struct PKU2U_CERTIFICATE_S4U_LOGON
    message_type : PKU2U_LOGON_SUBMIT_TYPE
    flags : UInt32
    user_principal_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    certificate_length : UInt32
    certificate : UInt8*
  end
  struct SecPkgInfoW
    f_capabilities : UInt32
    w_version : UInt16
    w_rpcid : UInt16
    cb_max_token : UInt32
    name : UInt16*
    comment : UInt16*
  end
  struct SecPkgInfoA
    f_capabilities : UInt32
    w_version : UInt16
    w_rpcid : UInt16
    cb_max_token : UInt32
    name : Int8*
    comment : Int8*
  end
  struct SecBuffer
    cb_buffer : UInt32
    buffer_type : UInt32
    pv_buffer : Void*
  end
  struct SecBufferDesc
    ul_version : UInt32
    c_buffers : UInt32
    p_buffers : SecBuffer*
  end
  struct SEC_NEGOTIATION_INFO
    size : UInt32
    name_length : UInt32
    name : UInt16*
    reserved : Void*
  end
  struct SEC_CHANNEL_BINDINGS
    dw_initiator_addr_type : UInt32
    cb_initiator_length : UInt32
    dw_initiator_offset : UInt32
    dw_acceptor_addr_type : UInt32
    cb_acceptor_length : UInt32
    dw_acceptor_offset : UInt32
    cb_application_data_length : UInt32
    dw_application_data_offset : UInt32
  end
  struct SEC_APPLICATION_PROTOCOL_LIST
    proto_nego_ext : SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT
    protocol_list_size : UInt16
    protocol_list : UInt8[0]*
  end
  struct SEC_APPLICATION_PROTOCOLS
    protocol_lists_size : UInt32
    protocol_lists : SEC_APPLICATION_PROTOCOL_LIST[0]*
  end
  struct SEC_SRTP_PROTECTION_PROFILES
    profiles_size : UInt16
    profiles_list : UInt16[0]*
  end
  struct SEC_SRTP_MASTER_KEY_IDENTIFIER
    master_key_identifier_size : UInt8
    master_key_identifier : UInt8[0]*
  end
  struct SEC_TOKEN_BINDING
    major_version : UInt8
    minor_version : UInt8
    key_parameters_size : UInt16
    key_parameters : UInt8[0]*
  end
  struct SEC_PRESHAREDKEY
    key_size : UInt16
    key : UInt8[0]*
  end
  struct SEC_PRESHAREDKEY_IDENTITY
    key_identity_size : UInt16
    key_identity : UInt8[0]*
  end
  struct SEC_DTLS_MTU
    path_mtu : UInt16
  end
  struct SEC_FLAGS
    flags : UInt64
  end
  struct SEC_TRAFFIC_SECRETS
    symmetric_alg_id : Char[64]*
    chaining_mode : Char[64]*
    hash_alg_id : Char[64]*
    key_size : UInt16
    iv_size : UInt16
    msg_sequence_start : UInt16
    msg_sequence_end : UInt16
    traffic_secret_type : SEC_TRAFFIC_SECRET_TYPE
    traffic_secret_size : UInt16
    traffic_secret : UInt8[0]*
  end
  struct SecPkgCredentials_NamesW
    s_user_name : UInt16*
  end
  struct SecPkgCredentials_NamesA
    s_user_name : Int8*
  end
  struct SecPkgCredentials_SSIProviderW
    s_provider_name : UInt16*
    provider_info_length : UInt32
    provider_info : PSTR
  end
  struct SecPkgCredentials_SSIProviderA
    s_provider_name : Int8*
    provider_info_length : UInt32
    provider_info : PSTR
  end
  struct SecPkgCredentials_KdcProxySettingsW
    version : UInt32
    flags : UInt32
    proxy_server_offset : UInt16
    proxy_server_length : UInt16
    client_tls_cred_offset : UInt16
    client_tls_cred_length : UInt16
  end
  struct SecPkgCredentials_Cert
    encoded_cert_size : UInt32
    encoded_cert : UInt8*
  end
  struct SecPkgContext_SubjectAttributes
    attribute_info : Void*
  end
  struct SecPkgContext_CredInfo
    cred_class : SECPKG_CRED_CLASS
    is_prompting_needed : UInt32
  end
  struct SecPkgContext_NegoPackageInfo
    package_mask : UInt32
  end
  struct SecPkgContext_NegoStatus
    last_status : UInt32
  end
  struct SecPkgContext_Sizes
    cb_max_token : UInt32
    cb_max_signature : UInt32
    cb_block_size : UInt32
    cb_security_trailer : UInt32
  end
  struct SecPkgContext_StreamSizes
    cb_header : UInt32
    cb_trailer : UInt32
    cb_maximum_message : UInt32
    c_buffers : UInt32
    cb_block_size : UInt32
  end
  struct SecPkgContext_NamesW
    s_user_name : UInt16*
  end
  struct SecPkgContext_LastClientTokenStatus
    last_client_token_status : SECPKG_ATTR_LCT_STATUS
  end
  struct SecPkgContext_NamesA
    s_user_name : Int8*
  end
  struct SecPkgContext_Lifespan
    ts_start : LARGE_INTEGER
    ts_expiry : LARGE_INTEGER
  end
  struct SecPkgContext_DceInfo
    authz_svc : UInt32
    p_pac : Void*
  end
  struct SecPkgContext_KeyInfoA
    s_signature_algorithm_name : Int8*
    s_encrypt_algorithm_name : Int8*
    key_size : UInt32
    signature_algorithm : UInt32
    encrypt_algorithm : UInt32
  end
  struct SecPkgContext_KeyInfoW
    s_signature_algorithm_name : UInt16*
    s_encrypt_algorithm_name : UInt16*
    key_size : UInt32
    signature_algorithm : UInt32
    encrypt_algorithm : UInt32
  end
  struct SecPkgContext_AuthorityA
    s_authority_name : Int8*
  end
  struct SecPkgContext_AuthorityW
    s_authority_name : UInt16*
  end
  struct SecPkgContext_ProtoInfoA
    s_protocol_name : Int8*
    major_version : UInt32
    minor_version : UInt32
  end
  struct SecPkgContext_ProtoInfoW
    s_protocol_name : UInt16*
    major_version : UInt32
    minor_version : UInt32
  end
  struct SecPkgContext_PasswordExpiry
    ts_password_expires : LARGE_INTEGER
  end
  struct SecPkgContext_LogoffTime
    ts_logoff_time : LARGE_INTEGER
  end
  struct SecPkgContext_SessionKey
    session_key_length : UInt32
    session_key : UInt8*
  end
  struct SecPkgContext_NegoKeys
    key_type : UInt32
    key_length : UInt16
    key_value : UInt8*
    verify_key_type : UInt32
    verify_key_length : UInt16
    verify_key_value : UInt8*
  end
  struct SecPkgContext_PackageInfoW
    package_info : SecPkgInfoW*
  end
  struct SecPkgContext_PackageInfoA
    package_info : SecPkgInfoA*
  end
  struct SecPkgContext_UserFlags
    user_flags : UInt32
  end
  struct SecPkgContext_Flags
    flags : UInt32
  end
  struct SecPkgContext_NegotiationInfoA
    package_info : SecPkgInfoA*
    negotiation_state : UInt32
  end
  struct SecPkgContext_NegotiationInfoW
    package_info : SecPkgInfoW*
    negotiation_state : UInt32
  end
  struct SecPkgContext_NativeNamesW
    s_client_name : UInt16*
    s_server_name : UInt16*
  end
  struct SecPkgContext_NativeNamesA
    s_client_name : Int8*
    s_server_name : Int8*
  end
  struct SecPkgContext_CredentialNameW
    credential_type : UInt32
    s_credential_name : UInt16*
  end
  struct SecPkgContext_CredentialNameA
    credential_type : UInt32
    s_credential_name : Int8*
  end
  struct SecPkgContext_AccessToken
    access_token : Void*
  end
  struct SecPkgContext_TargetInformation
    marshalled_target_info_length : UInt32
    marshalled_target_info : UInt8*
  end
  struct SecPkgContext_AuthzID
    authz_id_length : UInt32
    authz_id : PSTR
  end
  struct SecPkgContext_Target
    target_length : UInt32
    target : PSTR
  end
  struct SecPkgContext_ClientSpecifiedTarget
    s_target_name : UInt16*
  end
  struct SecPkgContext_Bindings
    bindings_length : UInt32
    bindings : SEC_CHANNEL_BINDINGS*
  end
  struct SecPkgContext_ApplicationProtocol
    proto_nego_status : SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS
    proto_nego_ext : SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT
    protocol_id_size : UInt8
    protocol_id : UInt8[255]*
  end
  struct SecPkgContext_NegotiatedTlsExtensions
    extensions_count : UInt32
    extensions : UInt16*
  end
  struct SECPKG_APP_MODE_INFO
    user_function : UInt32
    argument1 : LibC::UINT_PTR
    argument2 : LibC::UINT_PTR
    user_data : SecBuffer
    return_to_lsa : BOOLEAN
  end
  struct SecurityFunctionTableW
    dw_version : UInt32
    enumerate_security_packages_w : ENUMERATE_SECURITY_PACKAGES_FN_W
    query_credentials_attributes_w : QUERY_CREDENTIALS_ATTRIBUTES_FN_W
    acquire_credentials_handle_w : ACQUIRE_CREDENTIALS_HANDLE_FN_W
    free_credentials_handle : FREE_CREDENTIALS_HANDLE_FN
    reserved2 : Void*
    initialize_security_context_w : INITIALIZE_SECURITY_CONTEXT_FN_W
    accept_security_context : ACCEPT_SECURITY_CONTEXT_FN
    complete_auth_token : COMPLETE_AUTH_TOKEN_FN
    delete_security_context : DELETE_SECURITY_CONTEXT_FN
    apply_control_token : APPLY_CONTROL_TOKEN_FN
    query_context_attributes_w : QUERY_CONTEXT_ATTRIBUTES_FN_W
    impersonate_security_context : IMPERSONATE_SECURITY_CONTEXT_FN
    revert_security_context : REVERT_SECURITY_CONTEXT_FN
    make_signature : MAKE_SIGNATURE_FN
    verify_signature : VERIFY_SIGNATURE_FN
    free_context_buffer : FREE_CONTEXT_BUFFER_FN
    query_security_package_info_w : QUERY_SECURITY_PACKAGE_INFO_FN_W
    reserved3 : Void*
    reserved4 : Void*
    export_security_context : EXPORT_SECURITY_CONTEXT_FN
    import_security_context_w : IMPORT_SECURITY_CONTEXT_FN_W
    add_credentials_w : ADD_CREDENTIALS_FN_W
    reserved8 : Void*
    query_security_context_token : QUERY_SECURITY_CONTEXT_TOKEN_FN
    encrypt_message : ENCRYPT_MESSAGE_FN
    decrypt_message : DECRYPT_MESSAGE_FN
    set_context_attributes_w : SET_CONTEXT_ATTRIBUTES_FN_W
    set_credentials_attributes_w : SET_CREDENTIALS_ATTRIBUTES_FN_W
    change_account_password_w : CHANGE_PASSWORD_FN_W
    query_context_attributes_ex_w : QUERY_CONTEXT_ATTRIBUTES_EX_FN_W
    query_credentials_attributes_ex_w : QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W
  end
  struct SecurityFunctionTableA
    dw_version : UInt32
    enumerate_security_packages_a : ENUMERATE_SECURITY_PACKAGES_FN_A
    query_credentials_attributes_a : QUERY_CREDENTIALS_ATTRIBUTES_FN_A
    acquire_credentials_handle_a : ACQUIRE_CREDENTIALS_HANDLE_FN_A
    free_credentials_handle : FREE_CREDENTIALS_HANDLE_FN
    reserved2 : Void*
    initialize_security_context_a : INITIALIZE_SECURITY_CONTEXT_FN_A
    accept_security_context : ACCEPT_SECURITY_CONTEXT_FN
    complete_auth_token : COMPLETE_AUTH_TOKEN_FN
    delete_security_context : DELETE_SECURITY_CONTEXT_FN
    apply_control_token : APPLY_CONTROL_TOKEN_FN
    query_context_attributes_a : QUERY_CONTEXT_ATTRIBUTES_FN_A
    impersonate_security_context : IMPERSONATE_SECURITY_CONTEXT_FN
    revert_security_context : REVERT_SECURITY_CONTEXT_FN
    make_signature : MAKE_SIGNATURE_FN
    verify_signature : VERIFY_SIGNATURE_FN
    free_context_buffer : FREE_CONTEXT_BUFFER_FN
    query_security_package_info_a : QUERY_SECURITY_PACKAGE_INFO_FN_A
    reserved3 : Void*
    reserved4 : Void*
    export_security_context : EXPORT_SECURITY_CONTEXT_FN
    import_security_context_a : IMPORT_SECURITY_CONTEXT_FN_A
    add_credentials_a : ADD_CREDENTIALS_FN_A
    reserved8 : Void*
    query_security_context_token : QUERY_SECURITY_CONTEXT_TOKEN_FN
    encrypt_message : ENCRYPT_MESSAGE_FN
    decrypt_message : DECRYPT_MESSAGE_FN
    set_context_attributes_a : SET_CONTEXT_ATTRIBUTES_FN_A
    set_credentials_attributes_a : SET_CREDENTIALS_ATTRIBUTES_FN_A
    change_account_password_a : CHANGE_PASSWORD_FN_A
    query_context_attributes_ex_a : QUERY_CONTEXT_ATTRIBUTES_EX_FN_A
    query_credentials_attributes_ex_a : QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A
  end
  struct SEC_WINNT_AUTH_IDENTITY_EX2
    version : UInt32
    cb_header_length : UInt16
    cb_structure_length : UInt32
    user_offset : UInt32
    user_length : UInt16
    domain_offset : UInt32
    domain_length : UInt16
    packed_credentials_offset : UInt32
    packed_credentials_length : UInt16
    flags : UInt32
    package_list_offset : UInt32
    package_list_length : UInt16
  end
  struct SEC_WINNT_AUTH_IDENTITY_EXW
    version : UInt32
    length : UInt32
    user : UInt16*
    user_length : UInt32
    domain : UInt16*
    domain_length : UInt32
    password : UInt16*
    password_length : UInt32
    flags : UInt32
    package_list : UInt16*
    package_list_length : UInt32
  end
  struct SEC_WINNT_AUTH_IDENTITY_EXA
    version : UInt32
    length : UInt32
    user : UInt8*
    user_length : UInt32
    domain : UInt8*
    domain_length : UInt32
    password : UInt8*
    password_length : UInt32
    flags : UInt32
    package_list : UInt8*
    package_list_length : UInt32
  end
  struct SECURITY_PACKAGE_OPTIONS
    size : UInt32
    type : SECURITY_PACKAGE_OPTIONS_TYPE
    flags : UInt32
    signature_size : UInt32
    signature : Void*
  end
  struct LSA_TOKEN_INFORMATION_NULL
    expiration_time : LARGE_INTEGER
    groups : TOKEN_GROUPS*
  end
  struct LSA_TOKEN_INFORMATION_V1
    expiration_time : LARGE_INTEGER
    user : TOKEN_USER
    groups : TOKEN_GROUPS*
    primary_group : TOKEN_PRIMARY_GROUP
    privileges : TOKEN_PRIVILEGES*
    owner : TOKEN_OWNER
    default_dacl : TOKEN_DEFAULT_DACL
  end
  struct LSA_TOKEN_INFORMATION_V3
    expiration_time : LARGE_INTEGER
    user : TOKEN_USER
    groups : TOKEN_GROUPS*
    primary_group : TOKEN_PRIMARY_GROUP
    privileges : TOKEN_PRIVILEGES*
    owner : TOKEN_OWNER
    default_dacl : TOKEN_DEFAULT_DACL
    user_claims : TOKEN_USER_CLAIMS
    device_claims : TOKEN_DEVICE_CLAIMS
    device_groups : TOKEN_GROUPS*
  end
  struct LSA_DISPATCH_TABLE
    create_logon_session : PLSA_CREATE_LOGON_SESSION
    delete_logon_session : PLSA_DELETE_LOGON_SESSION
    add_credential : PLSA_ADD_CREDENTIAL
    get_credentials : PLSA_GET_CREDENTIALS
    delete_credential : PLSA_DELETE_CREDENTIAL
    allocate_lsa_heap : PLSA_ALLOCATE_LSA_HEAP
    free_lsa_heap : PLSA_FREE_LSA_HEAP
    allocate_client_buffer : PLSA_ALLOCATE_CLIENT_BUFFER
    free_client_buffer : PLSA_FREE_CLIENT_BUFFER
    copy_to_client_buffer : PLSA_COPY_TO_CLIENT_BUFFER
    copy_from_client_buffer : PLSA_COPY_FROM_CLIENT_BUFFER
  end
  struct SAM_REGISTER_MAPPING_ELEMENT
    original : PSTR
    mapped : PSTR
    continuable : BOOLEAN
  end
  struct SAM_REGISTER_MAPPING_LIST
    count : UInt32
    elements : SAM_REGISTER_MAPPING_ELEMENT*
  end
  struct SAM_REGISTER_MAPPING_TABLE
    count : UInt32
    lists : SAM_REGISTER_MAPPING_LIST*
  end
  struct SECPKG_CLIENT_INFO
    logon_id : LUID
    process_id : UInt32
    thread_id : UInt32
    has_tcb_privilege : BOOLEAN
    impersonating : BOOLEAN
    restricted : BOOLEAN
    client_flags : UInt8
    impersonation_level : SECURITY_IMPERSONATION_LEVEL
    client_token : LibC::HANDLE
  end
  struct SECPKG_CALL_INFO
    process_id : UInt32
    thread_id : UInt32
    attributes : UInt32
    call_count : UInt32
    mech_oid : Void*
  end
  struct SECPKG_SUPPLEMENTAL_CRED
    package_name : UNICODE_STRING
    credential_size : UInt32
    credentials : UInt8*
  end
  struct SECPKG_BYTE_VECTOR
    byte_array_offset : UInt32
    byte_array_length : UInt16
  end
  struct SECPKG_SHORT_VECTOR
    short_array_offset : UInt32
    short_array_count : UInt16
  end
  struct SECPKG_SUPPLIED_CREDENTIAL
    cb_header_length : UInt16
    cb_structure_length : UInt16
    user_name : SECPKG_SHORT_VECTOR
    domain_name : SECPKG_SHORT_VECTOR
    packed_credentials : SECPKG_BYTE_VECTOR
    cred_flags : UInt32
  end
  struct SECPKG_CREDENTIAL
    version : UInt64
    cb_header_length : UInt16
    cb_structure_length : UInt32
    client_process : UInt32
    client_thread : UInt32
    logon_id : LUID
    client_token : LibC::HANDLE
    session_id : UInt32
    modified_id : LUID
    f_credentials : UInt32
    flags : UInt32
    principal_name : SECPKG_BYTE_VECTOR
    package_list : SECPKG_BYTE_VECTOR
    marshaled_supplied_creds : SECPKG_BYTE_VECTOR
  end
  struct SECPKG_SUPPLEMENTAL_CRED_ARRAY
    credential_count : UInt32
    credentials : SECPKG_SUPPLEMENTAL_CRED[0]*
  end
  struct SECPKG_SURROGATE_LOGON_ENTRY
    type : Guid
    data : Void*
  end
  struct SECPKG_SURROGATE_LOGON
    version : UInt32
    surrogate_logon_id : LUID
    entry_count : UInt32
    entries : SECPKG_SURROGATE_LOGON_ENTRY*
  end
  struct SECPKG_PRIMARY_CRED
    logon_id : LUID
    downlevel_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    password : UNICODE_STRING
    old_password : UNICODE_STRING
    user_sid : PSID
    flags : UInt32
    dns_domain_name : UNICODE_STRING
    upn : UNICODE_STRING
    logon_server : UNICODE_STRING
    spare1 : UNICODE_STRING
    spare2 : UNICODE_STRING
    spare3 : UNICODE_STRING
    spare4 : UNICODE_STRING
  end
  struct SECPKG_PRIMARY_CRED_EX
    logon_id : LUID
    downlevel_name : UNICODE_STRING
    domain_name : UNICODE_STRING
    password : UNICODE_STRING
    old_password : UNICODE_STRING
    user_sid : PSID
    flags : UInt32
    dns_domain_name : UNICODE_STRING
    upn : UNICODE_STRING
    logon_server : UNICODE_STRING
    spare1 : UNICODE_STRING
    spare2 : UNICODE_STRING
    spare3 : UNICODE_STRING
    spare4 : UNICODE_STRING
    package_id : LibC::UINT_PTR
    prev_logon_id : LUID
    flags_ex : UInt32
  end
  struct SECPKG_PARAMETERS
    version : UInt32
    machine_state : UInt32
    setup_mode : UInt32
    domain_sid : PSID
    domain_name : UNICODE_STRING
    dns_domain_name : UNICODE_STRING
    domain_guid : Guid
  end
  struct SECPKG_GSS_INFO
    encoded_id_length : UInt32
    encoded_id : UInt8[4]*
  end
  struct SECPKG_CONTEXT_THUNKS
    info_level_count : UInt32
    levels : UInt32[0]*
  end
  struct SECPKG_MUTUAL_AUTH_LEVEL
    mutual_auth_level : UInt32
  end
  struct SECPKG_WOW_CLIENT_DLL
    wow_client_dll_path : UNICODE_STRING
  end
  struct SECPKG_SERIALIZED_OID
    oid_length : UInt32
    oid_attributes : UInt32
    oid_value : UInt8[32]*
  end
  struct SECPKG_EXTRA_OIDS
    oid_count : UInt32
    oids : SECPKG_SERIALIZED_OID[0]*
  end
  struct SECPKG_NEGO2_INFO
    auth_scheme : UInt8[16]*
    package_flags : UInt32
  end
  struct SECPKG_EXTENDED_INFORMATION
    class : SECPKG_EXTENDED_INFORMATION_CLASS
    info : SECPKG_EXTENDED_INFORMATION_Info_e__Union
  end
  struct SECPKG_TARGETINFO
    domain_sid : PSID
    computer_name : LibC::LPWSTR
  end
  struct SecPkgContext_SaslContext
    sasl_context : Void*
  end
  struct SECURITY_USER_DATA
    user_name : UNICODE_STRING
    logon_domain_name : UNICODE_STRING
    logon_server : UNICODE_STRING
    p_sid : PSID
  end
  struct SECPKG_CALL_PACKAGE_PIN_DC_REQUEST
    message_type : UInt32
    flags : UInt32
    domain_name : UNICODE_STRING
    dc_name : UNICODE_STRING
    dc_flags : UInt32
  end
  struct SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST
    message_type : UInt32
    flags : UInt32
  end
  struct SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST
    message_type : UInt32
    origin_logon_id : LUID
    destination_logon_id : LUID
    flags : UInt32
  end
  struct SECPKG_REDIRECTED_LOGON_BUFFER
    redirected_logon_guid : Guid
    redirected_logon_handle : LibC::HANDLE
    init : PLSA_REDIRECTED_LOGON_INIT
    callback : PLSA_REDIRECTED_LOGON_CALLBACK
    cleanup_callback : PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK
    get_logon_creds : PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS
    get_supplemental_creds : PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS
  end
  struct SECPKG_POST_LOGON_USER_INFO
    flags : UInt32
    logon_id : LUID
    linked_logon_id : LUID
  end
  struct SECPKG_EVENT_PACKAGE_CHANGE
    change_type : SECPKG_PACKAGE_CHANGE_TYPE
    package_id : LibC::UINT_PTR
    package_name : UNICODE_STRING
  end
  struct SECPKG_EVENT_ROLE_CHANGE
    previous_role : UInt32
    new_role : UInt32
  end
  struct SECPKG_EVENT_NOTIFY
    event_class : UInt32
    reserved : UInt32
    event_data_size : UInt32
    event_data : Void*
    package_parameter : Void*
  end
  struct ENCRYPTED_CREDENTIALW
    cred : CREDENTIALW
    clear_credential_blob_size : UInt32
  end
  struct SEC_WINNT_AUTH_IDENTITY32
    user : UInt32
    user_length : UInt32
    domain : UInt32
    domain_length : UInt32
    password : UInt32
    password_length : UInt32
    flags : UInt32
  end
  struct SEC_WINNT_AUTH_IDENTITY_EX32
    version : UInt32
    length : UInt32
    user : UInt32
    user_length : UInt32
    domain : UInt32
    domain_length : UInt32
    password : UInt32
    password_length : UInt32
    flags : UInt32
    package_list : UInt32
    package_list_length : UInt32
  end
  struct LSA_SECPKG_FUNCTION_TABLE
    create_logon_session : PLSA_CREATE_LOGON_SESSION
    delete_logon_session : PLSA_DELETE_LOGON_SESSION
    add_credential : PLSA_ADD_CREDENTIAL
    get_credentials : PLSA_GET_CREDENTIALS
    delete_credential : PLSA_DELETE_CREDENTIAL
    allocate_lsa_heap : PLSA_ALLOCATE_LSA_HEAP
    free_lsa_heap : PLSA_FREE_LSA_HEAP
    allocate_client_buffer : PLSA_ALLOCATE_CLIENT_BUFFER
    free_client_buffer : PLSA_FREE_CLIENT_BUFFER
    copy_to_client_buffer : PLSA_COPY_TO_CLIENT_BUFFER
    copy_from_client_buffer : PLSA_COPY_FROM_CLIENT_BUFFER
    impersonate_client : PLSA_IMPERSONATE_CLIENT
    unload_package : PLSA_UNLOAD_PACKAGE
    duplicate_handle : PLSA_DUPLICATE_HANDLE
    save_supplemental_credentials : PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS
    create_thread : PLSA_CREATE_THREAD
    get_client_info : PLSA_GET_CLIENT_INFO
    register_notification : PLSA_REGISTER_NOTIFICATION
    cancel_notification : PLSA_CANCEL_NOTIFICATION
    map_buffer : PLSA_MAP_BUFFER
    create_token : PLSA_CREATE_TOKEN
    audit_logon : PLSA_AUDIT_LOGON
    call_package : PLSA_CALL_PACKAGE
    free_return_buffer : PLSA_FREE_LSA_HEAP
    get_call_info : PLSA_GET_CALL_INFO
    call_package_ex : PLSA_CALL_PACKAGEEX
    create_shared_memory : PLSA_CREATE_SHARED_MEMORY
    allocate_shared_memory : PLSA_ALLOCATE_SHARED_MEMORY
    free_shared_memory : PLSA_FREE_SHARED_MEMORY
    delete_shared_memory : PLSA_DELETE_SHARED_MEMORY
    open_sam_user : PLSA_OPEN_SAM_USER
    get_user_credentials : PLSA_GET_USER_CREDENTIALS
    get_user_auth_data : PLSA_GET_USER_AUTH_DATA
    close_sam_user : PLSA_CLOSE_SAM_USER
    convert_auth_data_to_token : PLSA_CONVERT_AUTH_DATA_TO_TOKEN
    client_callback : PLSA_CLIENT_CALLBACK
    update_credentials : PLSA_UPDATE_PRIMARY_CREDENTIALS
    get_auth_data_for_user : PLSA_GET_AUTH_DATA_FOR_USER
    crack_single_name : PLSA_CRACK_SINGLE_NAME
    audit_account_logon : PLSA_AUDIT_ACCOUNT_LOGON
    call_package_passthrough : PLSA_CALL_PACKAGE_PASSTHROUGH
    credi_read : CredReadFn
    credi_read_domain_credentials : CredReadDomainCredentialsFn
    credi_free_credentials : CredFreeCredentialsFn
    lsa_protect_memory : PLSA_PROTECT_MEMORY
    lsa_unprotect_memory : PLSA_PROTECT_MEMORY
    open_token_by_logon_id : PLSA_OPEN_TOKEN_BY_LOGON_ID
    expand_auth_data_for_domain : PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN
    allocate_private_heap : PLSA_ALLOCATE_PRIVATE_HEAP
    free_private_heap : PLSA_FREE_PRIVATE_HEAP
    create_token_ex : PLSA_CREATE_TOKEN_EX
    credi_write : CredWriteFn
    credi_unmarshaland_decode_string : CrediUnmarshalandDecodeStringFn
    dummy_function6 : PLSA_PROTECT_MEMORY
    get_extended_call_flags : PLSA_GET_EXTENDED_CALL_FLAGS
    duplicate_token_handle : PLSA_DUPLICATE_HANDLE
    get_service_account_password : PLSA_GET_SERVICE_ACCOUNT_PASSWORD
    dummy_function7 : PLSA_PROTECT_MEMORY
    audit_logon_ex : PLSA_AUDIT_LOGON_EX
    check_protected_user_by_token : PLSA_CHECK_PROTECTED_USER_BY_TOKEN
    query_client_request : PLSA_QUERY_CLIENT_REQUEST
    get_app_mode_info : PLSA_GET_APP_MODE_INFO
    set_app_mode_info : PLSA_SET_APP_MODE_INFO
  end
  struct SECPKG_DLL_FUNCTIONS
    allocate_heap : PLSA_ALLOCATE_LSA_HEAP
    free_heap : PLSA_FREE_LSA_HEAP
    register_callback : PLSA_REGISTER_CALLBACK
    locate_package_by_id : PLSA_LOCATE_PKG_BY_ID
  end
  struct SECPKG_FUNCTION_TABLE
    initialize_package : PLSA_AP_INITIALIZE_PACKAGE
    logon_user_a : PLSA_AP_LOGON_USER
    call_package : PLSA_AP_CALL_PACKAGE
    logon_terminated : PLSA_AP_LOGON_TERMINATED
    call_package_untrusted : PLSA_AP_CALL_PACKAGE
    call_package_passthrough : PLSA_AP_CALL_PACKAGE_PASSTHROUGH
    logon_user_ex_a : PLSA_AP_LOGON_USER_EX
    logon_user_ex2 : PLSA_AP_LOGON_USER_EX2
    initialize : SpInitializeFn
    shutdown : SpShutdownFn
    get_info : SpGetInfoFn
    accept_credentials : SpAcceptCredentialsFn
    acquire_credentials_handle_a : SpAcquireCredentialsHandleFn
    query_credentials_attributes_a : SpQueryCredentialsAttributesFn
    free_credentials_handle : SpFreeCredentialsHandleFn
    save_credentials : SpSaveCredentialsFn
    get_credentials : SpGetCredentialsFn
    delete_credentials : SpDeleteCredentialsFn
    init_lsa_mode_context : SpInitLsaModeContextFn
    accept_lsa_mode_context : SpAcceptLsaModeContextFn
    delete_context : SpDeleteContextFn
    apply_control_token : SpApplyControlTokenFn
    get_user_info : SpGetUserInfoFn
    get_extended_information : SpGetExtendedInformationFn
    query_context_attributes_a : SpQueryContextAttributesFn
    add_credentials_a : SpAddCredentialsFn
    set_extended_information : SpSetExtendedInformationFn
    set_context_attributes_a : SpSetContextAttributesFn
    set_credentials_attributes_a : SpSetCredentialsAttributesFn
    change_account_password_a : SpChangeAccountPasswordFn
    query_meta_data : SpQueryMetaDataFn
    exchange_meta_data : SpExchangeMetaDataFn
    get_cred_ui_context : SpGetCredUIContextFn
    update_credentials : SpUpdateCredentialsFn
    validate_target_info : SpValidateTargetInfoFn
    post_logon_user : LSA_AP_POST_LOGON_USER
    get_remote_cred_guard_logon_buffer : SpGetRemoteCredGuardLogonBufferFn
    get_remote_cred_guard_supplemental_creds : SpGetRemoteCredGuardSupplementalCredsFn
    get_tbal_supplemental_creds : SpGetTbalSupplementalCredsFn
    logon_user_ex3 : PLSA_AP_LOGON_USER_EX3
    pre_logon_user_surrogate : PLSA_AP_PRE_LOGON_USER_SURROGATE
    post_logon_user_surrogate : PLSA_AP_POST_LOGON_USER_SURROGATE
  end
  struct SECPKG_USER_FUNCTION_TABLE
    instance_init : SpInstanceInitFn
    init_user_mode_context : SpInitUserModeContextFn
    make_signature : SpMakeSignatureFn
    verify_signature : SpVerifySignatureFn
    seal_message : SpSealMessageFn
    unseal_message : SpUnsealMessageFn
    get_context_token : SpGetContextTokenFn
    query_context_attributes_a : SpQueryContextAttributesFn
    complete_auth_token : SpCompleteAuthTokenFn
    delete_user_mode_context : SpDeleteContextFn
    format_credentials : SpFormatCredentialsFn
    marshall_supplemental_creds : SpMarshallSupplementalCredsFn
    export_context : SpExportSecurityContextFn
    import_context : SpImportSecurityContextFn
    marshal_attribute_data : SpMarshalAttributeDataFn
  end
  struct KSEC_LIST_ENTRY
    list : LIST_ENTRY
    ref_count : Int32
    signature : UInt32
    owning_list : Void*
    reserved : Void*
  end
  struct SECPKG_KERNEL_FUNCTIONS
    allocate_heap : PLSA_ALLOCATE_LSA_HEAP
    free_heap : PLSA_FREE_LSA_HEAP
    create_context_list : PKSEC_CREATE_CONTEXT_LIST
    insert_list_entry : PKSEC_INSERT_LIST_ENTRY
    reference_list_entry : PKSEC_REFERENCE_LIST_ENTRY
    dereference_list_entry : PKSEC_DEREFERENCE_LIST_ENTRY
    serialize_winnt_auth_data : PKSEC_SERIALIZE_WINNT_AUTH_DATA
    serialize_schannel_auth_data : PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA
    locate_package_by_id : PKSEC_LOCATE_PKG_BY_ID
  end
  struct SECPKG_KERNEL_FUNCTION_TABLE
    initialize : KspInitPackageFn
    delete_context : KspDeleteContextFn
    init_context : KspInitContextFn
    map_handle : KspMapHandleFn
    sign : KspMakeSignatureFn
    verify : KspVerifySignatureFn
    seal : KspSealMessageFn
    unseal : KspUnsealMessageFn
    get_token : KspGetTokenFn
    query_attributes : KspQueryAttributesFn
    complete_token : KspCompleteTokenFn
    export_context : SpExportSecurityContextFn
    import_context : SpImportSecurityContextFn
    set_package_paging_mode : KspSetPagingModeFn
    serialize_auth_data : KspSerializeAuthDataFn
  end
  struct SecPkgCred_SupportedAlgs
    c_supported_algs : UInt32
    palg_supported_algs : UInt32*
  end
  struct SecPkgCred_CipherStrengths
    dw_minimum_cipher_strength : UInt32
    dw_maximum_cipher_strength : UInt32
  end
  struct SecPkgCred_SupportedProtocols
    grbit_protocol : UInt32
  end
  struct SecPkgCred_ClientCertPolicy
    dw_flags : UInt32
    guid_policy_id : Guid
    dw_cert_flags : UInt32
    dw_url_retrieval_timeout : UInt32
    f_check_revocation_freshness_time : LibC::BOOL
    dw_revocation_freshness_time : UInt32
    f_omit_usage_check : LibC::BOOL
    pwsz_ssl_ctl_store_name : LibC::LPWSTR
    pwsz_ssl_ctl_identifier : LibC::LPWSTR
  end
  struct SecPkgCred_SessionTicketKey
    ticket_info_version : UInt32
    key_id : UInt8[16]*
    keying_material : UInt8[64]*
    keying_material_size : UInt8
  end
  struct SecPkgCred_SessionTicketKeys
    c_session_ticket_keys : UInt32
    p_session_ticket_keys : SecPkgCred_SessionTicketKey*
  end
  struct SecPkgContext_RemoteCredentialInfo
    cb_certificate_chain : UInt32
    pb_certificate_chain : UInt8*
    c_certificates : UInt32
    f_flags : UInt32
    dw_bits : UInt32
  end
  struct SecPkgContext_LocalCredentialInfo
    cb_certificate_chain : UInt32
    pb_certificate_chain : UInt8*
    c_certificates : UInt32
    f_flags : UInt32
    dw_bits : UInt32
  end
  struct SecPkgContext_ClientCertPolicyResult
    dw_policy_result : HRESULT
    guid_policy_id : Guid
  end
  struct SecPkgContext_IssuerListInfoEx
    a_issuers : CRYPTOAPI_BLOB*
    c_issuers : UInt32
  end
  struct SecPkgContext_ConnectionInfo
    dw_protocol : UInt32
    ai_cipher : UInt32
    dw_cipher_strength : UInt32
    ai_hash : UInt32
    dw_hash_strength : UInt32
    ai_exch : UInt32
    dw_exch_strength : UInt32
  end
  struct SecPkgContext_ConnectionInfoEx
    dw_version : UInt32
    dw_protocol : UInt32
    sz_cipher : Char[64]*
    dw_cipher_strength : UInt32
    sz_hash : Char[64]*
    dw_hash_strength : UInt32
    sz_exchange : Char[64]*
    dw_exch_strength : UInt32
  end
  struct SecPkgContext_CipherInfo
    dw_version : UInt32
    dw_protocol : UInt32
    dw_cipher_suite : UInt32
    dw_base_cipher_suite : UInt32
    sz_cipher_suite : Char[64]*
    sz_cipher : Char[64]*
    dw_cipher_len : UInt32
    dw_cipher_block_len : UInt32
    sz_hash : Char[64]*
    dw_hash_len : UInt32
    sz_exchange : Char[64]*
    dw_min_exchange_len : UInt32
    dw_max_exchange_len : UInt32
    sz_certificate : Char[64]*
    dw_key_type : UInt32
  end
  struct SecPkgContext_EapKeyBlock
    rgb_keys : UInt8[128]*
    rgb_i_vs : UInt8[64]*
  end
  struct SecPkgContext_MappedCredAttr
    dw_attribute : UInt32
    pv_buffer : Void*
  end
  struct SecPkgContext_SessionInfo
    dw_flags : UInt32
    cb_session_id : UInt32
    rgb_session_id : UInt8[32]*
  end
  struct SecPkgContext_SessionAppData
    dw_flags : UInt32
    cb_app_data : UInt32
    pb_app_data : UInt8*
  end
  struct SecPkgContext_EapPrfInfo
    dw_version : UInt32
    cb_prf_data : UInt32
    pb_prf_data : UInt8*
  end
  struct SecPkgContext_SupportedSignatures
    c_signature_and_hash_algorithms : UInt16
    p_signature_and_hash_algorithms : UInt16*
  end
  struct SecPkgContext_Certificates
    c_certificates : UInt32
    cb_certificate_chain : UInt32
    pb_certificate_chain : UInt8*
  end
  struct SecPkgContext_CertInfo
    dw_version : UInt32
    cb_subject_name : UInt32
    pwsz_subject_name : LibC::LPWSTR
    cb_issuer_name : UInt32
    pwsz_issuer_name : LibC::LPWSTR
    dw_key_size : UInt32
  end
  struct SecPkgContext_UiInfo
    h_parent_window : HANDLE
  end
  struct SecPkgContext_EarlyStart
    dw_early_start_flags : UInt32
  end
  struct SecPkgContext_KeyingMaterialInfo
    cb_label : UInt16
    psz_label : PSTR
    cb_context_value : UInt16
    pb_context_value : UInt8*
    cb_keying_material : UInt32
  end
  struct SecPkgContext_KeyingMaterial
    cb_keying_material : UInt32
    pb_keying_material : UInt8*
  end
  struct SecPkgContext_KeyingMaterial_Inproc
    cb_label : UInt16
    psz_label : PSTR
    cb_context_value : UInt16
    pb_context_value : UInt8*
    cb_keying_material : UInt32
    pb_keying_material : UInt8*
  end
  struct SecPkgContext_SrtpParameters
    protection_profile : UInt16
    master_key_identifier_size : UInt8
    master_key_identifier : UInt8*
  end
  struct SecPkgContext_TokenBinding
    major_version : UInt8
    minor_version : UInt8
    key_parameters_size : UInt16
    key_parameters : UInt8*
  end
  struct SecPkgContext_CertificateValidationResult
    dw_chain_error_status : UInt32
    hr_verify_chain_status : HRESULT
  end
  struct SCHANNEL_CRED
    dw_version : UInt32
    c_creds : UInt32
    pa_cred : CERT_CONTEXT**
    h_root_store : Void*
    c_mappers : UInt32
    aph_mappers : HMAPPER**
    c_supported_algs : UInt32
    palg_supported_algs : UInt32*
    grbit_enabled_protocols : UInt32
    dw_minimum_cipher_strength : UInt32
    dw_maximum_cipher_strength : UInt32
    dw_session_lifespan : UInt32
    dw_flags : SCHANNEL_CRED_FLAGS
    dw_cred_format : UInt32
  end
  struct SEND_GENERIC_TLS_EXTENSION
    extension_type : UInt16
    handshake_type : UInt16
    flags : UInt32
    buffer_size : UInt16
    buffer : UInt8[0]*
  end
  struct TLS_EXTENSION_SUBSCRIPTION
    extension_type : UInt16
    handshake_type : UInt16
  end
  struct SUBSCRIBE_GENERIC_TLS_EXTENSION
    flags : UInt32
    subscriptions_count : UInt32
    subscriptions : TLS_EXTENSION_SUBSCRIPTION[0]*
  end
  struct SCHANNEL_CERT_HASH
    dw_length : UInt32
    dw_flags : UInt32
    h_prov : LibC::UINT_PTR
    sha_hash : UInt8[20]*
  end
  struct SCHANNEL_CERT_HASH_STORE
    dw_length : UInt32
    dw_flags : UInt32
    h_prov : LibC::UINT_PTR
    sha_hash : UInt8[20]*
    pwsz_store_name : Char[128]*
  end
  struct SCHANNEL_ALERT_TOKEN
    dw_token_type : UInt32
    dw_alert_type : SCHANNEL_ALERT_TOKEN_ALERT_TYPE
    dw_alert_number : UInt32
  end
  struct SCHANNEL_SESSION_TOKEN
    dw_token_type : UInt32
    dw_flags : SCHANNEL_SESSION_TOKEN_FLAGS
  end
  struct SCHANNEL_CLIENT_SIGNATURE
    cb_length : UInt32
    ai_hash : UInt32
    cb_hash : UInt32
    hash_value : UInt8[36]*
    cert_thumbprint : UInt8[20]*
  end
  struct SSL_CREDENTIAL_CERTIFICATE
    cb_private_key : UInt32
    p_private_key : UInt8*
    cb_certificate : UInt32
    p_certificate : UInt8*
    psz_password : PSTR
  end
  struct SCH_CRED
    dw_version : UInt32
    c_creds : UInt32
    pa_secret : Void**
    pa_public : Void**
    c_mappers : UInt32
    aph_mappers : HMAPPER**
  end
  struct SCH_CRED_SECRET_CAPI
    dw_type : UInt32
    h_prov : LibC::UINT_PTR
  end
  struct SCH_CRED_SECRET_PRIVKEY
    dw_type : UInt32
    p_private_key : UInt8*
    cb_private_key : UInt32
    psz_password : PSTR
  end
  struct SCH_CRED_PUBLIC_CERTCHAIN
    dw_type : UInt32
    cb_cert_chain : UInt32
    p_cert_chain : UInt8*
  end
  struct PctPublicKey
    type : UInt32
    cb_key : UInt32
    p_key : UInt8[0]*
  end
  struct X509Certificate
    version : UInt32
    serial_number : UInt32[4]*
    signature_algorithm : UInt32
    valid_from : FILETIME
    valid_until : FILETIME
    psz_issuer : PSTR
    psz_subject : PSTR
    p_public_key : PctPublicKey*
  end
  struct SCH_EXTENSION_DATA
    extension_type : UInt16
    p_ext_data : UInt8*
    cb_ext_data : UInt32
  end
  struct LOGON_HOURS
    units_per_week : UInt16
    logon_hours : UInt8*
  end
  struct SR_SECURITY_DESCRIPTOR
    length : UInt32
    security_descriptor : UInt8*
  end
  struct USER_ALL_INFORMATION
    last_logon : LARGE_INTEGER
    last_logoff : LARGE_INTEGER
    password_last_set : LARGE_INTEGER
    account_expires : LARGE_INTEGER
    password_can_change : LARGE_INTEGER
    password_must_change : LARGE_INTEGER
    user_name : UNICODE_STRING
    full_name : UNICODE_STRING
    home_directory : UNICODE_STRING
    home_directory_drive : UNICODE_STRING
    script_path : UNICODE_STRING
    profile_path : UNICODE_STRING
    admin_comment : UNICODE_STRING
    work_stations : UNICODE_STRING
    user_comment : UNICODE_STRING
    parameters : UNICODE_STRING
    lm_password : UNICODE_STRING
    nt_password : UNICODE_STRING
    private_data : UNICODE_STRING
    security_descriptor : SR_SECURITY_DESCRIPTOR
    user_id : UInt32
    primary_group_id : UInt32
    user_account_control : UInt32
    which_fields : UInt32
    logon_hours : LOGON_HOURS
    bad_password_count : UInt16
    logon_count : UInt16
    country_code : UInt16
    code_page : UInt16
    lm_password_present : BOOLEAN
    nt_password_present : BOOLEAN
    password_expired : BOOLEAN
    private_data_sensitive : BOOLEAN
  end
  struct CLEAR_BLOCK
    data : CHAR[8]*
  end
  struct USER_SESSION_KEY
    data : CYPHER_BLOCK[2]*
  end
  struct NETLOGON_LOGON_IDENTITY_INFO
    logon_domain_name : UNICODE_STRING
    parameter_control : UInt32
    logon_id : LARGE_INTEGER
    user_name : UNICODE_STRING
    workstation : UNICODE_STRING
  end
  struct NETLOGON_INTERACTIVE_INFO
    identity : NETLOGON_LOGON_IDENTITY_INFO
    lm_owf_password : LM_OWF_PASSWORD
    nt_owf_password : LM_OWF_PASSWORD
  end
  struct NETLOGON_SERVICE_INFO
    identity : NETLOGON_LOGON_IDENTITY_INFO
    lm_owf_password : LM_OWF_PASSWORD
    nt_owf_password : LM_OWF_PASSWORD
  end
  struct NETLOGON_NETWORK_INFO
    identity : NETLOGON_LOGON_IDENTITY_INFO
    lm_challenge : CLEAR_BLOCK
    nt_challenge_response : STRING
    lm_challenge_response : STRING
  end
  struct NETLOGON_GENERIC_INFO
    identity : NETLOGON_LOGON_IDENTITY_INFO
    package_name : UNICODE_STRING
    data_length : UInt32
    logon_data : UInt8*
  end
  struct MSV1_0_VALIDATION_INFO
    logoff_time : LARGE_INTEGER
    kickoff_time : LARGE_INTEGER
    logon_server : UNICODE_STRING
    logon_domain_name : UNICODE_STRING
    session_key : USER_SESSION_KEY
    authoritative : BOOLEAN
    user_flags : UInt32
    which_fields : UInt32
    user_id : UInt32
  end
  struct TOKENBINDING_IDENTIFIER
    key_type : UInt8
  end
  struct TOKENBINDING_RESULT_DATA
    binding_type : TOKENBINDING_TYPE
    identifier_size : UInt32
    identifier_data : TOKENBINDING_IDENTIFIER*
    extension_format : TOKENBINDING_EXTENSION_FORMAT
    extension_size : UInt32
    extension_data : Void*
  end
  struct TOKENBINDING_RESULT_LIST
    result_count : UInt32
    result_data : TOKENBINDING_RESULT_DATA*
  end
  struct TOKENBINDING_KEY_TYPES
    key_count : UInt32
    key_type : TOKENBINDING_KEY_PARAMETERS_TYPE*
  end
  struct SL_LICENSING_STATUS
    sku_id : Guid
    e_status : SLLICENSINGSTATUS
    dw_grace_time : UInt32
    dw_total_grace_days : UInt32
    hr_reason : HRESULT
    qw_validity_expiration : UInt64
  end
  struct SL_ACTIVATION_INFO_HEADER
    cb_size : UInt32
    type : SL_ACTIVATION_TYPE
  end
  struct SL_AD_ACTIVATION_INFO
    header : SL_ACTIVATION_INFO_HEADER
    pwsz_product_key : LibC::LPWSTR
    pwsz_activation_object_name : LibC::LPWSTR
  end
  struct SL_NONGENUINE_UI_OPTIONS
    cb_size : UInt32
    p_component_id : Guid*
    h_result_ui : HRESULT
  end
  struct SL_SYSTEM_POLICY_INFORMATION
    reserved1 : Void[2]**
    reserved2 : UInt32[3]*
  end


  struct ICcgDomainAuthCredentialsVTbl
    query_interface : Proc(ICcgDomainAuthCredentials*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICcgDomainAuthCredentials*, UInt32)
    release : Proc(ICcgDomainAuthCredentials*, UInt32)
    get_password_credentials : Proc(ICcgDomainAuthCredentials*, LibC::LPWSTR, LibC::LPWSTR*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
  end

  ICcgDomainAuthCredentials_GUID = LibC::GUID.new("6ecda518-2010-4437-8bc3-46e752b7b172")
  CLSID_ICcgDomainAuthCredentials = "6ecda518-2010-4437-8bc3-46e752b7b172"
  struct ICcgDomainAuthCredentials
    lpVtbl : ICcgDomainAuthCredentialsVTbl*
  end


  # Params # logonprocessname : STRING* [In],lsahandle : LsaHandle* [In],securitymode : UInt32* [In]
  fun LsaRegisterLogonProcess(logonprocessname : STRING*, lsahandle : LsaHandle*, securitymode : UInt32*) : NTSTATUS

  # Params # lsahandle : LibC::HANDLE [In],originname : STRING* [In],logontype : SECURITY_LOGON_TYPE [In],authenticationpackage : UInt32 [In],authenticationinformation : Void* [In],authenticationinformationlength : UInt32 [In],localgroups : TOKEN_GROUPS* [In],sourcecontext : TOKEN_SOURCE* [In],profilebuffer : Void** [In],profilebufferlength : UInt32* [In],logonid : LUID* [In],token : LibC::HANDLE* [In],quotas : QUOTA_LIMITS* [In],substatus : Int32* [In]
  fun LsaLogonUser(lsahandle : LibC::HANDLE, originname : STRING*, logontype : SECURITY_LOGON_TYPE, authenticationpackage : UInt32, authenticationinformation : Void*, authenticationinformationlength : UInt32, localgroups : TOKEN_GROUPS*, sourcecontext : TOKEN_SOURCE*, profilebuffer : Void**, profilebufferlength : UInt32*, logonid : LUID*, token : LibC::HANDLE*, quotas : QUOTA_LIMITS*, substatus : Int32*) : NTSTATUS

  # Params # lsahandle : LibC::HANDLE [In],packagename : STRING* [In],authenticationpackage : UInt32* [In]
  fun LsaLookupAuthenticationPackage(lsahandle : LibC::HANDLE, packagename : STRING*, authenticationpackage : UInt32*) : NTSTATUS

  # Params # buffer : Void* [In]
  fun LsaFreeReturnBuffer(buffer : Void*) : NTSTATUS

  # Params # lsahandle : LibC::HANDLE [In],authenticationpackage : UInt32 [In],protocolsubmitbuffer : Void* [In],submitbufferlength : UInt32 [In],protocolreturnbuffer : Void** [In],returnbufferlength : UInt32* [In],protocolstatus : Int32* [In]
  fun LsaCallAuthenticationPackage(lsahandle : LibC::HANDLE, authenticationpackage : UInt32, protocolsubmitbuffer : Void*, submitbufferlength : UInt32, protocolreturnbuffer : Void**, returnbufferlength : UInt32*, protocolstatus : Int32*) : NTSTATUS

  # Params # lsahandle : LsaHandle [In]
  fun LsaDeregisterLogonProcess(lsahandle : LsaHandle) : NTSTATUS

  # Params # lsahandle : LibC::HANDLE* [In]
  fun LsaConnectUntrusted(lsahandle : LibC::HANDLE*) : NTSTATUS

  # Params # buffer : Void* [In]
  fun LsaFreeMemory(buffer : Void*) : NTSTATUS

  # Params # objecthandle : Void* [In]
  fun LsaClose(objecthandle : Void*) : NTSTATUS

  # Params # logonsessioncount : UInt32* [In],logonsessionlist : LUID** [In]
  fun LsaEnumerateLogonSessions(logonsessioncount : UInt32*, logonsessionlist : LUID**) : NTSTATUS

  # Params # logonid : LUID* [In],pplogonsessiondata : SECURITY_LOGON_SESSION_DATA** [In]
  fun LsaGetLogonSessionData(logonid : LUID*, pplogonsessiondata : SECURITY_LOGON_SESSION_DATA**) : NTSTATUS

  # Params # systemname : UNICODE_STRING* [In],objectattributes : OBJECT_ATTRIBUTES* [In],desiredaccess : UInt32 [In],policyhandle : Void** [In]
  fun LsaOpenPolicy(systemname : UNICODE_STRING*, objectattributes : OBJECT_ATTRIBUTES*, desiredaccess : UInt32, policyhandle : Void**) : NTSTATUS

  # Params # capdns : UNICODE_STRING* [In],capdncount : UInt32 [In],flags : UInt32 [In]
  fun LsaSetCAPs(capdns : UNICODE_STRING*, capdncount : UInt32, flags : UInt32) : NTSTATUS

  # Params # systemname : UNICODE_STRING* [In],capids : PSID** [In],capidcount : UInt32* [In]
  fun LsaGetAppliedCAPIDs(systemname : UNICODE_STRING*, capids : PSID**, capidcount : UInt32*) : NTSTATUS

  # Params # capids : PSID* [In],capidcount : UInt32 [In],caps : CENTRAL_ACCESS_POLICY** [In],capcount : UInt32* [In]
  fun LsaQueryCAPs(capids : PSID*, capidcount : UInt32, caps : CENTRAL_ACCESS_POLICY**, capcount : UInt32*) : NTSTATUS

  # Params # policyhandle : Void* [In],informationclass : POLICY_INFORMATION_CLASS [In],buffer : Void** [In]
  fun LsaQueryInformationPolicy(policyhandle : Void*, informationclass : POLICY_INFORMATION_CLASS, buffer : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],informationclass : POLICY_INFORMATION_CLASS [In],buffer : Void* [In]
  fun LsaSetInformationPolicy(policyhandle : Void*, informationclass : POLICY_INFORMATION_CLASS, buffer : Void*) : NTSTATUS

  # Params # policyhandle : Void* [In],informationclass : POLICY_DOMAIN_INFORMATION_CLASS [In],buffer : Void** [In]
  fun LsaQueryDomainInformationPolicy(policyhandle : Void*, informationclass : POLICY_DOMAIN_INFORMATION_CLASS, buffer : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],informationclass : POLICY_DOMAIN_INFORMATION_CLASS [In],buffer : Void* [In]
  fun LsaSetDomainInformationPolicy(policyhandle : Void*, informationclass : POLICY_DOMAIN_INFORMATION_CLASS, buffer : Void*) : NTSTATUS

  # Params # informationclass : POLICY_NOTIFICATION_INFORMATION_CLASS [In],notificationeventhandle : LibC::HANDLE [In]
  fun LsaRegisterPolicyChangeNotification(informationclass : POLICY_NOTIFICATION_INFORMATION_CLASS, notificationeventhandle : LibC::HANDLE) : NTSTATUS

  # Params # informationclass : POLICY_NOTIFICATION_INFORMATION_CLASS [In],notificationeventhandle : LibC::HANDLE [In]
  fun LsaUnregisterPolicyChangeNotification(informationclass : POLICY_NOTIFICATION_INFORMATION_CLASS, notificationeventhandle : LibC::HANDLE) : NTSTATUS

  # Params # policyhandle : Void* [In],enumerationcontext : UInt32* [In],buffer : Void** [In],preferedmaximumlength : UInt32 [In],countreturned : UInt32* [In]
  fun LsaEnumerateTrustedDomains(policyhandle : Void*, enumerationcontext : UInt32*, buffer : Void**, preferedmaximumlength : UInt32, countreturned : UInt32*) : NTSTATUS

  # Params # policyhandle : Void* [In],count : UInt32 [In],names : UNICODE_STRING* [In],referenceddomains : LSA_REFERENCED_DOMAIN_LIST** [In],sids : LSA_TRANSLATED_SID** [In]
  fun LsaLookupNames(policyhandle : Void*, count : UInt32, names : UNICODE_STRING*, referenceddomains : LSA_REFERENCED_DOMAIN_LIST**, sids : LSA_TRANSLATED_SID**) : NTSTATUS

  # Params # policyhandle : Void* [In],flags : UInt32 [In],count : UInt32 [In],names : UNICODE_STRING* [In],referenceddomains : LSA_REFERENCED_DOMAIN_LIST** [In],sids : LSA_TRANSLATED_SID2** [In]
  fun LsaLookupNames2(policyhandle : Void*, flags : UInt32, count : UInt32, names : UNICODE_STRING*, referenceddomains : LSA_REFERENCED_DOMAIN_LIST**, sids : LSA_TRANSLATED_SID2**) : NTSTATUS

  # Params # policyhandle : Void* [In],count : UInt32 [In],sids : PSID* [In],referenceddomains : LSA_REFERENCED_DOMAIN_LIST** [In],names : LSA_TRANSLATED_NAME** [In]
  fun LsaLookupSids(policyhandle : Void*, count : UInt32, sids : PSID*, referenceddomains : LSA_REFERENCED_DOMAIN_LIST**, names : LSA_TRANSLATED_NAME**) : NTSTATUS

  # Params # policyhandle : Void* [In],lookupoptions : UInt32 [In],count : UInt32 [In],sids : PSID* [In],referenceddomains : LSA_REFERENCED_DOMAIN_LIST** [In],names : LSA_TRANSLATED_NAME** [In]
  fun LsaLookupSids2(policyhandle : Void*, lookupoptions : UInt32, count : UInt32, sids : PSID*, referenceddomains : LSA_REFERENCED_DOMAIN_LIST**, names : LSA_TRANSLATED_NAME**) : NTSTATUS

  # Params # policyhandle : Void* [In],userright : UNICODE_STRING* [In],buffer : Void** [In],countreturned : UInt32* [In]
  fun LsaEnumerateAccountsWithUserRight(policyhandle : Void*, userright : UNICODE_STRING*, buffer : Void**, countreturned : UInt32*) : NTSTATUS

  # Params # policyhandle : Void* [In],accountsid : PSID [In],userrights : UNICODE_STRING** [In],countofrights : UInt32* [In]
  fun LsaEnumerateAccountRights(policyhandle : Void*, accountsid : PSID, userrights : UNICODE_STRING**, countofrights : UInt32*) : NTSTATUS

  # Params # policyhandle : Void* [In],accountsid : PSID [In],userrights : UNICODE_STRING* [In],countofrights : UInt32 [In]
  fun LsaAddAccountRights(policyhandle : Void*, accountsid : PSID, userrights : UNICODE_STRING*, countofrights : UInt32) : NTSTATUS

  # Params # policyhandle : Void* [In],accountsid : PSID [In],allrights : BOOLEAN [In],userrights : UNICODE_STRING* [In],countofrights : UInt32 [In]
  fun LsaRemoveAccountRights(policyhandle : Void*, accountsid : PSID, allrights : BOOLEAN, userrights : UNICODE_STRING*, countofrights : UInt32) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainname : UNICODE_STRING* [In],desiredaccess : UInt32 [In],trusteddomainhandle : Void** [In]
  fun LsaOpenTrustedDomainByName(policyhandle : Void*, trusteddomainname : UNICODE_STRING*, desiredaccess : UInt32, trusteddomainhandle : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainsid : PSID [In],informationclass : TRUSTED_INFORMATION_CLASS [In],buffer : Void** [In]
  fun LsaQueryTrustedDomainInfo(policyhandle : Void*, trusteddomainsid : PSID, informationclass : TRUSTED_INFORMATION_CLASS, buffer : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainsid : PSID [In],informationclass : TRUSTED_INFORMATION_CLASS [In],buffer : Void* [In]
  fun LsaSetTrustedDomainInformation(policyhandle : Void*, trusteddomainsid : PSID, informationclass : TRUSTED_INFORMATION_CLASS, buffer : Void*) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainsid : PSID [In]
  fun LsaDeleteTrustedDomain(policyhandle : Void*, trusteddomainsid : PSID) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainname : UNICODE_STRING* [In],informationclass : TRUSTED_INFORMATION_CLASS [In],buffer : Void** [In]
  fun LsaQueryTrustedDomainInfoByName(policyhandle : Void*, trusteddomainname : UNICODE_STRING*, informationclass : TRUSTED_INFORMATION_CLASS, buffer : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainname : UNICODE_STRING* [In],informationclass : TRUSTED_INFORMATION_CLASS [In],buffer : Void* [In]
  fun LsaSetTrustedDomainInfoByName(policyhandle : Void*, trusteddomainname : UNICODE_STRING*, informationclass : TRUSTED_INFORMATION_CLASS, buffer : Void*) : NTSTATUS

  # Params # policyhandle : Void* [In],enumerationcontext : UInt32* [In],buffer : Void** [In],preferedmaximumlength : UInt32 [In],countreturned : UInt32* [In]
  fun LsaEnumerateTrustedDomainsEx(policyhandle : Void*, enumerationcontext : UInt32*, buffer : Void**, preferedmaximumlength : UInt32, countreturned : UInt32*) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomaininformation : TRUSTED_DOMAIN_INFORMATION_EX* [In],authenticationinformation : TRUSTED_DOMAIN_AUTH_INFORMATION* [In],desiredaccess : UInt32 [In],trusteddomainhandle : Void** [In]
  fun LsaCreateTrustedDomainEx(policyhandle : Void*, trusteddomaininformation : TRUSTED_DOMAIN_INFORMATION_EX*, authenticationinformation : TRUSTED_DOMAIN_AUTH_INFORMATION*, desiredaccess : UInt32, trusteddomainhandle : Void**) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainname : UNICODE_STRING* [In],foresttrustinfo : LSA_FOREST_TRUST_INFORMATION** [In]
  fun LsaQueryForestTrustInformation(policyhandle : Void*, trusteddomainname : UNICODE_STRING*, foresttrustinfo : LSA_FOREST_TRUST_INFORMATION**) : NTSTATUS

  # Params # policyhandle : Void* [In],trusteddomainname : UNICODE_STRING* [In],foresttrustinfo : LSA_FOREST_TRUST_INFORMATION* [In],checkonly : BOOLEAN [In],collisioninfo : LSA_FOREST_TRUST_COLLISION_INFORMATION** [In]
  fun LsaSetForestTrustInformation(policyhandle : Void*, trusteddomainname : UNICODE_STRING*, foresttrustinfo : LSA_FOREST_TRUST_INFORMATION*, checkonly : BOOLEAN, collisioninfo : LSA_FOREST_TRUST_COLLISION_INFORMATION**) : NTSTATUS

  # Params # policyhandle : Void* [In],keyname : UNICODE_STRING* [In],privatedata : UNICODE_STRING* [In]
  fun LsaStorePrivateData(policyhandle : Void*, keyname : UNICODE_STRING*, privatedata : UNICODE_STRING*) : NTSTATUS

  # Params # policyhandle : Void* [In],keyname : UNICODE_STRING* [In],privatedata : UNICODE_STRING** [In]
  fun LsaRetrievePrivateData(policyhandle : Void*, keyname : UNICODE_STRING*, privatedata : UNICODE_STRING**) : NTSTATUS

  # Params # status : NTSTATUS [In]
  fun LsaNtStatusToWinError(status : NTSTATUS) : UInt32

  # Params # randombuffer : Void* [In],randombufferlength : UInt32 [In]
  fun SystemFunction036(randombuffer : Void*, randombufferlength : UInt32) : BOOLEAN

  # Params # memory : Void* [In],memorysize : UInt32 [In],optionflags : UInt32 [In]
  fun SystemFunction040(memory : Void*, memorysize : UInt32, optionflags : UInt32) : NTSTATUS

  # Params # memory : Void* [In],memorysize : UInt32 [In],optionflags : UInt32 [In]
  fun SystemFunction041(memory : Void*, memorysize : UInt32, optionflags : UInt32) : NTSTATUS

  # Params # pauditpolicy : AUDIT_POLICY_INFORMATION* [In],dwpolicycount : UInt32 [In]
  fun AuditSetSystemPolicy(pauditpolicy : AUDIT_POLICY_INFORMATION*, dwpolicycount : UInt32) : BOOLEAN

  # Params # psid : PSID [In],pauditpolicy : AUDIT_POLICY_INFORMATION* [In],dwpolicycount : UInt32 [In]
  fun AuditSetPerUserPolicy(psid : PSID, pauditpolicy : AUDIT_POLICY_INFORMATION*, dwpolicycount : UInt32) : BOOLEAN

  # Params # psubcategoryguids : Guid* [In],dwpolicycount : UInt32 [In],ppauditpolicy : AUDIT_POLICY_INFORMATION** [In]
  fun AuditQuerySystemPolicy(psubcategoryguids : Guid*, dwpolicycount : UInt32, ppauditpolicy : AUDIT_POLICY_INFORMATION**) : BOOLEAN

  # Params # psid : PSID [In],psubcategoryguids : Guid* [In],dwpolicycount : UInt32 [In],ppauditpolicy : AUDIT_POLICY_INFORMATION** [In]
  fun AuditQueryPerUserPolicy(psid : PSID, psubcategoryguids : Guid*, dwpolicycount : UInt32, ppauditpolicy : AUDIT_POLICY_INFORMATION**) : BOOLEAN

  # Params # ppauditsidarray : POLICY_AUDIT_SID_ARRAY** [In]
  fun AuditEnumeratePerUserPolicy(ppauditsidarray : POLICY_AUDIT_SID_ARRAY**) : BOOLEAN

  # Params # psid : PSID [In],psubcategoryguids : Guid* [In],dwpolicycount : UInt32 [In],ppauditpolicy : AUDIT_POLICY_INFORMATION** [In]
  fun AuditComputeEffectivePolicyBySid(psid : PSID, psubcategoryguids : Guid*, dwpolicycount : UInt32, ppauditpolicy : AUDIT_POLICY_INFORMATION**) : BOOLEAN

  # Params # htokenhandle : LibC::HANDLE [In],psubcategoryguids : Guid* [In],dwpolicycount : UInt32 [In],ppauditpolicy : AUDIT_POLICY_INFORMATION** [In]
  fun AuditComputeEffectivePolicyByToken(htokenhandle : LibC::HANDLE, psubcategoryguids : Guid*, dwpolicycount : UInt32, ppauditpolicy : AUDIT_POLICY_INFORMATION**) : BOOLEAN

  # Params # ppauditcategoriesarray : Guid** [In],pdwcountreturned : UInt32* [In]
  fun AuditEnumerateCategories(ppauditcategoriesarray : Guid**, pdwcountreturned : UInt32*) : BOOLEAN

  # Params # pauditcategoryguid : Guid* [In],bretrieveallsubcategories : BOOLEAN [In],ppauditsubcategoriesarray : Guid** [In],pdwcountreturned : UInt32* [In]
  fun AuditEnumerateSubCategories(pauditcategoryguid : Guid*, bretrieveallsubcategories : BOOLEAN, ppauditsubcategoriesarray : Guid**, pdwcountreturned : UInt32*) : BOOLEAN

  # Params # pauditcategoryguid : Guid* [In],ppszcategoryname : LibC::LPWSTR* [In]
  fun AuditLookupCategoryNameW(pauditcategoryguid : Guid*, ppszcategoryname : LibC::LPWSTR*) : BOOLEAN

  # Params # pauditcategoryguid : Guid* [In],ppszcategoryname : PSTR* [In]
  fun AuditLookupCategoryNameA(pauditcategoryguid : Guid*, ppszcategoryname : PSTR*) : BOOLEAN

  # Params # pauditsubcategoryguid : Guid* [In],ppszsubcategoryname : LibC::LPWSTR* [In]
  fun AuditLookupSubCategoryNameW(pauditsubcategoryguid : Guid*, ppszsubcategoryname : LibC::LPWSTR*) : BOOLEAN

  # Params # pauditsubcategoryguid : Guid* [In],ppszsubcategoryname : PSTR* [In]
  fun AuditLookupSubCategoryNameA(pauditsubcategoryguid : Guid*, ppszsubcategoryname : PSTR*) : BOOLEAN

  # Params # pauditcategoryguid : Guid* [In],pauditcategoryid : POLICY_AUDIT_EVENT_TYPE* [In]
  fun AuditLookupCategoryIdFromCategoryGuid(pauditcategoryguid : Guid*, pauditcategoryid : POLICY_AUDIT_EVENT_TYPE*) : BOOLEAN

  # Params # auditcategoryid : POLICY_AUDIT_EVENT_TYPE [In],pauditcategoryguid : Guid* [In]
  fun AuditLookupCategoryGuidFromCategoryId(auditcategoryid : POLICY_AUDIT_EVENT_TYPE, pauditcategoryguid : Guid*) : BOOLEAN

  # Params # securityinformation : UInt32 [In],psecuritydescriptor : SECURITY_DESCRIPTOR* [In]
  fun AuditSetSecurity(securityinformation : UInt32, psecuritydescriptor : SECURITY_DESCRIPTOR*) : BOOLEAN

  # Params # securityinformation : UInt32 [In],ppsecuritydescriptor : SECURITY_DESCRIPTOR** [In]
  fun AuditQuerySecurity(securityinformation : UInt32, ppsecuritydescriptor : SECURITY_DESCRIPTOR**) : BOOLEAN

  # Params # objecttypename : LibC::LPWSTR [In],acl : ACL* [In]
  fun AuditSetGlobalSaclW(objecttypename : LibC::LPWSTR, acl : ACL*) : BOOLEAN

  # Params # objecttypename : PSTR [In],acl : ACL* [In]
  fun AuditSetGlobalSaclA(objecttypename : PSTR, acl : ACL*) : BOOLEAN

  # Params # objecttypename : LibC::LPWSTR [In],acl : ACL** [In]
  fun AuditQueryGlobalSaclW(objecttypename : LibC::LPWSTR, acl : ACL**) : BOOLEAN

  # Params # objecttypename : PSTR [In],acl : ACL** [In]
  fun AuditQueryGlobalSaclA(objecttypename : PSTR, acl : ACL**) : BOOLEAN

  # Params # buffer : Void* [In]
  fun AuditFree(buffer : Void*)

  # Params # pszprincipal : LibC::LPWSTR [In],pszpackage : LibC::LPWSTR [In],fcredentialuse : SECPKG_CRED [In],pvlogonid : Void* [In],pauthdata : Void* [In],pgetkeyfn : SEC_GET_KEY_FN [In],pvgetkeyargument : Void* [In],phcredential : SecHandle* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun AcquireCredentialsHandleW(pszprincipal : LibC::LPWSTR, pszpackage : LibC::LPWSTR, fcredentialuse : SECPKG_CRED, pvlogonid : Void*, pauthdata : Void*, pgetkeyfn : SEC_GET_KEY_FN, pvgetkeyargument : Void*, phcredential : SecHandle*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # pszprincipal : PSTR [In],pszpackage : PSTR [In],fcredentialuse : SECPKG_CRED [In],pvlogonid : Void* [In],pauthdata : Void* [In],pgetkeyfn : SEC_GET_KEY_FN [In],pvgetkeyargument : Void* [In],phcredential : SecHandle* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun AcquireCredentialsHandleA(pszprincipal : PSTR, pszpackage : PSTR, fcredentialuse : SECPKG_CRED, pvlogonid : Void*, pauthdata : Void*, pgetkeyfn : SEC_GET_KEY_FN, pvgetkeyargument : Void*, phcredential : SecHandle*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcredential : SecHandle* [In]
  fun FreeCredentialsHandle(phcredential : SecHandle*) : Int32

  # Params # hcredentials : SecHandle* [In],pszprincipal : LibC::LPWSTR [In],pszpackage : LibC::LPWSTR [In],fcredentialuse : UInt32 [In],pauthdata : Void* [In],pgetkeyfn : SEC_GET_KEY_FN [In],pvgetkeyargument : Void* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun AddCredentialsW(hcredentials : SecHandle*, pszprincipal : LibC::LPWSTR, pszpackage : LibC::LPWSTR, fcredentialuse : UInt32, pauthdata : Void*, pgetkeyfn : SEC_GET_KEY_FN, pvgetkeyargument : Void*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # hcredentials : SecHandle* [In],pszprincipal : PSTR [In],pszpackage : PSTR [In],fcredentialuse : UInt32 [In],pauthdata : Void* [In],pgetkeyfn : SEC_GET_KEY_FN [In],pvgetkeyargument : Void* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun AddCredentialsA(hcredentials : SecHandle*, pszprincipal : PSTR, pszpackage : PSTR, fcredentialuse : UInt32, pauthdata : Void*, pgetkeyfn : SEC_GET_KEY_FN, pvgetkeyargument : Void*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # pszpackagename : UInt16* [In],pszdomainname : UInt16* [In],pszaccountname : UInt16* [In],pszoldpassword : UInt16* [In],psznewpassword : UInt16* [In],bimpersonating : BOOLEAN [In],dwreserved : UInt32 [In],poutput : SecBufferDesc* [In]
  fun ChangeAccountPasswordW(pszpackagename : UInt16*, pszdomainname : UInt16*, pszaccountname : UInt16*, pszoldpassword : UInt16*, psznewpassword : UInt16*, bimpersonating : BOOLEAN, dwreserved : UInt32, poutput : SecBufferDesc*) : Int32

  # Params # pszpackagename : Int8* [In],pszdomainname : Int8* [In],pszaccountname : Int8* [In],pszoldpassword : Int8* [In],psznewpassword : Int8* [In],bimpersonating : BOOLEAN [In],dwreserved : UInt32 [In],poutput : SecBufferDesc* [In]
  fun ChangeAccountPasswordA(pszpackagename : Int8*, pszdomainname : Int8*, pszaccountname : Int8*, pszoldpassword : Int8*, psznewpassword : Int8*, bimpersonating : BOOLEAN, dwreserved : UInt32, poutput : SecBufferDesc*) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],psztargetname : UInt16* [In],fcontextreq : UInt32 [In],reserved1 : UInt32 [In],targetdatarep : UInt32 [In],pinput : SecBufferDesc* [In],reserved2 : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun InitializeSecurityContextW(phcredential : SecHandle*, phcontext : SecHandle*, psztargetname : UInt16*, fcontextreq : UInt32, reserved1 : UInt32, targetdatarep : UInt32, pinput : SecBufferDesc*, reserved2 : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],psztargetname : Int8* [In],fcontextreq : UInt32 [In],reserved1 : UInt32 [In],targetdatarep : UInt32 [In],pinput : SecBufferDesc* [In],reserved2 : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun InitializeSecurityContextA(phcredential : SecHandle*, phcontext : SecHandle*, psztargetname : Int8*, fcontextreq : UInt32, reserved1 : UInt32, targetdatarep : UInt32, pinput : SecBufferDesc*, reserved2 : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],pinput : SecBufferDesc* [In],fcontextreq : ACCEPT_SECURITY_CONTEXT_CONTEXT_REQ [In],targetdatarep : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun AcceptSecurityContext(phcredential : SecHandle*, phcontext : SecHandle*, pinput : SecBufferDesc*, fcontextreq : ACCEPT_SECURITY_CONTEXT_CONTEXT_REQ, targetdatarep : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcontext : SecHandle* [In],ptoken : SecBufferDesc* [In]
  fun CompleteAuthToken(phcontext : SecHandle*, ptoken : SecBufferDesc*) : Int32

  # Params # phcontext : SecHandle* [In]
  fun ImpersonateSecurityContext(phcontext : SecHandle*) : Int32

  # Params # phcontext : SecHandle* [In]
  fun RevertSecurityContext(phcontext : SecHandle*) : Int32

  # Params # phcontext : SecHandle* [In],token : Void** [In]
  fun QuerySecurityContextToken(phcontext : SecHandle*, token : Void**) : Int32

  # Params # phcontext : SecHandle* [In]
  fun DeleteSecurityContext(phcontext : SecHandle*) : Int32

  # Params # phcontext : SecHandle* [In],pinput : SecBufferDesc* [In]
  fun ApplyControlToken(phcontext : SecHandle*, pinput : SecBufferDesc*) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In]
  fun QueryContextAttributesW(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun QueryContextAttributesExW(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In]
  fun QueryContextAttributesA(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun QueryContextAttributesExA(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun SetContextAttributesW(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcontext : SecHandle* [In],ulattribute : SECPKG_ATTR [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun SetContextAttributesA(phcontext : SecHandle*, ulattribute : SECPKG_ATTR, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In]
  fun QueryCredentialsAttributesW(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun QueryCredentialsAttributesExW(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In]
  fun QueryCredentialsAttributesA(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun QueryCredentialsAttributesExA(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun SetCredentialsAttributesW(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # phcredential : SecHandle* [In],ulattribute : UInt32 [In],pbuffer : Void* [In],cbbuffer : UInt32 [In]
  fun SetCredentialsAttributesA(phcredential : SecHandle*, ulattribute : UInt32, pbuffer : Void*, cbbuffer : UInt32) : Int32

  # Params # pvcontextbuffer : Void* [In]
  fun FreeContextBuffer(pvcontextbuffer : Void*) : Int32

  # Params # phcontext : SecHandle* [In],fqop : UInt32 [In],pmessage : SecBufferDesc* [In],messageseqno : UInt32 [In]
  fun MakeSignature(phcontext : SecHandle*, fqop : UInt32, pmessage : SecBufferDesc*, messageseqno : UInt32) : Int32

  # Params # phcontext : SecHandle* [In],pmessage : SecBufferDesc* [In],messageseqno : UInt32 [In],pfqop : UInt32* [In]
  fun VerifySignature(phcontext : SecHandle*, pmessage : SecBufferDesc*, messageseqno : UInt32, pfqop : UInt32*) : Int32

  # Params # phcontext : SecHandle* [In],fqop : UInt32 [In],pmessage : SecBufferDesc* [In],messageseqno : UInt32 [In]
  fun EncryptMessage(phcontext : SecHandle*, fqop : UInt32, pmessage : SecBufferDesc*, messageseqno : UInt32) : Int32

  # Params # phcontext : SecHandle* [In],pmessage : SecBufferDesc* [In],messageseqno : UInt32 [In],pfqop : UInt32* [In]
  fun DecryptMessage(phcontext : SecHandle*, pmessage : SecBufferDesc*, messageseqno : UInt32, pfqop : UInt32*) : Int32

  # Params # pcpackages : UInt32* [In],pppackageinfo : SecPkgInfoW** [In]
  fun EnumerateSecurityPackagesW(pcpackages : UInt32*, pppackageinfo : SecPkgInfoW**) : Int32

  # Params # pcpackages : UInt32* [In],pppackageinfo : SecPkgInfoA** [In]
  fun EnumerateSecurityPackagesA(pcpackages : UInt32*, pppackageinfo : SecPkgInfoA**) : Int32

  # Params # pszpackagename : LibC::LPWSTR [In],pppackageinfo : SecPkgInfoW** [In]
  fun QuerySecurityPackageInfoW(pszpackagename : LibC::LPWSTR, pppackageinfo : SecPkgInfoW**) : Int32

  # Params # pszpackagename : PSTR [In],pppackageinfo : SecPkgInfoA** [In]
  fun QuerySecurityPackageInfoA(pszpackagename : PSTR, pppackageinfo : SecPkgInfoA**) : Int32

  # Params # phcontext : SecHandle* [In],fflags : EXPORT_SECURITY_CONTEXT_FLAGS [In],ppackedcontext : SecBuffer* [In],ptoken : Void** [In]
  fun ExportSecurityContext(phcontext : SecHandle*, fflags : EXPORT_SECURITY_CONTEXT_FLAGS, ppackedcontext : SecBuffer*, ptoken : Void**) : Int32

  # Params # pszpackage : LibC::LPWSTR [In],ppackedcontext : SecBuffer* [In],token : Void* [In],phcontext : SecHandle* [In]
  fun ImportSecurityContextW(pszpackage : LibC::LPWSTR, ppackedcontext : SecBuffer*, token : Void*, phcontext : SecHandle*) : Int32

  # Params # pszpackage : PSTR [In],ppackedcontext : SecBuffer* [In],token : Void* [In],phcontext : SecHandle* [In]
  fun ImportSecurityContextA(pszpackage : PSTR, ppackedcontext : SecBuffer*, token : Void*, phcontext : SecHandle*) : Int32

  # Params # 
  fun InitSecurityInterfaceA : SecurityFunctionTableA*

  # Params # 
  fun InitSecurityInterfaceW : SecurityFunctionTableW*

  # Params # profilelist : PSTR* [In],profilecount : UInt32* [In]
  fun SaslEnumerateProfilesA(profilelist : PSTR*, profilecount : UInt32*) : Int32

  # Params # profilelist : LibC::LPWSTR* [In],profilecount : UInt32* [In]
  fun SaslEnumerateProfilesW(profilelist : LibC::LPWSTR*, profilecount : UInt32*) : Int32

  # Params # profilename : PSTR [In],packageinfo : SecPkgInfoA** [In]
  fun SaslGetProfilePackageA(profilename : PSTR, packageinfo : SecPkgInfoA**) : Int32

  # Params # profilename : LibC::LPWSTR [In],packageinfo : SecPkgInfoW** [In]
  fun SaslGetProfilePackageW(profilename : LibC::LPWSTR, packageinfo : SecPkgInfoW**) : Int32

  # Params # pinput : SecBufferDesc* [In],packageinfo : SecPkgInfoA** [In]
  fun SaslIdentifyPackageA(pinput : SecBufferDesc*, packageinfo : SecPkgInfoA**) : Int32

  # Params # pinput : SecBufferDesc* [In],packageinfo : SecPkgInfoW** [In]
  fun SaslIdentifyPackageW(pinput : SecBufferDesc*, packageinfo : SecPkgInfoW**) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],psztargetname : LibC::LPWSTR [In],fcontextreq : UInt32 [In],reserved1 : UInt32 [In],targetdatarep : UInt32 [In],pinput : SecBufferDesc* [In],reserved2 : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun SaslInitializeSecurityContextW(phcredential : SecHandle*, phcontext : SecHandle*, psztargetname : LibC::LPWSTR, fcontextreq : UInt32, reserved1 : UInt32, targetdatarep : UInt32, pinput : SecBufferDesc*, reserved2 : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],psztargetname : PSTR [In],fcontextreq : UInt32 [In],reserved1 : UInt32 [In],targetdatarep : UInt32 [In],pinput : SecBufferDesc* [In],reserved2 : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun SaslInitializeSecurityContextA(phcredential : SecHandle*, phcontext : SecHandle*, psztargetname : PSTR, fcontextreq : UInt32, reserved1 : UInt32, targetdatarep : UInt32, pinput : SecBufferDesc*, reserved2 : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # phcredential : SecHandle* [In],phcontext : SecHandle* [In],pinput : SecBufferDesc* [In],fcontextreq : UInt32 [In],targetdatarep : UInt32 [In],phnewcontext : SecHandle* [In],poutput : SecBufferDesc* [In],pfcontextattr : UInt32* [In],ptsexpiry : LARGE_INTEGER* [In]
  fun SaslAcceptSecurityContext(phcredential : SecHandle*, phcontext : SecHandle*, pinput : SecBufferDesc*, fcontextreq : UInt32, targetdatarep : UInt32, phnewcontext : SecHandle*, poutput : SecBufferDesc*, pfcontextattr : UInt32*, ptsexpiry : LARGE_INTEGER*) : Int32

  # Params # contexthandle : SecHandle* [In],option : UInt32 [In],value : Void* [In],size : UInt32 [In]
  fun SaslSetContextOption(contexthandle : SecHandle*, option : UInt32, value : Void*, size : UInt32) : Int32

  # Params # contexthandle : SecHandle* [In],option : UInt32 [In],value : Void* [In],size : UInt32 [In],needed : UInt32* [In]
  fun SaslGetContextOption(contexthandle : SecHandle*, option : UInt32, value : Void*, size : UInt32, needed : UInt32*) : Int32

  # Params # psztargetname : LibC::LPWSTR [In],puiinfo : Void* [In],dwautherror : UInt32 [In],pszpackage : LibC::LPWSTR [In],pinputauthidentity : Void* [In],ppauthidentity : Void** [In],pfsave : Int32* [In],dwflags : UInt32 [In]
  fun SspiPromptForCredentialsW(psztargetname : LibC::LPWSTR, puiinfo : Void*, dwautherror : UInt32, pszpackage : LibC::LPWSTR, pinputauthidentity : Void*, ppauthidentity : Void**, pfsave : Int32*, dwflags : UInt32) : UInt32

  # Params # psztargetname : PSTR [In],puiinfo : Void* [In],dwautherror : UInt32 [In],pszpackage : PSTR [In],pinputauthidentity : Void* [In],ppauthidentity : Void** [In],pfsave : Int32* [In],dwflags : UInt32 [In]
  fun SspiPromptForCredentialsA(psztargetname : PSTR, puiinfo : Void*, dwautherror : UInt32, pszpackage : PSTR, pinputauthidentity : Void*, ppauthidentity : Void**, pfsave : Int32*, dwflags : UInt32) : UInt32

  # Params # authidentity : Void* [In],psztargetname : LibC::LPWSTR [In],pcredmancredentialtype : UInt32* [In],ppszcredmantargetname : LibC::LPWSTR* [In]
  fun SspiPrepareForCredRead(authidentity : Void*, psztargetname : LibC::LPWSTR, pcredmancredentialtype : UInt32*, ppszcredmantargetname : LibC::LPWSTR*) : Int32

  # Params # authidentity : Void* [In],psztargetname : LibC::LPWSTR [In],pcredmancredentialtype : UInt32* [In],ppszcredmantargetname : LibC::LPWSTR* [In],ppszcredmanusername : LibC::LPWSTR* [In],ppcredentialblob : UInt8** [In],pcredentialblobsize : UInt32* [In]
  fun SspiPrepareForCredWrite(authidentity : Void*, psztargetname : LibC::LPWSTR, pcredmancredentialtype : UInt32*, ppszcredmantargetname : LibC::LPWSTR*, ppszcredmanusername : LibC::LPWSTR*, ppcredentialblob : UInt8**, pcredentialblobsize : UInt32*) : Int32

  # Params # authdata : Void* [In]
  fun SspiEncryptAuthIdentity(authdata : Void*) : Int32

  # Params # options : UInt32 [In],authdata : Void* [In]
  fun SspiEncryptAuthIdentityEx(options : UInt32, authdata : Void*) : Int32

  # Params # encryptedauthdata : Void* [In]
  fun SspiDecryptAuthIdentity(encryptedauthdata : Void*) : Int32

  # Params # options : UInt32 [In],encryptedauthdata : Void* [In]
  fun SspiDecryptAuthIdentityEx(options : UInt32, encryptedauthdata : Void*) : Int32

  # Params # encryptedauthdata : Void* [In]
  fun SspiIsAuthIdentityEncrypted(encryptedauthdata : Void*) : BOOLEAN

  # Params # pauthidentity : Void* [In],ppszusername : LibC::LPWSTR* [In],ppszdomainname : LibC::LPWSTR* [In],ppszpackedcredentialsstring : LibC::LPWSTR* [In]
  fun SspiEncodeAuthIdentityAsStrings(pauthidentity : Void*, ppszusername : LibC::LPWSTR*, ppszdomainname : LibC::LPWSTR*, ppszpackedcredentialsstring : LibC::LPWSTR*) : Int32

  # Params # authdata : Void* [In]
  fun SspiValidateAuthIdentity(authdata : Void*) : Int32

  # Params # authdata : Void* [In],authdatacopy : Void** [In]
  fun SspiCopyAuthIdentity(authdata : Void*, authdatacopy : Void**) : Int32

  # Params # authdata : Void* [In]
  fun SspiFreeAuthIdentity(authdata : Void*)

  # Params # authdata : Void* [In]
  fun SspiZeroAuthIdentity(authdata : Void*)

  # Params # databuffer : Void* [In]
  fun SspiLocalFree(databuffer : Void*)

  # Params # pszusername : LibC::LPWSTR [In],pszdomainname : LibC::LPWSTR [In],pszpackedcredentialsstring : LibC::LPWSTR [In],ppauthidentity : Void** [In]
  fun SspiEncodeStringsAsAuthIdentity(pszusername : LibC::LPWSTR, pszdomainname : LibC::LPWSTR, pszpackedcredentialsstring : LibC::LPWSTR, ppauthidentity : Void**) : Int32

  # Params # authidentity1 : Void* [In],authidentity2 : Void* [In],samesupplieduser : BOOLEAN* [In],samesuppliedidentity : BOOLEAN* [In]
  fun SspiCompareAuthIdentities(authidentity1 : Void*, authidentity2 : Void*, samesupplieduser : BOOLEAN*, samesuppliedidentity : BOOLEAN*) : Int32

  # Params # authidentity : Void* [In],authidentitylength : UInt32* [In],authidentitybytearray : Int8** [In]
  fun SspiMarshalAuthIdentity(authidentity : Void*, authidentitylength : UInt32*, authidentitybytearray : Int8**) : Int32

  # Params # authidentitylength : UInt32 [In],authidentitybytearray : PSTR [In],ppauthidentity : Void** [In]
  fun SspiUnmarshalAuthIdentity(authidentitylength : UInt32, authidentitybytearray : PSTR, ppauthidentity : Void**) : Int32

  # Params # errororntstatus : UInt32 [In]
  fun SspiIsPromptingNeeded(errororntstatus : UInt32) : BOOLEAN

  # Params # psztargetname : LibC::LPWSTR [In],pszhostname : LibC::LPWSTR* [In]
  fun SspiGetTargetHostName(psztargetname : LibC::LPWSTR, pszhostname : LibC::LPWSTR*) : Int32

  # Params # authidentity : Void* [In],pszpackagename : LibC::LPWSTR [In],ppnewauthidentity : Void** [In]
  fun SspiExcludePackage(authidentity : Void*, pszpackagename : LibC::LPWSTR, ppnewauthidentity : Void**) : Int32

  # Params # pszpackagename : PSTR [In],poptions : SECURITY_PACKAGE_OPTIONS* [In]
  fun AddSecurityPackageA(pszpackagename : PSTR, poptions : SECURITY_PACKAGE_OPTIONS*) : Int32

  # Params # pszpackagename : LibC::LPWSTR [In],poptions : SECURITY_PACKAGE_OPTIONS* [In]
  fun AddSecurityPackageW(pszpackagename : LibC::LPWSTR, poptions : SECURITY_PACKAGE_OPTIONS*) : Int32

  # Params # pszpackagename : PSTR [In]
  fun DeleteSecurityPackageA(pszpackagename : PSTR) : Int32

  # Params # pszpackagename : LibC::LPWSTR [In]
  fun DeleteSecurityPackageW(pszpackagename : LibC::LPWSTR) : Int32

  # Params # intargetinfo : CREDENTIAL_TARGET_INFORMATIONW* [In],buffer : UInt16** [In],buffersize : UInt32* [In]
  fun CredMarshalTargetInfo(intargetinfo : CREDENTIAL_TARGET_INFORMATIONW*, buffer : UInt16**, buffersize : UInt32*) : NTSTATUS

  # Params # buffer : UInt16* [In],buffersize : UInt32 [In],rettargetinfo : CREDENTIAL_TARGET_INFORMATIONW** [In],retactualsize : UInt32* [In]
  fun CredUnmarshalTargetInfo(buffer : UInt16*, buffersize : UInt32, rettargetinfo : CREDENTIAL_TARGET_INFORMATIONW**, retactualsize : UInt32*) : NTSTATUS

  # Params # psztargetname : PSTR [In],dwflags : UInt32 [In]
  fun SslEmptyCacheA(psztargetname : PSTR, dwflags : UInt32) : LibC::BOOL

  # Params # psztargetname : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun SslEmptyCacheW(psztargetname : LibC::LPWSTR, dwflags : UInt32) : LibC::BOOL

  # Params # prandomdata : UInt8* [In],crandomdata : Int32 [In]
  fun SslGenerateRandomBits(prandomdata : UInt8*, crandomdata : Int32)

  # Params # pbcertificate : UInt8* [In],cbcertificate : UInt32 [In],dwflags : UInt32 [In],ppcertificate : X509Certificate** [In]
  fun SslCrackCertificate(pbcertificate : UInt8*, cbcertificate : UInt32, dwflags : UInt32, ppcertificate : X509Certificate**) : LibC::BOOL

  # Params # pcertificate : X509Certificate* [In]
  fun SslFreeCertificate(pcertificate : X509Certificate*)

  # Params # reserved : UInt32 [In]
  fun SslGetMaximumKeySize(reserved : UInt32) : UInt32

  # Params # clienthello : UInt8* [In],clienthellosize : UInt32 [In],serveridentity : UInt8** [In],serveridentitysize : UInt32* [In],flags : UInt32 [In]
  fun SslGetServerIdentity(clienthello : UInt8*, clienthellosize : UInt32, serveridentity : UInt8**, serveridentitysize : UInt32*, flags : UInt32) : Int32

  # Params # clienthello : UInt8* [In],clienthellobytesize : UInt32 [In],genericextensions : SCH_EXTENSION_DATA* [In],genericextensionscount : UInt8 [In],bytestoread : UInt32* [In],flags : SchGetExtensionsOptions [In]
  fun SslGetExtensions(clienthello : UInt8*, clienthellobytesize : UInt32, genericextensions : SCH_EXTENSION_DATA*, genericextensionscount : UInt8, bytestoread : UInt32*, flags : SchGetExtensionsOptions) : Int32

  # Params # keytype : TOKENBINDING_KEY_PARAMETERS_TYPE [In],targeturl : LibC::LPWSTR [In],bindingtype : TOKENBINDING_TYPE [In],tlsekm : Void* [In],tlsekmsize : UInt32 [In],extensionformat : TOKENBINDING_EXTENSION_FORMAT [In],extensiondata : Void* [In],tokenbinding : Void** [In],tokenbindingsize : UInt32* [In],resultdata : TOKENBINDING_RESULT_DATA** [In]
  fun TokenBindingGenerateBinding(keytype : TOKENBINDING_KEY_PARAMETERS_TYPE, targeturl : LibC::LPWSTR, bindingtype : TOKENBINDING_TYPE, tlsekm : Void*, tlsekmsize : UInt32, extensionformat : TOKENBINDING_EXTENSION_FORMAT, extensiondata : Void*, tokenbinding : Void**, tokenbindingsize : UInt32*, resultdata : TOKENBINDING_RESULT_DATA**) : Int32

  # Params # tokenbindings : Void** [In],tokenbindingssize : UInt32* [In],tokenbindingscount : UInt32 [In],tokenbindingmessage : Void** [In],tokenbindingmessagesize : UInt32* [In]
  fun TokenBindingGenerateMessage(tokenbindings : Void**, tokenbindingssize : UInt32*, tokenbindingscount : UInt32, tokenbindingmessage : Void**, tokenbindingmessagesize : UInt32*) : Int32

  # Params # tokenbindingmessage : Void* [In],tokenbindingmessagesize : UInt32 [In],keytype : TOKENBINDING_KEY_PARAMETERS_TYPE [In],tlsekm : Void* [In],tlsekmsize : UInt32 [In],resultlist : TOKENBINDING_RESULT_LIST** [In]
  fun TokenBindingVerifyMessage(tokenbindingmessage : Void*, tokenbindingmessagesize : UInt32, keytype : TOKENBINDING_KEY_PARAMETERS_TYPE, tlsekm : Void*, tlsekmsize : UInt32, resultlist : TOKENBINDING_RESULT_LIST**) : Int32

  # Params # keytypes : TOKENBINDING_KEY_TYPES** [In]
  fun TokenBindingGetKeyTypesClient(keytypes : TOKENBINDING_KEY_TYPES**) : Int32

  # Params # keytypes : TOKENBINDING_KEY_TYPES** [In]
  fun TokenBindingGetKeyTypesServer(keytypes : TOKENBINDING_KEY_TYPES**) : Int32

  # Params # targeturl : LibC::LPWSTR [In]
  fun TokenBindingDeleteBinding(targeturl : LibC::LPWSTR) : Int32

  # Params # 
  fun TokenBindingDeleteAllBindings : Int32

  # Params # keytype : TOKENBINDING_KEY_PARAMETERS_TYPE [In],publickey : Void* [In],publickeysize : UInt32 [In],resultdata : TOKENBINDING_RESULT_DATA** [In]
  fun TokenBindingGenerateID(keytype : TOKENBINDING_KEY_PARAMETERS_TYPE, publickey : Void*, publickeysize : UInt32, resultdata : TOKENBINDING_RESULT_DATA**) : Int32

  # Params # keytype : TOKENBINDING_KEY_PARAMETERS_TYPE [In],targeturi : LibC::LPWSTR [In],resultdata : TOKENBINDING_RESULT_DATA** [In]
  fun TokenBindingGenerateIDForUri(keytype : TOKENBINDING_KEY_PARAMETERS_TYPE, targeturi : LibC::LPWSTR, resultdata : TOKENBINDING_RESULT_DATA**) : Int32

  # Params # majorversion : UInt8* [In],minorversion : UInt8* [In]
  fun TokenBindingGetHighestSupportedVersion(majorversion : UInt8*, minorversion : UInt8*) : Int32

  # Params # nameformat : EXTENDED_NAME_FORMAT [In],lpnamebuffer : UInt8* [In],nsize : UInt32* [In]
  fun GetUserNameExA(nameformat : EXTENDED_NAME_FORMAT, lpnamebuffer : UInt8*, nsize : UInt32*) : BOOLEAN

  # Params # nameformat : EXTENDED_NAME_FORMAT [In],lpnamebuffer : Char* [In],nsize : UInt32* [In]
  fun GetUserNameExW(nameformat : EXTENDED_NAME_FORMAT, lpnamebuffer : Char*, nsize : UInt32*) : BOOLEAN

  # Params # nameformat : EXTENDED_NAME_FORMAT [In],lpnamebuffer : UInt8* [In],nsize : UInt32* [In]
  fun GetComputerObjectNameA(nameformat : EXTENDED_NAME_FORMAT, lpnamebuffer : UInt8*, nsize : UInt32*) : BOOLEAN

  # Params # nameformat : EXTENDED_NAME_FORMAT [In],lpnamebuffer : Char* [In],nsize : UInt32* [In]
  fun GetComputerObjectNameW(nameformat : EXTENDED_NAME_FORMAT, lpnamebuffer : Char*, nsize : UInt32*) : BOOLEAN

  # Params # lpaccountname : PSTR [In],accountnameformat : EXTENDED_NAME_FORMAT [In],desirednameformat : EXTENDED_NAME_FORMAT [In],lptranslatedname : UInt8* [In],nsize : UInt32* [In]
  fun TranslateNameA(lpaccountname : PSTR, accountnameformat : EXTENDED_NAME_FORMAT, desirednameformat : EXTENDED_NAME_FORMAT, lptranslatedname : UInt8*, nsize : UInt32*) : BOOLEAN

  # Params # lpaccountname : LibC::LPWSTR [In],accountnameformat : EXTENDED_NAME_FORMAT [In],desirednameformat : EXTENDED_NAME_FORMAT [In],lptranslatedname : Char* [In],nsize : UInt32* [In]
  fun TranslateNameW(lpaccountname : LibC::LPWSTR, accountnameformat : EXTENDED_NAME_FORMAT, desirednameformat : EXTENDED_NAME_FORMAT, lptranslatedname : Char*, nsize : UInt32*) : BOOLEAN

  # Params # phslc : Void** [In]
  fun SLOpen(phslc : Void**) : HRESULT

  # Params # hslc : Void* [In]
  fun SLClose(hslc : Void*) : HRESULT

  # Params # hslc : Void* [In],pwszpkeyalgorithm : LibC::LPWSTR [In],pwszpkeystring : LibC::LPWSTR [In],cbpkeyspecificdata : UInt32 [In],pbpkeyspecificdata : UInt8* [In],ppkeyid : Guid* [In]
  fun SLInstallProofOfPurchase(hslc : Void*, pwszpkeyalgorithm : LibC::LPWSTR, pwszpkeystring : LibC::LPWSTR, cbpkeyspecificdata : UInt32, pbpkeyspecificdata : UInt8*, ppkeyid : Guid*) : HRESULT

  # Params # hslc : Void* [In],ppkeyid : Guid* [In]
  fun SLUninstallProofOfPurchase(hslc : Void*, ppkeyid : Guid*) : HRESULT

  # Params # hslc : Void* [In],cblicenseblob : UInt32 [In],pblicenseblob : UInt8* [In],plicensefileid : Guid* [In]
  fun SLInstallLicense(hslc : Void*, cblicenseblob : UInt32, pblicenseblob : UInt8*, plicensefileid : Guid*) : HRESULT

  # Params # hslc : Void* [In],plicensefileid : Guid* [In]
  fun SLUninstallLicense(hslc : Void*, plicensefileid : Guid*) : HRESULT

  # Params # hslc : Void* [In],pappid : Guid* [In],pproductskuid : Guid* [In],pwszrightname : LibC::LPWSTR [In],pvreserved : Void* [In]
  fun SLConsumeRight(hslc : Void*, pappid : Guid*, pproductskuid : Guid*, pwszrightname : LibC::LPWSTR, pvreserved : Void*) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetProductSkuInformation(hslc : Void*, pproductskuid : Guid*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],ppkeyid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetPKeyInformation(hslc : Void*, ppkeyid : Guid*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],psllicenseid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetLicenseInformation(hslc : Void*, psllicenseid : Guid*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],pappid : Guid* [In],pproductskuid : Guid* [In],pwszrightname : LibC::LPWSTR [In],pnstatuscount : UInt32* [In],pplicensingstatus : SL_LICENSING_STATUS** [In]
  fun SLGetLicensingStatusInformation(hslc : Void*, pappid : Guid*, pproductskuid : Guid*, pwszrightname : LibC::LPWSTR, pnstatuscount : UInt32*, pplicensingstatus : SL_LICENSING_STATUS**) : HRESULT

  # Params # hslc : Void* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetPolicyInformation(hslc : Void*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],pwszvaluename : LibC::LPWSTR [In],pdwvalue : UInt32* [In]
  fun SLGetPolicyInformationDWORD(hslc : Void*, pwszvaluename : LibC::LPWSTR, pdwvalue : UInt32*) : HRESULT

  # Params # hslc : Void* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetServiceInformation(hslc : Void*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],papplicationid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetApplicationInformation(hslc : Void*, papplicationid : Guid*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],cbappspecificdata : UInt32 [In],pvappspecificdata : Void* [In],pactivationinfo : SL_ACTIVATION_INFO_HEADER* [In],pwszproxyserver : LibC::LPWSTR [In],wproxyport : UInt16 [In]
  fun SLActivateProduct(hslc : Void*, pproductskuid : Guid*, cbappspecificdata : UInt32, pvappspecificdata : Void*, pactivationinfo : SL_ACTIVATION_INFO_HEADER*, pwszproxyserver : LibC::LPWSTR, wproxyport : UInt16) : HRESULT

  # Params # pwszserverurl : LibC::LPWSTR [In],pwszacquisitiontype : LibC::LPWSTR [In],pwszproxyserver : LibC::LPWSTR [In],wproxyport : UInt16 [In],phrstatus : HRESULT* [In]
  fun SLGetServerStatus(pwszserverurl : LibC::LPWSTR, pwszacquisitiontype : LibC::LPWSTR, pwszproxyserver : LibC::LPWSTR, wproxyport : UInt16, phrstatus : HRESULT*) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],ppwszinstallationid : LibC::LPWSTR* [In]
  fun SLGenerateOfflineInstallationId(hslc : Void*, pproductskuid : Guid*, ppwszinstallationid : LibC::LPWSTR*) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pactivationinfo : SL_ACTIVATION_INFO_HEADER* [In],ppwszinstallationid : LibC::LPWSTR* [In]
  fun SLGenerateOfflineInstallationIdEx(hslc : Void*, pproductskuid : Guid*, pactivationinfo : SL_ACTIVATION_INFO_HEADER*, ppwszinstallationid : LibC::LPWSTR*) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pwszinstallationid : LibC::LPWSTR [In],pwszconfirmationid : LibC::LPWSTR [In]
  fun SLDepositOfflineConfirmationId(hslc : Void*, pproductskuid : Guid*, pwszinstallationid : LibC::LPWSTR, pwszconfirmationid : LibC::LPWSTR) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pactivationinfo : SL_ACTIVATION_INFO_HEADER* [In],pwszinstallationid : LibC::LPWSTR [In],pwszconfirmationid : LibC::LPWSTR [In]
  fun SLDepositOfflineConfirmationIdEx(hslc : Void*, pproductskuid : Guid*, pactivationinfo : SL_ACTIVATION_INFO_HEADER*, pwszinstallationid : LibC::LPWSTR, pwszconfirmationid : LibC::LPWSTR) : HRESULT

  # Params # hslc : Void* [In],pwszpkeyalgorithm : LibC::LPWSTR [In],pwszpkeystring : LibC::LPWSTR [In],cbpkeyspecificdata : UInt32 [In],pbpkeyspecificdata : UInt8* [In],ppkeyid : Guid* [In]
  fun SLGetPKeyId(hslc : Void*, pwszpkeyalgorithm : LibC::LPWSTR, pwszpkeystring : LibC::LPWSTR, cbpkeyspecificdata : UInt32, pbpkeyspecificdata : UInt8*, ppkeyid : Guid*) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pnproductkeyids : UInt32* [In],ppproductkeyids : Guid** [In]
  fun SLGetInstalledProductKeyIds(hslc : Void*, pproductskuid : Guid*, pnproductkeyids : UInt32*, ppproductkeyids : Guid**) : HRESULT

  # Params # hslc : Void* [In],pproductskuid : Guid* [In],pproductkeyid : Guid* [In]
  fun SLSetCurrentProductKey(hslc : Void*, pproductskuid : Guid*, pproductkeyid : Guid*) : HRESULT

  # Params # hslc : Void* [In],equeryidtype : SLIDTYPE [In],pqueryid : Guid* [In],ereturnidtype : SLIDTYPE [In],pnreturnids : UInt32* [In],ppreturnids : Guid** [In]
  fun SLGetSLIDList(hslc : Void*, equeryidtype : SLIDTYPE, pqueryid : Guid*, ereturnidtype : SLIDTYPE, pnreturnids : UInt32*, ppreturnids : Guid**) : HRESULT

  # Params # hslc : Void* [In],cblicenseblob : UInt32 [In],pblicenseblob : UInt8* [In],plicensefileid : Guid* [In]
  fun SLGetLicenseFileId(hslc : Void*, cblicenseblob : UInt32, pblicenseblob : UInt8*, plicensefileid : Guid*) : HRESULT

  # Params # hslc : Void* [In],plicensefileid : Guid* [In],pcblicensefile : UInt32* [In],ppblicensefile : UInt8** [In]
  fun SLGetLicense(hslc : Void*, plicensefileid : Guid*, pcblicensefile : UInt32*, ppblicensefile : UInt8**) : HRESULT

  # Params # hslc : Void* [In],pwszeventid : LibC::LPWSTR [In],papplicationid : Guid* [In]
  fun SLFireEvent(hslc : Void*, pwszeventid : LibC::LPWSTR, papplicationid : Guid*) : HRESULT

  # Params # hslc : Void* [In],pwszeventid : LibC::LPWSTR [In],papplicationid : Guid* [In],hevent : LibC::HANDLE [In]
  fun SLRegisterEvent(hslc : Void*, pwszeventid : LibC::LPWSTR, papplicationid : Guid*, hevent : LibC::HANDLE) : HRESULT

  # Params # hslc : Void* [In],pwszeventid : LibC::LPWSTR [In],papplicationid : Guid* [In],hevent : LibC::HANDLE [In]
  fun SLUnregisterEvent(hslc : Void*, pwszeventid : LibC::LPWSTR, papplicationid : Guid*, hevent : LibC::HANDLE) : HRESULT

  # Params # pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetWindowsInformation(pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # pwszvaluename : LibC::LPWSTR [In],pdwvalue : UInt32* [In]
  fun SLGetWindowsInformationDWORD(pwszvaluename : LibC::LPWSTR, pdwvalue : UInt32*) : HRESULT

  # Params # pappid : Guid* [In],pgenuinestate : SL_GENUINE_STATE* [In],puioptions : SL_NONGENUINE_UI_OPTIONS* [In]
  fun SLIsGenuineLocal(pappid : Guid*, pgenuinestate : SL_GENUINE_STATE*, puioptions : SL_NONGENUINE_UI_OPTIONS*) : HRESULT

  # Params # ppticketblob : Void** [In],pcbticketblob : UInt32* [In],pwsztemplateid : LibC::LPWSTR [In],pwszserverurl : LibC::LPWSTR [In],pwszclienttoken : LibC::LPWSTR [In]
  fun SLAcquireGenuineTicket(ppticketblob : Void**, pcbticketblob : UInt32*, pwsztemplateid : LibC::LPWSTR, pwszserverurl : LibC::LPWSTR, pwszclienttoken : LibC::LPWSTR) : HRESULT

  # Params # pqueryid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],edatatype : SLDATATYPE [In],cbvalue : UInt32 [In],pbvalue : UInt8* [In]
  fun SLSetGenuineInformation(pqueryid : Guid*, pwszvaluename : LibC::LPWSTR, edatatype : SLDATATYPE, cbvalue : UInt32, pbvalue : UInt8*) : HRESULT

  # Params # hslc : Void* [In],ereferraltype : SLREFERRALTYPE [In],pskuorappid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],ppwszvalue : LibC::LPWSTR* [In]
  fun SLGetReferralInformation(hslc : Void*, ereferraltype : SLREFERRALTYPE, pskuorappid : Guid*, pwszvaluename : LibC::LPWSTR, ppwszvalue : LibC::LPWSTR*) : HRESULT

  # Params # pqueryid : Guid* [In],pwszvaluename : LibC::LPWSTR [In],pedatatype : SLDATATYPE* [In],pcbvalue : UInt32* [In],ppbvalue : UInt8** [In]
  fun SLGetGenuineInformation(pqueryid : Guid*, pwszvaluename : LibC::LPWSTR, pedatatype : SLDATATYPE*, pcbvalue : UInt32*, ppbvalue : UInt8**) : HRESULT

  # Params # valuename : LibC::LPWSTR [In],valuetype : UInt32* [In],databuffer : Void* [In],datasize : UInt32 [In],resultdatasize : UInt32* [In]
  fun SLQueryLicenseValueFromApp(valuename : LibC::LPWSTR, valuetype : UInt32*, databuffer : Void*, datasize : UInt32, resultdatasize : UInt32*) : HRESULT
end
