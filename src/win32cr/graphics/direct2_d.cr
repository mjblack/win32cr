require "./direct2_d/common.cr"
require "./../foundation.cr"
require "./../system/com.cr"
require "./direct_write.cr"
require "./imaging.cr"
require "./gdi.cr"
require "./dxgi.cr"
require "./dxgi/common.cr"
require "./../storage/xps/printing.cr"
require "./direct3_d.cr"

module Win32cr::Graphics::Direct2D
  extend self
  alias PD2D1_EFFECT_FACTORY = Proc(Void**, Win32cr::Foundation::HRESULT)

  alias PD2D1_PROPERTY_SET_FUNCTION = Proc(Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)

  alias PD2D1_PROPERTY_GET_FUNCTION = Proc(Void*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)

  D2D1_DEFAULT_FLATTENING_TOLERANCE = 0.25
  CLSID_D2D12DAffineTransform = "6aa97485-6354-4cfc-908c-e4a74f62c96c"
  CLSID_D2D13DPerspectiveTransform = "c2844d0b-3d86-46e7-85ba-526c9240f3fb"
  CLSID_D2D13DTransform = "e8467b04-ec61-4b8a-b5de-d4d73debea5a"
  CLSID_D2D1ArithmeticComposite = "fc151437-049a-4784-a24a-f1c4daf20987"
  CLSID_D2D1Atlas = "913e2be4-fdcf-4fe2-a5f0-2454f14ff408"
  CLSID_D2D1BitmapSource = "5fb6c24d-c6dd-4231-9404-50f4d5c3252d"
  CLSID_D2D1Blend = "81c5b77b-13f8-4cdd-ad20-c890547ac65d"
  CLSID_D2D1Border = "2a2d49c0-4acf-43c7-8c6a-7c4a27874d27"
  CLSID_D2D1Brightness = "8cea8d1e-77b0-4986-b3b9-2f0c0eae7887"
  CLSID_D2D1ColorManagement = "1a28524c-fdd6-4aa4-ae8f-837eb8267b37"
  CLSID_D2D1ColorMatrix = "921f03d6-641c-47df-852d-b4bb6153ae11"
  CLSID_D2D1Composite = "48fc9f51-f6ac-48f1-8b58-3b28ac46f76d"
  CLSID_D2D1ConvolveMatrix = "407f8c08-5533-4331-a341-23cc3877843e"
  CLSID_D2D1Crop = "e23f7110-0e9a-4324-af47-6a2c0c46f35b"
  CLSID_D2D1DirectionalBlur = "174319a6-58e9-49b2-bb63-caf2c811a3db"
  CLSID_D2D1DiscreteTransfer = "90866fcd-488e-454b-af06-e5041b66c36c"
  CLSID_D2D1DisplacementMap = "edc48364-0417-4111-9450-43845fa9f890"
  CLSID_D2D1DistantDiffuse = "3e7efd62-a32d-46d4-a83c-5278889ac954"
  CLSID_D2D1DistantSpecular = "428c1ee5-77b8-4450-8ab5-72219c21abda"
  CLSID_D2D1DpiCompensation = "6c26c5c7-34e0-46fc-9cfd-e5823706e228"
  CLSID_D2D1Flood = "61c23c20-ae69-4d8e-94cf-50078df638f2"
  CLSID_D2D1GammaTransfer = "409444c4-c419-41a0-b0c1-8cd0c0a18e42"
  CLSID_D2D1GaussianBlur = "1feb6d69-2fe6-4ac9-8c58-1d7f93e7a6a5"
  CLSID_D2D1Scale = "9daf9369-3846-4d0e-a44e-0c607934a5d7"
  CLSID_D2D1Histogram = "881db7d0-f7ee-4d4d-a6d2-4697acc66ee8"
  CLSID_D2D1HueRotation = "0f4458ec-4b32-491b-9e85-bd73f44d3eb6"
  CLSID_D2D1LinearTransfer = "ad47c8fd-63ef-4acc-9b51-67979c036c06"
  CLSID_D2D1LuminanceToAlpha = "41251ab7-0beb-46f8-9da7-59e93fcce5de"
  CLSID_D2D1Morphology = "eae6c40d-626a-4c2d-bfcb-391001abe202"
  CLSID_D2D1OpacityMetadata = "6c53006a-4450-4199-aa5b-ad1656fece5e"
  CLSID_D2D1PointDiffuse = "b9e303c3-c08c-4f91-8b7b-38656bc48c20"
  CLSID_D2D1PointSpecular = "09c3ca26-3ae2-4f09-9ebc-ed3865d53f22"
  CLSID_D2D1Premultiply = "06eab419-deed-4018-80d2-3e1d471adeb2"
  CLSID_D2D1Saturation = "5cb2d9cf-327d-459f-a0ce-40c0b2086bf7"
  CLSID_D2D1Shadow = "c67ea361-1863-4e69-89db-695d3e9a5b6b"
  CLSID_D2D1SpotDiffuse = "818a1105-7932-44f4-aa86-08ae7b2f2c93"
  CLSID_D2D1SpotSpecular = "edae421e-7654-4a37-9db8-71acc1beb3c1"
  CLSID_D2D1TableTransfer = "5bf818c3-5e43-48cb-b631-868396d6a1d4"
  CLSID_D2D1Tile = "b0784138-3b76-4bc5-b13b-0fa2ad02659f"
  CLSID_D2D1Turbulence = "cf2bb6ae-889a-4ad7-ba29-a2fd732c9fc9"
  CLSID_D2D1UnPremultiply = "fb9ac489-ad8d-41ed-9999-bb6347d110f7"
  CLSID_D2D1YCbCr = "99503cc1-66c7-45c9-a875-8ad8a7914401"
  CLSID_D2D1Contrast = "b648a78a-0ed5-4f80-a94a-8e825aca6b77"
  CLSID_D2D1RgbToHue = "23f3e5ec-91e8-4d3d-ad0a-afadc1004aa1"
  CLSID_D2D1HueToRgb = "7b78a6bd-0141-4def-8a52-6356ee0cbdd5"
  CLSID_D2D1ChromaKey = "74c01f5b-2a0d-408c-88e2-c7a3c7197742"
  CLSID_D2D1Emboss = "b1c5eb2b-0348-43f0-8107-4957cacba2ae"
  CLSID_D2D1Exposure = "b56c8cfa-f634-41ee-bee0-ffa617106004"
  CLSID_D2D1Grayscale = "36dde0eb-3725-42e0-836d-52fb20aee644"
  CLSID_D2D1Invert = "e0c3784d-cb39-4e84-b6fd-6b72f0810263"
  CLSID_D2D1Posterize = "2188945e-33a3-4366-b7bc-086bd02d0884"
  CLSID_D2D1Sepia = "3a1af410-5f1d-4dbe-84df-915da79b7153"
  CLSID_D2D1Sharpen = "c9b887cb-c5ff-4dc5-9779-273dcf417c7d"
  CLSID_D2D1Straighten = "4da47b12-79a3-4fb0-8237-bbc3b2a4de08"
  CLSID_D2D1TemperatureTint = "89176087-8af9-4a08-aeb1-895f38db1766"
  CLSID_D2D1Vignette = "c00c40be-5e67-4ca3-95b4-f4b02c115135"
  CLSID_D2D1EdgeDetection = "eff583ca-cb07-4aa9-ac5d-2cc44c76460f"
  CLSID_D2D1HighlightsShadows = "cadc8384-323f-4c7e-a361-2e2b24df6ee4"
  CLSID_D2D1LookupTable3D = "349e0eda-0088-4a79-9ca3-c7e300202020"
  CLSID_D2D1Opacity = "811d79a4-de28-4454-8094-c64685f8bd4c"
  CLSID_D2D1AlphaMask = "c80ecff0-3fd5-4f05-8328-c5d1724b4f0a"
  CLSID_D2D1CrossFade = "12f575e8-4db1-485f-9a84-03a07dd3829f"
  CLSID_D2D1Tint = "36312b17-f7dd-4014-915d-ffca768cf211"
  D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL = 80
  CLSID_D2D1WhiteLevelAdjustment = "44a1cadb-6cdd-4818-8ff4-26c1cfe95bdb"
  CLSID_D2D1HdrToneMap = "7b0b748d-4610-4486-a90c-999d9a2e2b11"
  D2D1_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  FACILITY_D2D = 2201_u32

  enum D2D1_INTERPOLATION_MODE_DEFINITION
    D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR = 0_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR = 1_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC = 2_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 3_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC = 4_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC = 5_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_FANT = 6_i32
    D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR = 7_i32
  end
  enum D2D1_GAMMA : UInt32
    D2D1_GAMMA_2_2 = 0_u32
    D2D1_GAMMA_1_0 = 1_u32
    D2D1_GAMMA_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_OPACITY_MASK_CONTENT : UInt32
    D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0_u32
    D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 1_u32
    D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2_u32
    D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_EXTEND_MODE : UInt32
    D2D1_EXTEND_MODE_CLAMP = 0_u32
    D2D1_EXTEND_MODE_WRAP = 1_u32
    D2D1_EXTEND_MODE_MIRROR = 2_u32
    D2D1_EXTEND_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_ANTIALIAS_MODE : UInt32
    D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0_u32
    D2D1_ANTIALIAS_MODE_ALIASED = 1_u32
    D2D1_ANTIALIAS_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TEXT_ANTIALIAS_MODE : UInt32
    D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0_u32
    D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1_u32
    D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2_u32
    D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3_u32
    D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BITMAP_INTERPOLATION_MODE : UInt32
    D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_DRAW_TEXT_OPTIONS : UInt32
    D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1_u32
    D2D1_DRAW_TEXT_OPTIONS_CLIP = 2_u32
    D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT = 4_u32
    D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 8_u32
    D2D1_DRAW_TEXT_OPTIONS_NONE = 0_u32
    D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_ARC_SIZE : UInt32
    D2D1_ARC_SIZE_SMALL = 0_u32
    D2D1_ARC_SIZE_LARGE = 1_u32
    D2D1_ARC_SIZE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CAP_STYLE : UInt32
    D2D1_CAP_STYLE_FLAT = 0_u32
    D2D1_CAP_STYLE_SQUARE = 1_u32
    D2D1_CAP_STYLE_ROUND = 2_u32
    D2D1_CAP_STYLE_TRIANGLE = 3_u32
    D2D1_CAP_STYLE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DASH_STYLE : UInt32
    D2D1_DASH_STYLE_SOLID = 0_u32
    D2D1_DASH_STYLE_DASH = 1_u32
    D2D1_DASH_STYLE_DOT = 2_u32
    D2D1_DASH_STYLE_DASH_DOT = 3_u32
    D2D1_DASH_STYLE_DASH_DOT_DOT = 4_u32
    D2D1_DASH_STYLE_CUSTOM = 5_u32
    D2D1_DASH_STYLE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_LINE_JOIN : UInt32
    D2D1_LINE_JOIN_MITER = 0_u32
    D2D1_LINE_JOIN_BEVEL = 1_u32
    D2D1_LINE_JOIN_ROUND = 2_u32
    D2D1_LINE_JOIN_MITER_OR_BEVEL = 3_u32
    D2D1_LINE_JOIN_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COMBINE_MODE : UInt32
    D2D1_COMBINE_MODE_UNION = 0_u32
    D2D1_COMBINE_MODE_INTERSECT = 1_u32
    D2D1_COMBINE_MODE_XOR = 2_u32
    D2D1_COMBINE_MODE_EXCLUDE = 3_u32
    D2D1_COMBINE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GEOMETRY_RELATION : UInt32
    D2D1_GEOMETRY_RELATION_UNKNOWN = 0_u32
    D2D1_GEOMETRY_RELATION_DISJOINT = 1_u32
    D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2_u32
    D2D1_GEOMETRY_RELATION_CONTAINS = 3_u32
    D2D1_GEOMETRY_RELATION_OVERLAP = 4_u32
    D2D1_GEOMETRY_RELATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION : UInt32
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0_u32
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 1_u32
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SWEEP_DIRECTION : UInt32
    D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0_u32
    D2D1_SWEEP_DIRECTION_CLOCKWISE = 1_u32
    D2D1_SWEEP_DIRECTION_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_LAYER_OPTIONS : UInt32
    D2D1_LAYER_OPTIONS_NONE = 0_u32
    D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1_u32
    D2D1_LAYER_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_WINDOW_STATE : UInt32
    D2D1_WINDOW_STATE_NONE = 0_u32
    D2D1_WINDOW_STATE_OCCLUDED = 1_u32
    D2D1_WINDOW_STATE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_RENDER_TARGET_TYPE : UInt32
    D2D1_RENDER_TARGET_TYPE_DEFAULT = 0_u32
    D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1_u32
    D2D1_RENDER_TARGET_TYPE_HARDWARE = 2_u32
    D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_FEATURE_LEVEL : UInt32
    D2D1_FEATURE_LEVEL_DEFAULT = 0_u32
    D2D1_FEATURE_LEVEL_9 = 37120_u32
    D2D1_FEATURE_LEVEL_10 = 40960_u32
    D2D1_FEATURE_LEVEL_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_RENDER_TARGET_USAGE : UInt32
    D2D1_RENDER_TARGET_USAGE_NONE = 0_u32
    D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1_u32
    D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2_u32
    D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_PRESENT_OPTIONS : UInt32
    D2D1_PRESENT_OPTIONS_NONE = 0_u32
    D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1_u32
    D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2_u32
    D2D1_PRESENT_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS : UInt32
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0_u32
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1_u32
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DC_INITIALIZE_MODE : UInt32
    D2D1_DC_INITIALIZE_MODE_COPY = 0_u32
    D2D1_DC_INITIALIZE_MODE_CLEAR = 1_u32
    D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DEBUG_LEVEL : UInt32
    D2D1_DEBUG_LEVEL_NONE = 0_u32
    D2D1_DEBUG_LEVEL_ERROR = 1_u32
    D2D1_DEBUG_LEVEL_WARNING = 2_u32
    D2D1_DEBUG_LEVEL_INFORMATION = 3_u32
    D2D1_DEBUG_LEVEL_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_FACTORY_TYPE : UInt32
    D2D1_FACTORY_TYPE_SINGLE_THREADED = 0_u32
    D2D1_FACTORY_TYPE_MULTI_THREADED = 1_u32
    D2D1_FACTORY_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CHANNEL_SELECTOR : UInt32
    D2D1_CHANNEL_SELECTOR_R = 0_u32
    D2D1_CHANNEL_SELECTOR_G = 1_u32
    D2D1_CHANNEL_SELECTOR_B = 2_u32
    D2D1_CHANNEL_SELECTOR_A = 3_u32
    D2D1_CHANNEL_SELECTOR_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BITMAPSOURCE_ORIENTATION : UInt32
    D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = 1_u32
    D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = 2_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = 3_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = 6_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7_u32
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = 8_u32
    D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GAUSSIANBLUR_PROP : UInt32
    D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0_u32
    D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = 1_u32
    D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = 2_u32
    D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GAUSSIANBLUR_OPTIMIZATION : UInt32
    D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = 0_u32
    D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1_u32
    D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = 2_u32
    D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DIRECTIONALBLUR_PROP : UInt32
    D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0_u32
    D2D1_DIRECTIONALBLUR_PROP_ANGLE = 1_u32
    D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = 2_u32
    D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = 3_u32
    D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DIRECTIONALBLUR_OPTIMIZATION : UInt32
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = 0_u32
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1_u32
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = 2_u32
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SHADOW_PROP : UInt32
    D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0_u32
    D2D1_SHADOW_PROP_COLOR = 1_u32
    D2D1_SHADOW_PROP_OPTIMIZATION = 2_u32
    D2D1_SHADOW_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SHADOW_OPTIMIZATION : UInt32
    D2D1_SHADOW_OPTIMIZATION_SPEED = 0_u32
    D2D1_SHADOW_OPTIMIZATION_BALANCED = 1_u32
    D2D1_SHADOW_OPTIMIZATION_QUALITY = 2_u32
    D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BLEND_PROP : UInt32
    D2D1_BLEND_PROP_MODE = 0_u32
    D2D1_BLEND_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SATURATION_PROP : UInt32
    D2D1_SATURATION_PROP_SATURATION = 0_u32
    D2D1_SATURATION_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HUEROTATION_PROP : UInt32
    D2D1_HUEROTATION_PROP_ANGLE = 0_u32
    D2D1_HUEROTATION_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLORMATRIX_PROP : UInt32
    D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0_u32
    D2D1_COLORMATRIX_PROP_ALPHA_MODE = 1_u32
    D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2_u32
    D2D1_COLORMATRIX_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BITMAPSOURCE_PROP : UInt32
    D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = 0_u32
    D2D1_BITMAPSOURCE_PROP_SCALE = 1_u32
    D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = 2_u32
    D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3_u32
    D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = 4_u32
    D2D1_BITMAPSOURCE_PROP_ORIENTATION = 5_u32
    D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BITMAPSOURCE_INTERPOLATION_MODE : UInt32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = 6_u32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = 7_u32
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BITMAPSOURCE_ALPHA_MODE : UInt32
    D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1_u32
    D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = 2_u32
    D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COMPOSITE_PROP : UInt32
    D2D1_COMPOSITE_PROP_MODE = 0_u32
    D2D1_COMPOSITE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_3DTRANSFORM_PROP : UInt32
    D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0_u32
    D2D1_3DTRANSFORM_PROP_BORDER_MODE = 1_u32
    D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = 2_u32
    D2D1_3DTRANSFORM_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_3DTRANSFORM_INTERPOLATION_MODE : UInt32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_3DPERSPECTIVETRANSFORM_PROP : UInt32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = 1_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = 2_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = 4_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = 5_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = 6_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = 7_u32
    D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE : UInt32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_2DAFFINETRANSFORM_PROP : UInt32
    D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0_u32
    D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = 1_u32
    D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = 2_u32
    D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = 3_u32
    D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DPICOMPENSATION_PROP : UInt32
    D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0_u32
    D2D1_DPICOMPENSATION_PROP_BORDER_MODE = 1_u32
    D2D1_DPICOMPENSATION_PROP_INPUT_DPI = 2_u32
    D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DPICOMPENSATION_INTERPOLATION_MODE : UInt32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SCALE_PROP : UInt32
    D2D1_SCALE_PROP_SCALE = 0_u32
    D2D1_SCALE_PROP_CENTER_POINT = 1_u32
    D2D1_SCALE_PROP_INTERPOLATION_MODE = 2_u32
    D2D1_SCALE_PROP_BORDER_MODE = 3_u32
    D2D1_SCALE_PROP_SHARPNESS = 4_u32
    D2D1_SCALE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SCALE_INTERPOLATION_MODE : UInt32
    D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_SCALE_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_SCALE_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TURBULENCE_PROP : UInt32
    D2D1_TURBULENCE_PROP_OFFSET = 0_u32
    D2D1_TURBULENCE_PROP_SIZE = 1_u32
    D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2_u32
    D2D1_TURBULENCE_PROP_NUM_OCTAVES = 3_u32
    D2D1_TURBULENCE_PROP_SEED = 4_u32
    D2D1_TURBULENCE_PROP_NOISE = 5_u32
    D2D1_TURBULENCE_PROP_STITCHABLE = 6_u32
    D2D1_TURBULENCE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISPLACEMENTMAP_PROP : UInt32
    D2D1_DISPLACEMENTMAP_PROP_SCALE = 0_u32
    D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1_u32
    D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2_u32
    D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLORMANAGEMENT_PROP : UInt32
    D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = 0_u32
    D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = 1_u32
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = 2_u32
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3_u32
    D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = 4_u32
    D2D1_COLORMANAGEMENT_PROP_QUALITY = 5_u32
    D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLORMANAGEMENT_ALPHA_MODE : UInt32
    D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1_u32
    D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = 2_u32
    D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLORMANAGEMENT_QUALITY : UInt32
    D2D1_COLORMANAGEMENT_QUALITY_PROOF = 0_u32
    D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1_u32
    D2D1_COLORMANAGEMENT_QUALITY_BEST = 2_u32
    D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLORMANAGEMENT_RENDERING_INTENT : UInt32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = 0_u32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1_u32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = 2_u32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3_u32
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HISTOGRAM_PROP : UInt32
    D2D1_HISTOGRAM_PROP_NUM_BINS = 0_u32
    D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = 1_u32
    D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2_u32
    D2D1_HISTOGRAM_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_POINTSPECULAR_PROP : UInt32
    D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = 0_u32
    D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = 1_u32
    D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = 2_u32
    D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = 3_u32
    D2D1_POINTSPECULAR_PROP_COLOR = 4_u32
    D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5_u32
    D2D1_POINTSPECULAR_PROP_SCALE_MODE = 6_u32
    D2D1_POINTSPECULAR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_POINTSPECULAR_SCALE_MODE : UInt32
    D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = 1_u32
    D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = 2_u32
    D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SPOTSPECULAR_PROP : UInt32
    D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = 0_u32
    D2D1_SPOTSPECULAR_PROP_POINTS_AT = 1_u32
    D2D1_SPOTSPECULAR_PROP_FOCUS = 2_u32
    D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3_u32
    D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = 4_u32
    D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = 5_u32
    D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = 6_u32
    D2D1_SPOTSPECULAR_PROP_COLOR = 7_u32
    D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 8_u32
    D2D1_SPOTSPECULAR_PROP_SCALE_MODE = 9_u32
    D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SPOTSPECULAR_SCALE_MODE : UInt32
    D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = 1_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = 2_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISTANTSPECULAR_PROP : UInt32
    D2D1_DISTANTSPECULAR_PROP_AZIMUTH = 0_u32
    D2D1_DISTANTSPECULAR_PROP_ELEVATION = 1_u32
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = 2_u32
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = 3_u32
    D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = 4_u32
    D2D1_DISTANTSPECULAR_PROP_COLOR = 5_u32
    D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6_u32
    D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = 7_u32
    D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISTANTSPECULAR_SCALE_MODE : UInt32
    D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = 1_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = 2_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_POINTDIFFUSE_PROP : UInt32
    D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = 0_u32
    D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = 1_u32
    D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = 2_u32
    D2D1_POINTDIFFUSE_PROP_COLOR = 3_u32
    D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4_u32
    D2D1_POINTDIFFUSE_PROP_SCALE_MODE = 5_u32
    D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_POINTDIFFUSE_SCALE_MODE : UInt32
    D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = 1_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = 2_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SPOTDIFFUSE_PROP : UInt32
    D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = 0_u32
    D2D1_SPOTDIFFUSE_PROP_POINTS_AT = 1_u32
    D2D1_SPOTDIFFUSE_PROP_FOCUS = 2_u32
    D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3_u32
    D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = 4_u32
    D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = 5_u32
    D2D1_SPOTDIFFUSE_PROP_COLOR = 6_u32
    D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 7_u32
    D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = 8_u32
    D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SPOTDIFFUSE_SCALE_MODE : UInt32
    D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = 1_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = 2_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISTANTDIFFUSE_PROP : UInt32
    D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = 0_u32
    D2D1_DISTANTDIFFUSE_PROP_ELEVATION = 1_u32
    D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = 2_u32
    D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = 3_u32
    D2D1_DISTANTDIFFUSE_PROP_COLOR = 4_u32
    D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5_u32
    D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = 6_u32
    D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISTANTDIFFUSE_SCALE_MODE : UInt32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = 1_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = 2_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_FLOOD_PROP : UInt32
    D2D1_FLOOD_PROP_COLOR = 0_u32
    D2D1_FLOOD_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_LINEARTRANSFER_PROP : UInt32
    D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = 0_u32
    D2D1_LINEARTRANSFER_PROP_RED_SLOPE = 1_u32
    D2D1_LINEARTRANSFER_PROP_RED_DISABLE = 2_u32
    D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3_u32
    D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = 4_u32
    D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = 5_u32
    D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = 6_u32
    D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = 7_u32
    D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = 8_u32
    D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9_u32
    D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = 10_u32
    D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = 11_u32
    D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = 12_u32
    D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GAMMATRANSFER_PROP : UInt32
    D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = 0_u32
    D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = 1_u32
    D2D1_GAMMATRANSFER_PROP_RED_OFFSET = 2_u32
    D2D1_GAMMATRANSFER_PROP_RED_DISABLE = 3_u32
    D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4_u32
    D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = 5_u32
    D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = 6_u32
    D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = 7_u32
    D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = 8_u32
    D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = 9_u32
    D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = 10_u32
    D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = 11_u32
    D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12_u32
    D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = 13_u32
    D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = 14_u32
    D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = 15_u32
    D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = 16_u32
    D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TABLETRANSFER_PROP : UInt32
    D2D1_TABLETRANSFER_PROP_RED_TABLE = 0_u32
    D2D1_TABLETRANSFER_PROP_RED_DISABLE = 1_u32
    D2D1_TABLETRANSFER_PROP_GREEN_TABLE = 2_u32
    D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3_u32
    D2D1_TABLETRANSFER_PROP_BLUE_TABLE = 4_u32
    D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = 5_u32
    D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = 6_u32
    D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7_u32
    D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = 8_u32
    D2D1_TABLETRANSFER_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_DISCRETETRANSFER_PROP : UInt32
    D2D1_DISCRETETRANSFER_PROP_RED_TABLE = 0_u32
    D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = 1_u32
    D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = 2_u32
    D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3_u32
    D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = 4_u32
    D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = 5_u32
    D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = 6_u32
    D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7_u32
    D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = 8_u32
    D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CONVOLVEMATRIX_PROP : UInt32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0_u32
    D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = 1_u32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = 2_u32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = 3_u32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = 4_u32
    D2D1_CONVOLVEMATRIX_PROP_DIVISOR = 5_u32
    D2D1_CONVOLVEMATRIX_PROP_BIAS = 6_u32
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = 7_u32
    D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = 8_u32
    D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = 9_u32
    D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = 10_u32
    D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CONVOLVEMATRIX_SCALE_MODE : UInt32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = 1_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = 2_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BRIGHTNESS_PROP : UInt32
    D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0_u32
    D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1_u32
    D2D1_BRIGHTNESS_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_ARITHMETICCOMPOSITE_PROP : UInt32
    D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0_u32
    D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1_u32
    D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CROP_PROP : UInt32
    D2D1_CROP_PROP_RECT = 0_u32
    D2D1_CROP_PROP_BORDER_MODE = 1_u32
    D2D1_CROP_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BORDER_PROP : UInt32
    D2D1_BORDER_PROP_EDGE_MODE_X = 0_u32
    D2D1_BORDER_PROP_EDGE_MODE_Y = 1_u32
    D2D1_BORDER_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BORDER_EDGE_MODE : UInt32
    D2D1_BORDER_EDGE_MODE_CLAMP = 0_u32
    D2D1_BORDER_EDGE_MODE_WRAP = 1_u32
    D2D1_BORDER_EDGE_MODE_MIRROR = 2_u32
    D2D1_BORDER_EDGE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_MORPHOLOGY_PROP : UInt32
    D2D1_MORPHOLOGY_PROP_MODE = 0_u32
    D2D1_MORPHOLOGY_PROP_WIDTH = 1_u32
    D2D1_MORPHOLOGY_PROP_HEIGHT = 2_u32
    D2D1_MORPHOLOGY_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_MORPHOLOGY_MODE : UInt32
    D2D1_MORPHOLOGY_MODE_ERODE = 0_u32
    D2D1_MORPHOLOGY_MODE_DILATE = 1_u32
    D2D1_MORPHOLOGY_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TILE_PROP : UInt32
    D2D1_TILE_PROP_RECT = 0_u32
    D2D1_TILE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_ATLAS_PROP : UInt32
    D2D1_ATLAS_PROP_INPUT_RECT = 0_u32
    D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1_u32
    D2D1_ATLAS_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_OPACITYMETADATA_PROP : UInt32
    D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0_u32
    D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_PROPERTY_TYPE : UInt32
    D2D1_PROPERTY_TYPE_UNKNOWN = 0_u32
    D2D1_PROPERTY_TYPE_STRING = 1_u32
    D2D1_PROPERTY_TYPE_BOOL = 2_u32
    D2D1_PROPERTY_TYPE_UINT32 = 3_u32
    D2D1_PROPERTY_TYPE_INT32 = 4_u32
    D2D1_PROPERTY_TYPE_FLOAT = 5_u32
    D2D1_PROPERTY_TYPE_VECTOR2 = 6_u32
    D2D1_PROPERTY_TYPE_VECTOR3 = 7_u32
    D2D1_PROPERTY_TYPE_VECTOR4 = 8_u32
    D2D1_PROPERTY_TYPE_BLOB = 9_u32
    D2D1_PROPERTY_TYPE_IUNKNOWN = 10_u32
    D2D1_PROPERTY_TYPE_ENUM = 11_u32
    D2D1_PROPERTY_TYPE_ARRAY = 12_u32
    D2D1_PROPERTY_TYPE_CLSID = 13_u32
    D2D1_PROPERTY_TYPE_MATRIX_3X2 = 14_u32
    D2D1_PROPERTY_TYPE_MATRIX_4X3 = 15_u32
    D2D1_PROPERTY_TYPE_MATRIX_4X4 = 16_u32
    D2D1_PROPERTY_TYPE_MATRIX_5X4 = 17_u32
    D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 18_u32
    D2D1_PROPERTY_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_PROPERTY : UInt32
    D2D1_PROPERTY_CLSID = 2147483648_u32
    D2D1_PROPERTY_DISPLAYNAME = 2147483649_u32
    D2D1_PROPERTY_AUTHOR = 2147483650_u32
    D2D1_PROPERTY_CATEGORY = 2147483651_u32
    D2D1_PROPERTY_DESCRIPTION = 2147483652_u32
    D2D1_PROPERTY_INPUTS = 2147483653_u32
    D2D1_PROPERTY_CACHED = 2147483654_u32
    D2D1_PROPERTY_PRECISION = 2147483655_u32
    D2D1_PROPERTY_MIN_INPUTS = 2147483656_u32
    D2D1_PROPERTY_MAX_INPUTS = 2147483657_u32
    D2D1_PROPERTY_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SUBPROPERTY : UInt32
    D2D1_SUBPROPERTY_DISPLAYNAME = 2147483648_u32
    D2D1_SUBPROPERTY_ISREADONLY = 2147483649_u32
    D2D1_SUBPROPERTY_MIN = 2147483650_u32
    D2D1_SUBPROPERTY_MAX = 2147483651_u32
    D2D1_SUBPROPERTY_DEFAULT = 2147483652_u32
    D2D1_SUBPROPERTY_FIELDS = 2147483653_u32
    D2D1_SUBPROPERTY_INDEX = 2147483654_u32
    D2D1_SUBPROPERTY_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_BITMAP_OPTIONS : UInt32
    D2D1_BITMAP_OPTIONS_NONE = 0_u32
    D2D1_BITMAP_OPTIONS_TARGET = 1_u32
    D2D1_BITMAP_OPTIONS_CANNOT_DRAW = 2_u32
    D2D1_BITMAP_OPTIONS_CPU_READ = 4_u32
    D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 8_u32
    D2D1_BITMAP_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BUFFER_PRECISION : UInt32
    D2D1_BUFFER_PRECISION_UNKNOWN = 0_u32
    D2D1_BUFFER_PRECISION_8BPC_UNORM = 1_u32
    D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 2_u32
    D2D1_BUFFER_PRECISION_16BPC_UNORM = 3_u32
    D2D1_BUFFER_PRECISION_16BPC_FLOAT = 4_u32
    D2D1_BUFFER_PRECISION_32BPC_FLOAT = 5_u32
    D2D1_BUFFER_PRECISION_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_MAP_OPTIONS : UInt32
    D2D1_MAP_OPTIONS_NONE = 0_u32
    D2D1_MAP_OPTIONS_READ = 1_u32
    D2D1_MAP_OPTIONS_WRITE = 2_u32
    D2D1_MAP_OPTIONS_DISCARD = 4_u32
    D2D1_MAP_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_INTERPOLATION_MODE : UInt32
    D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_UNIT_MODE : UInt32
    D2D1_UNIT_MODE_DIPS = 0_u32
    D2D1_UNIT_MODE_PIXELS = 1_u32
    D2D1_UNIT_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLOR_SPACE : UInt32
    D2D1_COLOR_SPACE_CUSTOM = 0_u32
    D2D1_COLOR_SPACE_SRGB = 1_u32
    D2D1_COLOR_SPACE_SCRGB = 2_u32
    D2D1_COLOR_SPACE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_DEVICE_CONTEXT_OPTIONS : UInt32
    D2D1_DEVICE_CONTEXT_OPTIONS_NONE = 0_u32
    D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 1_u32
    D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_STROKE_TRANSFORM_TYPE : UInt32
    D2D1_STROKE_TRANSFORM_TYPE_NORMAL = 0_u32
    D2D1_STROKE_TRANSFORM_TYPE_FIXED = 1_u32
    D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = 2_u32
    D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_PRIMITIVE_BLEND : UInt32
    D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0_u32
    D2D1_PRIMITIVE_BLEND_COPY = 1_u32
    D2D1_PRIMITIVE_BLEND_MIN = 2_u32
    D2D1_PRIMITIVE_BLEND_ADD = 3_u32
    D2D1_PRIMITIVE_BLEND_MAX = 4_u32
    D2D1_PRIMITIVE_BLEND_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_THREADING_MODE : UInt32
    D2D1_THREADING_MODE_SINGLE_THREADED = 0_u32
    D2D1_THREADING_MODE_MULTI_THREADED = 1_u32
    D2D1_THREADING_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLOR_INTERPOLATION_MODE : UInt32
    D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT = 0_u32
    D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 1_u32
    D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_LAYER_OPTIONS1 : UInt32
    D2D1_LAYER_OPTIONS1_NONE = 0_u32
    D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 1_u32
    D2D1_LAYER_OPTIONS1_IGNORE_ALPHA = 2_u32
    D2D1_LAYER_OPTIONS1_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_PRINT_FONT_SUBSET_MODE : UInt32
    D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT = 0_u32
    D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = 1_u32
    D2D1_PRINT_FONT_SUBSET_MODE_NONE = 2_u32
    D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_CHANGE_TYPE : UInt32
    D2D1_CHANGE_TYPE_NONE = 0_u32
    D2D1_CHANGE_TYPE_PROPERTIES = 1_u32
    D2D1_CHANGE_TYPE_CONTEXT = 2_u32
    D2D1_CHANGE_TYPE_GRAPH = 3_u32
    D2D1_CHANGE_TYPE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_PIXEL_OPTIONS : UInt32
    D2D1_PIXEL_OPTIONS_NONE = 0_u32
    D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 1_u32
    D2D1_PIXEL_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_VERTEX_OPTIONS : UInt32
    D2D1_VERTEX_OPTIONS_NONE = 0_u32
    D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR = 1_u32
    D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER = 2_u32
    D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 4_u32
    D2D1_VERTEX_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_VERTEX_USAGE : UInt32
    D2D1_VERTEX_USAGE_STATIC = 0_u32
    D2D1_VERTEX_USAGE_DYNAMIC = 1_u32
    D2D1_VERTEX_USAGE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BLEND_OPERATION : UInt32
    D2D1_BLEND_OPERATION_ADD = 1_u32
    D2D1_BLEND_OPERATION_SUBTRACT = 2_u32
    D2D1_BLEND_OPERATION_REV_SUBTRACT = 3_u32
    D2D1_BLEND_OPERATION_MIN = 4_u32
    D2D1_BLEND_OPERATION_MAX = 5_u32
    D2D1_BLEND_OPERATION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_BLEND : UInt32
    D2D1_BLEND_ZERO = 1_u32
    D2D1_BLEND_ONE = 2_u32
    D2D1_BLEND_SRC_COLOR = 3_u32
    D2D1_BLEND_INV_SRC_COLOR = 4_u32
    D2D1_BLEND_SRC_ALPHA = 5_u32
    D2D1_BLEND_INV_SRC_ALPHA = 6_u32
    D2D1_BLEND_DEST_ALPHA = 7_u32
    D2D1_BLEND_INV_DEST_ALPHA = 8_u32
    D2D1_BLEND_DEST_COLOR = 9_u32
    D2D1_BLEND_INV_DEST_COLOR = 10_u32
    D2D1_BLEND_SRC_ALPHA_SAT = 11_u32
    D2D1_BLEND_BLEND_FACTOR = 14_u32
    D2D1_BLEND_INV_BLEND_FACTOR = 15_u32
    D2D1_BLEND_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CHANNEL_DEPTH : UInt32
    D2D1_CHANNEL_DEPTH_DEFAULT = 0_u32
    D2D1_CHANNEL_DEPTH_1 = 1_u32
    D2D1_CHANNEL_DEPTH_4 = 4_u32
    D2D1_CHANNEL_DEPTH_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_FILTER : UInt32
    D2D1_FILTER_MIN_MAG_MIP_POINT = 0_u32
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1_u32
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4_u32
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5_u32
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16_u32
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17_u32
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20_u32
    D2D1_FILTER_MIN_MAG_MIP_LINEAR = 21_u32
    D2D1_FILTER_ANISOTROPIC = 85_u32
    D2D1_FILTER_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_FEATURE : UInt32
    D2D1_FEATURE_DOUBLES = 0_u32
    D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 1_u32
    D2D1_FEATURE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_YCBCR_PROP : UInt32
    D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0_u32
    D2D1_YCBCR_PROP_TRANSFORM_MATRIX = 1_u32
    D2D1_YCBCR_PROP_INTERPOLATION_MODE = 2_u32
    D2D1_YCBCR_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_YCBCR_CHROMA_SUBSAMPLING : UInt32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = 0_u32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_420 = 1_u32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_422 = 2_u32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_444 = 3_u32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_440 = 4_u32
    D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_YCBCR_INTERPOLATION_MODE : UInt32
    D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_YCBCR_INTERPOLATION_MODE_LINEAR = 1_u32
    D2D1_YCBCR_INTERPOLATION_MODE_CUBIC = 2_u32
    D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC = 4_u32
    D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5_u32
    D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CONTRAST_PROP : UInt32
    D2D1_CONTRAST_PROP_CONTRAST = 0_u32
    D2D1_CONTRAST_PROP_CLAMP_INPUT = 1_u32
    D2D1_CONTRAST_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_RGBTOHUE_PROP : UInt32
    D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0_u32
    D2D1_RGBTOHUE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE : UInt32
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0_u32
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1_u32
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HUETORGB_PROP : UInt32
    D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0_u32
    D2D1_HUETORGB_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HUETORGB_INPUT_COLOR_SPACE : UInt32
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0_u32
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1_u32
    D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CHROMAKEY_PROP : UInt32
    D2D1_CHROMAKEY_PROP_COLOR = 0_u32
    D2D1_CHROMAKEY_PROP_TOLERANCE = 1_u32
    D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 2_u32
    D2D1_CHROMAKEY_PROP_FEATHER = 3_u32
    D2D1_CHROMAKEY_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_EMBOSS_PROP : UInt32
    D2D1_EMBOSS_PROP_HEIGHT = 0_u32
    D2D1_EMBOSS_PROP_DIRECTION = 1_u32
    D2D1_EMBOSS_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_EXPOSURE_PROP : UInt32
    D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0_u32
    D2D1_EXPOSURE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_POSTERIZE_PROP : UInt32
    D2D1_POSTERIZE_PROP_RED_VALUE_COUNT = 0_u32
    D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 1_u32
    D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT = 2_u32
    D2D1_POSTERIZE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SEPIA_PROP : UInt32
    D2D1_SEPIA_PROP_INTENSITY = 0_u32
    D2D1_SEPIA_PROP_ALPHA_MODE = 1_u32
    D2D1_SEPIA_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SHARPEN_PROP : UInt32
    D2D1_SHARPEN_PROP_SHARPNESS = 0_u32
    D2D1_SHARPEN_PROP_THRESHOLD = 1_u32
    D2D1_SHARPEN_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_STRAIGHTEN_PROP : UInt32
    D2D1_STRAIGHTEN_PROP_ANGLE = 0_u32
    D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 1_u32
    D2D1_STRAIGHTEN_PROP_SCALE_MODE = 2_u32
    D2D1_STRAIGHTEN_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_STRAIGHTEN_SCALE_MODE : UInt32
    D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR = 0_u32
    D2D1_STRAIGHTEN_SCALE_MODE_LINEAR = 1_u32
    D2D1_STRAIGHTEN_SCALE_MODE_CUBIC = 2_u32
    D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3_u32
    D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC = 4_u32
    D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TEMPERATUREANDTINT_PROP : UInt32
    D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0_u32
    D2D1_TEMPERATUREANDTINT_PROP_TINT = 1_u32
    D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_VIGNETTE_PROP : UInt32
    D2D1_VIGNETTE_PROP_COLOR = 0_u32
    D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 1_u32
    D2D1_VIGNETTE_PROP_STRENGTH = 2_u32
    D2D1_VIGNETTE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_EDGEDETECTION_PROP : UInt32
    D2D1_EDGEDETECTION_PROP_STRENGTH = 0_u32
    D2D1_EDGEDETECTION_PROP_BLUR_RADIUS = 1_u32
    D2D1_EDGEDETECTION_PROP_MODE = 2_u32
    D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 3_u32
    D2D1_EDGEDETECTION_PROP_ALPHA_MODE = 4_u32
    D2D1_EDGEDETECTION_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_EDGEDETECTION_MODE : UInt32
    D2D1_EDGEDETECTION_MODE_SOBEL = 0_u32
    D2D1_EDGEDETECTION_MODE_PREWITT = 1_u32
    D2D1_EDGEDETECTION_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HIGHLIGHTSANDSHADOWS_PROP : UInt32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS = 0_u32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS = 1_u32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY = 2_u32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA = 3_u32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 4_u32
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA : UInt32
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = 0_u32
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB = 1_u32
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_LOOKUPTABLE3D_PROP : UInt32
    D2D1_LOOKUPTABLE3D_PROP_LUT = 0_u32
    D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = 1_u32
    D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_OPACITY_PROP : UInt32
    D2D1_OPACITY_PROP_OPACITY = 0_u32
    D2D1_OPACITY_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_CROSSFADE_PROP : UInt32
    D2D1_CROSSFADE_PROP_WEIGHT = 0_u32
    D2D1_CROSSFADE_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_TINT_PROP : UInt32
    D2D1_TINT_PROP_COLOR = 0_u32
    D2D1_TINT_PROP_CLAMP_OUTPUT = 1_u32
    D2D1_TINT_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_WHITELEVELADJUSTMENT_PROP : UInt32
    D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL = 0_u32
    D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 1_u32
    D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HDRTONEMAP_PROP : UInt32
    D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE = 0_u32
    D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 1_u32
    D2D1_HDRTONEMAP_PROP_DISPLAY_MODE = 2_u32
    D2D1_HDRTONEMAP_PROP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_HDRTONEMAP_DISPLAY_MODE : UInt32
    D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = 0_u32
    D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = 1_u32
    D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_RENDERING_PRIORITY : UInt32
    D2D1_RENDERING_PRIORITY_NORMAL = 0_u32
    D2D1_RENDERING_PRIORITY_LOW = 1_u32
    D2D1_RENDERING_PRIORITY_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_PAINT_TYPE : UInt32
    D2D1_SVG_PAINT_TYPE_NONE = 0_u32
    D2D1_SVG_PAINT_TYPE_COLOR = 1_u32
    D2D1_SVG_PAINT_TYPE_CURRENT_COLOR = 2_u32
    D2D1_SVG_PAINT_TYPE_URI = 3_u32
    D2D1_SVG_PAINT_TYPE_URI_NONE = 4_u32
    D2D1_SVG_PAINT_TYPE_URI_COLOR = 5_u32
    D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 6_u32
    D2D1_SVG_PAINT_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_LENGTH_UNITS : UInt32
    D2D1_SVG_LENGTH_UNITS_NUMBER = 0_u32
    D2D1_SVG_LENGTH_UNITS_PERCENTAGE = 1_u32
    D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_DISPLAY : UInt32
    D2D1_SVG_DISPLAY_INLINE = 0_u32
    D2D1_SVG_DISPLAY_NONE = 1_u32
    D2D1_SVG_DISPLAY_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_VISIBILITY : UInt32
    D2D1_SVG_VISIBILITY_VISIBLE = 0_u32
    D2D1_SVG_VISIBILITY_HIDDEN = 1_u32
    D2D1_SVG_VISIBILITY_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_OVERFLOW : UInt32
    D2D1_SVG_OVERFLOW_VISIBLE = 0_u32
    D2D1_SVG_OVERFLOW_HIDDEN = 1_u32
    D2D1_SVG_OVERFLOW_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_LINE_CAP : UInt32
    D2D1_SVG_LINE_CAP_BUTT = 0_u32
    D2D1_SVG_LINE_CAP_SQUARE = 1_u32
    D2D1_SVG_LINE_CAP_ROUND = 2_u32
    D2D1_SVG_LINE_CAP_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_LINE_JOIN : UInt32
    D2D1_SVG_LINE_JOIN_BEVEL = 1_u32
    D2D1_SVG_LINE_JOIN_MITER = 3_u32
    D2D1_SVG_LINE_JOIN_ROUND = 2_u32
    D2D1_SVG_LINE_JOIN_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_ASPECT_ALIGN : UInt32
    D2D1_SVG_ASPECT_ALIGN_NONE = 0_u32
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 1_u32
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 2_u32
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 3_u32
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 4_u32
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 5_u32
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 6_u32
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 7_u32
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 8_u32
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 9_u32
    D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_ASPECT_SCALING : UInt32
    D2D1_SVG_ASPECT_SCALING_MEET = 0_u32
    D2D1_SVG_ASPECT_SCALING_SLICE = 1_u32
    D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_PATH_COMMAND : UInt32
    D2D1_SVG_PATH_COMMAND_CLOSE_PATH = 0_u32
    D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE = 1_u32
    D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE = 2_u32
    D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE = 3_u32
    D2D1_SVG_PATH_COMMAND_LINE_RELATIVE = 4_u32
    D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE = 5_u32
    D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE = 6_u32
    D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE = 7_u32
    D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE = 8_u32
    D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE = 9_u32
    D2D1_SVG_PATH_COMMAND_ARC_RELATIVE = 10_u32
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE = 11_u32
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE = 12_u32
    D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE = 13_u32
    D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE = 14_u32
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE = 15_u32
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE = 16_u32
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 17_u32
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 18_u32
    D2D1_SVG_PATH_COMMAND_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_UNIT_TYPE : UInt32
    D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE = 0_u32
    D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 1_u32
    D2D1_SVG_UNIT_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_ATTRIBUTE_STRING_TYPE : UInt32
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = 0_u32
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID = 1_u32
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_SVG_ATTRIBUTE_POD_TYPE : UInt32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT = 0_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR = 1_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE = 2_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY = 3_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW = 4_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP = 5_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN = 6_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY = 7_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX = 8_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE = 9_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE = 10_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 11_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX = 12_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH = 13_u32
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_INK_NIB_SHAPE : UInt32
    D2D1_INK_NIB_SHAPE_ROUND = 0_u32
    D2D1_INK_NIB_SHAPE_SQUARE = 1_u32
    D2D1_INK_NIB_SHAPE_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_ORIENTATION : UInt32
    D2D1_ORIENTATION_DEFAULT = 1_u32
    D2D1_ORIENTATION_FLIP_HORIZONTAL = 2_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = 3_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = 6_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7_u32
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = 8_u32
    D2D1_ORIENTATION_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_IMAGE_SOURCE_LOADING_OPTIONS : UInt32
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = 0_u32
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = 1_u32
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 2_u32
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS : UInt32
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = 0_u32
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 1_u32
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS : UInt32
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = 0_u32
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 1_u32
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_PATCH_EDGE_MODE : UInt32
    D2D1_PATCH_EDGE_MODE_ALIASED = 0_u32
    D2D1_PATCH_EDGE_MODE_ANTIALIASED = 1_u32
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 2_u32
    D2D1_PATCH_EDGE_MODE_FORCE_DWORD = 4294967295_u32
  end
  @[Flags]
  enum D2D1_SPRITE_OPTIONS : UInt32
    D2D1_SPRITE_OPTIONS_NONE = 0_u32
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 1_u32
    D2D1_SPRITE_OPTIONS_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION : UInt32
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = 0_u32
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = 1_u32
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_GAMMA1 : UInt32
    D2D1_GAMMA1_G22 = 0_u32
    D2D1_GAMMA1_G10 = 1_u32
    D2D1_GAMMA1_G2084 = 2_u32
    D2D1_GAMMA1_FORCE_DWORD = 4294967295_u32
  end
  enum D2D1_COLOR_CONTEXT_TYPE : UInt32
    D2D1_COLOR_CONTEXT_TYPE_ICC = 0_u32
    D2D1_COLOR_CONTEXT_TYPE_SIMPLE = 1_u32
    D2D1_COLOR_CONTEXT_TYPE_DXGI = 2_u32
    D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = 4294967295_u32
  end

  @[Extern]
  struct D2D1_BITMAP_PROPERTIES
    property pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
    property dpiX : Float32
    property dpiY : Float32
    def initialize(@pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT, @dpiX : Float32, @dpiY : Float32)
    end
  end

  @[Extern]
  struct D2D1_GRADIENT_STOP
    property position : Float32
    property color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    def initialize(@position : Float32, @color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F)
    end
  end

  @[Extern]
  struct D2D1_BRUSH_PROPERTIES
    property opacity : Float32
    property transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    def initialize(@opacity : Float32, @transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F)
    end
  end

  @[Extern]
  struct D2D1_BITMAP_BRUSH_PROPERTIES
    property extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE
    def initialize(@extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE)
    end
  end

  @[Extern]
  struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
    property startPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property endPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    def initialize(@startPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @endPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F)
    end
  end

  @[Extern]
  struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
    property center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property gradientOriginOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property radiusX : Float32
    property radiusY : Float32
    def initialize(@center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @gradientOriginOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @radiusX : Float32, @radiusY : Float32)
    end
  end

  @[Extern]
  struct D2D1_TRIANGLE
    property point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point3 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    def initialize(@point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point3 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F)
    end
  end

  @[Extern]
  struct D2D1_ARC_SEGMENT
    property point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
    property rotationAngle : Float32
    property sweepDirection : Win32cr::Graphics::Direct2D::D2D1_SWEEP_DIRECTION
    property arcSize : Win32cr::Graphics::Direct2D::D2D1_ARC_SIZE
    def initialize(@point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, @rotationAngle : Float32, @sweepDirection : Win32cr::Graphics::Direct2D::D2D1_SWEEP_DIRECTION, @arcSize : Win32cr::Graphics::Direct2D::D2D1_ARC_SIZE)
    end
  end

  @[Extern]
  struct D2D1_QUADRATIC_BEZIER_SEGMENT
    property point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    def initialize(@point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F)
    end
  end

  @[Extern]
  struct D2D1_ELLIPSE
    property point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property radiusX : Float32
    property radiusY : Float32
    def initialize(@point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @radiusX : Float32, @radiusY : Float32)
    end
  end

  @[Extern]
  struct D2D1_ROUNDED_RECT
    property rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F
    property radiusX : Float32
    property radiusY : Float32
    def initialize(@rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F, @radiusX : Float32, @radiusY : Float32)
    end
  end

  @[Extern]
  struct D2D1_STROKE_STYLE_PROPERTIES
    property startCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property endCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property dashCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property lineJoin : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN
    property miterLimit : Float32
    property dashStyle : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE
    property dashOffset : Float32
    def initialize(@startCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @endCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @dashCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @lineJoin : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN, @miterLimit : Float32, @dashStyle : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE, @dashOffset : Float32)
    end
  end

  @[Extern]
  struct D2D1_LAYER_PARAMETERS
    property contentBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F
    property geometricMask : Void*
    property maskAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
    property maskTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    property opacity : Float32
    property opacityBrush : Void*
    property layerOptions : Win32cr::Graphics::Direct2D::D2D1_LAYER_OPTIONS
    def initialize(@contentBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F, @geometricMask : Void*, @maskAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, @maskTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F, @opacity : Float32, @opacityBrush : Void*, @layerOptions : Win32cr::Graphics::Direct2D::D2D1_LAYER_OPTIONS)
    end
  end

  @[Extern]
  struct D2D1_RENDER_TARGET_PROPERTIES
    property type__ : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_TYPE
    property pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
    property dpiX : Float32
    property dpiY : Float32
    property usage : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_USAGE
    property minLevel : Win32cr::Graphics::Direct2D::D2D1_FEATURE_LEVEL
    def initialize(@type__ : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_TYPE, @pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT, @dpiX : Float32, @dpiY : Float32, @usage : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_USAGE, @minLevel : Win32cr::Graphics::Direct2D::D2D1_FEATURE_LEVEL)
    end
  end

  @[Extern]
  struct D2D1_HWND_RENDER_TARGET_PROPERTIES
    property hwnd : Win32cr::Foundation::HWND
    property pixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
    property presentOptions : Win32cr::Graphics::Direct2D::D2D1_PRESENT_OPTIONS
    def initialize(@hwnd : Win32cr::Foundation::HWND, @pixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, @presentOptions : Win32cr::Graphics::Direct2D::D2D1_PRESENT_OPTIONS)
    end
  end

  @[Extern]
  struct D2D1_DRAWING_STATE_DESCRIPTION
    property antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
    property textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
    property tag1 : UInt64
    property tag2 : UInt64
    property transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    def initialize(@antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, @textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, @tag1 : UInt64, @tag2 : UInt64, @transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F)
    end
  end

  @[Extern]
  struct D2D1_FACTORY_OPTIONS
    property debugLevel : Win32cr::Graphics::Direct2D::D2D1_DEBUG_LEVEL
    def initialize(@debugLevel : Win32cr::Graphics::Direct2D::D2D1_DEBUG_LEVEL)
    end
  end

  @[Extern]
  struct D2D1_BITMAP_PROPERTIES1
    property pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
    property dpiX : Float32
    property dpiY : Float32
    property bitmapOptions : Win32cr::Graphics::Direct2D::D2D1_BITMAP_OPTIONS
    property colorContext : Void*
    def initialize(@pixelFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT, @dpiX : Float32, @dpiY : Float32, @bitmapOptions : Win32cr::Graphics::Direct2D::D2D1_BITMAP_OPTIONS, @colorContext : Void*)
    end
  end

  @[Extern]
  struct D2D1_MAPPED_RECT
    property pitch : UInt32
    property bits : UInt8*
    def initialize(@pitch : UInt32, @bits : UInt8*)
    end
  end

  @[Extern]
  struct D2D1_RENDERING_CONTROLS
    property bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION
    property tileSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
    def initialize(@bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, @tileSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U)
    end
  end

  @[Extern]
  struct D2D1_EFFECT_INPUT_DESCRIPTION
    property effect : Void*
    property inputIndex : UInt32
    property inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F
    def initialize(@effect : Void*, @inputIndex : UInt32, @inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F)
    end
  end

  @[Extern]
  struct D2D1_POINT_DESCRIPTION
    property point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property endSegment : UInt32
    property endFigure : UInt32
    property lengthToEndSegment : Float32
    def initialize(@point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @endSegment : UInt32, @endFigure : UInt32, @lengthToEndSegment : Float32)
    end
  end

  @[Extern]
  struct D2D1_IMAGE_BRUSH_PROPERTIES
    property sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F
    property extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE
    def initialize(@sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F, @extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE)
    end
  end

  @[Extern]
  struct D2D1_BITMAP_BRUSH_PROPERTIES1
    property extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
    property interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE
    def initialize(@extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, @interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE)
    end
  end

  @[Extern]
  struct D2D1_STROKE_STYLE_PROPERTIES1
    property startCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property endCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property dashCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
    property lineJoin : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN
    property miterLimit : Float32
    property dashStyle : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE
    property dashOffset : Float32
    property transformType : Win32cr::Graphics::Direct2D::D2D1_STROKE_TRANSFORM_TYPE
    def initialize(@startCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @endCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @dashCap : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE, @lineJoin : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN, @miterLimit : Float32, @dashStyle : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE, @dashOffset : Float32, @transformType : Win32cr::Graphics::Direct2D::D2D1_STROKE_TRANSFORM_TYPE)
    end
  end

  @[Extern]
  struct D2D1_LAYER_PARAMETERS1
    property contentBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F
    property geometricMask : Void*
    property maskAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
    property maskTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    property opacity : Float32
    property opacityBrush : Void*
    property layerOptions : Win32cr::Graphics::Direct2D::D2D1_LAYER_OPTIONS1
    def initialize(@contentBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F, @geometricMask : Void*, @maskAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, @maskTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F, @opacity : Float32, @opacityBrush : Void*, @layerOptions : Win32cr::Graphics::Direct2D::D2D1_LAYER_OPTIONS1)
    end
  end

  @[Extern]
  struct D2D1_DRAWING_STATE_DESCRIPTION1
    property antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
    property textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
    property tag1 : UInt64
    property tag2 : UInt64
    property transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    property primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
    property unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
    def initialize(@antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, @textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, @tag1 : UInt64, @tag2 : UInt64, @transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F, @primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, @unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE)
    end
  end

  @[Extern]
  struct D2D1_PRINT_CONTROL_PROPERTIES
    property fontSubset : Win32cr::Graphics::Direct2D::D2D1_PRINT_FONT_SUBSET_MODE
    property rasterDPI : Float32
    property colorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE
    def initialize(@fontSubset : Win32cr::Graphics::Direct2D::D2D1_PRINT_FONT_SUBSET_MODE, @rasterDPI : Float32, @colorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE)
    end
  end

  @[Extern]
  struct D2D1_CREATION_PROPERTIES
    property threadingMode : Win32cr::Graphics::Direct2D::D2D1_THREADING_MODE
    property debugLevel : Win32cr::Graphics::Direct2D::D2D1_DEBUG_LEVEL
    property options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS
    def initialize(@threadingMode : Win32cr::Graphics::Direct2D::D2D1_THREADING_MODE, @debugLevel : Win32cr::Graphics::Direct2D::D2D1_DEBUG_LEVEL, @options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS)
    end
  end

  @[Extern]
  struct Matrix4x3F
    property __anonymous_base_d2d1_1helper_l45_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X3_F
    def initialize(@__anonymous_base_d2d1_1helper_l45_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X3_F)
    end
  end

  @[Extern]
  struct Matrix4x4F
    property __anonymous_base_d2d1_1helper_l97_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F
    def initialize(@__anonymous_base_d2d1_1helper_l97_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F)
    end
  end

  @[Extern]
  struct Matrix5x4F
    property __anonymous_base_d2d1_1helper_l472_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_5X4_F
    def initialize(@__anonymous_base_d2d1_1helper_l472_c31 : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_5X4_F)
    end
  end

  @[Extern]
  struct D2D1_PROPERTY_BINDING
    property propertyName : Win32cr::Foundation::PWSTR
    property setFunction : Win32cr::Graphics::Direct2D::PD2D1_PROPERTY_SET_FUNCTION
    property getFunction : Win32cr::Graphics::Direct2D::PD2D1_PROPERTY_GET_FUNCTION
    def initialize(@propertyName : Win32cr::Foundation::PWSTR, @setFunction : Win32cr::Graphics::Direct2D::PD2D1_PROPERTY_SET_FUNCTION, @getFunction : Win32cr::Graphics::Direct2D::PD2D1_PROPERTY_GET_FUNCTION)
    end
  end

  @[Extern]
  struct D2D1_RESOURCE_TEXTURE_PROPERTIES
    property extents : UInt32*
    property dimensions : UInt32
    property bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION
    property channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH
    property filter : Win32cr::Graphics::Direct2D::D2D1_FILTER
    property extendModes : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE*
    def initialize(@extents : UInt32*, @dimensions : UInt32, @bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, @channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, @filter : Win32cr::Graphics::Direct2D::D2D1_FILTER, @extendModes : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE*)
    end
  end

  @[Extern]
  struct D2D1_INPUT_ELEMENT_DESC
    property semanticName : Win32cr::Foundation::PSTR
    property semanticIndex : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property inputSlot : UInt32
    property alignedByteOffset : UInt32
    def initialize(@semanticName : Win32cr::Foundation::PSTR, @semanticIndex : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @inputSlot : UInt32, @alignedByteOffset : UInt32)
    end
  end

  @[Extern]
  struct D2D1_VERTEX_BUFFER_PROPERTIES
    property inputCount : UInt32
    property usage : Win32cr::Graphics::Direct2D::D2D1_VERTEX_USAGE
    property data : UInt8*
    property byteWidth : UInt32
    def initialize(@inputCount : UInt32, @usage : Win32cr::Graphics::Direct2D::D2D1_VERTEX_USAGE, @data : UInt8*, @byteWidth : UInt32)
    end
  end

  @[Extern]
  struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES
    property shaderBufferWithInputSignature : UInt8*
    property shaderBufferSize : UInt32
    property inputElements : Win32cr::Graphics::Direct2D::D2D1_INPUT_ELEMENT_DESC*
    property elementCount : UInt32
    property stride : UInt32
    def initialize(@shaderBufferWithInputSignature : UInt8*, @shaderBufferSize : UInt32, @inputElements : Win32cr::Graphics::Direct2D::D2D1_INPUT_ELEMENT_DESC*, @elementCount : UInt32, @stride : UInt32)
    end
  end

  @[Extern]
  struct D2D1_VERTEX_RANGE
    property startVertex : UInt32
    property vertexCount : UInt32
    def initialize(@startVertex : UInt32, @vertexCount : UInt32)
    end
  end

  @[Extern]
  struct D2D1_BLEND_DESCRIPTION
    property sourceBlend : Win32cr::Graphics::Direct2D::D2D1_BLEND
    property destinationBlend : Win32cr::Graphics::Direct2D::D2D1_BLEND
    property blendOperation : Win32cr::Graphics::Direct2D::D2D1_BLEND_OPERATION
    property sourceBlendAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND
    property destinationBlendAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND
    property blendOperationAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND_OPERATION
    property blendFactor : Float32[4]
    def initialize(@sourceBlend : Win32cr::Graphics::Direct2D::D2D1_BLEND, @destinationBlend : Win32cr::Graphics::Direct2D::D2D1_BLEND, @blendOperation : Win32cr::Graphics::Direct2D::D2D1_BLEND_OPERATION, @sourceBlendAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND, @destinationBlendAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND, @blendOperationAlpha : Win32cr::Graphics::Direct2D::D2D1_BLEND_OPERATION, @blendFactor : Float32[4])
    end
  end

  @[Extern]
  struct D2D1_INPUT_DESCRIPTION
    property filter : Win32cr::Graphics::Direct2D::D2D1_FILTER
    property levelOfDetailCount : UInt32
    def initialize(@filter : Win32cr::Graphics::Direct2D::D2D1_FILTER, @levelOfDetailCount : UInt32)
    end
  end

  @[Extern]
  struct D2D1_FEATURE_DATA_DOUBLES
    property doublePrecisionFloatShaderOps : Win32cr::Foundation::BOOL
    def initialize(@doublePrecisionFloatShaderOps : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    property computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x : Win32cr::Foundation::BOOL
    def initialize(@computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D2D1_SVG_LENGTH
    property value : Float32
    property units : Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH_UNITS
    def initialize(@value : Float32, @units : Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH_UNITS)
    end
  end

  @[Extern]
  struct D2D1_SVG_PRESERVE_ASPECT_RATIO
    property defer : Win32cr::Foundation::BOOL
    property align : Win32cr::Graphics::Direct2D::D2D1_SVG_ASPECT_ALIGN
    property meetOrSlice : Win32cr::Graphics::Direct2D::D2D1_SVG_ASPECT_SCALING
    def initialize(@defer : Win32cr::Foundation::BOOL, @align : Win32cr::Graphics::Direct2D::D2D1_SVG_ASPECT_ALIGN, @meetOrSlice : Win32cr::Graphics::Direct2D::D2D1_SVG_ASPECT_SCALING)
    end
  end

  @[Extern]
  struct D2D1_SVG_VIEWBOX
    property x : Float32
    property y : Float32
    property width : Float32
    property height : Float32
    def initialize(@x : Float32, @y : Float32, @width : Float32, @height : Float32)
    end
  end

  @[Extern]
  struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES
    property orientation : Win32cr::Graphics::Direct2D::D2D1_ORIENTATION
    property scaleX : Float32
    property scaleY : Float32
    property interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE
    property options : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS
    def initialize(@orientation : Win32cr::Graphics::Direct2D::D2D1_ORIENTATION, @scaleX : Float32, @scaleY : Float32, @interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, @options : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS)
    end
  end

  @[Extern]
  struct D2D1_INK_POINT
    property x : Float32
    property y : Float32
    property radius : Float32
    def initialize(@x : Float32, @y : Float32, @radius : Float32)
    end
  end

  @[Extern]
  struct D2D1_INK_BEZIER_SEGMENT
    property point1 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT
    property point2 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT
    property point3 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT
    def initialize(@point1 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT, @point2 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT, @point3 : Win32cr::Graphics::Direct2D::D2D1_INK_POINT)
    end
  end

  @[Extern]
  struct D2D1_INK_STYLE_PROPERTIES
    property nibShape : Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE
    property nibTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F
    def initialize(@nibShape : Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE, @nibTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F)
    end
  end

  @[Extern]
  struct D2D1_GRADIENT_MESH_PATCH
    property point00 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point01 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point02 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point03 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point10 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point12 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point13 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point20 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point21 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point22 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point23 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point30 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point31 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point32 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property point33 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property color00 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    property color03 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    property color30 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    property color33 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    property topEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE
    property leftEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE
    property bottomEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE
    property rightEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE
    def initialize(@point00 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point01 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point02 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point03 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point10 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point12 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point13 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point20 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point21 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point22 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point23 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point30 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point31 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point32 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @point33 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @color00 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F, @color03 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F, @color30 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F, @color33 : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F, @topEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE, @leftEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE, @bottomEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE, @rightEdgeMode : Win32cr::Graphics::Direct2D::D2D1_PATCH_EDGE_MODE)
    end
  end

  @[Extern]
  struct D2D1_SIMPLE_COLOR_PROFILE
    property redPrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property greenPrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property bluePrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property whitePointXZ : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
    property gamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA1
    def initialize(@redPrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @greenPrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @bluePrimary : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @whitePointXZ : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, @gamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA1)
    end
  end

  @[Extern]
  record ID2D1ResourceVtbl,
    query_interface : Proc(ID2D1Resource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Resource*, UInt32),
    release : Proc(ID2D1Resource*, UInt32),
    get_factory : Proc(ID2D1Resource*, Void**, Void)


  @[Extern]
  record ID2D1Resource, lpVtbl : ID2D1ResourceVtbl* do
    GUID = LibC::GUID.new(0x2cd90691_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1Resource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Resource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Resource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Resource*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end

  end

  @[Extern]
  record ID2D1ImageVtbl,
    query_interface : Proc(ID2D1Image*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Image*, UInt32),
    release : Proc(ID2D1Image*, UInt32),
    get_factory : Proc(ID2D1Image*, Void**, Void)


  @[Extern]
  record ID2D1Image, lpVtbl : ID2D1ImageVtbl* do
    GUID = LibC::GUID.new(0x65019f75_u32, 0x8da2_u16, 0x497c_u16, StaticArray[0xb3_u8, 0x2c_u8, 0xdf_u8, 0xa3_u8, 0x4e_u8, 0x48_u8, 0xed_u8, 0xe6_u8])
    def query_interface(this : ID2D1Image*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Image*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Image*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Image*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end

  end

  @[Extern]
  record ID2D1BitmapVtbl,
    query_interface : Proc(ID2D1Bitmap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Bitmap*, UInt32),
    release : Proc(ID2D1Bitmap*, UInt32),
    get_factory : Proc(ID2D1Bitmap*, Void**, Void),
    get_size : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_pixel_format : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    get_dpi : Proc(ID2D1Bitmap*, Float32*, Float32*, Void),
    copy_from_bitmap : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    copy_from_render_target : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    copy_from_memory : Proc(ID2D1Bitmap*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Bitmap, lpVtbl : ID2D1BitmapVtbl* do
    GUID = LibC::GUID.new(0xa2296057_u32, 0xea42_u16, 0x4099_u16, StaticArray[0x98_u8, 0x3b_u8, 0x53_u8, 0x9f_u8, 0xb6_u8, 0x50_u8, 0x54_u8, 0x26_u8])
    def query_interface(this : ID2D1Bitmap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Bitmap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Bitmap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Bitmap*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_size(this : ID2D1Bitmap*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1Bitmap*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_pixel_format(this : ID2D1Bitmap*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def get_dpi(this : ID2D1Bitmap*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def copy_from_bitmap(this : ID2D1Bitmap*, destPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, bitmap : Void*, srcRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_bitmap.call(this, destPoint, bitmap, srcRect)
    end
    def copy_from_render_target(this : ID2D1Bitmap*, destPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, renderTarget : Void*, srcRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_render_target.call(this, destPoint, renderTarget, srcRect)
    end
    def copy_from_memory(this : ID2D1Bitmap*, dstRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, srcData : Void*, pitch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_memory.call(this, dstRect, srcData, pitch)
    end

  end

  @[Extern]
  record ID2D1GradientStopCollectionVtbl,
    query_interface : Proc(ID2D1GradientStopCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GradientStopCollection*, UInt32),
    release : Proc(ID2D1GradientStopCollection*, UInt32),
    get_factory : Proc(ID2D1GradientStopCollection*, Void**, Void),
    get_gradient_stop_count : Proc(ID2D1GradientStopCollection*, UInt32),
    get_gradient_stops : Proc(ID2D1GradientStopCollection*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Void),
    get_color_interpolation_gamma : Proc(ID2D1GradientStopCollection*, Win32cr::Graphics::Direct2D::D2D1_GAMMA),
    get_extend_mode : Proc(ID2D1GradientStopCollection*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE)


  @[Extern]
  record ID2D1GradientStopCollection, lpVtbl : ID2D1GradientStopCollectionVtbl* do
    GUID = LibC::GUID.new(0x2cd906a7_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1GradientStopCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GradientStopCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GradientStopCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GradientStopCollection*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_gradient_stop_count(this : ID2D1GradientStopCollection*) : UInt32
      @lpVtbl.try &.value.get_gradient_stop_count.call(this)
    end
    def get_gradient_stops(this : ID2D1GradientStopCollection*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32) : Void
      @lpVtbl.try &.value.get_gradient_stops.call(this, gradientStops, gradientStopsCount)
    end
    def get_color_interpolation_gamma(this : ID2D1GradientStopCollection*) : Win32cr::Graphics::Direct2D::D2D1_GAMMA
      @lpVtbl.try &.value.get_color_interpolation_gamma.call(this)
    end
    def get_extend_mode(this : ID2D1GradientStopCollection*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode.call(this)
    end

  end

  @[Extern]
  record ID2D1BrushVtbl,
    query_interface : Proc(ID2D1Brush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Brush*, UInt32),
    release : Proc(ID2D1Brush*, UInt32),
    get_factory : Proc(ID2D1Brush*, Void**, Void),
    set_opacity : Proc(ID2D1Brush*, Float32, Void),
    set_transform : Proc(ID2D1Brush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1Brush*, Float32),
    get_transform : Proc(ID2D1Brush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void)


  @[Extern]
  record ID2D1Brush, lpVtbl : ID2D1BrushVtbl* do
    GUID = LibC::GUID.new(0x2cd906a8_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1Brush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Brush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Brush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Brush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1Brush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1Brush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1Brush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1Brush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end

  end

  @[Extern]
  record ID2D1BitmapBrushVtbl,
    query_interface : Proc(ID2D1BitmapBrush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BitmapBrush*, UInt32),
    release : Proc(ID2D1BitmapBrush*, UInt32),
    get_factory : Proc(ID2D1BitmapBrush*, Void**, Void),
    set_opacity : Proc(ID2D1BitmapBrush*, Float32, Void),
    set_transform : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1BitmapBrush*, Float32),
    get_transform : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_extend_mode_x : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_extend_mode_y : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_interpolation_mode : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Void),
    set_bitmap : Proc(ID2D1BitmapBrush*, Void*, Void),
    get_extend_mode_x : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_extend_mode_y : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_interpolation_mode : Proc(ID2D1BitmapBrush*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE),
    get_bitmap : Proc(ID2D1BitmapBrush*, Void**, Void)


  @[Extern]
  record ID2D1BitmapBrush, lpVtbl : ID2D1BitmapBrushVtbl* do
    GUID = LibC::GUID.new(0x2cd906aa_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1BitmapBrush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BitmapBrush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BitmapBrush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1BitmapBrush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1BitmapBrush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1BitmapBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1BitmapBrush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1BitmapBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_extend_mode_x(this : ID2D1BitmapBrush*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_x.call(this, extendModeX)
    end
    def set_extend_mode_y(this : ID2D1BitmapBrush*, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_y.call(this, extendModeY)
    end
    def set_interpolation_mode(this : ID2D1BitmapBrush*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE) : Void
      @lpVtbl.try &.value.set_interpolation_mode.call(this, interpolationMode)
    end
    def set_bitmap(this : ID2D1BitmapBrush*, bitmap : Void*) : Void
      @lpVtbl.try &.value.set_bitmap.call(this, bitmap)
    end
    def get_extend_mode_x(this : ID2D1BitmapBrush*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_x.call(this)
    end
    def get_extend_mode_y(this : ID2D1BitmapBrush*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_y.call(this)
    end
    def get_interpolation_mode(this : ID2D1BitmapBrush*) : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE
      @lpVtbl.try &.value.get_interpolation_mode.call(this)
    end
    def get_bitmap(this : ID2D1BitmapBrush*, bitmap : Void**) : Void
      @lpVtbl.try &.value.get_bitmap.call(this, bitmap)
    end

  end

  @[Extern]
  record ID2D1SolidColorBrushVtbl,
    query_interface : Proc(ID2D1SolidColorBrush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SolidColorBrush*, UInt32),
    release : Proc(ID2D1SolidColorBrush*, UInt32),
    get_factory : Proc(ID2D1SolidColorBrush*, Void**, Void),
    set_opacity : Proc(ID2D1SolidColorBrush*, Float32, Void),
    set_transform : Proc(ID2D1SolidColorBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1SolidColorBrush*, Float32),
    get_transform : Proc(ID2D1SolidColorBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_color : Proc(ID2D1SolidColorBrush*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    get_color : Proc(ID2D1SolidColorBrush*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F)


  @[Extern]
  record ID2D1SolidColorBrush, lpVtbl : ID2D1SolidColorBrushVtbl* do
    GUID = LibC::GUID.new(0x2cd906a9_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1SolidColorBrush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SolidColorBrush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SolidColorBrush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SolidColorBrush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1SolidColorBrush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1SolidColorBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1SolidColorBrush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1SolidColorBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_color(this : ID2D1SolidColorBrush*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.set_color.call(this, color)
    end
    def get_color(this : ID2D1SolidColorBrush*) : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
      @lpVtbl.try &.value.get_color.call(this)
    end

  end

  @[Extern]
  record ID2D1LinearGradientBrushVtbl,
    query_interface : Proc(ID2D1LinearGradientBrush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1LinearGradientBrush*, UInt32),
    release : Proc(ID2D1LinearGradientBrush*, UInt32),
    get_factory : Proc(ID2D1LinearGradientBrush*, Void**, Void),
    set_opacity : Proc(ID2D1LinearGradientBrush*, Float32, Void),
    set_transform : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1LinearGradientBrush*, Float32),
    get_transform : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_start_point : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void),
    set_end_point : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void),
    get_start_point : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F),
    get_end_point : Proc(ID2D1LinearGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F),
    get_gradient_stop_collection : Proc(ID2D1LinearGradientBrush*, Void**, Void)


  @[Extern]
  record ID2D1LinearGradientBrush, lpVtbl : ID2D1LinearGradientBrushVtbl* do
    GUID = LibC::GUID.new(0x2cd906ab_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1LinearGradientBrush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1LinearGradientBrush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1LinearGradientBrush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1LinearGradientBrush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1LinearGradientBrush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1LinearGradientBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1LinearGradientBrush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1LinearGradientBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_start_point(this : ID2D1LinearGradientBrush*, startPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F) : Void
      @lpVtbl.try &.value.set_start_point.call(this, startPoint)
    end
    def set_end_point(this : ID2D1LinearGradientBrush*, endPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F) : Void
      @lpVtbl.try &.value.set_end_point.call(this, endPoint)
    end
    def get_start_point(this : ID2D1LinearGradientBrush*) : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
      @lpVtbl.try &.value.get_start_point.call(this)
    end
    def get_end_point(this : ID2D1LinearGradientBrush*) : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
      @lpVtbl.try &.value.get_end_point.call(this)
    end
    def get_gradient_stop_collection(this : ID2D1LinearGradientBrush*, gradientStopCollection : Void**) : Void
      @lpVtbl.try &.value.get_gradient_stop_collection.call(this, gradientStopCollection)
    end

  end

  @[Extern]
  record ID2D1RadialGradientBrushVtbl,
    query_interface : Proc(ID2D1RadialGradientBrush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1RadialGradientBrush*, UInt32),
    release : Proc(ID2D1RadialGradientBrush*, UInt32),
    get_factory : Proc(ID2D1RadialGradientBrush*, Void**, Void),
    set_opacity : Proc(ID2D1RadialGradientBrush*, Float32, Void),
    set_transform : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1RadialGradientBrush*, Float32),
    get_transform : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_center : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void),
    set_gradient_origin_offset : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void),
    set_radius_x : Proc(ID2D1RadialGradientBrush*, Float32, Void),
    set_radius_y : Proc(ID2D1RadialGradientBrush*, Float32, Void),
    get_center : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F),
    get_gradient_origin_offset : Proc(ID2D1RadialGradientBrush*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F),
    get_radius_x : Proc(ID2D1RadialGradientBrush*, Float32),
    get_radius_y : Proc(ID2D1RadialGradientBrush*, Float32),
    get_gradient_stop_collection : Proc(ID2D1RadialGradientBrush*, Void**, Void)


  @[Extern]
  record ID2D1RadialGradientBrush, lpVtbl : ID2D1RadialGradientBrushVtbl* do
    GUID = LibC::GUID.new(0x2cd906ac_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1RadialGradientBrush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1RadialGradientBrush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1RadialGradientBrush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1RadialGradientBrush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1RadialGradientBrush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1RadialGradientBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1RadialGradientBrush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1RadialGradientBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_center(this : ID2D1RadialGradientBrush*, center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F) : Void
      @lpVtbl.try &.value.set_center.call(this, center)
    end
    def set_gradient_origin_offset(this : ID2D1RadialGradientBrush*, gradientOriginOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F) : Void
      @lpVtbl.try &.value.set_gradient_origin_offset.call(this, gradientOriginOffset)
    end
    def set_radius_x(this : ID2D1RadialGradientBrush*, radiusX : Float32) : Void
      @lpVtbl.try &.value.set_radius_x.call(this, radiusX)
    end
    def set_radius_y(this : ID2D1RadialGradientBrush*, radiusY : Float32) : Void
      @lpVtbl.try &.value.set_radius_y.call(this, radiusY)
    end
    def get_center(this : ID2D1RadialGradientBrush*) : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
      @lpVtbl.try &.value.get_center.call(this)
    end
    def get_gradient_origin_offset(this : ID2D1RadialGradientBrush*) : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F
      @lpVtbl.try &.value.get_gradient_origin_offset.call(this)
    end
    def get_radius_x(this : ID2D1RadialGradientBrush*) : Float32
      @lpVtbl.try &.value.get_radius_x.call(this)
    end
    def get_radius_y(this : ID2D1RadialGradientBrush*) : Float32
      @lpVtbl.try &.value.get_radius_y.call(this)
    end
    def get_gradient_stop_collection(this : ID2D1RadialGradientBrush*, gradientStopCollection : Void**) : Void
      @lpVtbl.try &.value.get_gradient_stop_collection.call(this, gradientStopCollection)
    end

  end

  @[Extern]
  record ID2D1StrokeStyleVtbl,
    query_interface : Proc(ID2D1StrokeStyle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1StrokeStyle*, UInt32),
    release : Proc(ID2D1StrokeStyle*, UInt32),
    get_factory : Proc(ID2D1StrokeStyle*, Void**, Void),
    get_start_cap : Proc(ID2D1StrokeStyle*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_end_cap : Proc(ID2D1StrokeStyle*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_dash_cap : Proc(ID2D1StrokeStyle*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_miter_limit : Proc(ID2D1StrokeStyle*, Float32),
    get_line_join : Proc(ID2D1StrokeStyle*, Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN),
    get_dash_offset : Proc(ID2D1StrokeStyle*, Float32),
    get_dash_style : Proc(ID2D1StrokeStyle*, Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE),
    get_dashes_count : Proc(ID2D1StrokeStyle*, UInt32),
    get_dashes : Proc(ID2D1StrokeStyle*, Float32*, UInt32, Void)


  @[Extern]
  record ID2D1StrokeStyle, lpVtbl : ID2D1StrokeStyleVtbl* do
    GUID = LibC::GUID.new(0x2cd9069d_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1StrokeStyle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1StrokeStyle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1StrokeStyle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1StrokeStyle*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_start_cap(this : ID2D1StrokeStyle*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_start_cap.call(this)
    end
    def get_end_cap(this : ID2D1StrokeStyle*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_end_cap.call(this)
    end
    def get_dash_cap(this : ID2D1StrokeStyle*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_dash_cap.call(this)
    end
    def get_miter_limit(this : ID2D1StrokeStyle*) : Float32
      @lpVtbl.try &.value.get_miter_limit.call(this)
    end
    def get_line_join(this : ID2D1StrokeStyle*) : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN
      @lpVtbl.try &.value.get_line_join.call(this)
    end
    def get_dash_offset(this : ID2D1StrokeStyle*) : Float32
      @lpVtbl.try &.value.get_dash_offset.call(this)
    end
    def get_dash_style(this : ID2D1StrokeStyle*) : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE
      @lpVtbl.try &.value.get_dash_style.call(this)
    end
    def get_dashes_count(this : ID2D1StrokeStyle*) : UInt32
      @lpVtbl.try &.value.get_dashes_count.call(this)
    end
    def get_dashes(this : ID2D1StrokeStyle*, dashes : Float32*, dashesCount : UInt32) : Void
      @lpVtbl.try &.value.get_dashes.call(this, dashes, dashesCount)
    end

  end

  @[Extern]
  record ID2D1GeometryVtbl,
    query_interface : Proc(ID2D1Geometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Geometry*, UInt32),
    release : Proc(ID2D1Geometry*, UInt32),
    get_factory : Proc(ID2D1Geometry*, Void**, Void),
    get_bounds : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1Geometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1Geometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1Geometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1Geometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1Geometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1Geometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Geometry, lpVtbl : ID2D1GeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906a1_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1Geometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Geometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Geometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Geometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1Geometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1Geometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1Geometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1Geometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1Geometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1Geometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1Geometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1Geometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1Geometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1Geometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1Geometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1Geometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1Geometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end

  end

  @[Extern]
  record ID2D1RectangleGeometryVtbl,
    query_interface : Proc(ID2D1RectangleGeometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1RectangleGeometry*, UInt32),
    release : Proc(ID2D1RectangleGeometry*, UInt32),
    get_factory : Proc(ID2D1RectangleGeometry*, Void**, Void),
    get_bounds : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1RectangleGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1RectangleGeometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1RectangleGeometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1RectangleGeometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1RectangleGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_rect : Proc(ID2D1RectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void)


  @[Extern]
  record ID2D1RectangleGeometry, lpVtbl : ID2D1RectangleGeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906a2_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1RectangleGeometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1RectangleGeometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1RectangleGeometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1RectangleGeometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1RectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1RectangleGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1RectangleGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1RectangleGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1RectangleGeometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1RectangleGeometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1RectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1RectangleGeometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1RectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1RectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1RectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1RectangleGeometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1RectangleGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_rect(this : ID2D1RectangleGeometry*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.get_rect.call(this, rect)
    end

  end

  @[Extern]
  record ID2D1RoundedRectangleGeometryVtbl,
    query_interface : Proc(ID2D1RoundedRectangleGeometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1RoundedRectangleGeometry*, UInt32),
    release : Proc(ID2D1RoundedRectangleGeometry*, UInt32),
    get_factory : Proc(ID2D1RoundedRectangleGeometry*, Void**, Void),
    get_bounds : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1RoundedRectangleGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1RoundedRectangleGeometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1RoundedRectangleGeometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1RoundedRectangleGeometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1RoundedRectangleGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_rounded_rect : Proc(ID2D1RoundedRectangleGeometry*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void)


  @[Extern]
  record ID2D1RoundedRectangleGeometry, lpVtbl : ID2D1RoundedRectangleGeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906a3_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1RoundedRectangleGeometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1RoundedRectangleGeometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1RoundedRectangleGeometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1RoundedRectangleGeometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1RoundedRectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1RoundedRectangleGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1RoundedRectangleGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1RoundedRectangleGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1RoundedRectangleGeometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1RoundedRectangleGeometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1RoundedRectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1RoundedRectangleGeometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1RoundedRectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1RoundedRectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1RoundedRectangleGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1RoundedRectangleGeometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1RoundedRectangleGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_rounded_rect(this : ID2D1RoundedRectangleGeometry*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*) : Void
      @lpVtbl.try &.value.get_rounded_rect.call(this, roundedRect)
    end

  end

  @[Extern]
  record ID2D1EllipseGeometryVtbl,
    query_interface : Proc(ID2D1EllipseGeometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1EllipseGeometry*, UInt32),
    release : Proc(ID2D1EllipseGeometry*, UInt32),
    get_factory : Proc(ID2D1EllipseGeometry*, Void**, Void),
    get_bounds : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1EllipseGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1EllipseGeometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1EllipseGeometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1EllipseGeometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1EllipseGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_ellipse : Proc(ID2D1EllipseGeometry*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void)


  @[Extern]
  record ID2D1EllipseGeometry, lpVtbl : ID2D1EllipseGeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906a4_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1EllipseGeometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1EllipseGeometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1EllipseGeometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1EllipseGeometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1EllipseGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1EllipseGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1EllipseGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1EllipseGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1EllipseGeometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1EllipseGeometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1EllipseGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1EllipseGeometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1EllipseGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1EllipseGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1EllipseGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1EllipseGeometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1EllipseGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_ellipse(this : ID2D1EllipseGeometry*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*) : Void
      @lpVtbl.try &.value.get_ellipse.call(this, ellipse)
    end

  end

  @[Extern]
  record ID2D1GeometryGroupVtbl,
    query_interface : Proc(ID2D1GeometryGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GeometryGroup*, UInt32),
    release : Proc(ID2D1GeometryGroup*, UInt32),
    get_factory : Proc(ID2D1GeometryGroup*, Void**, Void),
    get_bounds : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1GeometryGroup*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1GeometryGroup*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1GeometryGroup*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1GeometryGroup*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1GeometryGroup*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_fill_mode : Proc(ID2D1GeometryGroup*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE),
    get_source_geometry_count : Proc(ID2D1GeometryGroup*, UInt32),
    get_source_geometries : Proc(ID2D1GeometryGroup*, Void**, UInt32, Void)


  @[Extern]
  record ID2D1GeometryGroup, lpVtbl : ID2D1GeometryGroupVtbl* do
    GUID = LibC::GUID.new(0x2cd906a6_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1GeometryGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GeometryGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GeometryGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GeometryGroup*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1GeometryGroup*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1GeometryGroup*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1GeometryGroup*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1GeometryGroup*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1GeometryGroup*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1GeometryGroup*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1GeometryGroup*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1GeometryGroup*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1GeometryGroup*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1GeometryGroup*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1GeometryGroup*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1GeometryGroup*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1GeometryGroup*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_fill_mode(this : ID2D1GeometryGroup*) : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE
      @lpVtbl.try &.value.get_fill_mode.call(this)
    end
    def get_source_geometry_count(this : ID2D1GeometryGroup*) : UInt32
      @lpVtbl.try &.value.get_source_geometry_count.call(this)
    end
    def get_source_geometries(this : ID2D1GeometryGroup*, geometries : Void**, geometriesCount : UInt32) : Void
      @lpVtbl.try &.value.get_source_geometries.call(this, geometries, geometriesCount)
    end

  end

  @[Extern]
  record ID2D1TransformedGeometryVtbl,
    query_interface : Proc(ID2D1TransformedGeometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1TransformedGeometry*, UInt32),
    release : Proc(ID2D1TransformedGeometry*, UInt32),
    get_factory : Proc(ID2D1TransformedGeometry*, Void**, Void),
    get_bounds : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1TransformedGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1TransformedGeometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1TransformedGeometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1TransformedGeometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1TransformedGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_source_geometry : Proc(ID2D1TransformedGeometry*, Void**, Void),
    get_transform : Proc(ID2D1TransformedGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void)


  @[Extern]
  record ID2D1TransformedGeometry, lpVtbl : ID2D1TransformedGeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906bb_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1TransformedGeometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1TransformedGeometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1TransformedGeometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1TransformedGeometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1TransformedGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1TransformedGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1TransformedGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1TransformedGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1TransformedGeometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1TransformedGeometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1TransformedGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1TransformedGeometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1TransformedGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1TransformedGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1TransformedGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1TransformedGeometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1TransformedGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_source_geometry(this : ID2D1TransformedGeometry*, sourceGeometry : Void**) : Void
      @lpVtbl.try &.value.get_source_geometry.call(this, sourceGeometry)
    end
    def get_transform(this : ID2D1TransformedGeometry*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end

  end

  @[Extern]
  record ID2D1GeometrySinkVtbl,
    query_interface : Proc(ID2D1GeometrySink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GeometrySink*, UInt32),
    release : Proc(ID2D1GeometrySink*, UInt32),
    set_fill_mode : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void),
    set_segment_flags : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D1_PATH_SEGMENT, Void),
    begin_figure : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D1_FIGURE_BEGIN, Void),
    add_lines : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, UInt32, Void),
    add_beziers : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D1_BEZIER_SEGMENT*, UInt32, Void),
    end_figure : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D1_FIGURE_END, Void),
    close : Proc(ID2D1GeometrySink*, Win32cr::Foundation::HRESULT),
    add_line : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void),
    add_bezier : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::Common::D2D1_BEZIER_SEGMENT*, Void),
    add_quadratic_bezier : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::D2D1_QUADRATIC_BEZIER_SEGMENT*, Void),
    add_quadratic_beziers : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::D2D1_QUADRATIC_BEZIER_SEGMENT*, UInt32, Void),
    add_arc : Proc(ID2D1GeometrySink*, Win32cr::Graphics::Direct2D::D2D1_ARC_SEGMENT*, Void)


  @[Extern]
  record ID2D1GeometrySink, lpVtbl : ID2D1GeometrySinkVtbl* do
    GUID = LibC::GUID.new(0x2cd9069f_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1GeometrySink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GeometrySink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GeometrySink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_fill_mode(this : ID2D1GeometrySink*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE) : Void
      @lpVtbl.try &.value.set_fill_mode.call(this, fillMode)
    end
    def set_segment_flags(this : ID2D1GeometrySink*, vertexFlags : Win32cr::Graphics::Direct2D::Common::D2D1_PATH_SEGMENT) : Void
      @lpVtbl.try &.value.set_segment_flags.call(this, vertexFlags)
    end
    def begin_figure(this : ID2D1GeometrySink*, startPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, figureBegin : Win32cr::Graphics::Direct2D::Common::D2D1_FIGURE_BEGIN) : Void
      @lpVtbl.try &.value.begin_figure.call(this, startPoint, figureBegin)
    end
    def add_lines(this : ID2D1GeometrySink*, points : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pointsCount : UInt32) : Void
      @lpVtbl.try &.value.add_lines.call(this, points, pointsCount)
    end
    def add_beziers(this : ID2D1GeometrySink*, beziers : Win32cr::Graphics::Direct2D::Common::D2D1_BEZIER_SEGMENT*, beziersCount : UInt32) : Void
      @lpVtbl.try &.value.add_beziers.call(this, beziers, beziersCount)
    end
    def end_figure(this : ID2D1GeometrySink*, figureEnd : Win32cr::Graphics::Direct2D::Common::D2D1_FIGURE_END) : Void
      @lpVtbl.try &.value.end_figure.call(this, figureEnd)
    end
    def close(this : ID2D1GeometrySink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def add_line(this : ID2D1GeometrySink*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F) : Void
      @lpVtbl.try &.value.add_line.call(this, point)
    end
    def add_bezier(this : ID2D1GeometrySink*, bezier : Win32cr::Graphics::Direct2D::Common::D2D1_BEZIER_SEGMENT*) : Void
      @lpVtbl.try &.value.add_bezier.call(this, bezier)
    end
    def add_quadratic_bezier(this : ID2D1GeometrySink*, bezier : Win32cr::Graphics::Direct2D::D2D1_QUADRATIC_BEZIER_SEGMENT*) : Void
      @lpVtbl.try &.value.add_quadratic_bezier.call(this, bezier)
    end
    def add_quadratic_beziers(this : ID2D1GeometrySink*, beziers : Win32cr::Graphics::Direct2D::D2D1_QUADRATIC_BEZIER_SEGMENT*, beziersCount : UInt32) : Void
      @lpVtbl.try &.value.add_quadratic_beziers.call(this, beziers, beziersCount)
    end
    def add_arc(this : ID2D1GeometrySink*, arc : Win32cr::Graphics::Direct2D::D2D1_ARC_SEGMENT*) : Void
      @lpVtbl.try &.value.add_arc.call(this, arc)
    end

  end

  @[Extern]
  record ID2D1TessellationSinkVtbl,
    query_interface : Proc(ID2D1TessellationSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1TessellationSink*, UInt32),
    release : Proc(ID2D1TessellationSink*, UInt32),
    add_triangles : Proc(ID2D1TessellationSink*, Win32cr::Graphics::Direct2D::D2D1_TRIANGLE*, UInt32, Void),
    close : Proc(ID2D1TessellationSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1TessellationSink, lpVtbl : ID2D1TessellationSinkVtbl* do
    GUID = LibC::GUID.new(0x2cd906c1_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1TessellationSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1TessellationSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1TessellationSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_triangles(this : ID2D1TessellationSink*, triangles : Win32cr::Graphics::Direct2D::D2D1_TRIANGLE*, trianglesCount : UInt32) : Void
      @lpVtbl.try &.value.add_triangles.call(this, triangles, trianglesCount)
    end
    def close(this : ID2D1TessellationSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ID2D1PathGeometryVtbl,
    query_interface : Proc(ID2D1PathGeometry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1PathGeometry*, UInt32),
    release : Proc(ID2D1PathGeometry*, UInt32),
    get_factory : Proc(ID2D1PathGeometry*, Void**, Void),
    get_bounds : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1PathGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1PathGeometry*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1PathGeometry*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1PathGeometry*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1PathGeometry*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1PathGeometry*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    open : Proc(ID2D1PathGeometry*, Void**, Win32cr::Foundation::HRESULT),
    stream : Proc(ID2D1PathGeometry*, Void*, Win32cr::Foundation::HRESULT),
    get_segment_count : Proc(ID2D1PathGeometry*, UInt32*, Win32cr::Foundation::HRESULT),
    get_figure_count : Proc(ID2D1PathGeometry*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1PathGeometry, lpVtbl : ID2D1PathGeometryVtbl* do
    GUID = LibC::GUID.new(0x2cd906a5_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1PathGeometry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1PathGeometry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1PathGeometry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1PathGeometry*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1PathGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1PathGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1PathGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1PathGeometry*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1PathGeometry*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1PathGeometry*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1PathGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1PathGeometry*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1PathGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1PathGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1PathGeometry*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1PathGeometry*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1PathGeometry*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def open(this : ID2D1PathGeometry*, geometrySink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, geometrySink)
    end
    def stream(this : ID2D1PathGeometry*, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream.call(this, geometrySink)
    end
    def get_segment_count(this : ID2D1PathGeometry*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_count.call(this, count)
    end
    def get_figure_count(this : ID2D1PathGeometry*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_figure_count.call(this, count)
    end

  end

  @[Extern]
  record ID2D1MeshVtbl,
    query_interface : Proc(ID2D1Mesh*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Mesh*, UInt32),
    release : Proc(ID2D1Mesh*, UInt32),
    get_factory : Proc(ID2D1Mesh*, Void**, Void),
    open : Proc(ID2D1Mesh*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Mesh, lpVtbl : ID2D1MeshVtbl* do
    GUID = LibC::GUID.new(0x2cd906c2_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1Mesh*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Mesh*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Mesh*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Mesh*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def open(this : ID2D1Mesh*, tessellationSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, tessellationSink)
    end

  end

  @[Extern]
  record ID2D1LayerVtbl,
    query_interface : Proc(ID2D1Layer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Layer*, UInt32),
    release : Proc(ID2D1Layer*, UInt32),
    get_factory : Proc(ID2D1Layer*, Void**, Void),
    get_size : Proc(ID2D1Layer*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F)


  @[Extern]
  record ID2D1Layer, lpVtbl : ID2D1LayerVtbl* do
    GUID = LibC::GUID.new(0x2cd9069b_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1Layer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Layer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Layer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Layer*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_size(this : ID2D1Layer*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end

  end

  @[Extern]
  record ID2D1DrawingStateBlockVtbl,
    query_interface : Proc(ID2D1DrawingStateBlock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DrawingStateBlock*, UInt32),
    release : Proc(ID2D1DrawingStateBlock*, UInt32),
    get_factory : Proc(ID2D1DrawingStateBlock*, Void**, Void),
    get_description_1 : Proc(ID2D1DrawingStateBlock*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void),
    set_description_1 : Proc(ID2D1DrawingStateBlock*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void),
    set_text_rendering_params : Proc(ID2D1DrawingStateBlock*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DrawingStateBlock*, Void**, Void)


  @[Extern]
  record ID2D1DrawingStateBlock, lpVtbl : ID2D1DrawingStateBlockVtbl* do
    GUID = LibC::GUID.new(0x28506e39_u32, 0xebf6_u16, 0x46a1_u16, StaticArray[0xbb_u8, 0x47_u8, 0xfd_u8, 0x85_u8, 0x56_u8, 0x5a_u8, 0xb9_u8, 0x57_u8])
    def query_interface(this : ID2D1DrawingStateBlock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DrawingStateBlock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DrawingStateBlock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DrawingStateBlock*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_description_1(this : ID2D1DrawingStateBlock*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*) : Void
      @lpVtbl.try &.value.get_description_1.call(this, stateDescription)
    end
    def set_description_1(this : ID2D1DrawingStateBlock*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*) : Void
      @lpVtbl.try &.value.set_description_1.call(this, stateDescription)
    end
    def set_text_rendering_params(this : ID2D1DrawingStateBlock*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DrawingStateBlock*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end

  end

  @[Extern]
  record ID2D1RenderTargetVtbl,
    query_interface : Proc(ID2D1RenderTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1RenderTarget*, UInt32),
    release : Proc(ID2D1RenderTarget*, UInt32),
    get_factory : Proc(ID2D1RenderTarget*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1RenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1RenderTarget*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1RenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1RenderTarget*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1RenderTarget*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1RenderTarget*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1RenderTarget*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1RenderTarget*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1RenderTarget*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1RenderTarget*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1RenderTarget*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1RenderTarget*, Void**, Void),
    set_tags : Proc(ID2D1RenderTarget*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1RenderTarget*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1RenderTarget*, Void),
    flush : Proc(ID2D1RenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1RenderTarget*, Void*, Void),
    restore_drawing_state : Proc(ID2D1RenderTarget*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1RenderTarget*, Void),
    clear : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1RenderTarget*, Void),
    end_draw : Proc(ID2D1RenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1RenderTarget*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1RenderTarget*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1RenderTarget*, UInt32),
    is_supported : Proc(ID2D1RenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID2D1RenderTarget, lpVtbl : ID2D1RenderTargetVtbl* do
    GUID = LibC::GUID.new(0x2cd90694_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1RenderTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1RenderTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1RenderTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1RenderTarget*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1RenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1RenderTarget*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1RenderTarget*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1RenderTarget*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1RenderTarget*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1RenderTarget*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1RenderTarget*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1RenderTarget*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1RenderTarget*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1RenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1RenderTarget*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1RenderTarget*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1RenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1RenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1RenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1RenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1RenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1RenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1RenderTarget*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1RenderTarget*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1RenderTarget*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1RenderTarget*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1RenderTarget*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1RenderTarget*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1RenderTarget*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1RenderTarget*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1RenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1RenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1RenderTarget*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1RenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1RenderTarget*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1RenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1RenderTarget*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1RenderTarget*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1RenderTarget*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1RenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1RenderTarget*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1RenderTarget*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1RenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1RenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1RenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1RenderTarget*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1RenderTarget*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1RenderTarget*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1RenderTarget*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1RenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1RenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1RenderTarget*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1RenderTarget*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1RenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1RenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1RenderTarget*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1RenderTarget*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end

  end

  @[Extern]
  record ID2D1BitmapRenderTargetVtbl,
    query_interface : Proc(ID2D1BitmapRenderTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BitmapRenderTarget*, UInt32),
    release : Proc(ID2D1BitmapRenderTarget*, UInt32),
    get_factory : Proc(ID2D1BitmapRenderTarget*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1BitmapRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1BitmapRenderTarget*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1BitmapRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1BitmapRenderTarget*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1BitmapRenderTarget*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1BitmapRenderTarget*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1BitmapRenderTarget*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1BitmapRenderTarget*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1BitmapRenderTarget*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1BitmapRenderTarget*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1BitmapRenderTarget*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1BitmapRenderTarget*, Void**, Void),
    set_tags : Proc(ID2D1BitmapRenderTarget*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1BitmapRenderTarget*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1BitmapRenderTarget*, Void),
    flush : Proc(ID2D1BitmapRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1BitmapRenderTarget*, Void*, Void),
    restore_drawing_state : Proc(ID2D1BitmapRenderTarget*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1BitmapRenderTarget*, Void),
    clear : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1BitmapRenderTarget*, Void),
    end_draw : Proc(ID2D1BitmapRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1BitmapRenderTarget*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1BitmapRenderTarget*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1BitmapRenderTarget*, UInt32),
    is_supported : Proc(ID2D1BitmapRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    get_bitmap : Proc(ID2D1BitmapRenderTarget*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1BitmapRenderTarget, lpVtbl : ID2D1BitmapRenderTargetVtbl* do
    GUID = LibC::GUID.new(0x2cd90695_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1BitmapRenderTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BitmapRenderTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BitmapRenderTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1BitmapRenderTarget*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1BitmapRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1BitmapRenderTarget*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1BitmapRenderTarget*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1BitmapRenderTarget*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1BitmapRenderTarget*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1BitmapRenderTarget*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1BitmapRenderTarget*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1BitmapRenderTarget*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1BitmapRenderTarget*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1BitmapRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1BitmapRenderTarget*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1BitmapRenderTarget*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1BitmapRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1BitmapRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1BitmapRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1BitmapRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1BitmapRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1BitmapRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1BitmapRenderTarget*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1BitmapRenderTarget*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1BitmapRenderTarget*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1BitmapRenderTarget*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1BitmapRenderTarget*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1BitmapRenderTarget*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1BitmapRenderTarget*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1BitmapRenderTarget*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1BitmapRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1BitmapRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1BitmapRenderTarget*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1BitmapRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1BitmapRenderTarget*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1BitmapRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1BitmapRenderTarget*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1BitmapRenderTarget*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1BitmapRenderTarget*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1BitmapRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1BitmapRenderTarget*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1BitmapRenderTarget*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1BitmapRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1BitmapRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1BitmapRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1BitmapRenderTarget*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1BitmapRenderTarget*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1BitmapRenderTarget*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1BitmapRenderTarget*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1BitmapRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1BitmapRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1BitmapRenderTarget*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1BitmapRenderTarget*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1BitmapRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1BitmapRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1BitmapRenderTarget*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1BitmapRenderTarget*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def get_bitmap(this : ID2D1BitmapRenderTarget*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bitmap.call(this, bitmap)
    end

  end

  @[Extern]
  record ID2D1HwndRenderTargetVtbl,
    query_interface : Proc(ID2D1HwndRenderTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1HwndRenderTarget*, UInt32),
    release : Proc(ID2D1HwndRenderTarget*, UInt32),
    get_factory : Proc(ID2D1HwndRenderTarget*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1HwndRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1HwndRenderTarget*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1HwndRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1HwndRenderTarget*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1HwndRenderTarget*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1HwndRenderTarget*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1HwndRenderTarget*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1HwndRenderTarget*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1HwndRenderTarget*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1HwndRenderTarget*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1HwndRenderTarget*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1HwndRenderTarget*, Void**, Void),
    set_tags : Proc(ID2D1HwndRenderTarget*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1HwndRenderTarget*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1HwndRenderTarget*, Void),
    flush : Proc(ID2D1HwndRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1HwndRenderTarget*, Void*, Void),
    restore_drawing_state : Proc(ID2D1HwndRenderTarget*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1HwndRenderTarget*, Void),
    clear : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1HwndRenderTarget*, Void),
    end_draw : Proc(ID2D1HwndRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1HwndRenderTarget*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1HwndRenderTarget*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1HwndRenderTarget*, UInt32),
    is_supported : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    check_window_state : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_WINDOW_STATE),
    resize : Proc(ID2D1HwndRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Foundation::HRESULT),
    get_hwnd : Proc(ID2D1HwndRenderTarget*, Win32cr::Foundation::HWND)


  @[Extern]
  record ID2D1HwndRenderTarget, lpVtbl : ID2D1HwndRenderTargetVtbl* do
    GUID = LibC::GUID.new(0x2cd90698_u32, 0x12e2_u16, 0x11dc_u16, StaticArray[0x9f_u8, 0xed_u8, 0x0_u8, 0x11_u8, 0x43_u8, 0xa0_u8, 0x55_u8, 0xf9_u8])
    def query_interface(this : ID2D1HwndRenderTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1HwndRenderTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1HwndRenderTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1HwndRenderTarget*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1HwndRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1HwndRenderTarget*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1HwndRenderTarget*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1HwndRenderTarget*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1HwndRenderTarget*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1HwndRenderTarget*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1HwndRenderTarget*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1HwndRenderTarget*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1HwndRenderTarget*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1HwndRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1HwndRenderTarget*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1HwndRenderTarget*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1HwndRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1HwndRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1HwndRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1HwndRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1HwndRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1HwndRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1HwndRenderTarget*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1HwndRenderTarget*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1HwndRenderTarget*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1HwndRenderTarget*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1HwndRenderTarget*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1HwndRenderTarget*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1HwndRenderTarget*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1HwndRenderTarget*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1HwndRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1HwndRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1HwndRenderTarget*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1HwndRenderTarget*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1HwndRenderTarget*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1HwndRenderTarget*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1HwndRenderTarget*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1HwndRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1HwndRenderTarget*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1HwndRenderTarget*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1HwndRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1HwndRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1HwndRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1HwndRenderTarget*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1HwndRenderTarget*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1HwndRenderTarget*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1HwndRenderTarget*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1HwndRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1HwndRenderTarget*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1HwndRenderTarget*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1HwndRenderTarget*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1HwndRenderTarget*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def check_window_state(this : ID2D1HwndRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_WINDOW_STATE
      @lpVtbl.try &.value.check_window_state.call(this)
    end
    def resize(this : ID2D1HwndRenderTarget*, pixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resize.call(this, pixelSize)
    end
    def get_hwnd(this : ID2D1HwndRenderTarget*) : Win32cr::Foundation::HWND
      @lpVtbl.try &.value.get_hwnd.call(this)
    end

  end

  @[Extern]
  record ID2D1GdiInteropRenderTargetVtbl,
    query_interface : Proc(ID2D1GdiInteropRenderTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GdiInteropRenderTarget*, UInt32),
    release : Proc(ID2D1GdiInteropRenderTarget*, UInt32),
    get_dc : Proc(ID2D1GdiInteropRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_DC_INITIALIZE_MODE, Win32cr::Graphics::Gdi::HDC*, Win32cr::Foundation::HRESULT),
    release_dc : Proc(ID2D1GdiInteropRenderTarget*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GdiInteropRenderTarget, lpVtbl : ID2D1GdiInteropRenderTargetVtbl* do
    GUID = LibC::GUID.new(0xe0db51c3_u32, 0x6f77_u16, 0x4bae_u16, StaticArray[0xb3_u8, 0xd5_u8, 0xe4_u8, 0x75_u8, 0x9_u8, 0xb3_u8, 0x58_u8, 0x38_u8])
    def query_interface(this : ID2D1GdiInteropRenderTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GdiInteropRenderTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GdiInteropRenderTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_dc(this : ID2D1GdiInteropRenderTarget*, mode : Win32cr::Graphics::Direct2D::D2D1_DC_INITIALIZE_MODE, hdc : Win32cr::Graphics::Gdi::HDC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dc.call(this, mode, hdc)
    end
    def release_dc(this : ID2D1GdiInteropRenderTarget*, update : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_dc.call(this, update)
    end

  end

  @[Extern]
  record ID2D1DCRenderTargetVtbl,
    query_interface : Proc(ID2D1DCRenderTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DCRenderTarget*, UInt32),
    release : Proc(ID2D1DCRenderTarget*, UInt32),
    get_factory : Proc(ID2D1DCRenderTarget*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DCRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DCRenderTarget*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DCRenderTarget*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DCRenderTarget*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DCRenderTarget*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DCRenderTarget*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DCRenderTarget*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DCRenderTarget*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DCRenderTarget*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DCRenderTarget*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DCRenderTarget*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DCRenderTarget*, Void**, Void),
    set_tags : Proc(ID2D1DCRenderTarget*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DCRenderTarget*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DCRenderTarget*, Void),
    flush : Proc(ID2D1DCRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DCRenderTarget*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DCRenderTarget*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DCRenderTarget*, Void),
    clear : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DCRenderTarget*, Void),
    end_draw : Proc(ID2D1DCRenderTarget*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DCRenderTarget*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DCRenderTarget*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DCRenderTarget*, UInt32),
    is_supported : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    bind_dc : Proc(ID2D1DCRenderTarget*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DCRenderTarget, lpVtbl : ID2D1DCRenderTargetVtbl* do
    GUID = LibC::GUID.new(0x1c51bc64_u32, 0xde61_u16, 0x46fd_u16, StaticArray[0x98_u8, 0x99_u8, 0x63_u8, 0xa5_u8, 0xd8_u8, 0xf0_u8, 0x39_u8, 0x50_u8])
    def query_interface(this : ID2D1DCRenderTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DCRenderTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DCRenderTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DCRenderTarget*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DCRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DCRenderTarget*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DCRenderTarget*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DCRenderTarget*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DCRenderTarget*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DCRenderTarget*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DCRenderTarget*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DCRenderTarget*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DCRenderTarget*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DCRenderTarget*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DCRenderTarget*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DCRenderTarget*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DCRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DCRenderTarget*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DCRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DCRenderTarget*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DCRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DCRenderTarget*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DCRenderTarget*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DCRenderTarget*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DCRenderTarget*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DCRenderTarget*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DCRenderTarget*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DCRenderTarget*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DCRenderTarget*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DCRenderTarget*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DCRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DCRenderTarget*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DCRenderTarget*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DCRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DCRenderTarget*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DCRenderTarget*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DCRenderTarget*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DCRenderTarget*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DCRenderTarget*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DCRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DCRenderTarget*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DCRenderTarget*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DCRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DCRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DCRenderTarget*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DCRenderTarget*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DCRenderTarget*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DCRenderTarget*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DCRenderTarget*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DCRenderTarget*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DCRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DCRenderTarget*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DCRenderTarget*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DCRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DCRenderTarget*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DCRenderTarget*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DCRenderTarget*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def bind_dc(this : ID2D1DCRenderTarget*, hDC : Win32cr::Graphics::Gdi::HDC, pSubRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_dc.call(this, hDC, pSubRect)
    end

  end

  @[Extern]
  record ID2D1FactoryVtbl,
    query_interface : Proc(ID2D1Factory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory*, UInt32),
    release : Proc(ID2D1Factory*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory, lpVtbl : ID2D1FactoryVtbl* do
    GUID = LibC::GUID.new(0x6152247_u32, 0x6f50_u16, 0x465a_u16, StaticArray[0x92_u8, 0x45_u8, 0x11_u8, 0x8b_u8, 0xfd_u8, 0x3b_u8, 0x60_u8, 0x7_u8])
    def query_interface(this : ID2D1Factory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end

  end

  @[Extern]
  record ID2D1GdiMetafileSinkVtbl,
    query_interface : Proc(ID2D1GdiMetafileSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GdiMetafileSink*, UInt32),
    release : Proc(ID2D1GdiMetafileSink*, UInt32),
    process_record_1 : Proc(ID2D1GdiMetafileSink*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GdiMetafileSink, lpVtbl : ID2D1GdiMetafileSinkVtbl* do
    GUID = LibC::GUID.new(0x82237326_u32, 0x8111_u16, 0x4f7c_u16, StaticArray[0xbc_u8, 0xf4_u8, 0xb5_u8, 0xc1_u8, 0x17_u8, 0x55_u8, 0x64_u8, 0xfe_u8])
    def query_interface(this : ID2D1GdiMetafileSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GdiMetafileSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GdiMetafileSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def process_record_1(this : ID2D1GdiMetafileSink*, recordType : UInt32, recordData : Void*, recordDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_record_1.call(this, recordType, recordData, recordDataSize)
    end

  end

  @[Extern]
  record ID2D1GdiMetafileVtbl,
    query_interface : Proc(ID2D1GdiMetafile*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GdiMetafile*, UInt32),
    release : Proc(ID2D1GdiMetafile*, UInt32),
    get_factory : Proc(ID2D1GdiMetafile*, Void**, Void),
    stream : Proc(ID2D1GdiMetafile*, Void*, Win32cr::Foundation::HRESULT),
    get_bounds : Proc(ID2D1GdiMetafile*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GdiMetafile, lpVtbl : ID2D1GdiMetafileVtbl* do
    GUID = LibC::GUID.new(0x2f543dc3_u32, 0xcfc1_u16, 0x4211_u16, StaticArray[0x86_u8, 0x4f_u8, 0xcf_u8, 0xd9_u8, 0x1c_u8, 0x6f_u8, 0x33_u8, 0x95_u8])
    def query_interface(this : ID2D1GdiMetafile*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GdiMetafile*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GdiMetafile*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GdiMetafile*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def stream(this : ID2D1GdiMetafile*, sink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream.call(this, sink)
    end
    def get_bounds(this : ID2D1GdiMetafile*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, bounds)
    end

  end

  @[Extern]
  record ID2D1CommandSinkVtbl,
    query_interface : Proc(ID2D1CommandSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink*, UInt32),
    release : Proc(ID2D1CommandSink*, UInt32),
    begin_draw : Proc(ID2D1CommandSink*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink, lpVtbl : ID2D1CommandSinkVtbl* do
    GUID = LibC::GUID.new(0x54d7898a_u32, 0xa061_u16, 0x40a7_u16, StaticArray[0xbe_u8, 0xc7_u8, 0xe4_u8, 0x65_u8, 0xbc_u8, 0xba_u8, 0x2c_u8, 0x4f_u8])
    def query_interface(this : ID2D1CommandSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end

  end

  @[Extern]
  record ID2D1CommandListVtbl,
    query_interface : Proc(ID2D1CommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandList*, UInt32),
    release : Proc(ID2D1CommandList*, UInt32),
    get_factory : Proc(ID2D1CommandList*, Void**, Void),
    stream : Proc(ID2D1CommandList*, Void*, Win32cr::Foundation::HRESULT),
    close : Proc(ID2D1CommandList*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandList, lpVtbl : ID2D1CommandListVtbl* do
    GUID = LibC::GUID.new(0xb4f34a19_u32, 0x2383_u16, 0x4d76_u16, StaticArray[0x94_u8, 0xf6_u8, 0xec_u8, 0x34_u8, 0x36_u8, 0x57_u8, 0xc3_u8, 0xdc_u8])
    def query_interface(this : ID2D1CommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1CommandList*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def stream(this : ID2D1CommandList*, sink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream.call(this, sink)
    end
    def close(this : ID2D1CommandList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ID2D1PrintControlVtbl,
    query_interface : Proc(ID2D1PrintControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1PrintControl*, UInt32),
    release : Proc(ID2D1PrintControl*, UInt32),
    add_page : Proc(ID2D1PrintControl*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, Void*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    close : Proc(ID2D1PrintControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1PrintControl, lpVtbl : ID2D1PrintControlVtbl* do
    GUID = LibC::GUID.new(0x2c1d867d_u32, 0xc290_u16, 0x41c8_u16, StaticArray[0xae_u8, 0x7e_u8, 0x34_u8, 0xa9_u8, 0x87_u8, 0x2_u8, 0xe9_u8, 0xa5_u8])
    def query_interface(this : ID2D1PrintControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1PrintControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1PrintControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_page(this : ID2D1PrintControl*, commandList : Void*, pageSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, pagePrintTicketStream : Void*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_page.call(this, commandList, pageSize, pagePrintTicketStream, tag1, tag2)
    end
    def close(this : ID2D1PrintControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ID2D1ImageBrushVtbl,
    query_interface : Proc(ID2D1ImageBrush*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ImageBrush*, UInt32),
    release : Proc(ID2D1ImageBrush*, UInt32),
    get_factory : Proc(ID2D1ImageBrush*, Void**, Void),
    set_opacity : Proc(ID2D1ImageBrush*, Float32, Void),
    set_transform : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1ImageBrush*, Float32),
    get_transform : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_image : Proc(ID2D1ImageBrush*, Void*, Void),
    set_extend_mode_x : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_extend_mode_y : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_interpolation_mode : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Void),
    set_source_rectangle : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    get_image : Proc(ID2D1ImageBrush*, Void**, Void),
    get_extend_mode_x : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_extend_mode_y : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_interpolation_mode : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE),
    get_source_rectangle : Proc(ID2D1ImageBrush*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void)


  @[Extern]
  record ID2D1ImageBrush, lpVtbl : ID2D1ImageBrushVtbl* do
    GUID = LibC::GUID.new(0xfe9e984d_u32, 0x3f95_u16, 0x407c_u16, StaticArray[0xb5_u8, 0xdb_u8, 0xcb_u8, 0x94_u8, 0xd4_u8, 0xe8_u8, 0xf8_u8, 0x7c_u8])
    def query_interface(this : ID2D1ImageBrush*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ImageBrush*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ImageBrush*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1ImageBrush*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1ImageBrush*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1ImageBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1ImageBrush*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1ImageBrush*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_image(this : ID2D1ImageBrush*, image : Void*) : Void
      @lpVtbl.try &.value.set_image.call(this, image)
    end
    def set_extend_mode_x(this : ID2D1ImageBrush*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_x.call(this, extendModeX)
    end
    def set_extend_mode_y(this : ID2D1ImageBrush*, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_y.call(this, extendModeY)
    end
    def set_interpolation_mode(this : ID2D1ImageBrush*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE) : Void
      @lpVtbl.try &.value.set_interpolation_mode.call(this, interpolationMode)
    end
    def set_source_rectangle(this : ID2D1ImageBrush*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.set_source_rectangle.call(this, sourceRectangle)
    end
    def get_image(this : ID2D1ImageBrush*, image : Void**) : Void
      @lpVtbl.try &.value.get_image.call(this, image)
    end
    def get_extend_mode_x(this : ID2D1ImageBrush*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_x.call(this)
    end
    def get_extend_mode_y(this : ID2D1ImageBrush*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_y.call(this)
    end
    def get_interpolation_mode(this : ID2D1ImageBrush*) : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE
      @lpVtbl.try &.value.get_interpolation_mode.call(this)
    end
    def get_source_rectangle(this : ID2D1ImageBrush*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.get_source_rectangle.call(this, sourceRectangle)
    end

  end

  @[Extern]
  record ID2D1BitmapBrush1Vtbl,
    query_interface : Proc(ID2D1BitmapBrush1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BitmapBrush1*, UInt32),
    release : Proc(ID2D1BitmapBrush1*, UInt32),
    get_factory : Proc(ID2D1BitmapBrush1*, Void**, Void),
    set_opacity : Proc(ID2D1BitmapBrush1*, Float32, Void),
    set_transform : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_opacity : Proc(ID2D1BitmapBrush1*, Float32),
    get_transform : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_extend_mode_x : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_extend_mode_y : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_interpolation_mode : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Void),
    set_bitmap : Proc(ID2D1BitmapBrush1*, Void*, Void),
    get_extend_mode_x : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_extend_mode_y : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_interpolation_mode : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE),
    get_bitmap : Proc(ID2D1BitmapBrush1*, Void**, Void),
    set_interpolation_mode1 : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Void),
    get_interpolation_mode1 : Proc(ID2D1BitmapBrush1*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE)


  @[Extern]
  record ID2D1BitmapBrush1, lpVtbl : ID2D1BitmapBrush1Vtbl* do
    GUID = LibC::GUID.new(0x41343a53_u32, 0xe41a_u16, 0x49a2_u16, StaticArray[0x91_u8, 0xcd_u8, 0x21_u8, 0x79_u8, 0x3b_u8, 0xbb_u8, 0x62_u8, 0xe5_u8])
    def query_interface(this : ID2D1BitmapBrush1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BitmapBrush1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BitmapBrush1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1BitmapBrush1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_opacity(this : ID2D1BitmapBrush1*, opacity : Float32) : Void
      @lpVtbl.try &.value.set_opacity.call(this, opacity)
    end
    def set_transform(this : ID2D1BitmapBrush1*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_opacity(this : ID2D1BitmapBrush1*) : Float32
      @lpVtbl.try &.value.get_opacity.call(this)
    end
    def get_transform(this : ID2D1BitmapBrush1*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_extend_mode_x(this : ID2D1BitmapBrush1*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_x.call(this, extendModeX)
    end
    def set_extend_mode_y(this : ID2D1BitmapBrush1*, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_y.call(this, extendModeY)
    end
    def set_interpolation_mode(this : ID2D1BitmapBrush1*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE) : Void
      @lpVtbl.try &.value.set_interpolation_mode.call(this, interpolationMode)
    end
    def set_bitmap(this : ID2D1BitmapBrush1*, bitmap : Void*) : Void
      @lpVtbl.try &.value.set_bitmap.call(this, bitmap)
    end
    def get_extend_mode_x(this : ID2D1BitmapBrush1*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_x.call(this)
    end
    def get_extend_mode_y(this : ID2D1BitmapBrush1*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_y.call(this)
    end
    def get_interpolation_mode(this : ID2D1BitmapBrush1*) : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE
      @lpVtbl.try &.value.get_interpolation_mode.call(this)
    end
    def get_bitmap(this : ID2D1BitmapBrush1*, bitmap : Void**) : Void
      @lpVtbl.try &.value.get_bitmap.call(this, bitmap)
    end
    def set_interpolation_mode1(this : ID2D1BitmapBrush1*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE) : Void
      @lpVtbl.try &.value.set_interpolation_mode1.call(this, interpolationMode)
    end
    def get_interpolation_mode1(this : ID2D1BitmapBrush1*) : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE
      @lpVtbl.try &.value.get_interpolation_mode1.call(this)
    end

  end

  @[Extern]
  record ID2D1StrokeStyle1Vtbl,
    query_interface : Proc(ID2D1StrokeStyle1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1StrokeStyle1*, UInt32),
    release : Proc(ID2D1StrokeStyle1*, UInt32),
    get_factory : Proc(ID2D1StrokeStyle1*, Void**, Void),
    get_start_cap : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_end_cap : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_dash_cap : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE),
    get_miter_limit : Proc(ID2D1StrokeStyle1*, Float32),
    get_line_join : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN),
    get_dash_offset : Proc(ID2D1StrokeStyle1*, Float32),
    get_dash_style : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE),
    get_dashes_count : Proc(ID2D1StrokeStyle1*, UInt32),
    get_dashes : Proc(ID2D1StrokeStyle1*, Float32*, UInt32, Void),
    get_stroke_transform_type : Proc(ID2D1StrokeStyle1*, Win32cr::Graphics::Direct2D::D2D1_STROKE_TRANSFORM_TYPE)


  @[Extern]
  record ID2D1StrokeStyle1, lpVtbl : ID2D1StrokeStyle1Vtbl* do
    GUID = LibC::GUID.new(0x10a72a66_u32, 0xe91c_u16, 0x43f4_u16, StaticArray[0x99_u8, 0x3f_u8, 0xdd_u8, 0xf4_u8, 0xb8_u8, 0x2b_u8, 0xb_u8, 0x4a_u8])
    def query_interface(this : ID2D1StrokeStyle1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1StrokeStyle1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1StrokeStyle1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1StrokeStyle1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_start_cap(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_start_cap.call(this)
    end
    def get_end_cap(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_end_cap.call(this)
    end
    def get_dash_cap(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_CAP_STYLE
      @lpVtbl.try &.value.get_dash_cap.call(this)
    end
    def get_miter_limit(this : ID2D1StrokeStyle1*) : Float32
      @lpVtbl.try &.value.get_miter_limit.call(this)
    end
    def get_line_join(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_LINE_JOIN
      @lpVtbl.try &.value.get_line_join.call(this)
    end
    def get_dash_offset(this : ID2D1StrokeStyle1*) : Float32
      @lpVtbl.try &.value.get_dash_offset.call(this)
    end
    def get_dash_style(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_DASH_STYLE
      @lpVtbl.try &.value.get_dash_style.call(this)
    end
    def get_dashes_count(this : ID2D1StrokeStyle1*) : UInt32
      @lpVtbl.try &.value.get_dashes_count.call(this)
    end
    def get_dashes(this : ID2D1StrokeStyle1*, dashes : Float32*, dashesCount : UInt32) : Void
      @lpVtbl.try &.value.get_dashes.call(this, dashes, dashesCount)
    end
    def get_stroke_transform_type(this : ID2D1StrokeStyle1*) : Win32cr::Graphics::Direct2D::D2D1_STROKE_TRANSFORM_TYPE
      @lpVtbl.try &.value.get_stroke_transform_type.call(this)
    end

  end

  @[Extern]
  record ID2D1PathGeometry1Vtbl,
    query_interface : Proc(ID2D1PathGeometry1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1PathGeometry1*, UInt32),
    release : Proc(ID2D1PathGeometry1*, UInt32),
    get_factory : Proc(ID2D1PathGeometry1*, Void**, Void),
    get_bounds : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_widened_bounds : Proc(ID2D1PathGeometry1*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    stroke_contains_point : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    fill_contains_point : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare_with_geometry : Proc(ID2D1PathGeometry1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*, Win32cr::Foundation::HRESULT),
    simplify : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    tessellate : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    combine_with_geometry : Proc(ID2D1PathGeometry1*, Void*, Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    outline : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    compute_area : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_length : Proc(ID2D1PathGeometry1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32*, Win32cr::Foundation::HRESULT),
    compute_point_at_length : Proc(ID2D1PathGeometry1*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    widen : Proc(ID2D1PathGeometry1*, Float32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    open : Proc(ID2D1PathGeometry1*, Void**, Win32cr::Foundation::HRESULT),
    stream : Proc(ID2D1PathGeometry1*, Void*, Win32cr::Foundation::HRESULT),
    get_segment_count : Proc(ID2D1PathGeometry1*, UInt32*, Win32cr::Foundation::HRESULT),
    get_figure_count : Proc(ID2D1PathGeometry1*, UInt32*, Win32cr::Foundation::HRESULT),
    compute_point_and_segment_at_length : Proc(ID2D1PathGeometry1*, Float32, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_POINT_DESCRIPTION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1PathGeometry1, lpVtbl : ID2D1PathGeometry1Vtbl* do
    GUID = LibC::GUID.new(0x62baa2d2_u32, 0xab54_u16, 0x41b7_u16, StaticArray[0xb8_u8, 0x72_u8, 0x78_u8, 0x7e_u8, 0x1_u8, 0x6_u8, 0xa4_u8, 0x21_u8])
    def query_interface(this : ID2D1PathGeometry1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1PathGeometry1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1PathGeometry1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1PathGeometry1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_bounds(this : ID2D1PathGeometry1*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, worldTransform, bounds)
    end
    def get_widened_bounds(this : ID2D1PathGeometry1*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_widened_bounds.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds)
    end
    def stroke_contains_point(this : ID2D1PathGeometry1*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stroke_contains_point.call(this, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains)
    end
    def fill_contains_point(this : ID2D1PathGeometry1*, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, contains : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_contains_point.call(this, point, worldTransform, flatteningTolerance, contains)
    end
    def compare_with_geometry(this : ID2D1PathGeometry1*, inputGeometry : Void*, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, relation : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_RELATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_with_geometry.call(this, inputGeometry, inputGeometryTransform, flatteningTolerance, relation)
    end
    def simplify(this : ID2D1PathGeometry1*, simplificationOption : Win32cr::Graphics::Direct2D::D2D1_GEOMETRY_SIMPLIFICATION_OPTION, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.simplify.call(this, simplificationOption, worldTransform, flatteningTolerance, geometrySink)
    end
    def tessellate(this : ID2D1PathGeometry1*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, tessellationSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tessellate.call(this, worldTransform, flatteningTolerance, tessellationSink)
    end
    def combine_with_geometry(this : ID2D1PathGeometry1*, inputGeometry : Void*, combineMode : Win32cr::Graphics::Direct2D::D2D1_COMBINE_MODE, inputGeometryTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.combine_with_geometry.call(this, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink)
    end
    def outline(this : ID2D1PathGeometry1*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.outline.call(this, worldTransform, flatteningTolerance, geometrySink)
    end
    def compute_area(this : ID2D1PathGeometry1*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, area : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_area.call(this, worldTransform, flatteningTolerance, area)
    end
    def compute_length(this : ID2D1PathGeometry1*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, length : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_length.call(this, worldTransform, flatteningTolerance, length)
    end
    def compute_point_at_length(this : ID2D1PathGeometry1*, length : Float32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, point : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, unitTangentVector : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_at_length.call(this, length, worldTransform, flatteningTolerance, point, unitTangentVector)
    end
    def widen(this : ID2D1PathGeometry1*, strokeWidth : Float32, strokeStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.widen.call(this, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def open(this : ID2D1PathGeometry1*, geometrySink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, geometrySink)
    end
    def stream(this : ID2D1PathGeometry1*, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream.call(this, geometrySink)
    end
    def get_segment_count(this : ID2D1PathGeometry1*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_count.call(this, count)
    end
    def get_figure_count(this : ID2D1PathGeometry1*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_figure_count.call(this, count)
    end
    def compute_point_and_segment_at_length(this : ID2D1PathGeometry1*, length : Float32, startSegment : UInt32, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, pointDescription : Win32cr::Graphics::Direct2D::D2D1_POINT_DESCRIPTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_point_and_segment_at_length.call(this, length, startSegment, worldTransform, flatteningTolerance, pointDescription)
    end

  end

  @[Extern]
  record ID2D1PropertiesVtbl,
    query_interface : Proc(ID2D1Properties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Properties*, UInt32),
    release : Proc(ID2D1Properties*, UInt32),
    get_property_count : Proc(ID2D1Properties*, UInt32),
    get_property_name : Proc(ID2D1Properties*, UInt32, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_property_name_length : Proc(ID2D1Properties*, UInt32, UInt32),
    get_type : Proc(ID2D1Properties*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE),
    get_property_index : Proc(ID2D1Properties*, Win32cr::Foundation::PWSTR, UInt32),
    set_value_by_name : Proc(ID2D1Properties*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ID2D1Properties*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value_by_name : Proc(ID2D1Properties*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value : Proc(ID2D1Properties*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value_size : Proc(ID2D1Properties*, UInt32, UInt32),
    get_sub_properties : Proc(ID2D1Properties*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Properties, lpVtbl : ID2D1PropertiesVtbl* do
    GUID = LibC::GUID.new(0x483473d7_u32, 0xcd46_u16, 0x4f9d_u16, StaticArray[0x9d_u8, 0x3a_u8, 0x31_u8, 0x12_u8, 0xaa_u8, 0x80_u8, 0x15_u8, 0x9d_u8])
    def query_interface(this : ID2D1Properties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Properties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Properties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property_count(this : ID2D1Properties*) : UInt32
      @lpVtbl.try &.value.get_property_count.call(this)
    end
    def get_property_name(this : ID2D1Properties*, index : UInt32, name : UInt16*, nameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_name.call(this, index, name, nameCount)
    end
    def get_property_name_length(this : ID2D1Properties*, index : UInt32) : UInt32
      @lpVtbl.try &.value.get_property_name_length.call(this, index)
    end
    def get_type(this : ID2D1Properties*, index : UInt32) : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE
      @lpVtbl.try &.value.get_type.call(this, index)
    end
    def get_property_index(this : ID2D1Properties*, name : Win32cr::Foundation::PWSTR) : UInt32
      @lpVtbl.try &.value.get_property_index.call(this, name)
    end
    def set_value_by_name(this : ID2D1Properties*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_by_name.call(this, name, type__, data, dataSize)
    end
    def set_value(this : ID2D1Properties*, index : UInt32, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, type__, data, dataSize)
    end
    def get_value_by_name(this : ID2D1Properties*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_by_name.call(this, name, type__, data, dataSize)
    end
    def get_value(this : ID2D1Properties*, index : UInt32, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, type__, data, dataSize)
    end
    def get_value_size(this : ID2D1Properties*, index : UInt32) : UInt32
      @lpVtbl.try &.value.get_value_size.call(this, index)
    end
    def get_sub_properties(this : ID2D1Properties*, index : UInt32, subProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_properties.call(this, index, subProperties)
    end

  end

  @[Extern]
  record ID2D1EffectVtbl,
    query_interface : Proc(ID2D1Effect*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Effect*, UInt32),
    release : Proc(ID2D1Effect*, UInt32),
    get_property_count : Proc(ID2D1Effect*, UInt32),
    get_property_name : Proc(ID2D1Effect*, UInt32, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_property_name_length : Proc(ID2D1Effect*, UInt32, UInt32),
    get_type : Proc(ID2D1Effect*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE),
    get_property_index : Proc(ID2D1Effect*, Win32cr::Foundation::PWSTR, UInt32),
    set_value_by_name : Proc(ID2D1Effect*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_value : Proc(ID2D1Effect*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value_by_name : Proc(ID2D1Effect*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value : Proc(ID2D1Effect*, UInt32, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_value_size : Proc(ID2D1Effect*, UInt32, UInt32),
    get_sub_properties : Proc(ID2D1Effect*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_input : Proc(ID2D1Effect*, UInt32, Void*, Win32cr::Foundation::BOOL, Void),
    set_input_count : Proc(ID2D1Effect*, UInt32, Win32cr::Foundation::HRESULT),
    get_input : Proc(ID2D1Effect*, UInt32, Void**, Void),
    get_input_count : Proc(ID2D1Effect*, UInt32),
    get_output : Proc(ID2D1Effect*, Void**, Void)


  @[Extern]
  record ID2D1Effect, lpVtbl : ID2D1EffectVtbl* do
    GUID = LibC::GUID.new(0x28211a43_u32, 0x7d89_u16, 0x476f_u16, StaticArray[0x81_u8, 0x81_u8, 0x2d_u8, 0x61_u8, 0x59_u8, 0xb2_u8, 0x20_u8, 0xad_u8])
    def query_interface(this : ID2D1Effect*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Effect*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Effect*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_property_count(this : ID2D1Effect*) : UInt32
      @lpVtbl.try &.value.get_property_count.call(this)
    end
    def get_property_name(this : ID2D1Effect*, index : UInt32, name : UInt16*, nameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property_name.call(this, index, name, nameCount)
    end
    def get_property_name_length(this : ID2D1Effect*, index : UInt32) : UInt32
      @lpVtbl.try &.value.get_property_name_length.call(this, index)
    end
    def get_type(this : ID2D1Effect*, index : UInt32) : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE
      @lpVtbl.try &.value.get_type.call(this, index)
    end
    def get_property_index(this : ID2D1Effect*, name : Win32cr::Foundation::PWSTR) : UInt32
      @lpVtbl.try &.value.get_property_index.call(this, name)
    end
    def set_value_by_name(this : ID2D1Effect*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_by_name.call(this, name, type__, data, dataSize)
    end
    def set_value(this : ID2D1Effect*, index : UInt32, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, index, type__, data, dataSize)
    end
    def get_value_by_name(this : ID2D1Effect*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_by_name.call(this, name, type__, data, dataSize)
    end
    def get_value(this : ID2D1Effect*, index : UInt32, type__ : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_TYPE, data : UInt8*, dataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, index, type__, data, dataSize)
    end
    def get_value_size(this : ID2D1Effect*, index : UInt32) : UInt32
      @lpVtbl.try &.value.get_value_size.call(this, index)
    end
    def get_sub_properties(this : ID2D1Effect*, index : UInt32, subProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_properties.call(this, index, subProperties)
    end
    def set_input(this : ID2D1Effect*, index : UInt32, input : Void*, invalidate : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_input.call(this, index, input, invalidate)
    end
    def set_input_count(this : ID2D1Effect*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_count.call(this, inputCount)
    end
    def get_input(this : ID2D1Effect*, index : UInt32, input : Void**) : Void
      @lpVtbl.try &.value.get_input.call(this, index, input)
    end
    def get_input_count(this : ID2D1Effect*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def get_output(this : ID2D1Effect*, outputImage : Void**) : Void
      @lpVtbl.try &.value.get_output.call(this, outputImage)
    end

  end

  @[Extern]
  record ID2D1Bitmap1Vtbl,
    query_interface : Proc(ID2D1Bitmap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Bitmap1*, UInt32),
    release : Proc(ID2D1Bitmap1*, UInt32),
    get_factory : Proc(ID2D1Bitmap1*, Void**, Void),
    get_size : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_pixel_format : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    get_dpi : Proc(ID2D1Bitmap1*, Float32*, Float32*, Void),
    copy_from_bitmap : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    copy_from_render_target : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    copy_from_memory : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_color_context : Proc(ID2D1Bitmap1*, Void**, Void),
    get_options : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_OPTIONS),
    get_surface : Proc(ID2D1Bitmap1*, Void**, Win32cr::Foundation::HRESULT),
    map : Proc(ID2D1Bitmap1*, Win32cr::Graphics::Direct2D::D2D1_MAP_OPTIONS, Win32cr::Graphics::Direct2D::D2D1_MAPPED_RECT*, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID2D1Bitmap1*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Bitmap1, lpVtbl : ID2D1Bitmap1Vtbl* do
    GUID = LibC::GUID.new(0xa898a84c_u32, 0x3873_u16, 0x4588_u16, StaticArray[0xb0_u8, 0x8b_u8, 0xeb_u8, 0xbf_u8, 0x97_u8, 0x8d_u8, 0xf0_u8, 0x41_u8])
    def query_interface(this : ID2D1Bitmap1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Bitmap1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Bitmap1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Bitmap1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_size(this : ID2D1Bitmap1*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1Bitmap1*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_pixel_format(this : ID2D1Bitmap1*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def get_dpi(this : ID2D1Bitmap1*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def copy_from_bitmap(this : ID2D1Bitmap1*, destPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, bitmap : Void*, srcRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_bitmap.call(this, destPoint, bitmap, srcRect)
    end
    def copy_from_render_target(this : ID2D1Bitmap1*, destPoint : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U*, renderTarget : Void*, srcRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_render_target.call(this, destPoint, renderTarget, srcRect)
    end
    def copy_from_memory(this : ID2D1Bitmap1*, dstRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, srcData : Void*, pitch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_from_memory.call(this, dstRect, srcData, pitch)
    end
    def get_color_context(this : ID2D1Bitmap1*, colorContext : Void**) : Void
      @lpVtbl.try &.value.get_color_context.call(this, colorContext)
    end
    def get_options(this : ID2D1Bitmap1*) : Win32cr::Graphics::Direct2D::D2D1_BITMAP_OPTIONS
      @lpVtbl.try &.value.get_options.call(this)
    end
    def get_surface(this : ID2D1Bitmap1*, dxgiSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, dxgiSurface)
    end
    def map(this : ID2D1Bitmap1*, options : Win32cr::Graphics::Direct2D::D2D1_MAP_OPTIONS, mappedRect : Win32cr::Graphics::Direct2D::D2D1_MAPPED_RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, options, mappedRect)
    end
    def unmap(this : ID2D1Bitmap1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmap.call(this)
    end

  end

  @[Extern]
  record ID2D1ColorContextVtbl,
    query_interface : Proc(ID2D1ColorContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ColorContext*, UInt32),
    release : Proc(ID2D1ColorContext*, UInt32),
    get_factory : Proc(ID2D1ColorContext*, Void**, Void),
    get_color_space : Proc(ID2D1ColorContext*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE),
    get_profile_size : Proc(ID2D1ColorContext*, UInt32),
    get_profile : Proc(ID2D1ColorContext*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ColorContext, lpVtbl : ID2D1ColorContextVtbl* do
    GUID = LibC::GUID.new(0x1c4820bb_u32, 0x5771_u16, 0x4518_u16, StaticArray[0xa5_u8, 0x81_u8, 0x2f_u8, 0xe4_u8, 0xdd_u8, 0xe_u8, 0xc6_u8, 0x57_u8])
    def query_interface(this : ID2D1ColorContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ColorContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ColorContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1ColorContext*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_color_space(this : ID2D1ColorContext*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE
      @lpVtbl.try &.value.get_color_space.call(this)
    end
    def get_profile_size(this : ID2D1ColorContext*) : UInt32
      @lpVtbl.try &.value.get_profile_size.call(this)
    end
    def get_profile(this : ID2D1ColorContext*, profile : UInt8*, profileSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_profile.call(this, profile, profileSize)
    end

  end

  @[Extern]
  record ID2D1GradientStopCollection1Vtbl,
    query_interface : Proc(ID2D1GradientStopCollection1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GradientStopCollection1*, UInt32),
    release : Proc(ID2D1GradientStopCollection1*, UInt32),
    get_factory : Proc(ID2D1GradientStopCollection1*, Void**, Void),
    get_gradient_stop_count : Proc(ID2D1GradientStopCollection1*, UInt32),
    get_gradient_stops : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Void),
    get_color_interpolation_gamma : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_GAMMA),
    get_extend_mode : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_gradient_stops1 : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Void),
    get_pre_interpolation_space : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE),
    get_post_interpolation_space : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE),
    get_buffer_precision : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION),
    get_color_interpolation_mode : Proc(ID2D1GradientStopCollection1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE)


  @[Extern]
  record ID2D1GradientStopCollection1, lpVtbl : ID2D1GradientStopCollection1Vtbl* do
    GUID = LibC::GUID.new(0xae1572f4_u32, 0x5dd0_u16, 0x4777_u16, StaticArray[0x99_u8, 0x8b_u8, 0x92_u8, 0x79_u8, 0x47_u8, 0x2a_u8, 0xe6_u8, 0x3b_u8])
    def query_interface(this : ID2D1GradientStopCollection1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GradientStopCollection1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GradientStopCollection1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GradientStopCollection1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_gradient_stop_count(this : ID2D1GradientStopCollection1*) : UInt32
      @lpVtbl.try &.value.get_gradient_stop_count.call(this)
    end
    def get_gradient_stops(this : ID2D1GradientStopCollection1*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32) : Void
      @lpVtbl.try &.value.get_gradient_stops.call(this, gradientStops, gradientStopsCount)
    end
    def get_color_interpolation_gamma(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_GAMMA
      @lpVtbl.try &.value.get_color_interpolation_gamma.call(this)
    end
    def get_extend_mode(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode.call(this)
    end
    def get_gradient_stops1(this : ID2D1GradientStopCollection1*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32) : Void
      @lpVtbl.try &.value.get_gradient_stops1.call(this, gradientStops, gradientStopsCount)
    end
    def get_pre_interpolation_space(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE
      @lpVtbl.try &.value.get_pre_interpolation_space.call(this)
    end
    def get_post_interpolation_space(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE
      @lpVtbl.try &.value.get_post_interpolation_space.call(this)
    end
    def get_buffer_precision(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION
      @lpVtbl.try &.value.get_buffer_precision.call(this)
    end
    def get_color_interpolation_mode(this : ID2D1GradientStopCollection1*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE
      @lpVtbl.try &.value.get_color_interpolation_mode.call(this)
    end

  end

  @[Extern]
  record ID2D1DrawingStateBlock1Vtbl,
    query_interface : Proc(ID2D1DrawingStateBlock1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DrawingStateBlock1*, UInt32),
    release : Proc(ID2D1DrawingStateBlock1*, UInt32),
    get_factory : Proc(ID2D1DrawingStateBlock1*, Void**, Void),
    get_description_1 : Proc(ID2D1DrawingStateBlock1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void),
    set_description_1 : Proc(ID2D1DrawingStateBlock1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void),
    set_text_rendering_params : Proc(ID2D1DrawingStateBlock1*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DrawingStateBlock1*, Void**, Void),
    get_description_2 : Proc(ID2D1DrawingStateBlock1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void),
    set_description_2 : Proc(ID2D1DrawingStateBlock1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void)


  @[Extern]
  record ID2D1DrawingStateBlock1, lpVtbl : ID2D1DrawingStateBlock1Vtbl* do
    GUID = LibC::GUID.new(0x689f1f85_u32, 0xc72e_u16, 0x4e33_u16, StaticArray[0x8f_u8, 0x19_u8, 0x85_u8, 0x75_u8, 0x4e_u8, 0xfd_u8, 0x5a_u8, 0xce_u8])
    def query_interface(this : ID2D1DrawingStateBlock1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DrawingStateBlock1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DrawingStateBlock1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DrawingStateBlock1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_description_1(this : ID2D1DrawingStateBlock1*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*) : Void
      @lpVtbl.try &.value.get_description_1.call(this, stateDescription)
    end
    def set_description_1(this : ID2D1DrawingStateBlock1*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*) : Void
      @lpVtbl.try &.value.set_description_1.call(this, stateDescription)
    end
    def set_text_rendering_params(this : ID2D1DrawingStateBlock1*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DrawingStateBlock1*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def get_description_2(this : ID2D1DrawingStateBlock1*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*) : Void
      @lpVtbl.try &.value.get_description_2.call(this, stateDescription)
    end
    def set_description_2(this : ID2D1DrawingStateBlock1*, stateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*) : Void
      @lpVtbl.try &.value.set_description_2.call(this, stateDescription)
    end

  end

  @[Extern]
  record ID2D1DeviceContextVtbl,
    query_interface : Proc(ID2D1DeviceContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext*, UInt32),
    release : Proc(ID2D1DeviceContext*, UInt32),
    get_factory : Proc(ID2D1DeviceContext*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext*, Void),
    flush : Proc(ID2D1DeviceContext*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext*, Void),
    clear : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext*, Void),
    end_draw : Proc(ID2D1DeviceContext*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext*, UInt32),
    is_supported : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void)


  @[Extern]
  record ID2D1DeviceContext, lpVtbl : ID2D1DeviceContextVtbl* do
    GUID = LibC::GUID.new(0xe8f7fe7a_u32, 0x191c_u16, 0x466d_u16, StaticArray[0xad_u8, 0x95_u8, 0x97_u8, 0x56_u8, 0x78_u8, 0xbd_u8, 0xa9_u8, 0x98_u8])
    def query_interface(this : ID2D1DeviceContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end

  end

  @[Extern]
  record ID2D1DeviceVtbl,
    query_interface : Proc(ID2D1Device*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device*, UInt32),
    release : Proc(ID2D1Device*, UInt32),
    get_factory : Proc(ID2D1Device*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device*, UInt64),
    clear_resources : Proc(ID2D1Device*, UInt32, Void)


  @[Extern]
  record ID2D1Device, lpVtbl : ID2D1DeviceVtbl* do
    GUID = LibC::GUID.new(0x47dd575d_u32, 0xac05_u16, 0x4cdd_u16, StaticArray[0x80_u8, 0x49_u8, 0x9b_u8, 0x2_u8, 0xcd_u8, 0x16_u8, 0xf4_u8, 0x4c_u8])
    def query_interface(this : ID2D1Device*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end

  end

  @[Extern]
  record ID2D1Factory1Vtbl,
    query_interface : Proc(ID2D1Factory1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory1*, UInt32),
    release : Proc(ID2D1Factory1*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory1*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory1*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory1*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory1*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory1*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory1*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory1*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory1*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory1*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory1*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory1*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory1, lpVtbl : ID2D1Factory1Vtbl* do
    GUID = LibC::GUID.new(0xbb12d362_u32, 0xdaee_u16, 0x4b9a_u16, StaticArray[0xaa_u8, 0x1d_u8, 0x14_u8, 0xba_u8, 0x40_u8, 0x1c_u8, 0xfa_u8, 0x1f_u8])
    def query_interface(this : ID2D1Factory1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory1*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory1*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory1*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory1*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory1*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory1*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory1*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory1*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory1*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory1*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory1*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory1*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory1*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory1*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory1*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory1*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory1*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory1*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory1*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory1*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory1*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory1*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory1*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end

  end

  @[Extern]
  record ID2D1MultithreadVtbl,
    query_interface : Proc(ID2D1Multithread*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Multithread*, UInt32),
    release : Proc(ID2D1Multithread*, UInt32),
    get_multithread_protected : Proc(ID2D1Multithread*, Win32cr::Foundation::BOOL),
    enter : Proc(ID2D1Multithread*, Void),
    leave : Proc(ID2D1Multithread*, Void)


  @[Extern]
  record ID2D1Multithread, lpVtbl : ID2D1MultithreadVtbl* do
    GUID = LibC::GUID.new(0x31e6e7bc_u32, 0xe0ff_u16, 0x4d46_u16, StaticArray[0x8c_u8, 0x64_u8, 0xa0_u8, 0xa8_u8, 0xc4_u8, 0x1c_u8, 0x15_u8, 0xd3_u8])
    def query_interface(this : ID2D1Multithread*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Multithread*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Multithread*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multithread_protected(this : ID2D1Multithread*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_multithread_protected.call(this)
    end
    def enter(this : ID2D1Multithread*) : Void
      @lpVtbl.try &.value.enter.call(this)
    end
    def leave(this : ID2D1Multithread*) : Void
      @lpVtbl.try &.value.leave.call(this)
    end

  end

  @[Extern]
  record ID2D1VertexBufferVtbl,
    query_interface : Proc(ID2D1VertexBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1VertexBuffer*, UInt32),
    release : Proc(ID2D1VertexBuffer*, UInt32),
    map : Proc(ID2D1VertexBuffer*, UInt8**, UInt32, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID2D1VertexBuffer*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1VertexBuffer, lpVtbl : ID2D1VertexBufferVtbl* do
    GUID = LibC::GUID.new(0x9b8b1336_u32, 0xa5_u16, 0x4668_u16, StaticArray[0x92_u8, 0xb7_u8, 0xce_u8, 0xd5_u8, 0xd8_u8, 0xbf_u8, 0x9b_u8, 0x7b_u8])
    def query_interface(this : ID2D1VertexBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1VertexBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1VertexBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def map(this : ID2D1VertexBuffer*, data : UInt8**, bufferSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, data, bufferSize)
    end
    def unmap(this : ID2D1VertexBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmap.call(this)
    end

  end

  @[Extern]
  record ID2D1ResourceTextureVtbl,
    query_interface : Proc(ID2D1ResourceTexture*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ResourceTexture*, UInt32),
    release : Proc(ID2D1ResourceTexture*, UInt32),
    update : Proc(ID2D1ResourceTexture*, UInt32*, UInt32*, UInt32*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ResourceTexture, lpVtbl : ID2D1ResourceTextureVtbl* do
    GUID = LibC::GUID.new(0x688d15c3_u32, 0x2b0_u16, 0x438d_u16, StaticArray[0xb1_u8, 0x3a_u8, 0xd1_u8, 0xb4_u8, 0x4c_u8, 0x32_u8, 0xc3_u8, 0x9a_u8])
    def query_interface(this : ID2D1ResourceTexture*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ResourceTexture*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ResourceTexture*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def update(this : ID2D1ResourceTexture*, minimumExtents : UInt32*, maximimumExtents : UInt32*, strides : UInt32*, dimensions : UInt32, data : UInt8*, dataCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, minimumExtents, maximimumExtents, strides, dimensions, data, dataCount)
    end

  end

  @[Extern]
  record ID2D1RenderInfoVtbl,
    query_interface : Proc(ID2D1RenderInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1RenderInfo*, UInt32),
    release : Proc(ID2D1RenderInfo*, UInt32),
    set_input_description : Proc(ID2D1RenderInfo*, UInt32, Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION, Win32cr::Foundation::HRESULT),
    set_output_buffer : Proc(ID2D1RenderInfo*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1RenderInfo*, Win32cr::Foundation::BOOL, Void),
    set_instruction_count_hint : Proc(ID2D1RenderInfo*, UInt32, Void)


  @[Extern]
  record ID2D1RenderInfo, lpVtbl : ID2D1RenderInfoVtbl* do
    GUID = LibC::GUID.new(0x519ae1bd_u32, 0xd19a_u16, 0x420d_u16, StaticArray[0xb8_u8, 0x49_u8, 0x36_u8, 0x4f_u8, 0x59_u8, 0x47_u8, 0x76_u8, 0xb7_u8])
    def query_interface(this : ID2D1RenderInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1RenderInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1RenderInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_input_description(this : ID2D1RenderInfo*, inputIndex : UInt32, inputDescription : Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_description.call(this, inputIndex, inputDescription)
    end
    def set_output_buffer(this : ID2D1RenderInfo*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1RenderInfo*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end
    def set_instruction_count_hint(this : ID2D1RenderInfo*, instructionCount : UInt32) : Void
      @lpVtbl.try &.value.set_instruction_count_hint.call(this, instructionCount)
    end

  end

  @[Extern]
  record ID2D1DrawInfoVtbl,
    query_interface : Proc(ID2D1DrawInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DrawInfo*, UInt32),
    release : Proc(ID2D1DrawInfo*, UInt32),
    set_input_description : Proc(ID2D1DrawInfo*, UInt32, Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION, Win32cr::Foundation::HRESULT),
    set_output_buffer : Proc(ID2D1DrawInfo*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1DrawInfo*, Win32cr::Foundation::BOOL, Void),
    set_instruction_count_hint : Proc(ID2D1DrawInfo*, UInt32, Void),
    set_pixel_shader_constant_buffer : Proc(ID2D1DrawInfo*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_resource_texture : Proc(ID2D1DrawInfo*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_buffer : Proc(ID2D1DrawInfo*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_pixel_shader : Proc(ID2D1DrawInfo*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_PIXEL_OPTIONS, Win32cr::Foundation::HRESULT),
    set_vertex_processing : Proc(ID2D1DrawInfo*, Void*, Win32cr::Graphics::Direct2D::D2D1_VERTEX_OPTIONS, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Win32cr::Graphics::Direct2D::D2D1_VERTEX_RANGE*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DrawInfo, lpVtbl : ID2D1DrawInfoVtbl* do
    GUID = LibC::GUID.new(0x693ce632_u32, 0x7f2f_u16, 0x45de_u16, StaticArray[0x93_u8, 0xfe_u8, 0x18_u8, 0xd8_u8, 0x8b_u8, 0x37_u8, 0xaa_u8, 0x21_u8])
    def query_interface(this : ID2D1DrawInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DrawInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DrawInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_input_description(this : ID2D1DrawInfo*, inputIndex : UInt32, inputDescription : Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_description.call(this, inputIndex, inputDescription)
    end
    def set_output_buffer(this : ID2D1DrawInfo*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1DrawInfo*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end
    def set_instruction_count_hint(this : ID2D1DrawInfo*, instructionCount : UInt32) : Void
      @lpVtbl.try &.value.set_instruction_count_hint.call(this, instructionCount)
    end
    def set_pixel_shader_constant_buffer(this : ID2D1DrawInfo*, buffer : UInt8*, bufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_buffer.call(this, buffer, bufferCount)
    end
    def set_resource_texture(this : ID2D1DrawInfo*, textureIndex : UInt32, resourceTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_resource_texture.call(this, textureIndex, resourceTexture)
    end
    def set_vertex_shader_constant_buffer(this : ID2D1DrawInfo*, buffer : UInt8*, bufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_buffer.call(this, buffer, bufferCount)
    end
    def set_pixel_shader(this : ID2D1DrawInfo*, shaderId : LibC::GUID*, pixelOptions : Win32cr::Graphics::Direct2D::D2D1_PIXEL_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader.call(this, shaderId, pixelOptions)
    end
    def set_vertex_processing(this : ID2D1DrawInfo*, vertexBuffer : Void*, vertexOptions : Win32cr::Graphics::Direct2D::D2D1_VERTEX_OPTIONS, blendDescription : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, vertexRange : Win32cr::Graphics::Direct2D::D2D1_VERTEX_RANGE*, vertexShader : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_processing.call(this, vertexBuffer, vertexOptions, blendDescription, vertexRange, vertexShader)
    end

  end

  @[Extern]
  record ID2D1ComputeInfoVtbl,
    query_interface : Proc(ID2D1ComputeInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ComputeInfo*, UInt32),
    release : Proc(ID2D1ComputeInfo*, UInt32),
    set_input_description : Proc(ID2D1ComputeInfo*, UInt32, Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION, Win32cr::Foundation::HRESULT),
    set_output_buffer : Proc(ID2D1ComputeInfo*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1ComputeInfo*, Win32cr::Foundation::BOOL, Void),
    set_instruction_count_hint : Proc(ID2D1ComputeInfo*, UInt32, Void),
    set_compute_shader_constant_buffer : Proc(ID2D1ComputeInfo*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_compute_shader : Proc(ID2D1ComputeInfo*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_resource_texture : Proc(ID2D1ComputeInfo*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ComputeInfo, lpVtbl : ID2D1ComputeInfoVtbl* do
    GUID = LibC::GUID.new(0x5598b14b_u32, 0x9fd7_u16, 0x48b7_u16, StaticArray[0x9b_u8, 0xdb_u8, 0x8f_u8, 0x9_u8, 0x64_u8, 0xeb_u8, 0x38_u8, 0xbc_u8])
    def query_interface(this : ID2D1ComputeInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ComputeInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ComputeInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_input_description(this : ID2D1ComputeInfo*, inputIndex : UInt32, inputDescription : Win32cr::Graphics::Direct2D::D2D1_INPUT_DESCRIPTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_description.call(this, inputIndex, inputDescription)
    end
    def set_output_buffer(this : ID2D1ComputeInfo*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1ComputeInfo*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end
    def set_instruction_count_hint(this : ID2D1ComputeInfo*, instructionCount : UInt32) : Void
      @lpVtbl.try &.value.set_instruction_count_hint.call(this, instructionCount)
    end
    def set_compute_shader_constant_buffer(this : ID2D1ComputeInfo*, buffer : UInt8*, bufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_compute_shader_constant_buffer.call(this, buffer, bufferCount)
    end
    def set_compute_shader(this : ID2D1ComputeInfo*, shaderId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_compute_shader.call(this, shaderId)
    end
    def set_resource_texture(this : ID2D1ComputeInfo*, textureIndex : UInt32, resourceTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_resource_texture.call(this, textureIndex, resourceTexture)
    end

  end

  @[Extern]
  record ID2D1TransformNodeVtbl,
    query_interface : Proc(ID2D1TransformNode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1TransformNode*, UInt32),
    release : Proc(ID2D1TransformNode*, UInt32),
    get_input_count : Proc(ID2D1TransformNode*, UInt32)


  @[Extern]
  record ID2D1TransformNode, lpVtbl : ID2D1TransformNodeVtbl* do
    GUID = LibC::GUID.new(0xb2efe1e7_u32, 0x729f_u16, 0x4102_u16, StaticArray[0x94_u8, 0x9f_u8, 0x50_u8, 0x5f_u8, 0xa2_u8, 0x1b_u8, 0xf6_u8, 0x66_u8])
    def query_interface(this : ID2D1TransformNode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1TransformNode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1TransformNode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1TransformNode*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end

  end

  @[Extern]
  record ID2D1TransformGraphVtbl,
    query_interface : Proc(ID2D1TransformGraph*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1TransformGraph*, UInt32),
    release : Proc(ID2D1TransformGraph*, UInt32),
    get_input_count : Proc(ID2D1TransformGraph*, UInt32),
    set_single_transform_node : Proc(ID2D1TransformGraph*, Void*, Win32cr::Foundation::HRESULT),
    add_node : Proc(ID2D1TransformGraph*, Void*, Win32cr::Foundation::HRESULT),
    remove_node : Proc(ID2D1TransformGraph*, Void*, Win32cr::Foundation::HRESULT),
    set_output_node : Proc(ID2D1TransformGraph*, Void*, Win32cr::Foundation::HRESULT),
    connect_node : Proc(ID2D1TransformGraph*, Void*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    connect_to_effect_input : Proc(ID2D1TransformGraph*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1TransformGraph*, Void),
    set_passthrough_graph : Proc(ID2D1TransformGraph*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1TransformGraph, lpVtbl : ID2D1TransformGraphVtbl* do
    GUID = LibC::GUID.new(0x13d29038_u32, 0xc3e6_u16, 0x4034_u16, StaticArray[0x90_u8, 0x81_u8, 0x13_u8, 0xb5_u8, 0x3a_u8, 0x41_u8, 0x79_u8, 0x92_u8])
    def query_interface(this : ID2D1TransformGraph*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1TransformGraph*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1TransformGraph*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1TransformGraph*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_single_transform_node(this : ID2D1TransformGraph*, node : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_single_transform_node.call(this, node)
    end
    def add_node(this : ID2D1TransformGraph*, node : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_node.call(this, node)
    end
    def remove_node(this : ID2D1TransformGraph*, node : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_node.call(this, node)
    end
    def set_output_node(this : ID2D1TransformGraph*, node : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_node.call(this, node)
    end
    def connect_node(this : ID2D1TransformGraph*, fromNode : Void*, toNode : Void*, toNodeInputIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_node.call(this, fromNode, toNode, toNodeInputIndex)
    end
    def connect_to_effect_input(this : ID2D1TransformGraph*, toEffectInputIndex : UInt32, node : Void*, toNodeInputIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_to_effect_input.call(this, toEffectInputIndex, node, toNodeInputIndex)
    end
    def clear(this : ID2D1TransformGraph*) : Void
      @lpVtbl.try &.value.clear.call(this)
    end
    def set_passthrough_graph(this : ID2D1TransformGraph*, effectInputIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_passthrough_graph.call(this, effectInputIndex)
    end

  end

  @[Extern]
  record ID2D1TransformVtbl,
    query_interface : Proc(ID2D1Transform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Transform*, UInt32),
    release : Proc(ID2D1Transform*, UInt32),
    get_input_count : Proc(ID2D1Transform*, UInt32),
    map_output_rect_to_input_rects : Proc(ID2D1Transform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    map_input_rects_to_output_rect : Proc(ID2D1Transform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    map_invalid_rect : Proc(ID2D1Transform*, UInt32, Win32cr::Foundation::RECT, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Transform, lpVtbl : ID2D1TransformVtbl* do
    GUID = LibC::GUID.new(0xef1a287d_u32, 0x342a_u16, 0x4f76_u16, StaticArray[0x8f_u8, 0xdb_u8, 0xda_u8, 0xd_u8, 0x6e_u8, 0xa9_u8, 0xf9_u8, 0x2b_u8])
    def query_interface(this : ID2D1Transform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Transform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Transform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1Transform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def map_output_rect_to_input_rects(this : ID2D1Transform*, outputRect : Win32cr::Foundation::RECT*, inputRects : Win32cr::Foundation::RECT*, inputRectsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_output_rect_to_input_rects.call(this, outputRect, inputRects, inputRectsCount)
    end
    def map_input_rects_to_output_rect(this : ID2D1Transform*, inputRects : Win32cr::Foundation::RECT*, inputOpaqueSubRects : Win32cr::Foundation::RECT*, inputRectCount : UInt32, outputRect : Win32cr::Foundation::RECT*, outputOpaqueSubRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_input_rects_to_output_rect.call(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect)
    end
    def map_invalid_rect(this : ID2D1Transform*, inputIndex : UInt32, invalidInputRect : Win32cr::Foundation::RECT, invalidOutputRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_invalid_rect.call(this, inputIndex, invalidInputRect, invalidOutputRect)
    end

  end

  @[Extern]
  record ID2D1DrawTransformVtbl,
    query_interface : Proc(ID2D1DrawTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DrawTransform*, UInt32),
    release : Proc(ID2D1DrawTransform*, UInt32),
    get_input_count : Proc(ID2D1DrawTransform*, UInt32),
    map_output_rect_to_input_rects : Proc(ID2D1DrawTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    map_input_rects_to_output_rect : Proc(ID2D1DrawTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    map_invalid_rect : Proc(ID2D1DrawTransform*, UInt32, Win32cr::Foundation::RECT, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_draw_info : Proc(ID2D1DrawTransform*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DrawTransform, lpVtbl : ID2D1DrawTransformVtbl* do
    GUID = LibC::GUID.new(0x36bfdcb6_u32, 0x9739_u16, 0x435d_u16, StaticArray[0xa3_u8, 0xd_u8, 0xa6_u8, 0x53_u8, 0xbe_u8, 0xff_u8, 0x6a_u8, 0x6f_u8])
    def query_interface(this : ID2D1DrawTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DrawTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DrawTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1DrawTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def map_output_rect_to_input_rects(this : ID2D1DrawTransform*, outputRect : Win32cr::Foundation::RECT*, inputRects : Win32cr::Foundation::RECT*, inputRectsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_output_rect_to_input_rects.call(this, outputRect, inputRects, inputRectsCount)
    end
    def map_input_rects_to_output_rect(this : ID2D1DrawTransform*, inputRects : Win32cr::Foundation::RECT*, inputOpaqueSubRects : Win32cr::Foundation::RECT*, inputRectCount : UInt32, outputRect : Win32cr::Foundation::RECT*, outputOpaqueSubRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_input_rects_to_output_rect.call(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect)
    end
    def map_invalid_rect(this : ID2D1DrawTransform*, inputIndex : UInt32, invalidInputRect : Win32cr::Foundation::RECT, invalidOutputRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_invalid_rect.call(this, inputIndex, invalidInputRect, invalidOutputRect)
    end
    def set_draw_info(this : ID2D1DrawTransform*, drawInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_draw_info.call(this, drawInfo)
    end

  end

  @[Extern]
  record ID2D1ComputeTransformVtbl,
    query_interface : Proc(ID2D1ComputeTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ComputeTransform*, UInt32),
    release : Proc(ID2D1ComputeTransform*, UInt32),
    get_input_count : Proc(ID2D1ComputeTransform*, UInt32),
    map_output_rect_to_input_rects : Proc(ID2D1ComputeTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    map_input_rects_to_output_rect : Proc(ID2D1ComputeTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    map_invalid_rect : Proc(ID2D1ComputeTransform*, UInt32, Win32cr::Foundation::RECT, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_compute_info : Proc(ID2D1ComputeTransform*, Void*, Win32cr::Foundation::HRESULT),
    calculate_threadgroups : Proc(ID2D1ComputeTransform*, Win32cr::Foundation::RECT*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ComputeTransform, lpVtbl : ID2D1ComputeTransformVtbl* do
    GUID = LibC::GUID.new(0xd85573c_u32, 0x1e3_u16, 0x4f7d_u16, StaticArray[0xbf_u8, 0xd9_u8, 0xd_u8, 0x60_u8, 0x60_u8, 0x8b_u8, 0xf3_u8, 0xc3_u8])
    def query_interface(this : ID2D1ComputeTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ComputeTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ComputeTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1ComputeTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def map_output_rect_to_input_rects(this : ID2D1ComputeTransform*, outputRect : Win32cr::Foundation::RECT*, inputRects : Win32cr::Foundation::RECT*, inputRectsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_output_rect_to_input_rects.call(this, outputRect, inputRects, inputRectsCount)
    end
    def map_input_rects_to_output_rect(this : ID2D1ComputeTransform*, inputRects : Win32cr::Foundation::RECT*, inputOpaqueSubRects : Win32cr::Foundation::RECT*, inputRectCount : UInt32, outputRect : Win32cr::Foundation::RECT*, outputOpaqueSubRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_input_rects_to_output_rect.call(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect)
    end
    def map_invalid_rect(this : ID2D1ComputeTransform*, inputIndex : UInt32, invalidInputRect : Win32cr::Foundation::RECT, invalidOutputRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_invalid_rect.call(this, inputIndex, invalidInputRect, invalidOutputRect)
    end
    def set_compute_info(this : ID2D1ComputeTransform*, computeInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_compute_info.call(this, computeInfo)
    end
    def calculate_threadgroups(this : ID2D1ComputeTransform*, outputRect : Win32cr::Foundation::RECT*, dimensionX : UInt32*, dimensionY : UInt32*, dimensionZ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.calculate_threadgroups.call(this, outputRect, dimensionX, dimensionY, dimensionZ)
    end

  end

  @[Extern]
  record ID2D1AnalysisTransformVtbl,
    query_interface : Proc(ID2D1AnalysisTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1AnalysisTransform*, UInt32),
    release : Proc(ID2D1AnalysisTransform*, UInt32),
    process_analysis_results : Proc(ID2D1AnalysisTransform*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1AnalysisTransform, lpVtbl : ID2D1AnalysisTransformVtbl* do
    GUID = LibC::GUID.new(0x359dc30_u32, 0x95e6_u16, 0x4568_u16, StaticArray[0x90_u8, 0x55_u8, 0x27_u8, 0x72_u8, 0xd_u8, 0x13_u8, 0xe_u8, 0x93_u8])
    def query_interface(this : ID2D1AnalysisTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1AnalysisTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1AnalysisTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def process_analysis_results(this : ID2D1AnalysisTransform*, analysisData : UInt8*, analysisDataCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_analysis_results.call(this, analysisData, analysisDataCount)
    end

  end

  @[Extern]
  record ID2D1SourceTransformVtbl,
    query_interface : Proc(ID2D1SourceTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SourceTransform*, UInt32),
    release : Proc(ID2D1SourceTransform*, UInt32),
    get_input_count : Proc(ID2D1SourceTransform*, UInt32),
    map_output_rect_to_input_rects : Proc(ID2D1SourceTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    map_input_rects_to_output_rect : Proc(ID2D1SourceTransform*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    map_invalid_rect : Proc(ID2D1SourceTransform*, UInt32, Win32cr::Foundation::RECT, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_render_info : Proc(ID2D1SourceTransform*, Void*, Win32cr::Foundation::HRESULT),
    draw : Proc(ID2D1SourceTransform*, Void*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1SourceTransform, lpVtbl : ID2D1SourceTransformVtbl* do
    GUID = LibC::GUID.new(0xdb1800dd_u32, 0xc34_u16, 0x4cf9_u16, StaticArray[0xbe_u8, 0x90_u8, 0x31_u8, 0xcc_u8, 0xa_u8, 0x56_u8, 0x53_u8, 0xe1_u8])
    def query_interface(this : ID2D1SourceTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SourceTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SourceTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1SourceTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def map_output_rect_to_input_rects(this : ID2D1SourceTransform*, outputRect : Win32cr::Foundation::RECT*, inputRects : Win32cr::Foundation::RECT*, inputRectsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_output_rect_to_input_rects.call(this, outputRect, inputRects, inputRectsCount)
    end
    def map_input_rects_to_output_rect(this : ID2D1SourceTransform*, inputRects : Win32cr::Foundation::RECT*, inputOpaqueSubRects : Win32cr::Foundation::RECT*, inputRectCount : UInt32, outputRect : Win32cr::Foundation::RECT*, outputOpaqueSubRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_input_rects_to_output_rect.call(this, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect)
    end
    def map_invalid_rect(this : ID2D1SourceTransform*, inputIndex : UInt32, invalidInputRect : Win32cr::Foundation::RECT, invalidOutputRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_invalid_rect.call(this, inputIndex, invalidInputRect, invalidOutputRect)
    end
    def set_render_info(this : ID2D1SourceTransform*, renderInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_info.call(this, renderInfo)
    end
    def draw(this : ID2D1SourceTransform*, target : Void*, drawRect : Win32cr::Foundation::RECT*, targetOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2U) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw.call(this, target, drawRect, targetOrigin)
    end

  end

  @[Extern]
  record ID2D1ConcreteTransformVtbl,
    query_interface : Proc(ID2D1ConcreteTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ConcreteTransform*, UInt32),
    release : Proc(ID2D1ConcreteTransform*, UInt32),
    get_input_count : Proc(ID2D1ConcreteTransform*, UInt32),
    set_output_buffer : Proc(ID2D1ConcreteTransform*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1ConcreteTransform*, Win32cr::Foundation::BOOL, Void)


  @[Extern]
  record ID2D1ConcreteTransform, lpVtbl : ID2D1ConcreteTransformVtbl* do
    GUID = LibC::GUID.new(0x1a799d8a_u32, 0x69f7_u16, 0x4e4c_u16, StaticArray[0x9f_u8, 0xed_u8, 0x43_u8, 0x7c_u8, 0xcc_u8, 0x66_u8, 0x84_u8, 0xcc_u8])
    def query_interface(this : ID2D1ConcreteTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ConcreteTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ConcreteTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1ConcreteTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_output_buffer(this : ID2D1ConcreteTransform*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1ConcreteTransform*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end

  end

  @[Extern]
  record ID2D1BlendTransformVtbl,
    query_interface : Proc(ID2D1BlendTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BlendTransform*, UInt32),
    release : Proc(ID2D1BlendTransform*, UInt32),
    get_input_count : Proc(ID2D1BlendTransform*, UInt32),
    set_output_buffer : Proc(ID2D1BlendTransform*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1BlendTransform*, Win32cr::Foundation::BOOL, Void),
    set_description : Proc(ID2D1BlendTransform*, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Void),
    get_description : Proc(ID2D1BlendTransform*, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Void)


  @[Extern]
  record ID2D1BlendTransform, lpVtbl : ID2D1BlendTransformVtbl* do
    GUID = LibC::GUID.new(0x63ac0b32_u32, 0xba44_u16, 0x450f_u16, StaticArray[0x88_u8, 0x6_u8, 0x7f_u8, 0x4c_u8, 0xa1_u8, 0xff_u8, 0x2f_u8, 0x1b_u8])
    def query_interface(this : ID2D1BlendTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BlendTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BlendTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1BlendTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_output_buffer(this : ID2D1BlendTransform*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1BlendTransform*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end
    def set_description(this : ID2D1BlendTransform*, description : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*) : Void
      @lpVtbl.try &.value.set_description.call(this, description)
    end
    def get_description(this : ID2D1BlendTransform*, description : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*) : Void
      @lpVtbl.try &.value.get_description.call(this, description)
    end

  end

  @[Extern]
  record ID2D1BorderTransformVtbl,
    query_interface : Proc(ID2D1BorderTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BorderTransform*, UInt32),
    release : Proc(ID2D1BorderTransform*, UInt32),
    get_input_count : Proc(ID2D1BorderTransform*, UInt32),
    set_output_buffer : Proc(ID2D1BorderTransform*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH, Win32cr::Foundation::HRESULT),
    set_cached : Proc(ID2D1BorderTransform*, Win32cr::Foundation::BOOL, Void),
    set_extend_mode_x : Proc(ID2D1BorderTransform*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    set_extend_mode_y : Proc(ID2D1BorderTransform*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void),
    get_extend_mode_x : Proc(ID2D1BorderTransform*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE),
    get_extend_mode_y : Proc(ID2D1BorderTransform*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE)


  @[Extern]
  record ID2D1BorderTransform, lpVtbl : ID2D1BorderTransformVtbl* do
    GUID = LibC::GUID.new(0x4998735c_u32, 0x3a19_u16, 0x473c_u16, StaticArray[0x97_u8, 0x81_u8, 0x65_u8, 0x68_u8, 0x47_u8, 0xe3_u8, 0xa3_u8, 0x47_u8])
    def query_interface(this : ID2D1BorderTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BorderTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BorderTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1BorderTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_output_buffer(this : ID2D1BorderTransform*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, channelDepth : Win32cr::Graphics::Direct2D::D2D1_CHANNEL_DEPTH) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_buffer.call(this, bufferPrecision, channelDepth)
    end
    def set_cached(this : ID2D1BorderTransform*, isCached : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_cached.call(this, isCached)
    end
    def set_extend_mode_x(this : ID2D1BorderTransform*, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_x.call(this, extendMode)
    end
    def set_extend_mode_y(this : ID2D1BorderTransform*, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE) : Void
      @lpVtbl.try &.value.set_extend_mode_y.call(this, extendMode)
    end
    def get_extend_mode_x(this : ID2D1BorderTransform*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_x.call(this)
    end
    def get_extend_mode_y(this : ID2D1BorderTransform*) : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE
      @lpVtbl.try &.value.get_extend_mode_y.call(this)
    end

  end

  @[Extern]
  record ID2D1OffsetTransformVtbl,
    query_interface : Proc(ID2D1OffsetTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1OffsetTransform*, UInt32),
    release : Proc(ID2D1OffsetTransform*, UInt32),
    get_input_count : Proc(ID2D1OffsetTransform*, UInt32),
    set_offset : Proc(ID2D1OffsetTransform*, Win32cr::Foundation::POINT, Void),
    get_offset : Proc(ID2D1OffsetTransform*, Win32cr::Foundation::POINT)


  @[Extern]
  record ID2D1OffsetTransform, lpVtbl : ID2D1OffsetTransformVtbl* do
    GUID = LibC::GUID.new(0x3fe6adea_u32, 0x7643_u16, 0x4f53_u16, StaticArray[0xbd_u8, 0x14_u8, 0xa0_u8, 0xce_u8, 0x63_u8, 0xf2_u8, 0x40_u8, 0x42_u8])
    def query_interface(this : ID2D1OffsetTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1OffsetTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1OffsetTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1OffsetTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_offset(this : ID2D1OffsetTransform*, offset : Win32cr::Foundation::POINT) : Void
      @lpVtbl.try &.value.set_offset.call(this, offset)
    end
    def get_offset(this : ID2D1OffsetTransform*) : Win32cr::Foundation::POINT
      @lpVtbl.try &.value.get_offset.call(this)
    end

  end

  @[Extern]
  record ID2D1BoundsAdjustmentTransformVtbl,
    query_interface : Proc(ID2D1BoundsAdjustmentTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1BoundsAdjustmentTransform*, UInt32),
    release : Proc(ID2D1BoundsAdjustmentTransform*, UInt32),
    get_input_count : Proc(ID2D1BoundsAdjustmentTransform*, UInt32),
    set_output_bounds : Proc(ID2D1BoundsAdjustmentTransform*, Win32cr::Foundation::RECT*, Void),
    get_output_bounds : Proc(ID2D1BoundsAdjustmentTransform*, Win32cr::Foundation::RECT*, Void)


  @[Extern]
  record ID2D1BoundsAdjustmentTransform, lpVtbl : ID2D1BoundsAdjustmentTransformVtbl* do
    GUID = LibC::GUID.new(0x90f732e2_u32, 0x5092_u16, 0x4606_u16, StaticArray[0xa8_u8, 0x19_u8, 0x86_u8, 0x51_u8, 0x97_u8, 0xb_u8, 0xac_u8, 0xcd_u8])
    def query_interface(this : ID2D1BoundsAdjustmentTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1BoundsAdjustmentTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1BoundsAdjustmentTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_count(this : ID2D1BoundsAdjustmentTransform*) : UInt32
      @lpVtbl.try &.value.get_input_count.call(this)
    end
    def set_output_bounds(this : ID2D1BoundsAdjustmentTransform*, outputBounds : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.set_output_bounds.call(this, outputBounds)
    end
    def get_output_bounds(this : ID2D1BoundsAdjustmentTransform*, outputBounds : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.get_output_bounds.call(this, outputBounds)
    end

  end

  @[Extern]
  record ID2D1EffectImplVtbl,
    query_interface : Proc(ID2D1EffectImpl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1EffectImpl*, UInt32),
    release : Proc(ID2D1EffectImpl*, UInt32),
    initialize__ : Proc(ID2D1EffectImpl*, Void*, Void*, Win32cr::Foundation::HRESULT),
    prepare_for_render : Proc(ID2D1EffectImpl*, Win32cr::Graphics::Direct2D::D2D1_CHANGE_TYPE, Win32cr::Foundation::HRESULT),
    set_graph : Proc(ID2D1EffectImpl*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1EffectImpl, lpVtbl : ID2D1EffectImplVtbl* do
    GUID = LibC::GUID.new(0xa248fd3f_u32, 0x3e6c_u16, 0x4e63_u16, StaticArray[0x9f_u8, 0x3_u8, 0x7f_u8, 0x68_u8, 0xec_u8, 0xc9_u8, 0x1d_u8, 0xb9_u8])
    def query_interface(this : ID2D1EffectImpl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1EffectImpl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1EffectImpl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ID2D1EffectImpl*, effectContext : Void*, transformGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, effectContext, transformGraph)
    end
    def prepare_for_render(this : ID2D1EffectImpl*, changeType : Win32cr::Graphics::Direct2D::D2D1_CHANGE_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_for_render.call(this, changeType)
    end
    def set_graph(this : ID2D1EffectImpl*, transformGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_graph.call(this, transformGraph)
    end

  end

  @[Extern]
  record ID2D1EffectContextVtbl,
    query_interface : Proc(ID2D1EffectContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1EffectContext*, UInt32),
    release : Proc(ID2D1EffectContext*, UInt32),
    get_dpi : Proc(ID2D1EffectContext*, Float32*, Float32*, Void),
    create_effect : Proc(ID2D1EffectContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_maximum_supported_feature_level : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, UInt32, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, Win32cr::Foundation::HRESULT),
    create_transform_node_from_effect : Proc(ID2D1EffectContext*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_blend_transform : Proc(ID2D1EffectContext*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Void**, Win32cr::Foundation::HRESULT),
    create_border_transform : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_offset_transform : Proc(ID2D1EffectContext*, Win32cr::Foundation::POINT, Void**, Win32cr::Foundation::HRESULT),
    create_bounds_adjustment_transform : Proc(ID2D1EffectContext*, Win32cr::Foundation::RECT*, Void**, Win32cr::Foundation::HRESULT),
    load_pixel_shader : Proc(ID2D1EffectContext*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_vertex_shader : Proc(ID2D1EffectContext*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_compute_shader : Proc(ID2D1EffectContext*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    is_shader_loaded : Proc(ID2D1EffectContext*, LibC::GUID*, Win32cr::Foundation::BOOL),
    create_resource_texture : Proc(ID2D1EffectContext*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    find_resource_texture : Proc(ID2D1EffectContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_vertex_buffer : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    find_vertex_buffer : Proc(ID2D1EffectContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1EffectContext*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1EffectContext*, Void*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct2D::D2D1_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    is_buffer_precision_supported : Proc(ID2D1EffectContext*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID2D1EffectContext, lpVtbl : ID2D1EffectContextVtbl* do
    GUID = LibC::GUID.new(0x3d9f916b_u32, 0x27dc_u16, 0x4ad7_u16, StaticArray[0xb4_u8, 0xf1_u8, 0x64_u8, 0x94_u8, 0x53_u8, 0x40_u8, 0xf5_u8, 0x63_u8])
    def query_interface(this : ID2D1EffectContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1EffectContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1EffectContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_dpi(this : ID2D1EffectContext*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def create_effect(this : ID2D1EffectContext*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def get_maximum_supported_feature_level(this : ID2D1EffectContext*, featureLevels : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, featureLevelsCount : UInt32, maximumSupportedFeatureLevel : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_supported_feature_level.call(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel)
    end
    def create_transform_node_from_effect(this : ID2D1EffectContext*, effect : Void*, transformNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transform_node_from_effect.call(this, effect, transformNode)
    end
    def create_blend_transform(this : ID2D1EffectContext*, numInputs : UInt32, blendDescription : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_transform.call(this, numInputs, blendDescription, transform)
    end
    def create_border_transform(this : ID2D1EffectContext*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_border_transform.call(this, extendModeX, extendModeY, transform)
    end
    def create_offset_transform(this : ID2D1EffectContext*, offset : Win32cr::Foundation::POINT, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offset_transform.call(this, offset, transform)
    end
    def create_bounds_adjustment_transform(this : ID2D1EffectContext*, outputRectangle : Win32cr::Foundation::RECT*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bounds_adjustment_transform.call(this, outputRectangle, transform)
    end
    def load_pixel_shader(this : ID2D1EffectContext*, shaderId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_pixel_shader.call(this, shaderId, shaderBuffer, shaderBufferCount)
    end
    def load_vertex_shader(this : ID2D1EffectContext*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_vertex_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def load_compute_shader(this : ID2D1EffectContext*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_compute_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def is_shader_loaded(this : ID2D1EffectContext*, shaderId : LibC::GUID*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_shader_loaded.call(this, shaderId)
    end
    def create_resource_texture(this : ID2D1EffectContext*, resourceId : LibC::GUID*, resourceTextureProperties : Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, dataSize : UInt32, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_texture.call(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture)
    end
    def find_resource_texture(this : ID2D1EffectContext*, resourceId : LibC::GUID*, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_resource_texture.call(this, resourceId, resourceTexture)
    end
    def create_vertex_buffer(this : ID2D1EffectContext*, vertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, resourceId : LibC::GUID*, customVertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_buffer.call(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer)
    end
    def find_vertex_buffer(this : ID2D1EffectContext*, resourceId : LibC::GUID*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_vertex_buffer.call(this, resourceId, buffer)
    end
    def create_color_context(this : ID2D1EffectContext*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1EffectContext*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1EffectContext*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def check_feature_support(this : ID2D1EffectContext*, feature : Win32cr::Graphics::Direct2D::D2D1_FEATURE, featureSupportData : Void*, featureSupportDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, featureSupportData, featureSupportDataSize)
    end
    def is_buffer_precision_supported(this : ID2D1EffectContext*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end

  end

  @[Extern]
  record ID2D1GeometryRealizationVtbl,
    query_interface : Proc(ID2D1GeometryRealization*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GeometryRealization*, UInt32),
    release : Proc(ID2D1GeometryRealization*, UInt32),
    get_factory : Proc(ID2D1GeometryRealization*, Void**, Void)


  @[Extern]
  record ID2D1GeometryRealization, lpVtbl : ID2D1GeometryRealizationVtbl* do
    GUID = LibC::GUID.new(0xa16907d7_u32, 0xbc02_u16, 0x4801_u16, StaticArray[0x99_u8, 0xe8_u8, 0x8c_u8, 0xf7_u8, 0xf4_u8, 0x85_u8, 0xf7_u8, 0x74_u8])
    def query_interface(this : ID2D1GeometryRealization*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GeometryRealization*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GeometryRealization*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GeometryRealization*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end

  end

  @[Extern]
  record ID2D1DeviceContext1Vtbl,
    query_interface : Proc(ID2D1DeviceContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext1*, UInt32),
    release : Proc(ID2D1DeviceContext1*, UInt32),
    get_factory : Proc(ID2D1DeviceContext1*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext1*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext1*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext1*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext1*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext1*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext1*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext1*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext1*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext1*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext1*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext1*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext1*, Void),
    flush : Proc(ID2D1DeviceContext1*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext1*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext1*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext1*, Void),
    clear : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext1*, Void),
    end_draw : Proc(ID2D1DeviceContext1*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext1*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext1*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext1*, UInt32),
    is_supported : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext1*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext1*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext1*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext1*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext1*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext1*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext1*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext1*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext1*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext1*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext1*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext1*, Void*, Void*, Void)


  @[Extern]
  record ID2D1DeviceContext1, lpVtbl : ID2D1DeviceContext1Vtbl* do
    GUID = LibC::GUID.new(0xd37f57e4_u32, 0x6908_u16, 0x459f_u16, StaticArray[0xa1_u8, 0x99_u8, 0xe7_u8, 0x2f_u8, 0x24_u8, 0xf7_u8, 0x99_u8, 0x87_u8])
    def query_interface(this : ID2D1DeviceContext1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext1*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext1*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext1*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext1*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext1*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext1*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext1*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext1*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext1*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext1*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext1*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext1*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext1*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext1*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext1*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext1*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext1*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext1*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext1*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext1*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext1*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext1*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext1*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext1*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext1*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext1*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext1*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext1*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext1*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext1*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext1*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext1*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext1*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext1*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext1*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext1*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext1*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext1*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext1*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext1*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext1*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext1*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext1*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext1*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext1*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext1*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext1*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext1*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext1*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext1*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext1*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext1*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext1*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext1*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext1*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext1*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext1*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext1*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext1*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext1*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext1*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext1*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext1*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext1*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext1*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext1*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext1*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext1*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext1*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext1*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext1*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext1*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext1*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext1*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext1*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext1*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext1*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext1*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext1*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext1*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext1*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext1*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext1*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext1*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext1*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end

  end

  @[Extern]
  record ID2D1Device1Vtbl,
    query_interface : Proc(ID2D1Device1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device1*, UInt32),
    release : Proc(ID2D1Device1*, UInt32),
    get_factory : Proc(ID2D1Device1*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device1*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device1*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device1*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device1*, UInt64),
    clear_resources : Proc(ID2D1Device1*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device1*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device1*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device1*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Device1, lpVtbl : ID2D1Device1Vtbl* do
    GUID = LibC::GUID.new(0xd21768e1_u32, 0x23a4_u16, 0x4823_u16, StaticArray[0xa1_u8, 0x4b_u8, 0x7c_u8, 0x3e_u8, 0xba_u8, 0x85_u8, 0xd6_u8, 0x58_u8])
    def query_interface(this : ID2D1Device1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device1*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device1*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device1*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device1*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device1*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device1*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device1*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device1*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end

  end

  @[Extern]
  record ID2D1Factory2Vtbl,
    query_interface : Proc(ID2D1Factory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory2*, UInt32),
    release : Proc(ID2D1Factory2*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory2*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory2*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory2*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory2*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory2*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory2*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory2*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory2*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory2*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory2*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory2*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory2, lpVtbl : ID2D1Factory2Vtbl* do
    GUID = LibC::GUID.new(0x94f81a73_u32, 0x9212_u16, 0x4376_u16, StaticArray[0x9c_u8, 0x58_u8, 0xb1_u8, 0x6a_u8, 0x3a_u8, 0xd_u8, 0x39_u8, 0x92_u8])
    def query_interface(this : ID2D1Factory2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory2*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory2*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory2*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory2*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory2*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory2*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory2*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory2*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory2*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory2*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory2*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory2*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory2*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory2*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory2*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory2*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory2*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory2*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory2*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory2*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory2*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory2*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory2*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory2*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end

  end

  @[Extern]
  record ID2D1CommandSink1Vtbl,
    query_interface : Proc(ID2D1CommandSink1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink1*, UInt32),
    release : Proc(ID2D1CommandSink1*, UInt32),
    begin_draw : Proc(ID2D1CommandSink1*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink1*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink1*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink1*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink1*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink1*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink1*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink1*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink1*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink1*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink1*, Win32cr::Foundation::HRESULT),
    set_primitive_blend1 : Proc(ID2D1CommandSink1*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink1, lpVtbl : ID2D1CommandSink1Vtbl* do
    GUID = LibC::GUID.new(0x9eb767fd_u32, 0x4269_u16, 0x4467_u16, StaticArray[0xb8_u8, 0xc2_u8, 0xeb_u8, 0x30_u8, 0xcb_u8, 0x30_u8, 0x57_u8, 0x43_u8])
    def query_interface(this : ID2D1CommandSink1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink1*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink1*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink1*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink1*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink1*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink1*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink1*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink1*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink1*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink1*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink1*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink1*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink1*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink1*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink1*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink1*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink1*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink1*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink1*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink1*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink1*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def set_primitive_blend1(this : ID2D1CommandSink1*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend1.call(this, primitiveBlend)
    end

  end

  @[Extern]
  record ID2D1SvgAttributeVtbl,
    query_interface : Proc(ID2D1SvgAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgAttribute*, UInt32),
    release : Proc(ID2D1SvgAttribute*, UInt32),
    get_factory : Proc(ID2D1SvgAttribute*, Void**, Void),
    get_element : Proc(ID2D1SvgAttribute*, Void**, Void),
    clone : Proc(ID2D1SvgAttribute*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1SvgAttribute, lpVtbl : ID2D1SvgAttributeVtbl* do
    GUID = LibC::GUID.new(0xc9cdb0dd_u32, 0xf8c9_u16, 0x4e70_u16, StaticArray[0xb7_u8, 0xc2_u8, 0x30_u8, 0x1c_u8, 0x80_u8, 0x29_u8, 0x2c_u8, 0x5e_u8])
    def query_interface(this : ID2D1SvgAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgAttribute*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_element(this : ID2D1SvgAttribute*, element : Void**) : Void
      @lpVtbl.try &.value.get_element.call(this, element)
    end
    def clone(this : ID2D1SvgAttribute*, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, attribute)
    end

  end

  @[Extern]
  record ID2D1SvgPaintVtbl,
    query_interface : Proc(ID2D1SvgPaint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgPaint*, UInt32),
    release : Proc(ID2D1SvgPaint*, UInt32),
    get_factory : Proc(ID2D1SvgPaint*, Void**, Void),
    get_element : Proc(ID2D1SvgPaint*, Void**, Void),
    clone : Proc(ID2D1SvgPaint*, Void**, Win32cr::Foundation::HRESULT),
    set_paint_type : Proc(ID2D1SvgPaint*, Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE, Win32cr::Foundation::HRESULT),
    get_paint_type : Proc(ID2D1SvgPaint*, Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE),
    set_color : Proc(ID2D1SvgPaint*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    get_color : Proc(ID2D1SvgPaint*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    set_id : Proc(ID2D1SvgPaint*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_id : Proc(ID2D1SvgPaint*, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_id_length : Proc(ID2D1SvgPaint*, UInt32)


  @[Extern]
  record ID2D1SvgPaint, lpVtbl : ID2D1SvgPaintVtbl* do
    GUID = LibC::GUID.new(0xd59bab0a_u32, 0x68a2_u16, 0x455b_u16, StaticArray[0xa5_u8, 0xdc_u8, 0x9e_u8, 0xb2_u8, 0x85_u8, 0x4e_u8, 0x24_u8, 0x90_u8])
    def query_interface(this : ID2D1SvgPaint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgPaint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgPaint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgPaint*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_element(this : ID2D1SvgPaint*, element : Void**) : Void
      @lpVtbl.try &.value.get_element.call(this, element)
    end
    def clone(this : ID2D1SvgPaint*, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, attribute)
    end
    def set_paint_type(this : ID2D1SvgPaint*, paintType : Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_paint_type.call(this, paintType)
    end
    def get_paint_type(this : ID2D1SvgPaint*) : Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE
      @lpVtbl.try &.value.get_paint_type.call(this)
    end
    def set_color(this : ID2D1SvgPaint*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color.call(this, color)
    end
    def get_color(this : ID2D1SvgPaint*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.get_color.call(this, color)
    end
    def set_id(this : ID2D1SvgPaint*, id : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_id.call(this, id)
    end
    def get_id(this : ID2D1SvgPaint*, id : UInt16*, idCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, id, idCount)
    end
    def get_id_length(this : ID2D1SvgPaint*) : UInt32
      @lpVtbl.try &.value.get_id_length.call(this)
    end

  end

  @[Extern]
  record ID2D1SvgStrokeDashArrayVtbl,
    query_interface : Proc(ID2D1SvgStrokeDashArray*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgStrokeDashArray*, UInt32),
    release : Proc(ID2D1SvgStrokeDashArray*, UInt32),
    get_factory : Proc(ID2D1SvgStrokeDashArray*, Void**, Void),
    get_element : Proc(ID2D1SvgStrokeDashArray*, Void**, Void),
    clone : Proc(ID2D1SvgStrokeDashArray*, Void**, Win32cr::Foundation::HRESULT),
    remove_dashes_at_end : Proc(ID2D1SvgStrokeDashArray*, UInt32, Win32cr::Foundation::HRESULT),
    update_dashes_1 : Proc(ID2D1SvgStrokeDashArray*, Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    update_dashes_2 : Proc(ID2D1SvgStrokeDashArray*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_dashes_1 : Proc(ID2D1SvgStrokeDashArray*, Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_dashes_2 : Proc(ID2D1SvgStrokeDashArray*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_dashes_count : Proc(ID2D1SvgStrokeDashArray*, UInt32)


  @[Extern]
  record ID2D1SvgStrokeDashArray, lpVtbl : ID2D1SvgStrokeDashArrayVtbl* do
    GUID = LibC::GUID.new(0xf1c0ca52_u32, 0x92a3_u16, 0x4f00_u16, StaticArray[0xb4_u8, 0xce_u8, 0xf3_u8, 0x56_u8, 0x91_u8, 0xef_u8, 0xd9_u8, 0xd9_u8])
    def query_interface(this : ID2D1SvgStrokeDashArray*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgStrokeDashArray*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgStrokeDashArray*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgStrokeDashArray*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_element(this : ID2D1SvgStrokeDashArray*, element : Void**) : Void
      @lpVtbl.try &.value.get_element.call(this, element)
    end
    def clone(this : ID2D1SvgStrokeDashArray*, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, attribute)
    end
    def remove_dashes_at_end(this : ID2D1SvgStrokeDashArray*, dashesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_dashes_at_end.call(this, dashesCount)
    end
    def update_dashes_1(this : ID2D1SvgStrokeDashArray*, dashes : Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, dashesCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_dashes_1.call(this, dashes, dashesCount, startIndex)
    end
    def update_dashes_2(this : ID2D1SvgStrokeDashArray*, dashes : Float32*, dashesCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_dashes_2.call(this, dashes, dashesCount, startIndex)
    end
    def get_dashes_1(this : ID2D1SvgStrokeDashArray*, dashes : Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, dashesCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dashes_1.call(this, dashes, dashesCount, startIndex)
    end
    def get_dashes_2(this : ID2D1SvgStrokeDashArray*, dashes : Float32*, dashesCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dashes_2.call(this, dashes, dashesCount, startIndex)
    end
    def get_dashes_count(this : ID2D1SvgStrokeDashArray*) : UInt32
      @lpVtbl.try &.value.get_dashes_count.call(this)
    end

  end

  @[Extern]
  record ID2D1SvgPointCollectionVtbl,
    query_interface : Proc(ID2D1SvgPointCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgPointCollection*, UInt32),
    release : Proc(ID2D1SvgPointCollection*, UInt32),
    get_factory : Proc(ID2D1SvgPointCollection*, Void**, Void),
    get_element : Proc(ID2D1SvgPointCollection*, Void**, Void),
    clone : Proc(ID2D1SvgPointCollection*, Void**, Win32cr::Foundation::HRESULT),
    remove_points_at_end : Proc(ID2D1SvgPointCollection*, UInt32, Win32cr::Foundation::HRESULT),
    update_points : Proc(ID2D1SvgPointCollection*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_points : Proc(ID2D1SvgPointCollection*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_points_count : Proc(ID2D1SvgPointCollection*, UInt32)


  @[Extern]
  record ID2D1SvgPointCollection, lpVtbl : ID2D1SvgPointCollectionVtbl* do
    GUID = LibC::GUID.new(0x9dbe4c0d_u32, 0x3572_u16, 0x4dd9_u16, StaticArray[0x98_u8, 0x25_u8, 0x55_u8, 0x30_u8, 0x81_u8, 0x3b_u8, 0xb7_u8, 0x12_u8])
    def query_interface(this : ID2D1SvgPointCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgPointCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgPointCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgPointCollection*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_element(this : ID2D1SvgPointCollection*, element : Void**) : Void
      @lpVtbl.try &.value.get_element.call(this, element)
    end
    def clone(this : ID2D1SvgPointCollection*, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, attribute)
    end
    def remove_points_at_end(this : ID2D1SvgPointCollection*, pointsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_points_at_end.call(this, pointsCount)
    end
    def update_points(this : ID2D1SvgPointCollection*, points : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pointsCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_points.call(this, points, pointsCount, startIndex)
    end
    def get_points(this : ID2D1SvgPointCollection*, points : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pointsCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_points.call(this, points, pointsCount, startIndex)
    end
    def get_points_count(this : ID2D1SvgPointCollection*) : UInt32
      @lpVtbl.try &.value.get_points_count.call(this)
    end

  end

  @[Extern]
  record ID2D1SvgPathDataVtbl,
    query_interface : Proc(ID2D1SvgPathData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgPathData*, UInt32),
    release : Proc(ID2D1SvgPathData*, UInt32),
    get_factory : Proc(ID2D1SvgPathData*, Void**, Void),
    get_element : Proc(ID2D1SvgPathData*, Void**, Void),
    clone : Proc(ID2D1SvgPathData*, Void**, Win32cr::Foundation::HRESULT),
    remove_segment_data_at_end : Proc(ID2D1SvgPathData*, UInt32, Win32cr::Foundation::HRESULT),
    update_segment_data : Proc(ID2D1SvgPathData*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_segment_data : Proc(ID2D1SvgPathData*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_segment_data_count : Proc(ID2D1SvgPathData*, UInt32),
    remove_commands_at_end : Proc(ID2D1SvgPathData*, UInt32, Win32cr::Foundation::HRESULT),
    update_commands : Proc(ID2D1SvgPathData*, Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_commands : Proc(ID2D1SvgPathData*, Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_commands_count : Proc(ID2D1SvgPathData*, UInt32),
    create_path_geometry : Proc(ID2D1SvgPathData*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1SvgPathData, lpVtbl : ID2D1SvgPathDataVtbl* do
    GUID = LibC::GUID.new(0xc095e4f4_u32, 0xbb98_u16, 0x43d6_u16, StaticArray[0x97_u8, 0x45_u8, 0x4d_u8, 0x1b_u8, 0x84_u8, 0xec_u8, 0x98_u8, 0x88_u8])
    def query_interface(this : ID2D1SvgPathData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgPathData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgPathData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgPathData*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_element(this : ID2D1SvgPathData*, element : Void**) : Void
      @lpVtbl.try &.value.get_element.call(this, element)
    end
    def clone(this : ID2D1SvgPathData*, attribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, attribute)
    end
    def remove_segment_data_at_end(this : ID2D1SvgPathData*, dataCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_segment_data_at_end.call(this, dataCount)
    end
    def update_segment_data(this : ID2D1SvgPathData*, data : Float32*, dataCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_segment_data.call(this, data, dataCount, startIndex)
    end
    def get_segment_data(this : ID2D1SvgPathData*, data : Float32*, dataCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_data.call(this, data, dataCount, startIndex)
    end
    def get_segment_data_count(this : ID2D1SvgPathData*) : UInt32
      @lpVtbl.try &.value.get_segment_data_count.call(this)
    end
    def remove_commands_at_end(this : ID2D1SvgPathData*, commandsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_commands_at_end.call(this, commandsCount)
    end
    def update_commands(this : ID2D1SvgPathData*, commands : Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, commandsCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_commands.call(this, commands, commandsCount, startIndex)
    end
    def get_commands(this : ID2D1SvgPathData*, commands : Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, commandsCount : UInt32, startIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_commands.call(this, commands, commandsCount, startIndex)
    end
    def get_commands_count(this : ID2D1SvgPathData*) : UInt32
      @lpVtbl.try &.value.get_commands_count.call(this)
    end
    def create_path_geometry(this : ID2D1SvgPathData*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry.call(this, fillMode, pathGeometry)
    end

  end

  @[Extern]
  record ID2D1SvgElementVtbl,
    query_interface : Proc(ID2D1SvgElement*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgElement*, UInt32),
    release : Proc(ID2D1SvgElement*, UInt32),
    get_factory : Proc(ID2D1SvgElement*, Void**, Void),
    get_document : Proc(ID2D1SvgElement*, Void**, Void),
    get_tag_name : Proc(ID2D1SvgElement*, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_tag_name_length : Proc(ID2D1SvgElement*, UInt32),
    is_text_content : Proc(ID2D1SvgElement*, Win32cr::Foundation::BOOL),
    get_parent : Proc(ID2D1SvgElement*, Void**, Void),
    has_children : Proc(ID2D1SvgElement*, Win32cr::Foundation::BOOL),
    get_first_child : Proc(ID2D1SvgElement*, Void**, Void),
    get_last_child : Proc(ID2D1SvgElement*, Void**, Void),
    get_previous_child : Proc(ID2D1SvgElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_next_child : Proc(ID2D1SvgElement*, Void*, Void**, Win32cr::Foundation::HRESULT),
    insert_child_before : Proc(ID2D1SvgElement*, Void*, Void*, Win32cr::Foundation::HRESULT),
    append_child : Proc(ID2D1SvgElement*, Void*, Win32cr::Foundation::HRESULT),
    replace_child : Proc(ID2D1SvgElement*, Void*, Void*, Win32cr::Foundation::HRESULT),
    remove_child : Proc(ID2D1SvgElement*, Void*, Win32cr::Foundation::HRESULT),
    create_child : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    is_attribute_specified : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL),
    get_specified_attribute_count : Proc(ID2D1SvgElement*, UInt32),
    get_specified_attribute_name : Proc(ID2D1SvgElement*, UInt32, UInt16*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_specified_attribute_name_length : Proc(ID2D1SvgElement*, UInt32, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    remove_attribute : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_text_value : Proc(ID2D1SvgElement*, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_text_value : Proc(ID2D1SvgElement*, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_text_value_length : Proc(ID2D1SvgElement*, UInt32),
    set_attribute_value_1 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    set_attribute_value_2 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_POD_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_attribute_value_3 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_attribute_value_1 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_attribute_value_2 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_POD_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_attribute_value_3 : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, UInt16*, UInt32, Win32cr::Foundation::HRESULT),
    get_attribute_value_length : Proc(ID2D1SvgElement*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1SvgElement, lpVtbl : ID2D1SvgElementVtbl* do
    GUID = LibC::GUID.new(0xac7b67a6_u32, 0x183e_u16, 0x49c1_u16, StaticArray[0xa8_u8, 0x23_u8, 0xe_u8, 0xbe_u8, 0x40_u8, 0xb0_u8, 0xdb_u8, 0x29_u8])
    def query_interface(this : ID2D1SvgElement*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgElement*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgElement*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgElement*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_document(this : ID2D1SvgElement*, document : Void**) : Void
      @lpVtbl.try &.value.get_document.call(this, document)
    end
    def get_tag_name(this : ID2D1SvgElement*, name : UInt16*, nameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag_name.call(this, name, nameCount)
    end
    def get_tag_name_length(this : ID2D1SvgElement*) : UInt32
      @lpVtbl.try &.value.get_tag_name_length.call(this)
    end
    def is_text_content(this : ID2D1SvgElement*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_text_content.call(this)
    end
    def get_parent(this : ID2D1SvgElement*, parent : Void**) : Void
      @lpVtbl.try &.value.get_parent.call(this, parent)
    end
    def has_children(this : ID2D1SvgElement*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_children.call(this)
    end
    def get_first_child(this : ID2D1SvgElement*, child : Void**) : Void
      @lpVtbl.try &.value.get_first_child.call(this, child)
    end
    def get_last_child(this : ID2D1SvgElement*, child : Void**) : Void
      @lpVtbl.try &.value.get_last_child.call(this, child)
    end
    def get_previous_child(this : ID2D1SvgElement*, referenceChild : Void*, previousChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_child.call(this, referenceChild, previousChild)
    end
    def get_next_child(this : ID2D1SvgElement*, referenceChild : Void*, nextChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_child.call(this, referenceChild, nextChild)
    end
    def insert_child_before(this : ID2D1SvgElement*, newChild : Void*, referenceChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_child_before.call(this, newChild, referenceChild)
    end
    def append_child(this : ID2D1SvgElement*, newChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_child.call(this, newChild)
    end
    def replace_child(this : ID2D1SvgElement*, newChild : Void*, oldChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replace_child.call(this, newChild, oldChild)
    end
    def remove_child(this : ID2D1SvgElement*, oldChild : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_child.call(this, oldChild)
    end
    def create_child(this : ID2D1SvgElement*, tagName : Win32cr::Foundation::PWSTR, newChild : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_child.call(this, tagName, newChild)
    end
    def is_attribute_specified(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, inherited : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_attribute_specified.call(this, name, inherited)
    end
    def get_specified_attribute_count(this : ID2D1SvgElement*) : UInt32
      @lpVtbl.try &.value.get_specified_attribute_count.call(this)
    end
    def get_specified_attribute_name(this : ID2D1SvgElement*, index : UInt32, name : UInt16*, nameCount : UInt32, inherited : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified_attribute_name.call(this, index, name, nameCount, inherited)
    end
    def get_specified_attribute_name_length(this : ID2D1SvgElement*, index : UInt32, nameLength : UInt32*, inherited : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_specified_attribute_name_length.call(this, index, nameLength, inherited)
    end
    def remove_attribute(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_attribute.call(this, name)
    end
    def set_text_value(this : ID2D1SvgElement*, name : UInt16*, nameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_value.call(this, name, nameCount)
    end
    def get_text_value(this : ID2D1SvgElement*, name : UInt16*, nameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_value.call(this, name, nameCount)
    end
    def get_text_value_length(this : ID2D1SvgElement*) : UInt32
      @lpVtbl.try &.value.get_text_value_length.call(this)
    end
    def set_attribute_value_1(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_attribute_value_1.call(this, name, value)
    end
    def set_attribute_value_2(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_POD_TYPE, value : Void*, valueSizeInBytes : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_attribute_value_2.call(this, name, type__, value, valueSizeInBytes)
    end
    def set_attribute_value_3(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, value : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_attribute_value_3.call(this, name, type__, value)
    end
    def get_attribute_value_1(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_value_1.call(this, name, riid, value)
    end
    def get_attribute_value_2(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_POD_TYPE, value : Void*, valueSizeInBytes : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_value_2.call(this, name, type__, value, valueSizeInBytes)
    end
    def get_attribute_value_3(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, value : UInt16*, valueCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_value_3.call(this, name, type__, value, valueCount)
    end
    def get_attribute_value_length(this : ID2D1SvgElement*, name : Win32cr::Foundation::PWSTR, type__ : Win32cr::Graphics::Direct2D::D2D1_SVG_ATTRIBUTE_STRING_TYPE, valueLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_value_length.call(this, name, type__, valueLength)
    end

  end

  @[Extern]
  record ID2D1SvgDocumentVtbl,
    query_interface : Proc(ID2D1SvgDocument*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgDocument*, UInt32),
    release : Proc(ID2D1SvgDocument*, UInt32),
    get_factory : Proc(ID2D1SvgDocument*, Void**, Void),
    set_viewport_size : Proc(ID2D1SvgDocument*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, Win32cr::Foundation::HRESULT),
    get_viewport_size : Proc(ID2D1SvgDocument*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    set_root : Proc(ID2D1SvgDocument*, Void*, Win32cr::Foundation::HRESULT),
    get_root : Proc(ID2D1SvgDocument*, Void**, Void),
    find_element_by_id : Proc(ID2D1SvgDocument*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    serialize : Proc(ID2D1SvgDocument*, Void*, Void*, Win32cr::Foundation::HRESULT),
    deserialize : Proc(ID2D1SvgDocument*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_paint : Proc(ID2D1SvgDocument*, Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_dash_array : Proc(ID2D1SvgDocument*, Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_point_collection : Proc(ID2D1SvgDocument*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_data : Proc(ID2D1SvgDocument*, Float32*, UInt32, Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1SvgDocument, lpVtbl : ID2D1SvgDocumentVtbl* do
    GUID = LibC::GUID.new(0x86b88e4d_u32, 0xafa4_u16, 0x4d7b_u16, StaticArray[0x88_u8, 0xe4_u8, 0x68_u8, 0xa5_u8, 0x1c_u8, 0x4a_u8, 0xa_u8, 0xec_u8])
    def query_interface(this : ID2D1SvgDocument*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgDocument*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgDocument*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgDocument*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_viewport_size(this : ID2D1SvgDocument*, viewportSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_viewport_size.call(this, viewportSize)
    end
    def get_viewport_size(this : ID2D1SvgDocument*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_viewport_size.call(this)
    end
    def set_root(this : ID2D1SvgDocument*, root : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_root.call(this, root)
    end
    def get_root(this : ID2D1SvgDocument*, root : Void**) : Void
      @lpVtbl.try &.value.get_root.call(this, root)
    end
    def find_element_by_id(this : ID2D1SvgDocument*, id : Win32cr::Foundation::PWSTR, svgElement : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_element_by_id.call(this, id, svgElement)
    end
    def serialize(this : ID2D1SvgDocument*, outputXmlStream : Void*, subtree : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serialize.call(this, outputXmlStream, subtree)
    end
    def deserialize(this : ID2D1SvgDocument*, inputXmlStream : Void*, subtree : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deserialize.call(this, inputXmlStream, subtree)
    end
    def create_paint(this : ID2D1SvgDocument*, paintType : Win32cr::Graphics::Direct2D::D2D1_SVG_PAINT_TYPE, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, id : Win32cr::Foundation::PWSTR, paint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_paint.call(this, paintType, color, id, paint)
    end
    def create_stroke_dash_array(this : ID2D1SvgDocument*, dashes : Win32cr::Graphics::Direct2D::D2D1_SVG_LENGTH*, dashesCount : UInt32, strokeDashArray : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_dash_array.call(this, dashes, dashesCount, strokeDashArray)
    end
    def create_point_collection(this : ID2D1SvgDocument*, points : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pointsCount : UInt32, pointCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_point_collection.call(this, points, pointsCount, pointCollection)
    end
    def create_path_data(this : ID2D1SvgDocument*, segmentData : Float32*, segmentDataCount : UInt32, commands : Win32cr::Graphics::Direct2D::D2D1_SVG_PATH_COMMAND*, commandsCount : UInt32, pathData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_data.call(this, segmentData, segmentDataCount, commands, commandsCount, pathData)
    end

  end

  @[Extern]
  record ID2D1InkStyleVtbl,
    query_interface : Proc(ID2D1InkStyle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1InkStyle*, UInt32),
    release : Proc(ID2D1InkStyle*, UInt32),
    get_factory : Proc(ID2D1InkStyle*, Void**, Void),
    set_nib_transform : Proc(ID2D1InkStyle*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_nib_transform : Proc(ID2D1InkStyle*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_nib_shape : Proc(ID2D1InkStyle*, Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE, Void),
    get_nib_shape : Proc(ID2D1InkStyle*, Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE)


  @[Extern]
  record ID2D1InkStyle, lpVtbl : ID2D1InkStyleVtbl* do
    GUID = LibC::GUID.new(0xbae8b344_u32, 0x23fc_u16, 0x4071_u16, StaticArray[0x8c_u8, 0xb5_u8, 0xd0_u8, 0x5d_u8, 0x6f_u8, 0x7_u8, 0x38_u8, 0x48_u8])
    def query_interface(this : ID2D1InkStyle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1InkStyle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1InkStyle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1InkStyle*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_nib_transform(this : ID2D1InkStyle*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_nib_transform.call(this, transform)
    end
    def get_nib_transform(this : ID2D1InkStyle*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_nib_transform.call(this, transform)
    end
    def set_nib_shape(this : ID2D1InkStyle*, nibShape : Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE) : Void
      @lpVtbl.try &.value.set_nib_shape.call(this, nibShape)
    end
    def get_nib_shape(this : ID2D1InkStyle*) : Win32cr::Graphics::Direct2D::D2D1_INK_NIB_SHAPE
      @lpVtbl.try &.value.get_nib_shape.call(this)
    end

  end

  @[Extern]
  record ID2D1InkVtbl,
    query_interface : Proc(ID2D1Ink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Ink*, UInt32),
    release : Proc(ID2D1Ink*, UInt32),
    get_factory : Proc(ID2D1Ink*, Void**, Void),
    set_start_point : Proc(ID2D1Ink*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void),
    get_start_point : Proc(ID2D1Ink*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT),
    add_segments : Proc(ID2D1Ink*, Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, UInt32, Win32cr::Foundation::HRESULT),
    remove_segments_at_end : Proc(ID2D1Ink*, UInt32, Win32cr::Foundation::HRESULT),
    set_segments : Proc(ID2D1Ink*, UInt32, Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, UInt32, Win32cr::Foundation::HRESULT),
    set_segment_at_end : Proc(ID2D1Ink*, Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, Win32cr::Foundation::HRESULT),
    get_segment_count : Proc(ID2D1Ink*, UInt32),
    get_segments : Proc(ID2D1Ink*, UInt32, Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, UInt32, Win32cr::Foundation::HRESULT),
    stream_as_geometry : Proc(ID2D1Ink*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Void*, Win32cr::Foundation::HRESULT),
    get_bounds : Proc(ID2D1Ink*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Ink, lpVtbl : ID2D1InkVtbl* do
    GUID = LibC::GUID.new(0xb499923b_u32, 0x7029_u16, 0x478f_u16, StaticArray[0xa8_u8, 0xb3_u8, 0x43_u8, 0x2c_u8, 0x7c_u8, 0x5f_u8, 0x53_u8, 0x12_u8])
    def query_interface(this : ID2D1Ink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Ink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Ink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Ink*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_start_point(this : ID2D1Ink*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*) : Void
      @lpVtbl.try &.value.set_start_point.call(this, startPoint)
    end
    def get_start_point(this : ID2D1Ink*) : Win32cr::Graphics::Direct2D::D2D1_INK_POINT
      @lpVtbl.try &.value.get_start_point.call(this)
    end
    def add_segments(this : ID2D1Ink*, segments : Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, segmentsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_segments.call(this, segments, segmentsCount)
    end
    def remove_segments_at_end(this : ID2D1Ink*, segmentsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_segments_at_end.call(this, segmentsCount)
    end
    def set_segments(this : ID2D1Ink*, startSegment : UInt32, segments : Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, segmentsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_segments.call(this, startSegment, segments, segmentsCount)
    end
    def set_segment_at_end(this : ID2D1Ink*, segment : Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_segment_at_end.call(this, segment)
    end
    def get_segment_count(this : ID2D1Ink*) : UInt32
      @lpVtbl.try &.value.get_segment_count.call(this)
    end
    def get_segments(this : ID2D1Ink*, startSegment : UInt32, segments : Win32cr::Graphics::Direct2D::D2D1_INK_BEZIER_SEGMENT*, segmentsCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segments.call(this, startSegment, segments, segmentsCount)
    end
    def stream_as_geometry(this : ID2D1Ink*, inkStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, flatteningTolerance : Float32, geometrySink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream_as_geometry.call(this, inkStyle, worldTransform, flatteningTolerance, geometrySink)
    end
    def get_bounds(this : ID2D1Ink*, inkStyle : Void*, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, inkStyle, worldTransform, bounds)
    end

  end

  @[Extern]
  record ID2D1GradientMeshVtbl,
    query_interface : Proc(ID2D1GradientMesh*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GradientMesh*, UInt32),
    release : Proc(ID2D1GradientMesh*, UInt32),
    get_factory : Proc(ID2D1GradientMesh*, Void**, Void),
    get_patch_count : Proc(ID2D1GradientMesh*, UInt32),
    get_patches : Proc(ID2D1GradientMesh*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GradientMesh, lpVtbl : ID2D1GradientMeshVtbl* do
    GUID = LibC::GUID.new(0xf292e401_u32, 0xc050_u16, 0x4cde_u16, StaticArray[0x83_u8, 0xd7_u8, 0x4_u8, 0x96_u8, 0x2d_u8, 0x3b_u8, 0x23_u8, 0xc2_u8])
    def query_interface(this : ID2D1GradientMesh*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GradientMesh*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GradientMesh*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GradientMesh*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_patch_count(this : ID2D1GradientMesh*) : UInt32
      @lpVtbl.try &.value.get_patch_count.call(this)
    end
    def get_patches(this : ID2D1GradientMesh*, startIndex : UInt32, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_patches.call(this, startIndex, patches, patchesCount)
    end

  end

  @[Extern]
  record ID2D1ImageSourceVtbl,
    query_interface : Proc(ID2D1ImageSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ImageSource*, UInt32),
    release : Proc(ID2D1ImageSource*, UInt32),
    get_factory : Proc(ID2D1ImageSource*, Void**, Void),
    offer_resources : Proc(ID2D1ImageSource*, Win32cr::Foundation::HRESULT),
    try_reclaim_resources : Proc(ID2D1ImageSource*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ImageSource, lpVtbl : ID2D1ImageSourceVtbl* do
    GUID = LibC::GUID.new(0xc9b664e5_u32, 0x74a1_u16, 0x4378_u16, StaticArray[0x9a_u8, 0xc2_u8, 0xee_u8, 0xfc_u8, 0x37_u8, 0xa3_u8, 0xf4_u8, 0xd8_u8])
    def query_interface(this : ID2D1ImageSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ImageSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ImageSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1ImageSource*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def offer_resources(this : ID2D1ImageSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.offer_resources.call(this)
    end
    def try_reclaim_resources(this : ID2D1ImageSource*, resourcesDiscarded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.try_reclaim_resources.call(this, resourcesDiscarded)
    end

  end

  @[Extern]
  record ID2D1ImageSourceFromWicVtbl,
    query_interface : Proc(ID2D1ImageSourceFromWic*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ImageSourceFromWic*, UInt32),
    release : Proc(ID2D1ImageSourceFromWic*, UInt32),
    get_factory : Proc(ID2D1ImageSourceFromWic*, Void**, Void),
    offer_resources : Proc(ID2D1ImageSourceFromWic*, Win32cr::Foundation::HRESULT),
    try_reclaim_resources : Proc(ID2D1ImageSourceFromWic*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    ensure_cached : Proc(ID2D1ImageSourceFromWic*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    trim_cache : Proc(ID2D1ImageSourceFromWic*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Foundation::HRESULT),
    get_source : Proc(ID2D1ImageSourceFromWic*, Void**, Void)


  @[Extern]
  record ID2D1ImageSourceFromWic, lpVtbl : ID2D1ImageSourceFromWicVtbl* do
    GUID = LibC::GUID.new(0x77395441_u32, 0x1c8f_u16, 0x4555_u16, StaticArray[0x86_u8, 0x83_u8, 0xf5_u8, 0xd_u8, 0xab_u8, 0xf_u8, 0xe7_u8, 0x92_u8])
    def query_interface(this : ID2D1ImageSourceFromWic*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ImageSourceFromWic*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ImageSourceFromWic*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1ImageSourceFromWic*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def offer_resources(this : ID2D1ImageSourceFromWic*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.offer_resources.call(this)
    end
    def try_reclaim_resources(this : ID2D1ImageSourceFromWic*, resourcesDiscarded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.try_reclaim_resources.call(this, resourcesDiscarded)
    end
    def ensure_cached(this : ID2D1ImageSourceFromWic*, rectangleToFill : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ensure_cached.call(this, rectangleToFill)
    end
    def trim_cache(this : ID2D1ImageSourceFromWic*, rectangleToPreserve : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.trim_cache.call(this, rectangleToPreserve)
    end
    def get_source(this : ID2D1ImageSourceFromWic*, wicBitmapSource : Void**) : Void
      @lpVtbl.try &.value.get_source.call(this, wicBitmapSource)
    end

  end

  @[Extern]
  record ID2D1TransformedImageSourceVtbl,
    query_interface : Proc(ID2D1TransformedImageSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1TransformedImageSource*, UInt32),
    release : Proc(ID2D1TransformedImageSource*, UInt32),
    get_factory : Proc(ID2D1TransformedImageSource*, Void**, Void),
    get_source : Proc(ID2D1TransformedImageSource*, Void**, Void),
    get_properties : Proc(ID2D1TransformedImageSource*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void)


  @[Extern]
  record ID2D1TransformedImageSource, lpVtbl : ID2D1TransformedImageSourceVtbl* do
    GUID = LibC::GUID.new(0x7f1f79e5_u32, 0x2796_u16, 0x416c_u16, StaticArray[0x8f_u8, 0x55_u8, 0x70_u8, 0xf_u8, 0x91_u8, 0x14_u8, 0x45_u8, 0xe5_u8])
    def query_interface(this : ID2D1TransformedImageSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1TransformedImageSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1TransformedImageSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1TransformedImageSource*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_source(this : ID2D1TransformedImageSource*, imageSource : Void**) : Void
      @lpVtbl.try &.value.get_source.call(this, imageSource)
    end
    def get_properties(this : ID2D1TransformedImageSource*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*) : Void
      @lpVtbl.try &.value.get_properties.call(this, properties)
    end

  end

  @[Extern]
  record ID2D1LookupTable3DVtbl,
    query_interface : Proc(ID2D1LookupTable3D*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1LookupTable3D*, UInt32),
    release : Proc(ID2D1LookupTable3D*, UInt32),
    get_factory : Proc(ID2D1LookupTable3D*, Void**, Void)


  @[Extern]
  record ID2D1LookupTable3D, lpVtbl : ID2D1LookupTable3DVtbl* do
    GUID = LibC::GUID.new(0x53dd9855_u32, 0xa3b0_u16, 0x4d5b_u16, StaticArray[0x82_u8, 0xe1_u8, 0x26_u8, 0xe2_u8, 0x5c_u8, 0x5e_u8, 0x57_u8, 0x97_u8])
    def query_interface(this : ID2D1LookupTable3D*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1LookupTable3D*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1LookupTable3D*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1LookupTable3D*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end

  end

  @[Extern]
  record ID2D1DeviceContext2Vtbl,
    query_interface : Proc(ID2D1DeviceContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext2*, UInt32),
    release : Proc(ID2D1DeviceContext2*, UInt32),
    get_factory : Proc(ID2D1DeviceContext2*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext2*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext2*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext2*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext2*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext2*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext2*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext2*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext2*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext2*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext2*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext2*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext2*, Void),
    flush : Proc(ID2D1DeviceContext2*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext2*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext2*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext2*, Void),
    clear : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext2*, Void),
    end_draw : Proc(ID2D1DeviceContext2*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext2*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext2*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext2*, UInt32),
    is_supported : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext2*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext2*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext2*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext2*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext2*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext2*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext2*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext2*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext2*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext2*, Void*, Void*, Void),
    create_ink : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void**, Win32cr::Foundation::HRESULT),
    create_ink_style : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_mesh : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_wic : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_lookup_table3_d : Proc(ID2D1DeviceContext2*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_dxgi : Proc(ID2D1DeviceContext2*, Void**, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    get_gradient_mesh_world_bounds : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1DeviceContext2*, Void*, Void*, Void*, Void),
    draw_gradient_mesh : Proc(ID2D1DeviceContext2*, Void*, Void),
    draw_gdi_metafile_2 : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_transformed_image_source : Proc(ID2D1DeviceContext2*, Void*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DeviceContext2, lpVtbl : ID2D1DeviceContext2Vtbl* do
    GUID = LibC::GUID.new(0x394ea6a3_u32, 0xc34_u16, 0x4321_u16, StaticArray[0x95_u8, 0xb_u8, 0x6c_u8, 0xa2_u8, 0xf_u8, 0xb_u8, 0xe6_u8, 0xc7_u8])
    def query_interface(this : ID2D1DeviceContext2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext2*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext2*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext2*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext2*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext2*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext2*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext2*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext2*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext2*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext2*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext2*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext2*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext2*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext2*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext2*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext2*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext2*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext2*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext2*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext2*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext2*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext2*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext2*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext2*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext2*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext2*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext2*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext2*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext2*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext2*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext2*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext2*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext2*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext2*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext2*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext2*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext2*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext2*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext2*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext2*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext2*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext2*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext2*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext2*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext2*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext2*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext2*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext2*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext2*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext2*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext2*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext2*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext2*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext2*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext2*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext2*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext2*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext2*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext2*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext2*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext2*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext2*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext2*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext2*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext2*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext2*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext2*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext2*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext2*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext2*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext2*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext2*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext2*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext2*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext2*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext2*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext2*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext2*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext2*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext2*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext2*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext2*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext2*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext2*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext2*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext2*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end
    def create_ink(this : ID2D1DeviceContext2*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, ink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink.call(this, startPoint, ink)
    end
    def create_ink_style(this : ID2D1DeviceContext2*, inkStyleProperties : Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, inkStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink_style.call(this, inkStyleProperties, inkStyle)
    end
    def create_gradient_mesh(this : ID2D1DeviceContext2*, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32, gradientMesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_mesh.call(this, patches, patchesCount, gradientMesh)
    end
    def create_image_source_from_wic(this : ID2D1DeviceContext2*, wicBitmapSource : Void*, loadingOptions : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode : Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_wic.call(this, wicBitmapSource, loadingOptions, alphaMode, imageSource)
    end
    def create_lookup_table3_d(this : ID2D1DeviceContext2*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_image_source_from_dxgi(this : ID2D1DeviceContext2*, surfaces : Void**, surfaceCount : UInt32, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, options : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_dxgi.call(this, surfaces, surfaceCount, colorSpace, options, imageSource)
    end
    def get_gradient_mesh_world_bounds(this : ID2D1DeviceContext2*, gradientMesh : Void*, pBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gradient_mesh_world_bounds.call(this, gradientMesh, pBounds)
    end
    def draw_ink(this : ID2D1DeviceContext2*, ink : Void*, brush : Void*, inkStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1DeviceContext2*, gradientMesh : Void*) : Void
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1DeviceContext2*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def create_transformed_image_source(this : ID2D1DeviceContext2*, imageSource : Void*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedImageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_image_source.call(this, imageSource, properties, transformedImageSource)
    end

  end

  @[Extern]
  record ID2D1Device2Vtbl,
    query_interface : Proc(ID2D1Device2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device2*, UInt32),
    release : Proc(ID2D1Device2*, UInt32),
    get_factory : Proc(ID2D1Device2*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device2*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device2*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device2*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device2*, UInt64),
    clear_resources : Proc(ID2D1Device2*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device2*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device2*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device2*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1_2 : Proc(ID2D1Device2*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    flush_device_contexts : Proc(ID2D1Device2*, Void*, Void),
    get_dxgi_device : Proc(ID2D1Device2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Device2, lpVtbl : ID2D1Device2Vtbl* do
    GUID = LibC::GUID.new(0xa44472e1_u32, 0x8dfb_u16, 0x4e60_u16, StaticArray[0x84_u8, 0x92_u8, 0x6e_u8, 0x28_u8, 0x61_u8, 0xc9_u8, 0xca_u8, 0x8b_u8])
    def query_interface(this : ID2D1Device2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device2*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device2*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device2*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device2*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device2*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device2*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device2*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device2*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device2*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end
    def create_device_context_1_2(this : ID2D1Device2*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_2.call(this, options, deviceContext2)
    end
    def flush_device_contexts(this : ID2D1Device2*, bitmap : Void*) : Void
      @lpVtbl.try &.value.flush_device_contexts.call(this, bitmap)
    end
    def get_dxgi_device(this : ID2D1Device2*, dxgiDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dxgi_device.call(this, dxgiDevice)
    end

  end

  @[Extern]
  record ID2D1Factory3Vtbl,
    query_interface : Proc(ID2D1Factory3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory3*, UInt32),
    release : Proc(ID2D1Factory3*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory3*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory3*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory3*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory3*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory3*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory3*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory3*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory3*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory3*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory3*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_2 : Proc(ID2D1Factory3*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory3, lpVtbl : ID2D1Factory3Vtbl* do
    GUID = LibC::GUID.new(0x869759f_u32, 0x4f00_u16, 0x413f_u16, StaticArray[0xb0_u8, 0x3e_u8, 0x2b_u8, 0xda_u8, 0x45_u8, 0x40_u8, 0x4d_u8, 0xf_u8])
    def query_interface(this : ID2D1Factory3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory3*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory3*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory3*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory3*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory3*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory3*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory3*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory3*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory3*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory3*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory3*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory3*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory3*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory3*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory3*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory3*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory3*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory3*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory3*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory3*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory3*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory3*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory3*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory3*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end
    def create_device_1_2(this : ID2D1Factory3*, dxgiDevice : Void*, d2dDevice2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_2.call(this, dxgiDevice, d2dDevice2)
    end

  end

  @[Extern]
  record ID2D1CommandSink2Vtbl,
    query_interface : Proc(ID2D1CommandSink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink2*, UInt32),
    release : Proc(ID2D1CommandSink2*, UInt32),
    begin_draw : Proc(ID2D1CommandSink2*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink2*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink2*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink2*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink2*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink2*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink2*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink2*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink2*, Win32cr::Foundation::HRESULT),
    set_primitive_blend1 : Proc(ID2D1CommandSink2*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1CommandSink2*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    draw_gradient_mesh : Proc(ID2D1CommandSink2*, Void*, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_2 : Proc(ID2D1CommandSink2*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink2, lpVtbl : ID2D1CommandSink2Vtbl* do
    GUID = LibC::GUID.new(0x3bab440e_u32, 0x417e_u16, 0x47df_u16, StaticArray[0xa2_u8, 0xe2_u8, 0xbc_u8, 0xb_u8, 0xe6_u8, 0xa0_u8, 0x9_u8, 0x16_u8])
    def query_interface(this : ID2D1CommandSink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink2*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink2*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink2*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink2*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink2*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink2*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink2*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink2*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink2*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink2*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink2*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink2*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink2*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink2*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink2*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink2*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink2*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink2*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink2*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink2*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink2*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def set_primitive_blend1(this : ID2D1CommandSink2*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend1.call(this, primitiveBlend)
    end
    def draw_ink(this : ID2D1CommandSink2*, ink : Void*, brush : Void*, inkStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1CommandSink2*, gradientMesh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1CommandSink2*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end

  end

  @[Extern]
  record ID2D1GdiMetafile1Vtbl,
    query_interface : Proc(ID2D1GdiMetafile1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GdiMetafile1*, UInt32),
    release : Proc(ID2D1GdiMetafile1*, UInt32),
    get_factory : Proc(ID2D1GdiMetafile1*, Void**, Void),
    stream : Proc(ID2D1GdiMetafile1*, Void*, Win32cr::Foundation::HRESULT),
    get_bounds : Proc(ID2D1GdiMetafile1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_dpi : Proc(ID2D1GdiMetafile1*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_source_bounds : Proc(ID2D1GdiMetafile1*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GdiMetafile1, lpVtbl : ID2D1GdiMetafile1Vtbl* do
    GUID = LibC::GUID.new(0x2e69f9e8_u32, 0xdd3f_u16, 0x4bf9_u16, StaticArray[0x95_u8, 0xba_u8, 0xc0_u8, 0x4f_u8, 0x49_u8, 0xd7_u8, 0x88_u8, 0xdf_u8])
    def query_interface(this : ID2D1GdiMetafile1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GdiMetafile1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GdiMetafile1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1GdiMetafile1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def stream(this : ID2D1GdiMetafile1*, sink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream.call(this, sink)
    end
    def get_bounds(this : ID2D1GdiMetafile1*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bounds.call(this, bounds)
    end
    def get_dpi(this : ID2D1GdiMetafile1*, dpiX : Float32*, dpiY : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_source_bounds(this : ID2D1GdiMetafile1*, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_bounds.call(this, bounds)
    end

  end

  @[Extern]
  record ID2D1GdiMetafileSink1Vtbl,
    query_interface : Proc(ID2D1GdiMetafileSink1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1GdiMetafileSink1*, UInt32),
    release : Proc(ID2D1GdiMetafileSink1*, UInt32),
    process_record_1 : Proc(ID2D1GdiMetafileSink1*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    process_record_2 : Proc(ID2D1GdiMetafileSink1*, UInt32, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1GdiMetafileSink1, lpVtbl : ID2D1GdiMetafileSink1Vtbl* do
    GUID = LibC::GUID.new(0xfd0ecb6b_u32, 0x91e6_u16, 0x411e_u16, StaticArray[0x86_u8, 0x55_u8, 0x39_u8, 0x5e_u8, 0x76_u8, 0xf_u8, 0x91_u8, 0xb4_u8])
    def query_interface(this : ID2D1GdiMetafileSink1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1GdiMetafileSink1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1GdiMetafileSink1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def process_record_1(this : ID2D1GdiMetafileSink1*, recordType : UInt32, recordData : Void*, recordDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_record_1.call(this, recordType, recordData, recordDataSize)
    end
    def process_record_2(this : ID2D1GdiMetafileSink1*, recordType : UInt32, recordData : Void*, recordDataSize : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_record_2.call(this, recordType, recordData, recordDataSize, flags)
    end

  end

  @[Extern]
  record ID2D1SpriteBatchVtbl,
    query_interface : Proc(ID2D1SpriteBatch*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SpriteBatch*, UInt32),
    release : Proc(ID2D1SpriteBatch*, UInt32),
    get_factory : Proc(ID2D1SpriteBatch*, Void**, Void),
    add_sprites : Proc(ID2D1SpriteBatch*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_sprites : Proc(ID2D1SpriteBatch*, UInt32, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_sprites : Proc(ID2D1SpriteBatch*, UInt32, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    get_sprite_count : Proc(ID2D1SpriteBatch*, UInt32),
    clear : Proc(ID2D1SpriteBatch*, Void)


  @[Extern]
  record ID2D1SpriteBatch, lpVtbl : ID2D1SpriteBatchVtbl* do
    GUID = LibC::GUID.new(0x4dc583bf_u32, 0x3a10_u16, 0x438a_u16, StaticArray[0x87_u8, 0x22_u8, 0xe9_u8, 0x76_u8, 0x52_u8, 0x24_u8, 0xf1_u8, 0xf1_u8])
    def query_interface(this : ID2D1SpriteBatch*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SpriteBatch*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SpriteBatch*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SpriteBatch*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def add_sprites(this : ID2D1SpriteBatch*, spriteCount : UInt32, destinationRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, colors : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, transforms : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, destinationRectanglesStride : UInt32, sourceRectanglesStride : UInt32, colorsStride : UInt32, transformsStride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_sprites.call(this, spriteCount, destinationRectangles, sourceRectangles, colors, transforms, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride)
    end
    def set_sprites(this : ID2D1SpriteBatch*, startIndex : UInt32, spriteCount : UInt32, destinationRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, colors : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, transforms : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, destinationRectanglesStride : UInt32, sourceRectanglesStride : UInt32, colorsStride : UInt32, transformsStride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sprites.call(this, startIndex, spriteCount, destinationRectangles, sourceRectangles, colors, transforms, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride)
    end
    def get_sprites(this : ID2D1SpriteBatch*, startIndex : UInt32, spriteCount : UInt32, destinationRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_U*, colors : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, transforms : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sprites.call(this, startIndex, spriteCount, destinationRectangles, sourceRectangles, colors, transforms)
    end
    def get_sprite_count(this : ID2D1SpriteBatch*) : UInt32
      @lpVtbl.try &.value.get_sprite_count.call(this)
    end
    def clear(this : ID2D1SpriteBatch*) : Void
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record ID2D1DeviceContext3Vtbl,
    query_interface : Proc(ID2D1DeviceContext3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext3*, UInt32),
    release : Proc(ID2D1DeviceContext3*, UInt32),
    get_factory : Proc(ID2D1DeviceContext3*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext3*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext3*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext3*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext3*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext3*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext3*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext3*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext3*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext3*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext3*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext3*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext3*, Void),
    flush : Proc(ID2D1DeviceContext3*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext3*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext3*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext3*, Void),
    clear : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext3*, Void),
    end_draw : Proc(ID2D1DeviceContext3*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext3*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext3*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext3*, UInt32),
    is_supported : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext3*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext3*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext3*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext3*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext3*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext3*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext3*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext3*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext3*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext3*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext3*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext3*, Void*, Void*, Void),
    create_ink : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void**, Win32cr::Foundation::HRESULT),
    create_ink_style : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_mesh : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_wic : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_lookup_table3_d : Proc(ID2D1DeviceContext3*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_dxgi : Proc(ID2D1DeviceContext3*, Void**, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    get_gradient_mesh_world_bounds : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1DeviceContext3*, Void*, Void*, Void*, Void),
    draw_gradient_mesh : Proc(ID2D1DeviceContext3*, Void*, Void),
    draw_gdi_metafile_2 : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_transformed_image_source : Proc(ID2D1DeviceContext3*, Void*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_sprite_batch : Proc(ID2D1DeviceContext3*, Void**, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1DeviceContext3*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Void)


  @[Extern]
  record ID2D1DeviceContext3, lpVtbl : ID2D1DeviceContext3Vtbl* do
    GUID = LibC::GUID.new(0x235a7496_u32, 0x8351_u16, 0x414c_u16, StaticArray[0xbc_u8, 0xd4_u8, 0x66_u8, 0x72_u8, 0xab_u8, 0x2d_u8, 0x8e_u8, 0x0_u8])
    def query_interface(this : ID2D1DeviceContext3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext3*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext3*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext3*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext3*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext3*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext3*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext3*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext3*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext3*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext3*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext3*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext3*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext3*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext3*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext3*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext3*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext3*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext3*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext3*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext3*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext3*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext3*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext3*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext3*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext3*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext3*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext3*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext3*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext3*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext3*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext3*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext3*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext3*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext3*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext3*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext3*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext3*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext3*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext3*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext3*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext3*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext3*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext3*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext3*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext3*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext3*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext3*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext3*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext3*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext3*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext3*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext3*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext3*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext3*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext3*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext3*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext3*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext3*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext3*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext3*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext3*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext3*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext3*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext3*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext3*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext3*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext3*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext3*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext3*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext3*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext3*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext3*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext3*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext3*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext3*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext3*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext3*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext3*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext3*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext3*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext3*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext3*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext3*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext3*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext3*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext3*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end
    def create_ink(this : ID2D1DeviceContext3*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, ink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink.call(this, startPoint, ink)
    end
    def create_ink_style(this : ID2D1DeviceContext3*, inkStyleProperties : Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, inkStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink_style.call(this, inkStyleProperties, inkStyle)
    end
    def create_gradient_mesh(this : ID2D1DeviceContext3*, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32, gradientMesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_mesh.call(this, patches, patchesCount, gradientMesh)
    end
    def create_image_source_from_wic(this : ID2D1DeviceContext3*, wicBitmapSource : Void*, loadingOptions : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode : Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_wic.call(this, wicBitmapSource, loadingOptions, alphaMode, imageSource)
    end
    def create_lookup_table3_d(this : ID2D1DeviceContext3*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_image_source_from_dxgi(this : ID2D1DeviceContext3*, surfaces : Void**, surfaceCount : UInt32, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, options : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_dxgi.call(this, surfaces, surfaceCount, colorSpace, options, imageSource)
    end
    def get_gradient_mesh_world_bounds(this : ID2D1DeviceContext3*, gradientMesh : Void*, pBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gradient_mesh_world_bounds.call(this, gradientMesh, pBounds)
    end
    def draw_ink(this : ID2D1DeviceContext3*, ink : Void*, brush : Void*, inkStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1DeviceContext3*, gradientMesh : Void*) : Void
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1DeviceContext3*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def create_transformed_image_source(this : ID2D1DeviceContext3*, imageSource : Void*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedImageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_image_source.call(this, imageSource, properties, transformedImageSource)
    end
    def create_sprite_batch(this : ID2D1DeviceContext3*, spriteBatch : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sprite_batch.call(this, spriteBatch)
    end
    def draw_sprite_batch(this : ID2D1DeviceContext3*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Void
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end

  end

  @[Extern]
  record ID2D1Device3Vtbl,
    query_interface : Proc(ID2D1Device3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device3*, UInt32),
    release : Proc(ID2D1Device3*, UInt32),
    get_factory : Proc(ID2D1Device3*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device3*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device3*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device3*, UInt64),
    clear_resources : Proc(ID2D1Device3*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1_2 : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    flush_device_contexts : Proc(ID2D1Device3*, Void*, Void),
    get_dxgi_device : Proc(ID2D1Device3*, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_2_2 : Proc(ID2D1Device3*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Device3, lpVtbl : ID2D1Device3Vtbl* do
    GUID = LibC::GUID.new(0x852f2087_u32, 0x802c_u16, 0x4037_u16, StaticArray[0xab_u8, 0x60_u8, 0xff_u8, 0x2e_u8, 0x7e_u8, 0xe6_u8, 0xfc_u8, 0x1_u8])
    def query_interface(this : ID2D1Device3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device3*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device3*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device3*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device3*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device3*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device3*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device3*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device3*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device3*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end
    def create_device_context_1_2(this : ID2D1Device3*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_2.call(this, options, deviceContext2)
    end
    def flush_device_contexts(this : ID2D1Device3*, bitmap : Void*) : Void
      @lpVtbl.try &.value.flush_device_contexts.call(this, bitmap)
    end
    def get_dxgi_device(this : ID2D1Device3*, dxgiDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dxgi_device.call(this, dxgiDevice)
    end
    def create_device_context_2_2(this : ID2D1Device3*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_2.call(this, options, deviceContext3)
    end

  end

  @[Extern]
  record ID2D1Factory4Vtbl,
    query_interface : Proc(ID2D1Factory4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory4*, UInt32),
    release : Proc(ID2D1Factory4*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory4*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory4*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory4*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory4*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory4*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory4*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory4*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory4*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory4*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory4*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory4*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory4*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory4*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory4*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_2 : Proc(ID2D1Factory4*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_2 : Proc(ID2D1Factory4*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory4, lpVtbl : ID2D1Factory4Vtbl* do
    GUID = LibC::GUID.new(0xbd4ec2d2_u32, 0x662_u16, 0x4bee_u16, StaticArray[0xba_u8, 0x8e_u8, 0x6f_u8, 0x29_u8, 0xf0_u8, 0x32_u8, 0xe0_u8, 0x96_u8])
    def query_interface(this : ID2D1Factory4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory4*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory4*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory4*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory4*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory4*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory4*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory4*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory4*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory4*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory4*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory4*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory4*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory4*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory4*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory4*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory4*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory4*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory4*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory4*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory4*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory4*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory4*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory4*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory4*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end
    def create_device_1_2(this : ID2D1Factory4*, dxgiDevice : Void*, d2dDevice2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_2.call(this, dxgiDevice, d2dDevice2)
    end
    def create_device_2_2(this : ID2D1Factory4*, dxgiDevice : Void*, d2dDevice3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_2.call(this, dxgiDevice, d2dDevice3)
    end

  end

  @[Extern]
  record ID2D1CommandSink3Vtbl,
    query_interface : Proc(ID2D1CommandSink3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink3*, UInt32),
    release : Proc(ID2D1CommandSink3*, UInt32),
    begin_draw : Proc(ID2D1CommandSink3*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink3*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink3*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink3*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink3*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink3*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink3*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink3*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink3*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink3*, Win32cr::Foundation::HRESULT),
    set_primitive_blend1 : Proc(ID2D1CommandSink3*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1CommandSink3*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    draw_gradient_mesh : Proc(ID2D1CommandSink3*, Void*, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_2 : Proc(ID2D1CommandSink3*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1CommandSink3*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink3, lpVtbl : ID2D1CommandSink3Vtbl* do
    GUID = LibC::GUID.new(0x18079135_u32, 0x4cf3_u16, 0x4868_u16, StaticArray[0xbc_u8, 0x8e_u8, 0x6_u8, 0x6_u8, 0x7e_u8, 0x6d_u8, 0x24_u8, 0x2d_u8])
    def query_interface(this : ID2D1CommandSink3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink3*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink3*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink3*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink3*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink3*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink3*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink3*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink3*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink3*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink3*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink3*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink3*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink3*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink3*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink3*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink3*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink3*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink3*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink3*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink3*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink3*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def set_primitive_blend1(this : ID2D1CommandSink3*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend1.call(this, primitiveBlend)
    end
    def draw_ink(this : ID2D1CommandSink3*, ink : Void*, brush : Void*, inkStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1CommandSink3*, gradientMesh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1CommandSink3*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def draw_sprite_batch(this : ID2D1CommandSink3*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end

  end

  @[Extern]
  record ID2D1SvgGlyphStyleVtbl,
    query_interface : Proc(ID2D1SvgGlyphStyle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1SvgGlyphStyle*, UInt32),
    release : Proc(ID2D1SvgGlyphStyle*, UInt32),
    get_factory : Proc(ID2D1SvgGlyphStyle*, Void**, Void),
    set_fill : Proc(ID2D1SvgGlyphStyle*, Void*, Win32cr::Foundation::HRESULT),
    get_fill : Proc(ID2D1SvgGlyphStyle*, Void**, Void),
    set_stroke : Proc(ID2D1SvgGlyphStyle*, Void*, Float32, Float32*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    get_stroke_dashes_count : Proc(ID2D1SvgGlyphStyle*, UInt32),
    get_stroke : Proc(ID2D1SvgGlyphStyle*, Void**, Float32*, Float32*, UInt32, Float32*, Void)


  @[Extern]
  record ID2D1SvgGlyphStyle, lpVtbl : ID2D1SvgGlyphStyleVtbl* do
    GUID = LibC::GUID.new(0xaf671749_u32, 0xd241_u16, 0x4db8_u16, StaticArray[0x8e_u8, 0x41_u8, 0xdc_u8, 0xc2_u8, 0xe5_u8, 0xc1_u8, 0xa4_u8, 0x38_u8])
    def query_interface(this : ID2D1SvgGlyphStyle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1SvgGlyphStyle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1SvgGlyphStyle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1SvgGlyphStyle*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def set_fill(this : ID2D1SvgGlyphStyle*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_fill.call(this, brush)
    end
    def get_fill(this : ID2D1SvgGlyphStyle*, brush : Void**) : Void
      @lpVtbl.try &.value.get_fill.call(this, brush)
    end
    def set_stroke(this : ID2D1SvgGlyphStyle*, brush : Void*, strokeWidth : Float32, dashes : Float32*, dashesCount : UInt32, dashOffset : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stroke.call(this, brush, strokeWidth, dashes, dashesCount, dashOffset)
    end
    def get_stroke_dashes_count(this : ID2D1SvgGlyphStyle*) : UInt32
      @lpVtbl.try &.value.get_stroke_dashes_count.call(this)
    end
    def get_stroke(this : ID2D1SvgGlyphStyle*, brush : Void**, strokeWidth : Float32*, dashes : Float32*, dashesCount : UInt32, dashOffset : Float32*) : Void
      @lpVtbl.try &.value.get_stroke.call(this, brush, strokeWidth, dashes, dashesCount, dashOffset)
    end

  end

  @[Extern]
  record ID2D1DeviceContext4Vtbl,
    query_interface : Proc(ID2D1DeviceContext4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext4*, UInt32),
    release : Proc(ID2D1DeviceContext4*, UInt32),
    get_factory : Proc(ID2D1DeviceContext4*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext4*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext4*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext4*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext4*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext4*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext4*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext4*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext4*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext4*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext4*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext4*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext4*, Void),
    flush : Proc(ID2D1DeviceContext4*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext4*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext4*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext4*, Void),
    clear : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext4*, Void),
    end_draw : Proc(ID2D1DeviceContext4*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext4*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext4*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext4*, UInt32),
    is_supported : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext4*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext4*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext4*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext4*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext4*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext4*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext4*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext4*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext4*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext4*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext4*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext4*, Void*, Void*, Void),
    create_ink : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void**, Win32cr::Foundation::HRESULT),
    create_ink_style : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_mesh : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_wic : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_lookup_table3_d : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_dxgi : Proc(ID2D1DeviceContext4*, Void**, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    get_gradient_mesh_world_bounds : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1DeviceContext4*, Void*, Void*, Void*, Void),
    draw_gradient_mesh : Proc(ID2D1DeviceContext4*, Void*, Void),
    draw_gdi_metafile_2 : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_transformed_image_source : Proc(ID2D1DeviceContext4*, Void*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_sprite_batch : Proc(ID2D1DeviceContext4*, Void**, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1DeviceContext4*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Void),
    create_svg_glyph_style : Proc(ID2D1DeviceContext4*, Void**, Win32cr::Foundation::HRESULT),
    draw_text_2 : Proc(ID2D1DeviceContext4*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_2 : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_color_bitmap_glyph_run : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void),
    draw_svg_glyph_run : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Void*, UInt32, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    get_color_bitmap_glyph_image : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    get_svg_glyph_image : Proc(ID2D1DeviceContext4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DeviceContext4, lpVtbl : ID2D1DeviceContext4Vtbl* do
    GUID = LibC::GUID.new(0x8c427831_u32, 0x3d90_u16, 0x4476_u16, StaticArray[0xb6_u8, 0x47_u8, 0xc4_u8, 0xfa_u8, 0xe3_u8, 0x49_u8, 0xe4_u8, 0xdb_u8])
    def query_interface(this : ID2D1DeviceContext4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext4*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext4*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext4*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext4*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext4*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext4*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext4*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext4*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext4*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext4*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext4*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext4*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext4*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext4*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext4*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext4*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext4*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext4*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext4*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext4*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext4*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext4*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext4*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext4*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext4*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext4*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext4*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext4*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext4*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext4*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext4*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext4*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext4*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext4*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext4*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext4*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext4*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext4*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext4*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext4*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext4*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext4*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext4*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext4*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext4*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext4*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext4*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext4*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext4*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext4*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext4*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext4*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext4*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext4*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext4*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext4*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext4*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext4*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext4*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext4*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext4*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext4*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext4*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext4*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext4*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext4*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext4*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext4*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext4*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext4*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext4*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext4*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext4*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext4*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext4*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext4*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext4*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext4*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext4*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext4*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext4*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext4*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext4*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext4*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext4*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext4*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end
    def create_ink(this : ID2D1DeviceContext4*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, ink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink.call(this, startPoint, ink)
    end
    def create_ink_style(this : ID2D1DeviceContext4*, inkStyleProperties : Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, inkStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink_style.call(this, inkStyleProperties, inkStyle)
    end
    def create_gradient_mesh(this : ID2D1DeviceContext4*, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32, gradientMesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_mesh.call(this, patches, patchesCount, gradientMesh)
    end
    def create_image_source_from_wic(this : ID2D1DeviceContext4*, wicBitmapSource : Void*, loadingOptions : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode : Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_wic.call(this, wicBitmapSource, loadingOptions, alphaMode, imageSource)
    end
    def create_lookup_table3_d(this : ID2D1DeviceContext4*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_image_source_from_dxgi(this : ID2D1DeviceContext4*, surfaces : Void**, surfaceCount : UInt32, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, options : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_dxgi.call(this, surfaces, surfaceCount, colorSpace, options, imageSource)
    end
    def get_gradient_mesh_world_bounds(this : ID2D1DeviceContext4*, gradientMesh : Void*, pBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gradient_mesh_world_bounds.call(this, gradientMesh, pBounds)
    end
    def draw_ink(this : ID2D1DeviceContext4*, ink : Void*, brush : Void*, inkStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1DeviceContext4*, gradientMesh : Void*) : Void
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1DeviceContext4*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def create_transformed_image_source(this : ID2D1DeviceContext4*, imageSource : Void*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedImageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_image_source.call(this, imageSource, properties, transformedImageSource)
    end
    def create_sprite_batch(this : ID2D1DeviceContext4*, spriteBatch : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sprite_batch.call(this, spriteBatch)
    end
    def draw_sprite_batch(this : ID2D1DeviceContext4*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Void
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end
    def create_svg_glyph_style(this : ID2D1DeviceContext4*, svgGlyphStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_svg_glyph_style.call(this, svgGlyphStyle)
    end
    def draw_text_2(this : ID2D1DeviceContext4*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_2.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode)
    end
    def draw_text_layout_2(this : ID2D1DeviceContext4*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_2.call(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options)
    end
    def draw_color_bitmap_glyph_run(this : ID2D1DeviceContext4*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bitmapSnapOption : Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
      @lpVtbl.try &.value.draw_color_bitmap_glyph_run.call(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption)
    end
    def draw_svg_glyph_run(this : ID2D1DeviceContext4*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_svg_glyph_run.call(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode)
    end
    def get_color_bitmap_glyph_image(this : ID2D1DeviceContext4*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, dpiX : Float32, dpiY : Float32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_bitmap_glyph_image.call(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage)
    end
    def get_svg_glyph_image(this : ID2D1DeviceContext4*, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_svg_glyph_image.call(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage)
    end

  end

  @[Extern]
  record ID2D1Device4Vtbl,
    query_interface : Proc(ID2D1Device4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device4*, UInt32),
    release : Proc(ID2D1Device4*, UInt32),
    get_factory : Proc(ID2D1Device4*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device4*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device4*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device4*, UInt64),
    clear_resources : Proc(ID2D1Device4*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1_2 : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    flush_device_contexts : Proc(ID2D1Device4*, Void*, Void),
    get_dxgi_device : Proc(ID2D1Device4*, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_2_2 : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1 : Proc(ID2D1Device4*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_color_glyph_cache_memory : Proc(ID2D1Device4*, UInt64, Void),
    get_maximum_color_glyph_cache_memory : Proc(ID2D1Device4*, UInt64)


  @[Extern]
  record ID2D1Device4, lpVtbl : ID2D1Device4Vtbl* do
    GUID = LibC::GUID.new(0xd7bdb159_u32, 0x5683_u16, 0x4a46_u16, StaticArray[0xbc_u8, 0x9c_u8, 0x72_u8, 0xdc_u8, 0x72_u8, 0xb_u8, 0x85_u8, 0x8b_u8])
    def query_interface(this : ID2D1Device4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device4*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device4*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device4*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device4*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device4*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device4*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device4*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device4*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device4*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end
    def create_device_context_1_2(this : ID2D1Device4*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_2.call(this, options, deviceContext2)
    end
    def flush_device_contexts(this : ID2D1Device4*, bitmap : Void*) : Void
      @lpVtbl.try &.value.flush_device_contexts.call(this, bitmap)
    end
    def get_dxgi_device(this : ID2D1Device4*, dxgiDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dxgi_device.call(this, dxgiDevice)
    end
    def create_device_context_2_2(this : ID2D1Device4*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_2.call(this, options, deviceContext3)
    end
    def create_device_context_1(this : ID2D1Device4*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1.call(this, options, deviceContext4)
    end
    def set_maximum_color_glyph_cache_memory(this : ID2D1Device4*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_color_glyph_cache_memory.call(this, maximumInBytes)
    end
    def get_maximum_color_glyph_cache_memory(this : ID2D1Device4*) : UInt64
      @lpVtbl.try &.value.get_maximum_color_glyph_cache_memory.call(this)
    end

  end

  @[Extern]
  record ID2D1Factory5Vtbl,
    query_interface : Proc(ID2D1Factory5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory5*, UInt32),
    release : Proc(ID2D1Factory5*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory5*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory5*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory5*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory5*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory5*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory5*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory5*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory5*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory5*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory5*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory5*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_2 : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_2 : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1 : Proc(ID2D1Factory5*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory5, lpVtbl : ID2D1Factory5Vtbl* do
    GUID = LibC::GUID.new(0xc4349994_u32, 0x838e_u16, 0x4b0f_u16, StaticArray[0x8c_u8, 0xab_u8, 0x44_u8, 0x99_u8, 0x7d_u8, 0x9e_u8, 0xea_u8, 0xcc_u8])
    def query_interface(this : ID2D1Factory5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory5*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory5*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory5*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory5*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory5*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory5*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory5*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory5*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory5*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory5*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory5*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory5*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory5*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory5*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory5*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory5*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory5*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory5*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory5*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory5*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory5*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory5*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory5*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory5*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end
    def create_device_1_2(this : ID2D1Factory5*, dxgiDevice : Void*, d2dDevice2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_2.call(this, dxgiDevice, d2dDevice2)
    end
    def create_device_2_2(this : ID2D1Factory5*, dxgiDevice : Void*, d2dDevice3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_2.call(this, dxgiDevice, d2dDevice3)
    end
    def create_device_1(this : ID2D1Factory5*, dxgiDevice : Void*, d2dDevice4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1.call(this, dxgiDevice, d2dDevice4)
    end

  end

  @[Extern]
  record ID2D1CommandSink4Vtbl,
    query_interface : Proc(ID2D1CommandSink4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink4*, UInt32),
    release : Proc(ID2D1CommandSink4*, UInt32),
    begin_draw : Proc(ID2D1CommandSink4*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink4*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink4*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink4*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink4*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink4*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink4*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink4*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink4*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink4*, Win32cr::Foundation::HRESULT),
    set_primitive_blend1 : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1CommandSink4*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    draw_gradient_mesh : Proc(ID2D1CommandSink4*, Void*, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_2 : Proc(ID2D1CommandSink4*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1CommandSink4*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Win32cr::Foundation::HRESULT),
    set_primitive_blend2 : Proc(ID2D1CommandSink4*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink4, lpVtbl : ID2D1CommandSink4Vtbl* do
    GUID = LibC::GUID.new(0xc78a6519_u32, 0x40d6_u16, 0x4218_u16, StaticArray[0xb2_u8, 0xde_u8, 0xbe_u8, 0xee_u8, 0xb7_u8, 0x44_u8, 0xbb_u8, 0x3e_u8])
    def query_interface(this : ID2D1CommandSink4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink4*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink4*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink4*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink4*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink4*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink4*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink4*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink4*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink4*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink4*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink4*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink4*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink4*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink4*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink4*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink4*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink4*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink4*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink4*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink4*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink4*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def set_primitive_blend1(this : ID2D1CommandSink4*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend1.call(this, primitiveBlend)
    end
    def draw_ink(this : ID2D1CommandSink4*, ink : Void*, brush : Void*, inkStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1CommandSink4*, gradientMesh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1CommandSink4*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def draw_sprite_batch(this : ID2D1CommandSink4*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end
    def set_primitive_blend2(this : ID2D1CommandSink4*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend2.call(this, primitiveBlend)
    end

  end

  @[Extern]
  record ID2D1ColorContext1Vtbl,
    query_interface : Proc(ID2D1ColorContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1ColorContext1*, UInt32),
    release : Proc(ID2D1ColorContext1*, UInt32),
    get_factory : Proc(ID2D1ColorContext1*, Void**, Void),
    get_color_space : Proc(ID2D1ColorContext1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE),
    get_profile_size : Proc(ID2D1ColorContext1*, UInt32),
    get_profile : Proc(ID2D1ColorContext1*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_color_context_type : Proc(ID2D1ColorContext1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_CONTEXT_TYPE),
    get_dxgi_color_space : Proc(ID2D1ColorContext1*, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE),
    get_simple_color_profile : Proc(ID2D1ColorContext1*, Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1ColorContext1, lpVtbl : ID2D1ColorContext1Vtbl* do
    GUID = LibC::GUID.new(0x1ab42875_u32, 0xc57f_u16, 0x4be9_u16, StaticArray[0xbd_u8, 0x85_u8, 0x9c_u8, 0xd7_u8, 0x8d_u8, 0x6f_u8, 0x55_u8, 0xee_u8])
    def query_interface(this : ID2D1ColorContext1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1ColorContext1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1ColorContext1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1ColorContext1*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def get_color_space(this : ID2D1ColorContext1*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE
      @lpVtbl.try &.value.get_color_space.call(this)
    end
    def get_profile_size(this : ID2D1ColorContext1*) : UInt32
      @lpVtbl.try &.value.get_profile_size.call(this)
    end
    def get_profile(this : ID2D1ColorContext1*, profile : UInt8*, profileSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_profile.call(this, profile, profileSize)
    end
    def get_color_context_type(this : ID2D1ColorContext1*) : Win32cr::Graphics::Direct2D::D2D1_COLOR_CONTEXT_TYPE
      @lpVtbl.try &.value.get_color_context_type.call(this)
    end
    def get_dxgi_color_space(this : ID2D1ColorContext1*) : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE
      @lpVtbl.try &.value.get_dxgi_color_space.call(this)
    end
    def get_simple_color_profile(this : ID2D1ColorContext1*, simpleProfile : Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_simple_color_profile.call(this, simpleProfile)
    end

  end

  @[Extern]
  record ID2D1DeviceContext5Vtbl,
    query_interface : Proc(ID2D1DeviceContext5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext5*, UInt32),
    release : Proc(ID2D1DeviceContext5*, UInt32),
    get_factory : Proc(ID2D1DeviceContext5*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext5*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext5*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext5*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext5*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext5*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext5*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext5*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext5*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext5*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext5*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext5*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext5*, Void),
    flush : Proc(ID2D1DeviceContext5*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext5*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext5*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext5*, Void),
    clear : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext5*, Void),
    end_draw : Proc(ID2D1DeviceContext5*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext5*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext5*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext5*, UInt32),
    is_supported : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext5*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext5*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext5*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext5*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext5*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext5*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext5*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext5*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext5*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext5*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext5*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext5*, Void*, Void*, Void),
    create_ink : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void**, Win32cr::Foundation::HRESULT),
    create_ink_style : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_mesh : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_wic : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_lookup_table3_d : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_dxgi : Proc(ID2D1DeviceContext5*, Void**, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    get_gradient_mesh_world_bounds : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1DeviceContext5*, Void*, Void*, Void*, Void),
    draw_gradient_mesh : Proc(ID2D1DeviceContext5*, Void*, Void),
    draw_gdi_metafile_2 : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_transformed_image_source : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_sprite_batch : Proc(ID2D1DeviceContext5*, Void**, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1DeviceContext5*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Void),
    create_svg_glyph_style : Proc(ID2D1DeviceContext5*, Void**, Win32cr::Foundation::HRESULT),
    draw_text_2 : Proc(ID2D1DeviceContext5*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_2 : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_color_bitmap_glyph_run : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void),
    draw_svg_glyph_run : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Void*, UInt32, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    get_color_bitmap_glyph_image : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    get_svg_glyph_image : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_svg_document : Proc(ID2D1DeviceContext5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, Void**, Win32cr::Foundation::HRESULT),
    draw_svg_document : Proc(ID2D1DeviceContext5*, Void*, Void),
    create_color_context_from_dxgi_color_space : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_simple_color_profile : Proc(ID2D1DeviceContext5*, Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1DeviceContext5, lpVtbl : ID2D1DeviceContext5Vtbl* do
    GUID = LibC::GUID.new(0x7836d248_u32, 0x68cc_u16, 0x4df6_u16, StaticArray[0xb9_u8, 0xe8_u8, 0xde_u8, 0x99_u8, 0x1b_u8, 0xf6_u8, 0x2e_u8, 0xb7_u8])
    def query_interface(this : ID2D1DeviceContext5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext5*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext5*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext5*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext5*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext5*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext5*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext5*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext5*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext5*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext5*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext5*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext5*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext5*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext5*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext5*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext5*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext5*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext5*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext5*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext5*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext5*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext5*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext5*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext5*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext5*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext5*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext5*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext5*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext5*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext5*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext5*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext5*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext5*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext5*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext5*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext5*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext5*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext5*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext5*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext5*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext5*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext5*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext5*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext5*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext5*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext5*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext5*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext5*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext5*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext5*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext5*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext5*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext5*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext5*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext5*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext5*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext5*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext5*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext5*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext5*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext5*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext5*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext5*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext5*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext5*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext5*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext5*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext5*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext5*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext5*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext5*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext5*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext5*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext5*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext5*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext5*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext5*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext5*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext5*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext5*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext5*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext5*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext5*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext5*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext5*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext5*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end
    def create_ink(this : ID2D1DeviceContext5*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, ink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink.call(this, startPoint, ink)
    end
    def create_ink_style(this : ID2D1DeviceContext5*, inkStyleProperties : Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, inkStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink_style.call(this, inkStyleProperties, inkStyle)
    end
    def create_gradient_mesh(this : ID2D1DeviceContext5*, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32, gradientMesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_mesh.call(this, patches, patchesCount, gradientMesh)
    end
    def create_image_source_from_wic(this : ID2D1DeviceContext5*, wicBitmapSource : Void*, loadingOptions : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode : Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_wic.call(this, wicBitmapSource, loadingOptions, alphaMode, imageSource)
    end
    def create_lookup_table3_d(this : ID2D1DeviceContext5*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_image_source_from_dxgi(this : ID2D1DeviceContext5*, surfaces : Void**, surfaceCount : UInt32, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, options : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_dxgi.call(this, surfaces, surfaceCount, colorSpace, options, imageSource)
    end
    def get_gradient_mesh_world_bounds(this : ID2D1DeviceContext5*, gradientMesh : Void*, pBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gradient_mesh_world_bounds.call(this, gradientMesh, pBounds)
    end
    def draw_ink(this : ID2D1DeviceContext5*, ink : Void*, brush : Void*, inkStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1DeviceContext5*, gradientMesh : Void*) : Void
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1DeviceContext5*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def create_transformed_image_source(this : ID2D1DeviceContext5*, imageSource : Void*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedImageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_image_source.call(this, imageSource, properties, transformedImageSource)
    end
    def create_sprite_batch(this : ID2D1DeviceContext5*, spriteBatch : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sprite_batch.call(this, spriteBatch)
    end
    def draw_sprite_batch(this : ID2D1DeviceContext5*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Void
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end
    def create_svg_glyph_style(this : ID2D1DeviceContext5*, svgGlyphStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_svg_glyph_style.call(this, svgGlyphStyle)
    end
    def draw_text_2(this : ID2D1DeviceContext5*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_2.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode)
    end
    def draw_text_layout_2(this : ID2D1DeviceContext5*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_2.call(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options)
    end
    def draw_color_bitmap_glyph_run(this : ID2D1DeviceContext5*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bitmapSnapOption : Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
      @lpVtbl.try &.value.draw_color_bitmap_glyph_run.call(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption)
    end
    def draw_svg_glyph_run(this : ID2D1DeviceContext5*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_svg_glyph_run.call(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode)
    end
    def get_color_bitmap_glyph_image(this : ID2D1DeviceContext5*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, dpiX : Float32, dpiY : Float32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_bitmap_glyph_image.call(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage)
    end
    def get_svg_glyph_image(this : ID2D1DeviceContext5*, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_svg_glyph_image.call(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage)
    end
    def create_svg_document(this : ID2D1DeviceContext5*, inputXmlStream : Void*, viewportSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, svgDocument : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_svg_document.call(this, inputXmlStream, viewportSize, svgDocument)
    end
    def draw_svg_document(this : ID2D1DeviceContext5*, svgDocument : Void*) : Void
      @lpVtbl.try &.value.draw_svg_document.call(this, svgDocument)
    end
    def create_color_context_from_dxgi_color_space(this : ID2D1DeviceContext5*, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_dxgi_color_space.call(this, colorSpace, colorContext)
    end
    def create_color_context_from_simple_color_profile(this : ID2D1DeviceContext5*, simpleProfile : Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_simple_color_profile.call(this, simpleProfile, colorContext)
    end

  end

  @[Extern]
  record ID2D1Device5Vtbl,
    query_interface : Proc(ID2D1Device5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device5*, UInt32),
    release : Proc(ID2D1Device5*, UInt32),
    get_factory : Proc(ID2D1Device5*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device5*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device5*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device5*, UInt64),
    clear_resources : Proc(ID2D1Device5*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1_2 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    flush_device_contexts : Proc(ID2D1Device5*, Void*, Void),
    get_dxgi_device : Proc(ID2D1Device5*, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_2_2 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_color_glyph_cache_memory : Proc(ID2D1Device5*, UInt64, Void),
    get_maximum_color_glyph_cache_memory : Proc(ID2D1Device5*, UInt64),
    create_device_context_2 : Proc(ID2D1Device5*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Device5, lpVtbl : ID2D1Device5Vtbl* do
    GUID = LibC::GUID.new(0xd55ba0a4_u32, 0x6405_u16, 0x4694_u16, StaticArray[0xae_u8, 0xf5_u8, 0x8_u8, 0xee_u8, 0x1a_u8, 0x43_u8, 0x58_u8, 0xb4_u8])
    def query_interface(this : ID2D1Device5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device5*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device5*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device5*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device5*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device5*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device5*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device5*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end
    def create_device_context_1_2(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_2.call(this, options, deviceContext2)
    end
    def flush_device_contexts(this : ID2D1Device5*, bitmap : Void*) : Void
      @lpVtbl.try &.value.flush_device_contexts.call(this, bitmap)
    end
    def get_dxgi_device(this : ID2D1Device5*, dxgiDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dxgi_device.call(this, dxgiDevice)
    end
    def create_device_context_2_2(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_2.call(this, options, deviceContext3)
    end
    def create_device_context_1(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1.call(this, options, deviceContext4)
    end
    def set_maximum_color_glyph_cache_memory(this : ID2D1Device5*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_color_glyph_cache_memory.call(this, maximumInBytes)
    end
    def get_maximum_color_glyph_cache_memory(this : ID2D1Device5*) : UInt64
      @lpVtbl.try &.value.get_maximum_color_glyph_cache_memory.call(this)
    end
    def create_device_context_2(this : ID2D1Device5*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext5 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2.call(this, options, deviceContext5)
    end

  end

  @[Extern]
  record ID2D1Factory6Vtbl,
    query_interface : Proc(ID2D1Factory6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory6*, UInt32),
    release : Proc(ID2D1Factory6*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory6*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory6*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory6*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory6*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory6*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory6*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory6*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory6*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory6*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory6*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory6*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_2 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_2 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2 : Proc(ID2D1Factory6*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory6, lpVtbl : ID2D1Factory6Vtbl* do
    GUID = LibC::GUID.new(0xf9976f46_u32, 0xf642_u16, 0x44c1_u16, StaticArray[0x97_u8, 0xca_u8, 0xda_u8, 0x32_u8, 0xea_u8, 0x2a_u8, 0x26_u8, 0x35_u8])
    def query_interface(this : ID2D1Factory6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory6*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory6*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory6*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory6*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory6*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory6*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory6*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory6*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory6*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory6*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory6*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory6*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory6*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory6*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory6*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory6*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory6*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory6*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory6*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory6*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory6*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory6*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end
    def create_device_1_2(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_2.call(this, dxgiDevice, d2dDevice2)
    end
    def create_device_2_2(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_2.call(this, dxgiDevice, d2dDevice3)
    end
    def create_device_1(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1.call(this, dxgiDevice, d2dDevice4)
    end
    def create_device_2(this : ID2D1Factory6*, dxgiDevice : Void*, d2dDevice5 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2.call(this, dxgiDevice, d2dDevice5)
    end

  end

  @[Extern]
  record ID2D1CommandSink5Vtbl,
    query_interface : Proc(ID2D1CommandSink5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1CommandSink5*, UInt32),
    release : Proc(ID2D1CommandSink5*, UInt32),
    begin_draw : Proc(ID2D1CommandSink5*, Win32cr::Foundation::HRESULT),
    end_draw : Proc(ID2D1CommandSink5*, Win32cr::Foundation::HRESULT),
    set_antialias_mode : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_tags : Proc(ID2D1CommandSink5*, UInt64, UInt64, Win32cr::Foundation::HRESULT),
    set_text_antialias_mode : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    set_text_rendering_params : Proc(ID2D1CommandSink5*, Void*, Win32cr::Foundation::HRESULT),
    set_transform : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Win32cr::Foundation::HRESULT),
    set_primitive_blend : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    set_unit_mode : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Win32cr::Foundation::HRESULT),
    clear : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Foundation::HRESULT),
    draw_glyph_run : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_geometry : Proc(ID2D1CommandSink5*, Void*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_rectangle : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Win32cr::Foundation::HRESULT),
    draw_bitmap : Proc(ID2D1CommandSink5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Win32cr::Foundation::HRESULT),
    draw_image : Proc(ID2D1CommandSink5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_1 : Proc(ID2D1CommandSink5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Foundation::HRESULT),
    fill_mesh : Proc(ID2D1CommandSink5*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_opacity_mask : Proc(ID2D1CommandSink5*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    fill_geometry : Proc(ID2D1CommandSink5*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    fill_rectangle : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Foundation::HRESULT),
    push_axis_aligned_clip : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Win32cr::Foundation::HRESULT),
    push_layer : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Win32cr::Foundation::HRESULT),
    pop_axis_aligned_clip : Proc(ID2D1CommandSink5*, Win32cr::Foundation::HRESULT),
    pop_layer : Proc(ID2D1CommandSink5*, Win32cr::Foundation::HRESULT),
    set_primitive_blend1 : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1CommandSink5*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    draw_gradient_mesh : Proc(ID2D1CommandSink5*, Void*, Win32cr::Foundation::HRESULT),
    draw_gdi_metafile_2 : Proc(ID2D1CommandSink5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1CommandSink5*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Win32cr::Foundation::HRESULT),
    set_primitive_blend2 : Proc(ID2D1CommandSink5*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Win32cr::Foundation::HRESULT),
    blend_image : Proc(ID2D1CommandSink5*, Void*, Win32cr::Graphics::Direct2D::Common::D2D1_BLEND_MODE, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1CommandSink5, lpVtbl : ID2D1CommandSink5Vtbl* do
    GUID = LibC::GUID.new(0x7047dd26_u32, 0xb1e7_u16, 0x44a7_u16, StaticArray[0x95_u8, 0x9a_u8, 0x83_u8, 0x49_u8, 0xe2_u8, 0x14_u8, 0x4f_u8, 0xa8_u8])
    def query_interface(this : ID2D1CommandSink5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1CommandSink5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1CommandSink5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_draw(this : ID2D1CommandSink5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1CommandSink5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this)
    end
    def set_antialias_mode(this : ID2D1CommandSink5*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def set_tags(this : ID2D1CommandSink5*, tag1 : UInt64, tag2 : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def set_text_antialias_mode(this : ID2D1CommandSink5*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def set_text_rendering_params(this : ID2D1CommandSink5*, textRenderingParams : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def set_transform(this : ID2D1CommandSink5*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def set_primitive_blend(this : ID2D1CommandSink5*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def set_unit_mode(this : ID2D1CommandSink5*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def clear(this : ID2D1CommandSink5*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, color)
    end
    def draw_glyph_run(this : ID2D1CommandSink5*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_glyph_run.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_line(this : ID2D1CommandSink5*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_geometry(this : ID2D1CommandSink5*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1CommandSink5*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def draw_bitmap(this : ID2D1CommandSink5*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_bitmap.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def draw_image(this : ID2D1CommandSink5*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1CommandSink5*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def fill_mesh(this : ID2D1CommandSink5*, mesh : Void*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask(this : ID2D1CommandSink5*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_opacity_mask.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def fill_geometry(this : ID2D1CommandSink5*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_rectangle(this : ID2D1CommandSink5*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def push_axis_aligned_clip(this : ID2D1CommandSink5*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def push_layer(this : ID2D1CommandSink5*, layerParameters1 : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_layer.call(this, layerParameters1, layer)
    end
    def pop_axis_aligned_clip(this : ID2D1CommandSink5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def pop_layer(this : ID2D1CommandSink5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def set_primitive_blend1(this : ID2D1CommandSink5*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend1.call(this, primitiveBlend)
    end
    def draw_ink(this : ID2D1CommandSink5*, ink : Void*, brush : Void*, inkStyle : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1CommandSink5*, gradientMesh : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1CommandSink5*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def draw_sprite_batch(this : ID2D1CommandSink5*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end
    def set_primitive_blend2(this : ID2D1CommandSink5*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_primitive_blend2.call(this, primitiveBlend)
    end
    def blend_image(this : ID2D1CommandSink5*, image : Void*, blendMode : Win32cr::Graphics::Direct2D::Common::D2D1_BLEND_MODE, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.blend_image.call(this, image, blendMode, targetOffset, imageRectangle, interpolationMode)
    end

  end

  @[Extern]
  record ID2D1DeviceContext6Vtbl,
    query_interface : Proc(ID2D1DeviceContext6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1DeviceContext6*, UInt32),
    release : Proc(ID2D1DeviceContext6*, UInt32),
    get_factory : Proc(ID2D1DeviceContext6*, Void**, Void),
    create_bitmap_1 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_1 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_bitmap : Proc(ID2D1DeviceContext6*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_1 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_solid_color_brush : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_1 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_GAMMA, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_linear_gradient_brush : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_radial_gradient_brush : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_compatible_render_target : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_layer : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, Void**, Win32cr::Foundation::HRESULT),
    create_mesh : Proc(ID2D1DeviceContext6*, Void**, Win32cr::Foundation::HRESULT),
    draw_line : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, Void*, Void),
    draw_rectangle : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Float32, Void*, Void),
    fill_rectangle : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void),
    draw_rounded_rectangle : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Float32, Void*, Void),
    fill_rounded_rectangle : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void*, Void),
    draw_ellipse : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Float32, Void*, Void),
    fill_ellipse : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void*, Void),
    draw_geometry : Proc(ID2D1DeviceContext6*, Void*, Void*, Float32, Void*, Void),
    fill_geometry : Proc(ID2D1DeviceContext6*, Void*, Void*, Void*, Void),
    fill_mesh : Proc(ID2D1DeviceContext6*, Void*, Void*, Void),
    fill_opacity_mask_1 : Proc(ID2D1DeviceContext6*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_bitmap_1 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    draw_text_1 : Proc(ID2D1DeviceContext6*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_1 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_glyph_run_1 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    set_transform : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    get_transform : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void),
    set_antialias_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    get_antialias_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE),
    set_text_antialias_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE, Void),
    get_text_antialias_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE),
    set_text_rendering_params : Proc(ID2D1DeviceContext6*, Void*, Void),
    get_text_rendering_params : Proc(ID2D1DeviceContext6*, Void**, Void),
    set_tags : Proc(ID2D1DeviceContext6*, UInt64, UInt64, Void),
    get_tags : Proc(ID2D1DeviceContext6*, UInt64*, UInt64*, Void),
    push_layer_1 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, Void*, Void),
    pop_layer : Proc(ID2D1DeviceContext6*, Void),
    flush : Proc(ID2D1DeviceContext6*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    save_drawing_state : Proc(ID2D1DeviceContext6*, Void*, Void),
    restore_drawing_state : Proc(ID2D1DeviceContext6*, Void*, Void),
    push_axis_aligned_clip : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE, Void),
    pop_axis_aligned_clip : Proc(ID2D1DeviceContext6*, Void),
    clear : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, Void),
    begin_draw : Proc(ID2D1DeviceContext6*, Void),
    end_draw : Proc(ID2D1DeviceContext6*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT),
    set_dpi : Proc(ID2D1DeviceContext6*, Float32, Float32, Void),
    get_dpi : Proc(ID2D1DeviceContext6*, Float32*, Float32*, Void),
    get_size : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F),
    get_pixel_size : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U),
    get_maximum_bitmap_size : Proc(ID2D1DeviceContext6*, UInt32),
    is_supported : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Foundation::BOOL),
    create_bitmap_2 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_wic_bitmap_2 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1DeviceContext6*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1DeviceContext6*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_from_dxgi_surface : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, Void**, Win32cr::Foundation::HRESULT),
    create_effect : Proc(ID2D1DeviceContext6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_stop_collection_2 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, UInt32, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_image_brush : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_bitmap_brush_2 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID2D1DeviceContext6*, Void**, Win32cr::Foundation::HRESULT),
    is_dxgi_format_supported : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Foundation::BOOL),
    is_buffer_precision_supported : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    get_image_local_bounds : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_image_world_bounds : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_glyph_run_world_bounds : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID2D1DeviceContext6*, Void**, Void),
    set_target : Proc(ID2D1DeviceContext6*, Void*, Void),
    get_target : Proc(ID2D1DeviceContext6*, Void**, Void),
    set_rendering_controls : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    get_rendering_controls : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*, Void),
    set_primitive_blend : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND, Void),
    get_primitive_blend : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND),
    set_unit_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE, Void),
    get_unit_mode : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE),
    draw_glyph_run_2 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, Void*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_image : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE, Void),
    draw_gdi_metafile_1 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Void),
    draw_bitmap_2 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Float32, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*, Void),
    push_layer_2 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, Void*, Void),
    invalidate_effect_input_rectangle : Proc(ID2D1DeviceContext6*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangle_count : Proc(ID2D1DeviceContext6*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_invalid_rectangles : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    get_effect_required_input_rectangles : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, UInt32, Win32cr::Foundation::HRESULT),
    fill_opacity_mask_2 : Proc(ID2D1DeviceContext6*, Void*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_filled_geometry_realization : Proc(ID2D1DeviceContext6*, Void*, Float32, Void**, Win32cr::Foundation::HRESULT),
    create_stroked_geometry_realization : Proc(ID2D1DeviceContext6*, Void*, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT),
    draw_geometry_realization : Proc(ID2D1DeviceContext6*, Void*, Void*, Void),
    create_ink : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, Void**, Win32cr::Foundation::HRESULT),
    create_ink_style : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_gradient_mesh : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_wic : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_lookup_table3_d : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_image_source_from_dxgi : Proc(ID2D1DeviceContext6*, Void**, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    get_gradient_mesh_world_bounds : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Foundation::HRESULT),
    draw_ink : Proc(ID2D1DeviceContext6*, Void*, Void*, Void*, Void),
    draw_gradient_mesh : Proc(ID2D1DeviceContext6*, Void*, Void),
    draw_gdi_metafile_2 : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void),
    create_transformed_image_source : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_sprite_batch : Proc(ID2D1DeviceContext6*, Void**, Win32cr::Foundation::HRESULT),
    draw_sprite_batch : Proc(ID2D1DeviceContext6*, Void*, UInt32, UInt32, Void*, Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS, Void),
    create_svg_glyph_style : Proc(ID2D1DeviceContext6*, Void**, Win32cr::Foundation::HRESULT),
    draw_text_2 : Proc(ID2D1DeviceContext6*, UInt16*, UInt32, Void*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    draw_text_layout_2 : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, Void),
    draw_color_bitmap_glyph_run : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION, Void),
    draw_svg_glyph_run : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, Void*, Void*, UInt32, Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, Void),
    get_color_bitmap_glyph_image : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Float32, Float32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    get_svg_glyph_image : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, Void*, Float32, UInt16, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void*, Void*, UInt32, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_svg_document : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, Void**, Win32cr::Foundation::HRESULT),
    draw_svg_document : Proc(ID2D1DeviceContext6*, Void*, Void),
    create_color_context_from_dxgi_color_space : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_simple_color_profile : Proc(ID2D1DeviceContext6*, Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, Void**, Win32cr::Foundation::HRESULT),
    blend_image : Proc(ID2D1DeviceContext6*, Void*, Win32cr::Graphics::Direct2D::Common::D2D1_BLEND_MODE, Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, Void)


  @[Extern]
  record ID2D1DeviceContext6, lpVtbl : ID2D1DeviceContext6Vtbl* do
    GUID = LibC::GUID.new(0x985f7e37_u32, 0x4ed0_u16, 0x4a19_u16, StaticArray[0x98_u8, 0xa3_u8, 0x15_u8, 0xb0_u8, 0xed_u8, 0xfd_u8, 0xe3_u8, 0x6_u8])
    def query_interface(this : ID2D1DeviceContext6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1DeviceContext6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1DeviceContext6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1DeviceContext6*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_bitmap_1(this : ID2D1DeviceContext6*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, srcData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_1.call(this, size, srcData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_1(this : ID2D1DeviceContext6*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_1.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_shared_bitmap(this : ID2D1DeviceContext6*, riid : LibC::GUID*, data : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_bitmap.call(this, riid, data, bitmapProperties, bitmap)
    end
    def create_bitmap_brush_1(this : ID2D1DeviceContext6*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_1.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_solid_color_brush(this : ID2D1DeviceContext6*, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, solidColorBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_solid_color_brush.call(this, color, brushProperties, solidColorBrush)
    end
    def create_gradient_stop_collection_1(this : ID2D1DeviceContext6*, gradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, gradientStopsCount : UInt32, colorInterpolationGamma : Win32cr::Graphics::Direct2D::D2D1_GAMMA, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, gradientStopCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_1.call(this, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection)
    end
    def create_linear_gradient_brush(this : ID2D1DeviceContext6*, linearGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, linearGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_linear_gradient_brush.call(this, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush)
    end
    def create_radial_gradient_brush(this : ID2D1DeviceContext6*, radialGradientBrushProperties : Win32cr::Graphics::Direct2D::D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, gradientStopCollection : Void*, radialGradientBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_radial_gradient_brush.call(this, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush)
    end
    def create_compatible_render_target(this : ID2D1DeviceContext6*, desiredSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, desiredPixelSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U*, desiredFormat : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT*, options : Win32cr::Graphics::Direct2D::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmapRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compatible_render_target.call(this, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget)
    end
    def create_layer(this : ID2D1DeviceContext6*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F*, layer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_layer.call(this, size, layer)
    end
    def create_mesh(this : ID2D1DeviceContext6*, mesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mesh.call(this, mesh)
    end
    def draw_line(this : ID2D1DeviceContext6*, point0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, point1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_line.call(this, point0, point1, brush, strokeWidth, strokeStyle)
    end
    def draw_rectangle(this : ID2D1DeviceContext6*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rectangle.call(this, rect, brush, strokeWidth, strokeStyle)
    end
    def fill_rectangle(this : ID2D1DeviceContext6*, rect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rectangle.call(this, rect, brush)
    end
    def draw_rounded_rectangle(this : ID2D1DeviceContext6*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_rounded_rectangle.call(this, roundedRect, brush, strokeWidth, strokeStyle)
    end
    def fill_rounded_rectangle(this : ID2D1DeviceContext6*, roundedRect : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_rounded_rectangle.call(this, roundedRect, brush)
    end
    def draw_ellipse(this : ID2D1DeviceContext6*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ellipse.call(this, ellipse, brush, strokeWidth, strokeStyle)
    end
    def fill_ellipse(this : ID2D1DeviceContext6*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_ellipse.call(this, ellipse, brush)
    end
    def draw_geometry(this : ID2D1DeviceContext6*, geometry : Void*, brush : Void*, strokeWidth : Float32, strokeStyle : Void*) : Void
      @lpVtbl.try &.value.draw_geometry.call(this, geometry, brush, strokeWidth, strokeStyle)
    end
    def fill_geometry(this : ID2D1DeviceContext6*, geometry : Void*, brush : Void*, opacityBrush : Void*) : Void
      @lpVtbl.try &.value.fill_geometry.call(this, geometry, brush, opacityBrush)
    end
    def fill_mesh(this : ID2D1DeviceContext6*, mesh : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.fill_mesh.call(this, mesh, brush)
    end
    def fill_opacity_mask_1(this : ID2D1DeviceContext6*, opacityMask : Void*, brush : Void*, content : Win32cr::Graphics::Direct2D::D2D1_OPACITY_MASK_CONTENT, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_1.call(this, opacityMask, brush, content, destinationRectangle, sourceRectangle)
    end
    def draw_bitmap_1(this : ID2D1DeviceContext6*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_1.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle)
    end
    def draw_text_1(this : ID2D1DeviceContext6*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_1.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode)
    end
    def draw_text_layout_1(this : ID2D1DeviceContext6*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_1.call(this, origin, textLayout, defaultFillBrush, options)
    end
    def draw_glyph_run_1(this : ID2D1DeviceContext6*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_1.call(this, baselineOrigin, glyphRun, foregroundBrush, measuringMode)
    end
    def set_transform(this : ID2D1DeviceContext6*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.set_transform.call(this, transform)
    end
    def get_transform(this : ID2D1DeviceContext6*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
      @lpVtbl.try &.value.get_transform.call(this, transform)
    end
    def set_antialias_mode(this : ID2D1DeviceContext6*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_antialias_mode.call(this, antialiasMode)
    end
    def get_antialias_mode(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_antialias_mode.call(this)
    end
    def set_text_antialias_mode(this : ID2D1DeviceContext6*, textAntialiasMode : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.set_text_antialias_mode.call(this, textAntialiasMode)
    end
    def get_text_antialias_mode(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::D2D1_TEXT_ANTIALIAS_MODE
      @lpVtbl.try &.value.get_text_antialias_mode.call(this)
    end
    def set_text_rendering_params(this : ID2D1DeviceContext6*, textRenderingParams : Void*) : Void
      @lpVtbl.try &.value.set_text_rendering_params.call(this, textRenderingParams)
    end
    def get_text_rendering_params(this : ID2D1DeviceContext6*, textRenderingParams : Void**) : Void
      @lpVtbl.try &.value.get_text_rendering_params.call(this, textRenderingParams)
    end
    def set_tags(this : ID2D1DeviceContext6*, tag1 : UInt64, tag2 : UInt64) : Void
      @lpVtbl.try &.value.set_tags.call(this, tag1, tag2)
    end
    def get_tags(this : ID2D1DeviceContext6*, tag1 : UInt64*, tag2 : UInt64*) : Void
      @lpVtbl.try &.value.get_tags.call(this, tag1, tag2)
    end
    def push_layer_1(this : ID2D1DeviceContext6*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_1.call(this, layerParameters, layer)
    end
    def pop_layer(this : ID2D1DeviceContext6*) : Void
      @lpVtbl.try &.value.pop_layer.call(this)
    end
    def flush(this : ID2D1DeviceContext6*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, tag1, tag2)
    end
    def save_drawing_state(this : ID2D1DeviceContext6*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.save_drawing_state.call(this, drawingStateBlock)
    end
    def restore_drawing_state(this : ID2D1DeviceContext6*, drawingStateBlock : Void*) : Void
      @lpVtbl.try &.value.restore_drawing_state.call(this, drawingStateBlock)
    end
    def push_axis_aligned_clip(this : ID2D1DeviceContext6*, clipRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, antialiasMode : Win32cr::Graphics::Direct2D::D2D1_ANTIALIAS_MODE) : Void
      @lpVtbl.try &.value.push_axis_aligned_clip.call(this, clipRect, antialiasMode)
    end
    def pop_axis_aligned_clip(this : ID2D1DeviceContext6*) : Void
      @lpVtbl.try &.value.pop_axis_aligned_clip.call(this)
    end
    def clear(this : ID2D1DeviceContext6*, clearColor : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Void
      @lpVtbl.try &.value.clear.call(this, clearColor)
    end
    def begin_draw(this : ID2D1DeviceContext6*) : Void
      @lpVtbl.try &.value.begin_draw.call(this)
    end
    def end_draw(this : ID2D1DeviceContext6*, tag1 : UInt64*, tag2 : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_draw.call(this, tag1, tag2)
    end
    def get_pixel_format(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::Common::D2D1_PIXEL_FORMAT
      @lpVtbl.try &.value.get_pixel_format.call(this)
    end
    def set_dpi(this : ID2D1DeviceContext6*, dpiX : Float32, dpiY : Float32) : Void
      @lpVtbl.try &.value.set_dpi.call(this, dpiX, dpiY)
    end
    def get_dpi(this : ID2D1DeviceContext6*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def get_size(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_pixel_size(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U
      @lpVtbl.try &.value.get_pixel_size.call(this)
    end
    def get_maximum_bitmap_size(this : ID2D1DeviceContext6*) : UInt32
      @lpVtbl.try &.value.get_maximum_bitmap_size.call(this)
    end
    def is_supported(this : ID2D1DeviceContext6*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_supported.call(this, renderTargetProperties)
    end
    def create_bitmap_2(this : ID2D1DeviceContext6*, size : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_U, sourceData : Void*, pitch : UInt32, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_2.call(this, size, sourceData, pitch, bitmapProperties, bitmap)
    end
    def create_bitmap_from_wic_bitmap_2(this : ID2D1DeviceContext6*, wicBitmapSource : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_wic_bitmap_2.call(this, wicBitmapSource, bitmapProperties, bitmap)
    end
    def create_color_context(this : ID2D1DeviceContext6*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1DeviceContext6*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1DeviceContext6*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def create_bitmap_from_dxgi_surface(this : ID2D1DeviceContext6*, surface : Void*, bitmapProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_PROPERTIES1*, bitmap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_from_dxgi_surface.call(this, surface, bitmapProperties, bitmap)
    end
    def create_effect(this : ID2D1DeviceContext6*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def create_gradient_stop_collection_2(this : ID2D1DeviceContext6*, straightAlphaGradientStops : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_STOP*, straightAlphaGradientStopsCount : UInt32, preInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, postInterpolationSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extendMode : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, colorInterpolationMode : Win32cr::Graphics::Direct2D::D2D1_COLOR_INTERPOLATION_MODE, gradientStopCollection1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_stop_collection_2.call(this, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1)
    end
    def create_image_brush(this : ID2D1DeviceContext6*, image : Void*, imageBrushProperties : Win32cr::Graphics::Direct2D::D2D1_IMAGE_BRUSH_PROPERTIES*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, imageBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_brush.call(this, image, imageBrushProperties, brushProperties, imageBrush)
    end
    def create_bitmap_brush_2(this : ID2D1DeviceContext6*, bitmap : Void*, bitmapBrushProperties : Win32cr::Graphics::Direct2D::D2D1_BITMAP_BRUSH_PROPERTIES1*, brushProperties : Win32cr::Graphics::Direct2D::D2D1_BRUSH_PROPERTIES*, bitmapBrush : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bitmap_brush_2.call(this, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush)
    end
    def create_command_list(this : ID2D1DeviceContext6*, commandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, commandList)
    end
    def is_dxgi_format_supported(this : ID2D1DeviceContext6*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_dxgi_format_supported.call(this, format)
    end
    def is_buffer_precision_supported(this : ID2D1DeviceContext6*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def get_image_local_bounds(this : ID2D1DeviceContext6*, image : Void*, localBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_local_bounds.call(this, image, localBounds)
    end
    def get_image_world_bounds(this : ID2D1DeviceContext6*, image : Void*, worldBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_image_world_bounds.call(this, image, worldBounds)
    end
    def get_glyph_run_world_bounds(this : ID2D1DeviceContext6*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_glyph_run_world_bounds.call(this, baselineOrigin, glyphRun, measuringMode, bounds)
    end
    def get_device(this : ID2D1DeviceContext6*, device : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, device)
    end
    def set_target(this : ID2D1DeviceContext6*, image : Void*) : Void
      @lpVtbl.try &.value.set_target.call(this, image)
    end
    def get_target(this : ID2D1DeviceContext6*, image : Void**) : Void
      @lpVtbl.try &.value.get_target.call(this, image)
    end
    def set_rendering_controls(this : ID2D1DeviceContext6*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.set_rendering_controls.call(this, renderingControls)
    end
    def get_rendering_controls(this : ID2D1DeviceContext6*, renderingControls : Win32cr::Graphics::Direct2D::D2D1_RENDERING_CONTROLS*) : Void
      @lpVtbl.try &.value.get_rendering_controls.call(this, renderingControls)
    end
    def set_primitive_blend(this : ID2D1DeviceContext6*, primitiveBlend : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND) : Void
      @lpVtbl.try &.value.set_primitive_blend.call(this, primitiveBlend)
    end
    def get_primitive_blend(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::D2D1_PRIMITIVE_BLEND
      @lpVtbl.try &.value.get_primitive_blend.call(this)
    end
    def set_unit_mode(this : ID2D1DeviceContext6*, unitMode : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE) : Void
      @lpVtbl.try &.value.set_unit_mode.call(this, unitMode)
    end
    def get_unit_mode(this : ID2D1DeviceContext6*) : Win32cr::Graphics::Direct2D::D2D1_UNIT_MODE
      @lpVtbl.try &.value.get_unit_mode.call(this)
    end
    def draw_glyph_run_2(this : ID2D1DeviceContext6*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, glyphRunDescription : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN_DESCRIPTION*, foregroundBrush : Void*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_glyph_run_2.call(this, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode)
    end
    def draw_image(this : ID2D1DeviceContext6*, image : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, compositeMode : Win32cr::Graphics::Direct2D::Common::D2D1_COMPOSITE_MODE) : Void
      @lpVtbl.try &.value.draw_image.call(this, image, targetOffset, imageRectangle, interpolationMode, compositeMode)
    end
    def draw_gdi_metafile_1(this : ID2D1DeviceContext6*, gdiMetafile : Void*, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_1.call(this, gdiMetafile, targetOffset)
    end
    def draw_bitmap_2(this : ID2D1DeviceContext6*, bitmap : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, opacity : Float32, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, perspectiveTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_4X4_F*) : Void
      @lpVtbl.try &.value.draw_bitmap_2.call(this, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform)
    end
    def push_layer_2(this : ID2D1DeviceContext6*, layerParameters : Win32cr::Graphics::Direct2D::D2D1_LAYER_PARAMETERS1*, layer : Void*) : Void
      @lpVtbl.try &.value.push_layer_2.call(this, layerParameters, layer)
    end
    def invalidate_effect_input_rectangle(this : ID2D1DeviceContext6*, effect : Void*, input : UInt32, inputRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_effect_input_rectangle.call(this, effect, input, inputRectangle)
    end
    def get_effect_invalid_rectangle_count(this : ID2D1DeviceContext6*, effect : Void*, rectangleCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangle_count.call(this, effect, rectangleCount)
    end
    def get_effect_invalid_rectangles(this : ID2D1DeviceContext6*, effect : Void*, rectangles : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectanglesCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_invalid_rectangles.call(this, effect, rectangles, rectanglesCount)
    end
    def get_effect_required_input_rectangles(this : ID2D1DeviceContext6*, renderEffect : Void*, renderImageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputDescriptions : Win32cr::Graphics::Direct2D::D2D1_EFFECT_INPUT_DESCRIPTION*, requiredInputRects : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, inputCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_required_input_rectangles.call(this, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount)
    end
    def fill_opacity_mask_2(this : ID2D1DeviceContext6*, opacityMask : Void*, brush : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.fill_opacity_mask_2.call(this, opacityMask, brush, destinationRectangle, sourceRectangle)
    end
    def create_filled_geometry_realization(this : ID2D1DeviceContext6*, geometry : Void*, flatteningTolerance : Float32, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_filled_geometry_realization.call(this, geometry, flatteningTolerance, geometryRealization)
    end
    def create_stroked_geometry_realization(this : ID2D1DeviceContext6*, geometry : Void*, flatteningTolerance : Float32, strokeWidth : Float32, strokeStyle : Void*, geometryRealization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroked_geometry_realization.call(this, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization)
    end
    def draw_geometry_realization(this : ID2D1DeviceContext6*, geometryRealization : Void*, brush : Void*) : Void
      @lpVtbl.try &.value.draw_geometry_realization.call(this, geometryRealization, brush)
    end
    def create_ink(this : ID2D1DeviceContext6*, startPoint : Win32cr::Graphics::Direct2D::D2D1_INK_POINT*, ink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink.call(this, startPoint, ink)
    end
    def create_ink_style(this : ID2D1DeviceContext6*, inkStyleProperties : Win32cr::Graphics::Direct2D::D2D1_INK_STYLE_PROPERTIES*, inkStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ink_style.call(this, inkStyleProperties, inkStyle)
    end
    def create_gradient_mesh(this : ID2D1DeviceContext6*, patches : Win32cr::Graphics::Direct2D::D2D1_GRADIENT_MESH_PATCH*, patchesCount : UInt32, gradientMesh : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gradient_mesh.call(this, patches, patchesCount, gradientMesh)
    end
    def create_image_source_from_wic(this : ID2D1DeviceContext6*, wicBitmapSource : Void*, loadingOptions : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alphaMode : Win32cr::Graphics::Direct2D::Common::D2D1_ALPHA_MODE, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_wic.call(this, wicBitmapSource, loadingOptions, alphaMode, imageSource)
    end
    def create_lookup_table3_d(this : ID2D1DeviceContext6*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_image_source_from_dxgi(this : ID2D1DeviceContext6*, surfaces : Void**, surfaceCount : UInt32, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, options : Win32cr::Graphics::Direct2D::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, imageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_image_source_from_dxgi.call(this, surfaces, surfaceCount, colorSpace, options, imageSource)
    end
    def get_gradient_mesh_world_bounds(this : ID2D1DeviceContext6*, gradientMesh : Void*, pBounds : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gradient_mesh_world_bounds.call(this, gradientMesh, pBounds)
    end
    def draw_ink(this : ID2D1DeviceContext6*, ink : Void*, brush : Void*, inkStyle : Void*) : Void
      @lpVtbl.try &.value.draw_ink.call(this, ink, brush, inkStyle)
    end
    def draw_gradient_mesh(this : ID2D1DeviceContext6*, gradientMesh : Void*) : Void
      @lpVtbl.try &.value.draw_gradient_mesh.call(this, gradientMesh)
    end
    def draw_gdi_metafile_2(this : ID2D1DeviceContext6*, gdiMetafile : Void*, destinationRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, sourceRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*) : Void
      @lpVtbl.try &.value.draw_gdi_metafile_2.call(this, gdiMetafile, destinationRectangle, sourceRectangle)
    end
    def create_transformed_image_source(this : ID2D1DeviceContext6*, imageSource : Void*, properties : Win32cr::Graphics::Direct2D::D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, transformedImageSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_image_source.call(this, imageSource, properties, transformedImageSource)
    end
    def create_sprite_batch(this : ID2D1DeviceContext6*, spriteBatch : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sprite_batch.call(this, spriteBatch)
    end
    def draw_sprite_batch(this : ID2D1DeviceContext6*, spriteBatch : Void*, startIndex : UInt32, spriteCount : UInt32, bitmap : Void*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_BITMAP_INTERPOLATION_MODE, spriteOptions : Win32cr::Graphics::Direct2D::D2D1_SPRITE_OPTIONS) : Void
      @lpVtbl.try &.value.draw_sprite_batch.call(this, spriteBatch, startIndex, spriteCount, bitmap, interpolationMode, spriteOptions)
    end
    def create_svg_glyph_style(this : ID2D1DeviceContext6*, svgGlyphStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_svg_glyph_style.call(this, svgGlyphStyle)
    end
    def draw_text_2(this : ID2D1DeviceContext6*, string : UInt16*, stringLength : UInt32, textFormat : Void*, layoutRect : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_text_2.call(this, string, stringLength, textFormat, layoutRect, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options, measuringMode)
    end
    def draw_text_layout_2(this : ID2D1DeviceContext6*, origin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, textLayout : Void*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, options : Win32cr::Graphics::Direct2D::D2D1_DRAW_TEXT_OPTIONS) : Void
      @lpVtbl.try &.value.draw_text_layout_2.call(this, origin, textLayout, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, options)
    end
    def draw_color_bitmap_glyph_run(this : ID2D1DeviceContext6*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE, bitmapSnapOption : Win32cr::Graphics::Direct2D::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) : Void
      @lpVtbl.try &.value.draw_color_bitmap_glyph_run.call(this, glyphImageFormat, baselineOrigin, glyphRun, measuringMode, bitmapSnapOption)
    end
    def draw_svg_glyph_run(this : ID2D1DeviceContext6*, baselineOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, glyphRun : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_RUN*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, measuringMode : Win32cr::Graphics::DirectWrite::DWRITE_MEASURING_MODE) : Void
      @lpVtbl.try &.value.draw_svg_glyph_run.call(this, baselineOrigin, glyphRun, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, measuringMode)
    end
    def get_color_bitmap_glyph_image(this : ID2D1DeviceContext6*, glyphImageFormat : Win32cr::Graphics::DirectWrite::DWRITE_GLYPH_IMAGE_FORMATS, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, dpiX : Float32, dpiY : Float32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_bitmap_glyph_image.call(this, glyphImageFormat, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, dpiX, dpiY, glyphTransform, glyphImage)
    end
    def get_svg_glyph_image(this : ID2D1DeviceContext6*, glyphOrigin : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, fontFace : Void*, fontEmSize : Float32, glyphIndex : UInt16, isSideways : Win32cr::Foundation::BOOL, worldTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, defaultFillBrush : Void*, svgGlyphStyle : Void*, colorPaletteIndex : UInt32, glyphTransform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, glyphImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_svg_glyph_image.call(this, glyphOrigin, fontFace, fontEmSize, glyphIndex, isSideways, worldTransform, defaultFillBrush, svgGlyphStyle, colorPaletteIndex, glyphTransform, glyphImage)
    end
    def create_svg_document(this : ID2D1DeviceContext6*, inputXmlStream : Void*, viewportSize : Win32cr::Graphics::Direct2D::Common::D2D_SIZE_F, svgDocument : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_svg_document.call(this, inputXmlStream, viewportSize, svgDocument)
    end
    def draw_svg_document(this : ID2D1DeviceContext6*, svgDocument : Void*) : Void
      @lpVtbl.try &.value.draw_svg_document.call(this, svgDocument)
    end
    def create_color_context_from_dxgi_color_space(this : ID2D1DeviceContext6*, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_dxgi_color_space.call(this, colorSpace, colorContext)
    end
    def create_color_context_from_simple_color_profile(this : ID2D1DeviceContext6*, simpleProfile : Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_simple_color_profile.call(this, simpleProfile, colorContext)
    end
    def blend_image(this : ID2D1DeviceContext6*, image : Void*, blendMode : Win32cr::Graphics::Direct2D::Common::D2D1_BLEND_MODE, targetOffset : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, imageRectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, interpolationMode : Win32cr::Graphics::Direct2D::D2D1_INTERPOLATION_MODE) : Void
      @lpVtbl.try &.value.blend_image.call(this, image, blendMode, targetOffset, imageRectangle, interpolationMode)
    end

  end

  @[Extern]
  record ID2D1Device6Vtbl,
    query_interface : Proc(ID2D1Device6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Device6*, UInt32),
    release : Proc(ID2D1Device6*, UInt32),
    get_factory : Proc(ID2D1Device6*, Void**, Void),
    create_device_context_1_1 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_print_control : Proc(ID2D1Device6*, Void*, Void*, Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_texture_memory : Proc(ID2D1Device6*, UInt64, Void),
    get_maximum_texture_memory : Proc(ID2D1Device6*, UInt64),
    clear_resources : Proc(ID2D1Device6*, UInt32, Void),
    get_rendering_priority : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY),
    set_rendering_priority : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY, Void),
    create_device_context_2_1 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1_2 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    flush_device_contexts : Proc(ID2D1Device6*, Void*, Void),
    get_dxgi_device : Proc(ID2D1Device6*, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_2_2 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context_1 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    set_maximum_color_glyph_cache_memory : Proc(ID2D1Device6*, UInt64, Void),
    get_maximum_color_glyph_cache_memory : Proc(ID2D1Device6*, UInt64),
    create_device_context_2 : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT),
    create_device_context : Proc(ID2D1Device6*, Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Device6, lpVtbl : ID2D1Device6Vtbl* do
    GUID = LibC::GUID.new(0x7bfef914_u32, 0x2d75_u16, 0x4bad_u16, StaticArray[0xbe_u8, 0x87_u8, 0xe1_u8, 0x8d_u8, 0xdb_u8, 0x7_u8, 0x7b_u8, 0x6d_u8])
    def query_interface(this : ID2D1Device6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Device6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Device6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory(this : ID2D1Device6*, factory : Void**) : Void
      @lpVtbl.try &.value.get_factory.call(this, factory)
    end
    def create_device_context_1_1(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_1.call(this, options, deviceContext)
    end
    def create_print_control(this : ID2D1Device6*, wicFactory : Void*, documentTarget : Void*, printControlProperties : Win32cr::Graphics::Direct2D::D2D1_PRINT_CONTROL_PROPERTIES*, printControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_print_control.call(this, wicFactory, documentTarget, printControlProperties, printControl)
    end
    def set_maximum_texture_memory(this : ID2D1Device6*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_texture_memory.call(this, maximumInBytes)
    end
    def get_maximum_texture_memory(this : ID2D1Device6*) : UInt64
      @lpVtbl.try &.value.get_maximum_texture_memory.call(this)
    end
    def clear_resources(this : ID2D1Device6*, millisecondsSinceUse : UInt32) : Void
      @lpVtbl.try &.value.clear_resources.call(this, millisecondsSinceUse)
    end
    def get_rendering_priority(this : ID2D1Device6*) : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY
      @lpVtbl.try &.value.get_rendering_priority.call(this)
    end
    def set_rendering_priority(this : ID2D1Device6*, renderingPriority : Win32cr::Graphics::Direct2D::D2D1_RENDERING_PRIORITY) : Void
      @lpVtbl.try &.value.set_rendering_priority.call(this, renderingPriority)
    end
    def create_device_context_2_1(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_1.call(this, options, deviceContext1)
    end
    def create_device_context_1_2(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1_2.call(this, options, deviceContext2)
    end
    def flush_device_contexts(this : ID2D1Device6*, bitmap : Void*) : Void
      @lpVtbl.try &.value.flush_device_contexts.call(this, bitmap)
    end
    def get_dxgi_device(this : ID2D1Device6*, dxgiDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dxgi_device.call(this, dxgiDevice)
    end
    def create_device_context_2_2(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2_2.call(this, options, deviceContext3)
    end
    def create_device_context_1(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_1.call(this, options, deviceContext4)
    end
    def set_maximum_color_glyph_cache_memory(this : ID2D1Device6*, maximumInBytes : UInt64) : Void
      @lpVtbl.try &.value.set_maximum_color_glyph_cache_memory.call(this, maximumInBytes)
    end
    def get_maximum_color_glyph_cache_memory(this : ID2D1Device6*) : UInt64
      @lpVtbl.try &.value.get_maximum_color_glyph_cache_memory.call(this)
    end
    def create_device_context_2(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext5 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context_2.call(this, options, deviceContext5)
    end
    def create_device_context(this : ID2D1Device6*, options : Win32cr::Graphics::Direct2D::D2D1_DEVICE_CONTEXT_OPTIONS, deviceContext6 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_context.call(this, options, deviceContext6)
    end

  end

  @[Extern]
  record ID2D1Factory7Vtbl,
    query_interface : Proc(ID2D1Factory7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1Factory7*, UInt32),
    release : Proc(ID2D1Factory7*, UInt32),
    reload_system_metrics : Proc(ID2D1Factory7*, Win32cr::Foundation::HRESULT),
    get_desktop_dpi : Proc(ID2D1Factory7*, Float32*, Float32*, Void),
    create_rectangle_geometry : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, Void**, Win32cr::Foundation::HRESULT),
    create_rounded_rectangle_geometry : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, Void**, Win32cr::Foundation::HRESULT),
    create_ellipse_geometry : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_group : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_transformed_geometry : Proc(ID2D1Factory7*, Void*, Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_1 : Proc(ID2D1Factory7*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_1 : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_1 : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_wic_bitmap_render_target : Proc(ID2D1Factory7*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_hwnd_render_target : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dxgi_surface_render_target : Proc(ID2D1Factory7*, Void*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_dc_render_target : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_1 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_stroke_style_2 : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, Float32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_path_geometry_2 : Proc(ID2D1Factory7*, Void**, Win32cr::Foundation::HRESULT),
    create_drawing_state_block_2 : Proc(ID2D1Factory7*, Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_gdi_metafile : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    register_effect_from_stream : Proc(ID2D1Factory7*, LibC::GUID*, Void*, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    register_effect_from_string : Proc(ID2D1Factory7*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, UInt32, Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY, Win32cr::Foundation::HRESULT),
    unregister_effect : Proc(ID2D1Factory7*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_registered_effects : Proc(ID2D1Factory7*, LibC::GUID*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_effect_properties : Proc(ID2D1Factory7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_1 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1_2 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2_2 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_1 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device_2 : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_device : Proc(ID2D1Factory7*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1Factory7, lpVtbl : ID2D1Factory7Vtbl* do
    GUID = LibC::GUID.new(0xbdc2bdd3_u32, 0xb96c_u16, 0x4de6_u16, StaticArray[0xbd_u8, 0xf7_u8, 0x99_u8, 0xd4_u8, 0x74_u8, 0x54_u8, 0x54_u8, 0xde_u8])
    def query_interface(this : ID2D1Factory7*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1Factory7*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1Factory7*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reload_system_metrics(this : ID2D1Factory7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reload_system_metrics.call(this)
    end
    def get_desktop_dpi(this : ID2D1Factory7*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_desktop_dpi.call(this, dpiX, dpiY)
    end
    def create_rectangle_geometry(this : ID2D1Factory7*, rectangle : Win32cr::Graphics::Direct2D::Common::D2D_RECT_F*, rectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rectangle_geometry.call(this, rectangle, rectangleGeometry)
    end
    def create_rounded_rectangle_geometry(this : ID2D1Factory7*, roundedRectangle : Win32cr::Graphics::Direct2D::D2D1_ROUNDED_RECT*, roundedRectangleGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rounded_rectangle_geometry.call(this, roundedRectangle, roundedRectangleGeometry)
    end
    def create_ellipse_geometry(this : ID2D1Factory7*, ellipse : Win32cr::Graphics::Direct2D::D2D1_ELLIPSE*, ellipseGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_ellipse_geometry.call(this, ellipse, ellipseGeometry)
    end
    def create_geometry_group(this : ID2D1Factory7*, fillMode : Win32cr::Graphics::Direct2D::Common::D2D1_FILL_MODE, geometries : Void**, geometriesCount : UInt32, geometryGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_group.call(this, fillMode, geometries, geometriesCount, geometryGroup)
    end
    def create_transformed_geometry(this : ID2D1Factory7*, sourceGeometry : Void*, transform : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*, transformedGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transformed_geometry.call(this, sourceGeometry, transform, transformedGeometry)
    end
    def create_path_geometry_1(this : ID2D1Factory7*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_1.call(this, pathGeometry)
    end
    def create_stroke_style_1(this : ID2D1Factory7*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_1.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_drawing_state_block_1(this : ID2D1Factory7*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_1.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_wic_bitmap_render_target(this : ID2D1Factory7*, target : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_wic_bitmap_render_target.call(this, target, renderTargetProperties, renderTarget)
    end
    def create_hwnd_render_target(this : ID2D1Factory7*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, hwndRenderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_HWND_RENDER_TARGET_PROPERTIES*, hwndRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_hwnd_render_target.call(this, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget)
    end
    def create_dxgi_surface_render_target(this : ID2D1Factory7*, dxgiSurface : Void*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, renderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dxgi_surface_render_target.call(this, dxgiSurface, renderTargetProperties, renderTarget)
    end
    def create_dc_render_target(this : ID2D1Factory7*, renderTargetProperties : Win32cr::Graphics::Direct2D::D2D1_RENDER_TARGET_PROPERTIES*, dcRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dc_render_target.call(this, renderTargetProperties, dcRenderTarget)
    end
    def create_device_1_1(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_1.call(this, dxgiDevice, d2dDevice)
    end
    def create_stroke_style_2(this : ID2D1Factory7*, strokeStyleProperties : Win32cr::Graphics::Direct2D::D2D1_STROKE_STYLE_PROPERTIES1*, dashes : Float32*, dashesCount : UInt32, strokeStyle : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stroke_style_2.call(this, strokeStyleProperties, dashes, dashesCount, strokeStyle)
    end
    def create_path_geometry_2(this : ID2D1Factory7*, pathGeometry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_path_geometry_2.call(this, pathGeometry)
    end
    def create_drawing_state_block_2(this : ID2D1Factory7*, drawingStateDescription : Win32cr::Graphics::Direct2D::D2D1_DRAWING_STATE_DESCRIPTION1*, textRenderingParams : Void*, drawingStateBlock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_drawing_state_block_2.call(this, drawingStateDescription, textRenderingParams, drawingStateBlock)
    end
    def create_gdi_metafile(this : ID2D1Factory7*, metafileStream : Void*, metafile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_gdi_metafile.call(this, metafileStream, metafile)
    end
    def register_effect_from_stream(this : ID2D1Factory7*, classId : LibC::GUID*, propertyXml : Void*, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_stream.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def register_effect_from_string(this : ID2D1Factory7*, classId : LibC::GUID*, propertyXml : Win32cr::Foundation::PWSTR, bindings : Win32cr::Graphics::Direct2D::D2D1_PROPERTY_BINDING*, bindingsCount : UInt32, effectFactory : Win32cr::Graphics::Direct2D::PD2D1_EFFECT_FACTORY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_effect_from_string.call(this, classId, propertyXml, bindings, bindingsCount, effectFactory)
    end
    def unregister_effect(this : ID2D1Factory7*, classId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_effect.call(this, classId)
    end
    def get_registered_effects(this : ID2D1Factory7*, effects : LibC::GUID*, effectsCount : UInt32, effectsReturned : UInt32*, effectsRegistered : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_registered_effects.call(this, effects, effectsCount, effectsReturned, effectsRegistered)
    end
    def get_effect_properties(this : ID2D1Factory7*, effectId : LibC::GUID*, properties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_effect_properties.call(this, effectId, properties)
    end
    def create_device_2_1(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice1 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_1.call(this, dxgiDevice, d2dDevice1)
    end
    def create_device_1_2(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice2 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1_2.call(this, dxgiDevice, d2dDevice2)
    end
    def create_device_2_2(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice3 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2_2.call(this, dxgiDevice, d2dDevice3)
    end
    def create_device_1(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice4 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_1.call(this, dxgiDevice, d2dDevice4)
    end
    def create_device_2(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice5 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_2.call(this, dxgiDevice, d2dDevice5)
    end
    def create_device(this : ID2D1Factory7*, dxgiDevice : Void*, d2dDevice6 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device.call(this, dxgiDevice, d2dDevice6)
    end

  end

  @[Extern]
  record ID2D1EffectContext1Vtbl,
    query_interface : Proc(ID2D1EffectContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1EffectContext1*, UInt32),
    release : Proc(ID2D1EffectContext1*, UInt32),
    get_dpi : Proc(ID2D1EffectContext1*, Float32*, Float32*, Void),
    create_effect : Proc(ID2D1EffectContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_maximum_supported_feature_level : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, UInt32, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, Win32cr::Foundation::HRESULT),
    create_transform_node_from_effect : Proc(ID2D1EffectContext1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_blend_transform : Proc(ID2D1EffectContext1*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Void**, Win32cr::Foundation::HRESULT),
    create_border_transform : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_offset_transform : Proc(ID2D1EffectContext1*, Win32cr::Foundation::POINT, Void**, Win32cr::Foundation::HRESULT),
    create_bounds_adjustment_transform : Proc(ID2D1EffectContext1*, Win32cr::Foundation::RECT*, Void**, Win32cr::Foundation::HRESULT),
    load_pixel_shader : Proc(ID2D1EffectContext1*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_vertex_shader : Proc(ID2D1EffectContext1*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_compute_shader : Proc(ID2D1EffectContext1*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    is_shader_loaded : Proc(ID2D1EffectContext1*, LibC::GUID*, Win32cr::Foundation::BOOL),
    create_resource_texture : Proc(ID2D1EffectContext1*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    find_resource_texture : Proc(ID2D1EffectContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_vertex_buffer : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    find_vertex_buffer : Proc(ID2D1EffectContext1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1EffectContext1*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1EffectContext1*, Void*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    is_buffer_precision_supported : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    create_lookup_table3_d : Proc(ID2D1EffectContext1*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1EffectContext1, lpVtbl : ID2D1EffectContext1Vtbl* do
    GUID = LibC::GUID.new(0x84ab595a_u32, 0xfc81_u16, 0x4546_u16, StaticArray[0xba_u8, 0xcd_u8, 0xe8_u8, 0xef_u8, 0x4d_u8, 0x8a_u8, 0xbe_u8, 0x7a_u8])
    def query_interface(this : ID2D1EffectContext1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1EffectContext1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1EffectContext1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_dpi(this : ID2D1EffectContext1*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def create_effect(this : ID2D1EffectContext1*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def get_maximum_supported_feature_level(this : ID2D1EffectContext1*, featureLevels : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, featureLevelsCount : UInt32, maximumSupportedFeatureLevel : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_supported_feature_level.call(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel)
    end
    def create_transform_node_from_effect(this : ID2D1EffectContext1*, effect : Void*, transformNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transform_node_from_effect.call(this, effect, transformNode)
    end
    def create_blend_transform(this : ID2D1EffectContext1*, numInputs : UInt32, blendDescription : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_transform.call(this, numInputs, blendDescription, transform)
    end
    def create_border_transform(this : ID2D1EffectContext1*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_border_transform.call(this, extendModeX, extendModeY, transform)
    end
    def create_offset_transform(this : ID2D1EffectContext1*, offset : Win32cr::Foundation::POINT, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offset_transform.call(this, offset, transform)
    end
    def create_bounds_adjustment_transform(this : ID2D1EffectContext1*, outputRectangle : Win32cr::Foundation::RECT*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bounds_adjustment_transform.call(this, outputRectangle, transform)
    end
    def load_pixel_shader(this : ID2D1EffectContext1*, shaderId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_pixel_shader.call(this, shaderId, shaderBuffer, shaderBufferCount)
    end
    def load_vertex_shader(this : ID2D1EffectContext1*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_vertex_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def load_compute_shader(this : ID2D1EffectContext1*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_compute_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def is_shader_loaded(this : ID2D1EffectContext1*, shaderId : LibC::GUID*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_shader_loaded.call(this, shaderId)
    end
    def create_resource_texture(this : ID2D1EffectContext1*, resourceId : LibC::GUID*, resourceTextureProperties : Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, dataSize : UInt32, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_texture.call(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture)
    end
    def find_resource_texture(this : ID2D1EffectContext1*, resourceId : LibC::GUID*, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_resource_texture.call(this, resourceId, resourceTexture)
    end
    def create_vertex_buffer(this : ID2D1EffectContext1*, vertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, resourceId : LibC::GUID*, customVertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_buffer.call(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer)
    end
    def find_vertex_buffer(this : ID2D1EffectContext1*, resourceId : LibC::GUID*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_vertex_buffer.call(this, resourceId, buffer)
    end
    def create_color_context(this : ID2D1EffectContext1*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1EffectContext1*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1EffectContext1*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def check_feature_support(this : ID2D1EffectContext1*, feature : Win32cr::Graphics::Direct2D::D2D1_FEATURE, featureSupportData : Void*, featureSupportDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, featureSupportData, featureSupportDataSize)
    end
    def is_buffer_precision_supported(this : ID2D1EffectContext1*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def create_lookup_table3_d(this : ID2D1EffectContext1*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end

  end

  @[Extern]
  record ID2D1EffectContext2Vtbl,
    query_interface : Proc(ID2D1EffectContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID2D1EffectContext2*, UInt32),
    release : Proc(ID2D1EffectContext2*, UInt32),
    get_dpi : Proc(ID2D1EffectContext2*, Float32*, Float32*, Void),
    create_effect : Proc(ID2D1EffectContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_maximum_supported_feature_level : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, UInt32, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, Win32cr::Foundation::HRESULT),
    create_transform_node_from_effect : Proc(ID2D1EffectContext2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_blend_transform : Proc(ID2D1EffectContext2*, UInt32, Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, Void**, Win32cr::Foundation::HRESULT),
    create_border_transform : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, Void**, Win32cr::Foundation::HRESULT),
    create_offset_transform : Proc(ID2D1EffectContext2*, Win32cr::Foundation::POINT, Void**, Win32cr::Foundation::HRESULT),
    create_bounds_adjustment_transform : Proc(ID2D1EffectContext2*, Win32cr::Foundation::RECT*, Void**, Win32cr::Foundation::HRESULT),
    load_pixel_shader : Proc(ID2D1EffectContext2*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_vertex_shader : Proc(ID2D1EffectContext2*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    load_compute_shader : Proc(ID2D1EffectContext2*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    is_shader_loaded : Proc(ID2D1EffectContext2*, LibC::GUID*, Win32cr::Foundation::BOOL),
    create_resource_texture : Proc(ID2D1EffectContext2*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, UInt8*, UInt32*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    find_resource_texture : Proc(ID2D1EffectContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_vertex_buffer : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, LibC::GUID*, Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    find_vertex_buffer : Proc(ID2D1EffectContext2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_filename : Proc(ID2D1EffectContext2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_wic_color_context : Proc(ID2D1EffectContext2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    is_buffer_precision_supported : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, Win32cr::Foundation::BOOL),
    create_lookup_table3_d : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, UInt32*, UInt8*, UInt32, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_dxgi_color_space : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    create_color_context_from_simple_color_profile : Proc(ID2D1EffectContext2*, Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID2D1EffectContext2, lpVtbl : ID2D1EffectContext2Vtbl* do
    GUID = LibC::GUID.new(0x577ad2a0_u32, 0x9fc7_u16, 0x4dda_u16, StaticArray[0x8b_u8, 0x18_u8, 0xda_u8, 0xb8_u8, 0x10_u8, 0x14_u8, 0x0_u8, 0x52_u8])
    def query_interface(this : ID2D1EffectContext2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID2D1EffectContext2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID2D1EffectContext2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_dpi(this : ID2D1EffectContext2*, dpiX : Float32*, dpiY : Float32*) : Void
      @lpVtbl.try &.value.get_dpi.call(this, dpiX, dpiY)
    end
    def create_effect(this : ID2D1EffectContext2*, effectId : LibC::GUID*, effect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_effect.call(this, effectId, effect)
    end
    def get_maximum_supported_feature_level(this : ID2D1EffectContext2*, featureLevels : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, featureLevelsCount : UInt32, maximumSupportedFeatureLevel : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_supported_feature_level.call(this, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel)
    end
    def create_transform_node_from_effect(this : ID2D1EffectContext2*, effect : Void*, transformNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transform_node_from_effect.call(this, effect, transformNode)
    end
    def create_blend_transform(this : ID2D1EffectContext2*, numInputs : UInt32, blendDescription : Win32cr::Graphics::Direct2D::D2D1_BLEND_DESCRIPTION*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_transform.call(this, numInputs, blendDescription, transform)
    end
    def create_border_transform(this : ID2D1EffectContext2*, extendModeX : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, extendModeY : Win32cr::Graphics::Direct2D::D2D1_EXTEND_MODE, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_border_transform.call(this, extendModeX, extendModeY, transform)
    end
    def create_offset_transform(this : ID2D1EffectContext2*, offset : Win32cr::Foundation::POINT, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offset_transform.call(this, offset, transform)
    end
    def create_bounds_adjustment_transform(this : ID2D1EffectContext2*, outputRectangle : Win32cr::Foundation::RECT*, transform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_bounds_adjustment_transform.call(this, outputRectangle, transform)
    end
    def load_pixel_shader(this : ID2D1EffectContext2*, shaderId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_pixel_shader.call(this, shaderId, shaderBuffer, shaderBufferCount)
    end
    def load_vertex_shader(this : ID2D1EffectContext2*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_vertex_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def load_compute_shader(this : ID2D1EffectContext2*, resourceId : LibC::GUID*, shaderBuffer : UInt8*, shaderBufferCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_compute_shader.call(this, resourceId, shaderBuffer, shaderBufferCount)
    end
    def is_shader_loaded(this : ID2D1EffectContext2*, shaderId : LibC::GUID*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_shader_loaded.call(this, shaderId)
    end
    def create_resource_texture(this : ID2D1EffectContext2*, resourceId : LibC::GUID*, resourceTextureProperties : Win32cr::Graphics::Direct2D::D2D1_RESOURCE_TEXTURE_PROPERTIES*, data : UInt8*, strides : UInt32*, dataSize : UInt32, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_resource_texture.call(this, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture)
    end
    def find_resource_texture(this : ID2D1EffectContext2*, resourceId : LibC::GUID*, resourceTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_resource_texture.call(this, resourceId, resourceTexture)
    end
    def create_vertex_buffer(this : ID2D1EffectContext2*, vertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_VERTEX_BUFFER_PROPERTIES*, resourceId : LibC::GUID*, customVertexBufferProperties : Win32cr::Graphics::Direct2D::D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_buffer.call(this, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer)
    end
    def find_vertex_buffer(this : ID2D1EffectContext2*, resourceId : LibC::GUID*, buffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_vertex_buffer.call(this, resourceId, buffer)
    end
    def create_color_context(this : ID2D1EffectContext2*, space : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, profile : UInt8*, profileSize : UInt32, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context.call(this, space, profile, profileSize, colorContext)
    end
    def create_color_context_from_filename(this : ID2D1EffectContext2*, filename : Win32cr::Foundation::PWSTR, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_filename.call(this, filename, colorContext)
    end
    def create_color_context_from_wic_color_context(this : ID2D1EffectContext2*, wicColorContext : Void*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_wic_color_context.call(this, wicColorContext, colorContext)
    end
    def check_feature_support(this : ID2D1EffectContext2*, feature : Win32cr::Graphics::Direct2D::D2D1_FEATURE, featureSupportData : Void*, featureSupportDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, featureSupportData, featureSupportDataSize)
    end
    def is_buffer_precision_supported(this : ID2D1EffectContext2*, bufferPrecision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_buffer_precision_supported.call(this, bufferPrecision)
    end
    def create_lookup_table3_d(this : ID2D1EffectContext2*, precision : Win32cr::Graphics::Direct2D::D2D1_BUFFER_PRECISION, extents : UInt32*, data : UInt8*, dataCount : UInt32, strides : UInt32*, lookupTable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lookup_table3_d.call(this, precision, extents, data, dataCount, strides, lookupTable)
    end
    def create_color_context_from_dxgi_color_space(this : ID2D1EffectContext2*, colorSpace : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_dxgi_color_space.call(this, colorSpace, colorContext)
    end
    def create_color_context_from_simple_color_profile(this : ID2D1EffectContext2*, simpleProfile : Win32cr::Graphics::Direct2D::D2D1_SIMPLE_COLOR_PROFILE*, colorContext : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_color_context_from_simple_color_profile.call(this, simpleProfile, colorContext)
    end

  end

  def d2D1CreateFactory(factoryType : Win32cr::Graphics::Direct2D::D2D1_FACTORY_TYPE, riid : LibC::GUID*, pFactoryOptions : Win32cr::Graphics::Direct2D::D2D1_FACTORY_OPTIONS*, ppIFactory : Void**) : Win32cr::Foundation::HRESULT
    C.D2D1CreateFactory(factoryType, riid, pFactoryOptions, ppIFactory)
  end

  def d2D1MakeRotateMatrix(angle : Float32, center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
    C.D2D1MakeRotateMatrix(angle, center, matrix)
  end

  def d2D1MakeSkewMatrix(angleX : Float32, angleY : Float32, center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void
    C.D2D1MakeSkewMatrix(angleX, angleY, center, matrix)
  end

  def d2D1IsMatrixInvertible(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::BOOL
    C.D2D1IsMatrixInvertible(matrix)
  end

  def d2D1InvertMatrix(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::BOOL
    C.D2D1InvertMatrix(matrix)
  end

  def d2D1CreateDevice(dxgiDevice : Void*, creationProperties : Win32cr::Graphics::Direct2D::D2D1_CREATION_PROPERTIES*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D2D1CreateDevice(dxgiDevice, creationProperties, d2dDevice)
  end

  def d2D1CreateDeviceContext(dxgiSurface : Void*, creationProperties : Win32cr::Graphics::Direct2D::D2D1_CREATION_PROPERTIES*, d2dDeviceContext : Void**) : Win32cr::Foundation::HRESULT
    C.D2D1CreateDeviceContext(dxgiSurface, creationProperties, d2dDeviceContext)
  end

  def d2D1ConvertColorSpace(sourceColorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, destinationColorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F
    C.D2D1ConvertColorSpace(sourceColorSpace, destinationColorSpace, color)
  end

  def d2D1SinCos(angle : Float32, s : Float32*, c : Float32*) : Void
    C.D2D1SinCos(angle, s, c)
  end

  def d2D1Tan(angle : Float32) : Float32
    C.D2D1Tan(angle)
  end

  def d2D1Vec3Length(x : Float32, y : Float32, z : Float32) : Float32
    C.D2D1Vec3Length(x, y, z)
  end

  def d2D1ComputeMaximumScaleFactor(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Float32
    C.D2D1ComputeMaximumScaleFactor(matrix)
  end

  def d2D1GetGradientMeshInteriorPointsFromCoonsPatch(pPoint0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint3 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint4 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint5 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint6 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint7 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint8 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint9 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint10 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint12 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint21 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint22 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void
    C.D2D1GetGradientMeshInteriorPointsFromCoonsPatch(pPoint0, pPoint1, pPoint2, pPoint3, pPoint4, pPoint5, pPoint6, pPoint7, pPoint8, pPoint9, pPoint10, pPoint11, pTensorPoint11, pTensorPoint12, pTensorPoint21, pTensorPoint22)
  end

  @[Link("d2d1")]
  lib C
    # :nodoc:
    fun D2D1CreateFactory(factoryType : Win32cr::Graphics::Direct2D::D2D1_FACTORY_TYPE, riid : LibC::GUID*, pFactoryOptions : Win32cr::Graphics::Direct2D::D2D1_FACTORY_OPTIONS*, ppIFactory : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D2D1MakeRotateMatrix(angle : Float32, center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void

    # :nodoc:
    fun D2D1MakeSkewMatrix(angleX : Float32, angleY : Float32, center : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F, matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Void

    # :nodoc:
    fun D2D1IsMatrixInvertible(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun D2D1InvertMatrix(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun D2D1CreateDevice(dxgiDevice : Void*, creationProperties : Win32cr::Graphics::Direct2D::D2D1_CREATION_PROPERTIES*, d2dDevice : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D2D1CreateDeviceContext(dxgiSurface : Void*, creationProperties : Win32cr::Graphics::Direct2D::D2D1_CREATION_PROPERTIES*, d2dDeviceContext : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D2D1ConvertColorSpace(sourceColorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, destinationColorSpace : Win32cr::Graphics::Direct2D::D2D1_COLOR_SPACE, color : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F*) : Win32cr::Graphics::Direct2D::Common::D2D1_COLOR_F

    # :nodoc:
    fun D2D1SinCos(angle : Float32, s : Float32*, c : Float32*) : Void

    # :nodoc:
    fun D2D1Tan(angle : Float32) : Float32

    # :nodoc:
    fun D2D1Vec3Length(x : Float32, y : Float32, z : Float32) : Float32

    # :nodoc:
    fun D2D1ComputeMaximumScaleFactor(matrix : Win32cr::Graphics::Direct2D::Common::D2D_MATRIX_3X2_F*) : Float32

    # :nodoc:
    fun D2D1GetGradientMeshInteriorPointsFromCoonsPatch(pPoint0 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint1 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint2 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint3 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint4 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint5 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint6 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint7 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint8 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint9 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint10 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pPoint11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint11 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint12 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint21 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*, pTensorPoint22 : Win32cr::Graphics::Direct2D::Common::D2D_POINT_2F*) : Void

  end
end