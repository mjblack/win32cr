require "../foundation.cr"
require "../graphics/gdi.cr"
require "../system/com.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:ddraw.dll")]
{% else %}
@[Link("ddraw")]
{% end %}
lib LibWin32
  DIRECTDRAW_VERSION = 1792_u32
  FACDD = 2166_u32
  CLSID_DirectDraw = "d7b70ee0-4340-11cf-b063-0020afc2cd35"
  CLSID_DirectDraw7 = "3c305196-50db-11d3-9cfe-00c04fd930c5"
  CLSID_DirectDrawClipper = "593817a0-7db3-11cf-a2de-00aa00b93356"
  DDENUM_ATTACHEDSECONDARYDEVICES = 1_i32
  DDENUM_DETACHEDSECONDARYDEVICES = 2_i32
  DDENUM_NONDISPLAYDEVICES = 4_i32
  DDCREATE_HARDWAREONLY = 1_i32
  DDCREATE_EMULATIONONLY = 2_i32
  MAX_DDDEVICEID_STRING = 512_u32
  DDGDI_GETHOSTIDENTIFIER = 1_i32
  DDSD_CAPS = 1_i32
  DDSD_HEIGHT = 2_i32
  DDSD_WIDTH = 4_i32
  DDSD_PITCH = 8_i32
  DDSD_BACKBUFFERCOUNT = 32_i32
  DDSD_ZBUFFERBITDEPTH = 64_i32
  DDSD_ALPHABITDEPTH = 128_i32
  DDSD_LPSURFACE = 2048_i32
  DDSD_PIXELFORMAT = 4096_i32
  DDSD_CKDESTOVERLAY = 8192_i32
  DDSD_CKDESTBLT = 16384_i32
  DDSD_CKSRCOVERLAY = 32768_i32
  DDSD_CKSRCBLT = 65536_i32
  DDSD_MIPMAPCOUNT = 131072_i32
  DDSD_REFRESHRATE = 262144_i32
  DDSD_LINEARSIZE = 524288_i32
  DDSD_TEXTURESTAGE = 1048576_i32
  DDSD_FVF = 2097152_i32
  DDSD_SRCVBHANDLE = 4194304_i32
  DDSD_DEPTH = 8388608_i32
  DDSD_ALL = 16775662_i32
  DDOSD_GUID = 1_i32
  DDOSD_COMPRESSION_RATIO = 2_i32
  DDOSD_SCAPS = 4_i32
  DDOSD_OSCAPS = 8_i32
  DDOSD_ALL = 15_i32
  DDOSDCAPS_OPTCOMPRESSED = 1_i32
  DDOSDCAPS_OPTREORDERED = 2_i32
  DDOSDCAPS_MONOLITHICMIPMAP = 4_i32
  DDOSDCAPS_VALIDSCAPS = 805324800_i32
  DDOSDCAPS_VALIDOSCAPS = 7_i32
  DDCOLOR_BRIGHTNESS = 1_i32
  DDCOLOR_CONTRAST = 2_i32
  DDCOLOR_HUE = 4_i32
  DDCOLOR_SATURATION = 8_i32
  DDCOLOR_SHARPNESS = 16_i32
  DDCOLOR_GAMMA = 32_i32
  DDCOLOR_COLORENABLE = 64_i32
  DDSCAPS_RESERVED1 = 1_i32
  DDSCAPS_ALPHA = 2_i32
  DDSCAPS_BACKBUFFER = 4_i32
  DDSCAPS_COMPLEX = 8_i32
  DDSCAPS_FLIP = 16_i32
  DDSCAPS_FRONTBUFFER = 32_i32
  DDSCAPS_OFFSCREENPLAIN = 64_i32
  DDSCAPS_OVERLAY = 128_i32
  DDSCAPS_PALETTE = 256_i32
  DDSCAPS_PRIMARYSURFACE = 512_i32
  DDSCAPS_RESERVED3 = 1024_i32
  DDSCAPS_PRIMARYSURFACELEFT = 0_i32
  DDSCAPS_SYSTEMMEMORY = 2048_i32
  DDSCAPS_TEXTURE = 4096_i32
  DDSCAPS_3DDEVICE = 8192_i32
  DDSCAPS_VIDEOMEMORY = 16384_i32
  DDSCAPS_VISIBLE = 32768_i32
  DDSCAPS_WRITEONLY = 65536_i32
  DDSCAPS_ZBUFFER = 131072_i32
  DDSCAPS_OWNDC = 262144_i32
  DDSCAPS_LIVEVIDEO = 524288_i32
  DDSCAPS_HWCODEC = 1048576_i32
  DDSCAPS_MODEX = 2097152_i32
  DDSCAPS_MIPMAP = 4194304_i32
  DDSCAPS_RESERVED2 = 8388608_i32
  DDSCAPS_ALLOCONLOAD = 67108864_i32
  DDSCAPS_VIDEOPORT = 134217728_i32
  DDSCAPS_LOCALVIDMEM = 268435456_i32
  DDSCAPS_NONLOCALVIDMEM = 536870912_i32
  DDSCAPS_STANDARDVGAMODE = 1073741824_i32
  DDSCAPS_OPTIMIZED = -2147483648_i32
  DDSCAPS2_RESERVED4 = 2_i32
  DDSCAPS2_HARDWAREDEINTERLACE = 0_i32
  DDSCAPS2_HINTDYNAMIC = 4_i32
  DDSCAPS2_HINTSTATIC = 8_i32
  DDSCAPS2_TEXTUREMANAGE = 16_i32
  DDSCAPS2_RESERVED1 = 32_i32
  DDSCAPS2_RESERVED2 = 64_i32
  DDSCAPS2_OPAQUE = 128_i32
  DDSCAPS2_HINTANTIALIASING = 256_i32
  DDSCAPS2_CUBEMAP = 512_i32
  DDSCAPS2_CUBEMAP_POSITIVEX = 1024_i32
  DDSCAPS2_CUBEMAP_NEGATIVEX = 2048_i32
  DDSCAPS2_CUBEMAP_POSITIVEY = 4096_i32
  DDSCAPS2_CUBEMAP_NEGATIVEY = 8192_i32
  DDSCAPS2_CUBEMAP_POSITIVEZ = 16384_i32
  DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768_i32
  DDSCAPS2_MIPMAPSUBLEVEL = 65536_i32
  DDSCAPS2_D3DTEXTUREMANAGE = 131072_i32
  DDSCAPS2_DONOTPERSIST = 262144_i32
  DDSCAPS2_STEREOSURFACELEFT = 524288_i32
  DDSCAPS2_VOLUME = 2097152_i32
  DDSCAPS2_NOTUSERLOCKABLE = 4194304_i32
  DDSCAPS2_POINTS = 8388608_i32
  DDSCAPS2_RTPATCHES = 16777216_i32
  DDSCAPS2_NPATCHES = 33554432_i32
  DDSCAPS2_RESERVED3 = 67108864_i32
  DDSCAPS2_DISCARDBACKBUFFER = 268435456_i32
  DDSCAPS2_ENABLEALPHACHANNEL = 536870912_i32
  DDSCAPS2_EXTENDEDFORMATPRIMARY = 1073741824_i32
  DDSCAPS2_ADDITIONALPRIMARY = -2147483648_i32
  DDSCAPS3_MULTISAMPLE_MASK = 31_i32
  DDSCAPS3_MULTISAMPLE_QUALITY_MASK = 224_i32
  DDSCAPS3_MULTISAMPLE_QUALITY_SHIFT = 5_u32
  DDSCAPS3_RESERVED1 = 256_i32
  DDSCAPS3_RESERVED2 = 512_i32
  DDSCAPS3_LIGHTWEIGHTMIPMAP = 1024_i32
  DDSCAPS3_AUTOGENMIPMAP = 2048_i32
  DDSCAPS3_DMAP = 4096_i32
  DDSCAPS3_CREATESHAREDRESOURCE = 8192_i32
  DDSCAPS3_READONLYRESOURCE = 16384_i32
  DDSCAPS3_OPENSHAREDRESOURCE = 32768_i32
  DDCAPS_3D = 1_i32
  DDCAPS_ALIGNBOUNDARYDEST = 2_i32
  DDCAPS_ALIGNSIZEDEST = 4_i32
  DDCAPS_ALIGNBOUNDARYSRC = 8_i32
  DDCAPS_ALIGNSIZESRC = 16_i32
  DDCAPS_ALIGNSTRIDE = 32_i32
  DDCAPS_BLT = 64_i32
  DDCAPS_BLTQUEUE = 128_i32
  DDCAPS_BLTFOURCC = 256_i32
  DDCAPS_BLTSTRETCH = 512_i32
  DDCAPS_GDI = 1024_i32
  DDCAPS_OVERLAY = 2048_i32
  DDCAPS_OVERLAYCANTCLIP = 4096_i32
  DDCAPS_OVERLAYFOURCC = 8192_i32
  DDCAPS_OVERLAYSTRETCH = 16384_i32
  DDCAPS_PALETTE = 32768_i32
  DDCAPS_PALETTEVSYNC = 65536_i32
  DDCAPS_READSCANLINE = 131072_i32
  DDCAPS_RESERVED1 = 262144_i32
  DDCAPS_VBI = 524288_i32
  DDCAPS_ZBLTS = 1048576_i32
  DDCAPS_ZOVERLAYS = 2097152_i32
  DDCAPS_COLORKEY = 4194304_i32
  DDCAPS_ALPHA = 8388608_i32
  DDCAPS_COLORKEYHWASSIST = 16777216_i32
  DDCAPS_NOHARDWARE = 33554432_i32
  DDCAPS_BLTCOLORFILL = 67108864_i32
  DDCAPS_BANKSWITCHED = 134217728_i32
  DDCAPS_BLTDEPTHFILL = 268435456_i32
  DDCAPS_CANCLIP = 536870912_i32
  DDCAPS_CANCLIPSTRETCHED = 1073741824_i32
  DDCAPS_CANBLTSYSMEM = -2147483648_i32
  DDCAPS2_CERTIFIED = 1_i32
  DDCAPS2_NO2DDURING3DSCENE = 2_i32
  DDCAPS2_VIDEOPORT = 4_i32
  DDCAPS2_AUTOFLIPOVERLAY = 8_i32
  DDCAPS2_CANBOBINTERLEAVED = 16_i32
  DDCAPS2_CANBOBNONINTERLEAVED = 32_i32
  DDCAPS2_COLORCONTROLOVERLAY = 64_i32
  DDCAPS2_COLORCONTROLPRIMARY = 128_i32
  DDCAPS2_CANDROPZ16BIT = 256_i32
  DDCAPS2_NONLOCALVIDMEM = 512_i32
  DDCAPS2_NONLOCALVIDMEMCAPS = 1024_i32
  DDCAPS2_NOPAGELOCKREQUIRED = 2048_i32
  DDCAPS2_WIDESURFACES = 4096_i32
  DDCAPS2_CANFLIPODDEVEN = 8192_i32
  DDCAPS2_CANBOBHARDWARE = 16384_i32
  DDCAPS2_COPYFOURCC = 32768_i32
  DDCAPS2_PRIMARYGAMMA = 131072_i32
  DDCAPS2_CANRENDERWINDOWED = 524288_i32
  DDCAPS2_CANCALIBRATEGAMMA = 1048576_i32
  DDCAPS2_FLIPINTERVAL = 2097152_i32
  DDCAPS2_FLIPNOVSYNC = 4194304_i32
  DDCAPS2_CANMANAGETEXTURE = 8388608_i32
  DDCAPS2_TEXMANINNONLOCALVIDMEM = 16777216_i32
  DDCAPS2_STEREO = 33554432_i32
  DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL = 67108864_i32
  DDCAPS2_RESERVED1 = 134217728_i32
  DDCAPS2_CANMANAGERESOURCE = 268435456_i32
  DDCAPS2_DYNAMICTEXTURES = 536870912_i32
  DDCAPS2_CANAUTOGENMIPMAP = 1073741824_i32
  DDCAPS2_CANSHARERESOURCE = -2147483648_i32
  DDFXALPHACAPS_BLTALPHAEDGEBLEND = 1_i32
  DDFXALPHACAPS_BLTALPHAPIXELS = 2_i32
  DDFXALPHACAPS_BLTALPHAPIXELSNEG = 4_i32
  DDFXALPHACAPS_BLTALPHASURFACES = 8_i32
  DDFXALPHACAPS_BLTALPHASURFACESNEG = 16_i32
  DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 32_i32
  DDFXALPHACAPS_OVERLAYALPHAPIXELS = 64_i32
  DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 128_i32
  DDFXALPHACAPS_OVERLAYALPHASURFACES = 256_i32
  DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 512_i32
  DDFXCAPS_BLTARITHSTRETCHY = 32_i32
  DDFXCAPS_BLTARITHSTRETCHYN = 16_i32
  DDFXCAPS_BLTMIRRORLEFTRIGHT = 64_i32
  DDFXCAPS_BLTMIRRORUPDOWN = 128_i32
  DDFXCAPS_BLTROTATION = 256_i32
  DDFXCAPS_BLTROTATION90 = 512_i32
  DDFXCAPS_BLTSHRINKX = 1024_i32
  DDFXCAPS_BLTSHRINKXN = 2048_i32
  DDFXCAPS_BLTSHRINKY = 4096_i32
  DDFXCAPS_BLTSHRINKYN = 8192_i32
  DDFXCAPS_BLTSTRETCHX = 16384_i32
  DDFXCAPS_BLTSTRETCHXN = 32768_i32
  DDFXCAPS_BLTSTRETCHY = 65536_i32
  DDFXCAPS_BLTSTRETCHYN = 131072_i32
  DDFXCAPS_OVERLAYARITHSTRETCHY = 262144_i32
  DDFXCAPS_OVERLAYARITHSTRETCHYN = 8_i32
  DDFXCAPS_OVERLAYSHRINKX = 524288_i32
  DDFXCAPS_OVERLAYSHRINKXN = 1048576_i32
  DDFXCAPS_OVERLAYSHRINKY = 2097152_i32
  DDFXCAPS_OVERLAYSHRINKYN = 4194304_i32
  DDFXCAPS_OVERLAYSTRETCHX = 8388608_i32
  DDFXCAPS_OVERLAYSTRETCHXN = 16777216_i32
  DDFXCAPS_OVERLAYSTRETCHY = 33554432_i32
  DDFXCAPS_OVERLAYSTRETCHYN = 67108864_i32
  DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 134217728_i32
  DDFXCAPS_OVERLAYMIRRORUPDOWN = 268435456_i32
  DDFXCAPS_OVERLAYDEINTERLACE = 536870912_i32
  DDFXCAPS_BLTALPHA = 1_i32
  DDFXCAPS_BLTFILTER = 32_i32
  DDFXCAPS_OVERLAYALPHA = 4_i32
  DDFXCAPS_OVERLAYFILTER = 262144_i32
  DDSVCAPS_RESERVED1 = 1_i32
  DDSVCAPS_RESERVED2 = 2_i32
  DDSVCAPS_RESERVED3 = 4_i32
  DDSVCAPS_RESERVED4 = 8_i32
  DDSVCAPS_STEREOSEQUENTIAL = 16_i32
  DDPCAPS_4BIT = 1_i32
  DDPCAPS_8BITENTRIES = 2_i32
  DDPCAPS_8BIT = 4_i32
  DDPCAPS_INITIALIZE = 0_i32
  DDPCAPS_PRIMARYSURFACE = 16_i32
  DDPCAPS_PRIMARYSURFACELEFT = 32_i32
  DDPCAPS_ALLOW256 = 64_i32
  DDPCAPS_VSYNC = 128_i32
  DDPCAPS_1BIT = 256_i32
  DDPCAPS_2BIT = 512_i32
  DDPCAPS_ALPHA = 1024_i32
  DDSPD_IUNKNOWNPOINTER = 1_i32
  DDSPD_VOLATILE = 2_i32
  DDBD_1 = 16384_i32
  DDBD_2 = 8192_i32
  DDBD_4 = 4096_i32
  DDBD_8 = 2048_i32
  DDBD_16 = 1024_i32
  DDBD_24 = 512_i32
  DDBD_32 = 256_i32
  DDCKEY_COLORSPACE = 1_i32
  DDCKEY_DESTBLT = 2_i32
  DDCKEY_DESTOVERLAY = 4_i32
  DDCKEY_SRCBLT = 8_i32
  DDCKEY_SRCOVERLAY = 16_i32
  DDCKEYCAPS_DESTBLT = 1_i32
  DDCKEYCAPS_DESTBLTCLRSPACE = 2_i32
  DDCKEYCAPS_DESTBLTCLRSPACEYUV = 4_i32
  DDCKEYCAPS_DESTBLTYUV = 8_i32
  DDCKEYCAPS_DESTOVERLAY = 16_i32
  DDCKEYCAPS_DESTOVERLAYCLRSPACE = 32_i32
  DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 64_i32
  DDCKEYCAPS_DESTOVERLAYONEACTIVE = 128_i32
  DDCKEYCAPS_DESTOVERLAYYUV = 256_i32
  DDCKEYCAPS_SRCBLT = 512_i32
  DDCKEYCAPS_SRCBLTCLRSPACE = 1024_i32
  DDCKEYCAPS_SRCBLTCLRSPACEYUV = 2048_i32
  DDCKEYCAPS_SRCBLTYUV = 4096_i32
  DDCKEYCAPS_SRCOVERLAY = 8192_i32
  DDCKEYCAPS_SRCOVERLAYCLRSPACE = 16384_i32
  DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 32768_i32
  DDCKEYCAPS_SRCOVERLAYONEACTIVE = 65536_i32
  DDCKEYCAPS_SRCOVERLAYYUV = 131072_i32
  DDCKEYCAPS_NOCOSTOVERLAY = 262144_i32
  DDPF_ALPHAPIXELS = 1_i32
  DDPF_ALPHA = 2_i32
  DDPF_FOURCC = 4_i32
  DDPF_PALETTEINDEXED4 = 8_i32
  DDPF_PALETTEINDEXEDTO8 = 16_i32
  DDPF_PALETTEINDEXED8 = 32_i32
  DDPF_RGB = 64_i32
  DDPF_COMPRESSED = 128_i32
  DDPF_RGBTOYUV = 256_i32
  DDPF_YUV = 512_i32
  DDPF_ZBUFFER = 1024_i32
  DDPF_PALETTEINDEXED1 = 2048_i32
  DDPF_PALETTEINDEXED2 = 4096_i32
  DDPF_ZPIXELS = 8192_i32
  DDPF_STENCILBUFFER = 16384_i32
  DDPF_ALPHAPREMULT = 32768_i32
  DDPF_LUMINANCE = 131072_i32
  DDPF_BUMPLUMINANCE = 262144_i32
  DDPF_BUMPDUDV = 524288_i32
  DDENUMSURFACES_ALL = 1_i32
  DDENUMSURFACES_MATCH = 2_i32
  DDENUMSURFACES_NOMATCH = 4_i32
  DDENUMSURFACES_CANBECREATED = 8_i32
  DDENUMSURFACES_DOESEXIST = 16_i32
  DDSDM_STANDARDVGAMODE = 1_i32
  DDEDM_REFRESHRATES = 1_i32
  DDEDM_STANDARDVGAMODES = 2_i32
  DDSCL_FULLSCREEN = 1_i32
  DDSCL_ALLOWREBOOT = 2_i32
  DDSCL_NOWINDOWCHANGES = 4_i32
  DDSCL_NORMAL = 8_i32
  DDSCL_EXCLUSIVE = 16_i32
  DDSCL_ALLOWMODEX = 64_i32
  DDSCL_SETFOCUSWINDOW = 128_i32
  DDSCL_SETDEVICEWINDOW = 256_i32
  DDSCL_CREATEDEVICEWINDOW = 512_i32
  DDSCL_MULTITHREADED = 1024_i32
  DDSCL_FPUSETUP = 2048_i32
  DDSCL_FPUPRESERVE = 4096_i32
  DDBLT_ALPHADEST = 1_i32
  DDBLT_ALPHADESTCONSTOVERRIDE = 2_i32
  DDBLT_ALPHADESTNEG = 4_i32
  DDBLT_ALPHADESTSURFACEOVERRIDE = 8_i32
  DDBLT_ALPHAEDGEBLEND = 16_i32
  DDBLT_ALPHASRC = 32_i32
  DDBLT_ALPHASRCCONSTOVERRIDE = 64_i32
  DDBLT_ALPHASRCNEG = 128_i32
  DDBLT_ALPHASRCSURFACEOVERRIDE = 256_i32
  DDBLT_ASYNC = 512_i32
  DDBLT_COLORFILL = 1024_i32
  DDBLT_DDFX = 2048_i32
  DDBLT_DDROPS = 4096_i32
  DDBLT_KEYDEST = 8192_i32
  DDBLT_KEYDESTOVERRIDE = 16384_i32
  DDBLT_KEYSRC = 32768_i32
  DDBLT_KEYSRCOVERRIDE = 65536_i32
  DDBLT_ROP = 131072_i32
  DDBLT_ROTATIONANGLE = 262144_i32
  DDBLT_ZBUFFER = 524288_i32
  DDBLT_ZBUFFERDESTCONSTOVERRIDE = 1048576_i32
  DDBLT_ZBUFFERDESTOVERRIDE = 2097152_i32
  DDBLT_ZBUFFERSRCCONSTOVERRIDE = 4194304_i32
  DDBLT_ZBUFFERSRCOVERRIDE = 8388608_i32
  DDBLT_WAIT = 16777216_i32
  DDBLT_DEPTHFILL = 33554432_i32
  DDBLT_DONOTWAIT = 134217728_i32
  DDBLT_PRESENTATION = 268435456_i32
  DDBLT_LAST_PRESENTATION = 536870912_i32
  DDBLT_EXTENDED_FLAGS = 1073741824_i32
  DDBLT_EXTENDED_LINEAR_CONTENT = 4_i32
  DDBLTFAST_NOCOLORKEY = 0_u32
  DDBLTFAST_SRCCOLORKEY = 1_u32
  DDBLTFAST_DESTCOLORKEY = 2_u32
  DDBLTFAST_WAIT = 16_u32
  DDBLTFAST_DONOTWAIT = 32_u32
  DDFLIP_WAIT = 1_i32
  DDFLIP_EVEN = 2_i32
  DDFLIP_ODD = 4_i32
  DDFLIP_NOVSYNC = 8_i32
  DDFLIP_INTERVAL2 = 33554432_i32
  DDFLIP_INTERVAL3 = 50331648_i32
  DDFLIP_INTERVAL4 = 67108864_i32
  DDFLIP_STEREO = 16_i32
  DDFLIP_DONOTWAIT = 32_i32
  DDOVER_ALPHADEST = 1_i32
  DDOVER_ALPHADESTCONSTOVERRIDE = 2_i32
  DDOVER_ALPHADESTNEG = 4_i32
  DDOVER_ALPHADESTSURFACEOVERRIDE = 8_i32
  DDOVER_ALPHAEDGEBLEND = 16_i32
  DDOVER_ALPHASRC = 32_i32
  DDOVER_ALPHASRCCONSTOVERRIDE = 64_i32
  DDOVER_ALPHASRCNEG = 128_i32
  DDOVER_ALPHASRCSURFACEOVERRIDE = 256_i32
  DDOVER_HIDE = 512_i32
  DDOVER_KEYDEST = 1024_i32
  DDOVER_KEYDESTOVERRIDE = 2048_i32
  DDOVER_KEYSRC = 4096_i32
  DDOVER_KEYSRCOVERRIDE = 8192_i32
  DDOVER_SHOW = 16384_i32
  DDOVER_ADDDIRTYRECT = 32768_i32
  DDOVER_REFRESHDIRTYRECTS = 65536_i32
  DDOVER_REFRESHALL = 131072_i32
  DDOVER_DDFX = 524288_i32
  DDOVER_AUTOFLIP = 1048576_i32
  DDOVER_BOB = 2097152_i32
  DDOVER_OVERRIDEBOBWEAVE = 4194304_i32
  DDOVER_INTERLEAVED = 8388608_i32
  DDOVER_BOBHARDWARE = 16777216_i32
  DDOVER_ARGBSCALEFACTORS = 33554432_i32
  DDOVER_DEGRADEARGBSCALING = 67108864_i32
  DDSETSURFACEDESC_RECREATEDC = 0_i32
  DDSETSURFACEDESC_PRESERVEDC = 1_i32
  DDLOCK_SURFACEMEMORYPTR = 0_i32
  DDLOCK_WAIT = 1_i32
  DDLOCK_EVENT = 2_i32
  DDLOCK_READONLY = 16_i32
  DDLOCK_WRITEONLY = 32_i32
  DDLOCK_NOSYSLOCK = 2048_i32
  DDLOCK_NOOVERWRITE = 4096_i32
  DDLOCK_DISCARDCONTENTS = 8192_i32
  DDLOCK_OKTOSWAP = 8192_i32
  DDLOCK_DONOTWAIT = 16384_i32
  DDLOCK_HASVOLUMETEXTUREBOXRECT = 32768_i32
  DDLOCK_NODIRTYUPDATE = 65536_i32
  DDBLTFX_ARITHSTRETCHY = 1_i32
  DDBLTFX_MIRRORLEFTRIGHT = 2_i32
  DDBLTFX_MIRRORUPDOWN = 4_i32
  DDBLTFX_NOTEARING = 8_i32
  DDBLTFX_ROTATE180 = 16_i32
  DDBLTFX_ROTATE270 = 32_i32
  DDBLTFX_ROTATE90 = 64_i32
  DDBLTFX_ZBUFFERRANGE = 128_i32
  DDBLTFX_ZBUFFERBASEDEST = 256_i32
  DDOVERFX_ARITHSTRETCHY = 1_i32
  DDOVERFX_MIRRORLEFTRIGHT = 2_i32
  DDOVERFX_MIRRORUPDOWN = 4_i32
  DDOVERFX_DEINTERLACE = 8_i32
  DDWAITVB_BLOCKBEGIN = 1_i32
  DDWAITVB_BLOCKBEGINEVENT = 2_i32
  DDWAITVB_BLOCKEND = 4_i32
  DDGFS_CANFLIP = 1_i32
  DDGFS_ISFLIPDONE = 2_i32
  DDGBS_CANBLT = 1_i32
  DDGBS_ISBLTDONE = 2_i32
  DDENUMOVERLAYZ_BACKTOFRONT = 0_i32
  DDENUMOVERLAYZ_FRONTTOBACK = 1_i32
  DDOVERZ_SENDTOFRONT = 0_i32
  DDOVERZ_SENDTOBACK = 1_i32
  DDOVERZ_MOVEFORWARD = 2_i32
  DDOVERZ_MOVEBACKWARD = 3_i32
  DDOVERZ_INSERTINFRONTOF = 4_i32
  DDOVERZ_INSERTINBACKOF = 5_i32
  DDSGR_CALIBRATE = 1_i32
  DDSMT_ISTESTREQUIRED = 1_i32
  DDEM_MODEPASSED = 1_i32
  DDEM_MODEFAILED = 2_i32
  DDENUMRET_CANCEL = 0_u32
  DDENUMRET_OK = 1_u32
  DDERR_NOTINITIALIZED = -2147221008_i32
  OBJECT_ISROOT = -2147483648_i32
  DDUNSUPPORTEDMODE = 4294967295_u32
  GUID_MiscellaneousCallbacks = "efd60cc0-49e7-11d0-889d-00aa00bbb76a"
  GUID_VideoPortCallbacks = "efd60cc1-49e7-11d0-889d-00aa00bbb76a"
  GUID_ColorControlCallbacks = "efd60cc2-49e7-11d0-889d-00aa00bbb76a"
  GUID_VideoPortCaps = "efd60cc3-49e7-11d0-889d-00aa00bbb76a"
  GUID_D3DCallbacks2 = "0ba584e1-70b6-11d0-889d-00aa00bbb76a"
  GUID_D3DCallbacks3 = "ddf41230-ec0a-11d0-a9b6-00aa00c0993e"
  GUID_NonLocalVidMemCaps = "86c4fa80-8d84-11d0-94e8-00c04fc34137"
  GUID_KernelCallbacks = "80863800-6b06-11d0-9b06-00a0c903a3b8"
  GUID_KernelCaps = "ffaa7540-7aa8-11d0-9b06-00a0c903a3b8"
  GUID_D3DExtendedCaps = "7de41f80-9d93-11d0-89ab-00a0c9054129"
  GUID_ZPixelFormats = "93869880-36cf-11d1-9b1b-00aa00bbb8ae"
  GUID_DDMoreSurfaceCaps = "3b8a0466-f269-11d1-880b-00c04fd930c5"
  GUID_DDStereoMode = "f828169c-a8e8-11d2-a1f2-00a0c983eaf6"
  GUID_OptSurfaceKmodeInfo = "e05c8472-51d4-11d1-8cce-00a0c90629a8"
  GUID_OptSurfaceUmodeInfo = "9d792804-5fa8-11d1-8cd0-00a0c90629a8"
  GUID_UserModeDriverInfo = "f0b0e8e2-5f97-11d1-8cd0-00a0c90629a8"
  GUID_UserModeDriverPassword = "97f861b6-60a1-11d1-8cd0-00a0c90629a8"
  GUID_D3DParseUnknownCommandCallback = "2e04ffa0-98e4-11d1-8ce1-00a0c90629a8"
  GUID_MotionCompCallbacks = "b1122b40-5da5-11d1-8fcf-00c04fc29b4e"
  GUID_Miscellaneous2Callbacks = "406b2f00-3e5a-11d1-b640-00aa00a1f96a"
  DDPF_NOVEL_TEXTURE_FORMAT = 1048576_i32
  DDPF_D3DFORMAT = 2097152_i32
  D3DFORMAT_OP_TEXTURE = 1_i32
  D3DFORMAT_OP_VOLUMETEXTURE = 2_i32
  D3DFORMAT_OP_CUBETEXTURE = 4_i32
  D3DFORMAT_OP_OFFSCREEN_RENDERTARGET = 8_i32
  D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET = 16_i32
  D3DFORMAT_OP_ZSTENCIL = 64_i32
  D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH = 128_i32
  D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET = 256_i32
  D3DFORMAT_OP_DISPLAYMODE = 1024_i32
  D3DFORMAT_OP_3DACCELERATION = 2048_i32
  D3DFORMAT_OP_PIXELSIZE = 4096_i32
  D3DFORMAT_OP_CONVERT_TO_ARGB = 8192_i32
  D3DFORMAT_OP_OFFSCREENPLAIN = 16384_i32
  D3DFORMAT_OP_SRGBREAD = 32768_i32
  D3DFORMAT_OP_BUMPMAP = 65536_i32
  D3DFORMAT_OP_DMAP = 131072_i32
  D3DFORMAT_OP_NOFILTER = 262144_i32
  D3DFORMAT_MEMBEROFGROUP_ARGB = 524288_i32
  D3DFORMAT_OP_SRGBWRITE = 1048576_i32
  D3DFORMAT_OP_NOALPHABLEND = 2097152_i32
  D3DFORMAT_OP_AUTOGENMIPMAP = 4194304_i32
  D3DFORMAT_OP_VERTEXTEXTURE = 8388608_i32
  D3DFORMAT_OP_NOTEXCOORDWRAPNORMIP = 16777216_i32
  DELETED_OK = 0_u32
  DELETED_LASTONE = 1_u32
  DELETED_NOTFOUND = 2_u32
  DCICOMMAND = 3075_u32
  DD_VERSION = 512_i32
  DD_RUNTIME_VERSION = 2306_i32
  DD_HAL_VERSION = 256_u32
  DDCREATEDRIVEROBJECT = 10_u32
  DDGET32BITDRIVERNAME = 11_u32
  DDNEWCALLBACKFNS = 12_u32
  DDVERSIONINFO = 13_u32
  CCHDEVICENAME = 32_u32
  MAX_DRIVER_NAME = 32_u32
  MAX_PALETTE_SIZE = 256_u32
  MAX_AUTOFLIP_BUFFERS = 10_u32
  DDSCAPS_EXECUTEBUFFER = 8388608_i32
  DDSCAPS2_VERTEXBUFFER = 32_i32
  DDSCAPS2_COMMANDBUFFER = 64_i32
  DDSCAPS2_INDEXBUFFER = 67108864_i32
  DDSCAPS3_VIDEO = 512_i32
  D3DFMT_INTERNAL_D32 = 71_u32
  D3DFMT_INTERNAL_S1D15 = 72_u32
  D3DFMT_INTERNAL_D15S1 = 73_u32
  D3DFMT_INTERNAL_S8D24 = 74_u32
  D3DFMT_INTERNAL_D24S8 = 75_u32
  D3DFMT_INTERNAL_X8D24 = 76_u32
  D3DFMT_INTERNAL_D24X8 = 77_u32
  DDHAL_PLEASEALLOC_BLOCKSIZE = 2_i32
  DDHAL_PLEASEALLOC_LINEARSIZE = 3_i32
  VIDMEM_ISLINEAR = 1_i32
  VIDMEM_ISRECTANGULAR = 2_i32
  VIDMEM_ISHEAP = 4_i32
  VIDMEM_ISNONLOCAL = 8_i32
  VIDMEM_ISWC = 16_i32
  VIDMEM_HEAPDISABLED = 32_i32
  HEAPALIASINFO_MAPPEDREAL = 1_i32
  HEAPALIASINFO_MAPPEDDUMMY = 2_i32
  DDHAL_CB32_DESTROYDRIVER = 1_i32
  DDHAL_CB32_CREATESURFACE = 2_i32
  DDHAL_CB32_SETCOLORKEY = 4_i32
  DDHAL_CB32_SETMODE = 8_i32
  DDHAL_CB32_WAITFORVERTICALBLANK = 16_i32
  DDHAL_CB32_CANCREATESURFACE = 32_i32
  DDHAL_CB32_CREATEPALETTE = 64_i32
  DDHAL_CB32_GETSCANLINE = 128_i32
  DDHAL_CB32_SETEXCLUSIVEMODE = 256_i32
  DDHAL_CB32_FLIPTOGDISURFACE = 512_i32
  DDHAL_PALCB32_DESTROYPALETTE = 1_i32
  DDHAL_PALCB32_SETENTRIES = 2_i32
  DDHAL_SURFCB32_DESTROYSURFACE = 1_i32
  DDHAL_SURFCB32_FLIP = 2_i32
  DDHAL_SURFCB32_SETCLIPLIST = 4_i32
  DDHAL_SURFCB32_LOCK = 8_i32
  DDHAL_SURFCB32_UNLOCK = 16_i32
  DDHAL_SURFCB32_BLT = 32_i32
  DDHAL_SURFCB32_SETCOLORKEY = 64_i32
  DDHAL_SURFCB32_ADDATTACHEDSURFACE = 128_i32
  DDHAL_SURFCB32_GETBLTSTATUS = 256_i32
  DDHAL_SURFCB32_GETFLIPSTATUS = 512_i32
  DDHAL_SURFCB32_UPDATEOVERLAY = 1024_i32
  DDHAL_SURFCB32_SETOVERLAYPOSITION = 2048_i32
  DDHAL_SURFCB32_RESERVED4 = 4096_i32
  DDHAL_SURFCB32_SETPALETTE = 8192_i32
  DDHAL_MISCCB32_GETAVAILDRIVERMEMORY = 1_i32
  DDHAL_MISCCB32_UPDATENONLOCALHEAP = 2_i32
  DDHAL_MISCCB32_GETHEAPALIGNMENT = 4_i32
  DDHAL_MISCCB32_GETSYSMEMBLTSTATUS = 8_i32
  DDHAL_MISC2CB32_CREATESURFACEEX = 2_i32
  DDHAL_MISC2CB32_GETDRIVERSTATE = 4_i32
  DDHAL_MISC2CB32_DESTROYDDLOCAL = 8_i32
  DDHAL_EXEBUFCB32_CANCREATEEXEBUF = 1_i32
  DDHAL_EXEBUFCB32_CREATEEXEBUF = 2_i32
  DDHAL_EXEBUFCB32_DESTROYEXEBUF = 4_i32
  DDHAL_EXEBUFCB32_LOCKEXEBUF = 8_i32
  DDHAL_EXEBUFCB32_UNLOCKEXEBUF = 16_i32
  DDHAL_VPORT32_CANCREATEVIDEOPORT = 1_i32
  DDHAL_VPORT32_CREATEVIDEOPORT = 2_i32
  DDHAL_VPORT32_FLIP = 4_i32
  DDHAL_VPORT32_GETBANDWIDTH = 8_i32
  DDHAL_VPORT32_GETINPUTFORMATS = 16_i32
  DDHAL_VPORT32_GETOUTPUTFORMATS = 32_i32
  DDHAL_VPORT32_GETFIELD = 128_i32
  DDHAL_VPORT32_GETLINE = 256_i32
  DDHAL_VPORT32_GETCONNECT = 512_i32
  DDHAL_VPORT32_DESTROY = 1024_i32
  DDHAL_VPORT32_GETFLIPSTATUS = 2048_i32
  DDHAL_VPORT32_UPDATE = 4096_i32
  DDHAL_VPORT32_WAITFORSYNC = 8192_i32
  DDHAL_VPORT32_GETSIGNALSTATUS = 16384_i32
  DDHAL_VPORT32_COLORCONTROL = 32768_i32
  DDHAL_COLOR_COLORCONTROL = 1_i32
  DDHAL_KERNEL_SYNCSURFACEDATA = 1_i32
  DDHAL_KERNEL_SYNCVIDEOPORTDATA = 2_i32
  DDHAL_MOCOMP32_GETGUIDS = 1_u32
  DDHAL_MOCOMP32_GETFORMATS = 2_u32
  DDHAL_MOCOMP32_CREATE = 4_u32
  DDHAL_MOCOMP32_GETCOMPBUFFINFO = 8_u32
  DDHAL_MOCOMP32_GETINTERNALINFO = 16_u32
  DDHAL_MOCOMP32_BEGINFRAME = 32_u32
  DDHAL_MOCOMP32_ENDFRAME = 64_u32
  DDHAL_MOCOMP32_RENDER = 128_u32
  DDHAL_MOCOMP32_QUERYSTATUS = 256_u32
  DDHAL_MOCOMP32_DESTROY = 512_u32
  DDHAL_DRIVER_NOTHANDLED = 0_i32
  DDHAL_DRIVER_HANDLED = 1_i32
  DDHAL_DRIVER_NOCKEYHW = 2_i32
  DDRAWIPAL_256 = 1_i32
  DDRAWIPAL_16 = 2_i32
  DDRAWIPAL_GDI = 4_i32
  DDRAWIPAL_STORED_8 = 8_i32
  DDRAWIPAL_STORED_16 = 16_i32
  DDRAWIPAL_STORED_24 = 32_i32
  DDRAWIPAL_EXCLUSIVE = 64_i32
  DDRAWIPAL_INHEL = 128_i32
  DDRAWIPAL_DIRTY = 256_i32
  DDRAWIPAL_ALLOW256 = 512_i32
  DDRAWIPAL_4 = 1024_i32
  DDRAWIPAL_2 = 2048_i32
  DDRAWIPAL_STORED_8INDEX = 4096_i32
  DDRAWIPAL_ALPHA = 8192_i32
  DDRAWICLIP_WATCHWINDOW = 1_i32
  DDRAWICLIP_ISINITIALIZED = 2_i32
  DDRAWICLIP_INMASTERSPRITELIST = 4_i32
  DDAL_IMPLICIT = 1_i32
  ACCESSRECT_VRAMSTYLE = 1_i32
  ACCESSRECT_NOTHOLDINGWIN16LOCK = 2_i32
  ACCESSRECT_BROKEN = 4_i32
  PFINDEX_UNINITIALIZED = 0_u32
  DDRAWISURFGBL_MEMFREE = 1_i32
  DDRAWISURFGBL_SYSMEMREQUESTED = 2_i32
  DDRAWISURFGBL_ISGDISURFACE = 4_i32
  DDRAWISURFGBL_SOFTWAREAUTOFLIP = 8_i32
  DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK = 16_i32
  DDRAWISURFGBL_LOCKVRAMSTYLE = 32_i32
  DDRAWISURFGBL_LOCKBROKEN = 64_i32
  DDRAWISURFGBL_IMPLICITHANDLE = 128_i32
  DDRAWISURFGBL_ISCLIENTMEM = 256_i32
  DDRAWISURFGBL_HARDWAREOPSOURCE = 512_i32
  DDRAWISURFGBL_HARDWAREOPDEST = 1024_i32
  DDRAWISURFGBL_VPORTINTERLEAVED = 2048_i32
  DDRAWISURFGBL_VPORTDATA = 4096_i32
  DDRAWISURFGBL_LATEALLOCATELINEAR = 8192_i32
  DDRAWISURFGBL_SYSMEMEXECUTEBUFFER = 16384_i32
  DDRAWISURFGBL_FASTLOCKHELD = 32768_i32
  DDRAWISURFGBL_READONLYLOCKHELD = 65536_i32
  DDRAWISURFGBL_DX8SURFACE = 524288_i32
  DDRAWISURFGBL_DDHELDONTFREE = 1048576_i32
  DDRAWISURFGBL_NOTIFYWHENUNLOCKED = 2097152_i32
  DDRAWISURFGBL_RESERVED0 = -2147483648_i32
  DDRAWISURF_ATTACHED = 1_i32
  DDRAWISURF_IMPLICITCREATE = 2_i32
  DDRAWISURF_ISFREE = 4_i32
  DDRAWISURF_ATTACHED_FROM = 8_i32
  DDRAWISURF_IMPLICITROOT = 16_i32
  DDRAWISURF_PARTOFPRIMARYCHAIN = 32_i32
  DDRAWISURF_DATAISALIASED = 64_i32
  DDRAWISURF_HASDC = 128_i32
  DDRAWISURF_HASCKEYDESTOVERLAY = 256_i32
  DDRAWISURF_HASCKEYDESTBLT = 512_i32
  DDRAWISURF_HASCKEYSRCOVERLAY = 1024_i32
  DDRAWISURF_HASCKEYSRCBLT = 2048_i32
  DDRAWISURF_LOCKEXCLUDEDCURSOR = 4096_i32
  DDRAWISURF_HASPIXELFORMAT = 8192_i32
  DDRAWISURF_HASOVERLAYDATA = 16384_i32
  DDRAWISURF_SETGAMMA = 32768_i32
  DDRAWISURF_SW_CKEYDESTOVERLAY = 65536_i32
  DDRAWISURF_SW_CKEYDESTBLT = 131072_i32
  DDRAWISURF_SW_CKEYSRCOVERLAY = 262144_i32
  DDRAWISURF_SW_CKEYSRCBLT = 524288_i32
  DDRAWISURF_HW_CKEYDESTOVERLAY = 1048576_i32
  DDRAWISURF_HW_CKEYDESTBLT = 2097152_i32
  DDRAWISURF_HW_CKEYSRCOVERLAY = 4194304_i32
  DDRAWISURF_HW_CKEYSRCBLT = 8388608_i32
  DDRAWISURF_INMASTERSPRITELIST = 16777216_i32
  DDRAWISURF_HELCB = 33554432_i32
  DDRAWISURF_FRONTBUFFER = 67108864_i32
  DDRAWISURF_BACKBUFFER = 134217728_i32
  DDRAWISURF_INVALID = 268435456_i32
  DDRAWISURF_DCIBUSY = 536870912_i32
  DDRAWISURF_GETDCNULL = 1073741824_i32
  DDRAWISURF_STEREOSURFACELEFT = 536870912_i32
  DDRAWISURF_DRIVERMANAGED = 1073741824_i32
  DDRAWISURF_DCILOCK = -2147483648_i32
  ROP_HAS_SOURCE = 1_i32
  ROP_HAS_PATTERN = 2_i32
  DDMODEINFO_PALETTIZED = 1_u32
  DDMODEINFO_MODEX = 2_u32
  DDMODEINFO_UNSUPPORTED = 4_u32
  DDMODEINFO_STANDARDVGA = 8_u32
  DDMODEINFO_MAXREFRESH = 16_u32
  DDMODEINFO_STEREO = 32_u32
  DDRAWILCL_HASEXCLUSIVEMODE = 1_i32
  DDRAWILCL_ISFULLSCREEN = 2_i32
  DDRAWILCL_SETCOOPCALLED = 4_i32
  DDRAWILCL_ACTIVEYES = 8_i32
  DDRAWILCL_ACTIVENO = 16_i32
  DDRAWILCL_HOOKEDHWND = 32_i32
  DDRAWILCL_ALLOWMODEX = 64_i32
  DDRAWILCL_V1SCLBEHAVIOUR = 128_i32
  DDRAWILCL_MODEHASBEENCHANGED = 256_i32
  DDRAWILCL_CREATEDWINDOW = 512_i32
  DDRAWILCL_DIRTYDC = 1024_i32
  DDRAWILCL_DISABLEINACTIVATE = 2048_i32
  DDRAWILCL_CURSORCLIPPED = 4096_i32
  DDRAWILCL_EXPLICITMONITOR = 8192_i32
  DDRAWILCL_MULTITHREADED = 16384_i32
  DDRAWILCL_FPUSETUP = 32768_i32
  DDRAWILCL_POWEREDDOWN = 65536_i32
  DDRAWILCL_DIRECTDRAW7 = 131072_i32
  DDRAWILCL_ATTEMPTEDD3DCONTEXT = 262144_i32
  DDRAWILCL_FPUPRESERVE = 524288_i32
  DDRAWILCL_DX8DRIVER = 1048576_i32
  DDRAWILCL_DIRECTDRAW8 = 2097152_i32
  DDRAWI_xxxxxxxxx1 = 1_i32
  DDRAWI_xxxxxxxxx2 = 2_i32
  DDRAWI_VIRTUALDESKTOP = 8_i32
  DDRAWI_MODEX = 16_i32
  DDRAWI_DISPLAYDRV = 32_i32
  DDRAWI_FULLSCREEN = 64_i32
  DDRAWI_MODECHANGED = 128_i32
  DDRAWI_NOHARDWARE = 256_i32
  DDRAWI_PALETTEINIT = 512_i32
  DDRAWI_NOEMULATION = 1024_i32
  DDRAWI_HASCKEYDESTOVERLAY = 2048_i32
  DDRAWI_HASCKEYSRCOVERLAY = 4096_i32
  DDRAWI_HASGDIPALETTE = 8192_i32
  DDRAWI_EMULATIONINITIALIZED = 16384_i32
  DDRAWI_HASGDIPALETTE_EXCLUSIVE = 32768_i32
  DDRAWI_MODEXILLEGAL = 65536_i32
  DDRAWI_FLIPPEDTOGDI = 131072_i32
  DDRAWI_NEEDSWIN16FORVRAMLOCK = 262144_i32
  DDRAWI_PDEVICEVRAMBITCLEARED = 524288_i32
  DDRAWI_STANDARDVGA = 1048576_i32
  DDRAWI_EXTENDEDALIGNMENT = 2097152_i32
  DDRAWI_CHANGINGMODE = 4194304_i32
  DDRAWI_GDIDRV = 8388608_i32
  DDRAWI_ATTACHEDTODESKTOP = 16777216_i32
  DDRAWI_UMODELOADED = 33554432_i32
  DDRAWI_DDRAWDATANOTFETCHED = 67108864_i32
  DDRAWI_SECONDARYDRIVERLOADED = 134217728_i32
  DDRAWI_TESTINGMODES = 268435456_i32
  DDRAWI_DRIVERINFO2 = 536870912_i32
  DDRAWI_BADPDEV = 1073741824_i32
  DDRAWIVPORT_ON = 1_u32
  DDRAWIVPORT_SOFTWARE_AUTOFLIP = 2_u32
  DDRAWIVPORT_COLORKEYANDINTERP = 4_u32
  DDRAWIVPORT_NOKERNELHANDLES = 8_u32
  DDRAWIVPORT_SOFTWARE_BOB = 16_u32
  DDRAWIVPORT_VBION = 32_u32
  DDRAWIVPORT_VIDEOON = 64_u32
  DDHALINFO_ISPRIMARYDISPLAY = 1_i32
  DDHALINFO_MODEXILLEGAL = 2_i32
  DDHALINFO_GETDRIVERINFOSET = 4_i32
  DDHALINFO_GETDRIVERINFO2 = 8_i32
  DDWAITVB_I_TESTVB = -2147483642_i32
  DDRAWI_VPORTSTART = 1_u32
  DDRAWI_VPORTSTOP = 2_u32
  DDRAWI_VPORTUPDATE = 3_u32
  DDRAWI_VPORTGETCOLOR = 1_u32
  DDRAWI_VPORTSETCOLOR = 2_u32
  DDRAWI_GETCOLOR = 1_u32
  DDRAWI_SETCOLOR = 2_u32
  DDMCQUERY_READ = 1_u32
  GUID_D3DCaps = "7bf06991-8794-11d0-9139-080036d2ef02"
  GUID_D3DCallbacks = "7bf06990-8794-11d0-9139-080036d2ef02"
  GUID_DDMoreCaps = "880baf30-b030-11d0-8ea7-00609797ea5b"
  GUID_NTCallbacks = "6fe9ecde-df89-11d1-9db0-0060082771ba"
  GUID_GetHeapAlignment = "42e02f16-7b41-11d2-8bff-00a0c983eaf6"
  GUID_UpdateNonLocalHeap = "42e02f17-7b41-11d2-8bff-00a0c983eaf6"
  GUID_NTPrivateDriverCaps = "fad16a23-7b66-11d2-83d7-00c04f7ce58c"
  GUID_VPE2Callbacks = "52882147-2d47-469a-a0d1-03455890f6c8"
  DDSCAPS_COMMANDBUFFER = 1024_i32
  DDHAL_PLEASEALLOC_USERMEM = 4_i32
  DDHAL_CB32_MAPMEMORY = -2147483648_i32
  DDHAL_MISC2CB32_ALPHABLT = 1_i32
  DDHAL_CREATESURFACEEX_SWAPHANDLES = 1_i32
  DDHAL_NTCB32_FREEDRIVERMEMORY = 1_i32
  DDHAL_NTCB32_SETEXCLUSIVEMODE = 2_i32
  DDHAL_NTCB32_FLIPTOGDISURFACE = 4_i32
  DDHAL_VPORT32_GETAUTOFLIPSURF = 64_i32
  DDHAL_D3DBUFCB32_CANCREATED3DBUF = 1_i32
  DDHAL_D3DBUFCB32_CREATED3DBUF = 2_i32
  DDHAL_D3DBUFCB32_DESTROYD3DBUF = 4_i32
  DDHAL_D3DBUFCB32_LOCKD3DBUF = 8_i32
  DDHAL_D3DBUFCB32_UNLOCKD3DBUF = 16_i32
  DDHAL_PRIVATECAP_ATOMICSURFACECREATION = 1_i32
  DDHAL_PRIVATECAP_NOTIFYPRIMARYCREATION = 2_i32
  DDHAL_PRIVATECAP_RESERVED1 = 4_i32
  DDBLT_AFLAGS = -2147483648_i32
  DDABLT_SRCOVERDEST = 1_i32
  DDKERNELCAPS_SKIPFIELDS = 1_i32
  DDKERNELCAPS_AUTOFLIP = 2_i32
  DDKERNELCAPS_SETSTATE = 4_i32
  DDKERNELCAPS_LOCK = 8_i32
  DDKERNELCAPS_FLIPVIDEOPORT = 16_i32
  DDKERNELCAPS_FLIPOVERLAY = 32_i32
  DDKERNELCAPS_CAPTURE_SYSMEM = 64_i32
  DDKERNELCAPS_CAPTURE_NONLOCALVIDMEM = 128_i32
  DDKERNELCAPS_FIELDPOLARITY = 256_i32
  DDKERNELCAPS_CAPTURE_INVERTED = 512_i32
  DDIRQ_DISPLAY_VSYNC = 1_i32
  DDIRQ_RESERVED1 = 2_i32
  DDIRQ_VPORT0_VSYNC = 4_i32
  DDIRQ_VPORT0_LINE = 8_i32
  DDIRQ_VPORT1_VSYNC = 16_i32
  DDIRQ_VPORT1_LINE = 32_i32
  DDIRQ_VPORT2_VSYNC = 64_i32
  DDIRQ_VPORT2_LINE = 128_i32
  DDIRQ_VPORT3_VSYNC = 256_i32
  DDIRQ_VPORT3_LINE = 512_i32
  DDIRQ_VPORT4_VSYNC = 1024_i32
  DDIRQ_VPORT4_LINE = 2048_i32
  DDIRQ_VPORT5_VSYNC = 4096_i32
  DDIRQ_VPORT5_LINE = 8192_i32
  DDIRQ_VPORT6_VSYNC = 16384_i32
  DDIRQ_VPORT6_LINE = 32768_i32
  DDIRQ_VPORT7_VSYNC = 65536_i32
  DDIRQ_VPORT7_LINE = 131072_i32
  DDIRQ_VPORT8_VSYNC = 262144_i32
  DDIRQ_VPORT8_LINE = 524288_i32
  DDIRQ_VPORT9_VSYNC = 65536_i32
  DDIRQ_VPORT9_LINE = 131072_i32
  SURFACEALIGN_DISCARDABLE = 1_i32
  VMEMHEAP_LINEAR = 1_i32
  VMEMHEAP_RECTANGULAR = 2_i32
  VMEMHEAP_ALIGNMENT = 4_i32
  DDVPTYPE_E_HREFH_VREFH = "54f39980-da60-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_E_HREFH_VREFL = "92783220-da60-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_E_HREFL_VREFH = "a07a02e0-da60-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_E_HREFL_VREFL = "e09c77e0-da60-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_CCIR656 = "fca326a0-da60-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_BROOKTREE = "1352a560-da61-11cf-9b06-00a0c903a3b8"
  DDVPTYPE_PHILIPS = "332cf160-da61-11cf-9b06-00a0c903a3b8"
  DDVPD_WIDTH = 1_i32
  DDVPD_HEIGHT = 2_i32
  DDVPD_ID = 4_i32
  DDVPD_CAPS = 8_i32
  DDVPD_FX = 16_i32
  DDVPD_AUTOFLIP = 32_i32
  DDVPD_ALIGN = 64_i32
  DDVPD_PREFERREDAUTOFLIP = 128_i32
  DDVPD_FILTERQUALITY = 256_i32
  DDVPCONNECT_DOUBLECLOCK = 1_i32
  DDVPCONNECT_VACT = 2_i32
  DDVPCONNECT_INVERTPOLARITY = 4_i32
  DDVPCONNECT_DISCARDSVREFDATA = 8_i32
  DDVPCONNECT_HALFLINE = 16_i32
  DDVPCONNECT_INTERLACED = 32_i32
  DDVPCONNECT_SHAREEVEN = 64_i32
  DDVPCONNECT_SHAREODD = 128_i32
  DDVPCAPS_AUTOFLIP = 1_i32
  DDVPCAPS_INTERLACED = 2_i32
  DDVPCAPS_NONINTERLACED = 4_i32
  DDVPCAPS_READBACKFIELD = 8_i32
  DDVPCAPS_READBACKLINE = 16_i32
  DDVPCAPS_SHAREABLE = 32_i32
  DDVPCAPS_SKIPEVENFIELDS = 64_i32
  DDVPCAPS_SKIPODDFIELDS = 128_i32
  DDVPCAPS_SYNCMASTER = 256_i32
  DDVPCAPS_VBISURFACE = 512_i32
  DDVPCAPS_COLORCONTROL = 1024_i32
  DDVPCAPS_OVERSAMPLEDVBI = 2048_i32
  DDVPCAPS_SYSTEMMEMORY = 4096_i32
  DDVPCAPS_VBIANDVIDEOINDEPENDENT = 8192_i32
  DDVPCAPS_HARDWAREDEINTERLACE = 16384_i32
  DDVPFX_CROPTOPDATA = 1_i32
  DDVPFX_CROPX = 2_i32
  DDVPFX_CROPY = 4_i32
  DDVPFX_INTERLEAVE = 8_i32
  DDVPFX_MIRRORLEFTRIGHT = 16_i32
  DDVPFX_MIRRORUPDOWN = 32_i32
  DDVPFX_PRESHRINKX = 64_i32
  DDVPFX_PRESHRINKY = 128_i32
  DDVPFX_PRESHRINKXB = 256_i32
  DDVPFX_PRESHRINKYB = 512_i32
  DDVPFX_PRESHRINKXS = 1024_i32
  DDVPFX_PRESHRINKYS = 2048_i32
  DDVPFX_PRESTRETCHX = 4096_i32
  DDVPFX_PRESTRETCHY = 8192_i32
  DDVPFX_PRESTRETCHXN = 16384_i32
  DDVPFX_PRESTRETCHYN = 32768_i32
  DDVPFX_VBICONVERT = 65536_i32
  DDVPFX_VBINOSCALE = 131072_i32
  DDVPFX_IGNOREVBIXCROP = 262144_i32
  DDVPFX_VBINOINTERLEAVE = 524288_i32
  DDVP_AUTOFLIP = 1_i32
  DDVP_CONVERT = 2_i32
  DDVP_CROP = 4_i32
  DDVP_INTERLEAVE = 8_i32
  DDVP_MIRRORLEFTRIGHT = 16_i32
  DDVP_MIRRORUPDOWN = 32_i32
  DDVP_PRESCALE = 64_i32
  DDVP_SKIPEVENFIELDS = 128_i32
  DDVP_SKIPODDFIELDS = 256_i32
  DDVP_SYNCMASTER = 512_i32
  DDVP_VBICONVERT = 1024_i32
  DDVP_VBINOSCALE = 2048_i32
  DDVP_OVERRIDEBOBWEAVE = 4096_i32
  DDVP_IGNOREVBIXCROP = 8192_i32
  DDVP_VBINOINTERLEAVE = 16384_i32
  DDVP_HARDWAREDEINTERLACE = 32768_i32
  DDVPFORMAT_VIDEO = 1_i32
  DDVPFORMAT_VBI = 2_i32
  DDVPTARGET_VIDEO = 1_i32
  DDVPTARGET_VBI = 2_i32
  DDVPWAIT_BEGIN = 1_i32
  DDVPWAIT_END = 2_i32
  DDVPWAIT_LINE = 3_i32
  DDVPFLIP_VIDEO = 1_i32
  DDVPFLIP_VBI = 2_i32
  DDVPSQ_NOSIGNAL = 1_i32
  DDVPSQ_SIGNALOK = 2_i32
  DDVPB_VIDEOPORT = 1_i32
  DDVPB_OVERLAY = 2_i32
  DDVPB_TYPE = 4_i32
  DDVPBCAPS_SOURCE = 1_i32
  DDVPBCAPS_DESTINATION = 2_i32
  DDVPCREATE_VBIONLY = 1_i32
  DDVPCREATE_VIDEOONLY = 2_i32
  DDVPSTATUS_VBIONLY = 1_i32
  DDVPSTATUS_VIDEOONLY = 2_i32
  GUID_DxApi = "8a79bef0-b915-11d0-9144-080036d2ef02"
  MDL_MAPPED_TO_SYSTEM_VA = 1_u32
  MDL_PAGES_LOCKED = 2_u32
  MDL_SOURCE_IS_NONPAGED_POOL = 4_u32
  MDL_ALLOCATED_FIXED_SIZE = 8_u32
  MDL_PARTIAL = 16_u32
  MDL_PARTIAL_HAS_BEEN_MAPPED = 32_u32
  MDL_IO_PAGE_READ = 64_u32
  MDL_WRITE_OPERATION = 128_u32
  MDL_PARENT_MAPPED_SYSTEM_VA = 256_u32
  MDL_LOCK_HELD = 512_u32
  MDL_SCATTER_GATHER_VA = 1024_u32
  MDL_IO_SPACE = 2048_u32
  MDL_NETWORK_HEADER = 4096_u32
  MDL_MAPPING_CAN_FAIL = 8192_u32
  MDL_ALLOCATED_MUST_SUCCEED = 16384_u32
  MDL_64_BIT_VA = 32768_u32
  DX_OK = 0_u32
  DXERR_UNSUPPORTED = 2147500033_u32
  DXERR_GENERIC = 2147500037_u32
  DXERR_OUTOFCAPS = 2289434984_u32
  DDIRQ_BUSMASTER = 2_i32
  IRQINFO_HANDLED = 1_u32
  IRQINFO_NOTHANDLED = 2_u32
  DDSKIP_SKIPNEXT = 1_u32
  DDSKIP_ENABLENEXT = 2_u32
  DDTRANSFER_SYSTEMMEMORY = 1_u32
  DDTRANSFER_NONLOCALVIDMEM = 2_u32
  DDTRANSFER_INVERT = 4_u32
  DDTRANSFER_CANCEL = 128_u32
  DDTRANSFER_HALFLINES = 256_u32
  DXAPI_HALVERSION = 1_u32

  type DDFXROP = Void
  type IDDVideoPortContainerVtbl = Void
  type IDirectDrawVideoPortVtbl = Void
  type IDirectDrawVideoPortNotifyVtbl = Void
  type IDirectDrawClipperVtbl = Void
  type IDirectDrawPaletteVtbl = Void
  type IDirectDrawSurfaceVtbl = Void
  type IDirectDrawSurface2Vtbl = Void
  type IDirectDrawSurface3Vtbl = Void
  type IDirectDrawSurface4Vtbl = Void
  type IDirectDrawSurface7Vtbl = Void
  type IDirectDrawColorControlVtbl = Void
  type IDirectDrawVtbl = Void
  type IDirectDraw2Vtbl = Void
  type IDirectDraw4Vtbl = Void
  type IDirectDraw7Vtbl = Void
  type IDirectDrawKernelVtbl = Void
  type IDirectDrawSurfaceKernelVtbl = Void
  type IDirectDrawGammaControlVtbl = Void
  type DD_DESTROYDRIVERDATA = Void
  type DD_SETMODEDATA = Void
  type DD_GETVPORTAUTOFLIPSURFACEDATA = Void
  type MDL_EPROCESS = Void

  alias LPDDENUMCALLBACKA = Proc(Guid*, PSTR, PSTR, Void*, LibC::BOOL)
  alias LPDDENUMCALLBACKW = Proc(Guid*, LibC::LPWSTR, LibC::LPWSTR, Void*, LibC::BOOL)
  alias LPDDENUMCALLBACKEXA = Proc(Guid*, PSTR, PSTR, Void*, HMONITOR, LibC::BOOL)
  alias LPDDENUMCALLBACKEXW = Proc(Guid*, LibC::LPWSTR, LibC::LPWSTR, Void*, HMONITOR, LibC::BOOL)
  alias LPDIRECTDRAWENUMERATEEXA = Proc(LPDDENUMCALLBACKEXA, Void*, UInt32, HRESULT)
  alias LPDIRECTDRAWENUMERATEEXW = Proc(LPDDENUMCALLBACKEXW, Void*, UInt32, HRESULT)
  alias LPDDENUMMODESCALLBACK = Proc(DDSURFACEDESC*, Void*, HRESULT)
  alias LPDDENUMMODESCALLBACK2 = Proc(DDSURFACEDESC2*, Void*, HRESULT)
  alias LPDDENUMSURFACESCALLBACK = Proc(IDirectDrawSurface, DDSURFACEDESC*, Void*, HRESULT)
  alias LPDDENUMSURFACESCALLBACK2 = Proc(IDirectDrawSurface4, DDSURFACEDESC2*, Void*, HRESULT)
  alias LPDDENUMSURFACESCALLBACK7 = Proc(IDirectDrawSurface7, DDSURFACEDESC2*, Void*, HRESULT)
  alias LPCLIPPERCALLBACK = Proc(IDirectDrawClipper, LibC::HANDLE, UInt32, Void*, UInt32)
  alias LPDDENUMVIDEOCALLBACK = Proc(DDVIDEOPORTCAPS*, Void*, HRESULT)
  alias LPDD32BITDRIVERINIT = Proc(UInt32, UInt32)
  alias LPDDHEL_INIT = Proc(DDRAWI_DIRECTDRAW_GBL*, LibC::BOOL, LibC::BOOL)
  alias LPDDHAL_SETCOLORKEY = Proc(DDHAL_DRVSETCOLORKEYDATA*, UInt32)
  alias LPDDHAL_CANCREATESURFACE = Proc(DDHAL_CANCREATESURFACEDATA*, UInt32)
  alias LPDDHAL_WAITFORVERTICALBLANK = Proc(DDHAL_WAITFORVERTICALBLANKDATA*, UInt32)
  alias LPDDHAL_CREATESURFACE = Proc(DDHAL_CREATESURFACEDATA*, UInt32)
  alias LPDDHAL_DESTROYDRIVER = Proc(DDHAL_DESTROYDRIVERDATA*, UInt32)
  alias LPDDHAL_SETMODE = Proc(DDHAL_SETMODEDATA*, UInt32)
  alias LPDDHAL_CREATEPALETTE = Proc(DDHAL_CREATEPALETTEDATA*, UInt32)
  alias LPDDHAL_GETSCANLINE = Proc(DDHAL_GETSCANLINEDATA*, UInt32)
  alias LPDDHAL_SETEXCLUSIVEMODE = Proc(DDHAL_SETEXCLUSIVEMODEDATA*, UInt32)
  alias LPDDHAL_FLIPTOGDISURFACE = Proc(DDHAL_FLIPTOGDISURFACEDATA*, UInt32)
  alias LPDDHAL_GETDRIVERINFO = Proc(DDHAL_GETDRIVERINFODATA*, UInt32)
  alias LPDDHALPALCB_DESTROYPALETTE = Proc(DDHAL_DESTROYPALETTEDATA*, UInt32)
  alias LPDDHALPALCB_SETENTRIES = Proc(DDHAL_SETENTRIESDATA*, UInt32)
  alias LPDDHALSURFCB_LOCK = Proc(DDHAL_LOCKDATA*, UInt32)
  alias LPDDHALSURFCB_UNLOCK = Proc(DDHAL_UNLOCKDATA*, UInt32)
  alias LPDDHALSURFCB_BLT = Proc(DDHAL_BLTDATA*, UInt32)
  alias LPDDHALSURFCB_UPDATEOVERLAY = Proc(DDHAL_UPDATEOVERLAYDATA*, UInt32)
  alias LPDDHALSURFCB_SETOVERLAYPOSITION = Proc(DDHAL_SETOVERLAYPOSITIONDATA*, UInt32)
  alias LPDDHALSURFCB_SETPALETTE = Proc(DDHAL_SETPALETTEDATA*, UInt32)
  alias LPDDHALSURFCB_FLIP = Proc(DDHAL_FLIPDATA*, UInt32)
  alias LPDDHALSURFCB_DESTROYSURFACE = Proc(DDHAL_DESTROYSURFACEDATA*, UInt32)
  alias LPDDHALSURFCB_SETCLIPLIST = Proc(DDHAL_SETCLIPLISTDATA*, UInt32)
  alias LPDDHALSURFCB_ADDATTACHEDSURFACE = Proc(DDHAL_ADDATTACHEDSURFACEDATA*, UInt32)
  alias LPDDHALSURFCB_SETCOLORKEY = Proc(DDHAL_SETCOLORKEYDATA*, UInt32)
  alias LPDDHALSURFCB_GETBLTSTATUS = Proc(DDHAL_GETBLTSTATUSDATA*, UInt32)
  alias LPDDHALSURFCB_GETFLIPSTATUS = Proc(DDHAL_GETFLIPSTATUSDATA*, UInt32)
  alias LPDDHAL_GETAVAILDRIVERMEMORY = Proc(DDHAL_GETAVAILDRIVERMEMORYDATA*, UInt32)
  alias LPDDHAL_UPDATENONLOCALHEAP = Proc(DDHAL_UPDATENONLOCALHEAPDATA*, UInt32)
  alias LPDDHAL_GETHEAPALIGNMENT = Proc(DDHAL_GETHEAPALIGNMENTDATA*, UInt32)
  alias LPDDHAL_CREATESURFACEEX = Proc(DDHAL_CREATESURFACEEXDATA*, UInt32)
  alias LPDDHAL_GETDRIVERSTATE = Proc(DDHAL_GETDRIVERSTATEDATA*, UInt32)
  alias LPDDHAL_DESTROYDDLOCAL = Proc(DDHAL_DESTROYDDLOCALDATA*, UInt32)
  alias LPDDHALEXEBUFCB_CANCREATEEXEBUF = Proc(DDHAL_CANCREATESURFACEDATA*, UInt32)
  alias LPDDHALEXEBUFCB_CREATEEXEBUF = Proc(DDHAL_CREATESURFACEDATA*, UInt32)
  alias LPDDHALEXEBUFCB_DESTROYEXEBUF = Proc(DDHAL_DESTROYSURFACEDATA*, UInt32)
  alias LPDDHALEXEBUFCB_LOCKEXEBUF = Proc(DDHAL_LOCKDATA*, UInt32)
  alias LPDDHALEXEBUFCB_UNLOCKEXEBUF = Proc(DDHAL_UNLOCKDATA*, UInt32)
  alias LPDDHALVPORTCB_CANCREATEVIDEOPORT = Proc(DDHAL_CANCREATEVPORTDATA*, UInt32)
  alias LPDDHALVPORTCB_CREATEVIDEOPORT = Proc(DDHAL_CREATEVPORTDATA*, UInt32)
  alias LPDDHALVPORTCB_FLIP = Proc(DDHAL_FLIPVPORTDATA*, UInt32)
  alias LPDDHALVPORTCB_GETBANDWIDTH = Proc(DDHAL_GETVPORTBANDWIDTHDATA*, UInt32)
  alias LPDDHALVPORTCB_GETINPUTFORMATS = Proc(DDHAL_GETVPORTINPUTFORMATDATA*, UInt32)
  alias LPDDHALVPORTCB_GETOUTPUTFORMATS = Proc(DDHAL_GETVPORTOUTPUTFORMATDATA*, UInt32)
  alias LPDDHALVPORTCB_GETFIELD = Proc(DDHAL_GETVPORTFIELDDATA*, UInt32)
  alias LPDDHALVPORTCB_GETLINE = Proc(DDHAL_GETVPORTLINEDATA*, UInt32)
  alias LPDDHALVPORTCB_GETVPORTCONNECT = Proc(DDHAL_GETVPORTCONNECTDATA*, UInt32)
  alias LPDDHALVPORTCB_DESTROYVPORT = Proc(DDHAL_DESTROYVPORTDATA*, UInt32)
  alias LPDDHALVPORTCB_GETFLIPSTATUS = Proc(DDHAL_GETVPORTFLIPSTATUSDATA*, UInt32)
  alias LPDDHALVPORTCB_UPDATE = Proc(DDHAL_UPDATEVPORTDATA*, UInt32)
  alias LPDDHALVPORTCB_WAITFORSYNC = Proc(DDHAL_WAITFORVPORTSYNCDATA*, UInt32)
  alias LPDDHALVPORTCB_GETSIGNALSTATUS = Proc(DDHAL_GETVPORTSIGNALDATA*, UInt32)
  alias LPDDHALVPORTCB_COLORCONTROL = Proc(DDHAL_VPORTCOLORDATA*, UInt32)
  alias LPDDHALCOLORCB_COLORCONTROL = Proc(DDHAL_COLORCONTROLDATA*, UInt32)
  alias LPDDHALKERNELCB_SYNCSURFACE = Proc(DDHAL_SYNCSURFACEDATA*, UInt32)
  alias LPDDHALKERNELCB_SYNCVIDEOPORT = Proc(DDHAL_SYNCVIDEOPORTDATA*, UInt32)
  alias LPDDGAMMACALIBRATORPROC = Proc(DDGAMMARAMP*, UInt8*, HRESULT)
  alias LPDDHALMOCOMPCB_GETGUIDS = Proc(DDHAL_GETMOCOMPGUIDSDATA*, UInt32)
  alias LPDDHALMOCOMPCB_GETFORMATS = Proc(DDHAL_GETMOCOMPFORMATSDATA*, UInt32)
  alias LPDDHALMOCOMPCB_CREATE = Proc(DDHAL_CREATEMOCOMPDATA*, UInt32)
  alias LPDDHALMOCOMPCB_GETCOMPBUFFINFO = Proc(DDHAL_GETMOCOMPCOMPBUFFDATA*, UInt32)
  alias LPDDHALMOCOMPCB_GETINTERNALINFO = Proc(DDHAL_GETINTERNALMOCOMPDATA*, UInt32)
  alias LPDDHALMOCOMPCB_BEGINFRAME = Proc(DDHAL_BEGINMOCOMPFRAMEDATA*, UInt32)
  alias LPDDHALMOCOMPCB_ENDFRAME = Proc(DDHAL_ENDMOCOMPFRAMEDATA*, UInt32)
  alias LPDDHALMOCOMPCB_RENDER = Proc(DDHAL_RENDERMOCOMPDATA*, UInt32)
  alias LPDDHALMOCOMPCB_QUERYSTATUS = Proc(DDHAL_QUERYMOCOMPSTATUSDATA*, UInt32)
  alias LPDDHALMOCOMPCB_DESTROY = Proc(DDHAL_DESTROYMOCOMPDATA*, UInt32)
  alias LPDDHAL_SETINFO = Proc(DDHALINFO*, LibC::BOOL, LibC::BOOL)
  alias LPDDHAL_VIDMEMALLOC = Proc(DDRAWI_DIRECTDRAW_GBL*, Int32, UInt32, UInt32, LibC::UINT_PTR)
  alias LPDDHAL_VIDMEMFREE = Proc(DDRAWI_DIRECTDRAW_GBL*, Int32, LibC::UINT_PTR, Void)
  alias PDD_SETCOLORKEY = Proc(DD_DRVSETCOLORKEYDATA*, UInt32)
  alias PDD_CANCREATESURFACE = Proc(DD_CANCREATESURFACEDATA*, UInt32)
  alias PDD_WAITFORVERTICALBLANK = Proc(DD_WAITFORVERTICALBLANKDATA*, UInt32)
  alias PDD_CREATESURFACE = Proc(DD_CREATESURFACEDATA*, UInt32)
  alias PDD_DESTROYDRIVER = Proc(DD_DESTROYDRIVERDATA*, UInt32)
  alias PDD_SETMODE = Proc(DD_SETMODEDATA*, UInt32)
  alias PDD_CREATEPALETTE = Proc(DD_CREATEPALETTEDATA*, UInt32)
  alias PDD_GETSCANLINE = Proc(DD_GETSCANLINEDATA*, UInt32)
  alias PDD_MAPMEMORY = Proc(DD_MAPMEMORYDATA*, UInt32)
  alias PDD_GETDRIVERINFO = Proc(DD_GETDRIVERINFODATA*, UInt32)
  alias PDD_GETAVAILDRIVERMEMORY = Proc(DD_GETAVAILDRIVERMEMORYDATA*, UInt32)
  alias PDD_ALPHABLT = Proc(DD_BLTDATA*, UInt32)
  alias PDD_CREATESURFACEEX = Proc(DD_CREATESURFACEEXDATA*, UInt32)
  alias PDD_GETDRIVERSTATE = Proc(DD_GETDRIVERSTATEDATA*, UInt32)
  alias PDD_DESTROYDDLOCAL = Proc(DD_DESTROYDDLOCALDATA*, UInt32)
  alias PDD_FREEDRIVERMEMORY = Proc(DD_FREEDRIVERMEMORYDATA*, UInt32)
  alias PDD_SETEXCLUSIVEMODE = Proc(DD_SETEXCLUSIVEMODEDATA*, UInt32)
  alias PDD_FLIPTOGDISURFACE = Proc(DD_FLIPTOGDISURFACEDATA*, UInt32)
  alias PDD_PALCB_DESTROYPALETTE = Proc(DD_DESTROYPALETTEDATA*, UInt32)
  alias PDD_PALCB_SETENTRIES = Proc(DD_SETENTRIESDATA*, UInt32)
  alias PDD_SURFCB_LOCK = Proc(DD_LOCKDATA*, UInt32)
  alias PDD_SURFCB_UNLOCK = Proc(DD_UNLOCKDATA*, UInt32)
  alias PDD_SURFCB_BLT = Proc(DD_BLTDATA*, UInt32)
  alias PDD_SURFCB_UPDATEOVERLAY = Proc(DD_UPDATEOVERLAYDATA*, UInt32)
  alias PDD_SURFCB_SETOVERLAYPOSITION = Proc(DD_SETOVERLAYPOSITIONDATA*, UInt32)
  alias PDD_SURFCB_SETPALETTE = Proc(DD_SETPALETTEDATA*, UInt32)
  alias PDD_SURFCB_FLIP = Proc(DD_FLIPDATA*, UInt32)
  alias PDD_SURFCB_DESTROYSURFACE = Proc(DD_DESTROYSURFACEDATA*, UInt32)
  alias PDD_SURFCB_SETCLIPLIST = Proc(DD_SETCLIPLISTDATA*, UInt32)
  alias PDD_SURFCB_ADDATTACHEDSURFACE = Proc(DD_ADDATTACHEDSURFACEDATA*, UInt32)
  alias PDD_SURFCB_SETCOLORKEY = Proc(DD_SETCOLORKEYDATA*, UInt32)
  alias PDD_SURFCB_GETBLTSTATUS = Proc(DD_GETBLTSTATUSDATA*, UInt32)
  alias PDD_SURFCB_GETFLIPSTATUS = Proc(DD_GETFLIPSTATUSDATA*, UInt32)
  alias PDD_VPORTCB_CANCREATEVIDEOPORT = Proc(DD_CANCREATEVPORTDATA*, UInt32)
  alias PDD_VPORTCB_CREATEVIDEOPORT = Proc(DD_CREATEVPORTDATA*, UInt32)
  alias PDD_VPORTCB_FLIP = Proc(DD_FLIPVPORTDATA*, UInt32)
  alias PDD_VPORTCB_GETBANDWIDTH = Proc(DD_GETVPORTBANDWIDTHDATA*, UInt32)
  alias PDD_VPORTCB_GETINPUTFORMATS = Proc(DD_GETVPORTINPUTFORMATDATA*, UInt32)
  alias PDD_VPORTCB_GETOUTPUTFORMATS = Proc(DD_GETVPORTOUTPUTFORMATDATA*, UInt32)
  alias PDD_VPORTCB_GETAUTOFLIPSURF = Proc(DD_GETVPORTAUTOFLIPSURFACEDATA*, UInt32)
  alias PDD_VPORTCB_GETFIELD = Proc(DD_GETVPORTFIELDDATA*, UInt32)
  alias PDD_VPORTCB_GETLINE = Proc(DD_GETVPORTLINEDATA*, UInt32)
  alias PDD_VPORTCB_GETVPORTCONNECT = Proc(DD_GETVPORTCONNECTDATA*, UInt32)
  alias PDD_VPORTCB_DESTROYVPORT = Proc(DD_DESTROYVPORTDATA*, UInt32)
  alias PDD_VPORTCB_GETFLIPSTATUS = Proc(DD_GETVPORTFLIPSTATUSDATA*, UInt32)
  alias PDD_VPORTCB_UPDATE = Proc(DD_UPDATEVPORTDATA*, UInt32)
  alias PDD_VPORTCB_WAITFORSYNC = Proc(DD_WAITFORVPORTSYNCDATA*, UInt32)
  alias PDD_VPORTCB_GETSIGNALSTATUS = Proc(DD_GETVPORTSIGNALDATA*, UInt32)
  alias PDD_VPORTCB_COLORCONTROL = Proc(DD_VPORTCOLORDATA*, UInt32)
  alias PDD_COLORCB_COLORCONTROL = Proc(DD_COLORCONTROLDATA*, UInt32)
  alias PDD_KERNELCB_SYNCSURFACE = Proc(DD_SYNCSURFACEDATA*, UInt32)
  alias PDD_KERNELCB_SYNCVIDEOPORT = Proc(DD_SYNCVIDEOPORTDATA*, UInt32)
  alias PDD_MOCOMPCB_GETGUIDS = Proc(DD_GETMOCOMPGUIDSDATA*, UInt32)
  alias PDD_MOCOMPCB_GETFORMATS = Proc(DD_GETMOCOMPFORMATSDATA*, UInt32)
  alias PDD_MOCOMPCB_CREATE = Proc(DD_CREATEMOCOMPDATA*, UInt32)
  alias PDD_MOCOMPCB_GETCOMPBUFFINFO = Proc(DD_GETMOCOMPCOMPBUFFDATA*, UInt32)
  alias PDD_MOCOMPCB_GETINTERNALINFO = Proc(DD_GETINTERNALMOCOMPDATA*, UInt32)
  alias PDD_MOCOMPCB_BEGINFRAME = Proc(DD_BEGINMOCOMPFRAMEDATA*, UInt32)
  alias PDD_MOCOMPCB_ENDFRAME = Proc(DD_ENDMOCOMPFRAMEDATA*, UInt32)
  alias PDD_MOCOMPCB_RENDER = Proc(DD_RENDERMOCOMPDATA*, UInt32)
  alias PDD_MOCOMPCB_QUERYSTATUS = Proc(DD_QUERYMOCOMPSTATUSDATA*, UInt32)
  alias PDD_MOCOMPCB_DESTROY = Proc(DD_DESTROYMOCOMPDATA*, UInt32)
  alias PDX_IRQCALLBACK = Proc(DX_IRQDATA*, Void)
  alias PDX_GETIRQINFO = Proc(Void*, Void*, DDGETIRQINFO*, UInt32)
  alias PDX_ENABLEIRQ = Proc(Void*, DDENABLEIRQINFO*, Void*, UInt32)
  alias PDX_SKIPNEXTFIELD = Proc(Void*, DDSKIPNEXTFIELDINFO*, Void*, UInt32)
  alias PDX_BOBNEXTFIELD = Proc(Void*, DDBOBNEXTFIELDINFO*, Void*, UInt32)
  alias PDX_SETSTATE = Proc(Void*, DDSETSTATEININFO*, DDSETSTATEOUTINFO*, UInt32)
  alias PDX_LOCK = Proc(Void*, DDLOCKININFO*, DDLOCKOUTINFO*, UInt32)
  alias PDX_FLIPOVERLAY = Proc(Void*, DDFLIPOVERLAYINFO*, Void*, UInt32)
  alias PDX_FLIPVIDEOPORT = Proc(Void*, DDFLIPVIDEOPORTINFO*, Void*, UInt32)
  alias PDX_GETPOLARITY = Proc(Void*, DDGETPOLARITYININFO*, DDGETPOLARITYOUTINFO*, UInt32)
  alias PDX_GETCURRENTAUTOFLIP = Proc(Void*, DDGETCURRENTAUTOFLIPININFO*, DDGETCURRENTAUTOFLIPOUTINFO*, UInt32)
  alias PDX_GETPREVIOUSAUTOFLIP = Proc(Void*, DDGETPREVIOUSAUTOFLIPININFO*, DDGETPREVIOUSAUTOFLIPOUTINFO*, UInt32)
  alias PDX_TRANSFER = Proc(Void*, DDTRANSFERININFO*, DDTRANSFEROUTINFO*, UInt32)
  alias PDX_GETTRANSFERSTATUS = Proc(Void*, Void*, DDGETTRANSFERSTATUSOUTINFO*, UInt32)

  union DDBLTFX_Anonymous4_e__Union
    dw_alpha_src_const : UInt32
    lp_dds_alpha_src : IDirectDrawSurface
  end
  union DDBLTFX_Anonymous2_e__Union
    dw_z_src_const : UInt32
    lp_ddsz_buffer_src : IDirectDrawSurface
  end
  union DDBLTFX_Anonymous5_e__Union
    dw_fill_color : UInt32
    dw_fill_depth : UInt32
    dw_fill_pixel : UInt32
    lp_dds_pattern : IDirectDrawSurface
  end
  union DDBLTFX_Anonymous1_e__Union
    dw_z_dest_const : UInt32
    lp_ddsz_buffer_dest : IDirectDrawSurface
  end
  union DDBLTFX_Anonymous3_e__Union
    dw_alpha_dest_const : UInt32
    lp_dds_alpha_dest : IDirectDrawSurface
  end
  union DDSCAPSEX_Anonymous_e__Union
    dw_caps4 : UInt32
    dw_volume_depth : UInt32
  end
  union DDSCAPS2_Anonymous_e__Union
    dw_caps4 : UInt32
    dw_volume_depth : UInt32
  end
  union DDPIXELFORMAT_Anonymous5_e__Union
    dw_rgb_alpha_bit_mask : UInt32
    dw_yuv_alpha_bit_mask : UInt32
    dw_luminance_alpha_bit_mask : UInt32
    dw_rgbz_bit_mask : UInt32
    dw_yuvz_bit_mask : UInt32
  end
  union DDPIXELFORMAT_Anonymous3_e__Union
    dw_g_bit_mask : UInt32
    dw_u_bit_mask : UInt32
    dw_z_bit_mask : UInt32
    dw_bump_dv_bit_mask : UInt32
    multi_sample_caps : DDPIXELFORMAT_Anonymous3_e__Union_MultiSampleCaps_e__Struct
  end
  union DDPIXELFORMAT_Anonymous1_e__Union
    dw_rgb_bit_count : UInt32
    dw_yuv_bit_count : UInt32
    dw_z_buffer_bit_depth : UInt32
    dw_alpha_bit_depth : UInt32
    dw_luminance_bit_count : UInt32
    dw_bump_bit_count : UInt32
    dw_private_format_bit_count : UInt32
  end
  union DDPIXELFORMAT_Anonymous4_e__Union
    dw_b_bit_mask : UInt32
    dw_v_bit_mask : UInt32
    dw_stencil_bit_mask : UInt32
    dw_bump_luminance_bit_mask : UInt32
  end
  union DDPIXELFORMAT_Anonymous2_e__Union
    dw_r_bit_mask : UInt32
    dw_y_bit_mask : UInt32
    dw_stencil_bit_depth : UInt32
    dw_luminance_bit_mask : UInt32
    dw_bump_du_bit_mask : UInt32
    dw_operations : UInt32
  end
  union DDOVERLAYFX_Anonymous2_e__Union
    dw_alpha_src_const : UInt32
    lp_dds_alpha_src : IDirectDrawSurface
  end
  union DDOVERLAYFX_Anonymous1_e__Union
    dw_alpha_dest_const : UInt32
    lp_dds_alpha_dest : IDirectDrawSurface
  end
  union DDSURFACEDESC_Anonymous2_e__Union
    dw_mip_map_count : UInt32
    dw_z_buffer_bit_depth : UInt32
    dw_refresh_rate : UInt32
  end
  union DDSURFACEDESC_Anonymous1_e__Union
    l_pitch : Int32
    dw_linear_size : UInt32
  end
  union DDSURFACEDESC2_Anonymous4_e__Union
    ddck_ck_dest_overlay : DDCOLORKEY
    dw_empty_face_color : UInt32
  end
  union DDSURFACEDESC2_Anonymous2_e__Union
    dw_back_buffer_count : UInt32
    dw_depth : UInt32
  end
  union DDSURFACEDESC2_Anonymous3_e__Union
    dw_mip_map_count : UInt32
    dw_refresh_rate : UInt32
    dw_src_vb_handle : UInt32
  end
  union DDSURFACEDESC2_Anonymous1_e__Union
    l_pitch : Int32
    dw_linear_size : UInt32
  end
  union DDSURFACEDESC2_Anonymous5_e__Union
    ddpf_pixel_format : DDPIXELFORMAT
    dw_fvf : UInt32
  end
  union SURFACEALIGNMENT_Anonymous_e__Union
    linear : SURFACEALIGNMENT_Anonymous_e__Union_Linear_e__Struct
    rectangular : SURFACEALIGNMENT_Anonymous_e__Union_Rectangular_e__Struct
  end
  union VIDMEM_Anonymous1_e__Union
    fp_end : LibC::UINT_PTR
    dw_width : UInt32
  end
  union VIDMEM_Anonymous2_e__Union
    lp_heap : VMEMHEAP*
    dw_height : UInt32
  end
  union DDRAWI_DDRAWPALETTE_GBL_Anonymous_e__Union
    dw_reserved1 : LibC::UINT_PTR
    h_helgdi_palette : HPALETTE
  end
  union DDRAWI_DDRAWSURFACE_GBL_Anonymous3_e__Union
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_handle : Void*
  end
  union DDRAWI_DDRAWSURFACE_GBL_Anonymous1_e__Union
    lp_rect_list : ACCESSRECTLIST*
    dw_block_size_y : UInt32
    l_slice_pitch : Int32
  end
  union DDRAWI_DDRAWSURFACE_GBL_Anonymous2_e__Union
    lp_vid_mem_heap : VMEMHEAP*
    dw_block_size_x : UInt32
  end
  union DDRAWI_DDRAWSURFACE_GBL_Anonymous4_e__Union
    l_pitch : Int32
    dw_linear_size : UInt32
  end
  union DDRAWI_DDRAWSURFACE_GBL_MORE_Anonymous_e__Union
    dw_physical_page_table : UInt32
    fp_physical_vid_mem : LibC::UINT_PTR
  end
  union DDRAWI_DDRAWSURFACE_LCL_Anonymous2_e__Union
    lp_dd_clipper : DDRAWI_DDRAWCLIPPER_LCL*
    lp16_dd_clipper : DDRAWI_DDRAWCLIPPER_INT*
  end
  union DDRAWI_DDRAWSURFACE_LCL_Anonymous1_e__Union
    lp_dd_palette : DDRAWI_DDRAWPALETTE_INT*
    lp16_dd_palette : DDRAWI_DDRAWPALETTE_INT*
  end
  union DDHAL_GETDRIVERSTATEDATA_Anonymous_e__Union
    dwh_context : LibC::UINT_PTR
  end
  union VIDEOMEMORY_Anonymous1_e__Union
    fp_end : LibC::UINT_PTR
    dw_width : UInt32
  end
  union VIDEOMEMORY_Anonymous2_e__Union
    lp_heap : VMEMHEAP*
    dw_height : UInt32
  end
  union DD_SURFACE_GLOBAL_Anonymous3_e__Union
    l_pitch : Int32
    dw_linear_size : UInt32
  end
  union DD_SURFACE_GLOBAL_Anonymous1_e__Union
    dw_block_size_y : UInt32
    l_slice_pitch : Int32
  end
  union DD_SURFACE_GLOBAL_Anonymous2_e__Union
    lp_vid_mem_heap : VIDEOMEMORY*
    dw_block_size_x : UInt32
    dw_user_mem_size : UInt32
  end
  union DD_SURFACE_LOCAL_Anonymous2_e__Union
    ddck_ck_dest_overlay : DDCOLORKEY
    ddck_ck_dest_blt : DDCOLORKEY
  end
  union DD_SURFACE_LOCAL_Anonymous1_e__Union
    ddck_ck_src_overlay : DDCOLORKEY
    ddck_ck_src_blt : DDCOLORKEY
  end
  union DD_GETDRIVERSTATEDATA_Anonymous_e__Union
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dwh_context : LibC::UINT_PTR
  end

  struct DDARGB
    blue : UInt8
    green : UInt8
    red : UInt8
    alpha : UInt8
  end
  struct DDRGBA
    red : UInt8
    green : UInt8
    blue : UInt8
    alpha : UInt8
  end
  struct DDCOLORKEY
    dw_color_space_low_value : UInt32
    dw_color_space_high_value : UInt32
  end
  struct DDBLTFX
    dw_size : UInt32
    dw_ddfx : UInt32
    dw_rop : UInt32
    dw_ddrop : UInt32
    dw_rotation_angle : UInt32
    dw_z_buffer_op_code : UInt32
    dw_z_buffer_low : UInt32
    dw_z_buffer_high : UInt32
    dw_z_buffer_base_dest : UInt32
    dw_z_dest_const_bit_depth : UInt32
    anonymous1 : DDBLTFX_Anonymous1_e__Union
    dw_z_src_const_bit_depth : UInt32
    anonymous2 : DDBLTFX_Anonymous2_e__Union
    dw_alpha_edge_blend_bit_depth : UInt32
    dw_alpha_edge_blend : UInt32
    dw_reserved : UInt32
    dw_alpha_dest_const_bit_depth : UInt32
    anonymous3 : DDBLTFX_Anonymous3_e__Union
    dw_alpha_src_const_bit_depth : UInt32
    anonymous4 : DDBLTFX_Anonymous4_e__Union
    anonymous5 : DDBLTFX_Anonymous5_e__Union
    ddck_dest_colorkey : DDCOLORKEY
    ddck_src_colorkey : DDCOLORKEY
  end
  struct DDSCAPS
    dw_caps : UInt32
  end
  struct DDOSCAPS
    dw_caps : UInt32
  end
  struct DDSCAPSEX
    dw_caps2 : UInt32
    dw_caps3 : UInt32
    anonymous : DDSCAPSEX_Anonymous_e__Union
  end
  struct DDSCAPS2
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_caps3 : UInt32
    anonymous : DDSCAPS2_Anonymous_e__Union
  end
  struct DDCAPS_DX1
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
  end
  struct DDCAPS_DX3
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_reserved4 : UInt32
    dw_reserved5 : UInt32
    dw_reserved6 : UInt32
  end
  struct DDCAPS_DX5
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_max_video_ports : UInt32
    dw_curr_video_ports : UInt32
    dw_svb_caps2 : UInt32
    dw_nlvb_caps : UInt32
    dw_nlvb_caps2 : UInt32
    dw_nlvbc_key_caps : UInt32
    dw_nlvbfx_caps : UInt32
    dw_nlvb_rops : UInt32[8]*
  end
  struct DDCAPS_DX6
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_old_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_max_video_ports : UInt32
    dw_curr_video_ports : UInt32
    dw_svb_caps2 : UInt32
    dw_nlvb_caps : UInt32
    dw_nlvb_caps2 : UInt32
    dw_nlvbc_key_caps : UInt32
    dw_nlvbfx_caps : UInt32
    dw_nlvb_rops : UInt32[8]*
    dds_caps : DDSCAPS2
  end
  struct DDCAPS_DX7
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_old_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_max_video_ports : UInt32
    dw_curr_video_ports : UInt32
    dw_svb_caps2 : UInt32
    dw_nlvb_caps : UInt32
    dw_nlvb_caps2 : UInt32
    dw_nlvbc_key_caps : UInt32
    dw_nlvbfx_caps : UInt32
    dw_nlvb_rops : UInt32[8]*
    dds_caps : DDSCAPS2
  end
  struct DDPIXELFORMAT
    dw_size : UInt32
    dw_flags : UInt32
    dw_four_cc : UInt32
    anonymous1 : DDPIXELFORMAT_Anonymous1_e__Union
    anonymous2 : DDPIXELFORMAT_Anonymous2_e__Union
    anonymous3 : DDPIXELFORMAT_Anonymous3_e__Union
    anonymous4 : DDPIXELFORMAT_Anonymous4_e__Union
    anonymous5 : DDPIXELFORMAT_Anonymous5_e__Union
  end
  struct DDPIXELFORMAT_Anonymous3_e__Union_MultiSampleCaps_e__Struct
    w_flip_ms_types : UInt16
    w_blt_ms_types : UInt16
  end
  struct DDOVERLAYFX
    dw_size : UInt32
    dw_alpha_edge_blend_bit_depth : UInt32
    dw_alpha_edge_blend : UInt32
    dw_reserved : UInt32
    dw_alpha_dest_const_bit_depth : UInt32
    anonymous1 : DDOVERLAYFX_Anonymous1_e__Union
    dw_alpha_src_const_bit_depth : UInt32
    anonymous2 : DDOVERLAYFX_Anonymous2_e__Union
    dck_dest_colorkey : DDCOLORKEY
    dck_src_colorkey : DDCOLORKEY
    dw_ddfx : UInt32
    dw_flags : UInt32
  end
  struct DDBLTBATCH
    lpr_dest : RECT*
    lp_dds_src : IDirectDrawSurface
    lpr_src : RECT*
    dw_flags : UInt32
    lp_dd_blt_fx : DDBLTFX*
  end
  struct DDGAMMARAMP
    red : UInt16[256]*
    green : UInt16[256]*
    blue : UInt16[256]*
  end
  struct DDDEVICEIDENTIFIER
    sz_driver : CHAR[512]*
    sz_description : CHAR[512]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
    guid_device_identifier : Guid
  end
  struct DDDEVICEIDENTIFIER2
    sz_driver : CHAR[512]*
    sz_description : CHAR[512]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
    guid_device_identifier : Guid
    dw_whql_level : UInt32
  end
  struct DDSURFACEDESC
    dw_size : UInt32
    dw_flags : UInt32
    dw_height : UInt32
    dw_width : UInt32
    anonymous1 : DDSURFACEDESC_Anonymous1_e__Union
    dw_back_buffer_count : UInt32
    anonymous2 : DDSURFACEDESC_Anonymous2_e__Union
    dw_alpha_bit_depth : UInt32
    dw_reserved : UInt32
    lp_surface : Void*
    ddck_ck_dest_overlay : DDCOLORKEY
    ddck_ck_dest_blt : DDCOLORKEY
    ddck_ck_src_overlay : DDCOLORKEY
    ddck_ck_src_blt : DDCOLORKEY
    ddpf_pixel_format : DDPIXELFORMAT
    dds_caps : DDSCAPS
  end
  struct DDSURFACEDESC2
    dw_size : UInt32
    dw_flags : UInt32
    dw_height : UInt32
    dw_width : UInt32
    anonymous1 : DDSURFACEDESC2_Anonymous1_e__Union
    anonymous2 : DDSURFACEDESC2_Anonymous2_e__Union
    anonymous3 : DDSURFACEDESC2_Anonymous3_e__Union
    dw_alpha_bit_depth : UInt32
    dw_reserved : UInt32
    lp_surface : Void*
    anonymous4 : DDSURFACEDESC2_Anonymous4_e__Union
    ddck_ck_dest_blt : DDCOLORKEY
    ddck_ck_src_overlay : DDCOLORKEY
    ddck_ck_src_blt : DDCOLORKEY
    anonymous5 : DDSURFACEDESC2_Anonymous5_e__Union
    dds_caps : DDSCAPS2
    dw_texture_stage : UInt32
  end
  struct DDOPTSURFACEDESC
    dw_size : UInt32
    dw_flags : UInt32
    dd_s_caps : DDSCAPS2
    dd_os_caps : DDOSCAPS
    guid : Guid
    dw_compression_ratio : UInt32
  end
  struct DDCOLORCONTROL
    dw_size : UInt32
    dw_flags : UInt32
    l_brightness : Int32
    l_contrast : Int32
    l_hue : Int32
    l_saturation : Int32
    l_sharpness : Int32
    l_gamma : Int32
    l_color_enable : Int32
    dw_reserved1 : UInt32
  end
  struct DDVIDEOPORTCONNECT
    dw_size : UInt32
    dw_port_width : UInt32
    guid_type_id : Guid
    dw_flags : UInt32
    dw_reserved1 : LibC::UINT_PTR
  end
  struct DDVIDEOPORTCAPS
    dw_size : UInt32
    dw_flags : UInt32
    dw_max_width : UInt32
    dw_max_vbi_width : UInt32
    dw_max_height : UInt32
    dw_video_port_id : UInt32
    dw_caps : UInt32
    dw_fx : UInt32
    dw_num_auto_flip_surfaces : UInt32
    dw_align_video_port_boundary : UInt32
    dw_align_video_port_prescale_width : UInt32
    dw_align_video_port_crop_boundary : UInt32
    dw_align_video_port_crop_width : UInt32
    dw_preshrink_x_step : UInt32
    dw_preshrink_y_step : UInt32
    dw_num_vbi_auto_flip_surfaces : UInt32
    dw_num_preferred_autoflip : UInt32
    w_num_filter_taps_x : UInt16
    w_num_filter_taps_y : UInt16
  end
  struct DDVIDEOPORTDESC
    dw_size : UInt32
    dw_field_width : UInt32
    dw_vbi_width : UInt32
    dw_field_height : UInt32
    dw_microseconds_per_field : UInt32
    dw_max_pixels_per_second : UInt32
    dw_video_port_id : UInt32
    dw_reserved1 : UInt32
    video_port_type : DDVIDEOPORTCONNECT
    dw_reserved2 : LibC::UINT_PTR
    dw_reserved3 : LibC::UINT_PTR
  end
  struct DDVIDEOPORTINFO
    dw_size : UInt32
    dw_origin_x : UInt32
    dw_origin_y : UInt32
    dw_vp_flags : UInt32
    r_crop : RECT
    dw_prescale_width : UInt32
    dw_prescale_height : UInt32
    lpddpf_input_format : DDPIXELFORMAT*
    lpddpf_vbi_input_format : DDPIXELFORMAT*
    lpddpf_vbi_output_format : DDPIXELFORMAT*
    dw_vbi_height : UInt32
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
  end
  struct DDVIDEOPORTBANDWIDTH
    dw_size : UInt32
    dw_caps : UInt32
    dw_overlay : UInt32
    dw_colorkey : UInt32
    dw_y_interpolate : UInt32
    dw_y_interp_and_colorkey : UInt32
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
  end
  struct DDVIDEOPORTSTATUS
    dw_size : UInt32
    b_in_use : LibC::BOOL
    dw_flags : UInt32
    dw_reserved1 : UInt32
    video_port_type : DDVIDEOPORTCONNECT
    dw_reserved2 : LibC::UINT_PTR
    dw_reserved3 : LibC::UINT_PTR
  end
  struct DDVIDEOPORTNOTIFY
    approximate_time_stamp : LARGE_INTEGER
    l_field : Int32
    dw_surface_index : UInt32
    l_done : Int32
  end
  struct DDKERNELCAPS
    dw_size : UInt32
    dw_caps : UInt32
    dw_irq_caps : UInt32
  end
  struct SURFACEALIGNMENT
    anonymous : SURFACEALIGNMENT_Anonymous_e__Union
  end
  struct SURFACEALIGNMENT_Anonymous_e__Union_Linear_e__Struct
    dw_start_alignment : UInt32
    dw_pitch_alignment : UInt32
    dw_flags : UInt32
    dw_reserved2 : UInt32
  end
  struct SURFACEALIGNMENT_Anonymous_e__Union_Rectangular_e__Struct
    dw_x_alignment : UInt32
    dw_y_alignment : UInt32
    dw_flags : UInt32
    dw_reserved2 : UInt32
  end
  struct HEAPALIGNMENT
    dw_size : UInt32
    dds_caps : DDSCAPS
    dw_reserved : UInt32
    execute_buffer : SURFACEALIGNMENT
    overlay : SURFACEALIGNMENT
    texture : SURFACEALIGNMENT
    z_buffer : SURFACEALIGNMENT
    alpha_buffer : SURFACEALIGNMENT
    offscreen : SURFACEALIGNMENT
    flip_target : SURFACEALIGNMENT
  end
  struct DD_GETHEAPALIGNMENTDATA
    dw_instance : LibC::UINT_PTR
    dw_heap : UInt32
    dd_r_val : HRESULT
    get_heap_alignment : Void*
    alignment : HEAPALIGNMENT
  end
  struct VMEML
    next : VMEML*
    ptr : LibC::UINT_PTR
    size : UInt32
    b_discardable : LibC::BOOL
  end
  struct VMEMR
    next : VMEMR*
    prev : VMEMR*
    p_up : VMEMR*
    p_down : VMEMR*
    p_left : VMEMR*
    p_right : VMEMR*
    ptr : LibC::UINT_PTR
    size : UInt32
    x : UInt32
    y : UInt32
    cx : UInt32
    cy : UInt32
    flags : UInt32
    p_bits : LibC::UINT_PTR
    b_discardable : LibC::BOOL
  end
  struct VMEMHEAP
    dw_flags : UInt32
    stride : UInt32
    free_list : Void*
    alloc_list : Void*
    dw_total_size : UInt32
    fp_gart_lin : LibC::UINT_PTR
    fp_gart_dev : LibC::UINT_PTR
    dw_commited_size : UInt32
    dw_coalesce_count : UInt32
    alignment : HEAPALIGNMENT
    dds_caps_ex : DDSCAPSEX
    dds_caps_ex_alt : DDSCAPSEX
    li_phys_agp_base : LARGE_INTEGER
    hdev_agp : LibC::HANDLE
    pv_phys_rsrv : Void*
    p_agp_commit_mask : UInt8*
    dw_agp_commit_mask_size : UInt32
  end
  struct PROCESS_LIST
    lp_link : PROCESS_LIST*
    dw_process_id : UInt32
    dw_ref_cnt : UInt32
    dw_alpha_depth : UInt32
    dw_z_depth : UInt32
  end
  struct DDMONITORINFO
    manufacturer : UInt16
    product : UInt16
    serial_number : UInt32
    device_identifier : Guid
    mode640x480 : Int32
    mode800x600 : Int32
    mode1024x768 : Int32
    mode1280x1024 : Int32
    mode1600x1200 : Int32
    mode_reserved1 : Int32
    mode_reserved2 : Int32
    mode_reserved3 : Int32
  end
  struct DD32BITDRIVERDATA
    sz_name : CHAR[260]*
    sz_entry_point : CHAR[64]*
    dw_context : UInt32
  end
  struct DDVERSIONDATA
    dw_hal_version : UInt32
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
  end
  struct VIDMEM
    dw_flags : UInt32
    fp_start : LibC::UINT_PTR
    anonymous1 : VIDMEM_Anonymous1_e__Union
    dds_caps : DDSCAPS
    dds_caps_alt : DDSCAPS
    anonymous2 : VIDMEM_Anonymous2_e__Union
  end
  struct VIDMEMINFO
    fp_primary : LibC::UINT_PTR
    dw_flags : UInt32
    dw_display_width : UInt32
    dw_display_height : UInt32
    l_display_pitch : Int32
    ddpf_display : DDPIXELFORMAT
    dw_offscreen_align : UInt32
    dw_overlay_align : UInt32
    dw_texture_align : UInt32
    dw_z_buffer_align : UInt32
    dw_alpha_align : UInt32
    dw_num_heaps : UInt32
    pvm_list : VIDMEM*
  end
  struct HEAPALIAS
    fp_vid_mem : LibC::UINT_PTR
    lp_alias : Void*
    dw_alias_size : UInt32
  end
  struct HEAPALIASINFO
    dw_ref_cnt : UInt32
    dw_flags : UInt32
    dw_num_heaps : UInt32
    lp_aliases : HEAPALIAS*
  end
  struct IUNKNOWN_LIST
    lp_link : IUNKNOWN_LIST*
    lp_guid : Guid*
    lp_i_unknown : IUnknown
  end
  struct DDHAL_DDCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_driver : LPDDHAL_DESTROYDRIVER
    create_surface : LPDDHAL_CREATESURFACE
    set_color_key : LPDDHAL_SETCOLORKEY
    set_mode : LPDDHAL_SETMODE
    wait_for_vertical_blank : LPDDHAL_WAITFORVERTICALBLANK
    can_create_surface : LPDDHAL_CANCREATESURFACE
    create_palette : LPDDHAL_CREATEPALETTE
    get_scan_line : LPDDHAL_GETSCANLINE
    set_exclusive_mode : LPDDHAL_SETEXCLUSIVEMODE
    flip_to_gdi_surface : LPDDHAL_FLIPTOGDISURFACE
  end
  struct DDHAL_DDPALETTECALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_palette : LPDDHALPALCB_DESTROYPALETTE
    set_entries : LPDDHALPALCB_SETENTRIES
  end
  struct DDHAL_DDSURFACECALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_surface : LPDDHALSURFCB_DESTROYSURFACE
    flip : LPDDHALSURFCB_FLIP
    set_clip_list : LPDDHALSURFCB_SETCLIPLIST
    lock : LPDDHALSURFCB_LOCK
    unlock : LPDDHALSURFCB_UNLOCK
    blt : LPDDHALSURFCB_BLT
    set_color_key : LPDDHALSURFCB_SETCOLORKEY
    add_attached_surface : LPDDHALSURFCB_ADDATTACHEDSURFACE
    get_blt_status : LPDDHALSURFCB_GETBLTSTATUS
    get_flip_status : LPDDHALSURFCB_GETFLIPSTATUS
    update_overlay : LPDDHALSURFCB_UPDATEOVERLAY
    set_overlay_position : LPDDHALSURFCB_SETOVERLAYPOSITION
    reserved4 : Void*
    set_palette : LPDDHALSURFCB_SETPALETTE
  end
  struct DDHAL_DDMISCELLANEOUSCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    get_avail_driver_memory : LPDDHAL_GETAVAILDRIVERMEMORY
    update_non_local_heap : LPDDHAL_UPDATENONLOCALHEAP
    get_heap_alignment : LPDDHAL_GETHEAPALIGNMENT
    get_sysmem_blt_status : LPDDHALSURFCB_GETBLTSTATUS
  end
  struct DDHAL_DDMISCELLANEOUS2CALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    reserved : Void*
    create_surface_ex : LPDDHAL_CREATESURFACEEX
    get_driver_state : LPDDHAL_GETDRIVERSTATE
    destroy_dd_local : LPDDHAL_DESTROYDDLOCAL
  end
  struct DDHAL_DDEXEBUFCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    can_create_execute_buffer : LPDDHALEXEBUFCB_CANCREATEEXEBUF
    create_execute_buffer : LPDDHALEXEBUFCB_CREATEEXEBUF
    destroy_execute_buffer : LPDDHALEXEBUFCB_DESTROYEXEBUF
    lock_execute_buffer : LPDDHALEXEBUFCB_LOCKEXEBUF
    unlock_execute_buffer : LPDDHALEXEBUFCB_UNLOCKEXEBUF
  end
  struct DDHAL_DDVIDEOPORTCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    can_create_video_port : LPDDHALVPORTCB_CANCREATEVIDEOPORT
    create_video_port : LPDDHALVPORTCB_CREATEVIDEOPORT
    flip_video_port : LPDDHALVPORTCB_FLIP
    get_video_port_bandwidth : LPDDHALVPORTCB_GETBANDWIDTH
    get_video_port_input_formats : LPDDHALVPORTCB_GETINPUTFORMATS
    get_video_port_output_formats : LPDDHALVPORTCB_GETOUTPUTFORMATS
    lp_reserved1 : Void*
    get_video_port_field : LPDDHALVPORTCB_GETFIELD
    get_video_port_line : LPDDHALVPORTCB_GETLINE
    get_video_port_connect_info : LPDDHALVPORTCB_GETVPORTCONNECT
    destroy_video_port : LPDDHALVPORTCB_DESTROYVPORT
    get_video_port_flip_status : LPDDHALVPORTCB_GETFLIPSTATUS
    update_video_port : LPDDHALVPORTCB_UPDATE
    wait_for_video_port_sync : LPDDHALVPORTCB_WAITFORSYNC
    get_video_signal_status : LPDDHALVPORTCB_GETSIGNALSTATUS
    color_control : LPDDHALVPORTCB_COLORCONTROL
  end
  struct DDHAL_DDCOLORCONTROLCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    color_control : LPDDHALCOLORCB_COLORCONTROL
  end
  struct DDHAL_DDKERNELCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    sync_surface_data : LPDDHALKERNELCB_SYNCSURFACE
    sync_video_port_data : LPDDHALKERNELCB_SYNCVIDEOPORT
  end
  struct DDHAL_DDMOTIONCOMPCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    get_mo_comp_guids : LPDDHALMOCOMPCB_GETGUIDS
    get_mo_comp_formats : LPDDHALMOCOMPCB_GETFORMATS
    create_mo_comp : LPDDHALMOCOMPCB_CREATE
    get_mo_comp_buff_info : LPDDHALMOCOMPCB_GETCOMPBUFFINFO
    get_internal_mo_comp_info : LPDDHALMOCOMPCB_GETINTERNALINFO
    begin_mo_comp_frame : LPDDHALMOCOMPCB_BEGINFRAME
    end_mo_comp_frame : LPDDHALMOCOMPCB_ENDFRAME
    render_mo_comp : LPDDHALMOCOMPCB_RENDER
    query_mo_comp_status : LPDDHALMOCOMPCB_QUERYSTATUS
    destroy_mo_comp : LPDDHALMOCOMPCB_DESTROY
  end
  struct DDNONLOCALVIDMEMCAPS
    dw_size : UInt32
    dw_nlvb_caps : UInt32
    dw_nlvb_caps2 : UInt32
    dw_nlvbc_key_caps : UInt32
    dw_nlvbfx_caps : UInt32
    dw_nlvb_rops : UInt32[8]*
  end
  struct DDMORESURFACECAPS
    dw_size : UInt32
    dds_caps_more : DDSCAPSEX
    dds_extended_heap_restrictions : DDMORESURFACECAPS_ExtendedHeapRestrictions[0]*
  end
  struct DDMORESURFACECAPS_ExtendedHeapRestrictions
    dds_caps_ex : DDSCAPSEX
    dds_caps_ex_alt : DDSCAPSEX
  end
  struct DDSTEREOMODE
    dw_size : UInt32
    dw_height : UInt32
    dw_width : UInt32
    dw_bpp : UInt32
    dw_refresh_rate : UInt32
    b_supported : LibC::BOOL
  end
  struct DDRAWI_DDRAWPALETTE_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DDRAWPALETTE_LCL*
    lp_link : DDRAWI_DDRAWPALETTE_INT*
    dw_int_ref_cnt : UInt32
  end
  struct DDRAWI_DDRAWPALETTE_GBL
    dw_ref_cnt : UInt32
    dw_flags : UInt32
    lp_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    dw_process_id : UInt32
    lp_color_table : PALETTEENTRY*
    anonymous : DDRAWI_DDRAWPALETTE_GBL_Anonymous_e__Union
    dw_driver_reserved : UInt32
    dw_contents_stamp : UInt32
    dw_save_stamp : UInt32
    dw_handle : UInt32
  end
  struct DDRAWI_DDRAWPALETTE_LCL
    lp_pal_more : UInt32
    lp_gbl : DDRAWI_DDRAWPALETTE_GBL*
    dw_unused0 : LibC::UINT_PTR
    dw_local_ref_cnt : UInt32
    p_unk_outer : IUnknown
    lp_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    dw_reserved1 : LibC::UINT_PTR
    dw_ddraw_reserved1 : LibC::UINT_PTR
    dw_ddraw_reserved2 : LibC::UINT_PTR
    dw_ddraw_reserved3 : LibC::UINT_PTR
  end
  struct DDRAWI_DDRAWCLIPPER_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DDRAWCLIPPER_LCL*
    lp_link : DDRAWI_DDRAWCLIPPER_INT*
    dw_int_ref_cnt : UInt32
  end
  struct DDRAWI_DDRAWCLIPPER_GBL
    dw_ref_cnt : UInt32
    dw_flags : UInt32
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_process_id : UInt32
    dw_reserved1 : LibC::UINT_PTR
    h_wnd : LibC::UINT_PTR
    lp_static_clip_list : RGNDATA*
  end
  struct DDRAWI_DDRAWCLIPPER_LCL
    lp_clip_more : UInt32
    lp_gbl : DDRAWI_DDRAWCLIPPER_GBL*
    lp_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    dw_local_ref_cnt : UInt32
    p_unk_outer : IUnknown
    lp_dd_int : DDRAWI_DIRECTDRAW_INT*
    dw_reserved1 : LibC::UINT_PTR
    p_addrefed_this_owner : IUnknown
  end
  struct ATTACHLIST
    dw_flags : UInt32
    lp_link : ATTACHLIST*
    lp_attached : DDRAWI_DDRAWSURFACE_LCL*
    lp_i_attached : DDRAWI_DDRAWSURFACE_INT*
  end
  struct DBLNODE
    next : DBLNODE*
    prev : DBLNODE*
    object : DDRAWI_DDRAWSURFACE_LCL*
    object_int : DDRAWI_DDRAWSURFACE_INT*
  end
  struct ACCESSRECTLIST
    lp_link : ACCESSRECTLIST*
    r_dest : RECT
    lp_owner : DDRAWI_DIRECTDRAW_LCL*
    lp_surface_data : Void*
    dw_flags : UInt32
    lp_heap_alias_info : HEAPALIASINFO*
  end
  struct DDRAWI_DDRAWSURFACE_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DDRAWSURFACE_LCL*
    lp_link : DDRAWI_DDRAWSURFACE_INT*
    dw_int_ref_cnt : UInt32
  end
  struct DDRAWI_DDRAWSURFACE_GBL
    dw_ref_cnt : UInt32
    dw_global_flags : UInt32
    anonymous1 : DDRAWI_DDRAWSURFACE_GBL_Anonymous1_e__Union
    anonymous2 : DDRAWI_DDRAWSURFACE_GBL_Anonymous2_e__Union
    anonymous3 : DDRAWI_DDRAWSURFACE_GBL_Anonymous3_e__Union
    fp_vid_mem : LibC::UINT_PTR
    anonymous4 : DDRAWI_DDRAWSURFACE_GBL_Anonymous4_e__Union
    w_height : UInt16
    w_width : UInt16
    dw_usage_count : UInt32
    dw_reserved1 : LibC::UINT_PTR
    ddpf_surface : DDPIXELFORMAT
  end
  struct DDRAWI_DDRAWSURFACE_GBL_MORE
    dw_size : UInt32
    anonymous : DDRAWI_DDRAWSURFACE_GBL_MORE_Anonymous_e__Union
    p_page_table : UInt32*
    c_pages : UInt32
    dw_saved_dc_context : LibC::UINT_PTR
    fp_aliased_vid_mem : LibC::UINT_PTR
    dw_driver_reserved : LibC::UINT_PTR
    dw_hel_reserved : LibC::UINT_PTR
    c_page_unlocks : UInt32
    h_kernel_surface : LibC::UINT_PTR
    dw_kernel_ref_cnt : UInt32
    lp_color_info : DDCOLORCONTROL*
    fp_nt_alias : LibC::UINT_PTR
    dw_contents_stamp : UInt32
    lpv_unswapped_driver_reserved : Void*
    lp_ddraw_reserved2 : Void*
    dw_ddraw_reserved1 : UInt32
    dw_ddraw_reserved2 : UInt32
    fp_alias_of_vid_mem : LibC::UINT_PTR
  end
  struct DDRAWI_DDRAWSURFACE_MORE
    dw_size : UInt32
    lp_i_unknowns : IUNKNOWN_LIST*
    lp_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    dw_page_lock_count : UInt32
    dw_bytes_allocated : UInt32
    lp_dd_int : DDRAWI_DIRECTDRAW_INT*
    dw_mip_map_count : UInt32
    lp_ddi_clipper : DDRAWI_DDRAWCLIPPER_INT*
    lp_heap_alias_info : HEAPALIASINFO*
    dw_overlay_flags : UInt32
    rgjunc : Void*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    lpdd_overlay_fx : DDOVERLAYFX*
    dds_caps_ex : DDSCAPSEX
    dw_texture_stage : UInt32
    lp_ddraw_reserved : Void*
    lp_ddraw_reserved2 : Void*
    lp_d_draw_reserved3 : Void*
    dw_d_draw_reserved4 : UInt32
    lp_d_draw_reserved5 : Void*
    lp_gamma_ramp : UInt32*
    lp_original_gamma_ramp : UInt32*
    lp_d_draw_reserved6 : Void*
    dw_surface_handle : UInt32
    qw_d_draw_reserved8 : UInt32[2]*
    lp_d_draw_reserved9 : Void*
    c_surfaces : UInt32
    p_created_dd_surface_desc2 : DDSURFACEDESC2*
    slist : DDRAWI_DDRAWSURFACE_LCL**
    dw_fvf : UInt32
    lp_vb : Void*
  end
  struct DDRAWI_DDRAWSURFACE_LCL
    lp_surf_more : DDRAWI_DDRAWSURFACE_MORE*
    lp_gbl : DDRAWI_DDRAWSURFACE_GBL*
    h_dd_surface : LibC::UINT_PTR
    lp_attach_list : ATTACHLIST*
    lp_attach_list_from : ATTACHLIST*
    dw_local_ref_cnt : UInt32
    dw_process_id : UInt32
    dw_flags : UInt32
    dds_caps : DDSCAPS
    anonymous1 : DDRAWI_DDRAWSURFACE_LCL_Anonymous1_e__Union
    anonymous2 : DDRAWI_DDRAWSURFACE_LCL_Anonymous2_e__Union
    dw_mode_created_in : UInt32
    dw_back_buffer_count : UInt32
    ddck_ck_dest_blt : DDCOLORKEY
    ddck_ck_src_blt : DDCOLORKEY
    h_dc : LibC::UINT_PTR
    dw_reserved1 : LibC::UINT_PTR
    ddck_ck_src_overlay : DDCOLORKEY
    ddck_ck_dest_overlay : DDCOLORKEY
    lp_surface_overlaying : DDRAWI_DDRAWSURFACE_INT*
    dbn_overlay_node : DBLNODE
    rc_overlay_src : RECT
    rc_overlay_dest : RECT
    dw_clr_xparent : UInt32
    dw_alpha : UInt32
    l_overlay_x : Int32
    l_overlay_y : Int32
  end
  struct DDHALMODEINFO
    dw_width : UInt32
    dw_height : UInt32
    l_pitch : Int32
    dw_bpp : UInt32
    w_flags : UInt16
    w_refresh_rate : UInt16
    dw_r_bit_mask : UInt32
    dw_g_bit_mask : UInt32
    dw_b_bit_mask : UInt32
    dw_alpha_bit_mask : UInt32
  end
  struct DDRAWI_DIRECTDRAW_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DIRECTDRAW_LCL*
    lp_link : DDRAWI_DIRECTDRAW_INT*
    dw_int_ref_cnt : UInt32
  end
  struct DDHAL_CALLBACKS
    cb_dd_callbacks : DDHAL_DDCALLBACKS
    cb_dd_surface_callbacks : DDHAL_DDSURFACECALLBACKS
    cb_dd_palette_callbacks : DDHAL_DDPALETTECALLBACKS
    haldd : DDHAL_DDCALLBACKS
    haldd_surface : DDHAL_DDSURFACECALLBACKS
    haldd_palette : DDHAL_DDPALETTECALLBACKS
    heldd : DDHAL_DDCALLBACKS
    heldd_surface : DDHAL_DDSURFACECALLBACKS
    heldd_palette : DDHAL_DDPALETTECALLBACKS
    cb_dd_exe_buf_callbacks : DDHAL_DDEXEBUFCALLBACKS
    haldd_exe_buf : DDHAL_DDEXEBUFCALLBACKS
    heldd_exe_buf : DDHAL_DDEXEBUFCALLBACKS
    cb_dd_video_port_callbacks : DDHAL_DDVIDEOPORTCALLBACKS
    haldd_video_port : DDHAL_DDVIDEOPORTCALLBACKS
    cb_dd_color_control_callbacks : DDHAL_DDCOLORCONTROLCALLBACKS
    haldd_color_control : DDHAL_DDCOLORCONTROLCALLBACKS
    cb_dd_miscellaneous_callbacks : DDHAL_DDMISCELLANEOUSCALLBACKS
    haldd_miscellaneous : DDHAL_DDMISCELLANEOUSCALLBACKS
    cb_dd_kernel_callbacks : DDHAL_DDKERNELCALLBACKS
    haldd_kernel : DDHAL_DDKERNELCALLBACKS
    cb_dd_motion_comp_callbacks : DDHAL_DDMOTIONCOMPCALLBACKS
    haldd_motion_comp : DDHAL_DDMOTIONCOMPCALLBACKS
  end
  struct DDCORECAPS
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_max_video_ports : UInt32
    dw_curr_video_ports : UInt32
    dw_svb_caps2 : UInt32
  end
  struct DDRAWI_DIRECTDRAW_GBL
    dw_ref_cnt : UInt32
    dw_flags : UInt32
    fp_primary_orig : LibC::UINT_PTR
    dd_caps : DDCORECAPS
    dw_internal1 : UInt32
    dw_unused1 : UInt32[9]*
    lp_ddc_btmp : DDHAL_CALLBACKS*
    ds_list : DDRAWI_DDRAWSURFACE_INT*
    pal_list : DDRAWI_DDRAWPALETTE_INT*
    clipper_list : DDRAWI_DDRAWCLIPPER_INT*
    lp16_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_max_overlays : UInt32
    dw_curr_overlays : UInt32
    dw_monitor_frequency : UInt32
    dd_hel_caps : DDCORECAPS
    dw_unused2 : UInt32[50]*
    ddck_ck_dest_overlay : DDCOLORKEY
    ddck_ck_src_overlay : DDCOLORKEY
    vmi_data : VIDMEMINFO
    lp_driver_handle : Void*
    lp_exclusive_owner : DDRAWI_DIRECTDRAW_LCL*
    dw_mode_index : UInt32
    dw_mode_index_orig : UInt32
    dw_num_four_cc : UInt32
    lpdw_four_cc : UInt32*
    dw_num_modes : UInt32
    lp_mode_info : DDHALMODEINFO*
    pl_process_list : PROCESS_LIST
    dw_surface_lock_count : UInt32
    dw_aliased_lock_cnt : UInt32
    dw_reserved3 : LibC::UINT_PTR
    h_dd : LibC::UINT_PTR
    c_obsolete : CHAR[12]*
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dbn_overlay_root : DBLNODE
    lpw_p_device_flags : UInt16*
    dw_p_device : UInt32
    dw_win16_lock_cnt : UInt32
    dw_unused3 : UInt32
    h_instance : UInt32
    dw_event16 : UInt32
    dw_save_num_modes : UInt32
    lp_d3_d_global_driver_data : LibC::UINT_PTR
    lp_d3_dhal_callbacks : LibC::UINT_PTR
    dd_both_caps : DDCORECAPS
    lp_dd_video_port_caps : DDVIDEOPORTCAPS*
    dvp_list : DDRAWI_DDVIDEOPORT_INT*
    lp_d3_dhal_callbacks2 : LibC::UINT_PTR
    rect_device : RECT
    c_monitors : UInt32
    gpbmi_src : Void*
    gpbmi_dest : Void*
    phai_heap_aliases : HEAPALIASINFO*
    h_kernel_handle : LibC::UINT_PTR
    pfn_notify_proc : LibC::UINT_PTR
    lp_dd_kernel_caps : DDKERNELCAPS*
    lpdd_nlv_caps : DDNONLOCALVIDMEMCAPS*
    lpdd_nlvhel_caps : DDNONLOCALVIDMEMCAPS*
    lpdd_nlv_both_caps : DDNONLOCALVIDMEMCAPS*
    lp_d3_d_extended_caps : LibC::UINT_PTR
    dw_dos_box_event : UInt32
    rect_desktop : RECT
    c_driver_name : CHAR[32]*
    lp_d3_dhal_callbacks3 : LibC::UINT_PTR
    dw_num_z_pixel_formats : UInt32
    lp_z_pixel_formats : DDPIXELFORMAT*
    mc_list : DDRAWI_DDMOTIONCOMP_INT*
    h_dd_vxd : UInt32
    dds_caps_more : DDSCAPSEX
  end
  struct DDRAWI_DIRECTDRAW_LCL
    lp_dd_more : UInt32
    lp_gbl : DDRAWI_DIRECTDRAW_GBL*
    dw_unused0 : UInt32
    dw_local_flags : UInt32
    dw_local_ref_cnt : UInt32
    dw_process_id : UInt32
    p_unk_outer : IUnknown
    dw_obsolete1 : UInt32
    h_wnd : LibC::UINT_PTR
    h_dc : LibC::UINT_PTR
    dw_error_mode : UInt32
    lp_primary : DDRAWI_DDRAWSURFACE_INT*
    lp_cb : DDRAWI_DDRAWSURFACE_INT*
    dw_preferred_mode : UInt32
    h_d3_d_instance : HINSTANCE
    p_d3_di_unknown : IUnknown
    lp_ddcb : DDHAL_CALLBACKS*
    h_dd_vxd : LibC::UINT_PTR
    dw_app_hack_flags : UInt32
    h_focus_wnd : LibC::UINT_PTR
    dw_hot_tracking : UInt32
    dw_ime_state : UInt32
    h_wnd_popup : LibC::UINT_PTR
    h_dd : LibC::UINT_PTR
    h_gamma_calibrator : LibC::UINT_PTR
    lp_gamma_calibrator : LPDDGAMMACALIBRATORPROC
  end
  struct DDRAWI_DDVIDEOPORT_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DDVIDEOPORT_LCL*
    lp_link : DDRAWI_DDVIDEOPORT_INT*
    dw_int_ref_cnt : UInt32
    dw_flags : UInt32
  end
  struct DDRAWI_DDVIDEOPORT_LCL
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    ddvp_desc : DDVIDEOPORTDESC
    ddvp_info : DDVIDEOPORTINFO
    lp_surface : DDRAWI_DDRAWSURFACE_INT*
    lp_vbi_surface : DDRAWI_DDRAWSURFACE_INT*
    lp_flip_ints : DDRAWI_DDRAWSURFACE_INT**
    dw_num_autoflip : UInt32
    dw_process_id : UInt32
    dw_state_flags : UInt32
    dw_flags : UInt32
    dw_ref_cnt : UInt32
    fp_last_flip : LibC::UINT_PTR
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
    h_dd_video_port : LibC::HANDLE
    dw_num_vbi_autoflip : UInt32
    lp_vbi_desc : DDVIDEOPORTDESC*
    lp_video_desc : DDVIDEOPORTDESC*
    lp_vbi_info : DDVIDEOPORTINFO*
    lp_video_info : DDVIDEOPORTINFO*
    dw_vbi_process_id : UInt32
    lp_vp_notify : DDRAWI_DDVIDEOPORT_INT*
  end
  struct DDRAWI_DDMOTIONCOMP_INT
    lp_vtbl : Void*
    lp_lcl : DDRAWI_DDMOTIONCOMP_LCL*
    lp_link : DDRAWI_DDMOTIONCOMP_INT*
    dw_int_ref_cnt : UInt32
  end
  struct DDRAWI_DDMOTIONCOMP_LCL
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    guid : Guid
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
    dw_internal_flags : UInt32
    dw_ref_cnt : UInt32
    dw_process_id : UInt32
    h_mo_comp : LibC::HANDLE
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
    lp_driver_reserved1 : Void*
    lp_driver_reserved2 : Void*
    lp_driver_reserved3 : Void*
  end
  struct DDHALINFO
    dw_size : UInt32
    lp_dd_callbacks : DDHAL_DDCALLBACKS*
    lp_dd_surface_callbacks : DDHAL_DDSURFACECALLBACKS*
    lp_dd_palette_callbacks : DDHAL_DDPALETTECALLBACKS*
    vmi_data : VIDMEMINFO
    dd_caps : DDCORECAPS
    dw_monitor_frequency : UInt32
    get_driver_info : LPDDHAL_GETDRIVERINFO
    dw_mode_index : UInt32
    lpdw_four_cc : UInt32*
    dw_num_modes : UInt32
    lp_mode_info : DDHALMODEINFO*
    dw_flags : UInt32
    lp_p_device : Void*
    h_instance : UInt32
    lp_d3_d_global_driver_data : LibC::UINT_PTR
    lp_d3_dhal_callbacks : LibC::UINT_PTR
    lp_dd_exe_buf_callbacks : DDHAL_DDEXEBUFCALLBACKS*
  end
  struct DDHALDDRAWFNS
    dw_size : UInt32
    lp_set_info : LPDDHAL_SETINFO
    lp_vid_mem_alloc : LPDDHAL_VIDMEMALLOC
    lp_vid_mem_free : LPDDHAL_VIDMEMFREE
  end
  struct DDHAL_BLTDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_dest_surface : DDRAWI_DDRAWSURFACE_LCL*
    r_dest : RECTL
    lp_dd_src_surface : DDRAWI_DDRAWSURFACE_LCL*
    r_src : RECTL
    dw_flags : UInt32
    dw_rop_flags : UInt32
    blt_fx : DDBLTFX
    dd_r_val : HRESULT
    blt : LPDDHALSURFCB_BLT
    is_clipped : LibC::BOOL
    r_orig_dest : RECTL
    r_orig_src : RECTL
    dw_rect_cnt : UInt32
    pr_dest_rects : RECT*
  end
  struct DDHAL_LOCKDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    b_has_rect : UInt32
    r_area : RECTL
    lp_surf_data : Void*
    dd_r_val : HRESULT
    lock : LPDDHALSURFCB_LOCK
    dw_flags : UInt32
  end
  struct DDHAL_UNLOCKDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
    unlock : LPDDHALSURFCB_UNLOCK
  end
  struct DDHAL_UPDATEOVERLAYDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_dest_surface : DDRAWI_DDRAWSURFACE_LCL*
    r_dest : RECTL
    lp_dd_src_surface : DDRAWI_DDRAWSURFACE_LCL*
    r_src : RECTL
    dw_flags : UInt32
    overlay_fx : DDOVERLAYFX
    dd_r_val : HRESULT
    update_overlay : LPDDHALSURFCB_UPDATEOVERLAY
  end
  struct DDHAL_SETOVERLAYPOSITIONDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_src_surface : DDRAWI_DDRAWSURFACE_LCL*
    lp_dd_dest_surface : DDRAWI_DDRAWSURFACE_LCL*
    l_x_pos : Int32
    l_y_pos : Int32
    dd_r_val : HRESULT
    set_overlay_position : LPDDHALSURFCB_SETOVERLAYPOSITION
  end
  struct DDHAL_SETPALETTEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    lp_dd_palette : DDRAWI_DDRAWPALETTE_GBL*
    dd_r_val : HRESULT
    set_palette : LPDDHALSURFCB_SETPALETTE
    attach : LibC::BOOL
  end
  struct DDHAL_FLIPDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_surf_curr : DDRAWI_DDRAWSURFACE_LCL*
    lp_surf_targ : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    flip : LPDDHALSURFCB_FLIP
    lp_surf_curr_left : DDRAWI_DDRAWSURFACE_LCL*
    lp_surf_targ_left : DDRAWI_DDRAWSURFACE_LCL*
  end
  struct DDHAL_DESTROYSURFACEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
    destroy_surface : LPDDHALSURFCB_DESTROYSURFACE
  end
  struct DDHAL_SETCLIPLISTDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
    set_clip_list : LPDDHALSURFCB_SETCLIPLIST
  end
  struct DDHAL_ADDATTACHEDSURFACEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    lp_surf_attached : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
    add_attached_surface : LPDDHALSURFCB_ADDATTACHEDSURFACE
  end
  struct DDHAL_SETCOLORKEYDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    ck_new : DDCOLORKEY
    dd_r_val : HRESULT
    set_color_key : LPDDHALSURFCB_SETCOLORKEY
  end
  struct DDHAL_GETBLTSTATUSDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    get_blt_status : LPDDHALSURFCB_GETBLTSTATUS
  end
  struct DDHAL_GETFLIPSTATUSDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    get_flip_status : LPDDHALSURFCB_GETFLIPSTATUS
  end
  struct DDHAL_DESTROYPALETTEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_palette : DDRAWI_DDRAWPALETTE_GBL*
    dd_r_val : HRESULT
    destroy_palette : LPDDHALPALCB_DESTROYPALETTE
  end
  struct DDHAL_SETENTRIESDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_palette : DDRAWI_DDRAWPALETTE_GBL*
    dw_base : UInt32
    dw_num_entries : UInt32
    lp_entries : PALETTEENTRY*
    dd_r_val : HRESULT
    set_entries : LPDDHALPALCB_SETENTRIES
  end
  struct DDHAL_CREATESURFACEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface_desc : DDSURFACEDESC*
    lplp_s_list : DDRAWI_DDRAWSURFACE_LCL**
    dw_s_cnt : UInt32
    dd_r_val : HRESULT
    create_surface : LPDDHAL_CREATESURFACE
  end
  struct DDHAL_CANCREATESURFACEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface_desc : DDSURFACEDESC*
    b_is_different_pixel_format : UInt32
    dd_r_val : HRESULT
    can_create_surface : LPDDHAL_CANCREATESURFACE
  end
  struct DDHAL_CREATEPALETTEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_palette : DDRAWI_DDRAWPALETTE_GBL*
    lp_color_table : PALETTEENTRY*
    dd_r_val : HRESULT
    create_palette : LPDDHAL_CREATEPALETTE
    is_excl : LibC::BOOL
  end
  struct DDHAL_WAITFORVERTICALBLANKDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_flags : UInt32
    b_is_in_vb : UInt32
    h_event : LibC::UINT_PTR
    dd_r_val : HRESULT
    wait_for_vertical_blank : LPDDHAL_WAITFORVERTICALBLANK
  end
  struct DDHAL_DESTROYDRIVERDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dd_r_val : HRESULT
    destroy_driver : LPDDHAL_DESTROYDRIVER
  end
  struct DDHAL_SETMODEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_mode_index : UInt32
    dd_r_val : HRESULT
    set_mode : LPDDHAL_SETMODE
    inexcl : LibC::BOOL
    use_refresh_rate : LibC::BOOL
  end
  struct DDHAL_DRVSETCOLORKEYDATA
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    ck_new : DDCOLORKEY
    dd_r_val : HRESULT
    set_color_key : LPDDHAL_SETCOLORKEY
  end
  struct DDHAL_GETSCANLINEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_scan_line : UInt32
    dd_r_val : HRESULT
    get_scan_line : LPDDHAL_GETSCANLINE
  end
  struct DDHAL_SETEXCLUSIVEMODEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_enter_excl : UInt32
    dw_reserved : UInt32
    dd_r_val : HRESULT
    set_exclusive_mode : LPDDHAL_SETEXCLUSIVEMODE
  end
  struct DDHAL_FLIPTOGDISURFACEDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_to_gdi : UInt32
    dw_reserved : UInt32
    dd_r_val : HRESULT
    flip_to_gdi_surface : LPDDHAL_FLIPTOGDISURFACE
  end
  struct DDHAL_CANCREATEVPORTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_dd_video_port_desc : DDVIDEOPORTDESC*
    dd_r_val : HRESULT
    can_create_video_port : LPDDHALVPORTCB_CANCREATEVIDEOPORT
  end
  struct DDHAL_CREATEVPORTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_dd_video_port_desc : DDVIDEOPORTDESC*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dd_r_val : HRESULT
    create_video_port : LPDDHALVPORTCB_CREATEVIDEOPORT
  end
  struct DDHAL_FLIPVPORTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    lp_surf_curr : DDRAWI_DDRAWSURFACE_LCL*
    lp_surf_targ : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
    flip_video_port : LPDDHALVPORTCB_FLIP
  end
  struct DDHAL_GETVPORTBANDWIDTHDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    lpddpf_format : DDPIXELFORMAT*
    dw_width : UInt32
    dw_height : UInt32
    dw_flags : UInt32
    lp_bandwidth : DDVIDEOPORTBANDWIDTH*
    dd_r_val : HRESULT
    get_video_port_bandwidth : LPDDHALVPORTCB_GETBANDWIDTH
  end
  struct DDHAL_GETVPORTINPUTFORMATDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_flags : UInt32
    lpddpf_format : DDPIXELFORMAT*
    dw_num_formats : UInt32
    dd_r_val : HRESULT
    get_video_port_input_formats : LPDDHALVPORTCB_GETINPUTFORMATS
  end
  struct DDHAL_GETVPORTOUTPUTFORMATDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_flags : UInt32
    lpddpf_input_format : DDPIXELFORMAT*
    lpddpf_output_formats : DDPIXELFORMAT*
    dw_num_formats : UInt32
    dd_r_val : HRESULT
    get_video_port_output_formats : LPDDHALVPORTCB_GETOUTPUTFORMATS
  end
  struct DDHAL_GETVPORTFIELDDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    b_field : LibC::BOOL
    dd_r_val : HRESULT
    get_video_port_field : LPDDHALVPORTCB_GETFIELD
  end
  struct DDHAL_GETVPORTLINEDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_line : UInt32
    dd_r_val : HRESULT
    get_video_port_line : LPDDHALVPORTCB_GETLINE
  end
  struct DDHAL_GETVPORTCONNECTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    dw_port_id : UInt32
    lp_connect : DDVIDEOPORTCONNECT*
    dw_num_entries : UInt32
    dd_r_val : HRESULT
    get_video_port_connect_info : LPDDHALVPORTCB_GETVPORTCONNECT
  end
  struct DDHAL_DESTROYVPORTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dd_r_val : HRESULT
    destroy_video_port : LPDDHALVPORTCB_DESTROYVPORT
  end
  struct DDHAL_GETVPORTFLIPSTATUSDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    fp_surface : LibC::UINT_PTR
    dd_r_val : HRESULT
    get_video_port_flip_status : LPDDHALVPORTCB_GETFLIPSTATUS
  end
  struct DDHAL_UPDATEVPORTDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    lplp_dd_surface : DDRAWI_DDRAWSURFACE_INT**
    lplp_ddvbi_surface : DDRAWI_DDRAWSURFACE_INT**
    lp_video_info : DDVIDEOPORTINFO*
    dw_flags : UInt32
    dw_num_autoflip : UInt32
    dw_num_vbi_autoflip : UInt32
    dd_r_val : HRESULT
    update_video_port : LPDDHALVPORTCB_UPDATE
  end
  struct DDHAL_WAITFORVPORTSYNCDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_flags : UInt32
    dw_line : UInt32
    dw_time_out : UInt32
    dd_r_val : HRESULT
    wait_for_video_port_sync : LPDDHALVPORTCB_WAITFORSYNC
  end
  struct DDHAL_GETVPORTSIGNALDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_status : UInt32
    dd_r_val : HRESULT
    get_video_signal_status : LPDDHALVPORTCB_GETSIGNALSTATUS
  end
  struct DDHAL_VPORTCOLORDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_flags : UInt32
    lp_color_data : DDCOLORCONTROL*
    dd_r_val : HRESULT
    color_control : LPDDHALVPORTCB_COLORCONTROL
  end
  struct DDHAL_COLORCONTROLDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    lp_color_data : DDCOLORCONTROL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    color_control : LPDDHALCOLORCB_COLORCONTROL
  end
  struct DDHAL_GETDRIVERINFODATA
    dw_size : UInt32
    dw_flags : UInt32
    guid_info : Guid
    dw_expected_size : UInt32
    lpv_data : Void*
    dw_actual_size : UInt32
    dd_r_val : HRESULT
    dw_context : LibC::UINT_PTR
  end
  struct DDHAL_GETAVAILDRIVERMEMORYDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dds_caps : DDSCAPS
    dw_total : UInt32
    dw_free : UInt32
    dd_r_val : HRESULT
    get_avail_driver_memory : LPDDHAL_GETAVAILDRIVERMEMORY
    dds_caps_ex : DDSCAPSEX
  end
  struct DDHAL_UPDATENONLOCALHEAPDATA
    lp_dd : DDRAWI_DIRECTDRAW_GBL*
    dw_heap : UInt32
    fp_gart_lin : LibC::UINT_PTR
    fp_gart_dev : LibC::UINT_PTR
    ul_policy_max_bytes : LibC::UINT_PTR
    dd_r_val : HRESULT
    update_non_local_heap : LPDDHAL_UPDATENONLOCALHEAP
  end
  struct DDHAL_GETHEAPALIGNMENTDATA
    dw_instance : LibC::UINT_PTR
    dw_heap : UInt32
    dd_r_val : HRESULT
    get_heap_alignment : LPDDHAL_GETHEAPALIGNMENT
    alignment : HEAPALIGNMENT
  end
  struct DDHAL_CREATESURFACEEXDATA
    dw_flags : UInt32
    lp_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    lp_dds_lcl : DDRAWI_DDRAWSURFACE_LCL*
    dd_r_val : HRESULT
  end
  struct DDHAL_GETDRIVERSTATEDATA
    dw_flags : UInt32
    anonymous : DDHAL_GETDRIVERSTATEDATA_Anonymous_e__Union
    lpdw_states : UInt32*
    dw_length : UInt32
    dd_r_val : HRESULT
  end
  struct DDHAL_DESTROYDDLOCALDATA
    dw_flags : UInt32
    p_dd_lcl : DDRAWI_DIRECTDRAW_LCL*
    dd_r_val : HRESULT
  end
  struct DDHAL_SYNCSURFACEDATA
    dw_size : UInt32
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_dd_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_surface_offset : UInt32
    fp_lock_ptr : LibC::UINT_PTR
    l_pitch : Int32
    dw_overlay_offset : UInt32
    dw_overlay_src_width : UInt32
    dw_overlay_src_height : UInt32
    dw_overlay_dest_width : UInt32
    dw_overlay_dest_height : UInt32
    dw_driver_reserved1 : LibC::UINT_PTR
    dw_driver_reserved2 : LibC::UINT_PTR
    dw_driver_reserved3 : LibC::UINT_PTR
    dd_r_val : HRESULT
  end
  struct DDHAL_SYNCVIDEOPORTDATA
    dw_size : UInt32
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_video_port : DDRAWI_DDVIDEOPORT_LCL*
    dw_origin_offset : UInt32
    dw_height : UInt32
    dw_vbi_height : UInt32
    dw_driver_reserved1 : LibC::UINT_PTR
    dw_driver_reserved2 : LibC::UINT_PTR
    dw_driver_reserved3 : LibC::UINT_PTR
    dd_r_val : HRESULT
  end
  struct DDHAL_GETMOCOMPGUIDSDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    dw_num_guids : UInt32
    lp_guids : Guid*
    dd_r_val : HRESULT
    get_mo_comp_guids : LPDDHALMOCOMPCB_GETGUIDS
  end
  struct DDHAL_GETMOCOMPFORMATSDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_guid : Guid*
    dw_num_formats : UInt32
    lp_formats : DDPIXELFORMAT*
    dd_r_val : HRESULT
    get_mo_comp_formats : LPDDHALMOCOMPCB_GETFORMATS
  end
  struct DDHAL_CREATEMOCOMPDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    lp_guid : Guid*
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
    lp_data : Void*
    dw_data_size : UInt32
    dd_r_val : HRESULT
    create_mo_comp : LPDDHALMOCOMPCB_CREATE
  end
  struct DDMCCOMPBUFFERINFO
    dw_size : UInt32
    dw_num_comp_buffers : UInt32
    dw_width_to_create : UInt32
    dw_height_to_create : UInt32
    dw_bytes_to_allocate : UInt32
    dd_comp_caps : DDSCAPS2
    dd_pixel_format : DDPIXELFORMAT
  end
  struct DDHAL_GETMOCOMPCOMPBUFFDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_guid : Guid*
    dw_width : UInt32
    dw_height : UInt32
    dd_pixel_format : DDPIXELFORMAT
    dw_num_types_comp_buffs : UInt32
    lp_comp_buff_info : DDMCCOMPBUFFERINFO*
    dd_r_val : HRESULT
    get_mo_comp_buff_info : LPDDHALMOCOMPCB_GETCOMPBUFFINFO
  end
  struct DDHAL_GETINTERNALMOCOMPDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_guid : Guid*
    dw_width : UInt32
    dw_height : UInt32
    dd_pixel_format : DDPIXELFORMAT
    dw_scratch_mem_alloc : UInt32
    dd_r_val : HRESULT
    get_internal_mo_comp_info : LPDDHALMOCOMPCB_GETINTERNALINFO
  end
  struct DDHAL_BEGINMOCOMPFRAMEDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    lp_dest_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_input_data_size : UInt32
    lp_input_data : Void*
    dw_output_data_size : UInt32
    lp_output_data : Void*
    dd_r_val : HRESULT
    begin_mo_comp_frame : LPDDHALMOCOMPCB_BEGINFRAME
  end
  struct DDHAL_ENDMOCOMPFRAMEDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    lp_input_data : Void*
    dw_input_data_size : UInt32
    dd_r_val : HRESULT
    end_mo_comp_frame : LPDDHALMOCOMPCB_ENDFRAME
  end
  struct DDMCBUFFERINFO
    dw_size : UInt32
    lp_comp_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_data_offset : UInt32
    dw_data_size : UInt32
    lp_private : Void*
  end
  struct DDHAL_RENDERMOCOMPDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    dw_num_buffers : UInt32
    lp_buffer_info : DDMCBUFFERINFO*
    dw_function : UInt32
    lp_input_data : Void*
    dw_input_data_size : UInt32
    lp_output_data : Void*
    dw_output_data_size : UInt32
    dd_r_val : HRESULT
    render_mo_comp : LPDDHALMOCOMPCB_RENDER
  end
  struct DDHAL_QUERYMOCOMPSTATUSDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    lp_surface : DDRAWI_DDRAWSURFACE_LCL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    query_mo_comp_status : LPDDHALMOCOMPCB_QUERYSTATUS
  end
  struct DDHAL_DESTROYMOCOMPDATA
    lp_dd : DDRAWI_DIRECTDRAW_LCL*
    lp_mo_comp : DDRAWI_DDMOTIONCOMP_LCL*
    dd_r_val : HRESULT
    destroy_mo_comp : LPDDHALMOCOMPCB_DESTROY
  end
  struct VIDEOMEMORY
    dw_flags : UInt32
    fp_start : LibC::UINT_PTR
    anonymous1 : VIDEOMEMORY_Anonymous1_e__Union
    dds_caps : DDSCAPS
    dds_caps_alt : DDSCAPS
    anonymous2 : VIDEOMEMORY_Anonymous2_e__Union
  end
  struct VIDEOMEMORYINFO
    fp_primary : LibC::UINT_PTR
    dw_flags : UInt32
    dw_display_width : UInt32
    dw_display_height : UInt32
    l_display_pitch : Int32
    ddpf_display : DDPIXELFORMAT
    dw_offscreen_align : UInt32
    dw_overlay_align : UInt32
    dw_texture_align : UInt32
    dw_z_buffer_align : UInt32
    dw_alpha_align : UInt32
    pv_primary : Void*
  end
  struct DD_CALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_driver : PDD_DESTROYDRIVER
    create_surface : PDD_CREATESURFACE
    set_color_key : PDD_SETCOLORKEY
    set_mode : PDD_SETMODE
    wait_for_vertical_blank : PDD_WAITFORVERTICALBLANK
    can_create_surface : PDD_CANCREATESURFACE
    create_palette : PDD_CREATEPALETTE
    get_scan_line : PDD_GETSCANLINE
    map_memory : PDD_MAPMEMORY
  end
  struct DD_MISCELLANEOUSCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    get_avail_driver_memory : PDD_GETAVAILDRIVERMEMORY
  end
  struct DD_MISCELLANEOUS2CALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    alpha_blt : PDD_ALPHABLT
    create_surface_ex : PDD_CREATESURFACEEX
    get_driver_state : PDD_GETDRIVERSTATE
    destroy_dd_local : PDD_DESTROYDDLOCAL
  end
  struct DD_NTCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    free_driver_memory : PDD_FREEDRIVERMEMORY
    set_exclusive_mode : PDD_SETEXCLUSIVEMODE
    flip_to_gdi_surface : PDD_FLIPTOGDISURFACE
  end
  struct DD_PALETTECALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_palette : PDD_PALCB_DESTROYPALETTE
    set_entries : PDD_PALCB_SETENTRIES
  end
  struct DD_SURFACECALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    destroy_surface : PDD_SURFCB_DESTROYSURFACE
    flip : PDD_SURFCB_FLIP
    set_clip_list : PDD_SURFCB_SETCLIPLIST
    lock : PDD_SURFCB_LOCK
    unlock : PDD_SURFCB_UNLOCK
    blt : PDD_SURFCB_BLT
    set_color_key : PDD_SURFCB_SETCOLORKEY
    add_attached_surface : PDD_SURFCB_ADDATTACHEDSURFACE
    get_blt_status : PDD_SURFCB_GETBLTSTATUS
    get_flip_status : PDD_SURFCB_GETFLIPSTATUS
    update_overlay : PDD_SURFCB_UPDATEOVERLAY
    set_overlay_position : PDD_SURFCB_SETOVERLAYPOSITION
    reserved4 : Void*
    set_palette : PDD_SURFCB_SETPALETTE
  end
  struct DD_VIDEOPORTCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    can_create_video_port : PDD_VPORTCB_CANCREATEVIDEOPORT
    create_video_port : PDD_VPORTCB_CREATEVIDEOPORT
    flip_video_port : PDD_VPORTCB_FLIP
    get_video_port_bandwidth : PDD_VPORTCB_GETBANDWIDTH
    get_video_port_input_formats : PDD_VPORTCB_GETINPUTFORMATS
    get_video_port_output_formats : PDD_VPORTCB_GETOUTPUTFORMATS
    lp_reserved1 : Void*
    get_video_port_field : PDD_VPORTCB_GETFIELD
    get_video_port_line : PDD_VPORTCB_GETLINE
    get_video_port_connect_info : PDD_VPORTCB_GETVPORTCONNECT
    destroy_video_port : PDD_VPORTCB_DESTROYVPORT
    get_video_port_flip_status : PDD_VPORTCB_GETFLIPSTATUS
    update_video_port : PDD_VPORTCB_UPDATE
    wait_for_video_port_sync : PDD_VPORTCB_WAITFORSYNC
    get_video_signal_status : PDD_VPORTCB_GETSIGNALSTATUS
    color_control : PDD_VPORTCB_COLORCONTROL
  end
  struct DD_COLORCONTROLCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    color_control : PDD_COLORCB_COLORCONTROL
  end
  struct DD_KERNELCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    sync_surface_data : PDD_KERNELCB_SYNCSURFACE
    sync_video_port_data : PDD_KERNELCB_SYNCVIDEOPORT
  end
  struct DD_MOTIONCOMPCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    get_mo_comp_guids : PDD_MOCOMPCB_GETGUIDS
    get_mo_comp_formats : PDD_MOCOMPCB_GETFORMATS
    create_mo_comp : PDD_MOCOMPCB_CREATE
    get_mo_comp_buff_info : PDD_MOCOMPCB_GETCOMPBUFFINFO
    get_internal_mo_comp_info : PDD_MOCOMPCB_GETINTERNALINFO
    begin_mo_comp_frame : PDD_MOCOMPCB_BEGINFRAME
    end_mo_comp_frame : PDD_MOCOMPCB_ENDFRAME
    render_mo_comp : PDD_MOCOMPCB_RENDER
    query_mo_comp_status : PDD_MOCOMPCB_QUERYSTATUS
    destroy_mo_comp : PDD_MOCOMPCB_DESTROY
  end
  struct DD_NONLOCALVIDMEMCAPS
    dw_size : UInt32
    dw_nlvb_caps : UInt32
    dw_nlvb_caps2 : UInt32
    dw_nlvbc_key_caps : UInt32
    dw_nlvbfx_caps : UInt32
    dw_nlvb_rops : UInt32[8]*
  end
  struct DD_PALETTE_GLOBAL
    dw_reserved1 : LibC::UINT_PTR
  end
  struct DD_PALETTE_LOCAL
    dw_reserved0 : UInt32
    dw_reserved1 : LibC::UINT_PTR
  end
  struct DD_CLIPPER_GLOBAL
    dw_reserved1 : LibC::UINT_PTR
  end
  struct DD_CLIPPER_LOCAL
    dw_reserved1 : LibC::UINT_PTR
  end
  struct DD_ATTACHLIST
    lp_link : DD_ATTACHLIST*
    lp_attached : DD_SURFACE_LOCAL*
  end
  struct DD_SURFACE_INT
    lp_lcl : DD_SURFACE_LOCAL*
  end
  struct DD_SURFACE_GLOBAL
    anonymous1 : DD_SURFACE_GLOBAL_Anonymous1_e__Union
    anonymous2 : DD_SURFACE_GLOBAL_Anonymous2_e__Union
    fp_vid_mem : LibC::UINT_PTR
    anonymous3 : DD_SURFACE_GLOBAL_Anonymous3_e__Union
    y_hint : Int32
    x_hint : Int32
    w_height : UInt32
    w_width : UInt32
    dw_reserved1 : LibC::UINT_PTR
    ddpf_surface : DDPIXELFORMAT
    fp_heap_offset : LibC::UINT_PTR
    h_creator_process : LibC::HANDLE
  end
  struct DD_SURFACE_MORE
    dw_mip_map_count : UInt32
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_overlay_flags : UInt32
    dds_caps_ex : DDSCAPSEX
    dw_surface_handle : UInt32
  end
  struct DD_SURFACE_LOCAL
    lp_gbl : DD_SURFACE_GLOBAL*
    dw_flags : UInt32
    dds_caps : DDSCAPS
    dw_reserved1 : LibC::UINT_PTR
    anonymous1 : DD_SURFACE_LOCAL_Anonymous1_e__Union
    anonymous2 : DD_SURFACE_LOCAL_Anonymous2_e__Union
    lp_surf_more : DD_SURFACE_MORE*
    lp_attach_list : DD_ATTACHLIST*
    lp_attach_list_from : DD_ATTACHLIST*
    rc_overlay_src : RECT
  end
  struct DD_MORECAPS
    dw_size : UInt32
    dw_alpha_caps : UInt32
    dw_svb_alpha_caps : UInt32
    dw_vsb_alpha_caps : UInt32
    dw_ssb_alpha_caps : UInt32
    dw_filter_caps : UInt32
    dw_svb_filter_caps : UInt32
    dw_vsb_filter_caps : UInt32
    dw_ssb_filter_caps : UInt32
  end
  struct DDNTCORECAPS
    dw_size : UInt32
    dw_caps : UInt32
    dw_caps2 : UInt32
    dw_c_key_caps : UInt32
    dw_fx_caps : UInt32
    dw_fx_alpha_caps : UInt32
    dw_pal_caps : UInt32
    dw_sv_caps : UInt32
    dw_alpha_blt_const_bit_depths : UInt32
    dw_alpha_blt_pixel_bit_depths : UInt32
    dw_alpha_blt_surface_bit_depths : UInt32
    dw_alpha_overlay_const_bit_depths : UInt32
    dw_alpha_overlay_pixel_bit_depths : UInt32
    dw_alpha_overlay_surface_bit_depths : UInt32
    dw_z_buffer_bit_depths : UInt32
    dw_vid_mem_total : UInt32
    dw_vid_mem_free : UInt32
    dw_max_visible_overlays : UInt32
    dw_curr_visible_overlays : UInt32
    dw_num_four_cc_codes : UInt32
    dw_align_boundary_src : UInt32
    dw_align_size_src : UInt32
    dw_align_boundary_dest : UInt32
    dw_align_size_dest : UInt32
    dw_align_stride_align : UInt32
    dw_rops : UInt32[8]*
    dds_caps : DDSCAPS
    dw_min_overlay_stretch : UInt32
    dw_max_overlay_stretch : UInt32
    dw_min_live_video_stretch : UInt32
    dw_max_live_video_stretch : UInt32
    dw_min_hw_codec_stretch : UInt32
    dw_max_hw_codec_stretch : UInt32
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
    dw_reserved3 : UInt32
    dw_svb_caps : UInt32
    dw_svbc_key_caps : UInt32
    dw_svbfx_caps : UInt32
    dw_svb_rops : UInt32[8]*
    dw_vsb_caps : UInt32
    dw_vsbc_key_caps : UInt32
    dw_vsbfx_caps : UInt32
    dw_vsb_rops : UInt32[8]*
    dw_ssb_caps : UInt32
    dw_ssbc_key_caps : UInt32
    dw_ssbfx_caps : UInt32
    dw_ssb_rops : UInt32[8]*
    dw_max_video_ports : UInt32
    dw_curr_video_ports : UInt32
    dw_svb_caps2 : UInt32
  end
  struct DD_D3DBUFCALLBACKS
    dw_size : UInt32
    dw_flags : UInt32
    can_create_d3_d_buffer : PDD_CANCREATESURFACE
    create_d3_d_buffer : PDD_CREATESURFACE
    destroy_d3_d_buffer : PDD_SURFCB_DESTROYSURFACE
    lock_d3_d_buffer : PDD_SURFCB_LOCK
    unlock_d3_d_buffer : PDD_SURFCB_UNLOCK
  end
  struct DD_HALINFO_V4
    dw_size : UInt32
    vmi_data : VIDEOMEMORYINFO
    dd_caps : DDNTCORECAPS
    get_driver_info : PDD_GETDRIVERINFO
    dw_flags : UInt32
  end
  struct DD_HALINFO
    dw_size : UInt32
    vmi_data : VIDEOMEMORYINFO
    dd_caps : DDNTCORECAPS
    get_driver_info : PDD_GETDRIVERINFO
    dw_flags : UInt32
    lp_d3_d_global_driver_data : Void*
    lp_d3_dhal_callbacks : Void*
    lp_d3_d_buf_callbacks : DD_D3DBUFCALLBACKS*
  end
  struct DD_DIRECTDRAW_GLOBAL
    dhpdev : Void*
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
    lp_dd_video_port_caps : DDVIDEOPORTCAPS*
  end
  struct DD_DIRECTDRAW_LOCAL
    lp_gbl : DD_DIRECTDRAW_GLOBAL*
  end
  struct DD_VIDEOPORT_LOCAL
    lp_dd : DD_DIRECTDRAW_LOCAL*
    ddvp_desc : DDVIDEOPORTDESC
    ddvp_info : DDVIDEOPORTINFO
    lp_surface : DD_SURFACE_INT*
    lp_vbi_surface : DD_SURFACE_INT*
    dw_num_autoflip : UInt32
    dw_num_vbi_autoflip : UInt32
    dw_reserved1 : LibC::UINT_PTR
    dw_reserved2 : LibC::UINT_PTR
    dw_reserved3 : LibC::UINT_PTR
  end
  struct DD_MOTIONCOMP_LOCAL
    lp_dd : DD_DIRECTDRAW_LOCAL*
    guid : Guid
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
    lp_driver_reserved1 : Void*
    lp_driver_reserved2 : Void*
    lp_driver_reserved3 : Void*
  end
  struct DD_MORESURFACECAPS
    dw_size : UInt32
    dds_caps_more : DDSCAPSEX
    dds_extended_heap_restrictions : DD_MORESURFACECAPS_NTExtendedHeapRestrictions[0]*
  end
  struct DD_MORESURFACECAPS_NTExtendedHeapRestrictions
    dds_caps_ex : DDSCAPSEX
    dds_caps_ex_alt : DDSCAPSEX
  end
  struct DD_STEREOMODE
    dw_size : UInt32
    dw_height : UInt32
    dw_width : UInt32
    dw_bpp : UInt32
    dw_refresh_rate : UInt32
    b_supported : LibC::BOOL
  end
  struct DD_UPDATENONLOCALHEAPDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dw_heap : UInt32
    fp_gart_lin : LibC::UINT_PTR
    fp_gart_dev : LibC::UINT_PTR
    ul_policy_max_bytes : LibC::UINT_PTR
    dd_r_val : HRESULT
    update_non_local_heap : Void*
  end
  struct DD_NTPRIVATEDRIVERCAPS
    dw_size : UInt32
    dw_private_caps : UInt32
  end
  struct DD_BLTDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_dest_surface : DD_SURFACE_LOCAL*
    r_dest : RECTL
    lp_dd_src_surface : DD_SURFACE_LOCAL*
    r_src : RECTL
    dw_flags : UInt32
    dw_rop_flags : UInt32
    blt_fx : DDBLTFX
    dd_r_val : HRESULT
    blt : Void*
    is_clipped : LibC::BOOL
    r_orig_dest : RECTL
    r_orig_src : RECTL
    dw_rect_cnt : UInt32
    pr_dest_rects : RECT*
    dw_a_flags : UInt32
    ddargb_scale_factors : DDARGB
  end
  struct DD_LOCKDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    b_has_rect : UInt32
    r_area : RECTL
    lp_surf_data : Void*
    dd_r_val : HRESULT
    lock : Void*
    dw_flags : UInt32
    fp_process : LibC::UINT_PTR
  end
  struct DD_UNLOCKDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    unlock : Void*
  end
  struct DD_UPDATEOVERLAYDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_dest_surface : DD_SURFACE_LOCAL*
    r_dest : RECTL
    lp_dd_src_surface : DD_SURFACE_LOCAL*
    r_src : RECTL
    dw_flags : UInt32
    overlay_fx : DDOVERLAYFX
    dd_r_val : HRESULT
    update_overlay : Void*
  end
  struct DD_SETOVERLAYPOSITIONDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_src_surface : DD_SURFACE_LOCAL*
    lp_dd_dest_surface : DD_SURFACE_LOCAL*
    l_x_pos : Int32
    l_y_pos : Int32
    dd_r_val : HRESULT
    set_overlay_position : Void*
  end
  struct DD_SETPALETTEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    lp_dd_palette : DD_PALETTE_GLOBAL*
    dd_r_val : HRESULT
    set_palette : Void*
    attach : LibC::BOOL
  end
  struct DD_FLIPDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_surf_curr : DD_SURFACE_LOCAL*
    lp_surf_targ : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    flip : Void*
    lp_surf_curr_left : DD_SURFACE_LOCAL*
    lp_surf_targ_left : DD_SURFACE_LOCAL*
  end
  struct DD_DESTROYSURFACEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    destroy_surface : Void*
  end
  struct DD_SETCLIPLISTDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    set_clip_list : Void*
  end
  struct DD_ADDATTACHEDSURFACEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    lp_surf_attached : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    add_attached_surface : Void*
  end
  struct DD_SETCOLORKEYDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    ck_new : DDCOLORKEY
    dd_r_val : HRESULT
    set_color_key : Void*
  end
  struct DD_GETBLTSTATUSDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    get_blt_status : Void*
  end
  struct DD_GETFLIPSTATUSDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    get_flip_status : Void*
  end
  struct DD_DESTROYPALETTEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_palette : DD_PALETTE_GLOBAL*
    dd_r_val : HRESULT
    destroy_palette : Void*
  end
  struct DD_SETENTRIESDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_palette : DD_PALETTE_GLOBAL*
    dw_base : UInt32
    dw_num_entries : UInt32
    lp_entries : PALETTEENTRY*
    dd_r_val : HRESULT
    set_entries : Void*
  end
  struct DD_CREATESURFACEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface_desc : DDSURFACEDESC*
    lplp_s_list : DD_SURFACE_LOCAL**
    dw_s_cnt : UInt32
    dd_r_val : HRESULT
    create_surface : Void*
  end
  struct DD_CANCREATESURFACEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface_desc : DDSURFACEDESC*
    b_is_different_pixel_format : UInt32
    dd_r_val : HRESULT
    can_create_surface : Void*
  end
  struct DD_CREATEPALETTEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_palette : DD_PALETTE_GLOBAL*
    lp_color_table : PALETTEENTRY*
    dd_r_val : HRESULT
    create_palette : Void*
    is_excl : LibC::BOOL
  end
  struct DD_WAITFORVERTICALBLANKDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dw_flags : UInt32
    b_is_in_vb : UInt32
    h_event : LibC::UINT_PTR
    dd_r_val : HRESULT
    wait_for_vertical_blank : Void*
  end
  struct DD_DRVSETCOLORKEYDATA
    lp_dd_surface : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    ck_new : DDCOLORKEY
    dd_r_val : HRESULT
    set_color_key : Void*
  end
  struct DD_GETSCANLINEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dw_scan_line : UInt32
    dd_r_val : HRESULT
    get_scan_line : Void*
  end
  struct DD_MAPMEMORYDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    b_map : LibC::BOOL
    h_process : LibC::HANDLE
    fp_process : LibC::UINT_PTR
    dd_r_val : HRESULT
  end
  struct DD_CANCREATEVPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_dd_video_port_desc : DDVIDEOPORTDESC*
    dd_r_val : HRESULT
    can_create_video_port : Void*
  end
  struct DD_CREATEVPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_dd_video_port_desc : DDVIDEOPORTDESC*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dd_r_val : HRESULT
    create_video_port : Void*
  end
  struct DD_FLIPVPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    lp_surf_curr : DD_SURFACE_LOCAL*
    lp_surf_targ : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    flip_video_port : Void*
  end
  struct DD_GETVPORTBANDWIDTHDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    lpddpf_format : DDPIXELFORMAT*
    dw_width : UInt32
    dw_height : UInt32
    dw_flags : UInt32
    lp_bandwidth : DDVIDEOPORTBANDWIDTH*
    dd_r_val : HRESULT
    get_video_port_bandwidth : Void*
  end
  struct DD_GETVPORTINPUTFORMATDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_flags : UInt32
    lpddpf_format : DDPIXELFORMAT*
    dw_num_formats : UInt32
    dd_r_val : HRESULT
    get_video_port_input_formats : Void*
  end
  struct DD_GETVPORTOUTPUTFORMATDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_flags : UInt32
    lpddpf_input_format : DDPIXELFORMAT*
    lpddpf_output_formats : DDPIXELFORMAT*
    dw_num_formats : UInt32
    dd_r_val : HRESULT
    get_video_port_input_formats : Void*
  end
  struct DD_GETVPORTFIELDDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    b_field : LibC::BOOL
    dd_r_val : HRESULT
    get_video_port_field : Void*
  end
  struct DD_GETVPORTLINEDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_line : UInt32
    dd_r_val : HRESULT
    get_video_port_line : Void*
  end
  struct DD_GETVPORTCONNECTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    dw_port_id : UInt32
    lp_connect : DDVIDEOPORTCONNECT*
    dw_num_entries : UInt32
    dd_r_val : HRESULT
    get_video_port_connect_info : Void*
  end
  struct DD_DESTROYVPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dd_r_val : HRESULT
    destroy_video_port : Void*
  end
  struct DD_GETVPORTFLIPSTATUSDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    fp_surface : LibC::UINT_PTR
    dd_r_val : HRESULT
    get_video_port_flip_status : Void*
  end
  struct DD_UPDATEVPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    lplp_dd_surface : DD_SURFACE_INT**
    lplp_ddvbi_surface : DD_SURFACE_INT**
    lp_video_info : DDVIDEOPORTINFO*
    dw_flags : UInt32
    dw_num_autoflip : UInt32
    dw_num_vbi_autoflip : UInt32
    dd_r_val : HRESULT
    update_video_port : Void*
  end
  struct DD_WAITFORVPORTSYNCDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_flags : UInt32
    dw_line : UInt32
    dw_time_out : UInt32
    dd_r_val : HRESULT
    update_video_port : Void*
  end
  struct DD_GETVPORTSIGNALDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_status : UInt32
    dd_r_val : HRESULT
    get_video_signal_status : Void*
  end
  struct DD_VPORTCOLORDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_flags : UInt32
    lp_color_data : DDCOLORCONTROL*
    dd_r_val : HRESULT
    color_control : Void*
  end
  struct DD_COLORCONTROLDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    lp_color_data : DDCOLORCONTROL*
    dw_flags : UInt32
    dd_r_val : HRESULT
    color_control : Void*
  end
  struct DD_GETDRIVERINFODATA
    dhpdev : Void*
    dw_size : UInt32
    dw_flags : UInt32
    guid_info : Guid
    dw_expected_size : UInt32
    lpv_data : Void*
    dw_actual_size : UInt32
    dd_r_val : HRESULT
  end
  struct DD_GETAVAILDRIVERMEMORYDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dds_caps : DDSCAPS
    dw_total : UInt32
    dw_free : UInt32
    dd_r_val : HRESULT
    get_avail_driver_memory : Void*
  end
  struct DD_FREEDRIVERMEMORYDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
    free_driver_memory : Void*
  end
  struct DD_SETEXCLUSIVEMODEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dw_enter_excl : UInt32
    dw_reserved : UInt32
    dd_r_val : HRESULT
    set_exclusive_mode : Void*
  end
  struct DD_FLIPTOGDISURFACEDATA
    lp_dd : DD_DIRECTDRAW_GLOBAL*
    dw_to_gdi : UInt32
    dw_reserved : UInt32
    dd_r_val : HRESULT
    flip_to_gdi_surface : Void*
  end
  struct DD_SYNCSURFACEDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_dd_surface : DD_SURFACE_LOCAL*
    dw_surface_offset : UInt32
    fp_lock_ptr : LibC::UINT_PTR
    l_pitch : Int32
    dw_overlay_offset : UInt32
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
    dw_driver_reserved4 : UInt32
    dd_r_val : HRESULT
  end
  struct DD_SYNCVIDEOPORTDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_video_port : DD_VIDEOPORT_LOCAL*
    dw_origin_offset : UInt32
    dw_height : UInt32
    dw_vbi_height : UInt32
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
    dd_r_val : HRESULT
  end
  struct DD_GETMOCOMPGUIDSDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    dw_num_guids : UInt32
    lp_guids : Guid*
    dd_r_val : HRESULT
  end
  struct DD_GETMOCOMPFORMATSDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_guid : Guid*
    dw_num_formats : UInt32
    lp_formats : DDPIXELFORMAT*
    dd_r_val : HRESULT
  end
  struct DD_CREATEMOCOMPDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    lp_guid : Guid*
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
    lp_data : Void*
    dw_data_size : UInt32
    dd_r_val : HRESULT
  end
  struct DDCOMPBUFFERINFO
    dw_size : UInt32
    dw_num_comp_buffers : UInt32
    dw_width_to_create : UInt32
    dw_height_to_create : UInt32
    dw_bytes_to_allocate : UInt32
    dd_comp_caps : DDSCAPS2
    dd_pixel_format : DDPIXELFORMAT
  end
  struct DD_GETMOCOMPCOMPBUFFDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_guid : Guid*
    dw_width : UInt32
    dw_height : UInt32
    dd_pixel_format : DDPIXELFORMAT
    dw_num_types_comp_buffs : UInt32
    lp_comp_buff_info : DDCOMPBUFFERINFO*
    dd_r_val : HRESULT
  end
  struct DD_GETINTERNALMOCOMPDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_guid : Guid*
    dw_width : UInt32
    dw_height : UInt32
    dd_pixel_format : DDPIXELFORMAT
    dw_scratch_mem_alloc : UInt32
    dd_r_val : HRESULT
  end
  struct DD_BEGINMOCOMPFRAMEDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    lp_dest_surface : DD_SURFACE_LOCAL*
    dw_input_data_size : UInt32
    lp_input_data : Void*
    dw_output_data_size : UInt32
    lp_output_data : Void*
    dd_r_val : HRESULT
  end
  struct DD_ENDMOCOMPFRAMEDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    lp_input_data : Void*
    dw_input_data_size : UInt32
    dd_r_val : HRESULT
  end
  struct DDMOCOMPBUFFERINFO
    dw_size : UInt32
    lp_comp_surface : DD_SURFACE_LOCAL*
    dw_data_offset : UInt32
    dw_data_size : UInt32
    lp_private : Void*
  end
  struct DD_RENDERMOCOMPDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    dw_num_buffers : UInt32
    lp_buffer_info : DDMOCOMPBUFFERINFO*
    dw_function : UInt32
    lp_input_data : Void*
    dw_input_data_size : UInt32
    lp_output_data : Void*
    dw_output_data_size : UInt32
    dd_r_val : HRESULT
  end
  struct DD_QUERYMOCOMPSTATUSDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    lp_surface : DD_SURFACE_LOCAL*
    dw_flags : UInt32
    dd_r_val : HRESULT
  end
  struct DD_DESTROYMOCOMPDATA
    lp_dd : DD_DIRECTDRAW_LOCAL*
    lp_mo_comp : DD_MOTIONCOMP_LOCAL*
    dd_r_val : HRESULT
  end
  struct DD_CREATESURFACEEXDATA
    dw_flags : UInt32
    lp_dd_lcl : DD_DIRECTDRAW_LOCAL*
    lp_dds_lcl : DD_SURFACE_LOCAL*
    dd_r_val : HRESULT
  end
  struct DD_GETDRIVERSTATEDATA
    dw_flags : UInt32
    anonymous : DD_GETDRIVERSTATEDATA_Anonymous_e__Union
    lpdw_states : UInt32*
    dw_length : UInt32
    dd_r_val : HRESULT
  end
  struct DD_DESTROYDDLOCALDATA
    dw_flags : UInt32
    p_dd_lcl : DD_DIRECTDRAW_LOCAL*
    dd_r_val : HRESULT
  end
  struct MDL
    mdl_next : MDL*
    mdl_size : Int16
    mdl_flags : Int16
    process : MDL_EPROCESS*
    lp_mapped_system_va : UInt32*
    lp_start_va : UInt32*
    byte_count : UInt32
    byte_offset : UInt32
  end
  struct DDSURFACEDATA
    dds_caps : UInt32
    dw_surface_offset : UInt32
    fp_lock_ptr : LibC::UINT_PTR
    dw_width : UInt32
    dw_height : UInt32
    l_pitch : Int32
    dw_overlay_flags : UInt32
    dw_overlay_offset : UInt32
    dw_overlay_src_width : UInt32
    dw_overlay_src_height : UInt32
    dw_overlay_dest_width : UInt32
    dw_overlay_dest_height : UInt32
    dw_video_port_id : UInt32
    dw_format_flags : UInt32
    dw_format_four_cc : UInt32
    dw_format_bit_count : UInt32
    dw_r_bit_mask : UInt32
    dw_g_bit_mask : UInt32
    dw_b_bit_mask : UInt32
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
    dw_driver_reserved4 : UInt32
  end
  struct DDVIDEOPORTDATA
    dw_video_port_id : UInt32
    dw_vp_flags : UInt32
    dw_origin_offset : UInt32
    dw_height : UInt32
    dw_vbi_height : UInt32
    dw_driver_reserved1 : UInt32
    dw_driver_reserved2 : UInt32
    dw_driver_reserved3 : UInt32
  end
  struct DX_IRQDATA
    dw_irq_flags : UInt32
  end
  struct DDGETIRQINFO
    dw_flags : UInt32
  end
  struct DDENABLEIRQINFO
    dw_irq_sources : UInt32
    dw_line : UInt32
    irq_callback : PDX_IRQCALLBACK
    lp_irq_data : DX_IRQDATA*
  end
  struct DDSKIPNEXTFIELDINFO
    lp_video_port_data : DDVIDEOPORTDATA*
    dw_skip_flags : UInt32
  end
  struct DDBOBNEXTFIELDINFO
    lp_surface : DDSURFACEDATA*
  end
  struct DDSETSTATEININFO
    lp_surface_data : DDSURFACEDATA*
    lp_video_port_data : DDVIDEOPORTDATA*
  end
  struct DDSETSTATEOUTINFO
    b_software_autoflip : LibC::BOOL
    dw_surface_index : UInt32
    dw_vbi_surface_index : UInt32
  end
  struct DDLOCKININFO
    lp_surface_data : DDSURFACEDATA*
  end
  struct DDLOCKOUTINFO
    dw_surface_ptr : LibC::UINT_PTR
  end
  struct DDFLIPOVERLAYINFO
    lp_current_surface : DDSURFACEDATA*
    lp_target_surface : DDSURFACEDATA*
    dw_flags : UInt32
  end
  struct DDFLIPVIDEOPORTINFO
    lp_video_port_data : DDVIDEOPORTDATA*
    lp_current_surface : DDSURFACEDATA*
    lp_target_surface : DDSURFACEDATA*
    dw_flip_vp_flags : UInt32
  end
  struct DDGETPOLARITYININFO
    lp_video_port_data : DDVIDEOPORTDATA*
  end
  struct DDGETPOLARITYOUTINFO
    b_polarity : UInt32
  end
  struct DDGETCURRENTAUTOFLIPININFO
    lp_video_port_data : DDVIDEOPORTDATA*
  end
  struct DDGETCURRENTAUTOFLIPOUTINFO
    dw_surface_index : UInt32
    dw_vbi_surface_index : UInt32
  end
  struct DDGETPREVIOUSAUTOFLIPININFO
    lp_video_port_data : DDVIDEOPORTDATA*
  end
  struct DDGETPREVIOUSAUTOFLIPOUTINFO
    dw_surface_index : UInt32
    dw_vbi_surface_index : UInt32
  end
  struct DDTRANSFERININFO
    lp_surface_data : DDSURFACEDATA*
    dw_start_line : UInt32
    dw_end_line : UInt32
    dw_transfer_id : LibC::UINT_PTR
    dw_transfer_flags : UInt32
    lp_dest_mdl : MDL*
  end
  struct DDTRANSFEROUTINFO
    dw_buffer_polarity : UInt32
  end
  struct DDGETTRANSFERSTATUSOUTINFO
    dw_transfer_id : LibC::UINT_PTR
  end
  struct DXAPI_INTERFACE
    size : UInt16
    version : UInt16
    context : Void*
    interface_reference : Void*
    interface_dereference : Void*
    dx_get_irq_info : PDX_GETIRQINFO
    dx_enable_irq : PDX_ENABLEIRQ
    dx_skip_next_field : PDX_SKIPNEXTFIELD
    dx_bob_next_field : PDX_BOBNEXTFIELD
    dx_set_state : PDX_SETSTATE
    dx_lock : PDX_LOCK
    dx_flip_overlay : PDX_FLIPOVERLAY
    dx_flip_video_port : PDX_FLIPVIDEOPORT
    dx_get_polarity : PDX_GETPOLARITY
    dx_get_current_autoflip : PDX_GETCURRENTAUTOFLIP
    dx_get_previous_autoflip : PDX_GETPREVIOUSAUTOFLIP
    dx_transfer : PDX_TRANSFER
    dx_get_transfer_status : PDX_GETTRANSFERSTATUS
  end


  struct IDirectDrawVTbl
    query_interface : Proc(IDirectDraw*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDraw*, UInt32)
    release : Proc(IDirectDraw*, UInt32)
    compact : Proc(IDirectDraw*, HRESULT)
    create_clipper : Proc(IDirectDraw*, UInt32, IDirectDrawClipper*, IUnknown, HRESULT)
    create_palette : Proc(IDirectDraw*, UInt32, PALETTEENTRY*, IDirectDrawPalette*, IUnknown, HRESULT)
    create_surface : Proc(IDirectDraw*, DDSURFACEDESC*, IDirectDrawSurface*, IUnknown, HRESULT)
    duplicate_surface : Proc(IDirectDraw*, IDirectDrawSurface, IDirectDrawSurface*, HRESULT)
    enum_display_modes : Proc(IDirectDraw*, UInt32, DDSURFACEDESC*, Void*, LPDDENUMMODESCALLBACK, HRESULT)
    enum_surfaces : Proc(IDirectDraw*, UInt32, DDSURFACEDESC*, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    flip_to_gdi_surface : Proc(IDirectDraw*, HRESULT)
    get_caps : Proc(IDirectDraw*, DDCAPS_DX7*, DDCAPS_DX7*, HRESULT)
    get_display_mode : Proc(IDirectDraw*, DDSURFACEDESC*, HRESULT)
    get_four_cc_codes : Proc(IDirectDraw*, UInt32*, UInt32*, HRESULT)
    get_gdi_surface : Proc(IDirectDraw*, IDirectDrawSurface*, HRESULT)
    get_monitor_frequency : Proc(IDirectDraw*, UInt32*, HRESULT)
    get_scan_line : Proc(IDirectDraw*, UInt32*, HRESULT)
    get_vertical_blank_status : Proc(IDirectDraw*, Int32*, HRESULT)
    initialize : Proc(IDirectDraw*, Guid*, HRESULT)
    restore_display_mode : Proc(IDirectDraw*, HRESULT)
    set_cooperative_level : Proc(IDirectDraw*, LibC::HANDLE, UInt32, HRESULT)
    set_display_mode : Proc(IDirectDraw*, UInt32, UInt32, UInt32, HRESULT)
    wait_for_vertical_blank : Proc(IDirectDraw*, UInt32, LibC::HANDLE, HRESULT)
  end

  IDirectDraw_GUID = LibC::GUID.new("6c14db80-a733-11ce-a521-0020af0be560")
  CLSID_IDirectDraw = "6c14db80-a733-11ce-a521-0020af0be560"
  struct IDirectDraw
    lpVtbl : IDirectDrawVTbl*
  end

  struct IDirectDraw2VTbl
    query_interface : Proc(IDirectDraw2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDraw2*, UInt32)
    release : Proc(IDirectDraw2*, UInt32)
    compact : Proc(IDirectDraw2*, HRESULT)
    create_clipper : Proc(IDirectDraw2*, UInt32, IDirectDrawClipper*, IUnknown, HRESULT)
    create_palette : Proc(IDirectDraw2*, UInt32, PALETTEENTRY*, IDirectDrawPalette*, IUnknown, HRESULT)
    create_surface : Proc(IDirectDraw2*, DDSURFACEDESC*, IDirectDrawSurface*, IUnknown, HRESULT)
    duplicate_surface : Proc(IDirectDraw2*, IDirectDrawSurface, IDirectDrawSurface*, HRESULT)
    enum_display_modes : Proc(IDirectDraw2*, UInt32, DDSURFACEDESC*, Void*, LPDDENUMMODESCALLBACK, HRESULT)
    enum_surfaces : Proc(IDirectDraw2*, UInt32, DDSURFACEDESC*, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    flip_to_gdi_surface : Proc(IDirectDraw2*, HRESULT)
    get_caps : Proc(IDirectDraw2*, DDCAPS_DX7*, DDCAPS_DX7*, HRESULT)
    get_display_mode : Proc(IDirectDraw2*, DDSURFACEDESC*, HRESULT)
    get_four_cc_codes : Proc(IDirectDraw2*, UInt32*, UInt32*, HRESULT)
    get_gdi_surface : Proc(IDirectDraw2*, IDirectDrawSurface*, HRESULT)
    get_monitor_frequency : Proc(IDirectDraw2*, UInt32*, HRESULT)
    get_scan_line : Proc(IDirectDraw2*, UInt32*, HRESULT)
    get_vertical_blank_status : Proc(IDirectDraw2*, Int32*, HRESULT)
    initialize : Proc(IDirectDraw2*, Guid*, HRESULT)
    restore_display_mode : Proc(IDirectDraw2*, HRESULT)
    set_cooperative_level : Proc(IDirectDraw2*, LibC::HANDLE, UInt32, HRESULT)
    set_display_mode : Proc(IDirectDraw2*, UInt32, UInt32, UInt32, UInt32, UInt32, HRESULT)
    wait_for_vertical_blank : Proc(IDirectDraw2*, UInt32, LibC::HANDLE, HRESULT)
    get_available_vid_mem : Proc(IDirectDraw2*, DDSCAPS*, UInt32*, UInt32*, HRESULT)
  end

  IDirectDraw2_GUID = LibC::GUID.new("b3a6f3e0-2b43-11cf-a2de-00aa00b93356")
  CLSID_IDirectDraw2 = "b3a6f3e0-2b43-11cf-a2de-00aa00b93356"
  struct IDirectDraw2
    lpVtbl : IDirectDraw2VTbl*
  end

  struct IDirectDraw4VTbl
    query_interface : Proc(IDirectDraw4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDraw4*, UInt32)
    release : Proc(IDirectDraw4*, UInt32)
    compact : Proc(IDirectDraw4*, HRESULT)
    create_clipper : Proc(IDirectDraw4*, UInt32, IDirectDrawClipper*, IUnknown, HRESULT)
    create_palette : Proc(IDirectDraw4*, UInt32, PALETTEENTRY*, IDirectDrawPalette*, IUnknown, HRESULT)
    create_surface : Proc(IDirectDraw4*, DDSURFACEDESC2*, IDirectDrawSurface4*, IUnknown, HRESULT)
    duplicate_surface : Proc(IDirectDraw4*, IDirectDrawSurface4, IDirectDrawSurface4*, HRESULT)
    enum_display_modes : Proc(IDirectDraw4*, UInt32, DDSURFACEDESC2*, Void*, LPDDENUMMODESCALLBACK2, HRESULT)
    enum_surfaces : Proc(IDirectDraw4*, UInt32, DDSURFACEDESC2*, Void*, LPDDENUMSURFACESCALLBACK2, HRESULT)
    flip_to_gdi_surface : Proc(IDirectDraw4*, HRESULT)
    get_caps : Proc(IDirectDraw4*, DDCAPS_DX7*, DDCAPS_DX7*, HRESULT)
    get_display_mode : Proc(IDirectDraw4*, DDSURFACEDESC2*, HRESULT)
    get_four_cc_codes : Proc(IDirectDraw4*, UInt32*, UInt32*, HRESULT)
    get_gdi_surface : Proc(IDirectDraw4*, IDirectDrawSurface4*, HRESULT)
    get_monitor_frequency : Proc(IDirectDraw4*, UInt32*, HRESULT)
    get_scan_line : Proc(IDirectDraw4*, UInt32*, HRESULT)
    get_vertical_blank_status : Proc(IDirectDraw4*, Int32*, HRESULT)
    initialize : Proc(IDirectDraw4*, Guid*, HRESULT)
    restore_display_mode : Proc(IDirectDraw4*, HRESULT)
    set_cooperative_level : Proc(IDirectDraw4*, LibC::HANDLE, UInt32, HRESULT)
    set_display_mode : Proc(IDirectDraw4*, UInt32, UInt32, UInt32, UInt32, UInt32, HRESULT)
    wait_for_vertical_blank : Proc(IDirectDraw4*, UInt32, LibC::HANDLE, HRESULT)
    get_available_vid_mem : Proc(IDirectDraw4*, DDSCAPS2*, UInt32*, UInt32*, HRESULT)
    get_surface_from_dc : Proc(IDirectDraw4*, HDC, IDirectDrawSurface4*, HRESULT)
    restore_all_surfaces : Proc(IDirectDraw4*, HRESULT)
    test_cooperative_level : Proc(IDirectDraw4*, HRESULT)
    get_device_identifier : Proc(IDirectDraw4*, DDDEVICEIDENTIFIER*, UInt32, HRESULT)
  end

  IDirectDraw4_GUID = LibC::GUID.new("9c59509a-39bd-11d1-8c4a-00c04fd930c5")
  CLSID_IDirectDraw4 = "9c59509a-39bd-11d1-8c4a-00c04fd930c5"
  struct IDirectDraw4
    lpVtbl : IDirectDraw4VTbl*
  end

  struct IDirectDraw7VTbl
    query_interface : Proc(IDirectDraw7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDraw7*, UInt32)
    release : Proc(IDirectDraw7*, UInt32)
    compact : Proc(IDirectDraw7*, HRESULT)
    create_clipper : Proc(IDirectDraw7*, UInt32, IDirectDrawClipper*, IUnknown, HRESULT)
    create_palette : Proc(IDirectDraw7*, UInt32, PALETTEENTRY*, IDirectDrawPalette*, IUnknown, HRESULT)
    create_surface : Proc(IDirectDraw7*, DDSURFACEDESC2*, IDirectDrawSurface7*, IUnknown, HRESULT)
    duplicate_surface : Proc(IDirectDraw7*, IDirectDrawSurface7, IDirectDrawSurface7*, HRESULT)
    enum_display_modes : Proc(IDirectDraw7*, UInt32, DDSURFACEDESC2*, Void*, LPDDENUMMODESCALLBACK2, HRESULT)
    enum_surfaces : Proc(IDirectDraw7*, UInt32, DDSURFACEDESC2*, Void*, LPDDENUMSURFACESCALLBACK7, HRESULT)
    flip_to_gdi_surface : Proc(IDirectDraw7*, HRESULT)
    get_caps : Proc(IDirectDraw7*, DDCAPS_DX7*, DDCAPS_DX7*, HRESULT)
    get_display_mode : Proc(IDirectDraw7*, DDSURFACEDESC2*, HRESULT)
    get_four_cc_codes : Proc(IDirectDraw7*, UInt32*, UInt32*, HRESULT)
    get_gdi_surface : Proc(IDirectDraw7*, IDirectDrawSurface7*, HRESULT)
    get_monitor_frequency : Proc(IDirectDraw7*, UInt32*, HRESULT)
    get_scan_line : Proc(IDirectDraw7*, UInt32*, HRESULT)
    get_vertical_blank_status : Proc(IDirectDraw7*, Int32*, HRESULT)
    initialize : Proc(IDirectDraw7*, Guid*, HRESULT)
    restore_display_mode : Proc(IDirectDraw7*, HRESULT)
    set_cooperative_level : Proc(IDirectDraw7*, LibC::HANDLE, UInt32, HRESULT)
    set_display_mode : Proc(IDirectDraw7*, UInt32, UInt32, UInt32, UInt32, UInt32, HRESULT)
    wait_for_vertical_blank : Proc(IDirectDraw7*, UInt32, LibC::HANDLE, HRESULT)
    get_available_vid_mem : Proc(IDirectDraw7*, DDSCAPS2*, UInt32*, UInt32*, HRESULT)
    get_surface_from_dc : Proc(IDirectDraw7*, HDC, IDirectDrawSurface7*, HRESULT)
    restore_all_surfaces : Proc(IDirectDraw7*, HRESULT)
    test_cooperative_level : Proc(IDirectDraw7*, HRESULT)
    get_device_identifier : Proc(IDirectDraw7*, DDDEVICEIDENTIFIER2*, UInt32, HRESULT)
    start_mode_test : Proc(IDirectDraw7*, SIZE*, UInt32, UInt32, HRESULT)
    evaluate_mode : Proc(IDirectDraw7*, UInt32, UInt32*, HRESULT)
  end

  IDirectDraw7_GUID = LibC::GUID.new("15e65ec0-3b9c-11d2-b92f-00609797ea5b")
  CLSID_IDirectDraw7 = "15e65ec0-3b9c-11d2-b92f-00609797ea5b"
  struct IDirectDraw7
    lpVtbl : IDirectDraw7VTbl*
  end

  struct IDirectDrawPaletteVTbl
    query_interface : Proc(IDirectDrawPalette*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawPalette*, UInt32)
    release : Proc(IDirectDrawPalette*, UInt32)
    get_caps : Proc(IDirectDrawPalette*, UInt32*, HRESULT)
    get_entries : Proc(IDirectDrawPalette*, UInt32, UInt32, UInt32, PALETTEENTRY*, HRESULT)
    initialize : Proc(IDirectDrawPalette*, IDirectDraw, UInt32, PALETTEENTRY*, HRESULT)
    set_entries : Proc(IDirectDrawPalette*, UInt32, UInt32, UInt32, PALETTEENTRY*, HRESULT)
  end

  IDirectDrawPalette_GUID = LibC::GUID.new("6c14db84-a733-11ce-a521-0020af0be560")
  CLSID_IDirectDrawPalette = "6c14db84-a733-11ce-a521-0020af0be560"
  struct IDirectDrawPalette
    lpVtbl : IDirectDrawPaletteVTbl*
  end

  struct IDirectDrawClipperVTbl
    query_interface : Proc(IDirectDrawClipper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawClipper*, UInt32)
    release : Proc(IDirectDrawClipper*, UInt32)
    get_clip_list : Proc(IDirectDrawClipper*, RECT*, RGNDATA*, UInt32*, HRESULT)
    get_h_wnd : Proc(IDirectDrawClipper*, HANDLE*, HRESULT)
    initialize : Proc(IDirectDrawClipper*, IDirectDraw, UInt32, HRESULT)
    is_clip_list_changed : Proc(IDirectDrawClipper*, LibC::BOOL*, HRESULT)
    set_clip_list : Proc(IDirectDrawClipper*, RGNDATA*, UInt32, HRESULT)
    set_h_wnd : Proc(IDirectDrawClipper*, UInt32, LibC::HANDLE, HRESULT)
  end

  IDirectDrawClipper_GUID = LibC::GUID.new("6c14db85-a733-11ce-a521-0020af0be560")
  CLSID_IDirectDrawClipper = "6c14db85-a733-11ce-a521-0020af0be560"
  struct IDirectDrawClipper
    lpVtbl : IDirectDrawClipperVTbl*
  end

  struct IDirectDrawSurfaceVTbl
    query_interface : Proc(IDirectDrawSurface*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurface*, UInt32)
    release : Proc(IDirectDrawSurface*, UInt32)
    add_attached_surface : Proc(IDirectDrawSurface*, IDirectDrawSurface, HRESULT)
    add_overlay_dirty_rect : Proc(IDirectDrawSurface*, RECT*, HRESULT)
    blt : Proc(IDirectDrawSurface*, RECT*, IDirectDrawSurface, RECT*, UInt32, DDBLTFX*, HRESULT)
    blt_batch : Proc(IDirectDrawSurface*, DDBLTBATCH*, UInt32, UInt32, HRESULT)
    blt_fast : Proc(IDirectDrawSurface*, UInt32, UInt32, IDirectDrawSurface, RECT*, UInt32, HRESULT)
    delete_attached_surface : Proc(IDirectDrawSurface*, UInt32, IDirectDrawSurface, HRESULT)
    enum_attached_surfaces : Proc(IDirectDrawSurface*, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    enum_overlay_z_orders : Proc(IDirectDrawSurface*, UInt32, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    flip : Proc(IDirectDrawSurface*, IDirectDrawSurface, UInt32, HRESULT)
    get_attached_surface : Proc(IDirectDrawSurface*, DDSCAPS*, IDirectDrawSurface*, HRESULT)
    get_blt_status : Proc(IDirectDrawSurface*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawSurface*, DDSCAPS*, HRESULT)
    get_clipper : Proc(IDirectDrawSurface*, IDirectDrawClipper*, HRESULT)
    get_color_key : Proc(IDirectDrawSurface*, UInt32, DDCOLORKEY*, HRESULT)
    get_dc : Proc(IDirectDrawSurface*, HDC*, HRESULT)
    get_flip_status : Proc(IDirectDrawSurface*, UInt32, HRESULT)
    get_overlay_position : Proc(IDirectDrawSurface*, Int32*, Int32*, HRESULT)
    get_palette : Proc(IDirectDrawSurface*, IDirectDrawPalette*, HRESULT)
    get_pixel_format : Proc(IDirectDrawSurface*, DDPIXELFORMAT*, HRESULT)
    get_surface_desc : Proc(IDirectDrawSurface*, DDSURFACEDESC*, HRESULT)
    initialize : Proc(IDirectDrawSurface*, IDirectDraw, DDSURFACEDESC*, HRESULT)
    is_lost : Proc(IDirectDrawSurface*, HRESULT)
    lock : Proc(IDirectDrawSurface*, RECT*, DDSURFACEDESC*, UInt32, LibC::HANDLE, HRESULT)
    release_dc : Proc(IDirectDrawSurface*, HDC, HRESULT)
    restore : Proc(IDirectDrawSurface*, HRESULT)
    set_clipper : Proc(IDirectDrawSurface*, IDirectDrawClipper, HRESULT)
    set_color_key : Proc(IDirectDrawSurface*, UInt32, DDCOLORKEY*, HRESULT)
    set_overlay_position : Proc(IDirectDrawSurface*, Int32, Int32, HRESULT)
    set_palette : Proc(IDirectDrawSurface*, IDirectDrawPalette, HRESULT)
    unlock : Proc(IDirectDrawSurface*, Void*, HRESULT)
    update_overlay : Proc(IDirectDrawSurface*, RECT*, IDirectDrawSurface, RECT*, UInt32, DDOVERLAYFX*, HRESULT)
    update_overlay_display : Proc(IDirectDrawSurface*, UInt32, HRESULT)
    update_overlay_z_order : Proc(IDirectDrawSurface*, UInt32, IDirectDrawSurface, HRESULT)
  end

  IDirectDrawSurface_GUID = LibC::GUID.new("6c14db81-a733-11ce-a521-0020af0be560")
  CLSID_IDirectDrawSurface = "6c14db81-a733-11ce-a521-0020af0be560"
  struct IDirectDrawSurface
    lpVtbl : IDirectDrawSurfaceVTbl*
  end

  struct IDirectDrawSurface2VTbl
    query_interface : Proc(IDirectDrawSurface2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurface2*, UInt32)
    release : Proc(IDirectDrawSurface2*, UInt32)
    add_attached_surface : Proc(IDirectDrawSurface2*, IDirectDrawSurface2, HRESULT)
    add_overlay_dirty_rect : Proc(IDirectDrawSurface2*, RECT*, HRESULT)
    blt : Proc(IDirectDrawSurface2*, RECT*, IDirectDrawSurface2, RECT*, UInt32, DDBLTFX*, HRESULT)
    blt_batch : Proc(IDirectDrawSurface2*, DDBLTBATCH*, UInt32, UInt32, HRESULT)
    blt_fast : Proc(IDirectDrawSurface2*, UInt32, UInt32, IDirectDrawSurface2, RECT*, UInt32, HRESULT)
    delete_attached_surface : Proc(IDirectDrawSurface2*, UInt32, IDirectDrawSurface2, HRESULT)
    enum_attached_surfaces : Proc(IDirectDrawSurface2*, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    enum_overlay_z_orders : Proc(IDirectDrawSurface2*, UInt32, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    flip : Proc(IDirectDrawSurface2*, IDirectDrawSurface2, UInt32, HRESULT)
    get_attached_surface : Proc(IDirectDrawSurface2*, DDSCAPS*, IDirectDrawSurface2*, HRESULT)
    get_blt_status : Proc(IDirectDrawSurface2*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawSurface2*, DDSCAPS*, HRESULT)
    get_clipper : Proc(IDirectDrawSurface2*, IDirectDrawClipper*, HRESULT)
    get_color_key : Proc(IDirectDrawSurface2*, UInt32, DDCOLORKEY*, HRESULT)
    get_dc : Proc(IDirectDrawSurface2*, HDC*, HRESULT)
    get_flip_status : Proc(IDirectDrawSurface2*, UInt32, HRESULT)
    get_overlay_position : Proc(IDirectDrawSurface2*, Int32*, Int32*, HRESULT)
    get_palette : Proc(IDirectDrawSurface2*, IDirectDrawPalette*, HRESULT)
    get_pixel_format : Proc(IDirectDrawSurface2*, DDPIXELFORMAT*, HRESULT)
    get_surface_desc : Proc(IDirectDrawSurface2*, DDSURFACEDESC*, HRESULT)
    initialize : Proc(IDirectDrawSurface2*, IDirectDraw, DDSURFACEDESC*, HRESULT)
    is_lost : Proc(IDirectDrawSurface2*, HRESULT)
    lock : Proc(IDirectDrawSurface2*, RECT*, DDSURFACEDESC*, UInt32, LibC::HANDLE, HRESULT)
    release_dc : Proc(IDirectDrawSurface2*, HDC, HRESULT)
    restore : Proc(IDirectDrawSurface2*, HRESULT)
    set_clipper : Proc(IDirectDrawSurface2*, IDirectDrawClipper, HRESULT)
    set_color_key : Proc(IDirectDrawSurface2*, UInt32, DDCOLORKEY*, HRESULT)
    set_overlay_position : Proc(IDirectDrawSurface2*, Int32, Int32, HRESULT)
    set_palette : Proc(IDirectDrawSurface2*, IDirectDrawPalette, HRESULT)
    unlock : Proc(IDirectDrawSurface2*, Void*, HRESULT)
    update_overlay : Proc(IDirectDrawSurface2*, RECT*, IDirectDrawSurface2, RECT*, UInt32, DDOVERLAYFX*, HRESULT)
    update_overlay_display : Proc(IDirectDrawSurface2*, UInt32, HRESULT)
    update_overlay_z_order : Proc(IDirectDrawSurface2*, UInt32, IDirectDrawSurface2, HRESULT)
    get_dd_interface : Proc(IDirectDrawSurface2*, Void**, HRESULT)
    page_lock : Proc(IDirectDrawSurface2*, UInt32, HRESULT)
    page_unlock : Proc(IDirectDrawSurface2*, UInt32, HRESULT)
  end

  IDirectDrawSurface2_GUID = LibC::GUID.new("57805885-6eec-11cf-9441-a82303c10e27")
  CLSID_IDirectDrawSurface2 = "57805885-6eec-11cf-9441-a82303c10e27"
  struct IDirectDrawSurface2
    lpVtbl : IDirectDrawSurface2VTbl*
  end

  struct IDirectDrawSurface3VTbl
    query_interface : Proc(IDirectDrawSurface3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurface3*, UInt32)
    release : Proc(IDirectDrawSurface3*, UInt32)
    add_attached_surface : Proc(IDirectDrawSurface3*, IDirectDrawSurface3, HRESULT)
    add_overlay_dirty_rect : Proc(IDirectDrawSurface3*, RECT*, HRESULT)
    blt : Proc(IDirectDrawSurface3*, RECT*, IDirectDrawSurface3, RECT*, UInt32, DDBLTFX*, HRESULT)
    blt_batch : Proc(IDirectDrawSurface3*, DDBLTBATCH*, UInt32, UInt32, HRESULT)
    blt_fast : Proc(IDirectDrawSurface3*, UInt32, UInt32, IDirectDrawSurface3, RECT*, UInt32, HRESULT)
    delete_attached_surface : Proc(IDirectDrawSurface3*, UInt32, IDirectDrawSurface3, HRESULT)
    enum_attached_surfaces : Proc(IDirectDrawSurface3*, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    enum_overlay_z_orders : Proc(IDirectDrawSurface3*, UInt32, Void*, LPDDENUMSURFACESCALLBACK, HRESULT)
    flip : Proc(IDirectDrawSurface3*, IDirectDrawSurface3, UInt32, HRESULT)
    get_attached_surface : Proc(IDirectDrawSurface3*, DDSCAPS*, IDirectDrawSurface3*, HRESULT)
    get_blt_status : Proc(IDirectDrawSurface3*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawSurface3*, DDSCAPS*, HRESULT)
    get_clipper : Proc(IDirectDrawSurface3*, IDirectDrawClipper*, HRESULT)
    get_color_key : Proc(IDirectDrawSurface3*, UInt32, DDCOLORKEY*, HRESULT)
    get_dc : Proc(IDirectDrawSurface3*, HDC*, HRESULT)
    get_flip_status : Proc(IDirectDrawSurface3*, UInt32, HRESULT)
    get_overlay_position : Proc(IDirectDrawSurface3*, Int32*, Int32*, HRESULT)
    get_palette : Proc(IDirectDrawSurface3*, IDirectDrawPalette*, HRESULT)
    get_pixel_format : Proc(IDirectDrawSurface3*, DDPIXELFORMAT*, HRESULT)
    get_surface_desc : Proc(IDirectDrawSurface3*, DDSURFACEDESC*, HRESULT)
    initialize : Proc(IDirectDrawSurface3*, IDirectDraw, DDSURFACEDESC*, HRESULT)
    is_lost : Proc(IDirectDrawSurface3*, HRESULT)
    lock : Proc(IDirectDrawSurface3*, RECT*, DDSURFACEDESC*, UInt32, LibC::HANDLE, HRESULT)
    release_dc : Proc(IDirectDrawSurface3*, HDC, HRESULT)
    restore : Proc(IDirectDrawSurface3*, HRESULT)
    set_clipper : Proc(IDirectDrawSurface3*, IDirectDrawClipper, HRESULT)
    set_color_key : Proc(IDirectDrawSurface3*, UInt32, DDCOLORKEY*, HRESULT)
    set_overlay_position : Proc(IDirectDrawSurface3*, Int32, Int32, HRESULT)
    set_palette : Proc(IDirectDrawSurface3*, IDirectDrawPalette, HRESULT)
    unlock : Proc(IDirectDrawSurface3*, Void*, HRESULT)
    update_overlay : Proc(IDirectDrawSurface3*, RECT*, IDirectDrawSurface3, RECT*, UInt32, DDOVERLAYFX*, HRESULT)
    update_overlay_display : Proc(IDirectDrawSurface3*, UInt32, HRESULT)
    update_overlay_z_order : Proc(IDirectDrawSurface3*, UInt32, IDirectDrawSurface3, HRESULT)
    get_dd_interface : Proc(IDirectDrawSurface3*, Void**, HRESULT)
    page_lock : Proc(IDirectDrawSurface3*, UInt32, HRESULT)
    page_unlock : Proc(IDirectDrawSurface3*, UInt32, HRESULT)
    set_surface_desc : Proc(IDirectDrawSurface3*, DDSURFACEDESC*, UInt32, HRESULT)
  end

  IDirectDrawSurface3_GUID = LibC::GUID.new("da044e00-69b2-11d0-a1d5-00aa00b8dfbb")
  CLSID_IDirectDrawSurface3 = "da044e00-69b2-11d0-a1d5-00aa00b8dfbb"
  struct IDirectDrawSurface3
    lpVtbl : IDirectDrawSurface3VTbl*
  end

  struct IDirectDrawSurface4VTbl
    query_interface : Proc(IDirectDrawSurface4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurface4*, UInt32)
    release : Proc(IDirectDrawSurface4*, UInt32)
    add_attached_surface : Proc(IDirectDrawSurface4*, IDirectDrawSurface4, HRESULT)
    add_overlay_dirty_rect : Proc(IDirectDrawSurface4*, RECT*, HRESULT)
    blt : Proc(IDirectDrawSurface4*, RECT*, IDirectDrawSurface4, RECT*, UInt32, DDBLTFX*, HRESULT)
    blt_batch : Proc(IDirectDrawSurface4*, DDBLTBATCH*, UInt32, UInt32, HRESULT)
    blt_fast : Proc(IDirectDrawSurface4*, UInt32, UInt32, IDirectDrawSurface4, RECT*, UInt32, HRESULT)
    delete_attached_surface : Proc(IDirectDrawSurface4*, UInt32, IDirectDrawSurface4, HRESULT)
    enum_attached_surfaces : Proc(IDirectDrawSurface4*, Void*, LPDDENUMSURFACESCALLBACK2, HRESULT)
    enum_overlay_z_orders : Proc(IDirectDrawSurface4*, UInt32, Void*, LPDDENUMSURFACESCALLBACK2, HRESULT)
    flip : Proc(IDirectDrawSurface4*, IDirectDrawSurface4, UInt32, HRESULT)
    get_attached_surface : Proc(IDirectDrawSurface4*, DDSCAPS2*, IDirectDrawSurface4*, HRESULT)
    get_blt_status : Proc(IDirectDrawSurface4*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawSurface4*, DDSCAPS2*, HRESULT)
    get_clipper : Proc(IDirectDrawSurface4*, IDirectDrawClipper*, HRESULT)
    get_color_key : Proc(IDirectDrawSurface4*, UInt32, DDCOLORKEY*, HRESULT)
    get_dc : Proc(IDirectDrawSurface4*, HDC*, HRESULT)
    get_flip_status : Proc(IDirectDrawSurface4*, UInt32, HRESULT)
    get_overlay_position : Proc(IDirectDrawSurface4*, Int32*, Int32*, HRESULT)
    get_palette : Proc(IDirectDrawSurface4*, IDirectDrawPalette*, HRESULT)
    get_pixel_format : Proc(IDirectDrawSurface4*, DDPIXELFORMAT*, HRESULT)
    get_surface_desc : Proc(IDirectDrawSurface4*, DDSURFACEDESC2*, HRESULT)
    initialize : Proc(IDirectDrawSurface4*, IDirectDraw, DDSURFACEDESC2*, HRESULT)
    is_lost : Proc(IDirectDrawSurface4*, HRESULT)
    lock : Proc(IDirectDrawSurface4*, RECT*, DDSURFACEDESC2*, UInt32, LibC::HANDLE, HRESULT)
    release_dc : Proc(IDirectDrawSurface4*, HDC, HRESULT)
    restore : Proc(IDirectDrawSurface4*, HRESULT)
    set_clipper : Proc(IDirectDrawSurface4*, IDirectDrawClipper, HRESULT)
    set_color_key : Proc(IDirectDrawSurface4*, UInt32, DDCOLORKEY*, HRESULT)
    set_overlay_position : Proc(IDirectDrawSurface4*, Int32, Int32, HRESULT)
    set_palette : Proc(IDirectDrawSurface4*, IDirectDrawPalette, HRESULT)
    unlock : Proc(IDirectDrawSurface4*, RECT*, HRESULT)
    update_overlay : Proc(IDirectDrawSurface4*, RECT*, IDirectDrawSurface4, RECT*, UInt32, DDOVERLAYFX*, HRESULT)
    update_overlay_display : Proc(IDirectDrawSurface4*, UInt32, HRESULT)
    update_overlay_z_order : Proc(IDirectDrawSurface4*, UInt32, IDirectDrawSurface4, HRESULT)
    get_dd_interface : Proc(IDirectDrawSurface4*, Void**, HRESULT)
    page_lock : Proc(IDirectDrawSurface4*, UInt32, HRESULT)
    page_unlock : Proc(IDirectDrawSurface4*, UInt32, HRESULT)
    set_surface_desc : Proc(IDirectDrawSurface4*, DDSURFACEDESC2*, UInt32, HRESULT)
    set_private_data : Proc(IDirectDrawSurface4*, Guid*, Void*, UInt32, UInt32, HRESULT)
    get_private_data : Proc(IDirectDrawSurface4*, Guid*, Void*, UInt32*, HRESULT)
    free_private_data : Proc(IDirectDrawSurface4*, Guid*, HRESULT)
    get_uniqueness_value : Proc(IDirectDrawSurface4*, UInt32*, HRESULT)
    change_uniqueness_value : Proc(IDirectDrawSurface4*, HRESULT)
  end

  IDirectDrawSurface4_GUID = LibC::GUID.new("0b2b8630-ad35-11d0-8ea6-00609797ea5b")
  CLSID_IDirectDrawSurface4 = "0b2b8630-ad35-11d0-8ea6-00609797ea5b"
  struct IDirectDrawSurface4
    lpVtbl : IDirectDrawSurface4VTbl*
  end

  struct IDirectDrawSurface7VTbl
    query_interface : Proc(IDirectDrawSurface7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurface7*, UInt32)
    release : Proc(IDirectDrawSurface7*, UInt32)
    add_attached_surface : Proc(IDirectDrawSurface7*, IDirectDrawSurface7, HRESULT)
    add_overlay_dirty_rect : Proc(IDirectDrawSurface7*, RECT*, HRESULT)
    blt : Proc(IDirectDrawSurface7*, RECT*, IDirectDrawSurface7, RECT*, UInt32, DDBLTFX*, HRESULT)
    blt_batch : Proc(IDirectDrawSurface7*, DDBLTBATCH*, UInt32, UInt32, HRESULT)
    blt_fast : Proc(IDirectDrawSurface7*, UInt32, UInt32, IDirectDrawSurface7, RECT*, UInt32, HRESULT)
    delete_attached_surface : Proc(IDirectDrawSurface7*, UInt32, IDirectDrawSurface7, HRESULT)
    enum_attached_surfaces : Proc(IDirectDrawSurface7*, Void*, LPDDENUMSURFACESCALLBACK7, HRESULT)
    enum_overlay_z_orders : Proc(IDirectDrawSurface7*, UInt32, Void*, LPDDENUMSURFACESCALLBACK7, HRESULT)
    flip : Proc(IDirectDrawSurface7*, IDirectDrawSurface7, UInt32, HRESULT)
    get_attached_surface : Proc(IDirectDrawSurface7*, DDSCAPS2*, IDirectDrawSurface7*, HRESULT)
    get_blt_status : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawSurface7*, DDSCAPS2*, HRESULT)
    get_clipper : Proc(IDirectDrawSurface7*, IDirectDrawClipper*, HRESULT)
    get_color_key : Proc(IDirectDrawSurface7*, UInt32, DDCOLORKEY*, HRESULT)
    get_dc : Proc(IDirectDrawSurface7*, HDC*, HRESULT)
    get_flip_status : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    get_overlay_position : Proc(IDirectDrawSurface7*, Int32*, Int32*, HRESULT)
    get_palette : Proc(IDirectDrawSurface7*, IDirectDrawPalette*, HRESULT)
    get_pixel_format : Proc(IDirectDrawSurface7*, DDPIXELFORMAT*, HRESULT)
    get_surface_desc : Proc(IDirectDrawSurface7*, DDSURFACEDESC2*, HRESULT)
    initialize : Proc(IDirectDrawSurface7*, IDirectDraw, DDSURFACEDESC2*, HRESULT)
    is_lost : Proc(IDirectDrawSurface7*, HRESULT)
    lock : Proc(IDirectDrawSurface7*, RECT*, DDSURFACEDESC2*, UInt32, LibC::HANDLE, HRESULT)
    release_dc : Proc(IDirectDrawSurface7*, HDC, HRESULT)
    restore : Proc(IDirectDrawSurface7*, HRESULT)
    set_clipper : Proc(IDirectDrawSurface7*, IDirectDrawClipper, HRESULT)
    set_color_key : Proc(IDirectDrawSurface7*, UInt32, DDCOLORKEY*, HRESULT)
    set_overlay_position : Proc(IDirectDrawSurface7*, Int32, Int32, HRESULT)
    set_palette : Proc(IDirectDrawSurface7*, IDirectDrawPalette, HRESULT)
    unlock : Proc(IDirectDrawSurface7*, RECT*, HRESULT)
    update_overlay : Proc(IDirectDrawSurface7*, RECT*, IDirectDrawSurface7, RECT*, UInt32, DDOVERLAYFX*, HRESULT)
    update_overlay_display : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    update_overlay_z_order : Proc(IDirectDrawSurface7*, UInt32, IDirectDrawSurface7, HRESULT)
    get_dd_interface : Proc(IDirectDrawSurface7*, Void**, HRESULT)
    page_lock : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    page_unlock : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    set_surface_desc : Proc(IDirectDrawSurface7*, DDSURFACEDESC2*, UInt32, HRESULT)
    set_private_data : Proc(IDirectDrawSurface7*, Guid*, Void*, UInt32, UInt32, HRESULT)
    get_private_data : Proc(IDirectDrawSurface7*, Guid*, Void*, UInt32*, HRESULT)
    free_private_data : Proc(IDirectDrawSurface7*, Guid*, HRESULT)
    get_uniqueness_value : Proc(IDirectDrawSurface7*, UInt32*, HRESULT)
    change_uniqueness_value : Proc(IDirectDrawSurface7*, HRESULT)
    set_priority : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    get_priority : Proc(IDirectDrawSurface7*, UInt32*, HRESULT)
    set_lod : Proc(IDirectDrawSurface7*, UInt32, HRESULT)
    get_lod : Proc(IDirectDrawSurface7*, UInt32*, HRESULT)
  end

  IDirectDrawSurface7_GUID = LibC::GUID.new("06675a80-3b9b-11d2-b92f-00609797ea5b")
  CLSID_IDirectDrawSurface7 = "06675a80-3b9b-11d2-b92f-00609797ea5b"
  struct IDirectDrawSurface7
    lpVtbl : IDirectDrawSurface7VTbl*
  end

  struct IDirectDrawColorControlVTbl
    query_interface : Proc(IDirectDrawColorControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawColorControl*, UInt32)
    release : Proc(IDirectDrawColorControl*, UInt32)
    get_color_controls : Proc(IDirectDrawColorControl*, DDCOLORCONTROL*, HRESULT)
    set_color_controls : Proc(IDirectDrawColorControl*, DDCOLORCONTROL*, HRESULT)
  end

  IDirectDrawColorControl_GUID = LibC::GUID.new("4b9f0ee0-0d7e-11d0-9b06-00a0c903a3b8")
  CLSID_IDirectDrawColorControl = "4b9f0ee0-0d7e-11d0-9b06-00a0c903a3b8"
  struct IDirectDrawColorControl
    lpVtbl : IDirectDrawColorControlVTbl*
  end

  struct IDirectDrawGammaControlVTbl
    query_interface : Proc(IDirectDrawGammaControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawGammaControl*, UInt32)
    release : Proc(IDirectDrawGammaControl*, UInt32)
    get_gamma_ramp : Proc(IDirectDrawGammaControl*, UInt32, DDGAMMARAMP*, HRESULT)
    set_gamma_ramp : Proc(IDirectDrawGammaControl*, UInt32, DDGAMMARAMP*, HRESULT)
  end

  IDirectDrawGammaControl_GUID = LibC::GUID.new("69c11c3e-b46b-11d1-ad7a-00c04fc29b4e")
  CLSID_IDirectDrawGammaControl = "69c11c3e-b46b-11d1-ad7a-00c04fc29b4e"
  struct IDirectDrawGammaControl
    lpVtbl : IDirectDrawGammaControlVTbl*
  end

  struct IDDVideoPortContainerVTbl
    query_interface : Proc(IDDVideoPortContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDDVideoPortContainer*, UInt32)
    release : Proc(IDDVideoPortContainer*, UInt32)
    create_video_port : Proc(IDDVideoPortContainer*, UInt32, DDVIDEOPORTDESC*, IDirectDrawVideoPort*, IUnknown, HRESULT)
    enum_video_ports : Proc(IDDVideoPortContainer*, UInt32, DDVIDEOPORTCAPS*, Void*, LPDDENUMVIDEOCALLBACK, HRESULT)
    get_video_port_connect_info : Proc(IDDVideoPortContainer*, UInt32, UInt32*, DDVIDEOPORTCONNECT*, HRESULT)
    query_video_port_status : Proc(IDDVideoPortContainer*, UInt32, DDVIDEOPORTSTATUS*, HRESULT)
  end

  IDDVideoPortContainer_GUID = LibC::GUID.new("6c142760-a733-11ce-a521-0020af0be560")
  CLSID_IDDVideoPortContainer = "6c142760-a733-11ce-a521-0020af0be560"
  struct IDDVideoPortContainer
    lpVtbl : IDDVideoPortContainerVTbl*
  end

  struct IDirectDrawVideoPortVTbl
    query_interface : Proc(IDirectDrawVideoPort*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawVideoPort*, UInt32)
    release : Proc(IDirectDrawVideoPort*, UInt32)
    flip : Proc(IDirectDrawVideoPort*, IDirectDrawSurface, UInt32, HRESULT)
    get_bandwidth_info : Proc(IDirectDrawVideoPort*, DDPIXELFORMAT*, UInt32, UInt32, UInt32, DDVIDEOPORTBANDWIDTH*, HRESULT)
    get_color_controls : Proc(IDirectDrawVideoPort*, DDCOLORCONTROL*, HRESULT)
    get_input_formats : Proc(IDirectDrawVideoPort*, UInt32*, DDPIXELFORMAT*, UInt32, HRESULT)
    get_output_formats : Proc(IDirectDrawVideoPort*, DDPIXELFORMAT*, UInt32*, DDPIXELFORMAT*, UInt32, HRESULT)
    get_field_polarity : Proc(IDirectDrawVideoPort*, Int32*, HRESULT)
    get_video_line : Proc(IDirectDrawVideoPort*, UInt32*, HRESULT)
    get_video_signal_status : Proc(IDirectDrawVideoPort*, UInt32*, HRESULT)
    set_color_controls : Proc(IDirectDrawVideoPort*, DDCOLORCONTROL*, HRESULT)
    set_target_surface : Proc(IDirectDrawVideoPort*, IDirectDrawSurface, UInt32, HRESULT)
    start_video : Proc(IDirectDrawVideoPort*, DDVIDEOPORTINFO*, HRESULT)
    stop_video : Proc(IDirectDrawVideoPort*, HRESULT)
    update_video : Proc(IDirectDrawVideoPort*, DDVIDEOPORTINFO*, HRESULT)
    wait_for_sync : Proc(IDirectDrawVideoPort*, UInt32, UInt32, UInt32, HRESULT)
  end

  IDirectDrawVideoPort_GUID = LibC::GUID.new("b36d93e0-2b43-11cf-a2de-00aa00b93356")
  CLSID_IDirectDrawVideoPort = "b36d93e0-2b43-11cf-a2de-00aa00b93356"
  struct IDirectDrawVideoPort
    lpVtbl : IDirectDrawVideoPortVTbl*
  end

  struct IDirectDrawVideoPortNotifyVTbl
    query_interface : Proc(IDirectDrawVideoPortNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawVideoPortNotify*, UInt32)
    release : Proc(IDirectDrawVideoPortNotify*, UInt32)
    acquire_notification : Proc(IDirectDrawVideoPortNotify*, LibC::HANDLE*, DDVIDEOPORTNOTIFY*, HRESULT)
    release_notification : Proc(IDirectDrawVideoPortNotify*, LibC::HANDLE, HRESULT)
  end

  IDirectDrawVideoPortNotify_GUID = LibC::GUID.new("a655fb94-0589-4e57-b333-567a89468c88")
  CLSID_IDirectDrawVideoPortNotify = "a655fb94-0589-4e57-b333-567a89468c88"
  struct IDirectDrawVideoPortNotify
    lpVtbl : IDirectDrawVideoPortNotifyVTbl*
  end

  struct IDirectDrawKernelVTbl
    query_interface : Proc(IDirectDrawKernel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawKernel*, UInt32)
    release : Proc(IDirectDrawKernel*, UInt32)
    get_caps : Proc(IDirectDrawKernel*, DDKERNELCAPS*, HRESULT)
    get_kernel_handle : Proc(IDirectDrawKernel*, LibC::UINT_PTR*, HRESULT)
    release_kernel_handle : Proc(IDirectDrawKernel*, HRESULT)
  end

  IDirectDrawKernel_GUID = LibC::GUID.new("8d56c120-6a08-11d0-9b06-00a0c903a3b8")
  CLSID_IDirectDrawKernel = "8d56c120-6a08-11d0-9b06-00a0c903a3b8"
  struct IDirectDrawKernel
    lpVtbl : IDirectDrawKernelVTbl*
  end

  struct IDirectDrawSurfaceKernelVTbl
    query_interface : Proc(IDirectDrawSurfaceKernel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawSurfaceKernel*, UInt32)
    release : Proc(IDirectDrawSurfaceKernel*, UInt32)
    get_kernel_handle : Proc(IDirectDrawSurfaceKernel*, LibC::UINT_PTR*, HRESULT)
    release_kernel_handle : Proc(IDirectDrawSurfaceKernel*, HRESULT)
  end

  IDirectDrawSurfaceKernel_GUID = LibC::GUID.new("60755da0-6a40-11d0-9b06-00a0c903a3b8")
  CLSID_IDirectDrawSurfaceKernel = "60755da0-6a40-11d0-9b06-00a0c903a3b8"
  struct IDirectDrawSurfaceKernel
    lpVtbl : IDirectDrawSurfaceKernelVTbl*
  end


  # Params # lpcallback : LPDDENUMCALLBACKW [In],lpcontext : Void* [In]
  fun DirectDrawEnumerateW(lpcallback : LPDDENUMCALLBACKW, lpcontext : Void*) : HRESULT

  # Params # lpcallback : LPDDENUMCALLBACKA [In],lpcontext : Void* [In]
  fun DirectDrawEnumerateA(lpcallback : LPDDENUMCALLBACKA, lpcontext : Void*) : HRESULT

  # Params # lpcallback : LPDDENUMCALLBACKEXW [In],lpcontext : Void* [In],dwflags : UInt32 [In]
  fun DirectDrawEnumerateExW(lpcallback : LPDDENUMCALLBACKEXW, lpcontext : Void*, dwflags : UInt32) : HRESULT

  # Params # lpcallback : LPDDENUMCALLBACKEXA [In],lpcontext : Void* [In],dwflags : UInt32 [In]
  fun DirectDrawEnumerateExA(lpcallback : LPDDENUMCALLBACKEXA, lpcontext : Void*, dwflags : UInt32) : HRESULT

  # Params # lpguid : Guid* [In],lplpdd : IDirectDraw* [In],punkouter : IUnknown [In]
  fun DirectDrawCreate(lpguid : Guid*, lplpdd : IDirectDraw*, punkouter : IUnknown) : HRESULT

  # Params # lpguid : Guid* [In],lplpdd : Void** [In],iid : Guid* [In],punkouter : IUnknown [In]
  fun DirectDrawCreateEx(lpguid : Guid*, lplpdd : Void**, iid : Guid*, punkouter : IUnknown) : HRESULT

  # Params # dwflags : UInt32 [In],lplpddclipper : IDirectDrawClipper* [In],punkouter : IUnknown [In]
  fun DirectDrawCreateClipper(dwflags : UInt32, lplpddclipper : IDirectDrawClipper*, punkouter : IUnknown) : HRESULT
end
