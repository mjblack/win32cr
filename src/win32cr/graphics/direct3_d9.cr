require "./direct3_d.cr"
require "./../foundation.cr"
require "./../system/com.cr"
require "./gdi.cr"

module Win32cr::Graphics::Direct3D9
  D3DRTYPECOUNT = 8_u32
  D3DCS_LEFT = 1_i32
  D3DCS_RIGHT = 2_i32
  D3DCS_TOP = 4_i32
  D3DCS_BOTTOM = 8_i32
  D3DCS_FRONT = 16_i32
  D3DCS_BACK = 32_i32
  D3DCS_PLANE0 = 64_i32
  D3DCS_PLANE1 = 128_i32
  D3DCS_PLANE2 = 256_i32
  D3DCS_PLANE3 = 512_i32
  D3DCS_PLANE4 = 1024_i32
  D3DCS_PLANE5 = 2048_i32
  D3D_MAX_SIMULTANEOUS_RENDERTARGETS = 4_u32
  D3DWRAP_W = 4_i32
  D3DDMAPSAMPLER = 256_u32
  D3DVERTEXTEXTURESAMPLER0 = 257_u32
  D3DVERTEXTEXTURESAMPLER1 = 258_u32
  D3DVERTEXTEXTURESAMPLER2 = 259_u32
  D3DVERTEXTEXTURESAMPLER3 = 260_u32
  D3DTSS_TCI_SPHEREMAP = 262144_u32
  D3DTA_TEMP = 5_u32
  D3DTA_CONSTANT = 6_u32
  D3DFVF_XYZW = 16386_u32
  D3DFVF_PSIZE = 32_u32
  D3DFVF_LASTBETA_UBYTE4 = 4096_u32
  D3DFVF_LASTBETA_D3DCOLOR = 32768_u32
  MAXD3DDECLUSAGEINDEX = 15_u32
  MAXD3DDECLLENGTH = 64_u32
  D3DSTREAMSOURCE_INDEXEDDATA = 1073741824_u32
  D3DSTREAMSOURCE_INSTANCEDATA = 2147483648_u32
  D3DSI_OPCODE_MASK = 65535_u32
  D3DSI_INSTLENGTH_MASK = 251658240_u32
  D3DSI_INSTLENGTH_SHIFT = 24_u32
  D3DSI_COISSUE = 1073741824_u32
  D3DSP_OPCODESPECIFICCONTROL_MASK = 16711680_u32
  D3DSP_OPCODESPECIFICCONTROL_SHIFT = 16_u32
  D3DSHADER_COMPARISON_SHIFT = 16_u32
  D3DSP_DCL_USAGE_SHIFT = 0_u32
  D3DSP_DCL_USAGE_MASK = 15_u32
  D3DSP_DCL_USAGEINDEX_SHIFT = 16_u32
  D3DSP_DCL_USAGEINDEX_MASK = 983040_u32
  D3DSP_TEXTURETYPE_SHIFT = 27_u32
  D3DSP_TEXTURETYPE_MASK = 2013265920_u32
  D3DSP_REGNUM_MASK = 2047_u32
  D3DSP_WRITEMASK_0 = 65536_u32
  D3DSP_WRITEMASK_1 = 131072_u32
  D3DSP_WRITEMASK_2 = 262144_u32
  D3DSP_WRITEMASK_3 = 524288_u32
  D3DSP_WRITEMASK_ALL = 983040_u32
  D3DSP_DSTMOD_SHIFT = 20_u32
  D3DSP_DSTMOD_MASK = 15728640_u32
  D3DSP_DSTSHIFT_SHIFT = 24_u32
  D3DSP_DSTSHIFT_MASK = 251658240_u32
  D3DSP_REGTYPE_SHIFT = 28_u32
  D3DSP_REGTYPE_SHIFT2 = 8_u32
  D3DSP_REGTYPE_MASK = 1879048192_u32
  D3DSP_REGTYPE_MASK2 = 6144_u32
  D3DVS_ADDRESSMODE_SHIFT = 13_u32
  D3DSHADER_ADDRESSMODE_SHIFT = 13_u32
  D3DVS_SWIZZLE_SHIFT = 16_u32
  D3DVS_SWIZZLE_MASK = 16711680_u32
  D3DSP_SWIZZLE_SHIFT = 16_u32
  D3DSP_SWIZZLE_MASK = 16711680_u32
  D3DSP_SRCMOD_SHIFT = 24_u32
  D3DSP_SRCMOD_MASK = 251658240_u32
  D3DSP_MIN_PRECISION_SHIFT = 14_u32
  D3DSP_MIN_PRECISION_MASK = 49152_u32
  D3DSI_COMMENTSIZE_SHIFT = 16_u32
  D3DSI_COMMENTSIZE_MASK = 2147418112_u32
  D3DPRESENT_RATE_DEFAULT = 0_u32
  D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 1_u32
  D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = 2_u32
  D3DPRESENTFLAG_DEVICECLIP = 4_u32
  D3DPRESENTFLAG_VIDEO = 16_u32
  D3DPRESENTFLAG_NOAUTOROTATE = 32_u32
  D3DPRESENTFLAG_UNPRUNEDMODE = 64_u32
  D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = 128_u32
  D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = 256_u32
  D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = 512_u32
  D3DPRESENTFLAG_RESTRICTED_CONTENT = 1024_u32
  D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 2048_u32
  D3DUSAGE_RENDERTARGET = 1_i32
  D3DUSAGE_DEPTHSTENCIL = 2_i32
  D3DUSAGE_DYNAMIC = 512_i32
  D3DUSAGE_NONSECURE = 8388608_i32
  D3DUSAGE_AUTOGENMIPMAP = 1024_i32
  D3DUSAGE_DMAP = 16384_i32
  D3DUSAGE_QUERY_LEGACYBUMPMAP = 32768_i32
  D3DUSAGE_QUERY_SRGBREAD = 65536_i32
  D3DUSAGE_QUERY_FILTER = 131072_i32
  D3DUSAGE_QUERY_SRGBWRITE = 262144_i32
  D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = 524288_i32
  D3DUSAGE_QUERY_VERTEXTEXTURE = 1048576_i32
  D3DUSAGE_QUERY_WRAPANDMIP = 2097152_i32
  D3DUSAGE_WRITEONLY = 8_i32
  D3DUSAGE_SOFTWAREPROCESSING = 16_i32
  D3DUSAGE_DONOTCLIP = 32_i32
  D3DUSAGE_POINTS = 64_i32
  D3DUSAGE_RTPATCHES = 128_i32
  D3DUSAGE_NPATCHES = 256_i32
  D3DUSAGE_TEXTAPI = 268435456_i32
  D3DUSAGE_RESTRICTED_CONTENT = 2048_i32
  D3DUSAGE_RESTRICT_SHARED_RESOURCE = 8192_i32
  D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = 4096_i32
  D3DLOCK_READONLY = 16_i32
  D3DLOCK_DISCARD = 8192_i32
  D3DLOCK_NOOVERWRITE = 4096_i32
  D3DLOCK_NOSYSLOCK = 2048_i32
  D3DLOCK_DONOTWAIT = 16384_i32
  D3DLOCK_NO_DIRTY_UPDATE = 32768_i32
  MAX_DEVICE_IDENTIFIER_STRING = 512_u32
  D3DISSUE_END = 1_u32
  D3DISSUE_BEGIN = 2_u32
  D3DGETDATA_FLUSH = 1_u32
  D3DCOMPOSERECTS_MAXNUMRECTS = 65535_u32
  D3DCONVOLUTIONMONO_MAXWIDTH = 7_u32
  D3DCONVOLUTIONMONO_MAXHEIGHT = 7_u32
  D3DFMT_A1_SURFACE_MAXWIDTH = 8192_u32
  D3DFMT_A1_SURFACE_MAXHEIGHT = 2048_u32
  D3D9_RESOURCE_PRIORITY_MINIMUM = 671088640_u32
  D3D9_RESOURCE_PRIORITY_LOW = 1342177280_u32
  D3D9_RESOURCE_PRIORITY_NORMAL = 2013265920_u32
  D3D9_RESOURCE_PRIORITY_HIGH = 2684354560_u32
  D3D9_RESOURCE_PRIORITY_MAXIMUM = 3355443200_u32
  D3D_OMAC_SIZE = 16_u32
  D3DAUTHENTICATEDQUERY_PROTECTION = "a84eb584-c495-48aa-b94d-8bd2d6fbce05"
  D3DAUTHENTICATEDQUERY_CHANNELTYPE = "bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be"
  D3DAUTHENTICATEDQUERY_DEVICEHANDLE = "ec1c539d-8cff-4e2a-bcc4-f5692f99f480"
  D3DAUTHENTICATEDQUERY_CRYPTOSESSION = "2634499e-d018-4d74-ac17-7f724059528d"
  D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT = "0db207b3-9450-46a6-82de-1b96d44f9cf2"
  D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS = "649bbadb-f0f4-4639-a15b-24393fc3abac"
  D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT = "012f0bd6-e662-4474-befd-aa53e5143c6d"
  D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT = "2c042b5e-8c07-46d5-aabe-8f75cbad4c31"
  D3DAUTHENTICATEDQUERY_OUTPUTID = "839ddca3-9b4e-41e4-b053-892bd2a11ee7"
  D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES = "6214d9d2-432c-4abb-9fce-216eea269e3b"
  D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT = "b30f7066-203c-4b07-93fc-ceaafd61241e"
  D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID = "f83a5958-e986-4bda-beb0-411f6a7a01b7"
  D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE = "ec1791c7-dad3-4f15-9ec3-faa93d60d4f0"
  D3DAUTHENTICATEDCONFIGURE_INITIALIZE = "06114bdb-3523-470a-8dca-fbc2845154f0"
  D3DAUTHENTICATEDCONFIGURE_PROTECTION = "50455658-3f47-4362-bf99-bfdfcde9ed29"
  D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION = "6346cc54-2cfc-4ad4-8224-d15837de7700"
  D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE = "0772d047-1b40-48e8-9ca6-b5f510de9f01"
  D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE = "41fff286-6ae0-4d43-9d55-a46e9efd158a"
  D3DVS20CAPS_PREDICATION = 1_u32
  D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24_u32
  D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0_u32
  D3DVS20_MAX_NUMTEMPS = 32_u32
  D3DVS20_MIN_NUMTEMPS = 12_u32
  D3DVS20_MAX_STATICFLOWCONTROLDEPTH = 4_u32
  D3DVS20_MIN_STATICFLOWCONTROLDEPTH = 1_u32
  D3DPS20CAPS_ARBITRARYSWIZZLE = 1_u32
  D3DPS20CAPS_GRADIENTINSTRUCTIONS = 2_u32
  D3DPS20CAPS_PREDICATION = 4_u32
  D3DPS20CAPS_NODEPENDENTREADLIMIT = 8_u32
  D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = 16_u32
  D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24_u32
  D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0_u32
  D3DPS20_MAX_NUMTEMPS = 32_u32
  D3DPS20_MIN_NUMTEMPS = 12_u32
  D3DPS20_MAX_STATICFLOWCONTROLDEPTH = 4_u32
  D3DPS20_MIN_STATICFLOWCONTROLDEPTH = 0_u32
  D3DPS20_MAX_NUMINSTRUCTIONSLOTS = 512_u32
  D3DPS20_MIN_NUMINSTRUCTIONSLOTS = 96_u32
  D3DMIN30SHADERINSTRUCTIONS = 512_u32
  D3DMAX30SHADERINSTRUCTIONS = 32768_u32
  D3DOVERLAYCAPS_FULLRANGERGB = 1_u32
  D3DOVERLAYCAPS_LIMITEDRANGERGB = 2_u32
  D3DOVERLAYCAPS_YCbCr_BT601 = 4_u32
  D3DOVERLAYCAPS_YCbCr_BT709 = 8_u32
  D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = 16_u32
  D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = 32_u32
  D3DOVERLAYCAPS_STRETCHX = 64_u32
  D3DOVERLAYCAPS_STRETCHY = 128_u32
  D3DCPCAPS_SOFTWARE = 1_u32
  D3DCPCAPS_HARDWARE = 2_u32
  D3DCPCAPS_PROTECTIONALWAYSON = 4_u32
  D3DCPCAPS_PARTIALDECRYPTION = 8_u32
  D3DCPCAPS_CONTENTKEY = 16_u32
  D3DCPCAPS_FRESHENSESSIONKEY = 32_u32
  D3DCPCAPS_ENCRYPTEDREADBACK = 64_u32
  D3DCPCAPS_ENCRYPTEDREADBACKKEY = 128_u32
  D3DCPCAPS_SEQUENTIAL_CTR_IV = 256_u32
  D3DCPCAPS_ENCRYPTSLICEDATAONLY = 512_u32
  D3DCRYPTOTYPE_AES128_CTR = "9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f"
  D3DCRYPTOTYPE_PROPRIETARY = "ab4e9afd-1d1c-46e6-a72f-0869917b0de8"
  D3DKEYEXCHANGE_RSAES_OAEP = "c1949895-d72a-4a1d-8e5d-ed857d171520"
  D3DKEYEXCHANGE_DXVA = "43d3775c-38e5-4924-8d86-d3fccf153e9b"
  D3DCAPS_OVERLAY = 2048_i32
  D3DCAPS_READ_SCANLINE = 131072_i32
  D3DCAPS2_FULLSCREENGAMMA = 131072_i32
  D3DCAPS2_CANCALIBRATEGAMMA = 1048576_i32
  D3DCAPS2_RESERVED = 33554432_i32
  D3DCAPS2_CANMANAGERESOURCE = 268435456_i32
  D3DCAPS2_DYNAMICTEXTURES = 536870912_i32
  D3DCAPS2_CANAUTOGENMIPMAP = 1073741824_i32
  D3DCAPS2_CANSHARERESOURCE = -2147483648_i32
  D3DCAPS3_RESERVED = -2147483617_i32
  D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 32_i32
  D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = 128_i32
  D3DCAPS3_COPY_TO_VIDMEM = 256_i32
  D3DCAPS3_COPY_TO_SYSTEMMEM = 512_i32
  D3DCAPS3_DXVAHD = 1024_i32
  D3DCAPS3_DXVAHD_LIMITED = 2048_i32
  D3DPRESENT_INTERVAL_DEFAULT = 0_i32
  D3DPRESENT_INTERVAL_ONE = 1_i32
  D3DPRESENT_INTERVAL_TWO = 2_i32
  D3DPRESENT_INTERVAL_THREE = 4_i32
  D3DPRESENT_INTERVAL_FOUR = 8_i32
  D3DPRESENT_INTERVAL_IMMEDIATE = -2147483648_i32
  D3DCURSORCAPS_COLOR = 1_i32
  D3DCURSORCAPS_LOWRES = 2_i32
  D3DDEVCAPS_PUREDEVICE = 1048576_i32
  D3DDEVCAPS_QUINTICRTPATCHES = 2097152_i32
  D3DDEVCAPS_RTPATCHES = 4194304_i32
  D3DDEVCAPS_RTPATCHHANDLEZERO = 8388608_i32
  D3DDEVCAPS_NPATCHES = 16777216_i32
  D3DPMISCCAPS_COLORWRITEENABLE = 128_i32
  D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 256_i32
  D3DPMISCCAPS_CLIPTLVERTS = 512_i32
  D3DPMISCCAPS_TSSARGTEMP = 1024_i32
  D3DPMISCCAPS_BLENDOP = 2048_i32
  D3DPMISCCAPS_NULLREFERENCE = 4096_i32
  D3DPMISCCAPS_INDEPENDENTWRITEMASKS = 16384_i32
  D3DPMISCCAPS_PERSTAGECONSTANT = 32768_i32
  D3DPMISCCAPS_FOGANDSPECULARALPHA = 65536_i32
  D3DPMISCCAPS_SEPARATEALPHABLEND = 131072_i32
  D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = 262144_i32
  D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = 524288_i32
  D3DPMISCCAPS_FOGVERTEXCLAMPED = 1048576_i32
  D3DPMISCCAPS_POSTBLENDSRGBCONVERT = 2097152_i32
  D3DLINECAPS_TEXTURE = 1_i32
  D3DLINECAPS_ZTEST = 2_i32
  D3DLINECAPS_BLEND = 4_i32
  D3DLINECAPS_ALPHACMP = 8_i32
  D3DLINECAPS_FOG = 16_i32
  D3DLINECAPS_ANTIALIAS = 32_i32
  D3DPRASTERCAPS_COLORPERSPECTIVE = 4194304_i32
  D3DPRASTERCAPS_SCISSORTEST = 16777216_i32
  D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = 33554432_i32
  D3DPRASTERCAPS_DEPTHBIAS = 67108864_i32
  D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = 134217728_i32
  D3DPBLENDCAPS_BLENDFACTOR = 8192_i32
  D3DPBLENDCAPS_SRCCOLOR2 = 16384_i32
  D3DPBLENDCAPS_INVSRCCOLOR2 = 32768_i32
  D3DPTEXTURECAPS_VOLUMEMAP = 8192_i32
  D3DPTEXTURECAPS_MIPMAP = 16384_i32
  D3DPTEXTURECAPS_MIPVOLUMEMAP = 32768_i32
  D3DPTEXTURECAPS_MIPCUBEMAP = 65536_i32
  D3DPTEXTURECAPS_CUBEMAP_POW2 = 131072_i32
  D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 262144_i32
  D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = 2097152_i32
  D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = 2048_i32
  D3DPTFILTERCAPS_MINFGAUSSIANQUAD = 4096_i32
  D3DPTFILTERCAPS_CONVOLUTIONMONO = 262144_i32
  D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = 134217728_i32
  D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = 268435456_i32
  D3DPTADDRESSCAPS_MIRRORONCE = 32_i32
  D3DSTENCILCAPS_TWOSIDED = 256_i32
  D3DTEXOPCAPS_MULTIPLYADD = 16777216_i32
  D3DTEXOPCAPS_LERP = 33554432_i32
  D3DFVFCAPS_PSIZE = 1048576_i32
  D3DVTXPCAPS_TWEENING = 64_i32
  D3DVTXPCAPS_TEXGEN_SPHEREMAP = 256_i32
  D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = 512_i32
  D3DDEVCAPS2_STREAMOFFSET = 1_i32
  D3DDEVCAPS2_DMAPNPATCH = 2_i32
  D3DDEVCAPS2_ADAPTIVETESSRTPATCH = 4_i32
  D3DDEVCAPS2_ADAPTIVETESSNPATCH = 8_i32
  D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = 16_i32
  D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = 32_i32
  D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = 64_i32
  D3DDTCAPS_UBYTE4 = 1_i32
  D3DDTCAPS_UBYTE4N = 2_i32
  D3DDTCAPS_SHORT2N = 4_i32
  D3DDTCAPS_SHORT4N = 8_i32
  D3DDTCAPS_USHORT2N = 16_i32
  D3DDTCAPS_USHORT4N = 32_i32
  D3DDTCAPS_UDEC3 = 64_i32
  D3DDTCAPS_DEC3N = 128_i32
  D3DDTCAPS_FLOAT16_2 = 256_i32
  D3DDTCAPS_FLOAT16_4 = 512_i32
  D3DSPD_IUNKNOWN = 1_i32
  D3DCREATE_FPU_PRESERVE = 2_i32
  D3DCREATE_MULTITHREADED = 4_i32
  D3DCREATE_PUREDEVICE = 16_i32
  D3DCREATE_SOFTWARE_VERTEXPROCESSING = 32_i32
  D3DCREATE_HARDWARE_VERTEXPROCESSING = 64_i32
  D3DCREATE_MIXED_VERTEXPROCESSING = 128_i32
  D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 256_i32
  D3DCREATE_ADAPTERGROUP_DEVICE = 512_i32
  D3DADAPTER_DEFAULT = 0_u32
  D3DENUM_NO_DRIVERVERSION = 4_i32
  D3DPRESENT_BACK_BUFFERS_MAX = 3_i32
  D3DSGR_NO_CALIBRATION = 0_i32
  D3DSGR_CALIBRATE = 1_i32
  D3DCURSOR_IMMEDIATE_UPDATE = 1_i32
  D3DPRESENT_DONOTWAIT = 1_i32
  D3DPRESENT_LINEAR_CONTENT = 2_i32
  FACD3D_ = 2166_u32
  D3D_SDK_VERSION = 32_u32
  D3D9b_SDK_VERSION = 31_u32
  D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 1024_i32
  D3DCREATE_NOWINDOWCHANGES = 2048_i32
  D3DCREATE_DISABLE_PSGP_THREADING = 8192_i32
  D3DCREATE_ENABLE_PRESENTSTATS = 16384_i32
  D3DCREATE_DISABLE_PRINTSCREEN = 32768_i32
  D3DCREATE_SCREENSAVER = 268435456_i32
  D3DENUM_WHQL_LEVEL = 2_i32
  D3DPRESENT_BACK_BUFFERS_MAX_EX = 30_i32
  D3DPRESENT_DONOTFLIP = 4_i32
  D3DPRESENT_FLIPRESTART = 8_i32
  D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = 16_i32
  D3DPRESENT_UPDATEOVERLAYONLY = 32_i32
  D3DPRESENT_HIDEOVERLAY = 64_i32
  D3DPRESENT_UPDATECOLORKEY = 128_i32
  D3DPRESENT_FORCEIMMEDIATE = 256_i32

  enum D3DLIGHTTYPE
    D3DLIGHT_POINT = 1_i32
    D3DLIGHT_SPOT = 2_i32
    D3DLIGHT_DIRECTIONAL = 3_i32
    D3DLIGHT_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADEMODE
    D3DSHADE_FLAT = 1_i32
    D3DSHADE_GOURAUD = 2_i32
    D3DSHADE_PHONG = 3_i32
    D3DSHADE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DFILLMODE
    D3DFILL_POINT = 1_i32
    D3DFILL_WIREFRAME = 2_i32
    D3DFILL_SOLID = 3_i32
    D3DFILL_FORCE_DWORD = 2147483647_i32
  end
  enum D3DBLEND : UInt32
    D3DBLEND_ZERO = 1_u32
    D3DBLEND_ONE = 2_u32
    D3DBLEND_SRCCOLOR = 3_u32
    D3DBLEND_INVSRCCOLOR = 4_u32
    D3DBLEND_SRCALPHA = 5_u32
    D3DBLEND_INVSRCALPHA = 6_u32
    D3DBLEND_DESTALPHA = 7_u32
    D3DBLEND_INVDESTALPHA = 8_u32
    D3DBLEND_DESTCOLOR = 9_u32
    D3DBLEND_INVDESTCOLOR = 10_u32
    D3DBLEND_SRCALPHASAT = 11_u32
    D3DBLEND_BOTHSRCALPHA = 12_u32
    D3DBLEND_BOTHINVSRCALPHA = 13_u32
    D3DBLEND_BLENDFACTOR = 14_u32
    D3DBLEND_INVBLENDFACTOR = 15_u32
    D3DBLEND_SRCCOLOR2 = 16_u32
    D3DBLEND_INVSRCCOLOR2 = 17_u32
    D3DBLEND_FORCE_DWORD = 2147483647_u32
  end
  enum D3DBLENDOP : UInt32
    D3DBLENDOP_ADD = 1_u32
    D3DBLENDOP_SUBTRACT = 2_u32
    D3DBLENDOP_REVSUBTRACT = 3_u32
    D3DBLENDOP_MIN = 4_u32
    D3DBLENDOP_MAX = 5_u32
    D3DBLENDOP_FORCE_DWORD = 2147483647_u32
  end
  enum D3DTEXTUREADDRESS
    D3DTADDRESS_WRAP = 1_i32
    D3DTADDRESS_MIRROR = 2_i32
    D3DTADDRESS_CLAMP = 3_i32
    D3DTADDRESS_BORDER = 4_i32
    D3DTADDRESS_MIRRORONCE = 5_i32
    D3DTADDRESS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DCULL : UInt32
    D3DCULL_NONE = 1_u32
    D3DCULL_CW = 2_u32
    D3DCULL_CCW = 3_u32
    D3DCULL_FORCE_DWORD = 2147483647_u32
  end
  enum D3DCMPFUNC
    D3DCMP_NEVER = 1_i32
    D3DCMP_LESS = 2_i32
    D3DCMP_EQUAL = 3_i32
    D3DCMP_LESSEQUAL = 4_i32
    D3DCMP_GREATER = 5_i32
    D3DCMP_NOTEQUAL = 6_i32
    D3DCMP_GREATEREQUAL = 7_i32
    D3DCMP_ALWAYS = 8_i32
    D3DCMP_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSTENCILOP : UInt32
    D3DSTENCILOP_KEEP = 1_u32
    D3DSTENCILOP_ZERO = 2_u32
    D3DSTENCILOP_REPLACE = 3_u32
    D3DSTENCILOP_INCRSAT = 4_u32
    D3DSTENCILOP_DECRSAT = 5_u32
    D3DSTENCILOP_INVERT = 6_u32
    D3DSTENCILOP_INCR = 7_u32
    D3DSTENCILOP_DECR = 8_u32
    D3DSTENCILOP_FORCE_DWORD = 2147483647_u32
  end
  enum D3DFOGMODE
    D3DFOG_NONE = 0_i32
    D3DFOG_EXP = 1_i32
    D3DFOG_EXP2 = 2_i32
    D3DFOG_LINEAR = 3_i32
    D3DFOG_FORCE_DWORD = 2147483647_i32
  end
  enum D3DZBUFFERTYPE
    D3DZB_FALSE = 0_i32
    D3DZB_TRUE = 1_i32
    D3DZB_USEW = 2_i32
    D3DZB_FORCE_DWORD = 2147483647_i32
  end
  enum D3DPRIMITIVETYPE
    D3DPT_POINTLIST = 1_i32
    D3DPT_LINELIST = 2_i32
    D3DPT_LINESTRIP = 3_i32
    D3DPT_TRIANGLELIST = 4_i32
    D3DPT_TRIANGLESTRIP = 5_i32
    D3DPT_TRIANGLEFAN = 6_i32
    D3DPT_FORCE_DWORD = 2147483647_i32
  end
  enum D3DTRANSFORMSTATETYPE
    D3DTS_VIEW = 2_i32
    D3DTS_PROJECTION = 3_i32
    D3DTS_TEXTURE0 = 16_i32
    D3DTS_TEXTURE1 = 17_i32
    D3DTS_TEXTURE2 = 18_i32
    D3DTS_TEXTURE3 = 19_i32
    D3DTS_TEXTURE4 = 20_i32
    D3DTS_TEXTURE5 = 21_i32
    D3DTS_TEXTURE6 = 22_i32
    D3DTS_TEXTURE7 = 23_i32
    D3DTS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DRENDERSTATETYPE
    D3DRS_ZENABLE = 7_i32
    D3DRS_FILLMODE = 8_i32
    D3DRS_SHADEMODE = 9_i32
    D3DRS_ZWRITEENABLE = 14_i32
    D3DRS_ALPHATESTENABLE = 15_i32
    D3DRS_LASTPIXEL = 16_i32
    D3DRS_SRCBLEND = 19_i32
    D3DRS_DESTBLEND = 20_i32
    D3DRS_CULLMODE = 22_i32
    D3DRS_ZFUNC = 23_i32
    D3DRS_ALPHAREF = 24_i32
    D3DRS_ALPHAFUNC = 25_i32
    D3DRS_DITHERENABLE = 26_i32
    D3DRS_ALPHABLENDENABLE = 27_i32
    D3DRS_FOGENABLE = 28_i32
    D3DRS_SPECULARENABLE = 29_i32
    D3DRS_FOGCOLOR = 34_i32
    D3DRS_FOGTABLEMODE = 35_i32
    D3DRS_FOGSTART = 36_i32
    D3DRS_FOGEND = 37_i32
    D3DRS_FOGDENSITY = 38_i32
    D3DRS_RANGEFOGENABLE = 48_i32
    D3DRS_STENCILENABLE = 52_i32
    D3DRS_STENCILFAIL = 53_i32
    D3DRS_STENCILZFAIL = 54_i32
    D3DRS_STENCILPASS = 55_i32
    D3DRS_STENCILFUNC = 56_i32
    D3DRS_STENCILREF = 57_i32
    D3DRS_STENCILMASK = 58_i32
    D3DRS_STENCILWRITEMASK = 59_i32
    D3DRS_TEXTUREFACTOR = 60_i32
    D3DRS_WRAP0 = 128_i32
    D3DRS_WRAP1 = 129_i32
    D3DRS_WRAP2 = 130_i32
    D3DRS_WRAP3 = 131_i32
    D3DRS_WRAP4 = 132_i32
    D3DRS_WRAP5 = 133_i32
    D3DRS_WRAP6 = 134_i32
    D3DRS_WRAP7 = 135_i32
    D3DRS_CLIPPING = 136_i32
    D3DRS_LIGHTING = 137_i32
    D3DRS_AMBIENT = 139_i32
    D3DRS_FOGVERTEXMODE = 140_i32
    D3DRS_COLORVERTEX = 141_i32
    D3DRS_LOCALVIEWER = 142_i32
    D3DRS_NORMALIZENORMALS = 143_i32
    D3DRS_DIFFUSEMATERIALSOURCE = 145_i32
    D3DRS_SPECULARMATERIALSOURCE = 146_i32
    D3DRS_AMBIENTMATERIALSOURCE = 147_i32
    D3DRS_EMISSIVEMATERIALSOURCE = 148_i32
    D3DRS_VERTEXBLEND = 151_i32
    D3DRS_CLIPPLANEENABLE = 152_i32
    D3DRS_POINTSIZE = 154_i32
    D3DRS_POINTSIZE_MIN = 155_i32
    D3DRS_POINTSPRITEENABLE = 156_i32
    D3DRS_POINTSCALEENABLE = 157_i32
    D3DRS_POINTSCALE_A = 158_i32
    D3DRS_POINTSCALE_B = 159_i32
    D3DRS_POINTSCALE_C = 160_i32
    D3DRS_MULTISAMPLEANTIALIAS = 161_i32
    D3DRS_MULTISAMPLEMASK = 162_i32
    D3DRS_PATCHEDGESTYLE = 163_i32
    D3DRS_DEBUGMONITORTOKEN = 165_i32
    D3DRS_POINTSIZE_MAX = 166_i32
    D3DRS_INDEXEDVERTEXBLENDENABLE = 167_i32
    D3DRS_COLORWRITEENABLE = 168_i32
    D3DRS_TWEENFACTOR = 170_i32
    D3DRS_BLENDOP = 171_i32
    D3DRS_POSITIONDEGREE = 172_i32
    D3DRS_NORMALDEGREE = 173_i32
    D3DRS_SCISSORTESTENABLE = 174_i32
    D3DRS_SLOPESCALEDEPTHBIAS = 175_i32
    D3DRS_ANTIALIASEDLINEENABLE = 176_i32
    D3DRS_MINTESSELLATIONLEVEL = 178_i32
    D3DRS_MAXTESSELLATIONLEVEL = 179_i32
    D3DRS_ADAPTIVETESS_X = 180_i32
    D3DRS_ADAPTIVETESS_Y = 181_i32
    D3DRS_ADAPTIVETESS_Z = 182_i32
    D3DRS_ADAPTIVETESS_W = 183_i32
    D3DRS_ENABLEADAPTIVETESSELLATION = 184_i32
    D3DRS_TWOSIDEDSTENCILMODE = 185_i32
    D3DRS_CCW_STENCILFAIL = 186_i32
    D3DRS_CCW_STENCILZFAIL = 187_i32
    D3DRS_CCW_STENCILPASS = 188_i32
    D3DRS_CCW_STENCILFUNC = 189_i32
    D3DRS_COLORWRITEENABLE1 = 190_i32
    D3DRS_COLORWRITEENABLE2 = 191_i32
    D3DRS_COLORWRITEENABLE3 = 192_i32
    D3DRS_BLENDFACTOR = 193_i32
    D3DRS_SRGBWRITEENABLE = 194_i32
    D3DRS_DEPTHBIAS = 195_i32
    D3DRS_WRAP8 = 198_i32
    D3DRS_WRAP9 = 199_i32
    D3DRS_WRAP10 = 200_i32
    D3DRS_WRAP11 = 201_i32
    D3DRS_WRAP12 = 202_i32
    D3DRS_WRAP13 = 203_i32
    D3DRS_WRAP14 = 204_i32
    D3DRS_WRAP15 = 205_i32
    D3DRS_SEPARATEALPHABLENDENABLE = 206_i32
    D3DRS_SRCBLENDALPHA = 207_i32
    D3DRS_DESTBLENDALPHA = 208_i32
    D3DRS_BLENDOPALPHA = 209_i32
    D3DRS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DMATERIALCOLORSOURCE
    D3DMCS_MATERIAL = 0_i32
    D3DMCS_COLOR1 = 1_i32
    D3DMCS_COLOR2 = 2_i32
    D3DMCS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DTEXTURESTAGESTATETYPE
    D3DTSS_COLOROP = 1_i32
    D3DTSS_COLORARG1 = 2_i32
    D3DTSS_COLORARG2 = 3_i32
    D3DTSS_ALPHAOP = 4_i32
    D3DTSS_ALPHAARG1 = 5_i32
    D3DTSS_ALPHAARG2 = 6_i32
    D3DTSS_BUMPENVMAT00 = 7_i32
    D3DTSS_BUMPENVMAT01 = 8_i32
    D3DTSS_BUMPENVMAT10 = 9_i32
    D3DTSS_BUMPENVMAT11 = 10_i32
    D3DTSS_TEXCOORDINDEX = 11_i32
    D3DTSS_BUMPENVLSCALE = 22_i32
    D3DTSS_BUMPENVLOFFSET = 23_i32
    D3DTSS_TEXTURETRANSFORMFLAGS = 24_i32
    D3DTSS_COLORARG0 = 26_i32
    D3DTSS_ALPHAARG0 = 27_i32
    D3DTSS_RESULTARG = 28_i32
    D3DTSS_CONSTANT = 32_i32
    D3DTSS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSAMPLERSTATETYPE
    D3DSAMP_ADDRESSU = 1_i32
    D3DSAMP_ADDRESSV = 2_i32
    D3DSAMP_ADDRESSW = 3_i32
    D3DSAMP_BORDERCOLOR = 4_i32
    D3DSAMP_MAGFILTER = 5_i32
    D3DSAMP_MINFILTER = 6_i32
    D3DSAMP_MIPFILTER = 7_i32
    D3DSAMP_MIPMAPLODBIAS = 8_i32
    D3DSAMP_MAXMIPLEVEL = 9_i32
    D3DSAMP_MAXANISOTROPY = 10_i32
    D3DSAMP_SRGBTEXTURE = 11_i32
    D3DSAMP_ELEMENTINDEX = 12_i32
    D3DSAMP_DMAPOFFSET = 13_i32
    D3DSAMP_FORCE_DWORD = 2147483647_i32
  end
  enum D3DTEXTUREOP
    D3DTOP_DISABLE = 1_i32
    D3DTOP_SELECTARG1 = 2_i32
    D3DTOP_SELECTARG2 = 3_i32
    D3DTOP_MODULATE = 4_i32
    D3DTOP_MODULATE2X = 5_i32
    D3DTOP_MODULATE4X = 6_i32
    D3DTOP_ADD = 7_i32
    D3DTOP_ADDSIGNED = 8_i32
    D3DTOP_ADDSIGNED2X = 9_i32
    D3DTOP_SUBTRACT = 10_i32
    D3DTOP_ADDSMOOTH = 11_i32
    D3DTOP_BLENDDIFFUSEALPHA = 12_i32
    D3DTOP_BLENDTEXTUREALPHA = 13_i32
    D3DTOP_BLENDFACTORALPHA = 14_i32
    D3DTOP_BLENDTEXTUREALPHAPM = 15_i32
    D3DTOP_BLENDCURRENTALPHA = 16_i32
    D3DTOP_PREMODULATE = 17_i32
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18_i32
    D3DTOP_MODULATECOLOR_ADDALPHA = 19_i32
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20_i32
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21_i32
    D3DTOP_BUMPENVMAP = 22_i32
    D3DTOP_BUMPENVMAPLUMINANCE = 23_i32
    D3DTOP_DOTPRODUCT3 = 24_i32
    D3DTOP_MULTIPLYADD = 25_i32
    D3DTOP_LERP = 26_i32
    D3DTOP_FORCE_DWORD = 2147483647_i32
  end
  enum D3DTEXTUREFILTERTYPE
    D3DTEXF_NONE = 0_i32
    D3DTEXF_POINT = 1_i32
    D3DTEXF_LINEAR = 2_i32
    D3DTEXF_ANISOTROPIC = 3_i32
    D3DTEXF_PYRAMIDALQUAD = 6_i32
    D3DTEXF_GAUSSIANQUAD = 7_i32
    D3DTEXF_CONVOLUTIONMONO = 8_i32
    D3DTEXF_FORCE_DWORD = 2147483647_i32
  end
  enum D3DDECLUSAGE
    D3DDECLUSAGE_POSITION = 0_i32
    D3DDECLUSAGE_BLENDWEIGHT = 1_i32
    D3DDECLUSAGE_BLENDINDICES = 2_i32
    D3DDECLUSAGE_NORMAL = 3_i32
    D3DDECLUSAGE_PSIZE = 4_i32
    D3DDECLUSAGE_TEXCOORD = 5_i32
    D3DDECLUSAGE_TANGENT = 6_i32
    D3DDECLUSAGE_BINORMAL = 7_i32
    D3DDECLUSAGE_TESSFACTOR = 8_i32
    D3DDECLUSAGE_POSITIONT = 9_i32
    D3DDECLUSAGE_COLOR = 10_i32
    D3DDECLUSAGE_FOG = 11_i32
    D3DDECLUSAGE_DEPTH = 12_i32
    D3DDECLUSAGE_SAMPLE = 13_i32
  end
  enum D3DDECLMETHOD
    D3DDECLMETHOD_DEFAULT = 0_i32
    D3DDECLMETHOD_PARTIALU = 1_i32
    D3DDECLMETHOD_PARTIALV = 2_i32
    D3DDECLMETHOD_CROSSUV = 3_i32
    D3DDECLMETHOD_UV = 4_i32
    D3DDECLMETHOD_LOOKUP = 5_i32
    D3DDECLMETHOD_LOOKUPPRESAMPLED = 6_i32
  end
  enum D3DDECLTYPE
    D3DDECLTYPE_FLOAT1 = 0_i32
    D3DDECLTYPE_FLOAT2 = 1_i32
    D3DDECLTYPE_FLOAT3 = 2_i32
    D3DDECLTYPE_FLOAT4 = 3_i32
    D3DDECLTYPE_D3DCOLOR = 4_i32
    D3DDECLTYPE_UBYTE4 = 5_i32
    D3DDECLTYPE_SHORT2 = 6_i32
    D3DDECLTYPE_SHORT4 = 7_i32
    D3DDECLTYPE_UBYTE4N = 8_i32
    D3DDECLTYPE_SHORT2N = 9_i32
    D3DDECLTYPE_SHORT4N = 10_i32
    D3DDECLTYPE_USHORT2N = 11_i32
    D3DDECLTYPE_USHORT4N = 12_i32
    D3DDECLTYPE_UDEC3 = 13_i32
    D3DDECLTYPE_DEC3N = 14_i32
    D3DDECLTYPE_FLOAT16_2 = 15_i32
    D3DDECLTYPE_FLOAT16_4 = 16_i32
    D3DDECLTYPE_UNUSED = 17_i32
  end
  enum D3DSHADER_INSTRUCTION_OPCODE_TYPE
    D3DSIO_NOP = 0_i32
    D3DSIO_MOV = 1_i32
    D3DSIO_ADD = 2_i32
    D3DSIO_SUB = 3_i32
    D3DSIO_MAD = 4_i32
    D3DSIO_MUL = 5_i32
    D3DSIO_RCP = 6_i32
    D3DSIO_RSQ = 7_i32
    D3DSIO_DP3 = 8_i32
    D3DSIO_DP4 = 9_i32
    D3DSIO_MIN = 10_i32
    D3DSIO_MAX = 11_i32
    D3DSIO_SLT = 12_i32
    D3DSIO_SGE = 13_i32
    D3DSIO_EXP = 14_i32
    D3DSIO_LOG = 15_i32
    D3DSIO_LIT = 16_i32
    D3DSIO_DST = 17_i32
    D3DSIO_LRP = 18_i32
    D3DSIO_FRC = 19_i32
    D3DSIO_M4x4 = 20_i32
    D3DSIO_M4x3 = 21_i32
    D3DSIO_M3x4 = 22_i32
    D3DSIO_M3x3 = 23_i32
    D3DSIO_M3x2 = 24_i32
    D3DSIO_CALL = 25_i32
    D3DSIO_CALLNZ = 26_i32
    D3DSIO_LOOP = 27_i32
    D3DSIO_RET = 28_i32
    D3DSIO_ENDLOOP = 29_i32
    D3DSIO_LABEL = 30_i32
    D3DSIO_DCL = 31_i32
    D3DSIO_POW = 32_i32
    D3DSIO_CRS = 33_i32
    D3DSIO_SGN = 34_i32
    D3DSIO_ABS = 35_i32
    D3DSIO_NRM = 36_i32
    D3DSIO_SINCOS = 37_i32
    D3DSIO_REP = 38_i32
    D3DSIO_ENDREP = 39_i32
    D3DSIO_IF = 40_i32
    D3DSIO_IFC = 41_i32
    D3DSIO_ELSE = 42_i32
    D3DSIO_ENDIF = 43_i32
    D3DSIO_BREAK = 44_i32
    D3DSIO_BREAKC = 45_i32
    D3DSIO_MOVA = 46_i32
    D3DSIO_DEFB = 47_i32
    D3DSIO_DEFI = 48_i32
    D3DSIO_TEXCOORD = 64_i32
    D3DSIO_TEXKILL = 65_i32
    D3DSIO_TEX = 66_i32
    D3DSIO_TEXBEM = 67_i32
    D3DSIO_TEXBEML = 68_i32
    D3DSIO_TEXREG2AR = 69_i32
    D3DSIO_TEXREG2GB = 70_i32
    D3DSIO_TEXM3x2PAD = 71_i32
    D3DSIO_TEXM3x2TEX = 72_i32
    D3DSIO_TEXM3x3PAD = 73_i32
    D3DSIO_TEXM3x3TEX = 74_i32
    D3DSIO_RESERVED0 = 75_i32
    D3DSIO_TEXM3x3SPEC = 76_i32
    D3DSIO_TEXM3x3VSPEC = 77_i32
    D3DSIO_EXPP = 78_i32
    D3DSIO_LOGP = 79_i32
    D3DSIO_CND = 80_i32
    D3DSIO_DEF = 81_i32
    D3DSIO_TEXREG2RGB = 82_i32
    D3DSIO_TEXDP3TEX = 83_i32
    D3DSIO_TEXM3x2DEPTH = 84_i32
    D3DSIO_TEXDP3 = 85_i32
    D3DSIO_TEXM3x3 = 86_i32
    D3DSIO_TEXDEPTH = 87_i32
    D3DSIO_CMP = 88_i32
    D3DSIO_BEM = 89_i32
    D3DSIO_DP2ADD = 90_i32
    D3DSIO_DSX = 91_i32
    D3DSIO_DSY = 92_i32
    D3DSIO_TEXLDD = 93_i32
    D3DSIO_SETP = 94_i32
    D3DSIO_TEXLDL = 95_i32
    D3DSIO_BREAKP = 96_i32
    D3DSIO_PHASE = 65533_i32
    D3DSIO_COMMENT = 65534_i32
    D3DSIO_END = 65535_i32
    D3DSIO_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_COMPARISON
    D3DSPC_RESERVED0 = 0_i32
    D3DSPC_GT = 1_i32
    D3DSPC_EQ = 2_i32
    D3DSPC_GE = 3_i32
    D3DSPC_LT = 4_i32
    D3DSPC_NE = 5_i32
    D3DSPC_LE = 6_i32
    D3DSPC_RESERVED1 = 7_i32
  end
  enum D3DSAMPLER_TEXTURE_TYPE
    D3DSTT_UNKNOWN = 0_i32
    D3DSTT_2D = 268435456_i32
    D3DSTT_CUBE = 402653184_i32
    D3DSTT_VOLUME = 536870912_i32
    D3DSTT_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_PARAM_REGISTER_TYPE
    D3DSPR_TEMP = 0_i32
    D3DSPR_INPUT = 1_i32
    D3DSPR_CONST = 2_i32
    D3DSPR_ADDR = 3_i32
    D3DSPR_TEXTURE = 3_i32
    D3DSPR_RASTOUT = 4_i32
    D3DSPR_ATTROUT = 5_i32
    D3DSPR_TEXCRDOUT = 6_i32
    D3DSPR_OUTPUT = 6_i32
    D3DSPR_CONSTINT = 7_i32
    D3DSPR_COLOROUT = 8_i32
    D3DSPR_DEPTHOUT = 9_i32
    D3DSPR_SAMPLER = 10_i32
    D3DSPR_CONST2 = 11_i32
    D3DSPR_CONST3 = 12_i32
    D3DSPR_CONST4 = 13_i32
    D3DSPR_CONSTBOOL = 14_i32
    D3DSPR_LOOP = 15_i32
    D3DSPR_TEMPFLOAT16 = 16_i32
    D3DSPR_MISCTYPE = 17_i32
    D3DSPR_LABEL = 18_i32
    D3DSPR_PREDICATE = 19_i32
    D3DSPR_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_MISCTYPE_OFFSETS
    D3DSMO_POSITION = 0_i32
    D3DSMO_FACE = 1_i32
  end
  enum D3DVS_RASTOUT_OFFSETS
    D3DSRO_POSITION = 0_i32
    D3DSRO_FOG = 1_i32
    D3DSRO_POINT_SIZE = 2_i32
    D3DSRO_FORCE_DWORD = 2147483647_i32
  end
  enum D3DVS_ADDRESSMODE_TYPE
    D3DVS_ADDRMODE_ABSOLUTE = 0_i32
    D3DVS_ADDRMODE_RELATIVE = 8192_i32
    D3DVS_ADDRMODE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_ADDRESSMODE_TYPE
    D3DSHADER_ADDRMODE_ABSOLUTE = 0_i32
    D3DSHADER_ADDRMODE_RELATIVE = 8192_i32
    D3DSHADER_ADDRMODE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_PARAM_SRCMOD_TYPE
    D3DSPSM_NONE = 0_i32
    D3DSPSM_NEG = 16777216_i32
    D3DSPSM_BIAS = 33554432_i32
    D3DSPSM_BIASNEG = 50331648_i32
    D3DSPSM_SIGN = 67108864_i32
    D3DSPSM_SIGNNEG = 83886080_i32
    D3DSPSM_COMP = 100663296_i32
    D3DSPSM_X2 = 117440512_i32
    D3DSPSM_X2NEG = 134217728_i32
    D3DSPSM_DZ = 150994944_i32
    D3DSPSM_DW = 167772160_i32
    D3DSPSM_ABS = 184549376_i32
    D3DSPSM_ABSNEG = 201326592_i32
    D3DSPSM_NOT = 218103808_i32
    D3DSPSM_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSHADER_MIN_PRECISION
    D3DMP_DEFAULT = 0_i32
    D3DMP_16 = 1_i32
    D3DMP_2_8 = 2_i32
  end
  enum D3DBASISTYPE
    D3DBASIS_BEZIER = 0_i32
    D3DBASIS_BSPLINE = 1_i32
    D3DBASIS_CATMULL_ROM = 2_i32
    D3DBASIS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DDEGREETYPE
    D3DDEGREE_LINEAR = 1_i32
    D3DDEGREE_QUADRATIC = 2_i32
    D3DDEGREE_CUBIC = 3_i32
    D3DDEGREE_QUINTIC = 5_i32
    D3DDEGREE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DPATCHEDGESTYLE
    D3DPATCHEDGE_DISCRETE = 0_i32
    D3DPATCHEDGE_CONTINUOUS = 1_i32
    D3DPATCHEDGE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSTATEBLOCKTYPE
    D3DSBT_ALL = 1_i32
    D3DSBT_PIXELSTATE = 2_i32
    D3DSBT_VERTEXSTATE = 3_i32
    D3DSBT_FORCE_DWORD = 2147483647_i32
  end
  enum D3DVERTEXBLENDFLAGS
    D3DVBF_DISABLE = 0_i32
    D3DVBF_1WEIGHTS = 1_i32
    D3DVBF_2WEIGHTS = 2_i32
    D3DVBF_3WEIGHTS = 3_i32
    D3DVBF_TWEENING = 255_i32
    D3DVBF_0WEIGHTS = 256_i32
    D3DVBF_FORCE_DWORD = 2147483647_i32
  end
  enum D3DTEXTURETRANSFORMFLAGS
    D3DTTFF_DISABLE = 0_i32
    D3DTTFF_COUNT1 = 1_i32
    D3DTTFF_COUNT2 = 2_i32
    D3DTTFF_COUNT3 = 3_i32
    D3DTTFF_COUNT4 = 4_i32
    D3DTTFF_PROJECTED = 256_i32
    D3DTTFF_FORCE_DWORD = 2147483647_i32
  end
  enum D3DDEVTYPE : UInt32
    D3DDEVTYPE_HAL = 1_u32
    D3DDEVTYPE_REF = 2_u32
    D3DDEVTYPE_SW = 3_u32
    D3DDEVTYPE_NULLREF = 4_u32
    D3DDEVTYPE_FORCE_DWORD = 2147483647_u32
  end
  enum D3DMULTISAMPLE_TYPE
    D3DMULTISAMPLE_NONE = 0_i32
    D3DMULTISAMPLE_NONMASKABLE = 1_i32
    D3DMULTISAMPLE_2_SAMPLES = 2_i32
    D3DMULTISAMPLE_3_SAMPLES = 3_i32
    D3DMULTISAMPLE_4_SAMPLES = 4_i32
    D3DMULTISAMPLE_5_SAMPLES = 5_i32
    D3DMULTISAMPLE_6_SAMPLES = 6_i32
    D3DMULTISAMPLE_7_SAMPLES = 7_i32
    D3DMULTISAMPLE_8_SAMPLES = 8_i32
    D3DMULTISAMPLE_9_SAMPLES = 9_i32
    D3DMULTISAMPLE_10_SAMPLES = 10_i32
    D3DMULTISAMPLE_11_SAMPLES = 11_i32
    D3DMULTISAMPLE_12_SAMPLES = 12_i32
    D3DMULTISAMPLE_13_SAMPLES = 13_i32
    D3DMULTISAMPLE_14_SAMPLES = 14_i32
    D3DMULTISAMPLE_15_SAMPLES = 15_i32
    D3DMULTISAMPLE_16_SAMPLES = 16_i32
    D3DMULTISAMPLE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DFORMAT : UInt32
    D3DFMT_UNKNOWN = 0_u32
    D3DFMT_R8G8B8 = 20_u32
    D3DFMT_A8R8G8B8 = 21_u32
    D3DFMT_X8R8G8B8 = 22_u32
    D3DFMT_R5G6B5 = 23_u32
    D3DFMT_X1R5G5B5 = 24_u32
    D3DFMT_A1R5G5B5 = 25_u32
    D3DFMT_A4R4G4B4 = 26_u32
    D3DFMT_R3G3B2 = 27_u32
    D3DFMT_A8 = 28_u32
    D3DFMT_A8R3G3B2 = 29_u32
    D3DFMT_X4R4G4B4 = 30_u32
    D3DFMT_A2B10G10R10 = 31_u32
    D3DFMT_A8B8G8R8 = 32_u32
    D3DFMT_X8B8G8R8 = 33_u32
    D3DFMT_G16R16 = 34_u32
    D3DFMT_A2R10G10B10 = 35_u32
    D3DFMT_A16B16G16R16 = 36_u32
    D3DFMT_A8P8 = 40_u32
    D3DFMT_P8 = 41_u32
    D3DFMT_L8 = 50_u32
    D3DFMT_A8L8 = 51_u32
    D3DFMT_A4L4 = 52_u32
    D3DFMT_V8U8 = 60_u32
    D3DFMT_L6V5U5 = 61_u32
    D3DFMT_X8L8V8U8 = 62_u32
    D3DFMT_Q8W8V8U8 = 63_u32
    D3DFMT_V16U16 = 64_u32
    D3DFMT_A2W10V10U10 = 67_u32
    D3DFMT_UYVY = 1498831189_u32
    D3DFMT_R8G8_B8G8 = 1195525970_u32
    D3DFMT_YUY2 = 844715353_u32
    D3DFMT_G8R8_G8B8 = 1111970375_u32
    D3DFMT_DXT1 = 827611204_u32
    D3DFMT_DXT2 = 844388420_u32
    D3DFMT_DXT3 = 861165636_u32
    D3DFMT_DXT4 = 877942852_u32
    D3DFMT_DXT5 = 894720068_u32
    D3DFMT_D16_LOCKABLE = 70_u32
    D3DFMT_D32 = 71_u32
    D3DFMT_D15S1 = 73_u32
    D3DFMT_D24S8 = 75_u32
    D3DFMT_D24X8 = 77_u32
    D3DFMT_D24X4S4 = 79_u32
    D3DFMT_D16 = 80_u32
    D3DFMT_D32F_LOCKABLE = 82_u32
    D3DFMT_D24FS8 = 83_u32
    D3DFMT_D32_LOCKABLE = 84_u32
    D3DFMT_S8_LOCKABLE = 85_u32
    D3DFMT_L16 = 81_u32
    D3DFMT_VERTEXDATA = 100_u32
    D3DFMT_INDEX16 = 101_u32
    D3DFMT_INDEX32 = 102_u32
    D3DFMT_Q16W16V16U16 = 110_u32
    D3DFMT_MULTI2_ARGB8 = 827606349_u32
    D3DFMT_R16F = 111_u32
    D3DFMT_G16R16F = 112_u32
    D3DFMT_A16B16G16R16F = 113_u32
    D3DFMT_R32F = 114_u32
    D3DFMT_G32R32F = 115_u32
    D3DFMT_A32B32G32R32F = 116_u32
    D3DFMT_CxV8U8 = 117_u32
    D3DFMT_A1 = 118_u32
    D3DFMT_A2B10G10R10_XR_BIAS = 119_u32
    D3DFMT_BINARYBUFFER = 199_u32
    D3DFMT_FORCE_DWORD = 2147483647_u32
  end
  enum D3DSWAPEFFECT : UInt32
    D3DSWAPEFFECT_DISCARD = 1_u32
    D3DSWAPEFFECT_FLIP = 2_u32
    D3DSWAPEFFECT_COPY = 3_u32
    D3DSWAPEFFECT_OVERLAY = 4_u32
    D3DSWAPEFFECT_FLIPEX = 5_u32
    D3DSWAPEFFECT_FORCE_DWORD = 2147483647_u32
  end
  enum D3DPOOL : UInt32
    D3DPOOL_DEFAULT = 0_u32
    D3DPOOL_MANAGED = 1_u32
    D3DPOOL_SYSTEMMEM = 2_u32
    D3DPOOL_SCRATCH = 3_u32
    D3DPOOL_FORCE_DWORD = 2147483647_u32
  end
  enum D3DBACKBUFFER_TYPE : UInt32
    D3DBACKBUFFER_TYPE_MONO = 0_u32
    D3DBACKBUFFER_TYPE_LEFT = 1_u32
    D3DBACKBUFFER_TYPE_RIGHT = 2_u32
    D3DBACKBUFFER_TYPE_FORCE_DWORD = 2147483647_u32
  end
  enum D3DRESOURCETYPE
    D3DRTYPE_SURFACE = 1_i32
    D3DRTYPE_VOLUME = 2_i32
    D3DRTYPE_TEXTURE = 3_i32
    D3DRTYPE_VOLUMETEXTURE = 4_i32
    D3DRTYPE_CUBETEXTURE = 5_i32
    D3DRTYPE_VERTEXBUFFER = 6_i32
    D3DRTYPE_INDEXBUFFER = 7_i32
    D3DRTYPE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DCUBEMAP_FACES
    D3DCUBEMAP_FACE_POSITIVE_X = 0_i32
    D3DCUBEMAP_FACE_NEGATIVE_X = 1_i32
    D3DCUBEMAP_FACE_POSITIVE_Y = 2_i32
    D3DCUBEMAP_FACE_NEGATIVE_Y = 3_i32
    D3DCUBEMAP_FACE_POSITIVE_Z = 4_i32
    D3DCUBEMAP_FACE_NEGATIVE_Z = 5_i32
    D3DCUBEMAP_FACE_FORCE_DWORD = 2147483647_i32
  end
  enum D3DDEBUGMONITORTOKENS
    D3DDMT_ENABLE = 0_i32
    D3DDMT_DISABLE = 1_i32
    D3DDMT_FORCE_DWORD = 2147483647_i32
  end
  enum D3DQUERYTYPE
    D3DQUERYTYPE_VCACHE = 4_i32
    D3DQUERYTYPE_RESOURCEMANAGER = 5_i32
    D3DQUERYTYPE_VERTEXSTATS = 6_i32
    D3DQUERYTYPE_EVENT = 8_i32
    D3DQUERYTYPE_OCCLUSION = 9_i32
    D3DQUERYTYPE_TIMESTAMP = 10_i32
    D3DQUERYTYPE_TIMESTAMPDISJOINT = 11_i32
    D3DQUERYTYPE_TIMESTAMPFREQ = 12_i32
    D3DQUERYTYPE_PIPELINETIMINGS = 13_i32
    D3DQUERYTYPE_INTERFACETIMINGS = 14_i32
    D3DQUERYTYPE_VERTEXTIMINGS = 15_i32
    D3DQUERYTYPE_PIXELTIMINGS = 16_i32
    D3DQUERYTYPE_BANDWIDTHTIMINGS = 17_i32
    D3DQUERYTYPE_CACHEUTILIZATION = 18_i32
    D3DQUERYTYPE_MEMORYPRESSURE = 19_i32
  end
  enum D3DCOMPOSERECTSOP
    D3DCOMPOSERECTS_COPY = 1_i32
    D3DCOMPOSERECTS_OR = 2_i32
    D3DCOMPOSERECTS_AND = 3_i32
    D3DCOMPOSERECTS_NEG = 4_i32
    D3DCOMPOSERECTS_FORCE_DWORD = 2147483647_i32
  end
  enum D3DSCANLINEORDERING
    D3DSCANLINEORDERING_UNKNOWN = 0_i32
    D3DSCANLINEORDERING_PROGRESSIVE = 1_i32
    D3DSCANLINEORDERING_INTERLACED = 2_i32
  end
  enum D3DDISPLAYROTATION
    D3DDISPLAYROTATION_IDENTITY = 1_i32
    D3DDISPLAYROTATION_90 = 2_i32
    D3DDISPLAYROTATION_180 = 3_i32
    D3DDISPLAYROTATION_270 = 4_i32
  end
  enum D3DAUTHENTICATEDCHANNELTYPE
    D3DAUTHENTICATEDCHANNEL_D3D9 = 1_i32
    D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2_i32
    D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3_i32
  end
  enum D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    PROCESSIDTYPE_UNKNOWN = 0_i32
    PROCESSIDTYPE_DWM = 1_i32
    PROCESSIDTYPE_HANDLE = 2_i32
  end
  enum D3DBUSTYPE
    D3DBUSTYPE_OTHER = 0_i32
    D3DBUSTYPE_PCI = 1_i32
    D3DBUSTYPE_PCIX = 2_i32
    D3DBUSTYPE_PCIEXPRESS = 3_i32
    D3DBUSTYPE_AGP = 4_i32
    D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536_i32
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072_i32
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608_i32
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144_i32
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680_i32
    D3DBUSIMPL_MODIFIER_NON_STANDARD = -2147483648_i32
  end

  @[Extern]
  struct D3DCOLORVALUE
    property r : Float32
    property g : Float32
    property b : Float32
    property a : Float32
    def initialize(@r : Float32, @g : Float32, @b : Float32, @a : Float32)
    end
  end

  @[Extern]
  struct D3DRECT
    property x1 : Int32
    property y1 : Int32
    property x2 : Int32
    property y2 : Int32
    def initialize(@x1 : Int32, @y1 : Int32, @x2 : Int32, @y2 : Int32)
    end
  end

  @[Extern]
  struct D3DVIEWPORT9
    property x : UInt32
    property y : UInt32
    property width : UInt32
    property height : UInt32
    property min_z : Float32
    property max_z : Float32
    def initialize(@x : UInt32, @y : UInt32, @width : UInt32, @height : UInt32, @min_z : Float32, @max_z : Float32)
    end
  end

  @[Extern]
  struct D3DCLIPSTATUS9
    property clip_union : UInt32
    property clip_intersection : UInt32
    def initialize(@clip_union : UInt32, @clip_intersection : UInt32)
    end
  end

  @[Extern]
  struct D3DMATERIAL9
    property diffuse : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property ambient : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property specular : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property emissive : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property power : Float32
    def initialize(@diffuse : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @ambient : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @specular : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @emissive : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @power : Float32)
    end
  end

  @[Extern]
  struct D3DLIGHT9
    property type__ : Win32cr::Graphics::Direct3D9::D3DLIGHTTYPE
    property diffuse : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property specular : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property ambient : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE
    property position : Win32cr::Graphics::Direct3D::D3DVECTOR
    property direction : Win32cr::Graphics::Direct3D::D3DVECTOR
    property range : Float32
    property falloff : Float32
    property attenuation0 : Float32
    property attenuation1 : Float32
    property attenuation2 : Float32
    property theta : Float32
    property phi : Float32
    def initialize(@type__ : Win32cr::Graphics::Direct3D9::D3DLIGHTTYPE, @diffuse : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @specular : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @ambient : Win32cr::Graphics::Direct3D9::D3DCOLORVALUE, @position : Win32cr::Graphics::Direct3D::D3DVECTOR, @direction : Win32cr::Graphics::Direct3D::D3DVECTOR, @range : Float32, @falloff : Float32, @attenuation0 : Float32, @attenuation1 : Float32, @attenuation2 : Float32, @theta : Float32, @phi : Float32)
    end
  end

  @[Extern]
  struct D3DVERTEXELEMENT9
    property stream : UInt16
    property offset : UInt16
    property type__ : UInt8
    property method : UInt8
    property usage : UInt8
    property usage_index : UInt8
    def initialize(@stream : UInt16, @offset : UInt16, @type__ : UInt8, @method : UInt8, @usage : UInt8, @usage_index : UInt8)
    end
  end

  @[Extern]
  struct D3DDISPLAYMODE
    property width : UInt32
    property height : UInt32
    property refresh_rate : UInt32
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    def initialize(@width : UInt32, @height : UInt32, @refresh_rate : UInt32, @format : Win32cr::Graphics::Direct3D9::D3DFORMAT)
    end
  end

  @[Extern]
  struct D3DDEVICE_CREATION_PARAMETERS
    property adapter_ordinal : UInt32
    property device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE
    property hFocusWindow : Win32cr::Foundation::HWND
    property behavior_flags : UInt32
    def initialize(@adapter_ordinal : UInt32, @device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, @hFocusWindow : Win32cr::Foundation::HWND, @behavior_flags : UInt32)
    end
  end

  @[Extern]
  struct D3DPRESENT_PARAMETERS
    property back_buffer_width : UInt32
    property back_buffer_height : UInt32
    property back_buffer_format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property back_buffer_count : UInt32
    property multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE
    property multi_sample_quality : UInt32
    property swap_effect : Win32cr::Graphics::Direct3D9::D3DSWAPEFFECT
    property hDeviceWindow : Win32cr::Foundation::HWND
    property windowed : Win32cr::Foundation::BOOL
    property enable_auto_depth_stencil : Win32cr::Foundation::BOOL
    property auto_depth_stencil_format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property flags : UInt32
    property full_screen_refresh_rate_in_hz : UInt32
    property presentation_interval : UInt32
    def initialize(@back_buffer_width : UInt32, @back_buffer_height : UInt32, @back_buffer_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @back_buffer_count : UInt32, @multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, @multi_sample_quality : UInt32, @swap_effect : Win32cr::Graphics::Direct3D9::D3DSWAPEFFECT, @hDeviceWindow : Win32cr::Foundation::HWND, @windowed : Win32cr::Foundation::BOOL, @enable_auto_depth_stencil : Win32cr::Foundation::BOOL, @auto_depth_stencil_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @flags : UInt32, @full_screen_refresh_rate_in_hz : UInt32, @presentation_interval : UInt32)
    end
  end

  @[Extern]
  struct D3DGAMMARAMP
    property red : UInt16[256]
    property green : UInt16[256]
    property blue : UInt16[256]
    def initialize(@red : UInt16[256], @green : UInt16[256], @blue : UInt16[256])
    end
  end

  @[Extern]
  struct D3DVERTEXBUFFER_DESC
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
    property usage : UInt32
    property pool : Win32cr::Graphics::Direct3D9::D3DPOOL
    property size : UInt32
    property fvf : UInt32
    def initialize(@format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, @usage : UInt32, @pool : Win32cr::Graphics::Direct3D9::D3DPOOL, @size : UInt32, @fvf : UInt32)
    end
  end

  @[Extern]
  struct D3DINDEXBUFFER_DESC
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
    property usage : UInt32
    property pool : Win32cr::Graphics::Direct3D9::D3DPOOL
    property size : UInt32
    def initialize(@format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, @usage : UInt32, @pool : Win32cr::Graphics::Direct3D9::D3DPOOL, @size : UInt32)
    end
  end

  @[Extern]
  struct D3DSURFACE_DESC
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
    property usage : UInt32
    property pool : Win32cr::Graphics::Direct3D9::D3DPOOL
    property multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE
    property multi_sample_quality : UInt32
    property width : UInt32
    property height : UInt32
    def initialize(@format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, @usage : UInt32, @pool : Win32cr::Graphics::Direct3D9::D3DPOOL, @multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, @multi_sample_quality : UInt32, @width : UInt32, @height : UInt32)
    end
  end

  @[Extern]
  struct D3DVOLUME_DESC
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
    property usage : UInt32
    property pool : Win32cr::Graphics::Direct3D9::D3DPOOL
    property width : UInt32
    property height : UInt32
    property depth : UInt32
    def initialize(@format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @type__ : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, @usage : UInt32, @pool : Win32cr::Graphics::Direct3D9::D3DPOOL, @width : UInt32, @height : UInt32, @depth : UInt32)
    end
  end

  @[Extern]
  struct D3DLOCKED_RECT
    property pitch : Int32
    property pBits : Void*
    def initialize(@pitch : Int32, @pBits : Void*)
    end
  end

  @[Extern]
  struct D3DBOX
    property left : UInt32
    property top : UInt32
    property right : UInt32
    property bottom : UInt32
    property front : UInt32
    property back : UInt32
    def initialize(@left : UInt32, @top : UInt32, @right : UInt32, @bottom : UInt32, @front : UInt32, @back : UInt32)
    end
  end

  @[Extern]
  struct D3DLOCKED_BOX
    property row_pitch : Int32
    property slice_pitch : Int32
    property pBits : Void*
    def initialize(@row_pitch : Int32, @slice_pitch : Int32, @pBits : Void*)
    end
  end

  @[Extern]
  struct D3DRANGE
    property offset : UInt32
    property size : UInt32
    def initialize(@offset : UInt32, @size : UInt32)
    end
  end

  @[Extern]
  struct D3DRECTPATCH_INFO
    property start_vertex_offset_width : UInt32
    property start_vertex_offset_height : UInt32
    property width : UInt32
    property height : UInt32
    property stride : UInt32
    property basis : Win32cr::Graphics::Direct3D9::D3DBASISTYPE
    property degree : Win32cr::Graphics::Direct3D9::D3DDEGREETYPE
    def initialize(@start_vertex_offset_width : UInt32, @start_vertex_offset_height : UInt32, @width : UInt32, @height : UInt32, @stride : UInt32, @basis : Win32cr::Graphics::Direct3D9::D3DBASISTYPE, @degree : Win32cr::Graphics::Direct3D9::D3DDEGREETYPE)
    end
  end

  @[Extern]
  struct D3DTRIPATCH_INFO
    property start_vertex_offset : UInt32
    property num_vertices : UInt32
    property basis : Win32cr::Graphics::Direct3D9::D3DBASISTYPE
    property degree : Win32cr::Graphics::Direct3D9::D3DDEGREETYPE
    def initialize(@start_vertex_offset : UInt32, @num_vertices : UInt32, @basis : Win32cr::Graphics::Direct3D9::D3DBASISTYPE, @degree : Win32cr::Graphics::Direct3D9::D3DDEGREETYPE)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct D3DADAPTER_IDENTIFIER9
    property driver : Win32cr::Foundation::CHAR[512]
    property description : Win32cr::Foundation::CHAR[512]
    property device_name : Win32cr::Foundation::CHAR[32]
    property driver_version : Win32cr::Foundation::LARGE_INTEGER
    property vendor_id : UInt32
    property device_id : UInt32
    property sub_sys_id : UInt32
    property revision : UInt32
    property device_identifier : LibC::GUID
    property whql_level : UInt32
    def initialize(@driver : Win32cr::Foundation::CHAR[512], @description : Win32cr::Foundation::CHAR[512], @device_name : Win32cr::Foundation::CHAR[32], @driver_version : Win32cr::Foundation::LARGE_INTEGER, @vendor_id : UInt32, @device_id : UInt32, @sub_sys_id : UInt32, @revision : UInt32, @device_identifier : LibC::GUID, @whql_level : UInt32)
    end
  end
  {% end %}

  @[Extern]
  struct D3DRASTER_STATUS
    property in_v_blank : Win32cr::Foundation::BOOL
    property scan_line : UInt32
    def initialize(@in_v_blank : Win32cr::Foundation::BOOL, @scan_line : UInt32)
    end
  end

  @[Extern]
  struct D3DRESOURCESTATS
    property bThrashing : Win32cr::Foundation::BOOL
    property approx_bytes_downloaded : UInt32
    property num_evicts : UInt32
    property num_vid_creates : UInt32
    property last_pri : UInt32
    property num_used : UInt32
    property num_used_in_vid_mem : UInt32
    property working_set : UInt32
    property working_set_bytes : UInt32
    property total_managed : UInt32
    property total_bytes : UInt32
    def initialize(@bThrashing : Win32cr::Foundation::BOOL, @approx_bytes_downloaded : UInt32, @num_evicts : UInt32, @num_vid_creates : UInt32, @last_pri : UInt32, @num_used : UInt32, @num_used_in_vid_mem : UInt32, @working_set : UInt32, @working_set_bytes : UInt32, @total_managed : UInt32, @total_bytes : UInt32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_RESOURCEMANAGER
    property stats : Win32cr::Graphics::Direct3D9::D3DRESOURCESTATS[8]
    def initialize(@stats : Win32cr::Graphics::Direct3D9::D3DRESOURCESTATS[8])
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3DVERTEXSTATS
    property num_rendered_triangles : UInt32
    property num_extra_clipping_triangles : UInt32
    def initialize(@num_rendered_triangles : UInt32, @num_extra_clipping_triangles : UInt32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_VCACHE
    property pattern : UInt32
    property opt_method : UInt32
    property cache_size : UInt32
    property magic_number : UInt32
    def initialize(@pattern : UInt32, @opt_method : UInt32, @cache_size : UInt32, @magic_number : UInt32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3D9PIPELINETIMINGS
    property vertex_processing_time_percent : Float32
    property pixel_processing_time_percent : Float32
    property other_gpu_processing_time_percent : Float32
    property gpu_idle_time_percent : Float32
    def initialize(@vertex_processing_time_percent : Float32, @pixel_processing_time_percent : Float32, @other_gpu_processing_time_percent : Float32, @gpu_idle_time_percent : Float32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3D9INTERFACETIMINGS
    property waiting_for_gpu_to_use_application_resource_time_percent : Float32
    property waiting_for_gpu_to_accept_more_commands_time_percent : Float32
    property waiting_for_gpu_to_stay_within_latency_time_percent : Float32
    property waiting_for_gpu_exclusive_resource_time_percent : Float32
    property waiting_for_gpu_other_time_percent : Float32
    def initialize(@waiting_for_gpu_to_use_application_resource_time_percent : Float32, @waiting_for_gpu_to_accept_more_commands_time_percent : Float32, @waiting_for_gpu_to_stay_within_latency_time_percent : Float32, @waiting_for_gpu_exclusive_resource_time_percent : Float32, @waiting_for_gpu_other_time_percent : Float32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3D9STAGETIMINGS
    property memory_processing_percent : Float32
    property computation_processing_percent : Float32
    def initialize(@memory_processing_percent : Float32, @computation_processing_percent : Float32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3D9BANDWIDTHTIMINGS
    property max_bandwidth_utilized : Float32
    property front_end_upload_memory_utilized_percent : Float32
    property vertex_rate_utilized_percent : Float32
    property triangle_setup_rate_utilized_percent : Float32
    property fill_rate_utilized_percent : Float32
    def initialize(@max_bandwidth_utilized : Float32, @front_end_upload_memory_utilized_percent : Float32, @vertex_rate_utilized_percent : Float32, @triangle_setup_rate_utilized_percent : Float32, @fill_rate_utilized_percent : Float32)
    end
  end

  @[Extern]
  struct D3DDEVINFO_D3D9CACHEUTILIZATION
    property texture_cache_hit_rate : Float32
    property post_transform_vertex_cache_hit_rate : Float32
    def initialize(@texture_cache_hit_rate : Float32, @post_transform_vertex_cache_hit_rate : Float32)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct D3DMEMORYPRESSURE
    property bytes_evicted_from_process : UInt64
    property size_of_inefficient_allocation : UInt64
    property level_of_efficiency : UInt32
    def initialize(@bytes_evicted_from_process : UInt64, @size_of_inefficient_allocation : UInt64, @level_of_efficiency : UInt32)
    end
  end
  {% end %}

  @[Extern]
  struct D3DCOMPOSERECTDESC
    property x : UInt16
    property y : UInt16
    property width : UInt16
    property height : UInt16
    def initialize(@x : UInt16, @y : UInt16, @width : UInt16, @height : UInt16)
    end
  end

  @[Extern]
  struct D3DCOMPOSERECTDESTINATION
    property src_rect_index : UInt16
    property reserved : UInt16
    property x : Int16
    property y : Int16
    def initialize(@src_rect_index : UInt16, @reserved : UInt16, @x : Int16, @y : Int16)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct D3DPRESENTSTATS
    property present_count : UInt32
    property present_refresh_count : UInt32
    property sync_refresh_count : UInt32
    property sync_qpc_time : Win32cr::Foundation::LARGE_INTEGER
    property sync_gpu_time : Win32cr::Foundation::LARGE_INTEGER
    def initialize(@present_count : UInt32, @present_refresh_count : UInt32, @sync_refresh_count : UInt32, @sync_qpc_time : Win32cr::Foundation::LARGE_INTEGER, @sync_gpu_time : Win32cr::Foundation::LARGE_INTEGER)
    end
  end
  {% end %}

  @[Extern]
  struct D3DDISPLAYMODEEX
    property size : UInt32
    property width : UInt32
    property height : UInt32
    property refresh_rate : UInt32
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property scan_line_ordering : Win32cr::Graphics::Direct3D9::D3DSCANLINEORDERING
    def initialize(@size : UInt32, @width : UInt32, @height : UInt32, @refresh_rate : UInt32, @format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @scan_line_ordering : Win32cr::Graphics::Direct3D9::D3DSCANLINEORDERING)
    end
  end

  @[Extern]
  struct D3DDISPLAYMODEFILTER
    property size : UInt32
    property format : Win32cr::Graphics::Direct3D9::D3DFORMAT
    property scan_line_ordering : Win32cr::Graphics::Direct3D9::D3DSCANLINEORDERING
    def initialize(@size : UInt32, @format : Win32cr::Graphics::Direct3D9::D3DFORMAT, @scan_line_ordering : Win32cr::Graphics::Direct3D9::D3DSCANLINEORDERING)
    end
  end

  @[Extern]
  struct D3D_OMAC
    property omac : UInt8[16]
    def initialize(@omac : UInt8[16])
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property query_type : LibC::GUID
    property hChannel : Win32cr::Foundation::HANDLE
    property sequence_number : UInt32
    def initialize(@query_type : LibC::GUID, @hChannel : Win32cr::Foundation::HANDLE, @sequence_number : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property omac : Win32cr::Graphics::Direct3D9::D3D_OMAC
    property query_type : LibC::GUID
    property hChannel : Win32cr::Foundation::HANDLE
    property sequence_number : UInt32
    property return_code : Win32cr::Foundation::HRESULT
    def initialize(@omac : Win32cr::Graphics::Direct3D9::D3D_OMAC, @query_type : LibC::GUID, @hChannel : Win32cr::Foundation::HANDLE, @sequence_number : UInt32, @return_code : Win32cr::Foundation::HRESULT)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property anonymous : Anonymous_e__Struct_
    property value : UInt32

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      struct Anonymous_e__Struct_
    property _bitfield : UInt32
    def initialize(@_bitfield : UInt32)
    end
      end

    def initialize(@anonymous : Anonymous_e__Struct_, @value : UInt32)
    end
    end

    def initialize(@anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property protection_flags : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @protection_flags : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property channel_type : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @channel_type : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property device_handle : Win32cr::Foundation::HANDLE
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @device_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
    property input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property dxva2_decode_handle : Win32cr::Foundation::HANDLE
    def initialize(@input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT, @dxva2_decode_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property dxva2_decode_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property device_handle : Win32cr::Foundation::HANDLE
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @dxva2_decode_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @device_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property num_restricted_shared_resource_processes : UInt32
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @num_restricted_shared_resource_processes : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
    property input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property process_index : UInt32
    def initialize(@input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT, @process_index : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property process_index : UInt32
    property process_identifer : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    property process_handle : Win32cr::Foundation::HANDLE
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @process_index : UInt32, @process_identifer : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE, @process_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property num_unrestricted_protected_shared_resources : UInt32
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @num_unrestricted_protected_shared_resources : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
    property input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property device_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    def initialize(@input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT, @device_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property device_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property num_output_i_ds : UInt32
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @device_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @num_output_i_ds : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
    property input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property device_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property output_id_index : UInt32
    def initialize(@input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT, @device_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @output_id_index : UInt32)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property device_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property output_id_index : UInt32
    property output_id : UInt64
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @device_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @output_id_index : UInt32, @output_id : UInt64)
    end
  end
  {% end %}

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property bus_type : Win32cr::Graphics::Direct3D9::D3DBUSTYPE
    property bAccessibleInContiguousBlocks : Win32cr::Foundation::BOOL
    property bAccessibleInNonContiguousBlocks : Win32cr::Foundation::BOOL
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @bus_type : Win32cr::Graphics::Direct3D9::D3DBUSTYPE, @bAccessibleInContiguousBlocks : Win32cr::Foundation::BOOL, @bAccessibleInNonContiguousBlocks : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property num_encryption_guids : UInt32
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @num_encryption_guids : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
    property input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    property encryption_guid_index : UInt32
    def initialize(@input : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_INPUT, @encryption_guid_index : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property encryption_guid_index : UInt32
    property encryption_guid : LibC::GUID
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @encryption_guid_index : UInt32, @encryption_guid : LibC::GUID)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property encryption_guid : LibC::GUID
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @encryption_guid : LibC::GUID)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property omac : Win32cr::Graphics::Direct3D9::D3D_OMAC
    property configure_type : LibC::GUID
    property hChannel : Win32cr::Foundation::HANDLE
    property sequence_number : UInt32
    def initialize(@omac : Win32cr::Graphics::Direct3D9::D3D_OMAC, @configure_type : LibC::GUID, @hChannel : Win32cr::Foundation::HANDLE, @sequence_number : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
    property omac : Win32cr::Graphics::Direct3D9::D3D_OMAC
    property configure_type : LibC::GUID
    property hChannel : Win32cr::Foundation::HANDLE
    property sequence_number : UInt32
    property return_code : Win32cr::Foundation::HRESULT
    def initialize(@omac : Win32cr::Graphics::Direct3D9::D3D_OMAC, @configure_type : LibC::GUID, @hChannel : Win32cr::Foundation::HANDLE, @sequence_number : UInt32, @return_code : Win32cr::Foundation::HRESULT)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
    property parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property start_sequence_query : UInt32
    property start_sequence_configure : UInt32
    def initialize(@parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT, @start_sequence_query : UInt32, @start_sequence_configure : UInt32)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
    property parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property protections : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    def initialize(@parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT, @protections : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
    property parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property dxva2_decode_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property device_handle : Win32cr::Foundation::HANDLE
    def initialize(@parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT, @dxva2_decode_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @device_handle : Win32cr::Foundation::HANDLE)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
    property parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property process_identifer_type : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    property process_handle : Win32cr::Foundation::HANDLE
    property allow_access : Win32cr::Foundation::BOOL
    def initialize(@parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT, @process_identifer_type : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE, @process_handle : Win32cr::Foundation::HANDLE, @allow_access : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
    property parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    property encryption_guid : LibC::GUID
    def initialize(@parameters : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT, @encryption_guid : LibC::GUID)
    end
  end

  @[Extern]
  struct D3DENCRYPTED_BLOCK_INFO
    property num_encrypted_bytes_at_beginning : UInt32
    property num_bytes_in_skip_pattern : UInt32
    property num_bytes_in_encrypt_pattern : UInt32
    def initialize(@num_encrypted_bytes_at_beginning : UInt32, @num_bytes_in_skip_pattern : UInt32, @num_bytes_in_encrypt_pattern : UInt32)
    end
  end

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  struct D3DAES_CTR_IV
    property iv : UInt64
    property count : UInt64
    def initialize(@iv : UInt64, @count : UInt64)
    end
  end
  {% end %}

  @[Extern]
  struct D3DVSHADERCAPS2_0
    property caps : UInt32
    property dynamic_flow_control_depth : Int32
    property num_temps : Int32
    property static_flow_control_depth : Int32
    def initialize(@caps : UInt32, @dynamic_flow_control_depth : Int32, @num_temps : Int32, @static_flow_control_depth : Int32)
    end
  end

  @[Extern]
  struct D3DPSHADERCAPS2_0
    property caps : UInt32
    property dynamic_flow_control_depth : Int32
    property num_temps : Int32
    property static_flow_control_depth : Int32
    property num_instruction_slots : Int32
    def initialize(@caps : UInt32, @dynamic_flow_control_depth : Int32, @num_temps : Int32, @static_flow_control_depth : Int32, @num_instruction_slots : Int32)
    end
  end

  @[Extern]
  struct D3DCAPS9
    property device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE
    property adapter_ordinal : UInt32
    property caps : UInt32
    property caps2 : UInt32
    property caps3 : UInt32
    property presentation_intervals : UInt32
    property cursor_caps : UInt32
    property dev_caps : UInt32
    property primitive_misc_caps : UInt32
    property raster_caps : UInt32
    property z_cmp_caps : UInt32
    property src_blend_caps : UInt32
    property dest_blend_caps : UInt32
    property alpha_cmp_caps : UInt32
    property shade_caps : UInt32
    property texture_caps : UInt32
    property texture_filter_caps : UInt32
    property cube_texture_filter_caps : UInt32
    property volume_texture_filter_caps : UInt32
    property texture_address_caps : UInt32
    property volume_texture_address_caps : UInt32
    property line_caps : UInt32
    property max_texture_width : UInt32
    property max_texture_height : UInt32
    property max_volume_extent : UInt32
    property max_texture_repeat : UInt32
    property max_texture_aspect_ratio : UInt32
    property max_anisotropy : UInt32
    property max_vertex_w : Float32
    property guard_band_left : Float32
    property guard_band_top : Float32
    property guard_band_right : Float32
    property guard_band_bottom : Float32
    property extents_adjust : Float32
    property stencil_caps : UInt32
    property fvf_caps : UInt32
    property texture_op_caps : UInt32
    property max_texture_blend_stages : UInt32
    property max_simultaneous_textures : UInt32
    property vertex_processing_caps : UInt32
    property max_active_lights : UInt32
    property max_user_clip_planes : UInt32
    property max_vertex_blend_matrices : UInt32
    property max_vertex_blend_matrix_index : UInt32
    property max_point_size : Float32
    property max_primitive_count : UInt32
    property max_vertex_index : UInt32
    property max_streams : UInt32
    property max_stream_stride : UInt32
    property vertex_shader_version : UInt32
    property max_vertex_shader_const : UInt32
    property pixel_shader_version : UInt32
    property pixel_shader1x_max_value : Float32
    property dev_caps2 : UInt32
    property max_npatch_tessellation_level : Float32
    property reserved5 : UInt32
    property master_adapter_ordinal : UInt32
    property adapter_ordinal_in_group : UInt32
    property number_of_adapters_in_group : UInt32
    property decl_types : UInt32
    property num_simultaneous_r_ts : UInt32
    property stretch_rect_filter_caps : UInt32
    property vs20_caps : Win32cr::Graphics::Direct3D9::D3DVSHADERCAPS2_0
    property ps20_caps : Win32cr::Graphics::Direct3D9::D3DPSHADERCAPS2_0
    property vertex_texture_filter_caps : UInt32
    property max_v_shader_instructions_executed : UInt32
    property max_p_shader_instructions_executed : UInt32
    property max_vertex_shader30_instruction_slots : UInt32
    property max_pixel_shader30_instruction_slots : UInt32
    def initialize(@device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, @adapter_ordinal : UInt32, @caps : UInt32, @caps2 : UInt32, @caps3 : UInt32, @presentation_intervals : UInt32, @cursor_caps : UInt32, @dev_caps : UInt32, @primitive_misc_caps : UInt32, @raster_caps : UInt32, @z_cmp_caps : UInt32, @src_blend_caps : UInt32, @dest_blend_caps : UInt32, @alpha_cmp_caps : UInt32, @shade_caps : UInt32, @texture_caps : UInt32, @texture_filter_caps : UInt32, @cube_texture_filter_caps : UInt32, @volume_texture_filter_caps : UInt32, @texture_address_caps : UInt32, @volume_texture_address_caps : UInt32, @line_caps : UInt32, @max_texture_width : UInt32, @max_texture_height : UInt32, @max_volume_extent : UInt32, @max_texture_repeat : UInt32, @max_texture_aspect_ratio : UInt32, @max_anisotropy : UInt32, @max_vertex_w : Float32, @guard_band_left : Float32, @guard_band_top : Float32, @guard_band_right : Float32, @guard_band_bottom : Float32, @extents_adjust : Float32, @stencil_caps : UInt32, @fvf_caps : UInt32, @texture_op_caps : UInt32, @max_texture_blend_stages : UInt32, @max_simultaneous_textures : UInt32, @vertex_processing_caps : UInt32, @max_active_lights : UInt32, @max_user_clip_planes : UInt32, @max_vertex_blend_matrices : UInt32, @max_vertex_blend_matrix_index : UInt32, @max_point_size : Float32, @max_primitive_count : UInt32, @max_vertex_index : UInt32, @max_streams : UInt32, @max_stream_stride : UInt32, @vertex_shader_version : UInt32, @max_vertex_shader_const : UInt32, @pixel_shader_version : UInt32, @pixel_shader1x_max_value : Float32, @dev_caps2 : UInt32, @max_npatch_tessellation_level : Float32, @reserved5 : UInt32, @master_adapter_ordinal : UInt32, @adapter_ordinal_in_group : UInt32, @number_of_adapters_in_group : UInt32, @decl_types : UInt32, @num_simultaneous_r_ts : UInt32, @stretch_rect_filter_caps : UInt32, @vs20_caps : Win32cr::Graphics::Direct3D9::D3DVSHADERCAPS2_0, @ps20_caps : Win32cr::Graphics::Direct3D9::D3DPSHADERCAPS2_0, @vertex_texture_filter_caps : UInt32, @max_v_shader_instructions_executed : UInt32, @max_p_shader_instructions_executed : UInt32, @max_vertex_shader30_instruction_slots : UInt32, @max_pixel_shader30_instruction_slots : UInt32)
    end
  end

  {% if flag?(:i386) %}
  @[Extern]
  struct D3DADAPTER_IDENTIFIER9
    property driver : Win32cr::Foundation::CHAR[512]
    property description : Win32cr::Foundation::CHAR[512]
    property device_name : Win32cr::Foundation::CHAR[32]
    property driver_version : Win32cr::Foundation::LARGE_INTEGER
    property vendor_id : UInt32
    property device_id : UInt32
    property sub_sys_id : UInt32
    property revision : UInt32
    property device_identifier : LibC::GUID
    property whql_level : UInt32
    def initialize(@driver : Win32cr::Foundation::CHAR[512], @description : Win32cr::Foundation::CHAR[512], @device_name : Win32cr::Foundation::CHAR[32], @driver_version : Win32cr::Foundation::LARGE_INTEGER, @vendor_id : UInt32, @device_id : UInt32, @sub_sys_id : UInt32, @revision : UInt32, @device_identifier : LibC::GUID, @whql_level : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct D3DMEMORYPRESSURE
    property bytes_evicted_from_process : UInt64
    property size_of_inefficient_allocation : UInt64
    property level_of_efficiency : UInt32
    def initialize(@bytes_evicted_from_process : UInt64, @size_of_inefficient_allocation : UInt64, @level_of_efficiency : UInt32)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct D3DPRESENTSTATS
    property present_count : UInt32
    property present_refresh_count : UInt32
    property sync_refresh_count : UInt32
    property sync_qpc_time : Win32cr::Foundation::LARGE_INTEGER
    property sync_gpu_time : Win32cr::Foundation::LARGE_INTEGER
    def initialize(@present_count : UInt32, @present_refresh_count : UInt32, @sync_refresh_count : UInt32, @sync_qpc_time : Win32cr::Foundation::LARGE_INTEGER, @sync_gpu_time : Win32cr::Foundation::LARGE_INTEGER)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
    property output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    property device_handle : Win32cr::Foundation::HANDLE
    property crypto_session_handle : Win32cr::Foundation::HANDLE
    property output_id_index : UInt32
    property output_id : UInt64
    def initialize(@output : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT, @device_handle : Win32cr::Foundation::HANDLE, @crypto_session_handle : Win32cr::Foundation::HANDLE, @output_id_index : UInt32, @output_id : UInt64)
    end
  end
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  struct D3DAES_CTR_IV
    property iv : UInt64
    property count : UInt64
    def initialize(@iv : UInt64, @count : UInt64)
    end
  end
  {% end %}

  @[Extern]
  record IDirect3D9Vtbl,
    query_interface : Proc(IDirect3D9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3D9*, UInt32),
    release : Proc(IDirect3D9*, UInt32),
    register_software_device : Proc(IDirect3D9*, Void*, Win32cr::Foundation::HRESULT),
    get_adapter_count : Proc(IDirect3D9*, UInt32),
    get_adapter_identifier : Proc(IDirect3D9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DADAPTER_IDENTIFIER9*, Win32cr::Foundation::HRESULT),
    get_adapter_mode_count : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32),
    enum_adapter_modes : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_adapter_display_mode : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    check_device_type : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    check_device_format : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    check_device_multi_sample_type : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32*, Win32cr::Foundation::HRESULT),
    check_depth_stencil_match : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    check_device_format_conversion : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    get_device_caps : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DCAPS9*, Win32cr::Foundation::HRESULT),
    get_adapter_monitor : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Gdi::HMONITOR),
    create_device : Proc(IDirect3D9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Foundation::HWND, UInt32, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3D9, lpVtbl : IDirect3D9Vtbl* do
    GUID = LibC::GUID.new(0x81bdcbca_u32, 0x64d4_u16, 0x426d_u16, StaticArray[0xae_u8, 0x8d_u8, 0xad_u8, 0x1_u8, 0x47_u8, 0xf4_u8, 0x27_u8, 0x5c_u8])
    def query_interface(this : IDirect3D9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3D9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3D9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_software_device(this : IDirect3D9*, pInitializeFunction : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_software_device.call(this, pInitializeFunction)
    end
    def get_adapter_count(this : IDirect3D9*) : UInt32
      @lpVtbl.try &.value.get_adapter_count.call(this)
    end
    def get_adapter_identifier(this : IDirect3D9*, adapter : UInt32, flags : UInt32, pIdentifier : Win32cr::Graphics::Direct3D9::D3DADAPTER_IDENTIFIER9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_identifier.call(this, adapter, flags, pIdentifier)
    end
    def get_adapter_mode_count(this : IDirect3D9*, adapter : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : UInt32
      @lpVtbl.try &.value.get_adapter_mode_count.call(this, adapter, format)
    end
    def enum_adapter_modes(this : IDirect3D9*, adapter : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, mode : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_adapter_modes.call(this, adapter, format, mode, pMode)
    end
    def get_adapter_display_mode(this : IDirect3D9*, adapter : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_display_mode.call(this, adapter, pMode)
    end
    def check_device_type(this : IDirect3D9*, adapter : UInt32, dev_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, back_buffer_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, bWindowed : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_type.call(this, adapter, dev_type, adapter_format, back_buffer_format, bWindowed)
    end
    def check_device_format(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, usage : UInt32, r_type : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, check_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_format.call(this, adapter, device_type, adapter_format, usage, r_type, check_format)
    end
    def check_device_multi_sample_type(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, surface_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, windowed : Win32cr::Foundation::BOOL, multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, pQualityLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_multi_sample_type.call(this, adapter, device_type, surface_format, windowed, multi_sample_type, pQualityLevels)
    end
    def check_depth_stencil_match(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, depth_stencil_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_depth_stencil_match.call(this, adapter, device_type, adapter_format, render_target_format, depth_stencil_format)
    end
    def check_device_format_conversion(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, source_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_format_conversion.call(this, adapter, device_type, source_format, target_format)
    end
    def get_device_caps(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, pCaps : Win32cr::Graphics::Direct3D9::D3DCAPS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_caps.call(this, adapter, device_type, pCaps)
    end
    def get_adapter_monitor(this : IDirect3D9*, adapter : UInt32) : Win32cr::Graphics::Gdi::HMONITOR
      @lpVtbl.try &.value.get_adapter_monitor.call(this, adapter)
    end
    def create_device(this : IDirect3D9*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, hFocusWindow : Win32cr::Foundation::HWND, behavior_flags : UInt32, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, ppReturnedDeviceInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device.call(this, adapter, device_type, hFocusWindow, behavior_flags, pPresentationParameters, ppReturnedDeviceInterface)
    end

  end

  @[Extern]
  record IDirect3DDevice9Vtbl,
    query_interface : Proc(IDirect3DDevice9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DDevice9*, UInt32),
    release : Proc(IDirect3DDevice9*, UInt32),
    test_cooperative_level : Proc(IDirect3DDevice9*, Win32cr::Foundation::HRESULT),
    get_available_texture_mem : Proc(IDirect3DDevice9*, UInt32),
    evict_managed_resources : Proc(IDirect3DDevice9*, Win32cr::Foundation::HRESULT),
    get_direct3_d : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    get_device_caps : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DCAPS9*, Win32cr::Foundation::HRESULT),
    get_display_mode : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_creation_parameters : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DDEVICE_CREATION_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_cursor_properties : Proc(IDirect3DDevice9*, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_cursor_position : Proc(IDirect3DDevice9*, Int32, Int32, UInt32, Void),
    show_cursor : Proc(IDirect3DDevice9*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL),
    create_additional_swap_chain : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Void**, Win32cr::Foundation::HRESULT),
    get_swap_chain : Proc(IDirect3DDevice9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_number_of_swap_chains : Proc(IDirect3DDevice9*, UInt32),
    reset : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    present : Proc(IDirect3DDevice9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::RGNDATA*, Win32cr::Foundation::HRESULT),
    get_back_buffer : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_raster_status : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*, Win32cr::Foundation::HRESULT),
    set_dialog_box_mode : Proc(IDirect3DDevice9*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_gamma_ramp : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*, Void),
    get_gamma_ramp : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*, Void),
    create_texture : Proc(IDirect3DDevice9*, UInt32, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_volume_texture : Proc(IDirect3DDevice9*, UInt32, UInt32, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_cube_texture : Proc(IDirect3DDevice9*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_vertex_buffer : Proc(IDirect3DDevice9*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_index_buffer : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_render_target : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_depth_stencil_surface : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    update_surface : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::RECT*, Void*, Win32cr::Foundation::POINT*, Win32cr::Foundation::HRESULT),
    update_texture : Proc(IDirect3DDevice9*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_render_target_data : Proc(IDirect3DDevice9*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_front_buffer_data : Proc(IDirect3DDevice9*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    stretch_rect : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::RECT*, Void*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    color_fill : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    create_offscreen_plain_surface : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    set_render_target : Proc(IDirect3DDevice9*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_render_target : Proc(IDirect3DDevice9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_depth_stencil_surface : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::HRESULT),
    get_depth_stencil_surface : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    begin_scene : Proc(IDirect3DDevice9*, Win32cr::Foundation::HRESULT),
    end_scene : Proc(IDirect3DDevice9*, Win32cr::Foundation::HRESULT),
    clear : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DRECT*, UInt32, UInt32, Float32, UInt32, Win32cr::Foundation::HRESULT),
    set_transform : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    get_transform : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    multiply_transform : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    set_viewport : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*, Win32cr::Foundation::HRESULT),
    get_viewport : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*, Win32cr::Foundation::HRESULT),
    set_material : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DMATERIAL9*, Win32cr::Foundation::HRESULT),
    get_material : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DMATERIAL9*, Win32cr::Foundation::HRESULT),
    set_light : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DLIGHT9*, Win32cr::Foundation::HRESULT),
    get_light : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DLIGHT9*, Win32cr::Foundation::HRESULT),
    light_enable : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_light_enable : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_clip_plane : Proc(IDirect3DDevice9*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    get_clip_plane : Proc(IDirect3DDevice9*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_render_state : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    get_render_state : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    create_state_block : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DSTATEBLOCKTYPE, Void**, Win32cr::Foundation::HRESULT),
    begin_state_block : Proc(IDirect3DDevice9*, Win32cr::Foundation::HRESULT),
    end_state_block : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    set_clip_status : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*, Win32cr::Foundation::HRESULT),
    get_clip_status : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*, Win32cr::Foundation::HRESULT),
    get_texture : Proc(IDirect3DDevice9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_texture : Proc(IDirect3DDevice9*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_texture_stage_state : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    set_texture_stage_state : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    get_sampler_state : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    set_sampler_state : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    validate_device : Proc(IDirect3DDevice9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_palette_entries : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    get_palette_entries : Proc(IDirect3DDevice9*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    set_current_texture_palette : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_texture_palette : Proc(IDirect3DDevice9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_scissor_rect : Proc(IDirect3DDevice9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_scissor_rect : Proc(IDirect3DDevice9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_software_vertex_processing : Proc(IDirect3DDevice9*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_software_vertex_processing : Proc(IDirect3DDevice9*, Win32cr::Foundation::BOOL),
    set_n_patch_mode : Proc(IDirect3DDevice9*, Float32, Win32cr::Foundation::HRESULT),
    get_n_patch_mode : Proc(IDirect3DDevice9*, Float32),
    draw_primitive : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    draw_indexed_primitive : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, Int32, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    draw_primitive_up : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    draw_indexed_primitive_up : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, UInt32, UInt32, Void*, Win32cr::Graphics::Direct3D9::D3DFORMAT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    process_vertices : Proc(IDirect3DDevice9*, UInt32, UInt32, UInt32, Void*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_vertex_declaration : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_declaration : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::HRESULT),
    get_vertex_declaration : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    set_fvf : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::HRESULT),
    get_fvf : Proc(IDirect3DDevice9*, UInt32*, Win32cr::Foundation::HRESULT),
    create_vertex_shader : Proc(IDirect3DDevice9*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_shader : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::HRESULT),
    get_vertex_shader : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_f : Proc(IDirect3DDevice9*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_f : Proc(IDirect3DDevice9*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_i : Proc(IDirect3DDevice9*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_i : Proc(IDirect3DDevice9*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_b : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_b : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    set_stream_source : Proc(IDirect3DDevice9*, UInt32, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_source : Proc(IDirect3DDevice9*, UInt32, Void**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_source_freq : Proc(IDirect3DDevice9*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_source_freq : Proc(IDirect3DDevice9*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_indices : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::HRESULT),
    get_indices : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    create_pixel_shader : Proc(IDirect3DDevice9*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    set_pixel_shader : Proc(IDirect3DDevice9*, Void*, Win32cr::Foundation::HRESULT),
    get_pixel_shader : Proc(IDirect3DDevice9*, Void**, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_f : Proc(IDirect3DDevice9*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_f : Proc(IDirect3DDevice9*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_i : Proc(IDirect3DDevice9*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_i : Proc(IDirect3DDevice9*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_b : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_b : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    draw_rect_patch : Proc(IDirect3DDevice9*, UInt32, Float32*, Win32cr::Graphics::Direct3D9::D3DRECTPATCH_INFO*, Win32cr::Foundation::HRESULT),
    draw_tri_patch : Proc(IDirect3DDevice9*, UInt32, Float32*, Win32cr::Graphics::Direct3D9::D3DTRIPATCH_INFO*, Win32cr::Foundation::HRESULT),
    delete_patch : Proc(IDirect3DDevice9*, UInt32, Win32cr::Foundation::HRESULT),
    create_query : Proc(IDirect3DDevice9*, Win32cr::Graphics::Direct3D9::D3DQUERYTYPE, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DDevice9, lpVtbl : IDirect3DDevice9Vtbl* do
    GUID = LibC::GUID.new(0xd0223b96_u32, 0xbf7a_u16, 0x43fd_u16, StaticArray[0x92_u8, 0xbd_u8, 0xa4_u8, 0x3b_u8, 0xd_u8, 0x82_u8, 0xb9_u8, 0xeb_u8])
    def query_interface(this : IDirect3DDevice9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DDevice9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DDevice9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def test_cooperative_level(this : IDirect3DDevice9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.test_cooperative_level.call(this)
    end
    def get_available_texture_mem(this : IDirect3DDevice9*) : UInt32
      @lpVtbl.try &.value.get_available_texture_mem.call(this)
    end
    def evict_managed_resources(this : IDirect3DDevice9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict_managed_resources.call(this)
    end
    def get_direct3_d(this : IDirect3DDevice9*, ppD3D9 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct3_d.call(this, ppD3D9)
    end
    def get_device_caps(this : IDirect3DDevice9*, pCaps : Win32cr::Graphics::Direct3D9::D3DCAPS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_caps.call(this, pCaps)
    end
    def get_display_mode(this : IDirect3DDevice9*, iSwapChain : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode.call(this, iSwapChain, pMode)
    end
    def get_creation_parameters(this : IDirect3DDevice9*, pParameters : Win32cr::Graphics::Direct3D9::D3DDEVICE_CREATION_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_creation_parameters.call(this, pParameters)
    end
    def set_cursor_properties(this : IDirect3DDevice9*, x_hot_spot : UInt32, y_hot_spot : UInt32, pCursorBitmap : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cursor_properties.call(this, x_hot_spot, y_hot_spot, pCursorBitmap)
    end
    def set_cursor_position(this : IDirect3DDevice9*, x : Int32, y : Int32, flags : UInt32) : Void
      @lpVtbl.try &.value.set_cursor_position.call(this, x, y, flags)
    end
    def show_cursor(this : IDirect3DDevice9*, bShow : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.show_cursor.call(this, bShow)
    end
    def create_additional_swap_chain(this : IDirect3DDevice9*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, pSwapChain : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_additional_swap_chain.call(this, pPresentationParameters, pSwapChain)
    end
    def get_swap_chain(this : IDirect3DDevice9*, iSwapChain : UInt32, pSwapChain : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_swap_chain.call(this, iSwapChain, pSwapChain)
    end
    def get_number_of_swap_chains(this : IDirect3DDevice9*) : UInt32
      @lpVtbl.try &.value.get_number_of_swap_chains.call(this)
    end
    def reset(this : IDirect3DDevice9*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pPresentationParameters)
    end
    def present(this : IDirect3DDevice9*, pSourceRect : Win32cr::Foundation::RECT*, pDestRect : Win32cr::Foundation::RECT*, hDestWindowOverride : Win32cr::Foundation::HWND, pDirtyRegion : Win32cr::Graphics::Gdi::RGNDATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present.call(this, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion)
    end
    def get_back_buffer(this : IDirect3DDevice9*, iSwapChain : UInt32, iBackBuffer : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, ppBackBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_back_buffer.call(this, iSwapChain, iBackBuffer, type__, ppBackBuffer)
    end
    def get_raster_status(this : IDirect3DDevice9*, iSwapChain : UInt32, pRasterStatus : Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raster_status.call(this, iSwapChain, pRasterStatus)
    end
    def set_dialog_box_mode(this : IDirect3DDevice9*, bEnableDialogs : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dialog_box_mode.call(this, bEnableDialogs)
    end
    def set_gamma_ramp(this : IDirect3DDevice9*, iSwapChain : UInt32, flags : UInt32, pRamp : Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*) : Void
      @lpVtbl.try &.value.set_gamma_ramp.call(this, iSwapChain, flags, pRamp)
    end
    def get_gamma_ramp(this : IDirect3DDevice9*, iSwapChain : UInt32, pRamp : Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*) : Void
      @lpVtbl.try &.value.get_gamma_ramp.call(this, iSwapChain, pRamp)
    end
    def create_texture(this : IDirect3DDevice9*, width : UInt32, height : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture.call(this, width, height, levels, usage, format, pool, ppTexture, pSharedHandle)
    end
    def create_volume_texture(this : IDirect3DDevice9*, width : UInt32, height : UInt32, depth : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppVolumeTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_volume_texture.call(this, width, height, depth, levels, usage, format, pool, ppVolumeTexture, pSharedHandle)
    end
    def create_cube_texture(this : IDirect3DDevice9*, edge_length : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppCubeTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_cube_texture.call(this, edge_length, levels, usage, format, pool, ppCubeTexture, pSharedHandle)
    end
    def create_vertex_buffer(this : IDirect3DDevice9*, length : UInt32, usage : UInt32, fvf : UInt32, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppVertexBuffer : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_buffer.call(this, length, usage, fvf, pool, ppVertexBuffer, pSharedHandle)
    end
    def create_index_buffer(this : IDirect3DDevice9*, length : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppIndexBuffer : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_index_buffer.call(this, length, usage, format, pool, ppIndexBuffer, pSharedHandle)
    end
    def create_render_target(this : IDirect3DDevice9*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, lockable : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_render_target.call(this, width, height, format, multi_sample, multisample_quality, lockable, ppSurface, pSharedHandle)
    end
    def create_depth_stencil_surface(this : IDirect3DDevice9*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, discard : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_surface.call(this, width, height, format, multi_sample, multisample_quality, discard, ppSurface, pSharedHandle)
    end
    def update_surface(this : IDirect3DDevice9*, pSourceSurface : Void*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationSurface : Void*, pDestPoint : Win32cr::Foundation::POINT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_surface.call(this, pSourceSurface, pSourceRect, pDestinationSurface, pDestPoint)
    end
    def update_texture(this : IDirect3DDevice9*, pSourceTexture : Void*, pDestinationTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_texture.call(this, pSourceTexture, pDestinationTexture)
    end
    def get_render_target_data(this : IDirect3DDevice9*, pRenderTarget : Void*, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target_data.call(this, pRenderTarget, pDestSurface)
    end
    def get_front_buffer_data(this : IDirect3DDevice9*, iSwapChain : UInt32, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_front_buffer_data.call(this, iSwapChain, pDestSurface)
    end
    def stretch_rect(this : IDirect3DDevice9*, pSourceSurface : Void*, pSourceRect : Win32cr::Foundation::RECT*, pDestSurface : Void*, pDestRect : Win32cr::Foundation::RECT*, filter : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stretch_rect.call(this, pSourceSurface, pSourceRect, pDestSurface, pDestRect, filter)
    end
    def color_fill(this : IDirect3DDevice9*, pSurface : Void*, pRect : Win32cr::Foundation::RECT*, color : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.color_fill.call(this, pSurface, pRect, color)
    end
    def create_offscreen_plain_surface(this : IDirect3DDevice9*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offscreen_plain_surface.call(this, width, height, format, pool, ppSurface, pSharedHandle)
    end
    def set_render_target(this : IDirect3DDevice9*, render_target_index : UInt32, pRenderTarget : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_target.call(this, render_target_index, pRenderTarget)
    end
    def get_render_target(this : IDirect3DDevice9*, render_target_index : UInt32, ppRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target.call(this, render_target_index, ppRenderTarget)
    end
    def set_depth_stencil_surface(this : IDirect3DDevice9*, pNewZStencil : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_depth_stencil_surface.call(this, pNewZStencil)
    end
    def get_depth_stencil_surface(this : IDirect3DDevice9*, ppZStencilSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_depth_stencil_surface.call(this, ppZStencilSurface)
    end
    def begin_scene(this : IDirect3DDevice9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_scene.call(this)
    end
    def end_scene(this : IDirect3DDevice9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_scene.call(this)
    end
    def clear(this : IDirect3DDevice9*, count : UInt32, pRects : Win32cr::Graphics::Direct3D9::D3DRECT*, flags : UInt32, color : UInt32, z : Float32, stencil : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, count, pRects, flags, color, z, stencil)
    end
    def set_transform(this : IDirect3DDevice9*, state : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, pMatrix : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, state, pMatrix)
    end
    def get_transform(this : IDirect3DDevice9*, state : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, pMatrix : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform.call(this, state, pMatrix)
    end
    def multiply_transform(this : IDirect3DDevice9*, param0 : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, param1 : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.multiply_transform.call(this, param0, param1)
    end
    def set_viewport(this : IDirect3DDevice9*, pViewport : Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_viewport.call(this, pViewport)
    end
    def get_viewport(this : IDirect3DDevice9*, pViewport : Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_viewport.call(this, pViewport)
    end
    def set_material(this : IDirect3DDevice9*, pMaterial : Win32cr::Graphics::Direct3D9::D3DMATERIAL9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_material.call(this, pMaterial)
    end
    def get_material(this : IDirect3DDevice9*, pMaterial : Win32cr::Graphics::Direct3D9::D3DMATERIAL9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_material.call(this, pMaterial)
    end
    def set_light(this : IDirect3DDevice9*, index : UInt32, param1 : Win32cr::Graphics::Direct3D9::D3DLIGHT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_light.call(this, index, param1)
    end
    def get_light(this : IDirect3DDevice9*, index : UInt32, param1 : Win32cr::Graphics::Direct3D9::D3DLIGHT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_light.call(this, index, param1)
    end
    def light_enable(this : IDirect3DDevice9*, index : UInt32, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.light_enable.call(this, index, enable)
    end
    def get_light_enable(this : IDirect3DDevice9*, index : UInt32, pEnable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_light_enable.call(this, index, pEnable)
    end
    def set_clip_plane(this : IDirect3DDevice9*, index : UInt32, pPlane : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_plane.call(this, index, pPlane)
    end
    def get_clip_plane(this : IDirect3DDevice9*, index : UInt32, pPlane : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_plane.call(this, index, pPlane)
    end
    def set_render_state(this : IDirect3DDevice9*, state : Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_state.call(this, state, value)
    end
    def get_render_state(this : IDirect3DDevice9*, state : Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_state.call(this, state, pValue)
    end
    def create_state_block(this : IDirect3DDevice9*, type__ : Win32cr::Graphics::Direct3D9::D3DSTATEBLOCKTYPE, ppSB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_block.call(this, type__, ppSB)
    end
    def begin_state_block(this : IDirect3DDevice9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_state_block.call(this)
    end
    def end_state_block(this : IDirect3DDevice9*, ppSB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_state_block.call(this, ppSB)
    end
    def set_clip_status(this : IDirect3DDevice9*, pClipStatus : Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_status.call(this, pClipStatus)
    end
    def get_clip_status(this : IDirect3DDevice9*, pClipStatus : Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_status.call(this, pClipStatus)
    end
    def get_texture(this : IDirect3DDevice9*, stage : UInt32, ppTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_texture.call(this, stage, ppTexture)
    end
    def set_texture(this : IDirect3DDevice9*, stage : UInt32, pTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_texture.call(this, stage, pTexture)
    end
    def get_texture_stage_state(this : IDirect3DDevice9*, stage : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_texture_stage_state.call(this, stage, type__, pValue)
    end
    def set_texture_stage_state(this : IDirect3DDevice9*, stage : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_texture_stage_state.call(this, stage, type__, value)
    end
    def get_sampler_state(this : IDirect3DDevice9*, sampler : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sampler_state.call(this, sampler, type__, pValue)
    end
    def set_sampler_state(this : IDirect3DDevice9*, sampler : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sampler_state.call(this, sampler, type__, value)
    end
    def validate_device(this : IDirect3DDevice9*, pNumPasses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_device.call(this, pNumPasses)
    end
    def set_palette_entries(this : IDirect3DDevice9*, palette_number : UInt32, pEntries : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_palette_entries.call(this, palette_number, pEntries)
    end
    def get_palette_entries(this : IDirect3DDevice9*, palette_number : UInt32, pEntries : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_palette_entries.call(this, palette_number, pEntries)
    end
    def set_current_texture_palette(this : IDirect3DDevice9*, palette_number : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_texture_palette.call(this, palette_number)
    end
    def get_current_texture_palette(this : IDirect3DDevice9*, palette_number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_texture_palette.call(this, palette_number)
    end
    def set_scissor_rect(this : IDirect3DDevice9*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scissor_rect.call(this, pRect)
    end
    def get_scissor_rect(this : IDirect3DDevice9*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scissor_rect.call(this, pRect)
    end
    def set_software_vertex_processing(this : IDirect3DDevice9*, bSoftware : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_software_vertex_processing.call(this, bSoftware)
    end
    def get_software_vertex_processing(this : IDirect3DDevice9*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_software_vertex_processing.call(this)
    end
    def set_n_patch_mode(this : IDirect3DDevice9*, nSegments : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_n_patch_mode.call(this, nSegments)
    end
    def get_n_patch_mode(this : IDirect3DDevice9*) : Float32
      @lpVtbl.try &.value.get_n_patch_mode.call(this)
    end
    def draw_primitive(this : IDirect3DDevice9*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, start_vertex : UInt32, primitive_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_primitive.call(this, primitive_type, start_vertex, primitive_count)
    end
    def draw_indexed_primitive(this : IDirect3DDevice9*, param0 : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, base_vertex_index : Int32, min_vertex_index : UInt32, num_vertices : UInt32, startIndex : UInt32, primCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_indexed_primitive.call(this, param0, base_vertex_index, min_vertex_index, num_vertices, startIndex, primCount)
    end
    def draw_primitive_up(this : IDirect3DDevice9*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, primitive_count : UInt32, pVertexStreamZeroData : Void*, vertex_stream_zero_stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_primitive_up.call(this, primitive_type, primitive_count, pVertexStreamZeroData, vertex_stream_zero_stride)
    end
    def draw_indexed_primitive_up(this : IDirect3DDevice9*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, min_vertex_index : UInt32, num_vertices : UInt32, primitive_count : UInt32, pIndexData : Void*, index_data_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pVertexStreamZeroData : Void*, vertex_stream_zero_stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_indexed_primitive_up.call(this, primitive_type, min_vertex_index, num_vertices, primitive_count, pIndexData, index_data_format, pVertexStreamZeroData, vertex_stream_zero_stride)
    end
    def process_vertices(this : IDirect3DDevice9*, src_start_index : UInt32, dest_index : UInt32, vertex_count : UInt32, pDestBuffer : Void*, pVertexDecl : Void*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_vertices.call(this, src_start_index, dest_index, vertex_count, pDestBuffer, pVertexDecl, flags)
    end
    def create_vertex_declaration(this : IDirect3DDevice9*, pVertexElements : Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, ppDecl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_declaration.call(this, pVertexElements, ppDecl)
    end
    def set_vertex_declaration(this : IDirect3DDevice9*, pDecl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_declaration.call(this, pDecl)
    end
    def get_vertex_declaration(this : IDirect3DDevice9*, ppDecl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_declaration.call(this, ppDecl)
    end
    def set_fvf(this : IDirect3DDevice9*, fvf : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_fvf.call(this, fvf)
    end
    def get_fvf(this : IDirect3DDevice9*, pFVF : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fvf.call(this, pFVF)
    end
    def create_vertex_shader(this : IDirect3DDevice9*, pFunction : UInt32*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_shader.call(this, pFunction, ppShader)
    end
    def set_vertex_shader(this : IDirect3DDevice9*, pShader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader.call(this, pShader)
    end
    def get_vertex_shader(this : IDirect3DDevice9*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader.call(this, ppShader)
    end
    def set_vertex_shader_constant_f(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def get_vertex_shader_constant_f(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def set_vertex_shader_constant_i(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def get_vertex_shader_constant_i(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def set_vertex_shader_constant_b(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def get_vertex_shader_constant_b(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def set_stream_source(this : IDirect3DDevice9*, stream_number : UInt32, pStreamData : Void*, offset_in_bytes : UInt32, stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_source.call(this, stream_number, pStreamData, offset_in_bytes, stride)
    end
    def get_stream_source(this : IDirect3DDevice9*, stream_number : UInt32, ppStreamData : Void**, pOffsetInBytes : UInt32*, pStride : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_source.call(this, stream_number, ppStreamData, pOffsetInBytes, pStride)
    end
    def set_stream_source_freq(this : IDirect3DDevice9*, stream_number : UInt32, setting : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_source_freq.call(this, stream_number, setting)
    end
    def get_stream_source_freq(this : IDirect3DDevice9*, stream_number : UInt32, pSetting : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_source_freq.call(this, stream_number, pSetting)
    end
    def set_indices(this : IDirect3DDevice9*, pIndexData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_indices.call(this, pIndexData)
    end
    def get_indices(this : IDirect3DDevice9*, ppIndexData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indices.call(this, ppIndexData)
    end
    def create_pixel_shader(this : IDirect3DDevice9*, pFunction : UInt32*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pixel_shader.call(this, pFunction, ppShader)
    end
    def set_pixel_shader(this : IDirect3DDevice9*, pShader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader.call(this, pShader)
    end
    def get_pixel_shader(this : IDirect3DDevice9*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader.call(this, ppShader)
    end
    def set_pixel_shader_constant_f(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def get_pixel_shader_constant_f(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def set_pixel_shader_constant_i(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def get_pixel_shader_constant_i(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def set_pixel_shader_constant_b(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def get_pixel_shader_constant_b(this : IDirect3DDevice9*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def draw_rect_patch(this : IDirect3DDevice9*, handle : UInt32, pNumSegs : Float32*, pRectPatchInfo : Win32cr::Graphics::Direct3D9::D3DRECTPATCH_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rect_patch.call(this, handle, pNumSegs, pRectPatchInfo)
    end
    def draw_tri_patch(this : IDirect3DDevice9*, handle : UInt32, pNumSegs : Float32*, pTriPatchInfo : Win32cr::Graphics::Direct3D9::D3DTRIPATCH_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_tri_patch.call(this, handle, pNumSegs, pTriPatchInfo)
    end
    def delete_patch(this : IDirect3DDevice9*, handle : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_patch.call(this, handle)
    end
    def create_query(this : IDirect3DDevice9*, type__ : Win32cr::Graphics::Direct3D9::D3DQUERYTYPE, ppQuery : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query.call(this, type__, ppQuery)
    end

  end

  @[Extern]
  record IDirect3DStateBlock9Vtbl,
    query_interface : Proc(IDirect3DStateBlock9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DStateBlock9*, UInt32),
    release : Proc(IDirect3DStateBlock9*, UInt32),
    get_device : Proc(IDirect3DStateBlock9*, Void**, Win32cr::Foundation::HRESULT),
    capture : Proc(IDirect3DStateBlock9*, Win32cr::Foundation::HRESULT),
    apply : Proc(IDirect3DStateBlock9*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DStateBlock9, lpVtbl : IDirect3DStateBlock9Vtbl* do
    GUID = LibC::GUID.new(0xb07c4fe5_u32, 0x310d_u16, 0x4ba8_u16, StaticArray[0xa2_u8, 0x3c_u8, 0x4f_u8, 0xf_u8, 0x20_u8, 0x6f_u8, 0x21_u8, 0x8b_u8])
    def query_interface(this : IDirect3DStateBlock9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DStateBlock9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DStateBlock9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DStateBlock9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def capture(this : IDirect3DStateBlock9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this)
    end
    def apply(this : IDirect3DStateBlock9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply.call(this)
    end

  end

  @[Extern]
  record IDirect3DSwapChain9Vtbl,
    query_interface : Proc(IDirect3DSwapChain9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DSwapChain9*, UInt32),
    release : Proc(IDirect3DSwapChain9*, UInt32),
    present : Proc(IDirect3DSwapChain9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::RGNDATA*, UInt32, Win32cr::Foundation::HRESULT),
    get_front_buffer_data : Proc(IDirect3DSwapChain9*, Void*, Win32cr::Foundation::HRESULT),
    get_back_buffer : Proc(IDirect3DSwapChain9*, UInt32, Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_raster_status : Proc(IDirect3DSwapChain9*, Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*, Win32cr::Foundation::HRESULT),
    get_display_mode : Proc(IDirect3DSwapChain9*, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_device : Proc(IDirect3DSwapChain9*, Void**, Win32cr::Foundation::HRESULT),
    get_present_parameters : Proc(IDirect3DSwapChain9*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DSwapChain9, lpVtbl : IDirect3DSwapChain9Vtbl* do
    GUID = LibC::GUID.new(0x794950f2_u32, 0xadfc_u16, 0x458a_u16, StaticArray[0x90_u8, 0x5e_u8, 0x10_u8, 0xa1_u8, 0xb_u8, 0xb_u8, 0x50_u8, 0x3b_u8])
    def query_interface(this : IDirect3DSwapChain9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DSwapChain9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DSwapChain9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def present(this : IDirect3DSwapChain9*, pSourceRect : Win32cr::Foundation::RECT*, pDestRect : Win32cr::Foundation::RECT*, hDestWindowOverride : Win32cr::Foundation::HWND, pDirtyRegion : Win32cr::Graphics::Gdi::RGNDATA*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present.call(this, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion, dwFlags)
    end
    def get_front_buffer_data(this : IDirect3DSwapChain9*, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_front_buffer_data.call(this, pDestSurface)
    end
    def get_back_buffer(this : IDirect3DSwapChain9*, iBackBuffer : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, ppBackBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_back_buffer.call(this, iBackBuffer, type__, ppBackBuffer)
    end
    def get_raster_status(this : IDirect3DSwapChain9*, pRasterStatus : Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raster_status.call(this, pRasterStatus)
    end
    def get_display_mode(this : IDirect3DSwapChain9*, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode.call(this, pMode)
    end
    def get_device(this : IDirect3DSwapChain9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_present_parameters(this : IDirect3DSwapChain9*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_present_parameters.call(this, pPresentationParameters)
    end

  end

  @[Extern]
  record IDirect3DResource9Vtbl,
    query_interface : Proc(IDirect3DResource9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DResource9*, UInt32),
    release : Proc(IDirect3DResource9*, UInt32),
    get_device : Proc(IDirect3DResource9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DResource9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DResource9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DResource9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DResource9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DResource9*, UInt32),
    pre_load : Proc(IDirect3DResource9*, Void),
    get_type : Proc(IDirect3DResource9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE)


  @[Extern]
  record IDirect3DResource9, lpVtbl : IDirect3DResource9Vtbl* do
    GUID = LibC::GUID.new(0x5eec05d_u32, 0x8f7d_u16, 0x4362_u16, StaticArray[0xb9_u8, 0x99_u8, 0xd1_u8, 0xba_u8, 0xf3_u8, 0x57_u8, 0xc7_u8, 0x4_u8])
    def query_interface(this : IDirect3DResource9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DResource9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DResource9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DResource9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DResource9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DResource9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DResource9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DResource9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DResource9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DResource9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DResource9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end

  end

  @[Extern]
  record IDirect3DVertexDeclaration9Vtbl,
    query_interface : Proc(IDirect3DVertexDeclaration9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DVertexDeclaration9*, UInt32),
    release : Proc(IDirect3DVertexDeclaration9*, UInt32),
    get_device : Proc(IDirect3DVertexDeclaration9*, Void**, Win32cr::Foundation::HRESULT),
    get_declaration : Proc(IDirect3DVertexDeclaration9*, Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DVertexDeclaration9, lpVtbl : IDirect3DVertexDeclaration9Vtbl* do
    GUID = LibC::GUID.new(0xdd13c59c_u32, 0x36fa_u16, 0x4098_u16, StaticArray[0xa8_u8, 0xfb_u8, 0xc7_u8, 0xed_u8, 0x39_u8, 0xdc_u8, 0x85_u8, 0x46_u8])
    def query_interface(this : IDirect3DVertexDeclaration9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DVertexDeclaration9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DVertexDeclaration9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DVertexDeclaration9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_declaration(this : IDirect3DVertexDeclaration9*, pElement : Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, pNumElements : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_declaration.call(this, pElement, pNumElements)
    end

  end

  @[Extern]
  record IDirect3DVertexShader9Vtbl,
    query_interface : Proc(IDirect3DVertexShader9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DVertexShader9*, UInt32),
    release : Proc(IDirect3DVertexShader9*, UInt32),
    get_device : Proc(IDirect3DVertexShader9*, Void**, Win32cr::Foundation::HRESULT),
    get_function : Proc(IDirect3DVertexShader9*, Void*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DVertexShader9, lpVtbl : IDirect3DVertexShader9Vtbl* do
    GUID = LibC::GUID.new(0xefc5557e_u32, 0x6265_u16, 0x4613_u16, StaticArray[0x8a_u8, 0x94_u8, 0x43_u8, 0x85_u8, 0x78_u8, 0x89_u8, 0xeb_u8, 0x36_u8])
    def query_interface(this : IDirect3DVertexShader9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DVertexShader9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DVertexShader9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DVertexShader9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_function(this : IDirect3DVertexShader9*, param0 : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function.call(this, param0, pSizeOfData)
    end

  end

  @[Extern]
  record IDirect3DPixelShader9Vtbl,
    query_interface : Proc(IDirect3DPixelShader9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DPixelShader9*, UInt32),
    release : Proc(IDirect3DPixelShader9*, UInt32),
    get_device : Proc(IDirect3DPixelShader9*, Void**, Win32cr::Foundation::HRESULT),
    get_function : Proc(IDirect3DPixelShader9*, Void*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DPixelShader9, lpVtbl : IDirect3DPixelShader9Vtbl* do
    GUID = LibC::GUID.new(0x6d3bdbdc_u32, 0x5b02_u16, 0x4415_u16, StaticArray[0xb8_u8, 0x52_u8, 0xce_u8, 0x5e_u8, 0x8b_u8, 0xcc_u8, 0xb2_u8, 0x89_u8])
    def query_interface(this : IDirect3DPixelShader9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DPixelShader9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DPixelShader9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DPixelShader9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_function(this : IDirect3DPixelShader9*, param0 : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_function.call(this, param0, pSizeOfData)
    end

  end

  @[Extern]
  record IDirect3DBaseTexture9Vtbl,
    query_interface : Proc(IDirect3DBaseTexture9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DBaseTexture9*, UInt32),
    release : Proc(IDirect3DBaseTexture9*, UInt32),
    get_device : Proc(IDirect3DBaseTexture9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DBaseTexture9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DBaseTexture9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DBaseTexture9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DBaseTexture9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DBaseTexture9*, UInt32),
    pre_load : Proc(IDirect3DBaseTexture9*, Void),
    get_type : Proc(IDirect3DBaseTexture9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    set_lod : Proc(IDirect3DBaseTexture9*, UInt32, UInt32),
    get_lod : Proc(IDirect3DBaseTexture9*, UInt32),
    get_level_count : Proc(IDirect3DBaseTexture9*, UInt32),
    set_auto_gen_filter_type : Proc(IDirect3DBaseTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    get_auto_gen_filter_type : Proc(IDirect3DBaseTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE),
    generate_mip_sub_levels : Proc(IDirect3DBaseTexture9*, Void)


  @[Extern]
  record IDirect3DBaseTexture9, lpVtbl : IDirect3DBaseTexture9Vtbl* do
    GUID = LibC::GUID.new(0x580ca87e_u32, 0x1d3c_u16, 0x4d54_u16, StaticArray[0x99_u8, 0x1d_u8, 0xb7_u8, 0xd3_u8, 0xe3_u8, 0xc2_u8, 0x98_u8, 0xce_u8])
    def query_interface(this : IDirect3DBaseTexture9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DBaseTexture9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DBaseTexture9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DBaseTexture9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DBaseTexture9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DBaseTexture9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DBaseTexture9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DBaseTexture9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DBaseTexture9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DBaseTexture9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DBaseTexture9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def set_lod(this : IDirect3DBaseTexture9*, lod_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_lod.call(this, lod_new)
    end
    def get_lod(this : IDirect3DBaseTexture9*) : UInt32
      @lpVtbl.try &.value.get_lod.call(this)
    end
    def get_level_count(this : IDirect3DBaseTexture9*) : UInt32
      @lpVtbl.try &.value.get_level_count.call(this)
    end
    def set_auto_gen_filter_type(this : IDirect3DBaseTexture9*, filter_type : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_gen_filter_type.call(this, filter_type)
    end
    def get_auto_gen_filter_type(this : IDirect3DBaseTexture9*) : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE
      @lpVtbl.try &.value.get_auto_gen_filter_type.call(this)
    end
    def generate_mip_sub_levels(this : IDirect3DBaseTexture9*) : Void
      @lpVtbl.try &.value.generate_mip_sub_levels.call(this)
    end

  end

  @[Extern]
  record IDirect3DTexture9Vtbl,
    query_interface : Proc(IDirect3DTexture9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DTexture9*, UInt32),
    release : Proc(IDirect3DTexture9*, UInt32),
    get_device : Proc(IDirect3DTexture9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DTexture9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DTexture9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DTexture9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DTexture9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DTexture9*, UInt32),
    pre_load : Proc(IDirect3DTexture9*, Void),
    get_type : Proc(IDirect3DTexture9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    set_lod : Proc(IDirect3DTexture9*, UInt32, UInt32),
    get_lod : Proc(IDirect3DTexture9*, UInt32),
    get_level_count : Proc(IDirect3DTexture9*, UInt32),
    set_auto_gen_filter_type : Proc(IDirect3DTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    get_auto_gen_filter_type : Proc(IDirect3DTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE),
    generate_mip_sub_levels : Proc(IDirect3DTexture9*, Void),
    get_level_desc : Proc(IDirect3DTexture9*, UInt32, Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*, Win32cr::Foundation::HRESULT),
    get_surface_level : Proc(IDirect3DTexture9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    lock_rect : Proc(IDirect3DTexture9*, UInt32, Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    unlock_rect : Proc(IDirect3DTexture9*, UInt32, Win32cr::Foundation::HRESULT),
    add_dirty_rect : Proc(IDirect3DTexture9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DTexture9, lpVtbl : IDirect3DTexture9Vtbl* do
    GUID = LibC::GUID.new(0x85c31227_u32, 0x3de5_u16, 0x4f00_u16, StaticArray[0x9b_u8, 0x3a_u8, 0xf1_u8, 0x1a_u8, 0xc3_u8, 0x8c_u8, 0x18_u8, 0xb5_u8])
    def query_interface(this : IDirect3DTexture9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DTexture9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DTexture9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DTexture9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DTexture9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DTexture9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DTexture9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DTexture9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DTexture9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DTexture9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DTexture9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def set_lod(this : IDirect3DTexture9*, lod_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_lod.call(this, lod_new)
    end
    def get_lod(this : IDirect3DTexture9*) : UInt32
      @lpVtbl.try &.value.get_lod.call(this)
    end
    def get_level_count(this : IDirect3DTexture9*) : UInt32
      @lpVtbl.try &.value.get_level_count.call(this)
    end
    def set_auto_gen_filter_type(this : IDirect3DTexture9*, filter_type : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_gen_filter_type.call(this, filter_type)
    end
    def get_auto_gen_filter_type(this : IDirect3DTexture9*) : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE
      @lpVtbl.try &.value.get_auto_gen_filter_type.call(this)
    end
    def generate_mip_sub_levels(this : IDirect3DTexture9*) : Void
      @lpVtbl.try &.value.generate_mip_sub_levels.call(this)
    end
    def get_level_desc(this : IDirect3DTexture9*, level : UInt32, pDesc : Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_desc.call(this, level, pDesc)
    end
    def get_surface_level(this : IDirect3DTexture9*, level : UInt32, ppSurfaceLevel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_level.call(this, level, ppSurfaceLevel)
    end
    def lock_rect(this : IDirect3DTexture9*, level : UInt32, pLockedRect : Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, pRect : Win32cr::Foundation::RECT*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_rect.call(this, level, pLockedRect, pRect, flags)
    end
    def unlock_rect(this : IDirect3DTexture9*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_rect.call(this, level)
    end
    def add_dirty_rect(this : IDirect3DTexture9*, pDirtyRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dirty_rect.call(this, pDirtyRect)
    end

  end

  @[Extern]
  record IDirect3DVolumeTexture9Vtbl,
    query_interface : Proc(IDirect3DVolumeTexture9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DVolumeTexture9*, UInt32),
    release : Proc(IDirect3DVolumeTexture9*, UInt32),
    get_device : Proc(IDirect3DVolumeTexture9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DVolumeTexture9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DVolumeTexture9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DVolumeTexture9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DVolumeTexture9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DVolumeTexture9*, UInt32),
    pre_load : Proc(IDirect3DVolumeTexture9*, Void),
    get_type : Proc(IDirect3DVolumeTexture9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    set_lod : Proc(IDirect3DVolumeTexture9*, UInt32, UInt32),
    get_lod : Proc(IDirect3DVolumeTexture9*, UInt32),
    get_level_count : Proc(IDirect3DVolumeTexture9*, UInt32),
    set_auto_gen_filter_type : Proc(IDirect3DVolumeTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    get_auto_gen_filter_type : Proc(IDirect3DVolumeTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE),
    generate_mip_sub_levels : Proc(IDirect3DVolumeTexture9*, Void),
    get_level_desc : Proc(IDirect3DVolumeTexture9*, UInt32, Win32cr::Graphics::Direct3D9::D3DVOLUME_DESC*, Win32cr::Foundation::HRESULT),
    get_volume_level : Proc(IDirect3DVolumeTexture9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    lock_box : Proc(IDirect3DVolumeTexture9*, UInt32, Win32cr::Graphics::Direct3D9::D3DLOCKED_BOX*, Win32cr::Graphics::Direct3D9::D3DBOX*, UInt32, Win32cr::Foundation::HRESULT),
    unlock_box : Proc(IDirect3DVolumeTexture9*, UInt32, Win32cr::Foundation::HRESULT),
    add_dirty_box : Proc(IDirect3DVolumeTexture9*, Win32cr::Graphics::Direct3D9::D3DBOX*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DVolumeTexture9, lpVtbl : IDirect3DVolumeTexture9Vtbl* do
    GUID = LibC::GUID.new(0x2518526c_u32, 0xe789_u16, 0x4111_u16, StaticArray[0xa7_u8, 0xb9_u8, 0x47_u8, 0xef_u8, 0x32_u8, 0x8d_u8, 0x13_u8, 0xe6_u8])
    def query_interface(this : IDirect3DVolumeTexture9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DVolumeTexture9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DVolumeTexture9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DVolumeTexture9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DVolumeTexture9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DVolumeTexture9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DVolumeTexture9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DVolumeTexture9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DVolumeTexture9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DVolumeTexture9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DVolumeTexture9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def set_lod(this : IDirect3DVolumeTexture9*, lod_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_lod.call(this, lod_new)
    end
    def get_lod(this : IDirect3DVolumeTexture9*) : UInt32
      @lpVtbl.try &.value.get_lod.call(this)
    end
    def get_level_count(this : IDirect3DVolumeTexture9*) : UInt32
      @lpVtbl.try &.value.get_level_count.call(this)
    end
    def set_auto_gen_filter_type(this : IDirect3DVolumeTexture9*, filter_type : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_gen_filter_type.call(this, filter_type)
    end
    def get_auto_gen_filter_type(this : IDirect3DVolumeTexture9*) : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE
      @lpVtbl.try &.value.get_auto_gen_filter_type.call(this)
    end
    def generate_mip_sub_levels(this : IDirect3DVolumeTexture9*) : Void
      @lpVtbl.try &.value.generate_mip_sub_levels.call(this)
    end
    def get_level_desc(this : IDirect3DVolumeTexture9*, level : UInt32, pDesc : Win32cr::Graphics::Direct3D9::D3DVOLUME_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_desc.call(this, level, pDesc)
    end
    def get_volume_level(this : IDirect3DVolumeTexture9*, level : UInt32, ppVolumeLevel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_volume_level.call(this, level, ppVolumeLevel)
    end
    def lock_box(this : IDirect3DVolumeTexture9*, level : UInt32, pLockedVolume : Win32cr::Graphics::Direct3D9::D3DLOCKED_BOX*, pBox : Win32cr::Graphics::Direct3D9::D3DBOX*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_box.call(this, level, pLockedVolume, pBox, flags)
    end
    def unlock_box(this : IDirect3DVolumeTexture9*, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_box.call(this, level)
    end
    def add_dirty_box(this : IDirect3DVolumeTexture9*, pDirtyBox : Win32cr::Graphics::Direct3D9::D3DBOX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dirty_box.call(this, pDirtyBox)
    end

  end

  @[Extern]
  record IDirect3DCubeTexture9Vtbl,
    query_interface : Proc(IDirect3DCubeTexture9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DCubeTexture9*, UInt32),
    release : Proc(IDirect3DCubeTexture9*, UInt32),
    get_device : Proc(IDirect3DCubeTexture9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DCubeTexture9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DCubeTexture9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DCubeTexture9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DCubeTexture9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DCubeTexture9*, UInt32),
    pre_load : Proc(IDirect3DCubeTexture9*, Void),
    get_type : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    set_lod : Proc(IDirect3DCubeTexture9*, UInt32, UInt32),
    get_lod : Proc(IDirect3DCubeTexture9*, UInt32),
    get_level_count : Proc(IDirect3DCubeTexture9*, UInt32),
    set_auto_gen_filter_type : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    get_auto_gen_filter_type : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE),
    generate_mip_sub_levels : Proc(IDirect3DCubeTexture9*, Void),
    get_level_desc : Proc(IDirect3DCubeTexture9*, UInt32, Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*, Win32cr::Foundation::HRESULT),
    get_cube_map_surface : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, UInt32, Void**, Win32cr::Foundation::HRESULT),
    lock_rect : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, UInt32, Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    unlock_rect : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, UInt32, Win32cr::Foundation::HRESULT),
    add_dirty_rect : Proc(IDirect3DCubeTexture9*, Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DCubeTexture9, lpVtbl : IDirect3DCubeTexture9Vtbl* do
    GUID = LibC::GUID.new(0xfff32f81_u32, 0xd953_u16, 0x473a_u16, StaticArray[0x92_u8, 0x23_u8, 0x93_u8, 0xd6_u8, 0x52_u8, 0xab_u8, 0xa9_u8, 0x3f_u8])
    def query_interface(this : IDirect3DCubeTexture9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DCubeTexture9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DCubeTexture9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DCubeTexture9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DCubeTexture9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DCubeTexture9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DCubeTexture9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DCubeTexture9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DCubeTexture9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DCubeTexture9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DCubeTexture9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def set_lod(this : IDirect3DCubeTexture9*, lod_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_lod.call(this, lod_new)
    end
    def get_lod(this : IDirect3DCubeTexture9*) : UInt32
      @lpVtbl.try &.value.get_lod.call(this)
    end
    def get_level_count(this : IDirect3DCubeTexture9*) : UInt32
      @lpVtbl.try &.value.get_level_count.call(this)
    end
    def set_auto_gen_filter_type(this : IDirect3DCubeTexture9*, filter_type : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_gen_filter_type.call(this, filter_type)
    end
    def get_auto_gen_filter_type(this : IDirect3DCubeTexture9*) : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE
      @lpVtbl.try &.value.get_auto_gen_filter_type.call(this)
    end
    def generate_mip_sub_levels(this : IDirect3DCubeTexture9*) : Void
      @lpVtbl.try &.value.generate_mip_sub_levels.call(this)
    end
    def get_level_desc(this : IDirect3DCubeTexture9*, level : UInt32, pDesc : Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_desc.call(this, level, pDesc)
    end
    def get_cube_map_surface(this : IDirect3DCubeTexture9*, face_type : Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, level : UInt32, ppCubeMapSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cube_map_surface.call(this, face_type, level, ppCubeMapSurface)
    end
    def lock_rect(this : IDirect3DCubeTexture9*, face_type : Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, level : UInt32, pLockedRect : Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, pRect : Win32cr::Foundation::RECT*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_rect.call(this, face_type, level, pLockedRect, pRect, flags)
    end
    def unlock_rect(this : IDirect3DCubeTexture9*, face_type : Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, level : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_rect.call(this, face_type, level)
    end
    def add_dirty_rect(this : IDirect3DCubeTexture9*, face_type : Win32cr::Graphics::Direct3D9::D3DCUBEMAP_FACES, pDirtyRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_dirty_rect.call(this, face_type, pDirtyRect)
    end

  end

  @[Extern]
  record IDirect3DVertexBuffer9Vtbl,
    query_interface : Proc(IDirect3DVertexBuffer9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DVertexBuffer9*, UInt32),
    release : Proc(IDirect3DVertexBuffer9*, UInt32),
    get_device : Proc(IDirect3DVertexBuffer9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DVertexBuffer9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DVertexBuffer9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DVertexBuffer9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DVertexBuffer9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DVertexBuffer9*, UInt32),
    pre_load : Proc(IDirect3DVertexBuffer9*, Void),
    get_type : Proc(IDirect3DVertexBuffer9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    lock : Proc(IDirect3DVertexBuffer9*, UInt32, UInt32, Void**, UInt32, Win32cr::Foundation::HRESULT),
    unlock : Proc(IDirect3DVertexBuffer9*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(IDirect3DVertexBuffer9*, Win32cr::Graphics::Direct3D9::D3DVERTEXBUFFER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DVertexBuffer9, lpVtbl : IDirect3DVertexBuffer9Vtbl* do
    GUID = LibC::GUID.new(0xb64bb1b5_u32, 0xfd70_u16, 0x4df6_u16, StaticArray[0xbf_u8, 0x91_u8, 0x19_u8, 0xd0_u8, 0xa1_u8, 0x24_u8, 0x55_u8, 0xe3_u8])
    def query_interface(this : IDirect3DVertexBuffer9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DVertexBuffer9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DVertexBuffer9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DVertexBuffer9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DVertexBuffer9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DVertexBuffer9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DVertexBuffer9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DVertexBuffer9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DVertexBuffer9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DVertexBuffer9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DVertexBuffer9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def lock(this : IDirect3DVertexBuffer9*, offset_to_lock : UInt32, size_to_lock : UInt32, ppbData : Void**, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock.call(this, offset_to_lock, size_to_lock, ppbData, flags)
    end
    def unlock(this : IDirect3DVertexBuffer9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock.call(this)
    end
    def get_desc(this : IDirect3DVertexBuffer9*, pDesc : Win32cr::Graphics::Direct3D9::D3DVERTEXBUFFER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record IDirect3DIndexBuffer9Vtbl,
    query_interface : Proc(IDirect3DIndexBuffer9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DIndexBuffer9*, UInt32),
    release : Proc(IDirect3DIndexBuffer9*, UInt32),
    get_device : Proc(IDirect3DIndexBuffer9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DIndexBuffer9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DIndexBuffer9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DIndexBuffer9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DIndexBuffer9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DIndexBuffer9*, UInt32),
    pre_load : Proc(IDirect3DIndexBuffer9*, Void),
    get_type : Proc(IDirect3DIndexBuffer9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    lock : Proc(IDirect3DIndexBuffer9*, UInt32, UInt32, Void**, UInt32, Win32cr::Foundation::HRESULT),
    unlock : Proc(IDirect3DIndexBuffer9*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(IDirect3DIndexBuffer9*, Win32cr::Graphics::Direct3D9::D3DINDEXBUFFER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DIndexBuffer9, lpVtbl : IDirect3DIndexBuffer9Vtbl* do
    GUID = LibC::GUID.new(0x7c9dd65e_u32, 0xd3f7_u16, 0x4529_u16, StaticArray[0xac_u8, 0xee_u8, 0x78_u8, 0x58_u8, 0x30_u8, 0xac_u8, 0xde_u8, 0x35_u8])
    def query_interface(this : IDirect3DIndexBuffer9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DIndexBuffer9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DIndexBuffer9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DIndexBuffer9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DIndexBuffer9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DIndexBuffer9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DIndexBuffer9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DIndexBuffer9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DIndexBuffer9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DIndexBuffer9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DIndexBuffer9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def lock(this : IDirect3DIndexBuffer9*, offset_to_lock : UInt32, size_to_lock : UInt32, ppbData : Void**, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock.call(this, offset_to_lock, size_to_lock, ppbData, flags)
    end
    def unlock(this : IDirect3DIndexBuffer9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock.call(this)
    end
    def get_desc(this : IDirect3DIndexBuffer9*, pDesc : Win32cr::Graphics::Direct3D9::D3DINDEXBUFFER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record IDirect3DSurface9Vtbl,
    query_interface : Proc(IDirect3DSurface9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DSurface9*, UInt32),
    release : Proc(IDirect3DSurface9*, UInt32),
    get_device : Proc(IDirect3DSurface9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DSurface9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DSurface9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DSurface9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_priority : Proc(IDirect3DSurface9*, UInt32, UInt32),
    get_priority : Proc(IDirect3DSurface9*, UInt32),
    pre_load : Proc(IDirect3DSurface9*, Void),
    get_type : Proc(IDirect3DSurface9*, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE),
    get_container : Proc(IDirect3DSurface9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(IDirect3DSurface9*, Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*, Win32cr::Foundation::HRESULT),
    lock_rect : Proc(IDirect3DSurface9*, Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    unlock_rect : Proc(IDirect3DSurface9*, Win32cr::Foundation::HRESULT),
    get_dc : Proc(IDirect3DSurface9*, Win32cr::Graphics::Gdi::HDC*, Win32cr::Foundation::HRESULT),
    release_dc : Proc(IDirect3DSurface9*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DSurface9, lpVtbl : IDirect3DSurface9Vtbl* do
    GUID = LibC::GUID.new(0xcfbaf3a_u32, 0x9ff6_u16, 0x429a_u16, StaticArray[0x99_u8, 0xb3_u8, 0xa2_u8, 0x79_u8, 0x6a_u8, 0xf8_u8, 0xb8_u8, 0x9b_u8])
    def query_interface(this : IDirect3DSurface9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DSurface9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DSurface9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DSurface9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DSurface9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DSurface9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DSurface9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def set_priority(this : IDirect3DSurface9*, priority_new : UInt32) : UInt32
      @lpVtbl.try &.value.set_priority.call(this, priority_new)
    end
    def get_priority(this : IDirect3DSurface9*) : UInt32
      @lpVtbl.try &.value.get_priority.call(this)
    end
    def pre_load(this : IDirect3DSurface9*) : Void
      @lpVtbl.try &.value.pre_load.call(this)
    end
    def get_type(this : IDirect3DSurface9*) : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_container(this : IDirect3DSurface9*, riid : LibC::GUID*, ppContainer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container.call(this, riid, ppContainer)
    end
    def get_desc(this : IDirect3DSurface9*, pDesc : Win32cr::Graphics::Direct3D9::D3DSURFACE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def lock_rect(this : IDirect3DSurface9*, pLockedRect : Win32cr::Graphics::Direct3D9::D3DLOCKED_RECT*, pRect : Win32cr::Foundation::RECT*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_rect.call(this, pLockedRect, pRect, flags)
    end
    def unlock_rect(this : IDirect3DSurface9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_rect.call(this)
    end
    def get_dc(this : IDirect3DSurface9*, phdc : Win32cr::Graphics::Gdi::HDC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dc.call(this, phdc)
    end
    def release_dc(this : IDirect3DSurface9*, hdc : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_dc.call(this, hdc)
    end

  end

  @[Extern]
  record IDirect3DVolume9Vtbl,
    query_interface : Proc(IDirect3DVolume9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DVolume9*, UInt32),
    release : Proc(IDirect3DVolume9*, UInt32),
    get_device : Proc(IDirect3DVolume9*, Void**, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(IDirect3DVolume9*, LibC::GUID*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDirect3DVolume9*, LibC::GUID*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    free_private_data : Proc(IDirect3DVolume9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_container : Proc(IDirect3DVolume9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(IDirect3DVolume9*, Win32cr::Graphics::Direct3D9::D3DVOLUME_DESC*, Win32cr::Foundation::HRESULT),
    lock_box : Proc(IDirect3DVolume9*, Win32cr::Graphics::Direct3D9::D3DLOCKED_BOX*, Win32cr::Graphics::Direct3D9::D3DBOX*, UInt32, Win32cr::Foundation::HRESULT),
    unlock_box : Proc(IDirect3DVolume9*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DVolume9, lpVtbl : IDirect3DVolume9Vtbl* do
    GUID = LibC::GUID.new(0x24f416e6_u32, 0x1f67_u16, 0x4aa7_u16, StaticArray[0xb8_u8, 0x8e_u8, 0xd3_u8, 0x3f_u8, 0x6f_u8, 0x31_u8, 0x28_u8, 0xa1_u8])
    def query_interface(this : IDirect3DVolume9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DVolume9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DVolume9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DVolume9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def set_private_data(this : IDirect3DVolume9*, refguid : LibC::GUID*, pData : Void*, size_of_data : UInt32, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, refguid, pData, size_of_data, flags)
    end
    def get_private_data(this : IDirect3DVolume9*, refguid : LibC::GUID*, pData : Void*, pSizeOfData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, refguid, pData, pSizeOfData)
    end
    def free_private_data(this : IDirect3DVolume9*, refguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_private_data.call(this, refguid)
    end
    def get_container(this : IDirect3DVolume9*, riid : LibC::GUID*, ppContainer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container.call(this, riid, ppContainer)
    end
    def get_desc(this : IDirect3DVolume9*, pDesc : Win32cr::Graphics::Direct3D9::D3DVOLUME_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def lock_box(this : IDirect3DVolume9*, pLockedVolume : Win32cr::Graphics::Direct3D9::D3DLOCKED_BOX*, pBox : Win32cr::Graphics::Direct3D9::D3DBOX*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_box.call(this, pLockedVolume, pBox, flags)
    end
    def unlock_box(this : IDirect3DVolume9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_box.call(this)
    end

  end

  @[Extern]
  record IDirect3DQuery9Vtbl,
    query_interface : Proc(IDirect3DQuery9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DQuery9*, UInt32),
    release : Proc(IDirect3DQuery9*, UInt32),
    get_device : Proc(IDirect3DQuery9*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(IDirect3DQuery9*, Win32cr::Graphics::Direct3D9::D3DQUERYTYPE),
    get_data_size : Proc(IDirect3DQuery9*, UInt32),
    issue : Proc(IDirect3DQuery9*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IDirect3DQuery9*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DQuery9, lpVtbl : IDirect3DQuery9Vtbl* do
    GUID = LibC::GUID.new(0xd9771460_u32, 0xa695_u16, 0x4f26_u16, StaticArray[0xbb_u8, 0xd3_u8, 0x27_u8, 0xb8_u8, 0x40_u8, 0xb5_u8, 0x41_u8, 0xcc_u8])
    def query_interface(this : IDirect3DQuery9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DQuery9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DQuery9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : IDirect3DQuery9*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_type(this : IDirect3DQuery9*) : Win32cr::Graphics::Direct3D9::D3DQUERYTYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_data_size(this : IDirect3DQuery9*) : UInt32
      @lpVtbl.try &.value.get_data_size.call(this)
    end
    def issue(this : IDirect3DQuery9*, dwIssueFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.issue.call(this, dwIssueFlags)
    end
    def get_data(this : IDirect3DQuery9*, pData : Void*, dwSize : UInt32, dwGetDataFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pData, dwSize, dwGetDataFlags)
    end

  end

  @[Extern]
  record IDirect3D9ExVtbl,
    query_interface : Proc(IDirect3D9Ex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3D9Ex*, UInt32),
    release : Proc(IDirect3D9Ex*, UInt32),
    register_software_device : Proc(IDirect3D9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_adapter_count : Proc(IDirect3D9Ex*, UInt32),
    get_adapter_identifier : Proc(IDirect3D9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DADAPTER_IDENTIFIER9*, Win32cr::Foundation::HRESULT),
    get_adapter_mode_count : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32),
    enum_adapter_modes : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_adapter_display_mode : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    check_device_type : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    check_device_format : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    check_device_multi_sample_type : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32*, Win32cr::Foundation::HRESULT),
    check_depth_stencil_match : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    check_device_format_conversion : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Foundation::HRESULT),
    get_device_caps : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Graphics::Direct3D9::D3DCAPS9*, Win32cr::Foundation::HRESULT),
    get_adapter_monitor : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Gdi::HMONITOR),
    create_device : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Foundation::HWND, UInt32, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Void**, Win32cr::Foundation::HRESULT),
    get_adapter_mode_count_ex : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEFILTER*, UInt32),
    enum_adapter_modes_ex : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEFILTER*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Foundation::HRESULT),
    get_adapter_display_mode_ex : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*, Win32cr::Foundation::HRESULT),
    create_device_ex : Proc(IDirect3D9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, Win32cr::Foundation::HWND, UInt32, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Void**, Win32cr::Foundation::HRESULT),
    get_adapter_luid : Proc(IDirect3D9Ex*, UInt32, Win32cr::Foundation::LUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3D9Ex, lpVtbl : IDirect3D9ExVtbl* do
    GUID = LibC::GUID.new(0x2177241_u32, 0x69fc_u16, 0x400c_u16, StaticArray[0x8f_u8, 0xf1_u8, 0x93_u8, 0xa4_u8, 0x4d_u8, 0xf6_u8, 0x86_u8, 0x1d_u8])
    def query_interface(this : IDirect3D9Ex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3D9Ex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3D9Ex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_software_device(this : IDirect3D9Ex*, pInitializeFunction : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_software_device.call(this, pInitializeFunction)
    end
    def get_adapter_count(this : IDirect3D9Ex*) : UInt32
      @lpVtbl.try &.value.get_adapter_count.call(this)
    end
    def get_adapter_identifier(this : IDirect3D9Ex*, adapter : UInt32, flags : UInt32, pIdentifier : Win32cr::Graphics::Direct3D9::D3DADAPTER_IDENTIFIER9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_identifier.call(this, adapter, flags, pIdentifier)
    end
    def get_adapter_mode_count(this : IDirect3D9Ex*, adapter : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : UInt32
      @lpVtbl.try &.value.get_adapter_mode_count.call(this, adapter, format)
    end
    def enum_adapter_modes(this : IDirect3D9Ex*, adapter : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, mode : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_adapter_modes.call(this, adapter, format, mode, pMode)
    end
    def get_adapter_display_mode(this : IDirect3D9Ex*, adapter : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_display_mode.call(this, adapter, pMode)
    end
    def check_device_type(this : IDirect3D9Ex*, adapter : UInt32, dev_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, back_buffer_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, bWindowed : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_type.call(this, adapter, dev_type, adapter_format, back_buffer_format, bWindowed)
    end
    def check_device_format(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, usage : UInt32, r_type : Win32cr::Graphics::Direct3D9::D3DRESOURCETYPE, check_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_format.call(this, adapter, device_type, adapter_format, usage, r_type, check_format)
    end
    def check_device_multi_sample_type(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, surface_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, windowed : Win32cr::Foundation::BOOL, multi_sample_type : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, pQualityLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_multi_sample_type.call(this, adapter, device_type, surface_format, windowed, multi_sample_type, pQualityLevels)
    end
    def check_depth_stencil_match(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, adapter_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, depth_stencil_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_depth_stencil_match.call(this, adapter, device_type, adapter_format, render_target_format, depth_stencil_format)
    end
    def check_device_format_conversion(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, source_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_format_conversion.call(this, adapter, device_type, source_format, target_format)
    end
    def get_device_caps(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, pCaps : Win32cr::Graphics::Direct3D9::D3DCAPS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_caps.call(this, adapter, device_type, pCaps)
    end
    def get_adapter_monitor(this : IDirect3D9Ex*, adapter : UInt32) : Win32cr::Graphics::Gdi::HMONITOR
      @lpVtbl.try &.value.get_adapter_monitor.call(this, adapter)
    end
    def create_device(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, hFocusWindow : Win32cr::Foundation::HWND, behavior_flags : UInt32, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, ppReturnedDeviceInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device.call(this, adapter, device_type, hFocusWindow, behavior_flags, pPresentationParameters, ppReturnedDeviceInterface)
    end
    def get_adapter_mode_count_ex(this : IDirect3D9Ex*, adapter : UInt32, pFilter : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEFILTER*) : UInt32
      @lpVtbl.try &.value.get_adapter_mode_count_ex.call(this, adapter, pFilter)
    end
    def enum_adapter_modes_ex(this : IDirect3D9Ex*, adapter : UInt32, pFilter : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEFILTER*, mode : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_adapter_modes_ex.call(this, adapter, pFilter, mode, pMode)
    end
    def get_adapter_display_mode_ex(this : IDirect3D9Ex*, adapter : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, pRotation : Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_display_mode_ex.call(this, adapter, pMode, pRotation)
    end
    def create_device_ex(this : IDirect3D9Ex*, adapter : UInt32, device_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, hFocusWindow : Win32cr::Foundation::HWND, behavior_flags : UInt32, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, pFullscreenDisplayMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, ppReturnedDeviceInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_device_ex.call(this, adapter, device_type, hFocusWindow, behavior_flags, pPresentationParameters, pFullscreenDisplayMode, ppReturnedDeviceInterface)
    end
    def get_adapter_luid(this : IDirect3D9Ex*, adapter : UInt32, pLUID : Win32cr::Foundation::LUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_luid.call(this, adapter, pLUID)
    end

  end

  @[Extern]
  record IDirect3DDevice9ExVtbl,
    query_interface : Proc(IDirect3DDevice9Ex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DDevice9Ex*, UInt32),
    release : Proc(IDirect3DDevice9Ex*, UInt32),
    test_cooperative_level : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HRESULT),
    get_available_texture_mem : Proc(IDirect3DDevice9Ex*, UInt32),
    evict_managed_resources : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HRESULT),
    get_direct3_d : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    get_device_caps : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DCAPS9*, Win32cr::Foundation::HRESULT),
    get_display_mode : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_creation_parameters : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DDEVICE_CREATION_PARAMETERS*, Win32cr::Foundation::HRESULT),
    set_cursor_properties : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_cursor_position : Proc(IDirect3DDevice9Ex*, Int32, Int32, UInt32, Void),
    show_cursor : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL),
    create_additional_swap_chain : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Void**, Win32cr::Foundation::HRESULT),
    get_swap_chain : Proc(IDirect3DDevice9Ex*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_number_of_swap_chains : Proc(IDirect3DDevice9Ex*, UInt32),
    reset : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    present : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::RGNDATA*, Win32cr::Foundation::HRESULT),
    get_back_buffer : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_raster_status : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*, Win32cr::Foundation::HRESULT),
    set_dialog_box_mode : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_gamma_ramp : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*, Void),
    get_gamma_ramp : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*, Void),
    create_texture : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_volume_texture : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_cube_texture : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_vertex_buffer : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_index_buffer : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_render_target : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_depth_stencil_surface : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    update_surface : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::RECT*, Void*, Win32cr::Foundation::POINT*, Win32cr::Foundation::HRESULT),
    update_texture : Proc(IDirect3DDevice9Ex*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_render_target_data : Proc(IDirect3DDevice9Ex*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_front_buffer_data : Proc(IDirect3DDevice9Ex*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    stretch_rect : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::RECT*, Void*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE, Win32cr::Foundation::HRESULT),
    color_fill : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::RECT*, UInt32, Win32cr::Foundation::HRESULT),
    create_offscreen_plain_surface : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    set_render_target : Proc(IDirect3DDevice9Ex*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_render_target : Proc(IDirect3DDevice9Ex*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_depth_stencil_surface : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_depth_stencil_surface : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    begin_scene : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HRESULT),
    end_scene : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HRESULT),
    clear : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DRECT*, UInt32, UInt32, Float32, UInt32, Win32cr::Foundation::HRESULT),
    set_transform : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    get_transform : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    multiply_transform : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, Win32cr::Graphics::Direct3D::D3DMATRIX*, Win32cr::Foundation::HRESULT),
    set_viewport : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*, Win32cr::Foundation::HRESULT),
    get_viewport : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*, Win32cr::Foundation::HRESULT),
    set_material : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DMATERIAL9*, Win32cr::Foundation::HRESULT),
    get_material : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DMATERIAL9*, Win32cr::Foundation::HRESULT),
    set_light : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DLIGHT9*, Win32cr::Foundation::HRESULT),
    get_light : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DLIGHT9*, Win32cr::Foundation::HRESULT),
    light_enable : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_light_enable : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_clip_plane : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    get_clip_plane : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_render_state : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    get_render_state : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    create_state_block : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DSTATEBLOCKTYPE, Void**, Win32cr::Foundation::HRESULT),
    begin_state_block : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HRESULT),
    end_state_block : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    set_clip_status : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*, Win32cr::Foundation::HRESULT),
    get_clip_status : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*, Win32cr::Foundation::HRESULT),
    get_texture : Proc(IDirect3DDevice9Ex*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_texture : Proc(IDirect3DDevice9Ex*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_texture_stage_state : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    set_texture_stage_state : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    get_sampler_state : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, UInt32*, Win32cr::Foundation::HRESULT),
    set_sampler_state : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, UInt32, Win32cr::Foundation::HRESULT),
    validate_device : Proc(IDirect3DDevice9Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    set_palette_entries : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    get_palette_entries : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    set_current_texture_palette : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_texture_palette : Proc(IDirect3DDevice9Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    set_scissor_rect : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_scissor_rect : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_software_vertex_processing : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_software_vertex_processing : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::BOOL),
    set_n_patch_mode : Proc(IDirect3DDevice9Ex*, Float32, Win32cr::Foundation::HRESULT),
    get_n_patch_mode : Proc(IDirect3DDevice9Ex*, Float32),
    draw_primitive : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    draw_indexed_primitive : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, Int32, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    draw_primitive_up : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    draw_indexed_primitive_up : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, UInt32, UInt32, UInt32, Void*, Win32cr::Graphics::Direct3D9::D3DFORMAT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    process_vertices : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, UInt32, Void*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_vertex_declaration : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_declaration : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_vertex_declaration : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    set_fvf : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::HRESULT),
    get_fvf : Proc(IDirect3DDevice9Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    create_vertex_shader : Proc(IDirect3DDevice9Ex*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_shader : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_vertex_shader : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_f : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_f : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_i : Proc(IDirect3DDevice9Ex*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_i : Proc(IDirect3DDevice9Ex*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    set_vertex_shader_constant_b : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    get_vertex_shader_constant_b : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    set_stream_source : Proc(IDirect3DDevice9Ex*, UInt32, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_source : Proc(IDirect3DDevice9Ex*, UInt32, Void**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_source_freq : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_source_freq : Proc(IDirect3DDevice9Ex*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_indices : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_indices : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    create_pixel_shader : Proc(IDirect3DDevice9Ex*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    set_pixel_shader : Proc(IDirect3DDevice9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_pixel_shader : Proc(IDirect3DDevice9Ex*, Void**, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_f : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_f : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, UInt32, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_i : Proc(IDirect3DDevice9Ex*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_i : Proc(IDirect3DDevice9Ex*, UInt32, Int32*, UInt32, Win32cr::Foundation::HRESULT),
    set_pixel_shader_constant_b : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    get_pixel_shader_constant_b : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::BOOL*, UInt32, Win32cr::Foundation::HRESULT),
    draw_rect_patch : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, Win32cr::Graphics::Direct3D9::D3DRECTPATCH_INFO*, Win32cr::Foundation::HRESULT),
    draw_tri_patch : Proc(IDirect3DDevice9Ex*, UInt32, Float32*, Win32cr::Graphics::Direct3D9::D3DTRIPATCH_INFO*, Win32cr::Foundation::HRESULT),
    delete_patch : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::HRESULT),
    create_query : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DQUERYTYPE, Void**, Win32cr::Foundation::HRESULT),
    set_convolution_mono_kernel : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    compose_rects : Proc(IDirect3DDevice9Ex*, Void*, Void*, Void*, UInt32, Void*, Win32cr::Graphics::Direct3D9::D3DCOMPOSERECTSOP, Int32, Int32, Win32cr::Foundation::HRESULT),
    present_ex : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::RGNDATA*, UInt32, Win32cr::Foundation::HRESULT),
    get_gpu_thread_priority : Proc(IDirect3DDevice9Ex*, Int32*, Win32cr::Foundation::HRESULT),
    set_gpu_thread_priority : Proc(IDirect3DDevice9Ex*, Int32, Win32cr::Foundation::HRESULT),
    wait_for_v_blank : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::HRESULT),
    check_resource_residency : Proc(IDirect3DDevice9Ex*, Void**, UInt32, Win32cr::Foundation::HRESULT),
    set_maximum_frame_latency : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Foundation::HRESULT),
    get_maximum_frame_latency : Proc(IDirect3DDevice9Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    check_device_state : Proc(IDirect3DDevice9Ex*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    create_render_target_ex : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, UInt32, Win32cr::Foundation::HRESULT),
    create_offscreen_plain_surface_ex : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, Void**, Win32cr::Foundation::HANDLE*, UInt32, Win32cr::Foundation::HRESULT),
    create_depth_stencil_surface_ex : Proc(IDirect3DDevice9Ex*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, UInt32, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HANDLE*, UInt32, Win32cr::Foundation::HRESULT),
    reset_ex : Proc(IDirect3DDevice9Ex*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Foundation::HRESULT),
    get_display_mode_ex : Proc(IDirect3DDevice9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DDevice9Ex, lpVtbl : IDirect3DDevice9ExVtbl* do
    GUID = LibC::GUID.new(0xb18b10ce_u32, 0x2649_u16, 0x405a_u16, StaticArray[0x87_u8, 0xf_u8, 0x95_u8, 0xf7_u8, 0x77_u8, 0xd4_u8, 0x31_u8, 0x3a_u8])
    def query_interface(this : IDirect3DDevice9Ex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DDevice9Ex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DDevice9Ex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def test_cooperative_level(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.test_cooperative_level.call(this)
    end
    def get_available_texture_mem(this : IDirect3DDevice9Ex*) : UInt32
      @lpVtbl.try &.value.get_available_texture_mem.call(this)
    end
    def evict_managed_resources(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict_managed_resources.call(this)
    end
    def get_direct3_d(this : IDirect3DDevice9Ex*, ppD3D9 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct3_d.call(this, ppD3D9)
    end
    def get_device_caps(this : IDirect3DDevice9Ex*, pCaps : Win32cr::Graphics::Direct3D9::D3DCAPS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_caps.call(this, pCaps)
    end
    def get_display_mode(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode.call(this, iSwapChain, pMode)
    end
    def get_creation_parameters(this : IDirect3DDevice9Ex*, pParameters : Win32cr::Graphics::Direct3D9::D3DDEVICE_CREATION_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_creation_parameters.call(this, pParameters)
    end
    def set_cursor_properties(this : IDirect3DDevice9Ex*, x_hot_spot : UInt32, y_hot_spot : UInt32, pCursorBitmap : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cursor_properties.call(this, x_hot_spot, y_hot_spot, pCursorBitmap)
    end
    def set_cursor_position(this : IDirect3DDevice9Ex*, x : Int32, y : Int32, flags : UInt32) : Void
      @lpVtbl.try &.value.set_cursor_position.call(this, x, y, flags)
    end
    def show_cursor(this : IDirect3DDevice9Ex*, bShow : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.show_cursor.call(this, bShow)
    end
    def create_additional_swap_chain(this : IDirect3DDevice9Ex*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, pSwapChain : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_additional_swap_chain.call(this, pPresentationParameters, pSwapChain)
    end
    def get_swap_chain(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pSwapChain : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_swap_chain.call(this, iSwapChain, pSwapChain)
    end
    def get_number_of_swap_chains(this : IDirect3DDevice9Ex*) : UInt32
      @lpVtbl.try &.value.get_number_of_swap_chains.call(this)
    end
    def reset(this : IDirect3DDevice9Ex*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pPresentationParameters)
    end
    def present(this : IDirect3DDevice9Ex*, pSourceRect : Win32cr::Foundation::RECT*, pDestRect : Win32cr::Foundation::RECT*, hDestWindowOverride : Win32cr::Foundation::HWND, pDirtyRegion : Win32cr::Graphics::Gdi::RGNDATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present.call(this, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion)
    end
    def get_back_buffer(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, iBackBuffer : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, ppBackBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_back_buffer.call(this, iSwapChain, iBackBuffer, type__, ppBackBuffer)
    end
    def get_raster_status(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pRasterStatus : Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raster_status.call(this, iSwapChain, pRasterStatus)
    end
    def set_dialog_box_mode(this : IDirect3DDevice9Ex*, bEnableDialogs : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dialog_box_mode.call(this, bEnableDialogs)
    end
    def set_gamma_ramp(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, flags : UInt32, pRamp : Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*) : Void
      @lpVtbl.try &.value.set_gamma_ramp.call(this, iSwapChain, flags, pRamp)
    end
    def get_gamma_ramp(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pRamp : Win32cr::Graphics::Direct3D9::D3DGAMMARAMP*) : Void
      @lpVtbl.try &.value.get_gamma_ramp.call(this, iSwapChain, pRamp)
    end
    def create_texture(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture.call(this, width, height, levels, usage, format, pool, ppTexture, pSharedHandle)
    end
    def create_volume_texture(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, depth : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppVolumeTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_volume_texture.call(this, width, height, depth, levels, usage, format, pool, ppVolumeTexture, pSharedHandle)
    end
    def create_cube_texture(this : IDirect3DDevice9Ex*, edge_length : UInt32, levels : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppCubeTexture : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_cube_texture.call(this, edge_length, levels, usage, format, pool, ppCubeTexture, pSharedHandle)
    end
    def create_vertex_buffer(this : IDirect3DDevice9Ex*, length : UInt32, usage : UInt32, fvf : UInt32, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppVertexBuffer : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_buffer.call(this, length, usage, fvf, pool, ppVertexBuffer, pSharedHandle)
    end
    def create_index_buffer(this : IDirect3DDevice9Ex*, length : UInt32, usage : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppIndexBuffer : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_index_buffer.call(this, length, usage, format, pool, ppIndexBuffer, pSharedHandle)
    end
    def create_render_target(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, lockable : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_render_target.call(this, width, height, format, multi_sample, multisample_quality, lockable, ppSurface, pSharedHandle)
    end
    def create_depth_stencil_surface(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, discard : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_surface.call(this, width, height, format, multi_sample, multisample_quality, discard, ppSurface, pSharedHandle)
    end
    def update_surface(this : IDirect3DDevice9Ex*, pSourceSurface : Void*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationSurface : Void*, pDestPoint : Win32cr::Foundation::POINT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_surface.call(this, pSourceSurface, pSourceRect, pDestinationSurface, pDestPoint)
    end
    def update_texture(this : IDirect3DDevice9Ex*, pSourceTexture : Void*, pDestinationTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_texture.call(this, pSourceTexture, pDestinationTexture)
    end
    def get_render_target_data(this : IDirect3DDevice9Ex*, pRenderTarget : Void*, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target_data.call(this, pRenderTarget, pDestSurface)
    end
    def get_front_buffer_data(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_front_buffer_data.call(this, iSwapChain, pDestSurface)
    end
    def stretch_rect(this : IDirect3DDevice9Ex*, pSourceSurface : Void*, pSourceRect : Win32cr::Foundation::RECT*, pDestSurface : Void*, pDestRect : Win32cr::Foundation::RECT*, filter : Win32cr::Graphics::Direct3D9::D3DTEXTUREFILTERTYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stretch_rect.call(this, pSourceSurface, pSourceRect, pDestSurface, pDestRect, filter)
    end
    def color_fill(this : IDirect3DDevice9Ex*, pSurface : Void*, pRect : Win32cr::Foundation::RECT*, color : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.color_fill.call(this, pSurface, pRect, color)
    end
    def create_offscreen_plain_surface(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offscreen_plain_surface.call(this, width, height, format, pool, ppSurface, pSharedHandle)
    end
    def set_render_target(this : IDirect3DDevice9Ex*, render_target_index : UInt32, pRenderTarget : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_target.call(this, render_target_index, pRenderTarget)
    end
    def get_render_target(this : IDirect3DDevice9Ex*, render_target_index : UInt32, ppRenderTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target.call(this, render_target_index, ppRenderTarget)
    end
    def set_depth_stencil_surface(this : IDirect3DDevice9Ex*, pNewZStencil : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_depth_stencil_surface.call(this, pNewZStencil)
    end
    def get_depth_stencil_surface(this : IDirect3DDevice9Ex*, ppZStencilSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_depth_stencil_surface.call(this, ppZStencilSurface)
    end
    def begin_scene(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_scene.call(this)
    end
    def end_scene(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_scene.call(this)
    end
    def clear(this : IDirect3DDevice9Ex*, count : UInt32, pRects : Win32cr::Graphics::Direct3D9::D3DRECT*, flags : UInt32, color : UInt32, z : Float32, stencil : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this, count, pRects, flags, color, z, stencil)
    end
    def set_transform(this : IDirect3DDevice9Ex*, state : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, pMatrix : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transform.call(this, state, pMatrix)
    end
    def get_transform(this : IDirect3DDevice9Ex*, state : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, pMatrix : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform.call(this, state, pMatrix)
    end
    def multiply_transform(this : IDirect3DDevice9Ex*, param0 : Win32cr::Graphics::Direct3D9::D3DTRANSFORMSTATETYPE, param1 : Win32cr::Graphics::Direct3D::D3DMATRIX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.multiply_transform.call(this, param0, param1)
    end
    def set_viewport(this : IDirect3DDevice9Ex*, pViewport : Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_viewport.call(this, pViewport)
    end
    def get_viewport(this : IDirect3DDevice9Ex*, pViewport : Win32cr::Graphics::Direct3D9::D3DVIEWPORT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_viewport.call(this, pViewport)
    end
    def set_material(this : IDirect3DDevice9Ex*, pMaterial : Win32cr::Graphics::Direct3D9::D3DMATERIAL9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_material.call(this, pMaterial)
    end
    def get_material(this : IDirect3DDevice9Ex*, pMaterial : Win32cr::Graphics::Direct3D9::D3DMATERIAL9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_material.call(this, pMaterial)
    end
    def set_light(this : IDirect3DDevice9Ex*, index : UInt32, param1 : Win32cr::Graphics::Direct3D9::D3DLIGHT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_light.call(this, index, param1)
    end
    def get_light(this : IDirect3DDevice9Ex*, index : UInt32, param1 : Win32cr::Graphics::Direct3D9::D3DLIGHT9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_light.call(this, index, param1)
    end
    def light_enable(this : IDirect3DDevice9Ex*, index : UInt32, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.light_enable.call(this, index, enable)
    end
    def get_light_enable(this : IDirect3DDevice9Ex*, index : UInt32, pEnable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_light_enable.call(this, index, pEnable)
    end
    def set_clip_plane(this : IDirect3DDevice9Ex*, index : UInt32, pPlane : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_plane.call(this, index, pPlane)
    end
    def get_clip_plane(this : IDirect3DDevice9Ex*, index : UInt32, pPlane : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_plane.call(this, index, pPlane)
    end
    def set_render_state(this : IDirect3DDevice9Ex*, state : Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_state.call(this, state, value)
    end
    def get_render_state(this : IDirect3DDevice9Ex*, state : Win32cr::Graphics::Direct3D9::D3DRENDERSTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_state.call(this, state, pValue)
    end
    def create_state_block(this : IDirect3DDevice9Ex*, type__ : Win32cr::Graphics::Direct3D9::D3DSTATEBLOCKTYPE, ppSB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_block.call(this, type__, ppSB)
    end
    def begin_state_block(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_state_block.call(this)
    end
    def end_state_block(this : IDirect3DDevice9Ex*, ppSB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_state_block.call(this, ppSB)
    end
    def set_clip_status(this : IDirect3DDevice9Ex*, pClipStatus : Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_status.call(this, pClipStatus)
    end
    def get_clip_status(this : IDirect3DDevice9Ex*, pClipStatus : Win32cr::Graphics::Direct3D9::D3DCLIPSTATUS9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_status.call(this, pClipStatus)
    end
    def get_texture(this : IDirect3DDevice9Ex*, stage : UInt32, ppTexture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_texture.call(this, stage, ppTexture)
    end
    def set_texture(this : IDirect3DDevice9Ex*, stage : UInt32, pTexture : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_texture.call(this, stage, pTexture)
    end
    def get_texture_stage_state(this : IDirect3DDevice9Ex*, stage : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_texture_stage_state.call(this, stage, type__, pValue)
    end
    def set_texture_stage_state(this : IDirect3DDevice9Ex*, stage : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DTEXTURESTAGESTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_texture_stage_state.call(this, stage, type__, value)
    end
    def get_sampler_state(this : IDirect3DDevice9Ex*, sampler : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, pValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sampler_state.call(this, sampler, type__, pValue)
    end
    def set_sampler_state(this : IDirect3DDevice9Ex*, sampler : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DSAMPLERSTATETYPE, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sampler_state.call(this, sampler, type__, value)
    end
    def validate_device(this : IDirect3DDevice9Ex*, pNumPasses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_device.call(this, pNumPasses)
    end
    def set_palette_entries(this : IDirect3DDevice9Ex*, palette_number : UInt32, pEntries : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_palette_entries.call(this, palette_number, pEntries)
    end
    def get_palette_entries(this : IDirect3DDevice9Ex*, palette_number : UInt32, pEntries : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_palette_entries.call(this, palette_number, pEntries)
    end
    def set_current_texture_palette(this : IDirect3DDevice9Ex*, palette_number : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_texture_palette.call(this, palette_number)
    end
    def get_current_texture_palette(this : IDirect3DDevice9Ex*, palette_number : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_texture_palette.call(this, palette_number)
    end
    def set_scissor_rect(this : IDirect3DDevice9Ex*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scissor_rect.call(this, pRect)
    end
    def get_scissor_rect(this : IDirect3DDevice9Ex*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scissor_rect.call(this, pRect)
    end
    def set_software_vertex_processing(this : IDirect3DDevice9Ex*, bSoftware : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_software_vertex_processing.call(this, bSoftware)
    end
    def get_software_vertex_processing(this : IDirect3DDevice9Ex*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_software_vertex_processing.call(this)
    end
    def set_n_patch_mode(this : IDirect3DDevice9Ex*, nSegments : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_n_patch_mode.call(this, nSegments)
    end
    def get_n_patch_mode(this : IDirect3DDevice9Ex*) : Float32
      @lpVtbl.try &.value.get_n_patch_mode.call(this)
    end
    def draw_primitive(this : IDirect3DDevice9Ex*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, start_vertex : UInt32, primitive_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_primitive.call(this, primitive_type, start_vertex, primitive_count)
    end
    def draw_indexed_primitive(this : IDirect3DDevice9Ex*, param0 : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, base_vertex_index : Int32, min_vertex_index : UInt32, num_vertices : UInt32, startIndex : UInt32, primCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_indexed_primitive.call(this, param0, base_vertex_index, min_vertex_index, num_vertices, startIndex, primCount)
    end
    def draw_primitive_up(this : IDirect3DDevice9Ex*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, primitive_count : UInt32, pVertexStreamZeroData : Void*, vertex_stream_zero_stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_primitive_up.call(this, primitive_type, primitive_count, pVertexStreamZeroData, vertex_stream_zero_stride)
    end
    def draw_indexed_primitive_up(this : IDirect3DDevice9Ex*, primitive_type : Win32cr::Graphics::Direct3D9::D3DPRIMITIVETYPE, min_vertex_index : UInt32, num_vertices : UInt32, primitive_count : UInt32, pIndexData : Void*, index_data_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pVertexStreamZeroData : Void*, vertex_stream_zero_stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_indexed_primitive_up.call(this, primitive_type, min_vertex_index, num_vertices, primitive_count, pIndexData, index_data_format, pVertexStreamZeroData, vertex_stream_zero_stride)
    end
    def process_vertices(this : IDirect3DDevice9Ex*, src_start_index : UInt32, dest_index : UInt32, vertex_count : UInt32, pDestBuffer : Void*, pVertexDecl : Void*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_vertices.call(this, src_start_index, dest_index, vertex_count, pDestBuffer, pVertexDecl, flags)
    end
    def create_vertex_declaration(this : IDirect3DDevice9Ex*, pVertexElements : Win32cr::Graphics::Direct3D9::D3DVERTEXELEMENT9*, ppDecl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_declaration.call(this, pVertexElements, ppDecl)
    end
    def set_vertex_declaration(this : IDirect3DDevice9Ex*, pDecl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_declaration.call(this, pDecl)
    end
    def get_vertex_declaration(this : IDirect3DDevice9Ex*, ppDecl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_declaration.call(this, ppDecl)
    end
    def set_fvf(this : IDirect3DDevice9Ex*, fvf : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_fvf.call(this, fvf)
    end
    def get_fvf(this : IDirect3DDevice9Ex*, pFVF : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fvf.call(this, pFVF)
    end
    def create_vertex_shader(this : IDirect3DDevice9Ex*, pFunction : UInt32*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_shader.call(this, pFunction, ppShader)
    end
    def set_vertex_shader(this : IDirect3DDevice9Ex*, pShader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader.call(this, pShader)
    end
    def get_vertex_shader(this : IDirect3DDevice9Ex*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader.call(this, ppShader)
    end
    def set_vertex_shader_constant_f(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def get_vertex_shader_constant_f(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def set_vertex_shader_constant_i(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def get_vertex_shader_constant_i(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def set_vertex_shader_constant_b(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vertex_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def get_vertex_shader_constant_b(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def set_stream_source(this : IDirect3DDevice9Ex*, stream_number : UInt32, pStreamData : Void*, offset_in_bytes : UInt32, stride : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_source.call(this, stream_number, pStreamData, offset_in_bytes, stride)
    end
    def get_stream_source(this : IDirect3DDevice9Ex*, stream_number : UInt32, ppStreamData : Void**, pOffsetInBytes : UInt32*, pStride : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_source.call(this, stream_number, ppStreamData, pOffsetInBytes, pStride)
    end
    def set_stream_source_freq(this : IDirect3DDevice9Ex*, stream_number : UInt32, setting : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_source_freq.call(this, stream_number, setting)
    end
    def get_stream_source_freq(this : IDirect3DDevice9Ex*, stream_number : UInt32, pSetting : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_source_freq.call(this, stream_number, pSetting)
    end
    def set_indices(this : IDirect3DDevice9Ex*, pIndexData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_indices.call(this, pIndexData)
    end
    def get_indices(this : IDirect3DDevice9Ex*, ppIndexData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_indices.call(this, ppIndexData)
    end
    def create_pixel_shader(this : IDirect3DDevice9Ex*, pFunction : UInt32*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pixel_shader.call(this, pFunction, ppShader)
    end
    def set_pixel_shader(this : IDirect3DDevice9Ex*, pShader : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader.call(this, pShader)
    end
    def get_pixel_shader(this : IDirect3DDevice9Ex*, ppShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader.call(this, ppShader)
    end
    def set_pixel_shader_constant_f(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def get_pixel_shader_constant_f(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Float32*, vector4f_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_f.call(this, start_register, pConstantData, vector4f_count)
    end
    def set_pixel_shader_constant_i(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def get_pixel_shader_constant_i(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Int32*, vector4i_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_i.call(this, start_register, pConstantData, vector4i_count)
    end
    def set_pixel_shader_constant_b(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def get_pixel_shader_constant_b(this : IDirect3DDevice9Ex*, start_register : UInt32, pConstantData : Win32cr::Foundation::BOOL*, bool_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_constant_b.call(this, start_register, pConstantData, bool_count)
    end
    def draw_rect_patch(this : IDirect3DDevice9Ex*, handle : UInt32, pNumSegs : Float32*, pRectPatchInfo : Win32cr::Graphics::Direct3D9::D3DRECTPATCH_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_rect_patch.call(this, handle, pNumSegs, pRectPatchInfo)
    end
    def draw_tri_patch(this : IDirect3DDevice9Ex*, handle : UInt32, pNumSegs : Float32*, pTriPatchInfo : Win32cr::Graphics::Direct3D9::D3DTRIPATCH_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_tri_patch.call(this, handle, pNumSegs, pTriPatchInfo)
    end
    def delete_patch(this : IDirect3DDevice9Ex*, handle : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_patch.call(this, handle)
    end
    def create_query(this : IDirect3DDevice9Ex*, type__ : Win32cr::Graphics::Direct3D9::D3DQUERYTYPE, ppQuery : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query.call(this, type__, ppQuery)
    end
    def set_convolution_mono_kernel(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, rows : Float32*, columns : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_convolution_mono_kernel.call(this, width, height, rows, columns)
    end
    def compose_rects(this : IDirect3DDevice9Ex*, pSrc : Void*, pDst : Void*, pSrcRectDescs : Void*, num_rects : UInt32, pDstRectDescs : Void*, operation : Win32cr::Graphics::Direct3D9::D3DCOMPOSERECTSOP, xoffset : Int32, yoffset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compose_rects.call(this, pSrc, pDst, pSrcRectDescs, num_rects, pDstRectDescs, operation, xoffset, yoffset)
    end
    def present_ex(this : IDirect3DDevice9Ex*, pSourceRect : Win32cr::Foundation::RECT*, pDestRect : Win32cr::Foundation::RECT*, hDestWindowOverride : Win32cr::Foundation::HWND, pDirtyRegion : Win32cr::Graphics::Gdi::RGNDATA*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present_ex.call(this, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion, dwFlags)
    end
    def get_gpu_thread_priority(this : IDirect3DDevice9Ex*, pPriority : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gpu_thread_priority.call(this, pPriority)
    end
    def set_gpu_thread_priority(this : IDirect3DDevice9Ex*, priority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_gpu_thread_priority.call(this, priority)
    end
    def wait_for_v_blank(this : IDirect3DDevice9Ex*, iSwapChain : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_v_blank.call(this, iSwapChain)
    end
    def check_resource_residency(this : IDirect3DDevice9Ex*, pResourceArray : Void**, num_resources : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_resource_residency.call(this, pResourceArray, num_resources)
    end
    def set_maximum_frame_latency(this : IDirect3DDevice9Ex*, max_latency : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_maximum_frame_latency.call(this, max_latency)
    end
    def get_maximum_frame_latency(this : IDirect3DDevice9Ex*, pMaxLatency : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_frame_latency.call(this, pMaxLatency)
    end
    def check_device_state(this : IDirect3DDevice9Ex*, hDestinationWindow : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_state.call(this, hDestinationWindow)
    end
    def create_render_target_ex(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, lockable : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*, usage : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_render_target_ex.call(this, width, height, format, multi_sample, multisample_quality, lockable, ppSurface, pSharedHandle, usage)
    end
    def create_offscreen_plain_surface_ex(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*, usage : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_offscreen_plain_surface_ex.call(this, width, height, format, pool, ppSurface, pSharedHandle, usage)
    end
    def create_depth_stencil_surface_ex(this : IDirect3DDevice9Ex*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, multi_sample : Win32cr::Graphics::Direct3D9::D3DMULTISAMPLE_TYPE, multisample_quality : UInt32, discard : Win32cr::Foundation::BOOL, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*, usage : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_surface_ex.call(this, width, height, format, multi_sample, multisample_quality, discard, ppSurface, pSharedHandle, usage)
    end
    def reset_ex(this : IDirect3DDevice9Ex*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, pFullscreenDisplayMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_ex.call(this, pPresentationParameters, pFullscreenDisplayMode)
    end
    def get_display_mode_ex(this : IDirect3DDevice9Ex*, iSwapChain : UInt32, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, pRotation : Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode_ex.call(this, iSwapChain, pMode, pRotation)
    end

  end

  @[Extern]
  record IDirect3DSwapChain9ExVtbl,
    query_interface : Proc(IDirect3DSwapChain9Ex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DSwapChain9Ex*, UInt32),
    release : Proc(IDirect3DSwapChain9Ex*, UInt32),
    present : Proc(IDirect3DSwapChain9Ex*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::RGNDATA*, UInt32, Win32cr::Foundation::HRESULT),
    get_front_buffer_data : Proc(IDirect3DSwapChain9Ex*, Void*, Win32cr::Foundation::HRESULT),
    get_back_buffer : Proc(IDirect3DSwapChain9Ex*, UInt32, Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_raster_status : Proc(IDirect3DSwapChain9Ex*, Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*, Win32cr::Foundation::HRESULT),
    get_display_mode : Proc(IDirect3DSwapChain9Ex*, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*, Win32cr::Foundation::HRESULT),
    get_device : Proc(IDirect3DSwapChain9Ex*, Void**, Win32cr::Foundation::HRESULT),
    get_present_parameters : Proc(IDirect3DSwapChain9Ex*, Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_last_present_count : Proc(IDirect3DSwapChain9Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    get_present_stats : Proc(IDirect3DSwapChain9Ex*, Win32cr::Graphics::Direct3D9::D3DPRESENTSTATS*, Win32cr::Foundation::HRESULT),
    get_display_mode_ex : Proc(IDirect3DSwapChain9Ex*, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDirect3DSwapChain9Ex, lpVtbl : IDirect3DSwapChain9ExVtbl* do
    GUID = LibC::GUID.new(0x91886caf_u32, 0x1c3d_u16, 0x4d2e_u16, StaticArray[0xa0_u8, 0xab_u8, 0x3e_u8, 0x4c_u8, 0x7d_u8, 0x8d_u8, 0x33_u8, 0x3_u8])
    def query_interface(this : IDirect3DSwapChain9Ex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DSwapChain9Ex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DSwapChain9Ex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def present(this : IDirect3DSwapChain9Ex*, pSourceRect : Win32cr::Foundation::RECT*, pDestRect : Win32cr::Foundation::RECT*, hDestWindowOverride : Win32cr::Foundation::HWND, pDirtyRegion : Win32cr::Graphics::Gdi::RGNDATA*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present.call(this, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion, dwFlags)
    end
    def get_front_buffer_data(this : IDirect3DSwapChain9Ex*, pDestSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_front_buffer_data.call(this, pDestSurface)
    end
    def get_back_buffer(this : IDirect3DSwapChain9Ex*, iBackBuffer : UInt32, type__ : Win32cr::Graphics::Direct3D9::D3DBACKBUFFER_TYPE, ppBackBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_back_buffer.call(this, iBackBuffer, type__, ppBackBuffer)
    end
    def get_raster_status(this : IDirect3DSwapChain9Ex*, pRasterStatus : Win32cr::Graphics::Direct3D9::D3DRASTER_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raster_status.call(this, pRasterStatus)
    end
    def get_display_mode(this : IDirect3DSwapChain9Ex*, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode.call(this, pMode)
    end
    def get_device(this : IDirect3DSwapChain9Ex*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_present_parameters(this : IDirect3DSwapChain9Ex*, pPresentationParameters : Win32cr::Graphics::Direct3D9::D3DPRESENT_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_present_parameters.call(this, pPresentationParameters)
    end
    def get_last_present_count(this : IDirect3DSwapChain9Ex*, pLastPresentCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_present_count.call(this, pLastPresentCount)
    end
    def get_present_stats(this : IDirect3DSwapChain9Ex*, pPresentationStatistics : Win32cr::Graphics::Direct3D9::D3DPRESENTSTATS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_present_stats.call(this, pPresentationStatistics)
    end
    def get_display_mode_ex(this : IDirect3DSwapChain9Ex*, pMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, pRotation : Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_mode_ex.call(this, pMode, pRotation)
    end

  end

  @[Link("d3d9")]
  lib C
    fun Direct3DCreate9(sdk_version : UInt32) : Void*

    fun D3DPERF_BeginEvent(col : UInt32, wszName : Win32cr::Foundation::PWSTR) : Int32

    fun D3DPERF_EndEvent : Int32

    fun D3DPERF_SetMarker(col : UInt32, wszName : Win32cr::Foundation::PWSTR) : Void

    fun D3DPERF_SetRegion(col : UInt32, wszName : Win32cr::Foundation::PWSTR) : Void

    fun D3DPERF_QueryRepeatFrame : Win32cr::Foundation::BOOL

    fun D3DPERF_SetOptions(dwOptions : UInt32) : Void

    fun D3DPERF_GetStatus : UInt32

    fun Direct3DCreate9Ex(sdk_version : UInt32, param1 : Void**) : Win32cr::Foundation::HRESULT

  end
end